
////////////////////////////////////////////////////////////////////////////////
// Модуль "НакладныеСервер" содержит процедуры и функции для
// поддержки заполнения накладных и функциональности форм документов
// и списков накладных.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет список для отбора распоряжений, исходя из состояния оформления накладных по распоряжениям.
// Используется в формах списков распоряжений на отгрузку.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен сосояниями оформления.
//
Процедура ЗаполнитьСписокСостоянийОформленияНакладной(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Все оформлено'"),        Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Создать накладную'"),    Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2", НСтр("ru='Дооформить накладную'"), Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
КонецПроцедуры

// Заполняет список для отбора распоряжений, исходя из состояния оформления ордеров по распоряжениям.
// Используется в формах списков распоряжений на отгрузку.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен сосояниями оформления.
//
Процедура ЗаполнитьСписокСоответствияОрдеров(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Соответствуют накладным'"),    Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Не оформлены'"),               Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Не соответствуют накладным'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
КонецПроцедуры

// Заполняет заголовок команды подбора по заказам/ордерам.
//
// Параметры:
//   Элемент              - ВсеЭлементыФормы - элемент для заполнения заголовока.
//   Параметры            - Структура        - структура с полями:
//    * ОрдернаяСхемаПриОтгрузке                 - Булево - значение соотвествующей ФО для типа документов.
//    * ИспользоватьЗаказы                       - Булево - значение соотвествующей ФО для типа документов.
//    * ИспользоватьНакладныеПоНесколькимЗаказам - Булево - значение соотвествующей ФО для типа документов.
//   УстанавливатьДоступность                    - Булево - истина, если доступность элемента подлежит обновлению.
//
Процедура НастроитьКомандуПодобратьПоЗаказамОрдерам(Элемент, Параметры, УстанавливатьДоступность = Истина) Экспорт
	
	Если УстанавливатьДоступность Тогда
		Элемент.Видимость = Параметры.ОрдернаяСхемаПриОтгрузке Или Параметры.ИспользоватьЗаказы;
	КонецЕсли;
	
	Если Параметры.ИспользоватьЗаказы Тогда
		
		Если Параметры.ОрдернаяСхемаПриОтгрузке Тогда
			
			Элемент.Заголовок = ?(Параметры.ИспользоватьНакладныеПоНесколькимЗаказам,
				НСтр("ru = 'Подобрать товары по заказам/ордерам'"),
				НСтр("ru = 'Подобрать товары по заказу/ордерам'"));
			
		Иначе
			
			Элемент.Заголовок = ?(Параметры.ИспользоватьНакладныеПоНесколькимЗаказам,
				НСтр("ru = 'Подобрать товары по заказам'"),
				НСтр("ru = 'Подобрать товары по заказу'"));
			
		КонецЕсли;
		
	Иначе
		
		Элемент.Заголовок = НСтр("ru = 'Подобрать товары по ордерам'");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие расходных ордеров по распоряжению.
//
// Параметры:
//  Распоряжения - ДокументСсылка - массив распоряжений-заказов.
//
// Возвращаемое значение:
//  Булево - Истина, если есть ордера, Ложь - если нет ордеров.
//
Функция ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Распоряжения, УчитыватьСобирается = Истина) Экспорт
	
	Запрос = новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , , ,
		|	ДокументОтгрузки В (&Заказы)
		|	И Склад В(
		|		ВЫБРАТЬ
		|			СпрСклады.Ссылка КАК Склад
		|		ИЗ
		|			Справочник.Склады КАК СпрСклады
		|		ГДЕ
		|			СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|			И СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)) КАК Таблица
		|ГДЕ
		|	Таблица.КОтгрузкеРасход + Таблица.СобраноПриход + Таблица.СобираетсяПриход > 0";
	
	Если Не УчитыватьСобирается Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "+ Таблица.СобираетсяПриход", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказы", Распоряжения);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Списывает количество для оформления по ордерам на количество для оформления по заказам.
//
// Параметры:
//  ТаблицаПриемник - ТаблицаЗначений - таблица, содержащая данные для оформления по заказам.
//  ТаблицаИсточник - ТаблицаЗначений - таблица, содержащая данные для оформления по ордерам.
//  ПоляКлюча - Строка - ключ связи таблиц для списания.
//
Процедура ЗаполнитьПоказательКоличествоПоОрдерам(ТаблицаПриемник, ТаблицаИсточник, ПоляКлюча) Экспорт
	
	// Поддержка "старых" назначений, которые не проходят по складу.
	ИмяПоляНазначение = ИмяПоляНазначение(ТаблицаПриемник, ПоляКлюча);
	ДобавитьКолонкуДвиженияПоСкладскимРегистрам(ТаблицаПриемник, ПоляКлюча);
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	Если ТаблицаПриемник.Колонки.Найти("КоличествоВОрдере") = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить("КоличествоВОрдере", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	КонецЕсли;
	Если ТаблицаПриемник.Колонки.Найти("Собирается") = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить("Собирается", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	КонецЕсли;
	
	ТаблицаИсточник.Индексы.Добавить(ПоляКлюча);
	ПараметрыПоиска = Новый Структура(ПоляКлюча);
	
	// Попытка сохранить количество в накладной.
	Для Каждого СтрокаПриемник Из ТаблицаПриемник Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаПриемник);
		Если Не СтрокаПриемник.ДвиженияПоСкладскимРегистрам Тогда
			ПараметрыПоиска[ИмяПоляНазначение] = ПустоеНазначение;
		КонецЕсли;
		НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаИсточник = НайденныеСтроки[0];
			СтрокаПриемник.Собирается = СтрокаИсточник.Собирается;
			КоличествоСписать = Мин(СтрокаИсточник.Количество,
				?(СтрокаПриемник.КоличествоВНакладной > 0, Макс(СтрокаПриемник.КоличествоВНакладной, СтрокаПриемник.КоличествоВЗаказе), 0));
			Если КоличествоСписать > 0 Тогда
				
				СтрокаПриемник.КоличествоВОрдере = КоличествоСписать;
				СтрокаИсточник.Количество = СтрокаИсточник.Количество - КоличествоСписать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополнение отгрузки до заказа.
	Для Каждого СтрокаПриемник Из ТаблицаПриемник Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаПриемник);
		Если Не СтрокаПриемник.ДвиженияПоСкладскимРегистрам Тогда
			ПараметрыПоиска[ИмяПоляНазначение] = ПустоеНазначение;
		КонецЕсли;
		НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаИсточник = НайденныеСтроки[0];
			КоличествоСписать = Мин(СтрокаИсточник.Количество, СтрокаПриемник.КоличествоВЗаказе - СтрокаПриемник.КоличествоВОрдере);
			Если КоличествоСписать > 0 Тогда
				
				СтрокаПриемник.КоличествоВОрдере = СтрокаПриемник.КоличествоВОрдере + КоличествоСписать;
				СтрокаИсточник.Количество = СтрокаИсточник.Количество - КоличествоСписать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление строк сверх заказа.
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		Если СтрокаИсточник.Количество > 0 Тогда
			
			КоличествоСписать = СтрокаИсточник.Количество;
			
			СтрокаПриемник = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
			СтрокаПриемник.КоличествоВОрдере = КоличествоСписать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу по варианту заполнения (по данным заказа или данным ордера).
//
// Параметры:
//  ТаблицаПриемник - ТаблицаЗначений - таблица с обязательными колонками "Количество" и "Количество упаковок".
//  ТаблицаИсточник - ТаблицаЗначений - таблица, содержащая данные для оформления по заказам, либо по заказам и ордерам.
//  ВариантЗаполнения - Строка - "ЗаполнятьПоОрдеру" - если требуется заполнение по ордеру.
//
Процедура ЗаполнитьПоВарианту(Приемник, Источник, ВариантЗаполнения, ДобавлятьСтроки = Истина) Экспорт
	
	Для Каждого СтрокаТаблицы Из Источник Цикл
		
		Если ВариантЗаполнения = "ЗаполнятьПоОрдеру" И СтрокаТаблицы.КоличествоВОрдере = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДобавлятьСтроки Тогда
			НоваяСтрока = Приемник.Добавить();
		Иначе
			НоваяСтрока = Приемник;
		КонецЕсли;
		
		Если ВариантЗаполнения = "ЗаполнятьПоОрдеру" Тогда
			ЗаполнитьСтрокуПоВарианту(НоваяСтрока, СтрокаТаблицы, СтрокаТаблицы.КоличествоВОрдере);
		ИначеЕсли ВариантЗаполнения = "ЗаполнятьПоЗаказу" Тогда
			ЗаполнитьСтрокуПоВарианту(НоваяСтрока, СтрокаТаблицы, СтрокаТаблицы.КоличествоВЗаказе);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет, возможно ли оформление накладных для выделенных документов списка распоряжений к оформлению
// Исходя из состава выделенных распоряжений и параметров оформления накладных.
//
//  Параметры:
//   ДокументыПоВидам - Структура - структура с полями: "Заказы" и "Накладные", ссылки на выделенные документы в спсике рапоряжений.
//   ПоОрдерам - Булево - Истина, если необходимо оформлять накладную по ордерам, ложь, если необходимо оформлять накладную по заказам.
//
//  Возвращаемое значение:
//   Структура - содержит поля: "ЕстьОшибки" - Истина, если нельзя оформить накладную, "ТекстОшибки" - текст ошибки при наличии.
//
Функция ПроверитьСоставДокументовКОформлениюНакладной(ДокументыПоВидам, ПоОрдерам) Экспорт
	
	ДокументыДляОбработки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДляОбработки, ДокументыПоВидам.Накладные);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДляОбработки, ДокументыПоВидам.Заказы);
	
	ТекстОшибки = "";
	Если ПоОрдерам Тогда
		
		Если ДокументыДляОбработки.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Оформление по ордерам недоступно для выделенных документов.
			                                 |Для оформления накладных по ордерам необходимо выделить
			                                 |либо заказы на отгрузку с ордерного склада, либо накладную,
			                                 |которую необходимо перезаполнить по ордерам.'");
			
		ИначеЕсли ДокументыПоВидам.Заказы.Количество() > 0 И ДокументыПоВидам.Накладные.Количество() > 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Оформление по ордерам недоступно для документов различных видов.
			                                 |Для оформления накладных по ордерам необходимо выделить
			                                 |либо заказы на отгрузку с ордерного склада, либо накладную,
			                                 |которую необходимо перезаполнить по ордерам.'");
			
		ИначеЕсли ДокументыПоВидам.СоответствиеОрдера = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Оформление по ордерам недоступно, так как ордера соответствуют накладным.'");
			
		КонецЕсли;
		
	ИначеЕсли ДокументыПоВидам.Заказы.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Оформление по заказам недоступно для выделенных документов.
		                                 |Для оформления накладных по заказам необходимо выделить
		                                 |хотя бы один заказ из списка заказов и накладных.'");
		
	КонецЕсли;
	
	Результат = Новый Структура("ЕстьОшибки, ТекстОшибки", ТекстОшибки <> "", ТекстОшибки);
	Возврат Результат;
	
КонецФункции

// Проверяет возможность выполнения команды "Оформить" для выделенных документов в списке.
//
//  Параметры:
//   Контекст - Структура - определяет контекст (рабочее место) вызова команды. Содержит поля:
//                          "ИмяТипаНакладной" - для использования экспортных функций модуля менеджера накладной.
//                          "НастройкиФормыПереоформления" - настройки формы переоформления накладных
//                                                           (см. функцию "НакладныеСервер.НастройкиФормыПереоформленияНакладных").
//   ПараметрыВыполненияКоманды - Структура - определяет действие, выбранное пользователем в рабочем месте. Содержит поля:
//                                            "ПоОрдерам" - Булево, признак, что заполнение необходимо производить по ордерам.
//                                            "ДокументыПоВидам" - Структура - выбранные документы в спсике для оформления накладных.
//                                                                             (см. функцию "НакладныеКлиент.СсылкиВыделенныхСтрокСпискаПоВидам").
//                                            "Склад" - Склад, отобранный в рабочем месте.
//  Возвращаемое значение:
//   Струкутра - Структура с полями "ЕстьОшибки", "ТекстОшибки".
//
Функция ПроверитьВозможностьВыполненияКомандыОформить(Контекст, ПараметрыВыполненияКоманды) Экспорт
	
	ПоОрдерам        = ПараметрыВыполненияКоманды.ПоОрдерам;
	ДокументыПоВидам = ПараметрыВыполненияКоманды.ДокументыПоВидам;
	Склад            = ПараметрыВыполненияКоманды.Склад;
	
	Если ПоОрдерам Тогда
		
		// Исключение распоряжений на отгрузку с неордерных складов.
		ДокументыПоВидам.Вставить("Заказы",    ЗаказыНаОтгрузкуСОрдерныхСкладов(ДокументыПоВидам.Заказы, ДокументыПоВидам.СвойстваЗаказов));
		ДокументыПоВидам.Вставить("Накладные", ЗаказыНаОтгрузкуСОрдерныхСкладов(ДокументыПоВидам.Накладные, Новый Массив));
		
	КонецЕсли;
	
	// Проверка возможности оформления накладной.
	РезультатПроверки = ПроверитьСоставДокументовКОформлениюНакладной(ДокументыПоВидам, ПоОрдерам);
	РезультатПроверки.Вставить("РеквизитыШапки", Неопределено);
	
	Если Не РезультатПроверки.ЕстьОшибки И ДокументыПоВидам.Заказы.Количество() > 0 Тогда // дополнительная проверка возможности оформления одной накладной по нескольким заказам.
		
		МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ." + Контекст.ИмяТипаНакладной);
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(ДокументыПоВидам.Заказы, ДокументыПоВидам.СвойстваЗаказов);
		РезультатПроверки = МенеджерНакладной.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
		РезультатПроверки.Вставить("РеквизитыШапки", РеквизитыШапки);
		
	КонецЕсли;
	
	Если Не РезультатПроверки.ЕстьОшибки И ПоОрдерам
		И Не ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(ДокументыПоВидам.Заказы, Ложь)
		И Не ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(ДокументыПоВидам.Накладные, Ложь) Тогда
		
		РезультатПроверки.ЕстьОшибки = Истина;
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Оформление по ордерам недоступно, так как отгрузка
		                                           |по выбранным распоряжениям еще не начата.'");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Определяет параметры и имя формы, которую необходимо открыть при выполеннии команд оформления накладных в списке распоряжений к оформлению.
//
//  Параметры:
//   Контекст - Структура - определяет контекст (рабочее место) вызова команды. Содержит поля:
//                          "ИмяТипаНакладной" - для использования экспортных функций модуля менеджера накладной.
//                          "НастройкиФормыПереоформления" - настройки формы переоформления накладных
//                                                           (см. функцию "НакладныеСервер.НастройкиФормыПереоформленияНакладных").
//   ПараметрыВыполненияКоманды - Структура - определяет действие, выбранное пользователем в рабочем месте. Содержит поля:
//                                            "ПоОрдерам" - Булево, признак, что заполнение необходимо производить по ордерам.
//                                            "ДокументыПоВидам" - Структура - выбранные документы в спсике для оформления накладных.
//                                                                             (см. функцию "НакладныеКлиент.СсылкиВыделенныхСтрокСпискаПоВидам").
//                                            "Склад" - Склад, отобранный в рабочем месте.
//   РеквизитыШапки - Стркутура - содержит данные заполнения накладной по заказам.
//
//  Возвращаемое значение:
//   Струкутра - Структура с полями "Имя", "Параметры".
//
Функция ПараметрыИИмяФормыОформленияНакладной(Контекст, ПараметрыВыполненияКоманды, РеквизитыШапки) Экспорт
	
	ПоОрдерам        = ПараметрыВыполненияКоманды.ПоОрдерам;
	ДокументыПоВидам = ПараметрыВыполненияКоманды.ДокументыПоВидам;
	Склад            = ПараметрыВыполненияКоманды.Склад;
	
	ПараметрыИИмяФормы = Новый Структура("ЕстьОшибки, Имя, Параметры", Ложь);
	Если ПоОрдерам И ДокументыПоВидам.Накладные.Количество() > 0 Тогда // перезаполнение по ордерам выделенной накладной
		
		ПараметрыИИмяФормы.Имя = Контекст.НастройкиФормыПереоформления.ИмяФормыНакладной;
		ПерезаполняемаяНакладная = ДокументыПоВидам.Накладные[0];
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(ПерезаполняемаяНакладная);
		ЗначенияЗаполнения = Новый Структура("ЗаполнятьПоОрдеру, МассивЗаказов", Истина, МассивЗаказов);
		ПараметрыИИмяФормы.Параметры = Новый Структура("Ключ, ЗначенияЗаполнения", ПерезаполняемаяНакладная, ЗначенияЗаполнения);
		
	Иначе // оформление накладной по выделенным заказам
		
		Если Не ПоОрдерам Или ДокументыПоВидам.СостояниеНакладной = 1 Тогда // накладных нет, оформление новой накладной
		
			ПараметрыИИмяФормы.Имя = Контекст.НастройкиФормыПереоформления.ИмяФормыНакладной;
			ДанныеЗаполнения = Новый Структура("МассивЗаказов, ЗаполнятьПоОрдеру, РеквизитыШапки",
				ДокументыПоВидам.Заказы, ПоОрдерам, РеквизитыШапки);
			ПараметрыИИмяФормы.Параметры = Новый Структура("Основание", ДанныеЗаполнения);
		
		Иначе // переоформление накладных
		
			ПараметрыИИмяФормы.Имя = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
			ПараметрыИИмяФормы.Параметры = Новый Структура("Заказы, Склад, РеквизитыШапки, НастройкиФормы");
			ПараметрыИИмяФормы.Параметры.Заказы         = ДокументыПоВидам.Заказы;
			ПараметрыИИмяФормы.Параметры.Склад          = Склад;
			ПараметрыИИмяФормы.Параметры.РеквизитыШапки = РеквизитыШапки;
			ПараметрыИИмяФормы.Параметры.НастройкиФормы = Контекст.НастройкиФормыПереоформления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыИИмяФормы;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//   Заказ              - ДокументСсылка.ЗаказНаПеремещение - Документ, на основании которого осуществляется ввод.
//   ЗначенияРеквизитов - Структура                         - структура содержащая поля "Статус" и "Проведен",
//                                                            документа на основании которого осуществляется ввод.
//
// Возвращаемое значение:
//   Строка - текст ошибки, пустая строка если нет ошибок.
//
Функция ПроверитьВозможностьВводаПеремещенияНаОснованииЗаказа(Заказ, ЗначенияРеквизитов) Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение") Тогда
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	КонецЕсли;
	
	ЕстьОшибкиПроведен = Не ЗначенияРеквизитов.ЗаказПроведен;
	ЕстьОшибкиСтатус   = МассивДопустимыхСтатусов.Найти(ЗначенияРеквизитов.Статус) = Неопределено;
	
	ТекстОшибки = ПроверитьВозможностьВводаНаОсновании(
		Заказ, ЗначенияРеквизитов.Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);
	
	ЗначенияРеквизитов.Удалить("Статус");
	ЗначенияРеквизитов.Удалить("Проведен");
	
	Возврат ТекстОшибки;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//   Заказ              - ДокументСсылка.ЗаказНаСборку - документ, на основании которого осуществляется ввод.
//   ЗначенияРеквизитов - Структура                    - структура содержащая поля "Статус" и "Проведен",
//                                                       документа на основании которого осуществляется ввод.
//
// Возвращаемое значение:
//   Строка - текст ошибки, пустая строка, если нет ошибок.
//
Функция ПроверитьВозможностьВводаСборкиНаОснованииЗаказа(Заказ, ЗначенияРеквизитов) Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку") Тогда
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	КонецЕсли;
	
	ЕстьОшибкиПроведен = Не ЗначенияРеквизитов.ЗаказПроведен;
	ЕстьОшибкиСтатус   = МассивДопустимыхСтатусов.Найти(ЗначенияРеквизитов.Статус) = Неопределено;
	
	ТекстОшибки = ПроверитьВозможностьВводаНаОсновании(
		Заказ, ЗначенияРеквизитов.Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);
	
	ЗначенияРеквизитов.Удалить("Статус");
	ЗначенияРеквизитов.Удалить("Проведен");
	
	Возврат ТекстОшибки;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//   Заказ              - ДокументСсылка.ЗаказНаВнутреннееПотребление - документ, на основании которого осуществляется ввод.
//   ЗначенияРеквизитов - Структура                                   - структура, содержащая поля "Статус" и "Проведен",
//                                                                      документа на основании которого осуществляется ввод.
//
// Возвращаемое значение:
//   Строка - текст ошибки, пустая строка, если нет ошибок.
//
Функция ПроверитьВозможностьВводаВнутреннегоПотребленияНаОснованииЗаказа(Заказ, ЗначенияРеквизитов) Экспорт
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		
		МассивДопустимыхСтатусов = Новый Массив;
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
		Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки")
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаВнутреннееПотребление") Тогда
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
		КонецЕсли;
		
	КонецЕсли;
	ЕстьОшибкиПроведен = Не ЗначенияРеквизитов.ЗаказПроведен;
	ЕстьОшибкиСтатус   = МассивДопустимыхСтатусов.Найти(ЗначенияРеквизитов.Статус) = Неопределено;
	
	ТекстОшибки = ПроверитьВозможностьВводаНаОсновании(
		Заказ, ЗначенияРеквизитов.Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);
	
	ЗначенияРеквизитов.Удалить("Статус");
	ЗначенияРеквизитов.Удалить("Проведен");
	
	Возврат ТекстОшибки;
	
КонецФункции

// Разбивает документы одного типа на группы по ключевым полям.
//
// Параметры:
//   ДокументыДляГруппировки	 - Массив, содержащий ссылки на документы.
//   							 - Соответсвие, где значения массивы ссылок на документы,
//   							   а ключ доп. признак по которому уже сгруппированы документы.
//   КлючевыеПоля				 - Строка, перечисление реквизитов документа по которым будет происходить группировка.
//
// Возвращаемое значение:
//   Массив - содержит группы документов в виде массивов ссылок.
//   Соответствие - содержит группы документов в виде массивов ссылок в значениях, с ключами из доп. признаков группировки.
//
Функция СгруппироватьДокументыПоКлючевымПолям(ДокументыДляГруппировки, КлючевыеПоля) Экспорт
	
	ЭтоСоответствие = ТипЗнч(ДокументыДляГруппировки) = Тип("Соответствие");
	
	СгруппированныеДокументы = ?(ЭтоСоответствие, Новый Соответствие, Новый Массив);
	
	Если Не ЗначениеЗаполнено(ДокументыДляГруппировки) Тогда
		Возврат СгруппированныеДокументы;
	КонецЕсли;
		
	Схема = Новый СхемаЗапроса;
	Схема.ПакетЗапросов[0].ТаблицаДляПомещения = "ВтИсходныеДанные";
	ОператорИсходнойТаблицы = Схема.ПакетЗапросов[0].Операторы[0];
	
	Если ЭтоСоответствие Тогда
		Для каждого КлючЗначение Из ДокументыДляГруппировки Цикл
			ОператорИсходнойТаблицы.Источники.Добавить(КлючЗначение.Значение[0].Метаданные().ПолноеИмя());
			Прервать;
		КонецЦикла;
	Иначе
		ОператорИсходнойТаблицы.Источники.Добавить(ДокументыДляГруппировки[0].Метаданные().ПолноеИмя());
	КонецЕсли;
	
	Схема.ПакетЗапросов.Добавить();
	ОператорВыборки = Схема.ПакетЗапросов[1].Операторы[0];
	ОператорВыборки.Источники.Добавить("ВтИсходныеДанные");
	ОператорВыборки.ВыбиратьРазличные = Истина;
	
	ОператорИсходнойТаблицы.ВыбираемыеПоля.Добавить("Ссылка");
	МассивКлючевыхПолей = СтрРазделить(КлючевыеПоля, ",", Ложь);
	ИндексКолонки = 1;
	ПоляОтбора = "";
	Для каждого Поле Из МассивКлючевыхПолей Цикл
		ОператорИсходнойТаблицы.ВыбираемыеПоля.Добавить(СокрЛП(Поле));
		ОператорВыборки.ВыбираемыеПоля.Добавить(Схема.ПакетЗапросов[0].Колонки[ИндексКолонки].Псевдоним);
		ПоляОтбора = ПоляОтбора + "," + Схема.ПакетЗапросов[0].Колонки[ИндексКолонки].Псевдоним;
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;
	
	Если ЭтоСоответствие Тогда
		НомерПараметра = ДокументыДляГруппировки.Количество();
		Пока НомерПараметра > 1 Цикл
			НовыйОператор = Схема.ПакетЗапросов[0].Операторы.Добавить(ОператорИсходнойТаблицы);
			НовыйОператор.Отбор.Добавить("Ссылка В (&Документы" + НомерПараметра + ")");
			НовыйОператор.ВыбираемыеПоля.Добавить("&ДопПоле" + НомерПараметра);
			НомерПараметра = НомерПараметра - 1;
		КонецЦикла;
		
		ОператорИсходнойТаблицы.Отбор.Добавить("Ссылка В (&Документы1)");
		ОператорИсходнойТаблицы.ВыбираемыеПоля.Добавить("&ДопПоле1");
		
		ПсевдонимДопПоля = Схема.ПакетЗапросов[0].Колонки[ИндексКолонки].Псевдоним;
		ОператорВыборки.ВыбираемыеПоля.Добавить(ПсевдонимДопПоля);
		ПоляОтбора = ПоляОтбора + "," + ПсевдонимДопПоля;
	Иначе
		ОператорИсходнойТаблицы.Отбор.Добавить("Ссылка В (&Документы)");
	КонецЕсли;
	
	Запрос = Новый Запрос(Схема.ПолучитьТекстЗапроса());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ЭтоСоответствие Тогда
		НомерПараметра = 1;
		Для каждого КлючЗначение Из ДокументыДляГруппировки Цикл
			Запрос.УстановитьПараметр("Документы" + НомерПараметра, КлючЗначение.Значение);
			Запрос.УстановитьПараметр("ДопПоле" + НомерПараметра, КлючЗначение.Ключ);
			НомерПараметра = НомерПараметра + 1;
		КонецЦикла;
	Иначе
		Запрос.УстановитьПараметр("Документы", ДокументыДляГруппировки);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИсходнаяТаблица = Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить();
	Отбор = Новый Структура(ПоляОтбора);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		МассивДокументов = ИсходнаяТаблица.НайтиСтроки(Отбор);
		Для Индекс = 0 По МассивДокументов.ВГраница() Цикл
			МассивДокументов[Индекс] = МассивДокументов[Индекс].Ссылка;
		КонецЦикла;
		Если ЭтоСоответствие Тогда
			Если СгруппированныеДокументы[Выборка[ПсевдонимДопПоля]] = Неопределено Тогда
				СгруппированныеДокументы.Вставить(Выборка[ПсевдонимДопПоля], Новый Массив);
			КонецЕсли;
			СгруппированныеДокументы[Выборка[ПсевдонимДопПоля]].Добавить(МассивДокументов);
		Иначе
			СгруппированныеДокументы.Добавить(МассивДокументов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СгруппированныеДокументы;

КонецФункции

// Формирует документы по списку групп распоряжений.
//
// Параметры:
//   СгруппированныеРаспоряжения	 - Массив - содержит массивы групп распоряжений по которым необходимо создать документ.
//   ПараметрыЗаполнения			 - Структура - параметры получаемые в методе ПараметрыЗаполненияДокумента() менеджера документа.
//   СписокОшибок					 - Структура - список ошибок.
//   ПолеОшибки						 - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//
// Возвращаемое значение:
//   Массив - содержит ссылки на созданные документы.
//
Функция СформироватьДокументыПоРаспоряжениям(СгруппированныеРаспоряжения, ПараметрыЗаполнения, СписокОшибок, ПолеОшибки) Экспорт
	
	СозданныеДокументы = Новый Массив;
	МенеджерНакладной = Документы[ПараметрыЗаполнения.ИмяДокумента];
	
	Для каждого ГруппаРаспоряжений Из СгруппированныеРаспоряжения Цикл
		
		ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
		
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(ГруппаРаспоряжений);
		
		МенеджерНакладной.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, ГруппаРаспоряжений);
		ПараметрыЗаполнения.Вставить("МассивЗаказов", ГруппаРаспоряжений);
		
		ДокументОбъект.Заполнить(ПараметрыЗаполнения);
		ДокументОбъект.Дата = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДатаСеанса());
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			// Добавить запись в историю работы пользователя.
			ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, ПолеОшибки,
					ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
			КонецПопытки;
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось создать документ %1 на основании документа %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Метаданные.Документы[ПараметрыЗаполнения.ИмяДокумента].Синоним, ГруппаРаспоряжений[0]);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, ПолеОшибки,
				ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СозданныеДокументы;
	
КонецФункции

Процедура ПерезаполнитьКоличествоПоОрдерам(ТЧ, Регистратор, Распоряжения, Склад) Экспорт
	
	Отбор = Новый Структура("Склад", "Склад");
	Запрос = Новый Запрос(РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаОсталосьОформитьПоОрдерам(,Отбор));
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("Регистратор",  Регистратор);
	Запрос.УстановитьПараметр("Склад",        Склад);
	
	ТаблицаОрдера = Запрос.Выполнить().Выгрузить();
	ТаблицаНакладная = ТЧ.Выгрузить();
	
	// Добавление количества ордеров.
	ТаблицаОрдера.Колонки.Количество.Имя = "КоличествоВОрдере";
	НакладныеСервер.РаспределитьКоличествоИЗаполнить(ТаблицаОрдера, ТаблицаНакладная, "КоличествоВОрдере",
		"Номенклатура, Характеристика, Назначение", "[Количество]", Истина, "Серия");
	НакладныеСервер.ДополнитьТаблицу(ТаблицаОрдера, ТаблицаНакладная, "КоличествоВОрдере");
	
	ТаблицаНакладная.Колонки.Количество.Имя = "КоличествоДоИзменения";
	ТаблицаНакладная.Колонки.КоличествоВОрдере.Имя = "Количество";
	НакладныеСервер.УдалитьПустыеСтроки(ТаблицаНакладная, "Количество");
	
	ТЧ.Загрузить(ТаблицаНакладная);
	
КонецПроцедуры

#Область ПереоформлениеНакладных

// Формирует структуру параметров настройки общей формы "Переоформление накладных по распоряжениям".
//
// Возвращаемое значение:
//  Структура - структура с полями параметров настройки.
//
Функция НастройкиФормыПереоформленияНакладных() Экспорт
	
	НастройкиФормы = Новый Структура();
	НастройкиФормы.Вставить("ИмяФормыНакладной");
	НастройкиФормы.Вставить("ДанныеЗаполнения");
	НастройкиФормы.Вставить("Заголовок");
	НастройкиФормы.Вставить("НакладнаяНаОтгрузку", Истина);
	НастройкиФормы.Вставить("НакладнаяНаПриемку",  Ложь);
	
	КлючТовара = Новый Структура("Номенклатура, Характеристика, Склад");
	ОсновнойТовар = Новый Структура("Ключ, КартинкаШапки, КартинкаЗначений",
		КлючТовара, БиблиотекаКартинок.Набор, БиблиотекаКартинок.Наборы);
	НастройкиФормы.Вставить("ОсновнойТовар", ОсновнойТовар);
	
	Возврат НастройкиФормы;
	
КонецФункции

// Переносит в табличную часть документа подобранные по заказам и ордерам строки.
//
// Параметры:
//  ДеревоСтрок - Массив - элементами массива являются строки для переноса с одинаковыми значениями ключевых полей.
//  ПоляПоиска - Строка - ключевые поля поиска, перечисленные через запятую.
//  ТабЧасть - ДанныеФормыКоллекция - таблица в которою необходимо перенести подобранные строки.
//  ПустыеПоляСвязиСЗаказом - Структура - значения полей "Код строки" и "Заказ..." в табличной части документа для строки без заказа.
//  НеЗаполняемыеПоля - Строка - Поля через запятую, которые не нужно переносить в табличную часть из дерева строк.
//
// Возвращаемое значение:
//  Массив - добавленные строки.
//
Функция ЗаполнитьТоварыПодобраннымиИзЗаказа(ДеревоСтрок, ПоляПоиска, ТабЧасть, ПустыеПоляСвязиСЗаказом, НеЗаполняемыеПоля = "") Экспорт
	
	ДобавленныеСтроки = Новый Массив();
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	Для Каждого ПодобранныеСтроки Из ДеревоСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПодобранныеСтроки[0]);
		НайденныеСтроки = ТабЧасть.НайтиСтроки(СтруктураПоиска);
		
		// Новая строка - добавление строк.
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Для Каждого СтрокаИсточник Из ПодобранныеСтроки Цикл
				
				Если СтрокаИсточник.Количество > 0 Тогда
					СтрокаПриемник = ТабЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
					Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
					КонецЕсли;
					ДобавленныеСтроки.Добавить(СтрокаПриемник);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				
				Для Счетчик = 1 По НайденныеСтроки.Количество() - 1 Цикл
					ТабЧасть.Удалить(НайденныеСтроки[Счетчик]);
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПодобранныеСтроки.Количество() = 1 Тогда
			
				СтрокаИсточник = ПодобранныеСтроки[0];
				СтрокаПриемник = НайденныеСтроки[0];
				Если СтрокаИсточник.Количество = 0 Тогда
					ТабЧасть.Удалить(СтрокаПриемник);
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
					Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
					КонецЕсли;
				КонецЕсли;
			
			Иначе
				
				СтрокаПриемник = НайденныеСтроки[0];
				СтрокаПриемник.Количество = 0;
				
				Для Каждого СтрокаИсточник Из ПодобранныеСтроки Цикл
				
					Если СтрокаИсточник.Количество > 0 Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
						Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
							ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
						КонецЕсли;
						СтрокаПриемник = ТабЧасть.Добавить();
						ДобавленныеСтроки.Добавить(СтрокаПриемник);
					КонецЕсли;
				
				КонецЦикла;
				
				Если СтрокаПриемник.Количество = 0 Тогда
					ТабЧасть.Удалить(СтрокаПриемник);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет строку по варианту заполнения (по данным заказа или данным ордера).
//
// Параметры:
//  ТаблицаПриемник - СтрокаТаблицыЗначений, ДанныеФормыСтруктура - структура с обязательными колонками "Количество" и "Количество упаковок".
//  ТаблицаИсточник - ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - структура, содержащая данные для оформления по заказам, либо по заказам и ордерам.
//  Колчиество - Число - Количество для заполнения.
//
Процедура ЗаполнитьСтрокуПоВарианту(Приемник, Источник, Количество)
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	
	Приемник.Количество = Количество;
	// Заполнение количества упаковок.
	Если ЗначениеЗаполнено(Источник.КоличествоВЗаказе) И Источник.КоличествоВЗаказе > 0
		И ЗначениеЗаполнено(Источник.УпаковкаЗаказаКоэффициент) Тогда
		
		Приемник.Упаковка = Источник.УпаковкаЗаказа;
		Приемник.КоличествоУпаковок = Приемник.Количество / Источник.УпаковкаЗаказаКоэффициент;
		
	ИначеЕсли ЗначениеЗаполнено(Источник.КоличествоВНакладной) И Источник.КоличествоВНакладной > 0
		И ЗначениеЗаполнено(Источник.УпаковкаНакладнойКоэффициент) Тогда
		
		Приемник.Упаковка = Источник.УпаковкаНакладной;
		Приемник.КоличествоУпаковок = Приемник.Количество / Источник.УпаковкаНакладнойКоэффициент;
		
	Иначе
		
		Приемник.КоличествоУпаковок = Приемник.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьВводаНаОсновании(Документ, Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов) Экспорт
	
	ТекстОшибки = "";
	Если ЕстьОшибкиПроведен Тогда
		
		ТекстОшибки = НСтр("ru='Документ не проведен. Ввод на основании непроведенного документа запрещен.'");
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		СтрокаДопустимыхСтатусов = "";
		
		Для Каждого ДопустимыйСтатус Из МассивДопустимыхСтатусов Цикл
			СтрокаДопустимыхСтатусов = СтрокаДопустимыхСтатусов + """" + ДопустимыйСтатус + """, ";
		КонецЦикла;
		
		СтрокаДопустимыхСтатусов = Лев(СтрокаДопустимыхСтатусов, СтрДлина(СтрокаДопустимыхСтатусов)-2);
		
		Если МассивДопустимыхСтатусов.Количество() = 1 Тогда
			Если Статус <> Неопределено Тогда
				ТекстОшибки = НСтр("ru='Документ находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусе %СтрокаДопустимыхСтатусов%.'");
			Иначе
				ТекстОшибки = НСтр("ru='Ввод на основании разрешен только в статусе %СтрокаДопустимыхСтатусов%.'");
			КонецЕсли;
		Иначе
			Если Статус <> Неопределено Тогда
				ТекстОшибки = НСтр("ru='Документ находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусах %СтрокаДопустимыхСтатусов%.'");
			Иначе
				ТекстОшибки = НСтр("ru='Ввод на основании разрешен только в статусах %СтрокаДопустимыхСтатусов%.'");
			КонецЕсли;
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрокаДопустимыхСтатусов);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
	
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ЗаказыНаОтгрузкуСОрдерныхСкладов(Заказы, СвойстваЗаказов, ПриемкаИОтгрузка = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ДокументОтгрузки КАК Ссылка,
		|	Таблица.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК Таблица
		|ГДЕ
		|	Таблица.ДокументОтгрузки В(&Заказы)
		|	И (Таблица.Склад В (&Склады)
		|			ИЛИ НЕ &ОтборПоСкладу)
		|	И Таблица.Активность
		|	И Таблица.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|	И Таблица.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня";
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	МассивСкладов = Новый Массив;
	Для каждого ЗначенияСвойств Из СвойстваЗаказов Цикл
		Если ЗначенияСвойств.Свойство("Склад") И МассивСкладов.Найти(ЗначенияСвойств.Склад) = Неопределено Тогда
			МассивСкладов.Добавить(ЗначенияСвойств.Склад);
		КонецЕсли; 
	КонецЦикла; 
	Запрос.УстановитьПараметр("Склады", МассивСкладов);
	Запрос.УстановитьПараметр("ОтборПоСкладу", МассивСкладов.Количество() <> 0);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Нужно удалить строки по неордерным складам
	Если МассивСкладов.Количество() <> 0 Тогда
		СтрокиКУдалению = Новый Массив;
		Для ИндексСтроки = -СвойстваЗаказов.ВГраница() По 0 Цикл
			Отбор = Новый Структура("Склад", СвойстваЗаказов[-ИндексСтроки].Склад);
			Если Результат.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(-ИндексСтроки);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого ИндексСтроки Из СтрокиКУдалению Цикл
			СвойстваЗаказов.Удалить(ИндексСтроки);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Ссылка"));
	
КонецФункции

Функция ИмяПоляНазначение(Таблица, Поля)
	
	СтруктураПолей = Новый Структура(Поля);
	Для Каждого Элемент Из СтруктураПолей Цикл
		
		Колонка = Таблица.Колонки.Найти(Элемент.Ключ);
		Если Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Назначения")) Тогда
			Возврат Элемент.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьКолонкуДвиженияПоСкладскимРегистрам(Таблица, Поля)
	
	ИмяПоляНазначение = ИмяПоляНазначение(Таблица, Поля);
	МассивНазначений = Таблица.ВыгрузитьКолонку(ИмяПоляНазначение);
	СкладскиеНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНазначений, "ДвиженияПоСкладскимРегистрам");
	Таблица.Колонки.Добавить("ДвиженияПоСкладскимРегистрам", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтрокаТаблицы.ДвиженияПоСкладскимРегистрам = ЗначениеЗаполнено(СтрокаТаблицы[ИмяПоляНазначение])
			И СкладскиеНазначения[СтрокаТаблицы[ИмяПоляНазначение]].ДвиженияПоСкладскимРегистрам;
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит значение числового поля из таблицы источник в таблицу приемник. 
//
// Параметры:
//  ТаблицаИсточник			 - ТаблицаЗначений - 
//  ТаблицаПриемник			 - ТаблицаЗначений - 
//  ИмяПоляКоличество		 - Строка - Заполняемое поле. Если в таблице приемнике отсутствует - добавляется.
//  Измерения				 - Строка - Ключевые поля для поиска соответствий между строками таблиц
//  Ресурсы					 - Строка - Условия накладываемые на числовые поля строк таблицы приемника, вида:
//  									"НЕ [Количество], ПО [КоличествоВЗаказе], [КоличествоВЗаказе]"
//  									Где в квадратных скобках пишется имя числового поля в таблице приемнике, 
//  									и перед ним идентификатор действия:
//  									НЕ [ИмяПоля] - значение ИмяПоля должно быть равно нулю
//  									ПО [ИмяПоля] - в строке приемнике в поле *ИмяПоляКоличество* нельзя записать число большее,
//  									чем в ИмяПоля.
//  									[ИмяПоля] - значение ИмяПоля должно быть больше нуля
//  РаспределятьПолностью	 - Булево - Если в результате действия ограничения условия "ПО", в строке источнике остается нераспределенное
//  									количество - разрешаем списать это количество в последнюю сопоставленную строку приемника
//
Процедура РаспределитьКоличество(ТаблицаИсточник, ТаблицаПриемник, ИмяПоляКоличество, Измерения, Ресурсы, РаспределятьПолностью = Ложь) Экспорт
	
	Если ТаблицаПриемник.Колонки.Найти(ИмяПоляКоличество) = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить(ИмяПоляКоличество, Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	ПараметрыОтбораСтрок = ДействияСРесурсамиИзСтроки(Ресурсы);
	
	Отбор = Новый Структура(Измерения);
	
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = ТаблицаПриемник.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаПриемник Из НайденныеСтроки Цикл
			
			ПроверкаПройдена = СтрокаСоответствуетОтбору(СтрокаПриемник, ПараметрыОтбораСтрок);
			
			Если Не ПроверкаПройдена Тогда
				Продолжить;
			КонецЕсли;
			
			// Если массив НеБольше - пустой, тогда переносится как есть
			// иначе происходит доп. проверка на то, что результат заполнения поля не превысит значения проверяемых полей
			Количество = СтрокаИсточник[ИмяПоляКоличество];
			
			КоличествоПолейПроверки = ПараметрыОтбораСтрок.НеБольше.Количество();
			Если КоличествоПолейПроверки > 0 Тогда
				МаксимальноеКоличество = СтрокаПриемник[ПараметрыОтбораСтрок.НеБольше[0]];
				Для н = 1 По КоличествоПолейПроверки - 1 Цикл
					ПолеПроверки = ПараметрыОтбораСтрок.НеБольше[КоличествоПолейПроверки - н - 1];
					МаксимальноеКоличество = Мин(СтрокаПриемник[ПолеПроверки], МаксимальноеКоличество);
				КонецЦикла;
				
				Превышение = СтрокаПриемник[ИмяПоляКоличество] + Количество - МаксимальноеКоличество;
				Если Превышение >= Количество Тогда
					Количество = 0;
				ИначеЕсли Превышение > 0 Тогда
					Количество = Количество - Превышение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПриемник[ИмяПоляКоличество] = СтрокаПриемник[ИмяПоляКоличество] + Количество;
			СтрокаИсточник[ИмяПоляКоличество] = СтрокаИсточник[ИмяПоляКоличество] - Количество;
			
		КонецЦикла;
		
		// Если было распределено не полное количество, записываем остаток в последнюю найденную строку
		Если РаспределятьПолностью
			И СтрокаИсточник[ИмяПоляКоличество] > 0 
			И НайденныеСтроки.Количество() > 0 Тогда
			
			Количество = СтрокаИсточник[ИмяПоляКоличество];
			НайденнаяСтрока = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
			
			Если Не СтрокаСоответствуетОтбору(НайденнаяСтрока, ПараметрыОтбораСтрок) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока[ИмяПоляКоличество] = НайденнаяСтрока[ИмяПоляКоличество] + Количество;
			СтрокаИсточник[ИмяПоляКоличество] = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вариант процедуры РаспределитьКоличество
// Переносит значение числового поля из таблицы источник в таблицу приемник.
// Заполняет произвольное поле ЗаполняемоеПоле, и если одной строке приемника соответствует несколько строк источника, отличающиеся лишь 
// значением поля ЗаполняемоеПоле - дробит соответствующую строку приемника.
//
// Параметры:
//  ТаблицаИсточник			 - ТаблицаЗначений	 - 
//  ТаблицаПриемник			 - ТаблицаЗначений	 - 
//  ИмяПоляКоличество		 - Строка	 - Заполняемое поле. Если в таблице приемнике отсутствует - добавляется.
//  Измерения				 - Строка	 - Ключевые поля для поиска соответствий между строками таблиц
//  Ресурсы					 - Строка	 - Условия накладываемые на числовые поля строк таблицы приемника, вида:
//  									"НЕ [Количество], ПО [КоличествоВЗаказе], [КоличествоВЗаказе]"
//  									Где в квадратных скобках пишется имя числового поля в таблице приемнике,
//  									и перед ним идентификатор действия:
//  									НЕ [ИмяПоля] - значение ИмяПоля должно быть равно нулю
//  									ПО [ИмяПоля] - в строке приемнике в поле *ИмяПоляКоличество* нельзя записать число большее,
//  									чем в ИмяПоля.
//  									[ИмяПоля] - значение ИмяПоля должно быть больше нуля
//  РаспределятьПолностью	 - Булево	 - Если в результате действия ограничения условия "ПО", в строке источнике остается нераспределенное
//  			количество - разрешаем списать это количество в последнюю сопоставленную строку приемника
//  ЗаполняемыеПоля			 - Строка	 - Произвольные поля, значение которых нужно скопировать из строки источника в строку приемника
//
Процедура РаспределитьКоличествоИЗаполнить(ТаблицаИсточник, ТаблицаПриемник, ИмяПоляКоличество, Измерения, Ресурсы, 
									РаспределятьПолностью = Ложь, ЗаполняемыеПоля = "") Экспорт
	
	Если ТаблицаПриемник.Колонки.Найти(ИмяПоляКоличество) = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить(ИмяПоляКоличество, Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	ПараметрыОтбораСтрок = ДействияСРесурсамиИзСтроки(Ресурсы);
	
	Отбор = Новый Структура(Измерения);
	
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = ТаблицаПриемник.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаПриемник Из НайденныеСтроки Цикл
			
			ПроверкаПройдена = СтрокаСоответствуетОтбору(СтрокаПриемник, ПараметрыОтбораСтрок);
			
			Если Не ПроверкаПройдена Тогда
				Продолжить;
			КонецЕсли;
			
			// Если массив НеБольше - пустой, тогда переносится как есть
			// иначе происходит доп. проверка на то, что результат заполнения поля не превысит значения проверяемых полей
			Количество = СтрокаИсточник[ИмяПоляКоличество];
			
			КоличествоПолейПроверки = ПараметрыОтбораСтрок.НеБольше.Количество();
			Если КоличествоПолейПроверки > 0 Тогда
				МаксимальноеКоличество = СтрокаПриемник[ПараметрыОтбораСтрок.НеБольше[0]];
				Для н = 1 По КоличествоПолейПроверки - 1 Цикл
					ПолеПроверки = ПараметрыОтбораСтрок.НеБольше[КоличествоПолейПроверки - н - 1];
					МаксимальноеКоличество = Мин(СтрокаПриемник[ПолеПроверки], МаксимальноеКоличество);
				КонецЦикла;
				
				Превышение = СтрокаПриемник[ИмяПоляКоличество] + Количество - МаксимальноеКоличество;
				Если Превышение >= Количество Тогда
					Количество = 0;
				ИначеЕсли Превышение > 0 Тогда
					Количество = Количество - Превышение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивЗаполняемыхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ЗаполняемыеПоля, ",");
			
			ЗаполняемыеПоляРавны = Истина;
			Для Каждого ЗаполняемоеПоле Из МассивЗаполняемыхПолей Цикл
				Если СтрокаПриемник[ЗаполняемоеПоле] <> СтрокаИсточник[ЗаполняемоеПоле] Тогда
					ЗаполняемыеПоляРавны = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ЗаполняемыеПоля)
				И Не ЗаполняемыеПоляРавны
				И СтрокаПриемник[ИмяПоляКоличество] = 0 Тогда
				// Можно заполнять текущую строку Приемник
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, ЗаполняемыеПоля);
				
				СтрокаПриемник[ИмяПоляКоличество] = СтрокаПриемник[ИмяПоляКоличество] + Количество;
				СтрокаИсточник[ИмяПоляКоличество] = СтрокаИсточник[ИмяПоляКоличество] - Количество;
				
			ИначеЕсли ЗначениеЗаполнено(ЗаполняемыеПоля)
				И Не ЗаполняемыеПоляРавны Тогда
				// В текущую строку Приемник уже записывались данные, нужно выделить новую строку
				НоваяСтрокаПриемник = ТаблицаПриемник.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, СтрокаПриемник);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, СтрокаИсточник, ЗаполняемыеПоля);
				
				Если КоличествоПолейПроверки > 0 Тогда
					ПолеКонтроляКоличества = ПараметрыОтбораСтрок.НеБольше[0];
					НоваяСтрокаПриемник[ПолеКонтроляКоличества] = НоваяСтрокаПриемник[ПолеКонтроляКоличества] - НоваяСтрокаПриемник[ИмяПоляКоличество];
					СтрокаПриемник[ПолеКонтроляКоличества] = СтрокаПриемник[ИмяПоляКоличество];
				КонецЕсли;
				
				НоваяСтрокаПриемник[ИмяПоляКоличество] = Количество;
				СтрокаИсточник[ИмяПоляКоличество] = СтрокаИсточник[ИмяПоляКоличество] - Количество;
				
			Иначе
				СтрокаПриемник[ИмяПоляКоличество] = СтрокаПриемник[ИмяПоляКоличество] + Количество;
				СтрокаИсточник[ИмяПоляКоличество] = СтрокаИсточник[ИмяПоляКоличество] - Количество;
			КонецЕсли;
			
		КонецЦикла;
		
		// Если было распределено не полное количество, записываем остаток в последнюю найденную строку
		Если РаспределятьПолностью
			И СтрокаИсточник[ИмяПоляКоличество] > 0 
			И НайденныеСтроки.Количество() > 0 Тогда
			
			Количество = СтрокаИсточник[ИмяПоляКоличество];
			НайденнаяСтрока = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
			
			Если Не СтрокаСоответствуетОтбору(НайденнаяСтрока, ПараметрыОтбораСтрок) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока[ИмяПоляКоличество] = НайденнаяСтрока[ИмяПоляКоличество] + Количество;
			СтрокаИсточник[ИмяПоляКоличество] = 0;
			
			Если ЗначениеЗаполнено(ЗаполняемыеПоля) Тогда
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаИсточник, ЗаполняемыеПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Распределяет отклонение мерных товаров (если оно допустимо) из таблицы источник в таблицу приемник.
//
// Параметры:
//  ТаблицаИсточник			 - ТаблицаЗначений	 - 
//  ТаблицаПриемник			 - ТаблицаЗначений	 - 
//  ИмяПоляКоличество		 - Строка	 - Поле в таблице приемника, относительно которого будет рассчитываться допустимая величина отклонения
//  ИмяПоляОтклонение		 - Строка	 - Заполняемое поле. Количество, которое осталось распределить в таблице источнике
//  										и количество, которое уже было распределено в таблице приемника
//  Измерения				 - Строка	 - Ключевые поля для поиска соответствий между строками таблиц
//
Процедура РаспределитьОтклонениеМерныхТоваров(ТаблицаИсточник, ТаблицаПриемник, ИмяПолеКоличество, ИмяПоляОтклонение, Измерения) Экспорт
	
	Если Не Константы.ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить() / 100;
	
	Если ДопустимоеОтклонение = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&СписокНоменклатуры)
		|	И Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаИсточник.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	ИмяПоляМаксКоличество = ИмяПолеКоличество + "Макс";
	ТаблицаПриемник.Колонки.Добавить(ИмяПоляМаксКоличество, Новый ОписаниеТипов("Число"));
	ОтборНоменклатуры = Новый Структура("Номенклатура");
	ОтборИзмерений = Новый Структура(Измерения);
	СтрокиДляРаспределения = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОтборНоменклатуры.Номенклатура = Выборка.Ссылка;
		
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(ОтборНоменклатуры);
		Для каждого СтрокаИсточник Из СтрокиИсточника Цикл
			
			Если СтрокаИсточник[ИмяПоляОтклонение] <= 0 Тогда
				Продолжить;
			КонецЕсли;
				
			БылоРаспределено = 0;
			ЗаполнитьЗначенияСвойств(ОтборИзмерений, СтрокаИсточник);
			СтрокиПриемника = ТаблицаПриемник.НайтиСтроки(ОтборИзмерений);
			
			Для каждого Строка Из СтрокиПриемника Цикл
				Строка[ИмяПоляМаксКоличество] = Строка[ИмяПолеКоличество] * (1 + ДопустимоеОтклонение);
				БылоРаспределено = БылоРаспределено + Строка[ИмяПоляОтклонение];
			КонецЦикла;
			
			Если БылоРаспределено * ДопустимоеОтклонение >= СтрокаИсточник[ИмяПоляОтклонение] Тогда
				СтрокиДляРаспределения.Добавить(СтрокаИсточник);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	Условие = "[" + ИмяПолеКоличество + "], ПО [" + ИмяПоляМаксКоличество + "]";
	НакладныеСервер.РаспределитьКоличество(СтрокиДляРаспределения, ТаблицаПриемник, ИмяПоляОтклонение, Измерения, Условие, Ложь);
	
	ТаблицаПриемник.Колонки.Удалить(ИмяПоляМаксКоличество);
	
КонецПроцедуры

Функция СтрокаСоответствуетОтбору(СтрокаПриемник, ПараметрыОтбора)
	
	Для Каждого ПолеПроверки Из ПараметрыОтбора.РавноНулю Цикл
		// Значение поля проверки должно быть равно нулю
		Если СтрокаПриемник[ПолеПроверки] <> 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолеПроверки Из ПараметрыОтбора.БольшеНуля Цикл
		// Значение поля проверки должно быть больше нуля
		Если СтрокаПриемник[ПолеПроверки] <= 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ДействияСРесурсамиИзСтроки(Ресурсы)
	
	ДействияСРесурсами = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ресурсы);
	
	РавноНулю           = Новый Массив();
	НеБольше            = Новый Массив();
	БольшеНуля          = Новый Массив();
	
	Для Каждого СтрокаРесурса Из ДействияСРесурсами Цикл
		
		НачалоИмениПоля = СтрНайти(СтрокаРесурса, "[");
		
		Если СтрНайти(СтрокаРесурса, "НЕ", НаправлениеПоиска.СКонца, НачалоИмениПоля) Тогда
			ИмяРесурса = СтрЗаменить(СтрокаРесурса, "НЕ", "");
			ИмяРесурса = СтрЗаменить(ИмяРесурса, "[", "");
			ИмяРесурса = СтрЗаменить(ИмяРесурса, "]", "");
			ИмяРесурса = СокрЛП(ИмяРесурса);
			
			РавноНулю.Добавить(ИмяРесурса);
		ИначеЕсли СтрНайти(СтрокаРесурса, "ПО", НаправлениеПоиска.СКонца, НачалоИмениПоля) Тогда
			ИмяРесурса = СтрЗаменить(СтрокаРесурса, "ПО", "");
			ИмяРесурса = СтрЗаменить(ИмяРесурса, "[", "");
			ИмяРесурса = СтрЗаменить(ИмяРесурса, "]", "");
			ИмяРесурса = СокрЛП(ИмяРесурса);
			
			НеБольше.Добавить(ИмяРесурса);
		Иначе
			ИмяРесурса = СтрЗаменить(СтрокаРесурса, "[", "");
			ИмяРесурса = СтрЗаменить(ИмяРесурса, "]", "");
			ИмяРесурса = СокрЛП(ИмяРесурса);
			
			БольшеНуля.Добавить(ИмяРесурса);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РавноНулю",           РавноНулю);
	СтруктураДействий.Вставить("НеБольше",            НеБольше);
	СтруктураДействий.Вставить("БольшеНуля",          БольшеНуля);
	
	Возврат СтруктураДействий;
	
КонецФункции

// Добавляет строку источника в таблицу приемник если ИмяПоляКоличество больше нуля
//
// Параметры:
//  ТаблицаИсточник		 - ТаблицаЗначений - 
//  ТаблицаПриемник		 - ТаблицаЗначений - 
//  ИмяПоляКоличество	 - Строка - 
//
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник, ИмяПоляКоличество) Экспорт
	
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		Если СтрокаТаблицыИсточник[ИмяПоляКоличество] > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет строки из таблицы, соответствующие условию выражения
//
// Параметры:
//  Таблица		 - ТаблицаЗначений - 
//  Выражение	 - Строка - Условия накладываемые на числовые поля строк таблица вида
//  						"НЕ [КоличествоНакладная], [КоличествоВЗаказе]"
//
Процедура СократитьТаблицу(Таблица, Выражение) Экспорт
	
	ОбъектСравнения = ДействияСРесурсамиИзСтроки(Выражение);
	ВсегоСтрок = Таблица.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		
		СтрокаТаблицы = Таблица[ВсегоСтрок - Счетчик];
		
		Если СтрокаСоответствуетОтбору(СтрокаТаблицы, ОбъектСравнения) Тогда
			
			Таблица.Удалить(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПустыеСтроки(Таблица, ИмяПоляКоличество) Экспорт
	
	КоличествоИндексов = Таблица.Количество() - 1;
	Для Н = 0 По КоличествоИндексов Цикл
		
		Строка = Таблица[КоличествоИндексов - Н];
		Если Строка[ИмяПоляКоличество] = 0 Тогда
			Таблица.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстРазделителяЗапросов() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

Процедура ЗаполнитьНазначенияВТабличнойЧасти(ТабличнаяЧасть, Назначение) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Строка.Назначение = ПустоеНазначение;
			
		КонецЦикла;
		
	Иначе
		
		Таблица = Новый ТаблицаЗначений();
		Таблица.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Индекс = 0;
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Индекс = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Таблица.Индекс       КАК Индекс,
			|	Таблица.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|//////////////////////////////
			|ВЫБРАТЬ
			|	Таблица.Индекс КАК Индекс,
			|	
			|	ВЫБОР КОГДА СпрНоменклатура.Ссылка ЕСТЬ NULL ТОГДА
			|				ЛОЖЬ
			|			ИНАЧЕ
			|				ИСТИНА
			|		КОНЕЦ КАК ЗаполнятьНазначение
			|ИЗ
			|	ВтТовары КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Ссылка = Таблица.Номенклатура
			|			И СпрНоменклатура.ТипНоменклатуры В(
			|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
			
		Запрос.УстановитьПараметр("Таблица", Таблица);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЗаполнятьНазначение Тогда
				
				ТабличнаяЧасть[Выборка.Индекс].Назначение = Назначение;
				
			Иначе
				
				ТабличнаяЧасть[Выборка.Индекс].Назначение = ПустоеНазначение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
