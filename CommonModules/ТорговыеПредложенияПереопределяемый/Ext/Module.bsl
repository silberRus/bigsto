////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак того, что функциональная опция использования видов номенклатуры включена.
// 
// Параметры:
//   ИмяФормы - Строка - имя формы, для которой получаются данные.
//
// Возвращаемое значение:
//  Булево - признак того, что функциональная опция включена.
//
Функция ФункциональнаяОпцияИспользуется(Знач ИмяФормы) Экспорт
	
	МассивОпций = ЗависимостьФункционалаОтФункциональныхОпций().Получить(ИмяФормы);
	Если ЗначениеЗаполнено(МассивОпций) Тогда
		Для Каждого Опция из МассивОпций Цикл
			Если Не ПолучитьФункциональнуюОпцию(Опция) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выдает сообщение пользователю о том, что функциональная опция использования видов номенклатуры отключена.
//
// Параметры:
//  ИмяФормы - Строка - имя формы из которой вызывается сообщение.
//  Используется - Булево - признак того, что функциональная опция включена или нет.
//  Отказ - Булево - признак того, что форму сопоставления номенклатуры открывать не нужно.
//
Процедура СообщитьОНеобходимостиИспользованияФункциональнойОпции(Знач ИмяФормы, Знач Используется, Отказ) Экспорт
	
	Если Используется Тогда
		Возврат;
	КонецЕсли;
	
	МассивОпций = ЗависимостьФункционалаОтФункциональныхОпций().Получить(ИмяФормы);
	
	Для Каждого Опция из МассивОпций Цикл
		Если Опция = "ИспользоватьНесколькоВидовНоменклатуры" Тогда
			ТекстСообщения = НСтр("ru = 'Опция использования нескольких видов номенклатуры отключена.'");
		ИначеЕсли Опция = "ИспользоватьСоглашенияСКлиентами" Тогда
			ТекстСообщения = НСтр("ru = 'Опция использования соглашений с клиентами отключена.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,,,Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Получение валюты регламентированного учета.
// 
// Возвращаемое значение:
//  СправочникСсылка.Валюта - валюта регламентированного учета.
//
Функция ВалютаРегламентированногоУчета() Экспорт
	
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецФункции

// Создает документ заказ поставщику на основании данных торгового предложения.
//
// Параметры:
//  ДанныеЗаполнения - Структура - данные торгового предложения:
//   * КонтекстИсточника - Структура - набор данных из документа основания содержащий данные для заполнения шапки документа.
//   * СтрокиЗаказа - ТаблицаЗначений - содержит данные табличной части.
//   * Организация - СправочникСсылка.Организации - организация торгового предложения.
//   * Валюта - СправочникСсылка.Валюты - валюта торгового предложения.
//
// Возвращаемое значение:
//   ДокументОбъект - возвращается созданный, но не записанный документ.
//
Функция СоздатьДокументЗаказПоставщикуНаОснованииТорговогоПредложения(Знач ДанныеЗаполнения) Экспорт
	
	КонтекстИсточника = ДанныеЗаполнения.КонтекстИсточника;
	СтрокиЗаказа      = ДанныеЗаполнения.СтрокиЗаказа;
	Организация       = ДанныеЗаполнения.Организация;
	Контрагент        = ДанныеЗаполнения.Контрагент;
	Валюта            = ДанныеЗаполнения.Валюта;
	
	ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();

	// Реквизиты шапки.
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.Контрагент =  Контрагент;
	ДокументОбъект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	ДокументОбъект.Валюта = Валюта;
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	Если КонтекстИсточника <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, КонтекстИсточника);
	КонецЕсли;
	
	// Заполнение данных по доставке.
	Если ДанныеЗаполнения.Свойство("СпособДоставки") Тогда
		ДокументОбъект.СпособДоставки = ДанныеЗаполнения.СпособДоставки;
		Если ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя Тогда
			ДокументОбъект.АдресДоставки = ДанныеЗаполнения.АдресДоставки;
			ДокументОбъект.АдресДоставкиЗначенияПолей = ДанныеЗаполнения.АдресДоставкиЗначенияПолей;
		ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада Тогда
			ДокументОбъект.АдресДоставкиПеревозчика = ДанныеЗаполнения.АдресДоставки;
			ДокументОбъект.АдресДоставкиПеревозчикаЗначенияПолей = ДанныеЗаполнения.АдресДоставкиЗначенияПолей;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение соглашения по статистике.
	ЗаполняемыеРеквизиты = Новый Структура("Соглашение");
	РеквизитыДляОтбора = Новый Структура;
	РеквизитыДляОтбора.Вставить("Партнер", ДокументОбъект.Партнер);
	РеквизитыДляОтбора.Вставить("Валюта", ДокументОбъект.Валюта);
	РеквизитыДляОтбора.Вставить("ЦенаВключаетНДС", ДокументОбъект.ЦенаВключаетНДС);
	ЗаполнениеСвойствПоСтатистикеСервер.ПолучитьЗначенияСвойств(
		ДокументОбъект.Ссылка, ЗаполняемыеРеквизиты, РеквизитыДляОтбора);
	Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.Соглашение) Тогда
		ДокументОбъект.Соглашение = ЗаполняемыеРеквизиты.Соглашение;
	КонецЕсли;
	
	Сегодня = НачалоДня(ТекущаяДата());
	Сутки = 60 * 60 * 24;
	
	// Товары.
	Для каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаЗаказа);
		СтрокаТовары.Характеристика = СтрокаЗаказа.ХарактеристикаНоменклатуры;
		СтрокаТовары.КоличествоУпаковок = СтрокаЗаказа.Количество;
		СтрокаТовары.ДатаПоступления = Сегодня + (СтрокаЗаказа.СрокПоставки * Сутки);
		Если ЗначениеЗаполнено(СтрокаЗаказа.КонтекстСтроки) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаЗаказа.КонтекстСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Заполнить(Неопределено); // Инициализация документа.
	ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
	ДокументОбъект.УстановитьНовыйНомер();
	
	ТаблицаДатПоступления = ДокументОбъект.Товары.Выгрузить(, "ДатаПоступления");
	ТаблицаДатПоступления.Свернуть("ДатаПоступления");
	ДокументОбъект.ПоступлениеОднойДатой = ТаблицаДатПоступления.Количество() = 1;
	Если ДокументОбъект.ПоступлениеОднойДатой Тогда
		ДокументОбъект.ДатаПоступления = ТаблицаДатПоступления[0].ДатаПоступления;
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

// Удаляет созданные заказы поставщику при переходе на шаг назад.
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений - таблица документов для удаления, состав:
//    * Ссылка - ДокументСсылка - ссылка на удаляемый документ.
//  Отказ - Булево - признак результата удаления документов.
//
Процедура УдалитьДокументыЗаказПоставщику(ТаблицаДокументы, Отказ) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	ТекстИмеютсяСсылки = НСтр("ru = 'Имеются ссылки на %1 - %2.'");
	ТекстПомечен = НСтр("ru = '%1 - помечен на удаление.'");
	ТекстЗаблокирован  = НСтр("ru = '%1 - заблокирован. Пометить на удаление не удалось.'");
	ТекстУдален = НСтр("ru = '%1 - удален.'");
	
	ИменаОбъектовМетаданных = "Документ.ЗаказПоставщику";
	Регистры = ОбщегоНазначенияУТПовтИсп.РегистрыСведенийПоМетаданнымИзмерений(ИменаОбъектовМетаданных, Истина);
	
	СсылкиНаУдаление = Новый Массив();
	Для Каждого Строка Из ТаблицаДокументы Цикл
		СсылкиНаУдаление.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	НазначенияЗаказов = НазначенияЗаказов(СсылкиНаУдаление);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СсылкиНаУдаление, НазначенияЗаказов);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	ВсегоСтрок = ТаблицаСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
		Если Ссылка[0] = Ссылка[1] Или ЭтоЗаписьВедомогоРегистраСведений(Ссылка[1], Регистры) Тогда
			ТаблицаСсылок.Удалить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ПомечатьНаУдаление = Новый Массив();
	
	ВсегоСтрок = ТаблицаСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
		Индекс = СсылкиНаУдаление.Найти(Ссылка[1]);
		Если Индекс = Неопределено Тогда
			Если ПомечатьНаУдаление.Найти(Ссылка[0]) = Неопределено Тогда
				ПомечатьНаУдаление.Добавить(Ссылка[0]);
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИмеютсяСсылки, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1]));
				Сообщение.Сообщить();
			КонецЕсли;
			ТаблицаСсылок.Удалить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаЗавершена = Ложь;
	Пока Не ОбработкаЗавершена Цикл
		ОбработкаЗавершена = Истина;
		ВсегоСтрок = ТаблицаСсылок.Количество();
		Для Счетчик = 1 По ВсегоСтрок Цикл
			Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
			Если ПомечатьНаУдаление.Найти(Ссылка[0]) <> Неопределено Тогда
				Если ПомечатьНаУдаление.Найти(Ссылка[1]) = Неопределено Тогда
					ПомечатьНаУдаление.Добавить(Ссылка[1]);
				КонецЕсли;
				ТаблицаСсылок.Удалить(Ссылка);
				ОбработкаЗавершена = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДокументы.Очистить();
	
	Для Каждого Ссылка из ПомечатьНаУдаление Цикл
		Индекс = СсылкиНаУдаление.Найти(Ссылка);
		Если Индекс <> Неопределено Тогда
			СсылкиНаУдаление.Удалить(Индекс);
		КонецЕсли;
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.Заблокирован() Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПомечен, СокрЛП(Ссылка));
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаблокирован, СокрЛП(Ссылка));
		КонецЕсли;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Ссылка Из СсылкиНаУдаление Цикл
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУдален, СокрЛП(Ссылка));
		Сообщение.Сообщить();
	КонецЦикла;
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получает значения контекста на основании которого будет производиться поиск предложений
// и которые будут переданы в шапку создаваемых заказов.
//
// Параметры:
//  ПараметрКоманды - Массив - ссылки на документы для заполнения таблицы поиска товаров в 1С:Бизнес-сеть.
//  КонтекстИсточника - Структура - свойства источника, используемые для формирования заказов.
//  ТаблицаТовары - ТаблицаЗначений - товары для поиска с реквизитами, состав:
//    * Номенклатура - СправочникСсылка - номенклатура.
//    * Характеристика - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка - СправочникСсылка - упаковка номенклатуры.
//    * Количество - Число - количество.
//    * ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    * Числитель - Число - числитель упаковки.
//    * Знаменатель - число - знаменатель номенклатуры.
//    * Склад - СправочникСсылка - склад для заказа.
//    * КонтекстСтроки - Произвольный - дополнительные свойства по источнику.
//
Процедура СвойстваКонтекстаДокументовДляПоискаПредложений(Знач ПараметрКоманды, КонтекстИсточника, ТаблицаТовары) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ПараметрКоманды[0]) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ДополнительныеРеквизиты = Новый Структура();
		ДополнительныеРеквизиты.Вставить("Организация");
		ДополнительныеРеквизиты.Вставить("Валюта");
		ДополнительныеРеквизиты.Вставить("Приоритет");
		ДополнительныеРеквизиты.Вставить("Проведен");
		ДополнительныеРеквизиты.Вставить("Сделка");
		ДополнительныеРеквизиты.Вставить("Статус");
		ДополнительныеРеквизиты.Вставить("Склад");
		ДополнительныеРеквизиты.Вставить("НаправлениеДеятельности");
		ДополнительныеРеквизиты.Вставить("ЗакупкаПодДеятельность");
		
		СтруктураКонтекстаСтроки = Новый Структура("КонтекстСтрокиСклад");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура                      КАК Номенклатура,
		|	ЗаказПоставщикуТовары.Характеристика                    КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПоставщикуТовары.Упаковка
		|	КОНЕЦ                                                   КАК Упаковка,
		|	ЗаказПоставщикуТовары.КоличествоУпаковок                КАК Количество,
		|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ЗаказПоставщикуТовары.Упаковка.Числитель                КАК Числитель,
		|	ЗаказПоставщикуТовары.Упаковка.Знаменатель              КАК Знаменатель,
		|	ЗаказПоставщикуТовары.Склад                             КАК КонтекстСтрокиСклад
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка В(&СписокСсылок)"
		
	ИначеЕсли ТипЗнч(ПараметрКоманды[0]) = Тип("ДокументСсылка.ПланЗакупок") Тогда
		
		ДополнительныеРеквизиты = "Валюта, Склад";
		СтруктураКонтекстаСтроки = Новый Структура("КонтекстСтрокиСклад");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПланЗакупокТовары.Номенклатура                      КАК Номенклатура,
		|	ПланЗакупокТовары.Характеристика                    КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ПланЗакупокТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПланЗакупокТовары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПланЗакупокТовары.Упаковка
		|	КОНЕЦ                                               КАК Упаковка,
		|	ПланЗакупокТовары.КоличествоУпаковок                КАК Количество,
		|	ПланЗакупокТовары.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ПланЗакупокТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ПланЗакупокТовары.Упаковка.Числитель                КАК Числитель,
		|	ПланЗакупокТовары.Упаковка.Знаменатель              КАК Знаменатель,
		|	ПланЗакупокТовары.Склад                             КАК КонтекстСтрокиСклад
		|ИЗ
		|	Документ.ПланЗакупок.Товары КАК ПланЗакупокТовары
		|ГДЕ
		|	ПланЗакупокТовары.Ссылка В(&СписокСсылок)"
		
	ИначеЕсли ТипЗнч(ПараметрКоманды[0]) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ДополнительныеРеквизиты = Новый Структура();
		ДополнительныеРеквизиты.Вставить("Организация");
		ДополнительныеРеквизиты.Вставить("Валюта");
		ДополнительныеРеквизиты.Вставить("Приоритет");
		ДополнительныеРеквизиты.Вставить("Проведен");
		ДополнительныеРеквизиты.Вставить("Сделка");
		ДополнительныеРеквизиты.Вставить("Склад");
		ДополнительныеРеквизиты.Вставить("Статус");
		ДополнительныеРеквизиты.Вставить("НаправлениеДеятельности");
		ДополнительныеРеквизиты.Вставить("ДокументОснование",      "Ссылка");
		ДополнительныеРеквизиты.Вставить("ЗакупкаПодДеятельность", "НалогообложениеНДС");
		
		СтруктураКонтекстаСтроки = Новый Структура("КонтекстСтрокиСклад");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура                      КАК Номенклатура,
		|	ЗаказКлиентаТовары.Характеристика                    КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказКлиентаТовары.Упаковка
		|	КОНЕЦ                                                КАК Упаковка,
		|	ЗаказКлиентаТовары.КоличествоУпаковок                КАК Количество,
		|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ЗаказКлиентаТовары.Упаковка.Числитель                КАК Числитель,
		|	ЗаказКлиентаТовары.Упаковка.Знаменатель              КАК Знаменатель,
		|	ЗаказКлиентаТовары.Склад                             КАК КонтекстСтрокиСклад
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка В(&СписокСсылок)"
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСсылок", ПараметрКоманды);
	Товары = Запрос.Выполнить().Выгрузить();
	Товары.Колонки.Добавить("КонтекстСтроки");
	Для Каждого СтрокаТоваров Из Товары Цикл
		КонтекстСтроки = Новый Структура();
		Для Каждого Свойство из СтруктураКонтекстаСтроки Цикл
			ИмяРеквизита = СтрЗаменить(Свойство.Ключ, "КонтекстСтроки", "");
			КонтекстСтроки.Вставить(ИмяРеквизита, СтрокаТоваров[Свойство.Ключ])
		КонецЦикла;
		СтрокаТоваров.КонтекстСтроки = КонтекстСтроки;
		ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), СтрокаТоваров);
	КонецЦикла;
	КонтекстИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрКоманды[0], ДополнительныеРеквизиты);
	
КонецПроцедуры

// Производит пересчет суммы для заказа товаров.
//
// Параметры:
//  СтрокаТоваров - Структура - реквизиты строки товаров для пересчета суммы при формировании заказов.
//                              См. ФормированиеЗаказов.ОписаниеСтрокиТаблицыТовары(), состав:
//    * ПроцентНДС      - Строка - значение НДС, полученное из сервиса.
//    * СтавкаНДС       - Ссылка - значение ставки НДС.
//    * Цена            - Число - цена товара для заказа.
//    * ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//    * Количество      - Число - количество товара для заказа.
//    * Сумма           - Число - сумма заказа по строке.
//    * СуммаНДС        - Число - сумма НДС строки.
//    * СуммаСНДС       - Число - значение суммы с НДС.
//
Процедура ПересчитатьСуммуПоСтроке(СтрокаТоваров) Экспорт
	
	ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТоваров.СтавкаНДС);
	СтрокаТоваров.Сумма = СтрокаТоваров.Количество * СтрокаТоваров.Цена;
	СтрокаТоваров.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, ПроцентНДС,
		СтрокаТоваров.ЦенаВключаетНДС);
	Если СтрокаТоваров.ЦенаВключаетНДС Тогда
		СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма;
	Иначе
		СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма + СтрокаТоваров.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливаем условное оформление для единиц измерения номенклатуры.
//
// Параметры:
// 	 Форма - Форма - управляемая форму.
// 	 ИмяПоляВводаЕдиницИзмерения - Строка - наименование элемента формы, содержащего ед. измерения номенклатуры.
// 	 ПутьКПолюОтбора - Строка - полный путь к реквизиту.
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, Знач ИмяПоляВводаЕдиницИзмерения, Знач ПутьКПолюОтбора) Экспорт
	
	// См. процедуру НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения.
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ИмяПоляВводаЕдиницИзмерения, ПутьКПолюОтбора);
	
КонецПроцедуры

// Устанавливает значение свойства элементов формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы  - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов - Массив, Строка, Структура - имена искомых элементов.
//  ИмяСвойства    - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение       - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомых элементов.
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
	
КонецПроцедуры

// Получение доступных типов значений свойств для сопоставления.
// 
// Возвращаемое значение:
//   СписокЗначений - доступные типы значений, например Тип("СправочникСсылка.Производители").
//
Функция ДоступныеТипыЗначенийСвойствДляСопоставления() Экспорт
	
	ДоступныеТипы = Новый СписокЗначений;
	ДоступныеТипы.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
	ДоступныеТипы.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"));
	ДоступныеТипы.Добавить(Тип("СправочникСсылка.Производители"));
	ДоступныеТипы.Добавить(Тип("СправочникСсылка.Марки"));
	
	Возврат ДоступныеТипы;
	
КонецФункции

// Возвращает пустую ссылку реквизита объекта для сопоставления.
// 
// Возвращаемое значение:
//  ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения - пустая ссылка для заполнения.
//
Функция ПустаяСсылкаРеквизитаОбъектаДляСопоставления() Экспорт
	
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
КонецФункции

// Получение реквизитов номенклатуры поставщика.
//
// Параметры:
//  НоменклатураПоставщиков	- Массив - список ссылок справочника номенклатура поставщика.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав колонок:
//    * НоменклатураПоставщика       - СправочникСсылка - ссылка справочника номенклатура поставщика.
//    * Номенклатура                 - СправочникСсылка - ссылка справочника 
//    * ИспользованиеХарактеристик   - Булево - признак использования характеристик номенклатуры.
//    * Упаковка                     - СправочникСсылка - упаковка номенклатуры.
//    * ХарактеристикаНоменклатуры   - СправочникСсылка - характеристика номенклатуры.
//    * ЕдиницаИзмеренияНоменклатуры - СправочникСсылка - единица измерения номенклатуры.
//
Функция РеквизитыНоменклатурыПоставщика(Знач НоменклатураПоставщиков) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользованиеХарактеристик,
	|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
	|	НоменклатураПоставщиков.Характеристика КАК ХарактеристикаНоменклатуры,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНоменклатуры
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Ссылка В(&НоменклатураПоставщиков)";
	
	Запрос.УстановитьПараметр("НоменклатураПоставщиков", НоменклатураПоставщиков);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Заполнение пакета торговых предложений.
//
// Параметры:
//  ТорговоеПредложение	 - СправочникСсылка - ссылка на элемент справочника определяющего торговые предложения,
//                                            например СправочникСсылка.Соглашения.
//  ПакетПредложений	 - Структура - свойства публикуемого торгового предложения.
//                         см. ТорговыеПредложения.ОписаниеПакетаПредложений().
//
Процедура ЗаполнитьПакетПредложений(Знач ТорговоеПредложение, ПакетПредложений) Экспорт
	
	// Заполнение общих реквизитов
	
	Реквизиты = "Организация, Валюта, ВидЦен, Статус, ДатаНачалаДействия, ДатаОкончанияДействия,
		|Менеджер, СегментПартнеров, ЦенаВключаетНДС";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТорговоеПредложение, Реквизиты);
	ЗначенияРеквизитов.Вставить("Действует", ЗначенияРеквизитов.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	ЗаполнитьЗначенияСвойств(ПакетПредложений, ЗначенияРеквизитов);
	
	// Заполнение контактной информации.
	ИННКППОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияРеквизитов.Организация, "ИНН, КПП");
	
	ПакетПредложений.КонтактыОрганизации.ИНН = ИННКППОрганизации.ИНН;
	ПакетПредложений.КонтактыОрганизации.КПП = ?(ПустаяСтрока(ИННКППОрганизации.КПП), "0", ИННКППОрганизации.КПП);
	ПакетПредложений.КонтактыОрганизации.Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначенияРеквизитов.Организация,
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
	ПакетПредложений.КонтактыОрганизации.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначенияРеквизитов.Организация,
		Справочники.ВидыКонтактнойИнформации.EmailОрганизации, ТекущаяДатаСеанса());
		
	ВидВебСайт = Справочники.ВидыКонтактнойИнформации.НайтиПоРеквизиту("Тип", Перечисления.ТипыКонтактнойИнформации.ВебСтраница, Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
	ПакетПредложений.КонтактыОрганизации.Сайт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначенияРеквизитов.Организация,
		ВидВебСайт, ТекущаяДатаСеанса());
	
	ПакетПредложений.КонтактноеЛицо.ФИО = Строка(ЗначенияРеквизитов.Менеджер);
	ПакетПредложений.КонтактноеЛицо.Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначенияРеквизитов.Менеджер,
		Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, ТекущаяДатаСеанса());
	ПакетПредложений.КонтактноеЛицо.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначенияРеквизитов.Менеджер,
		Справочники.ВидыКонтактнойИнформации.EmailПользователя, ТекущаяДатаСеанса());
		
	// Заполнение сегмента контрагентов.
	ЗаполнитьКонтрагентовПакетаПредложений(ТорговоеПредложение, ПакетПредложений.СписокКонтрагентов);
	
	// Заполнение товаров.
	ЗаполнитьТоварыПакетаПредложений(ПакетПредложений, ТорговоеПредложение);
		
КонецПроцедуры

// Заполнение контактной информации по контактному лицу.
//
// Параметры:
//  КонтактноеЛицо    - СправочникСсылка - контактное лицо в информационной базе, например СправочникСсылка.ФизическиеЛица.
//  ЭлектроннаяПочта  - Строка - адрес электронной почты.
//  Телефон           - Строка - номер телефона.
//  УведомлятьПоПочте - Булево - признак необходимости уведомления по электронной почте.
//  Перезаполнять     - Булево - признак необходимости перезаполнения информации.
//
Процедура ЗаполнитьКонтактнуюИнформациюПоКонтактномуЛицу(Знач КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте, Знач Перезаполнять = Ложь) Экспорт
	
	Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") и Не КонтактноеЛицо.Пустая() Тогда
		Если ПустаяСтрока(ЭлектроннаяПочта) или Перезаполнять Тогда
			ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо,
				Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, ТекущаяДатаСеанса());
		КонецЕсли;
		Если ПустаяСтрока(Телефон) или Перезаполнять Тогда
			Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо,
				Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	
	УведомлятьПоПочте = Не ПустаяСтрока(ЭлектроннаяПочта);
	
КонецПроцедуры

// Заполнение реквизитов номенклатуры в процедуре формирования заказа.
// См. Обработка.ТорговыеПредложения.Форма.ФормированиеЗаказов.
//
// Параметры:
//  Номенклатура - СправочникСсылка - ссылка на справочник номенклатура.
//  Результат	 - Структура - возвращаемые реквизиты ссылки справочника, состав:
//    ИспользованиеХарактеристик - Булево - признак использования характеристик номенклатуры.
//    ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    НоменклатураПоставщика - СправочникСсылка - пустая ссылка номенклатура поставщика.
//    Упаковка - СправочникСсылка - упаковка номенклатуры.
//
Процедура ЗаполнитьРеквизитыНоменклатурыДляФормированияЗаказа(Знач Номенклатура, Результат) Экспорт
	
	Результат.ИспользованиеХарактеристик = Ложь;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Результат.ИспользованиеХарактеристик = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользованиеХарактеристик") = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	КонецЕсли;
	
	Результат.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	Результат.НоменклатураПоставщика = ПредопределенноеЗначение("Справочник.НоменклатураПоставщиков.ПустаяСсылка");
	Результат.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияНоменклатуры(Список) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникВидыНоменклатуры.Ссылка КАК Ссылка,
	|	СправочникВидыНоменклатуры.Наименование КАК Наименование,
	|	СоответствиеКатегорий.ПредставлениеКатегории КАК Категория,
	|	СоответствиеКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть КАК СоответствиеКатегорий
	|		ПО СправочникВидыНоменклатуры.Ссылка = СоответствиеКатегорий.ВидНоменклатуры";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица = "Справочник.ВидыНоменклатуры";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);
	
КонецПроцедуры

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Товары - ТаблицаЗначений - исходная таблица с товарами, колонки:
//    Обязательные поля:
//    * Номенклатура   - СправочникСсылка - номенклатурная позиция.
//    * Характеристика - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка       - СправочникСсылка - упаковка номенклатуры.
//    * Количество     - Число - количество.
//    Заполняемые поля:
//    * УпаковкаКод         - Строка - код упаковки.
//    * ЕдиницаИзмеренияКод - Строка - код единицы измерения.
//    * УпаковкаЧислитель   - Число  - числитель упаковки номенклатуры.
//    * УпаковкаЗнаменатель - Число  - знаменатель упаковки номенклатуры.
//    * ШтрихКод            - Массив - штрихкоды номенклатуры.
//    * Артикул             - Строка - артикул номенклатуры.
//    * Наименование        - Строка - наименование номенклатуры.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//                               Для значения Ложь, штрихкоды не заполняются.
//
Процедура ДобавитьСлужебныеКолонкиТовары(Товары, Знач ПолучатьШтрихКоды = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура)                 КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)         КАК Упаковка,
	|	ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 3))                              КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура.Артикул                          КАК Артикул,
	|	Товары.Номенклатура.Наименование                     КАК Наименование,
	|	Товары.Номенклатура                                  КАК Номенклатура,
	|	Товары.Характеристика                                КАК Характеристика,
	|	СоответствиеВидовНоменклатуры.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	Товары.Упаковка                                      КАК Упаковка,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка.Знаменатель = 0
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Знаменатель
	|	КОНЕЦ                                                КАК УпаковкаЗнаменатель,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка.Числитель = 0
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Числитель
	|	КОНЕЦ                                                КАК УпаковкаЧислитель,
	|	Товары.Количество                                    КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка.Знаменатель = 0
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка.ЕдиницаИзмерения)
	|	КОНЕЦ                                                КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка.Знаменатель = 0
	|			ТОГДА Товары.Упаковка.Код
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ                                                КАК УпаковкаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код             КАК ЕдиницаИзмеренияКод
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть КАК СоответствиеВидовНоменклатуры
	|		ПО Товары.Номенклатура.ВидНоменклатуры = СоответствиеВидовНоменклатуры.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура            КАК Номенклатура,
	|	Товары.Характеристика          КАК Характеристика,
	|	Товары.Упаковка                КАК Упаковка,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И Товары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И Товары.Упаковка = ШтрихкодыНоменклатуры.Упаковка";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка",
			Выборка.Номенклатура, Выборка.Характеристика, Выборка.Упаковка));
		Если СтрокаТовары.Количество() Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары[0], Выборка,, "Номенклатура, Характеристика, Упаковка");
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучатьШтрихКоды Тогда
		ВыборкаШтрихКоды = РезультатПакета[2].Выбрать();
		Пока ВыборкаШтрихКоды.Следующий() Цикл
			СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка",
				ВыборкаШтрихКоды.Номенклатура, ВыборкаШтрихКоды.Характеристика, ВыборкаШтрихКоды.Упаковка));
				
			Если СтрокаТовары <> Неопределено Тогда
				Если СтрокаТовары[0].ШтрихКоды = Неопределено Тогда
					МассивШтрихКодов = Новый Массив;
					МассивШтрихКодов.Добавить(ВыборкаШтрихКоды.ШтрихКод);
					СтрокаТовары[0].ШтрихКоды = МассивШтрихКодов;
				Иначе
					СтрокаТовары[0].ШтрихКоды.Добавить(ВыборкаШтрихКоды.ШтрихКод);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Текст запроса соответствия значений реквизитов вида номенклатуры.
// 
// Необходимо вернуть таблицу содержащее количество значений реквизита в информационной базе
// и количество сопоставленных реквизитов.
// Параметры запроса: &РеквизитОбъекта, &ВидНоменклатуры.
// Поля запроса: КоличествоЗначенийРеквизита, КоличествоСопоставленныхРеквизитов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	""Номенклатура.Производитель"" КАК РеквизитОбъекта,
	|	Производители.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Справочник_Производители
	|ИЗ
	|	Справочник.Производители КАК Производители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Номенклатура.Марка"" КАК РеквизитОбъекта,
	|	Марки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Справочник_Марки
	|ИЗ
	|	Справочник.Марки КАК Марки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.РеквизитОбъекта КАК РеквизитОбъекта,
	|	ВложенныйЗапрос.КоличествоЗначенийРеквизита КАК КоличествоЗначенийРеквизита,
	|	ВложенныйЗапрос.КоличествоСопоставленныхРеквизитов КАК КоличествоСопоставленныхРеквизитов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРеквизитов.Свойство КАК РеквизитОбъекта,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияСвойствОбъектов.Ссылка) КАК КоличествоЗначенийРеквизита,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитов1СБизнесСеть.Значение) КАК КоличествоСопоставленныхРеквизитов
	|	ИЗ
	|		Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаРеквизитов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|				ПО (ЗначенияСвойствОбъектов.Владелец В (СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта, СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта.ВладелецДополнительныхЗначений))
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитов1СБизнесСеть КАК СоответствиеЗначенийРеквизитов1СБизнесСеть
	|				ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = СоответствиеЗначенийРеквизитов1СБизнесСеть.РеквизитОбъекта
	|			ПО ТаблицаРеквизитов.Свойство = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта
	|				И (ТаблицаРеквизитов.Ссылка = &ВидНоменклатуры
	|					ИЛИ ТаблицаРеквизитов.Ссылка.Родитель В (ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура), ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры)))
	|	ГДЕ
	|		(ВЫРАЗИТЬ(ТаблицаРеквизитов.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения)) = &РеквизитОбъекта
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРеквизитов.Свойство
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник_Производители.Ссылка),
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитов1СБизнесСеть.Значение)
	|	ИЗ
	|		РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник_Производители КАК Справочник_Производители
	|			ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = Справочник_Производители.РеквизитОбъекта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитов1СБизнесСеть КАК СоответствиеЗначенийРеквизитов1СБизнесСеть
	|			ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = СоответствиеЗначенийРеквизитов1СБизнесСеть.РеквизитОбъекта
	|				И СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = СоответствиеЗначенийРеквизитов1СБизнесСеть.ВидНоменклатуры
	|	ГДЕ
	|		СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = &ВидНоменклатуры
	|		И СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = ""Номенклатура.Производитель""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник_Марки.Ссылка),
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитов1СБизнесСеть.Значение)
	|	ИЗ
	|		РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник_Марки КАК Справочник_Марки
	|			ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = Справочник_Марки.РеквизитОбъекта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитов1СБизнесСеть КАК СоответствиеЗначенийРеквизитов1СБизнесСеть
	|			ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = СоответствиеЗначенийРеквизитов1СБизнесСеть.РеквизитОбъекта
	|				И СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = СоответствиеЗначенийРеквизитов1СБизнесСеть.ВидНоменклатуры
	|	ГДЕ
	|		СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = &ВидНоменклатуры
	|		И СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = ""Номенклатура.Марка""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.РеквизитОбъекта = &РеквизитОбъекта";

	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получение сопоставленных значений реквизита вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  РеквизитОбъекта	 - Строка, СправочникСсылка - реквизит объекта.
//  ТипЗначения	      - ОписаниеТипов - тип значений реквизита.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список сопоставленных реквизитов, колонки:
//   * Значение                                - СправочникСсылка, Строка, Число, Булево - сопоставленное значение.
//   * ИдентификаторЗначенияРеквизитаКатегории - Строка - идентификатор сопоставленного значения.
//   * ПредставлениеЗначенияРеквизитаКатегории - Строка - представление сопоставленного значения.
//   * Автоподстановка                         - Булево - признак автоматического сопоставления значения.
//
Функция СопоставленныеЗначенияРеквизитаВидаНоменклатуры(Знач ВидНоменклатуры, Знач РеквизитОбъекта, Знач ТипЗначения) Экспорт
	
	// Вывод в список всех реквизитов в ИБ.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Владелец КАК Владелец
	|ПОМЕСТИТЬ ЗначенияСвойствОбъектов
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец В
	|			(ВЫБРАТЬ
	|				ВЫБОР
	|					КОГДА ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
	|						ТОГДА &Владелец
	|					ИНАЧЕ ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений
	|				КОНЕЦ КАК Поле1
	|			ИЗ
	|				ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|			ГДЕ
	|				ДополнительныеРеквизитыИСведения.Ссылка = &Владелец)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектовИерархия.Ссылка,
	|	ЗначенияСвойствОбъектовИерархия.Владелец
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
	|ГДЕ
	|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Значение,
	|	СоответствиеЗначенийРеквизитов1СБизнесСеть.ИдентификаторЗначенияРеквизитаКатегории КАК ИдентификаторЗначенияРеквизитаКатегории,
	|	СоответствиеЗначенийРеквизитов1СБизнесСеть.ПредставлениеЗначенияРеквизитаКатегории КАК ПредставлениеЗначенияРеквизитаКатегории,
	|	СоответствиеЗначенийРеквизитов1СБизнесСеть.Автоподстановка КАК Автоподстановка
	|ИЗ
	|	ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитов1СБизнесСеть КАК СоответствиеЗначенийРеквизитов1СБизнесСеть
	|		ПО ЗначенияСвойствОбъектов.Ссылка = СоответствиеЗначенийРеквизитов1СБизнесСеть.Значение
	|			И (СоответствиеЗначенийРеквизитов1СБизнесСеть.ВидНоменклатуры = &ВидНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение
	|АВТОУПОРЯДОЧИВАНИЕ";	
	
	Если ТипЗнч(РеквизитОбъекта) = Тип("Строка") Тогда
		
		// Модификация запроса для получения значений справочника.
		Тип = ТипЗначения.Типы()[0];
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ЗначенияСвойствОбъектовИерархия", "." + ОбъектМетаданных.Имя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияСвойствОбъектовИерархия.Владелец", "NULL");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", РеквизитОбъекта);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполнение реквизитов заказов.
//
// Параметры:
//  ТаблицаЗаказов	 - ТаблицаЗначений - таблица с ссылками и реквизитами для заполнения.
//                     см. ТорговыеПредложения.ФормированиеЗаказов.Заказы.
//
Процедура ЗаполнитьРеквизитыЗаказов(ТаблицаЗаказов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Контрагент,
	|	ЗаказПоставщику.Организация,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.Валюта,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Проведен
	|			ТОГДА 1
	|		КОГДА ЗаказПоставщику.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеКартинки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&СписокДокументов)
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("СписокДокументов", ТаблицаЗаказов.ВыгрузитьКолонку("Ссылка"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗаказов.Найти(Выборка.Ссылка, "Ссылка");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ТорговыеПредложенияПереопределяемый.ПолучитьЗначениеСтавкиНДС)
// Получение значение перечисления по наименованию.
// Обратное преобразование см. ОбщегоНазначения.ИмяЗначенияПеречисления().
//
// Параметры:
//  ИмяПеречисления      - Строка - наименование метаданных перечисления, например "СтавкаНДС".
//  НаименованиеЗначения - Строка - наименование значения перечисления, например "БезНДС".
// 
// Возвращаемое значение:
//  ПеречислениеСсылка - значение перечисления.
//
Функция ЗначениеПеречисленияПоНаименованию(Знач ИмяПеречисления, Знач НаименованиеЗначения) Экспорт
	
	Результат = Неопределено;
	Если ИмяПеречисления = "СтавкаНДС" Тогда // Перечисления.СтавкиНДС.
		Если Не ПустаяСтрока(НаименованиеЗначения)
			И Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти(НаименованиеЗначения) <> Неопределено Тогда
			Результат = Перечисления.СтавкиНДС[НаименованиеЗначения];
		Иначе
			Результат = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Публикуемые реквизиты номенклатуры.
// 
// Возвращаемое значение:
//  Соответствие - реквизиты справочника Номенклатура, публикуемые для торговых предложений.
//    * Ключ     - Строка - наименование реквизита справочника.
//    * Значение - Структура - свойства реквизита:
//      ** Представление    - Строка - наименование для отображения.
//      ** ПсевдонимТаблицы - Строка - псевдоним для таблицы данных.
//      ** ПутьКДанным      - Строка - текст запроса для получения данных.
//      ** ТипЗначения      - ТипЗначения - тип данных.
//      ** ПустоеЗначение   - Произвольный - Значение реквизита, при котором, он считается не заполненным.
//
Функция РеквизитыНоменклатурыДоступныеДляПубликации() Экспорт
	
	Реквизиты = Новый Соответствие;
	
	// Номенклатура.Вес.
	СвойстваРеквизита = Новый Структура();
	СвойстваРеквизита.Вставить("ПсевдонимТаблицы", "Номенклатура");
	СвойстваРеквизита.Вставить("ПутьКДанным",
		"ВЫБОР КОГДА Номенклатура.ВесИспользовать И Номенклатура.ВесЗнаменатель <> 0 ТОГДА
		|		Номенклатура.ВесЧислитель/Номенклатура.ВесЗнаменатель ИНАЧЕ 0 КОНЕЦ");
	СвойстваРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов("Число"));
	СвойстваРеквизита.Вставить("ПустоеЗначение", 0);
	Реквизиты.Вставить("Номенклатура.Вес", СвойстваРеквизита);
		
	// Номенклатура.Длина.
	СвойстваРеквизита = Новый Структура();
	СвойстваРеквизита.Вставить("ПсевдонимТаблицы", "Номенклатура");
	СвойстваРеквизита.Вставить("ПутьКДанным",
		"ВЫБОР КОГДА Номенклатура.ДлинаИспользовать И Номенклатура.ДлинаЗнаменатель <> 0 ТОГДА
		|		Номенклатура.ДлинаЧислитель/Номенклатура.ДлинаЗнаменатель ИНАЧЕ 0 КОНЕЦ");
	СвойстваРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов("Число"));
	СвойстваРеквизита.Вставить("ПустоеЗначение", 0);
	Реквизиты.Вставить("Номенклатура.Длина", СвойстваРеквизита);
	
	// Номенклатура.Объем.
	СвойстваРеквизита = Новый Структура();
	СвойстваРеквизита.Вставить("ПсевдонимТаблицы", "Номенклатура");
	СвойстваРеквизита.Вставить("ПутьКДанным",
		"ВЫБОР КОГДА Номенклатура.ОбъемИспользовать И Номенклатура.ОбъемЗнаменатель <> 0 ТОГДА
		|		Номенклатура.ОбъемЧислитель/Номенклатура.ОбъемЗнаменатель ИНАЧЕ 0 КОНЕЦ");
	СвойстваРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов("Число"));
	СвойстваРеквизита.Вставить("ПустоеЗначение", 0);
	Реквизиты.Вставить("Номенклатура.Объем", СвойстваРеквизита);
	
	// Номенклатура.Производитель.
	СвойстваРеквизита = Новый Структура();
	СвойстваРеквизита.Вставить("ПсевдонимТаблицы", "Номенклатура");
	СвойстваРеквизита.Вставить("ПутьКДанным", "Номенклатура.Производитель");
	СвойстваРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	СвойстваРеквизита.Вставить("ПустоеЗначение", Справочники.Производители.ПустаяСсылка());
	Реквизиты.Вставить("Номенклатура.Производитель", СвойстваРеквизита);
	
	// Номенклатура.Марка.
	СвойстваРеквизита = Новый Структура();
	СвойстваРеквизита.Вставить("ПсевдонимТаблицы", "Номенклатура");
	СвойстваРеквизита.Вставить("ПутьКДанным", "Номенклатура.Марка");
	СвойстваРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.Марки"));
	СвойстваРеквизита.Вставить("ПустоеЗначение", Справочники.Марки.ПустаяСсылка());
	Реквизиты.Вставить("Номенклатура.Марка", СвойстваРеквизита);
	
	Возврат Реквизиты;
	
КонецФункции

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Если Найти(Форма.ИмяФормы, "ПоискПредложенийПоТоварам") Тогда
		
		ГруппЭлементов = Форма.Элементы.Найти("ГруппаКоманднойПанелиПереопределяемая");
		Если ГруппЭлементов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКоманды = ГруппЭлементов.Имя + "ВставкаИзБуфера";
		
		Если Форма.Команды.Найти(ИмяКоманды) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Формирование команды вставки из буфера.
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ПереопределяемаяКоманда";
		КомандаФормы.Заголовок = "Вставка из буфера";
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
		КомандаФормы.Картинка = БиблиотекаКартинок.ВставитьИзБуфераОбмена;
		КомандаФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.V, , Истина, Истина);
		КомандаФормы.Подсказка = "Вставка из буфера";
		КнопкаФормы = Форма.Элементы.Добавить("ТоварыВставитьСтроки", Тип("КнопкаФормы"), ГруппЭлементов);
		КнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаФормы.ИмяКоманды = ИмяКоманды;
		
		// Формирование команды вставки из буфера.
		ИмяКоманды = ГруппЭлементов.Имя + "ПодобратьТовары";
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ПереопределяемаяКоманда";
		КомандаФормы.Заголовок = "Подобрать товары";
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КомандаФормы.Картинка = БиблиотекаКартинок.ПодобратьТовары;
		КомандаФормы.Подсказка = "Открыть подбор товаров";
		КнопкаФормы = Форма.Элементы.Добавить("ПодобратьТовары", Тип("КнопкаФормы"), ГруппЭлементов);
		КнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаФормы.ИмяКоманды = ИмяКоманды;
		
		УстановитьДоступностьКомандБуфераОбмена(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка переопределяемого метода с возвратом результата.
//
// Параметры:
//  ИмяМетода				 - Строка - имя переопределяемого метода.
//  ДополнительныеПараметры	 - Структура - передаваемые параметры.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение исполняемого метода.
//
Функция ОбработатьПереопределяемыйМетод(ИмяМетода, ДополнительныеПараметры) Экспорт
	
	Если ИмяМетода = "ПолучитьСтрокиИзБуфераОбмена" Тогда
		
		Возврат ПолучитьСтрокиИзБуфераОбмена(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Обработка выбора формы (переопределяемое события).
// Вызов производится на сервере. См. описание метода ОбработкаВыбора.
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма источник события.
//  ВыбранноеЗначение	 - Произвольный - выбранное событие.
//  ИсточникВыбора		 - Произвольный - форма, где осуществлен выбор.
//
Процедура ОбработатьВыбор(Форма, Знач ВыбранноеЗначение, Знач ИсточникВыбора) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровПоОтбору.Форма.Форма"
		И Форма.ИмяФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоТоварам" Тогда
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
		ЕдиницыИзмеренияНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"),
			"ЕдиницаИзмерения");
		
		Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
			ТекущаяСтрока = Форма.Список.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
			
			ТекущаяСтрока.Упаковка = ЕдиницыИзмеренияНоменклатуры.Получить(СтрокаТовара.Номенклатура);
			ТекущаяСтрока.Количество = 1;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Обработка оповещения формы (переопределяемое событие).
// Вызывается на сервере. См. метод ОбработкаОповещения.
//
// Параметры:
//  Форма      - УправляемаяФорма - форма источник события.
//  ИмяСобытия - Строка - имя оповещения.
//
Процедура ОбработатьОповещение(Знач ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена"
		И Источник.ИмяФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоТоварам" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// Получение данных для сопоставления реквизитов и значений реквизитов информационной базы и сервиса.
//
// Параметры:
//  ВидНоменклатуры			 - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  СопоставленныеРеквизиты	 - ТаблицаЗначений - сопоставленные реквизиты в ИБ.
//    * РеквизитОбъекта                 - Произвольный - реквизит.
//    * ИдентификаторРеквизитаКатегории - Строка - идентификатор реквизита категории в сервисе.
//  ДополнительныеРеквизиты	            - ТаблицаЗначений - дополнительные реквизиты номенклатуры.
//    * РеквизитОбъекта - Произвольный - реквизит.
//    * ТипЗначения      - ОписаниеТипов - тип реквизита.
//  РасчетСоответствий		 - ТаблицаЗначений - таблица количества соответствий значений реквизитов.
//    * РеквизитОбъекта                    - Произвольный - реквизит.
//    * КоличествоЗначенийРеквизита        - Число - количество значений реквизита в ИБ.
//    * КоличествоСопоставленныхРеквизитов - Число - количество сопоставленных значений реквизитов.
//
Процедура ПолучитьДанныеСопоставленияРеквизитов(ВидНоменклатуры, СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий) Экспорт
	
	// Заполнение списка набора реквизитов.
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоступныеРеквизиты.РеквизитОбъекта КАК РеквизитОбъекта
	|ПОМЕСТИТЬ ДоступныеРеквизиты
	|ИЗ
	|	&ДоступныеРеквизиты КАК ДоступныеРеквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитОбъекта,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения
	|ПОМЕСТИТЬ ТаблицаРеквизитов
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойств
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойствХарактеристик
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				&ОбщийРеквизитНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРеквизитов.РеквизитОбъекта КАК РеквизитОбъекта,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории
	|ИЗ
	|	ТаблицаРеквизитов КАК ТаблицаРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|		ПО ТаблицаРеквизитов.РеквизитОбъекта = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта
	|			И (СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = &ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДоступныеРеквизиты.РеквизитОбъекта КАК СТРОКА(50)),
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ИдентификаторРеквизитаКатегории
	|ИЗ
	|	ДоступныеРеквизиты КАК ДоступныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|		ПО ((ВЫРАЗИТЬ(ДоступныеРеквизиты.РеквизитОбъекта КАК СТРОКА(50))) = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта)
	|			И (СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = &ВидНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДоступныеРеквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Номенклатура.Производитель"" КАК РеквизитОбъекта,
	|	Производители.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Справочник_Производители
	|ИЗ
	|	Справочник.Производители КАК Производители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Номенклатура.Марка"" КАК РеквизитОбъекта,
	|	Марки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Справочник_Марки
	|ИЗ
	|	Справочник.Марки КАК Марки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРеквизитов.РеквизитОбъекта КАК РеквизитОбъекта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияСвойствОбъектов.Ссылка) КАК КоличествоЗначенийРеквизита,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитов1СБизнесСеть.Значение) КАК КоличествоСопоставленныхРеквизитов
	|ИЗ
	|	ТаблицаРеквизитов КАК ТаблицаРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО (ЗначенияСвойствОбъектов.Владелец В (СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта, СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта.ВладелецДополнительныхЗначений))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитов1СБизнесСеть КАК СоответствиеЗначенийРеквизитов1СБизнесСеть
	|			ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = СоответствиеЗначенийРеквизитов1СБизнесСеть.РеквизитОбъекта
	|		ПО ТаблицаРеквизитов.РеквизитОбъекта = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРеквизитов.РеквизитОбъекта
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник_Производители.Ссылка),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитов1СБизнесСеть.Значение)
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник_Производители КАК Справочник_Производители
	|		ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = Справочник_Производители.РеквизитОбъекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитов1СБизнесСеть КАК СоответствиеЗначенийРеквизитов1СБизнесСеть
	|		ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = СоответствиеЗначенийРеквизитов1СБизнесСеть.РеквизитОбъекта
	|			И СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = СоответствиеЗначенийРеквизитов1СБизнесСеть.ВидНоменклатуры
	|ГДЕ
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = &ВидНоменклатуры
	|	И СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = ""Номенклатура.Производитель""
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник_Марки.Ссылка),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитов1СБизнесСеть.Значение)
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник_Марки КАК Справочник_Марки
	|		ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = Справочник_Марки.РеквизитОбъекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитов1СБизнесСеть КАК СоответствиеЗначенийРеквизитов1СБизнесСеть
	|		ПО СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = СоответствиеЗначенийРеквизитов1СБизнесСеть.РеквизитОбъекта
	|			И СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = СоответствиеЗначенийРеквизитов1СБизнесСеть.ВидНоменклатуры
	|ГДЕ
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры = &ВидНоменклатуры
	|	И СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = ""Номенклатура.Марка""
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта";
	
	СоответствиеРеквизитов = РеквизитыНоменклатурыДоступныеДляПубликации();
	Для Каждого Реквизит из СоответствиеРеквизитов Цикл
		НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.РеквизитОбъекта = Реквизит.Ключ;
		НоваяСтрока.ТипЗначения = Реквизит.Значение.ТипЗначения;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидНоменклатуры",           ВидНоменклатуры);
	Запрос.УстановитьПараметр("ДоступныеРеквизиты",        ДополнительныеРеквизиты);
	Запрос.УстановитьПараметр("ОбщийРеквизитНоменклатура", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	Выборка = ПакетЗапросов[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СопоставленныеРеквизиты.Добавить(), Выборка);
	КонецЦикла;
	
	ВременныйМассив = Новый Массив;
	Выборка = ПакетЗапросов[6].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РасчетСоответствий.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Получение свойств торгового предложения.
//
// Параметры:
//  Источник        - СправочникСсылка - источник торгового соглашения, например СправочникСсылка.Соглашения.
//  ЗначенияСвойств - Структура - возвращаемое значение заполнения.
//
Процедура ПолучитьСвойстваТорговогоПредложения(Знач Источник, ЗначенияСвойств) Экспорт
	
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Валюта"));
	
КонецПроцедуры

// Текст запроса публикуемых товаров.
// 
// В запросе необходимо вернуть данные для публикации товаров.
// См. ТорговыеПредложения.ОписаниеПакетаПредложений таблица Товары.
// Обязательный параметр &ТорговыеПредложения (определяемый тип ТорговыеПредложения).
//
// Параметры:
//   ФормироватьСвойства - Булево - признак добавления подзапроса для получения свойств товаров, штрих-кодов.
//   ВключатьТолькоСопоставленные - Булево - признак включения только сопоставленной номенклатуры.
//   ИспользоватьПараметры - Булево - признак использования параметров запроса &ТорговоеПредложение, &Период.
// Возвращаемое значение:
//  Строка - текст запроса.
//
// Пример:
//   ТорговыеПредложенияПереопределяемый.ТекстЗапросаПубликуемыхТоваров(Ложь) =
//     "ВЫБРАТЬ
//     |  Товары.ВидНоменклатуры,
//     |  Товары.Номенклатура,
//     |  Товары.Характеристика,
//     |  Товары.КатегорияНаименование,
//     |  Товары.Упаковка,
//     |  Товары.СрокаПоставки,
//     |  Товары.Цена
//     |ИЗ Справочник.ПрайсЛист.Товары КАК Товары
//     |  ГДЕ Товары.Ссылка = &ТорговыеПредложения"
//
Функция ТекстЗапросаПубликуемыхТоваров(ФормироватьСвойства = Ложь, ВключатьТолькоСопоставленные = Истина,
	ИспользоватьПараметры = Ложь) Экспорт
	
	ТекстТовары =
	"ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка КАК ТорговоеПредложение,
	|	СоглашенияСКлиентами.Организация КАК Организация,
	|	СоглашенияСКлиентами.СегментНоменклатуры КАК СегментНоменклатуры,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦены,
	|	СоглашенияСКлиентами.Валюта КАК Валюта,
	|	СоглашенияСКлиентами.Валюта.Код КАК ВалютаКод,
	|	СоглашенияСКлиентами.СрокПоставки КАК СрокПоставки
	|ПОМЕСТИТЬ ТорговыеПредложения
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ПО СостоянияСинхронизации.ТорговоеПредложение = СоглашенияСКлиентами.Ссылка
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Ссылка = &ТорговоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение,
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|	ТорговыеПредложения.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ТорговыеПредложения.СрокПоставки КАК СрокПоставки
	|ПОМЕСТИТЬ НоменклатураПоСегменту
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				{(&Период)},
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТорговыеПредложения.ВидЦены
	|					ИЗ
	|						ТорговыеПредложения КАК ТорговыеПредложения)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураСегмента.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураСегмента.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И (ЦеныНоменклатурыСрезПоследних.ВидЦены В
	|				(ВЫБРАТЬ
	|					ТорговыеПредложения.ВидЦены
	|				ИЗ
	|					ТорговыеПредложения КАК ТорговыеПредложения))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТорговыеПредложения КАК ТорговыеПредложения
	|		ПО НоменклатураСегмента.Сегмент = ТорговыеПредложения.СегментНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентамиТовары.Ссылка КАК ТорговоеПредложение,
	|	СоглашенияСКлиентамиТовары.НомерСтроки КАК НомерСтроки,
	|	СоглашенияСКлиентамиТовары.Номенклатура КАК Номенклатура,
	|	СоглашенияСКлиентамиТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентамиТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА СоглашенияСКлиентамиТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СоглашенияСКлиентамиТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	СоглашенияСКлиентамиТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА ТорговыеПредложения.ВидЦены
	|		ИНАЧЕ СоглашенияСКлиентамиТовары.ВидЦены
	|	КОНЕЦ КАК ВидЦены,
	|	ТорговыеПредложения.Валюта КАК Валюта,
	|	ТорговыеПредложения.Валюта.Код КАК ВалютаКод,
	|	СоглашенияСКлиентамиТовары.Цена КАК Цена,
	|	СоглашенияСКлиентамиТовары.СрокПоставки КАК СрокПоставки
	|ПОМЕСТИТЬ УточненияНоменклатуры
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТорговыеПредложения КАК ТорговыеПредложения
	|		ПО СоглашенияСКлиентамиТовары.Ссылка = ТорговыеПредложения.ТорговоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашениеТовары.Ссылка КАК ТорговоеПредложение,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА СоглашениеШапка.ВозвращатьМногооборотнуюТару
	|				И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОГДА СоглашениеШапка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|		КОГДА СоглашениеШапка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|		ИНАЧЕ ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		ИНАЧЕ СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(СоглашениеТовары.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
	|			ТОГДА СоглашениеТовары.СрокПоставки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
	|					ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
	|				ИНАЧЕ СоглашениеШапка.СрокПоставки
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокПоставки
	|ПОМЕСТИТЬ ЦеныПоСоглашению
	|ИЗ
	|	УточненияНоменклатуры КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = ВременнаяТаблицаТовары.ТорговоеПредложение)
	|			И ВременнаяТаблицаТовары.Номенклатура = СоглашениеТовары.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = СоглашениеТовары.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ПО (СоглашениеШапка.Ссылка = ВременнаяТаблицаТовары.ТорговоеПредложение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ВременнаяТаблицаТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|			И (СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследнихПоТоварам
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			{(&Период)},
	|			(Номенклатура, Характеристика, ВидЦены) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.Характеристика,
	|					ВременнаяТаблицаТовары.ВидЦены
	|				ИЗ
	|					УточненияНоменклатуры КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.ТорговоеПредложение КАК ТорговоеПредложение,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА &ТекстЗапросаКоэффициентУпаковки1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Цена
	|ПОМЕСТИТЬ ЦеныПоВиду
	|ИЗ
	|	УточненияНоменклатуры КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследнихПоТоварам КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И ВременнаяТаблицаТовары.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоСоглашению.ТорговоеПредложение КАК ТорговоеПредложение,
	|	ЦеныПоСоглашению.НомерСтроки КАК НомерСтроки,
	|	ЦеныПоСоглашению.СтавкаНДС КАК СтавкаНДС,
	|	ЦеныПоСоглашению.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ЦеныПоСоглашению.Цена = 0
	|			ТОГДА ЦеныПоВиду.Цена
	|		ИНАЧЕ ЦеныПоСоглашению.Цена
	|	КОНЕЦ КАК Цена,
	|	ЦеныПоСоглашению.СрокПоставки КАК СрокПоставки
	|ПОМЕСТИТЬ ЦеныУточненнойНоменклатуры
	|ИЗ
	|	ЦеныПоСоглашению КАК ЦеныПоСоглашению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоВиду КАК ЦеныПоВиду
	|		ПО (ЦеныПоВиду.НомерСтроки = ЦеныПоСоглашению.НомерСтроки)
	|			И (ЦеныПоВиду.ТорговоеПредложение = ЦеныПоСоглашению.ТорговоеПредложение)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЦеныПоСоглашению.Цена = 0
	|				ТОГДА ЦеныПоВиду.Цена
	|			ИНАЧЕ ЦеныПоСоглашению.Цена
	|		КОНЕЦ > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УточненияНоменклатуры.ТорговоеПредложение КАК ТорговоеПредложение,
	|	УточненияНоменклатуры.Номенклатура КАК Номенклатура,
	|	УточненияНоменклатуры.Характеристика КАК Характеристика,
	|	УточненияНоменклатуры.Упаковка КАК Упаковка,
	|	ЦеныУточненнойНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЦеныУточненнойНоменклатуры.ВидЦены КАК ВидЦены,
	|	УточненияНоменклатуры.ВалютаКод КАК ВалютаКод,
	|	ЦеныУточненнойНоменклатуры.Цена КАК Цена,
	|	ЦеныУточненнойНоменклатуры.СрокПоставки КАК СрокПоставки,
	|	СоответствиеВидовНоменклатуры1СБизнесСеть.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатуры1СБизнесСеть.ПредставлениеКатегории КАК ПредставлениеКатегории
	|ПОМЕСТИТЬ ВыборкаУточненийНоменклатуры
	|ИЗ
	|	УточненияНоменклатуры КАК УточненияНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть КАК СоответствиеВидовНоменклатуры1СБизнесСеть
	|		ПО УточненияНоменклатуры.Номенклатура.ВидНоменклатуры = СоответствиеВидовНоменклатуры1СБизнесСеть.ВидНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныУточненнойНоменклатуры КАК ЦеныУточненнойНоменклатуры
	|		ПО УточненияНоменклатуры.НомерСтроки = ЦеныУточненнойНоменклатуры.НомерСтроки
	|			И УточненияНоменклатуры.ТорговоеПредложение = ЦеныУточненнойНоменклатуры.ТорговоеПредложение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УточненияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЦеныПоСоглашению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЦеныПоВиду
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЦеныУточненнойНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товар.ТорговоеПредложение КАК ТорговоеПредложение,
	|	Товар.Номенклатура КАК Номенклатура,
	|	Товар.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товар.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товар.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Товар.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	Товар.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Товар.ВидЦены КАК ВидЦены,
	|	Товар.Валюта.Код КАК ВалютаКод,
	|	Товар.Цена КАК Цена,
	|	Товар.СрокПоставки КАК СрокПоставки,
	|	СоответствиеВидовНоменклатуры1СБизнесСеть.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатуры1СБизнесСеть.ПредставлениеКатегории КАК КатегорияНаименование
	|ПОМЕСТИТЬ ВыборкаНоменклатуры
	|ИЗ
	|	НоменклатураПоСегменту КАК Товар
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть КАК СоответствиеВидовНоменклатуры1СБизнесСеть
	|		ПО Товар.Номенклатура.ВидНоменклатуры = СоответствиеВидовНоменклатуры1СБизнесСеть.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаУточненийНоменклатуры КАК ВыборкаУточненийНоменклатуры
	|		ПО Товар.Номенклатура = ВыборкаУточненийНоменклатуры.Номенклатура
	|			И Товар.Характеристика = ВыборкаУточненийНоменклатуры.Характеристика
	|ГДЕ
	|	ВыборкаУточненийНоменклатуры.Номенклатура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТорговыеПредложения.ТорговоеПредложение,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товар.ЕдиницаИзмерения
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка
	|	КОНЕЦ,
	|	Товар.СтавкаНДС,
	|	ТорговыеПредложения.ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Валюта.Код,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ТорговыеПредложения.СрокПоставки,
	|	СоответствиеВидовНоменклатуры1СБизнесСеть.ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатуры1СБизнесСеть.ПредставлениеКатегории
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних({(&Период)}, Цена > 0) КАК ЦеныНоменклатурыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товар
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = Товар.Ссылка
	|			И (ЦеныНоменклатурыСрезПоследних.ВидЦены В
	|				(ВЫБРАТЬ
	|					ТорговыеПредложения.ВидЦены
	|				ИЗ
	|					ТорговыеПредложения КАК ТорговыеПредложения))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть КАК СоответствиеВидовНоменклатуры1СБизнесСеть
	|		ПО (Товар.ВидНоменклатуры = СоответствиеВидовНоменклатуры1СБизнесСеть.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаУточненийНоменклатуры КАК ВыборкаУточненийНоменклатуры
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВыборкаУточненийНоменклатуры.Номенклатура
	|			И ЦеныНоменклатурыСрезПоследних.Характеристика = ВыборкаУточненийНоменклатуры.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТорговыеПредложения КАК ТорговыеПредложения
	|		ПО ЦеныНоменклатурыСрезПоследних.ВидЦены = ТорговыеПредложения.ВидЦены
	|			И (ТорговыеПредложения.СегментНоменклатуры = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	ВыборкаУточненийНоменклатуры.Номенклатура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыборкаУточненийНоменклатуры.ТорговоеПредложение,
	|	ВыборкаУточненийНоменклатуры.Номенклатура,
	|	ВыборкаУточненийНоменклатуры.Характеристика,
	|	ВыборкаУточненийНоменклатуры.Упаковка,
	|	ВыборкаУточненийНоменклатуры.СтавкаНДС,
	|	ВыборкаУточненийНоменклатуры.ВидЦены,
	|	ВыборкаУточненийНоменклатуры.ВалютаКод,
	|	ВыборкаУточненийНоменклатуры.Цена,
	|	ВыборкаУточненийНоменклатуры.СрокПоставки,
	|	ВыборкаУточненийНоменклатуры.ИдентификаторКатегории,
	|	ВыборкаУточненийНоменклатуры.ПредставлениеКатегории
	|ИЗ
	|	ВыборкаУточненийНоменклатуры КАК ВыборкаУточненийНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаНоменклатуры.ТорговоеПредложение КАК ТорговоеПредложение,
	|	ТорговыеПредложения.Организация КАК Организация,
	|	ВыборкаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВыборкаНоменклатуры.Номенклатура.Наименование КАК Наименование,
	|	ВыборкаНоменклатуры.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ВыборкаНоменклатуры.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
	|	ВыборкаНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА НЕ ВыборкаНоменклатуры.Упаковка.Владелец В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения), ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	|			ТОГДА ВыборкаНоменклатуры.Упаковка.Владелец.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ВыборкаНоменклатуры.Упаковка.Код
	|	КОНЕЦ КАК УпаковкаКод,
	|	ВыборкаНоменклатуры.Упаковка.Наименование КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА ВыборкаНоменклатуры.Упаковка.Числитель = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВыборкаНоменклатуры.Упаковка.Числитель
	|	КОНЕЦ КАК УпаковкаЧислитель,
	|	ВЫБОР
	|		КОГДА ВыборкаНоменклатуры.Упаковка.Знаменатель = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВыборкаНоменклатуры.Упаковка.Знаменатель
	|	КОНЕЦ КАК УпаковкаЗнаменатель,
	|	ВЫБОР
	|		КОГДА НЕ ВыборкаНоменклатуры.Упаковка.Владелец В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения), ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	|			ТОГДА ВыборкаНоменклатуры.Упаковка.Владелец.ЕдиницаИзмерения
	|		ИНАЧЕ ВыборкаНоменклатуры.Упаковка
	|	КОНЕЦ КАК БазоваяЕдиницаИзмерения,
	|	ВыборкаНоменклатуры.Номенклатура.Артикул КАК Артикул,
	|	ВыборкаНоменклатуры.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВыборкаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ВыборкаНоменклатуры.ВидЦены КАК ВидЦены,
	|	ВыборкаНоменклатуры.ВалютаКод КАК ВалютаКод,
	|	МАКСИМУМ(ВыборкаНоменклатуры.Цена) КАК Цена,
	|	МАКСИМУМ(ВыборкаНоменклатуры.СрокПоставки) КАК СрокПоставки,
	|	ВыборкаНоменклатуры.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	ВыборкаНоменклатуры.КатегорияНаименование КАК КатегорияНаименование,
	|	СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток) КАК ВНаличииОстаток
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ВыборкаНоменклатуры КАК ВыборкаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	|				{(&Период)},
	|				(Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ВыборкаНоменклатуры.Номенклатура,
	|							ВыборкаНоменклатуры.Характеристика
	|						ИЗ
	|							ВыборкаНоменклатуры КАК ВыборкаНоменклатуры)
	|					И Склад В ИЕРАРХИИ
	|						(ВЫБРАТЬ
	|							ТорговыеПредложения.ТорговоеПредложение.Склад
	|						ИЗ
	|							ТорговыеПредложения)) КАК СвободныеОстаткиОстатки
	|		ПО ВыборкаНоменклатуры.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	|			И ВыборкаНоменклатуры.Характеристика = СвободныеОстаткиОстатки.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТорговыеПредложения КАК ТорговыеПредложения
	|		ПО (ВыборкаНоменклатуры.ТорговоеПредложение.СегментНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|				ИЛИ СвободныеОстаткиОстатки.ВНаличииОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаНоменклатуры.ТорговоеПредложение,
	|	ТорговыеПредложения.Организация,
	|	ВыборкаНоменклатуры.Номенклатура,
	|	ВыборкаНоменклатуры.Номенклатура.Наименование,
	|	ВыборкаНоменклатуры.Характеристика,
	|	ВыборкаНоменклатуры.Упаковка,
	|	ВыборкаНоменклатуры.Упаковка.Наименование,
	|	ВыборкаНоменклатуры.Номенклатура.Артикул,
	|	ВыборкаНоменклатуры.Номенклатура.ВидНоменклатуры,
	|	ВыборкаНоменклатуры.СтавкаНДС,
	|	ВыборкаНоменклатуры.ВидЦены,
	|	ВыборкаНоменклатуры.ВалютаКод,
	|	ВыборкаНоменклатуры.ИдентификаторКатегории,
	|	ВыборкаНоменклатуры.КатегорияНаименование,
	|	ЕСТЬNULL(ВыборкаНоменклатуры.Характеристика.Наименование, """"),
	|	ВЫБОР
	|		КОГДА НЕ ВыборкаНоменклатуры.Упаковка.Владелец В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения), ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	|			ТОГДА ВыборкаНоменклатуры.Упаковка.Владелец.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ВыборкаНоменклатуры.Упаковка.Код
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВыборкаНоменклатуры.Упаковка.Числитель = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВыборкаНоменклатуры.Упаковка.Числитель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВыборкаНоменклатуры.Упаковка.Знаменатель = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВыборкаНоменклатуры.Упаковка.Знаменатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВыборкаНоменклатуры.Упаковка.Владелец В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения), ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	|			ТОГДА ВыборкаНоменклатуры.Упаковка.Владелец.ЕдиницаИзмерения
	|		ИНАЧЕ ВыборкаНоменклатуры.Упаковка
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	БазоваяЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураПоСегменту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВыборкаУточненийНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВыборкаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ТорговоеПредложение КАК ТорговоеПредложение,
	|	Товары.Организация КАК Организация,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Наименование КАК Наименование,
	|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.УпаковкаКод КАК УпаковкаКод,
	|	Товары.УпаковкаНаименование КАК УпаковкаНаименование,
	|	Товары.УпаковкаЧислитель КАК УпаковкаЧислитель,
	|	Товары.УпаковкаЗнаменатель КАК УпаковкаЗнаменатель,
	|	Товары.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Артикул КАК Артикул,
	|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Товары.ВалютаКод КАК ВалютаКод,
	|	Товары.Цена КАК Цена,
	|	Товары.СрокПоставки КАК СрокПоставки,
	|	Товары.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	Товары.КатегорияНаименование КАК КатегорияНаименование
	|ИЗ
	|	Товары КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТорговоеПредложение,
	|	Организация,
	|	Номенклатура,
	|	Характеристика
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	МодульУпаковки = Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения");
	
	Если МодульУпаковки = Неопределено Тогда
		ТекстТовары = СтрЗаменить(ТекстТовары, "&ТекстЗапросаКоэффициентУпаковки1", "NULL");
		ТекстТовары = СтрЗаменить(ТекстТовары, "&ТекстЗапросаКоэффициентУпаковки2", "NULL");
		ТекстТовары = СтрЗаменить(ТекстТовары, "&ТекстЗапросаКоэффициентУпаковки3", "NULL");
	Иначе
		МодульУпаковки = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МодульУпаковки.ПолноеИмя());
		
		ТекстТовары = СтрЗаменить(ТекстТовары,
			"&ТекстЗапросаКоэффициентУпаковки1",
			МодульУпаковки.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.Упаковка",
			"ВременнаяТаблицаТовары.Номенклатура"));
				
		ТекстТовары = СтрЗаменить(ТекстТовары,
			"&ТекстЗапросаКоэффициентУпаковки2",
			МодульУпаковки.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
				
		ТекстТовары = СтрЗаменить(ТекстТовары,
			"&ТекстЗапросаКоэффициентУпаковки3",
			МодульУпаковки.ТекстЗапросаКоэффициентаУпаковки(
			"СоглашениеТовары.Упаковка",
			"СоглашениеТовары.Номенклатура"));
	КонецЕсли;
	
	// Удаление параметров в запросе, замена на условие ИСТИНА.
	Если Не ИспользоватьПараметры Тогда
		ТекстТовары = СтрЗаменить(ТекстТовары, "И СоглашенияСКлиентами.Ссылка = &ТорговоеПредложение", "");
	КонецЕсли;
	
	// Режим возврата несопоставленных видов номенклатуры.
	Если Не ВключатьТолькоСопоставленные Тогда
		ТекстТовары = СтрЗаменить(ТекстТовары, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть",
			"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть");
	КонецЕсли;
	
	ТекстСвойства =
	"ВЫБРАТЬ
	|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ПредставлениеРеквизитаКатегории КАК Наименование,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ПОМЕСТИТЬ Свойства
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (Товары.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|		ПО (Товары.ВидНоменклатуры = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры)
	|			И НоменклатураДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ВидНоменклатуры,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ПредставлениеРеквизитаКатегории,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ИдентификаторРеквизитаКатегории,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|		ПО Товары.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|		ПО Товары.ВидНоменклатуры = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры
	|			И (ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ВидНоменклатуры,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ПредставлениеРеквизитаКатегории,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ИдентификаторРеквизитаКатегории,
	|	""&Свойство"",
	|	&Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|		ПО Товары.ВидНоменклатуры = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры
	|			И (СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = ""&Свойство"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Свойства.Номенклатура КАК Номенклатура,
	|	Свойства.Характеристика КАК Характеристика,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	Свойства.Значение КАК Значение,
	|	СоответствиеЗначенийРеквизитов1СБизнесСеть.ИдентификаторЗначенияРеквизитаКатегории КАК ИдентификаторЗначения
	|ИЗ
	|	Свойства КАК Свойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитов1СБизнесСеть КАК СоответствиеЗначенийРеквизитов1СБизнесСеть
	|		ПО Свойства.ВидНоменклатуры = СоответствиеЗначенийРеквизитов1СБизнесСеть.ВидНоменклатуры
	|			И Свойства.Свойство = СоответствиеЗначенийРеквизитов1СБизнесСеть.РеквизитОбъекта
	|			И Свойства.Значение = СоответствиеЗначенийРеквизитов1СБизнесСеть.Значение";
	
	
	ТекстШтрихКоды =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И (Товары.БазоваяЕдиницаИзмерения = ВЫБОР
	|				КОГДА НЕ Штрихкоды.Упаковка.Владелец В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения), ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	|					ТОГДА Штрихкоды.Упаковка.Владелец.ЕдиницаИзмерения
	|				КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА ВЫБОР
	|							КОГДА НЕ Штрихкоды.Номенклатура.ЕдиницаИзмерения.Владелец В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения), ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	|								ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения.Владелец.ЕдиницаИзмерения
	|							ИНАЧЕ Товары.БазоваяЕдиницаИзмерения
	|						КОНЕЦ
	|				ИНАЧЕ Штрихкоды.Упаковка
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.БазоваяЕдиницаИзмерения,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """")";
		
	
	ТекстЗапроса = ТекстТовары;
	Если ФормироватьСвойства Тогда
		Разделитель = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

		ТекстЗапроса = ТекстЗапроса + Разделитель
			+ ТекстСвойства + Разделитель + ТекстШтрихКоды;
	Иначе
		
		МассивЗапросов = СтрРазделить(ТекстЗапроса, ";");
		
		// Удаление последних четырех запросов.
		МассивЗапросов.Удалить(МассивЗапросов.Количество() - 1);
		МассивЗапросов.Удалить(МассивЗапросов.Количество() - 1);
		МассивЗапросов.Удалить(МассивЗапросов.Количество() - 1);
		МассивЗапросов.Удалить(МассивЗапросов.Количество() - 1);
		
		// Удаление использования временной таблицы ВыборкаНоменклатуры.
		ТекстЗапроса = СтрСоединить(МассивЗапросов, ";");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ Товары", "");
		
		// Удаление индекса.
		ТекстИндекса = 
		"ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	БазоваяЕдиницаИзмерения";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИндекса, "");
		СтрНайти(ТекстЗапроса, ТекстИндекса);
		
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполнение адресов абонента по зарегистрированным организациям и складам.
//
// Параметры:
//  АдресаАбонента - ТаблицаЗначения - таблица для заполнения, см. ТорговыеПредложения.ОписаниеАдресовАбонента().
//
Процедура ЗаполнитьАдресаАбонента(АдресаАбонента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.Организации1СБизнесСеть КАК Организации1СБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ПО (ОрганизацииКонтактнаяИнформация.Ссылка = Организации1СБизнесСеть.Организация)
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Представление,
	|	СкладыКонтактнаяИнформация.ЗначенияПолей,
	|	СкладыКонтактнаяИнформация.Вид,
	|	СкладыКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|ГДЕ
	|	СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаАдреса = АдресаАбонента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАдреса, Выборка);
		СтрокаАдреса.Описание = СтрШаблон("%1 (%2)", Выборка.Вид, Выборка.Ссылка);
	КонецЦикла;
	
	АдресаАбонента.Сортировать("Представление");	
	
КонецПроцедуры

// Способы доставки для заполнения по умолчанию значений.
//                                  	
// Параметры:
//  ВидДоставки	- Строка - значение вида доставки, варианты "Самовывоз", "Доставка".
// 
// Возвращаемое значение:
//  СписокЗначений - возможные значения способа доставки. Первое значение является значением по умолчанию.
//
Функция СпособыДоставки(ВидДоставки = Неопределено) Экспорт
	
	СпособыДоставки = Новый СписокЗначений;
	Если ВРег(ВидДоставки) = "САМОВЫВОЗ" Тогда
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
	ИначеЕсли ВРег(ВидДоставки) = "ДОСТАВКА" Тогда
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
	Иначе
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
	КонецЕсли;
	
	Возврат СпособыДоставки;
	
КонецФункции

// Получение имени ставки НДС.
//
// Параметры:
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС.
//
Процедура ПолучитьИмяСтавкиНДС(Знач Ссылка, ИмяСтавкиНДС) Экспорт
	
	ОбъектМетаданных = Ссылка.Метаданные();
	ИндексЗначения = Перечисления.СтавкиНДС.Индекс(Ссылка);
	Если ИндексЗначения <> -1 Тогда
		ИмяСтавкиНДС = ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	Иначе
		ИмяСтавкиНДС = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Получение значения ставки НДС по идентификатору.
//
// Параметры:
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС.
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//
Процедура ПолучитьЗначениеСтавкиНДС(Знач ИмяСтавкиНДС, Ссылка) Экспорт
	
	Если Не ПустаяСтрока(ИмяСтавкиНДС)
		И Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти(ИмяСтавкиНДС) <> Неопределено Тогда
		Ссылка = Перечисления.СтавкиНДС[ИмяСтавкиНДС];
	Иначе
		Ссылка = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсУП

// Добавление команды поиска торговых предложений в формах.
//
// Параметры:
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
//
Процедура ДобавитьКомандуПоискаТорговыхПредложений(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ТорговыеПредложения) Тогда
		КомандаСоздатьНаОсновании =  КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ТорговыеПредложенияКлиентПереопределяемый.ОткрытьПоискТоваровПоСписку";
		КомандаСоздатьНаОсновании.Идентификатор = "ПоискТоваровПоСписку";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Заказы поставщикам в 1С:Бизнес-сеть'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбменБизнесСеть";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устарела. Получение значений предопределенных реквизитов номенклатуры.
//
// Параметры:
//  Номенклатура							 - СправочникСсылка.Номенклатура - ссылка на справочник номенклатура.
//  ПредопределенныеРеквизитыНоменклатуры	 - Массив - список предопределенных реквизитов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица свойств и значений.
//
Функция ЗначенияПредопределенныхРеквизитовНоменклатуры(Номенклатура, ПредопределенныеРеквизитыНоменклатуры)
	
	Если ПредопределенныеРеквизитыНоменклатуры.Количество() Тогда
		
		ДоступныеДляПубликацииРеквизиты = РеквизитыНоменклатурыДоступныеДляПубликации();
		
		Запрос = Новый Запрос;
		ТекстыЗапроса = Новый Массив;
		СчетчикРеквизитов = 0;
		Для Каждого ПредопределенныйРеквизит из ПредопределенныеРеквизитыНоменклатуры Цикл
			СвойстваРеквизита = ДоступныеДляПубликацииРеквизиты.Получить(ПредопределенныйРеквизит.РеквизитОбъекта);
			Если СвойстваРеквизита <> Неопределено Тогда
				СчетчикРеквизитов = СчетчикРеквизитов + 1;
				ТекстыЗапроса.Добавить("ВЫБРАТЬ
				|	""" + ПредопределенныйРеквизит.РеквизитОбъекта + """ КАК Свойство,
				|	" + СвойстваРеквизита.ПутьКДанным + " КАК Значение
				|ИЗ
				|	Справочник.Номенклатура КАК "+ СвойстваРеквизита.ПсевдонимТаблицы +"
				|ГДЕ
				|	" + СвойстваРеквизита.ПсевдонимТаблицы + ".Ссылка = &Номенклатура
				|	" + ?(СвойстваРеквизита.Свойство("ПустоеЗначение"),
					"И Не "+ СвойстваРеквизита.ПутьКДанным + " = &ПустоеЗначение" + Формат(СчетчикРеквизитов,"ЧГ=") , ""));
					
				Если СвойстваРеквизита.Свойство("ПустоеЗначение") Тогда
					Запрос.УстановитьПараметр("ПустоеЗначение" + Формат(СчетчикРеквизитов,"ЧГ="),
						СвойстваРеквизита.ПустоеЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Разделитель =
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, Разделитель);
		
		Если Не ПустаяСтрока(Запрос.Текст) Тогда
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Возврат Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначенияПредопределенныхРеквизитов = Новый ТаблицаЗначений;
	ЗначенияПредопределенныхРеквизитов.Колонки.Добавить("Свойство", Новый ОписаниеТипов("Строка",,
																	Новый КвалификаторыСтроки(1, ДопустимаяДлина.Переменная)));
	ЗначенияПредопределенныхРеквизитов.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка",,
																	Новый КвалификаторыСтроки(1, ДопустимаяДлина.Переменная)));
	Возврат ЗначенияПредопределенныхРеквизитов;
	
КонецФункции

// Получение признака записи ведомого регистра сведений.
//
// Параметры:
//  Ссылка	 - Произвольный - ссылка на объект информационной базы.
//  Регистры - Массив - список регистров сведений.
// 
// Возвращаемое значение:
//  Булево - признак записи ведомого регистра.
//
Функция ЭтоЗаписьВедомогоРегистраСведений(Ссылка, Регистры)
	
	Для Каждого Элемент Из Регистры Цикл
		Если ТипЗнч(Ссылка) = Тип("РегистрСведенийКлючЗаписи." + Элемент.Имя) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Получение дополнительных ссылок назначения заказов.
//
// Параметры:
//  УдалямыеСсылки	 - Массив - ссылки документов Заказ поставщику для удаления.
// 
// Возвращаемое значение:
//  СписокЗначений - дополнительные ссылки для удаления, тип СправочникСсылка.Назначения.
//
Функция НазначенияЗаказов(УдалямыеСсылки)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Назначения КАК Таблица
	|ГДЕ
	|	Таблица.Заказ В(&УдалямыеСсылки)";
	Запрос.УстановитьПараметр("УдалямыеСсылки", УдалямыеСсылки);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получение примитивного значения по параметру.
//
// Параметры:
//  Значение - Произвольный - значение для преобразование.
// 
// Возвращаемое значение:
//  Произвольный - значение примитивного типа (Число, Строка, Булево).
//
Функция ПримитивноеЗначение(Знач Значение)
	
	Если ТипЗнч(Значение) <> Тип("Число")
		И ТипЗнч(Значение) <> Тип("Строка")
		И ТипЗнч(Значение) <> Тип("Булево") Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Получение соответствия для определения функциональных опция по имени объектов.
// 
// Возвращаемое значение:
//  Соответствие - значение зависимостей, где Ключ - имя формы, Значение - функциональная опция.
//
Функция ЗависимостьФункционалаОтФункциональныхОпций()
	
	Зависимость = Новый Соответствие;
	Зависимость.Вставить("Обработка.ТорговыеПредложения.Форма.СопоставлениеНоменклатуры",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ИспользоватьНесколькоВидовНоменклатуры"));
	Зависимость.Вставить("Обработка.ТорговыеПредложения.Форма.ФормаСписка",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ИспользоватьСоглашенияСКлиентами"));
		
	Возврат Зависимость;
	
КонецФункции

// Заполнение сегмента контрагентов торгового предложения
//
// Параметры:
//  Соглашение			 - СправочникСсылка - ссылка справочника соглашения с контрагентами.
//  СегментКонтрагентов	 - Массив - контрагенты для органичения доступа к торговым предложениям.
//
Процедура ЗаполнитьКонтрагентовПакетаПредложений(ТорговоеПредложение, СписокКонтрагентов)

	Реквизиты = "СегментПартнеров, Контрагент, Партнер, Типовое";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТорговоеПредложение, Реквизиты);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Типовое",          ЗначенияРеквизитов.Типовое);
	Запрос.УстановитьПараметр("Контрагент",       ЗначенияРеквизитов.Контрагент);
	Запрос.УстановитьПараметр("Партнер",          ЗначенияРеквизитов.Партнер);
	Запрос.УстановитьПараметр("СегментПартнеров", ЗначенияРеквизитов.СегментПартнеров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.ИНН    КАК ИНН,
	|	Контрагенты.КПП    КАК КПП,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ПартнерыСегмента.Партнер = Контрагенты.Партнер
	|ГДЕ
	|	ПартнерыСегмента.Сегмент = &СегментПартнеров
	|	И НЕ Контрагенты.ИНН = """"
	|	И &Типовое = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ИНН = """"
	|	И &Типовое = ЛОЖЬ
	|	И Контрагенты.Партнер = &Партнер
	|	И &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ИНН = """"
	|	И &Типовое = ЛОЖЬ
	|	И Контрагенты.Ссылка = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаКонтрагентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидыКонтактнойИнформации = Новый Массив;
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	
	Для Каждого СтрокаКонтрагентов из ТаблицаКонтрагентов Цикл
		
		НоваяСтрока = СписокКонтрагентов.Добавить();
		НоваяСтрока.ИНН = СтрокаКонтрагентов.ИНН;
		НоваяСтрока.КПП = СтрокаКонтрагентов.КПП;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение таблицы товары пакета предложений.
//
// Параметры:
//  ПакетПредложений	 - Структура - формируемый для публикации пакет торговых предложений.
//  ТорговоеПредложение	 - СправочникСсылка.СоглашенияСКлиентами - ссылка на справочник определяющий торговые предложения.
//
Процедура ЗаполнитьТоварыПакетаПредложений(ПакетПредложений, ТорговоеПредложение)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаПубликуемыхТоваров(Истина, Истина, Истина);
	Запрос.УстановитьПараметр("ТорговоеПредложение", ТорговоеПредложение);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	// Дополнение в запрос источников по дополнительным реквизитам номенклатуры.
	ДополнитьЗапросПолучениемРеквизитовНоменклатуры(Запрос);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатаЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатаЗапроса[РезультатаЗапроса.Количество() - 4].Выбрать();
	ШтрихКоды = РезультатаЗапроса[РезультатаЗапроса.Количество() - 1].Выбрать();
	
	АтрибутыТоваров = РезультатаЗапроса[РезультатаЗапроса.Количество() - 2].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТовары = ПакетПредложений.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, Выборка);
		
		// Формирование атрибутов.
		СтрокиАтрибутов = АтрибутыТоваров.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			Выборка.Номенклатура, Выборка.Характеристика));
		ТаблицаАтрибутов = ПакетПредложений.Атрибуты.Скопировать();
		ТаблицаАтрибутов.Очистить();
		Для Каждого СтрокаАтрибутов Из СтрокиАтрибутов Цикл
			НоваяСтрокаАтрибутов = ТаблицаАтрибутов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАтрибутов, СтрокаАтрибутов);
			НоваяСтрокаАтрибутов.Значение = XMLСтрока(НоваяСтрокаАтрибутов.Значение); // Конвертация в строку.
		КонецЦикла;
		СтрокаТовары.Атрибуты = ТаблицаАтрибутов;
		// Конец Формирование атрибутов.
		
		// Формирование штрихкодов.
		ТаблицаШтрихкодов = ПакетПредложений.Штрихкоды.Скопировать();
		ТаблицаШтрихкодов.Очистить();
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, БазоваяЕдиницаИзмерения",
			Выборка.Номенклатура, Выборка.Характеристика, Выборка.БазоваяЕдиницаИзмерения);
		Пока ШтрихКоды.НайтиСледующий(СтруктураПоиска) Цикл
			НоваяСтрокаШтрихкодов = ТаблицаШтрихкодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаШтрихкодов, ШтрихКоды);
			НоваяСтрокаШтрихкодов.ЕдиницаИзмерения = ШтрихКоды.БазоваяЕдиницаИзмерения;
		КонецЦикла;
		СтрокаТовары.Штрихкоды = ТаблицаШтрихкодов;
		// Конец Формирование штрихкодов.
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнение в запрос источников по дополнительным реквизитам номенклатуры.
//
// Параметры:
//   Запрос - Запрос - основной запрос сбора данных.
//
Процедура ДополнитьЗапросПолучениемРеквизитовНоменклатуры(Запрос)
	
	БлокРеквизитовШаблон = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ВидНоменклатуры,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ПредставлениеРеквизитаКатегории,
	|	СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ИдентификаторРеквизитаКатегории,
	|	""&Свойство"",
	|	&Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовНоменклатуры1СБизнесСеть КАК СоответствиеРеквизитовНоменклатуры1СБизнесСеть
	|		ПО Товары.ВидНоменклатуры = СоответствиеРеквизитовНоменклатуры1СБизнесСеть.ВидНоменклатуры
	|			И (СоответствиеРеквизитовНоменклатуры1СБизнесСеть.РеквизитОбъекта = ""&Свойство"")
	|";
	
	ДоступныеДляПубликацииРеквизиты = РеквизитыНоменклатурыДоступныеДляПубликации();
	
	МассивПодзапросов = Новый Массив;
	СчетчикРеквизитов = 0;
	Для Каждого СвойстваРеквизита из ДоступныеДляПубликацииРеквизиты Цикл
		
		СчетчикРеквизитов = СчетчикРеквизитов + 1;
		ТекстПодзапроса = БлокРеквизитовШаблон;
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&Свойство", СвойстваРеквизита.Ключ);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&Значение", СвойстваРеквизита.Значение.ПутьКДанным);
		
		Если СвойстваРеквизита.Значение.Свойство("ПустоеЗначение") Тогда
			ТекстПодзапроса = ТекстПодзапроса + Символы.ПС
				+ "ГДЕ НЕ "+ СвойстваРеквизита.Значение.ПутьКДанным + " = &ПустоеЗначение" + XMLСтрока(СчетчикРеквизитов);
			Запрос.УстановитьПараметр("ПустоеЗначение" + XMLСтрока(СчетчикРеквизитов),
				СвойстваРеквизита.Значение.ПустоеЗначение);
		КонецЕсли;
		
		МассивПодзапросов.Добавить(ТекстПодзапроса);
		
	КонецЦикла;
	
	БлокРеквизитовПодстановка = СтрСоединить(МассивПодзапросов, Символы.ПС);
	
	// Если реквизиты не найдены, то возврат.
	Если ПустаяСтрока(БлокРеквизитовПодстановка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(Запрос.Текст, БлокРеквизитовШаблон) = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка компоновки запроса получения данных номенклатуры.'");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, БлокРеквизитовШаблон, БлокРеквизитовПодстановка);
	
КонецПроцедуры

// Установка доступность команд буфера обмена в форме.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма установки доступности команд.
//
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма)
	
	// Наименование элементов формы.
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ПустойБуферОбмена = ОбщегоНазначения.ПустойБуферОбмена("Строки");
	
	УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность",
		НЕ ПустойБуферОбмена);
		
КонецПроцедуры

// Получение строк таблицы из буфера обмена.
//
// Параметры:
//   ДополнительныеПараметры - Структура - параметры для получения, состав:
//     * УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы.
//
// Возвращаемое значение:
//   ТаблицаЗначений - строки, полученные из буфера обмена.
//
Функция ПолучитьСтрокиИзБуфераОбмена(ДополнительныеПараметры)

	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	МассивДляПолученияЕдиницИзмерения = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовара.Упаковка) Тогда
			МассивДляПолученияЕдиницИзмерения.Добавить(СтрокаТовара.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляПолученияЕдиницИзмерения.Количество() Тогда
		ЕдиницыИзмеренияНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДляПолученияЕдиницИзмерения,
			"ЕдиницаИзмерения");
		Для Каждого ЭлементСоответствия Из ЕдиницыИзмеренияНоменклатуры Цикл
			СтрокиТоваров = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура, Упаковка",
				ЭлементСоответствия.Ключ, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()));
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
				СтрокаТоваров.Упаковка = ЭлементСоответствия.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаТоваров);
	
КонецФункции

#КонецОбласти
