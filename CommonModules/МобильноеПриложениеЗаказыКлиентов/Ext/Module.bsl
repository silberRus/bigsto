////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПАКЕТАМИ ОБМЕНА С МОБИЛЬНЫМ ПРИЛОЖЕНИЕМ "1С:ЗАКАЗЫ"
// - выгрузка объектов обмена
// - загрузка объектов обмена
// - настройка узлов обмена
// - отправка push-уведомлений
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВыгрузкаДанных

// Возвращает сообщение обмена с информацией по заданиям для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена.
//
// Возвращаемое значение:
//  Объект XDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьЗадания(ИдентификаторМобильногоУстройства) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка заданий'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	СообщениеОбмена = "";
	Отказ = Ложь;
	СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 5);
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по клиентам для мобильного приложения.
// Если переданный параметр "ВсеКлиенты" = Истина, регистрируются все элементы справочника "Партнеры",
// если переданный параметр "УникальныйИдентификатор" не пустой,
// зарегистрируется только одино объект по переданной ссылке.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  ВсеКлиенты - Булево - флаг регистрации всех элементов справочника "Партнеры";
//  УникальныйИдентификатор - Строка - 
//    строковое представление уникального идентификатора элементов справочника "Партнеры";
//  АдресДанных - строка - адрес(имя временного файла) подготовленных данных для обмена.
//
// Возвращаемое значение:
//  Объект XDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьКлиентов(ИдентификаторМобильногоУстройства, ВсеКлиенты, УникальныйИдентификатор, АдресДанных) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства);
		
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка клиентов'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СообщениеОбмена = "";
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(АдресДанных) Тогда
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ЗарегистрироватьИзмененияКлиентовДляПланаОбмена(УзелОбмена,
		ВсеКлиенты, УникальныйИдентификатор, Отказ, СообщениеОбмена);
	Иначе
		СтруктураОтвета.ResultMessage = АдресДанных;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
			СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 6, , СтруктураОтвета);
		Иначе
			СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 3, , СтруктураОтвета);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтвета.Continue Тогда
		АдресДанных = СтруктураОтвета.ResultMessage;
	КонецЕсли;
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по настройкам приложения для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена.
//
// Возвращаемое значение:
//  Объект XDTO - Settings (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьНастройки(ИдентификаторМобильногоУстройства) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка настроек'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьНастройкиДляОбмена(УзелОбмена, СтруктураОтвета);
	
	Возврат ОтветWS(СтруктураОтвета, "Settings");
КонецФункции

// Возвращает сообщение обмена с информацией по остаткам номенклатуры для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  АдресДанных - строка - адрес(имя временного файла) подготовленных данных для обмена.
//
// Возвращаемое значение:
//  Объект XDTO - Settings (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьОстатки(ИдентификаторМобильногоУстройства, АдресДанных) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка остатков на складах'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если ЗначениеЗаполнено(АдресДанных) Тогда
		СтруктураОтвета.ResultMessage = АдресДанных;
	КонецЕсли;
	
	СообщениеОбмена = "";
	Отказ = Ложь;
	СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 2,, СтруктураОтвета);
	Если СтруктураОтвета.Continue Тогда
		АдресДанных = СтруктураОтвета.ResultMessage;
	КонецЕсли;
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по ценам номенклатуры по типовым соглашениям для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  ВсеЦены - Булево - флаг выборки всех цен номенклатуры;
//  АдресДанных - строка - адрес(имя временного файла) подготовленных данных для обмена.
//
// Возвращаемое значение:
//  Объект XDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьПрайсЛист(ИдентификаторМобильногоУстройства, ВсеЦены = Ложь, АдресДанных = "") Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка цен'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если ЗначениеЗаполнено(АдресДанных) Тогда
		СтруктураОтвета.ResultMessage = АдресДанных;
	КонецЕсли;
	
	СообщениеОбмена = "";
	Отказ = Ложь;
	СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 1, ВсеЦены, СтруктураОтвета);
	Если СтруктураОтвета.Continue Тогда
		АдресДанных = СтруктураОтвета.ResultMessage;
	КонецЕсли;
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по справочникам для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//
// Возвращаемое значение:
//  Объект XDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьСправочники(ИдентификаторМобильногоУстройства) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка основных справочников'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СообщениеОбмена = "";
	Отказ = Ложь;
	СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ);
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по текущим статусам документов.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - ОбъектXDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange);
//  ТипДокумента - число - определяет тип документов.
//
// Возвращаемое значение:
//  Объект XDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьСтатусыДокументов(ИдентификаторМобильногоУстройства, СообщениеОбмена, ТипДокумента) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета, 
		ИдентификаторМобильногоУстройства);
		
	Отказ = Ложь;
	СообщениеОтвета = "";
	Если УзелОбмена = Неопределено Тогда
		СообщениеОтвета = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОтвета = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		Идентификаторы = ИдентификаторыДокументовИзСообщения(СообщениеОбмена.ResultMessage, ТипДокумента);
		СообщениеОтвета = СформированныйОтветСтатусыДокументов(Идентификаторы, УзелОбмена, ТипДокумента);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	КомментарийКОбмену = "";
	Если ТипДокумента = 0 Тогда
		КомментарийКОбмену = НСтр("ru = 'Отправка состояния заказов клиентов'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли ТипДокумента = 1 Тогда
		КомментарийКОбмену = НСтр("ru = 'Отправка состояния заявок на возврат'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	СтруктураОтвета.Вставить("Комментарий", КомментарийКОбмену);
	
	СтруктураОтвета.ResultMessage = СообщениеОтвета;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Возвращает сообщение обмена с информацией по записи заданий из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи;
//  НастройкиЗадания - Объект XDTO - JobTargetSettings (http://www.1c.ru/CustomerOrders/Exchange),
//    настройки использования заданий торговыми представителями.
//
// Возвращаемое значение:
//  Объект XDTO - Permit (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьЗаданияТорговымПредставителям(ИдентификаторМобильногоУстройства, СообщениеОбмена, НастройкиЗадания) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПараметрыЧтенияПакетаОбмена.ТипОбъекта = 3;
		ПараметрыЧтенияПакетаОбмена.НастройкиЗадания = НастройкиЗадания;
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение заданий'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

// Возвращает сообщение обмена с информацией по записи заказов из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи.
//
// Возвращаемое значение:
//  Объект XDTO - Permit (http://www.1c.ru/ CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьЗаказыКлиентов(ИдентификаторМобильногоУстройства, СообщениеОбмена) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение заказов'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

// Возвращает сообщение обмена с информацией по записи заявок на возврат товаров из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи.
//
// Возвращаемое значение:
//  Объект XDTO - Permit (http://www.1c.ru/ CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьЗаявкиНаВозвратТоваровОтКлиента(ИдентификаторМобильногоУстройства, СообщениеОбмена) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПараметрыЧтенияПакетаОбмена.ТипОбъекта = 4;
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение заказов'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

// Возвращает сообщение обмена с информацией по записи заказов из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи.
//
// Возвращаемое значение:
//  Объект XDTO - Permit (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьОплатыКлиентов(ИдентификаторМобильногоУстройства, СообщениеОбмена) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПараметрыЧтенияПакетаОбмена.ТипОбъекта = 2;
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение регистрации оплат'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

// Возвращает сообщение обмена с информацией по записи справочников из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи.
//
// Возвращаемое значение:
//  Объект XDTO - Permit (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьСправочники(ИдентификаторМобильногоУстройства, СообщениеОбмена) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%",
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПараметрыЧтенияПакетаОбмена.ВТранзакции = Истина;
		ПараметрыЧтенияПакетаОбмена.ТипОбъекта = 1;
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение справочников'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

#КонецОбласти

#Область НастройкиОбмена

// Заполняет настройки компоновщика по переданным источнику, макету и настройкам.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных, в котором необходимо заполнить настройки;
//  Источник - произвольный - объект метаданных, в макете которого находится схема компоновки данных;
//  ИмяМакета - Строка - имя макета, содержащего схему компоновки;
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - настройки для заполнения.
//
Процедура ЗаполнитьНастройкиКомпоновщика(КомпоновщикНастроек, Источник, ИмяМакета = "СхемаКомпоновкиНастроекОбмена", НастройкиКомпоновки = Неопределено) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновки = Источник.ПолучитьМакет(ИмяМакета);
	Если НастройкиКомпоновки = Неопределено Тогда
		НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	КонецЕсли;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор());
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	СоответствияЭлементовОтбора = Источник.СоответствияЭлементовОтбораФункциональнымОпциям();
	УстановитьОтборыКомпоновщикаПоФункциональнымОпциям(КомпоновщикНастроек, СоответствияЭлементовОтбора);
КонецПроцедуры

// Возвращает идентификатор пользовательсокй настройки.
//
// Параметры:
//  ИмяЭлемента - строка - имя элемента пользовательских настроек;
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных, в котором осуществляется поиск;
//  Источник - произвольный - объект метаданных, в макете которого находится схема компоновки данных;
//  ИмяМакета - Строка - имя макета, содержащего схему компоновки.
//
// Возвращаемое значение:
//  Строка - идентификатор настройки.
//
Функция ИдентификаторПользовательскойНастройки(ИмяЭлемента, КомпоновщикНастроек, Источник, ИмяМакета) Экспорт
	
	ИДПользовательскойНастройки = "";
	
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство(ИмяЭлемента) Тогда
		ИДПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства[ИмяЭлемента];
		Если ЗначениеЗаполнено(ИДПользовательскойНастройки) Тогда
			Возврат ИДПользовательскойНастройки;
		КонецЕсли;
	КонецЕсли;
	
	СхемаКомпоновки = Источник.ПолучитьМакет(ИмяМакета);
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	МассивПолейОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиКомпоновки.Отбор, ИмяЭлемента);
	Для Каждого НайденныйЭлемент Из МассивПолейОтбора Цикл
		ИДПользовательскойНастройки = НайденныйЭлемент.ИдентификаторПользовательскойНастройки;
	КонецЦикла;
	
	Возврат ИДПользовательскойНастройки;
КонецФункции

// Возвращает реквизиты узла плана обмена.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена.
//
// Возвращаемое значение:
//  Структура - реквизиты узла обмена.
//
Функция РеквизитыУзла(УзелОбмена) Экспорт
	
	РеквизитыУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена,
	"НомерПринятого, НомерОтправленного, ПрефиксДляДанныхМобильногоУстройства, ВидНастройкиОбмена, НастройкиОбмена");
	
	Если НЕ ЗначениеЗаполнено(РеквизитыУзла.ВидНастройкиОбмена) Тогда
		НастройкаКомпоновки = РеквизитыУзла.НастройкиОбмена.Получить();
	Иначе
		РеквизитНастройкиОбмена =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыУзла.ВидНастройкиОбмена, "НастройкиОбмена");
		НастройкаКомпоновки = РеквизитНастройкиОбмена.Получить();
	КонецЕсли;
	
	Если НастройкаКомпоновки = Неопределено Тогда
		Возврат РеквизитыУзла;
	КонецЕсли;
	
	ПланОбменаМенеджер = ПланыОбмена[УзелОбмена.Метаданные().Имя];
	
	РеквизитыГлавногоУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланОбменаМенеджер.ЭтотУзел(),
	"ВариантОтправкиPushУведомлений, НомерПриложенияGoogleCloud");
	
	РеквизитыУзла.Вставить("ОтправляютсяPushУведомления",
		ЗначениеЗаполнено(РеквизитыГлавногоУзла.ВариантОтправкиPushУведомлений)
		И НЕ РеквизитыГлавногоУзла.ВариантОтправкиPushУведомлений =
			Перечисления.ВариантыОтправкиPushУведомлений.НеОтправлять);
	РеквизитыУзла.Вставить("НомерПриложенияGoogleCloud", РеквизитыГлавногоУзла.НомерПриложенияGoogleCloud);
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗаполнитьНастройкиКомпоновщика(КомпоновщикНастроекКомпоновкиДанных, ПланОбменаМенеджер,, НастройкаКомпоновки);
	
	ТребуемыеРеквизиты = ПланОбменаМенеджер.РеквизитыШапкиФормы();
	Для Каждого Реквизит Из ТребуемыеРеквизиты Цикл
		РеквизитыУзла.Вставить(Реквизит);
	КонецЦикла;
	
	СоответствияЭлементовОтбора = ПланОбменаМенеджер.СоответствияЭлементовОтбораФункциональнымОпциям();
	УстановитьОтборыКомпоновщикаВРеквизитыКоллекции(РеквизитыУзла, КомпоновщикНастроекКомпоновкиДанных,
		СоответствияЭлементовОтбора, ТребуемыеРеквизиты);
	Возврат РеквизитыУзла;
КонецФункции

// Заполняет отборы из компоновщика настроек в реквизиты коллекции.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция, Структура - коллекция реквизитов;
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных, из отбора которого заполняются реквизиты;
//  СоответствияЭлементовОтбора - Массив - массив соответствий;
//  ТребуемыеРеквизиты - Массив - массив реквизитов к установке.
//
Процедура УстановитьОтборыКомпоновщикаВРеквизитыКоллекции(Коллекция, КомпоновщикНастроек, СоответствияЭлементовОтбора, ТребуемыеРеквизиты) Экспорт
	
	// Зависимые от ФО
	Для Каждого Соответствие Из СоответствияЭлементовОтбора Цикл
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ИндексРеквизита = ТребуемыеРеквизиты.Найти(КлючИЗначение.Значение);
			Если ИндексРеквизита = Неопределено Тогда
				Продолжить;
			Иначе
				ТребуемыеРеквизиты.Удалить(ИндексРеквизита);
			КонецЕсли;
			Использование = ПолучитьФункциональнуюОпцию(КлючИЗначение.Ключ);
			Если ТипЗнч(Коллекция) = Тип("УправляемаяФорма") Тогда
				Коллекция[КлючИЗначение.Ключ] = Использование;
			КонецЕсли;
			Если Использование Тогда
				Коллекция[КлючИЗначение.Значение] = ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек,
					КлючИЗначение.Значение);
				КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек,
					КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Независимые от ФО
	Для Каждого ИмяРеквизита Из ТребуемыеРеквизиты Цикл
		Коллекция[ИмяРеквизита] = ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек, ИмяРеквизита);
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, ИмяРеквизита);
	КонецЦикла;
КонецПроцедуры

// Заполняет отбор компоновщика настроек из реквизита коллекции.
//
// Параметры:
//  ИмяРеквизита - строка - имя реквизита коллекции;
//  Коллекция - ДанныеФормыКоллекция, Структура - коллекция реквизитов;
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных для заполнения;
//  Источник - произвольный - объект метаданных, в макете которого находится схема компоновки данных;
//  ИмяМакета - Строка - имя макета, содержащего схему компоновки.
//
Процедура УстановитьРеквизитФормыВОтборыКомпоновщика(ИмяРеквизита, Коллекция, КомпоновщикНастроек, Источник, ИмяМакета = "СхемаКомпоновкиНастроекОбмена") Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КомпоновщикНастроек.Настройки.Отбор,
		ИмяРеквизита, Коллекция[ИмяРеквизита], ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Коллекция[ИмяРеквизита]),,
			ИдентификаторПользовательскойНастройки(ИмяРеквизита, КомпоновщикНастроек, Источник, ИмяМакета));
КонецПроцедуры

// Заполняет отбор компоновщика настроек реквизитами коллекции.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция, Структура - коллекция реквизитов;
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных для заполнения;
//  Источник - произвольный - объект метаданных, в макете которого находится схема компоновки данных;
//  ИмяМакета - Строка - имя макета, содержащего схему компоновки.
//
Процедура УстановитьРеквизитыФормыВОтборыКомпоновщика(Коллекция, КомпоновщикНастроек, Источник, ИмяМакета = "СхемаКомпоновкиНастроекОбмена") Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыУстановки = Источник.РеквизитыШапкиФормы();
	Для Каждого РеквизитУстановки Из РеквизитыУстановки Цикл
		УстановитьРеквизитФормыВОтборыКомпоновщика(РеквизитУстановки, Коллекция, КомпоновщикНастроек, Источник, ИмяМакета);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РаботаСДоставляемымиУведомлениям

// Возвращает флаг возможности отправки push-уведомления на мобильное устройство.
//
// Параметры:
//  Получатель - ПланОбменаСсылка - Проверяемый узел, настроенный на синхронизацию с мобильным устройством.
//
// Возвращаемое значение:
//  ВозможнаОтправка - Булево - флаг возможности отправки push-уведомления.
//
Функция ВозможнаОтправка(Получатель) Экспорт
	
	ВозможнаОтправка = Ложь;
	ИдентификаторПодписчика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель,
		"ИдентификаторПодписчикаДоставляемыхУведомлений");
	Если НЕ ИдентификаторПодписчика = Неопределено Тогда
		Идентификатор = ИдентификаторПодписчика.Получить();
		Если НЕ Идентификатор = Неопределено Тогда
			ВозможнаОтправка = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат ВозможнаОтправка;
КонецФункции

// Отправляет push-уведомления на мобильные устройства пользователям указанного мобильного приложения.
//
// Параметры:
//  УведомлениеТекст - Строка - текст уведомления;
//  Получатели - Массив - массив получателей уведомления;
//  ПолучателиБезДоставки - Массив - массив получателей уведомления, которым оно не было отправлено;
//  ИмяУзла - Строка - имя плана обмена, связанного с мобильным приложением.
//
Процедура ОтправитьУведомление(УведомлениеТекст, Получатели, ПолучателиБезДоставки, ИмяУзла = "МобильноеПриложениеЗаказыКлиентов") Экспорт
	
	Узел = ПланыОбмена[ИмяУзла].ЭтотУзел();
	
	ИспользоватьPushУведомления = Узел.ВариантОтправкиPushУведомлений;
	ИспользоватьAPNS = Узел.ИспользоватьAPNS;
	ИспользоватьGCM = Узел.ИспользоватьGCM;
	Если Не ЗначениеЗаполнено(ИспользоватьPushУведомления)
		ИЛИ ИспользоватьPushУведомления = Перечисления.ВариантыОтправкиPushУведомлений.НеОтправлять Тогда
		ПолучателиБезДоставки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Получатели);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МобильноеПриложениеЗаказыКлиентов.Ссылка,
	|	МобильноеПриложениеЗаказыКлиентов.ИдентификаторПодписчикаДоставляемыхУведомлений
	|ИЗ
	|	ПланОбмена." + ИмяУзла+ " КАК МобильноеПриложениеЗаказыКлиентов
	|ГДЕ
	|	МобильноеПриложениеЗаказыКлиентов.Ссылка В(&Получатели)";
	Запрос.УстановитьПараметр("Получатели", Получатели);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ПолучателиБезДоставки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Получатели);
		Возврат;
	КонецЕсли;
	
	Уведомление = Новый ДоставляемоеУведомление;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ИдентификаторПодписчикаДоставляемыхУведомлений = Неопределено Тогда
			Идентификатор = Выборка.ИдентификаторПодписчикаДоставляемыхУведомлений.Получить();
			Если НЕ Идентификатор = Неопределено Тогда
				Если ИспользоватьPushУведомления =
						Перечисления.ВариантыОтправкиPushУведомлений.ОтправлятьЧерезВспомогательныйСервис Тогда
					Уведомление.Получатели.Добавить(Идентификатор);
				Иначе
					Если ((Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.APNS И ИспользоватьAPNS)
						ИЛИ (Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.GCM И ИспользоватьGCM)) Тогда
						Уведомление.Получатели.Добавить(Идентификатор);
					Иначе
						ПолучателиБезДоставки.Добавить(Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПолучателиБезДоставки.Добавить(Выборка.Ссылка);
			КонецЕсли;
		Иначе
			ПолучателиБезДоставки.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если Уведомление.Получатели.Количество() > 0 Тогда
		Уведомление.Текст = УведомлениеТекст;
		ДанныеАутентификации = "";
		Сертификат = Неопределено;
		ИспользоватьСервис =
			ИспользоватьPushУведомления = Перечисления.ВариантыОтправкиPushУведомлений.ОтправлятьЧерезВспомогательныйСервис;
		Если ИспользоватьСервис Тогда
			ДанныеАутентификации = Узел.ЛогинСервисаПередачиPushУведомлений;
		Иначе
			ДанныеАутентификации = Новый Соответствие();
			Если ИспользоватьGCM Тогда
				ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.GCM] = Узел.КлючСервераОтправителяGCM;
			КонецЕсли;
			Если ИспользоватьAPNS Тогда
				Сертификат = Узел.СертификатМобильногоПриложенияIOS;
				Если НЕ Сертификат = Неопределено Тогда
					Сертификат = Сертификат.Получить();
					Если НЕ Сертификат = Неопределено Тогда
						ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.APNS] = Сертификат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		УдаленныеТокены = Новый Массив;
		Попытка
			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, СокрЛП(ДанныеАутентификации),
				УдаленныеТокены, ИспользоватьСервис);
		Исключение
			ВызватьИсключение(ОписаниеОшибки());
		КонецПопытки;
		НеИспользоватьИдентификаторы(УдаленныеТокены);
		
		Если НЕ Сертификат = Неопределено Тогда
			УдаленныеТокены = ОтправкаДоставляемыхУведомлений.ПолучитьИсключенныхПолучателей(Сертификат, ИспользоватьСервис);
			НеИспользоватьИдентификаторы(УдаленныеТокены);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Операция записи идентификатора получателя push-уведомлений, сформированного на мобильном устройстве.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - строка - не изменяемый код мобильного приложения, используется как код узла плана обмена;
//  ИдентификаторПодписчикаДоставляемыхУведомлений - ХранилищеЗначения - идентификатор получателя push-уведомлений.
//
// Возвращаемое значение:
//  Объект XDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗаписьИдентификатораПодписчикаДоставляемыхУведомлений(ИдентификаторМобильногоУстройства, ИдентификаторПодписчикаДоставляемыхУведомлений) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	
	УстановитьПривилегированныйРежим(Истина);
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение идентификатора подписчика push-уведомлений'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	НовыйИдентификатор = СериализаторXDTO.ПрочитатьXDTO(ИдентификаторПодписчикаДоставляемыхУведомлений);
	НовыйИдентификаторПодписчика =
		Новый ХранилищеЗначения(НовыйИдентификатор, Новый СжатиеДанных(9));
	УзелОбменаОбъект.ИдентификаторПодписчикаДоставляемыхУведомлений = НовыйИдентификаторПодписчика;
	Попытка
		УзелОбменаОбъект.Записать();
	Исключение
		СтруктураОтвета.ResultMessage = ОписаниеОшибки();
		СтруктураОтвета.Success = Ложь;
	КонецПопытки;
	
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

#КонецОбласти

#Область Прочие

// Возвращает строковое представление URI пространства имен web -сервиса.
//
// Возвращаемое значение:
//  Строка - описание пространства имен.
//
Функция URIПространстваИмен() Экспорт
	
	Возврат "http://www.1c.ru/CustomerOrders/Exchange";
КонецФункции

// Возвращает сообщение обмена с информацией по началу обмена с мобильным приложения.
//
// Параметры:
//  ВерсияМобильногоПриложения - Строка - версия мобильного приложения;
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена.
//
// Возвращаемое значение:
//  Объект XDTO - Permit (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция НачалоОбмена(ВерсияМобильногоПриложения, ИдентификаторМобильногоУстройства) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОтвета();
	СтруктураОтвета.Вставить("DeleteAppData", Ложь);
	
	Если Не Константы.ИспользоватьМобильноеПриложение1СЗаказыКлиентов.Получить() Тогда
		СтруктураОтвета.Success = Ложь;
		СтруктураОтвета.ResultMessage = НСтр("ru = 'Нет разрешения на синхронизацию данных с информационной базой.'");
		Возврат ОтветWS(СтруктураОтвета, "Permit");
	КонецЕсли;
	
	Если ВерсияМобильногоПриложения = "1" Тогда
		СтруктураОтвета.Success = Ложь;
		СтруктураОтвета.ResultMessage = НСтр("ru = 'Требуется обновление мобильного приложения.'");
		Возврат ОтветWS(СтруктураОтвета, "Permit");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГлавныйУзелОбмена = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ЭтотУзел();
	
	Если Не ЗначениеЗаполнено(ГлавныйУзелОбмена.Код) Тогда
		
		ГлавныйУзелОбъект = ГлавныйУзелОбмена.ПолучитьОбъект();
		ГлавныйУзелОбъект.Код = "001";
		ГлавныйУзелОбъект.Наименование = НСтр("ru='Центральный'");
		ГлавныйУзелОбъект.Записать();
		
	КонецЕсли;
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());

	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета, "Permit");
	Иначе
		СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
		СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
			КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
		СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
		СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Начало обмена'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
		Если УзелОбмена.ПометкаУдаления Тогда
			СтруктураОтвета.Success = Ложь;
			СтруктураОтвета.ResultMessage = НСтр("ru = 'Соединение с устройством запрещено.
			|Данные были очищены.'");
			СтруктураОтвета.DeleteAppData = Истина;
			Возврат ОтветWS(СтруктураОтвета, "Permit");
		КонецЕсли;
		
		Если НЕ ВерсияМобильногоПриложения = "3.0.7" Тогда
			Попытка
				ЗаписьВерсииПриложения = 
				РегистрыСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы.СоздатьМенеджерЗаписи();
				ЗаписьВерсииПриложения.ИдНоменклатуры = ИдентификаторМобильногоУстройства;
				ЗаписьВерсииПриложения.ИдОбъектаМП = ИдентификаторМобильногоУстройства;
				ЗаписьВерсииПриложения.Записать(Истина);
			Исключение
				Инфо = ИнформацияОбОшибке();
			КонецПопытки;
		Иначе
			ЗаписиВерсииПриложения = 
				РегистрыСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы.СоздатьНаборЗаписей();
			ЗаписиВерсииПриложения.Отбор["ИдНоменклатуры"].Использование = Истина;
			ЗаписиВерсииПриложения.Отбор["ИдНоменклатуры"].Значение = ИдентификаторМобильногоУстройства;
			
			ЗаписиВерсииПриложения.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветWS(СтруктураОтвета, "Permit");
КонецФункции

// Выполняет очистку записей истории обмена для узла.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена.
// 
Процедура ОчиститьИсториюОбмена(УзелОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДляУдаления = Новый Структура("УзелИнформационнойБазы", УзелОбмена);
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		РегистрМенеджер = "СостоянияОбменовДаннымиОбластейДанных";
		РегистрМенеджерУспешно = "СостоянияУспешныхОбменовДаннымиОбластейДанных";
	Иначе
		РегистрМенеджер = "СостоянияОбменовДанными";
		РегистрМенеджерУспешно = "СостоянияУспешныхОбменовДанными";
	КонецЕсли;
	
	ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(СтруктураДляУдаления, РегистрМенеджер);
	ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(СтруктураДляУдаления, РегистрМенеджерУспешно);
КонецПроцедуры

// Процедура, на основании анализа типа переданных данных,
// преобразовывает эти данные в тип "УдалениеОбъекта" для удаления этих данных.
//
// Параметры:
//  Данные - Объект метаданных - объект, набор записей, который нужно преобразовать.
//
Процедура УдалениеДанных(Данные) Экспорт
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	// Проверяем тип, интересуют только те типы, которые реализованы на мобильной платформе.
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		Или Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные
		Данные.Очистить();
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОбменаСлужебные

Функция ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек, ИмяЭлемента)
	
	Если ТипЗнч(КомпоновщикНастроек) <> Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор,
		ИмяЭлемента);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(ИмяЭлемента,
			ИдентификаторПользовательскойНастройки);
		ЭлементПользовательскихНастроек = 
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено 
			И ЭлементПользовательскихНастроек.Использование Тогда
				Возврат ЭлементПользовательскихНастроек.ПравоеЗначение;
		Иначе
			Если ЭлементПользовательскихНастроек = Неопределено
				И ЭлементОтбора.Использование Тогда
					Возврат ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Процедура УстановитьОтборыКомпоновщикаПоФункциональнымОпциям(КомпоновщикНастроек, СоответствияЭлементовОтбора)
	
	Для Каждого Соответствие Из СоответствияЭлементовОтбора Цикл
		Для Каждого КлючИЗначение Из Соответствие Цикл
			Если Не ПолучитьФункциональнуюОпцию(КлючИЗначение.Ключ) Тогда
				КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек,
					КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РаботаСДоставляемымиУведомлениям

Процедура НеИспользоватьИдентификаторы(Токены, ИмяУзла = "МобильноеПриложениеЗаказыКлиентов")
	
	Если Токены.Количество() > 0 Тогда
		Выборка = ПланыОбмена[ИмяУзла].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ИдентификаторПодписчикаДоставляемыхУведомлений <> Неопределено Тогда
				Идентификатор = Выборка.ИдентификаторПодписчикаДоставляемыхУведомлений.Получить();
				Если Идентификатор <> Неопределено И Токены.Найти(Идентификатор.ИдентификаторУстройства) Тогда
					Узел = Выборка.ПолучитьОбъект();
					Узел.ИдентификаторПодписчикаДоставляемыхУведомлений = Неопределено;
					Узел.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистрациейСобытий

Процедура ЗаписатьИсториюВыполненияОбмена(РезультатОбмена, ИмяОбъектаXDTO)
	
	Если ИмяОбъектаXDTO = "MessageExchange" Тогда
		Если РезультатОбмена.Success Тогда
			РезультатОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
			УровеньЖР = УровеньЖурналаРегистрации.Информация;
		Иначе
			РезультатОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
	Иначе
		РезультатОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	// Фиксируем событие в журнале регистрации.
	ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(
		РезультатОбмена.Комментарий, РезультатОбмена, УровеньЖР);
	
	// Фиксируем состояние обмена.
	ЗаписатьСостояниеОбмена(РезультатОбмена);
КонецПроцедуры

Процедура ЗаписатьСостояниеОбмена(РезультатОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		РегистрМенеджер = РегистрыСведений.СостоянияОбменовДаннымиОбластейДанных;
		РегистрМенеджерУспешно = РегистрыСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных;
	Иначе
		РегистрМенеджер = РегистрыСведений.СостоянияОбменовДанными;
		РегистрМенеджерУспешно = РегистрыСведений.СостоянияУспешныхОбменовДанными;
	КонецЕсли;
	
	ЗаписьСостояния = РегистрМенеджер.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьСостояния, РезультатОбмена);
	ЗаписьСостояния.УзелИнформационнойБазы = РезультатОбмена.УзелКорреспондента;
	ЗаписьСостояния.ДатаОкончания = ТекущаяДатаСеанса();
	ЗаписьСостояния.Записать();
	
	Если ЗначениеЗаполнено(ЗаписьСостояния.ДействиеПриОбмене)
		И (ЗаписьСостояния.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено) Тогда
		
		ЗаписьУспешногоСостояния = РегистрМенеджерУспешно.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьУспешногоСостояния, ЗаписьСостояния);
		ЗаписьУспешногоСостояния.Записать();
	КонецЕсли;
КонецПроцедуры

Функция КлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене)
	
	ИмяПланаОбмена = "";
	ИмяУстройства = "";
	Если ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		ИмяПланаОбмена = СокрЛП(УзелИнформационнойБазы.Метаданные());
		ИмяУстройства = СокрЛП(УзелИнформационнойБазы);
	КонецЕсли;
	
	КлючСообщения = НСтр("ru = 'Обмен данными. [ИмяПланаОбмена]. Устройство: [ИмяУстройства]. [ДействиеПриОбмене]'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяУстройства]", ИмяУстройства);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", ДействиеПриОбмене);
	
	Возврат КлючСообщения;
КонецФункции

#КонецОбласти

Функция ДанныеДляПродолжения(Данные)
	
	АдресХранилища = ПолучитьИмяВременногоФайла("xml");
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(АдресХранилища);
		ЗаписатьXML(ЗаписьXML, Данные);
		ЗаписьXML.Закрыть();
	Исключение
		АдресХранилища = "";
	КонецПопытки;
	Возврат АдресХранилища;
КонецФункции

Процедура ЗаписатьДоговорСоглашение(Данные, Сообщение)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), "CatalogObject.ДоговорыКлиентов");
	
	МобильныйДоговор = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ МобильныйДоговор.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
			МобильныйДоговор[СокрЛП(Свойство)] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьДоговорСоглашение(МобильныйДоговор, Сообщение);
КонецПроцедуры

Процедура ЗаписатьЗаданиеТорговомуПредставителю(Данные, УзелОбмена, Сообщение, НастройкиЗадания)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "DocumentObject.ЗаданиеТорговомуПредставителю");
	ТипОбъектаТовары = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаданиеТорговомуПредставителю.Товары");
	ТипОбъектаЗадачи = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаданиеТорговомуПредставителю.Задачи");
	МобильноеЗадание = ФабрикаXDTO.Создать(ТипОбъекта);
	
	// Данные шапки документа
	Для каждого Свойство Из Данные.Свойства() Цикл
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ СокрЛП(Свойство) = "Товары" И НЕ СокрЛП(Свойство) = "Задачи"
			И НЕ СокрЛП(Свойство) = "ДолгиПоЗаказам" И НЕ СокрЛП(Свойство) = "РасшифровкаДебиторскойЗадолженности" Тогда
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ СокрЛП(Свойство) = "Товары" И НЕ СокрЛП(Свойство) = "Задачи" И НЕ СокрЛП(Свойство) = "ВидЦены"
		И НЕ СокрЛП(Свойство) = "ДолгиПоЗаказам" И НЕ СокрЛП(Свойство) = "РасшифровкаДебиторскойЗадолженности" Тогда
			Если НЕ МобильноеЗадание.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				МобильноеЗадание[СокрЛП(Свойство)] = Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Данные ТЧ "Товары"
	Если НЕ Данные.Товары.Свойства().Получить("Row") = Неопределено Тогда
		Если ТипЗнч(Данные.Товары.Row) = Тип("СписокXDTO") Тогда
			Для Каждого ЭлементСписка Из Данные.Товары.Row Цикл
				МобильноеЗаданиеТовары = ФабрикаXDTO.Создать(ТипОбъектаТовары);
				ЗаполнитьЗначенияСвойств(МобильноеЗаданиеТовары, ЭлементСписка);
				МобильноеЗадание.Товары.Добавить(МобильноеЗаданиеТовары);
			КонецЦикла;
		Иначе
			МобильноеЗаданиеТовары = ФабрикаXDTO.Создать(ТипОбъектаТовары);
			ЗаполнитьЗначенияСвойств(МобильноеЗаданиеТовары, Данные.Товары.Row);
			МобильноеЗадание.Товары.Добавить(МобильноеЗаданиеТовары);
		КонецЕсли;
	КонецЕсли;
	
	// Данные ТЧ "Задачи"
	Если НЕ Данные.Задачи.Свойства().Получить("Row") = Неопределено Тогда
		Если ТипЗнч(Данные.Задачи.Row) = Тип("СписокXDTO") Тогда
			Для Каждого ЭлементСписка Из Данные.Задачи.Row Цикл
				МобильноеЗаданиеЗадачи = ФабрикаXDTO.Создать(ТипОбъектаЗадачи);
				МобильноеЗаданиеЗадачи.Выполнена = ЭлементСписка.Выполнена;
				Если НЕ ТипЗнч(ЭлементСписка.ОписаниеЗадачи) = Тип("ОбъектXDTO") Тогда
					МобильноеЗаданиеЗадачи.ОписаниеЗадачи = ЭлементСписка.ОписаниеЗадачи;
				КонецЕсли;
				Если НЕ ТипЗнч(ЭлементСписка.ОписаниеРезультата) = Тип("ОбъектXDTO") Тогда
					МобильноеЗаданиеЗадачи.ОписаниеРезультата = ЭлементСписка.ОписаниеРезультата;
				КонецЕсли;
				МобильноеЗадание.Задачи.Добавить(МобильноеЗаданиеЗадачи);
			КонецЦикла;
		Иначе
			МобильноеЗаданиеЗадачи = ФабрикаXDTO.Создать(ТипОбъектаЗадачи);
			МобильноеЗаданиеЗадачи.Выполнена = Данные.Задачи.Row.Выполнена;
			Если НЕ ТипЗнч(Данные.Задачи.Row.ОписаниеЗадачи) = Тип("ОбъектXDTO") Тогда
				МобильноеЗаданиеЗадачи.ОписаниеЗадачи = Данные.Задачи.Row.ОписаниеЗадачи;
			КонецЕсли;
			Если НЕ ТипЗнч(Данные.Задачи.Row.ОписаниеРезультата) = Тип("ОбъектXDTO") Тогда
				МобильноеЗаданиеЗадачи.ОписаниеРезультата = Данные.Задачи.Row.ОписаниеРезультата;
			КонецЕсли;
			МобильноеЗадание.Задачи.Добавить(МобильноеЗаданиеЗадачи);
		КонецЕсли;
	КонецЕсли;
		
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьЗаданиеТорговомуПредставителю(
		МобильноеЗадание, УзелОбмена, Сообщение, НастройкиЗадания);
КонецПроцедуры

Процедура ЗаписатьЗаказКлиента(Данные, Сообщение)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "DocumentObject.ЗаказКлиента");
	ТипОбъектаТовары = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаказКлиента.Товары");
	ТипОбъектаДопРеквизиты = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаказКлиента.ДополнительныеРеквизиты");
	
	МобильныйЗаказ = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)])
				И НЕ СокрЛП(Свойство) = "Товары" 
				И НЕ СокрЛП(Свойство) = "ДополнительныеРеквизиты" Тогда
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ ЭтоТабличнаяЧасть Тогда
			Если НЕ МобильныйЗаказ.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				МобильныйЗаказ[СокрЛП(Свойство)] = Значение;
			КонецЕсли;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ МобильныйЗаказ.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
					Для Каждого ЭлементСписка Из Значение.Row Цикл
						Если СокрЛП(Свойство) = "Товары" Тогда
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаТовары);
						Иначе
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
						КонецЕсли;
						ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
						МобильныйЗаказ[СокрЛП(Свойство)].Добавить(МобильныеДанные);
					КонецЦикла;
				Иначе
					Если СокрЛП(Свойство) = "Товары" Тогда
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаТовары);
					Иначе
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
					КонецЕсли;
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
					МобильныйЗаказ[СокрЛП(Свойство)].Добавить(МобильныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьЗаказКлиента(МобильныйЗаказ, Сообщение);

КонецПроцедуры

Процедура ЗаписатьЗаявкуНаВозвратТоваровОтКлиента(Данные, Сообщение)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "DocumentObject.ЗаявкаНаВозвратТоваровОтКлиента");
	ТипОбъектаТовары = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаявкаНаВозвратТоваровОтКлиента.Товары");
	ТипОбъектаДопРеквизиты = ФабрикаXDTO.Тип(URIИмен,
		"DocumentTabularSectionRow.ЗаявкаНаВозвратТоваровОтКлиента.ДополнительныеРеквизиты");
	
	МобильнаяЗаявкаНаВозврат = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)])
				И НЕ СокрЛП(Свойство) = "Товары" 
				И НЕ СокрЛП(Свойство) = "ДополнительныеРеквизиты" Тогда
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ ЭтоТабличнаяЧасть Тогда
			Если НЕ МобильнаяЗаявкаНаВозврат.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				МобильнаяЗаявкаНаВозврат[СокрЛП(Свойство)] = Значение;
			КонецЕсли;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ МобильнаяЗаявкаНаВозврат.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
					Для Каждого ЭлементСписка Из Значение.Row Цикл
						Если СокрЛП(Свойство) = "Товары" Тогда
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаТовары);
						Иначе
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
						КонецЕсли;
						ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
						МобильнаяЗаявкаНаВозврат[СокрЛП(Свойство)].Добавить(МобильныеДанные);
					КонецЦикла;
				Иначе
					Если СокрЛП(Свойство) = "Товары" Тогда
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаТовары);
					Иначе
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
					КонецЕсли;
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
					МобильнаяЗаявкаНаВозврат[СокрЛП(Свойство)].Добавить(МобильныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьЗаявкуНаВозвратТоваровОтКлиента(
		МобильнаяЗаявкаНаВозврат, Сообщение);
КонецПроцедуры

Процедура ЗаписатьКлиента(Данные, УзелОбмена, Сообщение)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "CatalogObject.Клиенты");
	ТипОбъектаКИ = ФабрикаXDTO.Тип(URIИмен, "CatalogTabularSectionRow.Клиенты.КонтактнаяИнформация");
	ТипОбъектаДопРеквизиты = ФабрикаXDTO.Тип(URIИмен, "CatalogTabularSectionRow.Клиенты.ДополнительныеРеквизиты");
	
	МобильныйКлиент = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)])
				И НЕ СокрЛП(Свойство) = "ДополнительныеРеквизиты"
				И НЕ СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если Не ЭтоТабличнаяЧасть Тогда
			Если НЕ МобильныйКлиент.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				МобильныйКлиент[СокрЛП(Свойство)] = Значение;
			КонецЕсли;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ МобильныйКлиент.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
					Для Каждого ЭлементСписка Из Значение.Row Цикл
						Если СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
						Иначе
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
						КонецЕсли;
						ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
						МобильныйКлиент[СокрЛП(Свойство)].Добавить(МобильныеДанные);
					КонецЦикла;
				Иначе
					Если СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
					Иначе
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
					КонецЕсли;
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
					МобильныйКлиент[СокрЛП(Свойство)].Добавить(МобильныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьКлиента(МобильныйКлиент, УзелОбмена, Сообщение);
КонецПроцедуры

Процедура ЗаписатьКонтактноеЛицоКлиента(Данные, Сообщение)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "CatalogObject.КонтактныеЛицаКлиентов");
	ТипОбъектаКИ = ФабрикаXDTO.Тип(URIИмен, "CatalogTabularSectionRow.КонтактныеЛицаКлиентов.КонтактнаяИнформация");
	
	МобильноеКонтактноеЛицо = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)]) 
				И НЕ СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если Не ЭтоТабличнаяЧасть Тогда
			МобильноеКонтактноеЛицо[СокрЛП(Свойство)] = Значение;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
				Для Каждого ЭлементСписка Из Значение.Row Цикл
					МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
					МобильноеКонтактноеЛицо[СокрЛП(Свойство)].Добавить(МобильныеДанные);
				КонецЦикла;
			Иначе
				МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
				ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
				МобильноеКонтактноеЛицо[СокрЛП(Свойство)].Добавить(МобильныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьКонтактноеЛицоКлиента(МобильноеКонтактноеЛицо,
		Сообщение);
КонецПроцедуры

Процедура ЗаписатьКонтрагента(Данные, Сообщение)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), "CatalogObject.Контрагенты");
	
	МобильныйКонтрагент = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		МобильныйКонтрагент[СокрЛП(Свойство)] = Значение;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьКонтрагента(МобильныйКонтрагент, Сообщение);
КонецПроцедуры

Процедура ЗаписатьОплатуКлиента(Данные, УзелОбмена, Сообщение)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), "DocumentObject.ОплатаКлиента");
	МобильнаяОплата = ФабрикаXDTO.Создать(ТипОбъекта);
	
	// Данные шапки документа
	Для каждого Свойство Из Данные.Свойства() Цикл
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ МобильнаяОплата.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
			МобильнаяОплата[СокрЛП(Свойство)] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьОплатуКлиента(МобильнаяОплата, УзелОбмена,
		Сообщение);
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение)
	
	Для Каждого Свойство Из Значение.Свойства() Цикл
		Если ТипЗнч(Значение[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			МобильныеДанные[СокрЛП(Свойство)] = СериализаторXDTO.ПрочитатьXDTO(Значение[СокрЛП(Свойство)]);
		Иначе
			МобильныеДанные[СокрЛП(Свойство)] = Значение[СокрЛП(Свойство)];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ИдентификаторыДокументовИзСообщения(СообщениеОбмена, ТипДокумента)
	
	Идентификаторы = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СообщениеОбмена);
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
	
	ЛокальноеИмя = "";
	Если ТипДокумента = 0 Тогда
		ЛокальноеИмя = "DocumentRef.ЗаказКлиента";
	ИначеЕсли ТипДокумента = 1 Тогда
		ЛокальноеИмя = "DocumentRef.ЗаявкаНаВозвратТоваровОтКлиента";
	КонецЕсли;
	
	Пока ЧтениеXML.ЛокальноеИмя = ЛокальноеИмя Цикл
		
		ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
		
		Если ТипДанныхXML.ИмяТипа = ЛокальноеИмя Тогда
			Данные = ПрочитатьXML(ЧтениеXML);
			Идентификаторы.Добавить(Данные);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Идентификаторы;
КонецФункции

Функция ОтветWS(РезультатОбмена, ИмяОбъектаXDTO = "MessageExchange", КомпонентыОбмена = Неопределено)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), ИмяОбъектаXDTO);
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, РезультатОбмена);
	
	ЗаписатьИсториюВыполненияОбмена(РезультатОбмена, ИмяОбъектаXDTO);
		
	Возврат ОбъектОбмена;
КонецФункции

Функция ПараметрыЧтенияПакетаОбмена();
	
	ПараметрыЧтения = Новый Структура;
	ПараметрыЧтения.Вставить("ВТранзакции", Ложь);
	ПараметрыЧтения.Вставить("ТипОбъекта", 0);
	ПараметрыЧтения.Вставить("НастройкиЗадания", Неопределено);
	
	Возврат ПараметрыЧтения;
КонецФункции

Функция ПодготовленныеДанные(АдресХранилища)
	
	ВыбФайл = Новый Файл(АдресХранилища);
	Если НЕ ВыбФайл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(АдресХранилища);
	Данные = Неопределено;
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Данные = ПрочитатьXML(ЧтениеXML);
	КонецЦикла;
	УдалитьФайлы(ВыбФайл);
	Возврат Данные;
КонецФункции

Процедура ПрочитатьПакетОбмена(УзелОбмена, Сообщение, Отказ, ПараметрыЧтения)
	
	СообщениеОбмена = Сообщение;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СообщениеОбмена);
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
	
	ОтветноеСообщение = Новый Массив;
	
	Если ПараметрыЧтения.ВТранзакции Тогда
		НачатьТранзакцию();
		Попытка
			ПрочитатьДанныеПакетаОбмена(УзелОбмена, ПараметрыЧтения, ЧтениеXML, ОтветноеСообщение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен 1С:Заказы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Попытка
			ПрочитатьДанныеПакетаОбмена(УзелОбмена, ПараметрыЧтения, ЧтениеXML, ОтветноеСообщение);
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен 1С:Заказы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	URIИмен = URIПространстваИмен();
	
	Сообщение = Новый ЗаписьXML;
	
	Сообщение.УстановитьСтроку("UTF-8");
	Сообщение.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(Сообщение, УзелОбмена);
	
	Для каждого Ответ Из ОтветноеСообщение Цикл
		
		ЛокальноеИмяОбъекта = "";
		Если ПараметрыЧтения.ТипОбъекта = 0 Тогда
			ЛокальноеИмяОбъекта = "OrderStatus";
		ИначеЕсли ПараметрыЧтения.ТипОбъекта = 1 Тогда
			ЛокальноеИмяОбъекта = "CatalogStatus";
		ИначеЕсли ПараметрыЧтения.ТипОбъекта = 2 Тогда
			ЛокальноеИмяОбъекта = "PaymentStatus";
		ИначеЕсли ПараметрыЧтения.ТипОбъекта = 3 Тогда
			ЛокальноеИмяОбъекта = "JobTargetStatus";
		ИначеЕсли ПараметрыЧтения.ТипОбъекта = 4 Тогда
			ЛокальноеИмяОбъекта = "RequestToReturnStatus";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЛокальноеИмяОбъекта) Тогда
			ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, ЛокальноеИмяОбъекта);
			ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
			ЗаполнитьЗначенияСвойств(ОбъектОбмена, Ответ);
		
			ФабрикаXDTO.ЗаписатьXML(Сообщение, ОбъектОбмена);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	Сообщение = Сообщение.Закрыть();
КонецПроцедуры

Процедура ПрочитатьДанныеПакетаОбмена(УзелОбмена, ПараметрыЧтения, ЧтениеXML, ОтветноеСообщение)
	
	Пока ЧтениеXML.ЛокальноеИмя = "DocumentObject.ЗаказКлиента"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentRef.ЗаказКлиента"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentObject.ЗаданиеТорговомуПредставителю"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentRef.ЗаданиеТорговомуПредставителю"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentObject.ЗаявкаНаВозвратТоваровОтКлиента"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentRef.ЗаявкаНаВозвратТоваровОтКлиента"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentObject.ОплатаКлиента"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentRef.ОплатаКлиента"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "CatalogObject.Клиенты"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "CatalogObject.Контрагенты"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "CatalogObject.ДоговорыКлиентов"
		ИЛИ ЧтениеXML.ЛокальноеИмя = "CatalogObject.КонтактныеЛицаКлиентов"
		ИЛИ СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
		
		Если ТипДанныхXML.ИмяТипа = "DocumentObject.ЗаказКлиента" Тогда
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьЗаказКлиента(Данные, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "DocumentObject.ЗаданиеТорговомуПредставителю" Тогда
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьЗаданиеТорговомуПредставителю(Данные, УзелОбмена, ОтветноеСообщение, ПараметрыЧтения.НастройкиЗадания);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "DocumentObject.ОплатаКлиента" Тогда
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьОплатуКлиента(Данные, УзелОбмена, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "DocumentObject.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьЗаявкуНаВозвратТоваровОтКлиента(Данные, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.Клиенты" Тогда
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьКлиента(Данные, УзелОбмена, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.Контрагенты" Тогда
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьКонтрагента(Данные, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.ДоговорыКлиентов" Тогда
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьДоговорСоглашение(Данные, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.КонтактныеЛицаКлиентов" Тогда
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьКонтактноеЛицоКлиента(Данные, ОтветноеСообщение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформированныйОтветСтатусыДокументов(Идентификаторы, УзелОбмена, ТипДокумента)
	
	ОтветноеСообщениеXML = Новый ЗаписьXML;
	
	ОтветноеСообщениеXML.УстановитьСтроку("UTF-8");
	ОтветноеСообщениеXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ОтветноеСообщениеXML, УзелОбмена);
	
	ОтветныеДанные = Новый Массив;
	ЛокальноеИмяОбъекта = "";
	Если ТипДокумента = 0 Тогда
		ОтветныеДанные = МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОтветныеДанныеСтатусыЗаказовКлиентов(
			ОтветноеСообщениеXML, Идентификаторы);
		ЛокальноеИмяОбъекта = "OrderStatus";
		ИмяДопРеквизитов = "DocumentTabularSectionRow.ЗаказКлиента.ДополнительныеРеквизиты";
	ИначеЕсли ТипДокумента = 1 Тогда
		ОтветныеДанные = МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОтветныеДанныеСтатусыЗаявкиНаВозврат(
			ОтветноеСообщениеXML, Идентификаторы);
		ЛокальноеИмяОбъекта = "RequestToReturnStatus";
		ИмяДопРеквизитов = "DocumentTabularSectionRow.ЗаказКлиента.ДополнительныеРеквизиты";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛокальноеИмяОбъекта) Тогда
		URIПространстваИмен = URIПространстваИмен();
		ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен, ЛокальноеИмяОбъекта);
		ТипОбъектаДопРеквизиты = ФабрикаXDTO.Тип(URIПространстваИмен, ИмяДопРеквизитов);
		Для каждого Ответ Из ОтветныеДанные Цикл
			ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
			ЗаполнитьЗначенияСвойств(ОбъектОбмена, Ответ);
			
			Если Ответ.Свойство("ДополнительныеРеквизиты") Тогда
				Для Каждого СтрокаОтвета Из Ответ.ДополнительныеРеквизиты Цикл
					ДополнительныеРеквизиты = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
					ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты, СтрокаОтвета);
					ОбъектОбмена["ДополнительныеРеквизиты"].Добавить(ДополнительныеРеквизиты);
				КонецЦикла;
			КонецЕсли;
			ФабрикаXDTO.ЗаписатьXML(ОтветноеСообщениеXML, ОбъектОбмена);
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат ОтветноеСообщениеXML.Закрыть();
КонецФункции

Процедура СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, Режим = 0, ВсеЦены = Ложь, СтруктураОтвета = Неопределено)
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ДанныеПредыдущейЧастиОбмена = Неопределено;
	Если Режим = 0 Тогда
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьСправочникиДляОбмена(ЗаписьXML, УзелОбмена);
	ИначеЕсли Режим = 1 Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.ResultMessage) Тогда
			ДопСвойстваВХранилище = ПодготовленныеДанные(СтруктураОтвета.ResultMessage);
			Если НЕ ДопСвойстваВХранилище = Неопределено 
				И ТипЗнч(ДопСвойстваВХранилище) = Тип("ХранилищеЗначения") Тогда
				ДанныеПредыдущейЧастиОбмена = ДопСвойстваВХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьПрайсЛистДляОбмена(ЗаписьXML, СообщениеОбмена, УзелОбмена,
			ЗаписьСообщения.НомерСообщения, ВсеЦены, ДанныеПредыдущейЧастиОбмена);
	ИначеЕсли Режим = 2 Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.ResultMessage) Тогда
			ДопСвойстваВХранилище = ПодготовленныеДанные(СтруктураОтвета.ResultMessage);
			Если НЕ ДопСвойстваВХранилище = Неопределено 
				И ТипЗнч(ДопСвойстваВХранилище) = Тип("ХранилищеЗначения") Тогда
				ДанныеПредыдущейЧастиОбмена = ДопСвойстваВХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьДоступныеОстатки(ЗаписьXML, УзелОбмена,
			ДанныеПредыдущейЧастиОбмена);
	ИначеЕсли Режим = 3 Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.ResultMessage) Тогда
			ДопСвойстваВХранилище = ПодготовленныеДанные(СтруктураОтвета.ResultMessage);
			Если НЕ ДопСвойстваВХранилище = Неопределено 
				И ТипЗнч(ДопСвойстваВХранилище) = Тип("ХранилищеЗначения") Тогда
				ДанныеПредыдущейЧастиОбмена = ДопСвойстваВХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьКлиентовДляОбмена(ЗаписьXML, УзелОбмена,
			ДанныеПредыдущейЧастиОбмена);
	ИначеЕсли Режим = 4 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ResultMessage");
		ЗаписьXML.Отступ = Истина;
		ЗаписьXML.ЗаписатьБезОбработки(СообщениеОбмена);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	ИначеЕсли Режим = 5 Тогда
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьЗаданияДляОбмена(ЗаписьXML, УзелОбмена, СообщениеОбмена,
			ЗаписьСообщения.НомерСообщения);
	ИначеЕсли Режим = 6 Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.ResultMessage) Тогда
			ДопСвойстваВХранилище = ПодготовленныеДанные(СтруктураОтвета.ResultMessage);
			Если НЕ ДопСвойстваВХранилище = Неопределено 
				И ТипЗнч(ДопСвойстваВХранилище) = Тип("ХранилищеЗначения") Тогда
				ДанныеПредыдущейЧастиОбмена = ДопСвойстваВХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьКлиентовДляОбмена(ЗаписьXML, УзелОбмена,
			ДанныеПредыдущейЧастиОбмена, Истина);
	КонецЕсли;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Если НЕ Отказ Тогда
		СообщениеОбмена = ЗаписьXML.Закрыть();
		Если НЕ ДанныеПредыдущейЧастиОбмена = Неопределено Тогда
			СтруктураОтвета.ResultMessage = "";
			СтруктураОтвета.Continue = Ложь;
			Если ДанныеПредыдущейЧастиОбмена.Продолжение Тогда
				СтруктураОтвета.ResultMessage = ДанныеДляПродолжения(Новый ХранилищеЗначения(ДанныеПредыдущейЧастиОбмена,
					Новый СжатиеДанных(9)));
				Если Не ПустаяСтрока(СтруктураОтвета.ResultMessage) Тогда
					СтруктураОтвета.Continue = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ЭтоТаблицаОбъекта(Знач СвойствоXDTO)
	
	Если СвойствоXDTO.Свойства().Количество() = 1 Тогда
		
		Возврат СвойствоXDTO.Свойства().Получить(0).ВерхняяГраница <> 1;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти