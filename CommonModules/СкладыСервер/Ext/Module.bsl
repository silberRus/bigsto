////////////////////////////////////////////////////////////////////////////////
// Модуль "СкладыСервер", содержит процедуры и функции для
// управления складскими операциями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаписьВРегистры

// Процедура формирования движений по регистру "Блокировки складских ячеек".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьБлокировкиСкладскихЯчеек(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБлокировкиСкладскихЯчеек;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияБлокировкиСкладскихЯчеек = Движения.БлокировкиСкладскихЯчеек;
	ДвиженияБлокировкиСкладскихЯчеек.Записывать = Истина;
	ДвиженияБлокировкиСкладскихЯчеек.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Товары в ячейках".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьТоварыВЯчейках(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыВЯчейках;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияБлокировкиСкладскихЯчеек = Движения.ТоварыВЯчейках;
	ДвиженияБлокировкиСкладскихЯчеек.Записывать = Истина;
	ДвиженияБлокировкиСкладскихЯчеек.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Товары к отбору".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьТоварыКОтбору(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОтбору;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияБлокировкиСкладскихЯчеек = Движения.ТоварыКОтбору;
	ДвиженияБлокировкиСкладскихЯчеек.Записывать = Истина;
	ДвиженияБлокировкиСкладскихЯчеек.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияСерийТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДвиженияСерийТоваров.Записывать = Истина;
	Движения.ДвиженияСерийТоваров.Загрузить(Таблица);
КонецПроцедуры

// Процедура формирования движений по регистру "Состояние пересчетов ячеек".
//
// Параметры:
//	Ссылка - ДокументСсылка.ПересчетТоваров - ссылка на документ 
//	Статус - ПеречислениеСсылка.СтатусыПересчетовТоваров - статус документа
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьСостоянияПересчетовЯчеек(Ссылка, Статус, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСостоянийПересчетовЯчеек = Новый ТаблицаЗначений;
		
	МенеджерОбъекта 				= ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	ТаблицаСостоянийПересчетовЯчеек = МенеджерОбъекта.ТаблицаСостоянийПересчетовЯчеек(Ссылка, Статус);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияПересчетовЯчеек");
	ЭлементБлокировки.ИсточникДанных = ТаблицаСостоянийПересчетовЯчеек;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
	Блокировка.Заблокировать();

	Для Каждого СтрокаТаблицы Из ТаблицаСостоянийПересчетовЯчеек Цикл

		Набор = РегистрыСведений.СостоянияПересчетовЯчеек.СоздатьНаборЗаписей();
		Набор.Отбор.Ячейка.Установить(СтрокаТаблицы.Ячейка);
		Набор.Прочитать();
		
		Если Набор.Количество() > 0 Тогда
			СтрокаНабора = Набор[0];
		Иначе
			СтрокаНабора = Набор.Добавить();
			СтрокаНабора.Ячейка = СтрокаТаблицы.Ячейка;
		КонецЕсли;
		
		НужноЗаписать = Ложь;
		
		//Требуется пересчет и не проводилось более поздних пересчетов в ячейке 
		Если СтрокаТаблицы.Состояние = Перечисления.СостоянияПересчетовЯчеек.ТребуетсяПересчет
			И СтрокаНабора.ДатаПоследнегоПересчета <= СтрокаТаблицы.ДатаДокумента Тогда
			
			СтрокаНабора.Состояние = Перечисления.СостоянияПересчетовЯчеек.ТребуетсяПересчет;
			
			НужноЗаписать = Истина;
			
		// Пересчет выполнен и не проводилось более поздних пересчетов в ячейке
		ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.СостоянияПересчетовЯчеек.ПересчетВыполнен
			И СтрокаНабора.ДатаПоследнегоПересчета <= СтрокаТаблицы.ДатаДокумента Тогда
			
			СтрокаНабора.ДатаПоследнегоПересчета = СтрокаТаблицы.ДатаДокумента;
			СтрокаНабора.Состояние = Перечисления.СостоянияПересчетовЯчеек.ПересчетВыполнен;
			
			НужноЗаписать = Истина;
			
		КонецЕсли;
		
		Если НужноЗаписать Тогда
			Набор.Записать(Истина);	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Товарные места к отражению излишков и недостач".
//
// Параметры:
//	Ссылка - ДокументСсылка.ПересчетТоваров - ссылка на документ 
//	Статус - ПеречислениеСсылка.СтатусыПересчетовТоваров - статус документа
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьТоварныеМестаКОтражениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварныеМестаКОтражениюИзлишковНедостач;

	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварныеМестаКОтражениюИзлишковНедостач.Записывать = Истина;
	Движения.ТоварныеМестаКОтражениюИзлишковНедостач.Загрузить(Таблица);

КонецПроцедуры

#КонецОбласти

#Область ОтборИРазмещение

// Процедура формирует таблицу размещения товара по ячейках хранения.
// В текущей версии алгоритма учитывается:
// - блокировки ячеек;
// - области хранения по приоритетам для каждой упаковки каждой номенклатуры;
// - уровни доступности ячеек;
// - контроль габаритов (в ячейку не размещается товар, который больше ее по любому габариту (если только ячейка
// 	не неограниченная по размерам);
// - контроль занятого объема в ячейке с учетом уже хранимого товара, товара к размещению и товара, обрабатываемого алгоритмом
// 	(для неограниченных по размерам ячеек не контролируется);
// - контроль занятого веса в ячейке с учетом уже хранимого товара, товара к размещению и товара, обрабатываемого алгоритмом
// 	(для неограниченных по грузоподъемности ячеек не контролируется);
// - безразмерные упаковки размещаются только в неограниченные по размерам ячейки.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - 	 - менеджер временных таблиц запроса, создавшего пул номенклатуры к размещению
//  	  процедура не удаляет временные таблицы, управляемые менеджером
//  Склад					 - 	 - склад, на котором необходимо разместить товар
//  Помещение				 - 	 - складское помещение, в котором располагаются ячейки, если используется деление
//  	  адресов хранения по помещениям, если не используется необходимо передавать пустую ссылку
//  	  
//  РабочийУчасток			 - СправочникСсылка.РабочиеУчастки - будут подобраны ячейки по правилам размещения,
//																с учетом всех приоритетов, а потом ограничены переданному участку.
//																Если передана пустая ссылка, то ограничения по участкам дейстовать не будет
//  ЯчейкаИсточник			 - СправочникСсылка.СкладскиеЯчейки	 - ячейка, из которой происходит размещение товаров. Передается, когда это
//																зона приемки или отгрузки. Нужна для того, чтобы рассчитать количество свободной
//																тары в ячейке и НЕ размещать тару, которая нужна для лежащих в ячейке товаров. 
//  ОшибкаПроверки			 - Булево - возвращаемый признак наличия ошибки проверки правильности заполнения параметров для размещаемой номенклатуры 
//  ДополнятьМногооборотнойТарой - Булево - для заданных упаковок будет добавлена указанная в них тара
// Возвращаемое значение:
//   Структура - структура со следующими ключами:
//	* ТаблицаРезультатов - ТаблицаЗначений - подобранные по алгоритму размещения ячейки
//	* ТаблицаОшибок - ТаблицаЗначений - товары, для которых не удалось подобрать ячейки для размещения
//  * МассивУчастков - Массив - массив ссылок на рабочие участки подобранных ячеек
//
Функция РазместитьТоварВЯчейках(МенеджерВременныхТаблиц, Склад, Помещение, РабочийУчасток,
			ЯчейкаИсточник, ОшибкаПроверки, ДополнятьМногооборотнойТарой = Истина) Экспорт
	
	ПроверитьПодготовитьПараметрыНоменклатурыДляРазмещения(МенеджерВременныхТаблиц,Склад, Помещение, ЯчейкаИсточник, ОшибкаПроверки);
	
	Если ОшибкаПроверки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультатов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРезультатов.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРезультатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаРезультатов.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(18,6,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ПорядокОбхода", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(19,ДопустимаяДлина.Фиксированная)));
	ТаблицаРезультатов.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов(Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки")));
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОшибок.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаОшибок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	ТаблицаОшибок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	ТаблицаОшибок.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	
	ТаблицаНаполненияЯчеек = Новый ТаблицаЗначений;
	ТаблицаНаполненияЯчеек.Колонки.Добавить("КоличествоСерий", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНаполненияЯчеек.Колонки.Добавить("КоличествоХарактеристик", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНаполненияЯчеек.Колонки.Добавить("КоличествоНоменклатур", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНаполненияЯчеек.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаНаполненияЯчеек.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаНаполненияЯчеек.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНаполненияЯчеек.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));

	ТаблицаНаполненияЯчеек.Индексы.Добавить("Ячейка");
	
	ТаблицаРазмещенныхТоваров = Новый ТаблицаЗначений;
	ТаблицаРазмещенныхТоваров.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));	
	ТаблицаРазмещенныхТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	ТаблицаРазмещенныхТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));	
	ТаблицаРазмещенныхТоваров.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));	
	
	МассивУчастков = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Серия КАК Серия,
	|	Таблица.УчетСерийПоFEFO КАК УчетСерийПоFEFO,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.ФизическиРазличаетсяОтНазначения,
	|	Таблица.ОграничиватьПоВесу,
	|	Таблица.ОграничиватьПоОбъему,
	|	Таблица.Высота КАК Высота,
	|	Таблица.Ширина КАК Ширина,
	|	Таблица.Глубина КАК Глубина,
	|	Таблица.Объем КАК Объем,
	|	Таблица.Безразмерная КАК Безразмерная,
	|	Таблица.Вес КАК Вес,
	|	Таблица.ГоденДо КАК ГоденДо,
	|	Таблица.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	Таблица.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	Таблица.КоличествоВУпаковке КАК КоличествоВУпаковке
	|ИЗ
	|	ТаблицаНоменклатурыРасширенная КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|   УчетСерийПоFEFO,
	|	Номенклатура.Наименование,
	|	Характеристика.Наименование,
	|	ГоденДо,
	|	Упаковка.Наименование
	|
	|ИТОГИ ПО
	|	Назначение,
	|	Номенклатура,
	|	Упаковка,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения КАК ОбластьХранения,
	|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ТаблицаНоменклатуры.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ВЫБОР  
	|		КОГДА ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения.ОбластьОбособленногоХранения ТОГДА
	|			ПравилаРазмещенияТоваровВЯчейках.Приоритет
	|		ИНАЧЕ 
	|			ПравилаРазмещенияТоваровВЯчейках.Приоритет + 1000
	|	КОНЕЦ КАК ПриоритетОбласти,
	|	ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения.ОбластьОбособленногоХранения КАК ОбластьОбособленногоХранения,
	|	ТаблицаНоменклатуры.ФизическиРазличаетсяОтНазначения КАК ФизическиРазличаетсяОтНазначения
	|ПОМЕСТИТЬ ОбластиХраненияСкладскихГрупп
	|ИЗ
	|	ТаблицаНоменклатурыРасширенная КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|		ПО ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|					И ТаблицаНоменклатуры.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|ГДЕ
	|	ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад
	|	И ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение
	// Если товар размещается не под назначение, тогда доступны только области хранения не обособленного хранения. 
	|	И (ВЫБОР КОГДА ТаблицаНоменклатуры.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяССылка) ТОГДА
	|				НЕ ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения.ОбластьОбособленногоХранения
	|		ИНАЧЕ ВЫБОР КОГДА ТаблицаНоменклатуры.ФизическиРазличаетсяОтНазначения ТОГДА
	|					Истина
	|			 ИНАЧЕ ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения.ОбластьОбособленногоХранения
	|			 КОНЕЦ
	|	КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрЯчейки.Ссылка КАК Ячейка,
	|	ОбластиХраненияСкладскихГрупп.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ОбластиХраненияСкладскихГрупп.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	МИНИМУМ(ОбластиХраненияСкладскихГрупп.ПриоритетОбласти) КАК ПриоритетОбласти,
	|	МИНИМУМ(ОбластиХраненияСкладскихГрупп.ОбластьОбособленногоХранения) КАК ОбластьОбособленногоХранения,
	|	МИНИМУМ(ОбластиХраненияСкладскихГрупп.ФизическиРазличаетсяОтНазначения) КАК ФизическиРазличаетсяОтНазначения
	|ПОМЕСТИТЬ ТаблицаЯчеекДляЗапроса
	|ИЗ
	|	ОбластиХраненияСкладскихГрупп КАК ОбластиХраненияСкладскихГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СпрЯчейки
	|		ПО (СпрЯчейки.ОбластьХранения = ОбластиХраненияСкладскихГрупп.ОбластьХранения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиЯчеек
	|		ПО (СпрЯчейки.Ссылка = БлокировкиЯчеек.Ячейка)
	|			И (БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
	|				ИЛИ БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Размещение))
	|ГДЕ
	|	БлокировкиЯчеек.ТипБлокировки ЕСТЬ NULL 
	|	И СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
	|	И (НЕ СпрЯчейки.ЭтоГруппа)
	|	И (НЕ СпрЯчейки.ПометкаУдаления)
	|	И (СпрЯчейки.Владелец = &Склад)
	|	И (СпрЯчейки.Помещение = &Помещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрЯчейки.Ссылка,
	|	ОбластиХраненияСкладскихГрупп.СкладскаяГруппаНоменклатуры,
	|	ОбластиХраненияСкладскихГрупп.СкладскаяГруппаУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	СУММА((ТоварыВЯчейкахОстатки.ВНаличииОстаток + ТоварыВЯчейкахОстатки.КРазмещениюОстаток) * &ТекстЗапросаОбъемУпаковки) КАК ЗанятыйОбъем,
	|	СУММА((ТоварыВЯчейкахОстатки.ВНаличииОстаток + ТоварыВЯчейкахОстатки.КРазмещениюОстаток) * &ТекстЗапросаВесУпаковки) КАК ЗанятыйВес
	|ПОМЕСТИТЬ ЗапросПоЗанятомуОбъемуВесу
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|				(ВЫБРАТЬ
	|					ТаблицаЯчеекДляЗапроса.Ячейка
	|				ИЗ
	|					ТаблицаЯчеекДляЗапроса КАК ТаблицаЯчеекДляЗапроса)) КАК ТоварыВЯчейкахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЯчеекДляЗапроса.Ячейка КАК Ячейка,
	|	ТаблицаЯчеекДляЗапроса.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ТаблицаЯчеекДляЗапроса.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ТаблицаЯчеекДляЗапроса.ПриоритетОбласти КАК ПриоритетОбласти,
	|	ТаблицаЯчеекДляЗапроса.ОбластьОбособленногоХранения КАК ОбластьОбособленногоХранения,
	|	ТаблицаЯчеекДляЗапроса.ФизическиРазличаетсяОтНазначения КАК ФизическиРазличаетсяОтНазначения,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.УровеньДоступности КАК УровеньДоступности,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.РабочийУчасток КАК РабочийУчасток,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Код КАК Код,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Объем * (ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ОбъемЕдиницаИзмерения.Числитель/ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ОбъемЕдиницаИзмерения.Знаменатель) * ТаблицаЯчеекДляЗапроса.Ячейка.МаксимальныйКоэффициентНаполненностиПоОбъему / 100 - ЕСТЬNULL(ЗапросПоЗанятомуОбъемуВесу.ЗанятыйОбъем, 0) КАК СвободныйОбъем,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Грузоподъемность * (ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ВесЕдиницаИзмерения.Числитель/ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ВесЕдиницаИзмерения.Знаменатель) * ТаблицаЯчеекДляЗапроса.Ячейка.МаксимальныйКоэффициентНаполненностиПоВесу / 100 - ЕСТЬNULL(ЗапросПоЗанятомуОбъемуВесу.ЗанятыйВес, 0) КАК СвободныйВес,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Ширина*ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ШиринаЕдиницаИзмерения.Числитель/ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ШиринаЕдиницаИзмерения.Знаменатель КАК Ширина,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Глубина*ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ГлубинаЕдиницаИзмерения.Числитель/ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ГлубинаЕдиницаИзмерения.Знаменатель КАК Глубина,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Высота*ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ВысотаЕдиницаИзмерения.Числитель/ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.ВысотаЕдиницаИзмерения.Знаменатель КАК Высота,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.НеОграниченаПоГрузоподъемности КАК НеОграниченаПоГрузоподъемности,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.НеОграниченаПоРазмерам КАК НеОграниченаПоРазмерам,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ПриоритетРазмещенияВСвободныеЯчейки КАК ПриоритетРазмещенияВСвободныеЯчейки,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ПриоритетРазмещенияВМонотоварныеЯчейки КАК ПриоритетРазмещенияВМонотоварныеЯчейки,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ПриоритетРазмещенияВСмешанныеЯчейки КАК ПриоритетРазмещенияВСмешанныеЯчейки,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ПриоритетРазмещенияВЯчейкиСДругимТоваром КАК ПриоритетРазмещенияВЯчейкиСДругимТоваром,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ОписаниеМонотоварности КАК ОписаниеМонотоварности,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.СтрогаяМонотоварность КАК СтрогаяМонотоварность,
	|	СостоянияПересчетовЯчеек.Состояние КАК СостояниеПересчета 
	|ПОМЕСТИТЬ ТаблицаЯчеек
	|ИЗ
	|	ТаблицаЯчеекДляЗапроса КАК ТаблицаЯчеекДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапросПоЗанятомуОбъемуВесу КАК ЗапросПоЗанятомуОбъемуВесу
	|		ПО ТаблицаЯчеекДляЗапроса.Ячейка = ЗапросПоЗанятомуОбъемуВесу.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПересчетовЯчеек КАК СостоянияПересчетовЯчеек
	|		ПО ТаблицаЯчеекДляЗапроса.Ячейка = СостоянияПересчетовЯчеек.Ячейка
	|			И (СостоянияПересчетовЯчеек.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПересчетовЯчеек.ТребуетсяПересчет))
	|ГДЕ
	|	(ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Объем * ТаблицаЯчеекДляЗапроса.Ячейка.МаксимальныйКоэффициентНаполненностиПоОбъему / 100 - ЕСТЬNULL(ЗапросПоЗанятомуОбъемуВесу.ЗанятыйОбъем, 0) > 0
	|			ИЛИ ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.НеОграниченаПоРазмерам)
	|	И (ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Грузоподъемность * ТаблицаЯчеекДляЗапроса.Ячейка.МаксимальныйКоэффициентНаполненностиПоВесу / 100 - ЕСТЬNULL(ЗапросПоЗанятомуОбъемуВесу.ЗанятыйВес, 0) > 0
	|			ИЛИ ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.НеОграниченаПоГрузоподъемности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка,
	|	СкладскаяГруппаНоменклатуры,
	|	СкладскаяГруппаУпаковок,
	|	НеОграниченаПоГрузоподъемности,
	|	НеОграниченаПоРазмерам,
	|	ОбластьОбособленногоХранения,
	|	ФизическиРазличаетсяОтНазначения,
	|	Ширина,
	|	Глубина,
	|	Высота,
	|	СвободныйОбъем,
	|	СвободныйВес,
	|	ПриоритетОбласти,
	|	СостояниеПересчета,
	|	РабочийУчасток,
	|	УровеньДоступности,
	|	ПорядокОбхода,
	|	СтрогаяМонотоварность,
	|	ОписаниеМонотоварности,
	|	Код,
	|	ПриоритетРазмещенияВЯчейкиСДругимТоваром,
	|	ПриоритетРазмещенияВСмешанныеЯчейки,
	|	ПриоритетРазмещенияВСвободныеЯчейки,
	|	ПриоритетРазмещенияВМонотоварныеЯчейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|				(ВЫБРАТЬ
	|					ТаблицаЯчеек.Ячейка
	|				ИЗ
	|					ТаблицаЯчеек КАК ТаблицаЯчеек)) КАК ТоварыВЯчейкахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка,
	|	Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ТоварыВЯчейкахОстатки.Серия.ГоденДо) КАК ГоденДо,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ МаксимальныеСрокиГодностиВЯчейках
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаНоменклатуры.Номенклатура,
	|						ТаблицаНоменклатуры.Характеристика
	|					ИЗ
	|						ТаблицаНоменклатурыРасширенная КАК ТаблицаНоменклатуры
	|					ГДЕ
	|						ТаблицаНоменклатуры.УчетСерийПоFEFO)
	|				И Ячейка В
	|					(ВЫБРАТЬ
	|						ТаблицаЯчеек.Ячейка
	|					ИЗ
	|						ТаблицаЯчеек КАК ТаблицаЯчеек)) КАК ТоварыВЯчейкахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Ячейка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Ячейка,
	|	ГоденДо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЯчеекДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбластиХраненияСкладскихГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗапросПоЗанятомуОбъемуВесу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
	|	0 КАК Объем,
	|	0 КАК Вес,
	|	0 КАК КоличествоНоменклатур,
	|	0 КАК КоличествоХарактеристик,
	|	0 КАК КоличествоСерий,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
	|ПОМЕСТИТЬ ТаблицаНаполненияЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия
	|ПОМЕСТИТЬ ТаблицаРазмещенныхТоваров";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ТоварыВЯчейкахОстатки.Упаковка", "ТоварыВЯчейкахОстатки.Номенклатура", Ложь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ТоварыВЯчейкахОстатки.Упаковка", "ТоварыВЯчейкахОстатки.Номенклатура", Ложь));
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение); 
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаПоНазначению = МассивРезультатов[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНазначению.Следующий() Цикл
		
		ВыборкаПоНоменклатуре = ВыборкаПоНазначению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			
			ВыборкаПоУпаковкам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоУпаковкам.Следующий() Цикл
				
				ВыборкаПоХарактеристикам = ВыборкаПоУпаковкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоХарактеристикам.Следующий() Цикл
					
					ВыборкаПоСериям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоСериям.Следующий() Цикл
						
						КоличествоУпаковок = ВыборкаПоСериям.КоличествоУпаковок;
						
						СтруктураТаблицАлгоритмаРазмещенияТоваров = СтруктураТаблицАлгоритмаРазмещенияТоваров();
						СтруктураТаблицАлгоритмаРазмещенияТоваров.ТаблицаРезультатов = ТаблицаРезультатов;
						СтруктураТаблицАлгоритмаРазмещенияТоваров.ТаблицаОшибок = ТаблицаОшибок;
						СтруктураТаблицАлгоритмаРазмещенияТоваров.ТаблицаНаполненияЯчеек = ТаблицаНаполненияЯчеек;
						СтруктураТаблицАлгоритмаРазмещенияТоваров.ТаблицаРазмещенныхТоваров = ТаблицаРазмещенныхТоваров;
						
						РазместитьПозициюТовара(МенеджерВременныхТаблиц, СтруктураТаблицАлгоритмаРазмещенияТоваров, ВыборкаПоСериям, МассивУчастков, КоличествоУпаковок);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ТаблицаРазмещенныхТоваров.Очистить();
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Отобрать товары по рабочему участку
	Если ЗначениеЗаполнено(РабочийУчасток) Тогда
		ОтборПоРабочемуУчастку = Новый Структура("РабочийУчасток",РабочийУчасток);
		ТаблицаРезультатов = ТаблицаРезультатов.Скопировать(ОтборПоРабочемуУчастку);
	КонецЕсли;
	
	Если ДополнятьМногооборотнойТарой Тогда
		ДополнитьМногооборотнойТаройТаблицуРазмещения(ТаблицаРезультатов);
	КонецЕсли;
	
	//Дополнение тарой таблицы ошибок для баланса тары убранной при проверке.
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОшибок.Номенклатура,
	|	ТаблицаОшибок.Характеристика,
	|	ТаблицаОшибок.Назначение,
	|	ТаблицаОшибок.Серия,
	|	ВЫРАЗИТЬ(ТаблицаОшибок.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Справочник.СкладскиеЯчейки) КАК Ячейка,
	|	ТаблицаОшибок.КоличествоУпаковок,
	|	ТаблицаОшибок.Количество
	|ПОМЕСТИТЬ ТаблицаОшибок
	|ИЗ
	|	&ТаблицаОшибок КАК ТаблицаОшибок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОшибок.Номенклатура,
	|	ТаблицаОшибок.Характеристика,
	|	ТаблицаОшибок.Назначение,
	|	ТаблицаОшибок.Серия,
	|	ТаблицаОшибок.Упаковка,
	|	ТаблицаОшибок.Ячейка,
	|	ТаблицаОшибок.КоличествоУпаковок,
	|	ТаблицаОшибок.Количество,
	|	&ТекстЗапросаВесУпаковки КАК ВесУпаковки,
	|	&ТекстЗапросаОбъемУпаковки КАК ОбъемУпаковки,
	|	ТаблицаОшибок.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
	|	ТаблицаОшибок.Ячейка.Код КАК Код,
	|	ТаблицаОшибок.Ячейка.РабочийУчасток КАК РабочийУчасток
	|ИЗ
	|	ТаблицаОшибок КАК ТаблицаОшибок";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ТаблицаОшибок.Упаковка", "ТаблицаОшибок.Номенклатура", Ложь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ТаблицаОшибок.Упаковка", "ТаблицаОшибок.Номенклатура", Ложь));
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаОшибок",ТаблицаОшибок);
	ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
	
	Если ДополнятьМногооборотнойТарой Тогда
		ДополнитьМногооборотнойТаройТаблицуРазмещения(ТаблицаОшибок);
	КонецЕсли;
	
	ТаблицаРезультатов.Сортировать("ПорядокОбхода,Код");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТаблицаРезультатов",ТаблицаРезультатов);
	СтруктураВозврата.Вставить("ТаблицаОшибок",ТаблицаОшибок);
	СтруктураВозврата.Вставить("МассивУчастков",МассивУчастков);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Процедура формирует таблицу отбора товара из ячеек хранения.
// В текущей версии алгоритма учитывается:
//	- блокировки ячеек;
//	- уровни доступности ячеек;
//	- остатки товара нужной характеристики в необходимой упаковке в ячейке.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц запроса, создавшего пул номенклатуры к размещению.
//		Процедура не удаляет временные таблицы, управляемые менеджером;
//	Склад - СправочникСсылка.Склады - склад, на котором необходимо разместить товар;
//	Помещение - СправочникСсылка.СкладскиеПомещения - складское помещение, в котором располагаются ячейки, если используется деление
//		адресов хранения по помещениям, если не используется необходимо передавать пустую ссылку.
//
// Возвращаемое значение:
//	Структура - состав полей структуры описан в функции СтруктураТаблицАлгоритмаОтборТоваров().
//
Функция ОтобратьТоварИзЯчеек(МенеджерВременныхТаблиц, Склад, Помещение) Экспорт
	
	СтруктураТаблицАлгоритмаОтборТоваров = СтруктураТаблицАлгоритмаОтборТоваров();
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(Неопределено) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад";
		
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Если Запрос.Выполнить().Пустой() Тогда
			СтруктураТаблицАлгоритмаОтборТоваров.Удалить("ТаблицаРасходаИзЯчеек");
			
			Возврат СтруктураТаблицАлгоритмаОтборТоваров;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодготовитьТаблицуНоменклатурыДляОтбора(МенеджерВременныхТаблиц);
	
	ПодобратьЯчейкиДляОтбора(МенеджерВременныхТаблиц, Склад, Помещение, СтруктураТаблицАлгоритмаОтборТоваров, Ложь);
	
	ЕстьПустаяТара = ДополнитьМногооборотнойТаройТаблицуОтбора(МенеджерВременныхТаблиц, СтруктураТаблицАлгоритмаОтборТоваров, Истина);
	
	//Если есть отбор пустой тары, то запустим для нее обычный алгоритм отбора
	Если ЕстьПустаяТара Тогда
		ПодобратьЯчейкиДляОтбора(МенеджерВременныхТаблиц, Склад, Помещение, СтруктураТаблицАлгоритмаОтборТоваров, Истина);
	КонецЕсли;
	
	СтруктураТаблицАлгоритмаОтборТоваров.ТаблицаРезультатов.Сортировать("Распоряжение, ПорядокОбхода, Код, КлючСвязиСТарой, Упаковка Убыв", Новый СравнениеЗначений);
	СтруктураТаблицАлгоритмаОтборТоваров.Удалить("ТаблицаРасходаИзЯчеек");
	
	Возврат СтруктураТаблицАлгоритмаОтборТоваров;
	
КонецФункции

// Функция возвращает таблицу упаковок, используемых для номенклатуры.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить список упаковок;
//	БазовыеВНачале - Булево, Истина - признак сортировки упаковок в таблице;
//	СкладскаяГруппа - СправочникСсылка.СкладскиеГруппыУпаковок - складская группа упаковок.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений со следующими колонками:
//		* Упаковка				- СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка номенклатуры;
//		* Коэффициент			- Число - коэфиициент упаковки по отношению к единице хранения номенклатуры;
//		* КоличествоУпаковок 	- Число - заполняется 0;
//		* Количество			- Число - заполняется 0.
//
Функция ПолучитьУпаковки(Номенклатура, БазовыеВНачале = Ложь, СкладскаяГруппа = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("НаборУпаковок", Номенклатура.НаборУпаковок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	спрУпаковкиНоменклатуры.Ссылка КАК Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент,
	|	0 КАК Количество,
	|	0 КАК КоличествоУпаковок,
	|	спрУпаковкиНоменклатуры.СкладскаяГруппа
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК спрУпаковкиНоменклатуры
	|ГДЕ
	|	(спрУпаковкиНоменклатуры.Владелец = &Номенклатура
	|			ИЛИ спрУпаковкиНоменклатуры.Владелец = &НаборУпаковок)
	|	И НЕ спрУпаковкиНоменклатуры.ПометкаУдаления
	|	И (&СкладскаяГРуппа = НЕОПРЕДЕЛЕНО
	|			ИЛИ спрУпаковкиНоменклатуры.СкладскаяГруппа = &СкладскаяГРуппа)
	|	И спрУпаковкиНоменклатуры.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Коэффициент УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"спрУпаковкиНоменклатуры", Неопределено));
		
	Если БазовыеВНачале ТОгда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " УБЫВ", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СкладскаяГруппа", СкладскаяГруппа );
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Процедура реализует алгоритм оптимального распределения товара по упаковкам.
//  Модифицирует параметр ТаблицаУпаковок, заполняя колонки "КоличествоУпаковок", "Количество"
//
// Параметры:
//  ТаблицаУпаковок		 - ТаблицаЗначений	 - таблица упаковок:
//  	* Упаковка				- СправочникСсылка.Упаковка - упаковка номенклатуры;
//  	* Коэффициент			- Число - коэфиициент упаковки по отношению к единице хранения номенклатуры;
//  	* КоличествоУпаковок 	- Число - количество упаковок номенклатуры;
//  	* Количество			- Число - количество номенклатуры в единицах хранения.
//  ТребуемоеКоличество	 - Число			 - количество номенклатуры, которое необходимо распределить.
//
Процедура РазбитьУпаковками(ТаблицаУпаковок, Знач ТребуемоеКоличество) Экспорт
	
	КоличествоОсталось = ТребуемоеКоличество;
	Для каждого СтрокаТ Из ТаблицаУпаковок Цикл
		
		Если Не КоличествоОсталось Тогда 
			СтрокаТ.КоличествоУпаковок = 0; 
			СтрокаТ.Количество = 0;
			Продолжить 
		КонецЕсли;

		
		СтрокаТ.КоличествоУпаковок = Цел(КоличествоОсталось / СтрокаТ.Коэффициент);
		КоличествоОсталось = КоличествоОсталось % СтрокаТ.Коэффициент;
		СтрокаТ.Количество = СтрокаТ.КоличествоУпаковок * СтрокаТ.Коэффициент;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Подпитка

// Функция запускает подпитку зон быстрого отбора по "Складу" и "Помещению".
//
// Параметры:
// 		Склад - СправочникСсылка.Склады - Склад на котором будет выполнятся подпитка
// 		Помещение - СправочникСсылка.Помещение - Помещение  на котором будет выполнятся подпитка
// 		ПараметрыФормированияЗаданий - Структура - параметры, по которым будут разбиты задания на переупаковку
//
// Возвращаемое значение:
// 		Строка - Сообщение об ошибке
//
Функция ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//Проверка заблокированных данных
	Если Не ПараметрыФормированияЗаданий.Свойство("ПоРаспоряжениямНаОтбор") Тогда
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыКОтгрузке", "Склад", МенеджерВТ);
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыНаСкладах", "Склад", МенеджерВТ);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТЗаблокированоТоварыКОтгрузке.Склад
		|ИЗ
		|	ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке
		|ГДЕ
		|	ВТЗаблокированоТоварыКОтгрузке.Склад = &Склад
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТЗаблокированоТоварыНаСкладах.Склад
		|ИЗ
		|	ВТЗаблокированоТоварыНаСкладах КАК ВТЗаблокированоТоварыНаСкладах
		|ГДЕ
		|	ВТЗаблокированоТоварыНаСкладах.Склад = &Склад";
		Запрос.УстановитьПараметр("Склад", Склад);
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
		
	СоздатьТаблицуУпаковокПоТекущимРаспоряжениям(Склад, Помещение, МенеджерВременныхТаблиц, ПараметрыФормированияЗаданий);
	
	ЕстьПотребностьВУпаковках = СформироватьТаблицуПотребностейВУпаковках(Склад, Помещение, МенеджерВременныхТаблиц, ПараметрыФормированияЗаданий); 	
		
	Если ЕстьПотребностьВУпаковках Тогда
		
		ТаблицыДляЗаданий = СформироватьТаблицыДляЗаданий(Склад,Помещение, МенеджерВременныхТаблиц);
		
		Если ТаблицыДляЗаданий <> Неопределено Тогда
			РазбитьПоЗаданиям(Склад, Помещение, ТаблицыДляЗаданий, ПараметрыФормированияЗаданий);
			Возврат "";
		Иначе
			ТекстСообщения = НСтр("ru='Задания не сформированы (возможно для упаковок не настроены правила переупаковки или правила размещения).'");
			Возврат ТекстСообщения;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='Задания не сформированы (возможно в ячейках хранения не достаточно товаров для отгрузки или подпитка не требуется).'");
		Возврат ТекстСообщения;
	КонецЕсли;
	
КонецФункции

// Функция формирует запрос по временной таблице.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц запроса;
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат выборки временной таблицы из менеджера временных таблиц.
Функция ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,ИмяВременнойТаблицы) Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

// Метод регламентного задания РасчетПоказателейПрогнозаРасходаУпаковок.
// Производит расчет прогноза расхода упаковок, который в дальнейшем используется для упреждающей подпитки.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад, для которого расчитывается прогноз расхода упаковок;
//	Помещение - СправочникСсылка.СкладскиеПомещения - складское помещение, для которого расчитывается прогноз.
//
Процедура ПрогнозРасходаУпаковок(Склад, Помещение) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад)
	 Или (ИспользоватьСкладскиеПомещения(Склад)	И Не ЗначениеЗаполнено(Помещение)) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Расчет показателей прогноза расхода упаковок (запуск по расписанию)'");
	Если ИспользоватьСкладскиеПомещения(Склад) Тогда
		ПараметрыЖурнала.Метаданные    = Помещение.Метаданные();
		ПараметрыЖурнала.Данные        = Помещение;
	Иначе
		ПараметрыЖурнала.Метаданные    = Склад.Метаданные();
		ПараметрыЖурнала.Данные        = Склад;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(
		ПараметрыЖурнала,
		УровеньЖурналаРегистрации.Примечание,
		НСтр("ru = 'Запуск'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиАдресныхСкладов.Склад,
	|	НастройкиАдресныхСкладов.Помещение,
	|	НастройкиАдресныхСкладов.ГлубинаАнализа,
	|	НастройкиАдресныхСкладов.МинимальнаяВероятностьОтгрузки,
	|	НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX,
	|	НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаY,
	|	НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаZ,
	|	НастройкиАдресныхСкладов.ИспользоватьПрогнозРасходаУпаковок
	|ИЗ
	|	РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
	|ГДЕ
	|	НастройкиАдресныхСкладов.Склад = &Склад
	|	И НастройкиАдресныхСкладов.Помещение = &Помещение";
	
	Запрос.УстановитьПараметр("Склад",     Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	НастройкиПодпитки = Запрос.Выполнить().Выбрать();
	
	Если Не НастройкиПодпитки.Следующий()
	 Или Не НастройкиПодпитки.ИспользоватьПрогнозРасходаУпаковок Тогда
		ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(
			ПараметрыЖурнала,
			УровеньЖурналаРегистрации.Предупреждение,
			НСтр("ru = 'Завершение'"),
			НСтр("ru = 'Не заданы настройки прогноза расхода упаковок.'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		ВыполнитьРасчетПоказателейДляПрогнозаИКлассифицациюУпаковок(НастройкиПодпитки);
	Исключение
		ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(
			ПараметрыЖурнала,
			УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Завершение'"),
			НСтр("ru = 'Ошибка расчета показателей прогноза.'"),
			ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(
		ПараметрыЖурнала,
		УровеньЖурналаРегистрации.Примечание,
		НСтр("ru = 'Завершение'"),
		НСтр("ru = 'Показатели прогноза расхода упаковок обновлены.'"));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСкладовВТабличныхЧастяхДокументов

// Осуществляет заполнение складов в табличной части документа.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - Склад, выбранный в шапке документа;
//	СкладГруппа - Булево - Флаг, по которому можно определить, что в шапке документа выбран склад группа;
//	Товары - Таблица - Таблица товаров документа;
//	ИсключитьГруппыДоступныеВЗаказах - Булево, Истина - признак исключения группы складов, доступных в заказах.
//
Процедура ЗаполнитьСкладыВТабличнойЧасти(Знач Склад, Знач СкладГруппа, Товары, ИсключитьГруппыДоступныеВЗаказах) Экспорт
	
	Если СкладГруппа Тогда
		
		МассивСкладов = Новый Массив();
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока.Склад)
				И МассивСкладов.Найти(ТекСтрока.Склад) = Неопределено Тогда
				МассивСкладов.Добавить(ТекСтрока.Склад);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСкладов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Склады.Ссылка КАК Склад
				|ИЗ
				|	Справочник.Склады КАК Склады
				|ГДЕ
				|	Склады.Ссылка В (&Склады)
				|	И ((Склады.Ссылка НЕ В ИЕРАРХИИ (&Склад))
				|	ИЛИ Склады.ВыборГруппы НЕ В (&ВыборГруппыСкладов))
				|");
			
			Запрос.УстановитьПараметр("Склады", МассивСкладов);
			Запрос.УстановитьПараметр("Склад",  Склад);
			
			ВыборГруппыСкладов = Новый Массив();
			ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных);
			Если Не ИсключитьГруппыДоступныеВЗаказах Тогда
				ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах);
			КонецЕсли;
			Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппыСкладов);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Для Каждого ТекСтрока Из Товары Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
					Если Выборка.НайтиСледующий(ТекСтрока.Склад, "Склад") Тогда
						ТекСтрока.Склад = Справочники.Склады.ПустаяСсылка();
					КонецЕсли;
					Выборка.Сбросить();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		МассивТоваров = Новый Массив();
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
				И МассивТоваров.Найти(ТекСтрока.Номенклатура) = Неопределено Тогда
				МассивТоваров.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В (&Товары)
			|	И Номенклатура.ТипНоменклатуры НЕ В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|");
			
		Запрос.УстановитьПараметр("Товары", МассивТоваров);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(ТекСтрока.Номенклатура, "Номенклатура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.Склад <> Склад Тогда
				ТекСтрока.Склад = Склад;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция производит заполнение реквизита "Склад" в выделенных строках табличной части
// Реквизит склад должен быть заполнен только в строках с номенклатурой типа "Перечисление.ТипыНоменклатуры.Товар"
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция - Табличная часть формы для заполнения реквизита товары
// 		ВыделенныеСтроки - Массив - Массив выделенных строк табличной части
// 		СкладЗаполнения - СправочникСсылка.Склады - Склад для заполнения реквизита "Склад" табличной части
// 		ПроверятьКодСтроки - Булево - Флаг необходимость проверять код строки
//
// Возвращаемое значение:
// 		Число - Количество заполненных строк
//
Функция ЗаполнитьСкладыВВыделенныхСтроках(ТабличнаяЧасть, ВыделенныеСтроки, СкладЗаполнения, ПроверятьКодСтроки = Ложь) Экспорт
	
	ЗаполненныхСтрок = 0;
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		
		Если ПроверятьКодСтроки И ЗначениеЗаполнено(СтрокаТаблицы.КодСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или СтрокаТаблицы.ТипНоменклатуры =  Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			
			СтрокаТаблицы.Склад = СкладЗаполнения;
			ЗаполненныхСтрок = ЗаполненныхСтрок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаполненныхСтрок;
	
КонецФункции

// Заполняет служебный реквизит формы данными о количестве складов используемых в табличной части документа.
//
//  Параметры:
//   ТабЧасть - ДанныеФормыКоллекция - таблица с колонками "Склад" и "Отменено" (опционально).
//   ТаблицаСклады - ДанныеФормыКоллекция - служебный реквизит формы, данные которого необходимо заполнить.
//   СкладГруппа - Булево - признак использования различных складов в документе.
//   ЕстьОтменаСтрок - Булево - Истина, если ТабЧасть содержит колонку "Отменено".
//
Процедура ПриИзмененииСкладаВТабличнойЧасти(ТабЧасть, ТаблицаСклады, СкладГруппа, ЕстьОтменаСтрок = Истина) Экспорт
	
	ТаблицаСклады.Очистить();
	
	Если Не СкладГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Склады = Новый Соответствие();
	
	Для Каждого СтрокаТабЧасти Из ТабЧасть Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабЧасти.Склад) И (Не ЕстьОтменаСтрок Или Не СтрокаТабЧасти.Отменено) Тогда
			
			КоличествоСкладов = Склады.Получить(СтрокаТабЧасти.Склад);
			
			Если КоличествоСкладов = Неопределено Тогда
				КоличествоСкладов = 0;
			КонецЕсли;
			
			Склады.Вставить(СтрокаТабЧасти.Склад, КоличествоСкладов + 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из Склады Цикл
		
		НоваяСтрока = ТаблицаСклады.Добавить();
		НоваяСтрока.Склад = Элемент.Ключ;
		НоваяСтрока.КоличествоСтрок = Элемент.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗначенияНастроекСклада

// Возращает признак использования на складе складских помещений.
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - ссылка на элемент справочника "Склады"
//		Дата - Дата - на которую проверяется использование ордерной схемы при отгрузке
//		УчитыватьДату - Булево - признак необходимости учитывать дату начала использования складских помещений
//
//	Возвращаемое значение:
//		Булево - признак использования складских помещений.
//
Функция ИспользоватьСкладскиеПомещения(Склад, Дата = Неопределено, УчитыватьДату = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчитыватьДату Тогда
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСкладскиеПомещения", Новый Структура("Склад",Склад));
	КонецЕсли;
	
	ДатаПроверки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ИспользоватьСкладскиеПомещения, ДатаНачалаИспользованияСкладскихПомещений");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураПараметров.ИспользоватьСкладскиеПомещения И (ДатаПроверки >= СтруктураПараметров.ДатаНачалаИспользованияСкладскихПомещений);
	
КонецФункции

// Функция возращает признак использования на складе(помещении) справочного размещения товаров в ячейки
//
// Параметры:
//  Склад			 - СправочникСсылка.Склады - ссылка на элемент справочника "Склады
//  Помещение		 - СправочникСсылка.СкладскиеПомещения - ссылка на элемент справочника "Складские помещения"
//  Дата			 - Дата - дата, на которую проверяется использование справочного размещения товаров в ячейки
//  УчитыватьДату	 - Булево - признак необходимости учитывать дату.
// 
// Возвращаемое значение:
//  Булево - признак использования адресного хранения справочно.
//
Функция ИспользоватьАдресноеХранениеСправочно(Склад, Помещение, Дата = Неопределено, УчитыватьДату = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ УчитыватьДату Тогда
		СтруктураПараметров = Новый Структура("Склад,Помещение",Склад,Помещение);
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно", СтруктураПараметров);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
		|ГДЕ
		|	НастройкиАдресныхСкладов.ИспользоватьАдресноеХранениеСправочно
		|	И (НЕ НастройкиАдресныхСкладов.ИспользоватьАдресноеХранение
		|			ИЛИ НастройкиАдресныхСкладов.ДатаНачалаАдресногоХраненияОстатков > &Дата)
		|	И НастройкиАдресныхСкладов.Склад = &Склад
		|	И НастройкиАдресныхСкладов.Помещение = &Помещение
		|	И (НЕ &Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
		|			ИЛИ (НЕ НастройкиАдресныхСкладов.Склад.ИспользоватьСкладскиеПомещения
		|				ИЛИ &Дата < НастройкиАдресныхСкладов.Склад.ДатаНачалаИспользованияСкладскихПомещений))";
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",
		?(ЗначениеЗаполнено(Помещение),Помещение,Справочники.СкладскиеПомещения.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Дата",
		?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДатаСеанса()));
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция возращает признак использования на складе(помещении) подпитки зон быстрого отбора
//
// Параметры:
//  Склад		 - СправочникСсылка.Склады - ссылка на элемент справочника "Склады
//  Помещение	 - СправочникСсылка.СкладскиеПомещения - ссылка на элемент справочника "Складские помещения"
// 
// Возвращаемое значение:
//  Булево - признак использования подпитки на складе.
//
Функция ИспользоватьПрогнозРасходаУпаковок(Склад, Помещение) Экспорт
	СтруктураПараметров = Новый Структура("Склад, Помещение",Склад, Помещение);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПрогнозРасходаУпаковок", СтруктураПараметров);

КонецФункции

// Функция возращает строковое представление склада
//
// Параметры:
//  СкладПредставление		 - Строка - строковое представление склада
//  ПомещениеПредставление	 - Строка - строковое представление складского помещения
// 
// Возвращаемое значение:
//  Строка - строковое представление склада.
//
Функция ПолучитьПредставлениеСклада(СкладПредставление, ПомещениеПредставление = "") Экспорт

	СтрПредставление = СокрЛП(СкладПредставление);

	Если ЗначениеЗаполнено(ПомещениеПредставление)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ПомещениеПредставление);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

// Функция возращает признак зависимости начала отгрузки от наличия задания на перевозку
//
// Параметры:
//  Склад	 - СправочникСсылка.Склады - ссылка на элемент справочника "Склады
// 
// Возвращаемое значение:
//  Булево - признак зависимости начала отгрузки от наличия задания на перевозку.
//
Функция НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку(Склад) Экспорт
	
	СтруктураПараметров = Новый Структура("Склад", Склад);
	
	Возврат ПолучитьФункциональнуюОпцию("НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку", СтруктураПараметров);
	
КонецФункции

//Функция возращает признак использования на складе статусов приходных или расходных ордеров.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - ссылка на элемент справочника "Склады";
//	ПроверятьПриходные - Булево - проверять статусы приходных ордеров;
//	ПроверятьРасходные - Булево - проверять статусы расходных ордеров.
//
// Возвращаемое значение:
//	Булево, Истина - признак использования статусов ордеров
//
Функция ИспользоватьСтатусыОрдеров(Склад, ПроверятьПриходные = Истина, ПроверятьРасходные = Истина) Экспорт
	
	СтруктураПараметров = Новый Структура("Склад", Склад);
	
	Возврат
		(ПроверятьПриходные И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПриходныхОрдеров", СтруктураПараметров))
		ИЛИ (ПроверятьРасходные И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", СтруктураПараметров));
	
КонецФункции

// Функция возращает признак использования на складе статусов приходных или расходных ордеров.
//
// Параметры:
//  Склад	 - СправочникСсылка.Склады	 - ссылка на элемент справочника "Склады".
// 
// Возвращаемое значение:
//  Булево, Истина - признак использования статусов ордеров
//
Функция ИспользоватьСтатусыПересчетовТоваров(Склад) Экспорт
	
	СтруктураПараметров = Новый Структура("Склад", Склад);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПересчетовТоваров", СтруктураПараметров);
	
КонецФункции

// Функция возращает признак использования на складе(помещении) рабочих участков.
//
// Параметры:
//  Склад		 - СправочникСсылка.Склады			 - ссылка на элемент справочника "Склады;
//  Помещение	 - СправочникСсылка.СкладскиеПомещения	 - ссылка на элемент справочника "Складские помещения".
// 
// Возвращаемое значение:
//  Булево - признак использования на складе(помещении) рабочих участков.
//
Функция ИспользоватьРабочиеУчастки(Склад, Помещение) Экспорт
	СтруктураПараметров = Новый Структура("Склад, Помещение",Склад, Помещение);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРабочиеУчастки", СтруктураПараметров);
	
КонецФункции

// Функция возращает признак использования на складе(помещении) хранения остатков в разрезе ячеек
//
// Параметры:
//  Склад			 - СправочникСсылка.Склады - ссылка на элемент справочника "Склады
//  Помещение		 - СправочникСсылка.СкладскиеПомещения - ссылка на элемент справочника "Складские помещения"
//  Дата			 - Дата - дата, на которую проверяется использование хранения остатков в разрезе ячеек
//  УчитыватьДату	 - Булево - признак необходимости учитывать дату начала использования адресного хранения.
// 
// Возвращаемое значение:
//  Булево - признак использования адресного хранения на складе.
//
Функция ИспользоватьАдресноеХранение(Склад, Помещение = Неопределено, Дата = Неопределено, УчитыватьДату = Истина) Экспорт
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ УчитыватьДату Тогда
		СтруктураПараметров = Новый Структура("Склад,Помещение",Склад,Помещение);
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", СтруктураПараметров);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
		|ГДЕ
		|	НастройкиАдресныхСкладов.ИспользоватьАдресноеХранение
		|	И НастройкиАдресныхСкладов.ДатаНачалаАдресногоХраненияОстатков <= &Дата
		|	И НастройкиАдресныхСкладов.Склад = &Склад
		|	И НастройкиАдресныхСкладов.Помещение = &Помещение
		|	И (НЕ &Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
		|			ИЛИ (НЕ НастройкиАдресныхСкладов.Склад.ИспользоватьСкладскиеПомещения
		|				ИЛИ &Дата < НастройкиАдресныхСкладов.Склад.ДатаНачалаИспользованияСкладскихПомещений))";
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",
		?(ЗначениеЗаполнено(Помещение),Помещение,Справочники.СкладскиеПомещения.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Дата",
		?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДатаСеанса()));
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

// Функция возращает признак использования на складе ордерной схемы при отгрузке
//
// Параметры:
//  Склад	 - СправочникСсылка.Склады - ссылка на элемент справочника "Склады"
//  Дата	 - Дата - дата, на которую проверяется использование ордерной схемы при отгрузке
// 
// Возвращаемое значение:
//  Булево - признак использования ордерной схемы при отгрузке.
//
Функция ИспользоватьОрдернуюСхемуПриОтгрузке(Склад, Дата = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДатаПроверки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад,
		"ИспользоватьОрдернуюСхемуПриОтгрузке, ДатаНачалаОрдернойСхемыПриОтгрузке");
	Возврат СтруктураПараметров.ИспользоватьОрдернуюСхемуПриОтгрузке
		И ДатаПроверки >= СтруктураПараметров.ДатаНачалаОрдернойСхемыПриОтгрузке;
КонецФункции

// Функция возращает признак использования на складе ордерной схемы при поступлении
//
// Параметры:
//  Склад			 - СправочникСсылка.Склады - ссылка на элемент справочника "Склады"
//  Дата			 - Дата - дата, на которую проверяется использование ордерной схемы при поступлении
//  МожетБытьГруппа	 - Булево - признак группы
// 
// Возвращаемое значение:
//  Булево - признак использования ордерной схемы при поступлении.
//
Функция ИспользоватьОрдернуюСхемуПриПоступлении(Склад, Дата = Неопределено, МожетБытьГруппа = Ложь) Экспорт
	Если НЕ ЗначениеЗаполнено(Склад) ИЛИ ТипЗнч(Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если МожетБытьГруппа Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(Склады.ИспользоватьОрдернуюСхемуПриПоступлении) КАК ИспользоватьОрдернуюСхемуПриПоступлении
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|	И (Склады.Ссылка В ИЕРАРХИИ (&Склад)
		|			ИЛИ Склады.Ссылка = &Склад)
		|	И Склады.ДатаНачалаОрдернойСхемыПриПоступлении <= &Дата";
		
		Запрос.УстановитьПараметр("Склад",Склад);
		Запрос.УстановитьПараметр("Дата",Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.ИспользоватьОрдернуюСхемуПриПоступлении) Тогда
			Возврат Выборка.ИспользоватьОрдернуюСхемуПриПоступлении;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ДатаПроверки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад,
		"ИспользоватьОрдернуюСхемуПриПоступлении, ДатаНачалаОрдернойСхемыПриПоступлении");
		Возврат СтруктураПараметров.ИспользоватьОрдернуюСхемуПриПоступлении
			И ДатаПроверки >= СтруктураПараметров.ДатаНачалаОрдернойСхемыПриПоступлении;
	КонецЕсли;
КонецФункции

// Функция возращает признак использования на складе ордерной схемы при отражении излишков, недостач
//
// Параметры:
//  Склад	 - СправочникСсылка.Склады - ссылка на элемент справочника "Склады"
//  Дата	 - Дата - дата, на которую проверяется использование ордерной схемы при отражении излишков, недостач
// 
// Возвращаемое значение:
//  Булево - признак использования ордерной схемы при отражении излишков и недостач.
//
Функция ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(Склад, Дата = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДатаПроверки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад,
		"ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач,
		|ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач");
	Возврат СтруктураПараметров.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
		И ДатаПроверки >= СтруктураПараметров.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач;
КонецФункции

//Функция возращает признак использования на одном из разрешенных складов
//	ордерной схемы при отражении излишков, недостач
//
//	Возвращаемое значение:
//		Булево - признак использования ордерной схемы при отражении излишков и недостач.
//
Функция ЕстьРазрешенныеСкладыОрдерныеПриОтраженииИзлишковНедостач() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет, используются ли на складе серии. Для группы складов определяет используются ли серии в подчиненных складах
//
// Параметры:
//  Склад					 - СправочникСсылка.Склады	 - склад или группа складов, для которого нужно определить использование серий
//  СкладМожетБытьГруппой	 - Булево					 - признак, что в первом параметре может быть передана группа
// 
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  *ИспользоватьСерииНоменклатуры - Булево
//  *УчитыватьСебестоимостьПоСериям - Булево
//
Функция ИспользованиеСерийНаСкладе(Склад, СкладМожетБытьГруппой) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИспользоватьСерииНоменклатуры", Ложь);
	СтруктураВозврата.Вставить("УчитыватьСебестоимостьПоСериям", Ложь);
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если СкладМожетБытьГруппой Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(Склады.ИспользоватьСерииНоменклатуры) КАК ИспользоватьСерииНоменклатуры,
		|	МАКСИМУМ(Склады.УчитыватьСебестоимостьПоСериям) КАК УчитыватьСебестоимостьПоСериям
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|	И (Склады.Ссылка В ИЕРАРХИИ (&Склад)
		|			ИЛИ Склады.Ссылка = &Склад)
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(Склады.ИспользоватьСерииНоменклатуры) ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("Склад",Склад);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		КонецЕсли;
		
	Иначе
		
		ПараметрыФО = Новый Структура("Склад", Склад);
		
		СтруктураВозврата.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", ПараметрыФО); 
		СтруктураВозврата.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", ПараметрыФО);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет установлены хотя бы в одном виде номенклатуры значения политики учета серии для склада
//
// Параметры:
//  Склад	 - СправочникСсылка.Склады	 - склад для которого определяются политики
// 
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  *УказыватьПриПланированииОтгрузки - Булево
//  *УчитыватьСебестоимостьПоСериям - Булево
//
Функция ИспользованиеСерийНаСкладеПоПолитикамУчета(Склад) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("УказыватьПриПланированииОтгрузки", Ложь);
	СтруктураВозврата.Вставить("УчитыватьСебестоимостьПоСериям", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ПолитикиУчетаСерий.УказыватьПриПланированииОтгрузки) КАК УказыватьПриПланированииОтгрузки,
	|	МАКСИМУМ(ПолитикиУчетаСерий.УчитыватьСебестоимостьПоСериям) КАК УчитыватьСебестоимостьПоСериям,
	|	Склады.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО (ВидыНоменклатурыПолитикиУчетаСерий.Склад = Склады.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий = ПолитикиУчетаСерий.Ссылка)
	|ГДЕ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	Склады.ИспользоватьСерииНоменклатуры";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если  Выборка.Следующий() Тогда
		Если Выборка.ИспользоватьСерииНоменклатуры Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет, используются ли в подразделении серии
//
// Параметры:
//  Подразделение	 - СправочникСсылка.СтруктураПредприятия - подразделение, для которого нужно определить использование серий
// 
// Возвращаемое значение:
//  Структура - структура со следудщими ключами:
//  *ИспользоватьСерииНоменклатуры - Булево
//  *УчитыватьСебестоимостьПоСериям - Булево
//
Функция ИспользованиеСерийВПодразделении(Подразделение) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИспользоватьСерииНоменклатуры", Ложь);
	СтруктураВозврата.Вставить("УчитыватьСебестоимостьПоСериям", Ложь);
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыФО = Новый Структура("Подразделение", Подразделение);
	
	СтруктураВозврата.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство", ПараметрыФО); 
	СтруктураВозврата.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямПроизводство", ПараметрыФО);
		
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументов

// Возвращает параметры вызова фукнции ЗаполнитьОрдераОтобраннымиТоварами.
//
// Возвращаемое значение:
//	Структура:
//		* РежимЗаполнения - Строка - одна из строк Множественное или Единичное;
//		* МассивДокументов - Массив - (передается, если режим Множественное) массив ссылок документов, которые 
//			нужно перезаполнить;
//		* ДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ОрдерНаПеремещение - (передается, 
//			если режим Единичное);
//		* ИзменениеСтатуса - Булево - признак, что при после заполнения нужно изменить статус документа (если это возможно);
//		* СтатусДокумента - ПеречислениеСсылка.СтатусыРасходныхОрдеровНаТовары, ПеречислениеСсылка.СтатусыОрдеровНаПеремещение - 
//				передается, если ИзменениеСтатуса = Истина - статус документа, который нужно установить
//
Функция ПараметрыЗаполненияОрдеровОтобраннымиТоварами() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("РежимЗаполнения");
	Структура.Вставить("МассивДокументов");
	Структура.Вставить("ДокументОбъект");
	Структура.Вставить("ИзменениеСтатуса");
	Структура.Вставить("СтатусДокумента");
	
	Возврат Структура;
	
КонецФункции

// Заполняет ордера отобранными из ячеек товарами
//
// Параметры:
//  ПараметрыЗаполнения	 - Структура - структура, возвращаемая фукнцией ПараметрыЗаполненияОрдеровОтобраннымиТоварами
//  Модифицированность	 - Булево	 - требуется, если вызывается из формы документа. Истина, если ТЧ документа была перезаполнена
// 
// Возвращаемое значение:
//  Массив - (ДокументСсылка) - измененые процедурой документы
//
Функция ЗаполнитьОрдераОтобраннымиТоварами(ПараметрыЗаполнения, Модифицированность = Ложь) Экспорт
	
	МассивИзмененныхДокументов = Новый Массив;
	
	Если ПараметрыЗаполнения.РежимЗаполнения <> "Множественное" Тогда	
		ПараметрыЗаполнения.МассивДокументов = Новый Массив;
		ПараметрыЗаполнения.МассивДокументов.Добавить(ПараметрыЗаполнения.ДокументОбъект.Ссылка);
	КонецЕсли;
	
	//Проверяем, что соблюдены условия перезаполнения
	//Вычисляем количество тары, которая указана в распоряжениях. Если тары в распоряжениях меньше - значит ее нужно добавлять в документ
	//как неотгружаемую
	//Берем все, что отобрано по заданиям, вычитаем выявленные при проверке излишки и недостачи, вычитаем строки, которые в ордере помечены как
	//"Отгрузить" или "Не отгружать" - их перезаполнять не будем. В идеале после этого останется только то, что нужно перенести в ордер вместо
	//строк ордера "Отобрать". Но есть проблема - в строках "Отгрузить" и "Неотгружать" могли поменять упаковку. Если это сделали в обработке проверки
	// - будет сторнирующий документ "Отражение результатов проверки", но если просто изменили в документе - будет расхождение. Упаковки, которые в ордера
	//указали будут с минусом, при этом отобранных упаковок будет больше. В простом случае (т.е. когда повторно отбирают не те товары, в которых таким
	//образом меняли упаковку) строки с расхождениями совпадут по количеству в базовых единицах - такие сроки просто нужно исключить. В более сложном случае
	//перезаполнение ордера не сработает.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Распоряжение,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьНевыполненныеЗадания) КАК ЕстьНевыполненныеЗадания,
	|	МАКСИМУМ(ВложенныйЗапрос.ОтобраноНеВсе) КАК ОтобраноНеВсе,
	|	МИНИМУМ(ВложенныйЗапрос.НетОтобранных) КАК НетОтобранных
	|ПОМЕСТИТЬ Ошибки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОтборуОстатки.Распоряжение КАК Распоряжение,
	|		ТоварыКОтборуОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОтборуОстатки.Характеристика КАК Характеристика,
	|		ТоварыКОтборуОстатки.Назначение КАК Назначение,
	|		ТоварыКОтборуОстатки.Серия КАК Серия,
	|		ВЫБОР
	|			КОГДА ТоварыКОтборуОстатки.ОтбираетсяОстаток <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьНевыполненныеЗадания,
	|		ВЫБОР
	|			КОГДА ТоварыКОтборуОстатки.КОтборуОстаток > ТоварыКОтборуОстатки.ОтобраноОстаток
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОтобраноНеВсе,
	|		ВЫБОР
	|			КОГДА ТоварыКОтборуОстатки.ОтобраноОстаток = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НетОтобранных
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтбору.Остатки(, Распоряжение В (&МассивДокументов)) КАК ТоварыКОтборуОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОтбору.Регистратор,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА ТоварыКОтбору.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И ТоварыКОтбору.Отобрано > 0
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтбору КАК ТоварыКОтбору
	|	ГДЕ
	|		ТоварыКОтбору.Регистратор В(&МассивДокументов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыКОтбору.Регистратор) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Распоряжение
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ВложенныйЗапрос.ЕстьНевыполненныеЗадания) = ИСТИНА
	|		ИЛИ &ИзменениеСтатуса
	|			И МАКСИМУМ(ВложенныйЗапрос.ОтобраноНеВсе) = ИСТИНА
	|		ИЛИ МИНИМУМ(ВложенныйЗапрос.НетОтобранных) = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ошибки.Распоряжение,
	|	Ошибки.ЕстьНевыполненныеЗадания,
	|	Ошибки.ОтобраноНеВсе,
	|	Ошибки.НетОтобранных
	|ИЗ
	|	Ошибки КАК Ошибки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходныйОрдерНаТовары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|	ГДЕ
	|		РасходныйОрдерНаТовары.Ссылка В(&МассивДокументов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасходныйОрдерНаТовары.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОрдерНаПеремещениеТоваров.Ссылка
	|	ИЗ
	|		Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|	ГДЕ
	|		ОрдерНаПеремещениеТоваров.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Ошибки КАК Ошибки
	|		ПО ВложенныйЗапрос.Ссылка = Ошибки.Распоряжение
	|ГДЕ
	|	Ошибки.Распоряжение ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТараПоРаспоряжениям.Ссылка КАК РасходныйОрдер,
	|	ТараПоРаспоряжениям.Номенклатура,
	|	ТараПоРаспоряжениям.Характеристика,
	|	СУММА(ТараПоРаспоряжениям.Количество) КАК Количество
	|ПОМЕСТИТЬ ТараПоРаспоряжениям
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТараПоРаспоряжениям
	|ГДЕ
	|	ТараПоРаспоряжениям.Ссылка В
	|			(ВЫБРАТЬ
	|				Распоряжения.Ссылка
	|			ИЗ
	|				Распоряжения)
	|	И ТараПоРаспоряжениям.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТараПоРаспоряжениям.Номенклатура,
	|	ТараПоРаспоряжениям.Характеристика,
	|	ТараПоРаспоряжениям.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТараПоРаспоряжениям.Ссылка,
	|	ТараПоРаспоряжениям.Номенклатура,
	|	ТараПоРаспоряжениям.Характеристика,
	|	СУММА(ТараПоРаспоряжениям.Количество)
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров.ОтгружаемыеТовары КАК ТараПоРаспоряжениям
	|ГДЕ
	|	ТараПоРаспоряжениям.Ссылка В
	|			(ВЫБРАТЬ
	|				Распоряжения.Ссылка
	|			ИЗ
	|				Распоряжения)
	|	И ТараПоРаспоряжениям.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТараПоРаспоряжениям.Номенклатура,
	|	ТараПоРаспоряжениям.Характеристика,
	|	ТараПоРаспоряжениям.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Серия,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ВложенныйЗапрос.Распоряжение
	|ПОМЕСТИТЬ ТоварыСРасхождениямиПоУпаковкам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОтбор.Номенклатура КАК Номенклатура,
	|		ТоварыОтбор.Характеристика КАК Характеристика,
	|		ТоварыОтбор.Назначение КАК Назначение,
	|		ТоварыОтбор.Упаковка КАК Упаковка,
	|		ТоварыОтбор.Серия КАК Серия,
	|		ТоварыОтбор.КоличествоОтобрано КАК Количество,
	|		ТоварыОтбор.КоличествоУпаковокОтобрано КАК КоличествоУпаковок,
	|		ТоварыОтбор.Ссылка.Распоряжение КАК Распоряжение
	|	ИЗ
	|		Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ТоварыОтбор
	|	ГДЕ
	|		ТоварыОтбор.Ссылка.Проведен
	|		И ТоварыОтбор.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Отбор)
	|		И ТоварыОтбор.Ссылка.Распоряжение В
	|				(ВЫБРАТЬ
	|					Распоряжения.Ссылка
	|				ИЗ
	|					Распоряжения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзлишкиНедостачи.Номенклатура,
	|		ИзлишкиНедостачи.Характеристика,
	|		ИзлишкиНедостачи.Назначение,
	|		ИзлишкиНедостачи.Упаковка,
	|		ИзлишкиНедостачи.Серия,
	|		ВЫБОР
	|			КОГДА ИзлишкиНедостачи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу)
	|				ТОГДА -ИзлишкиНедостачи.Количество
	|			ИНАЧЕ ИзлишкиНедостачи.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИзлишкиНедостачи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу)
	|				ТОГДА -ИзлишкиНедостачи.КоличествоУпаковок
	|			ИНАЧЕ ИзлишкиНедостачи.КоличествоУпаковок
	|		КОНЕЦ,
	|		ИзлишкиНедостачи.Ссылка.Ордер
	|	ИЗ
	|		Документ.КорректировкаПоОрдеруНаТовары.Товары КАК ИзлишкиНедостачи
	|	ГДЕ
	|		ИзлишкиНедостачи.Ссылка.Проведен
	|		И ИзлишкиНедостачи.Ссылка.Ордер В
	|				(ВЫБРАТЬ
	|					Распоряжения.Ссылка
	|				ИЗ
	|					Распоряжения)
	|		И (ИзлишкиНедостачи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу)
	|				ИЛИ ИзлишкиНедостачи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишек))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзлишкиНедостачи.Номенклатура,
	|		ИзлишкиНедостачи.Характеристика,
	|		ИзлишкиНедостачи.Назначение,
	|		ИзлишкиНедостачи.Упаковка,
	|		ИзлишкиНедостачи.Серия,
	|		-ИзлишкиНедостачи.Количество,
	|		-ИзлишкиНедостачи.КоличествоУпаковок,
	|		ИзлишкиНедостачи.Ссылка.Ордер
	|	ИЗ
	|		Документ.КорректировкаПоОрдеруНаТовары.Товары КАК ИзлишкиНедостачи
	|	ГДЕ
	|		ИзлишкиНедостачи.Ссылка.Проведен
	|		И ИзлишкиНедостачи.Ссылка.Ордер В
	|				(ВЫБРАТЬ
	|					Распоряжения.Ссылка
	|				ИЗ
	|					Распоряжения)
	|		И ИзлишкиНедостачи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ПеренестиВДругойОрдер)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзлишкиНедостачи.Номенклатура,
	|		ИзлишкиНедостачи.Характеристика,
	|		ИзлишкиНедостачи.Назначение,
	|		ИзлишкиНедостачи.Упаковка,
	|		ИзлишкиНедостачи.Серия,
	|		ИзлишкиНедостачи.Количество,
	|		ИзлишкиНедостачи.КоличествоУпаковок,
	|		ИзлишкиНедостачи.Ссылка.ОрдерПолучатель
	|	ИЗ
	|		Документ.КорректировкаПоОрдеруНаТовары.Товары КАК ИзлишкиНедостачи
	|	ГДЕ
	|		ИзлишкиНедостачи.Ссылка.Проведен
	|		И ИзлишкиНедостачи.Ссылка.ОрдерПолучатель В
	|				(ВЫБРАТЬ
	|					Распоряжения.Ссылка
	|				ИЗ
	|					Распоряжения)
	|		И ИзлишкиНедостачи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ПеренестиВДругойОрдер)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходныйОрдерТовары.Номенклатура,
	|		РасходныйОрдерТовары.Характеристика,
	|		РасходныйОрдерТовары.Назначение,
	|		РасходныйОрдерТовары.Упаковка,
	|		ВЫБОР
	|			КОГДА РасходныйОрдерТовары.СтатусУказанияСерий В (1, 2)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИНАЧЕ РасходныйОрдерТовары.Серия
	|		КОНЕЦ,
	|		-РасходныйОрдерТовары.Количество,
	|		-РасходныйОрдерТовары.КоличествоУпаковок,
	|		РасходныйОрдерТовары.Ссылка
	|	ИЗ
	|		Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерТовары
	|	ГДЕ
	|		РасходныйОрдерТовары.Ссылка В
	|				(ВЫБРАТЬ
	|					Распоряжения.Ссылка
	|				ИЗ
	|					Распоряжения)
	|		И РасходныйОрдерТовары.Действие В (ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать))
	|		И НЕ РасходныйОрдерТовары.ЭтоУпаковочныйЛист
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОрдерНаПеремещениеТовары.Номенклатура,
	|		ОрдерНаПеремещениеТовары.Характеристика,
	|		ОрдерНаПеремещениеТовары.Назначение,
	|		ОрдерНаПеремещениеТовары.Упаковка,
	|		ВЫБОР
	|			КОГДА ОрдерНаПеремещениеТовары.СтатусУказанияСерий В (1, 2)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИНАЧЕ ОрдерНаПеремещениеТовары.Серия
	|		КОНЕЦ,
	|		-ОрдерНаПеремещениеТовары.Количество,
	|		-ОрдерНаПеремещениеТовары.КоличествоУпаковок,
	|		ОрдерНаПеремещениеТовары.Ссылка
	|	ИЗ
	|		Документ.ОрдерНаПеремещениеТоваров.ОтгружаемыеТовары КАК ОрдерНаПеремещениеТовары
	|	ГДЕ
	|		ОрдерНаПеремещениеТовары.Ссылка В
	|				(ВЫБРАТЬ
	|					Распоряжения.Ссылка
	|				ИЗ
	|					Распоряжения)
	|		И ОрдерНаПеремещениеТовары.Действие В (ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать))) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Распоряжение,
	|	ВложенныйЗапрос.Номенклатура.ТипНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасхожденияПоУпаковкам.Номенклатура,
	|	РасхожденияПоУпаковкам.Характеристика,
	|	РасхожденияПоУпаковкам.Назначение,
	|	РасхожденияПоУпаковкам.Серия,
	|	РасхожденияПоУпаковкам.Распоряжение,
	|	СУММА(РасхожденияПоУпаковкам.Количество) КАК Количество
	|ПОМЕСТИТЬ СторноРасхожденийПоУпаковкам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыЕстьВОтборе.Номенклатура КАК Номенклатура,
	|		ТоварыЕстьВОтборе.Характеристика КАК Характеристика,
	|		ТоварыЕстьВОтборе.Назначение КАК Назначение,
	|		ТоварыЕстьВОтборе.Серия КАК Серия,
	|		ТоварыЕстьВОтборе.Количество КАК Количество,
	|		ТоварыЕстьВОтборе.Распоряжение КАК Распоряжение
	|	ИЗ
	|		ТоварыСРасхождениямиПоУпаковкам КАК ТоварыЕстьВОтборе
	|	ГДЕ
	|		ТоварыЕстьВОтборе.Количество > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоваровНетВОтборе.Номенклатура,
	|		ТоваровНетВОтборе.Характеристика,
	|		ТоваровНетВОтборе.Назначение,
	|		ТоваровНетВОтборе.Серия,
	|		ТоваровНетВОтборе.Количество,
	|		ТоваровНетВОтборе.Распоряжение
	|	ИЗ
	|		ТоварыСРасхождениямиПоУпаковкам КАК ТоваровНетВОтборе
	|	ГДЕ
	|		ТоваровНетВОтборе.Количество < 0) КАК РасхожденияПоУпаковкам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасхожденияПоУпаковкам.Назначение,
	|	РасхожденияПоУпаковкам.Распоряжение,
	|	РасхожденияПоУпаковкам.Номенклатура,
	|	РасхожденияПоУпаковкам.Характеристика,
	|	РасхожденияПоУпаковкам.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасхожденияПоУпаковкам.Количество) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСРасхождениямиПоУпаковкам.Номенклатура,
	|	ТоварыСРасхождениямиПоУпаковкам.ТипНоменклатуры,
	|	ТоварыСРасхождениямиПоУпаковкам.Характеристика,
	|	ТоварыСРасхождениямиПоУпаковкам.Назначение,
	|	ТоварыСРасхождениямиПоУпаковкам.Упаковка,
	|	ТоварыСРасхождениямиПоУпаковкам.Серия,
	|	ТоварыСРасхождениямиПоУпаковкам.Количество,
	|	ТоварыСРасхождениямиПоУпаковкам.КоличествоУпаковок,
	|	ТоварыСРасхождениямиПоУпаковкам.Распоряжение
	|ПОМЕСТИТЬ РезультатОтбора
	|ИЗ
	|	ТоварыСРасхождениямиПоУпаковкам КАК ТоварыСРасхождениямиПоУпаковкам
	|		ЛЕВОЕ СОЕДИНЕНИЕ СторноРасхожденийПоУпаковкам КАК СторноРасхожденийПоУпаковкам
	|		ПО ТоварыСРасхождениямиПоУпаковкам.Номенклатура = СторноРасхожденийПоУпаковкам.Номенклатура
	|			И ТоварыСРасхождениямиПоУпаковкам.Характеристика = СторноРасхожденийПоУпаковкам.Характеристика
	|			И ТоварыСРасхождениямиПоУпаковкам.Назначение = СторноРасхожденийПоУпаковкам.Назначение
	|			И ТоварыСРасхождениямиПоУпаковкам.Серия = СторноРасхожденийПоУпаковкам.Серия
	|			И ТоварыСРасхождениямиПоУпаковкам.Распоряжение = СторноРасхожденийПоУпаковкам.Распоряжение
	|ГДЕ
	|	СторноРасхожденийПоУпаковкам.Номенклатура ЕСТЬ NULL 
	|	И ТоварыСРасхождениямиПоУпаковкам.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатОтбора.Номенклатура,
	|	РезультатОтбора.ТипНоменклатуры,
	|	РезультатОтбора.Характеристика,
	|	РезультатОтбора.Назначение,
	|	РезультатОтбора.Упаковка,
	|	РезультатОтбора.Серия,
	|	ЕСТЬNULL(ТараПоРаспоряжениям.Количество, 0) КАК КоличествоТарыВРаспоряжении,
	|	РезультатОтбора.Количество,
	|	РезультатОтбора.КоличествоУпаковок,
	|	РезультатОтбора.Распоряжение КАК Распоряжение
	|ИЗ
	|	РезультатОтбора КАК РезультатОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТараПоРаспоряжениям КАК ТараПоРаспоряжениям
	|		ПО РезультатОтбора.Номенклатура = ТараПоРаспоряжениям.Номенклатура
	|			И РезультатОтбора.Характеристика = ТараПоРаспоряжениям.Характеристика
	|			И РезультатОтбора.Распоряжение = ТараПоРаспоряжениям.РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РезультатОтбора.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО РезультатОтбора.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО РезультатОтбора.Назначение = Назначения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО РезультатОтбора.Упаковка = УпаковкиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО РезультатОтбора.Серия = СерииНоменклатуры.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Распоряжение,
	|	СправочникНоменклатура.ТипНоменклатуры.Порядок,
	|	СправочникНоменклатура.Наименование,
	|	ХарактеристикиНоменклатуры.Наименование,
	|	Назначения.Наименование,
	|	&ТекстЗапросаКоэффициентУпаковки УБЫВ,
	|	СерииНоменклатуры.ГоденДо,
	|	СерииНоменклатуры.Номер";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", Неопределено));
		
	Запрос.УстановитьПараметр("МассивДокументов", ПараметрыЗаполнения.МассивДокументов);
	Запрос.УстановитьПараметр("ИзменениеСтатуса", ПараметрыЗаполнения.ИзменениеСтатуса);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОшибок = РезультатыЗапроса[1].Выбрать();
	
	Пока ВыборкаОшибок.Следующий() Цикл
		
		Если ПараметрыЗаполнения.ИзменениеСтатуса Тогда
			Если ВыборкаОшибок.ЕстьНевыполненныеЗадания Тогда
				ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" есть невыполненные задания на отбор, поэтому его нельзя перевести в статус ""%Статус%""'");
			ИначеЕсли ВыборкаОшибок.НетОтобранных Тогда
				ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" нет отобранных товаров, поэтому его нельзя перевести в статус ""%Статус%""'");
			Иначе
				// Если просто изменение статуса, то нельзя уменьшать количество в ордере			
				ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" отобраны не все товары, поэтому его нельзя перевести в статус ""%Статус%""'");
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыЗаполнения.СтатусДокумента) = Тип("Строка") Тогда
				Если ТипЗнч(ВыборкаОшибок.Распоряжение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Перечисления.СтатусыРасходныхОрдеров[ПараметрыЗаполнения.СтатусДокумента]);
				Иначе
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Перечисления.СтатусыОрдеровНаПеремещение[ПараметрыЗаполнения.СтатусДокумента]);
				КонецЕсли;
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",ПараметрыЗаполнения.СтатусДокумента);
			КонецЕсли;	
			
		Иначе
			Если ВыборкаОшибок.НетОтобранных Тогда
				ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" нет отобранных товаров, поэтому документ нельзя перезаполнить отобранными товарами.'");
			Иначе
				ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" есть невыполненные задания на отбор, поэтому документ нельзя перезаполнить отобранными товарами.'");
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжение%",ВыборкаОшибок.Распоряжение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ПараметрыЗаполнения.МассивДокументов.Удалить(ПараметрыЗаполнения.МассивДокументов.Найти(ВыборкаОшибок.Распоряжение));
		
	КонецЦикла;
	
	Если ПараметрыЗаполнения.МассивДокументов.Количество() = 0 Тогда
		Возврат МассивИзмененныхДокументов;
	КонецЕсли;

	ВыборкаРезультатов = РезультатыЗапроса[7].Выбрать();
	
	ОбрабатываемыйОбъект = Неопределено;
	
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		Если ОбрабатываемыйОбъект = Неопределено
			Или ОбрабатываемыйОбъект.Ссылка <> ВыборкаРезультатов.Распоряжение Тогда
			
			Если ОбрабатываемыйОбъект <> Неопределено Тогда
				
				ЗавершитьПерезаполнениеОтобраннымиТоварами(ОбрабатываемыйОбъект,
																	ПараметрыЗаполнения,
																	МассивИзмененныхДокументов);
				ОбрабатываемыйОбъект = Неопределено;
				
			КонецЕсли;	
			
			Если ПараметрыЗаполнения.РежимЗаполнения = "Множественное" Тогда	
				
				Попытка
					ОбрабатываемыйОбъект = ВыборкаРезультатов.Распоряжение.ПолучитьОбъект();
					ОбрабатываемыйОбъект.Заблокировать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
				
			Иначе
				
				ОбрабатываемыйОбъект = ПараметрыЗаполнения.ДокументОбъект;
				
			КонецЕсли;
			
			УдаляемыеСтроки = ОбрабатываемыйОбъект.ОтгружаемыеТовары.НайтиСтроки(Новый Структура("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать));
			
			Для Каждого СтрМас из УдаляемыеСтроки Цикл
				ОбрабатываемыйОбъект.ОтгружаемыеТовары.Удалить(СтрМас);
			КонецЦикла;
			
		КонецЕсли;		
		
		СтрокаТоваров = ОбрабатываемыйОбъект.ОтгружаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, ВыборкаРезультатов); 
		СтрокаТоваров.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		
		//Отобрано больше, чем было в ордере (это может быть, когда товар хранится в таре, но тары нет в распоряжении, т.е. тару не отгружаем)
		//В этом случае на количество превышения добавляем неотгружаемую строку.
		//По таре в заданиях серии указаны быть не могут, учет упаковок по таре не ведется.
		Если ВыборкаРезультатов.Количество > ВыборкаРезультатов.КоличествоТарыВРаспоряжении
			И ВыборкаРезультатов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			
			КоличествоНеотгружать = ВыборкаРезультатов.Количество - ВыборкаРезультатов.КоличествоТарыВРаспоряжении;
			
			СтрокаТоваров.Количество         = КоличествоНеотгружать;
			СтрокаТоваров.КоличествоУпаковок = КоличествоНеотгружать;
			Если ТипЗнч(ОбрабатываемыйОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				//Правило действует только для расходного ордера - в ордером на перещение нужно перемещать всю тару
				СтрокаТоваров.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;
			Иначе
				СтрокаТоваров.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
			КонецЕсли;
			
			Если КоличествоНеотгружать <>  ВыборкаРезультатов.Количество  Тогда
				СтрокаТоваров = ОбрабатываемыйОбъект.ОтгружаемыеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваров, ВыборкаРезультатов); 
				СтрокаТоваров.Количество         = ВыборкаРезультатов.Количество - КоличествоНеотгружать;
				СтрокаТоваров.КоличествоУпаковок = ВыборкаРезультатов.Количество - КоличествоНеотгружать;
				СтрокаТоваров.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
			
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбрабатываемыйОбъект <> Неопределено Тогда
		ЗавершитьПерезаполнениеОтобраннымиТоварами(ОбрабатываемыйОбъект, ПараметрыЗаполнения, МассивИзмененныхДокументов);
		Модифицированность = Истина;
	КонецЕсли;
		
	Возврат МассивИзмененныхДокументов;
	
КонецФункции

//Возвращает помещение на котором имется самый большой остаток
//	
//	Параметры:
//		Параметры - Структура - структура, по которой осуществляется поиск помещений:
//			* Номенклатура - СправочникСсылка.Номенклатура
//			* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//			* Склад - СправочникСсылка.Склады
//	Возвращаемое значение:
//		СправочникСсылка.СкладскиеПомещения - помещение на котором имется самый большой остаток
//
Функция ПомещениеДляНоменклатуры(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
	|	ТоварыНаСкладахОстатки.КОтгрузкеОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВНаличииОстаток УБЫВ");
	
	Запрос.УстановитьПараметр("Номенклатура", Параметры.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Параметры.Характеристика);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Помещение;
	Иначе
		Возврат Справочники.СкладскиеПомещения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РасчетСостоянийДокументов

//Процедура рассчитывает состояния распоряжений на отбор.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад;
//	Помещение - СправочникСсылка.СкладскиеПомещения - складское помещение;
//	РаспоряженияНаОтбор - ТаблицаЗначений - таблица значений, в которую помещяются результаты рассчета состояний
//		Колонки:
//			Распоряжение - ДокументСсылка - документ-распоряжение;
//			ДатаОтгрузки - Дата - дата отгрузки;
//			Приоритет - СправочникСсылка.Приоритеты - приоритет на производство;
//			ТипДокумента - Тип - тип документа;
//			Номер - Строка - номер документа;
//			ЗонаОтгрузки - СправочникСсылка.СкладскиеЯчейки - зона отгрузки;
//			Комментарий - Строка - комментарий;
//			Состояние - ПеречислениеСсылка.СостоянияРаспоряженийНаОтборТоваров - состояние распоряжения на отбор;
//			ИндексКартинки - Число - индекс картинки строк из коллекции картинок ПодчиненныйЭлементГруппа.
//	ОтображениеДеталей - Булево - признак, что сейчас отображается список расходных ордеров по заданию на перевозку
//	ЗаданиеНаПеревозку - ДокументСсылка.ЗаданияНаПеревозку - задание на перевозку, по которому сейчас отображаются расходные ордера
//		этот документ добавляется в самое начало таблицы РаспоряженияНаОтбор
//	СостояниеОтбора - Строка - состояние распоряжения на отбор товаров.
//
Процедура РассчитатьСостоянийРаспоряженийНаОтбор(Склад, Помещение, РаспоряженияНаОтбор, ОтображениеДеталей, ЗаданиеНаПеревозку, СостояниеОтбора) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И РасходныйОрдерНаТовары.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку
	|		ИНАЧЕ РасходныйОрдерНаТовары.Ссылка
	|	КОНЕЦ КАК Распоряжение,
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И РасходныйОрдерНаТовары.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.ДатаВремяРейсаПланС
	|		ИНАЧЕ РасходныйОрдерНаТовары.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И РасходныйОрдерНаТовары.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Приоритет.РеквизитДопУпорядочивания
	|		ИНАЧЕ РасходныйОрдерНаТовары.Приоритет.РеквизитДопУпорядочивания
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И РасходныйОрдерНаТовары.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Приоритет
	|		ИНАЧЕ РасходныйОрдерНаТовары.Приоритет
	|	КОНЕЦ КАК ПриоритетСсылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И РасходныйОрдерНаТовары.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Номер
	|		ИНАЧЕ РасходныйОрдерНаТовары.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И РасходныйОрдерНаТовары.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	|		ИНАЧЕ РасходныйОрдерНаТовары.ЗонаОтгрузки
	|	КОНЕЦ КАК ЗонаОтгрузки,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И РасходныйОрдерНаТовары.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.ДополнительнаяИнформация КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходныйОрдерНаТовары.Комментарий КАК СТРОКА(100))
	|	КОНЕЦ КАК Комментарий
	|ПОМЕСТИТЬ РаспоряженияНаОтбор
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	(НЕ &ОтображениеДеталей
	|			ИЛИ РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
	|	И РасходныйОрдерНаТовары.Склад = &Склад
	|	И РасходныйОрдерНаТовары.Помещение = &Помещение
	|	И РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КОтбору)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка,
	|	ОрдерНаПеремещениеТоваров.Ссылка,
	|	ОрдерНаПеремещениеТоваров.ДатаОтгрузки,
	|	ОрдерНаПеремещениеТоваров.Приоритет.РеквизитДопУпорядочивания,
	|	ОрдерНаПеремещениеТоваров.Приоритет,
	|	ОрдерНаПеремещениеТоваров.Номер,
	|	ОрдерНаПеремещениеТоваров.ЗонаОтгрузки,
	|	ВЫРАЗИТЬ(ОрдерНаПеремещениеТоваров.Комментарий КАК СТРОКА(100))
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	НЕ &ОтображениеДеталей
	|	И ОрдерНаПеремещениеТоваров.Склад = &Склад
	|	И ОрдерНаПеремещениеТоваров.ПомещениеОтправитель = &Помещение
	|	И ОрдерНаПеремещениеТоваров.Проведен
	|	И ОрдерНаПеремещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрдеровНаПеремещение.КОтбору)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РаспоряженияНаОтбор.Распоряжение КАК Распоряжение,
	|	ЛОЖЬ КАК ОтобраноИзРасходныхОрдеров
	|ПОМЕСТИТЬ ВтРаспоряженийНесгруппированная
	|ИЗ
	|	РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|ГДЕ
	|	НЕ РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка,
	|	ИСТИНА КАК ОтобраноИзРасходныхОрдеров
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|		ПО РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = РаспоряженияНаОтбор.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТРаспоряжения.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ВтРаспоряжений
	|ИЗ
	|	ВтРаспоряженийНесгруппированная КАК ВТРаспоряжения
	|СГРУППИРОВАТЬ ПО
	|	ВТРаспоряжения.Распоряжение
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТРаспоряжения.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ВтРаспоряженийТоварыВЗаданиях
	|ИЗ
	|	ВтРаспоряженийНесгруппированная КАК ВТРаспоряжения
	|ГДЕ
	|	НЕ ВТРаспоряжения.ОтобраноИзРасходныхОрдеров
	|	ИЛИ (ВТРаспоряжения.ОтобраноИзРасходныхОрдеров
	|			И НЕ &ОтображениеДеталей)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРаспоряжения.Распоряжение
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВтРаспоряженийНесгруппированная
	|";
	
	Запрос.Текст = Запрос.Текст + 
	";
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"ВЫБРАТЬ
		|	ТоварыКОтборуОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтборуОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтборуОбороты.Назначение КАК Назначение,
		|	ТоварыКОтборуОбороты.Серия КАК Серия,
		|	ВЫБОР
		|		КОГДА НЕ &ОтображениеДеталей
		|				И ТоварыКОтборуОбороты.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
		|				И ВЫРАЗИТЬ(ТоварыКОтборуОбороты.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ОтгрузкаПоЗаданиюНаПеревозку
		|				И ВЫРАЗИТЬ(ТоварыКОтборуОбороты.Распоряжение КАК Документ.РасходныйОрдерНаТовары).Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтборуОбороты.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку
		|		ИНАЧЕ ТоварыКОтборуОбороты.Распоряжение
		|	КОНЕЦ КАК Распоряжение,
		|	ТоварыКОтборуОбороты.ТоварноеМесто КАК ТоварноеМесто,
		|	ТоварыКОтборуОбороты.КОтборуПриход КАК Количество
		|ПОМЕСТИТЬ ТоварыКОтборуОборотыБезТоварныхМест
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Обороты(
		|			,
		|			,
		|			,
		|			Распоряжение В
		|				(ВЫБРАТЬ
		|					ВтРаспоряжений.Распоряжение
		|				ИЗ
		|					ВтРаспоряжений КАК ВтРаспоряжений)) КАК ТоварыКОтборуОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтборуОборотыБезТоварныхМест.Номенклатура КАК Номенклатура,
		|	ТоварыКОтборуОборотыБезТоварныхМест.Характеристика КАК Характеристика,
		|	ТоварыКОтборуОборотыБезТоварныхМест.Назначение КАК Назначение,
		|	ТоварыКОтборуОборотыБезТоварныхМест.Серия КАК Серия,
		|	ТоварыКОтборуОборотыБезТоварныхМест.Распоряжение КАК Распоряжение,
		|	ТоварыКОтборуОборотыБезТоварныхМест.Количество * ЕСТЬNULL(УпаковкиЕдиницыИзмерения.КоличествоУпаковок, 1) КАК Количество,
		|	ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ТоварноеМесто
		|ПОМЕСТИТЬ ТоварыКОтборуОбороты
		|ИЗ
		|	ТоварыКОтборуОборотыБезТоварныхМест КАК ТоварыКОтборуОборотыБезТоварныхМест
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО (ВЫБОР
		|				КОГДА ТоварыКОтборуОборотыБезТоварныхМест.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|					ТОГДА УпаковкиЕдиницыИзмерения.Владелец = ТоварыКОтборуОборотыБезТоварныхМест.Номенклатура
		|				КОГДА ТоварыКОтборуОборотыБезТоварныхМест.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
		|					ТОГДА УпаковкиЕдиницыИзмерения.Владелец = ТоварыКОтборуОборотыБезТоварныхМест.Номенклатура.НаборУпаковок
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|			И (УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто))
		|			И (ТоварыКОтборуОборотыБезТоварныхМест.ТоварноеМесто = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))";
		
		Запрос.Текст = Запрос.Текст + ";";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ &ОтображениеДеталей
	|				И ТоварыКОтборуОстатки.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
	|				И ВЫРАЗИТЬ(ТоварыКОтборуОстатки.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ОтгрузкаПоЗаданиюНаПеревозку
	|				И ВЫРАЗИТЬ(ТоварыКОтборуОстатки.Распоряжение КАК Документ.РасходныйОрдерНаТовары).Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтборуОстатки.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку
	|		ИНАЧЕ ТоварыКОтборуОстатки.Распоряжение
	|	КОНЕЦ КАК Распоряжение,
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Назначение,
	|	ТоварыКОтборуОстатки.Серия,
	|	ТоварыКОтборуОстатки.ТоварноеМесто,
	|	ТоварыКОтборуОстатки.КОтборуОстаток КАК КОтборуОстаток,
	|	ТоварыКОтборуОстатки.ОтбираетсяОстаток КАК ОтбираетсяОстаток,
	|	ТоварыКОтборуОстатки.ОтобраноОстаток КАК ОтобраноОстаток
	|ПОМЕСТИТЬ ТоварыКОтборуОстаткиБезТоварныхМест
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Остатки(
	|			,
	|			Распоряжение В
	|				(ВЫБРАТЬ
	|					ВтРаспоряжений.Распоряжение
	|				ИЗ
	|					ВтРаспоряжений КАК ВтРаспоряжений)) КАК ТоварыКОтборуОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Распоряжение,
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Назначение,
	|	ТоварыКОтборуОстатки.Серия,
	|	ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Ссылка, ТоварыКОтборуОстатки.ТоварноеМесто) КАК ТоварноеМесто,
	|	СУММА(ТоварыКОтборуОстатки.КОтборуОстаток * ЕСТЬNULL(УпаковкиЕдиницыИзмерения.КоличествоУпаковок, 1)) КАК КОтборуОстаток,
	|	СУММА(ТоварыКОтборуОстатки.ОтбираетсяОстаток * ЕСТЬNULL(УпаковкиЕдиницыИзмерения.КоличествоУпаковок, 1)) КАК ОтбираетсяОстаток,
	|	СУММА(ТоварыКОтборуОстатки.ОтобраноОстаток * ЕСТЬNULL(УпаковкиЕдиницыИзмерения.КоличествоУпаковок, 1)) КАК ОтобраноОстаток
	|ПОМЕСТИТЬ ТоварыКОтборуОстатки
	|ИЗ
	|	ТоварыКОтборуОстаткиБезТоварныхМест КАК ТоварыКОтборуОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (ВЫБОР
	|				КОГДА ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА УпаковкиЕдиницыИзмерения.Владелец = ТоварыКОтборуОстатки.Номенклатура
	|				КОГДА ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА УпаковкиЕдиницыИзмерения.Владелец = ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто))
	|			И (ТоварыКОтборуОстатки.ТоварноеМесто = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтборуОстатки.Серия,
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Назначение,
	|	ТоварыКОтборуОстатки.Распоряжение,
	|	ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Ссылка, ТоварыКОтборуОстатки.ТоварноеМесто)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
	|	ОтборРазмещениеТоваровТоварыОтбор.Характеристика,
	|	ОтборРазмещениеТоваровТоварыОтбор.Назначение,
	|	ВЫБОР
	|		КОГДА ОтборРазмещениеТоваровТоварыОтбор.СтатусУказанияСерий В (6, 8, 10, 14)
	|			ТОГДА ОтборРазмещениеТоваровТоварыОтбор.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОтборРазмещениеТоваровТоварыОтбор.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|				ТОГДА ОтборРазмещениеТоваровТоварыОтбор.КоличествоУпаковок
	|			ИНАЧЕ ОтборРазмещениеТоваровТоварыОтбор.Количество
	|		КОНЕЦ) КАК КоличествоПлан,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОтборРазмещениеТоваровТоварыОтбор.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|				ТОГДА ОтборРазмещениеТоваровТоварыОтбор.КоличествоУпаковокОтобрано
	|			ИНАЧЕ ОтборРазмещениеТоваровТоварыОтбор.КоличествоОтобрано
	|		КОНЕЦ) КАК КоличествоОтобрано,
	|	ВЫБОР
	|		КОГДА НЕ &ОтображениеДеталей
	|				И ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
	|				И ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ОтгрузкаПоЗаданиюНаПеревозку
	|				И ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку
	|		ИНАЧЕ ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение
	|	КОНЕЦ КАК Распоряжение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтборРазмещениеТоваровТоварыОтбор.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|			ТОГДА ОтборРазмещениеТоваровТоварыОтбор.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварноеМесто
	|ПОМЕСТИТЬ ТоварыВЗаданиях
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРаспоряженийТоварыВЗаданиях КАК ВтРаспоряжений
	|		ПО ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение = ВтРаспоряжений.Распоряжение
	|
	|ГДЕ
	|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборРазмещениеТоваровТоварыОтбор.Характеристика,
	|	ВЫБОР
	|		КОГДА ОтборРазмещениеТоваровТоварыОтбор.СтатусУказанияСерий В (6, 8, 10, 14)
	|			ТОГДА ОтборРазмещениеТоваровТоварыОтбор.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
	|	ОтборРазмещениеТоваровТоварыОтбор.Назначение,
	|	ВЫБОР
	|		КОГДА НЕ &ОтображениеДеталей
	|				И ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
	|				И ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ОтгрузкаПоЗаданиюНаПеревозку
	|				И ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	|			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку
	|		ИНАЧЕ ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтборРазмещениеТоваровТоварыОтбор.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|			ТОГДА ОтборРазмещениеТоваровТоварыОтбор.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	ТоварноеМесто
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Распоряжение,
	|	ТоварыКОтборуОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Назначение,
	|	ТоварыКОтборуОстатки.Серия,
	|	ТоварыКОтборуОстатки.ТоварноеМесто,
	|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток КАК Количество,
	|	ВЫБОР
	|		КОГДА &УсловиеСостояниеГотовоКПроверке
	|			ТОГДА 0
	|		КОГДА &УсловиеСостояниеВПроцессеИсполнения
	|			ТОГДА 1
	|		КОГДА ТоварыКОтборуОстатки.КОтборуОстаток <= ТоварыВЗаданиях.КоличествоПлан
	|			ТОГДА 2
	|		ИНАЧЕ 100
	|	КОНЕЦ КАК Состояние,
	|	РаспоряженияНаОтбор.ДатаОтгрузки,
	|	РаспоряженияНаОтбор.Приоритет
	|ПОМЕСТИТЬ СостоянияПоОтбираемымТоварам
	|ИЗ
	|	ТоварыКОтборуОстатки КАК ТоварыКОтборуОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЗаданиях КАК ТоварыВЗаданиях
	|		ПО ТоварыКОтборуОстатки.Распоряжение = ТоварыВЗаданиях.Распоряжение
	|			И ТоварыКОтборуОстатки.Номенклатура = ТоварыВЗаданиях.Номенклатура
	|			И ТоварыКОтборуОстатки.Характеристика = ТоварыВЗаданиях.Характеристика
	|			И ТоварыКОтборуОстатки.Назначение = ТоварыВЗаданиях.Назначение
	|			И ТоварыКОтборуОстатки.Серия = ТоварыВЗаданиях.Серия
	|			И ТоварыКОтборуОстатки.ТоварноеМесто = ТоварыВЗаданиях.ТоварноеМесто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|		ПО ТоварыКОтборуОстатки.Распоряжение = РаспоряженияНаОтбор.Распоряжение
	|ГДЕ &УсловиеТоварыКОтбору
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияПоТоварам.Распоряжение                КАК Распоряжение,
	|	СостоянияПоТоварам.Номенклатура                КАК Номенклатура,
	|	СостоянияПоТоварам.Характеристика              КАК Характеристика,
	|	СостоянияПоТоварам.Назначение                  КАК Назначение,
	|	СостоянияПоТоварам.Серия                       КАК Серия,
	|	СУММА(СостоянияПоТоварам.Количество)           КАК Количество,
	|	СостоянияПоТоварам.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	СостоянияПоТоварам.ДатаОтгрузки                КАК ДатаОтгрузки,
	|	СостоянияПоТоварам.Приоритет                   КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостоянияПоТоварам.Распоряжение                 КАК Распоряжение,
	|		СостоянияПоТоварам.Номенклатура                 КАК Номенклатура,
	|		СостоянияПоТоварам.Характеристика               КАК Характеристика,
	|		СостоянияПоТоварам.Назначение                   КАК Назначение,
	|		СостоянияПоТоварам.Серия                        КАК Серия,
	|		СостоянияПоТоварам.Количество                   КАК Количество,
	|		СостоянияПоТоварам.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|		СостоянияПоТоварам.ДатаОтгрузки                 КАК ДатаОтгрузки,
	|		СостоянияПоТоварам.Приоритет                    КАК Приоритет
	|	ИЗ
	|		СостоянияПоОтбираемымТоварам КАК СостоянияПоТоварам
	|	ГДЕ
	|		СостоянияПоТоварам.Состояние = 100
	|		И СостоянияПоТоварам.ТоварноеМесто = Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СостоянияПоТоварам.Распоряжение                 КАК Распоряжение,
	|		СостоянияПоТоварам.Номенклатура                 КАК Номенклатура,
	|		СостоянияПоТоварам.Характеристика               КАК Характеристика,
	|		СостоянияПоТоварам.Назначение                   КАК Назначение,
	|		СостоянияПоТоварам.Серия                        КАК Серия,
	|		МИНИМУМ(
	|			ВЫБОР
	|				КОГДА СостоянияПоТоварам.Количество / Упаковки.КоличествоУпаковок -
	|						ВЫРАЗИТЬ(СостоянияПоТоварам.Количество / Упаковки.КоличествоУпаковок КАК ЧИСЛО(12, 0)) >= 0
	|					ТОГДА ВЫРАЗИТЬ(СостоянияПоТоварам.Количество / Упаковки.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|				ИНАЧЕ
	|					ВЫРАЗИТЬ(СостоянияПоТоварам.Количество / Упаковки.КоличествоУпаковок КАК ЧИСЛО(12, 0)) - 1
	|			КОНЕЦ)                                      КАК Количество,
	|		СостоянияПоТоварам.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|		СостоянияПоТоварам.ДатаОтгрузки                 КАК ДатаОтгрузки,
	|		СостоянияПоТоварам.Приоритет                    КАК Приоритет
	|	ИЗ
	|		СостоянияПоОтбираемымТоварам КАК СостоянияПоТоварам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|			ПО СостоянияПоТоварам.ТоварноеМесто = Упаковки.Ссылка
	|	ГДЕ
	|		СостоянияПоТоварам.Состояние = 100
	|		И СостоянияПоТоварам.ТоварноеМесто <> Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостоянияПоТоварам.Распоряжение,
	|		СостоянияПоТоварам.Номенклатура,
	|		СостоянияПоТоварам.Характеристика,
	|		СостоянияПоТоварам.Назначение,
	|		СостоянияПоТоварам.Серия,
	|		СостоянияПоТоварам.ДатаОтгрузки,
	|		СостоянияПоТоварам.Приоритет) КАК СостоянияПоТоварам
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияПоТоварам.Распоряжение,
	|	СостоянияПоТоварам.Номенклатура,
	|	СостоянияПоТоварам.Характеристика,
	|	СостоянияПоТоварам.Назначение,
	|	СостоянияПоТоварам.Серия,
	|	СостоянияПоТоварам.СкладскаяГруппаНоменклатуры,
	|	СостоянияПоТоварам.ДатаОтгрузки,
	|	СостоянияПоТоварам.Приоритет";
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
		
		УсловиеТоварыКОтбору = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКОтборуОбороты КАК ТоварыКОтборуОбороты
		|		ПО ТоварыКОтборуОстатки.Распоряжение = ТоварыКОтборуОбороты.Распоряжение
		|			И ТоварыКОтборуОстатки.Номенклатура = ТоварыКОтборуОбороты.Номенклатура
		|			И ТоварыКОтборуОстатки.Характеристика = ТоварыКОтборуОбороты.Характеристика
		|			И ТоварыКОтборуОстатки.Назначение = ТоварыКОтборуОбороты.Назначение
		|			И ТоварыКОтборуОстатки.Серия = ТоварыКОтборуОбороты.Серия
		|			И ТоварыКОтборуОстатки.ТоварноеМесто = ТоварыКОтборуОбороты.ТоварноеМесто";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ &УсловиеТоварыКОтбору", УсловиеТоварыКОтбору);
		Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
			ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
		Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
			Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
		
		УсловиеСостояниеГотовоКПроверке = 
			"ТоварыКОтборуОстатки.КОтборуОстаток <= ТоварыКОтборуОстатки.ОтобраноОстаток + ВЫБОР
			|			КОГДА ТоварыКОтборуОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|				ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ЕСТЬNULL(ТоварыКОтборуОбороты.Количество,0)
			|			ИНАЧЕ 0
			|		КОНЕЦ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеСостояниеГотовоКПроверке", УсловиеСостояниеГотовоКПроверке);
		
		УсловиеСостояниеВПроцессеИсполнения = 
			"ТоварыКОтборуОстатки.КОтборуОстаток <= ТоварыКОтборуОстатки.ОтобраноОстаток + ТоварыКОтборуОстатки.ОтбираетсяОстаток
			|		+ ВЫБОР
			|			КОГДА ТоварыКОтборуОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|				ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ЕСТЬNULL(ТоварыКОтборуОбороты.Количество,0)
			|			ИНАЧЕ 0
			|		КОНЕЦ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеСостояниеВПроцессеИсполнения", УсловиеСостояниеВПроцессеИсполнения);
		
	Иначе
		
		УсловиеСостояниеГотовоКПроверке = "ТоварыКОтборуОстатки.КОтборуОстаток <= ТоварыКОтборуОстатки.ОтобраноОстаток";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеСостояниеГотовоКПроверке", УсловиеСостояниеГотовоКПроверке);
		
		УсловиеСостояниеВПроцессеИсполнения = 
			"ТоварыКОтборуОстатки.КОтборуОстаток <= ТоварыКОтборуОстатки.ОтобраноОстаток + ТоварыКОтборуОстатки.ОтбираетсяОстаток";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеСостояниеВПроцессеИсполнения", УсловиеСостояниеВПроцессеИсполнения);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ &УсловиеТоварыКОтбору", "");
		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("ОтображениеДеталей", ОтображениеДеталей);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	ЕстьНеВыполненныеРаспоряжения = Результат[Результат.ВГраница()].Выгрузить()[0].Количество > 0;
	
	Если ЕстьНеВыполненныеРаспоряжения Тогда
		
		РассчитатьНехваткуУпаковокДляОтбораПоРаспоряжениям(МенеджерВременныхТаблиц, Склад, Помещение);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияПоТоварам.Распоряжение,
		|	МАКСИМУМ(СостоянияПоТоварам.Состояние) КАК Состояние
		|ПОМЕСТИТЬ СостоянияПоРаспоряжениям
		|ИЗ
		|	(ВЫБРАТЬ
		|		СостоянияПоТоварам.Распоряжение КАК Распоряжение,
		|		СостоянияПоТоварам.Состояние КАК Состояние
		|	ИЗ
		|		СостоянияПоОтбираемымТоварам КАК СостоянияПоТоварам
		|	ГДЕ
		|		СостоянияПоТоварам.Состояние <> 100
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СостоянияПоТоварам.Распоряжение,
		|		СостоянияПоТоварам.Состояние
		|	ИЗ
		|		СостоянияПоТоварамКОтбору КАК СостоянияПоТоварам) КАК СостоянияПоТоварам
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияПоТоварам.Распоряжение";
		Запрос.Выполнить();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияПоОтбираемымТоварам.Распоряжение,
		|	МАКСИМУМ(СостоянияПоОтбираемымТоварам.Состояние) КАК Состояние
		|ПОМЕСТИТЬ СостоянияПоРаспоряжениям
		|ИЗ
		|	СостоянияПоОтбираемымТоварам КАК СостоянияПоОтбираемымТоварам
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияПоОтбираемымТоварам.Распоряжение";
		
		Запрос.Выполнить();
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспоряженияНаОтбор.Распоряжение,
	|	ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(РаспоряженияНаОтбор.Распоряжение)) КАК ТипДокумента,
	|	РаспоряженияНаОтбор.ДатаОтгрузки,
	|	РаспоряженияНаОтбор.ПриоритетСсылка КАК Приоритет,
	|	РаспоряженияНаОтбор.Номер,
	|	РаспоряженияНаОтбор.ЗонаОтгрузки,
	|	РаспоряженияНаОтбор.Комментарий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ГотовоКПроверке)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ВПроцессеИсполнения)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ИсполненоСОшибками)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.КФормированиюЗаданий)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 4
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ВыполняетсяРазмещениеПодпитка)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ОжидаетсяРазмещение)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 6
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ТребуетсяПодпитка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ПустаяСсылка)
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку
	|				И &ОтображениеДеталей
	|			ТОГДА 2
	|		КОГДА РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА 1
	|		КОГДА &ОтображениеДеталей
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияПоРаспоряжениям КАК СостоянияПоРаспоряжениям
	|		ПО РаспоряженияНаОтбор.Распоряжение = СостоянияПоРаспоряжениям.Распоряжение
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 0
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ГотовоКПроверке)
	|			КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 1
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ВПроцессеИсполнения)
	|			КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 2
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ИсполненоСОшибками)
	|			КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 3
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.КФормированиюЗаданий)
	|			КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 4
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ВыполняетсяРазмещениеПодпитка)
	|			КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 5
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ОжидаетсяРазмещение)
	|			КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 6
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ТребуетсяПодпитка)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ПустаяСсылка)
	|		КОНЕЦ В (&Состояния)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(РаспоряженияНаОтбор.ДатаОтгрузки, ДЕНЬ),
	|	РаспоряженияНаОтбор.ПриоритетСсылка,
	|	РаспоряженияНаОтбор.ДатаОтгрузки";
	
	Состояния = Новый Массив;
	Если СостояниеОтбора = "" Тогда
		Для Каждого Значение Из Перечисления.СостоянияРаспоряженийНаОтборТоваров Цикл 
			Состояния.Добавить(Значение);
		КонецЦикла;
	Иначе
		Состояния.Добавить(Перечисления.СостоянияРаспоряженийНаОтборТоваров[СостояниеОтбора]);
	КонецЕсли;
	Запрос.УстановитьПараметр("Состояния", Состояния);			
	
	Запрос.УстановитьПараметр("ОтображениеДеталей", ОтображениеДеталей);
	
	РаспоряженияНаОтбор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если ОтображениеДеталей Тогда
		НоваяСтрока = РаспоряженияНаОтбор.Вставить(0);
		НоваяСтрока.ИндексКартинки = 2;
		НоваяСтрока.Распоряжение = ЗаданиеНаПеревозку;
		НоваяСтрока.ТипДокумента = Строка(ТипЗнч(ЗаданиеНаПеревозку));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеСкладскихДокументов

// Функция создает и редактирует расходные ордера для Склада и Получателя, если для них сумма 
// по ресурсам регистра движения к отгрузке не равна 0.
//
// Параметры:
//	Параметры - Структура - структура, набор параметров для создания расходных ордеров:
//		*Склад - СправочникСсылка.Склады - ссылка на склад, который указан в распоряжениях на отгрузку;
//		*Помещение - СправочникСсылка.СкладскиеПомещения - ссылка на помещение, которое указано в распоряжения на отгрузку,
//		либо пустая ссылка справочника "Складские помещения";
//		*Получатель - ОпределяемыйТип.ОтправительПолучательТоваров - адресат, кому предназначен ордер;
//		*ЗонаОтгрузки - СправочникСсылка.СкладскиеЯчейки - ссылка на ячейку склада, которая является зоной отгрузки 
//			либо пустая ссылка справочника "Складские ячейки";
//		*СозданныеРасходныеОрдера - ТаблицаЗначений - необязательный, таблица ордеров, которые можно перезаполнить:
//			**ДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары - ранее созданный расходый ордер.
//			**Использован - Булево - Ложь если можно перезаполнить.
//
// Возвращаемое значение:
//	Структура - структура со следующими ключами:
//	*ОформленныеОрдера - ТаблицаЗначений - таблица ссылок ордеров и действий, совершенных над ними.
//	*ЕстьОшибка - Булево - признак ошибки.
//
Функция ПереоформитьРасходныеОрдера(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ОформленныеОрдера = Новый ТаблицаЗначений;
	ОформленныеОрдера.Колонки.Добавить("РасходныйОрдер",	Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерНаТовары"));
	ОформленныеОрдера.Колонки.Добавить("Номер",				Новый ОписаниеТипов("Строка"));
	ОформленныеОрдера.Колонки.Добавить("ДатаОтгрузки",		Новый ОписаниеТипов("Дата"));
	ОформленныеОрдера.Колонки.Добавить("Склад",				Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОформленныеОрдера.Колонки.Добавить("Помещение",			Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	ОформленныеОрдера.Колонки.Добавить("Действие",			Новый ОписаниеТипов("Строка"));
	
	ОрдерЗаписан = Ложь;
	ЕстьОшибка = Ложь;
	ТекущаяДата = ТекущаяДатаСеанса();
	НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку = СкладыСервер.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку(Параметры.Склад);
	СначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить() = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;    
	
	Если Не Параметры.свойство("СозданныеРасходныеОрдера") Тогда
		ОбъединитьОрдераПоТекущуюДату(Параметры, ТекущаяДата, ОформленныеОрдера);
	КонецЕсли;
	
	СтруктураТоварыДляОформленияРасходныхОрдеров = ВычислитьТоварыДляОформленияРасходныхОрдеров(Параметры, НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку, СначалаНакладные);	
	ДеревоТоварыКОтгрузке = СтруктураТоварыДляОформленияРасходныхОрдеров.ДеревоТоварыКОтгрузке;
	ТоварыКСборке = СтруктураТоварыДляОформленияРасходныхОрдеров.ТоварыКСборке;
	
	Если Не Параметры.свойство("СозданныеРасходныеОрдера") Тогда
		УменьшитьКоличествоВОрдерах(ТоварыКСборке, ОформленныеОрдера, ОрдерЗаписан);	
	КонецЕсли;
	
	ТаблицаНоменклатурыДляЗапроса = ОбщегоНазначенияУТ.ДанныеДерева(ДеревоТоварыКОтгрузке, 6);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ТекстЗапросаСкладскаяОперацияТипДокумента() +
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.ЗаданиеНаПеревозку,
	|	ТоварыКОтгрузкеОстатки.ОтгрузкаПоЗаданиюНаПеревозку,
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
	|	ТоварыКОтгрузкеОстатки.Склад,
	|	ТоварыКОтгрузкеОстатки.Получатель,
	|	ВЫБОР
	|		КОГДА &ТекущаяДата > ТоварыКОтгрузкеОстатки.Период
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ ТоварыКОтгрузкеОстатки.Период
	|	КОНЕЦ КАК ДатаОтгрузки,
	|	ТоварыКОтгрузкеОстатки.Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика,
	|	ТоварыКОтгрузкеОстатки.Серия,
	|	ТоварыКОтгрузкеОстатки.Назначение,
	|	ТоварыКОтгрузкеОстатки.Количество КАК Количество,
	|	ТоварыКОтгрузкеОстатки.ДопустимоеОтклонение КАК ДопустимоеОтклонение
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	&ТаблицаНоменклатурыДляЗапроса КАК ТоварыКОтгрузкеОстатки
	|ГДЕ
	|	ТоварыКОтгрузкеОстатки.Количество > ТоварыКОтгрузкеОстатки.ДопустимоеОтклонение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| ТаблицаНоменклатурыДляЗапроса.Склад,
	| ТаблицаНоменклатурыДляЗапроса.Номенклатура,
	| ТаблицаНоменклатурыДляЗапроса.Характеристика,
	| ТаблицаНоменклатурыДляЗапроса.Серия,
	| ТаблицаНоменклатурыДляЗапроса.Назначение,
	| СУММА(ТаблицаНоменклатурыДляЗапроса.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	| ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатурыДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	| ТаблицаНоменклатурыДляЗапроса.Склад,
	| ТаблицаНоменклатурыДляЗапроса.Характеристика,
	| ТаблицаНоменклатурыДляЗапроса.Номенклатура,
	| ТаблицаНоменклатурыДляЗапроса.Серия,
	| ТаблицаНоменклатурыДляЗапроса.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| ТаблицаНоменклатурыДляЗапроса.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	| ТаблицаНоменклатурыДляЗапроса.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку,
	| ТаблицаНоменклатурыДляЗапроса.Склад КАК Склад,
	| ТаблицаНоменклатурыДляЗапроса.Получатель КАК Получатель,
	| ВЫБОР 
	|	КОГДА ЕСТЬNULL(СостоянияИРеквизитыДоставки.РазбиватьРасходныеОрдераПоРаспоряжениям, ЛОЖЬ) ТОГДА 
	|		ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки 
	|	ИНАЧЕ НЕОПРЕДЕЛЕНО 
	| КОНЕЦ КАК РаспоряжениеГруппировка,
	| ТаблицаНоменклатурыДляЗапроса.ДатаОтгрузки КАК ДатаОтгрузки,	
	| СкладскаяОперацияТипДокумента.СкладскаяОперация КАК СкладскаяОперация,
	| ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки КАК Распоряжение,	
	| ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Номенклатура,
	| ТаблицаНоменклатурыДляЗапроса.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	| ТаблицаНоменклатурыДляЗапроса.Характеристика КАК Характеристика,
	| ТаблицаНоменклатурыДляЗапроса.Серия КАК Серия,
	| ТаблицаНоменклатурыДляЗапроса.Назначение КАК Назначение,
	| ТаблицаНоменклатурыДляЗапроса.ДопустимоеОтклонение КАК ДопустимоеОтклонение,
	| СУММА(ТаблицаНоменклатурыДляЗапроса.Количество) КАК Количество
	|ИЗ
	| ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатурыДляЗапроса
	|   ЛЕВОЕ СОЕДИНЕНИЕ СкладскаяОперацияТипДокумента КАК СкладскаяОперацияТипДокумента
	|     ПО ТИПЗНАЧЕНИЯ(ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки) = СкладскаяОперацияТипДокумента.Тип
	|     И ВЫБОР
	|     КОГДА ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаСборку
	|     ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки КАК Документ.ЗаказНаСборку).ХозяйственнаяОперация
	|     КОГДА ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки ССЫЛКА Документ.СборкаТоваров
	|     ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки КАК Документ.СборкаТоваров).ХозяйственнаяОперация
	|     ИНАЧЕ НЕОПРЕДЕЛЕНО
	|   КОНЕЦ = СкладскаяОперацияТипДокумента.ХозяйственнаяОперация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|		ПО ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки = СостоянияИРеквизитыДоставки.Распоряжение
	|			И ТаблицаНоменклатурыДляЗапроса.Склад = СостоянияИРеквизитыДоставки.Склад
	|   
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатурыДляЗапроса.ЗаданиеНаПеревозку,
	|	ТаблицаНоменклатурыДляЗапроса.ОтгрузкаПоЗаданиюНаПеревозку,
	|	ТаблицаНоменклатурыДляЗапроса.Склад,
	|	ТаблицаНоменклатурыДляЗапроса.Получатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(СостоянияИРеквизитыДоставки.РазбиватьРасходныеОрдераПоРаспоряжениям, ЛОЖЬ) ТОГДА 
	|			ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО 
	|	КОНЕЦ,
	|	ТаблицаНоменклатурыДляЗапроса.ДатаОтгрузки,
	|	СкладскаяОперацияТипДокумента.СкладскаяОперация,
	|	ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки,
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура,
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика,
	|	ТаблицаНоменклатурыДляЗапроса.Серия,
	|	ТаблицаНоменклатурыДляЗапроса.Назначение,
	|	ТаблицаНоменклатурыДляЗапроса.ДопустимоеОтклонение
	|
	|УПОРЯДОЧИТЬ ПО
	| ТаблицаНоменклатурыДляЗапроса.Номенклатура.Наименование,
	| ТаблицаНоменклатурыДляЗапроса.Характеристика.Наименование,
	| ТаблицаНоменклатурыДляЗапроса.ДатаОтгрузки
	|ИТОГИ ПО
	| ОтгрузкаПоЗаданиюНаПеревозку,
	| ЗаданиеНаПеревозку,	
	| Склад,
	| Получатель,
	| РаспоряжениеГруппировка,	
	| ДатаОтгрузки,
	| СкладскаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	| ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	| ТаблицаНоменклатуры.Серия КАК Серия,
	| ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	| ТоварыНаСкладахОстатки.Склад КАК Склад,
	| ТоварыНаСкладахОстатки.Помещение КАК Помещение,
	| СУММА(0) КАК РейтингПомещения,
	| СУММА(0) КАК КоличествоВсего,
	| СУММА(0) КАК КоличествоВБазовыхИзрасходовано,
	| СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК СвободныйОстатокВБазовых
	|ИЗ
	| РегистрНакопления.ТоварыНаСкладах.Остатки(
	|     ,
	|     (Номенклатура, Характеристика, Назначение, Склад) В
	|         (ВЫБРАТЬ
	|           ТаблицаНоменклатуры.Номенклатура,
	|           ТаблицаНоменклатуры.Характеристика,
	|           ТаблицаНоменклатуры.Назначение,
	|           ТаблицаНоменклатуры.Склад
	|         ИЗ
	|           ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
	|       И (&ПоВсемПомещениям
	|         ИЛИ Помещение = &Помещение)) КАК ТоварыНаСкладахОстатки
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|   ПО ТоварыНаСкладахОстатки.Номенклатура = ТаблицаНоменклатуры.Номенклатура
	|     И ТоварыНаСкладахОстатки.Характеристика = ТаблицаНоменклатуры.Характеристика
	|     И ТоварыНаСкладахОстатки.Склад = ТаблицаНоменклатуры.Склад
	|     И ТоварыНаСкладахОстатки.Назначение = ТаблицаНоменклатуры.Назначение
	|     И (ВЫБОР
	|       КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|         ТОГДА ИСТИНА
	|       ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыНаСкладахОстатки.Серия
	|     КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	| ТоварыНаСкладахОстатки.Помещение,
	| ТаблицаНоменклатуры.Серия,
	| ТоварыНаСкладахОстатки.Склад,
	| ТоварыНаСкладахОстатки.Характеристика,
	| ТоварыНаСкладахОстатки.Номенклатура,
	| ТоварыНаСкладахОстатки.Назначение
	|
	|ИМЕЮЩИЕ
	| СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	| ТоварыНаСкладахОстатки.Номенклатура.Наименование,
	| ТоварыНаСкладахОстатки.Характеристика.Наименование
	|ИТОГИ
	| СУММА(РейтингПомещения),
	| СУММА(КоличествоВсего)
	|ПО
	| Помещение";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Помещение", Параметры.Помещение);
	Запрос.УстановитьПараметр("ПоВсемПомещениям", Не ЗначениеЗаполнено(Параметры.Помещение));
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДляЗапроса", ТаблицаНоменклатурыДляЗапроса);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДеревоТоваров = МассивРезультатов[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоПоПомещениям = МассивРезультатов[4].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаОшибок = ТаблицаНоменклатурыДляЗапроса.СкопироватьКолонки("Склад, Номенклатура, Характеристика, Назначение, Серия, Количество");
	ТаблицаОшибок.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ПомещениеЗонаОтгрузки = Новый Соответствие;
	
	Для Каждого УровеньОтгрузкаПоЗаданиюНаПеревозку Из ДеревоТоваров.Строки Цикл	
		Для Каждого УровеньЗаданиеНаПеревозку Из УровеньОтгрузкаПоЗаданиюНаПеревозку.Строки Цикл
			
			Если ЗначениеЗаполнено(Параметры.ЗаданиеНаПеревозку) Тогда
				ЗаданиеНаПеревозку = Параметры.ЗаданиеНаПеревозку;
			Иначе
				ЗаданиеНаПеревозку = УровеньЗаданиеНаПеревозку.ЗаданиеНаПеревозку;
			КонецЕсли;
			
			Для Каждого УровеньСклад Из УровеньЗаданиеНаПеревозку.Строки Цикл 
				
				Для Каждого УровеньПолучатель Из УровеньСклад.Строки Цикл
					
					Для Каждого УровеньРаспоряжение Из УровеньПолучатель.Строки Цикл
					
						Для Каждого УровеньДатаОтгрузки Из УровеньРаспоряжение.Строки Цикл
							
							Для Каждого УровеньСкладскаяОперация Из УровеньДатаОтгрузки.Строки Цикл
								
								ТаблицаНоменклатуры = УровеньСкладскаяОперация.Строки;
								
								ВсеКоличествоОформленоПоПомещению = Ложь;
								// Если нет остатков вообще по помещениям
								Если ДеревоПоПомещениям.Строки.Количество() = 0 Тогда
									Для Каждого Строка Из ТаблицаНоменклатуры Цикл
										СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
										ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок,Строка);
									КонецЦикла;	
									Прервать;
								КонецЕсли;
								
								ИспользоватьПомещения = СкладыСервер.ИспользоватьСкладскиеПомещения(УровеньСкладскаяОперация.Склад, УровеньСкладскаяОперация.ДатаОтгрузки, Истина);
								МассивЛучшихПомещений = Новый Массив;
								
								// 1. Проводим ранжирование помещений по сумме степени собранности каждой позиции
								// 2. По лучшему помещению создаем документ
								// 3. Из количества к отгрузке вычитаем уже попавшее в документ количество
								// 4. Для всех помещений, кроме лучшего, проводим ранжирование (т.к. количество в каждой позиции могло уменьшится,
								//    рейтинг помещения мог поменяться)
								
								Пока ТаблицаНоменклатуры.Количество() > 0 Цикл
									
									// Указанный в строках по помещениям рейтинг нужно очищать:
									// - когда перешли к новому распоряжению
									// - когда выбрали товары лучшего помещения и нужно перерасчитать рейтинг оставшихся помещений
									НужноОбнулитьРейтингСтрокПоПомещениям = Истина;     
									
									// Если нет остатков вообще по помещениям
									Если ДеревоПоПомещениям.Строки.Количество() = 0 Тогда
										Прервать;
									КонецЕсли;
									
									КоличествоВсего = ТаблицаНоменклатуры.Итог("Количество");
									ПомещенияОрдера = Новый Соответствие;
									ПомещенияТовары = Новый Соответствие;
									
									Для каждого СтрТабл из ТаблицаНоменклатуры Цикл
										
										Для каждого СтрПомещение Из ДеревоПоПомещениям.Строки  Цикл 
											
											Если ИспользоватьПомещения И Не ЗначениеЗаполнено(СтрПомещение.Помещение) Тогда
												Продолжить;
											КонецЕсли;
											
											Если НужноОбнулитьРейтингСтрокПоПомещениям Тогда
												СтрПомещение.КоличествоВсего  = 0;
												СтрПомещение.РейтингПомещения = 0;
											КонецЕсли;
											
											Если МассивЛучшихПомещений.Найти(СтрПомещение.Помещение) <> Неопределено Тогда
												Продолжить;
											КонецЕсли;
											
											ДокументОбъект = ПомещенияОрдера.Получить(СтрПомещение.Помещение);
											ТоварыВОрдере = ПомещенияТовары.Получить(СтрПомещение.Помещение);
											
											Если ДокументОбъект = Неопределено Тогда
												
												ПараметрыПоискаРасходногоОрдера = Новый Структура;
												ПараметрыПоискаРасходногоОрдера.Вставить("Склад",					УровеньСкладскаяОперация.Склад);
												ПараметрыПоискаРасходногоОрдера.Вставить("Помещение",				СтрПомещение.Помещение);
												ПараметрыПоискаРасходногоОрдера.Вставить("ЗонаОтгрузки",			Параметры.ЗонаОтгрузки);
												ПараметрыПоискаРасходногоОрдера.Вставить("Получатель",				УровеньСкладскаяОперация.Получатель);
												ПараметрыПоискаРасходногоОрдера.Вставить("РаспоряжениеГруппировка",	УровеньСкладскаяОперация.РаспоряжениеГруппировка);
												ПараметрыПоискаРасходногоОрдера.Вставить("РаспоряженияНаОтгрузку",	Параметры.РаспоряженияНаОтгрузку);
												ПараметрыПоискаРасходногоОрдера.Вставить("СкладскаяОперация",		УровеньСкладскаяОперация.СкладскаяОперация);
												ПараметрыПоискаРасходногоОрдера.Вставить("ДатаОтгрузки",			УровеньСкладскаяОперация.ДатаОтгрузки);
												ПараметрыПоискаРасходногоОрдера.Вставить("ТекущаяДата",				ТекущаяДата); 
												ПараметрыПоискаРасходногоОрдера.Вставить("ЗаданиеНаПеревозку",		ЗаданиеНаПеревозку);
												ПараметрыПоискаРасходногоОрдера.Вставить("ОтгрузкаПоЗаданиюНаПеревозку", УровеньСкладскаяОперация.ОтгрузкаПоЗаданиюНаПеревозку);
												
												Если Параметры.Свойство("СозданныеРасходныеОрдера") Тогда
													Строка = Параметры.СозданныеРасходныеОрдера.Найти(Ложь, "Использован");
													Если Не Строка = неопределено тогда
														ДокументОбъект = ЗаполнитьРасходныйОрдерНаТовары(ПараметрыПоискаРасходногоОрдера, Строка.ДокументОбъект);
														Строка.Использован = Истина;													
													Иначе 
														ДокументОбъект = ЗаполнитьРасходныйОрдерНаТовары(ПараметрыПоискаРасходногоОрдера, Документы.РасходныйОрдерНаТовары.СоздатьДокумент());
													КонецЕсли;
												Иначе
													ДокументОбъект = ПолучитьОбъектОрдер(ПараметрыПоискаРасходногоОрдера);
												КонецЕсли;
												
												ПомещенияОрдера.Вставить(СтрПомещение.Помещение, ДокументОбъект);
												
												ТоварыВОрдере = ДокументОбъект.ТоварыПоРаспоряжениям.ВыгрузитьКолонки();
												ПомещенияТовары.Вставить(СтрПомещение.Помещение, ТоварыВОрдере);
												
											КонецЕсли;
											
											СтруктураОтбора = Новый Структура("Номенклатура,Характеристика,Серия,Назначение");
											ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрТабл);
											
											МассивСтрок = СтрПомещение.Строки.НайтиСтроки(СтруктураОтбора);
											
											Если МассивСтрок.Количество() = 0 Тогда
												Продолжить;
											КонецЕсли;
											
											Номенклатура = МассивСтрок[0]; 
											
											КоличествоВДокумент = Мин(Номенклатура.СвободныйОстатокВБазовых - Номенклатура.КоличествоВБазовыхИзрасходовано, СтрТабл.Количество);
											
											Если КоличествоВДокумент = 0 Тогда
												Продолжить;
											КонецЕсли;	
											
											НоваяСтрокаТовара = ДокументОбъект.ТоварыПоРаспоряжениям.Добавить();
											НоваяСтрокаТовара.Распоряжение      = СтрТабл.Распоряжение;
											НоваяСтрокаТовара.Номенклатура      = СтрТабл.Номенклатура;
											НоваяСтрокаТовара.Характеристика    = СтрТабл.Характеристика;
											НоваяСтрокаТовара.Назначение      = СтрТабл.Назначение;
											НоваяСтрокаТовара.Серия           = СтрТабл.Серия;
											НоваяСтрокаТовара.Количество      = КоличествоВДокумент;
											
											НоваяСтрокаТоварыВОрдере = ТоварыВОрдере.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыВОрдере,НоваяСтрокаТовара);
											
											// сразу не уменьшаем свободный остаток, т.к. если помещение не будет лучшим, брать из него не будем
											Номенклатура.КоличествоВБазовыхИзрасходовано = Номенклатура.КоличествоВБазовыхИзрасходовано + КоличествоВДокумент;
											
											СтрПомещение.КоличествоВсего = СтрПомещение.КоличествоВсего + КоличествоВДокумент; 
											
											// СтрТабл.Количество не равно нулю: проверяется в запросе и при уменьшении количества в таблице ТаблицаНоменклатуры
											СтрПомещение.РейтингПомещения = СтрПомещение.РейтингПомещения + КоличествоВДокумент/СтрТабл.Количество;       
											
										КонецЦикла;
										
										НужноОбнулитьРейтингСтрокПоПомещениям = Ложь;
										
									КонецЦикла;
									
									ДеревоПоПомещениям.Строки.Сортировать("РейтингПомещения УБЫВ, КоличествоВсего УБЫВ");
									
									ЛучшееПомещение = ДеревоПоПомещениям.Строки[0];
									
									Если ИспользоватьПомещения
										И Не ЗначениеЗаполнено(ЛучшееПомещение.Помещение) Тогда
										Если ДеревоПоПомещениям.Строки.Количество()>1 Тогда
											ЛучшееПомещение = ДеревоПоПомещениям.Строки[1];
										Иначе
											Прервать;
										КонецЕсли;
									КонецЕсли;
									
									// Если в помещениях нет остатка для этого распоряжения
									Если ЛучшееПомещение.РейтингПомещения = 0 Тогда
										Прервать;
									КонецЕсли;
									
									ДокументОбъект = ПомещенияОрдера[ЛучшееПомещение.Помещение];
									
									Если Параметры.Свойство("СозданныеРасходныеОрдера") тогда
										// Очищаем товары в ордерах по нелучшим помещениям
										Для каждого Стр из ДеревоПоПомещениям.Строки цикл
											Если не Стр = ЛучшееПомещение тогда 
												Строка=Параметры.СозданныеРасходныеОрдера.найти(ПомещенияОрдера[Стр.Помещение],"ДокументОбъект");
												Если не Строка = неопределено тогда
													Строка.Использован = Ложь;
													Строка.ДокументОбъект.ТоварыПоРаспоряжениям.Очистить();
												КонецЕсли;
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
									
									ТоварыВОрдере = ПомещенияТовары[ЛучшееПомещение.Помещение];
									
									Если ДокументОбъект.ТоварыПоРаспоряжениям.Количество() > 0 Тогда    
										ОбъектНовый = Не ДокументОбъект.Проведен;
										Если Не ЗаписатьОбъектОрдер(ДокументОбъект,Параметры.ФоновоеЗадание) Тогда
											ЕстьОшибка = Истина;
										КонецЕсли;
										
										Если ДокументОбъект.Проведен и Не ЕстьОшибка Тогда
											Если ОбъектНовый Тогда
												ОформленныеОрдераСтрока = ОформленныеОрдера.Добавить();
												ЗаполнитьЗначенияСвойств(ОформленныеОрдераСтрока, ДокументОбъект);
												ОформленныеОрдераСтрока.РасходныйОрдер = ДокументОбъект.Ссылка;
												ОформленныеОрдераСтрока.Действие = НСтр("ru = 'Создан новый'");
											Иначе
												Если ОформленныеОрдера.Найти(ДокументОбъект.Ссылка, "РасходныйОрдер") = Неопределено Тогда
													ОформленныеОрдераСтрока = ОформленныеОрдера.Добавить();
													ЗаполнитьЗначенияСвойств(ОформленныеОрдераСтрока, ДокументОбъект);
													ОформленныеОрдераСтрока.РасходныйОрдер = ДокументОбъект.Ссылка;
													ОформленныеОрдераСтрока.Действие = НСтр("ru = 'Переоформлен'");
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
										
										ОрдерЗаписан = Истина;                                  
									КонецЕсли;
									
									// Если не последняя строка по получателю, складу, дате отгрузки и скл. операции,
									// то в лучшем помещении надо уменьшить свободный остаток
									Если ДеревоТоваров.Строки.Количество() - 1 > ДеревоТоваров.Строки.Индекс(УровеньСкладскаяОперация) Тогда
										
										// Помещение выбрано - можно уменьшать свободный остаток
										
										Для Каждого СтрТовары Из ТоварыВОрдере Цикл 
											ОтборСтрок = Новый Структура("Склад,Номенклатура,Характеристика,Назначение,Серия");
											ЗаполнитьЗначенияСвойств(ОтборСтрок,СтрТовары);
											ОтборСтрок.Склад = УровеньСкладскаяОперация.Склад;
											СтрокаНоменклатуры = ЛучшееПомещение.Строки.НайтиСтроки(ОтборСтрок);
											Если СтрокаНоменклатуры.Количество() > 0 Тогда
												Номенклатура = СтрокаНоменклатуры[0];
												Номенклатура.СвободныйОстатокВБазовых = Номенклатура.СвободныйОстатокВБазовых - Номенклатура.КоличествоВБазовыхИзрасходовано;
												Номенклатура.КоличествоВБазовыхИзрасходовано = 0;
												
												// Чтобы в дальнейшем быстрее искалось, удалим пустую строку
												Если Номенклатура.СвободныйОстатокВБазовых = 0 Тогда 
													ЛучшееПомещение.Строки.Удалить(Номенклатура);
												КонецЕсли;
												
											КонецЕсли;
											
										КонецЦикла;
										
									КонецЕсли;
									
									// Очистка КоличествоВБазовыхИзрасходовано
									Для Каждого СтрокиПоПомещениям Из ДеревоПоПомещениям.Строки Цикл
										Для Каждого Строки Из СтрокиПоПомещениям.Строки Цикл
											Строки.КоличествоВБазовыхИзрасходовано = 0;
										КонецЦикла;
										Если ЛучшееПомещение <> СтрокиПоПомещениям Тогда
											СтрокиПоПомещениям.КоличествоВсего  = 0;
											СтрокиПоПомещениям.РейтингПомещения = 0;
										КонецЕсли;
									КонецЦикла;
									
									Если ЛучшееПомещение.КоличествоВсего = КоличествоВсего Тогда
										ВсеКоличествоОформленоПоПомещению = Истина;
									КонецЕсли;	
									
									Если ЛучшееПомещение.КоличествоВсего = КоличествоВсего
										Или ЛучшееПомещение.КоличествоВсего = 0
										Или МассивЛучшихПомещений.Количество() = ДеревоПоПомещениям.Строки.Количество() Тогда
										// Если собрали полностью,
										// или не собрали вообще прерываем цикл по строкам распоряжения
										// или перебрали все помещения
										ЛучшееПомещение.КоличествоВсего   = 0;
										ЛучшееПомещение.РейтингПомещения  = 0;
										Прервать;
										
									Иначе
										ЛучшееПомещение.КоличествоВсего   = 0;
										ЛучшееПомещение.РейтингПомещения  = 0;
										
										ТоварыВОрдере.Свернуть("Распоряжение, Номенклатура, Характеристика, Назначение, Серия" , "Количество");
										
										Для каждого СтрТабл из ТоварыВОрдере Цикл
											
											СтруктураОтбора = Новый Структура("Распоряжение,Номенклатура,Характеристика,Назначение,Серия");
											ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрТабл);
											
											СтрокиТаблицыНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
											Если СтрокиТаблицыНоменклатуры.Количество() = 0 Тогда
												Продолжить;
											КонецЕсли;  
											СтрокаТаблицыНоменклатуры = СтрокиТаблицыНоменклатуры[0];
											
											СтрокаТаблицыНоменклатуры.Количество = СтрокаТаблицыНоменклатуры.Количество - СтрТабл.Количество;
											
											Если СтрокаТаблицыНоменклатуры.Количество <= СтрокаТаблицыНоменклатуры.ДопустимоеОтклонение Тогда
												ТаблицаНоменклатуры.Удалить(СтрокаТаблицыНоменклатуры);
											КонецЕсли;
											
										КонецЦикла;
										
									КонецЕсли;
									
									МассивЛучшихПомещений.Добавить(ЛучшееПомещение.Помещение);
									
									// Если в помещении нет товаров, его можно удалить из дерева помещений
									Если ЛучшееПомещение.Строки.Количество() = 0 Тогда
										ДеревоПоПомещениям.Строки.Удалить(ЛучшееПомещение);
									КонецЕсли;
									
								КонецЦикла;
								
								Если Не ВсеКоличествоОформленоПоПомещению Тогда
									Для Каждого Строка Из ТаблицаНоменклатуры Цикл
										СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
										ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок,Строка);
									КонецЦикла;
								КонецЕсли 	
								
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаОшибок.Количество() = 0 И Не ОрдерЗаписан Тогда
		
		ЕстьОшибка = Истина;
		Если ЗначениеЗаполнено(Параметры.Получатель) Тогда 		
			ТекстСообщения = НСтр("ru='Расходные ордера по распоряжениям на отгрузку для получателя ""%Получатель%"" и склада ""%Склад%"" не созданы. Возможные причины:
			|- все товары уже собираются (собраны)%СначалаНакладные%%НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Получатель%", Строка(Параметры.Получатель));
		Иначе
			ТекстСообщения = НСтр("ru='Расходные ордера по распоряжениям на отгрузку для склада ""%Склад%"" не созданы. Возможные причины:
			|- все товары уже собираются (собраны)%СначалаНакладные%%НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку%.'");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Строка(Параметры.Склад));
		
		Если СначалаНакладные Тогда					   
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СначалаНакладные%", НСтр("ru=';
			|- не оформлены накладные'"));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СначалаНакладные%", "");
		КонецЕсли; 
		Если НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку Тогда					   
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку%", НСтр("ru=';
			|- не оформлены задания на перевозку'"));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку%", "");
		КонецЕсли;  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли ТаблицаОшибок.Количество() > 0 Тогда	
		
		ЕстьОшибка = Истина;
		
		ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% %Назначение%
		|Недостаточно для отгрузки на складе ""%Склад%"" %Количество% %Единица%'");
		
		ТаблицаОшибок.Свернуть("Склад, Номенклатура, Характеристика, Назначение, Серия, ЕдиницаИзмерения","Количество");
		Для Каждого СтрокаОшибка Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаОшибка.Номенклатура,
																СтрокаОшибка.Характеристика,
																СтрокаОшибка.Серия));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Строка(СтрокаОшибка.Склад));		
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(СтрокаОшибка.Количество));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(СтрокаОшибка.ЕдиницаИзмерения));
			Назначение = ?(ЗначениеЗаполнено(СтрокаОшибка.Назначение), "(" + Строка(СтрокаОшибка.Назначение) + ")", "");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Назначение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат Новый Структура("ОформленныеОрдера, ЕстьОшибка", ОформленныеОрдера,ЕстьОшибка);
	
КонецФункции

// Процедура создает задания на переупаковку, у которых есть движения в отборе
// 
//Параметры:
//  СтруктураПараметров	 - Структура	 - структура, имеющая следующие ключи:
//  	*Склад - СправочникСсылка.Склады - ссылка на склад, который указан в расходных ордерах;
//  	*Помещение - СправочникСсылка.СкладскиеПомещения - ссылка на помещение, которое указано в расходных ордерах,
//  		либо пустая ссылка справочника "Складксие помещения";
//  	*ПоВсемРаспоряжениям - Булево - Истина, если выполнить создание ордеров по всем распоряжениям
//  		Ложь, если выполнить по тем распоряжениям, которые указаны в параметре МассивРаспоряжений;
//  	*МассивРаспоряжений - Массив - массив ссылок на расходные ордера, по которым нужно создать задания на отбор,
//  		необязательный параметр в случае, если параметр ПоВсемРаспоряжениям = Истина;
//  	*РабочийУчасток - СправочникСсылка.РабочиеУчастки - ссылка на рабочий участок, по которому будут сформированы задания на отбор;
//  	*НастройкаФормированияПоРабочимУчасткам - Строка - возможные значения:
//  		"СРазбиениемПоРабочимУчасткам", "ПоОдномуРабочемуУчастку", "БезРазбиенияПоРабочимУчасткам";
//  	*ОграничиватьПоОбъему - Булево - параметр рабочего участка;
//  	*ОграничиватьПоВесу - Булево - параметр рабочего участка;
//  	*ОграничениеПоОбъему - Число - параметр рабочего участка;
//  	*ОграничениеПоВесу - Число - параметр рабочего участка;
//  	*Исполнитель - СправочникСсылка.Пользователи - ссылка на пользователя системы, который будет указан в созданных заданиях на отбор,
//  		необязательный параметр;
Процедура СоздатьЗаданияНаПереупаковку(СтруктураПараметров) Экспорт
	
	Склад     = СтруктураПараметров.Склад;
	Помещение = СтруктураПараметров.Помещение;
	
	РабочийУчасток                         = СтруктураПараметров.РабочийУчасток;
	НастройкаФормированияПоРабочимУчасткам = СтруктураПараметров.НастройкаФормированияПоРабочимУчасткам;
	
	ОграничиватьПоВесу = СтруктураПараметров.ОграничиватьПоВесу;
	ОграничениеПоВесу  = СтруктураПараметров.ОграничениеПоВесу;
	
	ОграничиватьПоОбъему = СтруктураПараметров.ОграничиватьПоОбъему;
	ОграничениеПоОбъему  = СтруктураПараметров.ОграничениеПоОбъему;
	
	МассивРаспоряжений               = СтруктураПараметров.МассивРаспоряжений;
	ПоВсемРаспоряжениям              = СтруктураПараметров.ПоВсемРаспоряжениям;
	ПоРаспоряжениямТребуетсяПодпитка = СтруктураПараметров.ПоРаспоряжениямТребуетсяПодпитка;
	
	Исполнитель = СтруктураПараметров.Исполнитель;
	
	Индекс = МассивРаспоряжений.Количество();
	
	ТипВсеСсылки = Документы.ТипВсеСсылки();
	
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СтрМас = МассивРаспоряжений[Индекс];
		Если Не ТипВсеСсылки.СодержитТип(ТипЗнч(СтрМас)) Тогда
			МассивРаспоряжений.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивРаспоряжений.Количество() = 0 И НЕ ПоВсемРаспоряжениям Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет выделенных распоряжений на отбор.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если ПоВсемРаспоряжениям Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);	
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыКОтборуОстатки.Распоряжение КАК Распоряжение
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Остатки(
		|			,
		|			Распоряжение.Склад = &Склад
		|				И (&ПоВсемРаспоряжениям
		|					ИЛИ Распоряжение В (&МассивРаспоряжений)
		|					ИЛИ Распоряжение В
		|						(ВЫБРАТЬ
		|							ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
		|						ИЗ
		|							Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|						ГДЕ
		|							ЗаданиеНаПеревозкуРаспоряжения.Ссылка В (&МассивРаспоряжений)))) КАК ТоварыКОтборуОстатки
		|ГДЕ
		|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток > 0";
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Помещение", Помещение);
		Запрос.УстановитьПараметр("ПоВсемРаспоряжениям", ПоВсемРаспоряжениям);
		
		РаспоряженияНаОтбор = Запрос.Выполнить().Выгрузить();		
		МассивРаспоряжений = РаспоряженияНаОтбор.ВыгрузитьКолонку("Распоряжение");
	КонецЕсли;	
	
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	ОстаткиТоваровКОтбору(Менеджер, МассивРаспоряжений, Склад, Помещение);
	
	//Получим таблицу с разбиением номенклатуры из всех распоряжений по ячейкам хранения,
	//а затем разобьем по заданиям, учитывая максимальный объем и вес
	
	СтруктураВозврата = ОтобратьТоварИзЯчеек(Менеджер, Склад, Помещение);
	
	ЕстьНеОтобранныйТовар = ?(СтруктураВозврата.ТаблицаОшибок.Количество() > 0, Истина, Ложь);
	
	Если ЕстьНеОтобранныйТовар
		Или ПоРаспоряжениямТребуетсяПодпитка Тогда
		
		ПараметрыФормированияЗаданий = ПараметрыФормированияЗаданийНаПодпитку(Истина); // по распоряжениям на отбор
		ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = НастройкаФормированияПоРабочимУчасткам;
		ПараметрыФормированияЗаданий.РабочийУчасток = РабочийУчасток;
		ПараметрыФормированияЗаданий.ОграничениеПоВесу = ОграничениеПоВесу;
		ПараметрыФормированияЗаданий.ОграничениеПоОбъему = ОграничениеПоОбъему;
		ПараметрыФормированияЗаданий.ОграничиватьПоОбъему = ОграничиватьПоОбъему;
		ПараметрыФормированияЗаданий.ОграничиватьПоВесу = ОграничиватьПоВесу;
		ПараметрыФормированияЗаданий.Исполнитель = Исполнитель;
		
		ПараметрыФормированияЗаданий.ПоРаспоряжениямНаОтбор = МассивРаспоряжений;
		ПараметрыФормированияЗаданий.ПоРаспоряжениямТребуетсяПодпитка = ПоРаспоряжениямТребуетсяПодпитка;
		
		ТекстСообщения = ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий);
		
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='Переупаковка не требуется'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;		
КонецПроцедуры

// Процедура создает задания на отбор, у которых есть движения в отборе
//
// Параметры:
//  СтруктураПараметров	 - Структура	 - структура, имеющая следующие ключи:
//  	*Склад - СправочникСсылка.Склады - ссылка на склад, который указан в расходных ордерах;
//  	*Помещение - СправочникСсылка.СкладскиеПомещения - ссылка на помещение, которое указано в расходных ордерах,
//  		либо пустая ссылка справочника "Складксие помещения";
//  	*ПоВсемРаспоряжениям - Булево - Истина, если выполнить создание ордеров по всем распоряжениям
//  		Ложь, если выполнить по тем распоряжениям, которые указаны в параметре МассивРаспоряжений;
//  	*МассивРаспоряжений - Массив - массив ссылок на расходные ордера, по которым нужно создать задания на отбор,
//  		необязательный параметр в случае, если параметр ПоВсемРаспоряжениям = Истина;
//  	*РабочийУчасток - СправочникСсылка.РабочиеУчастки - ссылка на рабочий участок, по которому будут сформированы задания на отбор;
//  	*НастройкаФормированияПоРабочимУчасткам - Строка - возможные значения:
//  		"СРазбиениемПоРабочимУчасткам", "ПоОдномуРабочемуУчастку", "БезРазбиенияПоРабочимУчасткам";
//  	*ОграничиватьПоОбъему - Булево - параметр рабочего участка;
//  	*ОграничиватьПоВесу - Булево - параметр рабочего участка;
//  	*ОграничениеПоОбъему - Число - параметр рабочего участка;
//  	*ОграничениеПоВесу - Число - параметр рабочего участка;
//  	*Исполнитель - СправочникСсылка.Пользователи - ссылка на пользователя системы, который будет указан в созданных заданиях на отбор,
//  		необязательный параметр;
//  	*ДействиеПриНехваткеУпаковок - Число - может принимать следующие значения:
//	  		0 - создать только задания на отбор	
// 		 	1 - создать задания на отбор и переупаковку
//  		2 - создать только задания на переупаковку
//
Процедура СоздатьЗаданияНаОтбор(СтруктураПараметров) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Склад = СтруктураПараметров.Склад;
	Помещение = СтруктураПараметров.Помещение;
	РабочийУчасток = СтруктураПараметров.РабочийУчасток;
	НастройкаФормированияПоРабочимУчасткам = СтруктураПараметров.НастройкаФормированияПоРабочимУчасткам;
	ОграничениеПоВесу = СтруктураПараметров.ОграничениеПоВесу;
	ОграничениеПоОбъему = СтруктураПараметров.ОграничениеПоОбъему;
	ОграничиватьПоОбъему = СтруктураПараметров.ОграничиватьПоОбъему;
	ОграничиватьПоВесу = СтруктураПараметров.ОграничиватьПоВесу;
	ПоВсемРаспоряжениям = СтруктураПараметров.ПоВсемРаспоряжениям;
	ДействиеПриНехваткеУпаковок = СтруктураПараметров.ДействиеПриНехваткеУпаковок;
	МассивРаспоряжений = СтруктураПараметров.МассивРаспоряжений;	
	Исполнитель = СтруктураПараметров.Исполнитель;
	
	Индекс = МассивРаспоряжений.Количество();
	
	ТипВсеСсылки = Документы.ТипВсеСсылки();
	
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СтрМас = МассивРаспоряжений[Индекс];
		Если Не ТипВсеСсылки.СодержитТип(ТипЗнч(СтрМас)) Тогда
			МассивРаспоряжений.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивРаспоряжений.Количество() = 0
		И НЕ ПоВсемРаспоряжениям Тогда
		ТекстСообщения = НСтр("ru = 'Нет выделенных распоряжений на отбор.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПоВсемРаспоряжениям Тогда
		
		//Проверка заблокированных данных
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыКОтбору", "Распоряжение", МенеджерВременныхТаблиц);
					
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);	
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыКОтборуОстатки.Распоряжение КАК Распоряжение,
		|	ТоварыКОтборуОстатки.Номенклатура,
		|	ТоварыКОтборуОстатки.Характеристика,
		|	ТоварыКОтборуОстатки.Назначение,
		|	ТоварыКОтборуОстатки.Серия,
		|	ТоварыКОтборуОстатки.ТоварноеМесто,
		|	ТоварыКОтборуОстатки.КОтборуОстаток,
		|	ТоварыКОтборуОстатки.ОтбираетсяОстаток,
		|	ТоварыКОтборуОстатки.ОтобраноОстаток
		|ПОМЕСТИТЬ ТоварыКОтборуОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Остатки(
		|			,
		|			Распоряжение.Склад = &Склад
		|				И НЕ Распоряжение В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтбору.Распоряжение
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтбору КАК ВТЗаблокированоТоварыКОтбору)) КАК ТоварыКОтборуОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтборуОстатки.Распоряжение
		|ИЗ
		|	ТоварыКОтборуОстатки КАК ТоварыКОтборуОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО (ВЫБОР
		|				КОГДА ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|					ТОГДА УпаковкиЕдиницыИзмерения.Владелец = ТоварыКОтборуОстатки.Номенклатура
		|				КОГДА ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
		|					ТОГДА УпаковкиЕдиницыИзмерения.Владелец = ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|			И (УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто))
		|			И (ТоварыКОтборуОстатки.ТоварноеМесто = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтборуОстатки.Распоряжение,
		|	ТоварыКОтборуОстатки.Номенклатура,
		|	ТоварыКОтборуОстатки.Характеристика,
		|	ТоварыКОтборуОстатки.Назначение,
		|	ТоварыКОтборуОстатки.Серия,
		|	ТоварыКОтборуОстатки.ТоварноеМесто
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА УпаковкиЕдиницыИзмерения.Ссылка ЕСТЬ NULL 
		|				ТОГДА ТоварыКОтборуОстатки.КОтборуОстаток
		|			ИНАЧЕ ТоварыКОтборуОстатки.КОтборуОстаток * УпаковкиЕдиницыИзмерения.КоличествоУпаковок
		|		КОНЕЦ) - СУММА(ВЫБОР
		|			КОГДА УпаковкиЕдиницыИзмерения.Ссылка ЕСТЬ NULL 
		|				ТОГДА ТоварыКОтборуОстатки.ОтбираетсяОстаток
		|			ИНАЧЕ ТоварыКОтборуОстатки.ОтбираетсяОстаток * УпаковкиЕдиницыИзмерения.КоличествоУпаковок
		|		КОНЕЦ) - СУММА(ВЫБОР
		|			КОГДА УпаковкиЕдиницыИзмерения.Ссылка ЕСТЬ NULL 
		|				ТОГДА ТоварыКОтборуОстатки.ОтобраноОстаток
		|			ИНАЧЕ ТоварыКОтборуОстатки.ОтобраноОстаток * УпаковкиЕдиницыИзмерения.КоличествоУпаковок
		|		КОНЕЦ) > 0";

		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Помещение", Помещение);
		Запрос.УстановитьПараметр("ПоВсемРаспоряжениям", ПоВсемРаспоряжениям);
		
		РаспоряженияНаОтбор = Запрос.Выполнить().Выгрузить();		
		МассивРаспоряжений = РаспоряженияНаОтбор.ВыгрузитьКолонку("Распоряжение");
		
	КонецЕсли;	
	
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	ОстаткиТоваровКОтбору(Менеджер, МассивРаспоряжений, Склад, Помещение);
	
	//Получим таблицу с разбиением номенклатуры из всех распоряжений по ячейкам хранения,
	//а затем разобьем по заданиям, учитывая максимальный объем и вес
	
	СтруктураДанных = ОтобратьТоварИзЯчеек(Менеджер, Склад, Помещение);
	
	Если ДействиеПриНехваткеУпаковок = 0 Тогда
		СоздатьЗаданияНаОтборПоРаспоряжениям(СтруктураПараметров, СтруктураДанных);
	ИначеЕсли ДействиеПриНехваткеУпаковок = 1 Тогда 
		СоздатьЗаданияНаОтборПоРаспоряжениям(СтруктураПараметров, СтруктураДанных);
		Если СтруктураДанных.ТаблицаОшибок.Количество() > 0 Тогда
			СтруктураДанных.ТаблицаРезультатов.Очистить();
			ПараметрыФормированияЗаданий = ПараметрыФормированияЗаданийНаПодпитку(Истина);
			ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = НастройкаФормированияПоРабочимУчасткам;
			ПараметрыФормированияЗаданий.РабочийУчасток = РабочийУчасток;
			ПараметрыФормированияЗаданий.ОграничениеПоВесу = ОграничениеПоВесу;
			ПараметрыФормированияЗаданий.ОграничениеПоОбъему = ОграничениеПоОбъему;
			ПараметрыФормированияЗаданий.ОграничиватьПоОбъему = ОграничиватьПоОбъему;
			ПараметрыФормированияЗаданий.ОграничиватьПоВесу = ОграничиватьПоВесу;			
			ПараметрыФормированияЗаданий.Исполнитель = Исполнитель;
			
			ПараметрыФормированияЗаданий.ПоРаспоряжениямНаОтбор = МассивРаспоряжений;
			
			ТекстСообщения = ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий);
			
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ДействиеПриНехваткеУпаковок = 2 Тогда
		Если СтруктураДанных.ТаблицаОшибок.Количество() > 0 Тогда
			ПараметрыФормированияЗаданий = ПараметрыФормированияЗаданийНаПодпитку(Истина);
			ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = НастройкаФормированияПоРабочимУчасткам;
			ПараметрыФормированияЗаданий.РабочийУчасток = РабочийУчасток;
			ПараметрыФормированияЗаданий.ОграничениеПоВесу = ОграничениеПоВесу;
			ПараметрыФормированияЗаданий.ОграничениеПоОбъему = ОграничениеПоОбъему;
			ПараметрыФормированияЗаданий.ОграничиватьПоОбъему = ОграничиватьПоОбъему;
			ПараметрыФормированияЗаданий.ОграничиватьПоВесу = ОграничиватьПоВесу;			
			ПараметрыФормированияЗаданий.Исполнитель = Исполнитель;
			
			ПараметрыФормированияЗаданий.ПоРаспоряжениямНаОтбор = МассивРаспоряжений;
			
			ТекстСообщения = ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий);
			
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			СоздатьЗаданияНаОтборПоРаспоряжениям(СтруктураПараметров, СтруктураДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура в переданный через параметры менеджер временных таблиц помещает туда таблицы "ТаблицаТоварныеМестаКОтбору" и "ТаблицаНоменклатуры".
// "ТаблицаТоварныеМестаКОтбору" хранит товарные места, которые осталось отобрать. "ТаблицаНоменклатуры" хранит цельную номенклатуру, которую осталось отобрать.
//
// Параметры:
//  Менеджер	 - МенеджерВременныхТаблиц - Менеджер, в который будут помещены временные таблицы "ТаблицаТоварныеМестаКОтбору" и "ТаблицаНоменклатуры" 
//  Распоряжения - Массив, ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ОрдерНаПеремещениеТоваров - распоряжения, на основании которых будет создаваться отбор товаров
//  Склад		 - СправочникСсылка.Склады - склад из распоряжения или рабочего места
//  Помещение	 - СправочникСсылка.СкладскиеПомещения - помещение из распоряжения или рабочего места
//
Процедура ОстаткиТоваровКОтбору(Менеджер, Распоряжения, Склад, Помещение) Экспорт 
	
	МассивРаспоряжений = Новый Массив();	
	Если ТипЗнч(Распоряжения) = Тип("Массив") Тогда
		МассивРаспоряжений = Распоряжения;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Распоряжения)) Тогда 
		МассивРаспоряжений.Добавить(Распоряжения);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика КАК Характеристика,
	|	ТоварыКОтборуОстатки.Назначение КАК Назначение,
	|	ТоварыКОтборуОстатки.Серия КАК Серия,
	|	ТоварыКОтборуОстатки.ТоварноеМесто,
	|	ТоварыКОтборуОстатки.Распоряжение КАК Распоряжение,
	|	ТоварыКОтборуОстатки.КОтборуОстаток,
	|	ТоварыКОтборуОстатки.ОтбираетсяОстаток,
	|	ТоварыКОтборуОстатки.ОтобраноОстаток
	|ПОМЕСТИТЬ ТоварыКОтборуОстаткиНефильтрованные
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Остатки(
	|			,
	|			Распоряжение В (&МассивРаспоряжений)
	|				ИЛИ Распоряжение.ЗаданиеНаПеревозку В (&МассивРаспоряжений)) КАК ТоварыКОтборуОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Назначение,
	|	ТоварыКОтборуОстатки.Серия,
	|	ТоварыКОтборуОстатки.ТоварноеМесто,
	|	ТоварыКОтборуОстатки.Распоряжение,
	|	ТоварыКОтборуОстатки.КОтборуОстаток,
	|	ТоварыКОтборуОстатки.ОтбираетсяОстаток,
	|	ТоварыКОтборуОстатки.ОтобраноОстаток
	|ПОМЕСТИТЬ ТоварыКОтборуТоварныеМеста
	|ИЗ
	|	ТоварыКОтборуОстаткиНефильтрованные КАК ТоварыКОтборуОстатки
	|ГДЕ
	|	ЕСТЬNULL(ТоварыКОтборуОстатки.ТоварноеМесто.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Назначение,
	|	ТоварыКОтборуОстатки.Серия,
	|	ТоварыКОтборуОстатки.ТоварноеМесто,
	|	ТоварыКОтборуОстатки.Распоряжение,
	|	ТоварыКОтборуОстатки.КОтборуОстаток,
	|	ТоварыКОтборуОстатки.ОтбираетсяОстаток,
	|	ТоварыКОтборуОстатки.ОтобраноОстаток
	|ПОМЕСТИТЬ ТоварыКОтбору
	|ИЗ
	|	ТоварыКОтборуОстаткиНефильтрованные КАК ТоварыКОтборуОстатки
	|ГДЕ
	|	ЕСТЬNULL(ТоварыКОтборуОстатки.ТоварноеМесто.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКОтборуТоварныеМеста.Номенклатура КАК Номенклатура,
	|	ТоварыКОтборуТоварныеМеста.Характеристика КАК Характеристика,
	|	ТоварыКОтборуТоварныеМеста.Назначение КАК Назначение,
	|	ТоварыКОтборуТоварныеМеста.Серия КАК Серия,
	|	ТоварыКОтборуТоварныеМеста.Распоряжение КАК Распоряжение,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок
	|ПОМЕСТИТЬ ВсеТоварныеМестаНоменклатуры
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКОтборуТоварныеМеста КАК ТоварыКОтборуТоварныеМеста
	|		ПО УпаковкиЕдиницыИзмерения.Владелец = ТоварыКОтборуТоварныеМеста.Номенклатура.НаборУпаковок
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКОтборуТоварныеМеста.Номенклатура,
	|	ТоварыКОтборуТоварныеМеста.Характеристика,
	|	ТоварыКОтборуТоварныеМеста.Назначение,
	|	ТоварыКОтборуТоварныеМеста.Серия,
	|	ТоварыКОтборуТоварныеМеста.Распоряжение,
	|	УпаковкиЕдиницыИзмерения.Ссылка,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКОтборуТоварныеМеста КАК ТоварыКОтборуТоварныеМеста
	|		ПО УпаковкиЕдиницыИзмерения.Владелец = ТоварыКОтборуТоварныеМеста.Номенклатура
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеТоварныеМестаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВсеТоварныеМестаНоменклатуры.Характеристика КАК Характеристика,
	|	ВсеТоварныеМестаНоменклатуры.Назначение КАК Назначение,
	|	ВсеТоварныеМестаНоменклатуры.Серия КАК Серия,
	|	ВсеТоварныеМестаНоменклатуры.Распоряжение КАК Распоряжение,
	|	ВсеТоварныеМестаНоменклатуры.ТоварноеМесто,
	|	ВсеТоварныеМестаНоменклатуры.КоличествоУпаковок,
	|	ЕСТЬNULL(ТоварыКОтборуТоварныеМеста.КОтборуОстаток, 0) КАК КОтборуОстаток,
	|	ЕСТЬNULL(ТоварыКОтборуТоварныеМеста.ОтбираетсяОстаток, 0) КАК ОтбираетсяОстаток,
	|	ЕСТЬNULL(ТоварыКОтборуТоварныеМеста.ОтобраноОстаток, 0) КАК ОтобраноОстаток
	|ПОМЕСТИТЬ ВсеТоварныеМестаНоменклатурыСКоличеством
	|ИЗ
	|	ВсеТоварныеМестаНоменклатуры КАК ВсеТоварныеМестаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКОтборуТоварныеМеста КАК ТоварыКОтборуТоварныеМеста
	|		ПО ВсеТоварныеМестаНоменклатуры.Распоряжение = ТоварыКОтборуТоварныеМеста.Распоряжение
	|			И ВсеТоварныеМестаНоменклатуры.Номенклатура = ТоварыКОтборуТоварныеМеста.Номенклатура
	|			И ВсеТоварныеМестаНоменклатуры.Характеристика = ТоварыКОтборуТоварныеМеста.Характеристика
	|			И ВсеТоварныеМестаНоменклатуры.Назначение = ТоварыКОтборуТоварныеМеста.Назначение
	|			И ВсеТоварныеМестаНоменклатуры.Серия = ТоварыКОтборуТоварныеМеста.Серия
	|			И ВсеТоварныеМестаНоменклатуры.ТоварноеМесто = ТоварыКОтборуТоварныеМеста.ТоварноеМесто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Номенклатура КАК Номенклатура,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Характеристика КАК Характеристика,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Назначение КАК Назначение,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Серия КАК Серия,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Распоряжение КАК Распоряжение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА (ВсеТоварныеМестаНоменклатурыСКоличеством.ОтбираетсяОстаток + ВсеТоварныеМестаНоменклатурыСКоличеством.ОтобраноОстаток) / ВсеТоварныеМестаНоменклатурыСКоличеством.КоличествоУпаковок - (ВЫРАЗИТЬ((ВсеТоварныеМестаНоменклатурыСКоличеством.ОтбираетсяОстаток + ВсеТоварныеМестаНоменклатурыСКоличеством.ОтобраноОстаток) / ВсеТоварныеМестаНоменклатурыСКоличеством.КоличествоУпаковок КАК ЧИСЛО(12, 0))) <= 0
	|				ТОГДА ВЫРАЗИТЬ((ВсеТоварныеМестаНоменклатурыСКоличеством.ОтбираетсяОстаток + ВсеТоварныеМестаНоменклатурыСКоличеством.ОтобраноОстаток) / ВсеТоварныеМестаНоменклатурыСКоличеством.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ (ВЫРАЗИТЬ((ВсеТоварныеМестаНоменклатурыСКоличеством.ОтбираетсяОстаток + ВсеТоварныеМестаНоменклатурыСКоличеством.ОтобраноОстаток) / ВсеТоварныеМестаНоменклатурыСКоличеством.КоличествоУпаковок КАК ЧИСЛО(12, 0))) + 1
	|		КОНЕЦ) КАК КоличествоОтбираетсяОтобрано
	|ПОМЕСТИТЬ КомплектыИзТоварныхМест
	|ИЗ
	|	ВсеТоварныеМестаНоменклатурыСКоличеством КАК ВсеТоварныеМестаНоменклатурыСКоличеством
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Номенклатура,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Характеристика,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Назначение,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Серия,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтбору.Номенклатура,
	|	ТоварыКОтбору.Характеристика,
	|	ТоварыКОтбору.Назначение,
	|	ТоварыКОтбору.Серия,
	|	ТоварыКОтбору.Распоряжение,
	|	ТоварыКОтбору.Распоряжение.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТоварыКОтбору.Распоряжение.Приоритет.РеквизитДопУпорядочивания КАК Приоритет,
	|	ТоварыКОтбору.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|	ТоварыКОтбору.КОтборуОстаток - ТоварыКОтбору.ОтбираетсяОстаток - ТоварыКОтбору.ОтобраноОстаток - ЕСТЬNULL(КомплектыИзТоварныхМест.КоличествоОтбираетсяОтобрано, 0) КАК Количество
	|ПОМЕСТИТЬ ТаблицаКомплектыКОтбору
	|ИЗ
	|	ТоварыКОтбору КАК ТоварыКОтбору
	|		ЛЕВОЕ СОЕДИНЕНИЕ КомплектыИзТоварныхМест КАК КомплектыИзТоварныхМест
	|		ПО ТоварыКОтбору.Распоряжение = КомплектыИзТоварныхМест.Распоряжение
	|			И ТоварыКОтбору.Номенклатура = КомплектыИзТоварныхМест.Номенклатура
	|			И ТоварыКОтбору.Характеристика = КомплектыИзТоварныхМест.Характеристика
	|			И ТоварыКОтбору.Назначение = КомплектыИзТоварныхМест.Назначение
	|			И ТоварыКОтбору.Серия = КомплектыИзТоварныхМест.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтбору.Номенклатура,
	|	ТоварыКОтбору.Характеристика,
	|	ТоварыКОтбору.Назначение,
	|	ТоварыКОтбору.Серия,
	|	ТоварыКОтбору.Распоряжение,
	|	ВсеТоварныеМестаНоменклатурыСКоличеством.ТоварноеМесто КАК ТоварноеМесто,
	|	КомплектыИзТоварныхМест.КоличествоОтбираетсяОтобрано * ВсеТоварныеМестаНоменклатурыСКоличеством.КоличествоУпаковок - ВсеТоварныеМестаНоменклатурыСКоличеством.ОтбираетсяОстаток - ВсеТоварныеМестаНоменклатурыСКоличеством.ОтобраноОстаток КАК Количество,
	|	ТоварыКОтбору.Распоряжение.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТоварыКОтбору.Распоряжение.Приоритет.РеквизитДопУпорядочивания КАК Приоритет,
	|	ТоварыКОтбору.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоварныеМестаКОтбору
	|ИЗ
	|	ТоварыКОтбору КАК ТоварыКОтбору
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КомплектыИзТоварныхМест КАК КомплектыИзТоварныхМест
	|		ПО ТоварыКОтбору.Распоряжение = КомплектыИзТоварныхМест.Распоряжение
	|			И ТоварыКОтбору.Номенклатура = КомплектыИзТоварныхМест.Номенклатура
	|			И ТоварыКОтбору.Характеристика = КомплектыИзТоварныхМест.Характеристика
	|			И ТоварыКОтбору.Назначение = КомплектыИзТоварныхМест.Назначение
	|			И ТоварыКОтбору.Серия = КомплектыИзТоварныхМест.Серия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеТоварныеМестаНоменклатурыСКоличеством КАК ВсеТоварныеМестаНоменклатурыСКоличеством
	|		ПО ТоварыКОтбору.Распоряжение = ВсеТоварныеМестаНоменклатурыСКоличеством.Распоряжение
	|			И ТоварыКОтбору.Номенклатура = ВсеТоварныеМестаНоменклатурыСКоличеством.Номенклатура
	|			И ТоварыКОтбору.Характеристика = ВсеТоварныеМестаНоменклатурыСКоличеством.Характеристика
	|			И ТоварыКОтбору.Назначение = ВсеТоварныеМестаНоменклатурыСКоличеством.Назначение
	|			И ТоварыКОтбору.Серия = ВсеТоварныеМестаНоменклатурыСКоличеством.Серия
	|ГДЕ
	|	КомплектыИзТоварныхМест.КоличествоОтбираетсяОтобрано * ВсеТоварныеМестаНоменклатурыСКоличеством.КоличествоУпаковок - ВсеТоварныеМестаНоменклатурыСКоличеством.ОтбираетсяОстаток - ВсеТоварныеМестаНоменклатурыСКоличеством.ОтобраноОстаток > 0";
	
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС;
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
		 Запрос.Текст = Запрос.Текст + 
		 "ВЫБРАТЬ
		 |	ТоварыКОтборуОбороты.Распоряжение КАК Распоряжение,
		 |	ТоварыКОтборуОбороты.Номенклатура КАК Номенклатура,
		 |	ТоварыКОтборуОбороты.Характеристика КАК Характеристика,
		 |	ТоварыКОтборуОбороты.Назначение КАК Назначение,
		 |	ТоварыКОтборуОбороты.Серия КАК Серия,
		 |	ТоварыКОтборуОбороты.КОтборуПриход КАК КОтборуПриход
		 |ПОМЕСТИТЬ ТоварыКОтборуОбороты
		 |ИЗ
		 |	РегистрНакопления.ТоварыКОтбору.Обороты(
		 |			,
		 |			,
		 |			,
		 |			Распоряжение В (&МассивРаспоряжений)
		 |				ИЛИ Распоряжение.ЗаданиеНаПеревозку В (&МассивРаспоряжений)) КАК ТоварыКОтборуОбороты
		 |
		 |ИНДЕКСИРОВАТЬ ПО
		 |	Распоряжение,
		 |	Номенклатура,
		 |	Характеристика,
		 |	Назначение,
		 |	Серия
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	ТаблицаКомплектыКОтбору.Номенклатура КАК Номенклатура,
		 |	ТаблицаКомплектыКОтбору.Характеристика КАК Характеристика,
		 |	ТаблицаКомплектыКОтбору.Назначение КАК Назначение,
		 |	ТаблицаКомплектыКОтбору.Серия КАК Серия,
		 |	ТаблицаКомплектыКОтбору.Распоряжение КАК Распоряжение,
		 |	ТаблицаКомплектыКОтбору.Количество КАК Количество,
		 |	ТаблицаКомплектыКОтбору.ДатаОтгрузки КАК ДатаОтгрузки,
		 |	ТаблицаКомплектыКОтбору.Приоритет КАК Приоритет,
		 |	ТаблицаКомплектыКОтбору.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры
		 |ПОМЕСТИТЬ ТаблицаНоменклатуры
		 |ИЗ
		 |	ТаблицаКомплектыКОтбору КАК ТаблицаКомплектыКОтбору
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКОтборуОбороты КАК ТоварыКОтборуОбороты
		 |		ПО ТаблицаКомплектыКОтбору.Распоряжение = ТоварыКОтборуОбороты.Распоряжение
		 |			И ТаблицаКомплектыКОтбору.Номенклатура = ТоварыКОтборуОбороты.Номенклатура
		 |			И ТаблицаКомплектыКОтбору.Характеристика = ТоварыКОтборуОбороты.Характеристика
		 |			И ТаблицаКомплектыКОтбору.Назначение = ТоварыКОтборуОбороты.Назначение
		 |			И ТаблицаКомплектыКОтбору.Серия = ТоварыКОтборуОбороты.Серия
		 |ГДЕ
		 |	ТаблицаКомплектыКОтбору.Количество > ВЫБОР
		 |			КОГДА ТаблицаКомплектыКОтбору.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		 |				ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ЕСТЬNULL(ТоварыКОтборуОбороты.КОтборуПриход, 0)
		 |			ИНАЧЕ 0
		 |		КОНЕЦ";
		
		Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
			ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
		Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
			Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	ТаблицаКомплектыКОтбору.Номенклатура КАК Номенклатура,
		|	ТаблицаКомплектыКОтбору.Характеристика КАК Характеристика,
		|	ТаблицаКомплектыКОтбору.Назначение КАК Назначение,
		|	ТаблицаКомплектыКОтбору.Серия КАК Серия,
		|	ТаблицаКомплектыКОтбору.Распоряжение КАК Распоряжение,
		|	ТаблицаКомплектыКОтбору.Количество КАК Количество,
		|	ТаблицаКомплектыКОтбору.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ТаблицаКомплектыКОтбору.Приоритет КАК Приоритет,
		|	ТаблицаКомплектыКОтбору.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	ТаблицаКомплектыКОтбору КАК ТаблицаКомплектыКОтбору
		|ГДЕ
		|	ТаблицаКомплектыКОтбору.Количество > 0";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС + 
	"УНИЧТОЖИТЬ ТоварыКОтборуОстаткиНефильтрованные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыКОтборуТоварныеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыКОтбору
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВсеТоварныеМестаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВсеТоварныеМестаНоменклатурыСКоличеством
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КомплектыИзТоварныхМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКомплектыКОтбору";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
КонецПроцедуры

// Устарела. Следует использовать СкладыСервер.СоздатьЗаданияНаПеремещение
//Параметры:
//	СтруктураПараметров - Структура - имеющая следующие ключи:
//		*Склад - СправочникСсылка.Склады - ссылка на склад, который указан в расходных ордерах;
//		*Помещение - СправочникСсылка.СкладскиеПомещения - ссылка на помещение, которое указано в расходных ордерах, 
//			либо пустая ссылка справочника "Складксие помещения";
//		*ПоВсемРаспоряжениям - Булево - не используется
//		*МассивРаспоряжений - Массив - не используется;
//		*РабочийУчасток - СправочникСсылка.РабочиеУчастки - ссылка на рабочий участок, по которому будут сформированы задания на подпитку (переупаковку);
//		*НастройкаФормированияПоРабочимУчасткам - Строка - возможные значения: 
//			"СРазбиениемПоРабочимУчасткам", "ПоОдномуРабочемуУчастку", "БезРазбиенияПоРабочимУчасткам";
//		*ОграничиватьПоОбъему - Булево - параметр рабочего участка;
//		*ОграничиватьПоВесу - Булево - параметр рабочего участка;
//		*ОграничениеПоОбъему - Число - параметр рабочего участка;
//		*ОграничениеПоВесу - Число - параметр рабочего участка;
//		*Исполнитель - СправочникСсылка.Пользователи - ссылка на пользователя системы, 
//			который будет указан в созданных заданиях на подпитку (переупаковку), необязательный параметр
Процедура СоздатьЗаданияНаПодпитку(СтруктураПараметров) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ПараметрыФормированияЗаданий = ПараметрыФормированияЗаданийНаПодпитку(Ложь); // не по распоряжениям на отбор
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияЗаданий, СтруктураПараметров);
		
	ТекстСообщения = ВыполнитьПодпиткуЗБОНаСервере(СтруктураПараметров.Склад, 
																СтруктураПараметров.Помещение, 
																ПараметрыФормированияЗаданий);
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает задания на перемещение. Используется для запуска регламентного задания
// Параметры:
//	СтруктураПараметров - Структура - имеющая следующие ключи:
//		*Склад - СправочникСсылка.Склады - ссылка на склад, который указан в расходных ордерах;
//		*Помещение - СправочникСсылка.СкладскиеПомещения - ссылка на помещение, которое указано в расходных ордерах, 
//			либо пустая ссылка справочника "Складксие помещения";
//		*ПравилоСоздания - ПеречислениеСсылка.ПравилаСозданияЗаданийНаОтборРазмещение - ссылка на правило, по которому
//			будет происходить создание заданий;
//		*РазбиватьПоКоличествуЯчеек - Булево - разбивать задания по количеству ячеек;
//		*КоличествоЯчеекВЗадании - Число - максимально возможное количество ячеек в одном задании;
//		*НастройкаРазбиенияПоРабочимУчасткам - Строка - возможные значения: 
//			"СРазбиениемПоРабочимУчасткам", "ПоОдномуРабочемуУчастку", "БезРазбиенияПоРабочимУчасткам";
//		*РабочийУчасток - СправочникСсылка.РабочиеУчастки - ссылка на рабочий участок, по которому будут сформированы 
//			задания;
//		*НастройкиОтбора - КомпоновщикНастроекКомпоновкиДанных - настройки отбора товаров;
//		*ОграничиватьПоОбъему - Булево - параметр рабочего участка;
//		*ОграничиватьПоВесу - Булево - параметр рабочего участка;
//		*ОграничениеПоОбъему - Число - параметр рабочего участка;
//		*ОграничениеПоВесу - Число - параметр рабочего участка;
//		*Исполнитель - СправочникСсылка.Пользователи - ссылка на пользователя системы, 
//			который будет указан в созданных заданиях, необязательный параметр;
Процедура СоздатьЗаданияНаПеремещение(СтруктураПараметров) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	СоздатьЗаданияНаПеремещениеПоПравилу(СтруктураПараметров);
	
КонецПроцедуры

// Создает задания на перемещения
// Параметры:
//	ПараметрыСоздания - Структура - структура с ключами:
//		*Склад - СправочникСсылка.Склады - ссылка на склад, который указан в расходных ордерах;
//		*Помещение - СправочникСсылка.СкладскиеПомещения - ссылка на помещение, которое указано в расходных ордерах, 
//			либо пустая ссылка справочника "Складксие помещения";
//		*ПравилоСоздания - ПеречислениеСсылка.ПравилаСозданияЗаданийНаОтборРазмещение - ссылка на правило, по которому
//			будет происходить создание заданий;
//		*РазбиватьПоКоличествуЯчеек - Булево - разбивать задания по количеству ячеек;
//		*КоличествоЯчеекВЗадании - Число - максимально возможное количество ячеек в одном задании;
//		*НастройкаФормированияПоРабочимУчасткам - Строка - возможные значения: 
//			"СРазбиениемПоРабочимУчасткам", "ПоОдномуРабочемуУчастку", "БезРазбиенияПоРабочимУчасткам";
//		*РабочийУчасток - СправочникСсылка.РабочиеУчастки - ссылка на рабочий участок, по которому будут сформированы 
//			задания;
//		*НастройкиОтбора - КомпоновщикНастроекКомпоновкиДанных - настройки отбора товаров;
//		*ОграничиватьПоОбъему - Булево - параметр рабочего участка;
//		*ОграничиватьПоВесу - Булево - параметр рабочего участка;
//		*ОграничениеПоОбъему - Число - параметр рабочего участка;
//		*ОграничениеПоВесу - Число - параметр рабочего участка;
//		*Исполнитель - СправочникСсылка.Пользователи - ссылка на пользователя системы, 
//			который будет указан в созданных заданиях, необязательный параметр;
//
Процедура СоздатьЗаданияНаПеремещениеПоПравилу(Знач ПараметрыСоздания) Экспорт
	
	Если ПараметрыСоздания.ПравилоСозданияЗаданий = 
		Перечисления.ПравилаСозданияЗаданийНаОтборРазмещение.ПодпиткаЗонБыстрогоОтбора Тогда
		
		СоздатьПодпиткаЗонБыстрогоОтбора(ПараметрыСоздания);
		
	ИначеЕсли ПараметрыСоздания.ПравилоСозданияЗаданий = 
				Перечисления.ПравилаСозданияЗаданийНаОтборРазмещение.ПеремещениеПоПравиламРазмещенияОбособленныхТоваров Тогда
		
		СоздатьПеремещениеТоваровПоОбособлению(ПараметрыСоздания);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает задания на пересчет
//	Параметры:
//		ПараметрыГенерации - Структура - структура, имеющая следующие ключи:
//			*ПересчетПоНаполненности - Булево - только ячейки с остатками,
//			*ПересчетПоОсобымУсловиям - Булево - выбор ячеек по особым условиям (см. ПересчетСомнительныхЯчеек, ПересчетПоНастройкамПериодичности, ПересчетПоЯчейкамСОтрицательнымиОстатками)
//			*ПересчетСомнительныхЯчеек - Булево - выбирать ячейки, которые были помечены как сомнительные или в которых была ошибка отбора
//			*ПересчетПоНастройкамПериодичности - Булево - выбирать ячейки, для которых настало время выполнить пересчет,
//			*ПересчетПоЯчейкамСОтрицательнымиОстатками - Булево - выбирать ячейки, в которых есть отрицательные остатки,
//			*НастройкиОтбора - КомпоновщикНастроекКомпоновкиДанных - хранит настройки отбора товаров,
//			*РазбиватьПоРабочимУчасткам - Булево - Истина, если нужно, чтобы созданные пересчеты были разбиты по рабочим участкам,
//			*РазбиватьПоКоличествуЯчеек - Булево - Истина, если нужно, к каждом пересчете было определенное число ячеек,
//			*КоличествоЯчеекВЗадании - Число - актуален, если РазбиватьПоКоличествуЯчеек = Истина
Процедура СоздатьЗаданияНаПересчетТоваров(ПараметрыГенерации) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	КоличествоСозданныхЗаданий = Документы.ПересчетТоваров.СоздатьЗадания(ПараметрыГенерации);
	
	СтрокаСкладовСКоличеством = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
		КоличествоСозданныхЗаданий, НСтр("ru = 'задание,задания,заданий'"));
	СтрокаСообщения = НСтр("ru = 'Создано %СтрокаСкладовСКоличеством% на пересчет.'");
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%СтрокаСкладовСКоличеством%", СтрокаСкладовСКоличеством);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	
КонецПроцедуры

// Возвращает структуру параметров формирования заданий на подпитку.
//
// Параметры:
//	ПоРаспоряжениямНаОтбор - Булево, Истина - задание на подпитку формируется на основании распоряжений.
//
// Возвращаемое значение:
//	Структура - параметры формирования заданий на подпитку.
//
Функция ПараметрыФормированияЗаданийНаПодпитку(ПоРаспоряжениямНаОтбор) Экспорт
	
	ПараметрыФормированияЗаданий = Новый Структура;
	ПараметрыФормированияЗаданий.Вставить("НастройкаФормированияПоРабочимУчасткам");
	ПараметрыФормированияЗаданий.Вставить("РабочийУчасток");
	ПараметрыФормированияЗаданий.Вставить("ОграничиватьПоВесу");
	ПараметрыФормированияЗаданий.Вставить("ОграничиватьПоОбъему");
	ПараметрыФормированияЗаданий.Вставить("ОграничениеПоВесу");
	ПараметрыФормированияЗаданий.Вставить("ОграничениеПоОбъему");
	ПараметрыФормированияЗаданий.Вставить("Исполнитель");
	Если ПоРаспоряжениямНаОтбор Тогда
		ПараметрыФормированияЗаданий.Вставить("ПоРаспоряжениямНаОтбор");
		ПараметрыФормированияЗаданий.Вставить("ПоРаспоряжениямТребуетсяПодпитка", Ложь);
	КонецЕсли;

	Возврат ПараметрыФормированияЗаданий;
	
КонецФункции

// Возвращает структуру параметров создания заданий на отбор или подпитку.
//
// Возвращаемое значение:
//	Структура - параметры создания заданий на отбор или подпитку.
//
Функция СтруктураПараметровСозданияЗаданийНаОтборПодпитку() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Склад");
	СтруктураПараметров.Вставить("Помещение");
	СтруктураПараметров.Вставить("НастройкаФормированияПоРабочимУчасткам");
	СтруктураПараметров.Вставить("ОграничиватьПоВесу");
	СтруктураПараметров.Вставить("ОграничиватьПоОбъему");
	СтруктураПараметров.Вставить("ОграничениеПоВесу");
	СтруктураПараметров.Вставить("ОграничениеПоОбъему");
	СтруктураПараметров.Вставить("РабочийУчасток", Справочники.РабочиеУчастки.ПустаяСсылка());
	СтруктураПараметров.Вставить("ПоВсемРаспоряжениям");
	СтруктураПараметров.Вставить("Исполнитель", Справочники.Пользователи.ПустаяСсылка());
	СтруктураПараметров.Вставить("МассивРаспоряжений", Новый Массив);
	СтруктураПараметров.Вставить("ДействиеПриНехваткеУпаковок", 0);
	СтруктураПараметров.Вставить("ПоРаспоряжениямТребуетсяПодпитка", Ложь);
	
	Возврат СтруктураПараметров
	
КонецФункции

// Возвращает структуру параметров, используемых для переоформления расходных ордеров.
//
// Возвращаемое значение:
//	Структура - параметры, используемые для переоформления расходных ордеров.
//
Функция ПараметрыПереоформленияРасходныхОрдеров() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Склад");
	СтруктураПараметров.Вставить("Помещение");
	СтруктураПараметров.Вставить("Получатель");
	СтруктураПараметров.Вставить("ЗонаОтгрузки");
	СтруктураПараметров.Вставить("ЗаданиеНаПеревозку");
	СтруктураПараметров.Вставить("РаспоряженияНаОтгрузку", Новый Массив);
	СтруктураПараметров.Вставить("ФоновоеЗадание", Ложь);

	Возврат СтруктураПараметров
	
КонецФункции

// Возвращает массив всех возможных пустых ссылок определяемого типа ОтправительПолучательТоваров
// 
// Возвращаемое значение:
//  Массив - Массив пустых ссылок
//
Функция ПустойПолучательОтправитель() Экспорт 
	
	МассивПустыхЗначений = Новый Массив;
	
	Для Каждого ТипПолучательОтправитель Из Метаданные.ОпределяемыеТипы.ОтправительПолучательТоваров.Тип.Типы() Цикл
		ДокументСсылка = Новый (ТипПолучательОтправитель);
		МассивПустыхЗначений.Добавить(ДокументСсылка);		
	КонецЦикла;
	
	МассивПустыхЗначений.Добавить(Неопределено);
	
	Возврат МассивПустыхЗначений;
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

// Устанавливаем условное оформление для поля Склад в ТЧ объекта
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаСклада - Строка - Наименование элемента формы, содержащего склад,
//										 если оно отличается от "ТоварыСклад"
// 
Процедура УстановитьУсловноеОформлениеСкладаВТЧ(Форма,
												ИмяПоляВводаСклада = "ТоварыСклад") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСклада].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Устанавливаем условное оформление для поля Склад в шапке объекта
//    в зависимости от флага "СкладОбязателен"
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
//
Процедура УстановитьУсловноеОформлениеСкладаВШапке(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["Склад"].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладОбязателен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["Склад"].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладОбязателен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Процедура устанавливает условное оформление по действию со строкой в ордерах на отгрузку
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма для условного оформления
//
Процедура УстановитьУсловноеОформлениеПоДействиюВСтроке(Форма) Экспорт
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();

	ОбщегоНазначенияУТ.ЗаполнитьРекурсивноПоляУсловногоОформления(ЭлементУО.Поля, Форма.Элементы.ОтгружаемыеТовары.ПодчиненныеЭлементы);

	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.Действие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиЗаполнения

// Процедура проверяет ордерность по заданному виду, в случае неордерности склада пользователю выводится сообщение.
//
// Параметры:
//  Склад			 - СправочникСсылка.Склады	 - ссылка на склад, который проверяется на ордерность;
//  Дата			 - Дата						 - дата, на которую проверяется ордерность;
//  ВидОрдернойСхемы - Строка					 - возможные значения: "ПриОтраженииИзлишковНедостач", "ПриОтгрузке", "ПриПоступлении".
//  Отказ			 - Булево					 - в параметр возвращается Ложь, если проверка не пройдена
//
Процедура ПроверитьОрдерностьСклада(Склад, Дата, ВидОрдернойСхемы, Отказ) Экспорт
	ИмяРеквизитаСклад = "Объект.Склад";
	ТекстСообщения = НСтр("ru='На складе %Склад% на %Дата% не используется ордерная схема %ВидОрдернойСхемы%. Выберите другой склад'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%",Склад);
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Дата%",Формат(Дата,"ДЛФ=D"));
	Если ВидОрдернойСхемы = "ПриОтраженииИзлишковНедостач"
			И НЕ ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(Склад, Дата) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ВидОрдернойСхемы%",НСтр("ru='при отражении излишков, недостач, пересортицы и порчи'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ИмяРеквизитаСклад,,Отказ);
	ИначеЕсли ВидОрдернойСхемы = "ПриОтгрузке"
			И НЕ ИспользоватьОрдернуюСхемуПриОтгрузке(Склад, Дата) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ВидОрдернойСхемы%",НСтр("ru='при отгрузке'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ИмяРеквизитаСклад,,Отказ);
	ИначеЕсли ВидОрдернойСхемы = "ПриПоступлении"
		И НЕ ИспользоватьОрдернуюСхемуПриПоступлении(Склад, Дата) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ВидОрдернойСхемы%",НСтр("ru='при поступлении'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ИмяРеквизитаСклад,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Проверить заполнение ячеек в ТЧ при обработке проверки заполнения
//
// Параметры:
//  Объект	- ДокументОбъект - документ, в ТЧ которого нужно проверить заполнение ячеек.
//		В ТЧ обязательно наличие колонок "Склад" и "Помещение"
//  МассивНепроверяемыхРеквизитов - Массив - массив реквизитов, которые не нужно проверять платформенной проверкой
//	Отказ - Булево - отказ продолжения операции
//	ПараметрыПроверки - Структура - см. СкладыСервер.ПараметрыПроверкиЗаполненияЯчеек
//
Процедура ПроверитьЗаполнениеЯчеек(Объект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки = Неопределено)Экспорт
		
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияЯчеек();
	КонецЕсли;
	
	ИмяТЧ                 = ПараметрыПроверки.ИмяТЧ;
	ВыводитьНомераСтрок   = ПараметрыПроверки.ВыводитьНомераСтрок;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Ячейка");
		
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.Помещение КАК Помещение,
	|	ТаблицаТоваров.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ячейка = ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|					И &Период >= ВЫРАЗИТЬ(СтрокиСОшибками.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|				ТОГДА ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Помещение КАК Справочник.СкладскиеПомещения).ИспользоватьАдресноеХранение
	|								И &Период >= ВЫРАЗИТЬ(СтрокиСОшибками.Помещение КАК Справочник.СкладскиеПомещения).ДатаНачалаАдресногоХраненияОстатков
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Склад КАК Справочник.Склады).ИспользоватьАдресноеХранение
	|							И &Период >= ВЫРАЗИТЬ(СтрокиСОшибками.Склад КАК Справочник.Склады).ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ";
		
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр(
			"ТаблицаТоваров", 
			Объект[ИмяТЧ].Выгрузить(, "НомерСтроки,Склад,Помещение,Ячейка"));
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Ячейка%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Ячейка%"" в списке ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ТипЗнч(Объект) = Тип("УправляемаяФорма") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ              = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаЯчейка = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Ячейка.Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		// В выборке должны остаться только номера строк, где используется адр. хранение, но не заполнена ячейка
			
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Ячейка%", ПредставлениеРеквизитаЯчейка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Ячейка");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
				
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает параметры проверки заполнения ячеек
// 
// Возвращаемое значение:
//  Структура - структура со следующими ключами и значениями:
//  *ИмяТЧ - Строка - значение по умолчанию "Товары"
//  *ВыводитьНомераСтрок - Булево - значение по умолчанию Истина
//
Функция ПараметрыПроверкиЗаполненияЯчеек() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                 "Товары");		
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",   Истина);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура - Проверить заполнение помещений в ТЧ при обработке проверки заполнения
//
// Параметры:
//  Объект	- ДокументОбъект - документ, в ТЧ которого нужно проверить заполнение помещений.
//		В ТЧ обязательно наличие колонки "Склад" 
//  МассивНепроверяемыхРеквизитов - Массив - массив реквизитов, которые не нужно проверять платформенной проверкой
//	Отказ - Булево - отказ продолжения операции
//	ПараметрыПроверки - Структура - см. СкладыСервер.ПараметрыПроверкиЗаполненияПомещений
//
Процедура ПроверитьЗаполнениеПомещений(Объект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки = Неопределено)Экспорт
		
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияПомещений();
	КонецЕсли;
	
	ИмяТЧ                 = ПараметрыПроверки.ИмяТЧ;
	ВыводитьНомераСтрок   = ПараметрыПроверки.ВыводитьНомераСтрок;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Помещение");
		
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.Помещение КАК Помещение
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|					И &Период >= ВЫРАЗИТЬ(СтрокиСОшибками.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
		
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр(
			"ТаблицаТоваров", 
			Объект[ИмяТЧ].Выгрузить(, "НомерСтроки,Склад,Помещение"));
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Помещение%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Помещение%"" в списке ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ТипЗнч(Объект) = Тип("УправляемаяФорма") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ              	= МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаПомещение = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Помещение.Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		// В выборке должны остаться только номера строк, где используется адр. хранение, но не заполнена ячейка
			
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Помещение%", ПредставлениеРеквизитаПомещение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Помещение");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
				
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает параметры проверки заполнения ячеек
// 
// Возвращаемое значение:
//  Структура - структура со следующими ключами и значениями:
//  *ИмяТЧ - Строка - значение по умолчанию "Товары"
//  *ВыводитьНомераСтрок - Булево - значение по умолчанию Истина
//
Функция ПараметрыПроверкиЗаполненияПомещений() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                 "Товары");		
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",   Истина);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет использование ячеек в ТЧ по правилам размещения обособленных товаров
// 
// Параметры:
// 	Объект	- ДокументОбъект - документ, в ТЧ которого нужно проверить заполнение помещений.
// 		В ТЧ обязательно наличие колонок "Ячейка", "Номенклатура" "Назначение"
//	Отказ - Булево - отказ продолжения операции
//	ИмяТЧ - Строка - имя табличной части, которую нужно проверить
Процедура ПроверитьИспользованиеЯчеекПоПравиламОбособления(Объект, Отказ, ИмяТЧ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТЧ.НомерСтроки,
		|	ТаблицаТЧ.Ячейка,
		|	ТаблицаТЧ.Номенклатура,
		|	ТаблицаТЧ.Назначение
		|ПОМЕСТИТЬ ТаблицаТЧ
		|ИЗ
		|	&ТаблицаТЧ КАК ТаблицаТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТЧ.НомерСтроки,
		|	ТаблицаТЧ.Ячейка
		|ИЗ
		|	ТаблицаТЧ КАК ТаблицаТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ПО ТаблицаТЧ.Ячейка = СкладскиеЯчейки.Ссылка
		|ГДЕ
		|	СкладскиеЯчейки.ОбластьХранения.КонтролироватьОбособление
		|	И СкладскиеЯчейки.ОбластьХранения.ОбластьОбособленногоХранения
		|	И ТаблицаТЧ.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(ТаблицаТЧ.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
		
	Запрос.УстановитьПараметр("ТаблицаТЧ", 
		Объект[ИмяТЧ].Выгрузить(, "НомерСтроки, Ячейка, Номенклатура, Назначение"));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ШаблонСообщения = НСтр("ru='В строке %НомерСтроки% списка ""%ТаблицаТовары%"" в ячейку %Ячейка% запрещено размещать товары без назначения.'");
	
	Если ТипЗнч(Объект) = Тип("УправляемаяФорма") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Ячейка%", ВыборкаДетальныеЗаписи.Ячейка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаДетальныеЗаписи.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ВыборкаДетальныеЗаписи.НомерСтроки, "Помещение");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
				
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаВозможностиИзмененияСтатуса

// Проверяет возможность изменения статуса ордера на отгрузку на статус "К проверке". 
// Если все товары по ордеру отобраны, то ордер попадет в массив-результат
//
// Параметры:
//  Ордера	 - 	Массив, ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ОрдерНаПеремещениеТоваров -  ссылка на ордер или массив ссылок на ордера
// 
// Возвращаемое значение:
//  Массив - массив ссылок на ордера, которые можно перевести в статус "К проверке"
//
Функция ПроверитьОрдераНаВозможностьИзмененияСтатуса(Ордера) Экспорт
	
	МассивОрдеров = Новый Массив;
	
	Если ТипЗнч(Ордера) <> Тип("Массив") Тогда
		МассивОрдеров.Добавить(Ордера);
	Иначе
		МассивОрдеров = Ордера;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Распоряжение КАК Распоряжение,
	|	ТоварыКОтборуОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика КАК Характеристика,
	|	ТоварыКОтборуОстатки.Назначение КАК Назначение,
	|	ТоварыКОтборуОстатки.Серия КАК Серия,
	|	ТоварыКОтборуОстатки.ТоварноеМесто КАК ТоварноеМесто,
	|	ТоварыКОтборуОстатки.КОтборуОстаток КАК КОтборуОстаток,
	|	ТоварыКОтборуОстатки.ОтобраноОстаток КАК ОтобраноОстаток
	|ПОМЕСТИТЬ ТоварыКОтборуОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Остатки(, Распоряжение В (&МассивОрдеров)) КАК ТоварыКОтборуОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Распоряжение,
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Назначение,
	|	ТоварыКОтборуОстатки.Серия,
	|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток КАК Количество
	|ПОМЕСТИТЬ ТоварыНеотобранныеКомплекты
	|ИЗ
	|	ТоварыКОтборуОстатки КАК ТоварыКОтборуОстатки
	|ГДЕ
	|	ТоварыКОтборуОстатки.ТоварноеМесто = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКОтборуОстатки.Номенклатура КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ НоменклатураСТоварнымиМестами
	|ИЗ
	|	ТоварыКОтборуОстатки КАК ТоварыКОтборуОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО ТоварыКОтборуОстатки.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Ссылка,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок
	|ИЗ
	|	ТоварыКОтборуОстатки КАК ТоварыКОтборуОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок = УпаковкиЕдиницыИзмерения.Владелец
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВнутренняяТаблица.Распоряжение КАК Ордер,
	|	ПРЕДСТАВЛЕНИЕ(ВнутренняяТаблица.Распоряжение) КАК ОрдерПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНеотобранныеКомплекты.Распоряжение КАК Распоряжение,
	|		ТоварыНеотобранныеКомплекты.Номенклатура КАК Номенклатура,
	|		ТоварыНеотобранныеКомплекты.Характеристика КАК Характеристика,
	|		ТоварыНеотобранныеКомплекты.Назначение КАК Назначение,
	|		ТоварыНеотобранныеКомплекты.Серия КАК Серия,
	|		ТоварыНеотобранныеКомплекты.Количество * НоменклатураСТоварнымиМестами.КоличествоУпаковок - ЕСТЬNULL(ТоварыКОтборуОстатки.ОтобраноОстаток, 0) КАК Количество,
	|		НоменклатураСТоварнымиМестами.ТоварноеМесто КАК ТоварноеМесто
	|	ИЗ
	|		ТоварыНеотобранныеКомплекты КАК ТоварыНеотобранныеКомплекты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураСТоварнымиМестами КАК НоменклатураСТоварнымиМестами
	|			ПО ТоварыНеотобранныеКомплекты.Номенклатура = НоменклатураСТоварнымиМестами.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКОтборуОстатки КАК ТоварыКОтборуОстатки
	|			ПО ТоварыНеотобранныеКомплекты.Распоряжение = ТоварыКОтборуОстатки.Распоряжение
	|				И ТоварыНеотобранныеКомплекты.Номенклатура = ТоварыКОтборуОстатки.Номенклатура
	|				И ТоварыНеотобранныеКомплекты.Характеристика = ТоварыКОтборуОстатки.Характеристика
	|				И ТоварыНеотобранныеКомплекты.Назначение = ТоварыКОтборуОстатки.Назначение
	|				И ТоварыНеотобранныеКомплекты.Серия = ТоварыКОтборуОстатки.Серия
	|				И (НоменклатураСТоварнымиМестами.ТоварноеМесто = ТоварыКОтборуОстатки.ТоварноеМесто)
	|	ГДЕ
	|		ЕСТЬNULL(ТоварыКОтборуОстатки.ТоварноеМесто, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНеотобранныеКомплекты.Распоряжение,
	|		ТоварыНеотобранныеКомплекты.Номенклатура,
	|		ТоварыНеотобранныеКомплекты.Характеристика,
	|		ТоварыНеотобранныеКомплекты.Назначение,
	|		ТоварыНеотобранныеКомплекты.Серия,
	|		ТоварыНеотобранныеКомплекты.Количество,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	ИЗ
	|		ТоварыНеотобранныеКомплекты КАК ТоварыНеотобранныеКомплекты
	|			ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСТоварнымиМестами КАК НоменклатураСТоварнымиМестами
	|			ПО ТоварыНеотобранныеКомплекты.Номенклатура = НоменклатураСТоварнымиМестами.Номенклатура
	|	ГДЕ
	|		НоменклатураСТоварнымиМестами.Номенклатура ЕСТЬ NULL) КАК ВнутренняяТаблица
	|ГДЕ
	|	ВнутренняяТаблица.Количество > 0";
	
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Изменение статуса документа ""%Ордер%"" невозможно, т.к. не завершен отбор товаров по ордеру. Необходимо выполнить все отборы либо уменьшить количество товаров в ордере.'");
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Ордер%", Выборка.ОрдерПредставление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Индекс = МассивОрдеров.Найти(Выборка.Ордер);
		Если Индекс <> Неопределено Тогда
			МассивОрдеров.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОрдеров;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Функция имя поля склада в документе.
//
// Параметры:
//  ИмяДокумента - Строка	 - наименование документа.
// 
// Возвращаемое значение:
//  Строка - имя поля склада в документе.
//
Функция ИмяПоляСкладПоИмениДокумента(ИмяДокумента) Экспорт
	
	МенеджерДокумента = Документы[ИмяДокумента];
	СтруктураРеквизитов = Новый Структура(МенеджерДокумента.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий());
	ПараметрыУказанияСерий = МенеджерДокумента.ПараметрыУказанияСерий(СтруктураРеквизитов);
	Если ПараметрыУказанияСерий.Свойство("ИмяПоляСклад") Тогда
		ИмяПоляСклад = ПараметрыУказанияСерий.ИмяПоляСклад;
	Иначе
		Для Каждого КлючИЗначение Из ПараметрыУказанияСерий Цикл
			ИмяПоляСклад = КлючИЗначение.Значение.ИмяПоляСклад;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИмяПоляСклад;
	
КонецФункции

// Формирует список с подчиненными складами, включая переданный
//
// Параметры:
//  Склад	 - Справочник.Склады - склад, по которому формируется список
// 
// Возвращаемое значение:
//  СписокЗначений - список с подчиненными складами
//
Функция СписокПодчиненныхСкладов(Склад) Экспорт
	
	Список = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
		|	И (НЕ Склады.ЭтоГруппа
		|			ИЛИ &УсловиеПоГруппеСкладов)";
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоГруппеСкладов",
				"Склады.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоГруппеСкладов", "Ложь");
		КонецЕсли;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетСостоянийДокументов

Процедура РассчитатьНехваткуУпаковокДляОтбораПоРаспоряжениям(МенеджерВременныхТаблиц, Склад, Помещение)
	
	ТаблицаРасходаИзЯчеек = Новый ТаблицаЗначений;
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("СвободныйОстаток", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Ожидается", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("ВПриемке", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРасходаИзЯчеек.Индексы.Добавить("Номенклатура,Характеристика,Назначение,Серия,Упаковка");
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСостояний.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерНаТовары,ДокументСсылка.ОрдерНаПеремещениеТоваров,ДокументСсылка.ЗаданиеНаПеревозку"));
	ТаблицаСостояний.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаСостояний.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаСостояний.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаСостояний.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Назначение,
	|	ТоварыВЯчейкахОстатки.Серия,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.Упаковка.ТипУпаковки КАК ТипУпаковки,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстатки.Ячейка.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)
	|				ТОГДА 0
	|			ИНАЧЕ ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток
	|		КОНЕЦ) КАК СвободныйОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстатки.Ячейка.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)
	|				ТОГДА 0
	|			ИНАЧЕ ТоварыВЯчейкахОстатки.КРазмещениюОстаток
	|		КОНЕЦ) КАК Ожидается,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстатки.Ячейка.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)
	|				ТОГДА ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВПриемке
	|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|						ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|						ТаблицаНоменклатуры.Назначение КАК Назначение
	|					ИЗ
	|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
	|				И Ячейка В
	|					(ВЫБРАТЬ
	|						СпрЯчейки.Ссылка КАК СкладскаяЯчейка
	|					ИЗ
	|						Справочник.СкладскиеЯчейки КАК СпрЯчейки
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиЯчеек
	|							ПО
	|								СпрЯчейки.Ссылка = БлокировкиЯчеек.Ячейка
	|									И (БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
	|										ИЛИ БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Отбор))
	|					ГДЕ
	|						БлокировкиЯчеек.ТипБлокировки ЕСТЬ NULL 
	|						И СпрЯчейки.Помещение = &Помещение
	|						И СпрЯчейки.Владелец = &Склад
	|						И НЕ СпрЯчейки.ЭтоГруппа
	|						И (СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
	|							ИЛИ СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Архив)
	|							ИЛИ СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)))) КАК ТоварыВЯчейкахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Назначение,
	|	ТоварыВЯчейкахОстатки.Серия,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Упаковка.ТипУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок,
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Назначение,
	|	ТоварыВЯчейкахОстатки.Серия
	|ПОМЕСТИТЬ ТоварныеМеста
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|		ПО УпаковкиЕдиницыИзмерения.Владелец = ТоварыВЯчейкахОстатки.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Товарноеместо)
	|	И ЕСТЬNULL(ТоварыВЯчейкахОстатки.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Товарноеместо)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок,
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Назначение,
	|	ТоварыВЯчейкахОстатки.Серия
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|		ПО УпаковкиЕдиницыИзмерения.Владелец = ТоварыВЯчейкахОстатки.Номенклатура.НаборУпаковок
	|ГДЕ
	|	ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Товарноеместо)
	|	И ЕСТЬNULL(ТоварыВЯчейкахОстатки.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Товарноеместо)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныеМеста.Номенклатура,
	|	ТоварныеМеста.Характеристика,
	|	ТоварныеМеста.Назначение,
	|	ТоварныеМеста.Серия,
	|	ТоварныеМеста.КоличествоУпаковок,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.СвободныйОстаток, 0) КАК СвободныйОстаток,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Ожидается, 0) КАК Ожидается,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВПриемке, 0) КАК ВПриемке
	|ПОМЕСТИТЬ ТоварыВЯчейкахОстаткиКомплекты
	|ИЗ
	|	ТоварныеМеста КАК ТоварныеМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|		ПО ТоварныеМеста.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ТоварныеМеста.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И ТоварныеМеста.Назначение = ТоварыВЯчейкахОстатки.Назначение
	|			И ТоварныеМеста.Серия = ТоварыВЯчейкахОстатки.Серия
	|ГДЕ
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Товарноеместо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстаткиКомплекты.Номенклатура,
	|	ТоварыВЯчейкахОстаткиКомплекты.Характеристика,
	|	ТоварыВЯчейкахОстаткиКомплекты.Назначение,
	|	ТоварыВЯчейкахОстаткиКомплекты.Серия,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстаткиКомплекты.СвободныйОстаток / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок - (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.СвободныйОстаток / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
	|				ТОГДА ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.СвободныйОстаток / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.СвободныйОстаток / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
	|		КОНЕЦ) КАК СвободныйОстаток,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстаткиКомплекты.Ожидается / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок - (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.Ожидается / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
	|				ТОГДА ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.Ожидается / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.Ожидается / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
	|		КОНЕЦ) КАК Ожидается,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстаткиКомплекты.ВПриемке / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок - (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.ВПриемке / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
	|				ТОГДА ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.ВПриемке / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.ВПриемке / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
	|		КОНЕЦ) КАК ВПриемке
	|ПОМЕСТИТЬ ТоварыВЯчейкахОстаткиКомплектов
	|ИЗ
	|	ТоварыВЯчейкахОстаткиКомплекты КАК ТоварыВЯчейкахОстаткиКомплекты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстаткиКомплекты.Номенклатура,
	|	ТоварыВЯчейкахОстаткиКомплекты.Характеристика,
	|	ТоварыВЯчейкахОстаткиКомплекты.Назначение,
	|	ТоварыВЯчейкахОстаткиКомплекты.Серия
	|
	|ИМЕЮЩИЕ
	|	(МИНИМУМ(ВЫБОР
	|				КОГДА ТоварыВЯчейкахОстаткиКомплекты.СвободныйОстаток / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок - (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.СвободныйОстаток / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
	|					ТОГДА ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.СвободныйОстаток / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|				ИНАЧЕ (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.СвободныйОстаток / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
	|			КОНЕЦ) <> 0
	|		ИЛИ МИНИМУМ(ВЫБОР
	|				КОГДА ТоварыВЯчейкахОстаткиКомплекты.Ожидается / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок - (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.Ожидается / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
	|					ТОГДА ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.Ожидается / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|				ИНАЧЕ (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.Ожидается / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
	|			КОНЕЦ) <> 0
	|		ИЛИ МИНИМУМ(ВЫБОР
	|				КОГДА ТоварыВЯчейкахОстаткиКомплекты.ВПриемке / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок - (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.ВПриемке / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
	|					ТОГДА ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.ВПриемке / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|				ИНАЧЕ (ВЫРАЗИТЬ(ТоварыВЯчейкахОстаткиКомплекты.ВПриемке / ТоварыВЯчейкахОстаткиКомплекты.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
	|			КОНЕЦ) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутренняяТаблица.Номенклатура КАК Номенклатура,
	|	ВнутренняяТаблица.Характеристика КАК Характеристика,
	|	ВнутренняяТаблица.Назначение КАК Назначение,
	|	ВнутренняяТаблица.Серия КАК Серия,
	|	ВнутренняяТаблица.Распоряжение КАК Распоряжение,
	|	ВнутренняяТаблица.ДатаОтгрузки,
	|	ВнутренняяТаблица.Приоритет,
	|	ВнутренняяТаблица.Количество,
	|	ВнутренняяТаблица.СвободныйОстаток,
	|	ВнутренняяТаблица.Ожидается,
	|	ВнутренняяТаблица.ВПриемке,
	|	ВнутренняяТаблица.Упаковка,
	|	ВнутренняяТаблица.КоличествоВУпаковке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|		ТаблицаНоменклатуры.Назначение КАК Назначение,
	|		ТаблицаНоменклатуры.Серия КАК Серия,
	|		ТаблицаНоменклатуры.Распоряжение КАК Распоряжение,
	|		ТаблицаНоменклатуры.ДатаОтгрузки КАК ДатаОтгрузки,
	|		ТаблицаНоменклатуры.Приоритет КАК Приоритет,
	|		ТаблицаНоменклатуры.Количество КАК Количество,
	|		СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.СвободныйОстаток, 0)) КАК СвободныйОстаток,
	|		СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.Ожидается, 0)) КАК Ожидается,
	|		ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВПриемке, 0) КАК ВПриемке,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		1 КАК КоличествоВУпаковке
	|	ИЗ
	|		ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстаткиКомплекты КАК ТоварыВЯчейкахОстатки
	|			ПО ТаблицаНоменклатуры.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|				И ТаблицаНоменклатуры.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|				И ТаблицаНоменклатуры.Назначение = ТоварыВЯчейкахОстатки.Назначение
	|				И (ВЫБОР
	|					КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыВЯчейкахОстатки.Серия
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаНоменклатуры.Характеристика,
	|		ТаблицаНоменклатуры.ДатаОтгрузки,
	|		ТаблицаНоменклатуры.Приоритет,
	|		ТаблицаНоменклатуры.Номенклатура,
	|		ТаблицаНоменклатуры.Назначение,
	|		ТаблицаНоменклатуры.Серия,
	|		ТаблицаНоменклатуры.Распоряжение,
	|		ТаблицаНоменклатуры.Количество,
	|		ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВПриемке, 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНоменклатуры.Номенклатура,
	|		ТаблицаНоменклатуры.Характеристика,
	|		ТаблицаНоменклатуры.Назначение,
	|		ТаблицаНоменклатуры.Серия,
	|		ТаблицаНоменклатуры.Распоряжение,
	|		ТаблицаНоменклатуры.ДатаОтгрузки,
	|		ТаблицаНоменклатуры.Приоритет,
	|		ТаблицаНоменклатуры.Количество,
	|		СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.СвободныйОстаток, 0)),
	|		СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.Ожидается, 0)),
	|		ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВПриемке, 0),
	|		ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|	ИЗ
	|		ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|			ПО ТаблицаНоменклатуры.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|				И ТаблицаНоменклатуры.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|				И ТаблицаНоменклатуры.Назначение = ТоварыВЯчейкахОстатки.Назначение
	|				И (ВЫБОР
	|					КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыВЯчейкахОстатки.Серия
	|				КОНЕЦ)
	|				И (ТоварыВЯчейкахОстатки.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ИЛИ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) <= ТаблицаНоменклатуры.Количество)
	|	ГДЕ
	|		ЕСТЬNULL(ТоварыВЯчейкахОстатки.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Товарноеместо)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаНоменклатуры.Характеристика,
	|		ТаблицаНоменклатуры.ДатаОтгрузки,
	|		ТаблицаНоменклатуры.Приоритет,
	|		ТаблицаНоменклатуры.Номенклатура,
	|		ТаблицаНоменклатуры.Назначение,
	|		ТаблицаНоменклатуры.Серия,
	|		ТаблицаНоменклатуры.Распоряжение,
	|		ТаблицаНоменклатуры.Количество,
	|		ТоварыВЯчейкахОстатки.Упаковка,
	|		ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВПриемке, 0)) КАК ВнутренняяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВнутренняяТаблица.ДатаОтгрузки, ДЕНЬ),
	|	ВнутренняяТаблица.Приоритет,
	|	ВнутренняяТаблица.ДатаОтгрузки,
	|	ВнутренняяТаблица.Распоряжение,
	|	ВнутренняяТаблица.Номенклатура,
	|	ВнутренняяТаблица.Характеристика,
	|	ВнутренняяТаблица.Назначение,
	|	ВнутренняяТаблица.Серия,
	|	ВнутренняяТаблица.КоличествоВУпаковке УБЫВ
	|ИТОГИ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейкахОстатки.Упаковка", Неопределено));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	
	ВыборкаПоРаспоряжениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРаспоряжениям.Следующий() Цикл
		
		ВыборкаПоНоменклатуре =  ВыборкаПоРаспоряжениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		
		СтрутураОтбора = Новый Структура("Номенклатура,Упаковка,Назначение,Характеристика,Серия");
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
				
				ВыборкаПоНазначениям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоНазначениям.Следующий() Цикл
					
					ВыборкаПоСериям = ВыборкаПоНазначениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоСериям.Следующий() Цикл 
						
						Выборка = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						КоличествоКОтбору = Неопределено;
						ВзялиИз = "Хранение";
						
						Пока Выборка.Следующий() Цикл
							
							Если КоличествоКОтбору = Неопределено Тогда
								
								КоличествоКОтбору = Выборка.Количество;
								
							КонецЕсли;
							
							Если Выборка.СвободныйОстаток > 0
								Или Выборка.Ожидается > 0
								Или Выборка.ВПриемке > 0 Тогда
								
								ЗаполнитьЗначенияСвойств(СтрутураОтбора, Выборка);
								
								МассивНайденныхСтрок = ТаблицаРасходаИзЯчеек.НайтиСтроки(СтрутураОтбора);
								
								Если МассивНайденныхСтрок.Количество() = 0 Тогда
									СтрокаРасхода 						= ТаблицаРасходаИзЯчеек.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаРасхода, Выборка);
								Иначе
									СтрокаРасхода = МассивНайденныхСтрок[0];
								КонецЕсли;
								
								Если СтрокаРасхода.СвободныйОстаток > 0 Тогда 
									
									Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
										КоличествоВРаспоряжение = Мин(Цел(КоличествоКОтбору/Выборка.КоличествоВУпаковке),СтрокаРасхода.СвободныйОстаток);
									Иначе
										КоличествоВРаспоряжение = Мин(КоличествоКОтбору/Выборка.КоличествоВУпаковке,СтрокаРасхода.СвободныйОстаток);
									КонецЕсли;
									
									Если КоличествоВРаспоряжение > 0 Тогда
										СтрокаРасхода.СвободныйОстаток = СтрокаРасхода.СвободныйОстаток - КоличествоВРаспоряжение; 
										КоличествоКОтбору = КоличествоКОтбору - КоличествоВРаспоряжение * Выборка.КоличествоВУпаковке;
									КонецЕсли;
									
								КонецЕсли;
								
								Если Выборка.Ожидается > 0
									И КоличествоКОтбору > 0 Тогда
									
									Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
										КоличествоВРаспоряжение = Мин(Цел(КоличествоКОтбору/Выборка.КоличествоВУпаковке),СтрокаРасхода.Ожидается);
									Иначе
										КоличествоВРаспоряжение = Мин(КоличествоКОтбору/Выборка.КоличествоВУпаковке,СтрокаРасхода.Ожидается);
									КонецЕсли;
									
									Если КоличествоВРаспоряжение > 0 Тогда
										СтрокаРасхода.Ожидается = СтрокаРасхода.Ожидается - КоличествоВРаспоряжение; 
										КоличествоКОтбору = КоличествоКОтбору - КоличествоВРаспоряжение * Выборка.КоличествоВУпаковке;
										
										ВзялиИз = "Ожидаемое";
									КонецЕсли;
								КонецЕсли;
								
								Если Выборка.ВПриемке > 0
									И КоличествоКОтбору > 0 Тогда
									
									Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
										КоличествоВРаспоряжение = Мин(Цел(КоличествоКОтбору/Выборка.КоличествоВУпаковке),СтрокаРасхода.ВПриемке);
									Иначе
										КоличествоВРаспоряжение = Мин(КоличествоКОтбору/Выборка.КоличествоВУпаковке,СтрокаРасхода.ВПриемке);
									КонецЕсли;
									
									Если КоличествоВРаспоряжение > 0 Тогда
										СтрокаРасхода.ВПриемке = СтрокаРасхода.ВПриемке - КоличествоВРаспоряжение; 
										КоличествоКОтбору = КоличествоКОтбору - КоличествоВРаспоряжение * Выборка.КоличествоВУпаковке;
										
										ВзялиИз = "Приемка";
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
							Если КоличествоКОтбору = 0 Тогда
								СтрокаСостояния = ТаблицаСостояний.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаСостояния, ВыборкаПоСериям);
								Если ВзялиИз = "Хранение" Тогда
									СтрокаСостояния.Состояние = 3;
								ИначеЕсли ВзялиИз = "Ожидаемое" Тогда
									СтрокаСостояния.Состояние = 4;
								ИначеЕсли ВзялиИз = "Приемка" Тогда
									СтрокаСостояния.Состояние = 5;
								КонецЕсли;
								
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если КоличествоКОтбору <> 0 Тогда
							
							СтрокаСостояния = ТаблицаСостояний.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСостояния, ВыборкаПоСериям);
							СтрокаСостояния.Состояние = 6;				
							
						КонецЕсли;	
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСостояний.Номенклатура КАК Номенклатура,
	|	ТаблицаСостояний.Распоряжение КАК Распоряжение,
	|	ТаблицаСостояний.Характеристика КАК Характеристика,
	|	ТаблицаСостояний.Назначение КАК Назначение,
	|	ТаблицаСостояний.Серия КАК Серия,
	|	ТаблицаСостояний.Состояние КАК Состояние
	|ПОМЕСТИТЬ СостоянияПоТоварамКОтбору
	|ИЗ
	|	&ТаблицаСостояний КАК ТаблицаСостояний";
	
	Запрос.УстановитьПараметр("ТаблицаСостояний", ТаблицаСостояний);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область Подпитка

Функция СформироватьТаблицуПотребностейВУпаковках(Склад, Помещение, МенеджерВременныхТаблиц, ПараметрыФормированияЗаданий)
	
	// Формирование Товаров к Размещению.  Макс(ПрогнозПоРаспоряжениям,ПрогнозПоИстории)
	// Отбор Товаров для разупаковки(Уменьшение потребности в упаковках для которых нет правил размещения в Областях и попытка их
	// разупаковки и увелечении потребности в меньших упаковках)
	ТекстЗапроса = "";
	Если Не ПараметрыФормированияЗаданий.Свойство("ПоРаспоряжениямНаОтбор") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрогнозыОбъединение.Номенклатура КАК Номенклатура,
		|	ПрогнозыОбъединение.Характеристика КАК Характеристика,
		|	ПрогнозыОбъединение.Назначение КАК Назначение,
		|	ПрогнозыОбъединение.Серия КАК Серия,
		|	ПрогнозыОбъединение.Упаковка КАК Упаковка,
		|	МАКСИМУМ(ПрогнозыОбъединение.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	МАКСИМУМ(ПрогнозыОбъединение.Количество) КАК Количество
		|ПОМЕСТИТЬ УпаковкиКПодпиткеДляЗапроса
		|ИЗ
		|	(ВЫБРАТЬ
		|		УпаковкиПоРаспоряжениям.Номенклатура КАК Номенклатура,
		|		УпаковкиПоРаспоряжениям.Характеристика КАК Характеристика,
		|		УпаковкиПоРаспоряжениям.Назначение КАК Назначение,
		|		УпаковкиПоРаспоряжениям.Серия КАК Серия,
		|		УпаковкиПоРаспоряжениям.КоличествоУпаковок КАК КоличествоУпаковок,
		|		УпаковкиПоРаспоряжениям.Количество КАК Количество,
		|		УпаковкиПоРаспоряжениям.Упаковка КАК Упаковка
		|	ИЗ
		|		УпаковкиПоРаспоряжениям КАК УпаковкиПоРаспоряжениям
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПрогнозыРасходаУпаковок.Номенклатура,
		|		ПрогнозыРасходаУпаковок.Характеристика,
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
		|		ПрогнозыРасходаУпаковок.Серия,
		|		ВЫБОР
		|			КОГДА ПрогнозыРасходаУпаковок.НазначеноПользователем
		|				ТОГДА ПрогнозыРасходаУпаковок.НормативноеКоличествоЗапаса
		|			КОГДА ПрогнозыРасходаУпаковок.ВероятностьОтгрузкиВТечениеДня >= НастройкиАдресныхСкладов.МинимальнаяВероятностьОтгрузки
		|				ТОГДА ВЫБОР
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.XКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.YКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаY.Порядок, 0) * 0.2
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаZ.Порядок, 0) * 0.2
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПрогнозыРасходаУпаковок.НазначеноПользователем
		|				ТОГДА ПрогнозыРасходаУпаковок.НормативноеКоличествоЗапаса
		|			КОГДА ПрогнозыРасходаУпаковок.ВероятностьОтгрузкиВТечениеДня >= НастройкиАдресныхСкладов.МинимальнаяВероятностьОтгрузки
		|				ТОГДА ВЫБОР
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.XКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.YКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаY.Порядок, 0) * 0.2
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаZ.Порядок, 0) * 0.2
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ * &ТекстЗапросаКоэффициентУпаковки1,
		|		ПрогнозыРасходаУпаковок.Упаковка
		|	ИЗ
		|		РегистрСведений.ПрогнозыРасходаУпаковок КАК ПрогнозыРасходаУпаковок
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
		|			ПО ПрогнозыРасходаУпаковок.Склад = НастройкиАдресныхСкладов.Склад
		|				И ПрогнозыРасходаУпаковок.Помещение = НастройкиАдресныхСкладов.Помещение
		|	ГДЕ
		|		ПрогнозыРасходаУпаковок.Склад = &Склад
		|		И ПрогнозыРасходаУпаковок.Помещение = &Помещение
		|		И ВЫБОР
		|				КОГДА ПрогнозыРасходаУпаковок.НазначеноПользователем
		|					ТОГДА ПрогнозыРасходаУпаковок.НормативноеКоличествоЗапаса
		|				КОГДА ПрогнозыРасходаУпаковок.ВероятностьОтгрузкиВТечениеДня >= НастройкиАдресныхСкладов.МинимальнаяВероятностьОтгрузки
		|					ТОГДА ВЫБОР
		|							КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.XКласс)
		|								ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|							КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.YКласс)
		|								ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|							КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс)
		|								ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ > 0) КАК ПрогнозыОбъединение
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрогнозыОбъединение.Серия,
		|	ПрогнозыОбъединение.Номенклатура,
		|	ПрогнозыОбъединение.Назначение,
		|	ПрогнозыОбъединение.Упаковка,
		|	ПрогнозыОбъединение.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковкиКПодпиткеДляЗапроса.Номенклатура,
	|	УпаковкиКПодпиткеДляЗапроса.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|	УпаковкиКПодпиткеДляЗапроса.Характеристика,
	|	УпаковкиКПодпиткеДляЗапроса.Серия,
	|	УпаковкиКПодпиткеДляЗапроса.Назначение,
	|	УпаковкиКПодпиткеДляЗапроса.Упаковка КАК ТребуемаяУпаковка,
	|	ЕСТЬNULL(УпаковкиКПодпиткеДляЗапроса.Упаковка.СкладскаяГруппа, ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка)) КАК СкладскаяГруппаТребуемойУпаковки,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Коэффициент,
	|	УпаковкиКПодпиткеДляЗапроса.Количество,
	|	УпаковкиКПодпиткеДляЗапроса.КоличествоУпаковок,
	|	ЕСТЬNULL(ВариантыПереупаковки.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК БолееМелкаяУпаковка,
	|	ВЫБОР
	|		КОГДА ВариантыПереупаковки.Упаковка ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
	|	КОНЕЦ КАК КоэффициентМелкойУпаковки,
	|	ВЫБОР
	|		КОГДА ВариантыПереупаковки.Упаковка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка)
	|		ИНАЧЕ ВариантыПереупаковки.Упаковка.СкладскаяГруппа
	|	КОНЕЦ КАК СкладсккаяГруппаМелкойУпаковки,
	|	ЕСТЬNULL(ВариантыПереупаковки.Количество, 0) КАК КоэффициентПересчетаВМелкуюУпаковку
	|ПОМЕСТИТЬ УпаковкиКПодпиткеСВариантамиРазупаковки
	|ИЗ
	|	УпаковкиКПодпиткеДляЗапроса КАК УпаковкиКПодпиткеДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|		ПО УпаковкиКПодпиткеДляЗапроса.Упаковка = ВариантыПереупаковки.Источник
	|			И (УпаковкиКПодпиткеДляЗапроса.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.Номенклатура,
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.Характеристика,
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.Серия,
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.Назначение,
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.ТребуемаяУпаковка,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТребуемойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПравилаРазмещенияБолееМелкойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.БолееМелкаяУпаковка
	|				КОНЕЦ
	|		ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.ТребуемаяУпаковка
	|	КОНЕЦ КАК УпаковкаКПодпитке,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТребуемойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПравилаРазмещенияБолееМелкойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.КоличествоУпаковок * УпаковкиКПодпиткеСВариантамиРазупаковки.КоэффициентПересчетаВМелкуюУпаковку
	|				КОНЕЦ
	|		ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.КоличествоУпаковок
	|	КОНЕЦ КАК КоличествоУпаковокКПодпитке,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТребуемойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПравилаРазмещенияБолееМелкойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.КоэффициентМелкойУпаковки
	|				КОНЕЦ
	|		ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.Коэффициент
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ РанжированиеВариантовРазупаковки
	|ИЗ
	|	УпаковкиКПодпиткеСВариантамиРазупаковки КАК УпаковкиКПодпиткеСВариантамиРазупаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТребуемойУпаковки
	|		ПО УпаковкиКПодпиткеСВариантамиРазупаковки.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТребуемойУпаковки.СкладскаяГруппаНоменклатуры
	|			И УпаковкиКПодпиткеСВариантамиРазупаковки.СкладскаяГруппаТребуемойУпаковки = ПравилаРазмещенияТребуемойУпаковки.СкладскаяГруппаУпаковок
	|			И (ПравилаРазмещенияТребуемойУпаковки.Склад = &Склад)
	|			И (ПравилаРазмещенияТребуемойУпаковки.Помещение = &Помещение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияБолееМелкойУпаковки
	|		ПО УпаковкиКПодпиткеСВариантамиРазупаковки.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияБолееМелкойУпаковки.СкладскаяГруппаНоменклатуры
	|			И УпаковкиКПодпиткеСВариантамиРазупаковки.СкладсккаяГруппаМелкойУпаковки = ПравилаРазмещенияБолееМелкойУпаковки.СкладскаяГруппаУпаковок
	|			И (ПравилаРазмещенияБолееМелкойУпаковки.Склад = &Склад)
	|			И (ПравилаРазмещенияБолееМелкойУпаковки.Помещение = &Помещение)
	|ГДЕ
	|	НЕ ВЫБОР
	|				КОГДА ПравилаРазмещенияТребуемойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ПравилаРазмещенияБолееМелкойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|								ТОГДА NULL
	|							ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.БолееМелкаяУпаковка
	|						КОНЕЦ
	|				ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.ТребуемаяУпаковка
	|			КОНЕЦ ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РанжированиеВариантовРазупаковки.Номенклатура,
	|	РанжированиеВариантовРазупаковки.Характеристика,
	|	РанжированиеВариантовРазупаковки.Серия,
	|	РанжированиеВариантовРазупаковки.Назначение,
	|	РанжированиеВариантовРазупаковки.ТребуемаяУпаковка,
	|	МАКСИМУМ(РанжированиеВариантовРазупаковки.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ МаксимальныйРангПереупаковки
	|ИЗ
	|	РанжированиеВариантовРазупаковки КАК РанжированиеВариантовРазупаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	РанжированиеВариантовРазупаковки.Номенклатура,
	|	РанжированиеВариантовРазупаковки.Характеристика,
	|	РанжированиеВариантовРазупаковки.Серия,
	|	РанжированиеВариантовРазупаковки.Назначение,
	|	РанжированиеВариантовРазупаковки.ТребуемаяУпаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РанжированиеВариантовРазупаковки.Номенклатура,
	|	РанжированиеВариантовРазупаковки.Характеристика,
	|	РанжированиеВариантовРазупаковки.Серия,
	|	РанжированиеВариантовРазупаковки.Назначение,
	|	РанжированиеВариантовРазупаковки.УпаковкаКПодпитке КАК Упаковка,
	|	СУММА(РанжированиеВариантовРазупаковки.КоличествоУпаковокКПодпитке) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ УпаковкиКПодпитке
	|ИЗ
	|	РанжированиеВариантовРазупаковки КАК РанжированиеВариантовРазупаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйРангПереупаковки КАК МаксимальныйРангПереупаковки
	|		ПО РанжированиеВариантовРазупаковки.Номенклатура = МаксимальныйРангПереупаковки.Номенклатура
	|			И РанжированиеВариантовРазупаковки.Характеристика = МаксимальныйРангПереупаковки.Характеристика
	|			И РанжированиеВариантовРазупаковки.Серия = МаксимальныйРангПереупаковки.Серия
	|			И РанжированиеВариантовРазупаковки.Назначение = МаксимальныйРангПереупаковки.Назначение
	|			И РанжированиеВариантовРазупаковки.ТребуемаяУпаковка = МаксимальныйРангПереупаковки.ТребуемаяУпаковка
	|			И РанжированиеВариантовРазупаковки.Приоритет = МаксимальныйРангПереупаковки.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	РанжированиеВариантовРазупаковки.Номенклатура,
	|	РанжированиеВариантовРазупаковки.УпаковкаКПодпитке,
	|	РанжированиеВариантовРазупаковки.Характеристика,
	|	РанжированиеВариантовРазупаковки.Серия,
	|	РанжированиеВариантовРазупаковки.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыПереупаковки.Упаковка,
	|	ВариантыПереупаковки.Источник,
	|	УпаковкиКПодпитке.Номенклатура,
	|	УпаковкиКПодпитке.Характеристика,
	|	УпаковкиКПодпитке.Серия,
	|	УпаковкиКПодпитке.Назначение,
	|	УпаковкиКПодпитке.КоличествоУпаковок
	|ПОМЕСТИТЬ ИсточникиУпаковокКПодпитке
	|ИЗ
	|	УпаковкиКПодпитке КАК УпаковкиКПодпитке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|		ПО УпаковкиКПодпитке.Упаковка = ВариантыПереупаковки.Упаковка
	|ГДЕ
	|	ВариантыПереупаковки.Источник <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиКПодпитке.Упаковка,
	|	УпаковкиКПодпитке.Упаковка,
	|	УпаковкиКПодпитке.Номенклатура,
	|	УпаковкиКПодпитке.Характеристика,
	|	УпаковкиКПодпитке.Серия,
	|	УпаковкиКПодпитке.Назначение,
	|	УпаковкиКПодпитке.КоличествоУпаковок
	|ИЗ
	|	УпаковкиКПодпитке КАК УпаковкиКПодпитке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиУпаковокКПодпитке.Номенклатура,
	|	ИсточникиУпаковокКПодпитке.Характеристика,
	|	ИсточникиУпаковокКПодпитке.Серия,
	|	ИсточникиУпаковокКПодпитке.Назначение
	|ПОМЕСТИТЬ ТоварыКПодпитке
	|ИЗ
	|	ИсточникиУпаковокКПодпитке КАК ИсточникиУпаковокКПодпитке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка
	|ПОМЕСТИТЬ НеЗаблокированныеЯчейки
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиСкладскихЯчеек
	|		ПО СкладскиеЯчейки.Ссылка = БлокировкиСкладскихЯчеек.Ячейка
	|			И (БлокировкиСкладскихЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
	|				ИЛИ БлокировкиСкладскихЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Отбор))
	|ГДЕ
	|	(СкладскиеЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
	|			ИЛИ СкладскиеЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Архив))
	|	И БлокировкиСкладскихЯчеек.Ячейка ЕСТЬ NULL 
	|	И СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Помещение = &Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПодпитке.Номенклатура,
	|	ТоварыКПодпитке.Характеристика,
	|	ТоварыКПодпитке.Серия,
	|	ТоварыКПодпитке.Назначение,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки4, 1) КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.СкладскаяГруппа, ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыНоменклатуры.ПустаяСсылка)) КАК СкладскаяГруппаУпаковок,
	|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК Остаток,
	|	СУММА(ТоварыВЯчейкахОстатки.КРазмещениюОстаток) КАК Ожидается,
	|	ТоварыВЯчейкахОстатки.Ячейка,
	|	ТоварыВЯчейкахОстатки.Ячейка.УровеньДоступности КАК УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Ячейка.РабочийУчасток КАК РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.Ячейка.Код КАК Код,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения КАК ОбластьХранения,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
	|	&ТекстЗапросаВесУпаковки1 КАК Вес,
	|	&ТекстЗапросаОбъемУпаковки1 КАК Объем
	|ПОМЕСТИТЬ ОстаткиВЯчейках
	|ИЗ
	|	ТоварыКПодпитке КАК ТоварыКПодпитке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				,
	|				Ячейка В
	|						(ВЫБРАТЬ
	|							НеЗаблокированныеЯчейки.Ссылка КАК Ячейка
	|						ИЗ
	|							НеЗаблокированныеЯчейки КАК НеЗаблокированныеЯчейки)
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТоварыКПодпитке.Номенклатура,
	|							ТоварыКПодпитке.Характеристика
	|						ИЗ
	|							ТоварыКПодпитке КАК ТоварыКПодпитке)) КАК ТоварыВЯчейкахОстатки
	|		ПО ТоварыКПодпитке.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ТоварыКПодпитке.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И ТоварыКПодпитке.Назначение = ТоварыВЯчейкахОстатки.Назначение
	|			И (ВЫБОР
	|				КОГДА ТоварыКПодпитке.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТоварыКПодпитке.Серия = ТоварыВЯчейкахОстатки.Серия
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПодпитке.Номенклатура,
	|	ТоварыКПодпитке.Характеристика,
	|	ТоварыКПодпитке.Назначение,
	|	ТоварыКПодпитке.Серия,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.Ячейка,
	|	ТоварыВЯчейкахОстатки.Ячейка.УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Ячейка.Код,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.СкладскаяГруппа, ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыНоменклатуры.ПустаяСсылка)),
	|	ТоварыВЯчейкахОстатки.Ячейка.РабочийУчасток,
	|	&ТекстЗапросаВесУпаковки1,
	|	&ТекстЗапросаОбъемУпаковки1,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки4, 1)
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) > 0
	|		ИЛИ СУММА(ТоварыВЯчейкахОстатки.КРазмещениюОстаток) > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Серия,
	|	ОстаткиВЯчейках.Назначение,
	|	СУММА(ОстаткиВЯчейках.Остаток) КАК Остаток,
	|	СУММА(ОстаткиВЯчейках.Ожидается) КАК Ожидается,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.КоличествоВУпаковке,
	|	ОстаткиВЯчейках.Вес,
	|	ОстаткиВЯчейках.Объем
	|ПОМЕСТИТЬ ОстаткиУпаковок
	|ИЗ
	|	ОстаткиВЯчейках КАК ОстаткиВЯчейках
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.Серия,
	|	ОстаткиВЯчейках.Назначение,
	|	ОстаткиВЯчейках.КоличествоВУпаковке,
	|	ОстаткиВЯчейках.Вес,
	|	ОстаткиВЯчейках.Объем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиУпаковокКПодпитке.Упаковка,
	|	ИсточникиУпаковокКПодпитке.Номенклатура,
	|	ИсточникиУпаковокКПодпитке.Характеристика,
	|	ИсточникиУпаковокКПодпитке.Серия,
	|	ИсточникиУпаковокКПодпитке.Назначение,
	|	ИсточникиУпаковокКПодпитке.КоличествоУпаковок
	|ПОМЕСТИТЬ УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять
	|ИЗ
	|	ИсточникиУпаковокКПодпитке КАК ИсточникиУпаковокКПодпитке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиУпаковок КАК ОстаткиУпаковокИсходныхУпаковок
	|		ПО ИсточникиУпаковокКПодпитке.Номенклатура = ОстаткиУпаковокИсходныхУпаковок.Номенклатура
	|			И ИсточникиУпаковокКПодпитке.Характеристика = ОстаткиУпаковокИсходныхУпаковок.Характеристика
	|			И ИсточникиУпаковокКПодпитке.Серия = ОстаткиУпаковокИсходныхУпаковок.Серия
	|			И ИсточникиУпаковокКПодпитке.Назначение = ОстаткиУпаковокИсходныхУпаковок.Назначение
	|			И ИсточникиУпаковокКПодпитке.Источник = ОстаткиУпаковокИсходныхУпаковок.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки5, 1) КАК Коэффициент,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Номенклатура,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Характеристика,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Серия,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Назначение,
	|	ВЫБОР
	|		КОГДА УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.КоличествоУпаковок - ЕСТЬNULL(ОстаткиУпаковок.Остаток, 0) - ЕСТЬNULL(ОстаткиУпаковок.Ожидается, 0) КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.КоличествоУпаковок - ЕСТЬNULL(ОстаткиУпаковок.Остаток, 0) - ЕСТЬNULL(ОстаткиУпаковок.Ожидается, 0)
	|	КОНЕЦ КАК Количество,
	|	&ТекстЗапросаВесУпаковки2 КАК Вес,
	|	&ТекстЗапросаОбъемУпаковки2 КАК Объем
	|ПОМЕСТИТЬ ПотребностьВУпаковках
	|ИЗ
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять КАК УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиУпаковок КАК ОстаткиУпаковок
	|		ПО УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка = ОстаткиУпаковок.Упаковка
	|			И УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Номенклатура = ОстаткиУпаковок.Номенклатура
	|			И УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Характеристика = ОстаткиУпаковок.Характеристика
	|			И УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Серия = ОстаткиУпаковок.Серия
	|			И УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Назначение = ОстаткиУпаковок.Назначение
	|ГДЕ
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.КоличествоУпаковок - ЕСТЬNULL(ОстаткиУпаковок.Остаток, 0) - ЕСТЬNULL(ОстаткиУпаковок.Ожидается, 0) > 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ПрогнозыРасходаУпаковок.Упаковка", Неопределено));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиКПодпиткеДляЗапроса.Упаковка", Неопределено));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВариантыПереупаковки.Упаковка", Неопределено));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки4",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейкахОстатки.Упаковка", Неопределено));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки5",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка", Неопределено));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаВесУпаковки1", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ТоварыВЯчейкахОстатки.Упаковка", "ТоварыВЯчейкахОстатки.Номенклатура", Ложь));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаОбъемУпаковки1", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ТоварыВЯчейкахОстатки.Упаковка", "ТоварыВЯчейкахОстатки.Номенклатура", Ложь));
		
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаВесУпаковки2", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка", "УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Номенклатура", Ложь));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаОбъемУпаковки2", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка", "УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Номенклатура", Ложь));

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить()[0].Количество > 0;
	
КонецФункции

Функция СформироватьТаблицыДляЗаданий(Склад, Помещение, МенеджерВТ)
	 
	ТаблицаРазмещенияПредварительная = Новый ТаблицаЗначений;
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("ИндексСтрокиОтбора", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Излишек", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("СИзлишками", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("КоличествоПолученное", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Размещено", Новый ОписаниеТипов("Булево"));
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОтбора.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОтбора.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаОтбора.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаОтбора.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаОтбора.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("Ячейка",Новый ОписаниеТипов ("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаОтбора.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТаблицаОтбора.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
	ТаблицаОтбора.Колонки.Добавить("ПорядокОбхода", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("ИндексСтрокиОтбора", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("СИзлишками", Новый ОписаниеТипов("Булево"));
	ТаблицаОтбора.Колонки.Добавить("КлючСвязиСТарой", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ИндексСтрокиОтбора = 0;
	
	// Ограничиваем упаковки из которых удовлетворяем потребность, чтобы добиться минимальных излишков от разупакованных упаковок.	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВУпаковках.Номенклатура КАК Номенклатура,
	|	ПотребностьВУпаковках.Характеристика КАК Характеристика,
	|	ПотребностьВУпаковках.Серия КАК Серия,
	|	ПотребностьВУпаковках.Назначение КАК Назначение,
	|	ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви КАК МаксимальнаяУпаковкаВВетви,
	|	ПотребностьВУпаковках.Упаковка КАК Упаковка,
	|	ПотребностьВУпаковках.Коэффициент КАК Коэффициент,
	|	ПотребностьВУпаковках.Количество КАК КоличествоУпаковок,
	|	ПотребностьВУпаковках.Вес КАК ВесУпаковки,
	|	ПотребностьВУпаковках.Объем КАК ОбъемУпаковки,
	|	ПотребностьВУпаковках.Количество * ПотребностьВУпаковках.Коэффициент КАК Количество
	|ПОМЕСТИТЬ ТребуемыеТоварыПоВетвям
	|ИЗ
	|	ПотребностьВУпаковках КАК ПотребностьВУпаковках
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|		ПО ПотребностьВУпаковках.Упаковка = ВариантыПереупаковки.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиУпаковок.Номенклатура КАК Номенклатура,
	|	ОстаткиУпаковок.Характеристика КАК Характеристика,
	|	ОстаткиУпаковок.Серия КАК Серия,
	|	ОстаткиУпаковок.Назначение КАК Назначение,
	|	ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви КАК МаксимальнаяУпаковкаВВетви,
	|	ОстаткиУпаковок.Упаковка,
	|	ОстаткиУпаковок.Коэффициент КАК Коэффициент,
	|	ОстаткиУпаковок.СвободныйОстаток КАК КоличествоУпаковок,
	|	ОстаткиУпаковок.Вес КАК ВесУпаковки,
	|	ОстаткиУпаковок.Объем КАК ОбъемУпаковки,
	|	ЛОЖЬ КАК Излишек,
	|	-1 КАК ИндексСтрокиОтбора,
	|	&ТекстЗапросаКоэффициентУпаковки КАК МаксимальнаяУпаковкаВВетвиКоэффициент
	|ПОМЕСТИТЬ ОстаткиУпаковокПоВетвям
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиУпаковок.Номенклатура КАК Номенклатура,
	|		ОстаткиУпаковок.Характеристика КАК Характеристика,
	|		ОстаткиУпаковок.Серия КАК Серия,
	|		ОстаткиУпаковок.Назначение КАК Назначение,
	|		ОстаткиУпаковок.Упаковка КАК Упаковка,
	|		ОстаткиУпаковок.КоличествоВУпаковке КАК Коэффициент,
	|		ОстаткиУпаковок.Остаток КАК СвободныйОстаток,
	|		ОстаткиУпаковок.Вес КАК Вес,
	|		ОстаткиУпаковок.Объем КАК Объем
	|	ИЗ
	|		ПотребностьВУпаковках КАК ПотребностьВУпаковках
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиУпаковок КАК ОстаткиУпаковок
	|			ПО ПотребностьВУпаковках.Номенклатура = ОстаткиУпаковок.Номенклатура
	|				И ПотребностьВУпаковках.Характеристика = ОстаткиУпаковок.Характеристика
	|				И ПотребностьВУпаковках.Серия = ОстаткиУпаковок.Серия
	|				И ПотребностьВУпаковках.Назначение = ОстаткиУпаковок.Назначение
	|	ГДЕ
	|		ОстаткиУпаковок.Остаток > 0) КАК ОстаткиУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|		ПО ОстаткиУпаковок.Упаковка = ВариантыПереупаковки.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетви,
	|	МАКСИМУМ(ОстаткиУпаковокПоВетвям.Коэффициент) КАК МаксимальныйКоэффициентОстаткаВВетви,
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетвиКоэффициент,
	|	ОстаткиУпаковокПоВетвям.Номенклатура,
	|	ОстаткиУпаковокПоВетвям.Характеристика,
	|	ОстаткиУпаковокПоВетвям.Серия,
	|	ОстаткиУпаковокПоВетвям.Назначение
	|ПОМЕСТИТЬ МаксимальныйКоэффициентОстатка
	|ИЗ
	|	ОстаткиУпаковокПоВетвям КАК ОстаткиУпаковокПоВетвям
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетви,
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетвиКоэффициент,
	|	ОстаткиУпаковокПоВетвям.Серия,
	|	ОстаткиУпаковокПоВетвям.Назначение,
	|	ОстаткиУпаковокПоВетвям.Характеристика,
	|	ОстаткиУпаковокПоВетвям.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребуемыеТоварыПоВетвям.Номенклатура КАК Номенклатура,
	|	ТребуемыеТоварыПоВетвям.Характеристика КАК Характеристика,
	|	ТребуемыеТоварыПоВетвям.Серия КАК Серия,
	|	ТребуемыеТоварыПоВетвям.Назначение КАК Назначение,
	|	ТребуемыеТоварыПоВетвям.МаксимальнаяУпаковкаВВетви,
	|	ТребуемыеТоварыПоВетвям.Упаковка,
	|	ТребуемыеТоварыПоВетвям.Коэффициент КАК Коэффициент,
	|	ТребуемыеТоварыПоВетвям.КоличествоУпаковок,
	|	ТребуемыеТоварыПоВетвям.ВесУпаковки,
	|	ТребуемыеТоварыПоВетвям.ОбъемУпаковки,
	|	ТребуемыеТоварыПоВетвям.Количество,
	|	МаксимальныйКоэффициентОстатка.МаксимальныйКоэффициентОстаткаВВетви КАК МаксимальныйКоэффициентОстаткаВВетви,
	|	МаксимальныйКоэффициентОстатка.МаксимальнаяУпаковкаВВетвиКоэффициент КАК МаксимальнаяУпаковкаВВетвиКоэффициент
	|ИЗ
	|	МаксимальныйКоэффициентОстатка КАК МаксимальныйКоэффициентОстатка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТребуемыеТоварыПоВетвям КАК ТребуемыеТоварыПоВетвям
	|		ПО МаксимальныйКоэффициентОстатка.МаксимальнаяУпаковкаВВетви = ТребуемыеТоварыПоВетвям.МаксимальнаяУпаковкаВВетви
	|			И МаксимальныйКоэффициентОстатка.Номенклатура = ТребуемыеТоварыПоВетвям.Номенклатура
	|			И МаксимальныйКоэффициентОстатка.Характеристика = ТребуемыеТоварыПоВетвям.Характеристика
	|			И МаксимальныйКоэффициентОстатка.Серия = ТребуемыеТоварыПоВетвям.Серия
	|			И МаксимальныйКоэффициентОстатка.Назначение = ТребуемыеТоварыПоВетвям.Назначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	МаксимальныйКоэффициентОстаткаВВетви УБЫВ,
	|	МаксимальнаяУпаковкаВВетвиКоэффициент УБЫВ,
	|	Коэффициент УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиУпаковокПоВетвям.Номенклатура КАК Номенклатура,
	|	ОстаткиУпаковокПоВетвям.Характеристика КАК Характеристика,
	|	ОстаткиУпаковокПоВетвям.Серия КАК Серия,
	|	ОстаткиУпаковокПоВетвям.Назначение КАК Назначение,
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетви,
	|	ОстаткиУпаковокПоВетвям.Упаковка,
	|	ОстаткиУпаковокПоВетвям.Коэффициент КАК Коэффициент,
	|	ОстаткиУпаковокПоВетвям.КоличествоУпаковок,
	|	ОстаткиУпаковокПоВетвям.ВесУпаковки,
	|	ОстаткиУпаковокПоВетвям.ОбъемУпаковки,
	|	ОстаткиУпаковокПоВетвям.Излишек,
	|	ОстаткиУпаковокПоВетвям.ИндексСтрокиОтбора,
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетвиКоэффициент КАК МаксимальнаяУпаковкаВВетвиКоэффициент
	|ИЗ
	|	ОстаткиУпаковокПоВетвям КАК ОстаткиУпаковокПоВетвям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Назначение,
	|	МаксимальнаяУпаковкаВВетвиКоэффициент УБЫВ,
	|	Коэффициент УБЫВ";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви", Неопределено));
		
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТребуемыеТоварыПоВетвям = РезультатЗапроса[3].Выгрузить();
	ТребуемыеТоварыПоВетвям.Индексы.Добавить("Номенклатура,Характеристика,Назначение,Серия,Упаковка");
	ТребуемыеТоварыПоВетвям.Индексы.Добавить("Номенклатура,Характеристика,Назначение,Серия,МаксимальнаяУпаковкаВВетви");
	ТребуемыеТоварыПоВетвям.Сортировать("Номенклатура,Характеристика,Назначение,Серия,Коэффициент Убыв");
	ДоступныеТовары = РезультатЗапроса[4].Выгрузить();
	
	ДоступныеТоварыВВетви = ДоступныеТовары.СкопироватьКолонки();

	ИндексСтрокиОтбора = 0;
	ТекущаяМаксимальнаяУпаковкаВВетви = Неопределено;
	ТекущаяНоменклатура = Неопределено;
	ТекущаяХарактеристика = Неопределено;
	ТекущаяСерия = Неопределено;
	ТекущееНазначение = Неопределено;
	
	ДоступноНаУровне = Новый Соответствие;
	
	Для Каждого СтрокаТребуемыхТоваров Из ТребуемыеТоварыПоВетвям Цикл 
		
		//Формирование ОтбираемыеТоварыВВетви для этой ветви
		Если СтрокаТребуемыхТоваров.МаксимальнаяУпаковкаВВетви <> ТекущаяМаксимальнаяУпаковкаВВетви ИЛИ
			СтрокаТребуемыхТоваров.Номенклатура <> ТекущаяНоменклатура ИЛИ
			СтрокаТребуемыхТоваров.Характеристика <> ТекущаяХарактеристика ИЛИ
			СтрокаТребуемыхТоваров.Серия <> ТекущаяСерия ИЛИ
			СтрокаТребуемыхТоваров.Назначение <> ТекущееНазначение Тогда 
			
			//Корректировка остатков
			Для Каждого СтрокаДоступныхТоваровВВетви Из ДоступныеТоварыВВетви Цикл 
				Отбор = Новый Структура();
				Отбор.Вставить("Номенклатура",СтрокаДоступныхТоваровВВетви.Номенклатура);
				Отбор.Вставить("Характеристика",СтрокаДоступныхТоваровВВетви.Характеристика);
				Отбор.Вставить("Серия",СтрокаДоступныхТоваровВВетви.Серия);
				Отбор.Вставить("Назначение",СтрокаДоступныхТоваровВВетви.Назначение);
				Отбор.Вставить("Упаковка",СтрокаДоступныхТоваровВВетви.Упаковка);
				Отбор.Вставить("ИндексСтрокиОтбора",СтрокаДоступныхТоваровВВетви.ИндексСтрокиОтбора);
				Строки = ДоступныеТовары.НайтиСтроки(Отбор);
				
				Если Строки.Количество() = 0 Тогда
					// Перенос излишков в таблицу Доступных Товаров
					НоваяСтрока = ДоступныеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДоступныхТоваровВВетви);
					Продолжить;
				КонецЕсли;
				
				Для Каждого Строка Из Строки Цикл
					Если СтрокаДоступныхТоваровВВетви.КоличествоУпаковок = 0 Тогда
						ДоступныеТовары.Удалить(Строка);
						Продолжить;
					КонецЕсли;
					Строка.КоличествоУпаковок = СтрокаДоступныхТоваровВВетви.КоличествоУпаковок;
				КонецЦикла;
			КонецЦикла;
			
			ТекущаяМаксимальнаяУпаковкаВВетви = СтрокаТребуемыхТоваров.МаксимальнаяУпаковкаВВетви;
			ТекущаяНоменклатура= СтрокаТребуемыхТоваров.Номенклатура;
			ТекущаяХарактеристика = СтрокаТребуемыхТоваров.Характеристика;
			ТекущаяСерия = СтрокаТребуемыхТоваров.Серия;
			ТекущееНазначение = СтрокаТребуемыхТоваров.Назначение;
			
			ДоступныеТоварыВВетви.Очистить();
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",ТекущаяНоменклатура);
			Отбор.Вставить("Характеристика",ТекущаяХарактеристика);
			Отбор.Вставить("Серия",ТекущаяСерия);
			Отбор.Вставить("Назначение",ТекущееНазначение);
			Отбор.Вставить("МаксимальнаяУпаковкаВВетви",ТекущаяМаксимальнаяУпаковкаВВетви);
			Строки = ДоступныеТовары.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Строка Из Строки Цикл
				//Проверка исключения перемещение товаров одинакого размера(веса).
				Если Строка.Коэффициент > СтрокаТребуемыхТоваров.Коэффициент
					Или СтрокаТребуемыхТоваров.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
					НоваяСтрока = ДоступныеТоварыВВетви.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				КонецЕсли;
			КонецЦикла;
			
			Если ДоступныеТоварыВВетви.Количество() = 0 Тогда
				ТекущаяМаксимальнаяУпаковкаВВетви = Неопределено;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТребуемыхТоваров.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоДоступно = 0;
		Для Каждого СтрокаДоступныхТоваров Из  ДоступныеТоварыВВетви Цикл
			Если СтрокаДоступныхТоваров.Коэффициент > СтрокаТребуемыхТоваров.Коэффициент
				Или СтрокаТребуемыхТоваров.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
				КоличествоДоступно =  КоличествоДоступно + СтрокаДоступныхТоваров.Коэффициент * СтрокаДоступныхТоваров.КоличествоУпаковок; 
			Иначе 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДоступныхТоваров Из  ДоступныеТоварыВВетви Цикл
			Если СтрокаДоступныхТоваров.Коэффициент >= СтрокаТребуемыхТоваров.Коэффициент
				Или СтрокаТребуемыхТоваров.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
				КоличествоДоступноИерархиейНиже = КоличествоДоступно - СтрокаДоступныхТоваров.Коэффициент*СтрокаДоступныхТоваров.КоличествоУпаковок;
				КоличествоДоступноТекущейИерархей = КоличествоДоступно;
				КоличествоДоступно = КоличествоДоступноИерархиейНиже;
				
				//Отбор и размещение(без излишков)
				КоличествоУпаковокОтобрано = Цел(СтрокаТребуемыхТоваров.Количество/СтрокаДоступныхТоваров.Коэффициент);
				
				Если СтрокаТребуемыхТоваров.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
					КоличествоУпаковокОтобрано =?(КоличествоУпаковокОтобрано - СтрокаТребуемыхТоваров.Количество/СтрокаДоступныхТоваров.Коэффициент < 0,
												  КоличествоУпаковокОтобрано + 1,
												  0); 
				КонецЕсли;
				
				Если КоличествоУпаковокОтобрано>0 Тогда 
					
					Если КоличествоУпаковокОтобрано>=СтрокаДоступныхТоваров.КоличествоУпаковок Тогда
						КоличествоУпаковокОтобрано = СтрокаДоступныхТоваров.КоличествоУпаковок;
						СтрокаДоступныхТоваров.КоличествоУпаковок = 0;
					Иначе
						СтрокаДоступныхТоваров.КоличествоУпаковок = СтрокаДоступныхТоваров.КоличествоУпаковок - КоличествоУпаковокОтобрано;	
					КонецЕсли;
					
					//Уменьшение требуемого количества
					СтрокаТребуемыхТоваров.Количество = СтрокаТребуемыхТоваров.Количество - КоличествоУпаковокОтобрано*СтрокаДоступныхТоваров.Коэффициент;
					Если СтрокаТребуемыхТоваров.Количество < 0 Тогда
						СтрокаТребуемыхТоваров.Количество = 0;
					КонецЕсли;
					
					СтрокаТребуемыхТоваров.КоличествоУпаковок = СтрокаТребуемыхТоваров.Количество/СтрокаТребуемыхТоваров.Коэффициент;
					
					//Добавление упаковок на размещение 
					НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТребуемыхТоваров);
					НоваяСтрока.Количество = КоличествоУпаковокОтобрано*СтрокаДоступныхТоваров.Коэффициент/СтрокаТребуемыхТоваров.Коэффициент;
					НоваяСтрока.Излишек = Ложь;
					НоваяСтрока.СИзлишками = СтрокаДоступныхТоваров.Излишек;
					Если СтрокаДоступныхТоваров.Излишек Тогда
						НоваяСтрока.ИндексСтрокиОтбора = СтрокаДоступныхТоваров.ИндексСтрокиОтбора;
					Иначе
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					КонецЕсли;
					
					//Добавление упаковок на отбор
					Если Не СтрокаДоступныхТоваров.Излишек Тогда
						НоваяСтрока = ТаблицаОтбора.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДоступныхТоваров);
						НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтобрано;
						НоваяСтрока.Количество = КоличествоУпаковокОтобрано*СтрокаДоступныхТоваров.Коэффициент;	
						НоваяСтрока.СИзлишками = СтрокаДоступныхТоваров.Излишек;
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
						НоваяСтрока.КлючСвязиСТарой = ТаблицаОтбора.Количество();
						ИндексСтрокиОтбора = ИндексСтрокиОтбора + 1;
					КонецЕсли;
					
					//Проверка удовлетворения спроса всех упаковок
					Если СтрокаТребуемыхТоваров.Количество=0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
				Если КоличествоДоступноИерархиейНиже <СтрокаТребуемыхТоваров.Количество И СтрокаДоступныхТоваров.КоличествоУпаковок > 0 Тогда
					//Добавление упаковок на размещение 
					НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТребуемыхТоваров);
					НоваяСтрока.Количество = СтрокаТребуемыхТоваров.КоличествоУпаковок;
					НоваяСтрока.Излишек = Ложь;
					НоваяСтрока.СИзлишками = Истина;
					Если СтрокаДоступныхТоваров.Излишек Тогда
						НоваяСтрока.ИндексСтрокиОтбора = СтрокаДоступныхТоваров.ИндексСтрокиОтбора;
					Иначе
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					КонецЕсли;
					
					// Добавление излишков в Доступные товары(если их не используют, то они все попадут в размещение)
					НоваяСтрока = ДоступныеТоварыВВетви.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТребуемыхТоваров);
					НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					НоваяСтрока.КоличествоУпаковок = СтрокаДоступныхТоваров.Коэффициент/СтрокаТребуемыхТоваров.Коэффициент - СтрокаТребуемыхТоваров.КоличествоУпаковок;	
					НоваяСтрока.Излишек = Истина;
					Если СтрокаДоступныхТоваров.Излишек Тогда
						НоваяСтрока.ИндексСтрокиОтбора = СтрокаДоступныхТоваров.ИндексСтрокиОтбора;
					Иначе
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					КонецЕсли;
					
					ДоступныеТоварыВВетви.Сортировать("Коэффициент Убыв, Излишек Убыв");
					
					//Добавление упаковок на отбор
					Если Не СтрокаДоступныхТоваров.Излишек Тогда	
						НоваяСтрока = ТаблицаОтбора.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДоступныхТоваров);
						НоваяСтрока.КоличествоУпаковок = 1;
						НоваяСтрока.Количество = СтрокаДоступныхТоваров.Коэффициент;
						НоваяСтрока.СИзлишками = Истина;
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
						НоваяСтрока.КлючСвязиСТарой = ТаблицаОтбора.Количество();
						ИндексСтрокиОтбора = ИндексСтрокиОтбора + 1;
					КонецЕсли;
					
					//Уменьшение потребности в упаковках
					СтрокаТребуемыхТоваров.Количество = 0;
					СтрокаТребуемыхТоваров.КоличествоУпаковок = 0;
					
					//Уменьшиение количества доступных упаковок
					СтрокаДоступныхТоваров.КоличествоУпаковок = СтрокаДоступныхТоваров.КоличествоУпаковок - 1;
					
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		//Уменьшение потребности
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",СтрокаТребуемыхТоваров.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаТребуемыхТоваров.Характеристика);
		Отбор.Вставить("Назначение",СтрокаТребуемыхТоваров.Назначение);
		Отбор.Вставить("Серия",СтрокаТребуемыхТоваров.Серия);
		Отбор.Вставить("Упаковка",СтрокаТребуемыхТоваров.Упаковка);
		Строки = ТребуемыеТоварыПоВетвям.НайтиСтроки(Отбор);
		Для Каждого Строка Из Строки Цикл
			Строка.Количество = СтрокаТребуемыхТоваров.Количество;
			Строка.КоличествоУпаковок = СтрокаТребуемыхТоваров.КоличествоУпаковок;
		КонецЦикла;
		
	КонецЦикла;
	
	// Перенос неотобранных излишков в таблицу размещения
	Отбор = Новый Структура();
	Отбор.Вставить("Излишек",Истина);
	Строки = ДоступныеТовары.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		Если Строка.КоличествоУпаковок>0 Тогда  
			//Добавление упаковок на размещение 
			НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.Количество = Строка.КоличествоУпаковок;
			НоваяСтрока.Излишек = Истина;
			НоваяСтрока.СИзлишками = Истина;
		КонецЕсли;
	КонецЦикла;
	Строки = ДоступныеТоварыВВетви.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		Если Строка.КоличествоУпаковок>0 Тогда
			//Добавление упаковок на размещение
			НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.Количество = Строка.КоличествоУпаковок;
			НоваяСтрока.Излишек = Истина;
			НоваяСтрока.СИзлишками = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Подбор ячеек, из которых можно взять необходимые упаковки
	ТаблицаРезультатов = ПодобратьЯчейкиДляТаблицыОтбора(Склад, Помещение, ТаблицаОтбора, МенеджерВТ);

	//Перепривязка строк таблицы размещения по результатам подбора ячеек-источников
	//т.к. одна строка таблицы отбора может отбираться из нескольких ячеек
	
	ТаблицаРазмещенияПредварительная.Сортировать("СИзлишками Возр, Коэффициент Убыв");
	ТаблицаОтбора.Индексы.Добавить("Номенклатура,Характеристика,Назначение,Серия,Упаковка,Ячейка");
	Для Каждого СтрокаТаблицыРезультатов Из ТаблицаРезультатов Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",СтрокаТаблицыРезультатов.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаТаблицыРезультатов.Характеристика);
		Отбор.Вставить("Назначение",СтрокаТаблицыРезультатов.Назначение);
		Отбор.Вставить("Серия",СтрокаТаблицыРезультатов.Серия);
		Отбор.Вставить("Упаковка",СтрокаТаблицыРезультатов.Упаковка);
		Отбор.Вставить("Ячейка",Справочники.СкладскиеЯчейки.ПустаяСсылка());
		СтрокиОтбора = ТаблицаОтбора.НайтиСтроки(Отбор);
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			КоличествоУпаковок = Мин(СтрокаОтбора.КоличествоУпаковок,СтрокаТаблицыРезультатов.КоличествоУпаковок);
			СтрокаТаблицыРезультатов.КоличествоУпаковок = СтрокаТаблицыРезультатов.КоличествоУпаковок - КоличествоУпаковок;
			
			Если КоличествоУпаковок >= СтрокаОтбора.КоличествоУпаковок Тогда
				СтрокаОтбора.Ячейка = СтрокаТаблицыРезультатов.Ячейка;
				СтрокаОтбора.Код = СтрокаТаблицыРезультатов.Код;
				СтрокаОтбора.ПорядокОбхода = СтрокаТаблицыРезультатов.ПорядокОбхода;
				СтрокаОтбора.РабочийУчасток = СтрокаТаблицыРезультатов.РабочийУчасток;
				СтрокаОтбора.ВесУпаковки = СтрокаТаблицыРезультатов.ВесУпаковки;
				СтрокаОтбора.ОбъемУпаковки = СтрокаТаблицыРезультатов.ОбъемУпаковки;
				
				Если СтрокаТаблицыРезультатов.КоличествоУпаковок = 0 Тогда
					Прервать;
				КонецЕсли;
			Иначе
				СтрокаОтбора.КоличествоУпаковок = СтрокаОтбора.КоличествоУпаковок - КоличествоУпаковок;
				СтрокаОтбора.Количество = СтрокаОтбора.Количество - КоличествоУпаковок*СтрокаОтбора.Коэффициент;

				НоваяСтрока = ТаблицаОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОтбора);
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
				НоваяСтрока.Количество = КоличествоУпаковок*СтрокаОтбора.Коэффициент ;
				НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
				НоваяСтрока.Ячейка = СтрокаТаблицыРезультатов.Ячейка;
				НоваяСтрока.Код = СтрокаТаблицыРезультатов.Код;
				НоваяСтрока.ПорядокОбхода = СтрокаТаблицыРезультатов.ПорядокОбхода;
				НоваяСтрока.РабочийУчасток = СтрокаТаблицыРезультатов.РабочийУчасток;
				НоваяСтрока.ВесУпаковки = СтрокаТаблицыРезультатов.ВесУпаковки;
				НоваяСтрока.ОбъемУпаковки = СтрокаТаблицыРезультатов.ОбъемУпаковки;
				НоваяСтрока.КлючСвязиСТарой = ТаблицаОтбора.Количество();
				
				Количество = НоваяСтрока.Количество;
				Отбор = Новый Структура();
				Отбор.Вставить("ИндексСтрокиОтбора",СтрокаОтбора.ИндексСтрокиОтбора);
				СтрокиРазмещения = ТаблицаРазмещенияПредварительная.НайтиСтроки(Отбор);
				Для Каждого СтрокаРазмещения Из СтрокиРазмещения Цикл
					КоличествоУпаковок = Мин(СтрокаРазмещения.Количество,Количество/СтрокаРазмещения.Коэффициент);
					Количество = Количество - КоличествоУпаковок*СтрокаРазмещения.Коэффициент;
					Если КоличествоУпаковок >= СтрокаРазмещения.Количество Тогда
						СтрокаРазмещения.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					Иначе
						СтрокаРазмещения.Количество = СтрокаРазмещения.Количество - КоличествоУпаковок;
						
						НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРазмещения);
						НоваяСтрока.Количество = КоличествоУпаковок;
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					КонецЕсли;
					
					Если Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ИндексСтрокиОтбора = ИндексСтрокиОтбора + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	//Подбор ячеек, в которые можно положить требуемые упаковки
	
	Для Каждого СтрокаТаблицыРазмещения Из ТаблицаРазмещенияПредварительная Цикл
		СтрокаТаблицыРазмещения.Размещено = Ложь;
		Отбор = Новый Структура("ИндексСтрокиОтбора",СтрокаТаблицыРазмещения.ИндексСтрокиОтбора);
		СтрокаОтбора = ТаблицаОтбора.Найти(СтрокаТаблицыРазмещения.ИндексСтрокиОтбора,"ИндексСтрокиОтбора");
		СтрокаТаблицыРазмещения.КоличествоПолученное = СтрокаОтбора.КоличествоУпаковок;		
	КонецЦикла;
	
	Структура = ПодобратьЯчейкиДляРазмещения(ТаблицаРазмещенияПредварительная,ТаблицаОтбора,Склад,Помещение);
	
	Возврат Структура;
	
КонецФункции

Функция ПодобратьЯчейкиДляТаблицыОтбора(Склад, Помещение, ТаблицаОтбора, МенеджерВременнойТаблицы)
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультатов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРезультатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаРезультатов.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРезультатов.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(18,6,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ПорядокОбхода", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов(Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки")));
	ТаблицаРезультатов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка,",,Новый КвалификаторыСтроки(20)));
	ТаблицаРезультатов.Колонки.Добавить("ИндексСтрокиОтбора", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРасходаИзЯчеек = Новый ТаблицаЗначений;
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРасходаИзЯчеек.Индексы.Добавить("Ячейка,Номенклатура,Упаковка,Характеристика,Назначение,Серия");		
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	//В запросе выбираются все ячейки по которым есть остатки и ячейки сортируются по правилам
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОтбора.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаОтбора.Характеристика КАК Характеристика,
	|	ТаблицаОтбора.Серия КАК Серия,
	|	ТаблицаОтбора.Назначение КАК Назначение,
	|	ТаблицаОтбора.Упаковка КАК Упаковка,
	|	ТаблицаОтбора.КоличествоУпаковок КАК Количество,
	|	ТаблицаОтбора.ИндексСтрокиОтбора КАК ИндексСтрокиОтбора
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.Характеристика,
	|	ТаблицаОтбора.Серия,
	|	ТаблицаОтбора.Назначение,
	|	ТаблицаОтбора.Упаковка,
	|	СУММА(ТаблицаОтбора.Количество) КАК Количество,
	|	ТаблицаОтбора.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|	ТаблицаОтбора.ИндексСтрокиОтбора
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаОтбора КАК ТаблицаОтбора
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.Упаковка,
	|	ТаблицаОтбора.Характеристика,
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.Серия,
	|	ТаблицаОтбора.Назначение,
	|	ТаблицаОтбора.Номенклатура.СкладскаяГруппа,
	|	ТаблицаОтбора.ИндексСтрокиОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Серия КАК Серия,
	|	ТаблицаНоменклатуры.Назначение КАК Назначение,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ТаблицаНоменклатуры.ИндексСтрокиОтбора,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ТоварыВЯчейкахОстатки.Код КАК Код,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Остаток, 0) КАК СвободныйОстаток,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.УровеньДоступности, 9999999999) КАК УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.РабочийУчасток КАК РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.ПорядокОбхода КАК ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.Вес КАК Вес,
	|	ТоварыВЯчейкахОстатки.Объем КАК Объем,
	|	ТоварыВЯчейкахОстатки.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	ТоварыВЯчейкахОстатки.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
	|	ТоварыВЯчейкахОстатки.ОбластьХранения КАК ОбластьХранения
	|ПОМЕСТИТЬ ПулЯчеек
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиВЯчейках КАК ТоварыВЯчейкахОстатки
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И ТаблицаНоменклатуры.Назначение = ТоварыВЯчейкахОстатки.Назначение
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыВЯчейкахОстатки.Серия
	|			КОНЕЦ)
	|			И (ТоварыВЯчейкахОстатки.Упаковка = ТаблицаНоменклатуры.Упаковка)
	|			И (ТоварыВЯчейкахОстатки.Остаток > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ВсеТоварыВЯчейке
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПулЯчеек.Ячейка
	|				ИЗ
	|					ПулЯчеек КАК ПулЯчеек)) КАК ТоварыВЯчейкахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулЯчеек.Номенклатура КАК Номенклатура,
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПулЯчеек.Номенклатура = ВсеТоварыВЯчейке.Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьДругаяНоменклатура
	|ПОМЕСТИТЬ НоменклатураВЯчейках
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеТоварыВЯчейке КАК ВсеТоварыВЯчейке
	|		ПО ПулЯчеек.Ячейка = ВсеТоварыВЯчейке.Ячейка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПулЯчеек.Номенклатура,
	|	ПулЯчеек.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулЯчеек.Номенклатура КАК Номенклатура,
	|	ПулЯчеек.Характеристика КАК Характеристика,
	|	ПулЯчеек.Серия КАК Серия,
	|	ПулЯчеек.Назначение КАК Назначение,
	|	ПулЯчеек.Количество КАК Количество,
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	ПулЯчеек.ИндексСтрокиОтбора,
	|	ПулЯчеек.СвободныйОстаток КАК СвободныйОстаток,
	|	ПулЯчеек.РабочийУчасток КАК РабочийУчасток,
	|	ПулЯчеек.ПорядокОбхода КАК ПорядокОбхода,
	|	ПулЯчеек.Упаковка КАК Упаковка,
	|	ПулЯчеек.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	ВЫБОР
	|		КОГДА ПулЯчеек.СвободныйОстаток <= ПулЯчеек.Количество / ПулЯчеек.КоличествоВУпаковке
	|			ТОГДА ПулЯчеек.ПриоритетОтбораПодОстаток
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НоменклатураВЯчейках.ЕстьДругаяНоменклатура
	|					ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
	|				ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
	|			КОНЕЦ
	|	КОНЕЦ КАК ПриоритетСтратегии,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА 1000
	|		ИНАЧЕ ПравилаРазмещенияТоваровВЯчейках.Приоритет
	|	КОНЕЦ КАК ПриоритетОбласти,
	|	ПулЯчеек.УровеньДоступности,
	|	ПулЯчеек.Код,
	|	ПулЯчеек.Вес,
	|	ПулЯчеек.Объем
	|ПОМЕСТИТЬ НоменклатураВЯчейкахИтог
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураВЯчейках КАК НоменклатураВЯчейках
	|		ПО ПулЯчеек.Номенклатура = НоменклатураВЯчейках.Номенклатура
	|			И ПулЯчеек.Ячейка = НоменклатураВЯчейках.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|		ПО ПулЯчеек.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|			И ПулЯчеек.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|			И ПулЯчеек.ОбластьХранения = ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения
	|			И (ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение)
	|			И (ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураВЯчейкахИтог.Номенклатура КАК Номенклатура,
	|	НоменклатураВЯчейкахИтог.Характеристика КАК Характеристика,
	|	НоменклатураВЯчейкахИтог.Серия КАК Серия,
	|	НоменклатураВЯчейкахИтог.Назначение КАК Назначение,
	|	НоменклатураВЯчейкахИтог.Количество,
	|	НоменклатураВЯчейкахИтог.Ячейка,
	|	НоменклатураВЯчейкахИтог.ИндексСтрокиОтбора,
	|	НоменклатураВЯчейкахИтог.СвободныйОстаток,
	|	НоменклатураВЯчейкахИтог.РабочийУчасток КАК РабочийУчасток,
	|	НоменклатураВЯчейкахИтог.ПорядокОбхода КАК ПорядокОбхода,
	|	НоменклатураВЯчейкахИтог.Упаковка КАК Упаковка,
	|	НоменклатураВЯчейкахИтог.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	НоменклатураВЯчейкахИтог.ПриоритетСтратегии КАК ПриоритетСтратегии,
	|	НоменклатураВЯчейкахИтог.ПриоритетОбласти КАК ПриоритетОбласти,
	|	НоменклатураВЯчейкахИтог.УровеньДоступности,
	|	НоменклатураВЯчейкахИтог.Код КАК Код,
	|	НоменклатураВЯчейкахИтог.Вес,
	|	НоменклатураВЯчейкахИтог.Объем,
	|	СостоянияПересчетовЯчеек.Состояние КАК СостояниеПересчета
	|ИЗ
	|	НоменклатураВЯчейкахИтог КАК НоменклатураВЯчейкахИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПересчетовЯчеек КАК СостоянияПересчетовЯчеек
	|		ПО НоменклатураВЯчейкахИтог.Ячейка = СостоянияПересчетовЯчеек.Ячейка
	|			И (СостоянияПересчетовЯчеек.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПересчетовЯчеек.ТребуетсяПересчет))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	СостояниеПересчета,
	|	ПриоритетОбласти УБЫВ,
	|	КоличествоВУпаковке УБЫВ,
	|	ПриоритетСтратегии,
	|	УровеньДоступности,
	|	ПорядокОбхода,
	|	РабочийУчасток,
	|	Код
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия КАК Серия,
	|	ИндексСтрокиОтбора,
	|	Упаковка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	Запрос.УстановитьПараметр("ТаблицаОтбора",ТаблицаОтбора);  
	
	ВыборкаПоНоменклатуре =  Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
			ВыборкаПоНазначениям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоНазначениям.Следующий() Цикл
				
				ВыборкаПоСериям = ВыборкаПоНазначениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоСериям.Следующий() Цикл 
					
					ВыборкаПоИндексСтрокиОтбора = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоИндексСтрокиОтбора.Следующий() Цикл
						
						ВыборкаПоУпаковкам = ВыборкаПоИндексСтрокиОтбора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаПоУпаковкам.Следующий() Цикл
							
							//детали
							ВыборкаПоЯчейкам = ВыборкаПоУпаковкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							КоличествоКОтбору = Неопределено;
							
							Пока ВыборкаПоЯчейкам.Следующий() Цикл
								
								Если КоличествоКОтбору = Неопределено Тогда
									
									КоличествоКОтбору = ВыборкаПоЯчейкам.Количество;
									
								КонецЕсли;
								
								//Если ячейка заполнена, значит в ней есть остаток в нужной упаковке, 
								//иначе таблица остатков не соединилась бы с таблицей номенклатуры
								Если ЗначениеЗаполнено(ВыборкаПоЯчейкам.Ячейка) Тогда
									
									Отбор = Новый Структура;
									
									Отбор.Вставить("Ячейка", ВыборкаПоЯчейкам.Ячейка);
									Отбор.Вставить("Номенклатура", ВыборкаПоЯчейкам.Номенклатура);
									Отбор.Вставить("Упаковка", ВыборкаПоЯчейкам.Упаковка);
									Отбор.Вставить("Характеристика", ВыборкаПоЯчейкам.Характеристика);
									Отбор.Вставить("Назначение", ВыборкаПоЯчейкам.Назначение);
									Отбор.Вставить("Серия", ВыборкаПоЯчейкам.Серия);
									
									МассивНайденныхСтрок = ТаблицаРасходаИзЯчеек.НайтиСтроки(Отбор);
									
									Если МассивНайденныхСтрок.Количество() = 0 Тогда
										СтрокаРасхода 						= ТаблицаРасходаИзЯчеек.Добавить();
										СтрокаРасхода.Ячейка 				= ВыборкаПоЯчейкам.Ячейка;
										СтрокаРасхода.Номенклатура 			= ВыборкаПоЯчейкам.Номенклатура;
										СтрокаРасхода.Упаковка 				= ВыборкаПоЯчейкам.Упаковка;
										СтрокаРасхода.Характеристика 		= ВыборкаПоЯчейкам.Характеристика;
										СтрокаРасхода.Назначение 			= ВыборкаПоЯчейкам.Назначение;
										СтрокаРасхода.Серия         		= ВыборкаПоЯчейкам.Серия;
										СтрокаРасхода.КоличествоУпаковок 	= ВыборкаПоЯчейкам.СвободныйОстаток;
									Иначе
										СтрокаРасхода = МассивНайденныхСтрок[0];
									КонецЕсли;
									
									КоличествоИзЯчейки = Мин(КоличествоКОтбору,СтрокаРасхода.КоличествоУпаковок);
									
									Если КоличествоИзЯчейки > 0 Тогда
										СтрокаРезультата = ТаблицаРезультатов.Добавить();
										ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаПоЯчейкам);
										СтрокаРезультата.КоличествоУпаковок = КоличествоИзЯчейки;
										СтрокаРезультата.Количество         = КоличествоИзЯчейки * ВыборкаПоЯчейкам.КоличествоВУпаковке;
										СтрокаРезультата.ОбъемУпаковки		= ВыборкаПоЯчейкам.Объем;
										СтрокаРезультата.ВесУпаковки		= ВыборкаПоЯчейкам.Вес;
										
										СтрокаРасхода.КоличествоУпаковок = СтрокаРасхода.КоличествоУпаковок - КоличествоИзЯчейки; 
										КоличествоКОтбору = КоличествоКОтбору - КоличествоИзЯчейки;
									КонецЕсли;
									
								КонецЕсли;
								
								Если КоличествоКОтбору = 0 Тогда
									
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	Возврат ТаблицаРезультатов;
КонецФункции

Функция ПодобратьЯчейкиДляРазмещения(ТаблицаРазмещенияПредварительная,ТаблицаОтбора,Склад,Помещение)

	ТаблицаРазмещенияПредварительная.Сортировать("СИзлишками Возр,Излишек Возр,КоличествоПолученное Возр");	
	ТаблицаРазмещенияПредварительная.Индексы.Добавить("Размещено,Номенклатура,Характеристика,Назначение,Серия,Упаковка");

	Запрос = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаРазмещенияПредварительная.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаРазмещенияПредварительная.Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаРазмещенияПредварительная.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаРазмещенияПредварительная.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаРазмещенияПредварительная.Назначение КАК Справочник.Назначения) КАК Назначение,
	|	ТаблицаРазмещенияПредварительная.Количество КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаРазмещенияПредварительная
	|ИЗ
	|	&ТаблицаРазмещенияПредварительная КАК ТаблицаРазмещенияПредварительная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРазмещенияПредварительная.Номенклатура,
	|	ТаблицаРазмещенияПредварительная.Упаковка КАК Упаковка,
	|	ТаблицаРазмещенияПредварительная.Характеристика КАК Характеристика,
	|	ТаблицаРазмещенияПредварительная.Серия,
	|	ТаблицаРазмещенияПредварительная.Назначение,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаРазмещенияПредварительная.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаРазмещенияПредварительная.КоличествоУпаковок - 0.5 КАК ЧИСЛО(15, 0))
	|			ИНАЧЕ ТаблицаРазмещенияПредварительная.КоличествоУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаРазмещенияПредварительная КАК ТаблицаРазмещенияПредварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРазмещенияПредварительная.Упаковка,
	|	ТаблицаРазмещенияПредварительная.Характеристика,
	|	ТаблицаРазмещенияПредварительная.Серия,
	|	ТаблицаРазмещенияПредварительная.Назначение,
	|	ТаблицаРазмещенияПредварительная.Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаРазмещенияПредварительная",ТаблицаРазмещенияПредварительная);

	ТаблицаНоменклатуры = Запрос.Выполнить();
	
	СтруктураВозврата = РазместитьТоварВЯчейках(Менеджер,Склад,Помещение,Справочники.РабочиеУчастки.ПустаяСсылка(),Справочники.СкладскиеЯчейки.ПустаяСсылка(), Ложь);
	Если СтруктураВозврата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ТаблицаРезультатов = СтруктураВозврата.ТаблицаРезультатов;
	ТаблицаОшибок = СтруктураВозврата.ТаблицаОшибок;
	
	ТаблицаРазмещения = Новый ТаблицаЗначений;
	ТаблицаРазмещения = ТаблицаРезультатов.СкопироватьКолонки();
	ТаблицаРазмещения.Колонки.Добавить("ИндексСтрокиОтбора", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,5,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещения.Колонки.Добавить("Излишек", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещения.Колонки.Добавить("СИзлишками", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещения.Колонки.Добавить("КоличествоПолученное", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));	
	ТаблицаРазмещения.Индексы.Добавить("ИндексСтрокиОтбора");		
	ИндексСтрокиОтбора = ТаблицаОтбора.Количество();
	
	Для Каждого СтрокаРезультата ИЗ ТаблицаРезультатов Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",СтрокаРезультата.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаРезультата.Характеристика);
		Отбор.Вставить("Назначение",СтрокаРезультата.Назначение);
		Отбор.Вставить("Серия",СтрокаРезультата.Серия);
		Отбор.Вставить("Упаковка",СтрокаРезультата.Упаковка);
		Отбор.Вставить("Размещено",Ложь);
		
		Строки = ТаблицаРазмещенияПредварительная.НайтиСтроки(Отбор);
		КоличествоУпаковок = СтрокаРезультата.КоличествоУпаковок;

		Для Каждого Строка Из Строки Цикл
			
			Если КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			КоличествоУпаковокУменьшения = Мин(КоличествоУпаковок,Строка.Количество);
			
			Строка.Количество = Строка.Количество - КоличествоУпаковокУменьшения; 
			КоличествоУпаковок = КоличествоУпаковок - КоличествоУпаковокУменьшения;
			
			Если Строка.Количество>0 Тогда
				НоваяСтрока = ТаблицаРазмещения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокУменьшения;
				НоваяСтрока.Количество = КоличествоУпаковокУменьшения*Строка.Коэффициент;
				НоваяСтрока.ИндексСтрокиОтбора = Строка.ИндексСтрокиОтбора;
				НоваяСтрока.КоличествоПолученное = Строка.КоличествоПолученное;
				НоваяСтрока.Излишек = Строка.Излишек;
				НоваяСтрока.СИзлишками = Строка.СИзлишками;
			ИначеЕсли Строка.Количество=0 Тогда	
				НоваяСтрока = ТаблицаРазмещения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокУменьшения;
				НоваяСтрока.Количество = КоличествоУпаковокУменьшения*Строка.Коэффициент;
				НоваяСтрока.ИндексСтрокиОтбора = Строка.ИндексСтрокиОтбора;
				НоваяСтрока.КоличествоПолученное = Строка.КоличествоПолученное;
				НоваяСтрока.Излишек = Строка.Излишек;
				НоваяСтрока.СИзлишками = Строка.СИзлишками;
				Строка.Размещено = Истина;
			КонецЕсли;	
						
		КонецЦикла;			
			
	КонецЦикла; 

	// Уменьшение непоместившихся товаров в таблицах отбора, размещения и таблицы для запроса.

	Если ТаблицаОшибок.Количество()>0 Тогда	
		
		ТаблицаРазмещения.Сортировать("СИзлишками Убыв,Излишек Убыв,КоличествоПолученное Убыв");
		
		Для Каждого СтрокаТаблицыНДЗ ИЗ ТаблицаРазмещенияПредварительная.НайтиСтроки(Новый Структура("Размещено",Ложь)) Цикл 
					
			СтрокаТДО = ТаблицаОтбора.Найти(СтрокаТаблицыНДЗ.ИндексСтрокиОтбора,"ИндексСтрокиОтбора");
			Если СтрокаТДО = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			КоличествоОстатка = СтрокаТаблицыНДЗ.Количество*СтрокаТаблицыНДЗ.Коэффициент;
			КоличествоУменьшенияОтбора = СтрокаТДО.Количество - КоличествоОстатка;
			ОставшеесяКоличествоУпаковок = Цел(КоличествоУменьшенияОтбора/СтрокаТДО.Коэффициент);
			КоличествоУменьшения = СтрокаТДО.Количество - СтрокаТДО.Коэффициент*ОставшеесяКоличествоУпаковок;
			Разность = КоличествоУменьшения-КоличествоОстатка;
			
			Если ОставшеесяКоличествоУпаковок = 0 Тогда
				Для Каждого СтрТабРазм Из ТаблицаРазмещения.НайтиСтроки(Новый Структура("ИндексСтрокиОтбора",СтрокаТаблицыНДЗ.ИндексСтрокиОтбора)) Цикл
					ТаблицаРазмещения.Удалить(СтрТабРазм);	
				КонецЦикла;	
				ТаблицаОтбора.Удалить(СтрокаТДО);
				Продолжить;
			Иначе
				СтрокаТДО.КоличествоУпаковок = ОставшеесяКоличествоУпаковок;
				СтрокаТДО.Количество = СтрокаТДО.Количество - КоличествоУменьшения ;
			КонецЕсли;		
			
			СтрокиТаблицыРазмещения = ТаблицаРазмещения.НайтиСтроки(Новый Структура("ИндексСтрокиОтбора",СтрокаТаблицыНДЗ.ИндексСтрокиОтбора));
			
			Для Каждого СтрокаТаблицыРазмещения Из СтрокиТаблицыРазмещения Цикл
				
				Коэффициент = СтрокаТаблицыРазмещения.Количество/ СтрокаТаблицыРазмещения.КоличествоУпаковок;
				ОставшеесяКоличествоУпаковок = Цел((СтрокаТаблицыРазмещения.Количество - Разность)/Коэффициент);
				
				Если ОставшеесяКоличествоУпаковок <= 0 Тогда
					Разность = Разность - СтрокаТаблицыРазмещения.Количество;
					ТаблицаРазмещения.Удалить(СтрокаТаблицыРазмещения);									
				Иначе;
					СтрокаТаблицыРазмещения.КоличествоУпаковок = ОставшеесяКоличествоУпаковок;
					СтрокаТаблицыРазмещения.Количество = СтрокаТаблицыРазмещения.Количество - Разность;
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;	
				
	КонецЕсли;
	
	//Подготовить таблицу отбора к разбиению по заданиям
	ТаблицаОтбора.Сортировать("ПорядокОбхода Возр,Код Возр");
	ТаблицаОтбора.Индексы.Добавить("РабочийУчасток");
	
	Если ТаблицаОтбора.Количество()>0 Тогда
		Структура = Новый Структура;
		Структура.Вставить("ТаблицаОтбора", ТаблицаОтбора);
		Структура.Вставить("ТаблицаРазмещения", ТаблицаРазмещения);
		Возврат Структура
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
			
КонецФункции

Процедура РазбитьПоЗаданиям(Склад, Помещение, ТаблицыДляЗаданий, ПараметрыФормированияЗаданий)
			
	ТаблицаРазмещенияЗадания = ТаблицыДляЗаданий.ТаблицаРазмещения.СкопироватьКолонки();
	ТаблицаОтбораЗадания = ТаблицыДляЗаданий.ТаблицаОтбора.СкопироватьКолонки();
	
	Если ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда
		                          
		ЗапросУчастки = Новый Запрос;
		ЗапросУчастки.Текст = "ВЫБРАТЬ
		|	РабочиеУчастки.Ссылка КАК РабочийУчасток,
		|	РабочиеУчастки.ОграничиватьПоВесу,
		|	РабочиеУчастки.ОграничениеПоВесу,
		|	РабочиеУчастки.ОграничиватьПоОбъему,
		|	РабочиеУчастки.ОграничениеПоОбъему
		|ИЗ
		|	Справочник.РабочиеУчастки КАК РабочиеУчастки
		|ГДЕ
		|	РабочиеУчастки.Владелец = &Склад
		|	И РабочиеУчастки.Помещение = &Помещение";
		
		ЗапросУчастки.УстановитьПараметр("Склад",Склад);
		ЗапросУчастки.УстановитьПараметр("Помещение",Помещение);
		
		ТаблицаРабочихУчастков = ЗапросУчастки.Выполнить().Выгрузить();
		
		НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
		НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
		НоваяСтрока.ОграничиватьПоОбъему = Ложь;
		НоваяСтрока.ОграничиватьПоВесу = Ложь;	
		
	Иначе	
		ТаблицаРабочихУчастков = Новый ТаблицаЗначений;
		ТаблицаРабочихУчастков.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
		НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
		Если ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = "БезРазбиенияПоРабочимУчасткам" Тогда
			НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
		Иначе
			НоваяСтрока.РабочийУчасток = ПараметрыФормированияЗаданий.РабочийУчасток;
		КонецЕсли;
	КонецЕсли;
	
	ОченьБольшоеЧисло = 9999999999;
	
	Для Каждого СтрокаРабочийУчасток Из ТаблицаРабочихУчастков Цикл
				
		Если ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда						
			ПределОбъем = ?(СтрокаРабочийУчасток.ОграничиватьПоОбъему, СтрокаРабочийУчасток.ОграничениеПоОбъему, ОченьБольшоеЧисло);
			ПределВес = ?(СтрокаРабочийУчасток.ОграничиватьПоВесу, СтрокаРабочийУчасток.ОграничениеПоВесу, ОченьБольшоеЧисло);						
		Иначе
			ПределОбъем = ?(ПараметрыФормированияЗаданий.ОграничиватьПоОбъему, ПараметрыФормированияЗаданий.ОграничениеПоОбъему, ОченьБольшоеЧисло);
			ПределВес = ?(ПараметрыФормированияЗаданий.ОграничиватьПоВесу, ПараметрыФормированияЗаданий.ОграничениеПоВесу, ОченьБольшоеЧисло);						
		КонецЕсли;
		
		Если ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам <> "БезРазбиенияПоРабочимУчасткам" Тогда			
			СтрокиТаблицыОтбора = ТаблицыДляЗаданий.ТаблицаОтбора.НайтиСтроки(Новый Структура("РабочийУчасток",СтрокаРабочийУчасток.РабочийУчасток));			
		Иначе			
			СтрокиТаблицыОтбора = ТаблицыДляЗаданий.ТаблицаОтбора;		
		КонецЕсли;
		
		ВесОбщий = 0;                                         
		ОбъемОбщий = 0;
		ТекущийВес = 0;
		ТекущийОбъем = 0;		
		
		ЗаданиеОбъект = НовыйДокументЗаданиеНаПодпиткку(Склад, Помещение, ПараметрыФормированияЗаданий.Исполнитель, СтрокаРабочийУчасток.РабочийУчасток);
		
		Для Каждого СтрокаТаблицыОтбора Из СтрокиТаблицыОтбора Цикл
			
			Пока СтрокаТаблицыОтбора.КоличествоУпаковок>0 Цикл
						
				Если (СтрокаТаблицыОтбора.ВесУпаковки + ВесОбщий > ПределВес 
					Или СтрокаТаблицыОтбора.ОбъемУпаковки + ОбъемОбщий > ПределОбъем)
					И ТаблицаОтбораЗадания.Количество()>0  Тогда
					
					ЗаполнитьИПровестиЗаданиеНаПодпитку(ЗаданиеОбъект, ТаблицаОтбораЗадания, ТаблицаРазмещенияЗадания);
					ТаблицаРазмещенияЗадания = ТаблицыДляЗаданий.ТаблицаРазмещения.СкопироватьКолонки();
					ТаблицаОтбораЗадания = ТаблицыДляЗаданий.ТаблицаОтбора.СкопироватьКолонки();
					ЗаданиеОбъект = НовыйДокументЗаданиеНаПодпиткку(Склад,
																	Помещение,
																	ПараметрыФормированияЗаданий.Исполнитель,
																	СтрокаРабочийУчасток.РабочийУчасток);	
					ВесОбщий = 0;
					ОбъемОбщий = 0;
					
				КонецЕсли;  
					
				Если СтрокаТаблицыОтбора.ВесУпаковки >= ПределВес
					Или СтрокаТаблицыОтбора.ОбъемУпаковки >= ПределОбъем  Тогда
					КоличествоУпаковокНаОтбор = 1;
					Количество = СтрокаТаблицыОтбора.Коэффициент;
				Иначе
					ДоступныйВес = ПределВес - ВесОбщий;
					ДоступныйОбъем = ПределОбъем - ОбъемОбщий;
					
					Если СтрокаТаблицыОтбора.ВесУпаковки = 0 Тогда
						КоличествоУпаковокНаОтборПоВесу = ОченьБольшоеЧисло;
					Иначе
						КоличествоУпаковокНаОтборПоВесу = Цел(ДоступныйВес/СтрокаТаблицыОтбора.ВесУпаковки);
					КонецЕсли;
					
					Если СтрокаТаблицыОтбора.ОбъемУпаковки = 0 Тогда
						КоличествоУпаковокНаОтборПоОбъему = ОченьБольшоеЧисло;
                    Иначе
						КоличествоУпаковокНаОтборПоОбъему = Цел(ДоступныйОбъем/СтрокаТаблицыОтбора.ОбъемУпаковки);
					КонецЕсли;

					КоличествоУпаковокНаОтбор = Мин(Мин(КоличествоУпаковокНаОтборПоВесу,КоличествоУпаковокНаОтборПоОбъему),
													СтрокаТаблицыОтбора.КоличествоУпаковок);
					Количество = КоличествоУпаковокНаОтбор*СтрокаТаблицыОтбора.Коэффициент;
				КонецЕсли;	

				СтрокаТаблицыОтбора.КоличествоУпаковок = СтрокаТаблицыОтбора.КоличествоУпаковок - КоличествоУпаковокНаОтбор;
				СтрокаТаблицыОтбора.Количество = СтрокаТаблицыОтбора.Количество - Количество;
				
				НоваяСтрока = ТаблицаОтбораЗадания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыОтбора);
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокНаОтбор;
				НоваяСтрока.Количество = Количество;
				
				СтрокиТаблицыРазмещения = ТаблицыДляЗаданий.ТаблицаРазмещения.НайтиСтроки(Новый Структура("ИндексСтрокиОтбора",
																						  СтрокаТаблицыОтбора.ИндексСтрокиОтбора)); 
				Для Каждого СтрокаТаблицыРазмещения Из СтрокиТаблицыРазмещения Цикл
					Коэффициент = (СтрокаТаблицыРазмещения.Количество/СтрокаТаблицыРазмещения.КоличествоУпаковок);
					Если СтрокаТаблицыРазмещения.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
						КоличествоУпаковокРазмещения = Количество;
					Иначе
						КоличествоУпаковокРазмещения = Цел(Количество/Коэффициент);
					КонецЕсли;
					КоличествоУпаковокРазмещения = Мин(КоличествоУпаковокРазмещения,СтрокаТаблицыРазмещения.КоличествоУпаковок);
					
					НоваяСтрока = ТаблицаРазмещенияЗадания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыРазмещения);
					НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокРазмещения;
					НоваяСтрока.Количество = КоличествоУпаковокРазмещения*Коэффициент;
					
					Если КоличествоУпаковокРазмещения = СтрокаТаблицыРазмещения.КоличествоУпаковок Тогда
						ТаблицыДляЗаданий.ТаблицаРазмещения.Удалить(СтрокаТаблицыРазмещения);
					Иначе
						СтрокаТаблицыРазмещения.КоличествоУпаковок = СтрокаТаблицыРазмещения.КоличествоУпаковок - КоличествоУпаковокРазмещения;
						СтрокаТаблицыРазмещения.Количество = СтрокаТаблицыРазмещения.Количество - КоличествоУпаковокРазмещения*Коэффициент;
					КонецЕсли;
					
					Количество = Количество - КоличествоУпаковокРазмещения*Коэффициент;
					
					Если Количество=0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ВесОбщий = ВесОбщий + СтрокаТаблицыОтбора.ВесУпаковки * КоличествоУпаковокНаОтбор;
				ОбъемОбщий = ОбъемОбщий + СтрокаТаблицыОтбора.ОбъемУпаковки * КоличествоУпаковокНаОтбор;
								
			КонецЦикла;
			
		КонецЦикла;
		
		Если ТаблицаОтбораЗадания.Количество()>0 Тогда
			ЗаполнитьИПровестиЗаданиеНаПодпитку(ЗаданиеОбъект, ТаблицаОтбораЗадания, ТаблицаРазмещенияЗадания);
			ТаблицаОтбораЗадания.Очистить();
			ТаблицаРазмещенияЗадания.Очистить();			
			ЗаданиеОбъект = НовыйДокументЗаданиеНаПодпиткку(Склад, Помещение, ПараметрыФормированияЗаданий.Исполнитель, СтрокаРабочийУчасток.РабочийУчасток);			
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры

Функция НовыйДокументЗаданиеНаПодпиткку(Склад, Помещение, Исполнитель, РабочийУчасток)
	
	ЗаданиеОбъект               = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ЗаданиеОбъект.Склад         = Склад;
	ЗаданиеОбъект.Дата          = ТекущаяДатаСеанса();
	ЗаданиеОбъект.ВидОперации   = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
	ЗаданиеОбъект.Помещение     = Помещение; 
	ЗаданиеОбъект.Статус        = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ЗаданиеОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если Исполнитель<>Неопределено Тогда
		ЗаданиеОбъект.Исполнитель = Исполнитель;
	КонецЕсли;
	
	ЗаданиеОбъект.РабочийУчасток = РабочийУчасток;
	
	Возврат ЗаданиеОбъект;
	
КонецФункции

Процедура ЗаполнитьИПровестиЗаданиеНаПодпитку(ЗаданиеОбъект, ТаблицаОтбора, ТаблицаРазмещения)
	
	//Проверка если размещение идёт в ту же ячейку что и отбор, тогда статус задания можно поставить выполненным
	РазмещениеИОтборВРазныеЯчейки = Ложь;
	Для Каждого СтрокиОтбора Из ТаблицаОтбора Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("ИндексСтрокиОтбора",СтрокиОтбора.ИндексСтрокиОтбора);
		СтрокиРазмещения = ТаблицаРазмещения.НайтиСтроки(Отбор);
		Для Каждого СтрокаРазмещения Из СтрокиРазмещения Цикл
			Если СтрокаРазмещения.Ячейка <> СтрокиОтбора.Ячейка Тогда
				РазмещениеИОтборВРазныеЯчейки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не РазмещениеИОтборВРазныеЯчейки Тогда
		ЗаданиеОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
	КонецЕсли;
	
	ДополнитьТаблицыЗаданийНаПодпиткуТарой(ЗаданиеОбъект.Склад, ЗаданиеОбъект.Помещение, ТаблицаРазмещения, ТаблицаОтбора);

	ТаблицаОтбора.Свернуть("Номенклатура, Характеристика, Назначение, Серия,Упаковка, ВесУпаковки, ОбъемУпаковки, Ячейка,
		|РабочийУчасток, ПорядокОбхода, Код","КоличествоУпаковок,Количество");
	ТаблицаРазмещения.Свернуть("Номенклатура, Характеристика, Назначение, Серия, Упаковка, ВесУпаковки, ОбъемУпаковки, Ячейка,
		|ПорядокОбхода, Код, РабочийУчасток","КоличествоУпаковок,Количество");

	ТаблицаРазмещения.Сортировать("ПорядокОбхода Возр,Код Возр");
	ТаблицаОтбора.Сортировать("ПорядокОбхода Возр,Код Возр");
	
	Для Каждого Строка Из ТаблицаРазмещения Цикл
		НоваяСтрока = ЗаданиеОбъект.ТоварыРазмещение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.КоличествоУпаковокРазмещено = Строка.КоличествоУпаковок;
		НоваяСтрока.КоличествоРазмещено = Строка.Количество;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаОтбора Цикл
		НоваяСтрока = ЗаданиеОбъект.ТоварыОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.КоличествоУпаковокОтобрано = Строка.КоличествоУпаковок;
		НоваяСтрока.КоличествоОтобрано = Строка.Количество;
	КонецЦикла;			
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЗаданиеОбъект, Документы.ОтборРазмещениеТоваров);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаданиеОбъект, ПараметрыУказанияСерий.Размещение);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаданиеОбъект, ПараметрыУказанияСерий.Отбор);
	ОшибкаПроверкиЗаполненияСерий = Ложь;
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЗаданиеОбъект, ПараметрыУказанияСерий.Размещение, ОшибкаПроверкиЗаполненияСерий,, Ложь);
	Если Не ОшибкаПроверкиЗаполненияСерий Тогда
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЗаданиеОбъект, ПараметрыУказанияСерий.Отбор, ОшибкаПроверкиЗаполненияСерий,, Ложь);
	КонецЕсли;
	Если ОшибкаПроверкиЗаполненияСерий Тогда
		ЗаданиеОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаданиеОбъект, ПараметрыУказанияСерий.Размещение);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаданиеОбъект, ПараметрыУказанияСерий.Отбор);
	КонецЕсли;

	ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка:'")+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьТаблицуУпаковокПоТекущимРаспоряжениям(Склад, Помещение, МенеджерВременныхТаблиц, ПараметрыФормированияЗаданий)
	
	ПоРаспоряжениямТребуетсяПодпитка = Ложь;
	
	Если ПараметрыФормированияЗаданий.Свойство("ПоРаспоряжениямТребуетсяПодпитка") Тогда
		ПоРаспоряжениямТребуетсяПодпитка = ПараметрыФормированияЗаданий.ПоРаспоряжениямТребуетсяПодпитка;
	КонецЕсли;
	
	ПоРаспоряжениямНаОтбор = ПараметрыФормированияЗаданий.Свойство("ПоРаспоряжениямНаОтбор");
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если ПоРаспоряжениямНаОтбор Тогда
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыКОтбору", "Распоряжение", МенеджерВТ);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Ссылка КАК Номенклатура
		|
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	Справочник.Номенклатура КАК Товары
		|ГДЕ
		|	НЕ Товары.ПометкаУдаления
		|	И Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Распоряжение
		|
		|ПОМЕСТИТЬ ВтРаспоряжений
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Ссылка В(&РаспоряженияНаОтбор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОрдерНаПеремещениеТоваров.Ссылка КАК Распоряжение
		|ИЗ
		|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
		|ГДЕ
		|	ОрдерНаПеремещениеТоваров.Ссылка В(&РаспоряженияНаОтбор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Распоряжение
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен
		|	И РасходныйОрдерНаТовары.Склад = &Склад
		|	И РасходныйОрдерНаТовары.Помещение = &Помещение
		|	И РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
		|	И РасходныйОрдерНаТовары.ЗаданиеНаПеревозку В(&РаспоряженияНаОтбор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ
			|	ТоварыКОтборуОбороты.Распоряжение   КАК Распоряжение,
			|	ТоварыКОтборуОбороты.Номенклатура   КАК Номенклатура,
			|	ТоварыКОтборуОбороты.Характеристика КАК Характеристика,
			|	ТоварыКОтборуОбороты.Назначение     КАК Назначение,
			|	ТоварыКОтборуОбороты.Серия          КАК Серия,
			|	ТоварыКОтборуОбороты.КОтборуПриход  КАК Количество
			|//&ИмяВТТоварыКОтбору
			|ИЗ
			|	РегистрНакопления.ТоварыКОтбору.Обороты(
			|			,
			|			,
			|			,
			|			Распоряжение В
			|					(ВЫБРАТЬ
			|						ВтРаспоряжений.Распоряжение
			|					ИЗ
			|						ВтРаспоряжений КАК ВтРаспоряжений)
			|			И НЕ Распоряжение В
			|					(ВЫБРАТЬ
			|						ВТЗаблокированоТоварыКОтбору.Распоряжение
			|					ИЗ
			|						ВТЗаблокированоТоварыКОтбору КАК ВТЗаблокированоТоварыКОтбору)
			|			И Номенклатура В
			|					(ВЫБРАТЬ
			|						ВтТовары.Номенклатура
			|					ИЗ
			|						ВтТовары КАК ВтТовары)) КАК ТоварыКОтборуОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Назначение,
			|	Серия
			|;
			|
			|///////////////////////////////////////////////////////////////////";
			
			Если ПоРаспоряжениямТребуетсяПодпитка Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	ТоварыКОтборуОбороты.Распоряжение   КАК Распоряжение,
				|	ТоварыКОтборуОбороты.Номенклатура   КАК Номенклатура,
				|	ТоварыКОтборуОбороты.Характеристика КАК Характеристика,
				|	ТоварыКОтборуОбороты.Назначение     КАК Назначение,
				|	ТоварыКОтборуОбороты.Серия          КАК Серия,
				|	ТоварыКОтборуОбороты.КОтборуПриход  КАК Количество
				|ПОМЕСТИТЬ ТоварыКОтборуОборотыДругихРаспоряжений
				|ИЗ
				|	РегистрНакопления.ТоварыКОтбору.Обороты(
				|			,
				|			,
				|			,
				|			НЕ Распоряжение В
				|					(ВЫБРАТЬ
				|						ВтРаспоряжений.Распоряжение
				|					ИЗ
				|						ВтРаспоряжений КАК ВтРаспоряжений)
				|			И НЕ Распоряжение В
				|					(ВЫБРАТЬ
				|						ВТЗаблокированоТоварыКОтбору.Распоряжение
				|					ИЗ
				|						ВТЗаблокированоТоварыКОтбору КАК ВТЗаблокированоТоварыКОтбору)
				|			И (Номенклатура, Характеристика, Назначение, Серия) В
				|					(ВЫБРАТЬ
				|						ТоварыКОтбору.Номенклатура,
				|						ТоварыКОтбору.Характеристика,
				|						ТоварыКОтбору.Назначение,
				|						ТоварыКОтбору.Серия
				|					ИЗ
				|						ВТТоварыКОтборуОбороты КАК ТоварыКОтбору)) КАК ТоварыКОтборуОбороты
				|;
				|
				|///////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТоварыКОтборуОбороты.Распоряжение      КАК Распоряжение,
				|	ТоварыКОтборуОбороты.Номенклатура      КАК Номенклатура,
				|	ТоварыКОтборуОбороты.Характеристика    КАК Характеристика,
				|	ТоварыКОтборуОбороты.Назначение        КАК Назначение,
				|	ТоварыКОтборуОбороты.Серия             КАК Серия,
				|	СУММА(ТоварыКОтборуОбороты.Количество) КАК Количество
				|ПОМЕСТИТЬ ТоварыКОтборуОбороты
				|ИЗ
				|	(ВЫБРАТЬ
				|		ТоварыКОтбору.Распоряжение   КАК Распоряжение,
				|		ТоварыКОтбору.Номенклатура   КАК Номенклатура,
				|		ТоварыКОтбору.Характеристика КАК Характеристика,
				|		ТоварыКОтбору.Назначение     КАК Назначение,
				|		ТоварыКОтбору.Серия          КАК Серия,
				|		ТоварыКОтбору.Количество     КАК Количество
				|	ИЗ
				|		ТоварыКОтборуОборотыДругихРаспоряжений КАК ТоварыКОтбору
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ТоварыКОтбору.Распоряжение   КАК Распоряжение,
				|		ТоварыКОтбору.Номенклатура   КАК Номенклатура,
				|		ТоварыКОтбору.Характеристика КАК Характеристика,
				|		ТоварыКОтбору.Назначение     КАК Назначение,
				|		ТоварыКОтбору.Серия          КАК Серия,
				|		ТоварыКОтбору.Количество     КАК Количество
				|	ИЗ
				|		ВТТоварыКОтборуОбороты КАК ТоварыКОтбору) КАК ТоварыКОтборуОбороты
				|
				|СГРУППИРОВАТЬ ПО
				|	ТоварыКОтборуОбороты.Распоряжение,
				|	ТоварыКОтборуОбороты.Номенклатура,
				|	ТоварыКОтборуОбороты.Характеристика,
				|	ТоварыКОтборуОбороты.Назначение,
				|	ТоварыКОтборуОбороты.Серия
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Распоряжение,
				|	Номенклатура,
				|	Характеристика,
				|	Назначение,
				|	Серия
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТТоварыКОтборуОбороты
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТоварыКОтборуОборотыДругихРаспоряжений
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////";
				
			КонецЕсли;
			
			ИмяВременнойТаблицы = ?(ПоРаспоряжениямТребуетсяПодпитка,
									"ПОМЕСТИТЬ ВТТоварыКОтборуОбороты",
									"ПОМЕСТИТЬ ТоварыКОтборуОбороты");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//&ИмяВТТоварыКОтбору", ИмяВременнойТаблицы);
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ТоварыКОтборуОстатки.Распоряжение   КАК Распоряжение,
		|	&Склад                              КАК Склад,
		|	&Помещение                          КАК Помещение,
		|	ТоварыКОтборуОстатки.Номенклатура   КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|			ТОГДА ТоварыКОтборуОстатки.Номенклатура
		|		ИНАЧЕ ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок
		|	КОНЕЦ                               КАК ВладелецУпаковок,
		|	ВЫБОР
		|		КОГДА ТоварыКОтборуОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|			ТОГДА Ложь
		|		ИНАЧЕ Истина
		|	КОНЕЦ                               КАК МернаяЕдиницаИзмерения,
		|	ТоварыКОтборуОстатки.Характеристика КАК Характеристика,
		|	ТоварыКОтборуОстатки.Назначение     КАК Назначение,
		|	ТоварыКОтборуОстатки.Серия          КАК Серия,
		|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток КАК Количество
		|//&ИмяВТТоварыКОтбору
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Остатки(
		|			,
		|			Распоряжение В
		|					(ВЫБРАТЬ
		|						ВтРаспоряжений.Распоряжение
		|					ИЗ
		|						ВтРаспоряжений КАК ВтРаспоряжений)
		|			И НЕ Распоряжение В
		|					(ВЫБРАТЬ
		|						ВТЗаблокированоТоварыКОтбору.Распоряжение
		|					ИЗ
		|						ВТЗаблокированоТоварыКОтбору КАК ВТЗаблокированоТоварыКОтбору)
		|			И Номенклатура В
		|					(ВЫБРАТЬ
		|						ВтТовары.Номенклатура
		|					ИЗ
		|						ВтТовары КАК ВтТовары)) КАК ТоварыКОтборуОстатки
		|ГДЕ &УсловиеТоварыКОтбору
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		Если ПоРаспоряжениямТребуетсяПодпитка Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ
			|	ТоварыКОтборуОстатки.Распоряжение   КАК Распоряжение,
			|	&Склад                              КАК Склад,
			|	&Помещение                          КАК Помещение,
			|	ТоварыКОтборуОстатки.Номенклатура   КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
			|			ТОГДА ТоварыКОтборуОстатки.Номенклатура
			|		ИНАЧЕ ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок
			|	КОНЕЦ                               КАК ВладелецУпаковок,
			|	ВЫБОР
			|		КОГДА ТоварыКОтборуОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
			|			ТОГДА Ложь
			|		ИНАЧЕ Истина
			|	КОНЕЦ                               КАК МернаяЕдиницаИзмерения,
			|	ТоварыКОтборуОстатки.Характеристика КАК Характеристика,
			|	ТоварыКОтборуОстатки.Назначение     КАК Назначение,
			|	ТоварыКОтборуОстатки.Серия          КАК Серия,
			|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток КАК Количество
			|ПОМЕСТИТЬ ТоварыКОтборуДругихРаспоряжений
			|ИЗ
			|	РегистрНакопления.ТоварыКОтбору.Остатки(
			|			,
			|			НЕ Распоряжение В
			|					(ВЫБРАТЬ
			|						ВтРаспоряжений.Распоряжение
			|					ИЗ
			|						ВтРаспоряжений КАК ВтРаспоряжений)
			|			И НЕ Распоряжение В
			|					(ВЫБРАТЬ
			|						ВТЗаблокированоТоварыКОтбору.Распоряжение
			|					ИЗ
			|						ВТЗаблокированоТоварыКОтбору КАК ВТЗаблокированоТоварыКОтбору)
			|			И (Номенклатура, Характеристика, Назначение, Серия) В
			|					(ВЫБРАТЬ
			|						ТоварыКОтбору.Номенклатура,
			|						ТоварыКОтбору.Характеристика,
			|						ТоварыКОтбору.Назначение,
			|						ТоварыКОтбору.Серия
			|					ИЗ
			|						ВТТоварыКОтбору КАК ТоварыКОтбору)) КАК ТоварыКОтборуОстатки
			|ГДЕ &УсловиеТоварыКОтбору
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыКОтборуОстатки.Распоряжение           КАК Распоряжение,
			|	ТоварыКОтборуОстатки.Склад                  КАК Склад,
			|	ТоварыКОтборуОстатки.Помещение              КАК Помещение,
			|	ТоварыКОтборуОстатки.ВладелецУпаковок       КАК ВладелецУпаковок,
			|	ТоварыКОтборуОстатки.МернаяЕдиницаИзмерения КАК МернаяЕдиницаИзмерения,
			|	ТоварыКОтборуОстатки.Номенклатура           КАК Номенклатура,
			|	ТоварыКОтборуОстатки.Характеристика         КАК Характеристика,
			|	ТоварыКОтборуОстатки.Назначение             КАК Назначение,
			|	ТоварыКОтборуОстатки.Серия                  КАК Серия,
			|	СУММА(ТоварыКОтборуОстатки.Количество)      КАК Количество
			|ПОМЕСТИТЬ ТоварыКОтбору
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварыКОтбору.Распоряжение           КАК Распоряжение,
			|		ТоварыКОтбору.Склад                  КАК Склад,
			|		ТоварыКОтбору.Помещение              КАК Помещение,
			|		ТоварыКОтбору.Номенклатура           КАК Номенклатура,
			|		ТоварыКОтбору.ВладелецУпаковок       КАК ВладелецУпаковок,
			|		ТоварыКОтбору.МернаяЕдиницаИзмерения КАК МернаяЕдиницаИзмерения,
			|		ТоварыКОтбору.Характеристика         КАК Характеристика,
			|		ТоварыКОтбору.Назначение             КАК Назначение,
			|		ТоварыКОтбору.Серия                  КАК Серия,
			|		ТоварыКОтбору.Количество             КАК Количество
			|	ИЗ
			|		ТоварыКОтборуДругихРаспоряжений КАК ТоварыКОтбору
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТоварыКОтбору.Распоряжение           КАК Распоряжение,
			|		ТоварыКОтбору.Склад                  КАК Склад,
			|		ТоварыКОтбору.Помещение              КАК Помещение,
			|		ТоварыКОтбору.Номенклатура           КАК Номенклатура,
			|		ТоварыКОтбору.ВладелецУпаковок       КАК ВладелецУпаковок,
			|		ТоварыКОтбору.МернаяЕдиницаИзмерения КАК МернаяЕдиницаИзмерения,
			|		ТоварыКОтбору.Характеристика         КАК Характеристика,
			|		ТоварыКОтбору.Назначение             КАК Назначение,
			|		ТоварыКОтбору.Серия                  КАК Серия,
			|		ТоварыКОтбору.Количество             КАК Количество
			|	ИЗ
			|		ВТТоварыКОтбору КАК ТоварыКОтбору) КАК ТоварыКОтборуОстатки
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКОтборуОстатки.Распоряжение,
			|	ТоварыКОтборуОстатки.Склад,
			|	ТоварыКОтборуОстатки.Помещение,
			|	ТоварыКОтборуОстатки.ВладелецУпаковок,
			|	ТоварыКОтборуОстатки.МернаяЕдиницаИзмерения,
			|	ТоварыКОтборуОстатки.Номенклатура,
			|	ТоварыКОтборуОстатки.Характеристика,
			|	ТоварыКОтборуОстатки.Назначение,
			|	ТоварыКОтборуОстатки.Серия
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Распоряжение,
			|	Номенклатура,
			|	Характеристика,
			|	Назначение,
			|	Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТТоварыКОтбору
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТоварыКОтборуДругихРаспоряжений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ТоварыКОтбору.Распоряжение,
		|	ТоварыКОтбору.Склад,
		|	ТоварыКОтбору.Помещение,
		|	ТоварыКОтбору.Номенклатура,
		|	ТоварыКОтбору.МернаяЕдиницаИзмерения,
		|	ТоварыКОтбору.Характеристика,
		|	ТоварыКОтбору.Назначение,
		|	ТоварыКОтбору.Серия,
		|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
		|	&ТекстЗапросаКоэффициентУпаковки КАК КоличествоВУпаковке,
		|	ТоварыКОтбору.Количество КАК Количество
		|ИЗ
		|	ТоварыКОтбору КАК ТоварыКОтбору
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|		ПО ТоварыКОтбору.ВладелецУпаковок = УпаковкиНоменклатуры.Владелец
		|ГДЕ
		|	НЕ УпаковкиНоменклатуры.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыКОтбору.Распоряжение,
		|	ТоварыКОтбору.Склад,
		|	ТоварыКОтбору.Помещение,
		|	ТоварыКОтбору.Номенклатура,
		|	ТоварыКОтбору.Характеристика,
		|	ТоварыКОтбору.Серия,
		|	ТоварыКОтбору.Назначение,
		|	КоличествоВУпаковке УБЫВ,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтРаспоряжений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыКОтбору";
		
		ИмяВременнойТаблицы = ?(ПоРаспоряжениямТребуетсяПодпитка,
								"ПОМЕСТИТЬ ВТТоварыКОтбору",
								"ПОМЕСТИТЬ ТоварыКОтбору");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//&ИмяВТТоварыКОтбору", ИмяВременнойТаблицы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"&ТекстЗапросаКоэффициентУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("УпаковкиНоменклатуры", Неопределено));
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
			УсловиеТоварыКОтбору = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКОтборуОбороты КАК ТоварыКОтборОбороты
			|		ПО ТоварыКОтборуОстатки.Распоряжение = ТоварыКОтборОбороты.Распоряжение
			|			И ТоварыКОтборуОстатки.Номенклатура = ТоварыКОтборОбороты.Номенклатура
			|			И ТоварыКОтборуОстатки.Характеристика = ТоварыКОтборОбороты.Характеристика
			|			И ТоварыКОтборуОстатки.Назначение = ТоварыКОтборОбороты.Назначение
			|			И ТоварыКОтборуОстатки.Серия = ТоварыКОтборОбороты.Серия
			|ГДЕ
			|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток
			|	> ВЫБОР
			|			КОГДА ТоварыКОтборуОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|				ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ЕСТЬNULL(ТоварыКОтборОбороты.Количество,0)
			|			ИНАЧЕ 0
			|		КОНЕЦ";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ &УсловиеТоварыКОтбору", УсловиеТоварыКОтбору);
			
			Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
				ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
			Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
				Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
		Иначе
			УсловиеТоварыКОтбору = "ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток
									| - ТоварыКОтборуОстатки.ОтобраноОстаток > 0";
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТоварыКОтбору", УсловиеТоварыКОтбору);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("РаспоряженияНаОтбор", ПараметрыФормированияЗаданий.ПоРаспоряжениямНаОтбор);
	Иначе
		
		Запрос = Новый Запрос;
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Товары.Ссылка КАК Номенклатура
			|
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	Справочник.Номенклатура КАК Товары
			|ГДЕ
			|	НЕ Товары.ПометкаУдаления
			|	И Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыКОтгрузкеОбороты.Номенклатура     КАК Номенклатура,
			|	ТоварыКОтгрузкеОбороты.Характеристика   КАК Характеристика,
			|	ТоварыКОтгрузкеОбороты.Назначение       КАК Назначение,
			|	ТоварыКОтгрузкеОбороты.Серия            КАК Серия,
			|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
			|	ТоварыКОтгрузкеОбороты.Склад            КАК Склад,
			|	ТоварыКОтгрузкеОбороты.КОтгрузкеПриход  КАК Количество
			|
			|ПОМЕСТИТЬ ТоварыКОтгрузкеОбороты
			|ИЗ
			|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
			|			,
			|			,
			|			,
			|			Склад = &Склад
			|			И Номенклатура В
			|				(ВЫБРАТЬ
			|					ВтТовары.Номенклатура
			|				ИЗ
			|					ВтТовары КАК ВтТовары)) КАК ТоварыКОтгрузкеОбороты
			|;
			|
			|///////////////////////////////////////////////////////////////////";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОстатки.Серия КАК Серия,
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Распоряжение,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОстатки.Номенклатура.НаборУпаковок
		|				= ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|			ТОГДА ТоварыКОтгрузкеОстатки.Номенклатура
		|		ИНАЧЕ ТоварыКОтгрузкеОстатки.Номенклатура.НаборУпаковок
		|	КОНЕЦ КАК ВладелецУпаковок,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины
		|				= ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|			ТОГДА Ложь
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК МернаяЕдиницаИзмерения,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	&Помещение КАК Помещение,
		|	ТоварыКОтгрузкеОстатки.Назначение
		|ПОМЕСТИТЬ ТоварыКОтгрузкеДляЗапроса
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			&ДатаОтгрузки,
		|			Склад = &Склад
		|				И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ &УсловиеТоварыКОтбору
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Помещение,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток,
		|	ТоварыНаСкладахОстатки.КОтгрузкеОстаток,
		|	ТоварыНаСкладахОстатки.Серия,
		|	ТоварыНаСкладахОстатки.Назначение
		|ПОМЕСТИТЬ ОстаткиТоваровВПомещении
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			(Склад, Помещение, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					ТоварыКОтгрузке.Склад,
		|					ТоварыКОтгрузке.Помещение,
		|					ТоварыКОтгрузке.Номенклатура,
		|					ТоварыКОтгрузке.Характеристика
		|				ИЗ
		|					ТоварыКОтгрузкеДляЗапроса КАК ТоварыКОтгрузке)) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.МернаяЕдиницаИзмерения,
		|	ТоварыКОтгрузке.Характеристика,
		|	ОстаткиТоваровВПомещении.Серия,
		|	ТоварыКОтгрузке.Распоряжение,
		|	ТоварыКОтгрузке.Количество,
		|	ТоварыКОтгрузке.ВладелецУпаковок,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Помещение,
		|	ТоварыКОтгрузке.Назначение
		|ПОМЕСТИТЬ ТоварыКОтгрузке
		|ИЗ
		|	ТоварыКОтгрузкеДляЗапроса КАК ТоварыКОтгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТоваровВПомещении КАК ОстаткиТоваровВПомещении
		|		ПО ТоварыКОтгрузке.Номенклатура = ОстаткиТоваровВПомещении.Номенклатура
		|			И ТоварыКОтгрузке.Характеристика = ОстаткиТоваровВПомещении.Характеристика
		|			И ТоварыКОтгрузке.Склад = ОстаткиТоваровВПомещении.Склад
		|			И ТоварыКОтгрузке.Помещение = ОстаткиТоваровВПомещении.Помещение
		|			И (ТоварыКОтгрузке.Серия = ОстаткиТоваровВПомещении.Серия
		|				ИЛИ ТоварыКОтгрузке.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.Распоряжение,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.МернаяЕдиницаИзмерения,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Количество,
		|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
		|	&ТекстЗапросаКоэффициентУпаковки КАК КоличествоВУпаковке,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Помещение,
		|	ТоварыКОтгрузке.Назначение
		|ИЗ
		|	ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|		ПО ТоварыКОтгрузке.ВладелецУпаковок = УпаковкиНоменклатуры.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО ТоварыКОтгрузке.ВладелецУпаковок = УпаковкиЕдиницыИзмерения.Владелец
		|		И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|ГДЕ
		|	НЕ УпаковкиНоменклатуры.ПометкаУдаления
		|	И УпаковкиЕдиницыИзмерения.Ссылка Есть NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыКОтгрузке.Распоряжение,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Помещение,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Назначение,
		|	КоличествоВУпаковке УБЫВ,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыКОтгрузкеДляЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОстаткиТоваровВПомещении
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыКОтгрузке";
		Запрос.УстановитьПараметр("ДатаОтгрузки", КонецДня(ТекущаяДатаСеанса() + 86400));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкиНоменклатуры", Неопределено));
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
			УсловиеТоварыКОтбору = "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКОтгрузкеОбороты КАК ТоварыКОтгрузкеОбороты
			|		ПО ТоварыКОтгрузкеОстатки.ДокументОтгрузки = ТоварыКОтгрузкеОбороты.ДокументОтгрузки
			|			И ТоварыКОтгрузкеОстатки.Номенклатура = ТоварыКОтгрузкеОбороты.Номенклатура
			|			И ТоварыКОтгрузкеОстатки.Характеристика = ТоварыКОтгрузкеОбороты.Характеристика
			|			И ТоварыКОтгрузкеОстатки.Назначение = ТоварыКОтгрузкеОбороты.Назначение
			|			И ТоварыКОтгрузкеОстатки.Серия = ТоварыКОтгрузкеОбороты.Серия
			|			И ТоварыКОтгрузкеОстатки.Склад = ТоварыКОтгрузкеОбороты.Склад
			|ГДЕ
			|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток > ВЫБОР
			|			КОГДА ТоварыКОтгрузкеОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|				ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ТоварыКОтгрузкеОбороты.Количество
			|			ИНАЧЕ 0
			|		КОНЕЦ";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ &УсловиеТоварыКОтбору", УсловиеТоварыКОтбору);
			Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
			Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
		Иначе
			УсловиеТоварыКОтбору = "ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток > 0";
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТоварыКОтбору", УсловиеТоварыКОтбору);
		КонецЕсли;
		
	КонецЕсли;	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
			
	ТаблицаТребуемыхУпаковок = Новый ТаблицаЗначений;
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Количество", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("КоличествоВУпаковке", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ТекРаспоряжение = Неопределено;
	ТекНоменклатура = Неопределено;
	ТекХарактеристика = Неопределено;
	ТекСклад = Неопределено;
	ТекПомещение = Неопределено;
	ТекСерия = Неопределено;
	ТекПериод = Неопределено;
	ТекНазначение = Неопределено;
	Количество = 0;
	МернаяЕдиницаИзмерения = Ложь;
	
	ВыборкаПоУпаковкам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоУпаковкам.Следующий() Цикл
		
		Если ВыборкаПоУпаковкам.Номенклатура <> ТекНоменклатура Или 
			ВыборкаПоУпаковкам.Распоряжение <> ТекРаспоряжение Или
			ВыборкаПоУпаковкам.Характеристика <> ТекХарактеристика Или
			ВыборкаПоУпаковкам.Склад <> ТекСклад Или
			ВыборкаПоУпаковкам.Помещение <> ТекПомещение Или
			ВыборкаПоУпаковкам.Серия <> ТекСерия Или
			ВыборкаПоУпаковкам.Назначение <> ТекНазначение Тогда
			
			Если Количество<>0 И МернаяЕдиницаИзмерения Тогда
				НоваяСтрока = ТаблицаТребуемыхУпаковок.Добавить();
				НоваяСтрока.Номенклатура = ТекНоменклатура;
				НоваяСтрока.Характеристика = ТекХарактеристика;
				НоваяСтрока.Склад = ТекСклад;
				НоваяСтрока.Помещение = ТекПомещение;
				НоваяСтрока.Серия = ТекСерия;
				НоваяСтрока.Назначение = ТекНазначение;
				
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.КоличествоУпаковок = Количество;
				НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			КонецЕсли;
			
			ТекРаспоряжение             = ВыборкаПоУпаковкам.Распоряжение;
			ТекНоменклатура             = ВыборкаПоУпаковкам.Номенклатура;
			МернаяЕдиницаИзмерения      = ВыборкаПоУпаковкам.МернаяЕдиницаИзмерения;
			ТекХарактеристика           = ВыборкаПоУпаковкам.Характеристика;
			ТекСклад                    = ВыборкаПоУпаковкам.Склад;
			ТекПомещение                = ВыборкаПоУпаковкам.Помещение;
			ТекСерия                    = ВыборкаПоУпаковкам.Серия;
			ТекНазначение               = ВыборкаПоУпаковкам.Назначение;
			Количество = ВыборкаПоУпаковкам.Количество;
			
		КонецЕсли;
		
		КоличествоВДокумент = Цел(Количество / ВыборкаПоУпаковкам.КоличествоВУпаковке);
		
		Если КоличествоВДокумент > 0 Тогда
			
			НоваяСтрока = ТаблицаТребуемыхУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоУпаковкам);
			
			НоваяСтрока.Количество = КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
			НоваяСтрока.КоличествоУпаковок = КоличествоВДокумент;
			Количество = Количество - КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Количество<>0 И ВыборкаПоУпаковкам.МернаяЕдиницаИзмерения Тогда
		НоваяСтрока = ТаблицаТребуемыхУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоУпаковкам);
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.КоличествоУпаковок = Количество;
		НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УпаковкиПоРаспоряжениям.Номенклатура КАК Номенклатура,
	|	УпаковкиПоРаспоряжениям.Характеристика КАК Характеристика,
	|	УпаковкиПоРаспоряжениям.Упаковка КАК Упаковка,
	|	УпаковкиПоРаспоряжениям.Серия КАК Серия,
	|	УпаковкиПоРаспоряжениям.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	УпаковкиПоРаспоряжениям.Количество КАК Количество,
	|	УпаковкиПоРаспоряжениям.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УпаковкиПоРаспоряжениям.Склад КАК Склад,
	|	УпаковкиПоРаспоряжениям.Помещение КАК Помещение,
	|	УпаковкиПоРаспоряжениям.Назначение КАК Назначение
	|ПОМЕСТИТЬ УпаковкиПоРаспоряжениямДляГруппировки
	|ИЗ
	|	&ТаблицаУпаковокПоТекущимРаспоряжениям КАК УпаковкиПоРаспоряжениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиПоРаспоряжениямДляЗапроса.Номенклатура,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Характеристика,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Упаковка,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Серия,
	|	СУММА(УпаковкиПоРаспоряжениямДляЗапроса.Количество) КАК Количество,
	|	СУММА(УпаковкиПоРаспоряжениямДляЗапроса.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Склад,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Помещение,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Назначение
	|ПОМЕСТИТЬ " + ?(ПоРаспоряжениямНаОтбор, "УпаковкиКПодпиткеДляЗапроса",  "УпаковкиПоРаспоряжениям") + "
	|ИЗ
	|	УпаковкиПоРаспоряжениямДляГруппировки КАК УпаковкиПоРаспоряжениямДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиПоРаспоряжениямДляЗапроса.Характеристика,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Назначение,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Упаковка,
	|	УпаковкиПоРаспоряжениямДляЗапроса.КоличествоВУпаковке,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Серия,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Номенклатура,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Склад,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УпаковкиПоРаспоряжениямДляГруппировки";
	
	Запрос.УстановитьПараметр("ТаблицаУпаковокПоТекущимРаспоряжениям",ТаблицаТребуемыхУпаковок);
	Запрос.Выполнить();
		  		
КонецПроцедуры

Процедура ДополнитьТаблицыЗаданийНаПодпиткуТарой(Склад, Помещение, ТаблицаРазмещения, ТаблицаОтбора)
	//1. Дополним таблицу отбора тарой
	//2. Затем распределим тару по упаковкам в таблице размещения
	//3. Оставшуюся тару разместим по правилам размещения
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СтруктураТаблицАлгоритмаОтборТоваров = СтруктураТаблицАлгоритмаОтборТоваров();
	ТаблицаОтбора.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1)));
	
	СтруктураТаблицАлгоритмаОтборТоваров.ТаблицаРезультатов = ТаблицаОтбора;
	СтруктураТаблицАлгоритмаОтборТоваров.Вставить("ТаблицаРазмещения",ТаблицаРазмещения);
	
	ДополнитьМногооборотнойТаройТаблицуОтбора(МенеджерВременныхТаблиц, СтруктураТаблицАлгоритмаОтборТоваров, Ложь);
	
	ДополнитьМногооборотнойТаройТаблицуРазмещения(ТаблицаРазмещения);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.Упаковка,
	|	ТаблицаОтбора.Характеристика,
	|	ТаблицаОтбора.Назначение,
	|	ТаблицаОтбора.Серия,
	|	ТаблицаОтбора.КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРазмещения.Номенклатура,
	|	ТаблицаРазмещения.Упаковка,
	|	ТаблицаРазмещения.Характеристика,
	|	ТаблицаРазмещения.Назначение,
	|	ТаблицаРазмещения.Серия,
	|	ТаблицаРазмещения.КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаРазмещения
	|ИЗ
	|	&ТаблицаРазмещения КАК ТаблицаРазмещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Серия,
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|		ТаблицаОтбора.Упаковка КАК Упаковка,
	|		ТаблицаОтбора.Характеристика КАК Характеристика,
	|		ТаблицаОтбора.Назначение КАК Назначение,
	|		ТаблицаОтбора.Серия КАК Серия,
	|		ТаблицаОтбора.КоличествоУпаковок КАК КоличествоУпаковок
	|	ИЗ
	|		ТаблицаОтбора КАК ТаблицаОтбора
	|	ГДЕ
	|		ВЫРАЗИТЬ(ТаблицаОтбора.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРазмещения.Номенклатура,
	|		ТаблицаРазмещения.Упаковка,
	|		ТаблицаРазмещения.Характеристика,
	|		ТаблицаРазмещения.Назначение,
	|		ТаблицаРазмещения.Серия,
	|		-ТаблицаРазмещения.КоличествоУпаковок
	|	ИЗ
	|		ТаблицаРазмещения КАК ТаблицаРазмещения
	|	ГДЕ
	|		ВЫРАЗИТЬ(ТаблицаРазмещения.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) > 0";

	Запрос.УстановитьПараметр("ТаблицаОтбора", СтруктураТаблицАлгоритмаОтборТоваров.ТаблицаРезультатов);
	Запрос.УстановитьПараметр("ТаблицаРазмещения", ТаблицаРазмещения);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[2].Выгрузить()[0].Количество > 0 Тогда
		РезультатРазмещения = РазместитьТоварВЯчейках(МенеджерВременныхТаблиц, Склад, Помещение, Справочники.РабочиеУчастки.ПустаяСсылка(), Справочники.СкладскиеЯчейки.ПустаяСсылка(), Ложь);
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаРазмещения,РезультатРазмещения.ТаблицаРезультатов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРасчетПоказателейДляПрогнозаИКлассифицациюУпаковок(НастройкиПодпитки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодКлассификации = Перечисления.Периодичность.День;
	КоличествоПериодовКлассификации = НастройкиПодпитки.ГлубинаАнализа;
	ПериодКлассификации = Перечисления.Периодичность.День;
	
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(ТекущаяДатаСеанса() + 86400, ПериодКлассификации, - КоличествоПериодовКлассификации);
	
	//Проверка заблокированных данных
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
		"РегистрНакопления.ТоварыКОтбору", "Распоряжение", МенеджерВременныхТаблиц);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТЗаблокированоТоварыКОтбору.Распоряжение
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору КАК ТоварыКОтбору
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаблокированоТоварыКОтбору КАК ВТЗаблокированоТоварыКОтбору
	|		ПО ТоварыКОтбору.Распоряжение = ВТЗаблокированоТоварыКОтбору.Распоряжение
	|ГДЕ
	|	ТоварыКОтбору.Распоряжение.Склад = &Склад";
	Запрос.УстановитьПараметр("Склад", НастройкиПодпитки.Склад);
	ДанныеНеЗаблокированны = Запрос.Выполнить().Пустой();
	
	Если ДанныеНеЗаблокированны Тогда
		СоздатьТаблицуУпаковокПоИсторииОтгрузок(НастройкиПодпитки.Склад, НастройкиПодпитки.Помещение, Период, МенеджерВременныхТаблиц);
		
		ВыполнитьВыполнитьXYZКлассификациюУпаковок(Период, МенеджерВременныхТаблиц);
		
		ВыполнитьРасчетПоказателейПрогнозаРасходаУпаковок(Период, МенеджерВременныхТаблиц);
		
		ЗаписатьПоказателиПрогнозаВРегистр(НастройкиПодпитки.Склад, НастройкиПодпитки.Помещение, МенеджерВременныхТаблиц);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьТаблицуУпаковокПоИсторииОтгрузок(Склад, Помещение, Период, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК ДокументОтгрузки,
	|	РасходныйОрдерНаТовары.Склад,
	|	РасходныйОрдерНаТовары.Помещение,
	|	РасходныйОрдерНаТовары.ДатаОтгрузки
	|ПОМЕСТИТЬ ТаблицаРаспоряжений
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.Склад = &Склад
	|	И РасходныйОрдерНаТовары.Помещение = &Помещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка,
	|	ОрдерНаПеремещениеТоваров.Склад,
	|	ОрдерНаПеремещениеТоваров.ПомещениеОтправитель,
	|	ОрдерНаПеремещениеТоваров.ДатаОтгрузки
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	ОрдерНаПеремещениеТоваров.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ОрдерНаПеремещениеТоваров.Проведен
	|	И ОрдерНаПеремещениеТоваров.Склад = &Склад
	|	И ОрдерНаПеремещениеТоваров.ПомещениеОтправитель = &Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОбороты.Распоряжение,
	|	ТоварыКОтборуОбороты.Номенклатура,
	|	ТоварыКОтборуОбороты.Характеристика,
	|	ТоварыКОтборуОбороты.Серия,
	|	СУММА(ТоварыКОтборуОбороты.ОтобраноРасход + ТоварыКОтборуОбороты.КОтборуПриход) КАК Количество,
	|	ВЫБОР
	|		КОГДА ТоварыКОтборуОбороты.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|			ТОГДА ТоварыКОтборуОбороты.Номенклатура
	|		ИНАЧЕ ТоварыКОтборуОбороты.Номенклатура.НаборУпаковок
	|	КОНЕЦ КАК ВладелецУпаковок,
	|	ТаблицаРаспоряжений.Склад,
	|	ТаблицаРаспоряжений.Помещение,
	|	ТаблицаРаспоряжений.ДатаОтгрузки
	|ПОМЕСТИТЬ ОтобранныеТовары
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Обороты(
	|			,
	|			,
	|			,
	|			Распоряжение В
	|					(ВЫБРАТЬ
	|						ТаблицаРаспоряжений.ДокументОтгрузки КАК Распоряжение
	|					ИЗ
	|						ТаблицаРаспоряжений КАК ТаблицаРаспоряжений)
	|				И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыКОтборуОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО ТоварыКОтборуОбороты.Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|			И (ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|		ПО ТоварыКОтборуОбороты.Распоряжение = ТаблицаРаспоряжений.ДокументОтгрузки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтборуОбороты.Распоряжение,
	|	ТоварыКОтборуОбороты.Номенклатура,
	|	ТоварыКОтборуОбороты.Характеристика,
	|	ТоварыКОтборуОбороты.Серия,
	|	ТаблицаРаспоряжений.Склад,
	|	ТаблицаРаспоряжений.Помещение,
	|	ТаблицаРаспоряжений.ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ТоварыКОтборуОбороты.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|			ТОГДА ТоварыКОтборуОбороты.Номенклатура
	|		ИНАЧЕ ТоварыКОтборуОбороты.Номенклатура.НаборУпаковок
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеТовары.Распоряжение,
	|	ОтобранныеТовары.Номенклатура,
	|	ОтобранныеТовары.Характеристика,
	|	ОтобранныеТовары.Серия,
	|	ОтобранныеТовары.Количество,
	|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки КАК КоличествоВУпаковке,
	|	ОтобранныеТовары.Склад,
	|	ОтобранныеТовары.Помещение,
	|	НАЧАЛОПЕРИОДА(ОтобранныеТовары.ДатаОтгрузки, ДЕНЬ) КАК Период
	|ИЗ
	|	ОтобранныеТовары КАК ОтобранныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО ОтобранныеТовары.ВладелецУпаковок = УпаковкиНоменклатуры.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтобранныеТовары.Распоряжение,
	|	ОтобранныеТовары.Склад,
	|	ОтобранныеТовары.Помещение,
	|	ОтобранныеТовары.Номенклатура,
	|	ОтобранныеТовары.Характеристика,
	|	ОтобранныеТовары.Серия,
	|	КоличествоВУпаковке УБЫВ,
	|	Упаковка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкиНоменклатуры", Неопределено));
			
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
			
	ТаблицаТребуемыхУпаковок = Новый ТаблицаЗначений;
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Количество", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("КоличествоВУпаковке", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ТекРаспоряжение = Неопределено;
	ТекНоменклатура = Неопределено;
	ТекХарактеристика = Неопределено;
	ТекСклад = Неопределено;
	ТекПомещение = Неопределено;
	ТекСерия = Неопределено;
	ТекПериод = Неопределено;
	Количество = 0;
	
	ВыборкаПоУпаковкам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоУпаковкам.Следующий() Цикл
		
		Если ВыборкаПоУпаковкам.Номенклатура <> ТекНоменклатура Или 
			ВыборкаПоУпаковкам.Распоряжение <> ТекРаспоряжение Или
			ВыборкаПоУпаковкам.Характеристика <> ТекХарактеристика Или
			ВыборкаПоУпаковкам.Склад <> ТекСклад Или
			ВыборкаПоУпаковкам.Помещение <> ТекПомещение Или
			ВыборкаПоУпаковкам.Период <> ТекПериод Или
			ВыборкаПоУпаковкам.Серия <> ТекСерия Тогда
			
			ТекРаспоряжение             = ВыборкаПоУпаковкам.Распоряжение;
			ТекНоменклатура             = ВыборкаПоУпаковкам.Номенклатура;
			ТекХарактеристика           = ВыборкаПоУпаковкам.Характеристика;
			ТекСклад                    = ВыборкаПоУпаковкам.Склад;
			ТекПомещение                = ВыборкаПоУпаковкам.Помещение;
			ТекСерия                    = ВыборкаПоУпаковкам.Серия;
			ТекПериод                   = ВыборкаПоУпаковкам.Период;			
			Количество = ВыборкаПоУпаковкам.Количество;
			
		КонецЕсли;
		
		КоличествоВДокумент = Цел(Количество / ВыборкаПоУпаковкам.КоличествоВУпаковке);
		
		Если КоличествоВДокумент > 0 Тогда
			
			НоваяСтрока = ТаблицаТребуемыхУпаковок.Добавить();
			НоваяСтрока.Количество = КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
			НоваяСтрока.КоличествоУпаковок = КоличествоВДокумент;
			НоваяСтрока.Упаковка = ВыборкаПоУпаковкам.Упаковка;
			НоваяСтрока.Номенклатура = ВыборкаПоУпаковкам.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаПоУпаковкам.Характеристика;
			НоваяСтрока.Склад = ВыборкаПоУпаковкам.Склад;
			НоваяСтрока.Помещение = ВыборкаПоУпаковкам.Помещение;
			НоваяСтрока.Серия = ВыборкаПоУпаковкам.Серия;
			НоваяСтрока.Период = ВыборкаПоУпаковкам.Период;
			НоваяСтрока.КоличествоВУпаковке = ВыборкаПоУпаковкам.КоличествоВУпаковке;
			
			Количество = Количество - КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.КоличествоУпаковок,
	|	ТаблицаУпаковок.КоличествоВУпаковке,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаУпаковок.Помещение,
	|	ТаблицаУпаковок.Период
	|ПОМЕСТИТЬ ТаблицаУпаковокДляЗапроса
	|ИЗ
	|	&ТаблицаУпаковок КАК ТаблицаУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковокДляЗапроса.Номенклатура,
	|	ТаблицаУпаковокДляЗапроса.Характеристика,
	|	ТаблицаУпаковокДляЗапроса.Серия,
	|	ТаблицаУпаковокДляЗапроса.Упаковка,
	|	ТаблицаУпаковокДляЗапроса.КоличествоВУпаковке,
	|	СУММА(ТаблицаУпаковокДляЗапроса.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТаблицаУпаковокДляЗапроса.Склад,
	|	ТаблицаУпаковокДляЗапроса.Помещение,
	|	ТаблицаУпаковокДляЗапроса.Период КАК Период
	|ПОМЕСТИТЬ ТаблицаУпаковок
	|ИЗ
	|	ТаблицаУпаковокДляЗапроса КАК ТаблицаУпаковокДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковокДляЗапроса.Номенклатура,
	|	ТаблицаУпаковокДляЗапроса.КоличествоВУпаковке,
	|	ТаблицаУпаковокДляЗапроса.Характеристика,
	|	ТаблицаУпаковокДляЗапроса.Серия,
	|	ТаблицаУпаковокДляЗапроса.Упаковка,
	|	ТаблицаУпаковокДляЗапроса.Склад,
	|	ТаблицаУпаковокДляЗапроса.Помещение,
	|	ТаблицаУпаковокДляЗапроса.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаУпаковокДляЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаУпаковок", ТаблицаТребуемыхУпаковок);
	Запрос.Выполнить();
	
КонецПроцедуры		

Процедура ВыполнитьВыполнитьXYZКлассификациюУпаковок(Период, МенеджерВременныхТаблиц)
	
	ИсточникДанных = Новый Структура;
	ИсточникДанных.Вставить("ИсточникДанных",ИсточникДанныхДляXYZКлассификации(Период, МенеджерВременныхТаблиц));
	ИсточникДанных.Вставить("НачалоПериода",Период.ДатаНачала);
	ИсточникДанных.Вставить("ОкончаниеПериода",Период.ДатаОкончания);
		
	РезультатКлассификации = Классификация.ВыполнитьXYZКлассификацию(ИсточникДанных,
																	"КоличествоУпаковок", "Склад, Помещение, Номенклатура, Характеристика, Серия, Упаковка");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатКлассификации.Номенклатура,
	|	РезультатКлассификации.Характеристика,
	|	РезультатКлассификации.Серия,
	|	РезультатКлассификации.Упаковка,
	|	РезультатКлассификации.Склад,
	|	РезультатКлассификации.Помещение,
	|	РезультатКлассификации.Класс
	|ПОМЕСТИТЬ РезультатКлассификации
	|ИЗ
	|	&РезультатКлассификации КАК РезультатКлассификации;";
	
	Запрос.УстановитьПараметр("РезультатКлассификации", РезультатКлассификации);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ИсточникДанныхДляXYZКлассификации(Период, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	ДанныеДляКлассификации.Номенклатура КАК Номенклатура,
	|	ДанныеДляКлассификации.Характеристика КАК Характеристика,
	|	ДанныеДляКлассификации.Серия КАК Серия,
	|	ДанныеДляКлассификации.Упаковка КАК Упаковка,
	|	ДанныеДляКлассификации.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ДанныеДляКлассификации.Склад КАК Склад,
	|	ДанныеДляКлассификации.Помещение КАК Помещение,
	|	ВЫРАЗИТЬ(ДанныеДляКлассификации.Период КАК ДАТА) КАК Период
	|ИЗ
	|	ТаблицаУпаковок КАК ДанныеДляКлассификации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляКлассификации.Склад,
	|	ДанныеДляКлассификации.Помещение
	|ИТОГИ
	|	МАКСИМУМ(РазделительКлассификации),
	|	СУММА(КоличествоУпаковок)
	|ПО
	|	Склад,
	|	Помещение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Упаковка,
	|	Период ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &ОкончаниеПериода)";
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	
	Возврат Запрос.Выполнить();
		
КонецФункции

Процедура ВыполнитьРасчетПоказателейПрогнозаРасходаУпаковок(Период, МенеджерВременныхТаблиц)
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ДатаИзПериода = НачалоДня(Период.ДатаНачала);
	
	Пока ДатаИзПериода <= НачалоДня(Период.ДатаОкончания) Цикл 
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Период = ДатаИзПериода;
		ДатаИзПериода = ДатаИзПериода + 86400;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.КоличествоВУпаковке,
	|	СУММА(ТаблицаУпаковок.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаУпаковок.Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаУпаковок.Период) КАК КоличествоДнейСРасходом
	|ПОМЕСТИТЬ ТаблицаУпаковокБезПериодов
	|ИЗ
	|	ТаблицаУпаковок КАК ТаблицаУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.КоличествоВУпаковке,
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаУпаковок.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДат.Период
	|ПОМЕСТИТЬ ТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОстаткиИОборотыТоваров.ВНаличииКонечныйОстаток) КАК Количество,
	|	ОстаткиИОборотыТоваров.Номенклатура,
	|	ОстаткиИОборотыТоваров.Характеристика,
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ОстаткиИОборотыТоваров.Период,
	|	ОстаткиИОборотыТоваров.Склад,
	|	ОстаткиИОборотыТоваров.Помещение
	|ПОМЕСТИТЬ ОстаткиИОборотыТоваров
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			День,
	|			ДвиженияИГраницыПериода,
	|			(Склад, Помещение, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ТаблицаУпаковок.Склад,
	|					ТаблицаУпаковок.Помещение,
	|					ТаблицаУпаковок.Номенклатура,
	|					ТаблицаУпаковок.Характеристика
	|				ИЗ
	|					ТаблицаУпаковокБезПериодов КАК ТаблицаУпаковок)) КАК ОстаткиИОборотыТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУпаковокБезПериодов КАК ТаблицаУпаковокБезПериодов
	|		ПО ОстаткиИОборотыТоваров.Номенклатура = ТаблицаУпаковокБезПериодов.Номенклатура
	|			И ОстаткиИОборотыТоваров.Характеристика = ТаблицаУпаковокБезПериодов.Характеристика
	|			И ОстаткиИОборотыТоваров.Склад = ТаблицаУпаковокБезПериодов.Склад
	|			И ОстаткиИОборотыТоваров.Помещение = ТаблицаУпаковокБезПериодов.Помещение
	|			И (ОстаткиИОборотыТоваров.Серия = ТаблицаУпаковокБезПериодов.Серия
	|				ИЛИ ТаблицаУпаковокБезПериодов.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ОстаткиИОборотыТоваров.Характеристика,
	|	ОстаткиИОборотыТоваров.Номенклатура,
	|	ОстаткиИОборотыТоваров.Период,
	|	ОстаткиИОборотыТоваров.Склад,
	|	ОстаткиИОборотыТоваров.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиУпаковок.Количество,
	|	ОстаткиУпаковок.Номенклатура,
	|	ОстаткиУпаковок.Характеристика,
	|	ОстаткиУпаковок.Серия,
	|	ОстаткиУпаковок.Склад,
	|	ОстаткиУпаковок.Помещение,
	|	ТаблицаДат.Период,
	|	МИНИМУМ(ОстаткиУпаковок.Период) КАК ПериодВТаблицеОборотов
	|ПОМЕСТИТЬ ПериодыОстатковТоваров
	|ИЗ
	|	ТаблицаДат КАК ТаблицаДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиИОборотыТоваров КАК ОстаткиУпаковок
	|		ПО ТаблицаДат.Период >= ОстаткиУпаковок.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиУпаковок.Серия,
	|	ОстаткиУпаковок.Номенклатура,
	|	ТаблицаДат.Период,
	|	ОстаткиУпаковок.Характеристика,
	|	ОстаткиУпаковок.Помещение,
	|	ОстаткиУпаковок.Склад,
	|	ОстаткиУпаковок.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиИОборотыТоваров.Номенклатура,
	|	ОстаткиИОборотыТоваров.Характеристика,
	|	ОстаткиИОборотыТоваров.Серия,
	|	ОстаткиИОборотыТоваров.Склад,
	|	ОстаткиИОборотыТоваров.Помещение,
	|	ОстаткиИОборотыТоваров.Количество,
	|	ПериодыОстатковТоваров.Период
	|ПОМЕСТИТЬ ОстаткиТоваровПоДням
	|ИЗ
	|	ОстаткиИОборотыТоваров КАК ОстаткиИОборотыТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыОстатковТоваров КАК ПериодыОстатковТоваров
	|		ПО ОстаткиИОборотыТоваров.Номенклатура = ПериодыОстатковТоваров.Номенклатура
	|			И ОстаткиИОборотыТоваров.Характеристика = ПериодыОстатковТоваров.Характеристика
	|			И ОстаткиИОборотыТоваров.Серия = ПериодыОстатковТоваров.Серия
	|			И ОстаткиИОборотыТоваров.Склад = ПериодыОстатковТоваров.Склад
	|			И ОстаткиИОборотыТоваров.Помещение = ПериодыОстатковТоваров.Помещение
	|			И ОстаткиИОборотыТоваров.Период = ПериодыОстатковТоваров.ПериодВТаблицеОборотов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковокБезПериодов.Номенклатура,
	|	ТаблицаУпаковокБезПериодов.Характеристика,
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ТаблицаУпаковокБезПериодов.Упаковка,
	|	ТаблицаУпаковокБезПериодов.КоличествоУпаковок,
	|	ТаблицаУпаковокБезПериодов.Склад,
	|	ТаблицаУпаковокБезПериодов.Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиТоваровПоДням.Период) КАК КоличествоДнейСОстатком
	|ПОМЕСТИТЬ ТаблицаКоличествоДнейСОстатком
	|ИЗ
	|	ТаблицаУпаковокБезПериодов КАК ТаблицаУпаковокБезПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТоваровПоДням КАК ОстаткиТоваровПоДням
	|		ПО ТаблицаУпаковокБезПериодов.Номенклатура = ОстаткиТоваровПоДням.Номенклатура
	|			И ТаблицаУпаковокБезПериодов.Характеристика = ОстаткиТоваровПоДням.Характеристика
	|			И ТаблицаУпаковокБезПериодов.Серия = ОстаткиТоваровПоДням.Серия
	|			И ТаблицаУпаковокБезПериодов.Склад = ОстаткиТоваровПоДням.Склад
	|			И ТаблицаУпаковокБезПериодов.Помещение = ОстаткиТоваровПоДням.Помещение
	|ГДЕ
	|	ОстаткиТоваровПоДням.Количество > ТаблицаУпаковокБезПериодов.КоличествоВУпаковке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковокБезПериодов.Упаковка,
	|	ТаблицаУпаковокБезПериодов.КоличествоУпаковок,
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ТаблицаУпаковокБезПериодов.Номенклатура,
	|	ТаблицаУпаковокБезПериодов.Помещение,
	|	ТаблицаУпаковокБезПериодов.Склад,
	|	ТаблицаУпаковокБезПериодов.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковокБезПериодов.Номенклатура,
	|	ТаблицаУпаковокБезПериодов.Характеристика,
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ТаблицаУпаковокБезПериодов.Упаковка,
	|	ТаблицаУпаковокБезПериодов.КоличествоВУпаковке,
	|	ТаблицаУпаковокБезПериодов.КоличествоУпаковок,
	|	ТаблицаУпаковокБезПериодов.Склад,
	|	ТаблицаУпаковокБезПериодов.Помещение,
	|	ТаблицаУпаковокБезПериодов.КоличествоДнейСРасходом,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаКоличествоДнейСОстатком.КоличествоДнейСОстатком, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаУпаковокБезПериодов.КоличествоДнейСРасходом / ТаблицаКоличествоДнейСОстатком.КоличествоДнейСОстатком
	|	КОНЕЦ * 100 КАК ВероятностьОтгрузкиВТечениеДня,
	|	ТаблицаУпаковокБезПериодов.КоличествоУпаковок / ТаблицаУпаковокБезПериодов.КоличествоДнейСРасходом КАК СреднедневноеПотребление
	|ПОМЕСТИТЬ ТаблицаСреднедневногоПотребления
	|ИЗ
	|	ТаблицаУпаковокБезПериодов КАК ТаблицаУпаковокБезПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличествоДнейСОстатком КАК ТаблицаКоличествоДнейСОстатком
	|		ПО ТаблицаУпаковокБезПериодов.Номенклатура = ТаблицаКоличествоДнейСОстатком.Номенклатура
	|			И ТаблицаУпаковокБезПериодов.Характеристика = ТаблицаКоличествоДнейСОстатком.Характеристика
	|			И ТаблицаУпаковокБезПериодов.Серия = ТаблицаКоличествоДнейСОстатком.Серия
	|			И ТаблицаУпаковокБезПериодов.Упаковка = ТаблицаКоличествоДнейСОстатком.Упаковка
	|			И ТаблицаУпаковокБезПериодов.Склад = ТаблицаКоличествоДнейСОстатком.Склад
	|			И ТаблицаУпаковокБезПериодов.Помещение = ТаблицаКоличествоДнейСОстатком.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаУпаковок.Помещение,
	|	СУММА((ТаблицаУпаковок.КоличествоУпаковок - ТаблицаСреднедневногоПотребления.СреднедневноеПотребление) * (ТаблицаУпаковок.КоличествоУпаковок - ТаблицаСреднедневногоПотребления.СреднедневноеПотребление) / ВЫБОР
	|			КОГДА ТаблицаСреднедневногоПотребления.КоличествоДнейСРасходом < 2
	|				ТОГДА 1
	|			ИНАЧЕ ТаблицаСреднедневногоПотребления.КоличествоДнейСРасходом - 1
	|		КОНЕЦ) КАК Дисперсия,
	|	ТаблицаСреднедневногоПотребления.СреднедневноеПотребление,
	|	ТаблицаСреднедневногоПотребления.ВероятностьОтгрузкиВТечениеДня
	|ИЗ
	|	ТаблицаУпаковок КАК ТаблицаУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСреднедневногоПотребления КАК ТаблицаСреднедневногоПотребления
	|		ПО ТаблицаУпаковок.Номенклатура = ТаблицаСреднедневногоПотребления.Номенклатура
	|			И ТаблицаУпаковок.Характеристика = ТаблицаСреднедневногоПотребления.Характеристика
	|			И ТаблицаУпаковок.Упаковка = ТаблицаСреднедневногоПотребления.Упаковка
	|			И ТаблицаУпаковок.Серия = ТаблицаСреднедневногоПотребления.Серия
	|			И ТаблицаУпаковок.Склад = ТаблицаСреднедневногоПотребления.Склад
	|			И ТаблицаУпаковок.Помещение = ТаблицаСреднедневногоПотребления.Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Помещение,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаСреднедневногоПотребления.СреднедневноеПотребление,
	|	ТаблицаСреднедневногоПотребления.ВероятностьОтгрузкиВТечениеДня";
	
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПоказателей.Колонки.Добавить("СреднеквадратическоеОтклонение", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
 
	Для Каждого СтрТабл из ТаблицаПоказателей Цикл
		СтрТабл.СреднеквадратическоеОтклонение = Sqrt(СтрТабл.Дисперсия);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоказателиПрогноза.Номенклатура,
	|	ПоказателиПрогноза.Характеристика,
	|	ПоказателиПрогноза.Серия,
	|	ПоказателиПрогноза.Упаковка,
	|	ПоказателиПрогноза.Склад,
	|	ПоказателиПрогноза.Помещение,
	|	ПоказателиПрогноза.СреднедневноеПотребление,
	|	ПоказателиПрогноза.СреднеквадратическоеОтклонение,
	|	ПоказателиПрогноза.ВероятностьОтгрузкиВТечениеДня
	|ПОМЕСТИТЬ ПоказателиПрогноза
	|ИЗ
	|	&ПоказателиПрогноза КАК ПоказателиПрогноза";
	
	Запрос.УстановитьПараметр("ПоказателиПрогноза", ТаблицаПоказателей);
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура ЗаписатьПоказателиПрогнозаВРегистр(Склад, Помещение, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Помещение,
	|	МАКСИМУМ(ВложенныйЗапрос.СреднедневноеПотребление) КАК СреднедневноеПотребление,
	|	МАКСИМУМ(ВложенныйЗапрос.СреднеквадратическоеОтклонение) КАК СреднеквадратическоеОтклонение,
	|	МАКСИМУМ(ВложенныйЗапрос.ВероятностьОтгрузкиВТечениеДня) КАК ВероятностьОтгрузкиВТечениеДня,
	|	МАКСИМУМ(ВложенныйЗапрос.НазначеноПользователем) КАК НазначеноПользователем,
	|	МАКСИМУМ(ВложенныйЗапрос.НормативноеКоличествоЗапаса) КАК НормативноеКоличествоЗапаса,
	|	МАКСИМУМ(ВложенныйЗапрос.Класс) КАК Класс
	|ИЗ
	|	(ВЫБРАТЬ
	|		РезультатКлассификации.Номенклатура КАК Номенклатура,
	|		РезультатКлассификации.Характеристика КАК Характеристика,
	|		РезультатКлассификации.Серия КАК Серия,
	|		РезультатКлассификации.Упаковка КАК Упаковка,
	|		РезультатКлассификации.Склад КАК Склад,
	|		РезультатКлассификации.Помещение КАК Помещение,
	|		0 КАК СреднедневноеПотребление,
	|		0 КАК СреднеквадратическоеОтклонение,
	|		0 КАК ВероятностьОтгрузкиВТечениеДня,
	|		ЛОЖЬ КАК НазначеноПользователем,
	|		0 КАК НормативноеКоличествоЗапаса,
	|		РезультатКлассификации.Класс КАК Класс
	|	ИЗ
	|		РезультатКлассификации КАК РезультатКлассификации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоказателиПрогноза.Номенклатура,
	|		ПоказателиПрогноза.Характеристика,
	|		ПоказателиПрогноза.Серия,
	|		ПоказателиПрогноза.Упаковка,
	|		ПоказателиПрогноза.Склад,
	|		ПоказателиПрогноза.Помещение,
	|		ПоказателиПрогноза.СреднедневноеПотребление,
	|		ПоказателиПрогноза.СреднеквадратическоеОтклонение,
	|		ПоказателиПрогноза.ВероятностьОтгрузкиВТечениеДня,
	|		ЛОЖЬ,
	|		0,
	|		ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ПустаяСсылка)
	|	ИЗ
	|		ПоказателиПрогноза КАК ПоказателиПрогноза
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрогнозыРасходаУпаковок.Номенклатура,
	|		ПрогнозыРасходаУпаковок.Характеристика,
	|		ПрогнозыРасходаУпаковок.Серия,
	|		ПрогнозыРасходаУпаковок.Упаковка,
	|		ПрогнозыРасходаУпаковок.Склад,
	|		ПрогнозыРасходаУпаковок.Помещение,
	|		0,
	|		0,
	|		0,
	|		ИСТИНА,
	|		ПрогнозыРасходаУпаковок.НормативноеКоличествоЗапаса,
	|		ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ПустаяСсылка)
	|	ИЗ
	|		РегистрСведений.ПрогнозыРасходаУпаковок КАК ПрогнозыРасходаУпаковок
	|	ГДЕ
	|		ПрогнозыРасходаУпаковок.НазначеноПользователем
	|		И ПрогнозыРасходаУпаковок.Склад = &Склад
	|		И ПрогнозыРасходаУпаковок.Помещение = &Помещение) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Помещение";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Набор = РегистрыСведений.ПрогнозыРасходаУпаковок.СоздатьНаборЗаписей();
	Набор.Отбор.Склад.Установить(Склад);
	Набор.Отбор.Помещение.Установить(Помещение);
	
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеЗаданийНаПеремещение

Процедура СоздатьПодпиткаЗонБыстрогоОтбора(Знач ПараметрыСоздания)
	
	ПараметрыФормированияЗаданий = СкладыСервер.ПараметрыФормированияЗаданийНаПодпитку(Ложь); // не по распоряжениям на отбор
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияЗаданий, ПараметрыСоздания);
	ТекстСообщения = 
		СкладыСервер.ВыполнитьПодпиткуЗБОНаСервере(ПараметрыСоздания.Склад, ПараметрыСоздания.Помещение, ПараметрыФормированияЗаданий);
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПеремещениеТоваровПоОбособлению(Знач ПараметрыСоздания)
	
	// если выполняется обновление ИБ
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "РегистрНакопления.ТоварыВЯчейках", Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = ЗапросПеремещениеПоПравиламРазмещенияОбособленныхТоваров(ПараметрыСоздания);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИдентификаторыЗаданий = Новый Массив;
	
	ТаблицаТоварыКПеремещению = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Результат[22].Колонки Цикл
		ТаблицаТоварыКПеремещению.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	ТаблицаТоварыКПеремещению.Колонки.Добавить("ИдентификаторЗадания", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаТоварыКПеремещению.Колонки.Добавить("Количество", 
		Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	РаспределитьТоварыКПеремещениюПоЗаданиям(Результат, ИдентификаторыЗаданий, ТаблицаТоварыКПеремещению);
	
	ТаблицаТоварыКПеремещению.Индексы.Добавить("ИдентификаторЗадания");
	
	ЗаданияНаПеремещения = СоздатьОбъектыЗаданийНаПеремещение(ИдентификаторыЗаданий, ТаблицаТоварыКПеремещению, ПараметрыСоздания);
	
	КоличествоСозданныхЗаданий = 0;
	Для Каждого ЗаданиеНаПеремещение Из ЗаданияНаПеремещения Цикл
		
		ОшибкиРазмещения = Новый Массив;
		ОшибкиОстатокТары = Новый Массив;
		
		ДополнитьТаройТЧОтбораПеремещениеПоОбособлению(ЗаданиеНаПеремещение, ОшибкиОстатокТары);
		ТоварыОтбор = ЗаданиеНаПеремещение.ТоварыОтбор.Выгрузить();
		ТоварыОтбор.Свернуть(
			"Номенклатура, Характеристика, Назначение, Упаковка, Серия, ОбъемУпаковки, ВесУпаковки, СтатусУказанияСерий",
			"Количество, КоличествоУпаковок");
		ЗаданиеНаПеремещение.ТоварыРазмещение.Загрузить(ТоварыОтбор);
		
		ЗаданиеНаПеремещение.РазместитьТовары("ТоварыРазмещение");
		
		Если ЕстьОшибкиРазмещения(ЗаданиеНаПеремещение) Тогда
			УдалитьСтрокиСОшибкамиРазмещения(ЗаданиеНаПеремещение, ОшибкиРазмещения);
			ДополнитьТаройТЧОтбораПеремещениеПоОбособлению(ЗаданиеНаПеремещение);
			ДополнитьТаройТЧРазмещенияПеремещениеПоОбособлению(ЗаданиеНаПеремещение);
		КонецЕсли;
		
		Если ЗаданиеНаПеремещение.ТоварыОтбор.Количество() Тогда

			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЗаданиеНаПеремещение, Документы.ОтборРазмещениеТоваров);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаданиеНаПеремещение, ПараметрыУказанияСерий.Отбор);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаданиеНаПеремещение, ПараметрыУказанияСерий.Размещение);
			
			Попытка
				
				ЗаданиеНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
			
				Комментарий = НСтр("ru = 'Не удалось создать задание на перемещение по причине: %Ошибка% 
					|%СообщенияПользователю%'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					
				Комментарий = СтрЗаменить(Комментарий, "%Ошибка%", 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);	
				ТекстыСообщений = Новый Массив;
				Для Каждого Сообщение Из СообщенияПользователю Цикл
					ТекстыСообщений.Добавить(Сообщение.Текст);
				КонецЦикла;
				
				Комментарий = СтрЗаменить(Комментарий, "%СообщенияПользователю%", 
					СтрСоединить(ТекстыСообщений, Символы.ПС));
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Автоматическое создание заданий на перемещение'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПеремещение,
					,
					Комментарий);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Комментарий);
						
			КонецПопытки;
			
			КоличествоСозданныхЗаданий = КоличествоСозданныхЗаданий + 1;
			
		КонецЕсли;
			
		Если ОшибкиОстатокТары.Количество() Тогда
		
			Комментарий = НСтр("ru = '%ОшибкиОстатокТары%'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
			Комментарий = СтрЗаменить(Комментарий, "%ОшибкиОстатокТары%", 
				СтрСоединить(ОшибкиОстатокТары, Символы.ПС));
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Автоматическое создание заданий на перемещение'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПеремещение,
				,
				Комментарий);
				
		КонецЕсли;
		
		Если ОшибкиРазмещения.Количество() Тогда
		
			Комментарий = НСтр("ru = '%ОшибкиРазмещения%
				|Проверьте правила размещения.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
			Комментарий = СтрЗаменить(Комментарий, "%ОшибкиРазмещения%", 
				СтрСоединить(ОшибкиРазмещения, Символы.ПС));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Автоматическое создание заданий на перемещение'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПеремещение,
				,
				Комментарий);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСозданныхЗаданий Тогда
		
		Комментарий = НСтр("ru = '%Cозданы% %КоличествоЗаданий% на перемещение.'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		Комментарий = СтрЗаменить(
			Комментарий, 
			"%КоличествоЗаданий%", 
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоСозданныхЗаданий,
				"задание, задания, заданий",
				Истина));
				
		Комментарий = СтрЗаменить(
			Комментарий, 
			"%Cозданы%",
			?(КоличествоСозданныхЗаданий = 1,
				"Cоздано",
				"Cозданы"));
				
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Автоматическое создание заданий на перемещение'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПеремещение,
			,
			Комментарий);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Комментарий);
		
	Иначе
		
		Комментарий = НСтр("ru = 'Задания не сформированы (не удалось сформировать или перемещение не требуется).'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Автоматическое создание заданий на перемещение'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПеремещение,
			,
			Комментарий);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Комментарий);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьОшибкиРазмещения(ЗаданиеНаПеремещение)
	
	Возврат ЗначениеЗаполнено(ЗаданиеНаПеремещение.ТоварыРазмещение.Найти(Справочники.СкладскиеЯчейки.ПустаяСсылка(), "Ячейка"));
	
КонецФункции

Процедура УдалитьСтрокиСОшибкамиРазмещения(ЗаданиеНаПеремещение, ОшибкиРазмещения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыОтбор.Количество,
	|	ТоварыОтбор.КоличествоУпаковок,
	|	ТоварыОтбор.Номенклатура КАК Номенклатура,
	|	ТоварыОтбор.Упаковка КАК Упаковка,
	|	ТоварыОтбор.Характеристика КАК Характеристика,
	|	ТоварыОтбор.Назначение КАК Назначение,
	|	ТоварыОтбор.Ячейка,
	|	ТоварыОтбор.ОбъемУпаковки,
	|	ТоварыОтбор.ВесУпаковки,
	|	ТоварыОтбор.Серия КАК Серия
	|ПОМЕСТИТЬ ВТ_ТоварыОтбор
	|ИЗ
	|	&ТоварыОтбор КАК ТоварыОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Упаковка,
	|	Характеристика,
	|	Назначение,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыРазмещение.Количество,
	|	ТоварыРазмещение.КоличествоУпаковок,
	|	ТоварыРазмещение.Номенклатура КАК Номенклатура,
	|	ТоварыРазмещение.Упаковка КАК Упаковка,
	|	ТоварыРазмещение.Характеристика КАК Характеристика,
	|	ТоварыРазмещение.Назначение КАК Назначение,
	|	ТоварыРазмещение.Ячейка,
	|	ТоварыРазмещение.ОбъемУпаковки,
	|	ТоварыРазмещение.ВесУпаковки,
	|	ТоварыРазмещение.Серия КАК Серия
	|ПОМЕСТИТЬ ВТ_ТоварыРазмещение
	|ИЗ
	|	&ТоварыРазмещение КАК ТоварыРазмещение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Упаковка,
	|	Характеристика,
	|	Назначение,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыОтбор.Количество,
	|	ВТ_ТоварыОтбор.КоличествоУпаковок,
	|	ВТ_ТоварыОтбор.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыОтбор.Упаковка КАК Упаковка,
	|	ВТ_ТоварыОтбор.Характеристика КАК Характеристика,
	|	ВТ_ТоварыОтбор.Назначение КАК Назначение,
	|	ВТ_ТоварыОтбор.Ячейка КАК Ячейка,
	|	ВЫРАЗИТЬ(ВТ_ТоварыОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода КАК ПорядокОбхода,
	|	ВЫРАЗИТЬ(ВТ_ТоварыОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).Код КАК Код,
	|	ВТ_ТоварыОтбор.ОбъемУпаковки,
	|	ВТ_ТоварыОтбор.ВесУпаковки,
	|	ВТ_ТоварыОтбор.Серия КАК Серия,
	|	ЕСТЬNULL(ВТ_ТоварыРазмещение.Количество, 0) КАК КоличествоКУдалению,
	|	ЕСТЬNULL(ВТ_ТоварыРазмещение.КоличествоУпаковок, 0) КАК КоличествоУпаковокКУдалению
	|ИЗ
	|	ВТ_ТоварыОтбор КАК ВТ_ТоварыОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыРазмещение КАК ВТ_ТоварыРазмещение
	|		ПО ВТ_ТоварыОтбор.Номенклатура = ВТ_ТоварыРазмещение.Номенклатура
	|			И ВТ_ТоварыОтбор.Упаковка = ВТ_ТоварыРазмещение.Упаковка
	|			И ВТ_ТоварыОтбор.Характеристика = ВТ_ТоварыРазмещение.Характеристика
	|			И ВТ_ТоварыОтбор.Назначение = ВТ_ТоварыРазмещение.Назначение
	|			И ВТ_ТоварыОтбор.Серия = ВТ_ТоварыРазмещение.Серия
	|			И (ВТ_ТоварыРазмещение.Ячейка = ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка))
	|			И (ВЫРАЗИТЬ(ВТ_ТоварыРазмещение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
	|ГДЕ
	|	ВЫРАЗИТЬ(ВТ_ТоварыОтбор.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫРАЗИТЬ(ВТ_ТоварыОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода УБЫВ,
	|	ВЫРАЗИТЬ(ВТ_ТоварыОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).Код УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(КоличествоКУдалению),
	|	МАКСИМУМ(КоличествоУпаковокКУдалению)
	|ПО
	|	Номенклатура,
	|	Упаковка,
	|	Характеристика,
	|	Назначение,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыРазмещение.Количество,
	|	ВТ_ТоварыРазмещение.КоличествоУпаковок,
	|	ВТ_ТоварыРазмещение.Номенклатура,
	|	ВТ_ТоварыРазмещение.Упаковка,
	|	ВТ_ТоварыРазмещение.Характеристика,
	|	ВТ_ТоварыРазмещение.Назначение,
	|	ВТ_ТоварыРазмещение.Ячейка,
	|	ВТ_ТоварыРазмещение.ОбъемУпаковки,
	|	ВТ_ТоварыРазмещение.ВесУпаковки,
	|	ВТ_ТоварыРазмещение.Серия
	|ИЗ
	|	ВТ_ТоварыРазмещение КАК ВТ_ТоварыРазмещение
	|ГДЕ
	|	ВТ_ТоварыРазмещение.Ячейка <> ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТоварыОтбор", ЗаданиеНаПеремещение.ТоварыОтбор.Выгрузить());
	Запрос.УстановитьПараметр("ТоварыРазмещение", ЗаданиеНаПеремещение.ТоварыРазмещение.Выгрузить());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОтбор = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса[2].Колонки Цикл
		ТаблицаОтбор.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	ВыборкаНоменклатура = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ВыборкаУпаковка = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУпаковка.Следующий() Цикл
			ВыборкаХарактеристика = ВыборкаУпаковка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристика.Следующий() Цикл
				ВыборкаНазначение = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНазначение.Следующий() Цикл
					ВыборкаСерия = ВыборкаНазначение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСерия.Следующий() Цикл
							
						КоличествоКУдалению = ВыборкаСерия.КоличествоКУдалению;
						КоличествоУпаковокКУдалению = ВыборкаСерия.КоличествоУпаковокКУдалению;
						
						ВыборкаДетальныеЗаписи = ВыборкаСерия.Выбрать();
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							
							СтрокаОтбор = ТаблицаОтбор.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаОтбор, ВыборкаДетальныеЗаписи);
							
							Если КоличествоУпаковокКУдалению Тогда
								
								Количество = Мин(ВыборкаДетальныеЗаписи.Количество, КоличествоКУдалению);
								КоличествоУпаковок = Мин(ВыборкаДетальныеЗаписи.КоличествоУпаковок, КоличествоУпаковокКУдалению);
								
								СтрокаОтбор.Количество = СтрокаОтбор.Количество - Количество;
								СтрокаОтбор.КоличествоУпаковок = СтрокаОтбор.КоличествоУпаковок - КоличествоУпаковок;
								
								ШаблонСообщения = НСтр(
									"ru = 'Не удалось подобрать размещение для [Количество] [Упаковка] номенклатуры [Номенклатура], отобранной из ячейки [Ячейка].'");
								СтруктураПараметровСообщения = Новый Структура;
								СтруктураПараметровСообщения.Вставить("Номенклатура", 
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
										ВыборкаДетальныеЗаписи.Номенклатура, 
										ВыборкаДетальныеЗаписи.Характеристика,
										, 
										ВыборкаДетальныеЗаписи.Серия,
										ВыборкаДетальныеЗаписи.Назначение));
								СтруктураПараметровСообщения.Вставить("Ячейка", Строка(ВыборкаДетальныеЗаписи.Ячейка));
								СтруктураПараметровСообщения.Вставить("Количество", Строка(КоличествоУпаковок));
								СтруктураПараметровСообщения.Вставить("Упаковка", Строка(ВыборкаДетальныеЗаписи.Упаковка));
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, СтруктураПараметровСообщения);
								ОшибкиРазмещения.Добавить(ТекстСообщения);
								
								КоличествоКУдалению = КоличествоКУдалению - Количество;
								КоличествоУпаковокКУдалению = КоличествоУпаковокКУдалению - КоличествоУпаковок;
								
							КонецЕсли;
							
							Если Не СтрокаОтбор.КоличествоУпаковок Тогда
								ТаблицаОтбор.Удалить(СтрокаОтбор);
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаОтбор.Сортировать("ПорядокОбхода Возр, Код Возр");
	ЗаданиеНаПеремещение.ТоварыОтбор.Загрузить(ТаблицаОтбор);
	ЗаданиеНаПеремещение.ТоварыРазмещение.Загрузить(РезультатЗапроса[3].Выгрузить());
	
КонецПроцедуры

Функция СоздатьОбъектыЗаданийНаПеремещение(Знач ИдентификаторыЗаданий, Знач ТаблицаТоварыКПеремещению, Знач ПараметрыСоздания)
	
	ЗаданияНаПеремещения = Новый Массив;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение);
	ДанныеЗаполнения.Вставить("Помещение", ПараметрыСоздания.Помещение);
	ДанныеЗаполнения.Вставить("Склад", ПараметрыСоздания.Склад);
	ДанныеЗаполнения.Вставить("РабочийУчасток");
	
	Для Каждого ИдентификаторЗадания Из ИдентификаторыЗаданий Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания);
		СтрокиТоварыКПеремещению = ТаблицаТоварыКПеремещению.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТоварыКПеремещению.Количество() Тогда
			ДанныеЗаполнения.РабочийУчасток = СтрокиТоварыКПеремещению[0].РабочийУчасток;
			ЗаданиеНаПеремещение = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
			ЗаданиеНаПеремещение.Заполнить(ДанныеЗаполнения);
			Для Каждого СтрокаТоварыКПеремещению Из СтрокиТоварыКПеремещению Цикл
				ЗаполнитьЗначенияСвойств(ЗаданиеНаПеремещение.ТоварыОтбор.Добавить(), СтрокаТоварыКПеремещению);
			КонецЦикла;
			ЗаданияНаПеремещения.Добавить(ЗаданиеНаПеремещение);
		КонецЕсли;
	КонецЦикла;
	Возврат ЗаданияНаПеремещения;

КонецФункции

Процедура РаспределитьТоварыКПеремещениюПоЗаданиям(Знач РезультатЗапроса, ИдентификаторыЗаданий, ТаблицаТоварыКПеремещению)
	
	ОченьБольшоеЧисло = 9999999999;
	ИдентификаторЗадания = Неопределено;
	
	ВыборкаРабочийУчасток = РезультатЗапроса[21].Выбрать();
	ВыборкаДетальныеЗаписи = РезультатЗапроса[22].Выбрать();
	
	Пока ВыборкаРабочийУчасток.Следующий() Цикл
		
		ИдентификаторЗадания = Новый УникальныйИдентификатор;
		ИдентификаторыЗаданий.Добавить(ИдентификаторЗадания);
		
		МаксимальныйОбъем = ?(ВыборкаРабочийУчасток.ОграничиватьПоОбъему, ВыборкаРабочийУчасток.ОграничениеПоОбъему, ОченьБольшоеЧисло);
		МаксимальныйВес = ?(ВыборкаРабочийУчасток.ОграничиватьПоВесу, ВыборкаРабочийУчасток.ОграничениеПоВесу, ОченьБольшоеЧисло);
		ДоступныйОбъем = МаксимальныйОбъем;
		ДоступныйВес = МаксимальныйВес;
		
		Пока ВыборкаДетальныеЗаписи.НайтиСледующий(ВыборкаРабочийУчасток.РабочийУчасток, "РабочийУчасток") Цикл
			
			КоличествоУпаковокКРаспределению = ВыборкаДетальныеЗаписи.КоличествоУпаковок;
			ДопустимоеКоличествоУпаковокВПустомЗадании =
				Мин(?(ВыборкаДетальныеЗаписи.ВесУпаковки, 	МаксимальныйВес   / ВыборкаДетальныеЗаписи.ВесУпаковки,   ОченьБольшоеЧисло), 
					?(ВыборкаДетальныеЗаписи.ОбъемУпаковки, МаксимальныйОбъем / ВыборкаДетальныеЗаписи.ОбъемУпаковки, ОченьБольшоеЧисло));
					
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Упаковка) Тогда
				ДопустимоеКоличествоУпаковокВПустомЗадании = Цел(ДопустимоеКоличествоУпаковокВПустомЗадании);
			КонецЕсли;
			
			Пока КоличествоУпаковокКРаспределению >= 1 
				Или (Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Упаковка) И КоличествоУпаковокКРаспределению > 0) Цикл
				
				ДопустимоеКоличествоУпаковок =
					Мин(?(ВыборкаДетальныеЗаписи.ВесУпаковки, 	ДоступныйВес   / ВыборкаДетальныеЗаписи.ВесУпаковки,   ОченьБольшоеЧисло), 
						?(ВыборкаДетальныеЗаписи.ОбъемУпаковки, ДоступныйОбъем / ВыборкаДетальныеЗаписи.ОбъемУпаковки, ОченьБольшоеЧисло));
						
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Упаковка) Тогда
					ДопустимоеКоличествоУпаковок = Цел(ДопустимоеКоличествоУпаковок);
				КонецЕсли;
						
				Если Не ДопустимоеКоличествоУпаковок Тогда
					Если ДопустимоеКоличествоУпаковокВПустомЗадании = 0 Тогда
						// Добавляем минимум одну упаковку, даже если есть превышение веса или объема
						ДопустимоеКоличествоУпаковок = 1;
						ДоступныйОбъем = ВыборкаДетальныеЗаписи.ОбъемУпаковки;
						ДоступныйВес = ВыборкаДетальныеЗаписи.ВесУпаковки;
					Иначе
						ДопустимоеКоличествоУпаковок = ДопустимоеКоличествоУпаковокВПустомЗадании;
						ДоступныйОбъем = МаксимальныйОбъем;
						ДоступныйВес = МаксимальныйВес;
					КонецЕсли;
					ИдентификаторЗадания = Неопределено; // в любом случае новое задание
				КонецЕсли;
					
				Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
					ИдентификаторЗадания = Новый УникальныйИдентификатор;
					ИдентификаторыЗаданий.Добавить(ИдентификаторЗадания);
				КонецЕсли;
				
				СтрокаТоварыКПеремещению = ТаблицаТоварыКПеремещению.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоварыКПеремещению, ВыборкаДетальныеЗаписи);
				СтрокаТоварыКПеремещению.ИдентификаторЗадания = ИдентификаторЗадания;
				
				КоличествоУпаковок = Мин(КоличествоУпаковокКРаспределению, ДопустимоеКоличествоУпаковок);
				СтрокаТоварыКПеремещению.КоличествоУпаковок = КоличествоУпаковок;
				СтрокаТоварыКПеремещению.Количество = КоличествоУпаковок * СтрокаТоварыКПеремещению.КоэффициентУпаковки;
				КоличествоУпаковокКРаспределению = КоличествоУпаковокКРаспределению - КоличествоУпаковок;
						
				ДоступныйВес = ДоступныйВес - СтрокаТоварыКПеремещению.ВесУпаковки * СтрокаТоварыКПеремещению.КоличествоУпаковок;
				ДоступныйОбъем = ДоступныйОбъем - СтрокаТоварыКПеремещению.ОбъемУпаковки * СтрокаТоварыКПеремещению.КоличествоУпаковок;
					
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ЗапросПеремещениеПоПравиламРазмещенияОбособленныхТоваров(Знач ПараметрыСоздания)
	
	Перем Запрос;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ МногооборотнаяТара
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.типыНоменклатуры.Многооборотнаятара)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЯчейкиОбщегоХранения
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Помещение = &Помещение
	|	И НЕ СкладскиеЯчейки.ОбластьХранения.ОбластьОбособленногоХранения
	|	И (СкладскиеЯчейки.РабочийУчасток = &РабочийУчасток
	|			ИЛИ НЕ &ИспользоватьОтборПоРабочемуУчастку)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЯчейкиОбособленногоХранения
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Помещение = &Помещение
	|	И СкладскиеЯчейки.ОбластьХранения.ОбластьОбособленногоХранения
	|	И (СкладскиеЯчейки.РабочийУчасток = &РабочийУчасток
	|			ИЛИ НЕ &ИспользоватьОтборПоРабочемуУчастку)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТоварыДляРаздельногоХранения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеГруппыНоменклатуры КАК СкладскиеГруппыНоменклатуры
	|		ПО Номенклатура.СкладскаяГруппа = СкладскиеГруппыНоменклатуры.Ссылка
	|			И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
	|			И (НЕ СкладскиеГруппыНоменклатуры.ФизическиРазличаетсяОтНазначения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Серия,
	|	ОстаткиВЯчейках.Назначение,
	|	ОстаткиВЯчейках.Ячейка,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.ВНаличииОстаток - ОстаткиВЯчейках.КОтборуОстаток КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ОбособленныеТоварыВОбособленныхЯчейкахОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|					(ВЫБРАТЬ
	|						ЯчейкиОбособленногоХранения.Ссылка
	|					ИЗ
	|						ЯчейкиОбособленногоХранения КАК ЯчейкиОбособленногоХранения)
	|				И Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И НЕ Номенклатура В
	|						(ВЫБРАТЬ
	|							МногооборотнаяТара.Ссылка
	|						ИЗ
	|							МногооборотнаяТара КАК МногооборотнаяТара)) КАК ОстаткиВЯчейках
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОстаткиВЯчейках.Ячейка,
	|	ОстаткиВЯчейках.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ЯчейкиСНесколькимиНазначениями
	|ИЗ
	|	ОбособленныеТоварыВОбособленныхЯчейкахОстатки КАК ОстаткиВЯчейках
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВЯчейках.Ячейка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиВЯчейках.Назначение) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбособленныеТоварыВОбособленныхЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ОбособленныеТоварыВОбособленныхЯчейкахОстатки.Назначение КАК Назначение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбособленныеТоварыВОбособленныхЯчейкахОстатки.Номенклатура) КАК Количество
	|ПОМЕСТИТЬ КоличествоРазличнойНоменклатурыПоНазначениям
	|ИЗ
	|	ОбособленныеТоварыВОбособленныхЯчейкахОстатки КАК ОбособленныеТоварыВОбособленныхЯчейкахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиСНесколькимиНазначениями КАК ЯчейкиСНесколькимиНазначениями
	|		ПО ОбособленныеТоварыВОбособленныхЯчейкахОстатки.Ячейка = ЯчейкиСНесколькимиНазначениями.Ячейка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбособленныеТоварыВОбособленныхЯчейкахОстатки.Ячейка,
	|	ОбособленныеТоварыВОбособленныхЯчейкахОстатки.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбособленныеТоварыВОбособленныхЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоРазличнойНоменклатурыПоНазначениям.Ячейка КАК Ячейка,
	|	МАКСИМУМ(КоличествоРазличнойНоменклатурыПоНазначениям.Количество) КАК Максимум
	|ПОМЕСТИТЬ МаксимумРазличнойНоменклатурыПоНазначениям
	|ИЗ
	|	КоличествоРазличнойНоменклатурыПоНазначениям КАК КоличествоРазличнойНоменклатурыПоНазначениям
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоРазличнойНоменклатурыПоНазначениям.Ячейка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоличествоРазличнойНоменклатурыПоНазначениям.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КоличествоРазличнойНоменклатурыПоНазначениям.Ячейка КАК Ячейка,
	|	МАКСИМУМ(КоличествоРазличнойНоменклатурыПоНазначениям.Назначение) КАК Назначение
	|ПОМЕСТИТЬ НазначенияНужноОставить
	|ИЗ
	|	КоличествоРазличнойНоменклатурыПоНазначениям КАК КоличествоРазличнойНоменклатурыПоНазначениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимумРазличнойНоменклатурыПоНазначениям КАК МаксимумРазличнойНоменклатурыПоНазначениям
	|		ПО КоличествоРазличнойНоменклатурыПоНазначениям.Ячейка = МаксимумРазличнойНоменклатурыПоНазначениям.Ячейка
	|			И КоличествоРазличнойНоменклатурыПоНазначениям.Количество = МаксимумРазличнойНоменклатурыПоНазначениям.Максимум
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоРазличнойНоменклатурыПоНазначениям.Ячейка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Серия,
	|	ОстаткиВЯчейках.Назначение,
	|	ОстаткиВЯчейках.Ячейка,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.ВНаличииОстаток - ОстаткиВЯчейках.КОтборуОстаток КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТоварыКПеремещениюПредварительная
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|					(ВЫБРАТЬ
	|						ЯчейкиОбособленногоХранения.Ссылка
	|					ИЗ
	|						ЯчейкиОбособленногоХранения КАК ЯчейкиОбособленногоХранения)
	|				И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И НЕ Номенклатура В
	|						(ВЫБРАТЬ
	|							МногооборотнаяТара.Ссылка
	|						ИЗ
	|							МногооборотнаяТара)) КАК ОстаткиВЯчейках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Серия,
	|	ОстаткиВЯчейках.Назначение,
	|	ОстаткиВЯчейках.Ячейка,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.ВНаличииОстаток - ОстаткиВЯчейках.КОтборуОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ТоварыДляРаздельногоХранения.Ссылка
	|					ИЗ
	|						ТоварыДляРаздельногоХранения КАК ТоварыДляРаздельногоХранения)
	|				И Ячейка В
	|					(ВЫБРАТЬ
	|						ЯчейкиОбщегоХранения.Ссылка
	|					ИЗ
	|						ЯчейкиОбщегоХранения КАК ЯчейкиОбщегоХранения)
	|				И Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ОстаткиВЯчейках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Серия,
	|	ОстаткиВЯчейках.Назначение,
	|	ОстаткиВЯчейках.Ячейка,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.КоличествоУпаковок
	|ИЗ
	|	ОбособленныеТоварыВОбособленныхЯчейкахОстатки КАК ОстаткиВЯчейках
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиСНесколькимиНазначениями КАК ЯчейкиСНесколькимиНазначениями
	|		ПО ОстаткиВЯчейках.Ячейка = ЯчейкиСНесколькимиНазначениями.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ НазначенияНужноОставить КАК НазначенияНужноОставить
	|		ПО ОстаткиВЯчейках.Ячейка = НазначенияНужноОставить.Ячейка
	|			И ОстаткиВЯчейках.Назначение = НазначенияНужноОставить.Назначение
	|ГДЕ
	|	НазначенияНужноОставить.Назначение ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МногооборотнаяТара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЯчейкиОбщегоХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЯчейкиОбособленногоХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыДляРаздельногоХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеТоварыВОбособленныхЯчейкахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЯчейкиСНесколькимиНазначениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоРазличнойНоменклатурыПоНазначениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаксимумРазличнойНоменклатурыПоНазначениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НазначенияНужноОставить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстРабочийУчасток КАК РабочийУчасток,
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Серия,
	|	ОстаткиВЯчейках.Назначение,
	|	ОстаткиВЯчейках.Ячейка,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ОстаткиВЯчейках.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоэффициентУпаковки,
	|	&ТекстЗапросаВес КАК ВесУпаковки,
	|	&ТекстЗапросаОбъем КАК ОбъемУпаковки
	|ПОМЕСТИТЬ ТоварыКПеремещению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКПеремещениюСПолитикамиСерий.Номенклатура КАК Номенклатура,
	|		ТоварыКПеремещениюСПолитикамиСерий.Характеристика КАК Характеристика,
	|		ТоварыКПеремещениюСПолитикамиСерий.Серия КАК Серия,
	|		ТоварыКПеремещениюСПолитикамиСерий.Назначение КАК Назначение,
	|		ТоварыКПеремещениюСПолитикамиСерий.Ячейка КАК Ячейка,
	|		ТоварыКПеремещениюСПолитикамиСерий.Упаковка КАК Упаковка,
	|		СУММА(ТоварыКПеремещениюСПолитикамиСерий.КоличествоУпаковок) КАК КоличествоУпаковок
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТоварыКПеремещениюПредварительная.Номенклатура КАК Номенклатура,
	|			ТоварыКПеремещениюПредварительная.Характеристика КАК Характеристика,
	|			ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.Ссылка ЕСТЬ NULL
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|						ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|					ТОГДА ТоварыКПеремещениюПредварительная.Серия
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК Серия,
	|			ТоварыКПеремещениюПредварительная.Назначение КАК Назначение,
	|			ТоварыКПеремещениюПредварительная.Ячейка КАК Ячейка,
	|			ТоварыКПеремещениюПредварительная.Упаковка КАК Упаковка,
	|			ТоварыКПеремещениюПредварительная.КоличествоУпаковок КАК КоличествоУпаковок
	|		ИЗ
	|			ТоварыКПеремещениюПредварительная КАК ТоварыКПеремещениюПредварительная
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ПО ТоварыКПеремещениюПредварительная.Номенклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|					И (ПолитикиУчетаСерий.Склад = &Склад)) КАК ТоварыКПеремещениюСПолитикамиСерий
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыКПеремещениюСПолитикамиСерий.Номенклатура,
	|		ТоварыКПеремещениюСПолитикамиСерий.Характеристика,
	|		ТоварыКПеремещениюСПолитикамиСерий.Серия,
	|		ТоварыКПеремещениюСПолитикамиСерий.Назначение,
	|		ТоварыКПеремещениюСПолитикамиСерий.Ячейка,
	|		ТоварыКПеремещениюСПолитикамиСерий.Упаковка) КАК ОстаткиВЯчейках
	|ГДЕ
	|	ОстаткиВЯчейках.КоличествоУпаковок > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыКПеремещениюПредварительная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКПеремещению.РабочийУчасток,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРазбиениеПоРабочимУчасткам
	|			ТОГДА ЕСТЬNULL(РабочиеУчастки.ОграничиватьПоВесу, ЛОЖЬ)
	|		ИНАЧЕ &ОграничиватьПоВесу
	|	КОНЕЦ КАК ОграничиватьПоВесу,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРазбиениеПоРабочимУчасткам
	|			ТОГДА ЕСТЬNULL(РабочиеУчастки.ОграничениеПоВесу, 0)
	|		ИНАЧЕ &ОграничениеПоВесу
	|	КОНЕЦ КАК ОграничениеПоВесу,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРазбиениеПоРабочимУчасткам
	|			ТОГДА ЕСТЬNULL(РабочиеУчастки.ОграничиватьПоОбъему, ЛОЖЬ)
	|		ИНАЧЕ &ОграничиватьПоОбъему
	|	КОНЕЦ КАК ОграничиватьПоОбъему,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРазбиениеПоРабочимУчасткам
	|			ТОГДА ЕСТЬNULL(РабочиеУчастки.ОграничениеПоОбъему, 0)
	|		ИНАЧЕ &ОграничениеПоОбъему
	|	КОНЕЦ КАК ОграничениеПоОбъему
	|ИЗ
	|	ТоварыКПеремещению КАК ТоварыКПеремещению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеУчастки КАК РабочиеУчастки
	|		ПО ТоварыКПеремещению.РабочийУчасток = РабочиеУчастки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыКПеремещению.РабочийУчасток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПеремещению.РабочийУчасток,
	|	ТоварыКПеремещению.Номенклатура,
	|	ТоварыКПеремещению.Характеристика,
	|	ТоварыКПеремещению.Серия,
	|	ТоварыКПеремещению.Назначение,
	|	ТоварыКПеремещению.Ячейка,
	|	ТоварыКПеремещению.Упаковка,
	|	ТоварыКПеремещению.КоличествоУпаковок,
	|	ТоварыКПеремещению.КоэффициентУпаковки,
	|	ТоварыКПеремещению.ВесУпаковки,
	|	ТоварыКПеремещению.ОбъемУпаковки
	|ИЗ
	|	ТоварыКПеремещению КАК ТоварыКПеремещению
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыКПеремещению.РабочийУчасток,
	|	ТоварыКПеремещению.Ячейка.ПорядокОбхода,
	|	ТоварыКПеремещению.Ячейка.Код,
	|	ТоварыКПеремещению.Номенклатура");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ОстаткиВЯчейках.Упаковка",
			"ОстаткиВЯчейках.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"&ТекстЗапросаВес", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"ОстаткиВЯчейках.Упаковка", 
			"ОстаткиВЯчейках.Номенклатура", 
			Ложь));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"&ТекстЗапросаОбъем",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
			"ОстаткиВЯчейках.Упаковка", 
			"ОстаткиВЯчейках.Номенклатура", 
			Ложь));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"&ТекстРабочийУчасток",
		?(ПараметрыСоздания.НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам",
			"ОстаткиВЯчейках.Ячейка.РабочийУчасток",
			"НЕОПРЕДЕЛЕНО"));
	
	Запрос.УстановитьПараметр("Склад", 					ПараметрыСоздания.Склад);
	Запрос.УстановитьПараметр("Помещение", 				ПараметрыСоздания.Помещение);
	Запрос.УстановитьПараметр("РабочийУчасток", 		ПараметрыСоздания.РабочийУчасток);
	Запрос.УстановитьПараметр("ОграничиватьПоОбъему", 	ПараметрыСоздания.ОграничиватьПоОбъему);
	Запрос.УстановитьПараметр("ОграничиватьПоВесу", 	ПараметрыСоздания.ОграничиватьПоВесу);
	Запрос.УстановитьПараметр("ОграничениеПоОбъему", 	ПараметрыСоздания.ОграничениеПоОбъему);
	Запрос.УстановитьПараметр("ОграничениеПоВесу", 		ПараметрыСоздания.ОграничениеПоВесу);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоРабочемуУчастку", 
		ПараметрыСоздания.НастройкаФормированияПоРабочимУчасткам = "ПоОдномуРабочемуУчастку");
	Запрос.УстановитьПараметр("ИспользоватьРазбиениеПоРабочимУчасткам", 
		ПараметрыСоздания.НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам");
	Возврат Запрос;

КонецФункции

Процедура ДополнитьТаройТЧОтбораПеремещениеПоОбособлению(ЗаданиеНаПеремещение, ОшибкиОстатокТары = Неопределено)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОтбор.Номенклатура КАК Номенклатура,
		|	ТаблицаОтбор.Характеристика КАК Характеристика,
		|	ТаблицаОтбор.Назначение,
		|	ТаблицаОтбор.Упаковка КАК Упаковка,
		|	ТаблицаОтбор.Серия КАК Серия,
		|	ТаблицаОтбор.Ячейка КАК Ячейка,
		|	ТаблицаОтбор.КоличествоУпаковок,
		|	ТаблицаОтбор.Количество,
		|	ТаблицаОтбор.ВесУпаковки,
		|	ТаблицаОтбор.ОбъемУпаковки
		|ПОМЕСТИТЬ ТаблицаОтбор
		|ИЗ
		|	&ТаблицаОтбор КАК ТаблицаОтбор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка,
		|	Серия,
		|	Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ТараНоменклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ТараХарактеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ВложенныйЗапрос.Ячейка КАК Ячейка,
		|	ВложенныйЗапрос.ПорядокОбхода КАК ПорядокОбхода,
		|	ВложенныйЗапрос.Код КАК Код,
		|	СУММА(ВложенныйЗапрос.КоличествоТары) КАК Количество,
		|	СУММА(ВложенныйЗапрос.КоличествоТары) КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ОтобраннаяТара
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаОтбор.КоличествоУпаковок * ВариантыПереупаковки.Количество КАК КоличествоТары,
		|		ТаблицаОтбор.Ячейка КАК Ячейка,
		|		ВЫРАЗИТЬ(ТаблицаОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода КАК ПорядокОбхода,
		|		ВЫРАЗИТЬ(ТаблицаОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).Код КАК Код,
		|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара КАК ТараНоменклатура,
		|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара КАК ТараХарактеристика,
		|		ЛОЖЬ КАК УпаковкаПоставляетсяВТаре
		|	ИЗ
		|		ТаблицаОтбор КАК ТаблицаОтбор
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
		|			ПО ТаблицаОтбор.Упаковка = ВариантыПереупаковки.Источник
		|	ГДЕ
		|		ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре
		|		И ВЫРАЗИТЬ(ТаблицаОтбор.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		И ТаблицаОтбор.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаОтбор.КоличествоУпаковок,
		|		ТаблицаОтбор.Ячейка,
		|		ВЫРАЗИТЬ(ТаблицаОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода,
		|		ВЫРАЗИТЬ(ТаблицаОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).Код,
		|		ВЫРАЗИТЬ(ТаблицаОтбор.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).НоменклатураМногооборотнаяТара,
		|		ВЫРАЗИТЬ(ТаблицаОтбор.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ХарактеристикаМногооборотнаяТара,
		|		ИСТИНА
		|	ИЗ
		|		ТаблицаОтбор КАК ТаблицаОтбор
		|	ГДЕ
		|		ВЫРАЗИТЬ(ТаблицаОтбор.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ПоставляетсяВМногооборотнойТаре
		|		И ВЫРАЗИТЬ(ТаблицаОтбор.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ТараНоменклатура,
		|	ВложенныйЗапрос.ТараХарактеристика,
		|	ВложенныйЗапрос.Ячейка,
		|	ВложенныйЗапрос.ПорядокОбхода,
		|	ВложенныйЗапрос.Код
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка,
		|	Серия,
		|	Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток,
		|	ТоварыВЯчейкахОстатки.КОтборуОстаток
		|ПОМЕСТИТЬ ТараОстаткиПредварительная
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Серия, Упаковка, Ячейка) В
		|				(ВЫБРАТЬ
		|					ОтобраннаяТара.Номенклатура,
		|					ОтобраннаяТара.Характеристика,
		|					ОтобраннаяТара.Серия,
		|					ОтобраннаяТара.Упаковка,
		|					ОтобраннаяТара.Ячейка
		|				ИЗ
		|					ОтобраннаяТара)) КАК ТоварыВЯчейкахОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка,
		|	Серия,
		|	Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтобраннаяТара.Номенклатура,
		|	ОтобраннаяТара.Характеристика,
		|	ОтобраннаяТара.Назначение,
		|	ОтобраннаяТара.Ячейка,
		|	ОтобраннаяТара.ПорядокОбхода КАК ПорядокОбхода,
		|	ОтобраннаяТара.Код КАК Код,
		|	ОтобраннаяТара.Количество,
		|	ОтобраннаяТара.КоличествоУпаковок,
		|	ЕСТЬNULL(ТараОстаткиПредварительная.ВНаличииОстаток, 0) - ЕСТЬNULL(ТараОстаткиПредварительная.КОтборуОстаток, 0) КАК СвободныйОстаток
		|ПОМЕСТИТЬ ТараОстатки
		|ИЗ
		|	ОтобраннаяТара КАК ОтобраннаяТара
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТараОстаткиПредварительная КАК ТараОстаткиПредварительная
		|		ПО ОтобраннаяТара.Номенклатура = ТараОстаткиПредварительная.Номенклатура
		|			И ОтобраннаяТара.Характеристика = ТараОстаткиПредварительная.Характеристика
		|			И ОтобраннаяТара.Упаковка = ТараОстаткиПредварительная.Упаковка
		|			И ОтобраннаяТара.Серия = ТараОстаткиПредварительная.Серия
		|			И ОтобраннаяТара.Ячейка = ТараОстаткиПредварительная.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТараОстатки.Ячейка
		|ПОМЕСТИТЬ ЯчейкиНедостаточноТары
		|ИЗ
		|	ТараОстатки КАК ТараОстатки
		|ГДЕ
		|	ТараОстатки.СвободныйОстаток - ТараОстатки.КоличествоУпаковок < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтбор.Номенклатура,
		|	ТаблицаОтбор.Характеристика,
		|	ТаблицаОтбор.Упаковка,
		|	ТаблицаОтбор.Серия,
		|	ТаблицаОтбор.Назначение,
		|	ТаблицаОтбор.Ячейка,
		|	ВЫРАЗИТЬ(ТаблицаОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода КАК ПорядокОбхода,
		|	ВЫРАЗИТЬ(ТаблицаОтбор.Ячейка КАК Справочник.СкладскиеЯчейки).Код КАК Код,
		|	ТаблицаОтбор.КоличествоУпаковок,
		|	ТаблицаОтбор.Количество,
		|	ТаблицаОтбор.ВесУпаковки,
		|	ТаблицаОтбор.ОбъемУпаковки
		|ИЗ
		|	ТаблицаОтбор КАК ТаблицаОтбор
		|ГДЕ
		|	НЕ ТаблицаОтбор.Ячейка В
		|				(ВЫБРАТЬ
		|					ЯчейкиНедостаточноТары.Ячейка
		|				ИЗ
		|					ЯчейкиНедостаточноТары КАК ЯчейкиНедостаточноТары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТараОстатки.Номенклатура,
		|	ТараОстатки.Характеристика,
		|	ТараОстатки.Назначение,
		|	ТараОстатки.Ячейка,
		|	ТараОстатки.ПорядокОбхода,
		|	ТараОстатки.Код,
		|	ТараОстатки.Количество,
		|	ТараОстатки.КоличествоУпаковок,
		|	ТараОстатки.СвободныйОстаток
		|ИЗ
		|	ТараОстатки КАК ТараОстатки
		|ГДЕ
		|	ТараОстатки.СвободныйОстаток - ТараОстатки.КоличествоУпаковок >= 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТараОстатки.Номенклатура,
		|	ТараОстатки.Характеристика,
		|	ТараОстатки.Ячейка,
		|	ТараОстатки.КоличествоУпаковок - ТараОстатки.СвободныйОстаток КАК КоличествоНеХватает,
		|	ТараОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	ТараОстатки КАК ТараОстатки
		|ГДЕ
		|	ТараОстатки.СвободныйОстаток - ТараОстатки.КоличествоУпаковок < 0
		|	И &ПолучитьОшибкиОстатокТары";
	
	ТаблицаТЧОтбор = ЗаданиеНаПеремещение.ТоварыОтбор.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаОтбор", ТаблицаТЧОтбор);
	Запрос.УстановитьПараметр("ПолучитьОшибкиОстатокТары", ОшибкиОстатокТары <> Неопределено);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОтбор = РезультатыЗапроса[5].Выгрузить();
	
	ТаблицаРасходаИзЯчеек = ТаблицаТЧОтбор.СкопироватьКолонки(
		"Номенклатура, Характеристика, Назначение, Серия, Упаковка, Ячейка, КоличествоУпаковок");
	ТаблицаРасходаИзЯчеек.Индексы.Добавить("Ячейка, Номенклатура, Упаковка, Характеристика, Серия");
	
	ВыборкаПоТаре = РезультатыЗапроса[6].Выбрать();
	ОтборСтрок = Новый Структура("Ячейка, Номенклатура, Упаковка, Характеристика, Назначение, Серия");
	
	Пока ВыборкаПоТаре.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ВыборкаПоТаре);
		
		МассивНайденныхСтрок = ТаблицаРасходаИзЯчеек.НайтиСтроки(ОтборСтрок);
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			СтрокаРасхода = ТаблицаРасходаИзЯчеек.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасхода, ОтборСтрок);
			СтрокаРасхода.КоличествоУпаковок = ВыборкаПоТаре.СвободныйОстаток;
		Иначе
			СтрокаРасхода = МассивНайденныхСтрок[0];
		КонецЕсли;
		
		СтрокаОтбор = ТаблицаОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтбор, ВыборкаПоТаре);
		КоличествоКОтбору = СтрокаОтбор.КоличествоУпаковок;
		
		СтрокаОтбор.КоличествоУпаковок = Мин(СтрокаРасхода.КоличествоУпаковок, ВыборкаПоТаре.КоличествоУпаковок);
		СтрокаОтбор.Количество         = СтрокаОтбор.КоличествоУпаковок;
		
		СтрокаРасхода.КоличествоУпаковок = СтрокаРасхода.КоличествоУпаковок - СтрокаОтбор.КоличествоУпаковок; 
		
	КонецЦикла;	
	
	Если ВыборкаПоТаре.Количество() Тогда
		ТаблицаОтбор.Сортировать("ПорядокОбхода Возр, Код Возр");
		ЗаданиеНаПеремещение.ТоварыОтбор.Загрузить(ТаблицаОтбор);
	КонецЕсли;
	
	ВыборкаНедостаточноТары = РезультатыЗапроса[7].Выбрать();
	Пока ВыборкаНедостаточноТары.Следующий() Цикл
		ШаблонСообщения = НСтр(
			"ru = 'Не удалось подобрать размещения для товаров в ячейке [Ячейка], недостаточное количество тары [Тара]. Не хватает [Количество] [ЕдиницаИзмерения].'");
		СтруктураПараметровСообщения = Новый Структура;
		СтруктураПараметровСообщения.Вставить("Ячейка", Строка(ВыборкаНедостаточноТары.Ячейка));
		СтруктураПараметровСообщения.Вставить("Тара",
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				ВыборкаНедостаточноТары.Номенклатура, 
				ВыборкаНедостаточноТары.Характеристика));
		СтруктураПараметровСообщения.Вставить("Количество", Строка(ВыборкаНедостаточноТары.КоличествоНеХватает));
		СтруктураПараметровСообщения.Вставить("ЕдиницаИзмерения", Строка(ВыборкаНедостаточноТары.ЕдиницаИзмерения));
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, СтруктураПараметровСообщения);
		ОшибкиОстатокТары.Добавить(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаройТЧРазмещенияПеремещениеПоОбособлению(ЗаданиеНаПеремещение)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРазмещение.Номенклатура КАК Номенклатура,
		|	ТаблицаРазмещение.Характеристика КАК Характеристика,
		|	ТаблицаРазмещение.Назначение,
		|	ТаблицаРазмещение.Упаковка КАК Упаковка,
		|	ТаблицаРазмещение.Серия КАК Серия,
		|	ТаблицаРазмещение.Ячейка КАК Ячейка,
		|	ТаблицаРазмещение.КоличествоУпаковок,
		|	ТаблицаРазмещение.Количество,
		|	ТаблицаРазмещение.ВесУпаковки,
		|	ТаблицаРазмещение.ОбъемУпаковки
		|ПОМЕСТИТЬ ТаблицаРазмещение
		|ИЗ
		|	&ТаблицаРазмещение КАК ТаблицаРазмещение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ТараНоменклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ТараХарактеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ВложенныйЗапрос.Ячейка КАК Ячейка,
		|	ВложенныйЗапрос.ПорядокОбхода КАК ПорядокОбхода,
		|	ВложенныйЗапрос.Код КАК Код,
		|	СУММА(ВложенныйЗапрос.КоличествоТары) КАК Количество,
		|	СУММА(ВложенныйЗапрос.КоличествоТары) КАК КоличествоУпаковок,
		|	0 КАК ВесУпаковки,
		|	0 КАК ОбъемУпаковки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаРазмещение.КоличествоУпаковок * ВариантыПереупаковки.Количество КАК КоличествоТары,
		|		ТаблицаРазмещение.Ячейка КАК Ячейка,
		|		ВЫРАЗИТЬ(ТаблицаРазмещение.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода КАК ПорядокОбхода,
		|		ВЫРАЗИТЬ(ТаблицаРазмещение.Ячейка КАК Справочник.СкладскиеЯчейки).Код КАК Код,
		|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара КАК ТараНоменклатура,
		|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара КАК ТараХарактеристика,
		|		ЛОЖЬ КАК УпаковкаПоставляетсяВТаре
		|	ИЗ
		|		ТаблицаРазмещение КАК ТаблицаРазмещение
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
		|			ПО ТаблицаРазмещение.Упаковка = ВариантыПереупаковки.Источник
		|	ГДЕ
		|		ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре
		|		И ВЫРАЗИТЬ(ТаблицаРазмещение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		И ТаблицаРазмещение.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаРазмещение.КоличествоУпаковок,
		|		ТаблицаРазмещение.Ячейка,
		|		ВЫРАЗИТЬ(ТаблицаРазмещение.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода,
		|		ВЫРАЗИТЬ(ТаблицаРазмещение.Ячейка КАК Справочник.СкладскиеЯчейки).Код,
		|		ВЫРАЗИТЬ(ТаблицаРазмещение.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).НоменклатураМногооборотнаяТара,
		|		ВЫРАЗИТЬ(ТаблицаРазмещение.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ХарактеристикаМногооборотнаяТара,
		|		ИСТИНА
		|	ИЗ
		|		ТаблицаРазмещение КАК ТаблицаРазмещение
		|	ГДЕ
		|		ВЫРАЗИТЬ(ТаблицаРазмещение.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ПоставляетсяВМногооборотнойТаре
		|		И ВЫРАЗИТЬ(ТаблицаРазмещение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ТараНоменклатура,
		|	ВложенныйЗапрос.ТараХарактеристика,
		|	ВложенныйЗапрос.Ячейка,
		|	ВложенныйЗапрос.ПорядокОбхода,
		|	ВложенныйЗапрос.Код
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРазмещение.Номенклатура,
		|	ТаблицаРазмещение.Характеристика,
		|	ТаблицаРазмещение.Упаковка,
		|	ТаблицаРазмещение.Серия,
		|	ТаблицаРазмещение.Назначение,
		|	ТаблицаРазмещение.Ячейка,
		|	ВЫРАЗИТЬ(ТаблицаРазмещение.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода,
		|	ВЫРАЗИТЬ(ТаблицаРазмещение.Ячейка КАК Справочник.СкладскиеЯчейки).Код,
		|	ТаблицаРазмещение.Количество,
		|	ТаблицаРазмещение.КоличествоУпаковок,
		|	ТаблицаРазмещение.ВесУпаковки,
		|	ТаблицаРазмещение.ОбъемУпаковки
		|ИЗ
		|	ТаблицаРазмещение КАК ТаблицаРазмещение
		|ГДЕ
		|	ВЫРАЗИТЬ(ТаблицаРазмещение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокОбхода,
		|	Код";
	
	Запрос.УстановитьПараметр("ТаблицаРазмещение", ЗаданиеНаПеремещение.ТоварыРазмещение.Выгрузить());
	ЗаданиеНаПеремещение.ТоварыРазмещение.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияДокументов

Процедура ЗавершитьПерезаполнениеОтобраннымиТоварами(ОбрабатываемыйОбъект,
													 ПараметрыЗаполнения,
													 МассивИзмененныхДокументов)
																
	Если ТипЗнч(ОбрабатываемыйОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		Если ПараметрыЗаполнения.ИзменениеСтатуса Тогда
			ОбрабатываемыйОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров." + ПараметрыЗаполнения.СтатусДокумента);
			Документы.РасходныйОрдерНаТовары.ЗаполнитьДействиеВСтроках(ОбрабатываемыйОбъект);
		КонецЕсли;
		
		ОбрабатываемыйОбъект.ВсегоМест = УпаковочныеЛистыСервер.КоличествоМестВТЧ(ОбрабатываемыйОбъект.ОтгружаемыеТовары);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ОбрабатываемыйОбъект, Документы.РасходныйОрдерНаТовары);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбрабатываемыйОбъект,ПараметрыУказанияСерий.ОтгружаемыеТовары);
		
		НоменклатураСервер.ЗаполнитьДействиеПоКомплектностиТоварныхМест(ОбрабатываемыйОбъект);
		
		Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(ОбрабатываемыйОбъект, Ложь, Истина);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбрабатываемыйОбъект,ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
	Иначе
		Если ПараметрыЗаполнения.ИзменениеСтатуса Тогда
			ОбрабатываемыйОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОрдеровНаПеремещение." + ПараметрыЗаполнения.СтатусДокумента); 
			Документы.ОрдерНаПеремещениеТоваров.ЗаполнитьДействиеВСтроках(ОбрабатываемыйОбъект);
		КонецЕсли;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ОбрабатываемыйОбъект, Документы.ОрдерНаПеремещениеТоваров);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбрабатываемыйОбъект,ПараметрыУказанияСерий);
		
		НоменклатураСервер.ЗаполнитьДействиеПоКомплектностиТоварныхМест(ОбрабатываемыйОбъект);
		
	КонецЕсли;
	
	
	Если ПараметрыЗаполнения.РежимЗаполнения = "Множественное" Тогда
		Если ОбрабатываемыйОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ОбрабатываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
				МассивИзмененныхДокументов.Добавить(ОбрабатываемыйОбъект.Ссылка);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОтборРазмещение

Процедура ПроверитьПодготовитьПараметрыНоменклатурыДляРазмещения(МенеджерВременныхТаблиц, Склад, Помещение, ЯчейкаИсточник, Отказ)
	//В процессе подготовки таблицы
	//- запросим все необходимые значения реквизитов
	//- если есть упаковки, поставляемые в многоборотной таре, то вычтем из таблицы номенклатуры тару,
	//  в количестве, необходимом для размещения упаковок. Это количество алгоритм размещения добавит
	//	автоматически, независимо была ли тара в изначальной таблице номенклатуры, или ее не было.
	//  Оставим в таблице только ту тару, которая размещается сверх необходимого для упаковок количества
	//	- значит это размещение пустой тары
	//- так же вычтем тару, которая, если после ее размещения в ячейке, из которой мы размещаем, тары будет
	//  не достаточно, для упаковок, которые там лежат
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Упаковка,
	|	ТаблицаНоменклатуры.Серия,
	|	ТаблицаНоменклатуры.Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатуры.КоличествоУпаковок - 0.5 КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ ТаблицаНоменклатуры.КоличествоУпаковок
	|	КОНЕЦ КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаНоменклатурыОкругление
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|	ВЫРАЗИТЬ(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК ЧИСЛО(15, 0)) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ОстаткиНеРазмещаемых
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка = &ЯчейкаИсточник
	|				И НЕ (Номенклатура, Характеристика, Назначение) В
	|						(ВЫБРАТЬ
	|							Таблица.Номенклатура,
	|							Таблица.Характеристика,
	|							Таблица.Назначение
	|						ИЗ
	|							ТаблицаНоменклатуры КАК Таблица)
	|				И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТоварыВЯчейкахОстатки
	|ГДЕ
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.КоличествоТары) КАК КоличествоТары,
	|	ВложенныйЗапрос.ТараНоменклатура,
	|	ВложенныйЗапрос.ТараХарактеристика КАК ТараХарактеристика
	|ПОМЕСТИТЬ ТараДляУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНоменклатуры.КоличествоУпаковок * ВариантыПереупаковки.Количество КАК КоличествоТары,
	|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара КАК ТараНоменклатура,
	|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара КАК ТараХарактеристика
	|	ИЗ
	|		ТаблицаНоменклатурыОкругление КАК ТаблицаНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|			ПО ТаблицаНоменклатуры.Упаковка = ВариантыПереупаковки.Источник
	|	ГДЕ
	|		ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре
	|		И ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|		И ТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНоменклатуры.КоличествоУпаковок,
	|		ВЫРАЗИТЬ(ТаблицаНоменклатуры.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).НоменклатураМногооборотнаяТара,
	|		ВЫРАЗИТЬ(ТаблицаНоменклатуры.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ХарактеристикаМногооборотнаяТара
	|	ИЗ
	|		ТаблицаНоменклатурыОкругление КАК ТаблицаНоменклатуры
	|	ГДЕ
	|		ВЫРАЗИТЬ(ТаблицаНоменклатуры.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ПоставляетсяВМногооборотнойТаре
	|		И ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНоменклатуры.КоличествоУпаковок * ВариантыПереупаковки.Количество,
	|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара,
	|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара
	|	ИЗ
	|		ОстаткиНеРазмещаемых КАК ТаблицаНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|			ПО ТаблицаНоменклатуры.Упаковка = ВариантыПереупаковки.Источник
	|	ГДЕ
	|		ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре
	|		И ТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиНеРазмещаемых.КоличествоУпаковок,
	|		ОстаткиНеРазмещаемых.Упаковка.НоменклатураМногооборотнаяТара,
	|		ОстаткиНеРазмещаемых.Упаковка.ХарактеристикаМногооборотнаяТара
	|	ИЗ
	|		ОстаткиНеРазмещаемых КАК ОстаткиНеРазмещаемых
	|	ГДЕ
	|		ВЫРАЗИТЬ(ОстаткиНеРазмещаемых.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ПоставляетсяВМногооборотнойТаре) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ТараНоменклатура,
	|	ВложенныйЗапрос.ТараХарактеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.Назначение,
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаНоменклатуры.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				ТОГДА ТаблицаНоменклатуры.Упаковка
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		КОНЕЦ КАК Упаковка,
	|		ТаблицаНоменклатуры.Серия КАК Серия,
	|		ТаблицаНоменклатуры.Назначение КАК Назначение,
	|		ТаблицаНоменклатуры.КоличествоУпаковок КАК КоличествоУпаковок
	|	ИЗ
	|		ТаблицаНоменклатурыОкругление КАК ТаблицаНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТараДляУпаковок.ТараНоменклатура,
	|		ТараДляУпаковок.ТараХарактеристика,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|		-ТараДляУпаковок.КоличествоТары
	|	ИЗ
	|		ТараДляУпаковок КАК ТараДляУпаковок) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура,
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика,
	|	ТаблицаНоменклатурыДляЗапроса.Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДляЗапроса.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СкладскиеГруппыНоменклатуры.ФизическиРазличаетсяОтНазначения, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизическиРазличаетсяОтНазначения,
	|	ЕСТЬNULL(СкладскиеГруппыНоменклатуры.ОграничиватьПоВесу, ИСТИНА) КАК ОграничиватьПоВесу,
	|	ЕСТЬNULL(СкладскиеГруппыНоменклатуры.ОграничиватьПоОбъему, ИСТИНА) КАК ОграничиватьПоОбъему,
	|	ТаблицаНоменклатурыДляЗапроса.Серия,
	|	ТаблицаНоменклатурыДляЗапроса.Упаковка,
	|	ТаблицаНоменклатурыДляЗапроса.КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДляЗапроса.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Безразмерная
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Безразмерная,
	|	&ТекстЗапросаВесУпаковки КАК Вес,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДляЗапроса.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Высота * ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ВысотаЕдиницаИзмерения.Числитель / ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ВысотаЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Высота,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДляЗапроса.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Глубина * ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ГлубинаЕдиницаИзмерения.Числитель / ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ГлубинаЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Глубина,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДляЗапроса.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Ширина * ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ШиринаЕдиницаИзмерения.Числитель / ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ШиринаЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Ширина,
	|	&ТекстЗапросаОбъемУпаковки КАК Объем,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДляЗапроса.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).СкладскаяГруппа
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка)
	|	КОНЕЦ КАК СкладскаяГруппаУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДляЗапроса.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Серия КАК Справочник.СерииНоменклатуры).ГоденДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ГоденДо,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO, ЛОЖЬ) КАК УчетСерийПоFEFO
	|ПОМЕСТИТЬ ТаблицаНоменклатурыРасширенная
	|ИЗ
	|	ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатурыДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|			И (ПолитикиУчетаСерий.Склад = &Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеГруппыНоменклатуры КАК СкладскиеГруппыНоменклатуры
	|		ПО (ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).СкладскаяГруппа = СкладскиеГруппыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатурыРасширенная.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ТаблицаНоменклатурыРасширенная.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатурыРасширенная.СкладскаяГруппаУпаковок) КАК СкладскаяГруппаУпаковокПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатурыРасширенная.СкладскаяГруппаНоменклатуры) КАК СкладскаяГруппаНоменклатурыПредставление
	|ИЗ
	|	ТаблицаНоменклатурыРасширенная КАК ТаблицаНоменклатурыРасширенная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|		ПО (ТаблицаНоменклатурыРасширенная.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|					И ТаблицаНоменклатурыРасширенная.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|				ИЛИ ТаблицаНоменклатурыРасширенная.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|					И ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок = ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка)
	|				ИЛИ ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры = ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыНоменклатуры.ПустаяСсылка)
	|					И ТаблицаНоменклатурыРасширенная.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|				ИЛИ ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры = ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыНоменклатуры.ПустаяСсылка)
	|					И ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок = ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка))
	|			И (ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение)
	|			И (ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад)
	|ГДЕ
	|	ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатурыРасширенная.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатурыРасширенная.Упаковка КАК Упаковка,
	|	ТаблицаНоменклатурыРасширенная.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатурыРасширенная.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатурыРасширенная.Серия) КАК СерияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатурыРасширенная.Упаковка) КАК УпаковкаПредставление
	|ИЗ
	|	ТаблицаНоменклатурыРасширенная КАК ТаблицаНоменклатурыРасширенная
	|ГДЕ
	|	(ТаблицаНоменклатурыРасширенная.ОграничиватьПоВесу
	|				И ТаблицаНоменклатурыРасширенная.Вес = 0
	|			ИЛИ ТаблицаНоменклатурыРасширенная.ОграничиватьПоОбъему
	|				И НЕ ТаблицаНоменклатурыРасширенная.Безразмерная
	|				И (ТаблицаНоменклатурыРасширенная.Объем = 0
	|					ИЛИ ТаблицаНоменклатурыРасширенная.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						И (ТаблицаНоменклатурыРасширенная.Высота = 0
	|							ИЛИ ТаблицаНоменклатурыРасширенная.Ширина = 0
	|							ИЛИ ТаблицаНоменклатурыРасширенная.Глубина = 0)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТараДляУпаковок";	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)", Неопределено));
		
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаВесУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)", "ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Справочник.Номенклатура)", Ложь));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаОбъемУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)", "ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Справочник.Номенклатура)", Ложь));
		
	Запрос.УстановитьПараметр("Склад", Склад);      
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("ЯчейкаИсточник", ЯчейкаИсточник);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[5].Выбрать();
	
	ШаблонТекстаСоообщения = НСтр("ru='Для складской группы номенклатуры ""%СкладскаяГруппаНоменклатуры%"" 
	                          		|и складской группы упаковок ""%СкладскаяГруппаУпаковок%"" не задано правило размещения'");
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонТекстаСоообщения,"%СкладскаяГруппаНоменклатуры%",СокрЛП(Выборка.СкладскаяГруппаНоменклатурыПредставление));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%СкладскаяГруппаУпаковок%",СокрЛП(Выборка.СкладскаяГруппаУпаковокПредставление));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЦикла;
	
	Выборка = Результат[6].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
			ШаблонТекстаСоообщения = НСтр("ru='Для упаковки ""%Упаковка%"" номенклатуры ""%Номенклатура%"" не заданы весо-размерные характеристики.'");
		Иначе
			ШаблонТекстаСоообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" не заданы вес и(или) объем.'");
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ШаблонТекстаСоообщения,"%Упаковка%",СокрЛП(Выборка.УпаковкаПредставление));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Номенклатура%",СокрЛП(Выборка.НоменклатураПредставление));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);

	КонецЦикла;
	
КонецПроцедуры

// Дополняет исходную таблицу тарой, указанной в упаковках.
//
// Параметры:
//  ТаблицаРезультатов	 - ТаблицаЗначений	 - содержит следующие колонки:
//  	*	Номенклатура	 - СправочникСсылка.Номенклатура -
//  	*	Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры -
//  	*	Назначение		 - СправочникСсылка.Назначения -
//  	*	Серия			 - СправочникСсылка.СерииНоменклатуры -
//  	*	Упаковка		 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//  	*	Ячейка			 - СправочникСсылка.СкладскиеЯчейки -
//  	*	КоличествоУпаковок - Число -
//  	*	Количество		 - Число -
//  	*	ВесУпаковки		 - Число - вес добавленных позиций будет равен нулю, т.к. вес тары должен быть учитан в весе упаковки
//  	*	ОбъемУпаковки	 - Число - объем добавленных позиций будет равен нулю, т.к. объем тары должен быть учитан в объеме упаковки
//  	*	Код				 - Строка - код ячейки
//  	*	РабочийУчасток	 - СправочникСсылка.РабочиеУчастки -
//
Процедура ДополнитьМногооборотнойТаройТаблицуРазмещения(ТаблицаРезультатов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРезультатов.Номенклатура,
	|	ТаблицаРезультатов.Характеристика,
	|	ТаблицаРезультатов.Назначение,
	|	ТаблицаРезультатов.Серия,
	|	ТаблицаРезультатов.Упаковка,
	|	ТаблицаРезультатов.Ячейка,
	|	ТаблицаРезультатов.КоличествоУпаковок,
	|	ТаблицаРезультатов.Количество,
	|	ТаблицаРезультатов.ВесУпаковки,
	|	ТаблицаРезультатов.ОбъемУпаковки,
	|	ТаблицаРезультатов.ПорядокОбхода,
	|	ТаблицаРезультатов.Код,
	|	ТаблицаРезультатов.РабочийУчасток
	|ПОМЕСТИТЬ ТаблицаРезультатовБезГруппировки
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРезультатов.Номенклатура,
	|	ТаблицаРезультатов.Характеристика,
	|	ТаблицаРезультатов.Назначение,
	|	ТаблицаРезультатов.Серия,
	|	ТаблицаРезультатов.Упаковка,
	|	ТаблицаРезультатов.Ячейка,
	|	СУММА(ТаблицаРезультатов.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаРезультатов.Количество) КАК Количество,
	|	ТаблицаРезультатов.ВесУпаковки,
	|	ТаблицаРезультатов.ОбъемУпаковки,
	|	ТаблицаРезультатов.ПорядокОбхода,
	|	ТаблицаРезультатов.Код,
	|	ТаблицаРезультатов.РабочийУчасток
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	ТаблицаРезультатовБезГруппировки КАК ТаблицаРезультатов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРезультатов.Упаковка,
	|	ТаблицаРезультатов.ВесУпаковки,
	|	ТаблицаРезультатов.ОбъемУпаковки,
	|	ТаблицаРезультатов.Назначение,
	|	ТаблицаРезультатов.Ячейка,
	|	ТаблицаРезультатов.Код,
	|	ТаблицаРезультатов.Характеристика,
	|	ТаблицаРезультатов.Номенклатура,
	|	ТаблицаРезультатов.Серия,
	|	ТаблицаРезультатов.ПорядокОбхода,
	|	ТаблицаРезультатов.РабочийУчасток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ТараНоменклатура КАК ТараНоменклатура,
	|	ВложенныйЗапрос.ТараХарактеристика КАК ТараХарактеристика,
	|	ВложенныйЗапрос.Ячейка КАК Ячейка,
	|	ВложенныйЗапрос.ПорядокОбхода,
	|	ВложенныйЗапрос.Код,
	|	ВложенныйЗапрос.РабочийУчасток,
	|	СУММА(ВложенныйЗапрос.КоличествоТары) КАК КоличествоТары
	|ПОМЕСТИТЬ ТараДляУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРезультатов.КоличествоУпаковок * ВариантыПереупаковки.Количество КАК КоличествоТары,
	|		ТаблицаРезультатов.Ячейка КАК Ячейка,
	|		ТаблицаРезультатов.ПорядокОбхода КАК ПорядокОбхода,
	|		ТаблицаРезультатов.Код КАК Код,
	|		ТаблицаРезультатов.РабочийУчасток КАК РабочийУчасток,                      
	|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара КАК ТараНоменклатура,
	|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара КАК ТараХарактеристика
	|	ИЗ
	|		ТаблицаРезультатов КАК ТаблицаРезультатов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|			ПО ТаблицаРезультатов.Упаковка = ВариантыПереупаковки.Источник
	|	ГДЕ
	|		ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре
	|		И ВЫРАЗИТЬ(ТаблицаРезультатов.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|		И ТаблицаРезультатов.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРезультатов.КоличествоУпаковок,
	|		ТаблицаРезультатов.Ячейка,
	|		ТаблицаРезультатов.ПорядокОбхода,
	|		ТаблицаРезультатов.Код,
	|		ТаблицаРезультатов.РабочийУчасток,
	|		ВЫРАЗИТЬ(ТаблицаРезультатов.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).НоменклатураМногооборотнаяТара,
	|		ВЫРАЗИТЬ(ТаблицаРезультатов.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ХарактеристикаМногооборотнаяТара
	|	ИЗ
	|		ТаблицаРезультатов КАК ТаблицаРезультатов
	|	ГДЕ
	|		ВЫРАЗИТЬ(ТаблицаРезультатов.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ПоставляетсяВМногооборотнойТаре
	|		И ВЫРАЗИТЬ(ТаблицаРезультатов.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ТараНоменклатура,
	|	ВложенныйЗапрос.ТараХарактеристика,
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.ПорядокОбхода,
	|	ВложенныйЗапрос.Код,
	|	ВложенныйЗапрос.РабочийУчасток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.Упаковка,
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	ВложенныйЗапрос.ВесУпаковки,
	|	ВложенныйЗапрос.ОбъемУпаковки,
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.ПорядокОбхода,
	|	ВложенныйЗапрос.Код,
	|	ВложенныйЗапрос.РабочийУчасток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРезультатов.Номенклатура КАК Номенклатура,
	|		ТаблицаРезультатов.Характеристика КАК Характеристика,
	|		ТаблицаРезультатов.Назначение,
	|		ТаблицаРезультатов.Серия КАК Серия,
	|		ТаблицаРезультатов.Упаковка КАК Упаковка,
	|		ТаблицаРезультатов.КоличествоУпаковок КАК КоличествоУпаковок,
	|		ТаблицаРезультатов.Количество КАК Количество,
	|		ТаблицаРезультатов.ВесУпаковки КАК ВесУпаковки,
	|		ТаблицаРезультатов.ОбъемУпаковки КАК ОбъемУпаковки,
	|		ТаблицаРезультатов.Ячейка КАК Ячейка,
	|		ТаблицаРезультатов.ПорядокОбхода КАК ПорядокОбхода,
	|		ТаблицаРезультатов.Код КАК Код,
	|		ТаблицаРезультатов.РабочийУчасток КАК РабочийУчасток
	|	ИЗ
	|		ТаблицаРезультатов КАК ТаблицаРезультатов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТараДляУпаковок.ТараНоменклатура,
	|		ТараДляУпаковок.ТараХарактеристика,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|		ТараДляУпаковок.КоличествоТары,
	|		ТараДляУпаковок.КоличествоТары,
	|		0,
	|		0,
	|		ТараДляУпаковок.Ячейка,
	|		ТараДляУпаковок.ПорядокОбхода,
	|		ТараДляУпаковок.Код,
	|		ТараДляУпаковок.РабочийУчасток
	|	ИЗ
	|		ТараДляУпаковок КАК ТараДляУпаковок) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.ВесУпаковки,
	|	ВложенныйЗапрос.ОбъемУпаковки,
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.ПорядокОбхода,
	|	ВложенныйЗапрос.Код,
	|	ВложенныйЗапрос.РабочийУчасток";
	
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить(); 
	
КонецПроцедуры

Процедура РазместитьПозициюТовара(МенеджерВременныхТаблиц, СтруктураТаблиц, ВыборкаПоСериям, МассивУчастков, КоличествоУпаковок)
		
	ПоFEFO = ВыборкаПоСериям.УчетСерийПоFEFO;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапросаВыбратьПервые = "";
	
	ТекстПриоритетСтратегии =
	"ВЫБОР	
	|	КОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) <> &Назначение И ПулЯчеек.ОбластьОбособленногоХранения		 
	|		ТОГДА ВЫБОР
	|				КОГДА ОстаткиВЯчейках.Ячейка ЕСТЬ NULL
	|					ТОГДА 1 			
	|			 	ИНАЧЕ ВЫБОР
	|						КОГДА ОстаткиВЯчейках.ЕстьНужноеНазначение
	|							ТОГДА 0
	|						ИНАЧЕ &НарушенаМонотоварность
	|					  КОНЕЦ
	|			  КОНЕЦ			
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ОстаткиВЯчейках.Ячейка ЕСТЬ NULL 
	|				ТОГДА ВЫБОР
	|						КОГДА ПулЯчеек.СтрогаяМонотоварность 
	|							ТОГДА 1
	|						ИНАЧЕ ПулЯчеек.ПриоритетРазмещенияВСвободныеЯчейки
	|					  КОНЕЦ
	|			ИНАЧЕ ВЫБОР		 
	|					КОГДА ПулЯчеек.ОписаниеМонотоварности = ЗНАЧЕНИЕ(Перечисление.ОписаниеМонотоварности.ПоНоменклатуре)
	|						ТОГДА ВЫБОР
	|								КОГДА ОстаткиВЯчейках.ЕстьНужнаяНоменклатура
	|										И ОстаткиВЯчейках.КоличествоРазныхНоменклатурВЯчейке = 1 
	|										И ОстаткиВЯчейках.КоличествоНоменклатур <= 1
	|									ТОГДА ВЫБОР
	|											КОГДА ПулЯчеек.СтрогаяМонотоварность 
	|												ТОГДА 0
	|       	                           		ИНАЧЕ ПулЯчеек.ПриоритетРазмещенияВМонотоварныеЯчейки
	|									  	  КОНЕЦ
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ПулЯчеек.СтрогаяМонотоварность 
	|											ТОГДА &НарушенаМонотоварность
	|           	                        ИНАЧЕ ВЫБОР									
	|											  	КОГДА ОстаткиВЯчейках.ЕстьНужнаяНоменклатура
	|													ТОГДА ПулЯчеек.ПриоритетРазмещенияВСмешанныеЯчейки
	|												ИНАЧЕ ПулЯчеек.ПриоритетРазмещенияВЯчейкиСДругимТоваром
	|									 		  КОНЕЦ
	|									  КОНЕЦ				
	|							   КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПулЯчеек.ОписаниеМонотоварности = ЗНАЧЕНИЕ(Перечисление.ОписаниеМонотоварности.ПоХарактеристике)
	|								ТОГДА
	|									ВЫБОР
	|										КОГДА ОстаткиВЯчейках.ЕстьНужнаяНоменклатураИХарактеристика
	|												И ОстаткиВЯчейках.КоличествоРазныхНоменклатурВЯчейке = 1
	|												И ОстаткиВЯчейках.КоличествоНоменклатур <= 1
	|												И ОстаткиВЯчейках.КоличествоРазныхХарактеристикВЯчейке = 1
	|												И ОстаткиВЯчейках.КоличествоХарактеристик <= 1
	|											ТОГДА ВЫБОР
	|													КОГДА ПулЯчеек.СтрогаяМонотоварность 
	|														ТОГДА 0
	|           	                       				ИНАЧЕ ПулЯчеек.ПриоритетРазмещенияВМонотоварныеЯчейки
	|									  	 		  КОНЕЦ
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ПулЯчеек.СтрогаяМонотоварность 
	|													ТОГДА &НарушенаМонотоварность
	|                              			     	ИНАЧЕ ВЫБОР									
	|													  	КОГДА ОстаткиВЯчейках.ЕстьНужнаяНоменклатураИХарактеристика
	|															ТОГДА ПулЯчеек.ПриоритетРазмещенияВСмешанныеЯчейки
	|														ИНАЧЕ ПулЯчеек.ПриоритетРазмещенияВЯчейкиСДругимТоваром
	|									 				  КОНЕЦ
	|											  КОНЕЦ				
	|									КОНЕЦ
	|								ИНАЧЕ
	|									ВЫБОР
	|										КОГДА ОстаткиВЯчейках.ЕстьНужнаяНоменклатураИХарактеристикаИСерия
	|												И ОстаткиВЯчейках.КоличествоРазныхНоменклатурВЯчейке = 1
	|												И ОстаткиВЯчейках.КоличествоНоменклатур <= 1
	|												И ОстаткиВЯчейках.КоличествоРазныхХарактеристикВЯчейке = 1
	|												И ОстаткиВЯчейках.КоличествоХарактеристик <= 1
	|												И ОстаткиВЯчейках.КоличествоРазныхСерийВЯчейке = 1
	|												И ОстаткиВЯчейках.КоличествоСерий <= 1
	|											ТОГДА ВЫБОР
	|													КОГДА ПулЯчеек.СтрогаяМонотоварность 
	|														ТОГДА 0
	|                   	               				ИНАЧЕ ПулЯчеек.ПриоритетРазмещенияВМонотоварныеЯчейки
	|									  	 		  КОНЕЦ
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ПулЯчеек.СтрогаяМонотоварность 
	|													ТОГДА &НарушенаМонотоварность
	| 	                             		     	ИНАЧЕ ВЫБОР									
	|													  	КОГДА ОстаткиВЯчейках.ЕстьНужнаяНоменклатураИХарактеристикаИСерия
	|															ТОГДА ПулЯчеек.ПриоритетРазмещенияВСмешанныеЯчейки
	|														ИНАЧЕ ПулЯчеек.ПриоритетРазмещенияВЯчейкиСДругимТоваром
	|									 				  КОНЕЦ
	|											  КОНЕЦ				
	|									КОНЕЦ
	|						КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ
	|КОНЕЦ";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаЯчеек.Ячейка КАК Ячейка,
	|	ТаблицаЯчеек.СвободныйОбъем - ЕСТЬNULL(ТаблицаНаполненияЯчеек.Объем, 0) КАК СвободныйОбъем,
	|	ТаблицаЯчеек.СвободныйВес - ЕСТЬNULL(ТаблицаНаполненияЯчеек.Вес, 0) КАК СвободныйВес,
	|	ТаблицаЯчеек.НеОграниченаПоГрузоподъемности КАК НеОграниченаПоГрузоподъемности,
	|	ТаблицаЯчеек.НеОграниченаПоРазмерам КАК НеОграниченаПоРазмерам,
	|	ТаблицаЯчеек.ПорядокОбхода КАК ПорядокОбхода,
	|	ТаблицаЯчеек.РабочийУчасток КАК РабочийУчасток,                                         
	|	ТаблицаЯчеек.ПриоритетОбласти КАК ПриоритетОбласти,
	|	ТаблицаЯчеек.ОбластьОбособленногоХранения КАК ОбластьОбособленногоХранения,
	|	ТаблицаЯчеек.ПриоритетРазмещенияВСвободныеЯчейки КАК ПриоритетРазмещенияВСвободныеЯчейки,
	|	ТаблицаЯчеек.ПриоритетРазмещенияВМонотоварныеЯчейки КАК ПриоритетРазмещенияВМонотоварныеЯчейки,
	|	ТаблицаЯчеек.ПриоритетРазмещенияВСмешанныеЯчейки КАК ПриоритетРазмещенияВСмешанныеЯчейки,
	|	ТаблицаЯчеек.ПриоритетРазмещенияВЯчейкиСДругимТоваром КАК ПриоритетРазмещенияВЯчейкиСДругимТоваром,
	|	ТаблицаЯчеек.УровеньДоступности КАК УровеньДоступности,
	|	ТаблицаЯчеек.Код КАК Код,   
	|	ТаблицаЯчеек.СостояниеПересчета КАК СостояниеПересчета,
	|	ТаблицаЯчеек.ОписаниеМонотоварности КАК ОписаниеМонотоварности,   
	|	ТаблицаЯчеек.СтрогаяМонотоварность КАК СтрогаяМонотоварность
	|ПОМЕСТИТЬ ПулЯчеек
	|ИЗ
	|	ТаблицаЯчеек КАК ТаблицаЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНаполненияЯчеек КАК ТаблицаНаполненияЯчеек
	|		ПО ТаблицаЯчеек.Ячейка = ТаблицаНаполненияЯчеек.Ячейка
	|ГДЕ
	|	ТаблицаЯчеек.СкладскаяГруппаНоменклатуры = &СкладскаяГруппаНоменклатуры
	|	И ТаблицаЯчеек.СкладскаяГруппаУпаковок = &СкладскаяГруппаУпаковок
	// Для размещения товаров под назначения доступны все ячейки из области обособленного хранения и ячейки из области обычного хранения,
	// но только для товаров у которых свойство ФизическиРазличаетсяОтНазначения = Истина.  
	| 	И (ВЫБОР
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = &Назначение 
	|			ТОГДА Не ТаблицаЯчеек.ОбластьОбособленногоХранения
	|		ИНАЧЕ
	|			ВЫБОР КОГДА ТаблицаЯчеек.ОбластьОбособленногоХранения  
	|					ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаЯчеек.ФизическиРазличаетсяОтНазначения
	|			КОНЕЦ
	|		КОНЕЦ)				
	|	И (ТаблицаЯчеек.НеОграниченаПоРазмерам
	|			ИЛИ НЕ &ОграничиватьПоОбъему
	|			ИЛИ ТаблицаЯчеек.Ширина >= &Ширина
	|				И ТаблицаЯчеек.Глубина >= &Глубина
	|				И ТаблицаЯчеек.Высота >= &Высота
	|				И ТаблицаЯчеек.СвободныйОбъем - ЕСТЬNULL(ТаблицаНаполненияЯчеек.Объем, 0) >= &Объем)
	|	И (ТаблицаЯчеек.НеОграниченаПоГрузоподъемности
	|			ИЛИ НЕ &ОграничиватьПоВесу
	|			ИЛИ ТаблицаЯчеек.СвободныйВес - ЕСТЬNULL(ТаблицаНаполненияЯчеек.Вес, 0) >= &Вес)
	|	И ВЫБОР
	|			КОГДА &Безразмерная
	|				ТОГДА ТаблицаЯчеек.НеОграниченаПоРазмерам
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстаткиСРезультатами.Ячейка КАК Ячейка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстаткиСРезультатами.Номенклатура = &Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьНужнаяНоменклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстаткиСРезультатами.Характеристика = &Характеристика
	|					И ТоварыВЯчейкахОстаткиСРезультатами.Номенклатура = &Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьНужнаяНоменклатураИХарактеристика,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстаткиСРезультатами.Характеристика = &Характеристика
	|					И ТоварыВЯчейкахОстаткиСРезультатами.Номенклатура = &Номенклатура
	|					И ТоварыВЯчейкахОстаткиСРезультатами.Серия = &Серия
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьНужнаяНоменклатураИХарактеристикаИСерия,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыВЯчейкахОстаткиСРезультатами.Номенклатура) КАК КоличествоРазныхНоменклатурВЯчейке,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыВЯчейкахОстаткиСРезультатами.Характеристика) КАК КоличествоРазныхХарактеристикВЯчейке,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыВЯчейкахОстаткиСРезультатами.Серия) КАК КоличествоРазныхСерийВЯчейке,
	|	МИНИМУМ(ТоварыВЯчейкахОстаткиСРезультатами.НоваяНоменклатура) КАК НоваяНоменклатура,
	|	МИНИМУМ(ТоварыВЯчейкахОстаткиСРезультатами.НоваяНоменклатураИЛИХарактеристика) КАК НоваяНоменклатураИЛИХарактеристика,
	|	МИНИМУМ(ТоварыВЯчейкахОстаткиСРезультатами.НоваяНоменклатураИЛИХарактеристика) КАК НоваяНоменклатураИЛИХарактеристикаИЛИСерия,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстаткиСРезультатами.Назначение = &Назначение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьНужноеНазначение,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА ТоварыВЯчейкахОстаткиСРезультатами.ОбластьОбособленногоХранения
	|				ТОГДА ВЫБОР
	|						КОГДА ТоварыВЯчейкахОстаткиСРезультатами.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|							И ТоварыВЯчейкахОстаткиСРезультатами.Назначение <> &Назначение
	|						ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					  КОНЕЦ	
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ЯчейкаПодДругоеНазначение
	|ПОМЕСТИТЬ ОстаткиВЯчейкахБезКоличества
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|		ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|		ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|		ИСТИНА КАК НоваяНоменклатура,
	|		ИСТИНА КАК НоваяНоменклатураИЛИХарактеристика,
	|		ИСТИНА КАК НоваяНоменклатураИЛИХарактеристикаИЛИСерия,
	//Не учитываю назначение в ячейках необособленного хранения. Там этот признак ни на что не влияет.
	|		ВЫБОР
	|			КОГДА ПулЯчеек.ОбластьОбособленногоХранения
	|				ТОГДА ТоварыВЯчейкахОстатки.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ КАК Назначение,
	|		ПулЯчеек.ОбластьОбособленногоХранения КАК ОбластьОбособленногоХранения
	|	ИЗ
	|		ПулЯчеек КАК ПулЯчеек
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|			ПО ПулЯчеек.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
	|	ГДЕ
	|		ТоварыВЯчейкахОстатки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНаполненияЯчеек.Ячейка,
	|		ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|		ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|		ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)),
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> &Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> &Номенклатура
	|					ИЛИ ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) <> &Характеристика
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> &Номенклатура
	|					ИЛИ ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) <> &Характеристика
	|					ИЛИ ЕСТЬNULL(ТаблицаРазмещенныхТоваров.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) <> &Серия
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) <> &Назначение И ПулЯчеек.ОбластьОбособленногоХранения
	|				ТОГДА ТаблицаНаполненияЯчеек.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ КАК Назначение,
	|		ПулЯчеек.ОбластьОбособленногоХранения  
	|	ИЗ
	|		ТаблицаНаполненияЯчеек КАК ТаблицаНаполненияЯчеек
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПулЯчеек КАК ПулЯчеек
	|			ПО (ПулЯчеек.Ячейка = ТаблицаНаполненияЯчеек.Ячейка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРазмещенныхТоваров КАК ТаблицаРазмещенныхТоваров
	|			ПО (ТаблицаРазмещенныхТоваров.Ячейка = ТаблицаНаполненияЯчеек.Ячейка)) КАК ТоварыВЯчейкахОстаткиСРезультатами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстаткиСРезультатами.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВЯчейкахБезКоличества.Ячейка,
	|	ОстаткиВЯчейкахБезКоличества.ЕстьНужнаяНоменклатура,
	|	ОстаткиВЯчейкахБезКоличества.ЕстьНужнаяНоменклатураИХарактеристика,
	|	ОстаткиВЯчейкахБезКоличества.ЕстьНужнаяНоменклатураИХарактеристикаИСерия,
	|	ОстаткиВЯчейкахБезКоличества.КоличествоРазныхНоменклатурВЯчейке,
	|	ОстаткиВЯчейкахБезКоличества.КоличествоРазныхХарактеристикВЯчейке,
	|	ОстаткиВЯчейкахБезКоличества.КоличествоРазныхСерийВЯчейке,
	|	ЕСТЬNULL(ТаблицаНаполненияЯчеек.КоличествоНоменклатур,0) КАК КоличествоНоменклатур,
	|	ЕСТЬNULL(ТаблицаНаполненияЯчеек.КоличествоХарактеристик,0) КАК КоличествоХарактеристик,
	|	ЕСТЬNULL(ТаблицаНаполненияЯчеек.КоличествоСерий,0) КАК КоличествоСерий,
	|	ОстаткиВЯчейкахБезКоличества.НоваяНоменклатура,
	|	ОстаткиВЯчейкахБезКоличества.НоваяНоменклатураИЛИХарактеристика,
	|	ОстаткиВЯчейкахБезКоличества.НоваяНоменклатураИЛИХарактеристикаИЛИСерия,
	|	ОстаткиВЯчейкахБезКоличества.ЕстьНужноеНазначение,
	|	ОстаткиВЯчейкахБезКоличества.ЯчейкаПодДругоеНазначение 
	|ПОМЕСТИТЬ ОстаткиВЯчейках
	|ИЗ
	|	ОстаткиВЯчейкахБезКоличества КАК ОстаткиВЯчейкахБезКоличества
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНаполненияЯчеек КАК ТаблицаНаполненияЯчеек
	|		ПО ОстаткиВЯчейкахБезКоличества.Ячейка = ТаблицаНаполненияЯчеек.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//т.к. в каждую ячейку гарантированно можно разместить
	//хотя бы одну упаковку, то достаточно выбрать количество
	//ячеек равное количеству упаковок 
	|ВЫБРАТЬ" + ТекстЗапросаВыбратьПервые +" 
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	ПулЯчеек.Код КАК Код,
	|	ПулЯчеек.СвободныйОбъем,
	|	ВЫБОР
	|		КОГДА ПулЯчеек.ОбластьОбособленногоХранения
	|			ТОГДА -ПулЯчеек.СвободныйОбъем
	|		ИНАЧЕ ПулЯчеек.СвободныйОбъем
	|	КОНЕЦ СвободныйОбъемПорядок,
	|	ПулЯчеек.СвободныйВес,
	|	ПулЯчеек.ОбластьОбособленногоХранения,
	|	ПулЯчеек.ПриоритетОбласти,
	|	ПулЯчеек.НеОграниченаПоГрузоподъемности,
	|	ПулЯчеек.НеОграниченаПоРазмерам,
	|	ПулЯчеек.ПорядокОбхода КАК ПорядокОбхода,
	|	ПулЯчеек.РабочийУчасток КАК РабочийУчасток,
	|	ПулЯчеек.УровеньДоступности КАК УровеньДоступности,
	|	ЕСТЬNULL(ОстаткиВЯчейках.НоваяНоменклатура, ИСТИНА) КАК НоваяНоменклатура,
	|	ЕСТЬNULL(ОстаткиВЯчейках.НоваяНоменклатураИЛИХарактеристика, ИСТИНА) КАК НоваяНоменклатураИЛИХарактеристика,
	|	ЕСТЬNULL(ОстаткиВЯчейках.НоваяНоменклатураИЛИХарактеристикаИЛИСерия, ИСТИНА) КАК НоваяНоменклатураИЛИХарактеристикаИЛИСерия," +
	?(ПоFEFO,"   ЕСТЬNULL(МаксимальныеСрокиГодностиВЯчейках.ГоденДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ГоденДо, " ,"") + 
	ТекстПриоритетСтратегии + " КАК ПриоритетСтратегии,
	|	ЕСТЬNULL(ОстаткиВЯчейках.ЕстьНужноеНазначение, ЛОЖЬ) КАК ЕстьНужноеНазначение
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиВЯчейках КАК ОстаткиВЯчейках
	|		ПО ПулЯчеек.Ячейка = ОстаткиВЯчейках.Ячейка " +
	?(ПоFEFO,"
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеСрокиГодностиВЯчейках КАК МаксимальныеСрокиГодностиВЯчейках
	|		ПО (МаксимальныеСрокиГодностиВЯчейках.Номенклатура = &Номенклатура)
	|			И (МаксимальныеСрокиГодностиВЯчейках.Характеристика = &Характеристика)
	|			И ПулЯчеек.Ячейка = МаксимальныеСрокиГодностиВЯчейках.Ячейка ","") + "
	|ГДЕ "
	+ ТекстПриоритетСтратегии + " <> &НарушенаМонотоварность
	|	И НЕ ЕСТЬNULL(ОстаткиВЯчейках.ЯчейкаПодДругоеНазначение, ЛОЖЬ)
	|УПОРЯДОЧИТЬ ПО
	|	ПулЯчеек.СостояниеПересчета,
	|	ПулЯчеек.ПриоритетОбласти,
	|	ПриоритетСтратегии, " +
	?(ПоFEFO,"   ГоденДо,","") + "
	|	УровеньДоступности,
	// Упорядочивание по свободному объему:
	// - по убыванию для ячеек из области обычного хранение;
	// В области обычного хранения такой сортировкой удается минимизировать количество ячеек в которые поместиться размещаемый товар.
	// - по возрастанию(по убыванию со знаком "минус") для ячеек из области обособленого хранения;
	// В области обособленного хранения такой сортировкой удается минимизировать общее количество ячеек/пространства занимаемое под назначение.
	|	СвободныйОбъемПорядок УБЫВ,
	|	ПорядокОбхода,
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПулЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиВЯчейках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиВЯчейкахБезКоличества";
	
	НарушенаМонотоварность = 10;//это число заведомо больше, чем приоритет любой стратегии
	
	Если ЗначениеЗаполнено(ВыборкаПоСериям.Упаковка) Тогда
		ТекстЗапросаВыбратьПервые = "ПЕРВЫЕ " + Формат(КоличествоУпаковок,"ЧГ=") + "";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НарушенаМонотоварность",НарушенаМонотоварность);
	
	Запрос.УстановитьПараметр("СкладскаяГруппаНоменклатуры",ВыборкаПоСериям.СкладскаяГруппаНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура",ВыборкаПоСериям.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",ВыборкаПоСериям.Характеристика);
	Запрос.УстановитьПараметр("Назначение",ВыборкаПоСериям.Назначение);
	Запрос.УстановитьПараметр("Серия",ВыборкаПоСериям.Серия);
	Запрос.УстановитьПараметр("СкладскаяГруппаУпаковок",ВыборкаПоСериям.СкладскаяГруппаУпаковок);
	
	//Если упаковка не помещается по габаритам, то ячейка не нужна
	Запрос.УстановитьПараметр("Ширина",ВыборкаПоСериям.Ширина);
	Запрос.УстановитьПараметр("Глубина",ВыборкаПоСериям.Глубина);
	Запрос.УстановитьПараметр("Высота",ВыборкаПоСериям.Высота);
	
	//Если в ячейку по весу или по объему не помещается хотя бы одна упаковка, то ячейка не нужна
	Если ЗначениеЗаполнено(ВыборкаПоСериям.Упаковка) Тогда
		Запрос.УстановитьПараметр("Вес",ВыборкаПоСериям.Вес);
		Запрос.УстановитьПараметр("Объем",ВыборкаПоСериям.Объем);
	Иначе
		Запрос.УстановитьПараметр("Вес",ВыборкаПоСериям.Вес/1000);
		Запрос.УстановитьПараметр("Объем",ВыборкаПоСериям.Объем/1000);
	КонецЕсли;
	Запрос.УстановитьПараметр("ОграничиватьПоВесу",ВыборкаПоСериям.ОграничиватьПоВесу);
	Запрос.УстановитьПараметр("ОграничиватьПоОбъему",ВыборкаПоСериям.ОграничиватьПоОбъему);
	
	//Безразмерные упаковки можно помещать только в неограниченные по размерам ячейки
	Запрос.УстановитьПараметр("Безразмерная",ВыборкаПоСериям.Безразмерная);
	
	ЗапросПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаПоЯчейкам = ЗапросПакет[3].Выбрать();
	
	ОченьБольшоеЧисло = 99999999999;
	
	КоличествоКРазмещению = ВыборкаПоСериям.КоличествоУпаковок;
	
	Пока ВыборкаПоЯчейкам.Следующий()
		И КоличествоКРазмещению > 0 Цикл
		
		СтрокаНаполненности = СтруктураТаблиц.ТаблицаНаполненияЯчеек.Найти(ВыборкаПоЯчейкам.Ячейка, "Ячейка");
		
		Если СтрокаНаполненности = Неопределено Тогда
			//Добавим строку в таблицу наполненности, т.к. хотя бы одну упаковку мы в любом случае поместим
			СтрокаНаполненности 				= СтруктураТаблиц.ТаблицаНаполненияЯчеек.Добавить();
			
			СтрокаНаполненности.Ячейка 			= ВыборкаПоЯчейкам.Ячейка;
			СтрокаНаполненности.Объем 			= 0;
			СтрокаНаполненности.Вес  			= 0;
			
			//Заполним назначение для ячеек из области обособленного хранения
			Если ВыборкаПоСериям.Назначение <> Справочники.Назначения.ПустаяСсылка() 
				И ВыборкаПоЯчейкам.ОбластьОбособленногоХранения Тогда
					СтрокаНаполненности.Назначение = ВыборкаПоСериям.Назначение;
			КонецЕсли;	
			
			РабочийУчасток = МассивУчастков.Найти(ВыборкаПоЯчейкам.РабочийУчасток);
			
			Если РабочийУчасток = Неопределено Тогда
				МассивУчастков.Добавить(ВыборкаПоЯчейкам.РабочийУчасток);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаПоЯчейкам.НеОграниченаПоРазмерам Или Не ВыборкаПоСериям.ОграничиватьПоОбъему Тогда
			ВсегоПоместитсяВЯчейкуПоОбъему = ОченьБольшоеЧисло;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСериям.Упаковка) Тогда
			ВсегоПоместитсяВЯчейкуПоОбъему = Цел(ВыборкаПоЯчейкам.СвободныйОбъем/ВыборкаПоСериям.Объем);
		Иначе
			ВсегоПоместитсяВЯчейкуПоОбъему = Окр(ВыборкаПоЯчейкам.СвободныйОбъем/ВыборкаПоСериям.Объем,3,РежимОкругления.Окр15как10);
			Если КоличествоКРазмещению < ВсегоПоместитсяВЯчейкуПоОбъему + 0.001 Тогда
				ВсегоПоместитсяВЯчейкуПоОбъему = КоличествоКРазмещению;
			Иначе
				ВсегоПоместитсяВЯчейкуПоОбъему = Цел(ВыборкаПоЯчейкам.СвободныйОбъем/ВыборкаПоСериям.Объем);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоЯчейкам.НеОграниченаПоГрузоподъемности Или Не ВыборкаПоСериям.ОграничиватьПоВесу Тогда
			ВсегоПоместитсяВЯчейкуПоВесу = ОченьБольшоеЧисло;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСериям.Упаковка) Тогда
			ВсегоПоместитсяВЯчейкуПоВесу = Цел(ВыборкаПоЯчейкам.СвободныйВес/ВыборкаПоСериям.Вес);
		Иначе
			ВсегоПоместитсяВЯчейкуПоВесу = Окр(ВыборкаПоЯчейкам.СвободныйВес/ВыборкаПоСериям.Вес,3,РежимОкругления.Окр15как10);
			Если КоличествоКРазмещению < ВсегоПоместитсяВЯчейкуПоВесу + 0.001 Тогда
				ВсегоПоместитсяВЯчейкуПоВесу = КоличествоКРазмещению;
			Иначе
				ВсегоПоместитсяВЯчейкуПоВесу = Цел(ВыборкаПоЯчейкам.СвободныйВес/ВыборкаПоСериям.Вес);
			КонецЕсли;
		КонецЕсли;
		
		Если ВсегоПоместитсяВЯчейкуПоОбъему > 0
			И ВсегоПоместитсяВЯчейкуПоВесу > 0 Тогда
			
			КоличествоВЯчейку = Мин(ВсегоПоместитсяВЯчейкуПоОбъему,ВсегоПоместитсяВЯчейкуПоВесу,КоличествоКРазмещению);
			
			СтрокаРезультата = СтруктураТаблиц.ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата,ВыборкаПоЯчейкам);
			ЗаполнитьЗначенияСвойств(СтрокаРезультата,ВыборкаПоСериям);
			СтрокаРезультата.КоличествоУпаковок 	= КоличествоВЯчейку;
			СтрокаРезультата.Количество			 	= КоличествоВЯчейку * ВыборкаПоСериям.КоличествоВУпаковке;
			СтрокаРезультата.ОбъемУпаковки = ВыборкаПоСериям.Объем;
			СтрокаРезультата.ВесУпаковки   = ВыборкаПоСериям.Вес;
			
			НоваяСтрокаТаблицыИспользуемыхЯчеек	= СтруктураТаблиц.ТаблицаРазмещенныхТоваров.Добавить();
			НоваяСтрокаТаблицыИспользуемыхЯчеек.Ячейка 		   = ВыборкаПоЯчейкам.Ячейка;
			НоваяСтрокаТаблицыИспользуемыхЯчеек.Номенклатура   = ВыборкаПоСериям.Номенклатура;
			НоваяСтрокаТаблицыИспользуемыхЯчеек.Характеристика = ВыборкаПоСериям.Характеристика;
			НоваяСтрокаТаблицыИспользуемыхЯчеек.Серия		   = ВыборкаПоСериям.Серия;
			
			СтрокаНаполненности.Объем = СтрокаНаполненности.Объем + КоличествоВЯчейку*ВыборкаПоСериям.Объем;
			СтрокаНаполненности.Вес   = СтрокаНаполненности.Вес + КоличествоВЯчейку*ВыборкаПоСериям.Вес;
			
			Если ВыборкаПоЯчейкам.НоваяНоменклатура Тогда
				СтрокаНаполненности.КоличествоНоменклатур = СтрокаНаполненности.КоличествоНоменклатур + 1;
			КонецЕсли;
			
			Если ВыборкаПоЯчейкам.НоваяНоменклатураИЛИХарактеристика Тогда
				СтрокаНаполненности.КоличествоХарактеристик = СтрокаНаполненности.КоличествоХарактеристик + 1;
			КонецЕсли;
			
			Если ВыборкаПоЯчейкам.НоваяНоменклатураИЛИХарактеристикаИЛИСерия Тогда
				СтрокаНаполненности.КоличествоСерий = СтрокаНаполненности.КоличествоСерий + 1;
			КонецЕсли;
			
			КоличествоКРазмещению = КоличествоКРазмещению - КоличествоВЯчейку;
			
			ВсегоПоместитсяВЯчейкуПоОбъему = ВсегоПоместитсяВЯчейкуПоОбъему - КоличествоВЯчейку;
			ВсегоПоместитсяВЯчейкуПоВесу   = ВсегоПоместитсяВЯчейкуПоВесу - КоличествоВЯчейку;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоКРазмещению > 0 Тогда
		СтрокаОшибки = СтруктураТаблиц.ТаблицаОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОшибки,ВыборкаПоСериям);
		СтрокаОшибки.КоличествоУпаковок = КоличествоКРазмещению;
		СтрокаОшибки.Количество			= КоличествоКРазмещению * ВыборкаПоСериям.КоличествоВУпаковке;
	КонецЕсли;
	
	ОбновитьВременныеТаблицы(МенеджерВременныхТаблиц, СтруктураТаблиц.ТаблицаНаполненияЯчеек, СтруктураТаблиц.ТаблицаРазмещенныхТоваров);
	
КонецПроцедуры

Процедура ОбновитьВременныеТаблицы(МенеджерВременныхТаблиц, ТаблицаНаполненияЯчеек, ТаблицаРазмещенныхТоваров)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"УНИЧТОЖИТЬ ТаблицаНаполненияЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ячейка КАК Ячейка,
	|	Таблица.Объем КАК Объем,
	|	Таблица.Вес КАК Вес,
	|	Таблица.КоличествоНоменклатур КАК КоличествоНоменклатур,
	|	Таблица.КоличествоХарактеристик КАК КоличествоХарактеристик,
	|	Таблица.КоличествоСерий КАК КоличествоСерий,
	|	Таблица.Назначение КАК Назначение
	|ПОМЕСТИТЬ ТаблицаНаполненияЯчеек
	|ИЗ
	|	&ТаблицаНаполненияЯчеек КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРазмещенныхТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ячейка КАК Ячейка,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия
	|ПОМЕСТИТЬ ТаблицаРазмещенныхТоваров
	|ИЗ
	|	&ТаблицаРазмещенныхТоваров КАК Таблица";

	Запрос.УстановитьПараметр("ТаблицаНаполненияЯчеек",ТаблицаНаполненияЯчеек);
	Запрос.УстановитьПараметр("ТаблицаРазмещенныхТоваров",ТаблицаРазмещенныхТоваров);

	Запрос.ВыполнитьПакет();
	
КонецПроцедуры

Процедура ПодготовитьТаблицуНоменклатурыДляОтбора(МенеджерВременныхТаблиц)
	
	//Исключим многооборотную тару из отбора,
	//чтобы сначала отобрать товары, а потом дополнить отобранные товары тарой
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Назначение,
	|	ТаблицаНоменклатуры.Серия,
	|	ТаблицаНоменклатуры.Распоряжение,
	|	ТаблицаНоменклатуры.ДатаОтгрузки,
	|	ТаблицаНоменклатуры.Приоритет,
	|	ТаблицаНоменклатуры.Количество,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаНоменклатурыРасширенная
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)";	
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СтруктураТаблицАлгоритмаОтборТоваров()
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультатов.Колонки.Добавить("Распоряжение", Метаданные.РегистрыНакопления.ТоварыКОтбору.Измерения.Распоряжение.Тип);
	ТаблицаРезультатов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРезультатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));	
	ТаблицаРезультатов.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРезультатов.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(18,6,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ПорядокОбхода", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(19,ДопустимаяДлина.Фиксированная)));
	ТаблицаРезультатов.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов(Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки")));
	ТаблицаРезультатов.Колонки.Добавить("КлючСвязиСТарой", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРезультатов.Индексы.Добавить("КлючСвязиСТарой");
	
	ТаблицаРасходаИзЯчеек = Новый ТаблицаЗначений;
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРасходаИзЯчеек.Индексы.Добавить("Ячейка,Номенклатура,Упаковка,Характеристика,Назначение,Серия");
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОшибок.Колонки.Добавить("Распоряжение", Метаданные.РегистрыНакопления.ТоварыКОтбору.Измерения.Распоряжение.Тип);
	ТаблицаОшибок.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаОшибок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаОшибок.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	ТаблицаОшибок.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));

	
	МассивУчастков = Новый Массив;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТаблицаРезультатов",ТаблицаРезультатов);
	СтруктураВозврата.Вставить("ТаблицаОшибок",ТаблицаОшибок);
	СтруктураВозврата.Вставить("МассивУчастков",МассивУчастков);
	СтруктураВозврата.Вставить("ТаблицаРасходаИзЯчеек",ТаблицаРасходаИзЯчеек);
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура ПодобратьЯчейкиДляОтбора(МенеджерВременныхТаблиц, Склад, Помещение, СтруктураТаблиц, ОтборТары)
	
	Запрос = Новый Запрос;                           
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//В запросе выбираются все ячейки по которым есть остатки и ячейки сортируются по правилам
	
	Если ОтборТары Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
		|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток  КАК ВНаличииОстаток,
		|	ТоварыВЯчейкахОстатки.КОтборуОстаток  КАК КОтборуОстаток
		|ПОМЕСТИТЬ ТоварыВЯчейкахОстаткиДляЗапроса
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Назначение) В
		|					(ВЫБРАТЬ
		|						ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|						ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|						ТаблицаНоменклатуры.Назначение КАК Назначение
		|					ИЗ
		|						ТаблицаНоменклатурыРасширенная КАК ТаблицаНоменклатуры)
		|				И Ячейка В
		|					(ВЫБРАТЬ
		|						СпрЯчейки.Ссылка КАК СкладскаяЯчейка
		|					ИЗ
		|						Справочник.СкладскиеЯчейки КАК СпрЯчейки
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиЯчеек
		|							ПО
		|								СпрЯчейки.Ссылка = БлокировкиЯчеек.Ячейка
		|									И (БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
		|										ИЛИ БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Отбор))
		|					ГДЕ
		|						БлокировкиЯчеек.ТипБлокировки ЕСТЬ NULL 
		|						И СпрЯчейки.Помещение = &Помещение
		|						И СпрЯчейки.Владелец = &Склад
		|						И НЕ СпрЯчейки.ЭтоГруппа
		|						И (СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
		|							ИЛИ СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Архив)))) КАК ТоварыВЯчейкахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Ячейка,
		|	ТоварыВЯчейкахОстатки.Упаковка,
		|	ТоварыВЯчейкахОстатки.Назначение,
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК ВНаличии,
		|	ТоварыВЯчейкахОстатки.КОтборуОстаток КАК КОтбору
		|ПОМЕСТИТЬ ОстаткиУпаковокВТаре
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			,
		|			Ячейка В
		|					(ВЫБРАТЬ
		|						ТоварыВЯчейкахОстаткиДляЗапроса.Ячейка
		|					ИЗ
		|						ТоварыВЯчейкахОстаткиДляЗапроса КАК ТоварыВЯчейкахОстаткиДляЗапроса)
		|				И Упаковка.ПоставляетсяВМногооборотнойТаре) КАК ТоварыВЯчейкахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ячейка,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.Назначение КАК Назначение,
		|	СУММА(ВложенныйЗапрос.ВНаличии) КАК ВНаличии,
		|	СУММА(ВложенныйЗапрос.КОтбору) КАК КОтбору
		|ПОМЕСТИТЬ ТараПодТовары
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиУпаковокВТаре.Ячейка КАК Ячейка,
		|		ОстаткиУпаковокВТаре.Упаковка.НоменклатураМногооборотнаяТара КАК Номенклатура,
		|		ОстаткиУпаковокВТаре.Упаковка.ХарактеристикаМногооборотнаяТара КАК Характеристика,
		|		ОстаткиУпаковокВТаре.Назначение КАК Назначение,
		|		ОстаткиУпаковокВТаре.ВНаличии КАК ВНаличии,
		|		ОстаткиУпаковокВТаре.КОтбору КАК КОтбору
		|	ИЗ
		|		ОстаткиУпаковокВТаре КАК ОстаткиУпаковокВТаре
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОстаткиУпаковокВТаре.Ячейка,
		|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара,
		|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара,
		|		ОстаткиУпаковокВТаре.Назначение,
		|		ОстаткиУпаковокВТаре.ВНаличии * ВариантыПереупаковки.Количество,
		|		ОстаткиУпаковокВТаре.КОтбору * ВариантыПереупаковки.Количество
		|	ИЗ
		|		ОстаткиУпаковокВТаре КАК ОстаткиУпаковокВТаре
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
		|			ПО ОстаткиУпаковокВТаре.Упаковка = ВариантыПереупаковки.Источник) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Назначение,
		|	ВложенныйЗапрос.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Назначение,
		|	ВложенныйЗапрос.Ячейка,
		|	СУММА(ВложенныйЗапрос.ВНаличииОстаток) КАК ВНаличииОстаток,
		|	СУММА(ВложенныйЗапрос.КОтборуОстаток) КАК КОтборуОстаток,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ВложенныйЗапрос.Ячейка.Код КАК Код,
		|	ВложенныйЗапрос.Ячейка.УровеньДоступности КАК УровеньДоступности,
		|	ВложенныйЗапрос.Ячейка.РабочийУчасток КАК РабочийУчасток,
		|	ВложенныйЗапрос.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	1 КАК КоличествоВУпаковке,
		|	&ТекстЗапросаВесУпаковки КАК Вес,
		|	ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка) КАК СкладскаяГруппаУпаковок,
		|	&ТекстЗапросаОбъемУпаковки КАК Объем,
		|	ЛОЖЬ КАК Безразмерная,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.ОписаниеМонотоварности КАК ОписаниеМонотоварности,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.СтрогаяМонотоварность КАК СтрогаяМонотоварность,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения КАК ОбластьХранения
		|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыВЯчейкахОстаткиДляЗапроса.Номенклатура КАК Номенклатура,
		|		ТоварыВЯчейкахОстаткиДляЗапроса.Характеристика КАК Характеристика,
		|		ТоварыВЯчейкахОстаткиДляЗапроса.Назначение КАК Назначение,
		|		ТоварыВЯчейкахОстаткиДляЗапроса.Ячейка КАК Ячейка,
		|	ТоварыВЯчейкахОстаткиДляЗапроса.ВНаличииОстаток КАК ВНаличииОстаток,
		|	ТоварыВЯчейкахОстаткиДляЗапроса.КОтборуОстаток КАК КОтборуОстаток
		|	ИЗ
		|		ТоварыВЯчейкахОстаткиДляЗапроса КАК ТоварыВЯчейкахОстаткиДляЗапроса
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТараПодТовары.Номенклатура,
		|		ТараПодТовары.Характеристика,
		|		ТараПодТовары.Назначение,
		|		ТараПодТовары.Ячейка,
		|		-ТараПодТовары.ВНаличии,
		|		-ТараПодТовары.КОтбору
		|	ИЗ
		|		ТараПодТовары КАК ТараПодТовары) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Назначение,
		|	ВложенныйЗапрос.Ячейка,
		|	ВложенныйЗапрос.Ячейка.Код,
		|	ВложенныйЗапрос.Ячейка.УровеньДоступности,
		|	ВложенныйЗапрос.Ячейка.РабочийУчасток,
		|	ВложенныйЗапрос.Ячейка.ПорядокОбхода,
		|	&ТекстЗапросаВесУпаковки,
		|	&ТекстЗапросаОбъемУпаковки,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.ОписаниеМонотоварности,
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения.СтрогаяМонотоварность,		
		|	ВложенныйЗапрос.Ячейка.ОбластьХранения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыВЯчейкахОстаткиДляЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОстаткиУпаковокВТаре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТараПодТовары";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения", "ВложенныйЗапрос.Номенклатура", Ложь) );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения", "ВложенныйЗапрос.Номенклатура", Ложь));
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
		|	ТоварыВЯчейкахОстатки.КОтборуОстаток КАК КОтборуОстаток,
		|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
		|	ТоварыВЯчейкахОстатки.Ячейка.Код КАК Код,
		|	ТоварыВЯчейкахОстатки.Ячейка.УровеньДоступности КАК УровеньДоступности,
		|	ТоварыВЯчейкахОстатки.Ячейка.РабочийУчасток КАК РабочийУчасток,
		|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
		|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоВУпаковке,
		|	&ТекстЗапросаВесУпаковки КАК Вес,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.СкладскаяГруппа, ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка)) КАК СкладскаяГруппаУпаковок,
		|	&ТекстЗапросаОбъемУпаковки КАК Объем,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.Безразмерная, ЛОЖЬ) КАК Безразмерная,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ОписаниеМонотоварности КАК ОписаниеМонотоварности,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.СтрогаяМонотоварность КАК СтрогаяМонотоварность,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения КАК ОбластьХранения
		|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Назначение) В
		|					(ВЫБРАТЬ
		|						ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|						ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|						ТаблицаНоменклатуры.Назначение КАК Назначение
		|					ИЗ
		|						ТаблицаНоменклатурыРасширенная КАК ТаблицаНоменклатуры)
		|				И Ячейка В
		|					(ВЫБРАТЬ
		|						СпрЯчейки.Ссылка КАК СкладскаяЯчейка
		|					ИЗ
		|						Справочник.СкладскиеЯчейки КАК СпрЯчейки
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиЯчеек
		|							ПО
		|								СпрЯчейки.Ссылка = БлокировкиЯчеек.Ячейка
		|									И (БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
		|										ИЛИ БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Отбор))
		|					ГДЕ
		|						БлокировкиЯчеек.ТипБлокировки ЕСТЬ NULL
		|						И СпрЯчейки.Помещение = &Помещение
		|						И СпрЯчейки.Владелец = &Склад
		|						И НЕ СпрЯчейки.ЭтоГруппа
		|						И (СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
		|							ИЛИ СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Архив)))) КАК ТоварыВЯчейкахОстатки
		|ГДЕ
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ТоварыВЯчейкахОстатки.Упаковка", "ТоварыВЯчейкахОстатки.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ТоварыВЯчейкахОстатки.Упаковка", "ТоварыВЯчейкахОстатки.Номенклатура", Ложь));
		
	КонецЕсли;
	ТекстЗапроса = 	ТекстЗапроса + ";" + Символы.ПС + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Назначение КАК Назначение,
	|	ТаблицаНоменклатуры.Серия КАК Серия,
	|	ТаблицаНоменклатуры.Распоряжение КАК Распоряжение,
	|	ТаблицаНоменклатуры.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТаблицаНоменклатуры.Приоритет КАК Приоритет,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ТоварыВЯчейкахОстатки.Код КАК Код,
	|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(ТоварыВЯчейкахОстатки.КОтборуОстаток, 0)) КАК СвободныйОстаток,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.УровеньДоступности, 9999999999) КАК УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.РабочийУчасток КАК РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.ПорядокОбхода КАК ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	ТоварыВЯчейкахОстатки.Вес КАК Вес,
	|	ТоварыВЯчейкахОстатки.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ТоварыВЯчейкахОстатки.Объем КАК Объем,
	|	ТоварыВЯчейкахОстатки.Безразмерная КАК Безразмерная,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
	|	ТоварыВЯчейкахОстатки.ОписаниеМонотоварности КАК ОписаниеМонотоварности,
	|	ТоварыВЯчейкахОстатки.СтрогаяМонотоварность КАК СтрогаяМонотоварность,
	|	ТоварыВЯчейкахОстатки.ОбластьХранения КАК ОбластьХранения
	|ПОМЕСТИТЬ ПулЯчеек
	|ИЗ
	|	ТаблицаНоменклатурыРасширенная КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И ТаблицаНоменклатуры.Назначение = ТоварыВЯчейкахОстатки.Назначение
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыВЯчейкахОстатки.Серия
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Назначение,
	|	ТаблицаНоменклатуры.Серия,
	|	ТаблицаНоменклатуры.Распоряжение,
	|	ТаблицаНоменклатуры.ДатаОтгрузки,
	|	ТаблицаНоменклатуры.Приоритет,
	|	ТоварыВЯчейкахОстатки.Код,
	|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры,
	|	ТоварыВЯчейкахОстатки.Ячейка,
	|	ТаблицаНоменклатуры.Количество,
	|	ТоварыВЯчейкахОстатки.РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Вес,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.Безразмерная,
	|	ТоварыВЯчейкахОстатки.СкладскаяГруппаУпаковок,
	|	ТоварыВЯчейкахОстатки.Объем,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.КоличествоВУпаковке,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ОбластьХранения,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораПодОстаток,
	|	ТоварыВЯчейкахОстатки.ОписаниеМонотоварности,
	|	ТоварыВЯчейкахОстатки.СтрогаяМонотоварность,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.УровеньДоступности, 9999999999)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	ПулЯчеек.Номенклатура КАК Номенклатура,
	|	ПулЯчеек.Характеристика,
	|	ПулЯчеек.Назначение,
	|	ПулЯчеек.Серия,
	|	ВЫБОР
	|		КОГДА ПулЯчеек.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДругаяНоменклатура,
	|	ВЫБОР
	|		КОГДА ПулЯчеек.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|				И ПулЯчеек.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДругаяНоменклатураИЛИХарактеристика,
	|	ВЫБОР
	|		КОГДА ПулЯчеек.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|				И ПулЯчеек.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|				И ПулЯчеек.Серия = ТоварыВЯчейкахОстатки.Серия
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДругаяНоменклатураИЛИХарактеристикаИЛИСерия
	|ПОМЕСТИТЬ ДругиеТоварыВЯчейках
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				,
	|				Ячейка В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПулЯчеек.Ячейка
	|					ИЗ
	|						ПулЯчеек КАК ПулЯчеек)) КАК ТоварыВЯчейкахОстатки
	|		ПО ПулЯчеек.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДругиеТоварыВЯчейках.Номенклатура,
	|	ДругиеТоварыВЯчейках.Ячейка,
	|	МАКСИМУМ(ДругиеТоварыВЯчейках.ЕстьДругаяНоменклатура) КАК ЕстьДругаяНоменклатура
	|ПОМЕСТИТЬ НоменклатураВЯчейках
	|ИЗ
	|	ДругиеТоварыВЯчейках КАК ДругиеТоварыВЯчейках
	|
	|СГРУППИРОВАТЬ ПО
	|	ДругиеТоварыВЯчейках.Номенклатура,
	|	ДругиеТоварыВЯчейках.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДругиеТоварыВЯчейках.Номенклатура,
	|	ДругиеТоварыВЯчейках.Ячейка,
	|	ДругиеТоварыВЯчейках.Характеристика,
	|	МАКСИМУМ(ДругиеТоварыВЯчейках.ЕстьДругаяНоменклатураИЛИХарактеристика) КАК ЕстьДругаяНоменклатураИЛИХарактеристика
	|ПОМЕСТИТЬ НоменклатураИХарактеристикаВЯчейках
	|ИЗ
	|	ДругиеТоварыВЯчейках КАК ДругиеТоварыВЯчейках
	|
	|СГРУППИРОВАТЬ ПО
	|	ДругиеТоварыВЯчейках.Номенклатура,
	|	ДругиеТоварыВЯчейках.Ячейка,
	|	ДругиеТоварыВЯчейках.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДругиеТоварыВЯчейках.Номенклатура,
	|	ДругиеТоварыВЯчейках.Ячейка,
	|	ДругиеТоварыВЯчейках.Характеристика,
	|	МАКСИМУМ(ДругиеТоварыВЯчейках.ЕстьДругаяНоменклатураИЛИХарактеристикаИЛИСерия) КАК ЕстьДругаяНоменклатураИЛИХарактеристикаИЛИСерия,
	|	ДругиеТоварыВЯчейках.Серия
	|ПОМЕСТИТЬ НоменклатураИХарактеристикаИСерияВЯчейках
	|ИЗ
	|	ДругиеТоварыВЯчейках КАК ДругиеТоварыВЯчейках
	|
	|СГРУППИРОВАТЬ ПО
	|	ДругиеТоварыВЯчейках.Номенклатура,
	|	ДругиеТоварыВЯчейках.Ячейка,
	|	ДругиеТоварыВЯчейках.Характеристика,
	|	ДругиеТоварыВЯчейках.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулЯчеек.Номенклатура КАК Номенклатура,
	|	ПулЯчеек.Характеристика КАК Характеристика,
	|	ПулЯчеек.Назначение КАК Назначение,
	|	ПулЯчеек.Серия КАК Серия,
	|	ПулЯчеек.Распоряжение КАК Распоряжение,
	|	ПулЯчеек.Количество КАК Количество,
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	ПулЯчеек.СвободныйОстаток КАК СвободныйОстаток,
	|	ПулЯчеек.РабочийУчасток КАК РабочийУчасток,
	|	ПулЯчеек.ПорядокОбхода КАК ПорядокОбхода,
	|	ПулЯчеек.Код КАК Код,
	|	ПулЯчеек.Упаковка КАК Упаковка,
	|	ПулЯчеек.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	ПулЯчеек.Вес КАК Вес,
	|	ПулЯчеек.Объем КАК Объем,
	|	ВЫБОР
	|		КОГДА ПулЯчеек.СвободныйОстаток <= ПулЯчеек.Количество / ПулЯчеек.КоличествоВУпаковке
	|			ТОГДА ПулЯчеек.ПриоритетОтбораПодОстаток
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПулЯчеек.ОписаниеМонотоварности = ЗНАЧЕНИЕ(Перечисление.ОписаниеМонотоварности.ПоНоменклатуре)
	|					ТОГДА ВЫБОР
	|							КОГДА НЕ НоменклатураВЯчейках.ЕстьДругаяНоменклатура
	|								ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
	|							ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ПулЯчеек.ОписаниеМонотоварности = ЗНАЧЕНИЕ(Перечисление.ОписаниеМонотоварности.ПоХарактеристике)
	|							ТОГДА ВЫБОР
	|									КОГДА НЕ НоменклатураИХарактеристикаВЯчейках.ЕстьДругаяНоменклатураИЛИХарактеристика
	|										ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
	|									ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА НЕ НоменклатураИХарактеристикаИСерияВЯчейках.ЕстьДругаяНоменклатураИЛИХарактеристикаИЛИСерия
	|									ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
	|								ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ПриоритетСтратегии,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА 1000
	|		ИНАЧЕ ПравилаРазмещенияТоваровВЯчейках.Приоритет
	|	КОНЕЦ КАК ПриоритетОбласти
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураВЯчейках КАК НоменклатураВЯчейках
	|		ПО ПулЯчеек.Номенклатура = НоменклатураВЯчейках.Номенклатура
	|			И ПулЯчеек.Ячейка = НоменклатураВЯчейках.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|		ПО ПулЯчеек.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|			И ПулЯчеек.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|			И ПулЯчеек.ОбластьХранения = ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения
	|			И (ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение)
	|			И (ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураИХарактеристикаВЯчейках КАК НоменклатураИХарактеристикаВЯчейках
	|		ПО ПулЯчеек.Номенклатура = НоменклатураИХарактеристикаВЯчейках.Номенклатура
	|			И ПулЯчеек.Ячейка = НоменклатураИХарактеристикаВЯчейках.Ячейка
	|			И ПулЯчеек.Характеристика = НоменклатураИХарактеристикаВЯчейках.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураИХарактеристикаИСерияВЯчейках КАК НоменклатураИХарактеристикаИСерияВЯчейках
	|		ПО ПулЯчеек.Ячейка = НоменклатураИХарактеристикаИСерияВЯчейках.Ячейка
	|			И ПулЯчеек.Номенклатура = НоменклатураИХарактеристикаИСерияВЯчейках.Номенклатура
	|			И ПулЯчеек.Характеристика = НоменклатураИХарактеристикаИСерияВЯчейках.Характеристика
	|			И ПулЯчеек.Серия = НоменклатураИХарактеристикаИСерияВЯчейках.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПересчетовЯчеек КАК СостоянияПересчетовЯчеек
	|		ПО ПулЯчеек.Ячейка = СостоянияПересчетовЯчеек.Ячейка
	|			И (СостоянияПересчетовЯчеек.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПересчетовЯчеек.ТребуетсяПересчет))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПулЯчеек.ДатаОтгрузки, ДЕНЬ),
	|	ПулЯчеек.Приоритет УБЫВ,
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	СостоянияПересчетовЯчеек.Состояние,
	|	ПриоритетОбласти УБЫВ,
	|	КоличествоВУпаковке УБЫВ,
	|	ПриоритетСтратегии,
	|	СвободныйОстаток,
	|	ПулЯчеек.УровеньДоступности,
	|	ПорядокОбхода,
	|	Код
	|ИТОГИ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураИХарактеристикаИСерияВЯчейках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураИХарактеристикаВЯчейках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураВЯчейках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДругиеТоварыВЯчейках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПулЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыВЯчейкахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыРасширенная";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейкахОстатки.Упаковка", Неопределено));

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПоРаспоряжениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтборСтрокИзТаблицыРасходаИзЯчеек = Новый Структура("Ячейка,Номенклатура,Упаковка,Характеристика,Назначение,Серия");
	
	Пока ВыборкаПоРаспоряжениям.Следующий() Цикл                  
		
		ВыборкаПоНоменклатуре =  ВыборкаПоРаспоряжениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
				
				ВыборкаПоНазначению = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоНазначению.Следующий() Цикл
					
					ВыборкаПоСериям = ВыборкаПоНазначению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоСериям.Следующий() Цикл  
							
						//детали
						ВыборкаПоЯчейкам = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						КоличествоКОтбору = Неопределено;
						
						Пока ВыборкаПоЯчейкам.Следующий() Цикл
															
							Если КоличествоКОтбору = Неопределено Тогда
								
								КоличествоКОтбору = ВыборкаПоЯчейкам.Количество;
								
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ВыборкаПоЯчейкам.Упаковка)
								И КоличествоКОтбору < ВыборкаПоЯчейкам.КоличествоВУпаковке Тогда
								Продолжить;
							КонецЕсли;
							
							//Если ячейка заполнена, значит в ней есть остаток в нужной упаковке, 
							//иначе таблица остатков не соединилась бы с таблицей номенклатуры
							Если ЗначениеЗаполнено(ВыборкаПоЯчейкам.Ячейка)
								И ВыборкаПоЯчейкам.СвободныйОстаток > 0 Тогда
								
								ЗаполнитьЗначенияСвойств(ОтборСтрокИзТаблицыРасходаИзЯчеек, ВыборкаПоЯчейкам);
								
								МассивНайденныхСтрок = СтруктураТаблиц.ТаблицаРасходаИзЯчеек.НайтиСтроки(ОтборСтрокИзТаблицыРасходаИзЯчеек);
								
								Если МассивНайденныхСтрок.Количество() = 0 Тогда
									СтрокаРасхода 						= СтруктураТаблиц.ТаблицаРасходаИзЯчеек.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаРасхода, ОтборСтрокИзТаблицыРасходаИзЯчеек);
									
									СтрокаРасхода.КоличествоУпаковок 	= ВыборкаПоЯчейкам.СвободныйОстаток;
									
									РабочийУчасток = СтруктураТаблиц.МассивУчастков.Найти(ВыборкаПоЯчейкам.РабочийУчасток);
									Если РабочийУчасток = Неопределено Тогда
										СтруктураТаблиц.МассивУчастков.Добавить(ВыборкаПоЯчейкам.РабочийУчасток);
									КонецЕсли;
								Иначе
									СтрокаРасхода = МассивНайденныхСтрок[0];
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ВыборкаПоЯчейкам.Упаковка) Тогда
									КоличествоИзЯчейки = Мин(Цел(КоличествоКОтбору/ВыборкаПоЯчейкам.КоличествоВУпаковке),СтрокаРасхода.КоличествоУпаковок);
								Иначе
									КоличествоИзЯчейки = Мин(КоличествоКОтбору,СтрокаРасхода.КоличествоУпаковок);
								КонецЕсли;
								
								Если КоличествоИзЯчейки > 0 Тогда
									СтрокаРезультата = СтруктураТаблиц.ТаблицаРезультатов.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаПоЯчейкам);
									СтрокаРезультата.КоличествоУпаковок = КоличествоИзЯчейки;
									СтрокаРезультата.Количество         = КоличествоИзЯчейки * ВыборкаПоЯчейкам.КоличествоВУпаковке;
									СтрокаРезультата.ОбъемУпаковки		= ВыборкаПоЯчейкам.Объем;
									СтрокаРезультата.ВесУпаковки		= ВыборкаПоЯчейкам.Вес;
									
									СтрокаРезультата.КлючСвязиСТарой = СтруктураТаблиц.ТаблицаРезультатов.Количество();
									
									СтрокаРасхода.КоличествоУпаковок = СтрокаРасхода.КоличествоУпаковок - КоличествоИзЯчейки; 
									КоличествоКОтбору = КоличествоКОтбору - КоличествоИзЯчейки * ВыборкаПоЯчейкам.КоличествоВУпаковке;
								КонецЕсли;						
								
							КонецЕсли;
							
							Если КоличествоКОтбору = 0 Тогда
								
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если КоличествоКОтбору <> 0 Тогда
							
							СтрокаОшибки = СтруктураТаблиц.ТаблицаОшибок.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоСериям);
							СтрокаОшибки.Количество = КоличествоКОтбору;
							
						КонецЕсли;	
						
					КонецЦикла;
											
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Если Не ОтборТары
		И МенеджерВременныхТаблиц.Таблицы.Найти("ТаблицаТоварныеМестаКОтбору") <> Неопределено // МРМ не работает с товарными местами.
		И (ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц, "ТаблицаТоварныеМестаКОтбору").Количество() <> 0
			Или СтруктураТаблиц.ТаблицаОшибок.Количество() <> 0) Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаНераспределенных.Распоряжение,
		|	ВЫРАЗИТЬ(ТаблицаНераспределенных.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаНераспределенных.Номенклатура КАК Справочник.Номенклатура).СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
		|	ТаблицаНераспределенных.Характеристика,
		|	ТаблицаНераспределенных.Назначение,
		|	ТаблицаНераспределенных.Серия,
		|	ВЫРАЗИТЬ(ТаблицаНераспределенных.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	ТаблицаНераспределенных.Количество
		|ПОМЕСТИТЬ ТаблицаНераспределенных
		|ИЗ
		|	&ТаблицаОшибок КАК ТаблицаНераспределенных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНераспределенных.Распоряжение,
		|	ТаблицаНераспределенных.Номенклатура,
		|	ТаблицаНераспределенных.Характеристика,
		|	ТаблицаНераспределенных.Назначение,
		|	ТаблицаНераспределенных.Серия,
		|	ТаблицаНераспределенных.СкладскаяГруппаНоменклатуры,
		|	ТаблицаНераспределенных.Количество * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК Количество,
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто
		|ПОМЕСТИТЬ ТаблицаОшибокТоварныеМеста
		|ИЗ
		|	ТаблицаНераспределенных КАК ТаблицаНераспределенных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО ТаблицаНераспределенных.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНераспределенных.Распоряжение,
		|	ТаблицаНераспределенных.Номенклатура,
		|	ТаблицаНераспределенных.Характеристика,
		|	ТаблицаНераспределенных.Назначение,
		|	ТаблицаНераспределенных.Серия,
		|	ТаблицаНераспределенных.СкладскаяГруппаНоменклатуры,
		|	ТаблицаНераспределенных.Количество * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * УпаковкиЕдиницыИзмерения.КоличествоУпаковок,
		|	УпаковкиЕдиницыИзмерения.Ссылка
		|ИЗ
		|	ТаблицаНераспределенных КАК ТаблицаНераспределенных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО ТаблицаНераспределенных.Номенклатура.НаборУпаковок = УпаковкиЕдиницыИзмерения.Владелец
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОшибокТоварныеМеста.Распоряжение,
		|	ТаблицаОшибокТоварныеМеста.Номенклатура,
		|	ТаблицаОшибокТоварныеМеста.Характеристика,
		|	ТаблицаОшибокТоварныеМеста.Назначение,
		|	ТаблицаОшибокТоварныеМеста.Серия,
		|	ТаблицаОшибокТоварныеМеста.СкладскаяГруппаНоменклатуры,
		|	ТаблицаОшибокТоварныеМеста.Количество,
		|	ТаблицаОшибокТоварныеМеста.ТоварноеМесто КАК ТоварноеМесто
		|ПОМЕСТИТЬ ТаблицаНоменклатурыТоварныеМеста
		|ИЗ
		|	ТаблицаОшибокТоварныеМеста КАК ТаблицаОшибокТоварныеМеста
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТоварныеМестаКОтбору.Распоряжение,
		|	ТаблицаТоварныеМестаКОтбору.Номенклатура,
		|	ТаблицаТоварныеМестаКОтбору.Характеристика,
		|	ТаблицаТоварныеМестаКОтбору.Назначение,
		|	ТаблицаТоварныеМестаКОтбору.Серия,
		|	ТаблицаТоварныеМестаКОтбору.СкладскаяГруппаНоменклатуры,
		|	ТаблицаТоварныеМестаКОтбору.Количество,
		|	ТаблицаТоварныеМестаКОтбору.ТоварноеМесто
		|ИЗ
		|	ТаблицаТоварныеМестаКОтбору КАК ТаблицаТоварныеМестаКОтбору
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
		|	ТоварыВЯчейкахОстатки.КОтборуОстаток КАК КОтборуОстаток,
		|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
		|	ТоварыВЯчейкахОстатки.Ячейка.Код КАК Код,
		|	ТоварыВЯчейкахОстатки.Ячейка.УровеньДоступности КАК УровеньДоступности,
		|	ТоварыВЯчейкахОстатки.Ячейка.РабочийУчасток КАК РабочийУчасток,
		|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
		|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		|	&ТекстЗапросаВесУпаковки КАК Вес,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.СкладскаяГруппа, ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка)) КАК СкладскаяГруппаУпаковок,
		|	&ТекстЗапросаОбъемУпаковки КАК Объем,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.Безразмерная, ЛОЖЬ) КАК Безразмерная,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ОписаниеМонотоварности КАК ОписаниеМонотоварности,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.СтрогаяМонотоварность КАК СтрогаяМонотоварность,
		|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения КАК ОбластьХранения
		|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Назначение, Упаковка) В
		|					(ВЫБРАТЬ
		|						ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|						ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|						ТаблицаНоменклатуры.Назначение КАК Назначение,
		|						ТаблицаНоменклатуры.ТоварноеМесто КАК Упаковка
		|					ИЗ
		|						ТаблицаНоменклатурыТоварныеМеста КАК ТаблицаНоменклатуры)
		|				И Ячейка В
		|					(ВЫБРАТЬ
		|						СпрЯчейки.Ссылка КАК СкладскаяЯчейка
		|					ИЗ
		|						Справочник.СкладскиеЯчейки КАК СпрЯчейки
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиЯчеек
		|							ПО
		|								СпрЯчейки.Ссылка = БлокировкиЯчеек.Ячейка
		|									И (БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
		|										ИЛИ БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Отбор))
		|					ГДЕ
		|						БлокировкиЯчеек.ТипБлокировки ЕСТЬ NULL 
		|						И СпрЯчейки.Помещение = &Помещение
		|						И СпрЯчейки.Владелец = &Склад
		|						И НЕ СпрЯчейки.ЭтоГруппа
		|						И (СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
		|							ИЛИ СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Архив)))) КАК ТоварыВЯчейкахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатуры.Назначение КАК Назначение,
		|	ТаблицаНоменклатуры.Серия КАК Серия,
		|	ТаблицаНоменклатуры.Распоряжение КАК Распоряжение,
		|	ТаблицаНоменклатуры.Количество КАК Количество,
		|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	ТоварыВЯчейкахОстатки.Код КАК Код,
		|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(ТоварыВЯчейкахОстатки.КОтборуОстаток, 0)) КАК СвободныйОстаток,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.УровеньДоступности, 9999999999) КАК УровеньДоступности,
		|	ТоварыВЯчейкахОстатки.РабочийУчасток КАК РабочийУчасток,
		|	ТоварыВЯчейкахОстатки.ПорядокОбхода КАК ПорядокОбхода,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка, ТаблицаНоменклатуры.ТоварноеМесто) КАК Упаковка,
		|	ТоварыВЯчейкахОстатки.Вес КАК Вес,
		|	ТоварыВЯчейкахОстатки.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
		|	ТоварыВЯчейкахОстатки.Объем КАК Объем,
		|	ТоварыВЯчейкахОстатки.Безразмерная КАК Безразмерная,
		|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
		|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
		|	ТоварыВЯчейкахОстатки.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
		|	ТоварыВЯчейкахОстатки.ОписаниеМонотоварности КАК ОписаниеМонотоварности,
		|	ТоварыВЯчейкахОстатки.СтрогаяМонотоварность КАК СтрогаяМонотоварность,
		|	ТоварыВЯчейкахОстатки.ОбластьХранения КАК ОбластьХранения
		|ПОМЕСТИТЬ ПулЯчеек
		|ИЗ
		|	ТаблицаНоменклатурыТоварныеМеста КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
		|		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
		|			И ТаблицаНоменклатуры.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
		|			И ТаблицаНоменклатуры.Назначение = ТоварыВЯчейкахОстатки.Назначение
		|			И (ВЫБОР
		|				КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыВЯчейкахОстатки.Серия
		|			КОНЕЦ)
		|			И ТаблицаНоменклатуры.ТоварноеМесто = ТоварыВЯчейкахОстатки.Упаковка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатуры.Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика,
		|	ТаблицаНоменклатуры.Назначение,
		|	ТаблицаНоменклатуры.Серия,
		|	ТаблицаНоменклатуры.Распоряжение,
		|	ТоварыВЯчейкахОстатки.Код,
		|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры,
		|	ТоварыВЯчейкахОстатки.Ячейка,
		|	ТаблицаНоменклатуры.Количество,
		|	ТоварыВЯчейкахОстатки.РабочийУчасток,
		|	ТоварыВЯчейкахОстатки.ПорядокОбхода,
		|	ТоварыВЯчейкахОстатки.Вес,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка, ТаблицаНоменклатуры.ТоварноеМесто),
		|	ТоварыВЯчейкахОстатки.Безразмерная,
		|	ТоварыВЯчейкахОстатки.СкладскаяГруппаУпаковок,
		|	ТоварыВЯчейкахОстатки.Объем,
		|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзМонотоварныхЯчеек,
		|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзСмешанныхЯчеек,
		|	ТоварыВЯчейкахОстатки.ОбластьХранения,
		|	ТоварыВЯчейкахОстатки.ПриоритетОтбораПодОстаток,
		|	ТоварыВЯчейкахОстатки.ОписаниеМонотоварности,
		|	ТоварыВЯчейкахОстатки.СтрогаяМонотоварность,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.УровеньДоступности, 9999999999)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулЯчеек.Ячейка КАК Ячейка,
		|	ПулЯчеек.Номенклатура КАК Номенклатура,
		|	ПулЯчеек.Характеристика,
		|	ПулЯчеек.Назначение,
		|	ПулЯчеек.Серия,
		|	ВЫБОР
		|		КОГДА ПулЯчеек.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДругаяНоменклатура,
		|	ВЫБОР
		|		КОГДА ПулЯчеек.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
		|				И ПулЯчеек.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДругаяНоменклатураИЛИХарактеристика,
		|	ВЫБОР
		|		КОГДА ПулЯчеек.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
		|				И ПулЯчеек.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
		|				И ПулЯчеек.Серия = ТоварыВЯчейкахОстатки.Серия
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДругаяНоменклатураИЛИХарактеристикаИЛИСерия
		|ПОМЕСТИТЬ ДругиеТоварыВЯчейках
		|ИЗ
		|	ПулЯчеек КАК ПулЯчеек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
		|				,
		|				Ячейка В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПулЯчеек.Ячейка
		|					ИЗ
		|						ПулЯчеек КАК ПулЯчеек)) КАК ТоварыВЯчейкахОстатки
		|		ПО ПулЯчеек.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДругиеТоварыВЯчейках.Номенклатура,
		|	ДругиеТоварыВЯчейках.Ячейка,
		|	МАКСИМУМ(ДругиеТоварыВЯчейках.ЕстьДругаяНоменклатура) КАК ЕстьДругаяНоменклатура
		|ПОМЕСТИТЬ НоменклатураВЯчейках
		|ИЗ
		|	ДругиеТоварыВЯчейках КАК ДругиеТоварыВЯчейках
		|
		|СГРУППИРОВАТЬ ПО
		|	ДругиеТоварыВЯчейках.Номенклатура,
		|	ДругиеТоварыВЯчейках.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДругиеТоварыВЯчейках.Номенклатура,
		|	ДругиеТоварыВЯчейках.Ячейка,
		|	ДругиеТоварыВЯчейках.Характеристика,
		|	МАКСИМУМ(ДругиеТоварыВЯчейках.ЕстьДругаяНоменклатураИЛИХарактеристика) КАК ЕстьДругаяНоменклатураИЛИХарактеристика
		|ПОМЕСТИТЬ НоменклатураИХарактеристикаВЯчейках
		|ИЗ
		|	ДругиеТоварыВЯчейках КАК ДругиеТоварыВЯчейках
		|
		|СГРУППИРОВАТЬ ПО
		|	ДругиеТоварыВЯчейках.Номенклатура,
		|	ДругиеТоварыВЯчейках.Ячейка,
		|	ДругиеТоварыВЯчейках.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДругиеТоварыВЯчейках.Номенклатура,
		|	ДругиеТоварыВЯчейках.Ячейка,
		|	ДругиеТоварыВЯчейках.Характеристика,
		|	МАКСИМУМ(ДругиеТоварыВЯчейках.ЕстьДругаяНоменклатураИЛИХарактеристикаИЛИСерия) КАК ЕстьДругаяНоменклатураИЛИХарактеристикаИЛИСерия,
		|	ДругиеТоварыВЯчейках.Серия
		|ПОМЕСТИТЬ НоменклатураИХарактеристикаИСерияВЯчейках
		|ИЗ
		|	ДругиеТоварыВЯчейках КАК ДругиеТоварыВЯчейках
		|
		|СГРУППИРОВАТЬ ПО
		|	ДругиеТоварыВЯчейках.Номенклатура,
		|	ДругиеТоварыВЯчейках.Ячейка,
		|	ДругиеТоварыВЯчейках.Характеристика,
		|	ДругиеТоварыВЯчейках.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулЯчеек.Номенклатура КАК Номенклатура,
		|	ПулЯчеек.Характеристика КАК Характеристика,
		|	ПулЯчеек.Назначение КАК Назначение,
		|	ПулЯчеек.Серия КАК Серия,
		|	ПулЯчеек.Распоряжение КАК Распоряжение,
		|	ПулЯчеек.Количество КАК Количество,
		|	ПулЯчеек.Ячейка КАК Ячейка,
		|	ПулЯчеек.СвободныйОстаток КАК СвободныйОстаток,
		|	ПулЯчеек.РабочийУчасток КАК РабочийУчасток,
		|	ПулЯчеек.ПорядокОбхода КАК ПорядокОбхода,
		|	ПулЯчеек.Код КАК Код,
		|	ПулЯчеек.Упаковка КАК Упаковка,
		|	ПулЯчеек.Упаковка.КоличествоУпаковок КАК КоличествоВКомплекте,
		|	ПулЯчеек.Вес КАК Вес,
		|	ПулЯчеек.Объем КАК Объем,
		|	ВЫБОР
		|		КОГДА ПулЯчеек.СвободныйОстаток <= ПулЯчеек.Количество
		|			ТОГДА ПулЯчеек.ПриоритетОтбораПодОстаток
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПулЯчеек.ОписаниеМонотоварности = ЗНАЧЕНИЕ(Перечисление.ОписаниеМонотоварности.ПоНоменклатуре)
		|					ТОГДА ВЫБОР
		|							КОГДА НЕ НоменклатураВЯчейках.ЕстьДругаяНоменклатура
		|								ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
		|							ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ПулЯчеек.ОписаниеМонотоварности = ЗНАЧЕНИЕ(Перечисление.ОписаниеМонотоварности.ПоХарактеристике)
		|							ТОГДА ВЫБОР
		|									КОГДА НЕ НоменклатураИХарактеристикаВЯчейках.ЕстьДругаяНоменклатураИЛИХарактеристика
		|										ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
		|									ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
		|								КОНЕЦ
		|						ИНАЧЕ ВЫБОР
		|								КОГДА НЕ НоменклатураИХарактеристикаИСерияВЯчейках.ЕстьДругаяНоменклатураИЛИХарактеристикаИЛИСерия
		|									ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
		|								ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ПриоритетСтратегии,
		|	ВЫБОР
		|		КОГДА ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения ЕСТЬ NULL 
		|			ТОГДА 1000
		|		ИНАЧЕ ПравилаРазмещенияТоваровВЯчейках.Приоритет
		|	КОНЕЦ КАК ПриоритетОбласти
		|ИЗ
		|	ПулЯчеек КАК ПулЯчеек
		|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураВЯчейках КАК НоменклатураВЯчейках
		|		ПО ПулЯчеек.Номенклатура = НоменклатураВЯчейках.Номенклатура
		|			И ПулЯчеек.Ячейка = НоменклатураВЯчейках.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
		|		ПО ПулЯчеек.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
		|			И ПулЯчеек.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
		|			И (ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение)
		|			И (ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураИХарактеристикаВЯчейках КАК НоменклатураИХарактеристикаВЯчейках
		|		ПО ПулЯчеек.Номенклатура = НоменклатураИХарактеристикаВЯчейках.Номенклатура
		|			И ПулЯчеек.Ячейка = НоменклатураИХарактеристикаВЯчейках.Ячейка
		|			И ПулЯчеек.Характеристика = НоменклатураИХарактеристикаВЯчейках.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураИХарактеристикаИСерияВЯчейках КАК НоменклатураИХарактеристикаИСерияВЯчейках
		|		ПО ПулЯчеек.Ячейка = НоменклатураИХарактеристикаИСерияВЯчейках.Ячейка
		|			И ПулЯчеек.Номенклатура = НоменклатураИХарактеристикаИСерияВЯчейках.Номенклатура
		|			И ПулЯчеек.Характеристика = НоменклатураИХарактеристикаИСерияВЯчейках.Характеристика
		|			И ПулЯчеек.Серия = НоменклатураИХарактеристикаИСерияВЯчейках.Серия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПересчетовЯчеек КАК СостоянияПересчетовЯчеек
		|		ПО ПулЯчеек.Ячейка = СостоянияПересчетовЯчеек.Ячейка
		|			И (СостоянияПересчетовЯчеек.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПересчетовЯчеек.ТребуетсяПересчет))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияПересчетовЯчеек.Состояние,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Серия,
		|	ПриоритетОбласти УБЫВ,
		|	ПриоритетСтратегии,
		|	ПулЯчеек.УровеньДоступности,
		|	ПорядокОбхода,
		|	Код
		|ИТОГИ ПО
		|	Распоряжение,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Серия,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНераспределенных.Распоряжение,
		|	ТаблицаНераспределенных.Номенклатура,
		|	ТаблицаНераспределенных.СкладскаяГруппаНоменклатуры,
		|	ТаблицаНераспределенных.Характеристика,
		|	ТаблицаНераспределенных.Назначение,
		|	ТаблицаНераспределенных.Серия,
		|	ТаблицаНераспределенных.Упаковка,
		|	ТаблицаНераспределенных.Количество
		|ИЗ
		|	ТаблицаНераспределенных КАК ТаблицаНераспределенных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОшибокТоварныеМеста КАК ТаблицаОшибокТоварныеМеста
		|		ПО ТаблицаНераспределенных.Номенклатура = ТаблицаОшибокТоварныеМеста.Номенклатура
		|			И ТаблицаНераспределенных.Распоряжение = ТаблицаОшибокТоварныеМеста.Распоряжение
		|ГДЕ
		|	ТаблицаОшибокТоварныеМеста.Номенклатура ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НоменклатураИХарактеристикаИСерияВЯчейках
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НоменклатураИХарактеристикаВЯчейках
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НоменклатураВЯчейках
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДругиеТоварыВЯчейках
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПулЯчеек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыВЯчейкахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаНоменклатурыТоварныеМеста";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаНераспределенных.Упаковка", "ТаблицаНераспределенных.Номенклатура"));
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ТоварыВЯчейкахОстатки.Упаковка", "ТоварыВЯчейкахОстатки.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ТоварыВЯчейкахОстатки.Упаковка", "ТоварыВЯчейкахОстатки.Номенклатура", Ложь));
			
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ТаблицаОшибок", СтруктураТаблиц.ТаблицаОшибок.Скопировать());
		Запрос.УстановитьПараметр("Склад",Склад);
		Запрос.УстановитьПараметр("Помещение",Помещение);
		
		СтруктураТаблиц.ТаблицаОшибок.Очистить();
		
		УстановитьПривилегированныйРежим(Истина);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		ВыборкаПоРаспоряжениям = МассивРезультатов[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаОшибок = МассивРезультатов[10].Выгрузить();
		
		Пока ВыборкаПоРаспоряжениям.Следующий() Цикл
			
			ВыборкаПоНоменклатуре =  ВыборкаПоРаспоряжениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				
				ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоХарактеристикам.Следующий() Цикл
					
					ВыборкаПоНазначению = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоНазначению.Следующий() Цикл
						
						ВыборкаПоСериям = ВыборкаПоНазначению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаПоСериям.Следующий() Цикл 
								
							ВыборкаПоУпаковкам = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Пока ВыборкаПоУпаковкам.Следующий() Цикл 
								
								//детали
								ВыборкаПоЯчейкам = ВыборкаПоУпаковкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								
								
								КоличествоКОтбору = Неопределено;
								
								Пока ВыборкаПоЯчейкам.Следующий() Цикл
									
									Если КоличествоКОтбору = Неопределено Тогда
										
										КоличествоКОтбору = ВыборкаПоЯчейкам.Количество;
										
									КонецЕсли;
									
									//Если ячейка заполнена, значит в ней есть остаток в нужной упаковке, 
									//иначе таблица остатков не соединилась бы с таблицей номенклатуры
									Если ЗначениеЗаполнено(ВыборкаПоЯчейкам.Ячейка)
										И ВыборкаПоЯчейкам.СвободныйОстаток > 0 Тогда
										
										ОтборСтрокИзТаблицыРасходаИзЯчеек = Новый Структура("Ячейка,Номенклатура,Упаковка,Характеристика,Назначение,Серия");
										ЗаполнитьЗначенияСвойств(ОтборСтрокИзТаблицыРасходаИзЯчеек, ВыборкаПоЯчейкам);
										
										МассивНайденныхСтрок = СтруктураТаблиц.ТаблицаРасходаИзЯчеек.НайтиСтроки(ОтборСтрокИзТаблицыРасходаИзЯчеек);
										
										Если МассивНайденныхСтрок.Количество() = 0 Тогда
											СтрокаРасхода 						= СтруктураТаблиц.ТаблицаРасходаИзЯчеек.Добавить();
											ЗаполнитьЗначенияСвойств(СтрокаРасхода, ОтборСтрокИзТаблицыРасходаИзЯчеек);
											
											СтрокаРасхода.КоличествоУпаковок 	= ВыборкаПоЯчейкам.СвободныйОстаток;
											
											РабочийУчасток = СтруктураТаблиц.МассивУчастков.Найти(ВыборкаПоЯчейкам.РабочийУчасток);
											Если РабочийУчасток = Неопределено Тогда
												СтруктураТаблиц.МассивУчастков.Добавить(ВыборкаПоЯчейкам.РабочийУчасток);
											КонецЕсли;
										Иначе
											СтрокаРасхода = МассивНайденныхСтрок[0];
										КонецЕсли;
										
										КоличествоИзЯчейки = Мин(КоличествоКОтбору, СтрокаРасхода.КоличествоУпаковок);
										
										Если КоличествоИзЯчейки > 0 Тогда
											СтрокаРезультата = СтруктураТаблиц.ТаблицаРезультатов.Добавить();
											ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаПоЯчейкам);
											СтрокаРезультата.КоличествоУпаковок = КоличествоИзЯчейки;
											СтрокаРезультата.Количество         = КоличествоИзЯчейки / ВыборкаПоЯчейкам.КоличествоВКомплекте;
											СтрокаРезультата.ОбъемУпаковки		= ВыборкаПоЯчейкам.Объем;
											СтрокаРезультата.ВесУпаковки		= ВыборкаПоЯчейкам.Вес;
											
											СтрокаРезультата.КлючСвязиСТарой = СтруктураТаблиц.ТаблицаРезультатов.Количество();
											
											СтрокаРасхода.КоличествоУпаковок = СтрокаРасхода.КоличествоУпаковок - КоличествоИзЯчейки; 
											КоличествоКОтбору = КоличествоКОтбору - КоличествоИзЯчейки;
										КонецЕсли;						
										
									КонецЕсли;
									
									Если КоличествоКОтбору = 0 Тогда
										
										Прервать;
										
									КонецЕсли;
									
								КонецЦикла;
								
								Если КоличествоКОтбору <> 0 Тогда
									
									СтрокаОшибки = СтруктураТаблиц.ТаблицаОшибок.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоУпаковкам);
									СтрокаОшибки.Количество = КоличествоКОтбору / ВыборкаПоУпаковкам.КоличествоВКомплекте;
									СтрокаОшибки.КоличествоУпаковок = КоличествоКОтбору;
									
								КонецЕсли;	
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОшибок, СтруктураТаблиц.ТаблицаОшибок);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнитьМногооборотнойТаройТаблицуОтбора(МенеджерВременныхТаблиц, СтруктураТаблиц, ОтбиратьПустуюТару)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРезультатов.Номенклатура,
	|	ТаблицаРезультатов.Распоряжение,
	|	ТаблицаРезультатов.Упаковка,
	|	ТаблицаРезультатов.Характеристика,
	|	ТаблицаРезультатов.Назначение,
	|	ТаблицаРезультатов.Серия,
	|	ТаблицаРезультатов.Ячейка,
	|	ТаблицаРезультатов.КоличествоУпаковок,
	|	ТаблицаРезультатов.Количество,
	|	ТаблицаРезультатов.ВесУпаковки,
	|	ТаблицаРезультатов.ОбъемУпаковки,
	|	ТаблицаРезультатов.ПорядокОбхода,
	|	ТаблицаРезультатов.Код,
	|	ТаблицаРезультатов.РабочийУчасток,
	|	ТаблицаРезультатов.КлючСвязиСТарой
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ТараНоменклатура КАК Номенклатура,
	|	ВложенныйЗапрос.ТараХарактеристика КАК Характеристика,
	|	ВложенныйЗапрос.Ячейка КАК Ячейка,
	|	ВложенныйЗапрос.ПорядокОбхода КАК ПорядокОбхода,
	|	ВложенныйЗапрос.Код КАК Код,
	|	ВложенныйЗапрос.РабочийУчасток КАК РабочийУчасток,
	|	ВложенныйЗапрос.Распоряжение КАК Распоряжение,
	|	СУММА(ВложенныйЗапрос.КоличествоТары) КАК Количество,
	|	СУММА(ВложенныйЗапрос.КоличествоТары) КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)  КАК Назначение,
	|	ВложенныйЗапрос.УпаковкаПоставляетсяВТаре,
	|	ВложенныйЗапрос.КлючСвязиСТарой
	|ПОМЕСТИТЬ ОтобраннаяТара
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРезультатов.Распоряжение КАК Распоряжение,
	|		ТаблицаРезультатов.КоличествоУпаковок * ВариантыПереупаковки.Количество КАК КоличествоТары,
	|		ТаблицаРезультатов.Ячейка КАК Ячейка,
	|		ТаблицаРезультатов.ПорядокОбхода КАК ПорядокОбхода,
	|		ТаблицаРезультатов.Код КАК Код,
	|		ТаблицаРезультатов.РабочийУчасток КАК РабочийУчасток,
	|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара КАК ТараНоменклатура,
	|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара КАК ТараХарактеристика,
	|		Ложь КАК УпаковкаПоставляетсяВТаре,
	|		ТаблицаРезультатов.КлючСвязиСТарой КАК КлючСвязиСТарой
	|	ИЗ
	|		ТаблицаРезультатов КАК ТаблицаРезультатов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|			ПО ТаблицаРезультатов.Упаковка = ВариантыПереупаковки.Источник
	|	ГДЕ
	|		ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре
	|		И ВЫРАЗИТЬ(ТаблицаРезультатов.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|		И ТаблицаРезультатов.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРезультатов.Распоряжение,
	|		ТаблицаРезультатов.КоличествоУпаковок,
	|		ТаблицаРезультатов.Ячейка,
	|		ТаблицаРезультатов.ПорядокОбхода,
	|		ТаблицаРезультатов.Код,
	|		ТаблицаРезультатов.РабочийУчасток,
	|		ВЫРАЗИТЬ(ТаблицаРезультатов.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).НоменклатураМногооборотнаяТара,
	|		ВЫРАЗИТЬ(ТаблицаРезультатов.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ХарактеристикаМногооборотнаяТара,
	|		Истина,
	|		ТаблицаРезультатов.КлючСвязиСТарой КАК КлючСвязиСТарой
	|	ИЗ
	|		ТаблицаРезультатов КАК ТаблицаРезультатов
	|	ГДЕ
	|		ВЫРАЗИТЬ(ТаблицаРезультатов.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ПоставляетсяВМногооборотнойТаре
	|		И ВЫРАЗИТЬ(ТаблицаРезультатов.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Распоряжение,
	|	ВложенныйЗапрос.ТараНоменклатура,
	|	ВложенныйЗапрос.ТараХарактеристика,
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.ПорядокОбхода,
	|	ВложенныйЗапрос.Код,
	|	ВложенныйЗапрос.РабочийУчасток,
	|	ВложенныйЗапрос.УпаковкаПоставляетсяВТаре,
	|	ВложенныйЗапрос.КлючСвязиСТарой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобраннаяТара.Номенклатура,
	|	ОтобраннаяТара.Характеристика,
	|	ОтобраннаяТара.Назначение,
	|	ОтобраннаяТара.Ячейка,
	|	ОтобраннаяТара.ПорядокОбхода,
	|	ОтобраннаяТара.Код,
	|	ОтобраннаяТара.РабочийУчасток,
	|	ОтобраннаяТара.Распоряжение,
	|	ОтобраннаяТара.Количество,
	|	ОтобраннаяТара.КоличествоУпаковок,
	|	ОтобраннаяТара.УпаковкаПоставляетсяВТаре,
	|	ОтобраннаяТара.КлючСвязиСТарой,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(ТоварыВЯчейкахОстатки.КОтборуОстаток, 0) КАК СвободныйОстаток
	|ИЗ
	|	ОтобраннаяТара КАК ОтобраннаяТара
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				,
	|				(Ячейка, Номенклатура, Характеристика, Серия, Упаковка) В
	|					(ВЫБРАТЬ
	|						ОтобраннаяТара.Ячейка,
	|						ОтобраннаяТара.Номенклатура,
	|						ОтобраннаяТара.Характеристика,
	|						ОтобраннаяТара.Серия,
	|						ОтобраннаяТара.Упаковка
	|					ИЗ
	|						ОтобраннаяТара)) КАК ТоварыВЯчейкахОстатки
	|		ПО ОтобраннаяТара.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ОтобраннаяТара.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И ОтобраннаяТара.Упаковка = ТоварыВЯчейкахОстатки.Упаковка
	|			И ОтобраннаяТара.Серия = ТоварыВЯчейкахОстатки.Серия
	|			И ОтобраннаяТара.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
	|ГДЕ
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(ТоварыВЯчейкахОстатки.КОтборуОстаток, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	Если ОтбиратьПустуюТару Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)  КАК Назначение,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ВложенныйЗапрос.Распоряжение,
		|	МАКСИМУМ(ВложенныйЗапрос.ДатаОтгрузки) КАК ДатаОтгрузки,
		|	МАКСИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура КАК Справочник.Номенклатура).СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ТоварноеМесто
		|ПОМЕСТИТЬ ТаблицаНоменклатурыРасширенная
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|		ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|		ТаблицаНоменклатуры.Распоряжение КАК Распоряжение,
		|		ТаблицаНоменклатуры.ДатаОтгрузки КАК ДатаОтгрузки,
		|		ТаблицаНоменклатуры.Приоритет КАК Приоритет,
		|		ТаблицаНоменклатуры.Количество КАК Количество
		|	ИЗ
		|		ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|	ГДЕ
		|		ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтобраннаяТара.Номенклатура,
		|		ОтобраннаяТара.Характеристика,
		|		ОтобраннаяТара.Распоряжение,
		|		ДАТАВРЕМЯ(1, 1, 1),
		|		0,
		|		-ОтобраннаяТара.Количество
		|	ИЗ
		|		ОтобраннаяТара КАК ОтобраннаяТара) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Распоряжение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) > 0";	
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", СтруктураТаблиц.ТаблицаРезультатов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураТаблиц.ТаблицаРасходаИзЯчеек.Очистить();
	
	//Добавим возвратную тару из ячеек, из которых берем товары.
	//Т.к. может быть задание на отбор пустой тары, сохраним расход тары
	//в таблице расхода из ячеек
	
	ВыборкаПоТаре = РезультатыЗапроса[2].Выбрать();
	
	ОтборСтрок = Новый Структура("Ячейка,Номенклатура,Упаковка,Характеристика,Назначение,Серия");
	
	Пока ВыборкаПоТаре.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ВыборкаПоТаре);
		
		МассивНайденныхСтрок = СтруктураТаблиц.ТаблицаРасходаИзЯчеек.НайтиСтроки(ОтборСтрок);
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			СтрокаРасхода 						= СтруктураТаблиц.ТаблицаРасходаИзЯчеек.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасхода, ОтборСтрок);
			
			СтрокаРасхода.КоличествоУпаковок 	= ВыборкаПоТаре.СвободныйОстаток;
		Иначе
			СтрокаРасхода = МассивНайденныхСтрок[0];
		КонецЕсли;
		
		СтрокаРезультата = СтруктураТаблиц.ТаблицаРезультатов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаПоТаре);
		КоличествоКОтбору = СтрокаРезультата.КоличествоУпаковок;
		
		СтрокаРезультата.КоличествоУпаковок = Мин(СтрокаРасхода.КоличествоУпаковок, ВыборкаПоТаре.КоличествоУпаковок);
		СтрокаРезультата.Количество         = СтрокаРезультата.КоличествоУпаковок;
		
		СтрокаРасхода.КоличествоУпаковок = СтрокаРасхода.КоличествоУпаковок - СтрокаРезультата.КоличествоУпаковок; 
		
		Если СтруктураТаблиц.Свойство("ТаблицаРазмещения") 
			И ВыборкаПоТаре.УпаковкаПоставляетсяВТаре Тогда
			СтрокаРазмещения = СтруктураТаблиц.ТаблицаРазмещения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРазмещения, СтрокаРезультата);
		КонецЕсли;
		
		Если КоличествоКОтбору > СтрокаРезультата.КоличествоУпаковок Тогда
			
			СтрокаОшибки = СтруктураТаблиц.ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоТаре);
			СтрокаОшибки.Количество = КоличествоКОтбору - СтрокаРезультата.КоличествоУпаковок;				
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ОтбиратьПустуюТару Тогда
		ТаблицаНоменклатурыРасширенная = РезультатыЗапроса[3].Выбрать();
		ТаблицаНоменклатурыРасширенная.Следующий();
		
		//Если есть отбор пустой тары, то запустим для нее обычный алгоритм отбора
		Если ТаблицаНоменклатурыРасширенная.Количество > 0 Тогда 
			Возврат Истина;	
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

Функция СтруктураТаблицАлгоритмаРазмещенияТоваров()
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаРезультатов");
	СтруктураТаблиц.Вставить("ТаблицаОшибок");
	СтруктураТаблиц.Вставить("ТаблицаНаполненияЯчеек");
	СтруктураТаблиц.Вставить("ТаблицаРазмещенныхТоваров");
	Возврат СтруктураТаблиц;
	
КонецФункции

#КонецОбласти

#Область СозданиеСкладскихДокументов

#Область СозданиеРасходныхОрдеров

// Процедура объединяет товары из ордеров, у которых дата отгрузки меньше текущей даты
Процедура ОбъединитьОрдераПоТекущуюДату(Параметры, ТекущаяДата, ОформленныеОрдера)
	
	Запрос = Новый Запрос;  
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.Ссылка.Получатель В (&ПустойПолучатель)
	|			ТОГДА РасходныйОрдерНаТовары.Распоряжение
	|		ИНАЧЕ РасходныйОрдерНаТовары.Ссылка.Получатель
	|	КОНЕЦ КАК Получатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияИРеквизитыДоставки.РазбиватьРасходныеОрдераПоРаспоряжениям, ЛОЖЬ)
	|			ТОГДА РасходныйОрдерНаТовары.Распоряжение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК РаспоряжениеГруппировка,
	|	РасходныйОрдерНаТовары.Ссылка.Склад КАК Склад,
	|	РасходныйОрдерНаТовары.Ссылка.Помещение КАК Помещение,
	|	РасходныйОрдерНаТовары.Ссылка.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|		ПО РасходныйОрдерНаТовары.Распоряжение = СостоянияИРеквизитыДоставки.Распоряжение
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка.ДатаОтгрузки <= &ТекущаяДата
	|	И РасходныйОрдерНаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Подготовлено)
	|	И РасходныйОрдерНаТовары.Ссылка.Склад = &Склад
	|	И (НЕ &ПомещениеЗаполнено
	|			ИЛИ РасходныйОрдерНаТовары.Ссылка.Помещение = &Помещение)
	|	И РасходныйОрдерНаТовары.Ссылка.Получатель = &Получатель
	|	И РасходныйОрдерНаТовары.Ссылка.Проведен
	|	И (РасходныйОрдерНаТовары.Распоряжение В (&РаспоряженияНаОтгрузку)
	|			ИЛИ &ПоВсемРаспоряжениям)
	|	И (НЕ &ЗаданиеНаПеревозкуЗаполнено
	|			ИЛИ РасходныйОрдерНаТовары.Ссылка.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПеревозку,
	|	Получатель,
	|	РаспоряжениеГруппировка,
	|	Склад,
	|	Помещение,
	|	РасходныйОрдерНаТовары.Ссылка.ДатаОтгрузки УБЫВ";
	Запрос.УстановитьПараметр("Получатель",		             Параметры.Получатель);
	Запрос.УстановитьПараметр("Склад",		                 Параметры.Склад);
	Запрос.УстановитьПараметр("Помещение",		             Параметры.Помещение);
	Запрос.УстановитьПараметр("ПомещениеЗаполнено",		     ЗначениеЗаполнено(Параметры.Помещение));
	Запрос.УстановитьПараметр("ТекущаяДата",        	     ТекущаяДата);
	Запрос.УстановитьПараметр("РаспоряженияНаОтгрузку",		 Параметры.РаспоряженияНаОтгрузку);
	Запрос.УстановитьПараметр("ПоВсемРаспоряжениям",	     Параметры.РаспоряженияНаОтгрузку.Количество() = 0);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку",          Параметры.ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуЗаполнено", ЗначениеЗаполнено(Параметры.ЗаданиеНаПеревозку));
	Запрос.УстановитьПараметр("ПустойПолучатель",            ПустойПолучательОтправитель());
	      
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ЗаданиеНаПеревозку") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("РаспоряжениеГруппировка") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
						// определяем, в какой ордер будем все складывать
						// складываем все в самый старший по дате отгрузки ордер
						ТекущийОрдерОбъект = Неопределено;
						Если Выборка.Следующий() Тогда
							
							НачатьТранзакцию();
							Попытка
								БлокировкаДанных = Новый БлокировкаДанных;
								ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.РасходныйОрдерНаТовары");
								ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Выборка.Ссылка);
								ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
								БлокировкаДанных.Заблокировать();
								
								ТекущийОрдерОбъект = Выборка.Ссылка.ПолучитьОбъект();
								
								Если ТекущийОрдерОбъект <> Неопределено Тогда
									
									Пока Выборка.Следующий() Цикл
										
										БлокировкаДанных = Новый БлокировкаДанных;
										ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.РасходныйОрдерНаТовары");
										ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Выборка.Ссылка);
										ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
										БлокировкаДанных.Заблокировать();
										
										РасходныйОрдерОбъект  = Выборка.Ссылка.ПолучитьОбъект();
										
										ТоварыПоРаспоряжениям = РасходныйОрдерОбъект.ТоварыПоРаспоряжениям.Выгрузить();
										Для Каждого Строка Из ТоварыПоРаспоряжениям Цикл
											НоваяСтрока = ТекущийОрдерОбъект.ТоварыПоРаспоряжениям.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
										КонецЦикла;
										
										ОтгружаемыеТовары = РасходныйОрдерОбъект.ОтгружаемыеТовары.Выгрузить();
										Для Каждого Строка Из ОтгружаемыеТовары Цикл
											НоваяСтрока = ТекущийОрдерОбъект.ОтгружаемыеТовары.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
										КонецЦикла;
										
										РасходныйОрдерОбъект.Удалить();
										
									КонецЦикла;
									
									ТекущийОрдерОбъект.ДатаОтгрузки = ТекущаяДата;
									ТекущийОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);
									
									ОформленныеОрдераСтрока = ОформленныеОрдера.Добавить();
									ЗаполнитьЗначенияСвойств(ОформленныеОрдераСтрока, ТекущийОрдерОбъект);
									ОформленныеОрдераСтрока.РасходныйОрдер = ТекущийОрдерОбъект.Ссылка;
									ОформленныеОрдераСтрока.Действие = "Переоформлен";
									
								КонецЕсли;
								
								ЗафиксироватьТранзакцию();
							Исключение
								ОтменитьТранзакцию();
								ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								ВызватьИсключение;
							КонецПопытки;
						
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

// Если количество товаров к отгрузке уменьшилось по отношению к оформленным товарам,
// то на это количество будут уменьшены товары в ордере. 
Процедура УменьшитьКоличествоВОрдерах(ТоварыКСборке, ОформленныеОрдера, ОрдерЗаписан)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКСборке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКСборке.Период КАК Период,
	|	ТоварыКСборке.Получатель,
	|	ТоварыКСборке.Склад КАК Склад,
	|	ТоварыКСборке.Номенклатура КАК Номенклатура,
	|	ТоварыКСборке.Характеристика КАК Характеристика,
	|	ТоварыКСборке.Назначение КАК Назначение,
	|	ТоварыКСборке.Серия КАК Серия,
	|	ТоварыКСборке.Количество КАК Количество,
	|	ТоварыКСборке.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку,
	|	ТоварыКСборке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ПОМЕСТИТЬ ТоварыКСборке
	|ИЗ
	|	&ТоварыКСборке КАК ТоварыКСборке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки КАК НомерСтроки,
	|	ТоварыКСборке.Количество
	|ИЗ
	|	ТоварыКСборке КАК ТоварыКСборке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|		ПО (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура = ТоварыКСборке.Номенклатура)
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Характеристика = ТоварыКСборке.Характеристика)
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Назначение = ТоварыКСборке.Назначение)
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия = ТоварыКСборке.Серия)
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Склад = ТоварыКСборке.Склад)
	|			И (ВЫБОР
	|				КОГДА РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Получатель В (&ПустойПолучатель)
	|					ТОГДА РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
	|				ИНАЧЕ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Получатель
	|			КОНЕЦ = ТоварыКСборке.Получатель)
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = ТоварыКСборке.ДокументОтгрузки)
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ЗаданиеНаПеревозку = ТоварыКСборке.ЗаданиеНаПеревозку
	|				ИЛИ НЕ ТоварыКСборке.ОтгрузкаПоЗаданиюНаПеревозку)
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Подготовлено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки УБЫВ";
	
	Запрос.УстановитьПараметр("ТоварыКСборке",    ТоварыКСборке);
	Запрос.УстановитьПараметр("ПустойПолучатель", ПустойПолучательОтправитель());
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.РасходныйОрдерНаТовары");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			РасходныйОрдерНаТовары  = Выборка.Ссылка.ПолучитьОбъект();
			
			Товары = РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям;
			Пока Выборка.Следующий() Цикл
				СтрокаТовары = Товары[Выборка.НомерСтроки - 1];
				СтрокаТовары.Количество = СтрокаТовары.Количество - Выборка.Количество;
				Если СтрокаТовары.Количество = 0 Тогда 
					Товары.Удалить(Выборка.НомерСтроки - 1);  
				КонецЕсли;
			КонецЦикла;
			
			Если Товары.Количество() > 0 Тогда
				РасходныйОрдерНаТовары.Заполнить(Неопределено);
				РасходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Проведение);
				
				ОформленныеОрдераСтрока = ОформленныеОрдера.Добавить();
				ЗаполнитьЗначенияСвойств(ОформленныеОрдераСтрока, РасходныйОрдерНаТовары);
				ОформленныеОрдераСтрока.РасходныйОрдер = Выборка.Ссылка;
				ОформленныеОрдераСтрока.Действие = "Переоформлен";
			Иначе
				РасходныйОрдерНаТовары  = Выборка.Ссылка.ПолучитьОбъект();
				РасходныйОрдерНаТовары.Удалить();
				
				ОформленныеОрдераСтрока = ОформленныеОрдера.Добавить();
				ЗаполнитьЗначенияСвойств(ОформленныеОрдераСтрока, РасходныйОрдерНаТовары);
				ОформленныеОрдераСтрока.РасходныйОрдер = Выборка.Ссылка;
				ОформленныеОрдераСтрока.Действие = "Удален";
			КонецЕсли;
			
			ОрдерЗаписан = Истина;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьТоварыДляОформленияРасходныхОрдеров(Параметры,
	НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку, ОформлятьСначалаНакладные)
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОстатков.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
		|	ТаблицаОстатков.Характеристика КАК Характеристика,
		|	ТаблицаОстатков.Назначение КАК Назначение,
		|	ТаблицаОстатков.Серия КАК Серия,
		|	ТаблицаОстатков.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|			ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ТаблицаОборотов.КОтгрузкеПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДопустимоеОтклонение
		|ПОМЕСТИТЬ ВТТоварыКОформлениюРасходныхОрдеров
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|					ИЛИ &ПоВсемРаспоряжениям)
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТаблицаОстатков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|				,
		|				,
		|				,
		|				Получатель = &Получатель
		|					И Склад = &Склад
		|					И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|						ИЛИ &ПоВсемРаспоряжениям)
		|					И НЕ ДокументОтгрузки В
		|							(ВЫБРАТЬ
		|								ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|							ИЗ
		|								ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТаблицаОборотов
		|		ПО ТаблицаОстатков.ДокументОтгрузки = ТаблицаОборотов.ДокументОтгрузки
		|			И ТаблицаОстатков.Номенклатура = ТаблицаОборотов.Номенклатура
		|			И ТаблицаОстатков.Характеристика = ТаблицаОборотов.Характеристика
		|			И ТаблицаОстатков.Назначение = ТаблицаОборотов.Назначение
		|			И ТаблицаОстатков.Серия = ТаблицаОборотов.Серия
		|			И ТаблицаОстатков.Склад = ТаблицаОборотов.Склад
		|ГДЕ
		|	ТаблицаОстатков.КОтгрузкеОстаток > ВЫБОР
		|			КОГДА ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|				ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ТаблицаОборотов.КОтгрузкеПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ";
		
		ТекстЗапроса = ТекстЗапроса + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе
		
		ТекстЗапроса = "";
		
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Если Не НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку Тогда 
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыКОтгрузке", "ДокументОтгрузки", МенеджерВТ);
			
		ТекстЗапроса = ТекстЗапроса +
		// ТоварыКОтгрузкеПриход/ТоварыКОформлениюРасход
		"ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка) КАК ЗаданиеНаПеревозку,
		|	ТоварыКОтгрузкеОбороты.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель)
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель
		|	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение КАК Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
		|	СУММА(ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеРасход < 0
		|			ТОГДА -ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &ОформлятьСначалаНакладные
		|					ТОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход - ТоварыКОтгрузкеОбороты.КОформлениюПриход
		|				ИНАЧЕ ТоварыКОтгрузкеОбороты.КОтгрузкеПриход
		|			КОНЕЦ
		|	КОНЕЦ) КАК Количество,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтгрузкаПоЗаданиюНаПеревозку
		|	
		|ПОМЕСТИТЬ ТоварыКОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			День,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|					ИЛИ &ПоВсемРаспоряжениям)
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО (СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузкеОбороты.Склад)
		|			И (СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузкеОбороты.ДокументОтгрузки)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеРасход < 0
		|				ТОГДА -ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ОформлятьСначалаНакладные
		|						ТОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход - ТоварыКОтгрузкеОбороты.КОформлениюПриход
		|					ИНАЧЕ ТоварыКОтгрузкеОбороты.КОтгрузкеПриход
		|				КОНЕЦ
		|		КОНЕЦ <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель)
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|						И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТоварыКОтгрузкеОбороты.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка),
		|	ТоварыКОтгрузкеОбороты.Период,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель)
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель
		|	КОНЕЦ,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	СУММА(ТоварыКОтгрузкеОбороты.КОформлениюРасход),
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			День,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|					ИЛИ &ПоВсемРаспоряжениям)
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО (СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузкеОбороты.Склад)
		|			И (СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузкеОбороты.ДокументОтгрузки)
		|ГДЕ
		|	&ОформлятьСначалаНакладные
		|	И ТоварыКОтгрузкеОбороты.КОформлениюРасход <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель)
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|						И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТоварыКОтгрузкеОбороты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	ТоварыКОтгрузке.Период КАК Период,
		|	ТоварыКОтгрузке.Получатель КАК Получатель,
		|	ТоварыКОтгрузке.Склад КАК Склад,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.Назначение КАК Назначение,
		|	ТоварыКОтгрузке.Серия КАК Серия,
		|	ТоварыКОтгрузке.Количество,
		|	ТоварыКОтгрузке.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку,
		|	&ДопустимоеОтклонениеЗначение КАК ДопустимоеОтклонение
		|ИЗ
		|	ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|ГДЕ &СоединениеСВТДопустимыхОтклонений
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	ЗаданиеНаПеревозку,
		|	ДокументОтгрузки,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// КОтгрузкеРасход
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель)
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель
		|	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение КАК Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
		|	ТоварыКОтгрузкеОбороты.КОтгрузкеРасход КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			День,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|					ИЛИ &ПоВсемРаспоряжениям)
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОбороты
		|ГДЕ
		|	ТоварыКОтгрузкеОбороты.КОтгрузкеРасход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// СобираетсяПриход + СобраноПриход
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель)
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель
		|	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение КАК Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
		|	ТоварыКОтгрузкеОбороты.СобираетсяПриход + ТоварыКОтгрузкеОбороты.СобраноПриход КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			День,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|					ИЛИ &ПоВсемРаспоряжениям)
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОбороты
		|ГДЕ
		|	ТоварыКОтгрузкеОбороты.СобираетсяПриход + ТоварыКОтгрузкеОбороты.СобраноПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// КСборкеПриход
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель)
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель
		|	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение КАК Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
		|	ТоварыКОтгрузкеОбороты.КСборкеПриход КАК Количество,
		|	ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка) КАК ЗаданиеНаПеревозку,
		|	ЛОЖЬ КАК ОтгрузкаПоЗаданиюНаПеревозку
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			День,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|					ИЛИ &ПоВсемРаспоряжениям)
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОбороты
		|ГДЕ
		|	ТоварыКОтгрузкеОбороты.КСборкеПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Дельта
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОстатки.Получатель В (&ПустойПолучатель)
		|			ТОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|		ИНАЧЕ ТоварыКОтгрузкеОстатки.Получатель
		|	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия,
		|	ВЫБОР
		|		КОГДА &ОформлятьСначалаНакладные
		|			ТОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.КОформлениюОстаток 
		|					- ТоварыКОтгрузкеОстатки.СобираетсяОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток 
		|					- ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|		ИНАЧЕ ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.СобираетсяОстаток
		|				- ТоварыКОтгрузкеОстатки.СобраноОстаток - ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|					ИЛИ &ПоВсемРаспоряжениям)
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОформлятьСначалаНакладные
		|				ТОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.КОформлениюОстаток
		|						- ТоварыКОтгрузкеОстатки.СобираетсяОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток
		|						- ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|			ИНАЧЕ ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.СобираетсяОстаток
		|					- ТоварыКОтгрузкеОстатки.СобраноОстаток - ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|		КОНЕЦ <> 0";
		
	Иначе
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Неопределено,
			"Документ.ЗаданиеНаПеревозку", МенеджерВТ);
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыКОтгрузке", "ДокументОтгрузки", МенеджерВТ);
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НакладнаяТовары.Ссылка.РеализацияПоЗаказам
		|			ТОГДА НакладнаяТовары.ЗаказКлиента
		|		ИНАЧЕ НакладнаяТовары.Ссылка
		|	КОНЕЦ КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ЗаблокированнныеДокументыОтгрузкиПоЗаданиюНаперевозку
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаблокированоЗаданиеНаПеревозку КАК ВтЗаданияНаПеревозку
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ВтЗаданияНаПеревозку.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК НакладнаяТовары
		|		ПО (НакладнаяТовары.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НакладнаяТовары.Ссылка.ПеремещениеПоЗаказам
		|			ТОГДА НакладнаяТовары.ЗаказНаПеремещение
		|		ИНАЧЕ НакладнаяТовары.Ссылка
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаблокированоЗаданиеНаПеревозку КАК ВтЗаданияНаПеревозку
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ВтЗаданияНаПеревозку.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК НакладнаяТовары
		|		ПО (НакладнаяТовары.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ДокументОтгрузки КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ЗаблокированнныеДокументыОтгрузки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки
		|	ИЗ
		|		ЗаблокированнныеДокументыОтгрузкиПоЗаданиюНаперевозку КАК ДокументыОтгрузки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|	ИЗ
		|		ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		// ТоварыКОтгрузкеПриход/ТоварыКОформлениюРасход
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ) КАК Период,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузке.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузке.Получатель 
		| 	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузке.Склад КАК Склад,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.Назначение КАК Назначение,
		|	ТоварыКОтгрузке.Серия КАК Серия,
		|	СУММА(ВЫБОР
		|		КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ТоварыКОтгрузке.КОтгрузке < 0
		|			ТОГДА -ТоварыКОтгрузке.КОтгрузке
		|		КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ВЫБОР
		|				КОГДА &ОформлятьСначалаНакладные
		|					ТОГДА ТоварыКОтгрузке.КОтгрузке - ТоварыКОтгрузке.КОформлению
		|				ИНАЧЕ ТоварыКОтгрузке.КОтгрузке
		|			КОНЕЦ
		|		ИНАЧЕ 0 
		|	КОНЕЦ) КАК КоличествоКотгрузке,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтгрузкаПоЗаданиюНаПеревозку
		|ПОМЕСТИТЬ ТоварыКотгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузке.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузке.ДокументОтгрузки
		|ГДЕ
		|	ТоварыКОтгрузке.Получатель = &Получатель
		|	И ТоварыКОтгрузке.Склад = &Склад
		|	И (ТоварыКОтгрузке.ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|		ИЛИ &ПоВсемРаспоряжениям)
		|	И НЕ ТоварыКОтгрузке.ДокументОтгрузки В
		|		(ВЫБРАТЬ
		|			ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|		ИЗ
		|			ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)
		|	И ВЫБОР
		|		КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ТоварыКОтгрузке.КОтгрузке < 0
		|			ТОГДА -ТоварыКОтгрузке.КОтгрузке
		|		КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ВЫБОР
		|				КОГДА &ОформлятьСначалаНакладные
		|					ТОГДА ТоварыКОтгрузке.КОтгрузке - ТоварыКОтгрузке.КОформлению
		|				ИНАЧЕ ТоварыКОтгрузке.КОтгрузке
		|			КОНЕЦ
		|		ИНАЧЕ 0 
		|	КОНЕЦ <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.Номенклатура,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузке.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузке.Получатель 
		| 	КОНЕЦ,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.ДокументОтгрузки,
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Склад,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Период,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель 
		| 	КОНЕЦ,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	СУММА(ТоварыКОтгрузкеОбороты.КОформлениюРасход),
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			День,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И (ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|					ИЛИ &ПоВсемРаспоряжениям)
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТоварыКОтгрузкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузкеОбороты.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|ГДЕ
		|	&ОформлятьСначалаНакладные
		|	И ТоварыКОтгрузкеОбороты.КОформлениюРасход <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузкеОбороты.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузкеОбороты.Получатель 
		| 	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТоварыКОтгрузкеОбороты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТоварыКДоставке.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)) КАК ЗаданиеНаПеревозку,
		|	ВЫБОР
		|		КОГДА ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку И ТоварыКДоставке.ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|			ТОГДА ТоварыКДоставке.ЗаданиеНаПеревозку.ДатаВремяРейсаПланС
		|		ИНАЧЕ ТоварыКотгрузке.Период
		|	КОНЕЦ КАК Период,
		|	ТоварыКотгрузке.Получатель КАК Получатель,
		|	ТоварыКотгрузке.Склад КАК Склад,
		|	ТоварыКотгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКотгрузке.Характеристика КАК Характеристика,
		|	ТоварыКотгрузке.Назначение КАК Назначение,
		|	ТоварыКотгрузке.Серия КАК Серия,
		|	СУММА(ТоварыКотгрузке.КоличествоКотгрузке) КАК КоличествоКотгрузке,
		|	ТоварыКДоставке.Количество КАК КоличествоКДоставке,
		|	ТоварыКотгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|		 И ЕСТЬNULL(ТоварыКДоставке.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|											  КАК ОтгрузкаПоЗаданиюНаПеревозку,
		|	ЕСТЬNULL(ТоварыКДоставке.ВсеТовары, Ложь) КАК ВсеТовары
		|ПОМЕСТИТЬ ТоварыКДоставке
		|ИЗ
		|	ТоварыКотгрузке КАК ТоварыКотгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
		|		ПО ТоварыКотгрузке.ДокументОтгрузки = ТоварыКДоставке.Распоряжение
		|			И ТоварыКотгрузке.Склад = ТоварыКДоставке.Склад
		|			И (ТоварыКотгрузке.Номенклатура = ТоварыКДоставке.Номенклатура
		|					И ТоварыКотгрузке.Характеристика = ТоварыКДоставке.Характеристика
		|					И ТоварыКотгрузке.Назначение = ТоварыКДоставке.Назначение
		|					И ТоварыКотгрузке.Серия = ТоварыКДоставке.Серия
		|				ИЛИ ТоварыКДоставке.ВсеТовары)
		|			И (((ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен)
		|			И (ТоварыКДоставке.ЗаданиеНаПеревозку.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется)))
		|				ИЛИ (ТоварыКДоставке.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)))
		|			И (ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку)
		|			И (НЕ &ЗаданиеНаПеревозкуЗаполнено
		|				ИЛИ ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
		|ГДЕ
		|	НЕ(ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|				И ТоварыКДоставке.ЗаданиеНаПеревозку ЕСТЬ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку И ТоварыКДоставке.ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|			ТОГДА ТоварыКДоставке.ЗаданиеНаПеревозку.ДатаВремяРейсаПланС
		|		ИНАЧЕ ТоварыКотгрузке.Период
		|	КОНЕЦ,
		|	ТоварыКотгрузке.ДокументОтгрузки,
		|	ЕСТЬNULL(ТоварыКДоставке.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)),
		|	ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыКотгрузке.Склад,
		|	ЕСТЬNULL(ТоварыКДоставке.ВсеТовары, Ложь),
		|	ТоварыКДоставке.Количество,
		|	ТоварыКотгрузке.Номенклатура,
		|	ТоварыКотгрузке.Серия,
		|	ТоварыКотгрузке.Получатель,
		|	ТоварыКотгрузке.Назначение,
		|	ТоварыКотгрузке.Характеристика,
		|	ВЫБОР
		|		КОГДА НЕ ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|				ИЛИ ТоварыКДоставке.ВсеТовары
		|			ТОГДА ТоварыКотгрузке.КоличествоКотгрузке
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТоварыКотгрузке.КоличествоКотгрузке >= ТоварыКДоставке.Количество
		|					ТОГДА ТоварыКДоставке.Количество
		|				ИНАЧЕ ТоварыКотгрузке.КоличествоКотгрузке
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|		 И ЕСТЬNULL(ТоварыКДоставке.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКДоставке.ЗаданиеНаПеревозку,
		|	ТоварыКДоставке.Период,
		|	ТоварыКДоставке.Получатель КАК Получатель,
		|	ТоварыКДоставке.Склад,
		|	ТоварыКДоставке.Номенклатура КАК Номенклатура,
		|	ТоварыКДоставке.Характеристика КАК Характеристика,
		|	ТоварыКДоставке.Назначение КАК Назначение,
		|	ТоварыКДоставке.Серия КАК Серия,
		|	ТоварыКДоставке.КоличествоКотгрузке КАК КоличествоКотгрузке,
		|	ТоварыКДоставке.КоличествоКДоставке КАК КоличествоКДоставке,
		|	ТоварыКДоставке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКДоставке.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыКДоставке.ВсеТовары КАК ВсеТовары
		|ИЗ
		|	ТоварыКДоставке КАК ТоварыКДоставке
		|ИТОГИ ПО
		|	ОтгрузкаПоЗаданиюНаПеревозку,
		|	Получатель,
		|	ДокументОтгрузки,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Серия,
		|	КоличествоКотгрузке,
		|	ЗаданиеНаПеревозку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыКотгрузке";
		
	КонецЕсли;
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
		УсловиеДопустимоеОтклонение = "(ДокументОтгрузки, Номенклатура, Характеристика, Назначение, Серия, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументОтгрузки,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Назначение,
		|					Таблица.Серия,
		|					Таблица.Склад
		|				ИЗ
		|					ВТТоварыКОформлениюРасходныхОрдеров КАК Таблица)";
		СоединениеСВТДопустимыхОтклонений = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварыКОформлениюРасходныхОрдеров КАК ВТТоварыКОформлениюРасходныхОрдеров
		|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ВТТоварыКОформлениюРасходныхОрдеров.ДокументОтгрузки
		|			И ТоварыКОтгрузке.Номенклатура = ВТТоварыКОформлениюРасходныхОрдеров.Номенклатура
		|			И ТоварыКОтгрузке.Характеристика = ВТТоварыКОформлениюРасходныхОрдеров.Характеристика
		|			И ТоварыКОтгрузке.Назначение = ВТТоварыКОформлениюРасходныхОрдеров.Назначение
		|			И ТоварыКОтгрузке.Серия = ВТТоварыКОформлениюРасходныхОрдеров.Серия";
		
		ДопустимоеОтклонениеЗначение = "ВТТоварыКОформлениюРасходныхОрдеров.ДопустимоеОтклонение";
	Иначе
		УсловиеДопустимоеОтклонение = "Истина";
		СоединениеСВТДопустимыхОтклонений = "";
		ДопустимоеОтклонениеЗначение = 0;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеДопустимоеОтклонение", УсловиеДопустимоеОтклонение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ГДЕ &СоединениеСВТДопустимыхОтклонений", СоединениеСВТДопустимыхОтклонений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопустимоеОтклонениеЗначение", ДопустимоеОтклонениеЗначение);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Получатель",  Параметры.Получатель);
	Запрос.УстановитьПараметр("Склад",       Параметры.Склад);  
	Запрос.УстановитьПараметр("ОформлятьСначалаНакладные", ОформлятьСначалаНакладные); 
	Запрос.УстановитьПараметр("РаспоряженияНаОтгрузку", Параметры.РаспоряженияНаОтгрузку);
	Запрос.УстановитьПараметр("ПоВсемРаспоряжениям", Параметры.РаспоряженияНаОтгрузку.Количество()=0);
	Запрос.УстановитьПараметр("НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку",
		НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку",          Параметры.ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуЗаполнено", ЗначениеЗаполнено(Параметры.ЗаданиеНаПеревозку));
	Запрос.УстановитьПараметр("ПустойПолучатель",            ПустойПолучательОтправитель());
	Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	Если НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку Тогда
		
		ДеревоТоварыКОтгрузке = МассивРезультатов[МассивРезультатов.Количество()-2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам); 
		
		Для Каждого УровеньОтгрузкаПоЗаданиюНаПеревозку Из ДеревоТоварыКОтгрузке.Строки Цикл
			Если Не УровеньОтгрузкаПоЗаданиюНаПеревозку.ОтгрузкаПоЗаданиюНаПеревозку Тогда
				Продолжить;
			КонецЕсли;  
			Для Каждого УровеньПолучатель Из УровеньОтгрузкаПоЗаданиюНаПеревозку.Строки Цикл
				Для Каждого УровеньДокументОтгрузки Из УровеньПолучатель.Строки Цикл        
					Для Каждого УровеньНоменклатура Из УровеньДокументОтгрузки.Строки Цикл
						Для Каждого УровеньХарактеристика Из УровеньНоменклатура.Строки  Цикл
							Для Каждого УровеньНазначение Из УровеньХарактеристика.Строки Цикл
								Для Каждого УровеньСерия Из УровеньНазначение.Строки Цикл
									КоличествоКДоставкеПоЗаданиюНаПеревозку = Новый Соответствие();
									Для Каждого УровеньКоличествоКотгрузке Из УровеньСерия.Строки Цикл 
										
										КоличествоКОтгрузке = УровеньКоличествоКотгрузке.КоличествоКОтгрузке;
										
										Для Каждого УровеньЗаданиеНаПеревозку Из УровеньКоличествоКотгрузке.Строки Цикл
											
											СтрокиТаблицыКУдалению = Новый Массив;
											Для Каждого Строка Из УровеньЗаданиеНаПеревозку.Строки Цикл
												
												Если КоличествоКОтгрузке = 0 Тогда
													СтрокиТаблицыКУдалению.Добавить(Строка);
													Продолжить;
												КонецЕсли;  
												
												Если Строка.ВсеТовары Тогда
													КоличествоКДоставке = КоличествоКОтгрузке;
												Иначе
													
													КоличествоКДоставкеИзрасходовано = КоличествоКДоставкеПоЗаданиюНаПеревозку.Получить(Строка.ЗаданиеНаПеревозку);
													КоличествоКДоставкеИзрасходовано = ?(КоличествоКДоставкеИзрасходовано = Неопределено,0,КоличествоКДоставкеИзрасходовано);
													КоличествоКДоставке = Строка.КоличествоКДоставке - КоличествоКДоставкеИзрасходовано;
													КоличествоКДоставке = Мин(КоличествоКОтгрузке,КоличествоКДоставке);
													Если КоличествоКДоставке > 0 Тогда
														КоличествоКДоставкеПоЗаданиюНаПеревозку.Вставить(Строка.ЗаданиеНаПеревозку, КоличествоКДоставке+КоличествоКДоставкеИзрасходовано);
													Иначе
														СтрокиТаблицыКУдалению.Добавить(Строка);
														Продолжить;
													КонецЕсли
												КонецЕсли;
												
												Строка.КоличествоКОтгрузке = КоличествоКДоставке;
												КоличествоКОтгрузке = КоличествоКОтгрузке - КоличествоКДоставке;
												
											КонецЦикла;
											
											Для Каждого СтрокаКУдалению Из СтрокиТаблицыКУдалению Цикл
												УровеньКоличествоКотгрузке.Строки.Удалить(СтрокаКУдалению);
											КонецЦикла;
											
										КонецЦикла;
										
									КонецЦикла; 
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	ТоварыКОтгрузке.Период КАК Период,
		|	ТоварыКОтгрузке.Получатель КАК Получатель,
		|	ТоварыКОтгрузке.Склад КАК Склад,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.Назначение КАК Назначение,
		|	ТоварыКОтгрузке.Серия КАК Серия,
		|	ТоварыКОтгрузке.КоличествоКОтгрузке КАК Количество,
		|	ТоварыКОтгрузке.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку
		|ПОМЕСТИТЬ ТоварыКОтгрузке
		|ИЗ
		|	&ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ) КАК Период,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузке.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузке.Получатель 
		| 	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Серия,
		|	СУММА(ТоварыКОтгрузке.КОтгрузке) КАК Количество
		|ПОМЕСТИТЬ ТоварыКОтгрузкеРасход
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаблокированнныеДокументыОтгрузки КАК ЗаблокированнныеДокументыОтгрузки
		|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ЗаблокированнныеДокументыОтгрузки.ДокументОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузке.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузке.ДокументОтгрузки

		|ГДЕ
		|	ТоварыКОтгрузке.Получатель = &Получатель
		|	И ТоварыКОтгрузке.Склад = &Склад
		|	И (ТоварыКОтгрузке.ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|			ИЛИ &ПоВсемРаспоряжениям)
		|	И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ТоварыКОтгрузке.КОтгрузке > 0
		|	И (НЕ &ЗаданиеНаПеревозкуЗаполнено
		|			ИЛИ ТоварыКОтгрузке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
		|	И ЗаблокированнныеДокументыОтгрузки.ДокументОтгрузки ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТоварыКОтгрузке.ДокументОтгрузки,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузке.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузке.Получатель 
		| 	КОНЕЦ,
		|	ТоварыКОтгрузке.Склад,
		|	НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ) КАК Период,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузке.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузке.Получатель 
		| 	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Серия,
		|	СУММА(ТоварыКОтгрузке.Собирается + ТоварыКОтгрузке.Собрано) КАК Количество
		|ПОМЕСТИТЬ ТоварыСобираетсяСобрано
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаблокированнныеДокументыОтгрузки КАК ЗаблокированнныеДокументыОтгрузки
		|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ЗаблокированнныеДокументыОтгрузки.ДокументОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузке.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузке.ДокументОтгрузки

		|ГДЕ
		|	ТоварыКОтгрузке.Получатель = &Получатель
		|	И ТоварыКОтгрузке.Склад = &Склад
		|	И (ТоварыКОтгрузке.ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|			ИЛИ &ПоВсемРаспоряжениям)
		|	И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ТоварыКОтгрузке.Собирается + ТоварыКОтгрузке.Собрано > 0
		|	И (НЕ &ЗаданиеНаПеревозкуЗаполнено
		|			ИЛИ ТоварыКОтгрузке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
		|	И ЗаблокированнныеДокументыОтгрузки.ДокументОтгрузки ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТоварыКОтгрузке.ДокументОтгрузки,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузке.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузке.Получатель 
		| 	КОНЕЦ,
		|	ТоварыКОтгрузке.Склад,
		|	НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ) КАК Период,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузке.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузке.Получатель 
		| 	КОНЕЦ КАК Получатель,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Серия,
		|	СУММА(ТоварыКОтгрузке.КСборке) КАК Количество
		|ПОМЕСТИТЬ ТоварыКСборке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаблокированнныеДокументыОтгрузки КАК ЗаблокированнныеДокументыОтгрузки
		|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ЗаблокированнныеДокументыОтгрузки.ДокументОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузке.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузке.ДокументОтгрузки
		|ГДЕ
		|	ТоварыКОтгрузке.Получатель = &Получатель
		|	И ТоварыКОтгрузке.Склад = &Склад
		|	И (ТоварыКОтгрузке.ДокументОтгрузки В (&РаспоряженияНаОтгрузку)
		|			ИЛИ &ПоВсемРаспоряжениям)
		|	И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ТоварыКОтгрузке.КСборке > 0
		|	И (НЕ &ЗаданиеНаПеревозкуЗаполнено
		|			ИЛИ ТоварыКОтгрузке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
		|	И ЗаблокированнныеДокументыОтгрузки.ДокументОтгрузки ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТоварыКОтгрузке.ДокументОтгрузки,
		|	ВЫБОР 
		|		КОГДА ТоварыКОтгрузке.Получатель В (&ПустойПолучатель) 
		|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки 
		|		ИНАЧЕ ТоварыКОтгрузке.Получатель 
		| 	КОНЕЦ,
		|	ТоварыКОтгрузке.Склад,
		|	НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	ТоварыКОтгрузке.Период КАК Период,
		|	ТоварыКОтгрузке.Получатель КАК Получатель,
		|	ТоварыКОтгрузке.Склад КАК Склад,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.Назначение КАК Назначение,
		|	ТоварыКОтгрузке.Серия КАК Серия,
		|	ТоварыКОтгрузке.Количество,
		|	ТоварыКОтгрузке.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку,
		|	&ДопустимоеОтклонениеЗначение КАК ДопустимоеОтклонение
		|ИЗ
		|	ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|ГДЕ &СоединениеСВТДопустимыхОтклонений
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	ЗаданиеНаПеревозку,
		|	ДокументОтгрузки,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеРасход.ОтгрузкаПоЗаданиюНаПеревозку
		|			ТОГДА ТоварыКОтгрузкеРасход.ЗаданиеНаПеревозку
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|	КОНЕЦ КАК ЗаданиеНаПеревозку,
		|	ТоварыКОтгрузкеРасход.ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыКОтгрузкеРасход.ДокументОтгрузки,
		|	ТоварыКОтгрузкеРасход.Период КАК Период,
		|	ТоварыКОтгрузкеРасход.Получатель,
		|	ТоварыКОтгрузкеРасход.Склад,
		|	ТоварыКОтгрузкеРасход.Номенклатура,
		|	ТоварыКОтгрузкеРасход.Характеристика,
		|	ТоварыКОтгрузкеРасход.Назначение,
		|	ТоварыКОтгрузкеРасход.Серия,
		|	ТоварыКОтгрузкеРасход.Количество
		|ИЗ
		|	ТоварыКОтгрузкеРасход КАК ТоварыКОтгрузкеРасход
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТоварыСобираетсяСобрано.ОтгрузкаПоЗаданиюНаПеревозку
		|			ТОГДА ТоварыСобираетсяСобрано.ЗаданиеНаПеревозку
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|	КОНЕЦ КАК ЗаданиеНаПеревозку,
		|	ТоварыСобираетсяСобрано.ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыСобираетсяСобрано.ДокументОтгрузки,
		|	ТоварыСобираетсяСобрано.Период КАК Период,
		|	ТоварыСобираетсяСобрано.Получатель,
		|	ТоварыСобираетсяСобрано.Склад,
		|	ТоварыСобираетсяСобрано.Номенклатура,
		|	ТоварыСобираетсяСобрано.Характеристика,
		|	ТоварыСобираетсяСобрано.Назначение,
		|	ТоварыСобираетсяСобрано.Серия,
		|	ТоварыСобираетсяСобрано.Количество
		|ИЗ
		|	ТоварыСобираетсяСобрано КАК ТоварыСобираетсяСобрано
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТоварыКСборке.ОтгрузкаПоЗаданиюНаПеревозку
		|			ТОГДА ТоварыКСборке.ЗаданиеНаПеревозку
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|	КОНЕЦ КАК ЗаданиеНаПеревозку,
		|	ТоварыКСборке.ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыКСборке.ДокументОтгрузки,
		|	ТоварыКСборке.Период КАК Период,
		|	ТоварыКСборке.Получатель,
		|	ТоварыКСборке.Склад,
		|	ТоварыКСборке.Номенклатура,
		|	ТоварыКСборке.Характеристика,
		|	ТоварыКСборке.Назначение,
		|	ТоварыКСборке.Серия,
		|	ТоварыКСборке.Количество
		|ИЗ
		|	ТоварыКСборке КАК ТоварыКСборке
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|			ТОГДА ТоварыКОтгрузке.ЗаданиеНаПеревозку
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|	КОНЕЦ КАК ЗаданиеНаПеревозку,
		|	ТоварыКОтгрузке.Получатель КАК Получатель,
		|	ТоварыКОтгрузке.Склад КАК Склад,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.Назначение КАК Назначение,
		|	ТоварыКОтгрузке.Серия КАК Серия,
		|	СУММА(ТоварыКОтгрузке.Количество) КАК Количество,
		|	ТоварыКОтгрузке.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|		ТоварыКОтгрузке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|		ТоварыКОтгрузке.Получатель КАК Получатель,
		|		ТоварыКОтгрузке.Склад КАК Склад,
		|		ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|		ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|		ТоварыКОтгрузке.Назначение КАК Назначение,
		|		ТоварыКОтгрузке.Серия КАК Серия,
		|		ТоварыКОтгрузке.Количество КАК Количество,
		|		ТоварыКОтгрузке.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку
		|	ИЗ
		|		ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКОтгрузкеРасход.ДокументОтгрузки,
		|		ТоварыКОтгрузкеРасход.ЗаданиеНаПеревозку,
		|		ТоварыКОтгрузкеРасход.Получатель,
		|		ТоварыКОтгрузкеРасход.Склад,
		|		ТоварыКОтгрузкеРасход.Номенклатура,
		|		ТоварыКОтгрузкеРасход.Характеристика,
		|		ТоварыКОтгрузкеРасход.Назначение,
		|		ТоварыКОтгрузкеРасход.Серия,
		|		-ТоварыКОтгрузкеРасход.Количество,
		|		ТоварыКОтгрузкеРасход.ОтгрузкаПоЗаданиюНаПеревозку
		|	ИЗ
		|		ТоварыКОтгрузкеРасход КАК ТоварыКОтгрузкеРасход
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыСобираетсяСобрано.ДокументОтгрузки,
		|		ТоварыСобираетсяСобрано.ЗаданиеНаПеревозку,
		|		ТоварыСобираетсяСобрано.Получатель,
		|		ТоварыСобираетсяСобрано.Склад,
		|		ТоварыСобираетсяСобрано.Номенклатура,
		|		ТоварыСобираетсяСобрано.Характеристика,
		|		ТоварыСобираетсяСобрано.Назначение,
		|		ТоварыСобираетсяСобрано.Серия,
		|		-ТоварыСобираетсяСобрано.Количество,
		|		ТоварыСобираетсяСобрано.ОтгрузкаПоЗаданиюНаПеревозку
		|	ИЗ
		|		ТоварыСобираетсяСобрано КАК ТоварыСобираетсяСобрано
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКСборке.ДокументОтгрузки,
		|		ТоварыКСборке.ЗаданиеНаПеревозку,
		|		ТоварыКСборке.Получатель,
		|		ТоварыКСборке.Склад,
		|		ТоварыКСборке.Номенклатура,
		|		ТоварыКСборке.Характеристика,
		|		ТоварыКСборке.Назначение,
		|		ТоварыКСборке.Серия,
		|		-ТоварыКСборке.Количество,
		|		ТоварыКСборке.ОтгрузкаПоЗаданиюНаПеревозку
		|	ИЗ
		|		ТоварыКСборке КАК ТоварыКСборке) КАК ТоварыКОтгрузке
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.ОтгрузкаПоЗаданиюНаПеревозку,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.ДокументОтгрузки,
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Получатель,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|			ТОГДА ТоварыКОтгрузке.ЗаданиеНаПеревозку
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|	КОНЕЦ,
		|	ТоварыКОтгрузке.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКОтгрузке.Количество) <> 0"; 
			
		Запрос.УстановитьПараметр("ТоварыКОтгрузке", ОбщегоНазначенияУТ.ДанныеДерева(ДеревоТоварыКОтгрузке));
		Запрос.УстановитьПараметр("ПустойПолучатель", ПустойПолучательОтправитель());
		Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
			ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
		Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
			Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
			СоединениеСВТДопустимыхОтклонений = 
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварыКОформлениюРасходныхОрдеров КАК ВТТоварыКОформлениюРасходныхОрдеров
				|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ВТТоварыКОформлениюРасходныхОрдеров.ДокументОтгрузки
				|			И ТоварыКОтгрузке.Номенклатура = ВТТоварыКОформлениюРасходныхОрдеров.Номенклатура
				|			И ТоварыКОтгрузке.Характеристика = ВТТоварыКОформлениюРасходныхОрдеров.Характеристика
				|			И ТоварыКОтгрузке.Назначение = ВТТоварыКОформлениюРасходныхОрдеров.Назначение
				|			И ТоварыКОтгрузке.Серия = ВТТоварыКОформлениюРасходныхОрдеров.Серия";
				
			ДопустимоеОтклонениеЗначение = "ВТТоварыКОформлениюРасходныхОрдеров.ДопустимоеОтклонение"
		Иначе
			СоединениеСВТДопустимыхОтклонений = "";
			ДопустимоеОтклонениеЗначение = 0;
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ &СоединениеСВТДопустимыхОтклонений", СоединениеСВТДопустимыхОтклонений);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДопустимоеОтклонениеЗначение", ДопустимоеОтклонениеЗначение);
		
		МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
		ДеревоТоварыКОтгрузке 	= МассивРезультатов[МассивРезультатов.Количество()-5].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам); 
		ТоварыКОтгрузкеРасход   = МассивРезультатов[МассивРезультатов.Количество()-4].Выгрузить();
		ТоварыСобираетсяСобрано = МассивРезультатов[МассивРезультатов.Количество()-3].Выгрузить();
		ТоварыКСборке         	= МассивРезультатов[МассивРезультатов.Количество()-2].Выгрузить();  
		ТаблицаДельты           = МассивРезультатов[МассивРезультатов.Количество()-1].Выгрузить();
				
	Иначе
		
		ДеревоТоварыКОтгрузке 	= МассивРезультатов[МассивРезультатов.Количество()-5].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам); 
		ТоварыКОтгрузкеРасход   = МассивРезультатов[МассивРезультатов.Количество()-4].Выгрузить();
		ТоварыСобираетсяСобрано = МассивРезультатов[МассивРезультатов.Количество()-3].Выгрузить();
		ТоварыКСборке         	= МассивРезультатов[МассивРезультатов.Количество()-2].Выгрузить();  
		ТаблицаДельты           = МассивРезультатов[МассивРезультатов.Количество()-1].Выгрузить();
		
	КонецЕсли;

	ВычитаемыеТаблицы = Новый ТаблицаЗначений;
	ВычитаемыеТаблицы.Колонки.Добавить("Таблица");
	ВычитаемыеТаблицы.Колонки.Добавить("ОбходСверхуВниз");
	
	НоваяСтрока = ВычитаемыеТаблицы.Вставить(0);
	НоваяСтрока.Таблица = ТоварыКОтгрузкеРасход;
	НоваяСтрока.ОбходСверхуВниз = Истина;
	
	НоваяСтрока = ВычитаемыеТаблицы.Вставить(1);
	НоваяСтрока.Таблица = ТоварыСобираетсяСобрано;
	НоваяСтрока.ОбходСверхуВниз = Истина;
	
	НоваяСтрока = ВычитаемыеТаблицы.Вставить(2);
	НоваяСтрока.Таблица = ТоварыКСборке;
	НоваяСтрока.ОбходСверхуВниз = Ложь;
	
	ВычестьТаблицуИзДерева(ДеревоТоварыКОтгрузке, ВычитаемыеТаблицы, ТаблицаДельты);
	
	СтруктураТоварыДляОформленияРасходныхОрдеров = Новый Структура;
	СтруктураТоварыДляОформленияРасходныхОрдеров.Вставить("ДеревоТоварыКОтгрузке", ДеревоТоварыКОтгрузке);
	СтруктураТоварыДляОформленияРасходныхОрдеров.Вставить("ТоварыКСборке", ТоварыКСборке);

	Возврат СтруктураТоварыДляОформленияРасходныхОрдеров
	
КонецФункции

Процедура ВычестьТаблицуИзДерева(Дерево, ВычитаемыеТаблицы, ТаблицаДельты)
	
	Для Каждого УровеньЗаданиеНаПеревозку Из Дерево.Строки Цикл 
		Для Каждого УровеньДокументОтгрузки Из УровеньЗаданиеНаПеревозку.Строки Цикл				
			Для Каждого УровеньНоменклатура Из УровеньДокументОтгрузки.Строки Цикл
				Для Каждого УровеньХарактеристика Из УровеньНоменклатура.Строки  Цикл
					Для Каждого УровеньНазначение Из УровеньХарактеристика.Строки Цикл
						Для Каждого УровеньСерия Из УровеньНазначение.Строки Цикл
							ТаблицаТовары = УровеньСерия.Строки;
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("ДокументОтгрузки");
							СтруктураПоиска.Вставить("Получатель");
							СтруктураПоиска.Вставить("Склад");
							СтруктураПоиска.Вставить("Номенклатура");
							СтруктураПоиска.Вставить("Характеристика");
							СтруктураПоиска.Вставить("Назначение");
							СтруктураПоиска.Вставить("Серия");
							Если ЗначениеЗаполнено(УровеньЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
								СтруктураПоиска.Вставить("ЗаданиеНаПеревозку");
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТаблицаТовары[0]);
							
							НайденныеСтроки = ТаблицаДельты.НайтиСтроки(СтруктураПоиска);
							Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
								// Все ордера созданы, создавать ничего не надо, пропускаем этот товар
								
								СтрокиТаблицыКУдалению = Новый Массив;
								Для Каждого СтрокаКУдалению Из ТаблицаТовары Цикл
									СтрокиТаблицыКУдалению.Добавить(СтрокаКУдалению);
								КонецЦикла;
								
								Для Каждого СтрокаКУдалению Из СтрокиТаблицыКУдалению Цикл
									ТаблицаТовары.Удалить(СтрокаКУдалению);
								КонецЦикла;
								
								ТаблицаКСборке = ВычитаемыеТаблицы[2].Таблица;
								УдаляемыеСтроки = ТаблицаКСборке.НайтиСтроки(СтруктураПоиска);
								Для Каждого СтрокаКУдалению Из УдаляемыеСтроки Цикл
									ТаблицаКСборке.Удалить(СтрокаКУдалению);
								КонецЦикла;
								
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрокаВычитаемыеТаблицы Из ВычитаемыеТаблицы Цикл
								
								// Если заранее известен вариант обхода
								Если СтрокаВычитаемыеТаблицы.ОбходСверхуВниз Тогда
									РаспределитьТоварыСверхуВниз(ТаблицаТовары, СтрокаВычитаемыеТаблицы.Таблица, СтруктураПоиска);	
								Иначе
									РаспределитьТоварыСнизуВверх(ТаблицаТовары, СтрокаВычитаемыеТаблицы.Таблица, СтруктураПоиска)
								КонецЕсли
								
							КонецЦикла
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьТоварыСверхуВниз(ТаблицаТовары, ВычитаемаяТаблица, СтруктураПоиска)
				
	МассивСтрок = ВычитаемаяТаблица.НайтиСтроки(СтруктураПоиска);	
	
	СтрокиТаблицыКУдалению = Новый Массив;
	
	КоличествоСтрокТаблицы = ТаблицаТовары.Количество();
	ИндексТаблицы = КоличествоСтрокТаблицы - 1;
	
	Пока ИндексТаблицы > -1 Цикл 
		
		СтрокиВычитаемойТаблицыКУдалению = Новый Массив;
		
		СтрокаТовара = ТаблицаТовары[ИндексТаблицы];
				
		КоличествоСтрок = МассивСтрок.Количество();
		Индекс = КоличествоСтрок - 1;
		
		Пока СтрокаТовара.Количество > 0 
			И Индекс > -1 Цикл
			
			ВычитаемаяСтрока = МассивСтрок[Индекс];
			
			ВычестьСтроки(СтрокаТовара, ВычитаемаяСтрока, СтрокиВычитаемойТаблицыКУдалению);
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
		Если СтрокаТовара.Количество = 0 Тогда
			СтрокиТаблицыКУдалению.Добавить(СтрокаТовара);
		КонецЕсли;
				
		// Удалим строки, которые мы уже распределили, чтоб не мешались
		Для Каждого СтрокаКУдалению Из СтрокиВычитаемойТаблицыКУдалению Цикл
			МассивСтрок.Удалить(МассивСтрок.Найти(СтрокаКУдалению));
			ВычитаемаяТаблица.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		ИндексТаблицы = ИндексТаблицы - 1;
		
	КонецЦикла;
	
	// Удалим строки, которые мы уже распределили, чтоб не мешались
	Для Каждого СтрокаКУдалению Из СтрокиТаблицыКУдалению Цикл
		ТаблицаТовары.Удалить(СтрокаКУдалению);
	КонецЦикла;
			
КонецПроцедуры

Процедура РаспределитьТоварыСнизуВверх(ТаблицаТовары, ВычитаемаяТаблица, СтруктураПоиска)
				
	МассивСтрок = ВычитаемаяТаблица.НайтиСтроки(СтруктураПоиска);	
	
	СтрокиТаблицыКУдалению = Новый Массив;
	
	КоличествоСтрокТаблицы = ТаблицаТовары.Количество();
	ИндексТаблицы = 0;
	
	Пока ИндексТаблицы < КоличествоСтрокТаблицы Цикл 
		
		СтрокаТовара = ТаблицаТовары[ИндексТаблицы];
		
		СтрокиВычитаемойТаблицыКУдалению = Новый Массив;
		
		КоличествоСтрок = МассивСтрок.Количество();
		Индекс = 0;
		
		Пока СтрокаТовара.Количество > 0 
			И Индекс < КоличествоСтрок Цикл
			
			ВычитаемаяСтрока = МассивСтрок[Индекс];
			
			// Нельзя сторнировать строку-приход строкой-расходом, дата которой меньше, чем у строки-прихода
			Если ВычитаемаяСтрока.Период < СтрокаТовара.Период Тогда 
				Прервать;
			КонецЕсли;
			
			ВычестьСтроки(СтрокаТовара, ВычитаемаяСтрока, СтрокиВычитаемойТаблицыКУдалению);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Если СтрокаТовара.Количество = 0 Тогда
			СтрокиТаблицыКУдалению.Добавить(СтрокаТовара);
		КонецЕсли;		
		
		// Удалим строки, которые мы уже распределили, чтоб не мешались
		Для Каждого СтрокаКУдалению Из СтрокиВычитаемойТаблицыКУдалению Цикл
			МассивСтрок.Удалить(МассивСтрок.Найти(СтрокаКУдалению));
			ВычитаемаяТаблица.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		ИндексТаблицы = ИндексТаблицы + 1;
		
	КонецЦикла;
	
	// Удалим строки, которые мы уже распределили, чтоб не мешались
	Для Каждого СтрокаКУдалению Из СтрокиТаблицыКУдалению Цикл
		ТаблицаТовары.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычестьСтроки(СтрокаТовара, ВычитаемаяСтрока, СтрокиВычитаемойТаблицыКУдалению)
		
	КоличествоРаспределяемое = Мин(СтрокаТовара.Количество, ВычитаемаяСтрока.Количество);
	СтрокаТовара.Количество = СтрокаТовара.Количество - КоличествоРаспределяемое;
	ВычитаемаяСтрока.Количество = ВычитаемаяСтрока.Количество - КоличествоРаспределяемое;
	
	// Эти строки распределены - позже их удалим
	Если ВычитаемаяСтрока.Количество = 0 Тогда
		СтрокиВычитаемойТаблицыКУдалению.Добавить(ВычитаемаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОбъектОрдер(ПараметрыПоискаРасходногоОрдера)
  
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТовары.Ссылка,
	|	РасходныйОрдерНаТовары.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|		ПО (НЕ &БезГруппировкиПоРаспоряжениям)
	|			И РасходныйОрдерНаТовары.Распоряжение = СостоянияИРеквизитыДоставки.Распоряжение
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка.Склад = &Склад
	|	И ВЫБОР
	|			КОГДА РасходныйОрдерНаТовары.Ссылка.Получатель В (&ПустойПолучатель)
	|				ТОГДА РасходныйОрдерНаТовары.Распоряжение
	|			ИНАЧЕ РасходныйОрдерНаТовары.Ссылка.Получатель
	|		КОНЕЦ = &Получатель
	|	И РасходныйОрдерНаТовары.Ссылка.ДатаОтгрузки = &ДатаОтгрузки
	|	И РасходныйОрдерНаТовары.Ссылка.Помещение = &Помещение
	|	И (РасходныйОрдерНаТовары.Ссылка.ЗонаОтгрузки = &ЗонаОтгрузки
	|			ИЛИ &ПоВсемЗонамОтгрузки)
	|	И РасходныйОрдерНаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Подготовлено)
	|	И РасходныйОрдерНаТовары.Ссылка.СкладскаяОперация = &СкладскаяОперация
	|	И РасходныйОрдерНаТовары.Ссылка.Проведен
	|	И (РасходныйОрдерНаТовары.Распоряжение В (&РаспоряженияНаОтгрузку)
	|			ИЛИ &ПоВсемРаспоряжениям)
	|	И (РасходныйОрдерНаТовары.Распоряжение В (&РаспоряжениеДляГруппировки)
	|			ИЛИ &БезГруппировкиПоРаспоряжениям
	|				И НЕ ЕСТЬNULL(СостоянияИРеквизитыДоставки.РазбиватьРасходныеОрдераПоРаспоряжениям, ЛОЖЬ))
	|	И (РасходныйОрдерНаТовары.Ссылка.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|			ИЛИ НЕ &ОтгрузкаПоЗаданиюНаПеревозку)";
	
	Запрос.УстановитьПараметр("РаспоряженияНаОтгрузку", ПараметрыПоискаРасходногоОрдера.РаспоряженияНаОтгрузку);
	Запрос.УстановитьПараметр("ПоВсемРаспоряжениям", ПараметрыПоискаРасходногоОрдера.РаспоряженияНаОтгрузку.Количество() = 0);
	Запрос.УстановитьПараметр("Склад", ПараметрыПоискаРасходногоОрдера.Склад);	
	Запрос.УстановитьПараметр("Получатель", ПараметрыПоискаРасходногоОрдера.Получатель);
	Запрос.УстановитьПараметр("БезГруппировкиПоРаспоряжениям", Не ЗначениеЗаполнено(ПараметрыПоискаРасходногоОрдера.РаспоряжениеГруппировка));
	Запрос.УстановитьПараметр("РаспоряжениеДляГруппировки", ПараметрыПоискаРасходногоОрдера.РаспоряжениеГруппировка);
	Запрос.УстановитьПараметр("ДатаОтгрузки", Макс(ПараметрыПоискаРасходногоОрдера.ДатаОтгрузки,ПараметрыПоискаРасходногоОрдера.ТекущаяДата));
	Запрос.УстановитьПараметр("Помещение", ПараметрыПоискаРасходногоОрдера.Помещение);
	Запрос.УстановитьПараметр("ЗонаОтгрузки", ПараметрыПоискаРасходногоОрдера.ЗонаОтгрузки);
	Запрос.УстановитьПараметр("ПоВсемЗонамОтгрузки", Не ЗначениеЗаполнено(ПараметрыПоискаРасходногоОрдера.ЗонаОтгрузки));
	Запрос.УстановитьПараметр("СкладскаяОперация", ПараметрыПоискаРасходногоОрдера.СкладскаяОперация);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ПараметрыПоискаРасходногоОрдера.ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ОтгрузкаПоЗаданиюНаПеревозку", ПараметрыПоискаРасходногоОрдера.ОтгрузкаПоЗаданиюНаПеревозку);
	Запрос.УстановитьПараметр("ПустойПолучатель", ПустойПолучательОтправитель());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		Возврат ДокументОбъект;
		
	Иначе
		
		ДокументОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		ДокументОбъект.Дата             = ПараметрыПоискаРасходногоОрдера.ТекущаяДата; 		
		Если Метаданные.ОпределяемыеТипы.ОтправительПолучательТоваров.Тип.СодержитТип(ТипЗнч(ПараметрыПоискаРасходногоОрдера.Получатель)) Тогда	
			ДокументОбъект.Получатель = ПараметрыПоискаРасходногоОрдера.Получатель;	
		Иначе
			ДокументОбъект.Получатель = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;		
		ДокументОбъект.ДатаОтгрузки     = Макс(ПараметрыПоискаРасходногоОрдера.ТекущаяДата, ПараметрыПоискаРасходногоОрдера.ДатаОтгрузки);
		ДокументОбъект.Склад            = ПараметрыПоискаРасходногоОрдера.Склад;
		ДокументОбъект.Помещение        = ПараметрыПоискаРасходногоОрдера.Помещение;
		ДокументОбъект.СкладскаяОперация  = ПараметрыПоискаРасходногоОрдера.СкладскаяОперация;
		ДокументОбъект.ЗонаОтгрузки     = ПараметрыПоискаРасходногоОрдера.ЗонаОтгрузки;
		ДокументОбъект.ЗаданиеНаПеревозку = ПараметрыПоискаРасходногоОрдера.ЗаданиеНаПеревозку;
		ДокументОбъект.ОтгрузкаПоЗаданиюНаПеревозку = ПараметрыПоискаРасходногоОрдера.ОтгрузкаПоЗаданиюНаПеревозку;
		Если ПараметрыПоискаРасходногоОрдера.ОтгрузкаПоЗаданиюНаПеревозку Тогда
			ДокументОбъект.ПорядокДоставки = ДоставкаТоваров.ПорядокДоставкиВЗаданииНаПеревозку(ПараметрыПоискаРасходногоОрдера.ЗаданиеНаПеревозку,ПараметрыПоискаРасходногоОрдера.Получатель);	
		КонецЕсли;	
		
		Возврат ДокументОбъект;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьРасходныйОрдерНаТовары(ПараметрыЗаполненияРасходногоОрдера, ДокументОбъект)
	
	ДокументОбъект.ТоварыПоРаспоряжениям.Очистить();
	ДокументОбъект.ОтгружаемыеТовары.Очистить();
	
	ДокументОбъект.Дата             = ПараметрыЗаполненияРасходногоОрдера.ТекущаяДата; 		
	Если Метаданные.ОпределяемыеТипы.ОтправительПолучательТоваров.Тип.СодержитТип(ТипЗнч(ПараметрыЗаполненияРасходногоОрдера.Получатель)) Тогда	
		ДокументОбъект.Получатель = ПараметрыЗаполненияРасходногоОрдера.Получатель;	
	Иначе
		ДокументОбъект.Получатель = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;		
	ДокументОбъект.ДатаОтгрузки		= Макс(ПараметрыЗаполненияРасходногоОрдера.ДатаОтгрузки,ПараметрыЗаполненияРасходногоОрдера.ТекущаяДата);
	ДокументОбъект.Склад            = ПараметрыЗаполненияРасходногоОрдера.Склад;
	ДокументОбъект.Помещение        = ПараметрыЗаполненияРасходногоОрдера.Помещение;
	ДокументОбъект.СкладскаяОперация  = ПараметрыЗаполненияРасходногоОрдера.СкладскаяОперация;
	ДокументОбъект.ЗонаОтгрузки     = ПараметрыЗаполненияРасходногоОрдера.ЗонаОтгрузки;
	ДокументОбъект.ЗаданиеНаПеревозку = ПараметрыЗаполненияРасходногоОрдера.ЗаданиеНаПеревозку;
	ДокументОбъект.ОтгрузкаПоЗаданиюНаПеревозку = ПараметрыЗаполненияРасходногоОрдера.ОтгрузкаПоЗаданиюНаПеревозку;
	Если ПараметрыЗаполненияРасходногоОрдера.ОтгрузкаПоЗаданиюНаПеревозку Тогда
		ДокументОбъект.ПорядокДоставки = ДоставкаТоваров.ПорядокДоставкиВЗаданииНаПеревозку(ПараметрыЗаполненияРасходногоОрдера.ЗаданиеНаПеревозку,ПараметрыЗаполненияРасходногоОрдера.Получатель);	
	КонецЕсли;	
	
	Возврат ДокументОбъект;
КонецФункции

Функция ЗаписатьОбъектОрдер(ДокументОбъект, ФоновоеЗадание)
	ЕстьОшибка = Ложь;
	ДокументОбъект.ТоварыПоРаспоряжениям.Свернуть("Распоряжение, Номенклатура, Характеристика, Назначение, Серия", "Количество");
	ДокументОбъект.Заполнить(Неопределено);
	// silber {
	АТ_ДоставкаСервер.УстановитьСпособДоставкиОрдера(ДокументОбъект);
	// } silber
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);				
	Исключение
		Если ФоновоеЗадание Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось записать расходный ордер фоновым заданием по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДокументОбъект.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РасходныйОрдерНаТовары,
				ДокументОбъект.Ссылка,
				ТекстСообщения);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;	
			
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	Возврат Не ЕстьОшибка;
КонецФункции

#КонецОбласти

Процедура СоздатьЗаданияНаОтборПоРаспоряжениям(СтруктураПараметров, СтруктураДанных)
	
	Склад = СтруктураПараметров.Склад;
	Помещение = СтруктураПараметров.Помещение;
	РабочийУчасток = СтруктураПараметров.РабочийУчасток;
	НастройкаФормированияПоРабочимУчасткам = СтруктураПараметров.НастройкаФормированияПоРабочимУчасткам;
	ОграничениеПоВесу = СтруктураПараметров.ОграничениеПоВесу;
	ОграничениеПоОбъему = СтруктураПараметров.ОграничениеПоОбъему;
	ОграничиватьПоОбъему = СтруктураПараметров.ОграничиватьПоОбъему;
	ОграничиватьПоВесу = СтруктураПараметров.ОграничиватьПоВесу;
	
	Если СтруктураПараметров.Свойство("Исполнитель") Тогда
		Исполнитель = СтруктураПараметров.Исполнитель;
	Иначе 
		Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	РаспоряженияЗадания = Новый Соответствие;
	
	Если СтруктураДанных.ТаблицаРезультатов.Количество() > 0 Тогда
		
		Если НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда
			
			ЗапросУчастки = Новый Запрос;
			ЗапросУчастки.Текст = "ВЫБРАТЬ
			|	РабочиеУчастки.Ссылка КАК РабочийУчасток,
			|	РабочиеУчастки.ОграничиватьПоВесу КАК ОграничиватьПоВесу,
			|	РабочиеУчастки.ОграничениеПоВесу КАК ОграничениеПоВесу,
			|	РабочиеУчастки.ОграничиватьПоОбъему КАК ОграничиватьПоОбъему,
			|	РабочиеУчастки.ОграничениеПоОбъему КАК ОграничениеПоОбъему
			|ИЗ
			|	Справочник.РабочиеУчастки КАК РабочиеУчастки
			|ГДЕ
			|	РабочиеУчастки.Владелец = &Склад
			|	И РабочиеУчастки.Помещение = &Помещение";
			
			ЗапросУчастки.УстановитьПараметр("Склад",Склад);
			ЗапросУчастки.УстановитьПараметр("Помещение",Помещение);
			
			ТаблицаРабочихУчастков = ЗапросУчастки.Выполнить().Выгрузить();
			
			НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
			НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
			НоваяСтрока.ОграничиватьПоОбъему = Ложь;
			НоваяСтрока.ОграничиватьПоВесу = Ложь;
			
		Иначе	
			ТаблицаРабочихУчастков = Новый ТаблицаЗначений;
			ТаблицаРабочихУчастков.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
			НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
			Если НастройкаФормированияПоРабочимУчасткам = "БезРазбиенияПоРабочимУчасткам" Тогда
				НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
			Иначе
				НоваяСтрока.РабочийУчасток = РабочийУчасток;
			КонецЕсли;
			
		КонецЕсли;
		
		НевозможныйНабор = 9999999999;
		
		Для Каждого СтрокаРабочийУчасток Из ТаблицаРабочихУчастков Цикл
			
			Если НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда						
				МаксимальныйОбъем = ?(СтрокаРабочийУчасток.ОграничиватьПоОбъему, СтрокаРабочийУчасток.ОграничениеПоОбъему, НевозможныйНабор);
				МаксимальныйВес = ?(СтрокаРабочийУчасток.ОграничиватьПоВесу, СтрокаРабочийУчасток.ОграничениеПоВесу, НевозможныйНабор);						
			Иначе
				МаксимальныйОбъем = ?(ОграничиватьПоОбъему, ОграничениеПоОбъему, НевозможныйНабор);
				МаксимальныйВес = ?(ОграничиватьПоВесу, ОграничениеПоВесу, НевозможныйНабор);						
			КонецЕсли;
			
			Если НастройкаФормированияПоРабочимУчасткам <> "БезРазбиенияПоРабочимУчасткам" Тогда			
				ТаблицаРезультата = СтруктураДанных.ТаблицаРезультатов.НайтиСтроки(Новый Структура("РабочийУчасток",СтрокаРабочийУчасток.РабочийУчасток));			
			Иначе			
				ТаблицаРезультата = СтруктураДанных.ТаблицаРезультатов;
			КонецЕсли;			
			
			//Разбиение по весу и объему. Соглашения:
			//  - если вес (объем) одной строки больше, чем ограничения - создается отдельный документ,
			//		вес (объем) которого будет больше, чем максимальный
			//	- разбиение по весу (объему) не оптимально, т.к. более приоритетно сохранение порядка обхода
			//			(лучше пусть будет больше заданий, но каждое можно быстрее обойти)
			
			ТекущееРаспоряжение 	  = Неопределено;
			ФормироватьПоРаспоряжению = Истина;
			ПропуститьТару = 0;
			КлючСвязиСТаройПоследний = 0;
			
			//Идем сначала результату, т.к. в нем строки упорядочены по обходу
			Для Каждого СтрТабл Из ТаблицаРезультата Цикл
				
				Если ТекущееРаспоряжение <> СтрТабл.Распоряжение Тогда
					
					ТекущееРаспоряжение = СтрТабл.Распоряжение;
					ФормироватьПоРаспоряжению = Истина;
					
					Если Не ЗначениеЗаполнено(ТекущееРаспоряжение.ЗонаОтгрузки	) Тогда
						
						ФормироватьПоРаспоряжению = Ложь;
						
						ТекстСообщения = НСтр("ru='В распоряжении %Распоряжении% не указана зона отгрузки.
						|Необходимо указать зону отгрузки при настройке формирования заданий на отбор товаров.'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжении%",ТекущееРаспоряжение);
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					Если ФормироватьПоРаспоряжению Тогда
						
						СтруктураДокумента = РаспоряженияЗадания[ТекущееРаспоряжение];
						
						Если СтруктураДокумента = Неопределено Тогда
							
							СтруктураДокумента = Новый Структура;
							СтруктураДокумента.Вставить("ДокументОбъект", НовыйОбъектЗадание(ТекущееРаспоряжение,СтрокаРабочийУчасток.РабочийУчасток, Склад, Помещение, Исполнитель));
							СтруктураДокумента.Вставить("Объем", 0);
							СтруктураДокумента.Вставить("Вес", 0);
							
							РаспоряженияЗадания.Вставить(ТекущееРаспоряжение,СтруктураДокумента);
							
						ИначеЕсли НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда
							
							СтруктураДокумента.Объем    = 0;
							СтруктураДокумента.Вес	  = 0;
							СтруктураДокумента.ДокументОбъект = НовыйОбъектЗадание(ТекущееРаспоряжение,СтрокаРабочийУчасток.РабочийУчасток, Склад, Помещение, Исполнитель);
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если Не ФормироватьПоРаспоряжению Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПропуститьТару = СтрТабл.КлючСвязиСТарой Тогда
					Продолжить;
				КонецЕсли;
				
				ПропуститьТару = 0;
				
				Если (СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйОбъем
					Или  СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйВес) Тогда
					
					ДокументОбъект = НовыйОбъектЗадание(СтрТабл.Распоряжение,СтрокаРабочийУчасток.РабочийУчасток, Склад, Помещение, Исполнитель);
					
					Для Каждого СтрокиТаблицы Из ТаблицаРезультата Цикл
						
						Если ТаблицаРезультата.КлючСвязиСТарой = СтрТабл.КлючСвязиСТарой Тогда
							НоваяСтрока = ДокументОбъект.ТоварыОтбор.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
						КонецЕсли;
						
					КонецЦикла;
					
					ПропуститьТару = СтрТабл.КлючСвязиСТарой;
					
					ЗаписатьОбъектЗадание(ДокументОбъект);
					
				Иначе
					
					Если КлючСвязиСТаройПоследний <> СтрТабл.КлючСвязиСТарой 
						И (РаспоряженияЗадания[СтрТабл.Распоряжение].Объем + СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйОбъем
						Или (РаспоряженияЗадания[СтрТабл.Распоряжение].Вес + СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйВес Тогда
						
						ЗаписатьОбъектЗадание(РаспоряженияЗадания[СтрТабл.Распоряжение].ДокументОбъект);
						//
						РаспоряженияЗадания[СтрТабл.Распоряжение].Объем    = 0;
						РаспоряженияЗадания[СтрТабл.Распоряжение].Вес	  = 0;
						РаспоряженияЗадания[СтрТабл.Распоряжение].ДокументОбъект = НовыйОбъектЗадание(СтрТабл.Распоряжение,СтрокаРабочийУчасток.РабочийУчасток, Склад, Помещение, Исполнитель);
						
					КонецЕсли;
					
					НоваяСтрока = РаспоряженияЗадания[СтрТабл.Распоряжение].ДокументОбъект.ТоварыОтбор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
					
					РаспоряженияЗадания[СтрТабл.Распоряжение].Объем = РаспоряженияЗадания[СтрТабл.Распоряжение].Объем
																	+ СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок;
					РаспоряженияЗадания[СтрТабл.Распоряжение].Вес	= РаспоряженияЗадания[СтрТабл.Распоряжение].Вес 
																	+ СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок;
					
				КонецЕсли;
				
				КлючСвязиСТарой = СтрТабл.КлючСвязиСТарой;
				
			КонецЦикла;
			
			Для Каждого СтрДок из РаспоряженияЗадания Цикл
				
				Если СтрДок.Значение.ДокументОбъект.ТоварыОтбор.Количество() > 0 Тогда
					
					ЗаписатьОбъектЗадание(СтрДок.Значение.ДокументОбъект)
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;		
	Иначе
		ТекстСообщения = НСтр("ru='Не удалось сформировать задания на отбор товаров согласно правилам отбора.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьОбъектЗадание(ДокументОбъект)
	Попытка
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ОтборРазмещениеТоваров);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Отбор);
			Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение Тогда
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Размещение);
			КонецЕсли;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Функция НовыйОбъектЗадание(Распоряжение,РабочийУчасток, Склад, Помещение, Исполнитель)
	
	ДокументОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокументОбъект.Дата 				= ТекущаяДатаСеанса();
	ДокументОбъект.Статус 				= Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокументОбъект.Склад 				= Склад;
	ДокументОбъект.Помещение 			= Помещение;
	
	Если Распоряжение = Неопределено Тогда
		ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
	Иначе 
		ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
		ДокументОбъект.ЗонаОтгрузки		 	= Распоряжение.ЗонаОтгрузки;
		ДокументОбъект.Распоряжение			= Распоряжение;
	КонецЕсли;
	
	ДокументОбъект.Ответственный 	= Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		ДокументОбъект.Исполнитель 	= Исполнитель;
	КонецЕсли;
	
	ДокументОбъект.РабочийУчасток 	= РабочийУчасток;
		
	Возврат ДокументОбъект;
	
КонецФункции

//Функция возращает признак использования на складе ордерной схемы при отгрузке
//	Параметры
//		Склады - Массив, СправочникСсылка.Склад - в параметре передаются ссылки на элементы справочника Склады
//		Дата - Дата - дата, на которую проверяется использование ордерной схемы при отгрузке
//		Склад - СправочникСсылка.Склады - в параметре передается ссылка на склад из шапки
//
// Возвращаемое значение:
// Булево - Истина -признак использования на складе ордерной схемы при отгрузке
//
Функция ЕстьОрдерныйНаОтгрузкуСклад(Склады, Дата = Неопределено, Склад = Неопределено) Экспорт
	ДатаПроверки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&Склады)
	|	И Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|	И Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &Дата";
	
	Запрос.УстановитьПараметр("Склады", Склады);
	Если ТипЗнч(Склады) = Тип("Массив") И Склады.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("Склады", Склад);
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

//Функция возращает признак использования на складе ордерной схемы при поступлении
//	Параметры
//		Склады - Массив, СправочникСсылка.Склад - в параметре передаются ссылки на элементы справочника Склады
//		Дата - Дата - дата, на которую проверяется использование ордерной схемы при отгрузке
//		Склад - СправочникСсылка.Склады - в параметре передается ссылка на склад из шапки
//
// Возвращаемое значение:
// Булево - Истина -признак использования на складе ордерной схемы при поступлении
//
Функция ЕстьОрдерныйНаПоступлениеСклад(Склады, Дата = Неопределено, Склад = Неопределено) Экспорт
	ДатаПроверки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&Склады)
	|	И Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И Склады.ДатаНачалаОрдернойСхемыПриПоступлении <= &Дата";
	
	Запрос.УстановитьПараметр("Склады", Склады);
	Если ТипЗнч(Склады) = Тип("Массив") И Склады.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("Склады", Склад);
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

//Функция возращает признак использования на складе неордерной схемы при отгрузке
//	Параметры:
//		Склады - Массив, СправочникСсылка.Склад - в параметре передаются ссылки на элементы справочника Склады.
//
// Возвращаемое значение:
// Булево - Истина -признак использования на складе неордерной схемы при отгрузке
//
Функция ЕстьНеордерныйНаОтгрузкуСклад(Склады) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&Склады)
	|	И (НЕ Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриОтгрузке)";
	Запрос.УстановитьПараметр("Склады", Склады);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Процедура ЗапускФормированияОчередиИПереоформленияРасходныхОрдеров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеЗадания = НСтр("ru = 'Формирование очереди переоформления расходных ордеров.'");
	Ключ = "ФормированиеОчередиПереоформленияРасходныхОрдеров";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяЭкспортнойПроцедуры = "СкладыСервер.ВыполнитьФоновоеФормированиеОчередиИПереоформленияРасходныхОрдеров";
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	         	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);

КонецПроцедуры

Процедура ВыполнитьФоновоеФормированиеОчередиИПереоформленияРасходныхОрдеров() Экспорт
	
	Выборка = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПереоформленияРасходныхОрдеров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Неопределено,
			"Документ.ЗаданиеНаПеревозку", МенеджерВТ);
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыКОтгрузке", "ДокументОтгрузки", МенеджерВТ);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НакладнаяТовары.Ссылка.РеализацияПоЗаказам
		|			ТОГДА НакладнаяТовары.ЗаказКлиента
		|		ИНАЧЕ НакладнаяТовары.Ссылка
		|	КОНЕЦ КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ЗаблокированнныеДокументыОтгрузкиПоЗаданиюНаперевозку
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаблокированоЗаданиеНаПеревозку КАК ВтЗаданияНаПеревозку
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ВтЗаданияНаПеревозку.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК НакладнаяТовары
		|		ПО (НакладнаяТовары.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НакладнаяТовары.Ссылка.ПеремещениеПоЗаказам
		|			ТОГДА НакладнаяТовары.ЗаказНаПеремещение
		|		ИНАЧЕ НакладнаяТовары.Ссылка
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаблокированоЗаданиеНаПеревозку КАК ВтЗаданияНаПеревозку
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ВтЗаданияНаПеревозку.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК НакладнаяТовары
		|		ПО (НакладнаяТовары.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ДокументОтгрузки КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ЗаблокированнныеДокументыОтгрузки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки
		|	ИЗ
		|		ЗаблокированнныеДокументыОтгрузкиПоЗаданиюНаперевозку КАК ДокументыОтгрузки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|	ИЗ
		|		ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.ДокументОтгрузки КАК ДокументОтгрузки
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(,НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)) КАК Т
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОформлятьСначалаНакладные
		|				ТОГДА Т.КОтгрузкеОстаток - Т.КСборкеОстаток - Т.СобираетсяОстаток - Т.СобраноОстаток - Т.КОформлениюОстаток
		|			ИНАЧЕ Т.КОтгрузкеОстаток - Т.КСборкеОстаток - Т.СобираетсяОстаток - Т.СобраноОстаток
		|		КОНЕЦ <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Получатель КАК Получатель,
		|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение КАК Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
		|	СУММА(ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеРасход < 0
		|			ТОГДА -ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &ОформлятьСначалаНакладные
		|					ТОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход - ТоварыКОтгрузкеОбороты.КОформлениюПриход
		|				ИНАЧЕ ТоварыКОтгрузкеОбороты.КОтгрузкеПриход
		|			КОНЕЦ
		|	КОНЕЦ) КАК КоличествоКотгрузке,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ЕСТЬNULL(СостоянияИРеквизитыДоставки.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку,ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтгрузкаПоЗаданиюНаПеревозку
		|ПОМЕСТИТЬ ТоварыКотгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТоварыКОтгрузкеОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО (Фильтр.ДокументОтгрузки = ТоварыКОтгрузкеОбороты.ДокументОтгрузки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузкеОбороты.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеРасход < 0
		|			ТОГДА -ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &ОформлятьСначалаНакладные
		|					ТОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход - ТоварыКОтгрузкеОбороты.КОформлениюПриход
		|				ИНАЧЕ ТоварыКОтгрузкеОбороты.КОтгрузкеПриход
		|			КОНЕЦ
		|	КОНЕЦ <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Получатель,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ЕСТЬNULL(СостоянияИРеквизитыДоставки.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку,ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Получатель,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	СУММА(ТоварыКОтгрузкеОбороты.КОформлениюРасход),
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ЕСТЬNULL(СостоянияИРеквизитыДоставки.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку,ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТоварыКОтгрузкеОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО (Фильтр.ДокументОтгрузки = ТоварыКОтгрузкеОбороты.ДокументОтгрузки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузкеОбороты.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|ГДЕ
		|	&ОформлятьСначалаНакладные
		|	И ТоварыКОтгрузкеОбороты.КОформлениюРасход <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Получатель,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ЕСТЬNULL(СостоянияИРеквизитыДоставки.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку,ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКотгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКотгрузке.Склад КАК Склад,
		|	ТоварыКотгрузке.Получатель КАК Получатель,
		|	ТоварыКотгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКотгрузке.Характеристика КАК Характеристика,
		|	ТоварыКотгрузке.Назначение КАК Назначение,
		|	ТоварыКотгрузке.Серия КАК Серия,
		|	ТоварыКотгрузке.КоличествоКотгрузке,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|					ИЛИ ТоварыКДоставке.ВсеТовары
		|				ТОГДА ТоварыКотгрузке.КоличествоКотгрузке
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТоварыКотгрузке.КоличествоКотгрузке >= ТоварыКДоставке.Количество
		|						ТОГДА ТоварыКДоставке.Количество
		|					ИНАЧЕ ТоварыКотгрузке.КоличествоКотгрузке
		|				КОНЕЦ
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ТоварыКОтгрузкеИДоставке
		|ИЗ
		|	ТоварыКотгрузке КАК ТоварыКотгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
		|		ПО ТоварыКотгрузке.ДокументОтгрузки = ТоварыКДоставке.Распоряжение
		|			И ТоварыКотгрузке.Склад = ТоварыКДоставке.Склад
		|			И (ТоварыКотгрузке.Номенклатура = ТоварыКДоставке.Номенклатура
		|					И ТоварыКотгрузке.Характеристика = ТоварыКДоставке.Характеристика
		|					И ТоварыКотгрузке.Назначение = ТоварыКДоставке.Назначение
		|					И ТоварыКотгрузке.Серия = ТоварыКДоставке.Серия
		|				ИЛИ ТоварыКДоставке.ВсеТовары)
		|			И (ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен)
		|			И (ТоварыКДоставке.ЗаданиеНаПеревозку.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется))
		|			И (ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку)
		|ГДЕ
		|	НЕ(ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|				И ТоварыКДоставке.ЗаданиеНаПеревозку ЕСТЬ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКотгрузке.Характеристика,
		|	ТоварыКотгрузке.Получатель,
		|	ТоварыКотгрузке.Серия,
		|	ТоварыКотгрузке.Назначение,
		|	ТоварыКотгрузке.ДокументОтгрузки,
		|	ТоварыКотгрузке.Склад,
		|	ТоварыКотгрузке.Номенклатура,
		|	ТоварыКотгрузке.КоличествоКотгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Получатель,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.КОтгрузкеРасход КАК Количество
		|ПОМЕСТИТЬ ТоварыКотгрузкеРасход
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТоварыКОтгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО (Фильтр.ДокументОтгрузки = ТоварыКОтгрузке.ДокументОтгрузки)
		|ГДЕ
		| ТоварыКОтгрузке.КОтгрузкеРасход > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия,
		|	СУММА(ТоварыКОтгрузкеОстатки.СобираетсяОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток) КАК Количество
		|ПОМЕСТИТЬ ТоварыСобраноСобирается
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.СобираетсяОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия,
		|	СУММА(ТоварыКОтгрузкеОстатки.КСборкеОстаток) КАК Количество
		|ПОМЕСТИТЬ ТоварыКСборке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.КСборкеОстаток <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия,
		|	СУММА(ТоварыКОтгрузкеОстатки.КОтгрузкеПриход) КАК КОтгрузкеПриход,
		|	СУММА(ТоварыКОтгрузкеОстатки.КОтгрузкеРасход) КАК КОтгрузкеРасход,
		|	СУММА(ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток) КАК СобираетсяСобраноОстаток,
		|	СУММА(ТоварыКОтгрузкеОстатки.КСборкеОстаток) КАК КСборкеОстаток
		|ПОМЕСТИТЬ ТоварыКОтгрузкеОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКОтгрузкеИДоставке.ДокументОтгрузки КАК ДокументОтгрузки,
		|		ТоварыКОтгрузкеИДоставке.Склад КАК Склад,
		|		ТоварыКОтгрузкеИДоставке.Получатель КАК Получатель,
		|		ТоварыКОтгрузкеИДоставке.Номенклатура КАК Номенклатура,
		|		ТоварыКОтгрузкеИДоставке.Характеристика КАК Характеристика,
		|		ТоварыКОтгрузкеИДоставке.Назначение КАК Назначение,
		|		ТоварыКОтгрузкеИДоставке.Серия КАК Серия,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеИДоставке.Количество < ТоварыКОтгрузкеИДоставке.КоличествоКотгрузке
		|				ТОГДА ТоварыКОтгрузкеИДоставке.Количество
		|			ИНАЧЕ ТоварыКОтгрузкеИДоставке.КоличествоКотгрузке
		|		КОНЕЦ КАК КОтгрузкеПриход,
		|		0 КАК КОтгрузкеРасход,
		|		0 КАК СобираетсяСобраноОстаток,
		|		0 КАК КСборкеОстаток
		|	ИЗ
		|		ТоварыКОтгрузкеИДоставке КАК ТоварыКОтгрузкеИДоставке
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКотгрузкеРасход.ДокументОтгрузки,
		|		ТоварыКотгрузкеРасход.Склад,
		|		ТоварыКотгрузкеРасход.Получатель,
		|		ТоварыКотгрузкеРасход.Номенклатура,
		|		ТоварыКотгрузкеРасход.Характеристика,
		|		ТоварыКотгрузкеРасход.Назначение,
		|		ТоварыКотгрузкеРасход.Серия,
		|		0,
		|		ТоварыКотгрузкеРасход.Количество,
		|		0,
		|		0
		|	ИЗ
		|		ТоварыКотгрузкеРасход КАК ТоварыКотгрузкеРасход
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыСобраноСобирается.ДокументОтгрузки,
		|		ТоварыСобраноСобирается.Склад,
		|		ТоварыСобраноСобирается.Получатель,
		|		ТоварыСобраноСобирается.Номенклатура,
		|		ТоварыСобраноСобирается.Характеристика,
		|		ТоварыСобраноСобирается.Назначение,
		|		ТоварыСобраноСобирается.Серия,
		|		0,
		|		0,
		|		ТоварыСобраноСобирается.Количество,
		|		0
		|	ИЗ
		|		ТоварыСобраноСобирается КАК ТоварыСобраноСобирается
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКСборке.ДокументОтгрузки,
		|		ТоварыКСборке.Склад,
		|		ТоварыКСборке.Получатель,
		|		ТоварыКСборке.Номенклатура,
		|		ТоварыКСборке.Характеристика,
		|		ТоварыКСборке.Назначение,
		|		ТоварыКСборке.Серия,
		|		0,
		|		0,
		|		0,
		|		ТоварыКСборке.Количество
		|	ИЗ
		|		ТоварыКСборке КАК ТоварыКСборке) КАК ТоварыКОтгрузкеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель
		|ПОМЕСТИТЬ ПотребностьВОрдерах
		|ИЗ
		|	ТоварыКОтгрузкеОстатки КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	(ТоварыКОтгрузкеОстатки.КОтгрузкеПриход - ТоварыКОтгрузкеОстатки.КОтгрузкеРасход - ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток > ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|			ИЛИ ТоварыКОтгрузкеОстатки.КСборкеОстаток > 0
		|				И ТоварыКОтгрузкеОстатки.КОтгрузкеПриход - ТоварыКОтгрузкеОстатки.КОтгрузкеРасход - ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток < ТоварыКОтгрузкеОстатки.КСборкеОстаток)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПотребностьВОрдерах.Склад,
		|	ПотребностьВОрдерах.Получатель
		|ИЗ
		|	ПотребностьВОрдерах КАК ПотребностьВОрдерах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПереоформленияРасходныхОрдеров КАК ОчередьПереоформленияРасходныхОрдеров
		|		ПО ПотребностьВОрдерах.Склад = ОчередьПереоформленияРасходныхОрдеров.Склад
		|			И ПотребностьВОрдерах.Получатель = ОчередьПереоформленияРасходныхОрдеров.Получатель
		|ГДЕ
		|	ОчередьПереоформленияРасходныхОрдеров.Склад ЕСТЬ NULL";
		
		ОформлятьСначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить() = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;
		Запрос.УстановитьПараметр("ОформлятьСначалаНакладные", ОформлятьСначалаНакладные);		
		Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками", ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписейОчереди = РегистрыСведений.ОчередьПереоформленияРасходныхОрдеров.СоздатьНаборЗаписей();
			
			НаборЗаписейОчереди.Отбор.Склад.Установить(Выборка.Склад);
			НаборЗаписейОчереди.Отбор.Получатель.Установить(Выборка.Получатель);
			
			ЗаписьОчереди = НаборЗаписейОчереди.Добавить();
			
			ЗаписьОчереди.Склад = Выборка.Склад;
			ЗаписьОчереди.Получатель = Выборка.Получатель;
			
			НаборЗаписейОчереди.Записать();
			
		КонецЦикла;
		
		Выборка.Сбросить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ТекстСообщения = НСтр("ru = 'Не удалось записать в очередь переоформления расходных ордеров по Складу - %Склад%; Получателю - %Получатель% по причине: %Причина%'",
			КодОсновногоЯзыка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Выборка.Склад);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Получатель%", Выборка.Получатель);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если Выборка <> Неопределено Тогда 
		Пока Выборка.Следующий() Цикл
			СтруктураПараметров = Новый Структура("Склад, Получатель", Выборка.Склад, Выборка.Получатель);
			ВыполнитьФоновоеПереоформлениеРасходныхОрдеров(Новый Структура("СтруктураПараметров", СтруктураПараметров));
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗапускВыполненияФоновогоПереоформленияРасходныхОрдеров(СтруктураПараметров) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Переоформление расходных ордеров по Складу - %Склад%; Получателю - %Получатель%'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, "%Склад%", СтруктураПараметров.Склад);
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, "%Получатель%", СтруктураПараметров.Получатель);
	
	ИмяЭкспортнойПроцедуры = "СкладыСервер.ВыполнитьФоновоеПереоформлениеРасходныхОрдеров";
	         
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Новый Структура("СтруктураПараметров", СтруктураПараметров));
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Ключ = "ПереоформлениеРасходныхОрдеров"
			+ Строка(СтруктураПараметров.Склад.УникальныйИдентификатор())
			+ Строка(СтруктураПараметров.Получатель.УникальныйИдентификатор());
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);

КонецПроцедуры

Процедура ВыполнитьФоновоеПереоформлениеРасходныхОрдеров(ПараметрыЗадания) Экспорт
	
	Склад = ПараметрыЗадания.СтруктураПараметров.Склад;
	Получатель = ПараметрыЗадания.СтруктураПараметров.Получатель;
	Если ПараметрыЗадания.Свойство("КоличествоОшибок") Тогда
		
		МаксимальноеКоличествоОшибок = 3;
		
		Если ПараметрыЗадания.КоличествоОшибок >= МаксимальноеКоличествоОшибок Тогда
			
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			
			ТекстСообщения = НСтр("ru = 'Фоновое переоформление расходных ордеров остановлено по Складу - %Склад%; Получателю - %Получатель%. Для дополнительной информации перейдите в рабочее место отгрузки. Количество неудачных попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Получатель%", Получатель);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое переоформление расходных ордеров'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	Иначе
		ПараметрыЗадания.Вставить("КоличествоОшибок", 0);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСозданияРасходныхОрдеров = ПараметрыПереоформленияРасходныхОрдеров();
	ПараметрыСозданияРасходныхОрдеров.Склад = Склад;	
	ПараметрыСозданияРасходныхОрдеров.Получатель = Получатель;
	ПараметрыСозданияРасходныхОрдеров.ФоновоеЗадание = Истина;
	ЕстьОшибка = ПереоформитьРасходныеОрдера(ПараметрыСозданияРасходныхОрдеров).ЕстьОшибка;
	
	Если ЕстьОшибка Тогда
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = НСтр("ru = 'Есть ошибки при переоформлении расходных ордеров. Склад: %Склад%; Получатель: %Получатель%. Количество попыток: %КоличествоОшибок%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Получатель%", Получатель);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое переоформление расходных ордеров'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщения);
	КонецЕсли;	
	
	Если ПроверитьНаличиеЗаписейВОчереди(ПараметрыЗадания) Тогда
		ВыполнитьФоновоеПереоформлениеРасходныхОрдеров(ПараметрыЗадания);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьНаличиеЗаписейВОчереди(ПараметрыЗадания)
	
	ЕстьЗаписиВОчереди = Истина;
	Склад = ПараметрыЗадания.СтруктураПараметров.Склад;
	Получатель = ПараметрыЗадания.СтруктураПараметров.Получатель;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПереоформленияРасходныхОрдеров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Склад",Склад);
		ЭлементБлокировки.УстановитьЗначение("Получатель",Получатель);
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Склад",Склад);
		ЭлементБлокировки.УстановитьЗначение("Получатель",Получатель);
		
		Блокировка.Заблокировать();
		
		Если ТребуетсяПереоформитьРасходныеОрдера(Склад, Получатель) Тогда
			
			ОтменитьТранзакцию();
			Возврат Истина;

		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ОчередьПереоформленияРасходныхОрдеров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(Склад);
		НаборЗаписей.Отбор.Получатель.Установить(Получатель);
		
		НаборЗаписей.Записать();
		
		ЕстьЗаписиВОчереди = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЕстьЗаписиВОчереди = Истина;
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить переоформление расходных ордеров по Складу - %Склад%; Получателю - %Получатель%'",
			КодОсновногоЯзыка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Получатель%", Получатель);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое переоформление расходных ордеров'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщения);
		
	КонецПопытки;
	
	Возврат ЕстьЗаписиВОчереди;
	
КонецФункции

Функция ТребуетсяПереоформитьРасходныеОрдера(Склад, Получатель) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаОборотов.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТаблицаОборотов.Номенклатура     КАК Номенклатура,
		|	ТаблицаОборотов.Характеристика   КАК Характеристика,
		|	ТаблицаОборотов.Назначение       КАК Назначение,
		|	ТаблицаОборотов.Серия            КАК Серия,
		|	ТаблицаОборотов.Склад            КАК Склад,
		|	ТаблицаОборотов.КОтгрузкеПриход  КАК Количество
		|
		|ПОМЕСТИТЬ ТаблицаОборотов
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТаблицаОборотов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
		|	ТаблицаОстатков.Характеристика КАК Характеристика,
		|	ТаблицаОстатков.Назначение КАК Назначение,
		|	ТаблицаОстатков.Серия КАК Серия,
		|	ТаблицаОстатков.Склад КАК Склад
		|ПОМЕСТИТЬ ВТТоварыКОформлениюРасходныхОрдеров
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			Получатель = &Получатель
		|				И Склад = &Склад
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)) КАК ТаблицаОстатков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОборотов КАК ТаблицаОборотов
		|		ПО ТаблицаОстатков.ДокументОтгрузки = ТаблицаОборотов.ДокументОтгрузки
		|			И ТаблицаОстатков.Номенклатура = ТаблицаОборотов.Номенклатура
		|			И ТаблицаОстатков.Характеристика = ТаблицаОборотов.Характеристика
		|			И ТаблицаОстатков.Назначение = ТаблицаОборотов.Назначение
		|			И ТаблицаОстатков.Серия = ТаблицаОборотов.Серия
		|			И ТаблицаОстатков.Склад = ТаблицаОборотов.Склад
		|ГДЕ
		|	ТаблицаОстатков.КОтгрузкеОстаток > ВЫБОР
		|			КОГДА ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|				ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ЕСТЬNULL(ТаблицаОборотов.Количество,0)
		|			ИНАЧЕ 0
		|		КОНЕЦ";
		
		ТекстЗапроса = ТекстЗапроса + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе
		
		ТекстЗапроса = "";
		
	КонецЕсли;
	
	НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку =
		СкладыСервер.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку(Склад);
	
	Если НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку Тогда
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Неопределено,
			"Документ.ЗаданиеНаПеревозку", МенеджерВТ);
			
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыКОтгрузке", "ДокументОтгрузки", МенеджерВТ);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НакладнаяТовары.Ссылка.РеализацияПоЗаказам
		|			ТОГДА НакладнаяТовары.ЗаказКлиента
		|		ИНАЧЕ НакладнаяТовары.Ссылка
		|	КОНЕЦ КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ЗаблокированнныеДокументыОтгрузкиПоЗаданиюНаперевозку
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаблокированоЗаданиеНаПеревозку КАК ВтЗаданияНаПеревозку
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ВтЗаданияНаПеревозку.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК НакладнаяТовары
		|		ПО (НакладнаяТовары.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НакладнаяТовары.Ссылка.ПеремещениеПоЗаказам
		|			ТОГДА НакладнаяТовары.ЗаказНаПеремещение
		|		ИНАЧЕ НакладнаяТовары.Ссылка
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаблокированоЗаданиеНаПеревозку КАК ВтЗаданияНаПеревозку
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ВтЗаданияНаПеревозку.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК НакладнаяТовары
		|		ПО (НакладнаяТовары.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ДокументОтгрузки КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ЗаблокированнныеДокументыОтгрузки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки
		|	ИЗ
		|		ЗаблокированнныеДокументыОтгрузкиПоЗаданиюНаперевозку КАК ДокументыОтгрузки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|	ИЗ
		|		ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Получатель КАК Получатель,
		|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение КАК Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
		|	СУММА(ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеРасход < 0
		|			ТОГДА -ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &ОформлятьСначалаНакладные
		|					ТОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход - ТоварыКОтгрузкеОбороты.КОформлениюПриход
		|				ИНАЧЕ ТоварыКОтгрузкеОбороты.КОтгрузкеПриход
		|			КОНЕЦ
		|	КОНЕЦ) КАК КоличествоКотгрузке,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтгрузкаПоЗаданиюНаПеревозку
		|ПОМЕСТИТЬ ТоварыКотгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			,
		|			Склад = &Склад
		|				И Получатель = &Получатель
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузкеОбороты.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеРасход < 0
		|			ТОГДА -ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &ОформлятьСначалаНакладные
		|					ТОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход - ТоварыКОтгрузкеОбороты.КОформлениюПриход
		|				ИНАЧЕ ТоварыКОтгрузкеОбороты.КОтгрузкеПриход
		|			КОНЕЦ
		|	КОНЕЦ <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Получатель,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Получатель,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	СУММА(ТоварыКОтгрузкеОбороты.КОформлениюРасход),
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			,
		|			Склад = &Склад
		|				И Получатель = &Получатель
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
		|		ПО СостоянияИРеквизитыДоставки.Склад = ТоварыКОтгрузкеОбороты.Склад
		|			И СостоянияИРеквизитыДоставки.Распоряжение = ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|ГДЕ
		|	&ОформлятьСначалаНакладные
		|	И ТоварыКОтгрузкеОбороты.КОформлениюРасход <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОбороты.Назначение,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	ТоварыКОтгрузкеОбороты.Склад,
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Серия,
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Получатель,
		|	ВЫБОР
		|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ИЛИ (&ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками И СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				ИЛИ СостоянияИРеквизитыДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКотгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКотгрузке.Склад КАК Склад,
		|	ТоварыКотгрузке.Получатель КАК Получатель,
		|	ТоварыКотгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКотгрузке.Характеристика КАК Характеристика,
		|	ТоварыКотгрузке.Назначение КАК Назначение,
		|	ТоварыКотгрузке.Серия КАК Серия,
		|	ТоварыКотгрузке.КоличествоКотгрузке,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|					ИЛИ ТоварыКДоставке.ВсеТовары
		|				ТОГДА ТоварыКотгрузке.КоличествоКотгрузке
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТоварыКотгрузке.КоличествоКотгрузке >= ТоварыКДоставке.Количество
		|						ТОГДА ТоварыКДоставке.Количество
		|					ИНАЧЕ ТоварыКотгрузке.КоличествоКотгрузке
		|				КОНЕЦ
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ТоварыКОтгрузкеИДоставке
		|ИЗ
		|	ТоварыКотгрузке КАК ТоварыКотгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
		|		ПО ТоварыКотгрузке.ДокументОтгрузки = ТоварыКДоставке.Распоряжение
		|			И ТоварыКотгрузке.Склад = ТоварыКДоставке.Склад
		|			И (ТоварыКотгрузке.Номенклатура = ТоварыКДоставке.Номенклатура
		|					И ТоварыКотгрузке.Характеристика = ТоварыКДоставке.Характеристика
		|					И ТоварыКотгрузке.Назначение = ТоварыКДоставке.Назначение
		|					И ТоварыКотгрузке.Серия = ТоварыКДоставке.Серия
		|				ИЛИ ТоварыКДоставке.ВсеТовары)
		|			И (ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен)
		|			И (ТоварыКДоставке.ЗаданиеНаПеревозку.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется))
		|			И (ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку)
		|ГДЕ
		|	НЕ(ТоварыКотгрузке.ОтгрузкаПоЗаданиюНаПеревозку
		|				И ТоварыКДоставке.ЗаданиеНаПеревозку ЕСТЬ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКотгрузке.Характеристика,
		|	ТоварыКотгрузке.Получатель,
		|	ТоварыКотгрузке.Серия,
		|	ТоварыКотгрузке.Назначение,
		|	ТоварыКотгрузке.ДокументОтгрузки,
		|	ТоварыКотгрузке.Склад,
		|	ТоварыКотгрузке.Номенклатура,
		|	ТоварыКотгрузке.КоличествоКотгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Получатель,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Назначение,
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.КОтгрузкеРасход КАК Количество
		|ПОМЕСТИТЬ ТоварыКотгрузкеРасход
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			,
		|			Склад = &Склад
		|				И Получатель = &Получатель
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузке
		|ГДЕ
		| ТоварыКОтгрузке.КОтгрузкеРасход > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия,
		|	СУММА(ТоварыКОтгрузкеОстатки.СобираетсяОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток) КАК Количество
		|ПОМЕСТИТЬ ТоварыСобраноСобирается
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			Склад = &Склад
		|				И Получатель = &Получатель
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.СобираетсяОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия,
		|	СУММА(ТоварыКОтгрузкеОстатки.КСборкеОстаток) КАК Количество
		|ПОМЕСТИТЬ ТоварыКСборке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			Склад = &Склад
		|				И Получатель = &Получатель
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ЗаблокированнныеДокументыОтгрузки КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.КСборкеОстаток <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия,
		|	СУММА(ТоварыКОтгрузкеОстатки.КОтгрузкеПриход) КАК КОтгрузкеПриход,
		|	СУММА(ТоварыКОтгрузкеОстатки.КОтгрузкеРасход) КАК КОтгрузкеРасход,
		|	СУММА(ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток) КАК СобираетсяСобраноОстаток,
		|	СУММА(ТоварыКОтгрузкеОстатки.КСборкеОстаток) КАК КСборкеОстаток
		|ПОМЕСТИТЬ ТоварыКОтгрузкеОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКОтгрузкеИДоставке.ДокументОтгрузки КАК ДокументОтгрузки,
		|		ТоварыКОтгрузкеИДоставке.Склад КАК Склад,
		|		ТоварыКОтгрузкеИДоставке.Получатель КАК Получатель,
		|		ТоварыКОтгрузкеИДоставке.Номенклатура КАК Номенклатура,
		|		ТоварыКОтгрузкеИДоставке.Характеристика КАК Характеристика,
		|		ТоварыКОтгрузкеИДоставке.Назначение КАК Назначение,
		|		ТоварыКОтгрузкеИДоставке.Серия КАК Серия,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеИДоставке.Количество < ТоварыКОтгрузкеИДоставке.КоличествоКотгрузке
		|				ТОГДА ТоварыКОтгрузкеИДоставке.Количество
		|			ИНАЧЕ ТоварыКОтгрузкеИДоставке.КоличествоКотгрузке
		|		КОНЕЦ КАК КОтгрузкеПриход,
		|		0 КАК КОтгрузкеРасход,
		|		0 КАК СобираетсяСобраноОстаток,
		|		0 КАК КСборкеОстаток
		|	ИЗ
		|		ТоварыКОтгрузкеИДоставке КАК ТоварыКОтгрузкеИДоставке
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКотгрузкеРасход.ДокументОтгрузки,
		|		ТоварыКотгрузкеРасход.Склад,
		|		ТоварыКотгрузкеРасход.Получатель,
		|		ТоварыКотгрузкеРасход.Номенклатура,
		|		ТоварыКотгрузкеРасход.Характеристика,
		|		ТоварыКотгрузкеРасход.Назначение,
		|		ТоварыКотгрузкеРасход.Серия,
		|		0,
		|		ТоварыКотгрузкеРасход.Количество,
		|		0,
		|		0
		|	ИЗ
		|		ТоварыКотгрузкеРасход КАК ТоварыКотгрузкеРасход
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыСобраноСобирается.ДокументОтгрузки,
		|		ТоварыСобраноСобирается.Склад,
		|		ТоварыСобраноСобирается.Получатель,
		|		ТоварыСобраноСобирается.Номенклатура,
		|		ТоварыСобраноСобирается.Характеристика,
		|		ТоварыСобраноСобирается.Назначение,
		|		ТоварыСобраноСобирается.Серия,
		|		0,
		|		0,
		|		ТоварыСобраноСобирается.Количество,
		|		0
		|	ИЗ
		|		ТоварыСобраноСобирается КАК ТоварыСобраноСобирается
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКСборке.ДокументОтгрузки,
		|		ТоварыКСборке.Склад,
		|		ТоварыКСборке.Получатель,
		|		ТоварыКСборке.Номенклатура,
		|		ТоварыКСборке.Характеристика,
		|		ТоварыКСборке.Назначение,
		|		ТоварыКСборке.Серия,
		|		0,
		|		0,
		|		0,
		|		ТоварыКСборке.Количество
		|	ИЗ
		|		ТоварыКСборке КАК ТоварыКСборке) КАК ТоварыКОтгрузкеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеПриход,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеРасход,
		|	ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток,
		|	ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|ИЗ
		|	ТоварыКОтгрузкеОстатки КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеПриход - ТоварыКОтгрузкеОстатки.КОтгрузкеРасход - ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток > ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|			ИЛИ ТоварыКОтгрузкеОстатки.КСборкеОстаток > 0 И
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеПриход - ТоварыКОтгрузкеОстатки.КОтгрузкеРасход - ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток < ТоварыКОтгрузкеОстатки.КСборкеОстаток";
		
	Иначе
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Неопределено,
			"РегистрНакопления.ТоварыКОтгрузке", "ДокументОтгрузки", МенеджерВТ);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = ТекстЗапроса +
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	ТоварыКОтгрузкеОстатки.Получатель,
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Назначение,
		|	ТоварыКОтгрузкеОстатки.Серия
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			Склад = &Склад
		|				И Получатель = &Получатель
		|				И НЕ ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ВТЗаблокированоТоварыКОтгрузке.ДокументОтгрузки
		|						ИЗ
		|							ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке)
		|				И &УсловиеДопустимоеОтклонение) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	(&ОформлятьСначалаНакладные
		|				И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.КОформлениюОстаток - ТоварыКОтгрузкеОстатки.СобираетсяОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток > ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|			ИЛИ НЕ &ОформлятьСначалаНакладные
		|				И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.СобираетсяОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток > ТоварыКОтгрузкеОстатки.КСборкеОстаток)
		|	ИЛИ ТоварыКОтгрузкеОстатки.КСборкеОстаток > 0 И 
		|	(&ОформлятьСначалаНакладные
		|				И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.КОформлениюОстаток - ТоварыКОтгрузкеОстатки.СобираетсяОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток < ТоварыКОтгрузкеОстатки.КСборкеОстаток
		|			ИЛИ НЕ &ОформлятьСначалаНакладные
		|				И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.СобираетсяОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток < ТоварыКОтгрузкеОстатки.КСборкеОстаток)";
		
	КонецЕсли;
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
		УсловиеДопустимоеОтклонение = "(ДокументОтгрузки, Номенклатура, Характеристика, Назначение, Серия, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументОтгрузки,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Назначение,
		|					Таблица.Серия,
		|					Таблица.Склад
		|				ИЗ
		|					ВТТоварыКОформлениюРасходныхОрдеров КАК Таблица)"
	Иначе
		УсловиеДопустимоеОтклонение = "Истина";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеДопустимоеОтклонение", УсловиеДопустимоеОтклонение);
	
	ОформлятьСначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить() = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;
	Запрос.УстановитьПараметр("ОформлятьСначалаНакладные", ОформлятьСначалаНакладные);	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками", ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());	

	Возврат Не Запрос.Выполнить().Пустой()
	
КонецФункции

Функция ПолучателиПоКоторымНетФоновогоЗаданияПереоформленияОрдеров(Склад) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьПереоформленияРасходныхОрдеров.Получатель
	|ИЗ
	|	РегистрСведений.ОчередьПереоформленияРасходныхОрдеров КАК ОчередьПереоформленияРасходныхОрдеров
	|ГДЕ
	|	ОчередьПереоформленияРасходныхОрдеров.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПереоформленияРасходныхОрдеров");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Склад",Склад);
			ЭлементБлокировки.УстановитьЗначение("Получатель",Выборка.Получатель);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Склад",Склад);
			ЭлементБлокировки.УстановитьЗначение("Получатель",Выборка.Получатель);
			
			Блокировка.Заблокировать();
			
			Если ТребуетсяПереоформитьРасходныеОрдера(Склад, Выборка.Получатель) Тогда
				
				ОтменитьТранзакцию();
				
				Ключ = "ПереоформлениеРасходныхОрдеров"
					+ Строка(Склад.УникальныйИдентификатор())
					+ Строка(Выборка.Получатель.УникальныйИдентификатор());
				
				Отбор = Новый Структура();
				Отбор.Вставить("Ключ", Ключ);
				Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
				
				АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
				
				Если АктивныеЗадания.Количество() = 0 Тогда
					Результат.Добавить(Выборка.Получатель);
				КонецЕсли;	
				
			Иначе
			
				НаборЗаписей = РегистрыСведений.ОчередьПереоформленияРасходныхОрдеров.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Склад.Установить(Склад);
				НаборЗаписей.Отбор.Получатель.Установить(Выборка.Получатель);
				
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
			
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			ТекстСообщения = НСтр("ru = 'Не удалось записать в очередь переоформления расходных ордеров по Складу - %Склад%; Получателю - %Получатель% по причине: %Причина%'",
				КодОсновногоЯзыка);
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Выборка.Склад);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Получатель%", Выборка.Получатель);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает таблицу с типами документов и сответствующим им типами складских операций.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений с колонками:
//		*СкладскаяОперация - ПеречислениеСсылка.СкладскиеОперации
//		*Тип
//		*ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
Функция ТекстЗапросаСкладскаяОперацияТипДокумента() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКлиенту) КАК СкладскаяОперация,
	|	ТИП(Документ.РеализацияТоваровУслуг) КАК Тип,
	|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ СкладскаяОперацияТипДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКлиенту),
	|	ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента),
	|	НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКлиенту),
	|	ТИП(Документ.ЗаказКлиента),
	|	НЕОПРЕДЕЛЕНО
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки),
	|	ТИП(Документ.СборкаТоваров),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки),
	|	ТИП(Документ.СборкаТоваров),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки),
	|	ТИП(Документ.ЗаказНаСборку),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки),
	|	ТИП(Документ.ЗаказНаСборку),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению),
	|	ТИП(Документ.ПеремещениеТоваров),
	|	НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению),
	|	ТИП(Документ.ЗаказНаПеремещение),
	|	НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику),
	|	ТИП(Документ.ВозвратТоваровПоставщику),
	|	НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды),
	|	ТИП(Документ.ВнутреннееПотреблениеТоваров),
	|	НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды),
	|	ТИП(Документ.ЗаказНаВнутреннееПотребление),
	|	НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику),
	|	ТИП(Документ.АктОРасхожденияхПослеПриемки),
	|	НЕОПРЕДЕЛЕНО
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению),
	|	ТИП(Документ.АктОРасхожденияхПослеПеремещения),
	|	НЕОПРЕДЕЛЕНО
	|
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Процедура ЗапускВыполненияФоновогоПереводаСтатусаРасходногоОрдераВОтгружено(ЗаданиеНаПеревозку) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Перевод статусов расходных ордеров в ""Отгружено"" по отправленному заданию на перевозку - %ЗаданиеНаПеревозку%'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, "%ЗаданиеНаПеревозку%", ЗаданиеНаПеревозку);
	
	ИмяЭкспортнойПроцедуры = "СкладыСервер.ВыполнитьФоновоеИзменениеСтатусаРасходныхОрдеровПоОтправленномуЗаданиюНаПеревозку";
	         
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ЗаданиеНаПеревозку);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Ключ = "ОчисткаТоварыКДоставке"
			+ Строка(ЗаданиеНаПеревозку.УникальныйИдентификатор());
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);

КонецПроцедуры

Процедура ВыполнитьФоновоеИзменениеСтатусаРасходныхОрдеровПоОтправленномуЗаданиюНаПеревозку(ЗаданиеНаПеревозку) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КОтгрузке)
	|	И РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Проведен
	|	И (РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыто)
	|	ИЛИ РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Отправлено))";
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйОрдерНаТовары");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
				
			РасходныйОрдерОбъект = Выборка.Ссылка.ПолучитьОбъект();
			РасходныйОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			РасходныйОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %Документ% фоновым заданием изменения статуса по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РасходныйОрдерНаТовары,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры	

Процедура ДобавитьВОчередьФормированияРасходныхОрдеров(Склад, Получатель, Регистратор = Неопределено) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПереоформленияРасходныхОрдеров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Склад",Склад);
	ЭлементБлокировки.УстановитьЗначение("Получатель",Получатель);
	Блокировка.Заблокировать();		
	
	НаборЗаписейОчереди = РегистрыСведений.ОчередьПереоформленияРасходныхОрдеров.СоздатьНаборЗаписей();
	
	НаборЗаписейОчереди.Отбор.Склад.Установить(Склад);
	НаборЗаписейОчереди.Отбор.Получатель.Установить(Получатель);
	
	НаборЗаписейОчереди.Прочитать();
	
	Если НаборЗаписейОчереди.Количество() = 0 Тогда
		
		ЗаписьОчереди = НаборЗаписейОчереди.Добавить();
		
		ЗаписьОчереди.Склад = Склад;
		ЗаписьОчереди.Получатель = Получатель;
		
		Попытка
			НаборЗаписейОчереди.Записать();
		Исключение
			
			Если ЗначениеЗаполнено(Регистратор) Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить проведение документа: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, Регистратор.Метаданные(), Регистратор, ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось сформировать очередь расходных ордеров по складу %Склад% и получателю %Получатель%.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Получатель%", Получатель);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецЕсли;
			
			ВызватьИсключение;
			
		КонецПопытки;
		
		СтруктураПараметров = Новый Структура("Склад, Получатель", Склад, Получатель);
		СкладыСервер.ЗапускВыполненияФоновогоПереоформленияРасходныхОрдеров(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФоновоеЗаданиеКорректировкаИзлишковНедостачПоТоварнымМестам

Процедура ДобавитьВОчередьФормированияКорректировкаИзлишковНедостачПоТоварнымМестам(Склад, Помещение, Регистратор = Неопределено) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Склад",Склад);
	ЭлементБлокировки.УстановитьЗначение("Помещение",Помещение);
	Блокировка.Заблокировать();		
	
	НаборЗаписейОчереди = РегистрыСведений.ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам.СоздатьНаборЗаписей();
	
	НаборЗаписейОчереди.Отбор.Склад.Установить(Склад);
	НаборЗаписейОчереди.Отбор.Помещение.Установить(Помещение);
	
	НаборЗаписейОчереди.Прочитать();
	
	Если НаборЗаписейОчереди.Количество() = 0 Тогда
		
		ЗаписьОчереди = НаборЗаписейОчереди.Добавить();
		
		ЗаписьОчереди.Склад = Склад;
		ЗаписьОчереди.Помещение = Помещение;
		
		Попытка
			НаборЗаписейОчереди.Записать();
		Исключение
			
			Если ЗначениеЗаполнено(Регистратор) Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить проведение документа: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, Регистратор.Метаданные(), Регистратор, ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось сформировать очередь корректировок излишков и недостач по товарным местам по складу %Склад% и помещение %Помещение%.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Помещение%", Помещение);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецЕсли;
			
			ВызватьИсключение;
			
		КонецПопытки;
		
		СтруктураПараметров = Новый Структура("Склад, Помещение", Склад, Помещение);
		СкладыСервер.ЗапускВыполненияФоновогоФормированияКорректировокИзлишковНедостачПоТоварнымМестам(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапускВыполненияФоновогоФормированияКорректировокИзлишковНедостачПоТоварнымМестам(СтруктураПараметров) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Формирование корректировок излишков и недостач по товарным местам по Складу - %Склад%; Помещению - %Помещение%'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, "%Склад%", СтруктураПараметров.Склад);
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, "%Помещение%", СтруктураПараметров.Помещение);
	
	ИмяЭкспортнойПроцедуры = "СкладыСервер.ВыполнитьФоновоеФормированиеКорректировокИзлишковНедостачПоТоварнымМестам";
	         
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Новый Структура("СтруктураПараметров", СтруктураПараметров));
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Ключ = "ФормированиеКорректировокИзлишковНедостачПоТоварнымМестам"
			+ Строка(СтруктураПараметров.Склад.УникальныйИдентификатор())
			+ Строка(СтруктураПараметров.Помещение.УникальныйИдентификатор());
			
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);

КонецПроцедуры

Процедура ВыполнитьФоновоеФормированиеКорректировокИзлишковНедостачПоТоварнымМестам(ПараметрыЗадания) Экспорт
	
	Склад = ПараметрыЗадания.СтруктураПараметров.Склад;
	Помещение = ПараметрыЗадания.СтруктураПараметров.Помещение;
	Если ПараметрыЗадания.Свойство("КоличествоОшибок") Тогда
		
		МаксимальноеКоличествоОшибок = 3;
		
		Если ПараметрыЗадания.КоличествоОшибок >= МаксимальноеКоличествоОшибок Тогда
			
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			
			ТекстСообщения = НСтр("ru = 'Фоновое формирование корректировок излишков и недостач по товарным местам остановлено по Складу - %Склад%; Помещению - %Помещение%. Для дополнительной информации перейдите к списку пересчетов товаров. Количество неудачных попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Помещение%", Помещение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое формирование корректировок излишков и недостач по товарным местам'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	Иначе
		ПараметрыЗадания.Вставить("КоличествоОшибок", 0);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьОшибка = Ложь;
	
	Если ПроверитьНаличиеЗаписейВОчередиФормированияКорректировокИзлишковИНедостачПоТоварнымМестам(ПараметрыЗадания) Тогда
		ЕстьОшибка = СформироватьКорректировкиИзлишковНедостачПоТоварнымМестам(ПараметрыЗадания);
	КонецЕсли;	
	
	Если ЕстьОшибка Тогда
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = НСтр("ru = 'Есть ошибки при оформлении корректировок излишков и недостач по товарным местам. Склад: %Склад%; Помещение: %Помещение%. Количество попыток: %КоличествоОшибок%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Помещение%", Помещение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое оформление корректировокизлишков и недостач по товарным местам'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщения);
	КонецЕсли;
		
		
	Если ПроверитьНаличиеЗаписейВОчередиФормированияКорректировокИзлишковИНедостачПоТоварнымМестам(ПараметрыЗадания) Тогда
		ВыполнитьФоновоеФормированиеКорректировокИзлишковНедостачПоТоварнымМестам(ПараметрыЗадания);
	КонецЕсли;	
	
КонецПроцедуры

Функция СформироватьКорректировкиИзлишковНедостачПоТоварнымМестам(ПараметрыЗадания) Экспорт  
	
	ЕстьОшибка = Ложь;
	
	Если ПараметрыЗадания.ИзлишкиНедостачи.Количество() = 0 Тогда
		Возврат ЕстьОшибка;		
	КонецЕсли;	
	
	ДокументОбъект = Документы.КорректировкаИзлишковНедостачПоТоварнымМестам.СоздатьДокумент();
	
	ДокументОбъект.Склад     = ПараметрыЗадания.СтруктураПараметров.Склад;
	ДокументОбъект.Помещение = ПараметрыЗадания.СтруктураПараметров.Помещение;
	ДокументОбъект.Дата      = ТекущаяДатаСеанса();
	
	ДокументОбъект.Товары.Загрузить(ПараметрыЗадания.ИзлишкиНедостачи);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.КорректировкаИзлишковНедостачПоТоварнымМестам);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);				
	Исключение
		
		ЕстьОшибка = Истина;
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать корректировку излишков и недостач по товарным местам фоновым заданием по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДокументОбъект.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РасходныйОрдерНаТовары,
				ДокументОбъект.Ссылка,
				ТекстСообщения);
				
	КонецПопытки;
			
	Возврат ЕстьОшибка;		
	
КонецФункции

Функция ПроверитьНаличиеЗаписейВОчередиФормированияКорректировокИзлишковИНедостачПоТоварнымМестам(ПараметрыЗадания)
	
	ЕстьЗаписиВОчереди = Истина;
	Склад = ПараметрыЗадания.СтруктураПараметров.Склад;
	Помещение = ПараметрыЗадания.СтруктураПараметров.Помещение;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Склад", Склад);
		ЭлементБлокировки.УстановитьЗначение("Помещение", Помещение);
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварныеМестаКОтражениюИзлишковНедостач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Склад", Склад);
		ЭлементБлокировки.УстановитьЗначение("Помещение", Помещение);
		
		Блокировка.Заблокировать();
		
		Если Не ТребуетсяСформироватьКорректировкиИзлишковНедостачПоТоварнымМестам(ПараметрыЗадания) Тогда
			
			НаборЗаписей = РегистрыСведений.ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Склад.Установить(Склад);
			НаборЗаписей.Отбор.Помещение.Установить(Помещение);
			
			НаборЗаписей.Записать();
			
			ЕстьЗаписиВОчереди = Ложь;
			
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЕстьЗаписиВОчереди = Истина;
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить оформление корректировок излишков и недостач по товарным местам по Складу - %Склад%; Помещение - %Помещение%'",
			КодОсновногоЯзыка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Помещение%", Помещение);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое оформление корректировок излишков и недостач по товарным местам'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщения);
		
	КонецПопытки;
	
	Возврат ЕстьЗаписиВОчереди;
	
КонецФункции

Функция ТребуетсяСформироватьКорректировкиИзлишковНедостачПоТоварнымМестам(ПараметрыЗадания)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварныеМестаОстатки.Склад,
	|	ТоварныеМестаОстатки.Помещение,
	|	ТоварныеМестаОстатки.Номенклатура,
	|	ТоварныеМестаОстатки.Характеристика,
	|	ТоварныеМестаОстатки.Назначение,
	|	ТоварныеМестаОстатки.Серия,
	|	ТоварныеМестаОстатки.ТоварноеМесто,
	|	ТоварныеМестаОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТТоварныеМестаОстатки
	|ИЗ
	|	РегистрНакопления.ТоварныеМестаКОтражениюИзлишковНедостач.Остатки(
	|			,
	|			Склад = &Склад
	|				И Помещение = &Помещение) КАК ТоварныеМестаОстатки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТТоварныеМестаОстатки");	
	ТекстЗапросаВТТоварныеМестаКОтражениюИзлишковНедостач(ТекстыЗапроса, Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", ПараметрыЗадания.СтруктураПараметров.Склад);
	Запрос.УстановитьПараметр("Помещение", ПараметрыЗадания.СтруктураПараметров.Помещение);
	
	ИзлишкиНедостачи = 	ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос,ТекстыЗапроса,,Истина).ВТТоварныеМестаКОтражениюИзлишковНедостач;
	ПараметрыЗадания.Вставить("ИзлишкиНедостачи", ИзлишкиНедостачи);
	
	Возврат ИзлишкиНедостачи.Количество() <> 0;
	
КонецФункции

Функция ТекстЗапросаВТТоварныеМестаКОтражениюИзлишковНедостач(ТекстыЗапроса, ВыбратьДанные = Ложь) Экспорт
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТТоварныеМестаНоменклатуры", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТоварныеМестаНоменклатуры(ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКомплектыПоТоварнымМестаКОтражениюИзлишковНедостач", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКомплектыПоТоварнымМестаКОтражениюИзлишковНедостач(ТекстыЗапроса);
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КомплектыКОформлению.Номенклатура,
	|	КомплектыКОформлению.Характеристика,
	|	КомплектыКОформлению.Назначение,
	|	КомплектыКОформлению.Серия,
	|	КомплектыКОформлению.ВидОперации,
	|	КомплектыКОформлению.КоличествоКомплектов КАК Количество,
	|	ТоварныеМестаНоменклатуры.ТоварноеМесто КАК Упаковка,
	|	КомплектыКОформлению.КоличествоКомплектов * ТоварныеМестаНоменклатуры.КоличествоМест КАК КоличествоУпаковок
	|//ПОМЕСТИТЬ ВТТоварныеМестаКОтражениюИзлишковНедостач
	|ИЗ
	|	ВТКомплектыПоТоварнымМестаКОтражениюИзлишковНедостач КАК КомплектыКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварныеМестаНоменклатуры КАК ТоварныеМестаНоменклатуры
	|		ПО КомплектыКОформлению.Номенклатура = ТоварныеМестаНоменклатуры.Номенклатура
	|			И КомплектыКОформлению.Характеристика = ТоварныеМестаНоменклатуры.Характеристика
	|			И КомплектыКОформлению.Назначение = ТоварныеМестаНоменклатуры.Назначение
	|			И КомплектыКОформлению.Серия = ТоварныеМестаНоменклатуры.Серия";
	
	Если НЕ ВыбратьДанные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ");
	КонецЕсли;
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТТоварныеМестаКОтражениюИзлишковНедостач");	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварныеМестаНоменклатуры(ТекстыЗапроса)
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТТоварныеМестаОстатки", ТекстыЗапроса) Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка вызова функции СкладыСервер.ТекстЗапросаВТТоварныеМестаНоменклатуры(): в запрос не добавлена таблица ВТТоварныеМестаОстатки'");
	КонецЕсли;
	
	ИмяТаблицы = "ВТТоварныеМестаНоменклатуры";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварныеМестаОстатки.Склад,
	|	ТоварныеМестаОстатки.Помещение,
	|	ТоварныеМестаОстатки.Номенклатура,
	|	ТоварныеМестаОстатки.Характеристика,
	|	ТоварныеМестаОстатки.Назначение,
	|	ТоварныеМестаОстатки.Серия,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК КоличествоМест
	|ПОМЕСТИТЬ ВТТоварныеМестаНоменклатуры
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварныеМестаОстатки КАК ТоварныеМестаОстатки
	|		ПО (УпаковкиЕдиницыИзмерения.Владелец = ВЫБОР
	|				КОГДА ТоварныеМестаОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА ТоварныеМестаОстатки.Номенклатура.Ссылка
	|				ИНАЧЕ ТоварныеМестаОстатки.Номенклатура.НаборУпаковок
	|			КОНЕЦ)
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаВТКомплектыПоТоварнымМестаКОтражениюИзлишковНедостач(ТекстыЗапроса) Экспорт
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТТоварныеМестаОстатки", ТекстыЗапроса) Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка вызова функции СкладыСервер.ВТКомплектыПоТоварнымМестаКОтражениюИзлишковНедостач(): в запрос не добавлена таблица ВТТоварныеМестаОстатки'");
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТТоварныеМестаНоменклатуры", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТоварныеМестаНоменклатуры(ТекстыЗапроса);
	КонецЕсли;
	
	ИмяТаблицы = "ВТКомплектыПоТоварнымМестаКОтражениюИзлишковНедостач";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварныеМестаНоменклатуры.Склад КАК Склад,
	|	ТоварныеМестаНоменклатуры.Помещение КАК Помещение,
	|	ТоварныеМестаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТоварныеМестаНоменклатуры.Характеристика КАК Характеристика,
	|	ТоварныеМестаНоменклатуры.Назначение КАК Назначение,
	|	ТоварныеМестаНоменклатуры.Серия КАК Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишек) КАК ВидОперации,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))) - ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест <= 0
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))) - 1
	|		КОНЕЦ) КАК КоличествоКомплектов
	|ПОМЕСТИТЬ ВТКомплектыПоТоварнымМестаКОтражениюИзлишковНедостач
	|ИЗ
	|	ВТТоварныеМестаНоменклатуры КАК ТоварныеМестаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварныеМестаОстатки КАК ТоварныеМестаОстатки
	|		ПО ТоварныеМестаНоменклатуры.Склад = ТоварныеМестаОстатки.Склад
	|			И ТоварныеМестаНоменклатуры.Помещение = ТоварныеМестаОстатки.Помещение
	|			И ТоварныеМестаНоменклатуры.Номенклатура = ТоварныеМестаОстатки.Номенклатура
	|			И ТоварныеМестаНоменклатуры.Характеристика = ТоварныеМестаОстатки.Характеристика
	|			И ТоварныеМестаНоменклатуры.Назначение = ТоварныеМестаОстатки.Назначение
	|			И ТоварныеМестаНоменклатуры.Серия = ТоварныеМестаОстатки.Серия
	|			И ТоварныеМестаНоменклатуры.ТоварноеМесто = ТоварныеМестаОстатки.ТоварноеМесто
	|			И (ТоварныеМестаОстатки.КоличествоОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныеМестаНоменклатуры.Серия,
	|	ТоварныеМестаНоменклатуры.Назначение,
	|	ТоварныеМестаНоменклатуры.Помещение,
	|	ТоварныеМестаНоменклатуры.Характеристика,
	|	ТоварныеМестаНоменклатуры.Склад,
	|	ТоварныеМестаНоменклатуры.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))) - ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест <= 0
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))) - 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварныеМестаНоменклатуры.Склад,
	|	ТоварныеМестаНоменклатуры.Помещение,
	|	ТоварныеМестаНоменклатуры.Номенклатура,
	|	ТоварныеМестаНоменклатуры.Характеристика,
	|	ТоварныеМестаНоменклатуры.Назначение,
	|	ТоварныеМестаНоменклатуры.Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу),
	|	-МИНИМУМ(ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))) - ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест > 0
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))- 1
	|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))) 
	|		КОНЕЦ)
	|ИЗ
	|	ВТТоварныеМестаНоменклатуры КАК ТоварныеМестаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварныеМестаОстатки КАК ТоварныеМестаОстатки
	|		ПО ТоварныеМестаНоменклатуры.Склад = ТоварныеМестаОстатки.Склад
	|			И ТоварныеМестаНоменклатуры.Помещение = ТоварныеМестаОстатки.Помещение
	|			И ТоварныеМестаНоменклатуры.Номенклатура = ТоварныеМестаОстатки.Номенклатура
	|			И ТоварныеМестаНоменклатуры.Характеристика = ТоварныеМестаОстатки.Характеристика
	|			И ТоварныеМестаНоменклатуры.Назначение = ТоварныеМестаОстатки.Назначение
	|			И ТоварныеМестаНоменклатуры.Серия = ТоварныеМестаОстатки.Серия
	|			И ТоварныеМестаНоменклатуры.ТоварноеМесто = ТоварныеМестаОстатки.ТоварноеМесто
	|			И (ТоварныеМестаОстатки.КоличествоОстаток < 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныеМестаНоменклатуры.Серия,
	|	ТоварныеМестаНоменклатуры.Назначение,
	|	ТоварныеМестаНоменклатуры.Помещение,
	|	ТоварныеМестаНоменклатуры.Характеристика,
	|	ТоварныеМестаНоменклатуры.Склад,
	|	ТоварныеМестаНоменклатуры.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	-МИНИМУМ(ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))) - ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест > 0
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))- 1
	|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТоварныеМестаОстатки.КоличествоОстаток, 0) / ТоварныеМестаНоменклатуры.КоличествоМест КАК ЧИСЛО(12, 0))) 
	|		КОНЕЦ)> 0";	
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПомещенияПоКоторымНетФоновогоЗаданияФормированияКорректировокИзлишковНедостачПоТоварнымМестам(Склад) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Результат = Новый Массив;
	Блокировка = Новый БлокировкаДанных;
		
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.УстановитьЗначение("Склад", Склад);
		
	Попытка
		
		Блокировка.Заблокировать();
		
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать регистр сведений ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам по складу ""%Склад%"" для проверки работы фоновых заданий по причине: %Причина%'",
			КодОсновногоЯзыка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Склад);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщения);
		
		Возврат Результат;
		
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам.Склад,
	|	ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам.Помещение
	|ИЗ
	|	РегистрСведений.ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам КАК ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам
	|ГДЕ
	|	ОчередьФормированияКорректировокИзлишковИНедостачПоТоварнымМестам.Склад = &Склад";
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Ключ = "ФормированиеКорректировокИзлишковНедостачПоТоварнымМестам"
		+ Строка(Выборка.Склад.УникальныйИдентификатор())
		+ Строка(Выборка.Помещение.УникальныйИдентификатор());
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если АктивныеЗадания.Количество() = 0 Тогда
			Результат.Добавить(Выборка.Помещение);
		КонецЕсли;
		
	КонецЦикла;
	
	ОтменитьТранзакцию();
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Возвращает должность ответственного лица склада.
//
// Параметры:
//	СкладИлиДолжность - Строка или ссылка на склад или помещение
//
//	Возвращаемое значение:
//		Строка - должность; если должность ответственного лица не заполнена, будет возвращено значение "по-умолчанию"
//
Функция ДолжностьОтветственногоЛицаСклада(СкладИлиДолжность) Экспорт
	
	Если ТипЗнч(СкладИлиДолжность) = Тип("Строка") Тогда
		Должность = СокрЛП(СкладИлиДолжность);
	Иначе
		Должность = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладИлиДолжность, "ТекущаяДолжностьОтветственного"));
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Должность), Должность, НСтр("ru = 'Кладовщик'"));
	
КонецФункции

// Определяет, есть ли в базе склады без ордерной схемы на отражение излишков и недостач
// Возвращаемое значение:
//  Булево 
Функция ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады") Тогда
		Возврат Истина;
 	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|	И НЕ Склады.ЭтоГруппа";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Дополняет текст запроса для формирования печатных форм МХ-1, МХ-3
//
//Параметры:
//	Запрос - Запрос - Выполняемый запрос
//
Процедура ДополнитьТекстЗапросаДляПечатныхФормМХ1Х3(Запрос) Экспорт
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыЦенНоменклатуры.Ссылка,
	|	ПериодыЦенНоменклатуры.НомерСтроки,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Упаковка
	|ПОМЕСТИТЬ ЦеныПоВидуЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.НомерСтроки КАК НомерСтроки,
	|		ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|		МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	|	ИЗ
	|		ВтТовары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|			ПО Товары.ВидЦены = ЦеныНоменклатуры.ВидЦены
	|				И Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|				И Товары.Характеристика = ЦеныНоменклатуры.Характеристика
	|				И Товары.ДатаПолученияЦены >= ЦеныНоменклатуры.Период
	|				И Товары.ВалютаЦены = ЦеныНоменклатуры.Валюта
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Ссылка,
	|		Товары.НомерСтроки,
	|		ЦеныНоменклатуры.ВидЦены,
	|		ЦеныНоменклатуры.Номенклатура,
	|		ЦеныНоменклатуры.Характеристика) КАК ПериодыЦенНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ПериодыЦенНоменклатуры.Период = ЦеныНоменклатуры.Период
	|			И ПериодыЦенНоменклатуры.ВидЦены = ЦеныНоменклатуры.ВидЦены
	|			И ПериодыЦенНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ПериодыЦенНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыСтоимостиТоваров.Ссылка,
	|	СтоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	СтоимостьТоваров.ВидЗапасов КАК ВидЗапасов,
	|	СтоимостьТоваров.Организация КАК Организация,
	|	(СтоимостьТоваров.СтоимостьРегл
	|		+ СтоимостьТоваров.ДопРасходыРегл
	|		+ СтоимостьТоваров.ТрудозатратыРегл
	|		+ СтоимостьТоваров.ПостатейныеПостоянныеРегл
	|		+ СтоимостьТоваров.ПостатейныеПеременныеРегл) КАК Стоимость
	|ПОМЕСТИТЬ ЦеныПоСебестоимостиПредварительно
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидыЗапасов.Ссылка КАК Ссылка,
	|		СтоимостьТоваров.ВидЗапасов КАК ВидЗапасов,
	|		СтоимостьТоваров.Организация КАК Организация,
	|		СтоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		МАКСИМУМ(СтоимостьТоваров.Период) КАК Период
	|	ИЗ
	|		ВтВидыЗапасов КАК ВидыЗапасов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьТоваров КАК СтоимостьТоваров
	|			ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = СтоимостьТоваров.АналитикаУчетаНоменклатуры
	|				И ВидыЗапасов.Организация = СтоимостьТоваров.Организация
	|				И (ВидыЗапасов.ВидЗапасов = СтоимостьТоваров.ВидЗапасов
	|						И &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|					ИЛИ НЕ &УчитыватьСебестоимостьТоваровПоВидамЗапасов)
	|				И ВидыЗапасов.ДатаПолученияЦены >= СтоимостьТоваров.Период
	|				И (ВидыЗапасов.ПредварительныйРасчет)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВидыЗапасов.Ссылка,
	|		СтоимостьТоваров.ВидЗапасов,
	|		СтоимостьТоваров.Организация,
	|		СтоимостьТоваров.АналитикаУчетаНоменклатуры) КАК ПериодыСтоимостиТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьТоваров КАК СтоимостьТоваров
	|		ПО ПериодыСтоимостиТоваров.АналитикаУчетаНоменклатуры = СтоимостьТоваров.АналитикаУчетаНоменклатуры
	|			И ПериодыСтоимостиТоваров.Организация = СтоимостьТоваров.Организация
	|			И ПериодыСтоимостиТоваров.Период = СтоимостьТоваров.Период
	|			И (ПериодыСтоимостиТоваров.ВидЗапасов = СтоимостьТоваров.ВидЗапасов
	|					И &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|				ИЛИ НЕ &УчитыватьСебестоимостьТоваровПоВидамЗапасов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка КАК Ссылка,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.ВидЗапасов КАК ВидЗапасов,
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СУММА(СебестоимостьТоваров.СтоимостьРегл
	|		+ СебестоимостьТоваров.ДопРасходыРегл
	|		+ СебестоимостьТоваров.ТрудозатратыРегл
	|		+ СебестоимостьТоваров.ПостатейныеПостоянныеРегл
	|		+ СебестоимостьТоваров.ПостатейныеПеременныеРегл
	|	) КАК Стоимость
	|ПОМЕСТИТЬ ЦеныПоСебестоимости
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ВидыЗапасов
	|		ПО (ВидыЗапасов.Ссылка = СебестоимостьТоваров.ДокументДвижения
	|				ИЛИ ВидыЗапасов.Ссылка = СебестоимостьТоваров.Регистратор)
	|			И (ВидыЗапасов.АналитикаУчетаНоменклатуры = СебестоимостьТоваров.АналитикаУчетаНоменклатуры)
	|			И (ВидыЗапасов.Организация = СебестоимостьТоваров.Организация)
	|			И (ВидыЗапасов.ВидЗапасов = СебестоимостьТоваров.ВидЗапасов
	|					И &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|				ИЛИ НЕ &УчитыватьСебестоимостьТоваровПоВидамЗапасов)
	|			И (НЕ ВидыЗапасов.ПредварительныйРасчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.Ссылка,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.ВидЗапасов,
	|	СебестоимостьТоваров.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтШапка.Ссылка КАК Ссылка,
	|	ВтШапка.Номер КАК Номер,
	|	ВтШапка.Дата КАК Дата,
	|	ВтШапка.ДатаДокумента КАК ДатаДокумента,
	|	ВтШапка.Организация КАК Организация
	|ИЗ
	|	ВтШапка КАК ВтШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ВтШапка.Склад = Склады.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтШапка.Ссылка КАК Ссылка,
	|	ВтШапка.ПредварительныйРасчет КАК ПредварительныйРасчет,
	|	Склады.ИсточникИнформацииОЦенахДляПечати КАК ИсточникИнформацииОЦенахДляПечати,
	|	ПРЕДСТАВЛЕНИЕ(ВтШапка.Склад) КАК ПредставлениеСклада,
	|	ВтШапка.Склад КАК Склад,
	|	ВтШапка.ВидЦены КАК ВидЦены,
	|	ВтШапка.ВалютаЦены КАК ВалютаЦены,
	|	ПРЕДСТАВЛЕНИЕ(Склады.Подразделение) КАК ПредставлениеПодразделения,
	|	Склады.Поклажедержатель КАК Поклажедержатель,
	|	ВЫБОР
	|		КОГДА Склады.ОтветственноеХранениеДоВостребования
	|			ТОГДА &довостребования
	|		ИНАЧЕ Склады.СрокОтветственногоХранения
	|	КОНЕЦ КАК СрокХранения,
	|	Склады.ОсобыеОтметки КАК ОсобыеОтметки,
	|	Склады.УсловияХраненияТоваров КАК УсловияХранения,
	|	Склады.ТекущаяДолжностьОтветственного КАК ДолжностьМОЛ,
	|	Склады.ТекущийОтветственный КАК МОЛ
	|ИЗ
	|	ВтШапка КАК ВтШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ВтШапка.Склад = Склады.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА Товары.Номенклатура.Артикул
	|		ИНАЧЕ Товары.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатураКод,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	Товары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	Товары.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	Товары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.ВидУпаковки КАК ВидУпаковки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(Цены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = 0
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(Цены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(Цены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество / Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	ВтТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоВидуЦен КАК Цены
	|		ПО Товары.Ссылка = Цены.Ссылка
	|			И Товары.НомерСтроки = Цены.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка,
	|	ВидыЗапасов.Склад,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ВидыЗапасов.Номенклатура.Артикул
	|		ИНАЧЕ ВидыЗапасов.Номенклатура.Код
	|	КОНЕЦ,
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.Номенклатура.НаименованиеПолное,
	|	ВидыЗапасов.Характеристика.НаименованиеПолное,
	|	ВидыЗапасов.ЕдиницаИзмеренияНаименование,
	|	ВидыЗапасов.ЕдиницаИзмеренияКод,
	|	ВидыЗапасов.КоличествоУпаковок,
	|	ВидыЗапасов.ВидУпаковки,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.КоличествоУпаковок = 0
	|			ТОГДА Цены.Стоимость
	|		ИНАЧЕ Цены.Стоимость * ВидыЗапасов.КоличествоУпаковок
	|	КОНЕЦ,
	|	Цены.Стоимость
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныПоСебестоимостиПредварительно КАК Цены
	|		ПО ВидыЗапасов.Ссылка = Цены.Ссылка
	|			И ВидыЗапасов.АналитикаУчетаНоменклатуры = Цены.АналитикаУчетаНоменклатуры
	|			И ВидыЗапасов.Организация = Цены.Организация
	|			И (ВидыЗапасов.ВидЗапасов = Цены.ВидЗапасов
	|					И &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|				ИЛИ НЕ &УчитыватьСебестоимостьТоваровПоВидамЗапасов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка,
	|	ВидыЗапасов.Склад,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ВидыЗапасов.Номенклатура.Артикул
	|		ИНАЧЕ ВидыЗапасов.Номенклатура.Код
	|	КОНЕЦ,
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.Номенклатура.НаименованиеПолное,
	|	ВидыЗапасов.Характеристика.НаименованиеПолное,
	|	ВидыЗапасов.ЕдиницаИзмеренияНаименование,
	|	ВидыЗапасов.ЕдиницаИзмеренияКод,
	|	ВидыЗапасов.КоличествоУпаковок,
	|	ВидыЗапасов.ВидУпаковки,
	|	Цены.Стоимость,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.КоличествоУпаковок = 0
	|			ТОГДА Цены.Стоимость
	|		ИНАЧЕ Цены.Стоимость / ВидыЗапасов.КоличествоУпаковок
	|	КОНЕЦ
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныПоСебестоимости КАК Цены
	|		ПО ВидыЗапасов.Ссылка = Цены.Ссылка
	|			И ВидыЗапасов.АналитикаУчетаНоменклатуры = Цены.АналитикаУчетаНоменклатуры
	|			И ВидыЗапасов.Организация = Цены.Организация
	|			И (ВидыЗапасов.ВидЗапасов = Цены.ВидЗапасов
	|					И &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|				ИЛИ НЕ &УчитыватьСебестоимостьТоваровПоВидамЗапасов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	НомерСтроки,
	|	Номенклатура,
	|	ПредставлениеХарактеристики,
	|	ВидУпаковки
	|
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Цены.Упаковка",
		"Товары.Номенклатура"));
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	Запрос.УстановитьПараметр("довостребования", НСтр("ru='до востребования'"));
	
КонецПроцедуры

//Функция возращает признак использования на складе ордерной схемы при поступлении
//	Параметры
//		Склады - Массив, СправочникСсылка.Склад - в параметре передаются ссылки на элементы справочника Склады
//		Дата - Дата - дата, на которую проверяется использование ордерной схемы при поступлении
//		Склад - СправочникСсылка.Склады - в параметре передается ссылка на склад из шапки
//
// Возвращаемое значение:
// Булево - Истина -признак использования на складе ордерной схемы при поступлении
//
Функция ЕстьОрдерныйНаПриемкуСклад(Склады, Дата = Неопределено, Склад = Неопределено) Экспорт
	ДатаПроверки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&Склады)
	|	И Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И Склады.ДатаНачалаОрдернойСхемыПриПоступлении <= &Дата";
	
	Запрос.УстановитьПараметр("Склады", Склады);
	Если ТипЗнч(Склады) = Тип("Массив") И Склады.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("Склады", Склад);
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти

#КонецОбласти
