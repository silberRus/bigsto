////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеТорговлей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеТорговлей" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", "");
	Описание.Версия = "11.4.3.167";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
//  Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Монопольно

#Область НачальноеЗаполнение

#Область ОбновлениеИнформационнойБазыУТ_ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПервыйЗапуск";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#КонецОбласти

#Область Версия_11_4_2

#Область Справочники_ВидыЗапасов_ПометитьДублиИУстаревшиеВидыЗапасов

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.79";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.ВидыЗапасов.ПометитьДублиИУстаревшиеВидыЗапасов";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ВидыЗапасов";
	Обработчик.Комментарий = НСтр("ru = 'Производит поиск дублей в справочнике ""Виды запасов"", у найденных элементов проставляет в Истина реквизит ЭтоДубль.
	|Производит поиск устаревших видов запасов в справочнике ""Виды запасов"", у найденных элементов проставляет в Истина реквизит Устаревший.'");

#КонецОбласти

#Область Справочники_КлассификаторТНВЭД_СоздатьСлужебныеЭлементы

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.92";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.КлассификаторТНВЭД.СоздатьСлужебныеЭлементы";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КлассификаторТНВЭД";
	Обработчик.Комментарий = НСтр("ru = 'Создает служебные элементы ""Сырьевой товар"" и ""Несырьевой товар"" для обновления документов реализации на экспорт'");

#КонецОбласти

#Область РегистрыСведений_УстаревшиеВидыЗапасовСОстатками_ОбновитьЗаписи

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.102";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.УстаревшиеВидыЗапасовСОстатками.ОбновитьЗаписи";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0d41bb97-8121-4183-9e75-e7d18444bedb");
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыЗапасов,"
		+ "РегистрНакопления.ТоварыОрганизаций,"
		+ "РегистрСведений.УстаревшиеВидыЗапасовСОстатками";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.УстаревшиеВидыЗапасовСОстатками";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр сведений ""Устаревшие виды запасов с остатками""'");

#КонецОбласти

#КонецОбласти

#Область Версия_11_4_3

#Область РегистрыНакопления_РезервыТоваровОрганизаций_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.159";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыНакопления.РезервыТоваровОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.РезервыТоваровОрганизаций";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.РезервыТоваровОрганизаций";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет свертку резервов товаров организаций для корректной работы новых механизмов свертки резервов. Во время выполнения обработчика работа с программой невозможна.'");

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Отложенно

#Область Версия_11_4_1

#Область РегистрыНакопления_ПартииТоваровОрганизаций_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПартииТоваровОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПартииТоваровОрганизаций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ПартииТоваровОрганизаций,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПартииТоваровОрганизаций";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет измерение ""Вид запасов"" записей регистра накопления ""Партии товаров организаций"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

#Область РегистрыСведений_СтоимостьТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СтоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтоимостьТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СтоимостьТоваров,"
		+ "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СтоимостьТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерение ""Вид запасов"" с типом запасов ""Услуга"" записей регистра сведений ""Стоимость товаров"".'");

#КонецОбласти

#Область РегистрыНакопления_ПартииРасходовНаСебестоимостьТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров,"
		+ "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерение ""Вид запасов"" с типом запасов ""Услуга"" записей регистра накопления ""Партии расходов на себестоимость товаров"".'");

#КонецОбласти

#Область Документы_КорректировкаНазначенияТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.КорректировкаНазначенияТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.КорректировкаНазначенияТоваров,"
		+ "РегистрНакопления.ТоварыОрганизаций,"
		+ "РегистрСведений.АналитикаУчетаНоменклатуры,"
		+ "Справочник.ВидыЗапасов,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "Документ.КорректировкаНазначенияТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.КорректировкаНазначенияТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вид запасов оприходование"" в табличной части ""Виды запасов"", а также реквизит ""Аналитика учета номенклатуры оприходование"" в табличных частях ""Виды запасов"" и ""Товары"" документов ""Корректировка назначения товаров"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_КорректировкаОбособленногоУчетаЗапасов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.КорректировкаОбособленногоУчетаЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.КорректировкаОбособленногоУчетаЗапасов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.КорректировкаОбособленногоУчетаЗапасов,"
		+ "РегистрНакопления.ТоварыОрганизаций";
	Обработчик.ИзменяемыеОбъекты = "Документ.КорректировкаОбособленногоУчетаЗапасов";
	Обработчик.БлокируемыеОбъекты = "Документ.КорректировкаОбособленногоУчетаЗапасов";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Вид запасов оприходование"" в табличной части ""Виды запасов"" документов ""Корректировка обособленного учета запасов"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_ПартииЗатратНаВыпуск_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПартииЗатратНаВыпуск.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПартииЗатратНаВыпуск.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ПартииЗатратНаВыпуск,"
		+ "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПартииЗатратНаВыпуск";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерения ""Вид запасов"" и ""Кор. вид запасов"" с типом запасов ""Услуга"" записей регистра накопления ""Партии затрат на выпуск"".'");

#КонецОбласти

#Область РегистрыНакопления_ПартииПроизводственныхЗатрат_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПартииПроизводственныхЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПартииПроизводственныхЗатрат.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ПартииПроизводственныхЗатрат,"
		+ "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПартииПроизводственныхЗатрат";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерение ""Вид запасов"" с типом запасов ""Услуга"" записей регистра накопления ""Партии производственных затрат"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров_ОтметитьКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ПорядокОформленияВыкупаПриСписанииТоваров";
	Обработчик.ИзменяемыеОбъекты = "Константа.ПорядокОформленияВыкупаПриСписанииТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Задается значение по умолчанию для константы ПорядокОформленияВыкупаПриСписанииТоваров.'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_УстановитьВидКонтроляТоваровОрганизаций

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьВидКонтроляТоваровОрганизаций";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.УстановитьВидКонтроляТоваровОрганизаций_ОтметитьКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ВидКонтроляТоваровОрганизаций";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВидКонтроляТоваровОрганизаций";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Изменяется значение константы ""Вид контроля товаров организаций"": выключается контроль ""На конец дня"".'");

#КонецОбласти

#Область Справочники_РегистрацииВНалоговомОргане_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.РегистрацииВНалоговомОргане.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РегистрацииВНалоговомОргане.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.РегистрацииВНалоговомОргане,"
		+ "Справочник.Организации";
	Обработчик.ИзменяемыеОбъекты = "Справочник.РегистрацииВНалоговомОргане";
	Обработчик.БлокируемыеОбъекты = "Справочник.РегистрацииВНалоговомОргане";
	Обработчик.Комментарий = НСтр("ru = 'Привязывает регистрации в налоговых органах к головной организации.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Организации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_АктВыполненныхРабот_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9f0893d0-682c-48ef-b076-0991db8ddaa2");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.АктВыполненныхРабот.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента,"
		+ "Документ.ЗаказКлиента,"
		+ "Справочник.Номенклатура";
	Обработчик.ИзменяемыеОбъекты = "Документ.АктВыполненныхРабот";
	Обработчик.БлокируемыеОбъекты = "Документ.АктВыполненныхРабот";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Назначение"" в табличной части ""Услуги"" документа ""Акт выполненных работ"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ВзаимозачетЗадолженности_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.37";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВзаимозачетЗадолженности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВзаимозачетЗадолженности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ДвиженияКонтрагентКонтрагент,"
		+ "Документ.ВзаимозачетЗадолженности";
	Обработчик.ИзменяемыеОбъекты = "Документ.ВзаимозачетЗадолженности";
	Обработчик.БлокируемыеОбъекты = "Документ.ВзаимозачетЗадолженности";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет сумму управленческого и регламентирвоанного учета в табличных частях документа.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_СвободныеОстатки_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.СвободныеОстатки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.СвободныеОстатки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.КорректировкаПоОрдеруНаТовары,"
		+ "РегистрНакопления.СвободныеОстатки";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.СвободныеОстатки";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""Корректировка по ордеру на товары"" по регистру накопления ""Свободные остатки"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПересортицаТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.46";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПересортицаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПересортицаТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПересортицаТоваров,"
		+ "Константа.ВалютаУправленческогоУчета";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПересортицаТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ПересортицаТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новый реквизит ""Валюта"" документов ""Пересортица товаров"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ОприходованиеИзлишковТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.46";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ОприходованиеИзлишковТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ОприходованиеИзлишковТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ОприходованиеИзлишковТоваров,"
		+ "Константа.ВалютаУправленческогоУчета";
	Обработчик.ИзменяемыеОбъекты = "Документ.ОприходованиеИзлишковТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ОприходованиеИзлишковТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новый реквизит ""Валюта"" документов ""Оприходование излишков товаров"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ПорчаТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.46";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПорчаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПорчаТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПорчаТоваров,"
		+ "РегистрНакопления.ТоварыОрганизаций,"
		+ "РегистрСведений.АналитикаУчетаНоменклатуры,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Константа.ВалютаУправленческогоУчета";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПорчаТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ПорчаТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Вид запасов"" и ""Аналитика учета номенклатуры оприходование"" в табличной части ""Товары"", заполняет новый реквизит ""Валюта"", а также заполняет реквизиты ""Вид запасов оприходование"" и ""Аналитика учета номенклатуры оприходование"" в табличной части ""Виды запасов"" документов ""Порча товаров"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ВнутреннееПотреблениеТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cbcbae6a-c617-4994-8829-772b4ed6b84b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВнутреннееПотреблениеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.АналитикаУчетаНоменклатуры,"
		+ "Документ.ВнутреннееПотреблениеТоваров,"
		+ "РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту";
	Обработчик.ИзменяемыеОбъекты = "Документ.ВнутреннееПотреблениеТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ВнутреннееПотреблениеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ВидЗапасовПолучателя в ТЧ ВидыЗапасов. До окончания работы обработчика перепроведение документов может приводить к неправильным результатам.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_НастройкаПередачиТоваровМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.59";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.НастройкаПередачиТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкаПередачиТоваровМеждуОрганизациями.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет ресурсы ""Валюта"", ""Договор"" и ""Вид цены"" записей регистра сведений ""Настройка передачи товаров между организациями"" с типом запасов ""Комиссионный товар"".
	|Заменяет настройки со способами передачи ""Продажа и возврат"" и ""Передача на комиссию и возврат"" на ""Продажа"" и ""Передача на комиссию"" соответственно.
	|Устанавливает валюту в настройках со способом передачи ""Передача на комиссию"", если валюта не указана.'");

#КонецОбласти

#Область РегистрыНакопления_ОбеспечениеЗаказовРаботами_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.66";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ОбеспечениеЗаказовРаботами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ОбеспечениеЗаказовРаботами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 7;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
		+ "РегистрНакопления.ОбеспечениеЗаказовРаботами";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ОбеспечениеЗаказовРаботами";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документов ""Производство без заказа"", ""Распределение возвратных отходов"" по регистру накопления ""Обеспечение заказов работами"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

#Область Справочники_СоглашенияСПоставщиками_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.67";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b8c2fb65-ade1-46da-9604-51c3f79a1d0e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СоглашенияСПоставщиками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.СоглашенияСПоставщиками";
	Обработчик.ИзменяемыеОбъекты = "Справочник.СоглашенияСПоставщиками";
	Обработчик.БлокируемыеОбъекты = "Справочник.СоглашенияСПоставщиками";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Способ доставки"" справочника ""СоглашенияСПоставщиками"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйОрдерНаТовары.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктОРасхожденияхПослеПриемки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_ДвиженияДенежныхСредств_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.73";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4a11397f-08ba-4c10-a7d3-0b92b8ae1bbb");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияДенежныхСредств.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаявкаНаРасходованиеДенежныхСредств,"
		+ "РегистрНакопления.ДвиженияДенежныхСредств,"
		+ "Документ.ПоступлениеБезналичныхДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияДенежныхСредств";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет реквизиты регистра ""Движения денежных средств"" корректными значениями.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Справочники_ПроверкиСостоянияСистемы_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.78";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ПроверкиСостоянияСистемы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПроверкиСостоянияСистемы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.ПроверкиСостоянияСистемы";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ПроверкиСостоянияСистемы";
	Обработчик.БлокируемыеОбъекты = "Справочник.ПроверкиСостоянияСистемы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет справочник """"Проверки состояния учета"""" поставляемыми проверками.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_ДоговорыМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("467f1bdf-d127-49f9-b45c-473c19bf26f2");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ДоговорыМеждуОрганизациями.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ДоговорыМеждуОрганизациями,"
		+ "Справочник.ГруппыФинансовогоУчетаРасчетов";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ДоговорыМеждуОрганизациями";
	Обработчик.БлокируемыеОбъекты = "Справочник.ДоговорыМеждуОрганизациями";
	Обработчик.Комментарий = НСтр("ru = '- Заполнение реквизита ""ГруппаФинансовогоУчетаПолучателя"" на основании реквизита ""ГруппаФинансовогоУчета"";'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыСведений_ОшибкиРасчетаПартийИСебестоимости_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ПроблемыСостоянияСистемы,"
		+ "РегистрСведений.ОшибкиРасчетаПартийИСебестоимости,"
		+ "Справочник.ПроверкиСостоянияСистемы";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ВыполнениеПроверокСостоянияСистемы,"
		+ "РегистрСведений.ПроблемыСостоянияСистемы";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ВыполнениеПроверокСостоянияСистемы,"
		+ "РегистрСведений.ПроблемыСостоянияСистемы";
	Обработчик.Комментарий = НСтр("ru = 'Переносит информацию об ошибках расчета партий и себестоимости в новый регистр универсального механизма проверок.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПроверкиСостоянияСистемы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ПланЗакупок_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПланЗакупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПланЗакупок.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланЗакупок";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЗамещениеПланов,"
		+ "Документ.ПланЗакупок";
	Обработчик.БлокируемыеОбъекты = "Документ.ПланЗакупок";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет замещение планов закупок'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыЗакупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродажПоКатегориям.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_ПланыЗакупок_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПланыЗакупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыЗакупок.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланЗакупок";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПланыЗакупок";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""План закупок"" по регистру накопления ""Планы закупок"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланЗакупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Справочники_ГруппыФинансовогоУчетаРасчетов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("730265b5-817f-478e-ac47-79a691636cd4");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ГруппыФинансовогоУчетаРасчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.РеализацияУслугПрочихАктивов,"
		+ "Документ.ОтчетКомиссионера,"
		+ "Справочник.ГруппыФинансовогоУчетаРасчетов,"
		+ "Справочник.ДоговорыКонтрагентов,"
		+ "Справочник.СоглашенияСКлиентами,"
		+ "Справочник.ДоговорыКредитовИДепозитов,"
		+ "Документ.ТаможеннаяДекларацияИмпорт,"
		+ "Документ.АктВыполненныхРабот,"
		+ "Константа.ВалютаРегламентированногоУчета,"
		+ "Справочник.ДоговорыМеждуОрганизациями,"
		+ "Справочник.СоглашенияСПоставщиками,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании,"
		+ "Документ.ВозвратТоваровМеждуОрганизациями,"
		+ "Документ.ВозвратТоваровОтКлиента,"
		+ "Документ.ВозвратТоваровПоставщику,"
		+ "Документ.ПриобретениеУслугПрочихАктивов,"
		+ "Документ.ВыкупВозвратнойТарыКлиентом,"
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента,"
		+ "Документ.ЗаказКлиента,"
		+ "Документ.ВыкупВозвратнойТарыУПоставщика,"
		+ "Документ.ЗаказПоставщику,"
		+ "Документ.ОтчетКомиссионераОСписании,"
		+ "Документ.РеализацияТоваровУслуг,"
		+ "Документ.ОтчетКомитенту,"
		+ "Документ.ОтчетКомитентуОСписании,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациями,"
		+ "Документ.ПередачаТоваровМеждуОрганизациями,"
		+ "Документ.ПриобретениеТоваровУслуг";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ГруппыФинансовогоУчетаРасчетов";
	Обработчик.БлокируемыеОбъекты = "Справочник.ГруппыФинансовогоУчетаРасчетов";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет в справочнике ""Группы настроек фин. учета расчетов"" новые реквизиты.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПланСборкиРазборки_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПланСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПланСборкиРазборки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланСборкиРазборки";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПланСборкиРазборки,"
		+ "РегистрСведений.ЗамещениеПланов";
	Обработчик.БлокируемыеОбъекты = "Документ.ПланСборкиРазборки";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет замещение планов сборки(разборки)'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПотребленияКомплектующих.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродажПоКатегориям.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланЗакупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_ПланыСборкиРазборки_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПланыСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыСборкиРазборки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланСборкиРазборки";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПланыСборкиРазборки";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""План сборки(разборки)"" по регистру накопления ""Планы сборки(разборки)"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ПланПродаж_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПланПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПланПродаж.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланПродаж";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПланПродаж,"
		+ "РегистрСведений.ЗамещениеПланов";
	Обработчик.БлокируемыеОбъекты = "Документ.ПланПродаж";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет замещение планов продаж'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродажПоКатегориям.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланЗакупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ОтчетПоКомиссииМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("24b6f471-bed2-4308-a5b9-6b0ce53810d2");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ГруппыФинансовогоУчетаРасчетов,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациями";
	Обработчик.ИзменяемыеОбъекты = "Документ.ОтчетПоКомиссииМеждуОрганизациями";
	Обработчик.БлокируемыеОбъекты = "Документ.ОтчетПоКомиссииМеждуОрганизациями";
	Обработчик.Комментарий = НСтр("ru = '- Заполнение реквизита ""ГруппаФинансовогоУчетаПолучателя"" на основании реквизита ""ГруппаФинансовогоУчета"";'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ПередачаТоваровМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПередачаТоваровМеждуОрганизациями.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПередачаТоваровМеждуОрганизациями,"
		+ "Справочник.ВидыЗапасов,"
		+ "Справочник.Валюты,"
		+ "Справочник.ГруппыФинансовогоУчетаРасчетов";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПередачаТоваровМеждуОрганизациями";
	Обработчик.БлокируемыеОбъекты = "Документ.ПередачаТоваровМеждуОрганизациями";
	Обработчик.Комментарий = НСтр("ru = 'Обработчик обновления:
	|- Заполняет флаг ""ПоТоварамКОформлению"" в ТЧ ""Товары"" и ""ВидыЗапасов"", очищается вид запасов для работ в табличных частях, заполняется Валюта взаиморасчетов;
	|- Заполняет реквизит ""ГруппаФинансовогоУчетаПолучателя"" на основании реквизита ""ГруппаФинансовогоУчета"";'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияСерийТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Обработки.ЗагрузкаКурсовВалют.ОтключитьЗагрузкуКурсаВалюты643ИзИнтернета";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_ПланыПродаж_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПланыПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыПродаж.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланПродаж";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПланыПродаж";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""План продаж"" по регистру накопления ""Планы продаж"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_СчетФактураВыданный_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.СчетФактураВыданный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7e2090fa-04b5-4637-9a03-4c5566dab0a7");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СчетФактураВыданный.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СчетФактураВыданный";
	Обработчик.ИзменяемыеОбъекты = "Документ.СчетФактураВыданный";
	Обработчик.БлокируемыеОбъекты = "Документ.СчетФактураВыданный";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Сводный корректировочный"" документа ""Счет-фактура выданный"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ВалютыУпрИРеглУчетаСовпадают_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ВалютыУпрИРеглУчетаСовпадают_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("33fea1cf-f828-4600-885a-fcc4f8176657");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ВалютыУпрИРеглУчетаСовпадают_ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ВалютаУправленческогоУчета,"
		+ "Константа.ВалютаРегламентированногоУчета";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВалютыУпрИРеглУчетаСовпадают";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение в константе ВалютыУпрИРеглУчетаСовпадают'");

#КонецОбласти

#Область Документы_СчетФактураПолученный_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.СчетФактураПолученный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e5a20cd7-50ff-4171-91e1-da9f466885ec");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СчетФактураПолученный.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СчетФактураПолученный";
	Обработчик.ИзменяемыеОбъекты = "Документ.СчетФактураПолученный";
	Обработчик.БлокируемыеОбъекты = "Документ.СчетФактураПолученный";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Сводный корректировочный"" документа ""Счет-фактура полученный"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПланПродажПоКатегориям_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПланПродажПоКатегориям.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПланПродажПоКатегориям.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланПродажПоКатегориям";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЗамещениеПланов,"
		+ "Документ.ПланПродажПоКатегориям";
	Обработчик.БлокируемыеОбъекты = "Документ.ПланПродажПоКатегориям";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет замещение планов продаж по категориям'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПродажПоКатегориям.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланЗакупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_ПланыПродажПоКатегориям_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПланыПродажПоКатегориям.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыПродажПоКатегориям.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланПродажПоКатегориям";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПланыПродажПоКатегориям";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""План продаж по категориям"" по регистру накопления ""Планы продаж по категориям"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродажПоКатегориям.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ПланыПотребленияКомплектующих_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПланыПотребленияКомплектующих.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыПотребленияКомплектующих.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПланСборкиРазборки";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПланыПотребленияКомплектующих";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""План сборки(разборки)"" по регистру накопления ""Планы  потребления комплектующих"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ПрочиеАктивыПассивы_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.81";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a2553e25-65f9-47b3-81ff-44255b36833c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеАктивыПассивы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 14;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.РасчетыСПоставщикамиПоДокументам,"
		+ "РегистрНакопления.ДенежныеСредстваВКассахККМ,"
		+ "РегистрНакопления.ПрочиеАктивыПассивы,"
		+ "РегистрНакопления.ПодарочныеСертификаты,"
		+ "РегистрНакопления.ДенежныеСредстваБезналичные,"
		+ "РегистрНакопления.ПартииПрочихРасходов,"
		+ "РегистрНакопления.ПереданнаяВозвратнаяТара,"
		+ "РегистрНакопления.ДенежныеСредстваВПути,"
		+ "РегистрНакопления.ДенежныеСредстваНаличные,"
		+ "РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц,"
		+ "РегистрНакопления.ПринятаяВозвратнаяТара,"
		+ "РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту,"
		+ "РегистрНакопления.ПрочиеДоходы,"
		+ "РегистрНакопления.ПрочиеРасходы,"
		+ "РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов,"
		+ "РегистрНакопления.СебестоимостьТоваров,"
		+ "РегистрНакопления.РасчетыСКлиентамиПоДокументам";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПрочиеАктивыПассивы";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляются даные управленческого баланса.
	|До завершения обработчика данные  отчета ""Управленчиский баланс"" могут быть неккоретны.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_РаспределениеРасходовБудущихПериодов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.81";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РаспределениеРасходовБудущихПериодов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1d50840e-b291-4de8-8b9c-13d8b0fae95c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РаспределениеРасходовБудущихПериодов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.РаспределениеРасходовБудущихПериодов";
	Обработчик.ИзменяемыеОбъекты = "Документ.РаспределениеРасходовБудущихПериодов";
	Обработчик.БлокируемыеОбъекты = "Документ.РаспределениеРасходовБудущихПериодов";
	Обработчик.Комментарий = НСтр("ru = 'В документе ""Распределение расходов будущих периодов"" заполняются новые реквизиты ""Правило распределения"", ""Вариант распределения суммы (упр.)"" и ""Вариант распределения суммы (регл.)"".'");

#КонецОбласти

#Область РегистрыНакопления_ДетализацияПартийТоваровДляНДСиУСН_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.82";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН,"
		+ "Справочник.ВидыЗапасов,"
		+ "Константа.ВалютаРегламентированногоУчета,"
		+ "Константа.ВалютаУправленческогоУчета";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерения ""Вид запасов"" и ""Кор. вид запасов"" записей регистра накопления ""Детализация партий товаров для НДС и УСН"".
	|Заполняет ресурс НДСУпр данными ресурса НДС, если валюты регл. и упр. учета совпадают.'");

#КонецОбласти

#Область РегистрыСведений_ЖурналФискальныхОпераций_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.96";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ЖурналФискальныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fb6b4aef-40c9-4830-962d-cc34b68b32b5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЖурналФискальныхОпераций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ВозвратПодарочныхСертификатов,"
		+ "Документ.ЧекККМ,"
		+ "Документ.ЧекККМВозврат,"
		+ "Документ.ПриходныйКассовыйОрдер,"
		+ "Документ.ОперацияПоПлатежнойКарте,"
		+ "Документ.РасходныйКассовыйОрдер,"
		+ "Документ.РеализацияПодарочныхСертификатов";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЖурналФискальныхОпераций";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Записывает в регистр сведений Журнал фискальных операций данные о пробитых чеках ККМ'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_ДвиженияДенежныеСредстваКонтрагент_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.99";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ad3df366-0336-44f3-be65-74b095c46d8a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент,"
		+ "Документ.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ВозвратТоваровМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.105";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("032ef649-f45c-4209-8674-165ba21d84f6");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВозвратТоваровМеждуОрганизациями.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ВозвратТоваровМеждуОрганизациями";
	Обработчик.ИзменяемыеОбъекты = "Документ.ВозвратТоваровМеждуОрганизациями";
	Обработчик.БлокируемыеОбъекты = "Документ.ВозвратТоваровМеждуОрганизациями";
	Обработчик.Комментарий = НСтр("ru = 'В документе переносится значение реквизита ПоТоварамКОформлению в табличные части Товары и Виды запасов, в реквизиты ТЧ.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияСерийТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_ЦеныНоменклатурыПоставщиков_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.106";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ЦеныНоменклатурыПоставщиков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dd2e4ab2-1992-4e22-9245-c998d7715091");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЦеныНоменклатурыПоставщиков.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПриобретениеТоваровУслуг,"
		+ "Справочник.ВидыЦенПоставщиков,"
		+ "РегистрСведений.КурсыВалют";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЦеныНоменклатурыПоставщиков";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Перезаписывает движения документа ПриобретениеТоваровУслуг по регистру ЦеныНоменклатурыПоставщиков'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_ДвиженияСерийТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.109";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияСерийТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияСерийТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 17;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
		+ "Документ.ПередачаТоваровМеждуОрганизациями,"
		+ "РегистрНакопления.ДвиженияСерийТоваров,"
		+ "Документ.ВозвратТоваровМеждуОрганизациями,"
		+ "Документ.ПриходныйОрдерНаТовары";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияСерийТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет записи регистра накопления ""Движения серий товаров"" по документам ""Возврат товаров между организациями"", ""Передача товаров между организациями"", ""Движение продукции и материалов"", ""Производство без заказа"" и ""Этап производства"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйОрдерНаТовары.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ТоварыКОформлениюОтчетовКомитенту_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.112";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту,"
		+ "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Перезаписываются записи регистра накопления ""Товары к оформлению отчетов комитенту"" документов:
	|- ""Внутреннее потребление товаров"";
	|- ""Возврат товаров между организациями"";
	|- ""Корректировка реализации"";
	|- ""Отчет комиссионера"";
	|- ""Отчет комиссионера о списании"";
	|- ""Отчет комитенту"";
	|- ""Отчет комитенту о списании"";
	|- ""Отчет о розничных продажах"";
	|- ""Отчет по комиссии между организациями"";
	|- ""Отчет по комиссии между организациями о списании"";
	|- ""Передача материалов в производство"";
	|- ""Передача товаров между организациями"";
	|- ""Пересортица товаров"";
	|- ""Порча товаров"";
	|- ""Прочее оприходование товаров"";
	|- ""Реализация товаров и услуг"";
	|- ""Сборка товаров"";
	|- ""Списание недостач товаров"";
	|- ""Возврат материалов в производство"";
	|- ""Передача сырья переработчику"";
	|- ""Распределение производственных затрат"";
	|- ""Возврат сырья от переработчика"";
	|- ""Движение продукции материалов"";
	|- ""Производство без заказов"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ДвиженияНоменклатураДоходыРасходы_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.132";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("10c56f1b-e5dc-4363-89b6-a2f28af1e6d5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ДвиженияНоменклатураДоходыРасходы,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Документ.ПрочееОприходованиеТоваров";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияНоменклатураДоходыРасходы";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерение ""Вид запасов"" и перезаполняет реквизит ""Источник ГФУ номенклатуры"" записей регистра накопления ""Движения номенклатуры - доходы/расходы"" по документам ""Прочее оприходование товаров"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ПрочиеРасходы_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.145";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ПрочиеРасходы";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПрочиеРасходы";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Корректировка движений регистра ""Прочие расходы"" для документов ""Переоценка валютных средств"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_ВидыНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.160";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e683741-41c4-46a6-95a8-27f44d76aef4");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыНоменклатуры.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ОбщероссийскийКлассификаторПродукции,"
		+ "Справочник.ВидыНоменклатуры,"
		+ "Справочник.КлассификаторВидовЭкономическойДеятельности,"
		+ "Справочник.Склады,"
		+ "Справочник.СтруктураПредприятия,"
		+ "Справочник.КлассификаторОКПД2,"
		+ "Справочник.КлассификаторОКВЭД2";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ВидыНоменклатуры";
	Обработчик.БлокируемыеОбъекты = "Справочник.ВидыНоменклатуры";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""ПолитикаУчетаСерий"" значением по умолчанию, а так же добавляет в ТЧ ""ПолитикиУчетаСерий"" недостающие записи. Пока обработчик не выполнен, невозможно добавление новых позиций номенклатуры, новых серий.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СтруктураПредприятия.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторТНВЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторОКПД2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторОКВЭД2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ОтчетПоКомиссииМеждуОрганизациямиОСписании_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.160";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b51db23b-e6b2-4599-b511-84982aacbb7b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании";
	Обработчик.ИзменяемыеОбъекты = "Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании";
	Обработчик.БлокируемыеОбъекты = "Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании";
	Обработчик.Комментарий = НСтр("ru = '- Заполнение реквизита ""ГруппаФинансовогоУчетаПолучателя"" на основании реквизита ""ГруппаФинансовогоУчета"";'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_СуммыДокументовВВалютеРегл_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.167";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СуммыДокументовВВалютеРегл.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СуммыДокументовВВалютеРегл,"
		+ "Документ.ОтчетОРозничныхПродажах,"
		+ "Документ.ЗаписьКнигиПокупок,"
		+ "Документ.ВзаимозачетЗадолженности,"
		+ "Документ.ПриходныйКассовыйОрдер,"
		+ "Документ.АктВыполненныхРабот,"
		+ "Документ.АвансовыйОтчет,"
		+ "Документ.ОперацияПоЯндексКассе,"
		+ "Документ.ВыкупВозвратнойТарыУПоставщика,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании,"
		+ "Документ.ВозвратТоваровМеждуОрганизациями,"
		+ "Документ.ВозвратТоваровОтКлиента,"
		+ "Документ.НачисленияКредитовИДепозитов,"
		+ "Документ.ВозвратТоваровПоставщику,"
		+ "РегистрНакопления.РасчетыСКлиентамиПоДокументам,"
		+ "Документ.ПриобретениеУслугПрочихАктивов,"
		+ "Документ.ВыкупВозвратнойТарыКлиентом,"
		+ "Документ.ЗаписьКнигиПродаж,"
		+ "Документ.РеализацияУслугПрочихАктивов,"
		+ "Документ.ОтчетКомиссионера,"
		+ "Документ.ОтчетБанкаПоОперациямЭквайринга,"
		+ "Документ.ИнвентаризацияНаличныхДенежныхСредств,"
		+ "Документ.ОперацияПоПлатежнойКарте,"
		+ "Документ.ОприходованиеИзлишковТоваров,"
		+ "Документ.СписаниеБезналичныхДенежныхСредств,"
		+ "Документ.ОтражениеРасхожденийПриИнкассацииДенежныхСредств,"
		+ "Документ.ОтчетКомиссионераОСписании,"
		+ "Документ.РеализацияТоваровУслуг,"
		+ "Документ.ОтчетКомитенту,"
		+ "Документ.ОтчетКомитентуОСписании,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациями,"
		+ "Документ.ПересортицаТоваров,"
		+ "Документ.ПередачаТоваровМеждуОрганизациями,"
		+ "Документ.ПорчаТоваров,"
		+ "Документ.ПоступлениеБезналичныхДенежныхСредств,"
		+ "Документ.ПриобретениеТоваровУслуг,"
		+ "Документ.ПрочееОприходованиеТоваров,"
		+ "Документ.РасходныйКассовыйОрдер,"
		+ "Документ.СписаниеЗадолженности,"
		+ "РегистрНакопления.РасчетыСПоставщикамиПоДокументам,"
		+ "Справочник.ДоговорыКонтрагентов";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СуммыДокументовВВалютеРегл";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новые ресурсы ""СуммаБезНДСУпр"", ""СуммаНДСУпр"" и ""БазаНДСУпр"". Для рублевых документов добавляет записи.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВзаимозачетЗадолженности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПересортицаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОприходованиеИзлишковТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПорчаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_ВыручкаИСебестоимостьПродаж_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.169";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ВыручкаИСебестоимостьПродаж,"
		+ "Справочник.ВидыЗапасов,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациями,"
		+ "Документ.ВозвратТоваровМеждуОрганизациями,"
		+ "Документ.ПередачаТоваровМеждуОрганизациями";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ВыручкаИСебестоимостьПродаж";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерение «Вид запасов» в движениях с типами запасов ""Работа"" и ""Услуга"", заполняет измерение ""Раздел учета"" в регистре накопления ""Выручка и себестоимость продаж"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_Закупки_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.169";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7bfeccd7-2de2-4dd9-b98a-a58b40569f72");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.Закупки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.Закупки,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациями,"
		+ "Документ.ВозвратТоваровМеждуОрганизациями,"
		+ "Документ.ПередачаТоваровМеждуОрганизациями";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.Закупки";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает вид запасов в движениях образованных документом ""Отчет комитенту о списании"", очищается вид запасов для работ.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ОбеспечениеЗаказов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.191";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ОбеспечениеЗаказов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ОбеспечениеЗаказов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 7;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.КорректировкаПоОрдеруНаТовары,"
		+ "РегистрНакопления.ОбеспечениеЗаказов,"
		+ "Документ.КорректировкаПриобретения";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ОбеспечениеЗаказов";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документов ""Корректировка по ордеру на товары"", ""Корректировка приобретения"", ""Распределение возвратных отходов"" по регистру накопления ""Обеспечение заказов"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#КонецОбласти

#Область Версия_11_4_2

#Область Документы_ВводОстатков_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cebf20b8-ed00-4386-8bf7-830c74265a08");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВводОстатков.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.КурсыВалют,"
		+ "Документ.ВводОстатков";
	Обработчик.ИзменяемыеОбъекты = "Документ.ВводОстатков";
	Обработчик.БлокируемыеОбъекты = "Документ.ВводОстатков";
	Обработчик.Комментарий = НСтр("ru = 'Переносит данные о назначении из вида запасов в аналитику учета номенклатуры;
	|Заполняет новый реквизит ""Идентификатор строки"" в табличной части ""Товары""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.МатериалыИРаботыВПроизводстве.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_РасчетыСКлиентами_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСКлиентами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ВводОстатков";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.РасчетыСКлиентами";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""Ввод остатков"" по регистру ""Расчеты с клиентами"". Заполняет новый реквизит ""Расчетный документ"".
	|Пока обработчик не выполнен, расчеты находятся в некорректном состоянии.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_РасчетыСПоставщиками_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщиками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ВводОстатков";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.РасчетыСПоставщиками";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""Ввод остатков"" по регистру ""Расчеты с поставщиками"". Заполняет новый реквизит ""Расчетный документ"".
	|Пока обработчик не выполнен расчеты находятся в некорректном состоянии.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ГрафикПоступленияТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ГрафикПоступленияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ГрафикПоступленияТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 14;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ГрафикПоступленияТоваров,"
		+ "РегистрНакопления.ДвижениеТоваров,"
		+ "Документ.ЗаказПоставщику,"
		+ "Документ.РегистраторГрафикаДвиженияТоваров";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ГрафикПоступленияТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документов по регистру накопления ""График поступления товаров"".
	|До завершения обработчика работа с документами ""Выпуск продукции"", ""Заказ поставщику"" и ""Заказ переработчику"" не рекомендуется, т.к. информация в регистре некорректна.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвижениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_СписаниеБезналичныхДенежныхСредств_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.27";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СписаниеБезналичныхДенежныхСредств.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СписаниеБезналичныхДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "Документ.СписаниеБезналичныхДенежныхСредств";
	Обработчик.БлокируемыеОбъекты = "Документ.СписаниеБезналичныхДенежныхСредств";
	Обработчик.Комментарий = НСтр("ru = 'В документе очищается неверное значение реквизита ИННПлательщика.
	|Заполняет тип налога и переносит счет учета и субконто в табличную часть по оплатам НДС в бюджет.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_ПодтверждениеОплатыНДСВБюджет_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.27";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5a19e2bd-8b7e-41af-af59-1646864a6869");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет,"
		+ "Документ.ЗаявлениеОВвозеТоваров,"
		+ "Документ.СчетФактураНалоговыйАгент,"
		+ "Документ.ТаможеннаяДекларацияИмпорт";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет";
	Обработчик.Комментарий = НСтр("ru = 'Переносит данные об оплате НДС в бюджет в регистр сведений ""Подтверждение оплаты НДС в бюджет"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявлениеОВвозеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаявлениеОВвозеТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.27";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаявлениеОВвозеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("442ab012-776f-4208-8637-5b16754ed35e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаявлениеОВвозеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров,"
		+ "Справочник.УпаковкиЕдиницыИзмерения,"
		+ "Справочник.КлассификаторТНВЭД";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет количество по ТН ВЭД, если единица измерения кода ТН ВЭД не килограммы.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторТНВЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УпаковкиЕдиницыИзмерения.СоздатьЕдиницыПоОКЕИДляУказанияВКлассификатореТНВЭД";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область ИнтеграцияЕГАИСУТ_ОбработатьДанныеДляПереходаНаНовуюВерсиюТТНИсходящаяЕГАИС

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюТТНИсходящаяЕГАИС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("437b2e1f-af52-41fc-b35d-81ed84284557");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ИнтеграцияЕГАИСУТ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюТТНИсходящаяЕГАИС";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ТТНИсходящаяЕГАИС,"
		+ "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС";
	Обработчик.ИзменяемыеОбъекты = "Документ.ТТНИсходящаяЕГАИС";
	Обработчик.БлокируемыеОбъекты = "Документ.ТТНИсходящаяЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет номенклатуру, количество упаковок и флаг наличия расхождений в исходящих ТТН ЕГАИС'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСоответствиеНоменклатуры";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область ИнтеграцияЕГАИСУТ_ОбработатьДанныеДляПереходаНаНовуюВерсиюСоответствиеНоменклатуры

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСоответствиеНоменклатуры";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8d38dd62-4662-4dbf-ba40-c4b36ef3922b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ИнтеграцияЕГАИСУТ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюСоответствиеНоменклатуры";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС,"
		+ "РегистрСведений.СоответствиеНоменклатурыЕГАИС";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СоответствиеНоменклатурыЕГАИС,"
		+ "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр сведений ""СоответствиеНоменклатурыЕГАИС""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СоответствиеНоменклатурыЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеСправок2";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СоответствиеНоменклатурыЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТТНВходящаяЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюТТНИсходящаяЕГАИС";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область ИнтеграцияЕГАИСУТ_ОбработатьДанныеДляПереходаНаНовуюВерсиюТТНВходящаяЕГАИС

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюТТНВходящаяЕГАИС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0f6a99b2-b960-4d8e-a5aa-55cda2633373");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ИнтеграцияЕГАИСУТ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюТТНВходящаяЕГАИС";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПриобретениеТоваровУслуг";
	Обработчик.ИзменяемыеОбъекты = "Документ.ТТНВходящаяЕГАИС";
	Обработчик.БлокируемыеОбъекты = "Документ.ТТНВходящаяЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""ДокументОснование"" документа ""ТТНВходящаяЕГАИС"" из реквизита ""ТоварноТранспортнаяНакладнаяЕГАИС"" документа ""ПриобретениеТоваровУслуг""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СоответствиеНоменклатурыЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеСправок2";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТТНВходящаяЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область ИнтеграцияЕГАИСУТ_ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5ce509f1-63b4-47fc-9723-e0039622bace");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ИнтеграцияЕГАИСУТ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ОтчетОРозничныхПродажах,"
		+ "Документ.ВнутреннееПотреблениеТоваров,"
		+ "Документ.ВозвратТоваровМеждуОрганизациями,"
		+ "Документ.ПередачаТоваровМеждуОрганизациями,"
		+ "Документ.ПересортицаТоваров,"
		+ "Документ.ВозвратТоваровОтКлиента,"
		+ "Документ.ВозвратТоваровПоставщику,"
		+ "Документ.ПеремещениеТоваров,"
		+ "Документ.ОприходованиеИзлишковТоваров,"
		+ "Документ.РеализацияТоваровУслуг,"
		+ "Документ.СборкаТоваров,"
		+ "Документ.СписаниеНедостачТоваров,"
		+ "РегистрСведений.СтатусыДокументовЕГАИС";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СтатусыОформленияДокументовЕГАИС";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СтатусыОформленияДокументовЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр сведений ""СтатусыОформленияДокументовЕГАИС"" по данным прикладных документов и документов ЕГАИС'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОприходованиеИзлишковТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПересортицаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_АктОРасхожденияхПослеПриемки_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.АктОРасхожденияхПослеПриемки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.АктОРасхожденияхПослеПриемки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.АктОРасхожденияхПослеПриемки,"
		+ "Константа.ВариантПриемкиТоваров,"
		+ "Справочник.СоглашенияСПоставщиками";
	Обработчик.ИзменяемыеОбъекты = "Документ.АктОРасхожденияхПослеПриемки";
	Обработчик.БлокируемыеОбъекты = "Документ.АктОРасхожденияхПослеПриемки";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вариант приемки товаров"" документа ""Акт о расхождениях после приемки"". Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПрочееОприходованиеТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПрочееОприходованиеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПрочееОприходованиеТоваров,"
		+ "Константа.ВалютаУправленческогоУчета,"
		+ "Константа.ВариантПриемкиТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПрочееОприходованиеТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ПрочееОприходованиеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новые реквизиты ""Валюта"" и ""ВариантПриемкиТоваров"" документов ""Прочее оприходование товаров"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_АктОРасхожденияхПослеПеремещения_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.АктОРасхожденияхПослеПеремещения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.АктОРасхожденияхПослеПеремещения.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.АктОРасхожденияхПослеПеремещения";
	Обработчик.ИзменяемыеОбъекты = "Документ.АктОРасхожденияхПослеПеремещения";
	Обработчик.БлокируемыеОбъекты = "Документ.АктОРасхожденияхПослеПеремещения";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вариант приемки товаров"" документа ""Акт о расхождениях после перемещения"". Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Справочники_УпаковкиЕдиницыИзмерения_СоздатьЕдиницыПоОКЕИДляУказанияВКлассификатореТНВЭД

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.УпаковкиЕдиницыИзмерения.СоздатьЕдиницыПоОКЕИДляУказанияВКлассификатореТНВЭД";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e306807-1083-48ac-9908-e16a40083778");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.УпаковкиЕдиницыИзмерения.ЗарегистрироватьКодыТНВЭДДляСозданияЕдиницОКЕИ";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.КлассификаторТНВЭД";
	Обработчик.ИзменяемыеОбъекты = "Справочник.УпаковкиЕдиницыИзмерения";
	Обработчик.БлокируемыеОбъекты = "Справочник.УпаковкиЕдиницыИзмерения";
	Обработчик.Комментарий = НСтр("ru = 'Создает единицы измерения по классификатору ОКЕИ для последующего указания в классификаторе ТН ВЭД'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявлениеОВвозеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторТНВЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_ЗаданияКЗакрытиюМесяца_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.46";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ЗаданияКЗакрытиюМесяца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8c371fca-0550-4955-a28c-69e40b877908");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЗаданияКЗакрытиюМесяца.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ЗаданияКЗакрытиюМесяца,"
		+ "Справочник.УчетныеПолитикиОрганизаций,"
		+ "РегистрСведений.КурсыВалют,"
		+ "РегистрСведений.УчетнаяПолитикаОрганизаций,"
		+ "РегистрНакопления.РасчетыСКлиентамиПоДокументам,"
		+ "Справочник.Организации,"
		+ "Константа.ИспользоватьРеглУчет,"
		+ "Константа.ВалютаУправленческогоУчета,"
		+ "Константа.ВалютаРегламентированногоУчета,"
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЗаданияКЗакрытиюМесяца,"
	;
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ЗаданияКЗакрытиюМесяца,"
	;
	Обработчик.Комментарий = НСтр("ru = 'Переносит задания к начислению амортизации ОС/НМА в новые регистры ""ЗаданияКРасчетуАмортизацииОС"", ""ЗаданияКРасчетуАмортизацииНМА"".
	|Добавляет задания по новым операциям: ""ФормированиеРезервовПоСомнительнымДолгам"", ""ФормированиеФинансовогоРезультата"".
	|Пока работа обработчика не завершена, состояние закрытия месяца может быть некорректным.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Организации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УчетныеПолитикиОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_ДвижениеТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвижениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвижениеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 13;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ДвижениеТоваров,"
		+ "Документ.ЗаказПоставщику,"
		+ "Документ.РегистраторГрафикаДвиженияТоваров,"
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвижениеТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документов по регистру накопления ""Движение товаров"".
	|До завершения обработчика работа с документами ""Выпуск продукции"", ""Поступление от переработчика"", ""Заказ поставщику"" и ""Заказ переработчику"" не рекомендуется, т.к. информация в регистре некорректна.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ГрафикПоступленияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыСведений_ДоступныеОстаткиПланируемыхПоступлений_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 15;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений,"
		+ "Документ.РегистраторГрафикаДвиженияТоваров,"
		+ "РегистрНакопления.ГрафикПоступленияТоваров,"
		+ "РегистрНакопления.ГрафикОтгрузкиТоваров,"
		+ "РегистрНакопления.ДвижениеТоваров,"
		+ "Документ.ЗаказПоставщику,"
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Пересчитывает ожидаемые остатки в РС ""Доступные остатки планируемых поступлений"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ГрафикПоступленияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвижениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Справочники_Назначения_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("84f504ea-2da4-4aa6-aff0-fadf31272497");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Назначения.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Тип назначения"" и ""Контролировать только наличие"". Пока обработчик не выполнен, возможны ошибки в работе документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_НаправленияДеятельности_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("36947582-5308-4406-ab69-575625722bbd");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НаправленияДеятельности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "Справочник.Назначения";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НаправленияДеятельности";
	Обработчик.БлокируемыеОбъекты = "Справочник.НаправленияДеятельности";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Тип направления деятельности"" значением ""Иная деятельность"", реквизиты ""Назначение"" и ""Допускается обособление товаров и работ сверх потребности"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_НаправленияДеятельности_ОбработатьДанныеДляГенерацииНазначений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2909a6a3-1842-4969-b10f-ab9b4084365f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НаправленияДеятельности.ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые назначения связанные со справочником ""Направления деятельности""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ЗаказНаСборку_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаСборку.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 11;
	Обработчик.ПроцедураПроверки = "Справочники.Назначения.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказНаСборку,"
		+ "Справочник.НаправленияДеятельности,"
		+ "Константа.ВариантПриемкиТоваров,"
		+ "Справочник.Назначения";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказНаСборку";
	Обработчик.БлокируемыеОбъекты = "Документ.ЗаказНаСборку,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Назначение"" и ""Вариант приемки товаров"". Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказНаСборку_ОбработатьДанныеДляГенерацииНазначений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("202f37e1-2184-4aa8-ba1a-fe1a08a933c7");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаСборку.ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений";
	Обработчик.ОчередьОтложеннойОбработки = 10;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаказНаСборку";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые назначения связанные с документом ""Заказ на сборку""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказНаВнутреннееПотребление_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаВнутреннееПотребление.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 8;
	Обработчик.ПроцедураПроверки = "Справочники.Назначения.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаказНаВнутреннееПотребление,"
		+ "Справочник.Назначения";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказНаВнутреннееПотребление";
	Обработчик.БлокируемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаказНаВнутреннееПотребление";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Назначение"". Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказНаВнутреннееПотребление_ОбработатьДанныеДляГенерацииНазначений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e1c5863f-2518-4d46-9366-77ef2c4b0b48");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаВнутреннееПотребление.ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений";
	Обработчик.ОчередьОтложеннойОбработки = 7;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Документ.ЗаказНаВнутреннееПотребление,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые назначения связанные с документом ""Заказ на внутреннее потребление""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ВозвратТоваровОтКлиента_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.69";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВозвратТоваровОтКлиента.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ВозвратТоваровОтКлиента";
	Обработчик.ИзменяемыеОбъекты = "Документ.ВозвратТоваровОтКлиента";
	Обработчик.БлокируемыеОбъекты = "Документ.ВозвратТоваровОтКлиента";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вариант приемки товаров"" документа ""Возврат товаров от клиента"", заполняет реквизита ""Способ определения себестоимости"" табличной части ""Виды запасов"". Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыНакопления_СебестоимостьТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.71";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.СебестоимостьТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 13;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.СебестоимостьТоваров,"
		+ "Справочник.ВидыЗапасов,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Справочник.Организации,"
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.СебестоимостьТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет измерения ""Вид запасов"" и ""Кор. вид запасов"" и реквизиты ""Аналитика учета по партнерам"", ""Кор. вид деятельности НДС"" и ""Статья калькуляции"", унифицируются хозяйственные операции по выпуску продукции в регистре накопления ""Себестоимость товаров"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Организации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПоступлениеТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.72";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПоступлениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПоступлениеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПоступлениеТоваров,"
		+ "Справочник.СоглашенияСПоставщиками,"
		+ "Константа.ВариантПриемкиТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПоступлениеТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ПоступлениеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вариант приемки товаров"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПриходныйОрдерНаТовары_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.91";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПриходныйОрдерНаТовары.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПриходныйОрдерНаТовары.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 16;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПриходныйОрдерНаТовары,"
		+ "Справочник.ДоговорыКонтрагентов,"
		+ "РегистрСведений.УдалитьРеестрДокументов,"
		+ "Справочник.СоглашенияСПоставщиками";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПриходныйОрдерНаТовары";
	Обработчик.БлокируемыеОбъекты = "Документ.ПриходныйОрдерНаТовары";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Складская операция"", ""Хозяйственная операция"" и ""Отправитель"" документа ""Приходный ордер на товары"". Пока обработчик не выполнен, возможны ошибки при проведении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияСерийТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_КорректировкаРеализации_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.92";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.КорректировкаРеализации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.КорректировкаРеализации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Документ.КорректировкаРеализации,"
		+ "Справочник.Номенклатура,"
		+ "Справочник.КлассификаторТНВЭД";
	Обработчик.ИзменяемыеОбъекты = "Документ.КорректировкаРеализации";
	Обработчик.БлокируемыеОбъекты = "Документ.КорректировкаРеализации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Подразделение (расходы)"" и ""Подразделение (доходы)"" документа ""Корректировка реализации"".
	|Заполняет реквизиты ""Код ТН ВЭД"" в табличных частях документов ""Корректировка реализации""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторТНВЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ИспользованиеКлассификаторовНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.92";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользованиеКлассификаторовНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИспользованиеКлассификаторовНоменклатуры_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользованиеКлассификаторовНоменклатуры,"
		+ "Константа.ИспользоватьПродажиНаЭкспорт";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользованиеКлассификаторовНоменклатуры";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Включает использование классификаторов номенклатуры, если в базе включены продажи на экспорт.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_НомераГТД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.92";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.НомераГТД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НомераГТД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НомераГТД";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НомераГТД";
	Обработчик.БлокируемыеОбъекты = "Справочник.НомераГТД";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Регистрационный номер"", ""Порядковый номер товара"" и ""Страна ввоза не РФ"" справочника ""Номера ГТД""""'");

#КонецОбласти

#Область Справочники_КлассификаторТНВЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.92";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.КлассификаторТНВЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7b8978db-3b24-49de-b9af-0f553d71476c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.КлассификаторТНВЭД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыНоменклатуры,"
		+ "Справочник.КлассификаторТНВЭД,"
		+ "Справочник.УпаковкиЕдиницыИзмерения,"
		+ "Справочник.Номенклатура";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КлассификаторТНВЭД";
	Обработчик.БлокируемыеОбъекты = "Справочник.КлассификаторТНВЭД";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Единица измерения"" и ""Сырьевой товар"" классификатора ТН ВЭД.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявлениеОВвозеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаРеализации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УпаковкиЕдиницыИзмерения.СоздатьЕдиницыПоОКЕИДляУказанияВКлассификатореТНВЭД";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_РаспределениеНДС_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.99";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РаспределениеНДС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РаспределениеНДС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.РаспределениеНДС";
	Обработчик.ИзменяемыеОбъекты = "Документ.РаспределениеНДС";
	Обработчик.БлокируемыеОбъекты = "Документ.РаспределениеНДС";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Начало периода"" в документах ""Распределение НДС""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_НеИспользоватьВводОстатковВерсии24_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.105";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.НеИспользоватьВводОстатковВерсии24_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7db44601-c0f0-4c8c-b369-972f815743f3");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.НеИспользоватьВводОстатковВерсии24_ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
	;
	Обработчик.ИзменяемыеОбъекты = ""
	;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение в константе НеИспользоватьВводОстатковВерсии24'");

#КонецОбласти

#Область Документы_СчетФактураВыданныйАванс_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.107";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.СчетФактураВыданныйАванс.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СчетФактураВыданныйАванс.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СчетФактураВыданныйАванс";
	Обработчик.ИзменяемыеОбъекты = "Документ.СчетФактураВыданныйАванс";
	Обработчик.БлокируемыеОбъекты = "Документ.СчетФактураВыданныйАванс";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит НалогообложениеНДС значением по умолчанию: ""Продажа облагается НДС""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_РеализацияТоваровУслуг_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РеализацияТоваровУслуг.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыЗапасов,"
		+ "Документ.РеализацияТоваровУслуг,"
		+ "РегистрНакопления.ТоварыОрганизаций,"
		+ "Справочник.Номенклатура,"
		+ "РегистрСведений.АналитикаУчетаНоменклатуры,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Справочник.КлассификаторТНВЭД";
	Обработчик.ИзменяемыеОбъекты = "Документ.РеализацияТоваровУслуг";
	Обработчик.БлокируемыеОбъекты = "Документ.РеализацияТоваровУслуг";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вид запасов получателя"" табличной части ""Виды запасов"" документов ""Реализация товаров и услуг"" с хоз. операцией ""Реализация по  регл. учету"".
	|Заполняет реквизиты ""Код ТН ВЭД"" в табличных частях документов ""Реализация товаров и услуг"".
	|Исправляет значения служебных реквизитов ""Адрес доставки значения полей"" и ""Адрес доставки перевозчика значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторТНВЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ТранспортнаяНакладная_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ТранспортнаяНакладная.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ТранспортнаяНакладная.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ТранспортнаяНакладная";
	Обработчик.ИзменяемыеОбъекты = "Документ.ТранспортнаяНакладная";
	Обработчик.БлокируемыеОбъекты = "Документ.ТранспортнаяНакладная";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет значение служебного реквизита ""Адрес доставки значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");

#КонецОбласти

#Область РегистрыСведений_СостоянияИРеквизитыДоставки_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СостоянияИРеквизитыДоставки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияИРеквизитыДоставки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияИРеквизитыДоставки";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияИРеквизитыДоставки";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СостоянияИРеквизитыДоставки";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет значение служебного реквизита ""Адрес значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при создании новых заданий на перевозку.'");

#КонецОбласти

#Область Документы_ЗаданиеНаПеревозку_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаданиеНаПеревозку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаданиеНаПеревозку.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаданиеНаПеревозку";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаданиеНаПеревозку";
	Обработчик.БлокируемыеОбъекты = "Документ.ЗаданиеНаПеревозку";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет значение служебного реквизита ""Адрес доставки значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");

#КонецОбласти

#Область Документы_ПоручениеЭкспедитору_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПоручениеЭкспедитору.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПоручениеЭкспедитору.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПоручениеЭкспедитору";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПоручениеЭкспедитору";
	Обработчик.БлокируемыеОбъекты = "Документ.ПоручениеЭкспедитору";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет значение служебного реквизита ""Адрес доставки значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");

#КонецОбласти

#Область Документы_ВозвратТоваровПоставщику_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВозвратТоваровПоставщику.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ВозвратТоваровПоставщику";
	Обработчик.ИзменяемыеОбъекты = "Документ.ВозвратТоваровПоставщику";
	Обработчик.БлокируемыеОбъекты = "Документ.ВозвратТоваровПоставщику";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет значение служебного реквизита ""Адрес доставки значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПеремещениеТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПеремещениеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПеремещениеТоваров,"
		+ "Константа.ВариантПриемкиТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПеремещениеТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ПеремещениеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вариант приемки товаров"".
	|Исправляет значения служебных реквизитов ""Адрес доставки значения полей"" и ""Адрес доставки перевозчика значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ЗаказыНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПриобретениеТоваровУслуг_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПриобретениеТоваровУслуг.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыЗапасов,"
		+ "Документ.ПриобретениеТоваровУслуг,"
		+ "Константа.ВариантПриемкиТоваров,"
		+ "РегистрНакопления.ТоварыОрганизаций,"
		+ "Документ.ТТНВходящаяЕГАИС,"
		+ "РегистрСведений.АналитикаУчетаНоменклатуры,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Справочник.СоглашенияСПоставщиками";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПриобретениеТоваровУслуг";
	Обработчик.БлокируемыеОбъекты = "Документ.ПриобретениеТоваровУслуг";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет табличную часть ""Виды запасов"" документов ""Приобретение товаров и услуг"" с хоз. операцией ""Закупка у поставщика по регл. учету"". Также осуществляется очистка реквизита ""Вид запасов"" табличной части ""Товары"" с типом запасов ""Услуга"". Заполняется реквизит ""СтатусУказанияСерийНаСкладах"" табличной части ""Товары"",
	|Очищает ссылку на ТТН ЕГАИС (входящую).
	|Заполняет реквизит ""Вариант приемки товаров"".
	|Исправляет значения служебных реквизитов ""Адрес доставки значения полей"" и ""Адрес доставки перевозчика значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТТНВходящаяЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюТТНВходящаяЕГАИС";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЦеныНоменклатурыПоставщиков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#КонецОбласти

#Область Версия_11_4_3

#Область РегистрыНакопления_ДвиженияКонтрагентДоходыРасходы_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.101";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e8bb220a-4f8b-4354-87ab-973e0a5866a8");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СписаниеЗадолженности";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияКонтрагентДоходыРасходы";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Группирует размноженные записи в регистре ""Движения Контрагент - Доходы/Расходы"" для документов ""Списание задолженности"".'");

#КонецОбласти

#Область РегистрыНакопления_ЗаказыНаПеремещение_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.101";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ЗаказыНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ЗаказыНаПеремещение.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ЗаказыНаПеремещение,"
		+ "Документ.ПеремещениеТоваров";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ЗаказыНаПеремещение";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документа ""Перемещение товаров"" по регистру накопления ""Заказы на перемещение"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ЧекККМ_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.102";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЧекККМ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b91c6f24-26e7-4d0b-adf1-768d4d34b7b3");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЧекККМ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЧекККМ";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЧекККМ";
	Обработчик.БлокируемыеОбъекты = "Документ.ЧекККМ";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет табличную часть чека ""Акцизные марки"" ссылками на справочник ""Штрихкоды упаковок и товаров"". Данные ссылки используются вместо реквизита строкового типа ""Код акцизной марки"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМ.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЖурналФискальныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ЧекККМ_ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.102";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЧекККМ.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fba3c25b-5071-4c8b-8a3d-d943e8fc2996");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЧекККМ.ЗарегистрироватьДанныеКОбработкеДляГенерацииАкцизныхМарок";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Документ.ЧекККМ";
	Обработчик.ИзменяемыеОбъекты = ""
	;
	Обработчик.БлокируемыеОбъекты = ""
	;
	Обработчик.Комментарий = НСтр("ru = 'Генерирует ссылки на справочник ""Штрихкоды упаковок и товаров"" по табличной части чека ""Акцизные марки"". Данные ссылки используются вместо реквизита строкового типа ""Код акцизной марки"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекЕГАИСВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктСписанияЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктПостановкиНаБалансЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ЧекККМВозврат_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.102";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЧекККМВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3df0683b-1ae9-451e-adf6-ea319e742fe5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЧекККМВозврат.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЧекККМВозврат";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЧекККМВозврат";
	Обработчик.БлокируемыеОбъекты = "Документ.ЧекККМВозврат";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет табличную часть чека ""Акцизные марки"" ссылками на справочник ""Штрихкоды упаковок и товаров"". Данные ссылки используются вместо реквизита строкового типа ""Код акцизной марки"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЖурналФискальныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ЧекККМВозврат_ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.102";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЧекККМВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("95fc839a-c6c2-43c4-baa9-87a03288b7d2");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЧекККМВозврат.ЗарегистрироватьДанныеКОбработкеДляГенерацииАкцизныхМарок";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Документ.ЧекККМВозврат";
	Обработчик.ИзменяемыеОбъекты = ""
	;
	Обработчик.БлокируемыеОбъекты = ""
	;
	Обработчик.Комментарий = НСтр("ru = 'Генерирует ссылки на справочник ""Штрихкоды упаковок и товаров"" по табличной части чека ""Акцизные марки"". Данные ссылки используются вместо реквизита строкового типа ""Код акцизной марки"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекЕГАИСВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктСписанияЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктПостановкиНаБалансЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМ.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ЗаявкаНаВозвратТоваровОтКлиента_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 13;
	Обработчик.ПроцедураПроверки = "Справочники.Назначения.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента,"
		+ "Справочник.Назначения";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
	Обработчик.БлокируемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Назначение"" и """"Вариант приемки товаров"".
	|Исправляет значения служебных реквизитов ""Адрес доставки значения полей"" и ""Адрес доставки перевозчика значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ЗаявкаНаВозвратТоваровОтКлиента_ОбработатьДанныеДляГенерацииНазначений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("862fe9a0-68eb-4a74-9628-56babbd53667");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений";
	Обработчик.ОчередьОтложеннойОбработки = 12;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые назначения связанные с документом ""Заявка на возврат товаров от клиента""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказКлиента_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказКлиента.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "Справочники.Назначения.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаказКлиента,"
		+ "Справочник.Назначения";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказКлиента";
	Обработчик.БлокируемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаказКлиента";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Назначение"".
	|Исправляет значения служебных реквизитов ""Адрес доставки значения полей"" и ""Адрес доставки перевозчика значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказКлиента_ОбработатьДанныеДляГенерацииНазначений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("813d918c-cd29-4e4b-b034-e98ecc48965e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказКлиента.ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Документ.ЗаказКлиента,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые назначения связанные с документом ""Заказ клиента""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ЗаказНаПеремещение_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаПеремещение.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 9;
	Обработчик.ПроцедураПроверки = "Справочники.Назначения.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказНаПеремещение,"
		+ "Справочник.НаправленияДеятельности,"
		+ "Константа.ВариантПриемкиТоваров,"
		+ "Справочник.Назначения";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказНаПеремещение";
	Обработчик.БлокируемыеОбъекты = "Документ.ЗаказНаПеремещение,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Назначение"" и ""Вариант приемки"".
	|Исправляет значения служебных реквизитов ""Адрес доставки значения полей"" и ""Адрес доставки перевозчика значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказНаПеремещение_ОбработатьДанныеДляГенерацииНазначений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаПеремещение.ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений";
	Обработчик.ОчередьОтложеннойОбработки = 8;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаказНаПеремещение";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые назначения связанные с документом ""Заказ на перемещение""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Справочники_ДоговорыКонтрагентов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5536e323-88dc-42a3-92ef-2ab948e7ebbc");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ДоговорыКонтрагентов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "Справочники.Назначения.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ДоговорыКонтрагентов,"
		+ "Справочник.НаправленияДеятельности,"
		+ "Справочник.Назначения";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ДоговорыКонтрагентов";
	Обработчик.БлокируемыеОбъекты = "Справочник.ДоговорыКонтрагентов,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Назначение"", ""Тип договора"", ""Вариант приемки товаров"", ""Хозяйственная операция"", ""Вариант оформления закупок"" и ""Способ доставки"". Пока обработчик не выполнен, не возможно обособление сырья и материалов в переработке на стороне по договору, а так же оформление документов закупок (при использовании договоров).'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйОрдерНаТовары.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ДоверенностьВыданная_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.110";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ДоверенностьВыданная.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c9a06356-08a2-4e28-99ca-4387c023f8ee");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ДоверенностьВыданная.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ДоверенностьВыданная";
	Обработчик.ИзменяемыеОбъекты = "Документ.ДоверенностьВыданная";
	Обработчик.БлокируемыеОбъекты = "Документ.ДоверенностьВыданная";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Количество позиций"" документа ""ДоверенностьВыданная""'");

#КонецОбласти

#Область Документы_СборкаТоваров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.117";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СборкаТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Документ.СборкаТоваров,"
		+ "Справочник.Номенклатура,"
		+ "РегистрСведений.АналитикаУчетаНоменклатуры,"
		+ "Справочник.НаправленияДеятельности,"
		+ "Константа.ВариантПриемкиТоваров,"
		+ "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "Документ.СборкаТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.СборкаТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новую ТЧ ""Виды запасов оприходование"", очищает реквизиты ""Вид запасов"" и ""Номер ГТД"" в шапке и ТЧ ""Товары"" документов ""Пересортица товаров"".
	|Заполняет реквизит ""Вариант приемки товаров"".
	|Заполняет реквизит ""Направление деятельности"" из выбранного назначения собираемого комплекта.
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ИнтеграцияЕГАИСУТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыОформленияДокументовЕГАИС";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ЗаказПоставщику_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.119";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказПоставщику.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказПоставщику,"
		+ "Константа.ВариантПриемкиТоваров,"
		+ "Справочник.ДоговорыКонтрагентов,"
		+ "Справочник.СоглашенияСПоставщиками";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказПоставщику";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Хозяйственная операция"" и ""Вариант приемки товаров"".
	|Исправляет значения служебных реквизитов ""Адрес доставки значения полей"" и ""Адрес доставки перевозчика значения полей"".
	|Заполняет поле ДатаПоступления.
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ГрафикПоступленияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвижениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_ТоварыОрганизаций_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.125";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыОрганизаций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 14;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ТоварыОрганизаций,"
		+ "Справочник.ВидыЗапасов,"
		+ "Документ.СборкаТоваров";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыОрганизаций";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерение ""Кор. вид запасов"" записей регистра накопления ""Товары организаций"" по товарам, выкупленным у комитента. Унифицируются хозяйственные операции по выпуску продукции.
	|Очищает движения документа ""Таможенная декларация на импорт"" при оформлении закупки двумя документами.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПорчаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаОбособленногоУчетаЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаВидаДеятельностиНДС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыСведений_РеестрДокументов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.128";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 15;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
		+ "Документ.ЗаказНаСборку,"
		+ "Документ.АктВыполненныхРабот,"
		+ "Документ.ЗаказНаПеремещение,"
		+ "Документ.АктОРасхожденияхПослеОтгрузки,"
		+ "Документ.ЗаявлениеОВвозеТоваров,"
		+ "Документ.АктОРасхожденияхПослеПеремещения,"
		+ "Документ.АктОРасхожденияхПослеПриемки,"
		+ "Документ.ПеремещениеТоваров,"
		+ "Документ.ВнутреннееПотреблениеТоваров,"
		+ "Документ.КорректировкаПриобретения,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании,"
		+ "Документ.ВозвратТоваровМеждуОрганизациями,"
		+ "Документ.ВозвратТоваровОтКлиента,"
		+ "Документ.ВозвратТоваровПоставщику,"
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента,"
		+ "Документ.ЗаказКлиента,"
		+ "Документ.СчетФактураПолученныйАванс,"
		+ "Документ.ЗаказНаВнутреннееПотребление,"
		+ "Документ.ЗаказПоставщику,"
		+ "Документ.ИнвентаризационнаяОпись,"
		+ "Документ.ПередачаТоваровМеждуОрганизациями,"
		+ "Документ.ПересортицаТоваров,"
		+ "Документ.ОприходованиеИзлишковТоваров,"
		+ "Документ.КорректировкаРеализации,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациями,"
		+ "Документ.ПорчаТоваров,"
		+ "Документ.ПоступлениеТоваров,"
		+ "Документ.ПриобретениеТоваровУслуг,"
		+ "Документ.ПриобретениеУслугПрочихАктивов,"
		+ "Документ.ПрочееОприходованиеТоваров,"
		+ "Документ.РеализацияТоваровУслуг,"
		+ "Документ.РеализацияУслугПрочихАктивов,"
		+ "Документ.СборкаТоваров,"
		+ "Документ.СписаниеНедостачТоваров,"
		+ "Документ.СчетФактураВыданный,"
		+ "Документ.СчетФактураВыданныйАванс,"
		+ "Документ.СчетФактураПолученный,"
		+ "Документ.ТаможеннаяДекларацияИмпорт,"
		+ "РегистрСведений.УдалитьРеестрДокументов,"
		+ "Документ.СчетФактураНалоговыйАгент,"
		+ "Документ.СчетФактураКомитента,"
		+ "Документ.СчетФактураКомиссионеру,"
		+ "Документ.СчетФактураНаНеподтвержденнуюРеализацию0,"
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.УдалитьРеестрДокументов";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Реестр документов"" по данным относящихся к нему документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявлениеОВвозеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйОрдерНаТовары.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаРеализации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураПолученный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураВыданный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПересортицаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОприходованиеИзлишковТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПорчаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураВыданныйАванс.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктОРасхожденияхПослеПриемки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктОРасхожденияхПослеПеремещения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураПолученныйАванс.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Справочники_Организации_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.134";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Организации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cbf7e244-a6e0-461a-bbe9-40f84a3da462");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Организации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.Организации";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Организации";
	Обработчик.БлокируемыеОбъекты = "Справочник.Организации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Дата регистрации"" для индивидуальных предпринимателей на основании реквизита ""СвидетельствоДатаВыдачи""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЗаданияКЗакрытиюМесяца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.РегистрацииВНалоговомОргане.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОчередьПолученияКвитанцийОФиксацииГИСМ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОрганизацииДляОбменаГИСМ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_ТоварыНаСкладах_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.138";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыНаСкладах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыНаСкладах.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 14;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыНаСкладах";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения в регистре ""Товары на складах"" по данным документов ""Движение продукции и материалов"", ""Этап производства"". Пока обработчик не выполнен, возможна не корректная работа документов ""Движение продукции и материалов"", ""Этап производства"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_ТоварыКОтгрузке_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.138";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыКОтгрузке.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыКОтгрузке.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 14;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыКОтгрузке";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения в регистре ""Товары к отгрузке"" по данным документов ""Этап производства"". Пока обработчик не выполнен, возможна не корректная работа документов ""Этап производства"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

#Область Документы_СчетФактураПолученныйАванс_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.140";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.СчетФактураПолученныйАванс.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a4d9dcec-cade-401f-836e-e5b6262269bd");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СчетФактураПолученныйАванс.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СчетФактураПолученныйАванс";
	Обработчик.ИзменяемыеОбъекты = "Документ.СчетФактураПолученныйАванс";
	Обработчик.БлокируемыеОбъекты = "Документ.СчетФактураПолученныйАванс";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит НалогообложениеНДС значением по умолчанию: ""Продажа облагается НДС""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_ТоварыКПоступлению_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.149";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыКПоступлению.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 17;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СборкаТоваров,"
		+ "РегистрНакопления.ТоварыКПоступлению,"
		+ "Документ.ЗаказПоставщику,"
		+ "Документ.АктОРасхожденияхПослеПеремещения,"
		+ "Документ.ВозвратТоваровОтКлиента,"
		+ "Документ.АктОРасхожденияхПослеПриемки,"
		+ "Документ.ЗаказНаПеремещение,"
		+ "Документ.ЗаказНаСборку,"
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента,"
		+ "Документ.ПеремещениеТоваров,"
		+ "Документ.ПоступлениеТоваров,"
		+ "Документ.ПриобретениеТоваровУслуг,"
		+ "Документ.ПриходныйОрдерНаТовары,"
		+ "Документ.ПрочееОприходованиеТоваров,"
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыКПоступлению";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документов информационной базы по регистру накопления ""Товары к поступлению"".
	|До завершения обработчика работа с документами не рекомендуется, т.к. информация в регистре некорректна.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйОрдерНаТовары.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктОРасхожденияхПослеПриемки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктОРасхожденияхПослеПеремещения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ТоварыУПартнеров_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.149";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыУПартнеров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыУПартнеров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ТаможеннаяДекларацияИмпорт,"
		+ "РегистрНакопления.ТоварыУПартнеров";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыУПартнеров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения в регистре ""Товары у партнеров"" по данным документов ""Таможенная декларация на импорт"". Пока обработчик не выполнен, возможна не корректная работа документов ""Товары у партнеров"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ТаможеннаяДекларацияИмпорт_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.149";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ТаможеннаяДекларацияИмпорт.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ТаможеннаяДекларацияИмпорт";
	Обработчик.ИзменяемыеОбъекты = "Документ.ТаможеннаяДекларацияИмпорт";
	Обработчик.БлокируемыеОбъекты = "Документ.ТаможеннаяДекларацияИмпорт";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет в табличной части ""Товары"" документов ""Таможенная декларация на импорт"" реквизит ""Хозяйственная операция""; очищает ошибочно установленные серии и статусы указания серий. 
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыУПартнеров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_ДвиженияДенежныеСредстваДоходыРасходы_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.150";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("180ee54f-f5c9-467a-bc40-257055b0ea31");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы,"
		+ "Документ.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет поле период движений в регистре ""ДвиженияДенежныеСредстваДоходыРасходы"" по документам ""ЗаявкаНаРасходованиеДенежныхСредств"", только по движениям, у которых заполнены ресурсы ""СуммаКВыплатеВРамкахЛимита"" или ""СуммаКВыплатеСверхЛимита""
	|
	|Перезаполняет суммы движений в регистре ""ДвиженияДенежныеСредстваДоходыРасходы"" по документам ""ЗаявкаНаРасходованиеДенежныхСредств"" с хоз. операциями ""Выдача займа сотруднику"" и ""Оплата лизингодателю"", у которых количество строк в расшифровке платежа > 1.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ИспользованиеСтарыхКлассификаторовОКПиОКВЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.157";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d8c79f39-e3dd-4953-ac84-df068d380af7");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользованиеКлассификаторовНоменклатуры,"
		+ "Справочник.Номенклатура,"
		+ "Справочник.ВидыНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД";
	Обработчик.БлокируемыеОбъекты = "Константа.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД";
	Обработчик.Комментарий = НСтр("ru = 'Включает ФО ИспользованиеСтарыхКлассификаторовОКПиОКВЭД, если в номенклатуре или видах номенклатуры были указаны коды ОКП или ОКВЭД'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользованиеКлассификаторовНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_КлассификаторОКВЭД2_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.157";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.КлассификаторОКВЭД2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4100bf00-3a95-4b78-b51d-68f4e3751291");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.КлассификаторОКВЭД2.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.КлассификаторВидовЭкономическойДеятельности";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КлассификаторОКВЭД2";
	Обработчик.БлокируемыеОбъекты = "Справочник.КлассификаторОКВЭД2";
	Обработчик.Комментарий = НСтр("ru = 'Создает элементы справочника по ранее созданным кодам ОКВЭД.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_КлассификаторОКПД2_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.157";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.КлассификаторОКПД2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0ebe17d7-623e-4b25-82f6-c0ed091a08b1");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.КлассификаторОКПД2.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.ОбщероссийскийКлассификаторПродукции";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КлассификаторОКПД2";
	Обработчик.БлокируемыеОбъекты = "Справочник.КлассификаторОКПД2";
	Обработчик.Комментарий = НСтр("ru = 'Создает элементы справочника по ранее созданным кодам ОКП.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_Номенклатура_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.157";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("670a4d80-e922-48a1-9719-e0975d283e49");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Номенклатура.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.КлассификаторОКПД2,"
		+ "Справочник.КлассификаторОКВЭД2,"
		+ "Справочник.КлассификаторВидовЭкономическойДеятельности,"
		+ "Справочник.ОбщероссийскийКлассификаторПродукции";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Номенклатура";
	Обработчик.БлокируемыеОбъекты = "Справочник.Номенклатура";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет коды ОКВЭД2 и ОКПД2 по кодам ОКВЭД и ОКП.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаРеализации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторТНВЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторОКПД2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторОКВЭД2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Оперативно

#Область Версия_11_4_1

#Область Обработки_ПлатежныйКалендарь_УдалитьМакетыДереваПлатежейИзХранилища

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.71";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "Обработки.ПлатежныйКалендарь.УдалитьМакетыДереваПлатежейИзХранилища";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Удаляет кэш макетов платежного календаря.'");

#КонецОбласти

#Область ПланыВидовХарактеристик_СтатьиАктивовПассивов_ЗаполнитьНастройкиПредопределенныхЭлементов

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.1.149";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаполнитьНастройкиПредопределенныхЭлементов";
	Обработчик.ЧитаемыеОбъекты = "ПланВидовХарактеристик.СтатьиАктивовПассивов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиАктивовПассивов";
	Обработчик.Комментарий = НСтр("ru = 'В плане видов характеристик ""Статьи активов и пассивов"" заполняет реквизиты предопределенных элементов'");

#КонецОбласти

#КонецОбласти

#Область Версия_11_4_2

#Область Справочники_ВидыЗапасов_УдалитьУстаревшиеОбработчики

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.12";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "Справочники.ВидыЗапасов.УдалитьУстаревшиеОбработчики";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "Константа.СведенияОбОбновленииИБ";
	Обработчик.Комментарий = НСтр("ru = 'Удаляет устаревший обработчик ""Справочники.ВидыЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию"" из очереди отложенных обработчиков обновления.'");

#КонецОбласти

#Область ПланыВидовХарактеристик_СтатьиРасходов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.15";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26d2c401-6f15-4fb1-98bd-5689fb96260f");
	Обработчик.ЧитаемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.Комментарий = НСтр("ru = 'В статьях расходов заполняются новые реквизиты ""Тип расходов"", ""Вариант распределения расходов упр"" и ""Характер производственных затрат"".'");

#КонецОбласти

#Область РегистрыНакопления_ТоварыКПоступлению_УдалитьУстаревшиеОбработчики

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.33";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыКПоступлению.УдалитьУстаревшиеОбработчики";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ТоварыКОформлениюПоступления";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыКОформлениюПоступления";
	Обработчик.Комментарий = НСтр("ru = 'Удаляет обработчик обновления удаленного регистра ""Товары к оформлению поступления"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_УстановитьВариантыОбособления

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.2.51";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьВариантыОбособления";
	Обработчик.ЧитаемыеОбъекты = "Константа.ВариантОбособленияТоваровВоВнутреннемПотреблении,"
		+ "Константа.ВариантОбособленияТоваровВПродажах,"
		+ "Константа.ВариантОбособленияТоваровВПеремещении,"
		+ "Константа.ВариантОбособленияТоваровВСборке";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВариантОбособленияТоваровВПродажах,"
		+ "Константа.ВариантОбособленияТоваровВоВнутреннемПотреблении,"
		+ "Константа.ВариантОбособленияТоваровВПеремещении,"
		+ "Константа.ВариантОбособленияТоваровВСборке";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение констант ""Вариант обособления товаров во внутреннем потреблении"", ""Вариант обособления товаров в перемещении"", ""Вариант обособления товаров в продажах"" и ""Вариант обособления товаров в сборке"".'");

#КонецОбласти

#КонецОбласти

#Область Версия_11_4_3

#Область Справочники_НастройкиХозяйственныхОпераций_ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.4.3.140";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cd45225d-f1f6-4a31-a02a-c00bf89351c1");
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НастройкиХозяйственныхОпераций";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизиты предопределенных элементов справочника  ""Настройки хозяйственных операций"" согласно заданным настройкам в текстовых макетах.'");

#КонецОбласти

#КонецОбласти

#КонецОбласти

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ВыводитьОписаниеОбновлений = НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	ПараметрЗапускаНаСервере = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Если ПараметрЗапускаНаСервере<>Неопределено Тогда
		Если Найти(ПараметрЗапускаНаСервере,"Trade103Data")<>0 Тогда
			ВыводитьОписаниеОбновлений = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлейБазовая";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПерейтиСБазовойВерсииНаПРОФ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПереходСУправлениеТорговлей";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлейБазовая" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.12",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставлителей",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставителей",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.13",
		"Роль.БазовыеПраваЕГАИС",
		"Роль.ВыполнениеСинхронизацииСЕГАИС",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.13",
		"Роль.РазделФинансовыйРезультатИКонтроллинг",
		"Роль.ПодсистемаФинансовыйРезультатИКонтроллинг",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.4.1.19",
		"Роль.ДобавлениеИзменениеАссортиментаИЦенПартнеров",
		"Роль.ДобавлениеИзменениеЦенПартнеров",
		ОписаниеПодсистемы.Имя);
		
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедурыОбновления

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистра                  - Менеджер регистра .
//   ИмяРегистра                       - Строка - имя регистра.
//   Ссылка                      	   - Ссылка - ссылка на документ.
//   ТаблицыДляДвижений                - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(МенеджерРегистра, ИмяРегистра, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	НаборЗаписей = МенеджерРегистра[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	Если ТаблицыДляДвижений <> Неопределено Тогда
		НаборЗаписей.Загрузить(ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, РегистрироватьНаУзлахПлановОбмена);
	
КонецПроцедуры

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистров                 - Менеджер регистра .
//   ИменаРегистров                    - Массив - массив, содержащий имена регистров.
//   Ссылка                      	   - Ссылка - ссылка на документ.
//   ТаблицыДляДвижений                - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
// 
Процедура ЗаписатьНаборыЗаписей(МенеджерРегистров, ИменаРегистров, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	Регистры = Новый Структура(ИменаРегистров);
	
	Для Каждого Регистр Из Регистры Цикл
		ЗаписатьНаборЗаписей(МенеджерРегистров, Регистр.Ключ, Ссылка, ТаблицыДляДвижений, РегистрироватьНаУзлахПлановОбмена);
	КонецЦикла;
	
КонецПроцедуры

/// Дополнительные параметры функции ПерезаписатьДвиженияИзОчереди()
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//      * ЭтоНезависимыйРегистрСведений - Булево - в параметре Данные функции передана таблица со значениями измерений, по которым нужно обновлять данные,
//                                                 Значение по умолчанию - ЛОЖЬ
//      * ИмяИзмеренияДляОтбора - Строка - имя измерения независимого регистра сведений, по которому будет установлен отбор для перезаписи набора записей
//                                          по документу (аналог регистратора для регистров, подчиненных регистраторам)
//
Функция ДополнительныеПараметрыПерезаписиДвиженийИзОчереди() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений",Ложь);
	ДополнительныеПараметры.Вставить("ИмяИзмеренияДляОтбора","");
	ДополнительныеПараметры.Вставить("ПоляУпорядочивания", Новый Массив);
	ДополнительныеПараметры.Вставить("Менеджер", Неопределено);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// На основе данных о необходимости переформирования движений перезаписывает движения документа.
//	Для работы функции необходимо, чтобы процедура ИнициализироватьДанныеДокумента модуля менеджера документа, поддерживала параметр Регистры.
//	см. например, Документ.ПриходныйОрдерНаТовары.ИнициализироватьДанныеДокумента
//
// Параметры:
//  ПолноеИмяДокумента					 - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения. Например, "Документ.ПриходныйОрдерНаТовары"
//																Если документов несколько, то нужно передать их имена в массиве.
//																При обработке независимого регистра сведений нужно передать Неопределено.
//  ПолныеИменаРегистров				 - Строка, Массив - имя регистра, по которому нужно переформировать движения. Например, "РегистрНакопления.ТоварыНаСкладах"
//																Если регистров несколько, то их имена нужно передать в массиве.
//  Очередь								 - Число - очередь отоженной обработки данных для контроля данных на предмет блокировки другими обработчиками
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди()
// 
// Возвращаемое значение:
//  Булево - ИСТИНА, если обработка всех движений завершена 
//
Функция ПерезаписатьДвиженияИзОчереди(ПолныеИменаДокументов, ПолныеИменаРегистров, Очередь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	КонецЕсли;
	ЭтоНезависимыйРегистрСведений = ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений;
	
	Если ТипЗнч(ПолныеИменаДокументов) = Тип("Строка") Тогда
		СписокДокументов = СтрРазделить(ПолныеИменаДокументов, ",", Ложь);
	ИначеЕсли ЭтоНезависимыйРегистрСведений Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(Неопределено);
	Иначе
		СписокДокументов = ПолныеИменаДокументов;
	КонецЕсли;
	
	Если ТипЗнч(ПолныеИменаРегистров) = Тип("Строка") Тогда
		Регистры = СтрРазделить(ПолныеИменаРегистров, ",", Ложь);
	Иначе
		Регистры = ПолныеИменаРегистров;
	КонецЕсли;
		
	ЕстьЕщеРабота = Ложь;
	
	Для Каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		
		Для Каждого ПолноеИмяРегистра Из Регистры Цикл
			ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);    
			
			ДополнительныеПараметрыДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
			
			Если ЭтоНезависимыйРегистрСведений Тогда
				ИмяПоляРегистратор = ДополнительныеПараметры.ИмяИзмеренияДляОтбора;
				ДополнительныеИсточникиДанных = Новый Соответствие;
				ДополнительныеИсточникиДанных.Вставить(ИмяПоляРегистратор);
				ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = ДополнительныеИсточникиДанных;
				ДополнительныеПараметрыДляОбработки.ПоляУпорядочивания = ДополнительныеПараметры.ПоляУпорядочивания;
				ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Очередь,
																											ПолноеИмяРегистра,
																											ДополнительныеПараметрыДляОбработки);
			Иначе
				Если ДополнительныеПараметры.Менеджер = Неопределено Тогда 
					МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
				Иначе
					МенеджерДокумента = ДополнительныеПараметры.Менеджер;
				КонецЕсли;
				ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = МенеджерДокумента.ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра);
				ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Очередь,
																										ПолноеИмяДокумента,
																										ПолноеИмяРегистра,
																										ДополнительныеПараметрыДляОбработки);
				ИмяПоляРегистратор = "Регистратор";
			КонецЕсли;
			
			Пока ВыборкаПоРегистраторам.Следующий() Цикл
				
				НачатьТранзакцию();
				
				Попытка
					
					// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
					Блокировка = Новый БлокировкаДанных;
					
					ЭлементБлокировки = Блокировка.Добавить(ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные().ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					
					Блокировка.Заблокировать();
					
					НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор[ИмяПоляРегистратор].Установить(ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					
					Если ЭтоНезависимыйРегистрСведений Тогда
						ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистраторам[ИмяПоляРегистратор], ИмяПоляРегистратор) <> Неопределено;
						МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					Иначе
						ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистраторам[ИмяПоляРегистратор], "Проведен"); //ответственное чтение реквизита "Проведен"
					КонецЕсли;
					
					Если ТипЗнч(ЗаписатьДвижения) <> Тип("Булево") Тогда
						ЗаписатьДвижения = Ложь;
					КонецЕсли;
					
					Если ЗаписатьДвижения Тогда
						ДопСвойства = Новый Структура;
						ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ВыборкаПоРегистраторам[ИмяПоляРегистратор], ДопСвойства);
						МенеджерДокумента.ИнициализироватьДанныеДокумента(ВыборкаПоРегистраторам[ИмяПоляРегистратор], ДопСвойства, ИмяРегистра);
					
						НаборЗаписей.Загрузить(ДопСвойства.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
					КонецЕсли;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					
					ЗафиксироватьТранзакцию();
				Исключение
					
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru = 'Не удалось перезаписать движения в регистр %ИмяРегистра% по документу %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные(), ВыборкаПоРегистраторам[ИмяПоляРегистратор], ТекстСообщения);
					
				КонецПопытки;
			КонецЦикла;
			
			Если Не ЕстьЕщеРабота
				И ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра) Тогда 
				ЕстьЕщеРабота = Истина;
			КонецЕсли;
			Если ЭтоНезависимыйРегистрСведений Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ВсеСделано = Не ЕстьЕщеРабота;
	Возврат ВсеСделано;
	
КонецФункции

// Адаптирует запрос механизма проведения для использования в функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения,
// делая его запросом для всех проведенных документов.
// Параметры:
//  ИзначальныйТекстЗапроса - Строка - текст запроса механизма проведения, который или формирует таблицу движений, или создает временные таблицы,
//												используемые в запросах формирующих таблицы движений
//												Требования к тексту запроса:
//												- все объединяемые таблицы запроса, формирующего таблицу движений имеют один синоним;
//												- если есть соедининения с другими таблицами, то оно реализовано таким образом, что будет
//													корректно работать, если не установлен отбор по ссылке;
//												- не используются временные таблицы;
//												- не используются вложенные запросы и группировки;
//												- нет упорядочивания;
//												- параметры запроса рассчитываются или по данным шапки, или являются значениями констант;
// 												- для всех полей непримитивных типов заполнены значения по умолчанию, как они хранятся в регистре.
//													Это или пустая ссылка типа, или НЕОПРЕДЕЛЕНО (для полей составного типа), то НЕ должно быть NULL
//												- параметр, устанавливающий отбор по ссылке называется &Ссылка
//												- в конце запроса не должно быть знака ";"
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры расчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении
//													- выражение для его расчета
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
//
// Возвращаемое значение:
//  ИзначальныйТекстЗапроса - строка - адаптированный текст запроса
//
Функция АдаптироватьЗапросМеханизмаПроведения(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
														
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка КАК Регистратор,");
				
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ГДЕ",
										"
										|ГДЕ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка.Проведен
										|	И ");
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			ПревыйСимвол = СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол = СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПревыйСимвол) + СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска = Сред(Элемент.Значение, ПревыйСимвол, ПоследнийСимвол - ПревыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса, Элемент.Ключ, "(" + ПодстановкаВременнойТаблицы + ")");
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать"
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Адаптирует запрос механизма проведения по независимому регистру.
// Результат функции используется в ДанныеНезависимогоРегистраДляПерепроведения().
//
// Параметры:
//  ИзначальныйТекстЗапроса			 - Строка - текст запроса механизма проведения, который формирует таблицу движений.
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ВЗапросеЕстьИсточник			 - Булево - Истина, если в запросе описан источник
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры расчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении - выражение для его расчета.
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
// 
// Возвращаемое значение:
//  Строка - адаптированный текст запроса, который может выполняться для всех документов.
//
Функция АдаптироватьЗапросПроведенияПоНезависимомуРегистру(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ВЗапросеЕстьИсточник,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
	
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	Если НЕ ВЗапросеЕстьИсточник Тогда                   
		
		ИзначальныйТекстЗапроса = ИзначальныйТекстЗапроса + "
		|ИЗ
		|	" + ПолноеИмяДокумента + " КАК ТаблицаДокументаОбновлениеИБ";
		
	КонецЕсли;
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			ПревыйСимвол 				= СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол 			= СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПревыйСимвол)
											+ СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска 			= Сред(Элемент.Значение, ПревыйСимвол, ПоследнийСимвол - ПревыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса 	= СтрЗаменить(ИзначальныйТекстЗапроса,
														Элемент.Ключ,
														"(" + ПодстановкаВременнойТаблицы + ")");
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Комментарий",
		"ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать"
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "НомерНаПечать" Тогда
			ТекстЗамены = """""";
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Комментарий" Тогда
			ТекстЗамены = "ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено 
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Результат адаптации запроса для фукнции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения
// 
// Возвращаемое значение:
//  Структура - поля:
//	* ТекстЗапроса - Строка - должен быть объявлен обязательно, адаптированный текст запроса
//	* ЗначенияПараметров - Структура - значения параметров запроса, которые вычисляются из констант
//										(не зависят от конкретного документа)
//
Функция РезультатАдаптацииЗапроса() Экспорт
	
	РезультатАдаптацииЗапроса = Новый Структура;
	РезультатАдаптацииЗапроса.Вставить("ТекстЗапроса");
	РезультатАдаптацииЗапроса.Вставить("ЗначенияПараметров", Новый Структура);
	
	Возврат РезультатАдаптацииЗапроса;
КонецФункции

// Выбирает регистраторы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом механизма проведения
// Параметры:
//  РезультатАдаптацииЗапроса - Структура - см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса 
// 												Требования к запросам:
// 												- текст не должен содержать обращения к временным таблицам
//												- все запросы должны быть адаптированы для выборки без отбора по ссылке.
//													это можно сделать  с помощью фукнции ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения, 
//													 если текст запроса удовлетворяет ее условиям. Если нет - можно попробовать адаптировать текст самостоятельно
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
// 												- нет упорядочивания; 
// 												- есть поле "Регистратор"; 
//  ПолноеИмяРегистра				 - Строка - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//
// Возвращаемое значение:
//  Регистраторы - Массив - массив ссылок на документы, по которым нужно переформировать движения по регистру
//
Функция РегистраторыДляПерепроведения(РезультатАдаптацииЗапроса,
										ПолноеИмяРегистра,
										ПолноеИмяДокумента) Экспорт
	
	Очередь = Неопределено;
	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса	= "";
	
	ЧастиИмениРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь);
	
	ТипРегистра = ЧастиИмениРегистра[0];
	ИмяРегистра = ЧастиИмениРегистра[1];
	
	Если ТипРегистра = "РегистрНакопления"
		Или ТипРегистра = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	Иначе
		ТекстИсключения = НСтр("ru = 'Функция пока не поддерживает работу с регистрами типа %ТипРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРегистра%", ТипРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	ТекстРегистра = 
	"ВЫБРАТЬ";
	
	ТекстВыборкиСуммирующегоЗапроса =
	"ВЫБРАТЬ";
	ТекстГруппировкиСуммирующиегоЗапроса = "
	|СГРУППИРОВАТЬ ПО";	
	ТекстУсловияСуммирующиегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";	
	
	Если ТипРегистра = "РегистрСведений" Тогда
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	1 КАК КонтрольноеПолеОбновлениеИБ,");
		ТекстРегистра = СтрЗаменить(ТекстРегистра,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	-1,");
		ТекстВыборкиСуммирующегоЗапроса = СтрЗаменить(ТекстВыборкиСуммирующегоЗапроса,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,");
		ТекстУсловияСуммирующиегоЗапроса = ТекстУсловияСуммирующиегоЗапроса + "
		| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	КонецЕсли;				
	
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	Для каждого Колонка из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если ТипРегистра = "РегистрНакопления"
			И МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним) <> Неопределено Тогда		
			
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") КАК " + Колонка.Псевдоним + ",";
			
			ТекстУсловияСуммирующиегоЗапроса = ТекстУсловияСуммирующиегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") <> 0";
			
		ИначеЕсли Не Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Колонка.Псевдоним + " КАК " + Колонка.Псевдоним + ",";
			
			ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
			|	ВложенныйЗапрос." + Колонка.Псевдоним + ",";
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение из МетаданныеРегистра.Измерения Цикл		
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Измерение.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
		|	ВложенныйЗапрос." + Измерение.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Для каждого Ресурс из МетаданныеРегистра.Ресурсы Цикл		
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") КАК " + Ресурс.Имя + ",";
			
			ТекстУсловияСуммирующиегоЗапроса = ТекстУсловияСуммирующиегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") <> 0";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	0 КАК " + Ресурс.Имя + ",";
		Иначе	
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
			|	ВложенныйЗапрос." + Ресурс.Имя + ",";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит из МетаданныеРегистра.Реквизиты Цикл		
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Реквизит.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
		|	ВложенныйЗапрос." + Реквизит.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующиегоЗапроса = Лев(ТекстГруппировкиСуммирующиегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующиегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	Если Очередь <> Неопределено Тогда
		ТекстРегистра = ТекстРегистра + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПолноеИмяРегистра + ".Изменения КАК РегистраторыКОбработке
		|		ПО ТаблицаРегистра.Регистратор = РегистраторыКОбработке.Регистратор
		|			И (РегистраторыКОбработке.Узел = &ТекущаяОчередь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоРегистратор.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоСсылка.Ссылка";
	КонецЕсли;
	
	ТекстРегистра = ТекстРегистра + "
	|ГДЕ
	|	ТаблицаРегистра.Регистратор ССЫЛКА " + ПолноеИмяДокумента;
	
	Если Очередь <> Неопределено Тогда
		ТекстРегистра = ТекстРегистра + "
		|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
		|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL ";
	КонецЕсли;
	
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Регистратор КАК Регистратор
	|ИЗ
	|(" + ТекстВыборкиСуммирующегоЗапроса + "
	|ИЗ
	|	("
	+ ТекстЗапросаФормированияДвижений 
	+ "
	|ОБЪЕДИНИТЬ ВСЕ
	|" 
	+ ТекстРегистра
	+ ") КАК ВложенныйЗапрос "
	+ ТекстГруппировкиСуммирующиегоЗапроса
	+ ТекстУсловияСуммирующиегоЗапроса + ") КАК НеправильныеДвижения";
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Если Очередь <> Неопределено Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц);
	
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоРегистратор","ВТЗаблокировано" + ИмяРегистра);
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоСсылка","ВТЗаблокировано" + СтрРазделить(ПолноеИмяДокумента,".")[1]);
	
		ЗапросВыборки.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросВыборки.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));
		
	КонецЕсли;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Регистраторы = ЗапросВыборки.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Возврат Регистраторы;
КонецФункции

// Выбирает документы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом механизма проведения.
//  Используется для независимых регистров сведений, например, РеестрДокументов, ДокументыПоОС, ДокументыПоНМА.
//
// Параметры:
//  РезультатАдаптацииЗапроса	 - Структура - см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса.
//  ПолноеИмяРегистра			 - Строка	 - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента			 - Строка	 - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  НеиспользуемыеПоля			 - Массив	 - Список полей, по которым не требуется проверять совпадение данных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит колонку "Ссылка".
//
Функция ДанныеНезависимогоРегистраДляПерепроведения(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт

	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса	= "";
	
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
		
	ТекстРегистра = 
	"ВЫБРАТЬ";
	
	ТекстВыборкиСуммирующегоЗапроса =
	"ВЫБРАТЬ";
	ТекстГруппировкиСуммирующиегоЗапроса = "
	|СГРУППИРОВАТЬ ПО";	
	ТекстУсловияСуммирующиегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";	
	
	ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	1 КАК КонтрольноеПолеОбновлениеИБ,");
	ТекстРегистра = СтрЗаменить(ТекстРегистра,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	-1,");
	ТекстВыборкиСуммирующегоЗапроса = СтрЗаменить(ТекстВыборкиСуммирующегоЗапроса,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,");
	ТекстУсловияСуммирующиегоЗапроса = ТекстУсловияСуммирующиегоЗапроса + "
	| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	// Поля по которым не требуется проверять совпадение данных в ИБ с данными запроса.
	Если НеиспользуемыеПоля = Неопределено Тогда
		НеиспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	Для каждого Колонка из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
		Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Колонка.Псевдоним + " КАК " + Колонка.Псевдоним + ",";
			
			ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
			|	ВложенныйЗапрос." + Колонка.Псевдоним + ",";
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение из МетаданныеРегистра.Измерения Цикл		
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Измерение.Имя = "Комментарий" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	ВЫРАЗИТЬ(ТаблицаРегистра." + Измерение.Имя + " КАК Строка (1000)),";
		Иначе	
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Измерение.Имя + ",";
		КонецЕсли; 
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
		|	ВложенныйЗапрос." + Измерение.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Для каждого Ресурс из МетаданныеРегистра.Ресурсы Цикл		
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
			|	ВложенныйЗапрос." + Ресурс.Имя + ",";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
	КонецЦикла;
	
	Для каждого Реквизит из МетаданныеРегистра.Реквизиты Цикл		
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Реквизит.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
		|	ВложенныйЗапрос." + Реквизит.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующиегоЗапроса = Лев(ТекстГруппировкиСуммирующиегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующиегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	
	ТекстРегистра = ТекстРегистра + "
	|ГДЕ
	|	ТаблицаРегистра.Ссылка ССЫЛКА " + ПолноеИмяДокумента;
	
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Ссылка КАК Ссылка
	|ИЗ
	|(" + ТекстВыборкиСуммирующегоЗапроса + "
	|ИЗ
	|	("
	+ ТекстЗапросаФормированияДвижений 
	+ "
	|ОБЪЕДИНИТЬ ВСЕ
	|" 
	+ ТекстРегистра
	+ ") КАК ВложенныйЗапрос "
	+ ТекстГруппировкиСуммирующиегоЗапроса
	+ ТекстУсловияСуммирующиегоЗапроса + ") КАК НеправильныеДвижения";
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	ДанныеРегистра = ЗапросВыборки.Выполнить().Выгрузить();
	
	Возврат ДанныеРегистра;

КонецФункции

// Сообщает пользователю, работа с формой временно ограничена, т.к. не завершен переход на новую версию программы.
//
Процедура СообщитьЧтоРаботаСФормойВременноОграничена() Экспорт

	ТекстСообщения = НСтр("ru = 'Работа с формой временно ограничена, т.к. не завершен переход на новую версию программы. Данные отображаемые в форме могут быть не корректными.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	
КонецПроцедуры

// Сообщает пользователю, что работа с формой временно ограниченна, т.к. не завершены процедуры обновления ИБ по объекту метаданных
//
// Параметры:
//  ПолноеИмяМетаданныхОбъекта	 - Строка	 - полное имя объекта метаданных, по которому обновление ИБ должно быть завершено. 
//
Процедура ПроверитьВозможностьОткрытияФормы(ПолноеИмяМетаданныхОбъекта) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ПолноеИмяМетаданныхОбъекта) Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;

КонецПроцедуры

// Записывает значения констант с помощью ОбновлениеИнформационнойБазы.ЗаписатьДанные().
//
// Параметры:
//  ЗначенияКонстант - Структура - Ключ описывает имя константы.
//
Процедура ЗаписатьЗначенияКонстант(ЗначенияКонстант) Экспорт

	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
		
		МенеджерЗначения.Значение = КлючИЗначение.Значение;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УТ 11.
//
Процедура ПервыйЗапуск() Экспорт
	
	ЭтоПереходСБазовойВерсииНаПРОФ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереходСБазовойВерсииНаПРОФ","ЭтоПереходСБазовойВерсииНаПРОФ");
	Если ЭтоПереходСБазовойВерсииНаПРОФ <> Неопределено и ЭтоПереходСБазовойВерсииНаПРОФ Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.Валюты.ЗаполнитьВалютыПоУмолчанию();
	Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора("006,113,166,796,055,168");
	
	ЗаполнитьКонстантыПоУмолчанию();
	
	БизнесПроцессы.СогласованиеПродажи.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗакупки.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЦенНоменклатуры.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗаявкиНаВозвратТоваровОтКлиента.ИнициализироватьРолиИсполнителей();
	
	Справочники.Партнеры.ЗаполнитьПредопределенныхПартнеров();
	Справочники.Контрагенты.ЗаполнитьПредопределенныхКонтрагентов();
	Справочники.Организации.ЗаполнитьПредопределеннуюОрганизацию();
	Справочники.СкидкиНаценки.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СостоянияПроцессов.НачальноеЗаполнениеПоследовательностиЭтаповПроцессовПродаж();
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств();
	Справочники.ВидыКонтактнойИнформации.ЗаполнитьСвойстваВидовКонтактнойИнформации();
	Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций();
	Справочники.Приоритеты.СоздатьПриоритетыПоУмолчанию();
	Справочники.ПриоритетыОплаты.СоздатьПриоритетыПоУмолчанию();
	Справочники.ПричиныОтменыЗаказовПоставщикам.ЗаполнитьПредопределенныеЭлементы();
	
	АудитСостоянияСистемы.ЗаполнитьСправочникПроверокСостоянияСистемы();
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПредопределенныеСтатьиДоходов();
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПредопределенныеСтатьиРасходов();
	ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаполнитьНастройкиПредопределенныхЭлементов();
	
	КалендарныеГрафики.ОбновитьИспользованиеНесколькихПроизводственныхКалендарей();
	Справочники.ВариантыКлассификацииЗадолженности.СоздатьВариантКлассификацииЗадолженностиПоУмолчаниюМонопольно();
	МониторингЦелевыхПоказателей.ЗаполнитьСтруктуруЦелейИВариантыАнализа();
	
	ПланыОбмена.МобильноеПриложениеТорговыйПредставитель.НачальноеЗаполнениеКодаУзлаЭтойИБ();
	
	РегистрыСведений.ШтрихкодыНоменклатуры.ЗаполнитьКонстантыПодсистемыШтрихкодирования();
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера();
	
	ОбновлениеИнформационнойБазыУТ.ОтключитьНеиспользуемыеРегламентныеЗаданияБазовойВерсии();
	
КонецПроцедуры

// Заполняет константы значениями по умолчанию.
// Вызывается при первоначальном заполнении ИБ после заполнения следующих данных
//	- Справочник.УпаковкиЕдиницыИзмерения
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	УстановитьВалютуРегламентированногоУчета();
	УстановитьВалютуУправленческогоУчета();
	УстановитьЕдиницыИзмерения();
	
	ЗначенияКонстант = ОбщегоНазначенияУТПовтИсп.ПолучитьЗначенияКонстантПоУмолчанию();
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Заполняет служебные константы-идентификаторы конфигурации.
//
Процедура УстановитьСлужебныеКонстанты() Экспорт
	
	// Определим правильные значения служебных констант (функциональных опций).
	ЗначенияКонстант = Новый Структура("УправлениеТорговлей, КомплекснаяАвтоматизация, УправлениеПредприятием", Ложь, Ложь, Ложь);
	
	МодулиПодсистем = Новый Массив;
	ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем(МодулиПодсистем);
	
	МодулиПодсистем = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьМассивВСтруктуруИлиСоответствие(МодулиПодсистем, Истина);
	
	Если МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУП") Тогда
		ЗначенияКонстант.УправлениеПредприятием = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыКА") Тогда
		ЗначенияКонстант.КомплекснаяАвтоматизация = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУТ") Тогда
		ЗначенияКонстант.УправлениеТорговлей = Истина;
	Иначе
		ВызватьИсключение НСтр("ru='Не удалось определить служебный идентификатор конфигурации.'");
	КонецЕсли;
	
	// Установим эти значения.
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
			
			// Текущее значение константы в ИБ не соответствует правильному - исправим
			МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
			
			МенеджерЗначения.Значение = КлючИЗначение.Значение;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура устанавливает значение валюты регламентированного учета.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуРегламентированногоУчета()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления
			|	И Валюты.Код = ""643""");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Коды = Новый Массив;
			Коды.Добавить("643");
			РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(Коды);
			УстановитьВалютуРегламентированногоУчета();
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Константы.ВалютаРегламентированногоУчета.Установить(Выборка.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает значение валюты управленческого учета.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуУправленческогоУчета()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаУправленческогоУчета.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаУправленческогоУчета.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значения констант, связанных с единицами измерения
//
Процедура УстановитьЕдиницыИзмерения()
	
	БазоваяЕдиницаИзмеренияДлины  = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("006");
	БазоваяЕдиницаИзмеренияВеса   = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166");
	БазоваяЕдиницаИзмеренияОбъема = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("113");
	БазоваяЕдиницаИзмеренияПлощади = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("055");
	БазоваяЕдиницаИзмеренияШтук    = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
	БазоваяЕдиницаИзмеренияРазливнойПродукции = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112");
	
	Константы.ЕдиницаИзмеренияДлины.Установить(БазоваяЕдиницаИзмеренияДлины);
	Константы.ЕдиницаИзмеренияВеса.Установить(БазоваяЕдиницаИзмеренияВеса);
	Константы.ЕдиницаИзмеренияОбъема.Установить(БазоваяЕдиницаИзмеренияОбъема);
	Константы.ЕдиницаИзмеренияПлощади.Установить(БазоваяЕдиницаИзмеренияПлощади);
	Константы.ЕдиницаИзмеренияКоличестваШтук.Установить(БазоваяЕдиницаИзмеренияШтук);
	Константы.ЕдиницаИзмеренияРазливнойПродукции.Установить(БазоваяЕдиницаИзмеренияРазливнойПродукции);
	
КонецПроцедуры

// Для базовой версии отключает неиспользуемые регламентные задания.
//
Процедура ОтключитьНеиспользуемыеРегламентныеЗаданияБазовойВерсии() Экспорт
	
	Если НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 ИЛИ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	НеиспользуемыеЗадания = Новый Структура(
		"ABCКлассификацияНоменклатуры,
		|ABCКлассификацияПартнеров,
		|АрхивированиеЧековККМ,
		|XYZКлассификацияНоменклатуры,
		|XYZКлассификацияПартнеров,
		|АрхивированиеЧековККМ,
		|ЗагрузкаКурсовВалют,
		|ЗапускДополнительныхОбработок,
		|ЗаполнениеДанныхДляОграниченияДоступа,
		|ИнтеграцияС1СДокументооборотВыполнитьОбменДанными,
		|ОбновлениеАгрегатов,
		|ОбновлениеДанныхОДоступностиТоваровДляВнешнихПользователей,
		|ОбновлениеКодовТоваровПодключаемогоОборудования,
		|ОбновлениеНоменклатурыПродаваемойСовместно,
		|ОбновлениеСтатусовДоставкиSMS,
		|ОтправкаSMS,
		|ОчисткаСегментов,
		|ПерестроениеАгрегатов,
		|ПолучениеИОтправкаЭлектронныхПисем,
		|ПроведениеПоРасчетамСПартнерами,
		|РасчетИсточниковДанныхВариантовАнализа,
		|РасчетПоказателейПрогнозаРасходаУпаковок,
		|СозданиеЗаданийНаОтбор,
		|СозданиеЗаданийНаПересчетТоваров,
		|СозданиеЗаданийНаПеремещение,
		|СозданиеРасходныхОрдеров,
		|УведомлениеИсполнителейОНовыхЗадачах,
		|УдалениеНеактуальнойИнформацииСинхронизации,
		|УдалениеОтложенныхЧековККМ,
		|ФормированиеСегментов");
	
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	МассивЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	
	ПараметрыЗадания = Новый Структура("Использование", Ложь);
	
	Для Каждого Задание Из МассивЗаданий Цикл
		
		Если НеиспользуемыеЗадания.Свойство(Задание.Метаданные.Имя) Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаВерсиюПроф

// Обработчик перехода на версию ПРОФ.
//
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПереходСБазовойВерсииНаПРОФ","ЭтоПереходСБазовойВерсииНаПРОФ",Истина);
	
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("БазоваяВерсия",                   БазоваяВерсия);
	ЗначенияКонстант.Вставить("ИспользоватьУправлениеДоступом",  Не БазоваяВерсия);
	ЗначенияКонстант.Вставить("УправлениеТорговлей",             Истина);
	ЗначенияКонстант.Вставить("ОтветственныйВДокументах",        Не БазоваяВерсия);
	ЗначенияКонстант.Вставить("НеБазоваяВерсия",                 Не БазоваяВерсия);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбновлениеНовыхВерсийИБ

#Область УстаревшиеМетаданные

#КонецОбласти

Процедура ОбновитьКонтактнуюИнформациюДляСписков(Параметры) Экспорт
	
	ОбъектыМетаданных = МассивОбъектовМетаданныхДляОбработки();
	
	Для каждого Объект Из ОбъектыМетаданных Цикл
	
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, Объект.ПолноеИмя());
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
					
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(Объект.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
								
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Если СпрОбъект = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписков(СпрОбъект);
				
				Если Объект = Метаданные.Справочники.Контрагенты 
					И СпрОбъект.СтранаРегистрации.Пустая()
					И НЕ СпрОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
					
					СпрОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
					
				КонецЕсли;

				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заполнить вид контактной информации для списка у элемента: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Объект,
				Выборка.Ссылка,
				ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЦикла;
	
	МассивИмен = Новый Массив;
	Для каждого Объект Из ОбъектыМетаданных Цикл
		МассивИмен.Добавить(Объект.ПолноеИмя());
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, МассивИмен);		
	
КонецПроцедуры

Функция МассивОбъектовМетаданныхДляОбработки()
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.КонтактныеЛицаПартнеров);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Контрагенты);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Организации);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Партнеры);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Пользователи);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.РегистрацииВНалоговомОргане);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Склады);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.ФизическиеЛица);
		
	Возврат ОбъектыМетаданных;
	
КонецФункции

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ЗначениеРеквизита	 - Любой тип - значение заполняемого реквизита. При обработке проверяется - если значение реквизита в объекте
//							не равно пустому, то объект отмечается обработанным без изменения реквизита
//
Процедура ЗаполнитьПустойРеквизитЗначениемПоУмолчанию(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПустоеЗначение = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.ПривестиЗначение();
	
	ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ПустоеЗначение, ЗначениеРеквизита);
	
КонецПроцедуры

// Регистрирует к обработке объекты с пустым значением реквизита
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//
Процедура ЗаполнитьПустойРеквизитЗначениемПоУмолчаниюЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита) Экспорт
  
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПустоеЗначение = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.ПривестиЗначение();
	
	ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ПустоеЗначение);
КонецПроцедуры

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Любой тип - исходное значение реквизита. Если на момент обработки в объекте будет другое значение -
//										то он будет отмечен обработанным без изменения реквизита 
//  КонечноеЗначение	 - Любой тип - новое значение реквизита, которое будет присвоено при обработке 
//
Процедура ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение, КонечноеЗначение) Экспорт
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Объект[ИмяРеквизита] <> ИсходноеЗначение Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			Иначе
				Объект[ИмяРеквизита] = КонечноеЗначение;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Регистрирует к обработке объекты, у которых реквизит имеет переданное значение.
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Любой тип - к обработке будут отмечены реквизиты
//
Процедура ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение) Экспорт
  
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка 
	|ИЗ
	|	#ПолноеИмяОбъекта КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.#ИмяРеквизита = &ИсходноеЗначение";
		
	Запрос.УстановитьПараметр("ИсходноеЗначение", ИсходноеЗначение);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизита", ИмяРеквизита);
	
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Функция ПроверитьПолучитьОбъект(Ссылка,ВерсияДанных,Очередь) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	Если Объект.ВерсияДанных <> ВерсияДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Объект;
	
КонецФункции

Процедура СообщитьОНеудачнойБлокировке(Ссылка) Экспорт
	ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

Процедура СообщитьОНеудачнойОбработке(ИнформацияОбОшибке, Ссылка) Экспорт
	ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

Процедура ЗаполнитьЗначениеРазделенияПоОбластямДанных() Экспорт
	
	Если Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Константы.КомплекснаяАвтоматизация.Получить());
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Константы.УправлениеТорговлей.Получить());
	Иначе
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Ложь);
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров_ОтметитьКОбработке(Параметры) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров(Параметры) Экспорт
	
	Если Константы.ПорядокОформленияВыкупаПриСписанииТоваров.Получить() = Перечисления.НастройкиОформленияВыкупаПриСписанииТоваров.ПустаяСсылка() Тогда
		МенеджерЗначения = Константы.ПорядокОформленияВыкупаПриСписанииТоваров.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.НастройкиОформленияВыкупаПриСписанииТоваров.ПриФактическомПотреблении;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УстановитьВидКонтроляТоваровОрганизаций_ОтметитьКОбработке(Параметры) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура УстановитьВидКонтроляТоваровОрганизаций(Параметры) Экспорт
	
	Если Константы.ВидКонтроляТоваровОрганизаций.Получить() = Перечисления.ВидыКонтроляТоваровОрганизаций.УдалитьКонецДняКонецМесяцаИДатаПоследнегоДвижения Тогда
		МенеджерЗначения = Константы.ВидКонтроляТоваровОрганизаций.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВидыКонтроляТоваровОрганизаций.КонецМесяцаИДатаПоследнегоДвижения;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#Область УстановкаКонстанты_ВалютыУпрИРеглУчетаСовпадают

Процедура ВалютыУпрИРеглУчетаСовпадают_ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ВалютыУпрИРеглУчетаСовпадают_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ЗначениеКонстанты = (Константы.ВалютаУправленческогоУчета.Получить() = Константы.ВалютаРегламентированногоУчета.Получить());
	
	МенеджерЗначения = Константы.ВалютыУпрИРеглУчетаСовпадают.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = ЗначениеКонстанты;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользованиеКлассификаторовНоменклатуры

Процедура ИспользованиеКлассификаторовНоменклатуры_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользованиеКлассификаторовНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПродажиНаЭкспорт = Константы.ИспользоватьПродажиНаЭкспорт.Получить();
	ИспользуютсяКлассификаторы = Константы.ИспользованиеКлассификаторовНоменклатуры.Получить();
	Если ПродажиНаЭкспорт И Не ИспользуютсяКлассификаторы Тогда
		МенеджерЗначения = Константы.ИспользованиеКлассификаторовНоменклатуры.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_НеИспользоватьВводОстатковВерсии24

Процедура НеИспользоватьВводОстатковВерсии24_ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура НеИспользоватьВводОстатковВерсии24_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерЗначения = Константы.НеИспользоватьВводОстатковВерсии24.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = НЕ Константы.ИспользоватьВводОстатковВерсии24.Получить();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользованиеСтарыхКлассификаторовОКПиОКВЭД

Процедура ИспользованиеСтарыхКлассификаторовОКПиОКВЭД_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользованиеСтарыхКлассификаторовОКПиОКВЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.КодОКВЭД <> ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
		|	ИЛИ Номенклатура.КодОКП <> ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.КодОКВЭД <> ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
		|	ИЛИ ВидыНоменклатуры.КодОКП <> ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка)
		|;
		|ВЫБРАТЬ
		|	ИспользованиеКлассификаторовНоменклатуры.Значение КАК Значение
		|ИЗ
		|	Константа.ИспользованиеКлассификаторовНоменклатуры КАК ИспользованиеКлассификаторовНоменклатуры";
		
	ОбработкаЗавершена = Истина;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Номенклатура");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользованиеКлассификаторовНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		СтарыеКодыУстановлены = Не ПакетРезультатов[0].Пустой();
		Выборка = ПакетРезультатов[1].Выбрать();
		Выборка.Следующий();
		КлассификаторыИспользуются = Выборка.Значение;
		
		МенеджерКонстанты = Константы.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД.СоздатьМенеджерЗначения();
		
		Если СтарыеКодыУстановлены И КлассификаторыИспользуются Тогда
			
			МенеджерЗначения = Константы.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбработкаЗавершена = Ложь;
		
		Шаблон = НСтр("ru = 'Не удалось установить значение константы ""Использование старых классификаторов (ОКП и ОКВЭД)"" по причине: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Константы.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД,
			,
			ТекстСообщения);
			
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
	
КонецПроцедуры

#КонецОбласти


Процедура УстановитьВариантыОбособления() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ВариантОбособленияТоваровВоВнутреннемПотреблении.Получить()) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВоВнутреннемПотреблении.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВоВнутреннемПотреблении.ЗаказНаВнутреннееПотребление;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВариантОбособленияТоваровВПеремещении.Получить()) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВПеремещении.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВПеремещении.НазначениеПолучателя;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВариантОбособленияТоваровВПродажах.Получить()) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВПродажах.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВПродажах.ЗаказКлиента;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВариантОбособленияТоваровВСборке.Получить()) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВСборке.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВСборке.НазначениеСобираемогоКомплекта;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
