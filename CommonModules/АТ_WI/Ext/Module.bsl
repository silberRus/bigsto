
Функция КодОшибкиНеДостаточноТовара() Возврат 1 КонецФункции

Функция КодОшибкиЗаписиОбъекта() 		Возврат 500 КонецФункции
Функция КодОшибкиЗапрещенноеДействие() 	Возврат	403 КонецФункции
Функция КодОшибкиДоступЗапрещен() 		Возврат 401 КонецФункции
Функция КодОшибкиПлохойЗапрос() 		Возврат 400 КонецФункции

Функция ПутьККартинкам() Экспорт	Возврат "imgs" КонецФункции
Функция ПутьКДокументам() Экспорт	Возврат "docs" КонецФункции

Функция ОбновитьКешФайлПрефиксного()
	
	// Получает префиксное дерево и помещает его в константу для быстрого извлечения клиентами
	
	Константы.АТ_WI_Trie_Артикулы.Установить(
		w1_Json.JSON36(
			АТ_WI.ПолучитьСжатоеПрефиксноеДеревоИзАртикулов_рабочее(),,
			Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,"",,,,,,Ложь)));
	
КонецФункции
Процедура АТ_КиллерСессий() Экспорт
	
	// Очищает ключи (access_token) по которым истек срок годности
	// при очищении очищает access_token
	// также удаляет ключи (refresh_token) срок которых истек
	
	Запрос = Новый Запрос("
	
	// На очистку
	
	|ВЫБРАТЬ 	refresh_token, Usr, create, create_refresh, rememberMe
	|ИЗ 		РегистрСведений.АТ_tokens
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.АТ_ВремяЖизниКлюча
	|ПО ДОБАВИТЬКДАТЕ(Create, СЕКУНДА, Значение) < &ТекДата
	|
	|ГДЕ access_token <> """";
	
	// На удаление
	
	|ВЫБРАТЬ 	refresh_token
	|ИЗ 		РегистрСведений.АТ_tokens
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.АТ_ВремяЖизниМастерКлюча
	|ПО НЕ rememberMe И ДОБАВИТЬКДАТЕ(create_refresh, СЕКУНДА, Значение) < &ТекДата
	|");
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Пакет = Запрос.ВыполнитьПакет();
	
	// Очистка
	
	Выборка = Пакет[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.АТ_tokens.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		стрОшибки = "";
		Если Не Записать(Запись) Тогда
			Сообщить(стрОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление
	
	Выборка = Пакет[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		УдалитьМастерКлюч(Выборка.refresh_token);
	КонецЦикла;
	
	
	// Потом обновление кеша вытащить куданибуть (здесь времено приютили)
	// ОбновитьКешФайлПрефиксного();
	
КонецПроцедуры

Функция Параметр(Запрос, ИмяПараметра, ЭтоОтладка, ЗначениеСуществует = Ложь, ОбязательныйТип = Неопределено, Ответ = Неопределено, Ошибка = Ложь)
	
	// ОбязательныйТип - тип значения который ожидается
	// 	если указать а параметр будет другого типа (кроме от определено) тогда в ответ будет помещена ошибка и Ошибка = истина
	
	Перем Значение;
	
	Если ЭтоОтладка Тогда
		Если Не Запрос.Свойство(ИмяПараметра, Значение) Тогда
			ЗначениеСуществует = Ложь;
		КонецЕсли;
	Иначе
		Значение = Запрос.ПараметрыЗапроса.Получить(ИмяПараметра);
	КонецЕсли;
	
	Если Значение <> Неопределено И ОбязательныйТип <> Неопределено И ТипЗнч(Значение) <> ОбязательныйТип Тогда
		Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), ИмяПараметра + " должен быть " + ОбязательныйТип), ЭтоОтладка);
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции
Функция ПолучитьЗначениеИзТела(Запрос, Ответ, ОжидаемыйТип = Неопределено, Менеджеры = Неопределено, ЭтоОтладка = Ложь)
	
	// Распарсивает тело запроса и возвращает значение
	// Ошибка - если произойдет ошибка тогда, в Ответ будет помещен ответ с ошибкой
	//	если ошибки не будет то вернется распарсенное значение
	//
	// ОжидаемыйТип - тип который должен вернуться, если заполнить и тип не совпадет то будет ошибка
	
	Перем Значение;
	
	Если ЭтоОтладка Тогда
		Значение = Запрос.Тело;
	Иначе
		
		стрОшибки 		= "";
		ТекстЗапроса 	= Запрос.ПолучитьТелоКакСтроку();
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Тело запроса не заполнено."), ЭтоОтладка);
		Иначе
			
			Попытка
				Значение = HTTPМодуль.UnJSON(ТекстЗапроса, ОжидаемыйТип = Тип("Соответствие"),,?(Менеджеры = Неопределено, Неопределено, Новый Структура("Менеджеры", Менеджеры)), стрОшибки);
			Исключение
				Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Не удалось распарсить запрос."), ЭтоОтладка);
			КонецПопытки;
			
			Если стрОшибки <> "" Тогда
				Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Ошибка парсера JSON: " + стрОшибки), ЭтоОтладка);
			КонецЕсли;
		
			Если Значение <> Неопределено И ОжидаемыйТип <> Неопределено И ТипЗнч(Значение) <> ОжидаемыйТип Тогда
				Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Не верный тип значения, ожидалось " + ОжидаемыйТип + "."), ЭтоОтладка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
Функция ПолучитьСтруктураИзТелаИПроверить(Запрос, Ответ, ОбязательныеПоля, Менеджеры = Неопределено, ЭтоОтладка = Ложь)
	
	// Распарсивает тело запроса и возвращает структуру
	// Ошибка - если произойдет ошибка тогда, в Ответ будет помещен ответ с ошибкой
	//	если ошибки не будет то вернется распарсенное значение
	//
	// ОбязательныеПоля - строка, значения обязательных полей через запятую которые должны быть в структуре
	// ОжидаемыйТип - тип который должен вернуться, если заполнить и тип не совпадет то будет ошибка
	
	ПараметрыССайта = ПолучитьЗначениеИзТела(Запрос, Ответ, Тип("Структура"), Менеджеры, ЭтоОтладка);
	Если ПараметрыССайта <> Неопределено Тогда
		
		ПроверитьОбязательныеСвойства(ПараметрыССайта, ОбязательныеПоля, Ответ, ЭтоОтладка);
		
	КонецЕсли;
	
	Возврат ПараметрыССайта;
			
КонецФункции
Функция ПолучитьСтруктураВозможныхПолейИзТелаИПроверить(Запрос, Ответ, ВозможныеПоля, Менеджеры = Неопределено, ЭтоОтладка = Ложь)
	
	// Распарсивает тело запроса и возвращает структуру
	// Ошибка - если произойдет ошибка тогда, в Ответ будет помещен ответ с ошибкой
	//	если из ожидаемых полей не будет всех полей (нужен хотябы 1) тогда вернет ошибку
	// в случае ошибки ответом будет ответ с перечнем полей которых ожидает система
	// если без ошибок тогда вернет структуру где будут все поля даже поля которых не было (они будут не определены)
	//
	// ВозможныеПоля - строка, значения полей через запятую которые должны быть в структуре
	// ОжидаемыйТип - тип который должен вернуться, если заполнить и тип не совпадет то будет ошибка
	
	Перем Структура;
	
	ПараметрыССайта = ПолучитьЗначениеИзТела(Запрос, Ответ, Тип("Структура"), Менеджеры, ЭтоОтладка);
	Если ПараметрыССайта <> Неопределено Тогда
		
		Поля 			= КонвертацияТипов.ПолучитьМассивИзСтроки(ВозможныеПоля);
		Структура 		= Новый Структура(ВозможныеПоля);
		ЕстьХотьОдно 	= Ложь;
		
		Для Каждого Параметр Из ПараметрыССайта Цикл
			Если Поля.Найти(Параметр.Ключ) <> Неопределено Тогда
				ЕстьХотьОдно = Истина;
			КонецЕсли;
			Структура.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		
		Если Не ЕстьХотьОдно Тогда
			Структура 	= Неопределено;
			Ответ 		= ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Ожидаеться хоть одно поле из перечисленных: " + ВозможныеПоля), ЭтоОтладка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Структура;
			
КонецФункции
Функция ПроверитьОбязательныеСвойства(Параметры, ОбязательныеПоля, Ответ, ЭтоОтладка = Ложь)
	
	Поля 	= КонвертацияТипов.ПолучитьМассивИзСтроки(ОбязательныеПоля);
	НеПоля 	= Новый Массив;
		
	Для Каждого Поле Из Поля Цикл
		Если Не Параметры.Свойство(Поле) Или Не ЗначениеЗаполнено(Параметры[Поле]) Тогда
			НеПоля.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
		
	Если НеПоля.Количество() Тогда
		Параметры = Неопределено;
		Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Ожидается: " + СтрСоединить(НеПоля, ", ")), ЭтоОтладка);
	КонецЕсли;
	
	Возврат Не НеПоля.Количество();
	
КонецФункции

Функция ПолучитьПоГуиду(Менеджер, guid, Ответ, ЭтоОтладка = Ложь)
	
	стрОшибки 	= "";
	Ссылка 		= HTTPМодуль.ПолучитьПоГуиду(Менеджер, guid, стрОшибки);
	
	Если Ссылка = Неопределено Тогда
		Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), стрОшибки), ЭтоОтладка);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции
Функция ПараметрСсылка(Параметры, ИмяПараметра, Менеджер, Ответ, ЭтоОтладка = Ложь)
	
	// Возвращает значение из параметров из гуида
	// если не найдет то вернет пустую ссылку
	// в случае ошибки вернет неопределено и в Ответ поместить ответ с ошибкой
	
	стрГуид = АТ_ОбщегоНазначения.Параметр(Параметры, ИмяПараметра);
	Если стрГуид = Неопределено Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Ссылка = ПолучитьПоГуиду(Менеджер, стрГуид, Ответ, ЭтоОтладка);
	Возврат ?(ЗначениеЗаполнено(Ссылка), Ссылка, Неопределено);
	
КонецФункции
Функция ПараметрДата(Параметры, ИмяПараметра)
	
	Возврат АТ_ОбщегоНазначения.Параметр(Параметры, ИмяПараметра,'00010101');
	
КонецФункции

Функция Записать(ОбъектЗаписи, стрОшибки = "", ДопСвойство = Неопределено)
	
	// Возвращает истина если удалось записать и ложь если не
	// стрОшибки - сюда помещается текст ошибки
	
	Попытка
		Если ДопСвойство = Неопределено Тогда
			ОбъектЗаписи.Записать();
		Иначе
			ОбъектЗаписи.Записать(ДопСвойство);
		КонецЕсли;
	Исключение
		стрОшибки = "Ошибка при записи: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
Функция ВернутьОтвет(Параметры, ЭтоОтладка, ТелоВJSON = Истина)
	
	Если ЭтоОтладка Тогда
		Возврат Параметры;
	Иначе
		
		Ответ = АТ_WI_Кеш.Ответ();
		
		Если Параметры.Свойство("КодОтвета") И Параметры.КодОтвета <> 200 Тогда
			Ответ.КодСостояния = Параметры.КодОтвета;
		КонецЕсли;
		
		Если Параметры.Свойство("Тело") Тогда
			Ответ.УстановитьТелоИзСтроки(?(ТелоВJSON, w1_Json.JSON36(Параметры.Тело), Параметры.Тело), КодировкаТекста.UTF8);
		КонецЕсли;
		
		Возврат ?(ЭтоОтладка, 
					Новый Структура("КодСостояния, Тело", Ответ.КодСостояния, АТ_ОбщегоНазначения.Параметр(Параметры, "Тело")), 
					Ответ);
	КонецЕсли;
	
КонецФункции

Функция ОпределитьМенеджераПоТипуОбъекта(ObjType, Ответ, ЭтоОтладка)
	
	Менеджер = АТ_WI_Кеш.СоответствияТиповИнтернетаМенеджерам()[ObjType];
	
	Если Менеджер = Неопределено Тогда
		
		Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "не определен менеджер объекта " + ObjType), ЭтоОтладка);
		
	КонецЕсли;
	
	Возврат Менеджер
	
КонецФункции

#Область Авторизация

Функция ПользовательСТакимИменемСуществует(Имя)
	
	Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ Справочник.АТ_ПользователиИнтернет ГДЕ login = ""%1""", Имя));
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция newKey(ПараметрыКлюча, ЭтоОтладка = Ложь)
	
	// генерирует новый ключ
	// старый ключ уничтожаются если его передать
	// ПараметрыКлюча - параметры которые возвращаются из процедуры АвторизацияПоКлючуПройдена
	
	Если ПараметрыКлюча.Свойство("refresh_token") Тогда
		УдалитьМастерКлюч(ПараметрыКлюча.refresh_token);
	КонецЕсли;
	
	access_token 	= Строка(Новый УникальныйИдентификатор);
	refresh_token 	= Строка(Новый УникальныйИдентификатор);
	
	Запись = РегистрыСведений.АТ_tokens.СоздатьМенеджерЗаписи();
	Запись.refresh_token 		= refresh_token;
	Запись.create_refresh 		= ПараметрыКлюча.create_refresh;
	Запись.rememberMe 			= ПараметрыКлюча.rememberMe;
	Запись.access_token 		= access_token;
	Запись.usr 					= ПараметрыКлюча.Usr;
	Запись.create 				= ТекущаяДата();
	
	стрОшибки = "";
	Возврат ?(Записать(Запись, стрОшибки),
		ВернутьОтвет(Новый Структура("Тело", Новый Структура("refresh_token, access_token, userSettings", refresh_token, access_token, АТ_ОбщегоНазначения.Параметр(ПараметрыКлюча, "userSettings"))), ЭтоОтладка),
		ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиЗаписиОбъекта(), стрОшибки), ЭтоОтладка));
	
КонецФункции

Функция АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча = Неопределено, ПараметрыССайта = Неопределено)
	
	// Проверяет авторизацию по ключу
	// проверяет чтобы ключ был годен (не старый)
	// если авторизация не пройдена тогда возвращает ошибку
	// ПараметрыКлюча - сюда помещается параметры ключа (мастер ключ, пользователь)
	// ПараметрыССайта - сюда помещаются параметры из тела если они есть (сделано чтобы не получать лишний раз в других процедурах)
	
	Перем access_token;
	
	Пройдена		= Ложь;
	ПараметрыССайта = ПолучитьЗначениеИзТела(ЗапросHTTP, Ответ,,, ЭтоОтладка);
	
	Если ПараметрыССайта <> Неопределено Тогда
		Если ПараметрыССайта.Свойство("access_token", access_token) Тогда
	
	 		Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1 refresh_token, Usr ИЗ РегистрСведений.АТ_tokens ГДЕ access_token = ""%1""", access_token));
	
			Результат 	= Запрос.Выполнить();
			Пройдена 	= Не Результат.Пустой();
		
			Если Пройдена Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ПараметрыКлюча = Новый Структура("refresh_token, usr", Выборка.refresh_token, Выборка.Usr);
			Иначе
				Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиДоступЗапрещен(), "no access"), ЭтоОтладка);
			КонецЕсли;
			
		Иначе
			Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Ожидается access_token"), ЭтоОтладка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Пройдена;
	
КонецФункции
Функция ПолучитьПользователя(Запрос, Ответ, refresh_token, rememberMe, ЭтоОтладка) Экспорт
	
	// Возвращает пользователя интернет связанного с текущим пользователем
	
	// refresh_token - сюда поместить refresh_token из параметров запроса если указано в запросе
	
	Перем usr, hexPsw, Пользователь;
	
	Param = ПолучитьСтруктураИзТелаИПроверить(Запрос, Ответ, "login, password",, ЭтоОтладка);
	Если Param <> Неопределено Тогда
	
		ЗапросВБазу = Новый Запрос(СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1 Код, Ссылка, Активный, ПРЕДСТАВЛЕНИЕ(Роль) Роль ИЗ Справочник.АТ_ПользователиИнтернет ГДЕ login = ""%1"" И password = ""%2"" И НЕ ПометкаУдаления", Param.login, Param.password));
		Результат = ЗапросВБазу.Выполнить();
			
		Если Результат.Пустой() Тогда
			Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиДоступЗапрещен(), "no access"), ЭтоОтладка);
		Иначе
			
			Param.Свойство("refresh_token", refresh_token);
			Param.Свойство("rememberMe", 	rememberMe);
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Пользователь = Новый Структура("Пользователь, Активный, userSettings", 
								Выборка.Ссылка, Выборка.Активный,
								Новый Структура("id, role", Выборка.Код, Выборка.Роль));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

Функция УдалитьМастерКлюч(refresh_token)

	Запись = РегистрыСведений.АТ_tokens.СоздатьМенеджерЗаписи();
	Запись.refresh_token = refresh_token;
	
	Попытка
		Запись.Удалить();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
		
КонецФункции

// API авторизации

Функция ОтветРазрешенияДляБраузера(Запрос, ЭтоОтладка = Ложь) Экспорт
	
	//Ответ = Новый HTTPСервисОтвет(200);
	//Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", 	"http://192.168.0.91:8080");
	//Ответ.Заголовки.Вставить("Access-Control-Allow-Methods", 	"PROPFIND, PROPPATCH, COPY, MOVE, DELETE, MKCOL, LOCK, UNLOCK, PUT, GETLIB, VERSION-CONTROL, CHECKIN, CHECKOUT, UNCHECKOUT, REPORT, UPDATE, CANCELUPLOAD, HEAD, OPTIONS, GET, POST");
	//Ответ.Заголовки.Вставить("Access-Control-Allow-Credentials","true");
	//Ответ.Заголовки.Вставить("Access-Control-Allow-Headers", 	"Overwrite, Destination, Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control, Authorization");
	
	Возврат ВернутьОтвет(Новый Структура, ЭтоОтладка);
	
КонецФункции

Функция ПолучитьКлючGET(Запрос, ЭтоОтладка = Ложь) Экспорт
	
	// Новый мастер ключ
	
	Перем Ответ, refresh_token, rememberMe;
	
	Usr = ПолучитьПользователя(Запрос, Ответ, refresh_token, rememberMe, ЭтоОтладка);
	Если Usr <> Неопределено Тогда
		
		Ответ = ?(Usr.Активный,
			newKey(Новый Структура("Usr, userSettings, refresh_token, rememberMe, create_refresh", 
								Usr.Пользователь, Usr.userSettings, refresh_token, rememberMe, ТекущаяДата()), ЭтоОтладка),
			ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиЗапрещенноеДействие(), "Пользователь не активирован."), ЭтоОтладка));
			
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция ОбновитьКлючGET(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	// Обновляем ключ по мастер ключу
	
	Перем Ответ, refresh_token;
	
	Param = ПолучитьСтруктураИзТелаИПроверить(ЗапросHTTP, Ответ, "refresh_token",, ЭтоОтладка);
	Если Param <> Неопределено Тогда
		
		Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1 Usr, create_refresh, rememberMe ИЗ РегистрСведений.АТ_tokens ГДЕ refresh_token = ""%1""", Param.refresh_token));
		Выполнение = Запрос.Выполнить();
		
		Если Выполнение.Пустой() Тогда
			Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиДоступЗапрещен(), "no access"), ЭтоОтладка);
		Иначе
			Выборка = Выполнение.Выбрать();
			Выборка.Следующий();
			Ответ = newKey(Новый Структура("refresh_token, Usr, create_refresh, rememberMe", 
						Param.refresh_token, Выборка.Usr, Выборка.create_refresh, Выборка.rememberMe), 
						ЭтоОтладка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция ОтлогинитьсяPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	// Отключаем сессию
	
	Перем Ответ, refresh_token;
	
	Param = ПолучитьСтруктураИзТелаИПроверить(ЗапросHTTP, Ответ, "refresh_token",, ЭтоОтладка);
	Если Param <> Неопределено Тогда
		
		Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1 Usr ИЗ РегистрСведений.АТ_tokens ГДЕ refresh_token = ""%1""", Param.refresh_token));
		Выполнение = Запрос.Выполнить();
		
		Ответ = ?(Выполнение.Пустой(),
			ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиДоступЗапрещен(), "no access"), ЭтоОтладка),
			ВернутьОтвет(Новый Структура("Тело", "log out is " + УдалитьМастерКлюч(Param.refresh_token)), ЭтоОтладка));
			
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ТакойЛогинСуществуетPOST(Запрос, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ;
	
	Param = ПолучитьСтруктураИзТелаИПроверить(Запрос, Ответ, "login",,ЭтоОтладка);
	Возврат ?(Param = Неопределено, 
		Ответ, 
		ВернутьОтвет(Новый Структура("Тело", Новый Структура("result", ПользовательСТакимИменемСуществует(Param.login))), ЭтоОтладка));
	
КонецФункции
Функция РегистрацияПользователяPOST(Запрос, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ;
	
	Param = ПолучитьСтруктураИзТелаИПроверить(Запрос, Ответ, "login, password",, ЭтоОтладка);
	Если Param <> Неопределено Тогда
		
		Param.Вставить("role", "superuser");
		Ответ = РегистрацияПользователя(Param, Ответ, ЭтоОтладка);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция РегистрацияПользователя(Param, Ответ, ЭтоОтладка)
	
	Если ПользовательСТакимИменемСуществует(Param.login) Тогда
		Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Пользователь с такм логином существует."), ЭтоОтладка);
	Иначе
		
		НовСпр = Справочники.АТ_ПользователиИнтернет.СоздатьЭлемент();
		НовСпр.Роль = Перечисления.АТ_РолиИнтернетПользователей[Param.role];
		НовСпр.ДатаСоздания = ТекущаяДата();
		НовСпр.Наименование = Param.login;
		
		Если ИзменитьПользователя(НовСпр, param, ЭтоОтладка) Тогда
			
			Ответ = ВернутьОтвет(Новый Структура("Тело", true), ЭтоОтладка, Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция ИзменитьПользователя(СпрОб, param, ЭтоОтладка)
	
	ЗаполнитьЗначенияСвойств(СпрОб, Param);
		
	стрОшибки = "";
	Если Не Записать(СпрОб, стрОшибки) Тогда
		
		Ответ  = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиЗаписиОбъекта(), стрОшибки), ЭтоОтладка);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция АвторизованPOST(Запрос, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ;
	
	Результат 	= АвторизацияПоКлючуПройдена(Запрос, Ответ, ЭтоОтладка);
	Авторизован = Результат Или Ответ.КодСостояния = 200;
	
	Возврат ?(Авторизован,
				ВернутьОтвет(Новый Структура("Тело", Новый Структура("result", true)), ЭтоОтладка),
				Ответ);
КонецФункции

#КонецОбласти

Функция СкладыGET(Запрос, ЭтоОтладка = Ложь) Экспорт

	Перем Ответ;
	
	Если АвторизацияПоКлючуПройдена(Запрос, Ответ, ЭтоОтладка) Тогда
		Ответ = HTTPМодуль.СкладыGET(Запрос, ЭтоОтладка);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

#Область Настройки_пользователей

Функция ПолучитьКонтрагентовPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт

	Перем Ответ, ПараметрыКлюча;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча) Тогда
		
		Таб = Новый ТаблицаЗначений;
		Таб.Колонки.Добавить("guid");
		Таб.Колонки.Добавить("name", 	Новый ОписаниеТипов("Строка"));
		Таб.Колонки.Добавить("address");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ	Контр.Ссылка guid, Представление(Контр.Ссылка) name, Адр.Ссылка Адрес, Представление(Адр.Ссылка) АдресПредставление
		|ИЗ			Справочник.Контрагенты Контр
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БП_АдресаДоставкиКонтрагентов Адр
		|ПО Адр.Контрагент = Контр.Ссылка
		|
		|ГДЕ Контр.Партнер = &Партнер
		|
		|ИТОГИ МАКСИМУМ(name) ПО guid
		|");
		
		Запрос.УстановитьПараметр("Партнер", ПараметрыКлюча.Usr.Партнер);
		ВыборкаКонтра = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаКонтра.Следующий() Цикл
			
			Адреса = Новый Массив;
			ВыборкаАдрес = ВыборкаКонтра.Выбрать();
			Пока ВыборкаАдрес.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаАдрес.Адрес) Тогда
					Адреса.Добавить(Новый Структура("guid,name", ВыборкаАдрес.Адрес, ВыборкаАдрес.АдресПредставление));
				КонецЕсли;
			КонецЦикла;
			
			НовСтрока = Таб.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаКонтра);
			НовСтрока.address = Адреса;
			
		КонецЦикла;
		
		Ответ = ВернутьОтвет(Новый Структура("Тело", Таб), ЭтоОтладка);
		
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции
Функция ПолучитьАдрессаДоставкиPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт

	Перем Ответ, ПараметрыКлюча;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	МАКСИМУМ(Ссылка) guid, Представление address
		|ИЗ			Справочник.БП_АдресаДоставкиКонтрагентов
		|ГДЕ НЕ ПометкаУдаления И Партнер = &Партнер
		|СГРУППИРОВАТЬ ПО Представление
		|");
		
		Запрос.УстановитьПараметр("Партнер", ПараметрыКлюча.Usr.Партнер);
		Ответ = ВернутьОтвет(Новый Структура("Тело", Запрос.Выполнить().Выгрузить()), ЭтоОтладка);
		
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Функция ИнформацияВсяPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт

	Перем Ответ, ПараметрыКлюча;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	contactPerson, phone, organizationForm, organizationName, address, typeOfBusiness, specialization, inn, kpp, ogrn, okpo, okved, bank, settlementAccount, correspondentAccount,
		|	Представление(Партнер.ОсновнойМенеджер) manager,
		|	Тел.Представление manager_tel,
		|	Почт.Представление manager_mail
		|	
		|ИЗ
		|	Справочник.АТ_ПользователиИнтернет Спр
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация Тел
		|ПО	Партнер.ОсновнойМенеджер 	= Тел.Ссылка И
		|	Тел.Вид 					= &СвойствоТелефон
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация Почт
		|ПО	Партнер.ОсновнойМенеджер 	= Почт.Ссылка И
		|	Почт.Вид 					= &СвойствоПочта
		|	
		|ГДЕ
		|	Спр.Ссылка = &Ссылка
		|");
		
		Запрос.УстановитьПараметр("Ссылка", ПараметрыКлюча.Usr);
		Запрос.УстановитьПараметр("СвойствоТелефон", 	Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
		Запрос.УстановитьПараметр("СвойствоПочта", 		Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		
		Ответ = ВернутьОтвет(Новый Структура("Тело", КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Запрос.Выполнить().Выгрузить())), ЭтоОтладка);
		
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции


#КонецОбласти

#Область ПодПользователи

Функция ПользовательОтноситсяКСуперПользователю(Пользователь, Суперпользователь, Ответ, ЭтоОтладка)
	
	Если Пользователь.superuser <> Суперпользователь Тогда
		Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Пользователь не относиться к суперпользователю."), ЭтоОтладка);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция Пользователь_СписокPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча, Param;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча, Param) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Ссылка guid, Представление(Ссылка) name
		|ИЗ			Справочник.АТ_ПользователиИнтернет
		|ГДЕ НЕ ПометкаУдаления И superuser = &superuser
		|");
		
		Запрос.УстановитьПараметр("superuser", ПараметрыКлюча.Usr);
		Ответ = ВернутьОтвет(Новый Структура("Тело", Запрос.Выполнить().Выгрузить()), ЭтоОтладка);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция Пользователь_ЗарегистрироватьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча, Param;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча, Param) Тогда
		Если ПроверитьОбязательныеСвойства(Param, "login, password", Ответ, ЭтоОтладка) Тогда
			
			Param.Вставить("role", 		"user");
			Param.Вставить("Активный", 	Истина);
			Param.Вставить("superuser", ПараметрыКлюча.Usr);
			Ответ = РегистрацияПользователя(Param, Ответ, ЭтоОтладка);
		
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция Пользователь_УдалитьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча, Param;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча, Param) Тогда
		Если ПроверитьОбязательныеСвойства(Param, "guid", Ответ, ЭтоОтладка) Тогда
			
			ПодЮзер = ПолучитьПоГуиду(Справочники.АТ_ПользователиИнтернет, Param.guid, Ответ, ЭтоОтладка);
			Если ПодЮзер <> Неопределено Тогда
				
				Если ПользовательОтноситсяКСуперПользователю(ПодЮзер, ПараметрыКлюча.Usr, Ответ, ЭтоОтладка) Тогда
					
					СпрОб = ПодЮзер.ПолучитьОбъект();
					
					Попытка
						СпрОб.УстановитьПометкуУдаления(Истина);
						Ответ = ВернутьОтвет(Новый Структура("Тело", true), ЭтоОтладка);
					Исключение
						Ответ = ВернутьОтвет(Новый Структура("Тело, КодОтвета", ОписаниеОшибки(), КодОшибкиЗаписиОбъекта()), ЭтоОтладка);
					КонецПопытки;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция Пользователь_ИзменитьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча, Param;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча, Param) Тогда
		Если ПроверитьОбязательныеСвойства(Param, "guid", Ответ, ЭтоОтладка) Тогда
			
			ПодЮзер = ПолучитьПоГуиду(Справочники.АТ_ПользователиИнтернет, Param.guid, Ответ, ЭтоОтладка);
			Если 	ПодЮзер <> Неопределено И
					ПользовательОтноситсяКСуперПользователю(ПодЮзер, ПараметрыКлюча.Usr, Ответ, ЭтоОтладка) И
					ИзменитьПользователя(ПодЮзер.ПолучитьОбъект(), param, ЭтоОтладка) Тогда
						
				Ответ = ВернутьОтвет(Новый Структура("Тело", true), ЭтоОтладка);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции



#КонецОбласти

#Область КП

Функция Сущность_СписокКП(Параметры, Ответ, ЭтоОтладка = Ложь)
	
	Первые 			= АТ_ОбщегоНазначения.Параметр(Параметры, "first", 0);
	ДатаНачала 		= ПараметрДата(Параметры, "period1");
	ДатаОкончания	= ПараметрДата(Параметры, "period2");
	Контрагент		= ПараметрСсылка(Параметры, "kontra", Справочники.Контрагенты, Ответ, ЭтоОтладка);
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ %1	Ссылка guid, Номер number, Контрагент kontra, СуммаДокумента sum, Статус status
	|ИЗ 		Документ.КП 
	|ГДЕ 		Партнер = &Партнер И НЕ ПометкаУдаления %2 %3 %4
	|УПОРЯДОЧИТЬ ПО Дата Убыв",
		?(Первые, 							"ПЕРВЫЕ " + Формат(Первые, "ЧГ="), ""),
		?(ЗначениеЗаполнено(ДатаНачала), 	"И Дата >= &ДатаНачала", ""),
		?(ЗначениеЗаполнено(ДатаОкончания), "И Дата <= &ДатаОкончания", ""),
		?(ЗначениеЗаполнено(Контрагент),	"И Контрагент = &Контрагент", "")));
		
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент);
	Запрос.УстановитьПараметр("Партнер", 		Параметры.Партнер);
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции
Функция КП_СписокPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча, Param;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча, Param) Тогда
		
		Param.Вставить("Партнер", ПараметрыКлюча.Usr.Партнер);
		КП = Сущность_СписокКП(Param, Ответ, ЭтоОтладка);
		Если КП <> Неопределено Тогда
			Ответ = ВернутьОтвет(Новый Структура("Тело", КП), ЭтоОтладка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция КП_СоздатьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча, Param;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча, Param) Тогда
		
		Param = ПолучитьСтруктураИзТелаИПроверить(ЗапросHTTP, Ответ, "adress,kontra,products",, ЭтоОтладка);
		Если Param <> Неопределено Тогда
			
			Если ТипЗнч(Param.products) <> Тип("Массив") Тогда
				Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "products должен быть массивом."), ЭтоОтладка);
			Иначе
				
				ДокКП = Документы.КП.СоздатьДокумент();
				ДокКП.Дата 			= ТекущаяДата();
				ДокКП.Контрагент 	= Param.kontra;
				ДокКП.Партнер 		= ПараметрыКлюча.Usr.Партнер;
				ДокКП.АдресДоставки = Param.adress;
				
				Для Каждого Элемент Из Param.Products Цикл
					
					Товар = ПараметрСсылка(Элемент, "guid", Справочники.Номенклатура, Ответ, ЭтоОтладка);
					Если Товар = Неопределено Тогда
						Возврат Ответ;
					КонецЕсли;
					
					Товары = ДокКП.Товары.Добавить();
					Товары.Номенклатура = Товар;
					Товары.Количество 	= Элемент.quantity;
					Товары.Цена 		= Элемент.price;
					
				КонецЦикла;
				
				стрОшибки = "";
				Ответ = ?(Записать(ДокКП, стрОшибки),
								ВернутьОтвет(Новый Структура("Тело", XMLСтрока(ДокКП.Ссылка)),ЭтоОтладка, Ложь),
								ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиЗаписиОбъекта(), стрОшибки), ЭтоОтладка));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Товары

Функция НастроитьЗапросТоваров(Текст, param, Ответ, ЭтоОтладка)
	
	// Настраивает запрос товаров по настройкам полученнным из веба
	
	Ошибка = Ложь;
	Запрос = Новый Запрос;
	Условия = Новый Массив;
	
	Первые = Параметр(param, "first", ЭтоОтладка,,Тип("Число"),Ответ,Ошибка);
	Если Первые <> Неопределено Тогда
		Текст = СтрЗаменить(Текст, "//ПЕРВЫЕ", "ПЕРВЫЕ " + Формат(param.first, "ЧГ="));
	КонецЕсли;
	
	ДобавитьКроссы = Параметр(param, "addcrosses", ЭтоОтладка,,Тип("Булево"),Ответ,Ошибка);
	Если ДобавитьКроссы = Истина Тогда
		Текст = СтрЗаменить(Текст, "//СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,
	|						Номенклатура В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ ИСТИНА //)) Ост
	|ПО Спр.Ссылка = Ост.Номенклатура
	|")
	КонецЕсли;
	
	Артикул = Параметр(param, "sku", ЭтоОтладка,,Тип("Число"),Ответ,Ошибка);
	Если param.Свойство("sku") Тогда
		Условия.Добавить("Спр.Артикул ПОДОБНО ""%" + Артикул +"%""");
	КонецЕсли;
	
	Наименование = Параметр(param, "name", ЭтоОтладка,,Тип("Число"),Ответ,Ошибка);
	Если param.Свойство("sku") Тогда
		Условия.Добавить("Спр.Наименование ПОДОБНО ""%" + Наименование +"%""");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТовары_Режим0(Параметры, Ответ, ЭтоОтладка)
	
	// Возвращает только артикул
	
	Возврат НастроитьЗапросТоваров("
	|ВЫБРАТЬ //ПЕРВЫЕ
	|	Спр.Артикул SKU
	|ИЗ
	|	Справочник.Номенклатура Спр
	|
	|//СОЕДИНЕНИЯ
	|
	|ГДЕ 
	|	НЕ Спр.ЭтоГруппа И НЕ Спр.ПометкаУдаления
	|	//УСЛОВИЯ
	|", Параметры, Ответ, ЭтоОтладка);
	
КонецФункции
Функция ПолучитьТовары_Режим1(Параметры, Ответ, ЭтоОтладка)
	
	// Возвращает только (ссылка наименование и артикул)
	
	Возврат НастроитьЗапросТоваров("
	|ВЫБРАТЬ //ПЕРВЫЕ
	|	Спр.Артикул SKU, Спр.Ссылка guid, Спр.Склад.Наименование
	|ИЗ
	|	Справочник.Номенклатура Спр
	|
	|//СОЕДИНЕНИЯ
	|
	|ГДЕ 
	|	НЕ Спр.ЭтоГруппа И НЕ Спр.ПометкаУдаления
	|	//УСЛОВИЯ
	|", Параметры, Ответ, ЭтоОтладка);
	
КонецФункции

Функция Сущность_Товары_новая(Запрос, Ответ, ЭтоОтладка = Неопределено) Экспорт
	
	//Ошибка = Ложь;
	//Режим = Параметр(Запрос, "mode", ЭтоОтладка,,Тип("Число"), Ответ, Ошибка);
	//Если Не Ошибка Тогда
	//	
	//	Если 		Режим = 0 Тогда	Возврат ПолучитьТовары_Режим0(Параметры, Ответ, ЭтоОтладка);
	//	ИначеЕсли 	Режим = 1 Тогда	Возврат ПолучитьТовары_Режим1(Параметры, Ответ, ЭтоОтладка);
	//	Иначе
	//		Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Не верно указан режима запроса mode: <?>" + Режим), ЭтоОтладка);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецФункции
Функция Сущность_Товары_ст(Параметры = Неопределено, Ответ, ЭтоОтладка = Неопределено) Экспорт
	
	//// Старая функция потом перейти на новую
	//
	//Режим 			= АТ_ОбщегоНазначения.Параметр(Параметры, "mode");
	//Артикул 		= АТ_ОбщегоНазначения.Параметр(Параметры, "sku");
	//Наименование	= АТ_ОбщегоНазначения.Параметр(Параметры, "name");
	//Первые 			= АТ_ОбщегоНазначения.Параметр(Параметры, "first");
	//Родитель 		= АТ_ОбщегоНазначения.Параметр(Параметры, "parent");
	//Кроссы 			= АТ_ОбщегоНазначения.Параметр(Параметры, "cross");
	//
	//Если Родитель <> Неопределено Тогда
	//	стрОшибки = "";
	//	Родитель = HTTPМодуль.ПолучитьПоГуиду(Справочники.Номенклатура, Родитель, стрОшибки);
	//	Если Родитель = Неопределено Тогда
	//		Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Ошибка получения parent: " + стрОшибки), ЭтоОтладка);
	//		Возврат Неопределено;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос(СтрШаблон("
	//|ВЫБРАТЬ %1	
	//|	Спр.Ссылка guid, Спр.Родитель parent, Спр.Наименование title, Спр.Ссылка.Артикул SKU,
	//|	Спр.Производитель 				manufacture,
	//|	Спр.Производитель.Наименование 	manufactureTitle,
	//|	Ост.Склад 						Store,
	//|	Ост.Склад.Наименование 			StoreTitle,
	//|	ЕСТЬNULL(Ост.ВНаличииОстаток, 0) - ЕСТЬNULL(Ост.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(Ост.ВРезервеПодЗаказОстаток, 0) StoreAmount
	//|ИЗ
	//|	Справочник.Номенклатура Спр
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,ИСТИНА %5 %6 %7) Ост
	//|ПО Спр.Ссылка = Ост.Номенклатура
	//|
	//|ЛЕВОЕ 	СОЕДИНЕНИЕ РегистрСведений.АналогиТоваров.СрезПоследних(,ИСТИНА %5 %6 %7) Рег
	//|ПО		Спр.Ссылка = Рег.Номенклатура
	//|
	//|ГДЕ 
	//|	НЕ Спр.ЭтоГруппа И НЕ Спр.ПометкаУдаления
	//|	%2 %3 %4
	//|
	//|УПОРЯДОЧИТЬ ПО Наименование
	//|",
	//	?(Первые 		= Неопределено, "", СтрШаблон("ПЕРВЫЕ %1", Формат(Первые, "ЧГ="))),
	//	?(Родитель 		= Неопределено, "", " И Родитель = &Родитель"),
	//	?(Наименование 	= Неопределено, "", " И Спр.Наименование ПОДОБНО ""%" + Наименование + "%"""),
	//	?(Артикул 		= Неопределено, "", " И (Спр.Артикул ПОДОБНО ""%" + Артикул + "%"" ИЛИ Рег.Артикул ПОДОБНО ""%" + Артикул + "%"")"),
	//	
	//	?(Родитель 		= Неопределено, "", " И Номенклатура.Родитель  = &Родитель"),
	//	?(Наименование 	= Неопределено, "", " И Номенклатура.Наименование ПОДОБНО ""%" + Наименование + "%"""),
	//	?(Артикул 		= Неопределено, "", " И Номенклатура.Артикул ПОДОБНО ""%" + Артикул + "%""")	
	//));
	//	
	//Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция УсловиеСравнения(стрЗначение, Режим)
	
	// 0:%n% 1:n% 2:n
	
	Если Режим = 3 Тогда
		Возврат СтрШаблон("= ""%1""", стрЗначение);
	КонецЕсли;
	
	Возврат СтрШаблон("ПОДОБНО ""%2%1%3""", стрЗначение,
				?(Режим = 0, "%", ""),
				?(Режим = 2, "", "%"));
КонецФункции
Процедура ДобавитьURLКартинок(ТабРезультат)
	
	// Добавляет в ТабРезультат колонку img_urls в которой через запятую перечислены урлы картинок
	// в ТабРезультат должно быть обязательное поле guid ссылка на номенклатуру
	
	Запрос = Новый Запрос("ВЫБРАТЬ ВладелецФайла, Ссылка, Расширение ИЗ Справочник.НоменклатураПрисоединенныеФайлы ГДЕ ВладелецФайла В(&Ссылки) И Расширение <> """"");
	Запрос.УстановитьПараметр("Ссылки", ТабРезультат.ВыгрузитьКолонку("guid"));
	
	ТабРезультат.Колонки.Добавить("img_urls", Новый ОписаниеТипов("Строка"));
	Путь = АТ_WI_Кеш.ПутьURLКФайлам() + ПутьККартинкам() + ПолучитьРазделительПутиСервера();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Строка = ТабРезультат.Найти(Выборка.ВладелецФайла);
		Строка.img_urls = СтрШаблон("%1%2%3.%4", Строка.img_urls, ?(Строка.img_urls = "","",","), Путь + XMLСтрока(Выборка.Ссылка), Выборка.Расширение);
		
	КонецЦикла;
	
КонецПроцедуры
Функция Сущность_Товары_Ст2(Параметры, Ответ, ЭтоОтладка = Неопределено) Экспорт
	
	//ВозможныеПоля = Новый Структура;
	//ВозможныеПоля.Вставить("sku", 			"Спр.Артикул");
	//ВозможныеПоля.Вставить("guid", 			"Спр.Ссылка");
	//ВозможныеПоля.Вставить("name",	 		"Спр.Наименование");
	//ВозможныеПоля.Вставить("price",	 		"Цен.Цена");
	//ВозможныеПоля.Вставить("quantity", 		"ЕСТЬNULL(Ост.ВНаличииОстаток, 0) - ЕСТЬNULL(Ост.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(Ост.ВРезервеПодЗаказОстаток, 0)");
	//ВозможныеПоля.Вставить("manufacturer", 	"Спр.Производитель");
	//
	//Поля 		= Новый Массив;
	//Сортировка	= Новый Массив;
	//ТребПоля 	= КонвертацияТипов.ПолучитьМассивИзСтроки(Параметры.fields);
	//
	//ПолучитьUrlКартинок = ТребПоля.Найти("img_urls") <> Неопределено;
	//ДобавлятьОстатки 	= ТребПоля.Найти("quantity") <> Неопределено;
	//ДобавлятьЦены 		= ТребПоля.Найти("price") <> Неопределено;
	//
	//Если ПолучитьUrlКартинок И ТребПоля.Найти("guid") = Неопределено Тогда
	//	ТребПоля.Добавить("guid");
	//КонецЕсли;
	//
	//Для Каждого ТребПоле Из ТребПоля Цикл
	//	Поле = АТ_ОбщегоНазначения.Параметр(ВозможныеПоля, ТребПоле);
	//	Если Поле <> Неопределено Тогда
	//		Поля.Добавить(Поле + " КАК " + ТребПоле);
	//		Сортировка.Добавить(ТребПоле);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Режим 			= АТ_ОбщегоНазначения.Параметр(Параметры, "search", 0); // 0:%n% 1:n% 2:n
	//Артикул 		= АТ_ОбщегоНазначения.Параметр(Параметры, "sku", "");
	//Наименование	= АТ_ОбщегоНазначения.Параметр(Параметры, "name", "");
	//Первые 			= АТ_ОбщегоНазначения.Параметр(Параметры, "first", 0);
	//
	//Ссылка			= АТ_ОбщегоНазначения.Параметр(Параметры, "guid");
	//Если Ссылка <> Неопределено Тогда
	//	Ссылка = ПараметрСсылка(Параметры, "guid", Справочники.Номенклатура, Ответ, ЭтоОтладка);
	//	Если Ссылка = Неопределено Тогда
	//		Возврат Неопределено;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Условия = Новый Массив;
	//Если Ссылка <> Неопределено Тогда
	//	//Условия.Добавить(".Ссылка = &Ссылка");
	//КонецЕсли;
	//Если Артикул <> "" Тогда
	//	Условия.Добавить(".Артикул " + УсловиеСравнения(Артикул, Параметры.search));
	//КонецЕсли;
	//Если Наименование <> "" Тогда
	//	Условия.Добавить(".Наименование " + УсловиеСравнения(Наименование, Параметры.search));
	//КонецЕсли;
	//
	//Запрос = Новый Запрос(СтрШаблон("
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ %1 %2
	//|ИЗ Справочник.Номенклатура Спр
	//|
	//|ЛЕВОЕ 	СОЕДИНЕНИЕ РегистрСведений.АналогиТоваров.СрезПоследних(,%3) Рег
	//|ПО		Спр.Ссылка = Рег.Номенклатура
	//|" + ?(ДобавлятьОстатки, "
	//
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,%4) Ост
	//|ПО Спр.Ссылка = Ост.Номенклатура", "") + "
	//
	//|" + ?(ДобавлятьЦены, "
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|		(
	//|			ВЫБРАТЬ Номенклатура, МАКСИМУМ(Цена) ИЗ
	//|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,%4)
	//|			СГРУППИРОВАТЬ ПО Номенклатура
	//|		) Цен
	//|ПО 
	//|	Спр.Ссылка = Цен.Номенклатура
	//|","") + "
	//|
	//|ГДЕ
	//|	НЕ Спр.ЭтоГруппа И НЕ Спр.ПометкаУдаления
	//|	%5
	//|	%6
	//|", ?(Первые, СтрШаблон("ПЕРВЫЕ %1", Формат(Первые, "ЧГ=")), ""),
	//	СтрСоединить(Поля, ", "),
	//	?(Условия.Количество() И Ссылка = Неопределено, "Номенклатура", "") + СтрСоединить(Условия, " И Номенклатура"),
	//	?(Условия.Количество(), "Номенклатура", "") + СтрСоединить(Условия, " И Номенклатура"),
	//	?(Условия.Количество(), " И Спр", "") + СтрСоединить(Условия, 		" И Спр"),
	//	?(Сортировка.Количество(), " УПОРЯДОЧИТЬ ПО " + СтрСоединить(Сортировка, ", "), "")));
	//	
	////Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	//Если ПолучитьUrlКартинок Тогда
	//	ДобавитьURLКартинок(Результат);
	//КонецЕсли;
	//
	//Возврат Результат;
	
КонецФункции
Функция Сущность_Товары_ст3(Параметры, Ответ, ЭтоОтладка = Неопределено) Экспорт
	
	//ВозможныеПоля = Новый Структура;
	//ВозможныеПоля.Вставить("sku", 			"Спр.Артикул");
	//ВозможныеПоля.Вставить("guid", 			"Спр.Ссылка");
	//ВозможныеПоля.Вставить("name",	 		"Спр.Наименование");
	//ВозможныеПоля.Вставить("price",	 		"Цен.Цена");
	//ВозможныеПоля.Вставить("quantity", 		"ЕСТЬNULL(Ост.ВНаличииОстаток, 0) - ЕСТЬNULL(Ост.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(Ост.ВРезервеПодЗаказОстаток, 0)");
	//ВозможныеПоля.Вставить("manufacturer", 	"Спр.Производитель");
	//ВозможныеПоля.Вставить("stores", 		"Ост.Склад");
	//
	//ПоляСпр 	= Новый Массив;
	//ПоляЗапр 	= Новый Массив;
	//Сортировка	= Новый Массив;
	//ТребПоля 	= КонвертацияТипов.ПолучитьМассивИзСтроки(Параметры.fields);
	//
	//ПолучитьUrlКартинок = ТребПоля.Найти("img_urls") <> Неопределено;
	//ДобавлятьОстатки 	= ТребПоля.Найти("quantity") <> Неопределено;
	//ДобавлятьЦены 		= ТребПоля.Найти("price") <> Неопределено;
	//
	//Если ТребПоля.Найти("guid") = Неопределено Тогда
	//	ТребПоля.Добавить("guid");
	//КонецЕсли;
	//
	//Для Каждого ТребПоле Из ТребПоля Цикл
	//	Поле = АТ_ОбщегоНазначения.Параметр(ВозможныеПоля, ТребПоле);
	//	Если Поле <> Неопределено Тогда
	//		Если СтрНачинаетсяС(Поле, "Спр.") Тогда
	//			ПоляСпр.Добавить(Поле + " КАК " + ТребПоле);
	//			ПоляЗапр.Добавить(ТребПоле);
	//		Иначе
	//			ПоляЗапр.Добавить(Поле + " КАК " + ТребПоле);
	//		КонецЕсли;
	//		Сортировка.Добавить(ТребПоле);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Режим 			= АТ_ОбщегоНазначения.Параметр(Параметры, "search", 0); // 0:%n% 1:n% 2:n
	//Артикул 		= АТ_ОбщегоНазначения.Параметр(Параметры, "sku", "");
	//Наименование	= АТ_ОбщегоНазначения.Параметр(Параметры, "name", "");
	//Первые 			= АТ_ОбщегоНазначения.Параметр(Параметры, "first", 0);
	//
	//Ссылка			= АТ_ОбщегоНазначения.Параметр(Параметры, "guid");
	//Если Ссылка <> Неопределено Тогда
	//	Ссылка = ПараметрСсылка(Параметры, "guid", Справочники.Номенклатура, Ответ, ЭтоОтладка);
	//	Если Ссылка = Неопределено Тогда
	//		Возврат Неопределено;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ДобавлятьКроссы = Артикул <> "";
	//
	//Условия = Новый Массив;
	//Если Ссылка <> Неопределено Тогда
	//	Условия.Добавить(".Ссылка = &Ссылка");
	//КонецЕсли;
	//Если Артикул <> "" Тогда
	//	Артикул = СТ_ОбщегоНазначения.ПолучитьКлючПоСтроке(Артикул);
	//	Условия.Добавить(".АртикулДляПоиска " + УсловиеСравнения(Артикул, Параметры.search));
	//КонецЕсли;
	//Если Наименование <> "" Тогда
	//	Условия.Добавить(".Наименование " + УсловиеСравнения(Наименование, Параметры.search));
	//КонецЕсли;
	//
	//Запрос = Новый Запрос(СтрШаблон("
	//|ВЫБРАТЬ %1 %2
	//|ПОМЕСТИТЬ Товары
	//|ИЗ Справочник.Номенклатура Спр
	//
	//|" + ?(ДобавлятьКроссы, "
	//|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.АналогиТоваров.СрезПоследних(,АртикулДляПоиска ПОДОБНО ""%4"") Ан
	//|ПО 				Спр.Ссылка = Ан.Номенклатура
	//|", "") + "
	//
	//|ГДЕ НЕ Спр.ЭтоГруппа И НЕ Спр.ПометкаУдаления %3 %5;
	//
	//|ВЫБРАТЬ %1 %7 ИЗ Товары Спр
	//
	//|ЛЕВОЕ 	СОЕДИНЕНИЕ РегистрСведений.АналогиТоваров.СрезПоследних(,Номенклатура В(ВЫБРАТЬ guid ИЗ Товары)) Рег
	//|ПО		Спр.guid = Рег.Номенклатура
	//|" + ?(ДобавлятьОстатки, "
	//
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,Номенклатура В(ВЫБРАТЬ guid ИЗ Товары)) Ост
	//|ПО Спр.guid = Ост.Номенклатура", "") + "
	//
	//|" + ?(ДобавлятьЦены, "
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|		(
	//|			ВЫБРАТЬ Номенклатура, МАКСИМУМ(Цена) Цена
	//|			ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,Номенклатура В(ВЫБРАТЬ guid ИЗ Товары))
	//|			СГРУППИРОВАТЬ ПО Номенклатура
	//|		) Цен
	//|ПО 
	//|	Спр.guid = Цен.Номенклатура
	//|","") + "
	//|%6
	//|", ?(Первые, СтрШаблон("ПЕРВЫЕ %1", Формат(Первые, "ЧГ=")), ""),
	//	СтрСоединить(ПоляСпр, ", "),
	//	?(Условия.Количество(), " И Спр", "") + СтрСоединить(Условия, " И Спр"),
	//	"%" + Артикул + "%",
	//	?(ДобавлятьКроссы, "И Не Удалено", ""),
	//	?(Сортировка.Количество(), " УПОРЯДОЧИТЬ ПО " + СтрСоединить(Сортировка, ", "), ""),
	//	СтрСоединить(ПоляЗапр, ",")));
	//	
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	//Если ПолучитьUrlКартинок Тогда
	//	ДобавитьURLКартинок(Результат);
	//КонецЕсли;
	//
	//Если ТребПоля.Найти("guid") = Неопределено Тогда
	//	Результат.Колонки.Удалить("guid");
	//КонецЕсли;
	//
	//Возврат Результат;
	
КонецФункции
Функция Сущность_Товары(Параметры, Ответ, ЭтоОтладка = Неопределено) Экспорт
	
	Перем ВидЦены, БизнесРегион, address;
	
	ВозможныеПоля = Новый Структура;
	ВозможныеПоля.Вставить("sku", 			"Спр.Артикул");
	ВозможныеПоля.Вставить("guid", 			"Спр.Ссылка");
	ВозможныеПоля.Вставить("name",	 		"Спр.Наименование");
	ВозможныеПоля.Вставить("price",	 		"Цен.Цена");
	ВозможныеПоля.Вставить("quantity", 		"ЕСТЬNULL(Ост.ВНаличииОстаток, 0) - ЕСТЬNULL(Ост.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(Ост.ВРезервеПодЗаказОстаток, 0)");
	ВозможныеПоля.Вставить("manufacturer", 	"Представление(Спр.Производитель)");
	ВозможныеПоля.Вставить("stores", 		"Ост.Склад");
	ВозможныеПоля.Вставить("delivery_time", "Дост.ВремяВДнях");
	
	ПоляСпр 	= Новый Массив;
	ПоляЗапр 	= Новый Массив;
	Сортировка	= Новый Массив;
	ТребПоля 	= КонвертацияТипов.ПолучитьМассивИзСтроки(Параметры.fields);
	
	ПолучитьUrlКартинок = ТребПоля.Найти("img_urls") <> Неопределено;
	ДобавлятьОстатки 	= ТребПоля.Найти("quantity") <> Неопределено;
	ДобавлятьЦены 		= ТребПоля.Найти("price") <> Неопределено;
	ЕстьКоличество		= ТребПоля.Найти("quantity") <> Неопределено;
	ЕстьСклады			= ТребПоля.Найти("stores") <> Неопределено;
	ЕстьВремяДоставки	= ТребПоля.Найти("delivery_time") <> Неопределено;
	
	//ЕстьВремяДоставки = ЛОЖЬ;
	Если ЕстьВремяДоставки Тогда
		
		Если Не ЕстьКоличество Или Не Параметры.Свойство("address", address) Тогда
			Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиПлохойЗапрос(), "Чтобы получить delivery_time необходимо указать address, а также запросить quantity."), ЭтоОтладка);
			Возврат Неопределено
		КонецЕсли;
		Адрес = ПолучитьПоГуиду(Справочники.БП_АдресаДоставкиКонтрагентов, address, Ответ, ЭтоОтладка);
		Если Адрес = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		БизнесРегион = Параметры.Usr.Партнер.БизнесРегион;
		
	КонецЕсли;
	
	Если ДобавлятьЦены Тогда
		Соглашение = АТ_Сервер.ПолучитьСформироватьСоглашение(Параметры.Usr.Партнер, Новый Структура("ФормаОплаты", Перечисления.ФормыОплаты.Безналичная));
		ВидЦены = Соглашение.ВидЦен;
	КонецЕсли;
	
	Если ТребПоля.Найти("guid") = Неопределено Тогда
		ТребПоля.Добавить("guid");
	КонецЕсли;
	
	Для Каждого ТребПоле Из ТребПоля Цикл
		Поле = АТ_ОбщегоНазначения.Параметр(ВозможныеПоля, ТребПоле);
		Если Поле <> Неопределено Тогда
			Если СтрНайти(Поле, "Спр.") Тогда
				ПоляСпр.Добавить(Поле + " КАК " + ТребПоле);
				ПоляЗапр.Добавить(ТребПоле);
			Иначе
				ПоляЗапр.Добавить(Поле + " КАК " + ТребПоле);
			КонецЕсли;
			Сортировка.Добавить(ТребПоле);
		КонецЕсли;
	КонецЦикла;
	
	Режим 			= АТ_ОбщегоНазначения.Параметр(Параметры, "search", 0); // 0:%n% 1:n% 2:n
	Артикул 		= АТ_ОбщегоНазначения.Параметр(Параметры, "sku", "");
	Наименование	= АТ_ОбщегоНазначения.Параметр(Параметры, "name", "");
	Первые 			= АТ_ОбщегоНазначения.Параметр(Параметры, "first", 0);
	ВсеТовары		= АТ_ОбщегоНазначения.Параметр(Параметры, "all", Ложь);
	
	Ссылка			= АТ_ОбщегоНазначения.Параметр(Параметры, "guid");
	Если Ссылка <> Неопределено Тогда
		Ссылка = ПараметрСсылка(Параметры, "guid", Справочники.Номенклатура, Ответ, ЭтоОтладка);
		Если Ссылка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДобавлятьКроссы = Артикул <> "";
	
	Условия = Новый Массив;
	Если Ссылка <> Неопределено Тогда
		Условия.Добавить(".Ссылка = &Ссылка");
	КонецЕсли;
	Если Артикул <> "" Тогда
		Артикул = СТ_ОбщегоНазначения.ПолучитьКлючПоСтроке(Артикул);
		Условия.Добавить(".АртикулДляПоиска " + УсловиеСравнения(Артикул, Параметры.search));
	КонецЕсли;
	Если Наименование <> "" Тогда
		Условия.Добавить(".Наименование " + УсловиеСравнения(Наименование, Параметры.search));
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ %1 %2
	|ПОМЕСТИТЬ Товары
	|ИЗ Справочник.Номенклатура Спр
	
	|" + ?(ДобавлятьКроссы, "
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.АналогиТоваров.СрезПоследних(,АртикулДляПоиска ПОДОБНО ""%4"") Ан
	|ПО 				Спр.Ссылка = Ан.Номенклатура И
	|					Не Удалено
	|", "") + "
	
	|" + ?(ВсеТовары, "", "
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки Ост
	|ПО Спр.Ссылка = Ост.Номенклатура") + "
	
	|ГДЕ НЕ Спр.ЭтоГруппа И НЕ Спр.ПометкаУдаления %3 %5;
	
	|ВЫБРАТЬ %7 ИЗ Товары Спр
	
	|" + ?(ДобавлятьОстатки, "
	|" + ?(ВсеТовары, "ЛЕВОЕ", "ВНУТРЕННЕЕ") + " СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,Номенклатура В(ВЫБРАТЬ guid ИЗ Товары)) Ост
	|ПО Спр.guid = Ост.Номенклатура", "") + "
	
	|" + ?(ДобавлятьЦены, "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|		(
	|			ВЫБРАТЬ Номенклатура, МАКСИМУМ(Цена) Цена
	|			ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ВидЦены = &ВидЦены И Номенклатура В(ВЫБРАТЬ guid ИЗ Товары))
	|			СГРУППИРОВАТЬ ПО Номенклатура
	|		) Цен
	|ПО 
	|	Спр.guid = Цен.Номенклатура
	|","") + "
	
	|" + ?(ЕстьВремяДоставки, "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ Склад, ВремяВДнях ИЗ РегистрСведений.АТ_СрокиДоставки ГДЕ БизнесРегион = &БизнесРегион) Дост
	|ПО
	|	Ост.Склад = Дост.Склад
	|","") + "
	|УПОРЯДОЧИТЬ ПО guid %6
	|", ?(Первые, СтрШаблон("ПЕРВЫЕ %1", Формат(Первые, "ЧГ=")), ""),
		СтрСоединить(ПоляСпр, ", "),
		?(Условия.Количество(), " И Спр", "") + СтрСоединить(Условия, " И Спр"),
		"%" + Артикул + "%",
		?(ДобавлятьКроссы, "И Не Удалено", ""),
		?(Сортировка.Количество(), ", " + СтрСоединить(Сортировка, ", "), ""),
		СтрСоединить(ПоляЗапр, ",")));
		
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	Запрос.УстановитьПараметр("ВидЦены", 		ВидЦены);
	Запрос.УстановитьПараметр("БизнесРегион",	БизнесРегион);
	
	Товары 		= Запрос.Выполнить().Выгрузить();
	Результат 	= Товары.СкопироватьКолонки();
	стТовар		= Неопределено;
	
	Если ЕстьКоличество Или ЕстьСклады Тогда
		
		Если ЕстьСклады Тогда
			Результат.Колонки.Удалить("stores");
			Результат.Колонки.Добавить("stores", Новый ОписаниеТипов("Массив"));
		КонецЕсли;
		
		Для Каждого Строка Из Товары Цикл
			Если стТовар <> Строка.guid Тогда
				
				стТовар 	= Строка.guid;
				НовСтрока 	= Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				
				Если ЕстьКоличество Тогда
					НовСтрока.quantity = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьКоличество Тогда
				НовСтрока.quantity = НовСтрока.quantity + Строка.quantity;
			КонецЕсли;
			
			Если ЕстьСклады Тогда
				СтруктураСклада = Новый Структура("guid, name, quantity", Строка.stores, Строка(Строка.stores), Строка.quantity);
				Если ДобавлятьЦены Тогда
					СтруктураСклада.Вставить("price", Строка.price);
				КонецЕсли;
				НовСтрока.stores.Добавить(СтруктураСклада);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Результат = Товары;
	КонецЕсли;
	
	Если ПолучитьUrlКартинок Тогда
		ДобавитьURLКартинок(Результат);
	КонецЕсли;
	
	Если ДобавлятьЦены И Результат.Колонки.Найти("stores") <> Неопределено Тогда
		Результат.Колонки.Удалить("price");
	КонецЕсли;
	
	Если ТребПоля.Найти("guid") = Неопределено Тогда
		Результат.Колонки.Удалить("guid");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПоискТовараPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт

	Перем Ответ, ПараметрыКлюча;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча) Тогда
		
		Параметры = ПолучитьСтруктураВозможныхПолейИзТелаИПроверить(ЗапросHTTP, Ответ, "sku,first,name,fields,search",,ЭтоОтладка);
		Если Параметры <> Неопределено И ПроверитьОбязательныеСвойства(Параметры, "fields", Ответ, ЭтоОтладка) Тогда
			
			Если Не Параметры.Свойство("search") Тогда
				Параметры.Вставить("search", 0);
			КонецЕсли;
			
			Параметры.Вставить("Usr", ПараметрыКлюча.Usr);
			
			Товары = Сущность_Товары(Параметры, Ответ, ЭтоОтладка);
			Возврат ?(Товары = Неопределено,
						Ответ,
						ВернутьОтвет(Новый Структура("Тело", Товары), ЭтоОтладка));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

#Область Гребанное_дерево
// кто сделает его крутым и быстрым тот молодец

Функция ВсеАртикулыPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт

	Перем Ответ;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка) Тогда
		Ответ = ВернутьОтвет(Новый Структура("Тело", АТ_WI_Кеш.ПолучитьВсеАртикулыВJSON()), ЭтоОтладка, Ложь);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Процедура TrieAdd(Trie, sku)
	
	// Добвляет ноду в префиксное дерево
	
	Если Не ПустаяСтрока(sku) Тогда
	
		Ключ 		= Лев(СокрЛ(sku), 1);
		Дочерний 	= Trie[Ключ];
		
		Если Дочерний = Неопределено Тогда
			Дочерний = Новый Соответствие;
			Trie.Вставить(Ключ, Дочерний);
		КонецЕсли;
		
		TrieAdd(Дочерний, Сред(СокрЛ(sku), 2));
		
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьПрефиксноеДеревоИзАртикулов() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Различные Артикул ИЗ (
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ Артикул 
	|	ИЗ Справочник.Номенклатура
	|	ГДЕ НЕ ЭтоГруппа И НЕ ПометкаУдаления И Артикул <> """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ Артикул
	|	ИЗ РегистрСведений.АналогиТоваров.СрезПоследних
	|	ГДЕ НЕ Удалено 
	|
	|)   Запрос
	|
	|УПОРЯДОЧИТЬ ПО Артикул
	|");
	
	Trie 	= Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Trieadd(Trie, Выборка.Артикул);
	КонецЦикла;
	
	Возврат Trie;
	
КонецФункции

Процедура ДобавитьВетку(Дерево, Выборка, номПоз, КолВложений)
	
	//Выборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//Пока Выборка.Следующий() Цикл
	//	
	//	стрНом 	= Формат(номПоз, "ЧГ=");
	//	КолПодч = Выборка["КолВложенных" + стрНом];
	//	
	//	Если КолПодч = null Тогда
	//	ИначеЕсли Выборка["КолВложенных" + стрНом] > 1 Тогда
	//		Дочерний = Новый Соответствие;
	//		Дерево.Вставить(Выборка["Символ" + стрНом], Дочерний);
	//		ДобавитьВетку(Дочерний, Выборка, номПоз + 1, КолВложений)
	//	Иначе
	//		Дерево = Выборка["Слово" + стрНом];
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьВетку_Ст(ВыборкаРодитель, номПоз, КолВложений)
	
	//Дерево 	= Новый Соответствие;
	//Выборка = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	стрНом = Формат(номПоз, "ЧГ=");
	//	//Если Выборка["КолВложенных" + стрНом] <> null Тогда
	//		
	//		Дерево.Вставить(Выборка["Символ" + стрНом],
	//				//?(Выборка["КолВложенных" + стрНом] > 2 И СтрДлина(Выборка["Слово" + стрНом]) > 1,
	//				?(Выборка["КолВложенных" + стрНом] > 1 И КолВложений > номПоз,
	//								ПолучитьВетку(Выборка, номПоз + 1, КолВложений), Выборка["Слово" + стрНом]));
	//					//ПолучитьВетку(Выборка, номПоз + 1, КолВложений),
	//					//Выборка["Слово" + стрНом]));
	//	//КонецЕсли;
	//КонецЦикла;
	//
	//Возврат Дерево;
	
КонецФункции
Функция ПолучитьВетку(ВыборкаРодитель, номПоз, КолВложений)
	
	Дерево 	= Новый Соответствие;
	Массив 	= Новый Массив;
	Выборка = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл
		
		стрНом 	= Формат(номПоз, "ЧГ=");
		Символ 	= Выборка["Символ" + стрНом];
		Слово 	= Выборка["Слово" + стрНом];
		
		Если Не ПустаяСтрока(Слово) Тогда
			
			Если Выборка["КолВложенных" + стрНом] > 1 И КолВложений > номПоз Тогда
			
				Дочерний = ПолучитьВетку(Выборка, номПоз + 1, КолВложений);
				Если Дочерний <> Неопределено Тогда
					Дерево.Вставить(Символ, Дочерний);
				КонецЕсли;
				
			Иначе
				Массив.Добавить(Слово);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	КолВДереве = Дерево.Количество();
	КолВМассиве = Массив.Количество();
	
	Если Не КолВДереве И Не КолВМассиве Тогда
		Возврат Неопределено;
	ИначеЕсли КолВДереве И КолВМассиве Тогда
		Массив.Добавить(Дерево);
	ИначеЕсли Дерево.Количество() Тогда
		Возврат Дерево;
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции
Функция ПолучитьСжатоеПрефиксноеДеревоИзАртикулов_рабочее() Экспорт
	
	КолВложений = 25;
	
	Группировка = Новый Массив;
	Выбор 		= Новый Массив;
	ИтогКоли 	= Новый Массив;
	Итог 		= Новый Массив;
	
	Для Ном = 1 По КолВложений Цикл
		
		//колВложенных = Новый Массив;
		//Для Вл = Ном + 1 По КолВложений Цикл
		//	колВложенных.Добавить(СтрШаблон("СУММА(КолВложенных%1)", вл));
		//КонецЦикла;
		
		стрНом = Формат(Ном, "ЧГ=");
		
		Группировка.Добавить(СтрШаблон("ПОДСТРОКА(Артикул, %1, 1)", стрНом));
		
		Выбор.Добавить(СтрШаблон("
		|	ПОДСТРОКА(Артикул, %1, 1) Символ%1,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПОДСТРОКА(Артикул, %2, 100)) КолВложенных%1,
									//|ВЫБОР КОГДА ПОДСТРОКА(Артикул, %1, 1) = """" ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КолВложенных%1, 
									
		|	МАКСИМУМ(ПОДСТРОКА(Артикул, %1, 100)) Слово%1", стрНом, Формат(Ном + 1, "ЧГ=")));
		//|	МАКСИМУМ(ПОДСТРОКА(Артикул, %2, 100)) Слово%1", стрНом, Формат(Ном + 1, "ЧГ=")));
									
									
									//Выбор.Добавить(СтрШаблон("ПОДСТРОКА(Артикул, %1, 1) Символ%1, ПОДСТРОКА(Артикул, %2, 100) Слово%1", стрНом, Формат(Ном + 1, "ЧГ=")));
		Итог.Добавить(СтрШаблон("Символ%1", стрНом));
		//Если колВложенных.Количество() Тогда
			//ИтогКоли.Добавить(СтрШаблон("%2 КАК КолВложенных%1, МАКСИМУМ(Слово%1)", стрНом, СтрСоединить(колВложенных, " + ")));
			ИтогКоли.Добавить(СтрШаблон("СУММА(КолВложенных%1), МАКСИМУМ(Слово%1)", стрНом));
		//КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ %1
	|ИЗ (
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ // ПЕРВЫЕ 1000
	|		АртикулДляПоиска Артикул 
	|	ИЗ Справочник.Номенклатура
	|	ГДЕ НЕ ЭтоГруппа И НЕ ПометкаУдаления И Артикул <> """"
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ // ПЕРВЫЕ 1000
	|		АртикулДляПоиска
	|	ИЗ РегистрСведений.АналогиТоваров.СрезПоследних
	|	ГДЕ НЕ Удалено
	|
	|)   Запрос
	|СГРУППИРОВАТЬ ПО %2
	|
	|ИТОГИ %3 ПО %4
	|", СтрСоединить(Выбор, ","),
		СтрСоединить(Группировка, ","),
		СтрСоединить(ИтогКоли, ","),
		СтрСоединить(Итог, ",")));
		
	Возврат ПолучитьВетку(Запрос.Выполнить(), 1, КолВложений);
	
КонецФункции

Функция ОдинаковСимволы(а, б)
	
	// возвращает символы вначале которые совпали между а и б
	
	Рез 	= "";
	Длина 	= СтрДлина(а);
	
	Для Ном = 1 По Длина Цикл 
		
		Символ = Сред(а, Ном, 1);
		Если Символ <> Сред(б, Ном, 1) Тогда 
			Прервать;
		КонецЕсли; 
		
		Рез = Рез + Символ; 
		
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции
Функция новВетка(Префикс, Первый, Второй)
	
	ДлинаПреф = СтрДлина(Префикс);
		
	Массив = Новый Массив;
	Массив.Добавить(Сред(Первый, ДлинаПреф));
	Массив.Добавить(Сред(Второй, ДлинаПреф));
		
	НовВетка = Новый Соответствие;
	НовВетка.Вставить(Префикс, Массив);
	Возврат НовВетка;
	
КонецФункции
Функция ОбработанаВетка(Ветка, Окончание)
	
	// Обрабатывает ветку,
	// возвращает истина если ветка была обработана
	
	ЭтоСоотв = ТипЗнч(Ветка) = Тип("Соответствие");
	
	Для Каждого Элемент Из Ветка Цикл
		
		Значение = ?(ЭтоСоотв, Элемент.Значение, Значение);
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
			Префикс = ОдинаковСимволы(Окончание, Значение);
			Если Префикс <> "" Тогда
					
				Ветка.Добавить(новВетка(Префикс, Значение, Окончание));
				Возврат Истина;
					
			КонецЕсли;
				
		ИначеЕсли ТипЗнч(Значение) = Тип("Соответствие") И СтрНачинаетсяС(Окончание, Значение.Ключ) Тогда
				
			ДобавитьВеткуСОбработкой(Значение, Окончание);
			Возврат Истина;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Возврат ОбработанаВетка(Значение, Окончание);
			
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции
Процедура ДобавитьВеткуСОбработкой(Ветка, Артикул)
	
	Символ 		= Лев(Артикул, 1);
	Окончание	= Сред(Артикул, 2);
	Дочерний 	= Ветка[Символ];
	
	Если Дочерний = Неопределено Тогда
		
		Ветка.Вставить(Символ, Окончание);
		
	ИначеЕсли ТипЗнч(Дочерний) = Тип("Строка") Тогда
		
		Префикс = ОдинаковСимволы(Окончание, Дочерний);
		Ветка[Символ] = новВетка(Префикс, Дочерний, Окончание);
		
	ИначеЕсли ТипЗнч(Дочерний) = Тип("Массив") Тогда
		
		Если Не ОбработанаВетка(Дочерний, Окончание) Тогда
			Дочерний.Добавить(Окончание);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Дочерний) = Тип("Соответствие") Тогда
		
		Если Не ОбработанаВетка(Дочерний, Окончание) Тогда
			Дочерний.Вставить(Символ, Окончание);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КлючВетки(Значение, ЭтоСоотв)
	
	Если ЭтоСоотв Тогда
		
		Для Каждого Элемент Из Значение Цикл
			Возврат Элемент.Ключ;
		КонецЦикла;
		
	Иначе
		
		Возврат Значение;
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗначениеВВетку(Артикул, Ветка, Ключ, Массив, ЭтоСоотв)
	
	Если Не ПустаяСтрока(Артикул) Тогда
				
		Если ЭтоСоотв Тогда
			
			НовВетка = Новый Соответствие;
			НовВетка.Вставить(Артикул, Ветка[Ключ]);
			Массив.Добавить(НовВетка);
			
		ИначеЕсли ТипЗнч(Ветка) = Тип("Соответствие") Тогда
			ДобавитьВВетку(Ветка[Ключ], Артикул)
		Иначе
			Массив.Добавить(Артикул);
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры
Процедура ДобавитьВВетку(Ветка, Артикул)
	
	// Возвращает ключ и значения полученный из артикула
	
	//Если ТипЗнч(ВеткаИлиЗнач) <> Тип("Массив") Тогда
	//	Ветка = Новый Массив;
	//	Ветка.Добавить(ВеткаИлиЗнач);
	//Иначе
	//	Ветка = ВеткаИлиЗнач;
	//КонецЕсли;
	
	ТипСоотв = Тип("Соответствие");
	Инд = -1;
	Для Каждого Элемент Из Ветка Цикл Инд = Инд + 1;
		
		ЭтоСоотв 	= ТипЗнч(Элемент) = ТипСоотв;
		КлючВетки 	= КлючВетки(Элемент, ЭтоСоотв);
		
		Суфикс = ОдинаковСимволы(КлючВетки, Артикул);
			
		Если Суфикс <> "" Тогда
				
			ДлинаСуфф 	= СтрДлина(Суфикс);
			РазбВетка 	= Сред(КлючВетки, ДлинаСуфф + 1);
			РазбАртикул = Сред(Артикул, ДлинаСуфф + 1);
			
			Массив 		= Новый Массив;
			
			ДобавитьЗначениеВВетку(РазбВетка, 	Элемент, КлючВетки, Массив, ЭтоСоотв);
			ДобавитьЗначениеВВетку(РазбАртикул, Элемент, КлючВетки, Массив, Ложь);
			
			Если Массив.Количество() Тогда
				новСоотв = Новый Соответствие;
				//новСоотв.Вставить(Суфикс, ?(Массив.Количество() = 1, Массив[0], Массив));
				новСоотв.Вставить(Суфикс, Массив);
				
				Ветка[Инд] = новСоотв;
			КонецЕсли;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	Ветка.Добавить(Артикул);
	
КонецПроцедуры
Функция ПолучитьСжатоеПрефиксноеДеревоИзАртикулов() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Различные Артикул ИЗ (
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ // ПЕРВЫЕ 10000
	|		АртикулДляПоиска Артикул
	|	ИЗ Справочник.Номенклатура
	|	ГДЕ НЕ ЭтоГруппа И НЕ ПометкаУдаления И Артикул <> """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ // ПЕРВЫЕ 10000
	|		АртикулДляПоиска
	|	ИЗ РегистрСведений.АналогиТоваров.СрезПоследних
	|	ГДЕ НЕ Удалено
	|
	|)   Запрос
	|
	|ГДЕ Артикул <> """"
	|
	|УПОРЯДОЧИТЬ ПО Артикул
	|");
	
	Trie 	= Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьВВетку(Trie, Выборка.Артикул);
	КонецЦикла;
	
	Возврат Trie;
	
КонецФункции

#КонецОбласти

#Область Корзина

Функция НаличияТовараДостаточно(Товар, Склад, Количество, Ответ, ЭтоОтладка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(,Склад = &Склад И Номенклатура = &Номенклатура)
	|ГДЕ
	|	ВНаличииОстаток - ВРезервеСоСкладаОстаток - ВРезервеПодЗаказОстаток - &Количество >= 0
	|");
	
	Запрос.УстановитьПараметр("Склад", 			Склад);
	Запрос.УстановитьПараметр("Номенклатура", 	Товар);
	Запрос.УстановитьПараметр("Количество", 	Количество);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		Ответ = ВернутьОтвет(Новый Структура("Тело", Новый Структура("error_code", КодОшибкиНеДостаточноТовара())), ЭтоОтладка);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьКорзину(Параметры)
	
	//	Возвращает корзину пользователя
	//
	// Параметры:
	//	Usr 	- Справочник пользователь интрнет
	//	short 	- если false тогда полную корзину
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ 	%1 Сумма(Количество) count, СУММА(Цена * Количество) sum 
	|ИЗ 		РегистрСведений.АТ_ИнтернетКорзина
	|ГДЕ 		ПользовательИнтернет = &Usr
	|%2",
		?(Параметры.short, "", "Номенклатура guid, Номенклатура.Наименование name, Номенклатура.Артикул sku, "),
		?(Параметры.short, "", "СГРУППИРОВАТЬ ПО Номенклатура")));
	
	Запрос.УстановитьПараметр("Usr", Параметры.Usr);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(Параметры.short, КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Товары), Товары);
	
КонецФункции
Функция Корзина_ПолучитьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча, Param;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча, Param) Тогда
		
		ПараметрыКлюча.Вставить("short", АТ_ОбщегоНазначения.Параметр(Param, "short", Ложь));
		Ответ = ВернутьОтвет(Новый Структура("Тело", ПолучитьКорзину(ПараметрыКлюча)), ЭтоОтладка);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция Корзина_ОчиститьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча) Тогда
		
		Набор = РегистрыСведений.АТ_ИнтернетКорзина.СоздатьНаборЗаписей();
		Набор.Отбор.ПользовательИнтернет.Установить(ПараметрыКлюча.Usr);
		
		стрОшибки = "";
		Ответ = ?(Записать(Набор, стрОшибки),
						ВернутьОтвет(Новый Структура("Тело", "Очищено"),ЭтоОтладка, Ложь),
						ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиЗаписиОбъекта(), стрОшибки), ЭтоОтладка));
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция Корзина_ДобавитьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Возврат Корзина_ИзменитьPOST(ЗапросHTTP, Ложь, ЭтоОтладка);
	
КонецФункции
Функция Корзина_УдалитьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Возврат Корзина_ИзменитьPOST(ЗапросHTTP, Истина, ЭтоОтладка, Истина);
	
КонецФункции
Функция Корзина_ИзменитьPOST(ЗапросHTTP, ЭтоУдаление, ЭтоОтладка, ВозвращатьКорзину = Неопределено)
	
	Перем Ответ, ПараметрыКлюча;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча) Тогда
		
		Param = ПолучитьСтруктураИзТелаИПроверить(ЗапросHTTP, Ответ, "guid,quantity,store,price",, ЭтоОтладка);
		Если Param <> Неопределено Тогда
			
			Товар = ПолучитьПоГуиду(Справочники.Номенклатура, Param.guid, Ответ, ЭтоОтладка);
			Если Товар <> Неопределено Тогда
				
				Склад = ПолучитьПоГуиду(Справочники.Склады, Param.store, Ответ, ЭтоОтладка);
				Если Склад <> Неопределено Тогда
					
					Запрос = Новый Запрос("ВЫБРАТЬ СУММА(Количество) ИЗ РегистрСведений.АТ_ИнтернетКорзина ГДЕ ПользовательИнтернет = &ПользовательИнтернет И Номенклатура = &Номенклатура И Склад = &Склад");
					Запрос.УстановитьПараметр("ПользовательИнтернет", 	ПараметрыКлюча.Usr);
					Запрос.УстановитьПараметр("Номенклатура", 			Товар);
					Запрос.УстановитьПараметр("Склад", 					Склад);
					
					Количество = 0;
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Количество = ?(ЗначениеЗаполнено(Выборка.Количество), Выборка.Количество, 0);
					КонецЕсли;
					
					Запись = РегистрыСведений.АТ_ИнтернетКорзина.СоздатьМенеджерЗаписи();
					Запись.ПользовательИнтернет = ПараметрыКлюча.Usr;
					Запись.Номенклатура 		= Товар;
					Запись.Склад 				= Склад;
					Запись.Цена					= Param.price;
					Запись.Количество 			= Количество + (Param.quantity * ?(ЭтоУдаление, -1, 1));
					
					стрОшибки 	= "";
					
					ПараметрыКлюча.Вставить("short", false);
					Если ВозвращатьКорзину = Неопределено Тогда
						ВозвращатьКорзину = АТ_ОбщегоНазначения.Параметр(Param, "full", false);
					КонецЕсли;
					
					Ответ = ВернутьОтвет(Новый Структура, ЭтоОтладка);
					
					Если Запись.Количество <= 0 Тогда
						
						Попытка
							Запись.Удалить();
						Исключение
							стрОшибки = ОписаниеОшибки();
						КонецПопытки;
						
						Если стрОшибки <> "" Тогда
							Ответ = ВернутьОтвет(Новый Структура("Тело", ПолучитьКорзину(ПараметрыКлюча)), ЭтоОтладка);
						КонецЕсли;
						
					ИначеЕсли НаличияТовараДостаточно(Товар, Склад, Запись.Количество, Ответ, ЭтоОтладка) Тогда
						
						Если Записать(Запись, стрОшибки) Тогда
							Если ВозвращатьКорзину Тогда
								Ответ = ВернутьОтвет(Новый Структура("Тело", ПолучитьКорзину(ПараметрыКлюча)), ЭтоОтладка);
							КонецЕсли;
						Иначе
							Ответ = ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиЗаписиОбъекта(), стрОшибки), ЭтоОтладка);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Файлы

Функция СоздатьКаталогЕслиНеСуществует(ПутьККаталогу, Ответ, ЭтоОтладка)
	
	Файл = Новый Файл(ПутьККаталогу);
	Если Не Файл.Существует() Тогда
		
		Попытка
			СоздатьКаталог(ПутьККаталогу);
		Исключение
			стрОшибки 	= ОписаниеОшибки();
			Ответ 		= ВернутьОтвет(Новый Структура("Тело, КодОтвета", "Не удалось записать файл " + Файл.Имя + стрОшибки, КодОшибкиЗаписиОбъекта()), ЭтоОтладка);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура АТ_ПриЗаписиПрисоединенногоФайлаПриЗаписи(Источник, Отказ) Экспорт
	
	Путь = АТ_WI_Кеш.ПутьКФайлам() + ПутьККартинкам() + ПолучитьРазделительПутиСервера();
	Если Не ПустаяСтрока(Путь) Тогда
		
		Данные = РаботаСФайлами.ДвоичныеДанныеФайла(Источник.Ссылка);
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			
			Данные.Записать(СтрШаблон("%1.%2", Путь + XMLСтрока(Источник.Ссылка), Источник.Расширение));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьURLПечатногоДокумента(ДокументСсылка, ИмяПечатнойФормы, Ответ, ЭтоОтладка)
	
	// Сохраняет печатную форму документа в pdf на серваке и возвращает URL
	// если не найдет то вернет пустую строку
	
	Разделитель = ПолучитьРазделительПутиСервера();
	guid		= XMLСтрока(ДокументСсылка);
	ПутьКаталогу= АТ_WI_Кеш.ПутьКФайлам() + ПутьКДокументам() + Разделитель + guid;
	ПутьКФайлу	= ПутьКаталогу + Разделитель + ИмяПечатнойФормы + ".pdf";
	Файл 		= Новый Файл(ПутьКФайлу);
	ПутьURL		= "";
	
	Если Файл.Существует() Тогда
		
		ПутьURL = АТ_WI_Кеш.ПутьURLКФайлам() + ПутьКФайлу;
		
	ИначеЕсли СоздатьКаталогЕслиНеСуществует(ПутьКаталогу, Ответ, ЭтоОтладка) Тогда
		
		Если ИмяПечатнойФормы = "bill" Тогда
			
			стрОшибки = "";
			Обработка = АТ_ОбщегоНазначения.ОбъектПодключеннойВнешнейОбработки(Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор("2e18592d-2b66-11e7-8102-001dd8b75f1d")), Новый Структура("БезопасныйРежим", Ложь), стрОшибки);
			Если Обработка = Неопределено Тогда
				Ответ = ВернутьОтвет(Новый Структура("Тело, КодОтвета", "Ошибка инициализации внешней печатной формы " + стрОшибки, КодОшибкиЗаписиОбъекта()), ЭтоОтладка);
			Иначе
				
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(ДокументСсылка);
				
				СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
				ТабдДок = Обработка.СформироватьПечатнуюФормуСчетНаОплату(СтруктураТипов, Новый СписокЗначений, Новый Структура);
				
				ПутьURL = АТ_WI_Кеш.ПутьURLКФайлам() + ПутьКФайлу;				
				
				Попытка
					ТабдДок.Записать(Файл.ПолноеИмя, ТипФайлаТабличногоДокумента.PDF);
				Исключение
					стрОшибки 	= ОписаниеОшибки();
					ПутьURL 	= "";
					Ответ 		= ВернутьОтвет(Новый Структура("Тело, КодОтвета", "Не удалось записать файл " + стрОшибки, КодОшибкиЗаписиОбъекта()), ЭтоОтладка);
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			Ответ = ВернутьОтвет(Новый Структура("Тело, КодОтвета", "Не известная печатная форма: " + ИмяПечатнойФормы, КодОшибкиЗаписиОбъекта()), ЭтоОтладка);
		КонецЕсли;
	КонецЕсли;
		
	Возврат ПутьURL;
	
КонецФункции

Функция ПолучитьURLкPDFPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, Param;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка,,Param) Тогда
		Если ПроверитьОбязательныеСвойства(Param, "ObjType, guid, papertype", Ответ, ЭтоОтладка) Тогда
			
			Менеджер = ОпределитьМенеджераПоТипуОбъекта(Param.ObjType, Ответ, ЭтоОтладка);
			Если Менеджер <> Неопределено Тогда
				
				ДокСсылка = ПолучитьПоГуиду(Менеджер, Param.guid, ЭтоОтладка);
				Если ДокСсылка <> Неопределено Тогда
				
					стрURL = ПолучитьURLПечатногоДокумента(ДокСсылка, Param.papertype, Ответ, ЭтоОтладка);
					Если Не ПустаяСтрока(стрURL) Тогда
						Ответ = ВернутьОтвет(Новый Структура("Тело", стрURL), ЭтоОтладка);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ИсторияПоиска

Функция ИсторияПоиска_ДобавитьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча) Тогда
		
		Param = ПолучитьСтруктураИзТелаИПроверить(ЗапросHTTP, Ответ, "guid",, ЭтоОтладка);
		
		Если Param <> Неопределено Тогда
		
			Набор = РегистрыСведений.АТ_ИсторияПоиска.СоздатьНаборЗаписей();
			Набор.Отбор.ПользовательИнтернет.Установить(ПараметрыКлюча.Usr);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 15
			|	ВложенныйЗапрос.ПользовательИнтернет КАК ПользовательИнтернет,
			|	МАКСИМУМ(ВложенныйЗапрос.ПериодДобавления) КАК ПериодДобавления,
			|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
			|	ВложенныйЗапрос.Номенклатура КАК guid,
			|	ВложенныйЗапрос.Номенклатура.Артикул КАК sku,
			|	ВложенныйЗапрос.Номенклатура.Наименование КАК name,
			|	Представление(ВложенныйЗапрос.Номенклатура.Производитель) КАК manufacturer
			|ИЗ
			|	(ВЫБРАТЬ ПЕРВЫЕ 15
			|		АТ_ИсторияПоиска.ПользовательИнтернет КАК ПользовательИнтернет,
			|		АТ_ИсторияПоиска.ПериодДобавления КАК ПериодДобавления,
			|		АТ_ИсторияПоиска.Номенклатура КАК Номенклатура
			|	ИЗ
			|		РегистрСведений.АТ_ИсторияПоиска КАК АТ_ИсторияПоиска
			|	ГДЕ
			|		АТ_ИсторияПоиска.ПользовательИнтернет = &ПользовательИнтернет
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		&ПользовательИнтернет,
			|		&ТекущаяДатаСеанса,
			|		&Номенклатура) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ПользовательИнтернет,
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПериодДобавления УБЫВ";
			Запрос.УстановитьПараметр("ПользовательИнтернет", ПараметрыКлюча.Usr);
			Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Param.guid)));
			
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выгрузка = РезультатЗапроса.Выгрузить();
				Набор.Загрузить(Запрос.Выполнить().Выгрузить());
				
				Выгрузка.Колонки.Удалить("ПользовательИнтернет");
				Выгрузка.Колонки.Удалить("ПериодДобавления");
				Выгрузка.Колонки.Удалить("Номенклатура");
				
				стрОшибки = "";
				Ответ = ?(Записать(Набор, стрОшибки),
								ВернутьОтвет(Новый Структура("Тело", Выгрузка), ЭтоОтладка),
								ВернутьОтвет(Новый Структура("КодОтвета, Тело", КодОшибкиЗаписиОбъекта(), стрОшибки), ЭтоОтладка));
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ИсторияПоиска_ПолучитьPOST(ЗапросHTTP, ЭтоОтладка = Ложь) Экспорт
	
	Перем Ответ, ПараметрыКлюча;
	
	Если АвторизацияПоКлючуПройдена(ЗапросHTTP, Ответ, ЭтоОтладка, ПараметрыКлюча) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 15
		|	АТ_ИсторияПоиска.Номенклатура КАК guid,
		|	АТ_ИсторияПоиска.Номенклатура.Артикул КАК sku,
		|	АТ_ИсторияПоиска.Номенклатура.Наименование КАК name,
		|	Представление(АТ_ИсторияПоиска.Номенклатура.Производитель) КАК manufacturer
		|ИЗ
		|	РегистрСведений.АТ_ИсторияПоиска КАК АТ_ИсторияПоиска
		|ГДЕ
		|	АТ_ИсторияПоиска.ПользовательИнтернет = &ПользовательИнтернет
		|
		|УПОРЯДОЧИТЬ ПО
		|	АТ_ИсторияПоиска.ПериодДобавления УБЫВ";
		Запрос.УстановитьПараметр("ПользовательИнтернет", ПараметрыКлюча.Usr);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выгрузка = РезультатЗапроса.Выгрузить();
			
		стрОшибки = "";
		Ответ = ВернутьОтвет(Новый Структура("Тело", Выгрузка), ЭтоОтладка);
		
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти