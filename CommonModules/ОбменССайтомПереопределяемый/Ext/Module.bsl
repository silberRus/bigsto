////////////////////////////////////////////////////////////////////////////////
// ОбменССайтомПереопределяемый: механизм обмена с сайтом
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФормаУзлаОбмена

// Определяет имя формы узла плана обмена "Обмен с сайтом"
//
Процедура ПереопределитьФормуУзла(ВыбраннаяФорма) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - Объект узла плана обмена "ОбменССайтом"
//
Процедура ФормаУзлаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ОбменССайтамиУТ.ФормаУзлаОбменаСоглашениеПриИзмененииНаСервере(Форма, Истина);
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")) И ТекущийОбъект.ОбменЗаказами Тогда
		Форма.Объект.ОбменЗаказами = Ложь;
		Форма.Элементы.СтраницаОбменЗаказами.Видимость = Ложь;
	КонецЕсли;
	
	Форма.ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Форма.ИспользуютсяГруппыДоступаПартнеров   = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаПартнеров");
	
	ОбменССайтомКлиентСерверПереопределяемый.УстановитьДоступностьЭлементовФормыУзла(Форма, ТекущийОбъект);

КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события
//
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.СпособИдентификацииКонтрагентов)  Тогда
		
		Форма.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП;
		
	КонецЕсли;
	
	Если Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		Форма.Элементы.ГруппаДоступаПартнеров.Заголовок = НСтр("ru = 'Группа доступа создаваемых контрагентов'");
	Иначе
		Форма.Элементы.ГруппаДоступаПартнеров.Заголовок = НСтр("ru = 'Группа доступа создаваемых партнеров'");
	КонецЕсли;
	
	// ( Storverk ОбменКонтрагентами
	ЭлементФормы = Форма.Элементы.Добавить("ОбменКонтрагентами", Тип("ПолеФормы"), Форма.Элементы.ГруппаРежим);
	ЭлементФормы.ПутьКДанным = "Объект.ОбменКонтрагентами";
	ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// ) Storverk ОбменКонтрагентами
	
	// ( Storverk ОбменМенеджерами
	ЭлементФормы = Форма.Элементы.Добавить("ОбменМенеджерами", Тип("ПолеФормы"), Форма.Элементы.ГруппаРежим);
	ЭлементФормы.ПутьКДанным = "Объект.ОбменМенеджерами";
	ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// ) Storverk ОбменМенеджерами
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект
//  ПараметыЗаписи - Структура - структура, содержащая параметры записи
//
Процедура ФормаУзлаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект
//  ПараметыЗаписи - Структура - структура, содержащая параметры записи
//
Процедура ФормаУзлаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события ПриИзменении флажка формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//
Процедура ПолеВводаПриИзмененииНаСервере(ЭлементИмя, Форма) Экспорт
	
	Если ВРег(ЭлементИмя) = ВРег("Соглашение") Тогда
		
		ОбменССайтамиУТ.ФормаУзлаОбменаСоглашениеПриИзмененииНаСервере(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//
Процедура ПолеФлажкаПриИзмененииНаСервере(ЭлементИмя, Форма) Экспорт
	

	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования табличной части формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//  НоваяСтрока - Булево - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево - Истина, если произошла отмена редактирования.
//  Отказ - Булево - Признак отказа от записи объекта.
//
Процедура ТаблицаФормыПередОкончаниемРедактированияНаСервере(ЭлементИмя, НоваяСтрока, ОтменаРедактирования, Отказ, Форма) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ПомощникПодключенияЮМИ

// Процедура, вызываемая из одноименного обработчика события формы "Помощник подключения ЮМИ" обработки "Обмен с сайтами".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
// 
Процедура ПриСозданииНаСервереФормаПомощникПодключенияЮМИ(Форма) Экспорт
	
	ОбменССайтамиУТ.ПриСозданииНаСервереФормаСоздатьСайт(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

// Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// Параметры:
//  ТекстыЗапросов - структура - тексты запросов;
//    * Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом";
//    * Остатки - поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ПолучитьТекстЗапросаВтНоменклатура() + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад,
	|	Склады.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склад}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|	СоглашенияСКлиентами.Валюта КАК Валюта,
	|	СоглашенияСКлиентами.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|{ГДЕ
	|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ ВидыЦен
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентами.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиТовары.ВидЦены
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	втНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоступныеСоглашенияСоглашения.Ссылка КАК ТипЦены,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) = 0
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0)
	|		КОНЕЦ / ВЫБОР
	|			КОГДА СоглашенияСКлиентамиТовары.Упаковка ЕСТЬ НЕ NULL 
	|					И СоглашенияСКлиентамиТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА &ТекстЗапросаКоэффициентУпаковки1 = 0
	|							ТОГДА 1
	|						ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ЦенаЗаЕдиницу,
	|	ДоступныеСклады.Склад КАК Склад,
	|	ЕСТЬNULL(РезервИзПоступлений.Количество, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ОстатокНаСкладе,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
	|				И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ДоступныеСоглашенияСоглашения.Валюта) КАК Справочник.Валюты).Код
	|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Код
	|	КОНЕЦ КАК ТипЦеныВалютаКод,
	|	ЕСТЬNULL(втНоменклатура.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение, """") КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	втНоменклатура.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	ТипЦены.*,
	|	ЦенаЗаЕдиницу,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	НоменклатураВидНоменклатуры.*}
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Склад).* КАК Склад}) КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеСклады.Склад = СвободныеОстаткиОстатки.Склад
	|			И (втНоменклатура.Номенклатура = СвободныеОстаткиОстатки.Номенклатура)
	|			И (СвободныеОстаткиОстатки.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК РезервИзПоступлений
	|		ПО (СвободныеОстаткиОстатки.Номенклатура = РезервИзПоступлений.Номенклатура)
	|			И (ЕСТЬNULL(СвободныеОстаткиОстатки.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = РезервИзПоступлений.Характеристика)
	|			И (СвободныеОстаткиОстатки.Склад = РезервИзПоступлений.Склад)
	|			И (РезервИзПоступлений.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
	|			И (РезервИзПоступлений.Количество < 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ПО (ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка)
	|			И (СоглашенияСКлиентамиТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|			И (СоглашенияСКлиентамиТовары.Номенклатура = втНоменклатура.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ПО (ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка)
	|			И (втНоменклатура.Номенклатура.ЦеноваяГруппа = СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ВидыЦен.ВидЦен
	|					ИЗ
	|						ВидыЦен КАК ВидыЦен) {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ИСТИНА)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = втНоменклатура.Номенклатура)
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) > 0
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиТовары.ВидЦены
	|				КОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен
	|			КОНЕЦ)
	|{ГДЕ
	|	(ЕСТЬNULL(РезервИзПоступлений.Количество, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0)) КАК ОстатокНаСкладе}";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашенияСКлиентамиТовары.Упаковка",
		"СоглашенияСКлиентамиТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаОбновлениеПакетаПредложений или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрыСхемыКомпоновкиДанных - параметры, которые могли появиться в тексте запроса
//                                                      в процедуре ПолучитьТекстЗапросаОбновлениеПакетаПредложений.
//
Процедура УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры, ПараметрыКомпоновки)  Экспорт
	
	ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет структуру полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете 
// "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом".
// Параметры:
//  ПоляОтбора - Структура - сюда добавляются поля отбора.
//		* Ключ - Наименование поля отбора;
//		* Значение - Описание типа значения добавляемого поля.
//
Процедура ЗаполнитьПоляОтбораОбновленияПакетаПредложений(ПоляОтбора) Экспорт
	
	ПоляЦеныИОстатки = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	
	НоваяСтрока = ПоляЦеныИОстатки.Добавить(); 
	НоваяСтрока.Наименование = "Соглашение";
	НоваяСтрока.Синоним = НСтр("ru = 'Соглашение'");
	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСоглашения();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		НоваяСтрока = ПоляЦеныИОстатки.Добавить(); 
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru = 'Сегмент номенклатуры'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		
	КонецЕсли;
	
	ПоляОтбора.Вставить("ЦеныИОстатки", ПоляЦеныИОстатки);
	
КонецПроцедуры

//Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений"
// плана обмена "Обмен с сайтом"
// Параметры:
//		ТекстыЗапросов - структура содердащая тексты запросов
//			* Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом"
//			* Остатки- поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом"
//
Процедура ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Цены = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|	СоглашенияСКлиентами.Валюта КАК Валюта,
	|	СоглашенияСКлиентами.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|{ГДЕ
	|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ ВидыЦен
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентами.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиТовары.ВидЦены
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	втНоменклатура.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ДоступныеСоглашенияСоглашения.Ссылка КАК ТипЦены,
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ДоступныеСоглашенияСоглашения.ЦенаВключаетНДС КАК ТипЦеныЦенаВключаетНДС,
	|	ДоступныеСоглашенияСоглашения.Наименование КАК ТипЦеныНаименование,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
	|				ИЛИ СоглашенияСКлиентамиТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ДоступныеСоглашенияСоглашения.Валюта) КАК Справочник.Валюты).Наименование
	|		КОГДА НЕ СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
	|			ТОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен.ВалютаЦены.Наименование
	|		КОГДА НЕ СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
	|			ТОГДА СоглашенияСКлиентамиТовары.ВидЦены.ВалютаЦены.Наименование
	|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Наименование
	|	КОНЕЦ КАК ТипЦеныВалютаКод,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) = 0
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0)
	|		КОНЕЦ / ВЫБОР
	|			КОГДА СоглашенияСКлиентамиТовары.Упаковка ЕСТЬ НЕ NULL 
	|					И СоглашенияСКлиентамиТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА &ТекстЗапросаКоэффициентУпаковки1 = 0
	|							ТОГДА 1
	|						ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ЦенаЗаЕдиницу,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ЕдиницыИзмерения.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	НоменклатураНаименование,
	|	НоменклатураАртикул,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураПометкаУдаления,
	|	ТипЦены.*,
	|	ТипЦеныЦенаВключаетНДС,
	|	ТипЦеныНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЦенаЗаЕдиницу}
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (втНоменклатура.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка
	|			И (СоглашенияСКлиентамиТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|			И (СоглашенияСКлиентамиТовары.Номенклатура = втНоменклатура.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка
	|			И (втНоменклатура.Номенклатура.ЦеноваяГруппа = СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ВидыЦен.ВидЦен
	|					ИЗ
	|						ВидыЦен КАК ВидыЦен) {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ИСТИНА)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = втНоменклатура.Номенклатура)
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) > 0
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиТовары.ВидЦены
	|				КОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен
	|			КОНЕЦ)";

	ТекстыЗапросов.Цены = СтрЗаменить(ТекстыЗапросов.Цены,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашенияСКлиентамиТовары.Упаковка",
		"СоглашенияСКлиентамиТовары.Номенклатура"));
		
	ТекстыЗапросов.Цены = СтрЗаменить(ТекстыЗапросов.Цены,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстыЗапросов.Остатки = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад,
	|	Склады.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склад}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	втНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоступныеСклады.Склад КАК Склад,
	|	ДоступныеСклады.Наименование КАК СкладНаименование,
	|	ЕСТЬNULL(РезервИзПоступлений.Количество, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ОстатокНаСкладе
	|{ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика.*,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ЕдиницаИзмерения,
	|	СкладНаименование}
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Склад).* КАК Склад}) КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеСклады.Склад = СвободныеОстаткиОстатки.Склад
	|			И (втНоменклатура.Номенклатура = СвободныеОстаткиОстатки.Номенклатура)
	|			И (СвободныеОстаткиОстатки.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК РезервИзПоступлений
	|		ПО (РезервИзПоступлений.Номенклатура = втНоменклатура.Номенклатура)
	|			И (РезервИзПоступлений.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И (СвободныеОстаткиОстатки.Склад = РезервИзПоступлений.Склад)
	|			И (РезервИзПоступлений.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
	|			И (РезервИзПоступлений.Количество < 0)
	|{ГДЕ
	|	(ЕСТЬNULL(РезервИзПоступлений.Количество, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0)) КАК ОстатокНаСкладе}";
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаПакетПредложений или быть особенностью прикладного решения.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыСхемыКомпоновки - ПараметрыСхемыКомпоновки - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаПакетПредложений.
//
Процедура УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет соотвествие полями, которые должны быть добавлены в отбор настройки каталога
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Поля в соотвествии хранятся с привязкой к набору данных, к которому они относятся 
//   Параметры:
// ПоляОтбора - Соотвествие, в которую добавляются поля отбора
//		* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений"
//		* Структура с полями данного набора
//			* Ключ - Наименование поля отбора
//			* Значение - Описание типа значения добавляемого поля
Процедура ЗаполнитьПоляОтбораПакетаПредложений(ПоляОтбора) Экспорт
	
	ПоляЦены = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	
	НоваяСтрока = ПоляЦены.Добавить();
	НоваяСтрока.Наименование = "Соглашение";
	НоваяСтрока.Синоним = НСтр("ru = 'Соглашение'");
	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСоглашения();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		НоваяСтрока = ПоляЦены.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru = 'Сегмент номенклатуры'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОстатки = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
		НоваяСтрока = ПоляОстатки.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru = 'Сегмент номенклатуры'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОтбора.Вставить("Остатки", ПоляОстатки);
		
	КонецЕсли;
	
	ПоляОтбора.Вставить("Цены", ПоляЦены);

	
КонецПроцедуры

//Формирует тексты запросов, которые позволят получить таблицы значений,
// описанные в макете "СхемаВыгрузкиКаталог"
// плана обмена "Обмен с сайтом"
// Параметры:
//	ТекстыЗапросов - структура содердащая тексты запросов
//		* Номенклатура - поле, в которое нужно поместить текст запроса для заполнения источника данных "Номенклатура"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Свойства      - поле, в которое нужно поместить текст запроса для заполнения источника данных "Свойства"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Файлы          - поле, в которое нужно поместить текст запроса для заполнения источника данных "Файлы"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Характеристики - поле, необязательное поле, поле в которое нужно поместить текст запроса для заполнения источника данных "Характерстики"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
Процедура ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Номенклатура = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ
	|	НоменклатураСправочник.Ссылка КАК Номенклатура,
	|	НоменклатураСправочник.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ВЫБОР
	|		КОГДА &КлассифицироватьПоВиду
	|			ТОГДА НоменклатураСправочник.ВидНоменклатуры
	|		ИНАЧЕ НоменклатураСправочник.Родитель
	|	КОНЕЦ КАК НоменклатураРодитель,
	|	НоменклатураСправочник.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|	НоменклатураСправочник.Код КАК НоменклатураКод,
	|	НоменклатураСправочник.Наименование КАК НоменклатураНаименование,
	|	НоменклатураСправочник.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	НоменклатураСправочник.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА НоменклатураСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА НоменклатураСправочник.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	КОНЕЦ КАК НоменклатураТипНоменклатуры,
	|	НоменклатураСправочник.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	НоменклатураСправочник.Описание КАК НоменклатураОписание,
	|	НоменклатураСправочник.ФайлКартинки КАК НоменклатураОсновноеИзображение,
	|	НоменклатураСправочник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	НоменклатураСправочник.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """")) КАК НоменклатураШтрихкод,
	|	НоменклатураСправочник.Производитель КАК НоменклатураПроизводитель,
	|	НоменклатураСправочник.СтавкаНДС КАК НоменклатураСтавкаНДСЗначение,
	|	ВЫБОР
	|		КОГДА &ВыгружатьПрочиеФайлы
	|			ТОГДА НоменклатураСправочник.ФайлОписанияДляСайта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураФайлОписанияHTML
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураПометкаУдаления,
	|	НоменклатураРодитель.*,
	|	НоменклатураЭтоГруппа,
	|	НоменклатураКод,
	|	НоменклатураНаименование,
	|	НоменклатураНаименованиеПолное,
	|	НоменклатураАртикул,
	|	НоменклатураТипНоменклатуры.*,
	|	НоменклатураВидНоменклатуры.*,
	|	НоменклатураОписание,
	|	НоменклатураОсновноеИзображение.*,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураШтрихкод,
	|	НоменклатураПроизводитель.*,
	|	НоменклатураСтавкаНДСЗначение.*,
	|	НоменклатураФайлОписанияHTML.*}
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО втНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И (ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|			И (ШтрихкодыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО втНоменклатура.Номенклатура = НоменклатураСправочник.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (втНоменклатура.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураСправочник.Ссылка,
	|	НоменклатураСправочник.ПометкаУдаления,
	|	НоменклатураСправочник.ЭтоГруппа,
	|	НоменклатураСправочник.Код,
	|	НоменклатураСправочник.Наименование,
	|	НоменклатураСправочник.НаименованиеПолное,
	|	НоменклатураСправочник.Артикул,
	|	НоменклатураСправочник.ВидНоменклатуры,
	|	НоменклатураСправочник.Описание,
	|	НоменклатураСправочник.ФайлКартинки,
	|	НоменклатураСправочник.ЕдиницаИзмерения,
	|	НоменклатураСправочник.ЕдиницаИзмерения.Код,
	|	НоменклатураСправочник.Производитель,
	|	НоменклатураСправочник.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА &КлассифицироватьПоВиду
	|			ТОГДА НоменклатураСправочник.ВидНоменклатуры
	|		ИНАЧЕ НоменклатураСправочник.Родитель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НоменклатураСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА НоменклатураСправочник.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """"),
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """"),
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """"),
	|	ВЫБОР
	|		КОГДА &ВыгружатьПрочиеФайлы
	|			ТОГДА НоменклатураСправочник.ФайлОписанияДляСайта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	Если ТекстыЗапросов.Свойство("Характеристики") Тогда
		
		ТекстыЗапросов.Характеристики = ПолучитьТекстЗапросаВтНоменклатура() +
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
		|	втНоменклатура.Номенклатура КАК Номенклатура
		|{ВЫБРАТЬ
		|	Характеристика.*,
		|	ХарактеристикаНаименование,
		|	Номенклатура.*}
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА втНоменклатура.Номенклатура
		|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА втНоменклатура.Номенклатура.ВладелецХарактеристик
		|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА втНоменклатура.Номенклатура.ВидНоменклатуры
		|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	НЕ втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)";
		
	КонецЕсли;
	
	ТекстыЗапросов.Свойства = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоНоменклатуры,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	СвойствоНоменклатуры.*,
	|	ЗначениеСвойства.*}
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО втНоменклатура.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
	|{ГДЕ
	|	(ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения)).* КАК СвойствоНоменклатуры}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура,
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения),
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО втНоменклатура.Номенклатура = ДополнительныеСведения.Объект
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
	|{ГДЕ
	|	(ВЫРАЗИТЬ(ДополнительныеСведения.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения)).* КАК СвойствоНоменклатуры}";
	
	ТекстыЗапросов.Файлы = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК НоменклатураФайл,
	|	ЕСТЬNULL(ПрисоединенныеФайлы.ДвоичныеДанныеФайла, НоменклатураПрисоединенныеФайлы.ФайлХранилище) КАК НоменклатураФайлДанныеФайла,
	|	НоменклатураПрисоединенныеФайлы.Том КАК НоменклатураФайлТом,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК НоменклатураФайлРасширение,
	|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу КАК НоменклатураФайлПутьКФайлу,
	|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК НоменклатураФайлТипХраненияФайла,
	|	НоменклатураПрисоединенныеФайлы.Описание КАК НоменклатураФайлОписание
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураФайл.*,
	|	НоменклатураФайлДанныеФайла,
	|	НоменклатураФайлТом.*,
	|	НоменклатураФайлРасширение,
	|	НоменклатураФайлПутьКФайлу,
	|	НоменклатураФайлТипХраненияФайла.*,
	|	НоменклатураФайлОписание}
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ПрисоединенныеФайлы
	|		ПО (ПрисоединенныеФайлы.Файл = НоменклатураПрисоединенныеФайлы.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО НоменклатураПрисоединенныеФайлы.ВладелецФайла = втНоменклатура.Номенклатура
	|			И (ВЫБОР
	|				КОГДА &ВыгружатьПрочиеФайлы
	|						И &ВыгружатьКартинки
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|							КОГДА &ВыгружатьКартинки
	|								ТОГДА НоменклатураПрисоединенныеФайлы.Расширение В (&МассивРасширенийКартинок)
	|							КОГДА &ВыгружатьПрочиеФайлы
	|								ТОГДА НЕ НоменклатураПрисоединенныеФайлы.Расширение В (&МассивРасширенийКартинок)
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|						ИЛИ втНоменклатура.Номенклатура.ФайлОписанияДляСайта = НоменклатураПрисоединенныеФайлы.Ссылка
	|			КОНЕЦ)";

КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре 
// ПолучитьТекстыЗапросовКаталог или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстыЗапросовКаталог.
//
Процедура УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "МассивРасширенийКартинок", ОбменССайтамиУТ.МассивДопустимыхРасширенийИзображений());
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ВыгружатьПрочиеФайлы", 
		?(ПрикладныеПараметры.Свойство("ВыгружатьФайлы"),ПрикладныеПараметры.ВыгружатьФайлы, Ложь));
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ВыгружатьКартинки",
		?(ПрикладныеПараметры.Свойство("ВыгружатьКартинки"),ПрикладныеПараметры.ВыгружатьКартинки, Ложь));
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КлассифицироватьПоВиду", ПрикладныеПараметры.КлассифицироватьПоВидамНоменклатуры);
	
КонецПроцедуры

// Заполняет соотвествие полями, которые должны быть добавлены в отбор настройки каталога 
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом"
// Поля в соотвествии хранятся с привязкой к набору данных, к которому они относятся 
//   Параметры:
//	* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений" 
//	* ПоляОтбора - Таблица значений, в которую добавляются поля отбора			
// 		* Наименование - строка - Имя поля
// 		* Синоним - строка - пользовательское представление
// 		* ТипЗначения - ОписаниеТипов - Тип значения поля
//		* Отбор - Массив - Содержит стуктуры  - описание отбора, необходимого при открытии формы выбора поля
//
Процедура ЗаполнитьПоляОтбораКаталога(ПоляОтбора) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		ПоляНоменклатуры = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
		
		НоваяСтрока = ПоляНоменклатуры.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru = 'Сегмент номенклатуры'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОтбора.Вставить("Номенклатура", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Свойства", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Файлы", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Характеристики", ПоляНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

// Позволяет внести изменения в компоновщик настроек СКД после загрузки в нее настроек при получении данных для выгрузки
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек, в который можно внести изменения
//  ИмяМакета  - Строка - имя макета выполняемой СКД которая выполняется
//
Процедура КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек, ИмяМакета) Экспорт
	
	Если ВРег(ИмяМакета) = ВРег("Каталог") 
		ИЛИ ВРег(ИмяМакета) = ВРег("ПакетПредложений")
		ИЛИ ВРег(ИмяМакета) = ВРег("ОбновлениеПакетаПредложений") Тогда
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек, Истина);
	КонецЕсли;
	
КонецПроцедуры

//Формирует текст запроса, который позволит получить таблицу значений,
// описанную в макете "СхемаВыгрузкиЗаказов"
// плана обмена "Обмен с сайтом"
Процедура ПолучитьТекстЗапросаЗаказы(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Ссылка КАК Заказ,
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение КАК НомерЗаказаНаСайте,
	|	СостоянияЗаказовКлиентов.Состояние КАК СостояниеЗаказа,
	|	ЗаказКлиента.СуммаДокумента - ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты, 0) КАК ЗаказКОплатеОстаток,
	|	ЗаказКлиента.СуммаДокумента - ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки, 0) КАК ЗаказКОтгрузкеОстаток,
	|	ЗаказКлиента.НалогообложениеНДС,
	|	ЗаказКлиента.Валюта
	|ПОМЕСТИТЬ ЗаказыДляВыгрузки
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство = &НомерНаСайте
	|	И ЗаказКлиентаДополнительныеРеквизиты.Значение <> """"""""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ЗаказОтгрузка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыДляВыгрузки.Заказ КАК Заказ,
	|		МАКСИМУМ(Оформлено.Регистратор) КАК Регистратор
	|	ИЗ
	|		ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов КАК Оформлено
	|			ПО ЗаказыДляВыгрузки.Заказ = Оформлено.ЗаказКлиента
	|			 И Оформлено.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыДляВыгрузки.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ЗаказОплата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыДляВыгрузки.Заказ КАК Заказ,
	|		МАКСИМУМ(РасчетыСКлиентами.Регистратор) КАК Регистратор
	|	ИЗ
	|		ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ПО ЗаказыДляВыгрузки.Заказ = РасчетыСКлиентами.ЗаказКлиента
	|				И (РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|				И (РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнойКарте)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыДляВыгрузки.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыДляВыгрузки.Заказ,
	|	ЗаказыДляВыгрузки.НомерЗаказаНаСайте КАК ЗаказНомерНаСайте,
	|	ЕСТЬNULL(ЗаказКлиентаДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаНаСайте,
	|	ЗаказыДляВыгрузки.ЗаказКОплатеОстаток,
	|	ЗаказыДляВыгрузки.ЗаказКОтгрузкеОстаток,
	|	ЗаказКлиента.Номер КАК ЗаказНомер,
	|	ЗаказКлиента.Дата КАК ЗаказДата,
	|	ЗаказКлиента.Проведен КАК ЗаказПроведен,
	|	ЗаказКлиента.ПометкаУдаления,
	|	ЕСТЬNULL(ЗаказОплата.Номер, """") КАК ЗаказНомерОплаты,
	|	ЕСТЬNULL(ЗаказОплата.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОплаты,
	|	ЕСТЬNULL(ЗаказОтгрузка.Номер, """") КАК ЗаказНомерОтгрузки,
	|	ЕСТЬNULL(ЗаказОтгрузка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОтгрузки,
	|	ЕСТЬNULL(Валюты.Код, """") КАК ЗаказВалютаКод,
	|	ЗаказКлиента.НалогообложениеНДС КАК ЗаказНалогообложениеНДС,
	|	ЗаказКлиента.ЦенаВключаетНДС КАК ЗаказСуммаВключаетНДС,
	|	ЗаказыДляВыгрузки.СостояниеЗаказа КАК ЗаказСостояниеЗаказа,
	|	ЗаказыДляВыгрузки.СостояниеЗаказа КАК ЗаказСтатусЗаказа,
	|	ЛОЖЬ КАК ЗаказЗакрыт,
	|	ЗаказКлиента.Комментарий КАК ЗаказКомментарий,
	|	ЗаказКлиента.Контрагент КАК ЗаказКонтрагент,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК ЗаказКурс,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ТоварыНоменклатура,
	|	ЕСТЬNULL(ДанныеНоменлатуры.Артикул, """") КАК ТоварыНоменклатураАртикул,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|					ИЛИ ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
	|					ИЛИ ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				ТОГДА ""Товар""
	|			ИНАЧЕ ""Услуга""
	|		КОНЕЦ, """") КАК ТоварыНоменклатураТипНоменклатуры,
	|	&ТекстЗапросаЕдиницаИзмерения КАК ТоварыЕдиницаИзмерения,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаНаименованиеПолноеЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	&ТекстЗапросаМеждународноеСокращениеЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.КоличествоУпаковок, 0) КАК ТоварыКоличество,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Цена, 0) КАК ТоварыЦена,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Сумма, 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК ТоварыСтавкаНДС,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаНДС, 0) КАК ТоварыСуммаНДС,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаСНДС, 0) КАК ТоварыВсего,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ПроцентРучнойСкидки, 0) + ЕСТЬNULL(ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки, 0) КАК ТоварыПроцентСкидки,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ТоварыХарактеристика,
	|	ЕСТЬNULL(ЗаказКлиента.СуммаДокумента, 0) КАК ЗаказСуммаДокумента,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаРучнойСкидки, 0) + ЕСТЬNULL(ЗаказКлиентаТовары.СуммаАвтоматическойСкидки, 0) КАК ТоварыСуммаСкидки,
	|	ЗаказКлиента.Контрагент,
	|	ЕСТЬNULL(Контрагенты.Наименование, """") КАК КонтрагентНаименование,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, """") КАК КонтрагентНаименованиеПолное,
	|	ЕСТЬNULL(Контрагенты.ЮрФизЛицо, ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ПустаяСсылка)) КАК КонтрагентЮрФизЛицо,
	|	ЕСТЬNULL(Контрагенты.ИНН, """") КАК КонтрагентИНН,
	|	ЕСТЬNULL(Контрагенты.КПП, """") КАК КонтрагентКПП,
	|	ЕСТЬNULL(Контрагенты.КодПоОКПО, """") КАК КонтрагентКодПоОКПО
	|{ВЫБРАТЬ
	|	Заказ.*,
	|	ЗаказНомерНаСайте.*,
	|	ЗаказДатаНаСайте.*,
	|	ЗаказКОплатеОстаток,
	|	ЗаказКОтгрузкеОстаток,
	|	ЗаказНомер,
	|	ЗаказДата,
	|	ЗаказПроведен,
	|	ПометкаУдаления,
	|	ЗаказНомерОплаты,
	|	ЗаказДатаОплаты,
	|	ЗаказНомерОтгрузки,
	|	ЗаказДатаОтгрузки,
	|	ЗаказВалютаКод,
	|	ЗаказНалогообложениеНДС.*,
	|	ЗаказСуммаВключаетНДС,
	|	ЗаказСостояниеЗаказа.*,
	|	ЗаказСтатусЗаказа.*,
	|	ЗаказЗакрыт,
	|	ЗаказКомментарий,
	|	ЗаказКонтрагент.*,
	|	ЗаказКурс,
	|	ТоварыНоменклатура.*,
	|	ТоварыНоменклатураАртикул,
	|	ТоварыНоменклатураТипНоменклатуры,
	|	ТоварыЕдиницаИзмерения.*,
	|	ТоварыЕдиницаИзмеренияКод,
	|	ТоварыЕдиницаИзмеренияНаименование,
	|	ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ТоварыКоличество,
	|	ТоварыЦена,
	|	ТоварыСумма,
	|	ТоварыСтавкаНДС.*,
	|	ТоварыСуммаНДС,
	|	ТоварыВсего,
	|	ТоварыПроцентСкидки,
	|	ТоварыХарактеристика.*,
	|	ЗаказСуммаДокумента,
	|	ТоварыСуммаСкидки,
	|	Контрагент.*,
	|	КонтрагентНаименование,
	|	КонтрагентНаименованиеПолное,
	|	КонтрагентЮрФизЛицо.*,
	|	КонтрагентИНН,
	|	КонтрагентКПП,
	|	КонтрагентКодПоОКПО}
	|ИЗ
	|	ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказОплата КАК ЗаказОплата
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказОплата.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказОтгрузка КАК ЗаказОтгрузка
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказОтгрузка.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиентаДополнительныеРеквизиты.Ссылка
	|			И (ЗаказКлиентаДополнительныеРеквизиты.Свойство = &ДатаНаСайте)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО ЗаказКлиента.Контрагент = Контрагенты.Ссылка
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЗаказыДляВыгрузки.Валюта = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&Период,
	|				Валюта В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗаказыДляВыгрузки.Валюта
	|					ИЗ
	|						ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки)) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказыДляВыгрузки.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиентаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменлатуры
	|		ПО (ЗаказКлиентаТовары.Номенклатура = ДанныеНоменлатуры.Ссылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаНаименованиеПолноеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"НаименованиеПолное", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаМеждународноеСокращениеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"МеждународноеСокращение", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаЗаказы или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаЗаказы.
//
Процедура УстановитьПараметрыТекстаЗапросаЗаказы(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	Если ПрикладныеПараметры.Свойство("ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте") Тогда
		ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НомерНаСайте", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте);
	КонецЕсли;

	Если ПрикладныеПараметры.Свойство("ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте") Тогда
		ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ДатаНаСайте", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте);
	КонецЕсли;
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораКаталог(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораПакетПредложений(УдаляемыеПоля) Экспорт
	
	УдаляемыеПоля.Добавить("ТипЦены");
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораОбновлениеПакетаПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// В данной процедуре возможно изменить параметры обмена перед началом обмена
//
// Параметры:
//  ПараметрыОбмена  - Структура - текущие параметры обмена, имеет следующие свойства:
//    * УзелОбмена - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//    * НастройкиПодключения - структура настроек для подключения к сайту, содержит следующие свойства:
//        * Пользователь - Строка - имя пользователя для подключения к сайту.
//        * АдресСайта - Строка - адрес сайта.
//        * Пароль - Строка - пароль для подключения.
//    * ВыгружатьИзменения - Булево - если Истина, то будут выгружаться только измененные объекты.
//    * ОтборГруппыКатегорииНоменклатуры  - ПеречислениеСсылка.ВидыОтборовНоменклатуры - режим отбора номенклатуры
//                                                                                       (по группам или категориям).
//    * РазмерПорции - Число - количество товаров, данные о которых будут выгружены на сайт в одной порции данных.
//    * КоличествоПовторов - Число - количество попыток выгрузки данных на сайт в случае сбоя в обмене.
//    * ВладелецКаталога - ОпределяемыйТип.Организация - организация, от имени которой будет публиковаться каталог товаров
//    * ОбменЗаказами - Булево - определяет, загружать ли с сайта заказы.
//    * ОбменТоварами - Булево - определяет, выгружать ли на сайт данные, связанные с товарами.
//    * ВыгружатьТовары - Булево - определяет, выгружать ли на сайт каталог товаров.
//    * ВыгружатьЦеныОстатки - Булево - определяет, выгружать ли на сайт данные по ценам.
//    * ВыгружатьОбновленияЦенИОстатков - Булево - определяет, выгружать ли на сайт информацию об изменении цен и остатков товаров.
//    * КаталогВыгрузки - Строка - каталог на диске, в который будут сохранены файлы обмена.
//    * ВыгружатьНаСайт - Булево - если Истина, то выгрузка будет производиться непосредственно на сайт, а не в каталог выгрузки.
//    * ВыгружатьКартинки - Булево - определяет, выполнять ли выгрузку изображений номенклатуры.
//    * РазрешенныеТипыКартинок - Массив - содержит допустимые расширения файлов картинок.
//    * НаименованиеНалога - Строка - наименование налога, применяемого к товару.
//    * ИспользоватьХарактеристики - Булево - определяет, используются ли характеристики.
//    * РежимЗапускаОбмена - Строка - строка, поясняющая был ли обмен запущен интерактивно
//                                    или через регл. задание.
//    * ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                        подсистемы в прикладное решение.
//    * ФайлЗагрузки - Строка - путь к файлу XML, из которого будут загружаться заказы.
//    * СтруктураИзменений - Структура - имеет следующие свойства:
//        * Заказы - Массив - массив ссылок на заказы, подлежащие выгрузке.
//        * Товары - Массив - массив ссылок на товары, подлежащие выгрузке.
//  УзелОбмена  - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//
Процедура ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена) Экспорт

	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")) И ПараметрыОбмена.ОбменЗаказами Тогда
		ПараметрыОбмена.ОбменЗаказами = Ложь;
	КонецЕсли;
	
	КлассифицироватьПоВидамНоменклатуры = Ложь;
	//АТ Терентьев
	//Если ПараметрыОбмена.ВидОтбораПоНоменклатуре = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
	//	КлассифицироватьПоВидамНоменклатуры = Истина;
	//КонецЕсли;
	
	ПараметрыОбмена.ПрикладныеПараметры.Вставить("КлассифицироватьПоВидамНоменклатуры", КлассифицироватьПоВидамНоменклатуры);
	
КонецПроцедуры

// Функция возвращает текст запроса для формирования временной таблицы "втНоменклатура".
// Таблица содержит ссылки на номенклатуру с учетом отборов, накладываемых компоновщиком настроек.
//
Функция ПолучитьТекстЗапросаВтНоменклатура()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ПризнакИспользования
	|ПОМЕСТИТЬ втИспользуетсяОтборПоСегменту
	|{ГДЕ 
	|	НЕ &ИспользуетсяОтборПоСегментуНоменклатуры = ИСТИНА}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НЕ ЛОЖЬ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					втИспользуетсяОтборПоСегменту.ПризнакИспользования
	|				ИЗ
	|					втИспользуетсяОтборПоСегменту)
	|{ГДЕ
	|	НоменклатураСегмента.Номенклатура.*,
	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И ЛОЖЬ В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				втИспользуетсяОтборПоСегменту.ПризнакИспользования
	|			ИЗ
	|				втИспользуетсяОтборПоСегменту)
	|{ГДЕ
	|	Номенклатура.Ссылка.* КАК Номенклатура}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	
	ТекстЗапроса = ТекстЗапроса +
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Процедура записывает в БП информацию о номера и дате заказа на сайте
// Параметры:
// ТаблицаЗаказов. Тип: Таблица значений
//		Колонки:	Заказ - Ссылка на документ Заказ покупателя
//					НомерЗаказа - строка, номер заказа на сайте
//					ДатаЗаказа - Дата, Дата заказа на сайте
// 
// ПрикладныеПараметры. Тип: структура
// Структура содержит параметры обмена которые были добавлены в форму узла при встраивании подсистемы в прикладное решение
//
Процедура ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет информацию о складах
//   Параметры:
// СписокТочекСамовывоза - СписокЗначений - точки самовывоза, указанные в узле обмена
// СписокСкладов - список значений - склады полученные в результате выполнения запроса (при выгрузке пакета предложений)
// ИнформацияОТочкахСамомывоза - таблица значений - таблица, в которой будет храниться информация о точках самовывоза и складах
//		Колонки:Склад - Ссылка, ссылка на элемент справочника (склады или точки самовывоза)
//				СкладНаименование - наименование склада
//				СкладАдрес - Адресная информация о складе - Структура СкладАдрес
//				СкладКонтактнаяИнформация - Контактная информация о складе  -структура "СкладКонтактнаяИнформация" 
//
//	СкладАдрес - Структура, в которой необходимо представить адресную информацию о складе
//		Поля: ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира
//
//	СкладКонтактнаяИнформация - структура , в которой необходимо представить контактную информацию о складе
//		Поля: ТелефонРабочий, Почта, КоординатыНаКарте, Прочее
Процедура ЗаполнитьИнформациюОСкладахИТочкахСамовывоза(СписокТочекСамовывоза,
	                                                   СписокСкладов,
	                                                   ИнформацияОТочкахСамовывоза,
	                                                   СкладАдрес,
	                                                   СкладКонтактнаяИнформация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка,
	|	Склады.Наименование,
	|	ЕСТЬNULL(СкладыКонтактнаяОтправитель.Представление, """") КАК АдресСклада,
	|	ЕСТЬNULL(СкладыКонтактнаяОтправитель.ЗначенияПолей, """") КАК ЗначенияПолей
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяОтправитель
	|		ПО Склады.Ссылка = СкладыКонтактнаяОтправитель.Ссылка
	|			И (СкладыКонтактнаяОтправитель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада))
	|ГДЕ
	|	(Склады.Ссылка В (&СписокТочекСамовывоза)
	|			ИЛИ Склады.Ссылка В (&СписокСкладов))";
	
	Запрос.УстановитьПараметр("СписокТочекСамовывоза", СписокТочекСамовывоза);
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ИнформацияОТочкахСамовывоза.Добавить();
		СтрокаТаблицы.Склад                     = Выборка.Ссылка;
		СтрокаТаблицы.СкладНаименование         = Выборка.Наименование;
		СтрокаТаблицы.СкладАдрес                = СкладАдрес;
		СтрокаТаблицы.СкладКонтактнаяИнформация = СкладКонтактнаяИнформация;
		
		СтранаРоссия = Справочники.СтраныМира.Россия;
		
		Если ЗначениеЗаполнено(Выборка.АдресСклада) Тогда
			
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Выборка.ЗначенияПолей) Тогда
				РезультатыЧтения = Новый Структура;
				XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Выборка.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
					// Распознали с ошибками, сообщим при открытии.
					XDTOКонтактная.Представление = Выборка.АдресСклада;
					XDTOКонтактная.Состав.Страна = Строка(СтранаРоссия);
				КонецЕсли;
			Иначе
				XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Выборка.ЗначенияПолей, Выборка.АдресСклада, );
			КонецЕсли;
			
			ОбменССайтамиУТ.ЗаполнитьСтруктуруПолейАдресаПоЗначениюПолей(СтрокаТаблицы.СкладАдрес, XDTOКонтактная);
			
			СтрокаТаблицы.СкладКонтактнаяИнформация.Почта = Выборка.АдресСклада;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В зависимости от значения функциональной опции "Использовать статусы заказов" устанавливается
// видимость табличной части "Соответствия заказов".
//
// Параметры:
//  Видимость - Булево - признак видимости табличной части.
//
Процедура УстановитьВидимостьТабличнойЧастиСоответствиеЗаказовФормыУзлаПланаОбмена(Видимость) Экспорт
	
	Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
КонецПроцедуры

// В зависимости от типа регистрируемых данных определяет данные, которые необходимо зарегистрировать в плане обмена
//
// Параметры:
//	Объект. Тип: СправочникОбъект, ДокументОбъект
//			Регистрируемый объект данных, например, НоменклатураОбъект, ЗаказОбъект
// 
//	МассивУзловТовары. Тип: массив значений
//			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случе если он является Номенклатурой
//
//	МассивУзловЗаказы. Тип: массив значений
//			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случе если он является Заказом
Процедура ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение = Ложь) Экспорт
	
	Если МассивУзловТовары.Количество() = 0 И МассивУзловЗаказы.Количество() =0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.СвободныеОстатки")
		Или ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		Или ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДоступныеОстаткиПланируемыхПоступлений") Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
		КонецЦикла;
	
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
	// ( Storverk Тюняков Регистрация изменений по номенклатуре при изменении Аналогов
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);	
	// ) Storverk Тюняков	
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);

		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказКлиента") Тогда 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
			
			СтруктураРеквизитовЗаказаНаСайте = РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена);
			Если СтруктураРеквизитовЗаказаНаСайте <> Неопределено Тогда
				
				Если Объект.ПометкаУдаления Тогда
					 ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект.Ссылка);
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.СостоянияЗаказовКлиентов") Тогда
		
		Если Объект.Отбор.Найти("Заказ") = Неопределено 
			Или Не ЗначениеЗаполнено(Объект.Отбор.Заказ.Значение)
			Или ТипЗнч(Объект.Отбор.Заказ.Значение) <> Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Возврат;
		КонецЕсли;
		
		Если Замещение Тогда
			
			Если Объект.Отбор.Количество() <> 1 Тогда
				Возврат;
			КонецЕсли;
			
			ДокументЗаказ = Объект.Отбор[0].Значение;
			
			МассивУзловКРегистрации = Новый Массив;
			Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
				
				СтруктураРеквизитовЗаказаНаСайте = РеквизитыЗаказаНаСайте(ДокументЗаказ, УзелОбмена);
				Если СтруктураРеквизитовЗаказаНаСайте <> Неопределено Тогда
					Если СтруктураРеквизитовЗаказаНаСайте.Свойство("НомерЗаказаНаСайте")
						И ЗначениеЗаполнено(СтруктураРеквизитовЗаказаНаСайте.НомерЗаказаНаСайте) Тогда
						
						МассивУзловКРегистрации.Добавить(УзелОбмена);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Объект.Количество() <> 1 Тогда
				
				ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзловКРегистрации, ДокументЗаказ);
				Возврат;
				
			КонецЕсли;
			
			ЭлементОтбора = Объект.Отбор[0];
			Если ЭлементОтбора.Использование = Ложь Тогда
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументЗаказ) Тогда
				Возврат;
			КонецЕсли;
			
			Если МассивУзловКРегистрации.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			НовоеСостояниеЗаказа = Объект[0].Состояние;
			Если НовоеСостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
				
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	СостоянияЗаказовКлиентов.Состояние
				|ИЗ
				|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
				|ГДЕ
				|	СостоянияЗаказовКлиентов.Заказ = &Заказ";
				
				Запрос.УстановитьПараметр("Заказ", ДокументЗаказ);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Если Выборка.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловКРегистрации, ДокументЗаказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет статус контрагента по значению перечисления
// Параметры
//			ДанныеКонтрагентаЮрФизЛицо. Тип ПеречислениеСсылка
// Перечисление, которое определяет юридический статус контрагента
// В зависимости от статуса контрагента при выгрузке на сайт
// будут по разному заполняется данные о контрагенте
// Если это юр. лицо заполняться будут ИНН, КПП, если это физ лицо то наименование
Процедура ОпределитьЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо, ЭтоЮрЛицо) Экспорт
	
	ЭтоЮрЛицо = ПартнерыИКонтрагенты.ЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо);
	
КонецПроцедуры

// К ИД номенклатуры добавляет ИД характеристики, если она задана
// Параметры:
//	Номенклатура. Тип - Ссылка, например, СправочникСсылка.Номенклатура
//	Характерстика. Тип - Ссылка, например, СправочникСсылка.ХарактеристикиНоменклатуры
Процедура ДополнитьИдНоменклатурыХарактеристикой(Номенклатура, Характеристика, Ид) Экспорт
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
		И (НЕ Номенклатура.ЭтоГруппа)
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

// Получает заказы, загруженные с сайта.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ТаблицаНомераИДатыЗаказов - ТаблицаЗначений - таблица содержащая номера и даты заказов, загруженных с сайта;
//    * НомерЗаказа - строка - номер заказа;
//    * ДатаЗаказа - строка - дата заказа.
//  Результат - ТаблицаЗначений - информация о заказах;
//    * ЗаказПокупателя - ссылка на документ Заказ.
//    * НомерЗаказаНаСайте - номер заказа.
//    * НеОбновлятьЗаказ - признак того, что Заказ не должен перезаписываться. 
// 
Процедура ПолучитьРанееЗагруженныеДокументы(ПрикладныеПараметры, ТаблицаНомераИДатыЗаказов, Результат) Экспорт
	
	НомерНаСайте = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте;
	МассивНомеров = ТаблицаНомераИДатыЗаказов.ВыгрузитьКолонку("НомерЗаказа");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	Запрос.УстановитьПараметр("НомерНаСайте", НомерНаСайте);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Значение КАК НомерЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодСтроки = -1
	|				ИЛИ ВложенныйЗапрос.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОбновлятьЗаказ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиентаДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|		ЗаказКлиентаДополнительныеРеквизиты.Значение КАК Значение,
	|		ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ВЫБОР
	|				КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			КОНЕЦ) КАК Состояние,
	|		МАКСИМУМ(ЕСТЬNULL(ЗаказКлиентаТовары.КодСтроки, -1)) КАК КодСтроки
	|	ИЗ
	|		Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|			ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|			ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиентаТовары.Ссылка
	|				И (НЕ ЗаказКлиентаТовары.Отменено)
	|	ГДЕ
	|		ЗаказКлиентаДополнительныеРеквизиты.Свойство = &НомерНаСайте
	|		И ЗаказКлиентаДополнительныеРеквизиты.Значение В(&МассивНомеров)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказКлиентаДополнительныеРеквизиты.Ссылка,
	|		ЗаказКлиентаДополнительныеРеквизиты.Значение,
	|		ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ВЫБОР
	|				КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			КОНЕЦ)) КАК ВложенныйЗапрос";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Создает новый документ "Заказ покупателя"
// Параметры
// ДокументОбъект - ДокументОбъект. Выходной параметр, запоняется созданным Объектом документа Заказ
Процедура СоздатьНовыйДокументЗаказ(ДокументОбъект) Экспорт
	
	ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	
КонецПроцедуры

// Заполнят документ заказ данными с сайта
// 
//	Параметры:
//	
//	ДокументОбъект. Тип - ДокументОбъект, объект документа Заказ покупателя
//	
//	СтруктураРеквизитов. Тип - Структура, структура, содержащая в себе значения реквизитов заказа, закгруженных с сайта
//		Состав полей:
//					Ид					- Идентификатор заказа, очень часто тоже что и номер
//					Дата				- дата создания заказа на сайте
//					Номер				- номер заказа на сайте
//					ДатаОтгрузки		- дата отгрузки товара по заказу
//					ВалютаДокументаКод	- 3-х значный идентификатор валюты
//					ВидЦенНаименование	- наименование вида цены
//					СуммаВключаетНДС	- признак включения НДС
//					НаименованиеСкидки	- наименование скидки
//					ПроцентСкидки		- процент скидки
//					СуммаСкидки			- Сумма скидки по заказу
//					СкладНаименование 	- наименование склада, точки самовывоза
//					ПодразделениеНаименование - наименование подразделения
//					Контрагент			- Ссылка на контрагента, который уже был идентифицирован в базе
//					ТочкаСамовывоза		- Ссылка на элемент справочника, который в прикладном решении является справочником точек самовывоза или Неопределено
//					Товары				- табличная часть документа
//					Комментарий			- текстовый комментарий
//	
//	СвойстваЗаказа. Тип - соответсвие, содержит строкое представления свойств и значений заказа
//	ПрикладныеПараметры. Тип - Структура, содержит параметры прикладного решения, добавленные на форму узла плана обмена
//	ОписаниеОшибки. Тип - Строка, текстовое представление ошибки
//	Успешно. Тип - Булево - Признак успешного заполнения документа
Процедура ЗаполнитьЗаказ(ДокументОбъект, РеквизитыЗаказа, СвойстваЗаказа,
                         ПрикладныеПараметры, ОписаниеОшибки, Успешно) Экспорт
	
	Валюта = Неопределено;
	ОбменССайтамиУТ.ОбработатьВалютуXML(Валюта, РеквизитыЗаказа.ВалютаДокументаКод);
	
	ДокументОбъект.Дата          = РеквизитыЗаказа.Дата;
	ДокументОбъект.Валюта        = Валюта;
	// ( изм офинт.ру
	// ) изм офинт.ру
	ДокументОбъект.Организация   = ПрикладныеПараметры.Организация;
	// ( изм офинт.ру
	//ДокументОбъект.Менеджер      = ПрикладныеПараметры.Менеджер;
	// ) изм офинт.ру
	ДокументОбъект.Партнер       = РеквизитыЗаказа.Партнер;
	ДокументОбъект.Склад           = ?(ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза),
	                                   РеквизитыЗаказа.ТочкаСамовывоза, 
	                                   ПрикладныеПараметры.Склад);
	
	//ДокументОбъект.Соглашение    = ПрикладныеПараметры.Соглашение;
	МетодОплаты = СвойстваЗаказа.Получить("Метод оплаты ИД");
	Соглашение = Неопределено;
	Контрагент = Неопределено;
	
	Если МетодОплаты = "1" Или МетодОплаты = "9" Тогда
		
		Соглашение = АТ_Сервер.ПолучитьСформироватьСоглашение(
			РеквизитыЗаказа.Партнер, 
			Новый Структура("ФормаОплаты, Организация", 
				?(МетодОплаты = "1", Перечисления.ФормыОплаты.Наличная, Перечисления.ФормыОплаты.Безналичная),
				АТ_ОбщегоНазначения.ПолучитьЭлементНастройки("ОбщиеНастройки", "ОсновнаяОрганизация")));
				
		Если МетодОплаты = "1" Тогда
			Контрагент = АТ_Сервер.ПолучитьСформироватьРозничногоКонтрагента(РеквизитыЗаказа.Партнер);
			ДокументОбъект.ДополнительнаяИнформацияПоДоставке = ДокументОбъект.ДополнительнаяИнформацияПоДоставке + "|<<Наличный расчёт -> 309-91-91 (доб. 104), Людмила Шевчук>>";
		КонецЕсли;
	КонецЕсли;
	
	//Определение контрагента.
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДокументОбъект.Контрагент = Контрагент;
	Иначе
		СтрокаКонтрагент = СвойстваЗаказа.Получить("Выбранный контрагент");
		ВыбранныйКонрагент = Справочники.Контрагенты.ПустаяСсылка();
		Если ЗначениеЗаполнено(СтрокаКонтрагент) И АТ_ОбщегоНазначения.ЭтоГуид(СтрокаКонтрагент) Тогда
			ВыбранныйКонрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаКонтрагент));
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбранныйКонрагент) Тогда
			ДокументОбъект.Контрагент = ВыбранныйКонрагент;
		Иначе
			ДокументОбъект.Контрагент = РеквизитыЗаказа.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	//Подставляем соглашение в соответсвии с оплатой (нал/безнал)
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ДокументОбъект.Соглашение = Соглашение;
	Иначе
		Если ЗначениеЗаполнено(РеквизитыЗаказа.Соглашение) Тогда
			ДокументОбъект.Соглашение = РеквизитыЗаказа.Соглашение;
		Иначе
			ДокументОбъект.Соглашение = ПрикладныеПараметры.Соглашение;
		КонецЕсли;
	КонецЕсли;
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ПрикладныеПараметры.Соглашение);
	// ( Storverk
	//ДокументОбъект.ЦенаВключаетНДС = РеквизитыЗаказа.СуммаВключаетНДС;
	ДокументОбъект.ЦенаВключаетНДС = УсловияПродаж.ЦенаВключаетНДС;
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
		ДокументОбъект.Склад = ПрикладныеПараметры.Склад;	
	КонецЕсли;	
	ДокументОбъект.Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Партнер, "ОсновнойМенеджер");
	// ) Storverk
		
	//изм офинт.ру +++
	ДокументОбъект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	ЗаполнитьЗначенияСвойств(ДокументОбъект,
	                         УсловияПродаж,
	                        "ХозяйственнаяОперация, ГруппаФинансовогоУчета, НалогообложениеНДС,
	                        |ТребуетсяЗалогЗаТару, ФормаОплаты, ГрафикОплаты");
	Если ЗначениеЗаполнено(ДокументОбъект.ГрафикОплаты) Тогда
		ДокументОбъект.ФормаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ГрафикОплаты, "ФормаОплаты");
	КонецЕсли;
	
	ДокументОбъект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	ДокументОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ДокументОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокументОбъект,
		                                                                  УсловияПродаж.ХозяйственнаяОперация,
		                                                                  Валюта);
		
	КонецЕсли;
	
	Комментарий = "";
	Если Не ПустаяСтрока(РеквизитыЗаказа.Комментарий) Тогда
		Комментарий = Комментарий + НСтр("ru = 'Комментарий менеджера на сайте'") + ": " +РеквизитыЗаказа.Комментарий;
	КонецЕсли;
	
	КомментарийПокупателя = СвойстваЗаказа.Получить("Комментарии покупателя");
	Если КомментарийПокупателя <> Неопределено И Не ПустаяСтрока(КомментарийПокупателя) Тогда
		Комментарий = Комментарий + ?(ПустаяСтрока(Комментарий),"",Символы.ПС) + НСтр("ru = 'Комментарий покупателя на сайте'") + ": " + КомментарийПокупателя;
	КонецЕсли;
	
	ДокументОбъект.Комментарий   = Комментарий;
	
	ТаблицаНоменклатура = Неопределено;
	
	// ( Storverk
	//ОбменССайтамиУТ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);	
	// ) Storverk
	ДокументОбъект.СуммаДокумента = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок();
	// ( Storverk
	//	Вернул к типовому
	// ( изм офинт.ру
	ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
	//ДокументОбъект.ЭтапыГрафикаОплаты.Очистить();
	//
	//СуммаЗаказано       = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок(Ложь);
	//СуммаЗалогаЗаТару   = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок(Истина);
	//
	//ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
	//		ДокументОбъект,
	//		Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки,
	//		ДокументОбъект.ЖелаемаяДатаОтгрузки,
	//		СуммаЗаказано,
	//		СуммаЗалогаЗаТару);
	// ) изм офинт.ру
	// ) Storverk
	ОбменССайтамиУТ.ЗаполнитьНомерИДатуЗаказаДополнительныеРеквизиты(ДокументОбъект, РеквизитыЗаказа, ПрикладныеПараметры);
	
	СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
	
	// ( изм офинт.ру
	//Если Не СтатусЗаказа = Неопределено Тогда
	//	
	//	ТаблицаСтатусов = ПрикладныеПараметры.СоответствиеСтатусовЗаказов;
	//	ЗначениеСтатуса = ТаблицаСтатусов.Найти(СтатусЗаказа, "СтатусЗаказаНаСайте");
	//	
	//	Если Не ЗначениеСтатуса = Неопределено Тогда
	//		ДокументОбъект.Статус = ЗначениеСтатуса.СтатусЗаказаВБазе;
	//	Иначе
	//		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	//	
	//КонецЕсли;	
	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	
	СпособДоставкиНаСайте =  СвойстваЗаказа.Получить("Способ доставки");
	
	Если СпособДоставкиНаСайте = "Транспортная компания" Тогда
		ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
		
		АдресУИД = СвойстваЗаказа.Получить("Адрес доставки");
		Если ЗначениеЗаполнено(АдресУИД) И СтрДлина(АдресУИД) = 36 Тогда
			СтруктФактАдрес = ПолучитьАдресКонтрагентаПоУИД(АдресУИД);
		Иначе
			СтруктФактАдрес = ПолучитьПервыйФактическийАдресКонтрагента(ДокументОбъект.Контрагент);
		КонецЕсли;
		
		
		
		ВремяДоставки = СвойстваЗаказа.Получить("Время доставки");
		Если ЗначениеЗаполнено(ВремяДоставки) И СтрДлина(ВремяДоставки) = 14 Тогда
			ТипДата = Новый ОписаниеТипов("Дата");
			ВремяДоставки = ТипДата.ПривестиЗначение(ВремяДоставки);
			ДокументОбъект.ВремяДоставкиС = ВремяДоставки;
			ДокументОбъект.ВремяДоставкиПо = ВремяДоставки;
		КонецЕсли;
	Иначе
		ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		СтруктФактАдрес = ПолучитьПервыйФактическийАдресКонтрагента(ДокументОбъект.Контрагент);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктФактАдрес);
	
	
	
	//СтруктФактАдрес = ПолучитьПервыйФактическийАдресКонтрагента(ДокументОбъект.Контрагент);
	//ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктФактАдрес);
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ПорядокОплаты) Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
			ДокументОбъект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "ПорядокОплаты");
		Иначе
			ДокументОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;	
		КонецЕсли;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		ДокументОбъект.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "ГруппаФинансовогоУчета");
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ДокументОбъект.Договор, ДокументОбъект.БанковскийСчет, ДокументОбъект.БанковскийСчетКонтрагента);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
		ДокументОбъект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ДокументОбъект.Контрагент);
	КонецЕсли;
	
	ОтветственныеЛица = ПолучитьОтветственныеЛицаОрганизацийПоПользователю(ДокументОбъект.Менеджер);
	ДокументОбъект.Руководитель = ОтветственныеЛица.Получить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	ДокументОбъект.ГлавныйБухгалтер = ОтветственныеЛица.Получить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ЖелаемаяДатаОтгрузки) Тогда
		ДокументОбъект.ЖелаемаяДатаОтгрузки = ДокументОбъект.Дата;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаОтгрузки) Тогда
		ДокументОбъект.ДатаОтгрузки = ДокументОбъект.Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Менеджер) тогда
		МенеджерПользователь = ДокументОбъект.Менеджер;			
	Иначе	
		МенеджерПользователь = Пользователи.ТекущийПользователь();			
	КонецЕсли;	
	Если ЗначениеЗаполнено(МенеджерПользователь) Тогда
		ДокументОбъект.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерПользователь, "Подразделение");		
	КонецЕсли; 			
	////ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Форма.Объект.Товары, 				"ДатаОтгрузки",	 Форма.Объект.ДатаОтгрузки);
	//ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Форма.Объект.ЭтапыГрафикаОплаты, 	"ДатаПлатежа",	 Форма.Объект.ДатаОтгрузки);
	// ) изм офинт.ру
	
	Успешно = Истина;
	
КонецПроцедуры
// ) Storverk

// Поиск контрагента по настройкам плана обмена.
//
// Параметры:
//	СтруктураСвойстваЗаказа - Структура - содержит реквизиты заказа, загруженные с сайта. В данной структуре необходимо
//                                        заполнить поле "Контрагент".
//  ДанныеКонтрагента - Структура - содержит реквизита контрагента, загруженная с заказа, по данным реквизитам будет
//                                  происходить поиск существующего контрагента или создание нового:
//    * ЮрЛицо - Тип Булево. Признак наличия статуса Юр. лицо у контрагента.
//    * ОфициальноеНаименование - Тип строка.Официальное Наименование контрагента Юр. лица.
//    * ПолноеНаименование - Тип строка. Полное наименование контрагента Юр. лица.
//    * Наименование - Тип строка. Наименование контрагента.
//    * ФИО - ФИО контрагента, если он Физ. лицо.
//    * ОКПО - код ОКПО
//    * ИНН - код ИНН
//    * КПП - код КПП
//    * РасчетныеСчета - Массив - элементами массива является структура, в которой описаны свойства
//                                расчетного счета (необязательное поле):
//        ** НомерСчета - Строка - Номер банковского счета контрагента
//        ** ДанныеБанка - Структура - Данные банка расчетного счета:
//             *** Наименование - Строка
//             *** БИК - Строка
//             *** SWIFT - Строка
//             *** КоррСчет - Строка
//             *** Адрес - Строка
//             *** Город - Строка
//    * ИнформацияПоКонтрагенту - ТаблицаЗначений - содержит строковое представление и значение
//                                                  контактной информации о контрагенте:
//        ** Вид - Вид контактной информации.
//        ** Значение - значение контактной информации.
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//
//	Пример: 
//   Заполнение таблицы ИнформацияПоКонтрагенту:
//			Вид						Значение
//			"Наименование"			Администратор
//			"Полное наименование"	Администратор
//			"Юр./Физ. лицо"			Физ. лицо
//			"Юридический адрес"		Ул. Ленина
//			"Почта"					email@example.com
//			"Контактные лица"		Администратор
//
Процедура ИдентифицироватьКонтрагента(СтруктураСвойстваЗаказа, ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки) Экспорт

	СтруктураСвойстваЗаказа.Вставить("Партнер", Неопределено);
	
	Наименование  = ДанныеКонтрагента.Наименование;
	ЮрЛицо        = ДанныеКонтрагента.ЮрЛицо;
	ИНН           = ДанныеКонтрагента.ИНН;
	КПП           = ДанныеКонтрагента.КПП;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент, 
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	
	Если ПустаяСтрока(Наименование) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Наименование контрагента должно быть заполнено!'"));
		
		Возврат ;
		
	КонецЕсли;
	
	ТекстСообщенияНайденоНесколькоКонтрагентов = "";
	
	Если ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления.СпособыИдентификацииКонтрагентов.Наименование ИЛИ ПустаяСтрока(ИНН) Тогда
		
		ТекстСообщенияНайденоНесколькоКонтрагентов = " " + НСтр("ru = 'по наименованию:'")+ " " + Наименование;
		
		Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.Наименование = &Наименование ";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	ИначеЕсли ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП Тогда
			
		Если Не ТипЗнч(ИНН) = Тип("Строка") Тогда
			
			ИНН = "";
			ШаблонСообщения = НСтр("ru = 'У контрагента %1 не корректно указан ИНН'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Наименование);
			ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
			
		КонецЕсли;
		
		Если ЮрЛицо Тогда
			
			Если Не ТипЗнч(КПП) = Тип("Строка") Тогда
				КПП = "";
				ШаблонСообщения = НСтр("ru = 'У контрагента %1 не корректно указан КПП'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Наименование);
				ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				
			КонецЕсли;
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                            " " + НСтр("ru = 'по ИНН: %1, КПП: %2'"),
			                            ИНН, КПП);
			
			Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП ";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			
		Иначе // у физического лица КПП не бывает
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по ИНН: %1'"), КПП);
			
			Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.ИНН = &ИНН";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		КонтрагентСсылка = ОбменССайтамиУТ.СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КонтрагентСсылка = Выборка.Контрагент;
		СтруктураСвойстваЗаказа.Партнер = Выборка.Партнер;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Не удалось найти или создать контрагента!'"));
		
		Возврат ;
		
	КонецЕсли;
	
	СтруктураСвойстваЗаказа.Контрагент = КонтрагентСсылка;
	
КонецПроцедуры

// Ищет номенклатуру по ИД, если не находит - ищет по артикулу и наименованию, если не находит - создает новую.
//
// Параметры:
//   Номенклатура - Ссылка - Ссылка на найденную или новую номенклатуру.
//   ДанныеНоменклатуры - Структура - Структура, содержащая информацию о номенклатуре, загруженной с сайта,
//     по данным которой необходимо провести поиск существующей номенклатуры или создать новую.
//     * Ид - Строка - внутренний идентификатор номенклатуры.
//     * АртикулНоменклатуры - Строка - Артикул номенклатуры.
//     * НаименованиеНоменклатуры - Строка - Наименование номенклатуры.
//     * ЕдиницаИзмерения - Справочник.ЕдиницыИзмерения - ссылка на единицу измерения товара.
//     * ЭтоУслуга - Булево - признак услуги.
//     * СтавкаНДС - Перечисление.СтавкиНДС - ставка НДС номенклатуры.
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//   ОписаниеОшибки - Строка - текстовое представление ошибки.
//
Процедура НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	УникальныйИдентификаторКорректен = Истина;
	
	Если ОбменССайтамиУТ.УспешноНайденТоварПоСсылке(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, УникальныйИдентификаторКорректен) Тогда
		Возврат;
	КонецЕсли;
	
	// Попробуем найти номенклатуру по артикулу.
	Номенклатура = ОбменССайтамиУТ.НоменклатураПоАртикулу(ДанныеНоменклатуры.АртикулНоменклатуры);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Попробуем найти номенклатуру по наименованию и виду номенклатуры.
	ВидНоменклатуры = ?(ДанныеНоменклатуры.ЭтоУслуга, ПрикладныеПараметры.ВидНоменклатурыУслуга, ПрикладныеПараметры.ВидНоменклатурыТовар);
	
	Номенклатура = ОбменССайтамиУТ.НоменклатураПоНаименованиюИВиду(ДанныеНоменклатуры.НаименованиеНоменклатуры, ВидНоменклатуры);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницаПоКлассификатору = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдиницаИзмерения.КодБазовойЕдиницы) Тогда
		
		ЕдиницаПоКлассификатору = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ДанныеНоменклатуры.ЕдиницаИзмерения.КодБазовойЕдиницы);
		
	КонецЕсли;
	
	Если ЕдиницаПоКлассификатору = Неопределено 
		И ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеБазовойЕдиницы) Тогда
		
		ЕдиницаПоКлассификатору = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеБазовойЕдиницы, Истина);
		
	КонецЕсли;
	
	Если ЕдиницаПоКлассификатору = Неопределено Тогда
		ЕдиницаПоКлассификатору = ПрикладныеПараметры.ЕдиницаИзмеренияНовойНоменклатуры;
	КонецЕсли;
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.ВидНоменклатуры    = ВидНоменклатуры;

	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(НоменклатураОбъект);
	
	НоменклатураОбъект.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(ЕдиницаПоКлассификатору), ЕдиницаПоКлассификатору, НоменклатураОбъект.ЕдиницаИзмерения);
	НоменклатураОбъект.Родитель           = ПрикладныеПараметры.ГруппаДляНовойНоменклатуры;
	НоменклатураОбъект.Наименование       = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	НоменклатураОбъект.НаименованиеПолное = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	
	СтавкаНДС = ОбменССайтамиУТ.СтавкаНДСПоЗначениюПриЗагрузке(ДанныеНоменклатуры.СтавкаНДС);
	НоменклатураОбъект.СтавкаНДС          = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, НоменклатураОбъект.СтавкаНДС);
	
	Если УникальныйИдентификаторКорректен Тогда
		НоменклатураОбъект.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеНоменклатуры.Ид)));
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	Номенклатура = НоменклатураОбъект.Ссылка;
	
КонецПроцедуры

// Поиск единицы измерения товара по коду.
//
// Параметры:
//  КодУпаковки - Строка - код упаковки товара.
//  Упаковка - СправочникСсылка - ссылка на упаковку.
//
Процедура НайтиСоздатьУпаковку(КодУпаковки, Упаковка) Экспорт
	
	Упаковка = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(КодУпаковки);
	
КонецПроцедуры

// Создает новый элемент справочника являющегося в прикладном решении точками самовывоза, например, Склады, Магазины.
//
// Параметры:
//  ДанныеТочки - Структура - параметры точки:
//    * Ид - Строка - идентификатор точки самовывоза.
//    * Адрес - Структура - структура с полями "ТипАдреса" и "ЗначениеАдреса".
//    * Контакты - Структура - структура с полями "ТипКонтакта" и "ЗначениеКонтакта".
//    * Наименование - Строка - наименование точки самовывоза.
//  ТочкаСамовывоза - СправочникСсылка - ссылка на элемент справочника,который в прикладном решении является точкой самовывоза.
//
Процедура СоздатьТочкуСамовывоза(ДанныеТочки, ТочкаСамовывоза) Экспорт
	
	
КонецПроцедуры

// Вычисляет значение ставки НДС по переданному элементу справочника или перечисления
// Параметры:
// СтавкаНДС. Тип - ПеречислениеСсылка, СправочникССылка, Ставка НДС, выраженная элементом объекта метаданных прикладного решения
// ЗначениеСтавкиНДС. Тип - Число. Значение ставки НДС выраженное числом
Процедура ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС, ЗначениеСтавкиНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		ЗначениеСтавкиНДС = 0;
	КонецЕсли;
	
КонецПроцедуры

// Записывает в регистр сведений дополнительные сведения о заказе
//
// Параметры:
//   ОбновленыСвойстваЗаказа - Булево - признак успешного выполнения процедуры.
//   ЗаказПокупателя - ДокументСсылка - ссылка на документ ЗаказПокупателя.
//   СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//   ОписаниеОшибки - Строка - текстовое представление ошибки.
//
Процедура ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
													  ЗаказПокупателя,
														СвойстваЗаказа,
														ОписаниеОшибки) Экспорт
	
КонецПроцедуры

// В зависимости от настроек прикладного решения устанавливает флаг использования характеристик
//
// Пример:ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики")
Процедура УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// Меняет статус заказа на "Отменен".
// Параметры:
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//   ДокументСсылка - Ссылка - ссылка на документ Заказ, у которого нужно поменять статус.
Процедура ОтменитьЗаказ(ПрикладныеПараметры, ДокументСсылка) Экспорт
	
	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ОбъектЗаказ = ДокументСсылка.ПолучитьОбъект();
	ЕстьИзменения = Ложь;
	Для Каждого СтрокаТовары Из ОбъектЗаказ.Товары Цикл
		Если НЕ СтрокаТовары.Отменено Тогда
			СтрокаТовары.Отменено = Истина;
			Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
				СтрокаТовары.ПричинаОтмены = ПрикладныеПараметры.ПричинаОтменыЗаказа;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ОбъектЗаказ.ЗаполнитьЭтапыГрафикаОплаты();
		ОбъектЗаказ.Записать(?(ОбъектЗаказ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет была ли оплата по заказу
//Параметры: 
//		ЗаказОплачен. Тип - Булево. Признак того, что заказ был оплачен
//					 Данные признак влияет на статус оплаты закаща на сайте
//		СтатусЗаказа. Тип - ПеречислениеСсылка. Статус заказа в прикладном решении
//		ДанныеДокументаКОплатеОстаток. Тип - Число. Не оплаченный остаток денег по заказу
Процедура ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, СтатусЗаказа, 
	                                    ДанныеДокументаКОплатеОстаток) Экспорт
	
	ЗаказОплачен = НЕ (ДанныеДокументаКОплатеОстаток > 0);
	
КонецПроцедуры

// Проверяет текущее состояние заказа
//	Параметры:
// ЗаказВРаботе. Тип - Булево. Признак того, что заказ был "обработан" в прикладном решении (т.е. поменял свой статус после щагрузки с сайта)
//								Данные признак влияет на статус заказа на сайте
// ДанныеДокументаСостояниеЗаказа. Тип - ПеречислениеССылка, СправочникССылка. Статус заказа, который он может принимать в прикладном решении
Процедура ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокументаСостояниеЗаказа) Экспорт
	
	ЗаказВРаботе = ДанныеДокументаСостояниеЗаказа <> Перечисления.СостоянияЗаказовКлиентов.Закрыт;
	
КонецПроцедуры

// Определяет была ли отгрузка товара по заказу
// Параметры:
//	ЗаказОтгружен. Тип - Булево. Признак того, что товар по заказу был отгружен. Влияет на статус отгрузки заказа на сайте
//	ДанныеДокументаСтатусЗаказа. Тип - ПеречислениеСсылка, СпрвочникСсылка. Статус, который может иметь заказ в прикладном решени
//	ДанныеДокументаКОтгрузкеОстаток. Тип - Число. Неотгруженный остаток по заказу (заказно было 7, а отгрузили 5)
Процедура ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокументаСтатусЗаказа,
	                                      ДанныеДокументаКОтгрузкеОстаток) Экспорт
	
	ЗаказОтгружен =  НЕ (ДанныеДокументаКОтгрузкеОстаток > 0);
	
КонецПроцедуры

// Определяем нужно ли считать НДС
// Паратетры:
// СчитатьНДС.Тип- Булево. Признак о небходимости считать НДС по заказу
// ВыборкаДокументовНалогообложениеНДС. Тип - ПеречислениеСсылка, СправочникСсылка. 
Процедура ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ВыборкаДокументовНалогообложениеНДС) Экспорт
	
	СчитатьНДС = (ВыборкаДокументовНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеДокументов - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                          и реальных имен документов, используемых в прикладном решении. 
//                                          Обязательно должно содержать ключ "ЗаказПокупателя".
//
Процедура ПолучитьСоответствиеДокументов(СоответствиеДокументов) Экспорт
	
	СоответствиеДокументов.Вставить("ЗаказПокупателя","ЗаказКлиента");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                          и реальных имен справочников, используемых в прикладном решении. 
//                                          Обязательно должно содержать ключи "Номенклатура", "ТочкиСамовывоза",
//                                          "ХарактеристикиНоменклатуры", "Организации", 
//                                          "НоменклатураПрисоединенныеФайлы", "ВидыЦен", "Склады", "ВидыНоменклатуры".
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ВидыНоменклатуры", "ВидыНоменклатуры");
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры", "ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("НаборыДополнительныхРеквизитовИСведений", "НаборыДополнительныхРеквизитовИСведений");
	СоответствиеСправочников.Вставить("ВидыЦен", "ВидыЦен");
	СоответствиеСправочников.Вставить("НоменклатураПрисоединенныеФайлы", "НоменклатураПрисоединенныеФайлы");
	СоответствиеСправочников.Вставить("Склады", "Склады");
	СоответствиеСправочников.Вставить("ТочкиСамовывоза", "Склады");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("Организации", "Организации");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения, в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеПВХ - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                   и реальных имен планов видов характеристик, используемых в прикладном решении.
//                                   Обязательно должно содержать ключ "ДополнительныеРеквизитыИСведения".
//
Процедура ПолучитьСоответствиеПВХ(СоответствиеПВХ) Экспорт
	
	СоответствиеПВХ.Вставить("ДополнительныеРеквизитыИСведения", "ДополнительныеРеквизитыИСведения");
	
КонецПроцедуры

// Заполняет соответствие форм библиотеки и прикладного решения.
// Параметры:
//   СоответствиеФорм - Соответствие - используется для переопределения форм, вызываемых библиотекой.
//                                     Обязательно должно содержать ключ "ФормаВыбораТочекСамовывоза".
Процедура ПолучитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	СоответствиеФорм.Вставить("ФормаВыбораТочекСамовывоза","Справочник.Склады.ФормаВыбора");
	
КонецПроцедуры

// Функция формирует прокси по настройкам прокси (передаваемому параметру).
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие - настройка прокси-сервера:
//    * ИспользоватьПрокси - Булево - использовать ли прокси-сервер.
//    * НеИспользоватьПроксиДляЛокальныхАдресов - Булево - использовать ли прокси-сервер для локальных адресов.
//    * ИспользоватьСистемныеНастройки - Булево - использовать ли системные настройки прокси-сервера.
//    * Сервер       - Строка - адрес прокси-сервера.
//    * Порт         - Число - порт прокси-сервера.
//    * Пользователь - Строка - имя пользователя для авторизации на прокси-сервере.
//    * Пароль       - Строка - пароль пользователя.
//
// Возвращаемое значение:
//  Соответствие - настройки прокси, см. описание параметра "НастройкаПроксиСервера".
//
Функция ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
#Если Клиент Тогда
	НастройкаПроксиСервера = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
#Иначе
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
#КонецЕсли
	
КонецФункции

// Заполняет номер и дату заказа на сайте.
//
// Параметры:
//	ДокСсылка - Ссылка - ссылка на документ Заказ.
//	УзелОбмена - Структура - параметры прикладного решения, размещенные в форме узла плана обмена.
//
// Возвращаемое значение:
//   Структура - структура, содержащая реквизиты заказа:
//     * НомерЗаказаНаСайте - Строка - номер заказа на сайте.
//     * ДатаЗаказаНаСайте - Дата - дата заказа на сайте.
//
Функция РеквизитыЗаказаНаСайте(ДокСсылка, УзелОбмена) Экспорт
	
	ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте = 
	           ОбменССайтамиУТ.РеквизитПрикладногоРешения(УзелОбмена, "ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте");
	ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте = 
	           ОбменССайтамиУТ.РеквизитПрикладногоРешения(УзелОбмена, "ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение,
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Ссылка = &ЗаказКлиента
	|	И (ЗаказКлиентаДополнительныеРеквизиты.Свойство = &СвойствоНомерЗаказа
	|			ИЛИ ЗаказКлиентаДополнительныеРеквизиты.Свойство = &СвойствоДатаЗаказа)";
	
	Запрос.УстановитьПараметр("СвойствоНомерЗаказа", ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте);
	Запрос.УстановитьПараметр("СвойствоДатаЗаказа", ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте);
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерЗаказаНаСайте", "");
	СтруктураВозврата.Вставить("ДатаЗаказаНаСайте", Дата(1,1,1));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Свойство = ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте Тогда
			СтруктураВозврата.НомерЗаказаНаСайте = Выборка.Значение;
		КонецЕсли;
		Если Выборка.Свойство = ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте Тогда
			СтруктураВозврата.ДатаЗаказаНаСайте = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заполняет массив реквизитам формы, значение которых должно быть сохранено
//
Процедура ЗаполнитьПрикладныеРеквизитыФормыУзлаОбменСсайтом(МассивРеквизитов) Экспорт
	
	РеквизитыТоваров = ОбменССайтамиУТ.РеквизитыОбменаТоварами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыТоваров);
	
	РеквизитыЗаказов = ОбменССайтамиУТ.РеквизитыОбменаЗаказами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыЗаказов);
	
КонецПроцедуры

// Корректирует проверяемые при записи реквизиты формы узла 
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма плана узла обмена, в которой выполняется запись.
//  ПроверяемыеРеквизиты  - Массив - массив имен проверяемых на заполненность реквизитов формы.
//  ОбменТоварами         - Булево - признак того, что будет выполняться обмен товарами.
//  ОбменЗаказами         - Булево - признак того, что будет выполняться обмен заказами.
//
Процедура СкорректироватьПроверяемыеРеквизитыФормыУзла(Форма, ПроверяемыеРеквизиты, ОбменТоварами, ОбменЗаказами) Экспорт
	
	
	РеквизитыОбменаЗаказами = ОбменССайтамиУТ.РеквизитыОбменаЗаказами();
	
	Если Не ОбменЗаказами Тогда
		НепроверяемыеРеквизиты = РеквизитыОбменаЗаказами;
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, РеквизитыОбменаЗаказами);
		
		НепроверяемыеРеквизиты = Новый Массив;
		НепроверяемыеРеквизиты.Добавить("ГруппаДляНовойНоменклатуры");
		НепроверяемыеРеквизиты.Добавить("Менеджер");
		НепроверяемыеРеквизиты.Добавить("СоответствиеСтатусовЗаказов");
		Если Не Форма.ИспользуютсяГруппыДоступаПартнеров 
			Или (НЕ Форма.ИспользоватьПартнеровКакКонтрагентов И НЕ Форма.СоздаватьПартнеровДляНовыхКонтрагентов) Тогда
			
			НепроверяемыеРеквизиты.Добавить("ГруппаДоступаПартнеров");
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
			НепроверяемыеРеквизиты.Добавить("Склад");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

// Добавляет произвольные поля в структуру ПрикладныеПараметры.
//
// Параметры:
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                     подсистемы в прикладное решение.
//	
Процедура ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

// В данной процедуре можно изменить условное оформление формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом
//
Процедура УстановитьУсловноеОформлениеФормаУзлаОбмена(Форма) Экспорт
	
	ОбменССайтамиУТ.УстановитьУсловноеОформление(Форма);
	
КонецПроцедуры

// В данной процедуре можно изменить видимость элементов формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом
//
Процедура УстановитьВидимостьЭлементовФормыУзла(Форма) Экспорт
	
	Форма.Элементы.ГруппаСоответствиеСтатусов.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
КонецПроцедуры

// В форму узла плана обмена добавляются реквизиты прикладного решения и элементы формы к ним.
// Параметры:
//  Форма - УправляемаяФорма - Форма узла плана обмена "Обмен с сайтом".
//  ТекущийОбъект - ПланОбменаОбъект - Объект плана обмена "Обмен с сайтом".
//
Процедура ДобавитьРеквизитыФормыУзла(Форма, ТекущийОбъект) Экспорт
	
	ОбменССайтамиУТ.ДобавитьРеквизитыФормыНастройки(Форма);
	
КонецПроцедуры

// Выполняет логику прикладного решения при обновлении конфигурации.
//
// Параметры:
//  ИмяОбработчика - Строка - представление обработчика обновления, вызвавшего процедуру.
//
Процедура ОбработчикОбновленияПереопределяемый(ИмяОбработчика) Экспорт
	
	
	
КонецПроцедуры

// ( Storverk

// Заполняет табличную часть "Товары" документа "Заказ клиента".
//
// Параметры:
//  Документ            - ДокументОбъект.ЗаказКлиента - документ, чья табличная часть "Товары" будет заполнена.
//  ТаблицаТоваровСайт  - ТаблицаЗначений - таблица заказанных товаров по данным с сайта.
//  ПрикладныеПараметры - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//
Процедура ЗаполнитьТабличнуюЧастьДокумента(Документ, ТаблицаТоваровСайт, ПрикладныеПараметры) Экспорт
	
	//С сайта получаем только Сумма и ЦенаСоСкидкой
	//	Необходимо рассчитать всё остальное, (в том числе процент автоматической скидки)
	//  а разницу между суммой на сайте и рассчитанной в базе учесть как процент ручной скидки
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Документ, 
		Документ.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Документ);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", Новый Структура("Склад, СкладГруппа", Документ.Склад, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьСодержание", Новый Структура("ЗаполнятьДляВсехУслуг", Истина));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно, СтатусЗаказаКлиента", Ложь, Документ.Статус)); 
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Документ));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));

	//СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Документ.Товары.Очистить();
	ТаблицаТоварыДокумент = Документ.Товары.Выгрузить();
	ТаблицаТоварыДокумент.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	Для Каждого ТекСтрока Из ТаблицаТоваровСайт Цикл
		
		НоваяСтрока = ТаблицаТоварыДокумент.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//НоваяСтрока.СтавкаНДС = ОбменССайтамиУТ.СтавкаНДСПоЗначениюПриЗагрузке(ТекСтрока.СтавкаНДС);
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Документ.Товары.Загрузить(ТаблицаТоварыДокумент);
	
	// Рассчитываем скидки заново
	//	РассчитатьСкидкиНаценкиКлиент:	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);
	
	РезультатРасчета = СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(Документ, СтруктураПараметры); // Тут ЦенаСоСкидкой пересчитается для всех строк
	
	ТаблицаТоварыДокумент = Документ.Товары.Выгрузить();
	ТаблицаТоварыДокумент.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаТоварыДокумент.Колонки.Добавить("ЦенаСоСкидкой", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	
	Для Каждого ТекСтрока Из ТаблицаТоваровСайт Цикл		
		СтрокаТовары = ТаблицаТоварыДокумент.Получить(ТаблицаТоваровСайт.Индекс(ТекСтрока));		
		СтрокаТовары.ЦенаСоСкидкой = ТекСтрока.ЦенаСоСкидкой;
	КонецЦикла;
	
	// Теперь как будто изменяем ручную скидку
	//	ТоварыСуммаРучнойСкидкиПриИзменении:	
	СтруктураДействийПересчетРучнойСкидки = Новый Структура;
	СтруктураДействийПересчетРучнойСкидки.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействийПересчетРучнойСкидки.Вставить("ПересчитатьСумму");
	СтруктураДействийПересчетРучнойСкидки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействийПересчетРучнойСкидки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействийПересчетРучнойСкидки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийПересчетРучнойСкидки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//СтруктураДействийПересчетРучнойСкидки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	// ( Storverk Тюняков 7199 Изменить автопростановку резерва
	ИндексыСтрок = Новый Массив;
	// ) Storverk Тюняков 7199 Изменить автопростановку резерва
	
	Для каждого ТекущаяСтрока Из ТаблицаТоварыДокумент Цикл
	
		//при изменении цены со скидкой - меняем сумму ручной скидки
		ИмяКоличества = "КоличествоУпаковок";
		СуммаБезСкидок	 = ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена;
		СуммаСоСкидками	 = ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.ЦенаСоСкидкой;
		СуммаСкидки = СуммаБезСкидок - СуммаСоСкидками;
		
		ТекущаяСтрока.СуммаРучнойСкидки = СуммаСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействийПересчетРучнойСкидки, КэшированныеЗначения);	
		
		// ( Storverk Тюняков 7199 Изменить автопростановку резерва
		ИндексыСтрок.Добавить(ТаблицаТоварыДокумент.Индекс(ТекущаяСтрока));
		// ) Storverk Тюняков 7199 Изменить автопростановку резерва
		
	КонецЦикла;
		
	Документ.Товары.Загрузить(ТаблицаТоварыДокумент);
	
	// ( Storverk Тюняков 7199 Изменить автопростановку резерва
	
	ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыВыбораОбеспечения(Документ.Статус);
	ПереченьВариантов = СТ_ОбщегоНазначенияКлиентСервер.ПолучитьПорядокОбеспечения("ОбменССайтом"); 
	ТаблицаОбеспечения = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(
		Документ, ПереченьВариантов, ПараметрыЗаполнения, ИндексыСтрок);

	Если ТипЗнч(ТаблицаОбеспечения) = Тип("ТаблицаЗначений") Тогда
		
		Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(Документ, Неопределено, "ИндексыСтрок", ТаблицаОбеспечения);
		//Попытка
		//	Документ.Записать(РежимЗаписиДокумента.Проведение);
		//Исключение
		//	
		//	Сообщение = Новый СообщениеПользователю();
		//	Сообщение.Текст = НСтр("ru = 'Невозможно разместить заказ %1.'");
		//	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст, Документ.Ссылка);
		//	Сообщение.Сообщить();
		//	ИмяСобытияЖурнала = НСтр("ru = 'Обеспечение потребностей.Размещение в заказах'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		//	ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//	ЕстьОшибки = Истина;
		//	
		//КонецПопытки;
		
	Иначе
		
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Невозможно разместить заказ %1. Неверные данные об отгрузках / оформлении накладных по заказу.'");
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст, Документ.Ссылка);
			Сообщение.Сообщить();
			ИмяСобытияЖурнала = НСтр("ru = 'Обеспечение потребностей.Размещение в заказах'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЕстьОшибки = Истина;
			
	КонецЕсли;
	
	//ПараметрыВыбораОбеспечения(Документ.Статус);
	//ПереченьВариантов = СТ_ОбщегоНазначенияКлиентСервер.ПолучитьПорядокОбеспечения("ОбменССайтом");
	//Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(Документ,
	//	ПереченьВариантов,
	//	ПараметрыЗаполнения,
	//	ВыделенныеСтроки);
	//
	//
	////Перенос результатов в документ.
	//ТекстОповещения = Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(Документ, Неопределено, "ИндексыСтрок", Таблица);
	
	// ) Storverk Тюняков 7199 Изменить автопростановку резерва
	
КонецПроцедуры

Функция ПолучитьОтветственныеЛицаОрганизацийПоПользователю(Пользователь)

	// Мопед не мой.. 
	// Сделал вместо процедур СТ_Общий.ПолучитьРуководителя  и проч
	
	СоответствиеРезультат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка,
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизаций.Должность КАК Должность
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	НЕ ОтветственныеЛицаОрганизаций.ПометкаУдаления
		|	И ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
		|	И ОтветственныеЛицаОрганизаций.ДатаНачала <= &ТекущаяДата
		|	И (ОтветственныеЛицаОрганизаций.ДатаОкончания > &ТекущаяДата
		|			ИЛИ ОтветственныеЛицаОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	//Запрос.УстановитьПараметр("Организация", Организация); На организацию в этом мире видимо всем пофигу
	Запрос.УстановитьПараметр("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СоответствиеРезультат.Вставить(ВыборкаДетальныеЗаписи.ОтветственноеЛицо, ВыборкаДетальныеЗаписи.Ссылка);		
		
	КонецЦикла;
	
	Возврат СоответствиеРезультат;

КонецФункции

// Исторически, на сайт посылается первый попавшийся фактический адрес контрагента...
//	Ну раз всех это устраивает...
Функция ПолучитьПервыйФактическийАдресКонтрагента(Контрагент)

	СтруктураАдреса = Новый Структура("АдресДоставки,АдресДоставкиЗначенияПолей");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыКонтактнаяИнформация.Представление КАК АдресДоставки,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент";
		
	Запрос.УстановитьПараметр("Контрагент", Контрагент);	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, ВыборкаДетальныеЗаписи);		
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
	КонецФункции // ()

Функция ПолучитьАдресКонтрагентаПоУИД(СтрокаУИД)

	СтруктураАдреса = Новый Структура("АдресДоставки,АдресДоставкиЗначенияПолей,БП_АдресДоставкиСсылка,ЗонаДоставки,КонтактноеЛицо");
	НовыйУИД = Новый УникальныйИдентификатор(СтрокаУИД);
	СсылкаАдрес = Справочники.БП_АдресаДоставкиКонтрагентов.ПолучитьСсылку(НовыйУИД);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БП_АдресаДоставкиКонтрагентов.Представление КАК АдресДоставки,
	|	БП_АдресаДоставкиКонтрагентов.ЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	БП_АдресаДоставкиКонтрагентов.Ссылка КАК БП_АдресДоставкиСсылка,
	|	БП_АдресаДоставкиКонтрагентов.ЗонаДоставки КАК ЗонаДоставки,
	|	БП_АдресаДоставкиКонтрагентов.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.БП_АдресаДоставкиКонтрагентов КАК БП_АдресаДоставкиКонтрагентов
	|ГДЕ
	|	БП_АдресаДоставкиКонтрагентов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаАдрес);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

#КонецОбласти



