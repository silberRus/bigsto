
#Область ПрограммныйИнтерфейс

#Область ЛогическоеХранилище
    
// МЕТОД НЕ ПОДДЕРЖИВАЕТСЯ.
// Возвращает описание данных логического хранилища.
//
// Параметры:
//  ИдентификаторХранилища - Строка - идентификатор логического хранилища.
//  ИдентификаторДанных    - Строка - идентификатор данных хранилища.
// 
// Возвращаемое значение:
//   - Вызывается исключение.
//
Функция Описание(ИдентификаторХранилища, ИдентификаторДанных) Экспорт
	
	ВызватьИсключение ИнтеграцияОбъектовОбластейДанныхПовтИсп.СловарьПодсистемы().МетодНеПоддерживается;
	
КонецФункции

// МЕТОД НЕ ПОДДЕРЖИВАЕТСЯ.
// Возвращает данные логического хранилища.
//
// Параметры:
//  ОписаниеДанных - Структура - описание данных хранилища.
// 
// Возвращаемое значение:
//   - Вызывается исключение.
//
Функция Данные(ОписаниеДанных) Экспорт
   
	ВызватьИсключение ИнтеграцияОбъектовОбластейДанныхПовтИсп.СловарьПодсистемы().МетодНеПоддерживается;
	
КонецФункции

// Записывает данные в логическое хранилище.
// 
// Параметры:
//  Структура - описание данных хранилища.
//    - ИмяФайла - Строка - имя файла.
//    - Размер - Число - размер файла в байтах.
//    - Данные - ДвоичныеДанные, Строка - двоичные данные файла или расположение файла на диске.
// 
// Возвращаемое значение:
//   - Строка - идентификатор данных хранилища.
//   
Функция Загрузить(ОписаниеДанных) Экспорт
    
    УстановитьПривилегированныйРежим(Истина);
    Словарь = ИнтеграцияОбъектовОбластейДанныхПовтИсп.СловарьПодсистемы();
    Ответ = ОтветПоУмолчанию();
    Команда = НРег(ОписаниеДанных.ИмяФайла);
    УчетнаяСистема = АвторизованнаяУчетнаяСистема();
    
    Если Команда = КомандаУстановить() Тогда
        Попытка
            УстановитьНастройки(УчетнаяСистема, ОписаниеДанных.Данные, Ответ);
        Исключение
            УстановитьВнутреннююОшибку(Ответ, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        КонецПопытки;
        Возврат Ответ;
    КонецЕсли; 
    
    Если УчетнаяСистема = Неопределено Тогда
        УстановитьОтсутствиеДанных(Ответ);
        Возврат Ответ;
    КонецЕсли;
    
    Если Команда = КомандаПолучить() Тогда
        // Проверим, есть ли какие либо данные для формирования выгрузки.
        Если РегистрыСведений.ОбъектыКОтправке.Количество(УчетнаяСистема) = 0 Тогда
            УстановитьОтсутствиеДанных(Ответ);
            Возврат Ответ;
        КонецЕсли;
        // Формирование выгрузки выполняется асинхронно, эксклюзивно.
    	Задание = ДобавитьЗаданиеПодготовкиДанных(УчетнаяСистема);
        ИдентификаторЗадания = Задание.УникальныйИдентификатор();
        РегистрыСведений.СвойстваЗаданий.Установить(Задание);
        Результат = Новый Структура;
        Результат.Вставить(ПолеХранилище(), ОчередьЗаданийВнешнийИнтерфейс.ИдентификаторХранилища());
        Результат.Вставить(ПолеИдентификатор(), Строка(ИдентификаторЗадания));
        Ответ[ПолеРезультат()] = Результат;
        Возврат Ответ;
        
    ИначеЕсли Команда = КомандаПодтвердить() Тогда
        // Обработка подтверждения выполняется синхронно.
        СтрокаДанных = ПолучитьСтрокуИзДвоичныхДанных(Новый ДвоичныеДанные(ОписаниеДанных.Данные));
        Если Не ЗначениеЗаполнено(СтрокаДанных) Тогда
            УстановитьОшибкуДанных(Ответ, Словарь.ПустоеПодтверждение);
            Возврат Ответ;
        КонецЕсли;
        Попытка
            ДанныеПодтверждений = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(СтрокаДанных);
        Исключение
            УстановитьОшибкуДанных(Ответ, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                Словарь.ОшибкаРазбораПодтверждения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
            Возврат Ответ;
        КонецПопытки;
        Попытка
            ОбработатьПодтверждения(УчетнаяСистема, ДанныеПодтверждений);
            УдалитьПустойРезультат(Ответ);
        Исключение
            УстановитьВнутреннююОшибку(Ответ, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        КонецПопытки;
        Возврат Ответ; 
        
    ИначеЕсли Команда = КомандаОтправить() Тогда
        Если ОписаниеДанных.Данные = Тип("Строка") Тогда
            ПолноеИмя = Неопределено;
            Данные = ОписаниеДанных.Данные;
        Иначе
            ПолноеИмя = ОписаниеДанных.Данные;
            Данные = Неопределено;
    	КонецЕсли;
        ИдентификаторФайла = РегистрыСведений.ФайлыОбластейДанных.Загрузить(ОписаниеДанных.ИмяФайла, Данные, ПолноеИмя);
    	Задание = ДобавитьЗаданиеОбработкиДанных(УчетнаяСистема, Строка(ИдентификаторФайла));
        ИдентификаторЗадания = Задание.УникальныйИдентификатор();
        РегистрыСведений.СвойстваЗаданий.Установить(Задание);
        Результат = Новый Структура;
        Результат.Вставить(ПолеХранилище(), ОчередьЗаданийВнешнийИнтерфейс.ИдентификаторХранилища());
        Результат.Вставить(ПолеИдентификатор(), Строка(ИдентификаторЗадания));
        Ответ[ПолеРезультат()] = Результат;
        Возврат Ответ;
        
    КонецЕсли; 
    
КонецФункции

// Возвращает идентификатор хранилища в виде строки.
// 
// Возвращаемое значение:
//   - Строка - идентификатор хранилища. 
//
Функция ИдентификаторХранилища() Экспорт
	
	Возврат "integration";
	
КонецФункции

#КонецОбласти

// Добавляет объект к отправке во внешнюю учетную систему.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//  ИдентификаторОбъекта - Строка(50) - идентификатор объекта, должен соответствовать 
//                         требованиям к именованию файлов операционной системы.  
//  ДанныеОбъекта - ДвоичныеДанные - данные объекта к отпрвке (если не указано, данные будут запрошены перед отправкой).
//  Обработчик - Строка(50) - идентификатор обработчика объекта (игнорируется, если не указаны данные объекта).
//
Процедура ДобавитьОбъектКОтправке(УчетнаяСистема, ИдентификаторОбъекта, ДанныеОбъекта = Неопределено, Обработчик = "") Экспорт
    
    СохранитьДанныеОбъекта(УчетнаяСистема, ИдентификаторОбъекта, ДанныеОбъекта, Обработчик);
    
КонецПроцедуры

// Удаляет объект из объектов к отправке в учетную систему.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//  ИдентификаторОбъекта - Строка(50) - идентификатор объекта
//
Процедура УдалитьОбъектКОтправке(УчетнаяСистема, ИдентификаторОбъекта) Экспорт
    
    Отбор = Новый Структура("УчетнаяСистема, ИдентификаторОбъекта", УчетнаяСистема, ИдентификаторОбъекта);
    РегистрыСведений.ОбъектыКОтправке.УдалитьЗаписи(Отбор);
	
КонецПроцедуры

// Выполняет оповещение внешней учетной системы в соответствие с настройками оповещения.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//  ИдентификаторОбъекта - Строка(50) - идентификатор объекта
//  ВызыватьИсключение - Булево - признак вызова исключения при неудачной отправке оповещения.
//
Процедура ОповеститьОбИзмененииОбъекта(УчетнаяСистема, ИдентификаторОбъекта, ВызыватьИсключение = Ложь) Экспорт
    
    Словарь = ИнтеграцияОбъектовОбластейДанныхПовтИсп.СловарьПодсистемы();
    Попытка
        Настройки = Настройки(УчетнаяСистема);
        Если Не Настройки.ОповещатьОбИзменениях Тогда
            ВызватьИсключение Словарь.ОповещенияОбИзмененияхНеИспользуются;
        КонецЕсли; 
        Запрос = Новый Запрос;
        Запрос.Текст = 
        	"ВЫБРАТЬ ПЕРВЫЕ 1
            |   ОбъектыКОтправке.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
            |   ОбъектыКОтправке.Обработчик КАК Обработчик,
            |   ФайлыОбластейДанных.Идентификатор КАК ИдентификаторФайла,
            |   ФайлыОбластейДанных.ФайлCRC32 КАК Версия
            |ИЗ
            |   РегистрСведений.ОбъектыКОтправке КАК ОбъектыКОтправке
            |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыОбластейДанных КАК ФайлыОбластейДанных
            |       ПО ОбъектыКОтправке.ИдентификаторФайла = ФайлыОбластейДанных.Идентификатор
            |           И (НЕ ФайлыОбластейДанных.Временный)
            |ГДЕ
            |   ОбъектыКОтправке.УчетнаяСистема = &УчетнаяСистема
            |   И ОбъектыКОтправке.ИдентификаторОбъекта = &ИдентификаторОбъекта";
        
        Запрос.УстановитьПараметр("УчетнаяСистема", УчетнаяСистема);
        Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
        Результат = Запрос.Выполнить();
        Если Результат.Пустой() Тогда
            ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                Словарь.ДанныеОбъектаНеУстановлены, ИдентификаторОбъекта);
        КонецЕсли;
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        АдресОбъекта = СтрШаблон("%1/hs/dt/%2/%3/%4",
            ПолучитьНавигационнуюСсылкуИнформационнойБазы(),
            ПолеХранилище(),
            ФайлыОбластейДанныхВнешнийИнтерфейс.ИдентификаторХранилища(),
            Строка(Выборка.ИдентификаторФайла));
        СвойстваСообщения = Новый Структура;
        СвойстваСообщения.Вставить("url", АдресОбъекта);
        СвойстваСообщения.Вставить("tenant", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
        СвойстваСообщения.Вставить(ПолеХранилище(), ФайлыОбластейДанныхВнешнийИнтерфейс.ИдентификаторХранилища());
        СвойстваСообщения.Вставить(ПолеИдентификатор(), Строка(Выборка.ИдентификаторФайла));
        СвойстваОбъекта = СвойстваОбъекта(Выборка.ИдентификаторОбъекта, Выборка.Версия, Выборка.Обработчик);
        ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СвойстваСообщения, СвойстваОбъекта); 
        Если Настройки.ПодписыватьДанные Тогда
            ПодписатьДанные(СвойстваСообщения, ПолучитьДвоичныеДанныеИзСтроки(Настройки.КлючПодписи));
        КонецЕсли;
        Данные = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(СвойстваСообщения);
        ОтправитьОповещение(Данные, Настройки);
        
    Исключение
        ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации(Словарь.КорневоеСобытие + "." + Словарь.ОповещениеОбИзменении,
            УровеньЖурналаРегистрации.Предупреждение, УчетнаяСистема.Метаданные(), УчетнаяСистема, 
            СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Словарь.НеУдалосьОтправитьОповещение, ОписаниеОшибки));
        Если ВызыватьИсключение Тогда
            ВызватьИсключение ОписаниеОшибки;
        КонецЕсли; 
    КонецПопытки;	
	
КонецПроцедуры

// Возвращает настройки внешней учетной системы.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//  КлючиНастроек - Строка, Массив - ключи настроек, по которым нужно вернуть значения.
// Возвращаемое значение:
//   - Структура - Настройки учетной системы:
//      * ОповещатьОбИзменениях (Булево) - признак использования оповещений при создании/изменении данных в приложении.
//      * АдресСервиса (Строка) - адрес сервиса приема оповещений об изменениях.
//      * СпособАутентификации (ПеречислениеСсылка.СпособыАутентификации) - способ аутентификации в сервисе приема оповещений.
//      * Логин (Строка) - логин аутентификации в сервисе приема оповещений (используется при basic-аутентификации).
//      * Пароль (Строка) - пароль аутентификации в сервисе приема оповещений (используется при basic-аутентификации).
//      * ИспользоватьСертификат (Булево) - признак использования сертификата при установке соединения с сервисом приема оповещений.
//      * ИмяСертификата (Строка) - имя файла сертификата.
//      * ПарольСертификата (Строка) -  пароль сертификата (используется, если задано свойство ИспользоватьСертификат).
//      * ДанныеСертификата (ДвоичныеДанные) - двоичные данные сертификата в base64 (используется, если задано свойство ИспользоватьСертификат).
//      * ПодписыватьДанные (Булево) - признак использования подписи данных при отправке их в сервис приема оповещений.
//      * КлючПодписи (Строка) - секретное слово, для подписи отправляемых данных. Подпись выполняется с помощью алгоритма HMACSHA256.
//
Функция Настройки(УчетнаяСистема, Знач КлючиНастроек = Неопределено) Экспорт
    
    Если КлючиНастроек = Неопределено Тогда
        ЗаполняемыеНастройки = ЗаполняемыеНастройки();
    Иначе
        Если ТипЗнч(КлючиНастроек) = Тип("Строка") Тогда
            КлючиНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
                КлючиНастроек, ",", Истина, Истина);
        КонецЕсли; 
        ЗаполняемыеНастройки = ЗаполняемыеНастройки(КлючиНастроек);
    КонецЕсли; 
    Настройки = Новый Структура;
    ПоляУчетнойСистемы = Новый Массив;
    МетаданныеУчетнойСистемы = УчетнаяСистема.Метаданные();
    Отбор = Новый Структура("БезопасноеХранение", Ложь);
    Для Каждого Настройка Из ЗаполняемыеНастройки.НайтиСтроки(Отбор) Цикл
        Настройки.Вставить(Настройка.ИмяСвойства, Настройка.Тип.ПривестиЗначение(Неопределено));
        Если МетаданныеУчетнойСистемы.Реквизиты.Найти(Настройка.ИмяСвойства) <> Неопределено Тогда
            ПоляУчетнойСистемы.Добавить(Настройка.ИмяСвойства);    
        КонецЕсли; 
    КонецЦикла;
    МенеджерНастроек = РегистрыСведений.НастройкиУчетныхСистем.СоздатьМенеджерЗаписи();
    МенеджерНастроек.УчетнаяСистема = УчетнаяСистема;
    МенеджерНастроек.Прочитать();
    Если МенеджерНастроек.Выбран() Тогда
        ЗаполнитьЗначенияСвойств(Настройки, МенеджерНастроек);
    КонецЕсли; 
    
    Отбор = Новый Структура("БезопасноеХранение", Истина);
    УстановитьПривилегированныйРежим(Истина);
    Для Каждого Настройка Из ЗаполняемыеНастройки.НайтиСтроки(Отбор) Цикл
        Настройки.Вставить(Настройка.ИмяСвойства, 
            ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяСистема, Настройка.ИмяСвойства)); 
    КонецЦикла;
    УстановитьПривилегированныйРежим(Ложь);
    
    Возврат Настройки;
    
КонецФункции

// Возвращает структуру с именами кодов возврата.
// Может использоваться в ответах на запросы к внешнему программному интерфейсу.
// 
// Возвращаемое значение:
//   - Структура - имена состояний с значениями кодов состояний.
//
Функция КодыВозврата() Экспорт
	
    Возврат ИнтеграцияОбъектовОбластейДанныхПовтИсп.КодыВозврата();	
	
КонецФункции
 
#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс
 
// Обработчик задания очереди заданий.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система
//                   по которой готовятся данные.
//
Процедура ПодготовитьДанные(УчетнаяСистема) Экспорт
    
    КлючЗадания = КлючЗаданияПодготовкиДанных(УчетнаяСистема);
    ИдентификаторЗадания = ОчередьЗаданийВнешнийИнтерфейс.ИдентификаторЗадания(КлючЗадания);
    КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
    Запрос = Новый Запрос;
    Запрос.Текст = 
    	"ВЫБРАТЬ
        |   ОбъектыКОтправке.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
        |   ФайлыОбластейДанных.Идентификатор КАК ИдентификаторФайла,
        |   ОбъектыКОтправке.Обработчик КАК Обработчик
        |ИЗ
        |   РегистрСведений.ОбъектыКОтправке КАК ОбъектыКОтправке
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыОбластейДанных КАК ФайлыОбластейДанных
        |       ПО ОбъектыКОтправке.ИдентификаторФайла = ФайлыОбластейДанных.Идентификатор
        |           И (НЕ ФайлыОбластейДанных.Временный)
        |ГДЕ
        |   ОбъектыКОтправке.УчетнаяСистема = &УчетнаяСистема";
    
    Запрос.УстановитьПараметр("УчетнаяСистема", УчетнаяСистема);
    
    Попытка
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        Архиватор = Новый ЗаписьZipФайла;
        КаталогФайлов = ПолучитьИмяВременногоФайла();
        СоздатьКаталог(КаталогФайлов);
        ДанныеМанифеста = Новый Массив;
        Пока Выборка.Следующий() Цикл
            Если Не ЗначениеЗаполнено(Выборка.ИдентификаторФайла) Тогда
                МенеджерУчетнойСистемы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(УчетнаяСистема);
                ДанныеОбъекта = МенеджерУчетнойСистемы.ДанныеОбъекта(УчетнаяСистема, Выборка.ИдентификаторОбъекта);
                Если Не ЗначениеЗаполнено(ДанныеОбъекта) Тогда
                    УдалитьОбъектКОтправке(УчетнаяСистема, Выборка.ИдентификаторОбъекта);
                    Продолжить;
                КонецЕсли; 
                ИдентификаторФайла = СохранитьДанныеОбъекта(УчетнаяСистема, 
                    Выборка.ИдентификаторОбъекта, ДанныеОбъекта.Данные, ДанныеОбъекта.Обработчик);
            Иначе
                ИдентификаторФайла = Выборка.ИдентификаторФайла;
            КонецЕсли;
            ОписаниеФайла = РегистрыСведений.ФайлыОбластейДанных.ОписаниеФайла(ИдентификаторФайла);
            Если ЗначениеЗаполнено(ОписаниеФайла.ПолноеИмя) Тогда
                Архиватор.Добавить(ОписаниеФайла.ПолноеИмя);
            Иначе
                ИмяФайла = КаталогФайлов + ПолучитьРазделительПутиСервера() + Выборка.ИдентификаторОбъекта;
                ОписаниеФайла.Данные.Записать(ИмяФайла);
                Архиватор.Добавить(ИмяФайла);
            КонецЕсли;
            Обработчик = ?(ЗначениеЗаполнено(Выборка.Обработчик), Выборка.Обработчик, ДанныеОбъекта.Обработчик);
            СвойстваОбъекта = СвойстваОбъекта(Выборка.ИдентификаторОбъекта, ОписаниеФайла.CRC32, Обработчик);
            ДанныеМанифеста.Добавить(СвойстваОбъекта);
        КонецЦикла;
        Манифест = Новый Структура(ИнтеграцияОбъектовОбластейДанныхПовтИсп.ИмяПоляСоставаДанных(), ДанныеМанифеста);
        Архиватор.Добавить(ЗаписатьМанифест(Манифест));
        ДвоичныеДанныеАрхива = Архиватор.ПолучитьДвоичныеДанные(,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
        ИмяАрхива = Строка(ИдентификаторЗадания) + ".zip";
        ИдентификаторФайлаАрхива = РегистрыСведений.ФайлыОбластейДанных.Загрузить(ИмяАрхива, ДвоичныеДанныеАрхива,, Истина);
        Попытка
            УдалитьФайлы(КаталогФайлов);
        Исключение
        КонецПопытки;
        Результат = Новый Структура;
        Результат.Вставить(ПолеХранилище(), ФайлыОбластейДанныхВнешнийИнтерфейс.ИдентификаторХранилища());
        Результат.Вставить(ПолеИдентификатор(), Строка(ИдентификаторФайлаАрхива));
        Свойства = РегистрыСведений.СвойстваЗаданий.НовыйСвойстваЗадания();
        Свойства.КодСостояния = КодыСостояний.Выполнено;
        Свойства.Результат = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Результат);
        РегистрыСведений.СвойстваЗаданий.Установить(ИдентификаторЗадания, Свойства);
    Исключение
        ОчередьЗаданийВнешнийИнтерфейс.УстановитьВнутреннююОшибку(
            ИдентификаторЗадания, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    КонецПопытки
    
КонецПроцедуры

// Обработчик задания очереди заданий.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система
//                   по которой готовятся данные.
//  ИдентификаторФайла - Строка(36) - идентификатор файла для обработки.
//
Процедура ОбработатьДанные(УчетнаяСистема, ИдентификаторФайла) Экспорт
    
    Словарь = ИнтеграцияОбъектовОбластейДанныхПовтИсп.СловарьПодсистемы();
    КлючЗадания = КлючЗаданияОбработкиДанных(УчетнаяСистема, ИдентификаторФайла);
    ИдентификаторЗадания = ОчередьЗаданийВнешнийИнтерфейс.ИдентификаторЗадания(КлючЗадания);
    КаталогРаспаковки = ПолучитьИмяВременногоФайла();
    КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
    МенеджерУчетнойСистемы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(УчетнаяСистема);
    Попытка
        ОписаниеФайла = РегистрыСведений.ФайлыОбластейДанных.ОписаниеФайла(ИдентификаторФайла);
        Если ЗначениеЗаполнено(ОписаниеФайла.ПолноеИмя) Тогда
            ПотокДанных = ФайловыеПотоки.ОткрытьДляЧтения(ОписаниеФайла.ПолноеИмя);
        Иначе
            ПотокДанных = ОписаниеФайла.Данные.ОткрытьПотокДляЧтения();
        КонецЕсли;
        Архиватор = Новый ЧтениеZipФайла(ПотокДанных);
        Попытка
            Архиватор.ИзвлечьВсе(КаталогРаспаковки);
        Исключение
            ОчередьЗаданийВнешнийИнтерфейс.УстановитьОшибкуДанных(ИдентификаторЗадания, Словарь.ФайлПоврежден);
            Возврат;
        КонецПопытки;
        ПоискМанифеста = НайтиФайлы(КаталогРаспаковки, ПоставляемыеДанныеОбластейДанныхПовтИсп.ИмяФайлаМанифеста(), Истина);
        Если ПоискМанифеста.Количество() = 0 Тогда
            ОчередьЗаданийВнешнийИнтерфейс.УстановитьОшибкуДанных(ИдентификаторЗадания, Словарь.МанифестНеЗадан);
            Возврат;
        КонецЕсли;
        Попытка
            ЧтениеJSON = Новый ЧтениеJSON;
            ЧтениеJSON.ОткрытьФайл(ПоискМанифеста[0].ПолноеИмя);
            Манифест = ПрочитатьJSON(ЧтениеJSON);
            ЧтениеJSON.Закрыть();
        Исключение
            ОчередьЗаданийВнешнийИнтерфейс.УстановитьОшибкуДанных(ИдентификаторЗадания, Словарь.МанифестНеВерногоФормата);
            Возврат;
        КонецПопытки;
        Порядок = ПоставляемыеДанныеОбластейДанныхПовтИсп.ИмяПоляСоставаДанных();
        Если Не Манифест.Свойство(Порядок) Тогда
            ОчередьЗаданийВнешнийИнтерфейс.УстановитьОшибкуДанных(ИдентификаторЗадания, 
                СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Словарь.ОтсутствуетСвойствоМанифеста, Порядок));
            Возврат;
        КонецЕсли;
        Результаты = Новый Массив;
        Для Каждого Элемент Из Манифест[Порядок] Цикл
            ИмяФайла = Элемент[ПолеФайл()];
            ПоискФайла = НайтиФайлы(КаталогРаспаковки, ИмяФайла);
            Если Элемент.Свойство(ПолеВерсия()) Тогда
                Версия = Элемент[ПолеВерсия()];
            Иначе 
                Версия = "";
            КонецЕсли; 
            Если ПоискФайла.Количество() = 0 Тогда
                ОчередьЗаданийВнешнийИнтерфейс.УстановитьОшибкуДанных(ИдентификаторЗадания, 
                    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Словарь.ФайлНеНайден, ИмяФайла));
                Возврат;
            КонецЕсли;
            ИдентификаторОбъекта = ИмяФайла;
            ПотокДанных = ФайловыеПотоки.ОткрытьДляЧтения(ПоискФайла[0].ПолноеИмя);
            Обработчик = Элемент[ПолеОбработчик()];
            КодВозвратаОбработчика = КодыСостояний.Выполнено;
            ОшибкаОбработчика = Ложь;
            СообщениеОбОшибкеОбработчика = "";
                
            МенеджерУчетнойСистемы.ОбработатьДанные(УчетнаяСистема, ИдентификаторОбъекта, ПотокДанных, Обработчик, 
                КодВозвратаОбработчика, ОшибкаОбработчика, СообщениеОбОшибкеОбработчика);
                    
            РезультатОбработчика = Новый Структура;
            РезультатОбработчика.Вставить(ПолеФайл(), ИмяФайла);
            РезультатОбработчика.Вставить(ПолеВерсия(), Версия);
            РезультатОбработчика.Вставить(ПолеОбработчик(), Обработчик);
            РезультатОбработчика.Вставить(ПолеКодВозврата(), КодВозвратаОбработчика);
            РезультатОбработчика.Вставить(ПолеОшибка(), ОшибкаОбработчика);
            РезультатОбработчика.Вставить(ПолеСообщениеОбОшибке(), СообщениеОбОшибкеОбработчика);
            Результаты.Добавить(РезультатОбработчика);
            
            РегистрыСведений.ФайлыОбластейДанных.УстановитьПризнакВременного(Новый УникальныйИдентификатор(ИдентификаторФайла));                
        КонецЦикла;
    Исключение
        ОчередьЗаданийВнешнийИнтерфейс.УстановитьВнутреннююОшибку(
            ИдентификаторЗадания, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    КонецПопытки;

    Свойства = РегистрыСведений.СвойстваЗаданий.НовыйСвойстваЗадания();
    Свойства.КодСостояния = КодыСостояний.Выполнено;
    Свойства.Результат = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Результаты);
    
    РегистрыСведений.СвойстваЗаданий.Установить(ИдентификаторЗадания, Свойства);
    
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ИнтеграцияОбъектовОбластейДанных.ПодготовитьДанные");
	СоответствиеИменПсевдонимам.Вставить("ИнтеграцияОбъектовОбластейДанных.ОбработатьДанные");
	
КонецПроцедуры                                                       

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.ОбъектыКОтправке);
	Типы.Добавить(Метаданные.РегистрыСведений.НастройкиУчетныхСистем);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьОповещение(ДанныеОповещения, Настройки) 
	
	ЧастиИмени = СтрРазделить(Настройки.ИмяСертификата, ".");	
	ТипСертификата = ЧастиИмени[ЧастиИмени.ВГраница()];
	
	ЧастиАдреса = СтрРазделить(Настройки.АдресСервиса, "/", Ложь);
	
	Протокол = ЧастиАдреса[0];
	ЧастиАдреса.Удалить(0);
	
	ЧастиИмени = СтрРазделить(ЧастиАдреса[0], ":", Ложь);
	Сервер = ЧастиИмени[0];
	Порт = ?(ЧастиИмени.Количество() = 2, ЧастиИмени[1], Неопределено);
	ЧастиАдреса.Удалить(0);
	
	ПутьНаСервере = СтрСоединить(ЧастиАдреса, "/");
	
	СертификатКлиента = Неопределено;
	Если Настройки.ИспользоватьСертификат И ЗначениеЗаполнено(ТипСертификата) Тогда
		ИмяФайлаСертификата = ПолучитьИмяВременногоФайла(ТипСертификата);
		Настройки.ДанныеСертификата.Записать(ИмяФайлаСертификата);
		СертификатКлиента = Новый СертификатКлиентаФайл(ИмяФайлаСертификата, Настройки.ПарольСертификата);
		Попытка
			УдалитьФайлы(ИмяФайлаСертификата);
		Исключение
		КонецПопытки;
	КонецЕсли;
    Если Настройки.СпособАутентификации = Перечисления.СпособыАутентификации.ОбычнаяПроверка Тогда
        Логин = Настройки.Логин;
        Пароль = Настройки.Пароль;
    Иначе
        Логин = Неопределено;
        Пароль = Неопределено;                                                              
    КонецЕсли; 	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, Новый СертификатыУдостоверяющихЦентровОС);
	Соединение = Новый HTTPСоединение(Сервер, Порт, Логин, Пароль, , 30, ЗащищенноеСоединение);
	Запрос = Новый HTTPЗапрос(ПутьНаСервере);
	Запрос.УстановитьТелоИзСтроки(ДанныеОповещения);
		
    Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстИсключения = СтрШаблон("%1 %2", Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПодтверждения(УчетнаяСистема, ДанныеПодтверждений)
    
    МенеджерУчетнойСистемы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(УчетнаяСистема);
    Идентификаторы = Новый Массив;
    Подтверждения = Новый Соответствие;
    Для Каждого Подтверждение Из ДанныеПодтверждений[ПолеРезультат()] Цикл
        Идентификаторы.Добавить(Подтверждение[ПолеФайл()]);
        Версия = "";
        Если Подтверждение.Свойство(ПолеВерсия()) Тогда
            Версия = Строка(Подтверждение[ПолеВерсия()]);
        КонецЕсли;
        КодВозврата = 0;
        Если Подтверждение.Свойство(ПолеКодВозврата()) Тогда
            КодВозврата = Строка(Подтверждение[ПолеКодВозврата()]);
        КонецЕсли; 
        Подтверждения.Вставить(Подтверждение[ПолеФайл()],
            Новый Структура("Версия, КодВозврата, Ошибка, СообщениеОбОшибке", 
                Версия, КодВозврата, Подтверждение[ПолеОшибка()], Подтверждение[ПолеСообщениеОбОшибке()]));
    КонецЦикла;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    	"ВЫБРАТЬ
        |   ОбъектыКОтправке.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
        |   ОбъектыКОтправке.УчетнаяСистема КАК УчетнаяСистема,
        |   ОбъектыКОтправке.ИдентификаторФайла КАК ИдентификаторФайла,
        |   ОбъектыКОтправке.Обработчик КАК Обработчик,
        |   ЕСТЬNULL(ФайлыОбластейДанных.ФайлCRC32, 0) КАК Версия
        |ИЗ
        |   РегистрСведений.ОбъектыКОтправке КАК ОбъектыКОтправке
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыОбластейДанных КАК ФайлыОбластейДанных
        |       ПО ОбъектыКОтправке.ИдентификаторФайла = ФайлыОбластейДанных.Идентификатор
        |ГДЕ
        |   ОбъектыКОтправке.ИдентификаторОбъекта В(&Идентификаторы)
        |   И ОбъектыКОтправке.УчетнаяСистема = &УчетнаяСистема";
    Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
    Запрос.УстановитьПараметр("УчетнаяСистема", УчетнаяСистема);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    СтандартнаяОбработка = Истина;
    ПодтвержденияОбъектов = Новый Соответствие;
    Пока Выборка.Следующий() Цикл
        Подтверждение = Подтверждения.Получить(Выборка.ИдентификаторОбъекта);
        ПодтвержденияОбъектов.Вставить(Выборка.ИдентификаторОбъекта, Подтверждение);
    КонецЦикла;
    
    МенеджерУчетнойСистемы.ОбработатьПодтверждения(УчетнаяСистема, ПодтвержденияОбъектов, СтандартнаяОбработка);
    Если Не СтандартнаяОбработка Тогда
        Возврат;
    КонецЕсли; 
    Выборка.Сбросить();
    
    Пока Выборка.Следующий() Цикл
        Подтверждение = Подтверждения.Получить(Выборка.ИдентификаторОбъекта);
        Если Не Подтверждение.Ошибка Тогда
            Версия = 0;
            Если ЗначениеЗаполнено(Подтверждение.Версия) 
               И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подтверждение.Версия) Тогда
                Версия = Число(Подтверждение.Версия);
            КонецЕсли; 
            Если Версия = Выборка.Версия И Выборка.Версия <> 0 Тогда
                Если ЗначениеЗаполнено(Выборка.ИдентификаторФайла) Тогда
                    РегистрыСведений.ФайлыОбластейДанных.УстановитьПризнакВременного(Выборка.ИдентификаторФайла);
                КонецЕсли; 
                Отбор = Новый Структура("УчетнаяСистема, ИдентификаторОбъекта", 
                    Выборка.УчетнаяСистема, Выборка.ИдентификаторОбъекта);
                РегистрыСведений.ОбъектыКОтправке.УдалитьЗаписи(Отбор);
            КонецЕсли; 
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

#Область ПодготовкаДанныхКОтправке
    
Функция СохранитьДанныеОбъекта(УчетнаяСистема, ИдентификаторОбъекта, Данные, Обработчик)
    
    ДанныеЗаписи = РегистрыСведений.ОбъектыКОтправке.НовыйДанныеЗаписи();
    ДанныеЗаписи.УчетнаяСистема = УчетнаяСистема;
    ДанныеЗаписи.ИдентификаторОбъекта = ИдентификаторОбъекта;
    Если ЗначениеЗаполнено(Данные) Тогда
        ИдентификаторФайла = РегистрыСведений.ФайлыОбластейДанных.Загрузить(ИдентификаторОбъекта, Данные);
        ДанныеЗаписи.ИдентификаторФайла = ИдентификаторФайла;
        ДанныеЗаписи.Обработчик = Обработчик;
    КонецЕсли; 
    
    РегистрыСведений.ОбъектыКОтправке.ДобавитьЗапись(ДанныеЗаписи);
    
    Возврат ИдентификаторФайла;
	
КонецФункции

Функция СвойстваОбъекта(Идентификатор, Версия, Обработчик)
    
    СвойстваОбъекта = Новый Структура;
    СвойстваОбъекта.Вставить(ПолеФайл(), Идентификатор);
    СвойстваОбъекта.Вставить(ПолеВерсия(), Формат(Версия, "ЧГ=0"));
    СвойстваОбъекта.Вставить(ПолеОбработчик(), Обработчик);
    Возврат СвойстваОбъекта;
    
КонецФункции

Функция ЗаписатьМанифест(ДанныеМанифеста)
    
    Каталог = ПолучитьИмяВременногоФайла();
    СоздатьКаталог(Каталог);
    ИмяФайла = СтрШаблон("%1%2%3",
        Каталог, ПолучитьРазделительПутиСервера(),
        ИнтеграцияОбъектовОбластейДанныхПовтИсп.ИмяФайлаМанифеста());
    
	ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.ОткрытьФайл(ИмяФайла);
    ЗаписатьJSON(ЗаписьJSON, ДанныеМанифеста);
    ЗаписьJSON.Закрыть();
    
    Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти

#Область СтандартныеОтветы
    
Функция ОтветПоУмолчанию()
	
    ОсновнойРаздел = Новый Структура;
    ОсновнойРаздел.Вставить(ПолеКодВозврата(), КодыВозврата().Выполнено);
    ОсновнойРаздел.Вставить(ПолеОшибка(), Ложь);
    ОсновнойРаздел.Вставить(ПолеСообщениеОбОшибке(), "");
    ОтветПоУмолчанию = Новый Структура;
    ОтветПоУмолчанию.Вставить(ПолеОсновнойРаздел(), ОсновнойРаздел);
    ОтветПоУмолчанию.Вставить(ПолеРезультат());
    Возврат ОтветПоУмолчанию;
    
КонецФункции

Процедура УстановитьОшибкуДанных(Ответ, СообщениеОбОшибке)
    
    Ответ[ПолеОсновнойРаздел()][ПолеКодВозврата()] = КодыВозврата().ОшибкаДанных;    
    Ответ[ПолеОсновнойРаздел()][ПолеОшибка()] = Истина;
    Ответ[ПолеОсновнойРаздел()][ПолеСообщениеОбОшибке()] = СообщениеОбОшибке;
    УдалитьПустойРезультат(Ответ);	
    
КонецПроцедуры

Процедура УстановитьВнутреннююОшибку(Ответ, СообщениеОбОшибке)
	
    Ответ[ПолеОсновнойРаздел()][ПолеКодВозврата()] = КодыВозврата().ВнутренняяОшибка;    
    Ответ[ПолеОсновнойРаздел()][ПолеОшибка()] = Истина;
    Ответ[ПолеОсновнойРаздел()][ПолеСообщениеОбОшибке()] = СообщениеОбОшибке;
    УдалитьПустойРезультат(Ответ);
	
КонецПроцедуры

Процедура УстановитьОтсутствиеДанных(Ответ)
	
    Ответ[ПолеОсновнойРаздел()][ПолеКодВозврата()] = КодыВозврата().НеНайдено;    
    УдалитьПустойРезультат(Ответ);	
    
КонецПроцедуры

Процедура УдалитьПустойРезультат(Ответ)
	
    Если Ответ.Свойство(ПолеРезультат()) И Не ЗначениеЗаполнено(Ответ[ПолеРезультат()]) Тогда
        Ответ.Удалить(ПолеРезультат());
    КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ПланированиеЗаданий
    
// Добавляет задание подготовки данных в очередь заданий
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//
Функция ДобавитьЗаданиеПодготовкиДанных(УчетнаяСистема)
    
    КлючЗадания = КлючЗаданияПодготовкиДанных(УчетнаяСистема);
    
    ПараметрыЗапуска = Новый Массив();
    ПараметрыЗапуска.Добавить(УчетнаяСистема);
    
    ПараметрыЗадания = Новый Структура;
    ПараметрыЗадания.Вставить("ОбластьДанных", ОбщегоНазначения.ЗначениеРазделителяСеанса());
    ПараметрыЗадания.Вставить("Использование", Истина);
    ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
    ПараметрыЗадания.Вставить("ИмяМетода", "ИнтеграцияОбъектовОбластейДанных.ПодготовитьДанные");
    ПараметрыЗадания.Вставить("Параметры", ПараметрыЗапуска);
    ПараметрыЗадания.Вставить("Ключ", КлючЗадания);
    ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
    ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
    
    Возврат ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
	
КонецФункции

// Добавляет задание обработки данных в очередь заданий
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//  ИдентификаторФайла - Строка(36) - идентификатор файла для обработки.
//
Функция ДобавитьЗаданиеОбработкиДанных(УчетнаяСистема, ИдентификаторФайла)
    
    КлючЗадания = КлючЗаданияОбработкиДанных(УчетнаяСистема, ИдентификаторФайла);
    
    ПараметрыЗапуска = Новый Массив();
    ПараметрыЗапуска.Добавить(УчетнаяСистема);
    ПараметрыЗапуска.Добавить(ИдентификаторФайла);
    
    ПараметрыЗадания = Новый Структура;
    ПараметрыЗадания.Вставить("ОбластьДанных", ОбщегоНазначения.ЗначениеРазделителяСеанса());
    ПараметрыЗадания.Вставить("Использование", Истина);
    ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
    ПараметрыЗадания.Вставить("ИмяМетода", "ИнтеграцияОбъектовОбластейДанных.ОбработатьДанные");
    ПараметрыЗадания.Вставить("Параметры", ПараметрыЗапуска);
    ПараметрыЗадания.Вставить("Ключ", КлючЗадания);
    ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
    ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
    
    Возврат ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
    
КонецФункции

Функция КлючЗаданияПодготовкиДанных(УчетнаяСистема)
	
    Возврат СтрШаблон("%1/%2", Строка(УчетнаяСистема.УникальныйИдентификатор()), КомандаПолучить());
	
КонецФункции

Функция КлючЗаданияОбработкиДанных(УчетнаяСистема, ИдентификаторФайла)
	
    Возврат СтрШаблон("%1/%2/%3", Строка(УчетнаяСистема.УникальныйИдентификатор()), КомандаОтправить(), ИдентификаторФайла);
	
КонецФункции

#КонецОбласти 

#Область КомандыИнтерфейса
    
Функция КомандаПолучить()
    
    Возврат "get";
    
КонецФункции

Функция КомандаПодтвердить()
    
    Возврат "confirm";
    
КонецФункции

Функция КомандаОтправить()
	
	Возврат "post";
	
КонецФункции

Функция КомандаУстановить()
	
    Возврат "setup";	
	
КонецФункции

#КонецОбласти

#Область ПоляДанных

Функция ПолеРезультат()
	
	Возврат "result";
	
КонецФункции
 
Функция ПолеФайл()
	
    Возврат "file";	
	
КонецФункции

Функция ПолеВерсия()
	
    Возврат "version";	
	
КонецФункции

Функция ПолеОбработчик()
	
    Возврат "handler";	
	
КонецФункции

Функция ПолеКодВозврата()
	
	Возврат "response";
	
КонецФункции

Функция ПолеОшибка()
	
	Возврат "error";
	
КонецФункции

Функция ПолеСообщениеОбОшибке()
	
	Возврат "message";
	
КонецФункции

Функция ПолеХранилище()
	
	Возврат "storage";
	
КонецФункции

Функция ПолеИдентификатор()
	
	Возврат "id";
	
КонецФункции

Функция ПолеОсновнойРаздел()
	
	Возврат "general";
	
КонецФункции
 
#КонецОбласти 

#Область СозданиеПолучениеУчетнойСистемы
    
Функция АвторизованнаяУчетнаяСистема()
	
    УчетнаяСистема = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    	"ВЫБРАТЬ ПЕРВЫЕ 1
        |   НастройкиУчетныхСистем.УчетнаяСистема КАК УчетнаяСистема
        |ИЗ
        |   РегистрСведений.НастройкиУчетныхСистем КАК НастройкиУчетныхСистем
        |ГДЕ
        |   НастройкиУчетныхСистем.Пользователь = &Пользователь
        |   И НЕ НастройкиУчетныхСистем.УчетнаяСистема.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Пользователь",Пользователи.ТекущийПользователь());
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        УчетнаяСистема = Выборка.УчетнаяСистема;
    КонецЕсли;
    
    Возврат УчетнаяСистема;	
	
КонецФункции

Функция НоваяУчетнаяСистема(МетаданныеУчетнойСистемы, МенеджерУчетнойСистемы)
    
    Если ОбщегоНазначения.ЭтоСправочник(МетаданныеУчетнойСистемы) 
        Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеУчетнойСистемы) Тогда
        Возврат МенеджерУчетнойСистемы.СоздатьЭлемент();
    ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеУчетнойСистемы) Тогда
        Возврат МетаданныеУчетнойСистемы.СоздатьДокумент();
    Иначе
        ВызватьИсключение ИнтеграцияОбъектовОбластейДанныхПовтИсп.СловарьПодсистемы().ПоддерживаютсяТипы;
    КонецЕсли;
	
КонецФункции
 
#КонецОбласти

#Область НастройкиУчетнойСистемы

Функция УстановитьНастройки(УчетнаяСистема, ДанныеНастроек, Ответ)
    
    Словарь = ИнтеграцияОбъектовОбластейДанныхПовтИсп.СловарьПодсистемы();
    ПотокДанных = ФайловыеПотоки.ОткрытьДляЧтения(ДанныеНастроек);
    Если ПотокДанных.Размер() = 0 Тогда
        УстановитьОшибкуДанных(Ответ, Словарь.НастройкиНеЗаданы);
        Возврат Ответ;
    КонецЕсли; 
    Настройки = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокДанных);
    Если Не ЗначениеЗаполнено(УчетнаяСистема) Тогда
        УчетнаяСистемаОпределена = Ложь;
        ИмяСвойства = "type";
        Если Настройки.Свойство(ИмяСвойства) Тогда
            ТипУчетнойСистемы = Настройки[ИмяСвойства];
        Иначе
            УстановитьОшибкуДанных(Ответ, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                Словарь.ОтсутствуетСвойство, ИмяСвойства)); 
            Возврат Ответ;
        КонецЕсли;        
        Для Каждого Тип Из Метаданные.ОпределяемыеТипы.УчетныеСистемыИнтеграцииОбластейДанных.Тип.Типы() Цикл
            МетаданныеУчетнойСистемы = Метаданные.НайтиПоТипу(Тип);
            ИмяМетаданныхСистемы = МетаданныеУчетнойСистемы.ПолноеИмя();
            МенеджерУчетнойСистемы = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМетаданныхСистемы);
            Если НРег(МенеджерУчетнойСистемы.ТипУчетнойСистемы()) = НРег(ТипУчетнойСистемы) Тогда
                УчетнаяСистемаОпределена = Истина;
                Прервать;
            КонецЕсли; 
        КонецЦикла;
        Если Не УчетнаяСистемаОпределена Тогда
            УстановитьОшибкуДанных(Ответ, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            Словарь.НеОпределенаУчетнаяСистемаПоТипу, ИмяСвойства));
                Возврат Ответ;
        КонецЕсли;
        Объект = НоваяУчетнаяСистема(МетаданныеУчетнойСистемы, МенеджерУчетнойСистемы);
        ИмяСвойства = "name";
        Если Настройки.Свойство(ИмяСвойства) Тогда
            Объект.Наименование = Настройки[ИмяСвойства];
        КонецЕсли; 
        Объект.Записать();
        УчетнаяСистема = Объект.Ссылка;
        МенеджерНастроек = РегистрыСведений.НастройкиУчетныхСистем.СоздатьМенеджерЗаписи();
        МенеджерНастроек.УчетнаяСистема = УчетнаяСистема;
        МенеджерНастроек.Пользователь = Пользователи.ТекущийПользователь();
        МенеджерНастроек.Записать();
    Иначе
        МетаданныеУчетнойСистемы = УчетнаяСистема.Метаданные();
        МенеджерУчетнойСистемы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(УчетнаяСистема);
        МенеджерНастроек = РегистрыСведений.НастройкиУчетныхСистем.СоздатьМенеджерЗаписи();
        МенеджерНастроек.УчетнаяСистема = УчетнаяСистема;
        МенеджерНастроек.Прочитать();
        Если Не МенеджерНастроек.Выбран() Тогда
            МенеджерНастроек.УчетнаяСистема = УчетнаяСистема;
            МенеджерНастроек.Пользователь = Пользователи.ТекущийПользователь();
        КонецЕсли; 
    КонецЕсли;
    
    ЗаполняемыеНастройки = ЗаполняемыеНастройки();
    Для Каждого Настройка Из ЗаполняемыеНастройки Цикл
        ПутьНастройки = СтрРазделить(Настройка.Путь, ".", Ложь);
        Значение = Настройки;
        ЗначениеОпределено = Истина;
        Для Каждого ЧастьПути Из ПутьНастройки Цикл
            Если Значение.Свойство(ЧастьПути) Тогда
                Значение = Значение[ЧастьПути];
            Иначе
                ЗначениеОпределено = Ложь;
                Прервать;
            КонецЕсли; 
        КонецЦикла;
        Если Не ЗначениеОпределено Тогда
            Продолжить;
        КонецЕсли; 
        Значение = ПривестиЗначение(Настройка.Тип, Значение);
        Если Настройка.БезопасноеХранение Тогда
            УстановитьПривилегированныйРежим(Истина);
            ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(УчетнаяСистема, Значение, Настройка.ИмяСвойства);
            УстановитьПривилегированныйРежим(Ложь);
        ИначеЕсли Метаданные.РегистрыСведений.НастройкиУчетныхСистем.Ресурсы.Найти(Настройка.ИмяСвойства) <> Неопределено Тогда
            МенеджерНастроек[Настройка.ИмяСвойства] = Значение;
        КонецЕсли; 
    КонецЦикла;
    МенеджерНастроек.Записать();
    
    ПотокДанных = ФайловыеПотоки.ОткрытьДляЧтения(ДанныеНастроек);
    МенеджерУчетнойСистемы.УстановитьНастройки(УчетнаяСистема, ПотокДанных, 
        Ответ[ПолеОсновнойРаздел()][ПолеКодВозврата()], 
        Ответ[ПолеОсновнойРаздел()][ПолеОшибка()], 
        Ответ[ПолеОсновнойРаздел()][ПолеСообщениеОбОшибке()]);
        
    УдалитьПустойРезультат(Ответ);
    Возврат Ответ;
	
КонецФункции
    
Функция ЗаполняемыеНастройки(КлючиНастроек = Неопределено)
	
	Настройки = Новый ТаблицаЗначений;
    Настройки.Колонки.Добавить("Путь");
    Настройки.Колонки.Добавить("ИмяСвойства");
    Настройки.Колонки.Добавить("Тип");
    Настройки.Колонки.Добавить("БезопасноеХранение");
    
    ВозвращаемыеНастройки = Настройки.Скопировать();

    ДобавитьНастройку(Настройки, "use_notices", "ОповещатьОбИзменениях", Новый ОписаниеТипов("Булево"));
    ДобавитьНастройку(Настройки, "notice_settings.url", "АдресСервиса", Новый ОписаниеТипов("Строка"));
    ДобавитьНастройку(Настройки, "notice_settings.authentication_type", "СпособАутентификации", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыАутентификации"));
    ДобавитьНастройку(Настройки, "notice_settings.login", "Логин", Новый ОписаниеТипов("Строка"));
    ДобавитьНастройку(Настройки, "notice_settings.password", "Пароль", Новый ОписаниеТипов("Строка"), Истина);
    ДобавитьНастройку(Настройки, "notice_settings.use_certificate", "ИспользоватьСертификат", Новый ОписаниеТипов("Булево"));
    ДобавитьНастройку(Настройки, "notice_settings.certificate_name", "ИмяСертификата", Новый ОписаниеТипов("Строка"));
    ДобавитьНастройку(Настройки, "notice_settings.certificate_password", "ПарольСертификата", Новый ОписаниеТипов("Строка"), Истина);
    ДобавитьНастройку(Настройки, "notice_settings.certificate_data", "ДанныеСертификата", Новый ОписаниеТипов("ДвоичныеДанные"), Истина);
    ДобавитьНастройку(Настройки, "notice_settings.use_sign", "ПодписыватьДанные", Новый ОписаниеТипов("Булево"));
    ДобавитьНастройку(Настройки, "notice_settings.sign_key", "КлючПодписи", Новый ОписаниеТипов("Строка"), Истина);
    
    Настройки.Индексы.Добавить("БезопасноеХранение");
    
    Если КлючиНастроек = Неопределено Тогда
        Возврат Настройки;
    Иначе
        Для Каждого Настройка Из Настройки Цикл
            Если КлючиНастроек.Найти(Настройка.ИмяСвойства) <> Неопределено Тогда
                НоваяСтрока = ВозвращаемыеНастройки.Добавить();
                ЗаполнитьЗначенияСвойств(НоваяСтрока, Настройка);
            КонецЕсли; 
        КонецЦикла; 
        ВозвращаемыеНастройки.Индексы.Добавить("БезопасноеХранение");
        Возврат ВозвращаемыеНастройки;
    КонецЕсли; 
	
КонецФункции

Процедура ДобавитьНастройку(Настройки, Путь, ИмяСвойства, Тип, БезопасноеХранение = Ложь)
	
	НоваяНастройка = Настройки.Добавить();
    НоваяНастройка.Путь = Путь;
    НоваяНастройка.ИмяСвойства = ИмяСвойства;
    НоваяНастройка.Тип = Тип;
    НоваяНастройка.БезопасноеХранение = БезопасноеХранение;
	
КонецПроцедуры

Функция ПривестиЗначение(ОписаниеТипа, Значение)
    
    Если ОписаниеТипа.СодержитТип(Тип("ДвоичныеДанные")) И ЗначениеЗаполнено(Значение) Тогда
        Значение = ПолучитьДвоичныеДанныеИзBase64Строки(Значение);
    ИначеЕсли ОписаниеТипа.СодержитТип(Тип("ПеречислениеСсылка.СпособыАутентификации")) Тогда
        Если НРег(Значение) = НРег("basic") Тогда
            Значение = Перечисления.СпособыАутентификации.ОбычнаяПроверка;
        ИначеЕсли НРег(Значение) = НРег("anonymous") Тогда
            Значение = Перечисления.СпособыАутентификации.Анонимный;
        КонецЕсли; 
    КонецЕсли; 
    
    Значение = ОписаниеТипа.ПривестиЗначение(Значение);
    
    Возврат Значение;
    
КонецФункции

#КонецОбласти 

#Область Криптография

Процедура ПодписатьДанные(СвойстваОбъекта, Ключ)
	
    Свойства = Новый Массив;
    Данные = Новый Массив;
    Для Каждого Свойство Из СвойстваОбъекта Цикл
        Свойства.Добавить(Свойство.Ключ);
        Данные.Добавить(Свойство.Значение);
    КонецЦикла; 
    СвойстваОбъекта.Вставить("sign_order", СтрСоединить(Свойства, ","));
    СвойстваОбъекта.Вставить("sign", РаботаВМоделиСервисаБТС.Подпись(Ключ, СтрСоединить(Данные,"")));
	
КонецПроцедуры
    
#КонецОбласти 

#КонецОбласти 
