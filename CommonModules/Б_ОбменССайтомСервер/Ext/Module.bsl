

#Область ПроцедурыИФункцииПоРаботеОнлайнОбменаДокументов

			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С LONG PULLING        //
			/////////////////////////////////////////////////////////////////
			
			
// Процедура запускается фоновым заданием. Необходима для запуска реал тайм обемена заказов
Процедура ВыполнениеLongPullingФоновыхЗаданий() Экспорт
	
	Если НЕ Константы.Б_ИспользоватьМеханизмОбменаВРеальномВремени.Получить() тогда
		Сообщить("Механизм обмена в реальном времени отключен");
		Возврат;	
	КонецЕсли;
	
	Если ЭтоКопияБазы() Тогда
		Сообщить("Это копия базы. Выполнение в режиме реального времени запрещено.");
		Возврат;
	КонецЕсли;
	
	НужныйПлан = Константы.Б_НастройкаОбменаДокументовВРеальномВремени.Получить();	
	
	Если ЗначениеЗаполнено(НужныйПлан) тогда

		Параметры = Новый Структура;
		НастройкиУспешноДобавлены = ДобавитьОсновныеНастройкиВПараметры(НужныйПлан, Параметры);
		
		Если НЕ НастройкиУспешноДобавлены тогда
			Возврат;
		КонецЕсли;
		
		НастройкиУспешноДобавлены = ДобавитьНастройкиОбменаВПараметры(НужныйПлан, Параметры);
		
		Если НЕ НастройкиУспешноДобавлены тогда
			Возврат;		
		КонецЕсли;
		
		Продолжаем = Истина;
		
		Пока Продолжаем Цикл
			
			ПустаяДата 	= Дата("01.01.0001 0:00:00");
			
			ТекДата  	= НачалоДня(ТекущаяДата());
			ТекВремя 	= ТекущаяДата() - ТекДата;
			
			НашеРегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.Б_ЗаданиеОбменССайтомОнлайн);
			НашеРасписание = НашеРегламентноеЗадание.Расписание;
			
			лВремяНачала= НашеРасписание.ВремяНачала 	- ПустаяДата;
			лВремяКонца = НашеРасписание.ВремяКонца 	- ПустаяДата;
			
			Если  ((ТекВремя < лВремяНачала И ЗначениеЗаполнено(НашеРасписание.ВремяНачала)) 
				ИЛИ (ТекущаяДата() < НашеРасписание.ДатаНачала И ЗначениеЗаполнено(НашеРасписание.ВремяНачала))
				ИЛИ (ТекущаяДата() > НашеРасписание.ДатаКонца И ЗначениеЗаполнено(НашеРасписание.ДатаКонца))
				ИЛИ (ТекВремя > лВремяКонца И ЗначениеЗаполнено(НашеРасписание.ВремяКонца))) И Б_ОбменССайтомКлиентСервер.ПолучитьПараметрыСоединения().Тип <> "Файл" тогда
				
				Продолжаем = Ложь;
				
			КонецЕсли;
			
			НастройкиПодключения = Новый Структура;
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			Если ПолучитьНастройкиПодключения(НастройкиПодключения, Параметры, Параметры.АдресСайта + "?type=listen&version=2.1") Тогда
				
				Результат = ВыполнениеLongPullingРекурсивно(Параметры, НастройкиПодключения);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает ответ от сайта при реал тайм обмене. Если ответ с кодом 302 - происходит переадресация 
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  НастройкиПодключения - 	 Структура с настройками подключения к сайту 
// Возвращаемое значение:
//   Истина, если обмен успешно завершен 
Функция ВыполнениеLongPullingРекурсивно(ПараметрыОбмена, НастройкиПодключения)
	
	Соединение = ПолучитьСоединениеССервером(НастройкиПодключения, ПараметрыОбмена);
	
	Если Соединение = Неопределено Тогда
		
		СообщитьПодробно("Авторизация не выполнена.", ПараметрыОбмена, Истина, Истина);	
		Возврат Ложь;
		
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		ОтветСервера = Соединение.Получить(НастройкиПодключения.АдресСкрипта, ИмяФайлаОтвета);
	Исключение
		
		СообщитьПодробно("Не удалось получить данные с сервера на этом подключении в реал-тайм обмене. ", ПараметрыОбмена, Истина, Истина)
		
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Если ОтветСервера <> Неопределено тогда
		
		Если ОтветСервера.КодСостояния = 200 тогда
			
			ВыполнитьОбмен(ПараметрыОбмена.ссылка);
			
		ИначеЕсли ОтветСервера.КодСостояния = 304 тогда
	
			Возврат Истина;
		
		ИначеЕсли ОтветСервера.КодСостояния = 302 тогда
			
			Переадресация = ОтветСервера.заголовки.получить("Location");			
			
			НастройкиПодключенияПереадресации = Новый Структура;
			
			Если ПолучитьНастройкиПодключения(НастройкиПодключенияПереадресации, ПараметрыОбмена, Переадресация) Тогда
				
				Результат = ВыполнениеLongPullingРекурсивно(ПараметрыОбмена, НастройкиПодключенияПереадресации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеСПодпискойНаСобытия

			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ С ПОДПИСКОЙ НА СОБЫТИЯ          //
			/////////////////////////////////////////////////////////////////

// Процедура - Процедура регистрирует изменения при копировании справочников и документов
//
Процедура ЗарегистрироватьИзмененияПриКопированииСправочниковДокументов(Источник, ОбъектКопирования) Экспорт
	                    
	лМетаданные = Источник.Метаданные();
	ПризнакИспользованияОР 	= Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	
	Если Метаданные.ОбщиеРеквизиты.Б_Идентификатор.Состав.Найти(лМетаданные).Использование = ПризнакИспользованияОР тогда
		Источник.Б_Идентификатор = "";
	КонецЕсли;
	
	Если Метаданные.ОбщиеРеквизиты.Б_НомерВерсии.Состав.Найти(лМетаданные).Использование = ПризнакИспользованияОР тогда
		Источник.Б_НомерВерсии = "";
	КонецЕсли;
	
	Если Метаданные.ОбщиеРеквизиты.Б_ДатаДокумента.Состав.Найти(лМетаданные).Использование = ПризнакИспользованияОР тогда
		Источник.Б_ДатаДокумента = "";
	КонецЕсли;
	
КонецПроцедуры                             
			
// Процедура - Процедура регистрирует изменения перед записью регистров сведений и накоплений
//  
Процедура ЗарегистрироватьИзмененияПередЗаписьюРегистраСведенийДляОбменаССайтами(Источник, Отказ, Замещение) Экспорт
	ЗарегистрироватьИзменения(Источник, Замещение);
КонецПроцедуры

// Процедура - Процедура регистрирует изменения при записи справочников и документов
//  
Процедура ЗарегистрироватьИзмененияПриЗаписиСправочникаДокументаДляОбменаССайтами(Источник, Отказ) Экспорт
	ЗарегистрироватьИзменения(Источник);
КонецПроцедуры

// Общая процедура регистрации объектов 1С
//
Процедура ЗарегистрироватьИзменения(Объект, Замещение = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта 		 = ТипЗнч(Объект);
	ИзмененияЗарегестрированы = Ложь;
	
	// Регистрация типовых справочников
	Если ТипОбъекта = Тип("СправочникОбъект.КартыЛояльности") 
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.СкидкиНаценки") 
		ИЛИ ТипОбъекта = Тип("ПланВидовХарактеристикОбъект.ДополнительныеРеквизитыИСведения") тогда 
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.УпаковкиЕдиницыИзмерения") тогда 
		
		
		Если Объект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук Тогда
		
			ИзмененияЗарегестрированы = Истина;
			
			МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		Иначе
			
			
			ИзмененияЗарегестрированы = Истина;
			
			МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
			
			ТипВладельца = ТипЗнч(Объект.Владелец);
			
			Если ТипВладельца = Тип("СправочникСсылка.Номенклатура") Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
				
			Иначе
				
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Номенклатура.Ссылка
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	Номенклатура.НаборУпаковок = &НаборУпаковок");
					
				Запрос.УстановитьПараметр("НаборУпаковок", Объект.Владелец);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Файлы") ИЛИ ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
		ПроверитьОбъектНаУчастиеВСвойствахИДобавитьСвойствоВУзел(МассивУзловТовары, ТипЗнч(Объект.Ссылка));	
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Б_ПользовательскиеГруппыТоваров") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Б_ПользовательскиеГруппыТоваровТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВремТовары
		|ИЗ
		|	Справочник.Б_ПользовательскиеГруппыТоваров.Товары КАК Б_ПользовательскиеГруппыТоваровТовары
		|ГДЕ
		|	Б_ПользовательскиеГруппыТоваровТовары.Ссылка В ИЕРАРХИИ(&Раздел)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ВремТовары.Номенклатура
		|			ИЗ
		|				ВремТовары)
		|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремТовары");
		
		Запрос.УстановитьПараметр("Раздел", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
		КонецЦикла;	
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ДоговорыКонтрагентов") 
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.НаправленияДеятельности")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.СтруктураПредприятия")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Валюты")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Склады")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.СтраныМира")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.СегментыНоменклатуры")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.СегментыПартнеров")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Организации")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Проекты") Тогда
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		ПроверитьОбъектНаУчастиеВСвойствахИДобавитьСвойствоВУзел(МассивУзловТовары, ТипЗнч(Объект.Ссылка));	
		
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ЗначенияСвойствОбъектов") ИЛИ ТипОбъекта = Тип("СправочникОбъект.ЗначенияСвойствОбъектовИерархия")Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ВидыКартЛояльности") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КартыЛояльности.Ссылка КАК КартаЛояльности
		|ИЗ
		|	Справочник.КартыЛояльности КАК КартыЛояльности
		|ГДЕ
		|	КартыЛояльности.Владелец = &ВидКарты";
		Запрос.УстановитьПараметр("ВидКарты",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.КартаЛояльности);
		КонецЦикла;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.УсловияПредоставленияСкидокНаценок") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СкидкиНаценкиУсловияПредоставления.Ссылка КАК Скидка
		|ИЗ
		|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
		|ГДЕ
		|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления = &Условие";
		Запрос.УстановитьПараметр("Условие",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Скидка);
		КонецЦикла;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") тогда
		
			МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
			
			ПроверитьОбъектНаУчастиеВСвойствахИДобавитьСвойствоВУзел(МассивУзловТовары, ТипЗнч(Объект.Ссылка));	

		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Партнеры") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер";
		Запрос.УстановитьПараметр("Партнер",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Контрагент);
		КонецЦикла;
		
		ПроверитьОбъектНаУчастиеВСвойствахИДобавитьСвойствоВУзел(МассивУзловТовары, ТипЗнч(Объект.Ссылка));	
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
		
			МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Номенклатура);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры")Тогда			
		
		ИзмененияЗарегестрированы = Истина;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		
			МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
			
			Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда 
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
				
			Иначе
				
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
				|	И (НЕ Номенклатура.ЭтоГруппа)");
				
				Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.Владелец);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
																																						
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ВидыНоменклатуры") Тогда
		
		ИзмененияЗарегестрированы = Истина;
																																																																																																									
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
																																													
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ВидНоменклатуры = &Группа");
																																											
		Запрос.УстановитьПараметр("Группа", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
			
		КонецЦикла;
		
	//Регистрация регистров  
	
	//ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЖурналФискальныхОпераций") тогда
	//
	//	МассивУзловЗаказы = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(,Истина);
	//	
	//	Для каждого Запись Из Объект Цикл
	//		
	//		лТипДокумента = ТипЗнч(Запись.ДокументОснование);
	//		
	//		Если лТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") ИЛИ лТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") тогда
	//			
	//			Выборка = РегистрыСведений.Б_ОчередьПечати.Выбрать(Новый Структура("Документ", Запись.ДокументОснование));
	//			Пока Выборка.Следующий() Цикл
	//				лЗаписьОЧеке = Выборка.ПолучитьМенеджерЗаписи();
	//				лЗаписьОЧеке.Статус = 3;
	//				лЗаписьОЧеке.Записать();
	//			КонецЦикла;
	//			
	//			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Запись.ДокументОснование);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.СвободныеОстатки")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.НоменклатураСегмента")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПоставщикам")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ШтрихКодыНоменклатуры") Тогда 
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(Истина);
		
		Если Замещение Тогда
		
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				УстановитьПривилегированныйРежим(Ложь);
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				Если ЗначениеЗаполнено(Запись.Номенклатура) тогда 
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			Если ЗначениеЗаполнено(Запись.Номенклатура) тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.Б_СвойстваТоваровДокументов") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловЗаказы = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(,Истина);
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Запись.Документ);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.СостоянияЗаказовКлиентов") Тогда 
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловЗаказы = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(,Истина);
		
		Для каждого Запись Из Объект Цикл
			Если ТипЗнч(Запись.Заказ) = Тип("ДокументСсылка.ЗаказКлиента") тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Запись.Заказ);
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказКлиента") ИЛИ ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг") 
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") ИЛИ ТипОбъекта = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") 
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловЗаказы = Б_ОбменССайтомСерверПовтИсп.ПолучитьМассивУзловДляРегистрации(,Истина);
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ ИзмененияЗарегестрированы тогда
		// Регистрация пользовательских справочников
		Попытка
			Выборка = планыОбмена.Б_ОбменССайтом.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ОбменПользовательскимиСправочниками Тогда
					
					СохраненныеНастройки = Выборка.СохраненныеНастройки.Получить();
					
					ВремТзн = СохраненныеНастройки.ПользовательскиеСправочники.ВыгружаемыеПоляСправочников.Скопировать();
					ВремТзн.Свернуть("Справочник");

					Для Каждого ТекСправочник из ВремТзн Цикл
						
						Если ТипОбъекта = Тип("СправочникОбъект." + ТекСправочник.Справочник) тогда
							
							ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Объект.Ссылка);
							
						КонецЕсли;
							
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		Исключение
			Сообщить("Не удалось зарегистрировать изменение для элемента " + Строка(Объект.Ссылка) + ". Элемент не будет отправлен на сайт Битрикс в режиме изенений.");
			Сообщить(ОписаниеОшибки()); 
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция - возвращает общий массив узлов обмена сайтом
// Возвращаемое значение:
//   - Массив узлов обмена с сайтом
функция ПолучениеОбщегоМассиваУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Б_ОбменССайтом.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.Б_ОбменССайтом КАК Б_ОбменССайтом
	|ГДЕ
	|	(Б_ОбменССайтом.Ссылка <> &ЭтотУзел)	
	|";
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Б_ОбменССайтом.УзелОбменаЭтойИБСервер());
	МассивУзлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат МассивУзлов; 
	
КонецФункции

// Функция - Проверяет объект на участие в свойствах и добавляет свойство в узел
//
// Параметры:
//  ТипОбъекта	 - 	 Тип изменяемого гобъекта 
// Возвращаемое значение:
//   Истина, если такие объекты есть 
Функция ПроверитьОбъектНаУчастиеВСвойствахИДобавитьСвойствоВУзел(МассивУзловТовары, ТипОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаСвойств = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСвойств.Следующий() Цикл
		
		Если ВыборкаСвойств.ТипЗначения.СодержитТип(ТипОбъекта) тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, ВыборкаСвойств.Свойство);
		КонецЕсли;
		
	КонецЦикла;
	 
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеПоРаботеСXDTO

			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ С РАБОТЕ С XDTO          		//
			/////////////////////////////////////////////////////////////////

// Функция - возвращает тип объекта XDTO
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  Объект			 - 	 Наименование объекта XDTO 
//  Сложный			 - 	 Если в схеме XSD тип объекта XDTO явно не указан, тогда Истина. По умолчанию "Ложь"  
//  ВладелецТип		 - 	 Тип владелеца типа ообъекта XDTO. По умолчанию "Неопределено" 
// Возвращаемое значение:
//   Тип объекта XDTO 
Функция ПолучениеТипОбъектаXDTO(ПараметрыОбмена, Объект, Сложный = Ложь, ВладелецТип = Неопределено) Экспорт
	
	Если Сложный тогда
		
		Возврат	ВладелецТип.Свойства.Получить(Объект).Тип;
		
	иначе
		
		Возврат ПараметрыОбмена.МояФабрикаXDTO.Тип(ПараметрыОбмена.ПространствоИмен,Объект);
		
	КонецЕсли;
	
КонецФункции

// Процедура - добавляет значение реквизита в объект XDTO "ЗначенияРеквизитов"
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена  
//  ЗначенияРеквизитов		 - 	 Объект XDTO "ЗначенияРеквизитов"  
//  ТипpЗначенияРеквизита	 - 	 Тип объекта XDTO "ЗначениеРеквизита" 
//  ИмяРеквизита			 - 	 Наименование реквизита, которое хранит значение 
//  Значение				 - 	 Значение, которое нужно передать в свойство 
Процедура ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, ЗначенияРеквизитов, ТипЗначенияРеквизита, ИмяРеквизита, Значение) Экспорт
	
	ЗначениеРеквизита 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(ТипЗначенияРеквизита);
	
	ЗначениеРеквизита.Наименование 	= ИмяРеквизита;
	ЗначениеРеквизита.Значение.добавить(XMLСтрока(Значение));
	
	ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
	
КонецПроцедуры

Процедура ДобавитьЗначениеСвойстваXDTO(ПараметрыОбмена, ЗначенияСвойств, ТипЗначенияСвойства, ИдСвойства, НаименованиеСвойства, Значение) Экспорт
	
	ЗначенияСвойства 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(ТипЗначенияСвойства);
	
	ЗначенияСвойства.Ид 			= ИдСвойства;
	ЗначенияСвойства.Наименование 	= НаименованиеСвойства;
	ЗначенияСвойства.Значение.добавить(XMLСтрока(Значение));
	
	ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
	
КонецПроцедуры


// Функция - возвращает объект XDTO "Адрес", заполненный данными из представления адреса 1С
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  ПредставлениеАдреса	 - 	 Предоставление адреса в 1С 
// Возвращаемое значение:
//   бъект XDTO "Адрес" 
Функция ПолучитьАдресXDTO(ПараметрыОбмена, ПредставлениеАдреса) Экспорт
	
	XDTOАдресТип 				= ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Адрес");
	XDTOАдресноеПолеТип 		= ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "АдресноеПоле", Истина, XDTOАдресТип);
	
	XDTOАдрес					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOАдресТип);
	
	XDTOАдрес.Представление 	= ПредставлениеАдреса.Представление;
	
	
	
	СписокПолей = ПолучитьСписокПолейПоСтроке(ПредставлениеАдреса.ЗначенияПолей);
	
	Для Каждого ПолеКИ Из СписокПолей Цикл
		
		Если НЕ ЗначениеЗаполнено(ПолеКИ.Значение) тогда
			Продолжить;
		КонецЕсли;
				
		Если ПолеКИ.Представление = "Индекс" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Почтовый индекс", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "НаселенныйПункт" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Населенный пункт", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Регион" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Регион", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Страна" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Страна", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Район" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Район", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Город" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Город", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Улица" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Улица", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Дом" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Дом", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Корпус" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Корпус", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Квартира" Тогда
			ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Квартира", ПолеКИ.Значение);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат XDTOАдрес; 
	
КонецФункции

Функция ПолучитьСписокПолейПоСтроке(пСтрокаПолей)
	
	// Для совместимости с новой БСП
	СтрокаПолей = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(пСтрокаПолей);
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
		Если Лев(Стр, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
			КонецЕсли;
		Иначе
			Поз = Найти(Стр, "=");
			Если Поз <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура - добавляет адресное поле XDTO в объект XDTO "Адрес"
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  XDTOАдрес			 - 	 Объект XDTO "Адрес" 
//  XDTOАдресноеПолеТип	 - 	 Тип объекта XDTO "АдресноеПоле" 
//  ТипПоля				 - 	 Тип поля 
//  Значение			 - 	 Значение поля 
Процедура ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, ТипПоля, Значение)
	
	XDTOАдресноеПоле			= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOАдресноеПолеТип);
	XDTOАдресноеПоле.Тип      	= ТипПоля;
	XDTOАдресноеПоле.Значение 	= Значение;  	
	XDTOАдрес.АдресноеПоле.Добавить(XDTOАдресноеПоле);	
	
КонецПроцедуры

// Функция - возвращает заполненный объект XDTO "Контакт" по указанным данным 
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена  
//  XDTOКонтактТип			 - 	 Тип объекта XDTO "Контакт" 
//  ВидКонтакта				 - 	 Вид контакта: Телефон рабочий, Электронная почта и тд.. 
//  ПредставлениеКонтакта	 - 	 Значение контакта 
// Возвращаемое значение:
//   Объект XDTO "Контакт" 
Функция ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, ВидКонтакта, ПредставлениеКонтакта) Экспорт

	XDTOКонтакт				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКонтактТип);

	XDTOКонтакт.Тип 		= ВидКонтакта;
	XDTOКонтакт.Значение 	= ПредставлениеКонтакта;
	
	Возврат XDTOКонтакт;
	
КонецФункции

// Функция - возвращает Объект XDTO "КоммерческаяИнформация"
//
// Параметры:
//  ПараметрыОбмена					 - 	 Настройки узла обмена  
//  XDTOКоммерческаяИнформацияТип	 - 	 Тип объекта XDTO "КоммерческаяИнформация" 
// Возвращаемое значение:
//   Объект XDTO "КоммерческаяИнформация" 
Функция ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип) Экспорт
	
	XDTOКоммерческаяИнформация 					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКоммерческаяИнформацияТип); 
	XDTOКоммерческаяИнформация.ВерсияСхемы 		= ПараметрыОбмена.ВерсияСхемы;
	XDTOКоммерческаяИнформация.Ид 				= ПараметрыОбмена.Идентификатор;
	XDTOКоммерческаяИнформация.ДатаФормирования = XMLСтрока(ТекущаяДата());
	
	возврат XDTOКоммерческаяИнформация;
	
КонецФункции

// Функция - проверяет, является ли у указанного объекта XDTO тип "СписокXDTO"
//
// Параметры:
//  ОбъектXDTO	 - 	 Проверяемый объект XDTO 
// Возвращаемое значение:
//   Истина, если это список 
Функция ЭтоСписокXDTO(ОбъектXDTO) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция - проверяет, содержит ли указанный объект XDTO указанное свойство
//
// Параметры:
//  ОбъектXDTO	 - 	 Объект XDTO в котром нужно проверить свойство 
//  Свойство	 - 	 Наименование проверяемого свойства 
// Возвращаемое значение:
//   Истина, если содержит свойство 
Функция ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство) Экспорт
	
	ЕстьСвойство = ОбъектXDTO.Свойства().Получить(Свойство) <> Неопределено
		И ОбъектXDTO[Свойство] <> Неопределено;
		
	Возврат ЕстьСвойство;
	
КонецФункции

// Функция - проверяет, заполнено ли указанное свойство объекта XDTO
//
// Параметры:
//  СвойствоXDTO - 	 проверяемое свойство объекта XDTO 
// Возвращаемое значение:
//   Истина, если свойство заполнено
Функция СвойствоXDTOЗаполнено(СвойствоXDTO)Экспорт
	
	СвойствоЗаполнено = Истина;
	
	Если ТипЗнч(СвойствоXDTO) = Тип("ОбъектXDTO")
		ИЛИ ТипЗнч(СвойствоXDTO) = Тип("СписокXDTO")
		ИЛИ НЕ ЗначениеЗаполнено(СвойствоXDTO) Тогда
		
		СвойствоЗаполнено = Ложь;
		
	КонецЕсли;
	
	Возврат СвойствоЗаполнено;
	
КонецФункции

// Функция - функция преобразует XML файл в XDTO объект "КоммерческаяИнформация"
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  СтрокаXML		 - 	 Содержимое XML файла 
// Возвращаемое значение:
//   Объект XDTO "КоммерческаяИнформация" 
Функция ДанныеЗаказовВXDTO(ПараметрыОбмена,СтрокаXML) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектXML.УстановитьСтроку(СтрокаXML);
		
	Исключение
		
		СообщитьПодробно("Не удалось прочитать XML.", ПараметрыОбмена);	
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		КоммерческаяИнформацияXDTO = ПараметрыОбмена.МояФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		
		СообщитьПодробно("Не удалось прочитать XML.", ПараметрыОбмена);	
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Функция - получает массив объектов, содержащиеся в у казанно списке XDTO
//
// Параметры:
//  СписокXDTO	 - 	Объект XDTO с типом "СписокXDTO", из которого нужно извлекать объекты XDTO  
// Возвращаемое значение:
//   Массив объектов XDTO 
Функция ПолучитьМассивОбъектовСпискаXDTO(СписокXDTO) Экспорт
	
	МассивОбъектовXDTO = Новый Массив;
	
	Если ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из СписокXDTO Цикл 
			МассивОбъектовXDTO.Добавить(ОбъектXDTO);
		КонецЦикла;
		
	Иначе
		МассивОбъектовXDTO.Добавить(СписокXDTO);
	КонецЕсли;
	
	Возврат МассивОбъектовXDTO;
	
КонецФункции

// Функция - получает значение по свойству объекта XDTO
//
// Параметры:
//  ОбъектXDTO	 - 	 Объект XDTO, из которого нужно получить свойство  
//  Свойство	 - 	 Наименование свойства объекта XDTO 
//  ТипСвойства	 - 	 Тип возвращаемого значения 
// Возвращаемое значение:
//  Искомое значение свойства  
Функция ПолучитьЗначениеПоСвойству(ОбъектXDTO, Свойство, ТипСвойства) Экспорт
	
	Результат = "";
	
	Если ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство)Тогда
		Если СвойствоXDTOЗаполнено(ОбъектXDTO[Свойство]) тогда
			Результат = XMLЗначение(Тип(ТипСвойства), ОбъектXDTO[Свойство]);	
		КонецЕсли;
	КонецЕсли;		
	
	Возврат Результат;	
	
КонецФункции

// Функция - разбирает в таблицу значений  объект XDTO "ЗначенияРеквизитов" 
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена  
//  ЗначенияРеквизитовXDTO	 - 	 Объект XDTO, хранящий информацию о значениях реквизитов 
// Возвращаемое значение:
//   Таблица значений с значениями скидок             
Функция ОбработатьЗначенияРеквизитовXDTO(ПараметрыОбмена, ЗначенияРеквизитовXDTO)Экспорт
	
	тзнЗначенияРеквизитов = Новый ТаблицаЗначений;
	тзнЗначенияРеквизитов.Колонки.Добавить("Наименование");
	тзнЗначенияРеквизитов.Колонки.Добавить("Значение");
	
	
	Если ОбъектXDTOСодержитСвойство(ЗначенияРеквизитовXDTO, "ЗначениеРеквизита") Тогда
		
		ЗначениеРеквизитаXDTO = ЗначенияРеквизитовXDTO.ЗначениеРеквизита;
		
		Если ЭтоСписокXDTO(ЗначениеРеквизитаXDTO) тогда
			Для каждого ТекЗначениеРеквизита из ЗначениеРеквизитаXDTO Цикл
				
				НовСтр 				= тзнЗначенияРеквизитов.Добавить();
				НовСтр.Наименование = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекЗначениеРеквизита, "Наименование"	, "Строка");
				НовСтр.Значение	 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекЗначениеРеквизита, "Значение"		, "Строка");
			КонецЦикла;
		Иначе
			НовСтр 				= тзнЗначенияРеквизитов.Добавить();
			НовСтр.Наименование = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЗначениеРеквизитаXDTO, "Наименование"	, "Строка");
			НовСтр.Значение	 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЗначениеРеквизитаXDTO, "Значение"		, "Строка");
			
		КонецЕсли;	
		
	Конецесли;

    Возврат тзнЗначенияРеквизитов;
	
КонецФункции

// Функция - разбирает в таблицу значений  объект XDTO "Скидки" 
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  СкидкиXDTO		 - 	 Объект XDTO, хранящий информацию о скидках 
// Возвращаемое значение:
//   Таблица значений с значениями скидок 
Функция ОбработатьЗначенияСкидокXDTO(ПараметрыОбмена, СкидкиXDTO) Экспорт
	
	тзнСкидок = Новый ТаблицаЗначений;
	тзнСкидок.Колонки.Добавить("Наименование");
	тзнСкидок.Колонки.Добавить("Процент");
	тзнСкидок.Колонки.Добавить("Сумма");
	тзнСкидок.Колонки.Добавить("УчтеноВСумме");
	
	
	Если ОбъектXDTOСодержитСвойство(СкидкиXDTO, "Скидка") Тогда
		
		СкидкаXDTO = СкидкиXDTO.Скидка;
		
		Если ЭтоСписокXDTO(СкидкаXDTO) тогда
			Для каждого ТекЗначениеСкидки из СкидкаXDTO Цикл
				
				НовСтр 				= тзнСкидок.Добавить();
				НовСтр.Наименование = ПолучитьЗначениеПоСвойству(ТекЗначениеСкидки, "Наименование"	, "Строка"); 
				НовСтр.Процент	 	= ПолучитьЗначениеПоСвойству(ТекЗначениеСкидки, "Процент"		, "Число"); 
				НовСтр.Сумма 		= ПолучитьЗначениеПоСвойству(ТекЗначениеСкидки, "Сумма"			, "Число"); 
				НовСтр.УчтеноВСумме	= ПолучитьЗначениеПоСвойству(ТекЗначениеСкидки, "УчтеноВСумме"	, "Булево"); 
				
			КонецЦикла;
		Иначе
			НовСтр 				= тзнСкидок.Добавить();
			НовСтр.Наименование = ПолучитьЗначениеПоСвойству(СкидкаXDTO, "Наименование"	, "Строка"); 
			НовСтр.Процент	 	= ПолучитьЗначениеПоСвойству(СкидкаXDTO, "Процент"		, "Число"); 
			НовСтр.Сумма 		= ПолучитьЗначениеПоСвойству(СкидкаXDTO, "Сумма"		, "Число"); 
			НовСтр.УчтеноВСумме	= ПолучитьЗначениеПоСвойству(СкидкаXDTO, "УчтеноВСумме"	, "Булево"); 
			
		КонецЕсли;	
		
	Конецесли;

    Возврат тзнСкидок;
	
КонецФункции

Функция ОбработатьИнформацияОЧекахXDTO(ПараметрыОбмена, ИнформацияОЧекахXDTO)Экспорт
	
	тзнИнформацияОЧекахX = Новый ТаблицаЗначений;
	тзнИнформацияОЧекахX.Колонки.Добавить("Чек");
	
	Если ОбъектXDTOСодержитСвойство(ИнформацияОЧекахXDTO, "ИнформацияОЧеке") Тогда
		
		ИнформацияОЧекеXDTO = ИнформацияОЧекахXDTO.ИнформацияОЧеке;
		
		Если ЭтоСписокXDTO(ИнформацияОЧекеXDTO) тогда
			Для Каждого ТекЗначениеРеквизита из ИнформацияОЧекеXDTO Цикл
				НовСтр 			= тзнИнформацияОЧекахX.Добавить();
				НовСтр.Чек 		= ОбработатьИнформациюОЧеке(ПараметрыОбмена, ТекЗначениеРеквизита);
			КонецЦикла;
		Иначе
			НовСтр 				= тзнИнформацияОЧекахX.Добавить();
			НовСтр.Чек 			= ОбработатьИнформациюОЧеке(ПараметрыОбмена, ИнформацияОЧекеXDTO);
		КонецЕсли;	
		
	Конецесли;
	//НовСтр.Значение	 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекЗначениеРеквизита, "Значение"		, "Строка");
    Возврат тзнИнформацияОЧекахX;
	
КонецФункции

Функция ОбработатьИнформациюОЧеке(ПараметрыОбмена, ИнформацияОЧекеXDTO)

	ИнформацияОЧеке = Новый Структура;
	ИнформацияОЧеке.Вставить("Ид", ПолучитьЗначениеПоСвойству(ИнформацияОЧекеXDTO, "Ид", "Строка")); 	
	ИнформацияОЧеке.Вставить("ЗначенияСвойств", ОбработатьЗначенияСвойствXDTO(ПараметрыОбмена, ИнформацияОЧекеXDTO)); 	
	
	Возврат ИнформацияОЧеке;
	
КонецФункции

Функция ОбработатьЗначенияСвойствXDTO(ПараметрыОбмена, ИнформацияОЧекеXDTO)Экспорт
	
	тзнЗначенияСвойствXDTO = Новый ТаблицаЗначений;
	тзнЗначенияСвойствXDTO.Колонки.Добавить("Ид");
	тзнЗначенияСвойствXDTO.Колонки.Добавить("Наименование");
	тзнЗначенияСвойствXDTO.Колонки.Добавить("Значение");
	
	Если ОбъектXDTOСодержитСвойство(ИнформацияОЧекеXDTO, "ЗначенияСвойств") Тогда
		
		ЗначенияСвойствXDTO = ИнформацияОЧекеXDTO.ЗначенияСвойств;
		
		Если ЭтоСписокXDTO(ЗначенияСвойствXDTO) тогда
			Для каждого ТекЗначениеСвойства из ЗначенияСвойствXDTO Цикл
				НовСтр 				= тзнЗначенияСвойствXDTO.Добавить();
				НовСтр.Ид 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекЗначениеСвойства, "Ид"				, "Строка");
				НовСтр.Наименование = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекЗначениеСвойства, "Наименование"	, "Строка");
				НовСтр.Значение	 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекЗначениеСвойства, "Значение"		, "Строка");
			КонецЦикла;
		Иначе
			НовСтр 				= тзнЗначенияСвойствXDTO.Добавить();
			НовСтр.Ид 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЗначенияСвойствXDTO.ЗначенияСвойства, "Ид"			, "Строка");
			НовСтр.Наименование = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЗначенияСвойствXDTO.ЗначенияСвойства, "Наименование"	, "Строка");
			НовСтр.Значение	 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЗначенияСвойствXDTO.ЗначенияСвойства, "Значение"		, "Строка");
		КонецЕсли;	
		
	Конецесли;

    Возврат тзнЗначенияСвойствXDTO;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеПоРаботеСHTTP

 			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ С РАБОТОЙ HTTP          		//
			/////////////////////////////////////////////////////////////////
			
			
// Процедура - добавляет в структуру параметры http запросов
//
// Параметры:
//  СтруктураПараметров	 - 	 Структура, в которую записываются параметры http запросов 
Процедура ДобавитьПараметрыПротоколаОбменаВСтруктуру(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_Инициализация"			, "&mode=init");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПередачаФайла"			, "&mode=file&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ИмпортФайлаСервером"		, "&mode=import&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПолучитьДанные"			, "&mode=query");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта", "&mode=success");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ДеактивацияДанныхПоДате"	, "&mode=deactivate");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ОкончаниеВыгрузкиТоваров"	, "&mode=complete");
	
	СтруктураПараметров.Вставить("ОтветСервера_ZIPРазрешен"								, "zip=yes");
	СтруктураПараметров.Вставить("ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена"	, "file_limit=");
	СтруктураПараметров.Вставить("ОтветСервера_УспешноеЗавершениеТекущейОперации"		, "success");
	СтруктураПараметров.Вставить("ОтветСервера_АварийноеЗавершениеТекущейОперации"		, "failure");
	СтруктураПараметров.Вставить("ОтветСервера_ВыполнениеТекущейОперации"				, "progress");
	
КонецПроцедуры	

// Функция - выполняет тестовое аподключение к сайту.
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Результат о тестовом подключении к сайту 
Функция ПолучитьРезультатТестовогоПодключенияКСайту(ПараметрыОбмена) Экспорт
	
	НастройкиПодключения = Новый Структура;
	ТипСоединения = "catalog";
	
	Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, ПараметрыОбмена) Тогда
		
		Возврат "Ошибка при получении параметров подключения к сайту.";
		
	КонецЕсли;
	
	Соединение = ПолучитьСоединениеССервером(НастройкиПодключения, ПараметрыОбмена);
	
	Если Соединение = Неопределено Тогда
		
		Возврат "Ошибка при установке соединения с сайтом.";
		
	КонецЕсли;
	
	ОтветСервера = "";
	
	Успешно = АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Успешно Тогда
		Возврат "Соединение с сайтом успешно установлено.";
	Иначе
		Возврат "Не удалось установить соединение.";
	КонецЕсли;
	
КонецФункции

// Функция - возвращает настройки подключения к сайту
//
// Параметры:
//  НастройкиПодключения - 	 Структура, в которую записываются настрйоки для подключения к сайту 
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  АдресПереадресации	 - 	 Адрес переадресации. Может использоваться при реал тайм обмене 
// Возвращаемое значение:
//   Структура с настройками подключения 
Функция ПолучитьНастройкиПодключения(НастройкиПодключения, ПараметрыОбмена,АдресПереадресации = "") Экспорт
	
	НастройкиПодключения.Вставить("Пользователь", ПараметрыОбмена.ИмяПользователя);
	НастройкиПодключения.Вставить("Пароль", ПараметрыОбмена.Пароль);
	
	Если НЕ АдресСайтаРазобран(НастройкиПодключения, ПараметрыОбмена, АдресПереадресации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Возврат Истина;
КонецФункции

Функция ПолучитьСоединениеССервером(ПараметрыПодключения, ПараметрыОбмена) Экспорт
	
	Соединение = НеОпределено;
	
	Попытка
		
		СисИнфо = Новый СистемнаяИнформация;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СисИнфо.ВерсияПриложения, "8.3.3.721") < 0  тогда	
			Выполнить("Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль, ПараметрыПодключения.Прокси, ПараметрыПодключения.ЗащищенноеСоединение)");
		Иначе

			Выполнить("Если НЕ ПараметрыПодключения.ЗащищенноеСоединение тогда
			|	ssl = Неопределено;
			|Иначе
			|	
			|	ssl = Новый ЗащищенноеСоединениеOpenSSL(
			|	Неопределено,
			|	Неопределено); 
			|КонецЕсли;
			|Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль, ПараметрыПодключения.Прокси, ,ssl)");	
		КонецЕсли;	
		
	Исключение
		
		СообщитьПодробно(" Не удалось установить соединение с сервером. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.", ПараметрыОбмена, Истина, Истина);	
		
		Соединение = Неопределено;
		
	Конецпопытки;
	
	Возврат Соединение;
	
КонецФункции

// Функция - проверяет авторизацию на сайте. если авторизация успешна, то возвращается Истина
//
// Параметры:
//  Соединение			 - 	 Http соединение 
//  ПараметрыПодключения - 	 Структура параметров подключения к сайту 
//  ОтветСервера		 - 	 Ответ сервера при подключении 
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  ТипСоединения		 - 	 Тип соединения к сайту "catalog" или "sale" 
// Возвращаемое значение:
//   Истина, если авторизация на сайте успешна 
Функция АвторизацияВыполнена(Соединение, ПараметрыПодключения, 
	ОтветСервера, ПараметрыОбмена, ТипСоединения = "catalog") Экспорт
	
	Соединение = ПолучитьСоединениеССервером(ПараметрыПодключения, ПараметрыОбмена);
	
	Если Соединение = Неопределено Тогда
		
		СообщитьПодробно("Авторизация не выполнена.", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	ОтветСервера = ПолучитьДанныеССервера(Соединение, ПараметрыПодключения.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth", , ПараметрыОбмена);
	
	Если ОтветСервера = Неопределено Тогда 
		
		СообщитьПодробно("Авторизация не выполнена. Ответ с сервера не пришел.", ПараметрыОбмена, Истина, Истина);	
		Возврат Ложь;
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		
		СообщитьПодробно("Авторизация не выполнена." + Символы.ПС + "Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль.", ПараметрыОбмена);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция - разбирает адрес сайта по составляющим
//
// Параметры:
//  НастройкиПодключения - 	 Настройки подключения к сайту 
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  АдресПереадресации	 - 	 Адрес переадресации к сайту.Может использоваться при реал тайм обмене 
// Возвращаемое значение:
//   Структура с настройками подключения к сайту  
Функция АдресСайтаРазобран(НастройкиПодключения, ПараметрыОбмена, АдресПереадресации = "")
	
	АдресСайта = ?(АдресПереадресации = "", СокрЛП(ПараметрыОбмена.АдресСайта) , СокрЛП(АдресПереадресации)); 
	
	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			СообщитьПодробно("Не удалось получить номер порта: " + ПортСтрока + Символы.ПС + "Проверьте правильность ввода адреса сайта.", ПараметрыОбмена, Истина, Истина);	
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресСкрипта", АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции

// Функция - получает данные с сайта
//
// Параметры:
//  Соединение		 - 	 Http соединение к сайту 
//  ПараметрыЗапроса - 	 Параметры http запроса 
//  Заголовки		 - 	 Заголовки http запроса 
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Ответ сайта 
Функция ПолучитьДанныеССервера(Соединение, ПараметрыЗапроса = "", Заголовки = "", ПараметрыОбмена) Экспорт
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	лКодировка = "";
	Попытка
		
		HTTPОтвет 	= Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
		
		ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");
		лКодировка 	= Прав(ContentType, СтрДлина(ContentType) - (Найти(ContentType, "charset=")+7));
		
	Исключение
		
		СообщитьПодробно("Не удалось получить данные с сервера. Проверьте правильность адреса сервера, порт, имя пользователя и пароль," + Символы.ПС + "а также настройки подключения к Интернет.", ПараметрыОбмена, Истина, Истина)
		
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	ОтветСервера = НеОпределено;
	
	Если ФайлОтвета.Существует() Тогда
		ЧтениеТекста 	= Новый ЧтениеТекста(ИмяФайлаОтвета,лКодировка);          
		ТекстОтвета 	= ЧтениеТекста.Прочитать();
		
		Если НЕ ПустаяСтрока(ТекстОтвета) Тогда
			ОтветСервера = ТекстОтвета;
		Иначе
			СообщитьПодробно("Получение данных с сервера: Получен пустой ответ сервера.", ПараметрыОбмена, Истина, Истина);	
		КонецЕсли;
		
	Иначе
		
		СообщитьПодробно("Получение данных с сервера: Ответ сервера не получен.", ПараметрыОбмена, Истина, Истина);	
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

// Функция - получает информацию от сайта процесс загрузки файла 
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ПолноеИмяФайла	 - 	 Полное имя к выгружаемому файлу 
//  Соединение		 - 	 Http соединение к сайту 
//  ПараметрыЗапроса - 	 Параметры http запроса 
//  Заголовки		 - 	 Заголовки http запроса 
// Возвращаемое значение:
//   Ответ сайта 
Функция ПолучитьРезультатОтправкиФайлаНаСервер(ПараметрыОбмена,ПолноеИмяФайла, Соединение, ПараметрыЗапроса="", Заголовки="")
	
	ОтветСервера = Неопределено;
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(ПолноеИмяФайла, СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
		ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");
		лКодировка 	= Прав(ContentType, СтрДлина(ContentType) - (Найти(ContentType, "charset=")+7));
		
	Исключение
		
		СообщитьПодробно(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПараметрыОбмена, Истина, Истина);	
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета, лКодировка);          
		ТекстОтвета = ЧтениеТекста.Прочитать();
		
		Если НЕ ПустаяСтрока(ТекстОтвета) Тогда
			ОтветСервера = ТекстОтвета;
		Иначе
			СообщитьПодробно("Получение данных с сервера: Получен пустой ответ сервера.", ПараметрыОбмена, Истина, Истина);	

		КонецЕсли;
		
	Иначе
		
		СообщитьПодробно("Отправка файла на сервер: Ответ сервера не получен.", ПараметрыОбмена, Истина, Истина);	
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

// Функция - Выгрузить данные на сайт
//
// Параметры:
//  ПараметрыОбмена							 - 	Настройки узла обмена  
//  ИмяКаталога								 -  Имя каталога, где хранятся выгружаемые файлы 
//  ПолноеИмяФайла							 - 	Полное имя выгружаемого файла
//  МассивПодкаталогов						 - 	Массив подкаталогов, где хранятся дополнительные данные для выгрузки(как правило картинки)
//  ОжидатьЗавершенияИмпортаФайловСервером	 - 	Если истина, то обмен будет ждать, пока сайт не обработает полученные данные 
//  ТипСоединения							 - 	Тип соединения к сайту. По умолчанию "catalog" 
// Возвращаемое значение:
//   Истина, если данные успешно выгружены на сайт 
Функция ВыгрузитьДанныеНаСайт(ПараметрыОбмена, ИмяКаталога, ПолноеИмяФайла,
			МассивПодкаталогов = Неопределено,
			ОжидатьЗавершенияИмпортаФайловСервером = Ложь,
			ТипСоединения = "catalog") Экспорт
	
	ОтветСервера = "";
	Соединение = Неопределено;
	НастройкиПодключения = ПараметрыОбмена.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	СообщитьПодробно("Отправка запроса на авторизацию.", ПараметрыОбмена);
	
	Успешно = АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Не Успешно Тогда
		СообщитьПодробно("Выгрузка на сайт не выполнена.", ПараметрыОбмена, Истина, Истина);	
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	
	Попытка
		Токен			= "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		
		Токен = "";
		СообщитьПодробно("CSRF токен не поддерживается. Для того, чтобы поддерживался - необходимо обновить БУС.", ПараметрыОбмена);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);
		
	КонецПопытки;
	
	//Если у нас полная выгрузка, то получаем дату, до которой не загруженные элементы будут деактивированы.
	
	Если НЕ ПараметрыОбмена.ВыгружатьТолькоИзменения И ТипСоединения = "catalog" тогда
		
		Если ПараметрыОбмена.ДатаДеактивацииПриПакетнойВыгрузке = Неопределено тогда
			Попытка
				ПараметрыОбмена.ДатаДеактивацииПриПакетнойВыгрузке	=  "&" + СтрПолучитьСтроку(ОтветСервера, 5);
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	СообщитьПодробно("Отправка запроса на инициализацию, для определения версии обмена данных.", ПараметрыОбмена);
	
	ОтветСервера = ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_Инициализация + Токен + "&version=" + ПараметрыОбмена.ВерсияСхемы, ЗаголовкиЗапросов, ПараметрыОбмена);
	
	Если ОтветСервера = Неопределено Тогда 
		СообщитьПодробно("Выгрузка на сайт не выполнена. Ответ не пришел", ПараметрыОбмена, Истина, Истина);	
		Возврат Ложь;
	КонецЕсли;
	
	ZIPФайлыРазрешены = Ложь;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	Если (ТипСоединения = "catalog" И СтрЧислоСтрок(ОтветСервера) < 2) тогда
		СообщитьПодробно("Выгрузка на сайт информации о товарах не выполнена." + Символы.ПС + " Не удалось прочитать ответ сервера. Параметры обмена не получены.", ПараметрыОбмена, Истина, Истина);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		Возврат Ложь;
		
	КонецЕсли;
	
	Если(ТипСоединения = "sale"  И (СтрЧислоСтрок(ОтветСервера) < 4)) Тогда
		
		СообщитьПодробно("Выгрузка на сайт заказов не выполнена." + Символы.ПС + " Не удалось прочитать ответ сервера. Параметры обмена не получены.", ПараметрыОбмена, Истина, Истина);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		Возврат Ложь;
		
	КонецЕсли;
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) = НастройкиПодключения.ОтветСервера_ZIPРазрешен;
	
	Попытка 
		
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 2))), НастройкиПодключения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, ""));
		
	Исключение
		
		СообщитьПодробно("Ошибка получения параметров обмена (ограничение размера файла)!", ПараметрыОбмена, Истина, Истина);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
		
	КонецПопытки;
	
	КаталогДляВыгрузки = ИмяКаталога;
	
	МассивИсходныхXMLФайлов = Новый Массив;
	МассивИсходныхXMLФайлов.Добавить(Новый Файл(ПолноеИмяФайла));
	
	Если ZIPФайлыРазрешены Тогда
		
		СписокФайловДляОтправки = ПолучитьСписокZIPАрхивов(ПараметрыОбмена, КаталогДляВыгрузки, МассивПодкаталогов);
		
	Иначе
		
		СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(ПараметрыОбмена, КаталогДляВыгрузки, МассивПодкаталогов);
		
	КонецЕсли;
	
	Если СписокФайловДляОтправки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда
		СписокФайловДляОтправки = ПолучитьСписокФрагментовФайлов(СписокФайловДляОтправки, ОграничениеРазмераФрагментаФайлаОбмена);
	КонецЕсли;
	
	ВсегоФайлов = СписокФайловДляОтправки.Количество();
	
	Для Каждого ТекФайл Из СписокФайловДляОтправки цикл
		
		ОтветСервера = ПолучитьРезультатОтправкиФайлаНаСервер(ПараметрыОбмена, ТекФайл.Значение, Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПередачаФайла + ТекФайл.Представление + Токен, ЗаголовкиЗапросов);
		Если ZIPФайлыРазрешены Тогда
			Попытка
				УдалитьФайлы(ТекФайл.Значение);
			Исключение
			КонецПопытки;                                                        
		КонецЕсли;
		
		Если ОтветСервера = Неопределено Тогда
			
			СообщитьПодробно("Не удалось получить ответ сервера. Файл не отправлен.", ПараметрыОбмена);	
			
			Возврат Ложь;
		КонецЕсли;
		
		СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера,1)));
		
		Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
			
			СообщитьПодробно("Произошла ошибка на стороне сервера. Файл не отправлен." + " (" + ТекФайл.Значение + ")." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			
			Возврат Ложь;
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
			
			Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
			СообщитьПодробно("Получен расширенный статус успешного завершения сеанса." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
				
			КонецЕсли;
			
		Иначе
			
			СообщитьПодробно("Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен" + " (" + ТекФайл.Значение + ")." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////
	
	ИмпортУспешноЗавершен = Ложь;
	
	Если ОжидатьЗавершенияИмпортаФайловСервером Тогда
		
		Для Каждого ТекФайл Из МассивИсходныхXMLФайлов Цикл
			
			ИмпортПродолжается = Истина;
			ТекущееСостояние = "";
			
			Пока ИмпортПродолжается Цикл
				
				ИмпортПродолжается = Ложь;
				
				ОтветСервера = ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ИмпортФайлаСервером + ТекФайл.Имя + Токен, ЗаголовкиЗапросов, ПараметрыОбмена);
				
				Если ОтветСервера = Неопределено Тогда 
					
					Успешно = Ложь;
					СообщитьПодробно(ТекФайл.Имя + ": Не удалось получить текущее состояние процесса обмена. Данные обмена отправлены, но не загружены.", ПараметрыОбмена);	
					
				ИначеЕсли СтрЧислоСтрок(ОтветСервера) = 0 Тогда
					
					Успешно = Ложь;
					СообщитьПодробно(ТекФайл.Имя + ": Не удалось прочитать данные о текущем состоянии процесса обмена. Данные обмена отправлены, но не загружены.", ПараметрыОбмена);	
				Иначе
					
					СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1)));
					
					Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
						
						Успешно = Ложь;
						СообщитьПодробно(ТекФайл.Имя + ": Произошла ошибка на стороне сервера."	+ Символы.ПС + "Ответ сервера" + ": " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
						
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
						
						ИмпортУспешноЗавершен = Истина;
						СообщитьПодробно(ТекФайл.Имя + ": Данные успешно обработаны сервером." + Символы.ПС + "Ответ сервера" + ": " + ОтветСервера, ПараметрыОбмена);	
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_ВыполнениеТекущейОперации Тогда
						
						ИмпортПродолжается = Истина;
						Б_ОбщиеПроцедурыИФункцииСервер.ОтображениеСостояния(ОтветСервера);
						
						лСообщениеСервера = ?(СтрЧислоСтрок(ОтветСервера) >1, СтрПолучитьСтроку(ОтветСервера,2), ОтветСервера);
						СообщитьПодробно("Процес выполнения обмена: " + лСообщениеСервера, ПараметрыОбмена);
						
					Иначе
						
						Успешно = Ложь;
						СообщитьПодробно(ТекФайл.Имя + ": Произошла ошибка на стороне сервера. Получен неизвестный статус импорта." + Символы.ПС + "Ответ сервера" + ": " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
						СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ИмпортУспешноЗавершен Тогда
				
				Б_ОбщиеПроцедурыИФункцииСервер.ОтображениеСостояния("");

				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Б_ОбщиеПроцедурыИФункцииСервер.ОтображениеСостояния("");
	
	Возврат Успешно;
	
КонецФункции

// Функция - выгружает лог файл на сайт
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Истина, если лог файл успешно выгружен 
Функция ВыгрузитьЛогФайлНаСайт(ПараметрыОбмена)
	
	ТипСоединения = "catalog";
	ОтветСервера = "";
	Соединение = Неопределено;
	
	НастройкиПодключения = ПараметрыОбмена.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	СообщитьПодробно("Отправка запроса на авторизацию.", ПараметрыОбмена);
	
	Успешно = АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Не Успешно Тогда
		СообщитьПодробно("Выгрузка на сайт не выполнена.", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	
	Попытка
		Токен			= "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		
		Токен = "";
		СообщитьПодробно("CSRF токен не поддерживается. Для того, чтобы поддерживался - необходимо обновить БУС.", ПараметрыОбмена);	
		
	КонецПопытки;
	
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ПолноеИмяФайлаАрхива = ПараметрыОбмена.КаталогЛога + "\reports\" + "Exchange_" + "(" + ПараметрыОбмена.ссылка.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".zip";
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	НовыйСписокФайлов = Новый СписокЗначений;
	ЗаписьАрхива.Добавить(Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports\" + "Exchange_" + "(" + ПараметрыОбмена.ссылка.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt"));
	
	Если ПараметрыОбмена.ХранитьФайлыОбменаНаСайте тогда
		МассивПодкаталогов = Новый Массив;
		МассивПодкаталогов.Добавить(СокрЛП(ПараметрыОбмена.ссылка.Код));
		
	    ИмяАрхиваОбмена = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports\Exchange.zip");
		
		СписокАрхивов 	= ПолучитьСписокZIPАрхивов(ПараметрыОбмена, Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports"), МассивПодкаталогов, ИмяАрхиваОбмена);
		
		Если СписокАрхивов.Количество() > 0 тогда
			ЗаписьАрхива.Добавить(СписокАрхивов[0].значение);
		КонецЕсли;
	КонецЕсли;
	Попытка
		ЗаписьАрхива.Записать();
	Исключение
		СообщитьПодробно("Не удалось записать zip-архив на диск!", ПараметрыОбмена);	
	КонецПопытки;
	
	Если ПараметрыОбмена.ХранитьФайлыОбменаНаСайте тогда
		Если СписокАрхивов.Количество() > 0 тогда
			УдалитьФайлы(СписокАрхивов[0].значение);				
		КонецЕсли;	
	КонецЕсли;	
	
	ПредставлениеФайла 	=  "\Reports\" + "Exchange_" + "(" + ПараметрыОбмена.ссылка.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".zip";
	
	ОтветСервера 		= ПолучитьРезультатОтправкиФайлаНаСервер(ПараметрыОбмена, ПолноеИмяФайлаАрхива, Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПередачаФайла + ПредставлениеФайла + Токен, ЗаголовкиЗапросов);
	
	УдалитьФайлы(ПолноеИмяФайлаАрхива);
	
	Если ОтветСервера = Неопределено Тогда
		
		СообщитьПодробно("Не удалось получить ответ сервера. Файл не отправлен.", ПараметрыОбмена);	
		
		Возврат Ложь;
	КонецЕсли;
	
	СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера,1)));
	
	Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
		
		СообщитьПодробно("Произошла ошибка на стороне сервера. Файл не отправлен." + " (" + ПолноеИмяФайлаАрхива + ")." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
		
		Возврат Ложь;
		
	ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
		
		Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
			СообщитьПодробно("Получен расширенный статус успешного завершения сеанса." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			
		КонецЕсли;
		
	Иначе
		
		СообщитьПодробно("Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен" + " (" + ПолноеИмяФайлаАрхива + ")." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция - отправляет http запрос для данных на сайте.
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ТипСоединения	 - 	 Тип соединения с сайтом. по умолчанию "catalog"  
// Возвращаемое значение:
//   Истина, если деактивация успешно произошла на сайте. 
Функция ВыгрузитьДанныеНаСайтУпрощенно(ПараметрыОбмена, ТипСоединения = "catalog", ПараметрыЗапроса = "") Экспорт
	
	ОтветСервера = "";
	Соединение = Неопределено;
	НастройкиПодключения = ПараметрыОбмена.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	СообщитьПодробно("Отправка запроса на авторизацию.", ПараметрыОбмена);
	
	Успешно = АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Не Успешно Тогда
		СообщитьПодробно("Не выполнена выгрузка на сайт информации.", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	
	Попытка
		Токен			= "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		
		Токен = "";
		СообщитьПодробно("CSRF токен не поддерживается. Для того, чтобы поддерживался - необходимо обновить БУС.", ПараметрыОбмена);	
		
	КонецПопытки;
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	ОтветСервера = ПолучитьДанныеССервера(Соединение, АдресДляРаботы + ПараметрыЗапроса + Токен, ЗаголовкиЗапросов, ПараметрыОбмена);
	
	Если ОтветСервера = Неопределено Тогда 
		
		Успешно = Ложь;
		СообщитьПодробно("Не удалось получить текущее состояние процесса.", ПараметрыОбмена);	
		
	ИначеЕсли СтрЧислоСтрок(ОтветСервера) = 0 Тогда
		
		Успешно = Ложь;
		СообщитьПодробно("Не удалось получить текущее состояние процесса.", ПараметрыОбмена);	
	Иначе
		
		СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1)));
		
		Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
			
			Успешно = Ложь;
			СообщитьПодробно("Произошла ошибка на стороне сервера."	+ Символы.ПС + "Ответ сервера" + ": " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
			
			ИмпортУспешноЗавершен = Истина;
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_ВыполнениеТекущейОперации Тогда
			
			ИмпортПродолжается = Истина;
		Иначе
			
			Успешно = Ложь;
			СообщитьПодробно("Произошла ошибка на стороне сервера. Получен неизвестный статус." + Символы.ПС + "Ответ сервера" + ": " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Функция - получает список Zip архивов с данными, котоыре нужно выгрузить на сайт
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  КаталогДляВыгрузки	 - 	 Каталог, куда должны складываться врменные файлы перез архивированием 
//  МассивПодкаталогов	 - 	 Массив подакаталогов, в которых нужно смотреть файлы
//  ИмяФайла			 - 	 Имя Zip файла, который должен быть создан. Если не указан, то будет получено временное имя файла 
// Возвращаемое значение:
//   Список значений с новыми файлами 
Функция ПолучитьСписокZIPАрхивов(ПараметрыОбмена, КаталогДляВыгрузки, МассивПодкаталогов, ИмяФайла = "")
	
	// Для корректного формирования zip перемещаем файлы во временную папку, а их нее уже пакуем.
	// Иначе не удается получить правильную струкутру папок архива объектом ЗаписьЗипФайла (пути сохраняются без import_files)
	
	ВременнаяПапка = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows,КаталогВременныхФайлов() + ПараметрыОбмена.ИдентификаторОбмена + "\" + "webdata_zip");
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	
	Если МассивПодкаталогов <> Неопределено Тогда
	
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			СоздатьКаталог(Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ВременнаяПапка + "\" + Подкаталог)));
			Файлы = НайтиФайлы(Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (КаталогДляВыгрузки + "\" + Подкаталог)), "*.*", Истина);
			Для Каждого Файл Из Файлы Цикл
				Если Файл.ЭтоКаталог() Тогда
					Продолжить;
				КонецЕсли;
				ПапкаФайла = СтрЗаменить(Файл.Путь, Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, КаталогДляВыгрузки + "\" + Подкаталог + "\") , "");
				НовыйПуть = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ВременнаяПапка + "\" + Подкаталог + "\" + ПапкаФайла));
				СоздатьКаталог(НовыйПуть);
				КопироватьФайл(Файл.ПолноеИмя, НовыйПуть + Файл.Имя);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ПолноеИмяФайлаАрхива = ?(ИмяФайла = "", ПолучитьИмяВременногоФайла("zip"), ИмяФайла);
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	
	НовыйСписокФайлов = Новый СписокЗначений;
	
	Если ИмяФайла = "" тогда            //для отправления XML файлов в лог
		ЗаписьАрхива.Добавить(Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, КаталогДляВыгрузки + "\*.xml"), РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
	КонецЕсли;
	
	ЗаписьАрхива.Добавить(Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ВременнаяПапка + "\*.*"), РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	
	Попытка
		ЗаписьАрхива.Записать();
	Исключение
		
		СообщитьПодробно("Не удалось записать zip-архив на диск!", ПараметрыОбмена);	
		
		УдалитьФайлы(ВременнаяПапка);

		Возврат НовыйСписокФайлов;
	КонецПопытки;
	
	УдалитьФайлы(ВременнаяПапка);

	ФайлАрхива = Новый Файл(ПолноеИмяФайлаАрхива);
	НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ФайлАрхива.Имя);
	
	Возврат НовыйСписокФайлов;
	
КонецФункции

// Функция - разбивает файлы на фрагменты, в зависимости от настроек на сайте
//
// Параметры:
//  СписокФайлов				 - 	 Список файлов для разбивки 
//  ОграничениеРазмераФрагмента	 - 	 Ограничение размера фрагмента 
// Возвращаемое значение:
//   Список с фрагментами разбитых файлов 
Функция ПолучитьСписокФрагментовФайлов(СписокФайлов, ОграничениеРазмераФрагмента)
	
	НовыйСписокФайлов = Новый СписокЗначений;
	Для Каждого ТекФайл Из СписокФайлов цикл
		
		ФайлНаДиске = Новый Файл(ТекФайл.Значение);
		Если ФайлНаДиске.Размер() > ОграничениеРазмераФрагмента Тогда
			МассивФрагментов = РазделитьФайл(ФайлНаДиске.ПолноеИмя, ОграничениеРазмераФрагмента);
			Для Каждого НовыйФайл Из МассивФрагментов Цикл
				НовыйСписокФайлов.Добавить(НовыйФайл, ТекФайл.Представление);
			КонецЦикла;
			УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
		Иначе
			НовыйСписокФайлов.Добавить(ТекФайл.Значение, ТекФайл.Представление);
		КонецЕсли;
		
	КонецЦикла;
	Возврат НовыйСписокФайлов;
	
КонецФункции

// Функция - получает список файлов для отправки на сайт.
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  КаталогНаДиске		 - 	 Катаолг на диске, где нужно искать файлы 
//  МассивПодкаталогов	 - 	 Массив подкаталогов, в которых нужно искать файлы 
// Возвращаемое значение:
//   Список выгружаемых файлов 
Функция ПолучитьСписокФайловДляОтправки(ПараметрыОбмена,КаталогНаДиске, МассивПодкаталогов);
	
	СписокФайлов = Новый СписокЗначений;
	Маска = "*.*";
	
	ВсеФайлыДляВыгрузки = НайтиФайлы(КаталогНаДиске, Маска);
	
	Если МассивПодкаталогов <> Неопределено Тогда
		
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			
			ФайлыВПодкаталоге = НайтиФайлы(Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, КаталогНаДиске + "\" + Подкаталог), Маска);
			
			Для Каждого ТекФайл Из ФайлыВПодкаталоге Цикл
				
				Если ТекФайл.ЭтоКаталог() Тогда
					
					ФайлыВДобавочномПодкаталоге = НайтиФайлы(ТекФайл.ПолноеИмя, Маска);
					
					Для Каждого ТекФайлВПодкаталоге Из ФайлыВДобавочномПодкаталоге Цикл
						
						Если НЕ ТекФайлВПодкаталоге.ЭтоКаталог() Тогда	
							ВсеФайлыДляВыгрузки.Добавить(ТекФайлВПодкаталоге);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ВсеФайлыДляВыгрузки.Добавить(ТекФайл);  
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекФайл Из ВсеФайлыДляВыгрузки цикл
		
		Если НЕ ТекФайл.ЭтоКаталог() Тогда
			
			ПолноеИмяФайлаДляСервера = ПолучитьИмяФайлаДляСервера(КаталогНаДиске, ТекФайл);
			СписокФайлов.Добавить(ТекФайл.ПолноеИмя, ПолноеИмяФайлаДляСервера);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

// Функция - возвращает имя файла для сервера
Функция ПолучитьИмяФайлаДляСервера(КаталогНаДиске, ФайлОбъект)
	
	ПолноеИмяФайлаДляСервера = "";
	
	Если Найти(ФайлОбъект.Имя, ".xml") > 0 Тогда
		
		ПолноеИмяФайлаДляСервера = ФайлОбъект.Имя;
		
	Иначе
		
		//у картинки надо оставить 2 папки и развернуть слэши
		ПолноеИмяФайлаДляСервера = ФайлОбъект.ПолноеИмя;
		ПутьДляУдаления = КаталогНаДиске + "\";
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, ПутьДляУдаления, "");
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, "\", "/");
		
	КонецЕсли;
	
	ПолноеИмяФайлаДляСервера = ПолучитьИмяФайлаБезДополнительныхРасширений(КаталогНаДиске, ПолноеИмяФайлаДляСервера);
	
	Возврат ПолноеИмяФайлаДляСервера;
	
КонецФункции

// Функция - удаляет лишние расширения у файла
Функция ПолучитьИмяФайлаБезДополнительныхРасширений(КаталогНаДиске, ИсходноеИмяФайла)
	
	ПозицияТочки = Найти(ИсходноеИмяФайла, ".");
	
	ИмяФайла = Лев(ИсходноеИмяФайла, ПозицияТочки - 1);
	
	ПраваяЧастьИсходногоИмени = Прав(ИсходноеИмяФайла, СтрДлина(ИсходноеИмяФайла) - ПозицияТочки);
	
	ПозицияТочки = Найти(ПраваяЧастьИсходногоИмени, ".");
	
	Расширение = ПраваяЧастьИсходногоИмени;
	
	Если ПозицияТочки > 0 Тогда
		Расширение = Лев(ПраваяЧастьИсходногоИмени, ПозицияТочки - 1);
	КонецЕсли;
	
	Возврат ИмяФайла + "." + Расширение;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеСЛогированием

			///////////////////////////////////////////////////////////////////
			//		   	 ПРОЦЕДУРЫ И ФУНКЦИИ С ЛОГИРОВАНИЕМ         		//
			/////////////////////////////////////////////////////////////////

// Процедура - отображает сообщение обмена данных.
//
// Параметры:
//  пСобытие				 - 	 Сообщение 
//  ОсновныеПараметры		 - 	 Настройки узла обмена  
//  Логирование				 - 	 Признак того, что сообщение нужно писать в лог файл 
//  ЗаписьВЖурналРегистрации - 	 Признак того, что сообщение нужно писать в журнал регистрации 
Процедура СообщитьПодробно(пСобытие, ОсновныеПараметры = Неопределено, Логирование = Истина, СообщатьОбОшибке = Ложь, ЗаписьВЖурналРегистрации = Ложь) Экспорт
	
	//#Если Клиент Тогда
		Сообщить(пСобытие);
	//#КонецЕсли
	
	Б_ОбщиеПроцедурыИФункцииСервер.ОтображениеСостояния(пСобытие);
	
	Если ЗаписьВЖурналРегистрации тогда
		ЗаписьЖурналаРегистрации("СобытияОбменаДанныхМодуляБитрикс", УровеньЖурналаРегистрации.Информация,,, пСобытие);
	КонецЕсли;
	
	Если СообщатьОбОшибке и НЕ ОсновныеПараметры = Неопределено Тогда
		
		ОсновныеПараметры.ЕстьКритичныеОшибкиВОбмене		= Истина;	
		ДобавитьИнформациюООшибкеВОбмене(ОсновныеПараметры.Ссылка, пСобытие);		
		                                     
	КонецЕсли;
	
	Если Логирование и НЕ ОсновныеПараметры = Неопределено Тогда
		
		Если ОсновныеПараметры.ИмяФайлаЛога <> "" тогда
			
			Текст = Новый ЗаписьТекста(ОсновныеПараметры.ИмяФайлаЛога, КодировкаТекста.ANSI,,истина);
			Текст.ЗаписатьСтроку(Строка(ТекущаяДата()) + "--" + пСобытие);
			Текст.Закрыть(); 
			
		КонецЕсли;
	КонецЕсли;
	             
КонецПроцедуры 

Процедура ДобавитьИнформациюООшибкеВОбмене(УзелОбмена, Ошибка) Экспорт
	
	лНаборЗаписей = РегистрыСведений.Б_ИнформацияОНастройкахОбменаССайтом.СоздатьНаборЗаписей();
	
	НоваяЗапись = РегистрыСведений.Б_ИнформацияОНастройкахОбменаССайтом.СоздатьМенеджерЗаписи();
	НоваяЗапись.НастройкаОбмена 			 = УзелОбмена;
	НоваяЗапись.ВидСостояния				 = "Ошибка";	
	НоваяЗапись.Ошибка						 = Ошибка;	
	НоваяЗапись.Записать();		
	
КонецПроцедуры


#КонецОбласти


#Область ПроцедурыИФункцииПАвтообновлению

            ///////////////////////////////////////////////////////////////////
			//		   	 ПРОЦЕДУРЫ И ФУНКЦИИ С ПО АВТООБНОВЛЕНИЮ       		//
			/////////////////////////////////////////////////////////////////

// Функция - возвращает текущую версию модуля обмена
// Возвращаемое значение:
//   Версия модуля обмена 
Функция Версия() Экспорт
	Возврат "7.0.1.3";
КонецФункции

// Функция проверяет актуальность текущих данных нестроек обмена.
//
// Параметры:
//  ОсновныеПараметры	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Истина, если данные настроек обмена актуальные 
Функция ПроверкаОбновленияДанныхМодуляОбменаССайтом(ОсновныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = Версия();
	
	ПредыдущаяВерсия = Константы.Б_НомерВерсииМодуляОбменаССайтом.Получить();
	
	ПервыйЗапуск = НЕ ПредыдущаяВерсия = Версия;
	
	Если НЕ ПервыйЗапуск Тогда
		Возврат Истина;
	КонецЕсли;
	
	Пока Константы.Б_НомерВерсииМодуляОбменаССайтом.Получить() <> Версия Цикл
		
		ПредыдущаяВерсия = Константы.Б_НомерВерсииМодуляОбменаССайтом.Получить();
		
		Если ПредыдущаяВерсия = "" Тогда
			
			Результат = ОбновлениеДоВерсии5_0_0_1(ОсновныеПараметры);
			
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.1");
			Иначе
				Возврат Результат;
			КонецЕсли;     			
			
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.1" Тогда
			СообщитьПодробно("Обновление с версии 5.0.0.1 до 5.0.0.2.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.2");
			
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.2" Тогда
			СообщитьПодробно("Обновление с версии 5.0.0.2 до 5.0.0.3.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.3");
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.3" Тогда
			СообщитьПодробно("Обновление с версии 5.0.0.3 до 5.0.0.4.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.4");
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.4" Тогда
			СообщитьПодробно("Обновление с версии 5.0.0.4 до 5.0.0.5.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.5");
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.5" Тогда
			СообщитьПодробно("Обновление с версии 5.0.0.5 до 5.0.0.6.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.6");
			
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.6" Тогда
			Результат = ОбновлениеДоВерсии5_0_0_7(ОсновныеПараметры);
			
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.7");
			Иначе
				Возврат Результат;
			КонецЕсли;   
			
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.7" Тогда
			СообщитьПодробно("Обновление с версии 5.0.0.7 до 5.0.0.8.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.8");
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.8" Тогда
			СообщитьПодробно("Обновление с версии 5.0.0.8 до 5.0.0.9.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.9");
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.9" Тогда
			СообщитьПодробно("Обновление с версии 5.0.0.9 до 5.0.0.10.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.10");
			
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.10" Тогда
			
			Результат = ОбновлениеДоВерсии6_0_0_1(ОсновныеПараметры);
			
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.0.1");
			Иначе
				Возврат Результат;
			КонецЕсли;   
		ИначеЕсли ПредыдущаяВерсия = "6.0.0.1" Тогда
			
			Результат = ОбновлениеДоВерсии6_0_1_2(ОсновныеПараметры);
			
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.1.2");
			Иначе
				Возврат Результат;
			КонецЕсли;  
			
		ИначеЕсли ПредыдущаяВерсия = "6.0.1.2" Тогда
			СообщитьПодробно("Обновление с версии 6.0.1.2 до 6.0.1.3", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.1.3");
		ИначеЕсли ПредыдущаяВерсия = "6.0.1.3" Тогда
			СообщитьПодробно("Обновление с версии 6.0.1.3 до 6.0.1.4", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.1.4");
		ИначеЕсли ПредыдущаяВерсия = "6.0.1.4" Тогда
			СообщитьПодробно("Обновление с версии 6.0.1.4 до 6.0.1.5", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.1.5");
		ИначеЕсли ПредыдущаяВерсия = "6.0.1.5" Тогда
			СообщитьПодробно("Обновление с версии 6.0.1.5 до 6.0.2.1", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.2.1");
		ИначеЕсли ПредыдущаяВерсия = "6.0.2.1" Тогда
			
			Результат = ОбновлениеДоВерсии6_0_3_1(ОсновныеПараметры);
			
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.3.1");
			Иначе
				Возврат Результат;
			КонецЕсли; 
		ИначеЕсли ПредыдущаяВерсия = "6.0.3.1" Тогда
			СообщитьПодробно("Обновление с версии 6.0.3.1 до 6.0.3.2", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.3.2");
		ИначеЕсли ПредыдущаяВерсия = "6.0.3.2" Тогда
			СообщитьПодробно("Обновление с версии 6.0.3.2 до 6.0.3.3", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.3.3");
		ИначеЕсли ПредыдущаяВерсия = "6.0.3.3" Тогда
			СообщитьПодробно("Обновление с версии 6.0.3.3 до 6.0.3.4", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.0.3.4");
		ИначеЕсли ПредыдущаяВерсия = "6.0.3.4" Тогда
			
			Результат = ОбновлениеДоВерсии6_5_0_0(ОсновныеПараметры);
				
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.5.0.0");
			Иначе
				Возврат Результат;
			КонецЕсли;   
		ИначеЕсли ПредыдущаяВерсия = "6.5.0.0" Тогда
			СообщитьПодробно("Обновление с версии 6.5.0.0 до 6.5.0.1", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("6.5.0.1");
		ИначеЕсли ПредыдущаяВерсия = "6.5.0.1" Тогда
			
			Результат = ОбновлениеДоВерсии7_0_0_0(ОсновныеПараметры);
				
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("7.0.0.0");
			Иначе
				Возврат Результат;
			КонецЕсли;   
		ИначеЕсли ПредыдущаяВерсия = "7.0.0.0" Тогда
			СообщитьПодробно("Обновление с версии 7.0.0.0 до 7.0.0.1.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("7.0.0.1");
		ИначеЕсли ПредыдущаяВерсия = "7.0.0.1" Тогда
			СообщитьПодробно("Обновление с версии 7.0.0.1 до 7.0.1.1.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("7.0.1.1");
		ИначеЕсли ПредыдущаяВерсия = "7.0.1.1" Тогда
			СообщитьПодробно("Обновление с версии 7.0.1.1 до 7.0.1.2.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("7.0.1.2");
		ИначеЕсли ПредыдущаяВерсия = "7.0.1.2" Тогда
			СообщитьПодробно("Обновление с версии 7.0.1.2 до 7.0.1.3.", ОсновныеПараметры);	
			Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("7.0.1.3");
		Иначе 
		    Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить(Версия);

			Возврат Истина;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновлениеДоВерсии5_0_0_1(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 5.0.0.1.", ОсновныеПараметры);	
	
	МассивРегистров = Новый Массив;
	
	МассивРегистров.Добавить("РИ_ИдентификаторыНоменклатурыБитрикс");
	МассивРегистров.Добавить("РИ_ИдентификаторыХарактеристикНоменклатурыБитрикс");
	МассивРегистров.Добавить("РИ_ИдентификаторыСвойствНоменклатурыБитрикс");
	МассивРегистров.Добавить("РИ_ИдентификаторыЗначенийСвойствНоменклатурыБитрикс");
	МассивРегистров.Добавить("РИ_ИдентификаторыКонтрагентовБитрикс");
	
	Попытка
	
		Для каждого ТекЗначение из МассивРегистров Цикл
			
			Регистр = Метаданные.РегистрыСведений.Найти(ТекЗначение);
			Если Регистр <> Неопределено тогда
				
				СообщитьПодробно("Перенос идентификторов Битрикс из регистра сведений " + ТекЗначение + " в общие реквизиты соответствующего объекта.", ОсновныеПараметры);	
				Выборка = РегистрыСведений[ТекЗначение].Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.Объект.Б_Идентификатор = "" тогда 
					
						Объект = Выборка.Объект.ПолучитьОбъект();
						Объект.Б_Идентификатор = Выборка.Идентификатор;
						Объект.Записать();
					Конецесли;
					
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
	
		СообщитьПодробно("Обновление до версии 5.0.0.1 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 5.0.0.1 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры, Истина, Истина);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновлениеДоВерсии5_0_0_7(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 5.0.0.7.", ОсновныеПараметры);	
	
	
	Попытка
		
		Выборка = ПланыОбмена.Б_ОбменССайтом.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			УзелОбменаЭтаИБ = Выборка.Ссылка = ПланыОбмена.Б_ОбменССайтом.УзелОбменаЭтойИБСервер();
			
			Если НЕ УзелОбменаЭтаИБ тогда
				лУзелОбмена = Выборка.ПолучитьОбъект();
				лСохраненныеНастройки = лУзелОбмена.СохраненныеНастройки.Получить();
				
				Если НЕ лСохраненныеНастройки.ИнформацияОНоменклатуре.Свойство("ВыгружатьКартинкиИФайлыПредложений") тогда
					лСохраненныеНастройки.ИнформацияОНоменклатуре.Вставить("ВыгружатьКартинкиИФайлыПредложений", Ложь);
				КонецЕсли;
				
				лУзелОбмена.СохраненныеНастройки = Новый ХранилищеЗначения(лСохраненныеНастройки);
				лУзелОбмена.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		СообщитьПодробно("Обновление до версии 5.0.0.7 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 5.0.0.7 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры, Истина, Истина);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновлениеДоВерсии6_0_0_1(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 6.0.0.1.", ОсновныеПараметры);	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	УникальныйИдентификатор = Новый УникальныйИдентификатор;	
	Попытка
		
		Выборка = ПланыОбмена.Б_ОбменССайтом.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			УзелОбменаЭтаИБ = Выборка.Ссылка = ПланыОбмена.Б_ОбменССайтом.УзелОбменаЭтойИБСервер();
			
			Если НЕ УзелОбменаЭтаИБ тогда
				лУзелОбмена = Выборка.ПолучитьОбъект();
				лСохраненныеНастройки = лУзелОбмена.СохраненныеНастройки.Получить();
				
				лТзнДопРеквизитов = лСохраненныеНастройки.ИнформацияОНоменклатуре.СоответствиеДополнительныхРеквизитовНоменклатуры;
				
				Если лТзнДопРеквизитов.Найти("Планируемая дата поступления") = Неопределено тогда 
					НоваяСтрока = лТзнДопРеквизитов.Добавить();
					НоваяСтрока.НаименованиеПоля 	= "Планируемая дата поступления";
					НоваяСтрока.НаименованиеПоля1С 	= "Планируемая дата поступления";
				КонецЕсли;
				
				Если НЕ лСохраненныеНастройки.Заказы.Свойство("ВыгрузкаОплат") тогда
					лСохраненныеНастройки.Заказы.Вставить("ВыгрузкаОплат", Ложь);
				КонецЕсли;
				
				Если НЕ лСохраненныеНастройки.Заказы.Свойство("КоличествоДокументовВПакете") тогда
					лСохраненныеНастройки.Заказы.Вставить("КоличествоДокументовВПакете", лСохраненныеНастройки.Заказы.КоличествоЗаказовВПакете);
				КонецЕсли;
				
				Если НЕ лСохраненныеНастройки.Заказы.Свойство("ВыгружатьВсеДокументы") тогда
					лСохраненныеНастройки.Заказы.Вставить("ВыгружатьВсеДокументы", лСохраненныеНастройки.Заказы.ВыгружатьВсеЗаказы);
				КонецЕсли;
				
				Если НЕ лСохраненныеНастройки.Заказы.Свойство("НастройкиКомпоновкиДанныхОтгрузок") тогда
					КомпоновщикНастроекКомпоновкиДанныхОтгрузок = Новый КомпоновщикНастроекКомпоновкиДанных;		
					АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Отгрузки, УникальныйИдентификатор);
					КомпоновщикНастроекКомпоновкиДанныхОтгрузок.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
					КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ЗагрузитьНастройки(СтруктураССхемамиК.Отгрузки.НастройкиПоУмолчанию);
					
					лСохраненныеНастройки.Заказы.Вставить("НастройкиКомпоновкиДанныхОтгрузок", КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ПолучитьНастройки());
				КонецЕсли;
				
				Если НЕ лСохраненныеНастройки.Заказы.Свойство("НастройкиКомпоновкиДанныхОплат") тогда
					КомпоновщикНастроекКомпоновкиДанныхОплат = Новый КомпоновщикНастроекКомпоновкиДанных;		
					АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Оплаты, УникальныйИдентификатор);
					КомпоновщикНастроекКомпоновкиДанныхОплат.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
					КомпоновщикНастроекКомпоновкиДанныхОплат.ЗагрузитьНастройки(СтруктураССхемамиК.Оплаты.НастройкиПоУмолчанию);
					
					лСохраненныеНастройки.Заказы.Вставить("НастройкиКомпоновкиДанныхОплат", КомпоновщикНастроекКомпоновкиДанныхОплат.ПолучитьНастройки());
				КонецЕсли;
				
				лДокументыЗагрузки 	= лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ДокументыЗагрузки;
				лТзнВрем 			= лДокументыЗагрузки.СкопироватьКолонки();
				Для каждого ТекСтрока из лДокументыЗагрузки Цикл
					
					Если ТекСтрока.Документ = "ЗаказКлиента" тогда
					
						НоваяСтрока = лТзнВрем.Вставить(0);
						НоваяСтрока.ВидДокумента = "Заказ товара";
						
					ИначеЕсли ТекСтрока.Документ = "ПриходныйКассовыйОрдер" тогда
					
						НоваяСтрока = лТзнВрем.Вставить(2);
						НоваяСтрока.ВидДокумента = "Выплата наличных денег";
						
					ИначеЕсли ТекСтрока.Документ = "ОперацияПоПлатежнойКарте" тогда
					
						НоваяСтрока = лТзнВрем.Вставить(3);
						НоваяСтрока.ВидДокумента = "Выплата безналичных денег";
						
					ИначеЕсли ТекСтрока.Документ = "РеализацияТоваровУслуг" тогда
					
						НоваяСтрока = лТзнВрем.Вставить(1);
						НоваяСтрока.ВидДокумента = "Отпуск товара";
					Иначе
					
						НоваяСтрока = лТзнВрем.Добавить();
						НоваяСтрока.ВидДокумента = "Не известно";
					КонецЕсли;
					
					НоваяСтрока.Документ 						= ТекСтрока.Документ;
					НоваяСтрока.СинонимДокумента 				= ТекСтрока.СинонимДокумента;
					
					НоваяСтрока.НумерацияДокументов 			= ТекСтрока.НумерацияДокументов;
					НоваяСтрока.ДатаДокументов 					= ТекСтрока.ДатаДокументов;
					НоваяСтрока.ДействияСОтмененнымиДокументами = ТекСтрока.ДействияСОтмененнымиДокументами;
					НоваяСтрока.РежимЗаписиДокументов 			= ТекСтрока.РежимЗаписиДокументов;
					
				КонецЦикла;
				
				лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ДокументыЗагрузки = лТзнВрем; 
				
				лУзелОбмена.СохраненныеНастройки = Новый ХранилищеЗначения(лСохраненныеНастройки);
				лУзелОбмена.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		СообщитьПодробно("Обновление до версии 6.0.0.1 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 6.0.0.1 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры, Истина, Истина);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновлениеДоВерсии6_0_1_2(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 6.0.1.2.", ОсновныеПараметры);	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	УникальныйИдентификатор = Новый УникальныйИдентификатор;	
	Попытка
		
		Выборка = ПланыОбмена.Б_ОбменССайтом.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			лЕстьКодСтрокиВЗаказах 		= Ложь;
			лЕстьКодСтрокиВОтгрузках	= Ложь;
			
			УзелОбменаЭтаИБ = Выборка.Ссылка = ПланыОбмена.Б_ОбменССайтом.УзелОбменаЭтойИБСервер();
			
			Если НЕ УзелОбменаЭтаИБ тогда
				лУзелОбмена = Выборка.ПолучитьОбъект();
				лСохраненныеНастройки = лУзелОбмена.СохраненныеНастройки.Получить();
				
				лДокументыЗагрузки 	= лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ВсеСоответствияТабличныхЧастейДокументов;
				
				лТзнВрем 			= лДокументыЗагрузки.СкопироватьКолонки();
				
				Для каждого ТекСтрока из лДокументыЗагрузки Цикл
					
					НоваяСтрока = лТзнВрем.Добавить();
					НоваяСтрока.Документ 				= ТекСтрока.Документ;
					НоваяСтрока.НаименованиеРеквизита1С = ТекСтрока.НаименованиеРеквизита1С;
					НоваяСтрока.СинонимРеквизита1С 		= ТекСтрока.СинонимРеквизита1С;
					НоваяСтрока.ТабличнаяЧасть 			= ТекСтрока.ТабличнаяЧасть;
					НоваяСтрока.ПолеXML 				= ТекСтрока.ПолеXML;
					
					Если ТекСтрока.Документ = "ЗаказКлиента" И ТекСтрока.НаименованиеРеквизита1С = "КодСтроки" тогда
						лЕстьКодСтрокиВЗаказах = Истина;	
						НоваяСтрока.Значение 				= "Код строки";
						НоваяСтрока.ТипДанных 				= "Из поля XML документа";
					Иначе
						НоваяСтрока.Значение 				= ТекСтрока.Значение;
						НоваяСтрока.ТипДанных 				= ТекСтрока.ТипДанных;  					
					КонецЕсли;
					
					Если ТекСтрока.Документ = "РеализацияТоваровУслуг" И ТекСтрока.НаименованиеРеквизита1С = "КодСтроки" тогда
						лЕстьКодСтрокиВОтгрузках = Истина;	
						НоваяСтрока.Значение 				= "Код строки";
						НоваяСтрока.ТипДанных 				= "Из поля XML документа";
					Иначе
						НоваяСтрока.Значение 				= ТекСтрока.Значение;
						НоваяСтрока.ТипДанных 				= ТекСтрока.ТипДанных;  					
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ лЕстьКодСтрокиВЗаказах тогда
					НоваяСтрока = лТзнВрем.Добавить();
					НоваяСтрока.Документ 				= "ЗаказКлиента";
					НоваяСтрока.НаименованиеРеквизита1С = "КодСтроки";
					НоваяСтрока.СинонимРеквизита1С 		= "Код строки";
					НоваяСтрока.ТабличнаяЧасть 			= "Товары";
					НоваяСтрока.ПолеXML 				= "Товары";
					НоваяСтрока.Значение 				= "Код строки";
					НоваяСтрока.ТипДанных 				= "Из поля XML документа";
				КонецЕсли;
				
				Если НЕ лЕстьКодСтрокиВОтгрузках тогда
					НоваяСтрока = лТзнВрем.Добавить();
					НоваяСтрока.Документ 				= "РеализацияТоваровУслуг";
					НоваяСтрока.НаименованиеРеквизита1С = "КодСтроки";
					НоваяСтрока.СинонимРеквизита1С 		= "Код строки";
					НоваяСтрока.ТабличнаяЧасть 			= "Товары";
					НоваяСтрока.ПолеXML 				= "Товары";
					НоваяСтрока.Значение 				= "Код строки";
					НоваяСтрока.ТипДанных 				= "Из поля XML документа";
				КонецЕсли;
				
				//////////////////
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиТЧДокументаПоУмолчанию(лТзнВрем, "ПоступлениеБезналичныхДенежныхСредств", "РасшифровкаПлатежа", "", "Партнер"				, "Партнер"				, "Из поля XML документа"	, "Партнер");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиТЧДокументаПоУмолчанию(лТзнВрем, "ПоступлениеБезналичныхДенежныхСредств", "РасшифровкаПлатежа", "", "СтатьяДвиженияДенежныхСредств", "Статья ДДС"	, "Фиксированное значение"	, Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента);
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиТЧДокументаПоУмолчанию(лТзнВрем, "ПоступлениеБезналичныхДенежныхСредств", "РасшифровкаПлатежа", "", "ОснованиеПлатежа"		, "Основание платежа"	, "Из поля XML документа"	, "Основание");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиТЧДокументаПоУмолчанию(лТзнВрем, "ПоступлениеБезналичныхДенежныхСредств", "РасшифровкаПлатежа", "", "Заказ"					, "Объект расчетов"		, "Из поля XML документа"	, "Основание");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиТЧДокументаПоУмолчанию(лТзнВрем, "ПоступлениеБезналичныхДенежныхСредств", "РасшифровкаПлатежа", "", "Сумма"					, "Сумма"				, "Из поля XML документа"	, "Сумма");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиТЧДокументаПоУмолчанию(лТзнВрем, "ПоступлениеБезналичныхДенежныхСредств", "РасшифровкаПлатежа", "", "СуммаВзаиморасчетов"	, "Сумма взаиморасчетов", "Из поля XML документа"	, "Сумма");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиТЧДокументаПоУмолчанию(лТзнВрем, "ПоступлениеБезналичныхДенежныхСредств", "РасшифровкаПлатежа", "", "ВалютаВзаиморасчетов",	 "Валюта взаиморасчетов", "Из поля XML документа"	, "Валюта");
				//////////////////
				
				лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ВсеСоответствияТабличныхЧастейДокументов = лТзнВрем; 
				
				
				лШапкаДокумента 	= лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ВсеСоответствияШапокДокументов;
				
				//////////////////
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "Дата"						, "Дата"					, "Из поля XML документа"	, "Дата с сайта с учетом настройки обмена");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "Б_Идентификатор"			, "Идентификатор битрикс"	, "Из поля XML документа"	, "Номер с сайта");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "Б_ДатаДокумента"			, "Дата документа Битрикс"	, "Из поля XML документа"	, "Дата с сайта");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "Б_НомерВерсии"				, "Номер версии Битрикс"	, "Из поля XML документа"	, "Номер версии с сайта");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "ПометкаУдаления"			, "Пометка удаления"		, "Из поля XML документа"	, "Пометка удаления");
				
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "Организация"				, "Организация"				, "Фиксированное значение"	, Справочники.Организации.ПустаяСсылка());
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "ХозяйственнаяОперация"		, "Операция"				, "Фиксированное значение"	, Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "Валюта"						, "Валюта"					, "Из поля XML документа"	, "Валюта");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "Контрагент"					, "Контрагент"				, "Из поля XML документа"	, "Контрагент");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "СуммаДокумента"				, "Сумма документа"			, "Из поля XML документа"	, "Сумма");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "БанковскийСчет"				, "Банковский счет"			, "Из поля XML документа"	, "Банковский счет");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "БанковскийСчетКонтрагента"	, "Банковский счет контрагента", "Из поля XML документа", "Банковский счет контрагента");
				
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "ТипПлатежногоДокумента"		, "Тип платежного документа", "Фиксированное значение"	, Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
				
				
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "Комментарий"				, "Комментарий"				, "Из поля XML документа"	, "Комментарий");
				ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСтрокиДокументаПоУмолчанию(лШапкаДокумента, "ПоступлениеБезналичныхДенежныхСредств", "СтатьяДвиженияДенежныхСредств", "Статья ДДС"			, "Фиксированное значение"	, Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента);
				//////////////////
				
				лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ВсеСоответствияШапокДокументов = лШапкаДокумента; 
				
				
				лДокументыЗагрузки 	= лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ДокументыЗагрузки;
				лТзнВрем 			= лДокументыЗагрузки.СкопироватьКолонки();
				Для каждого ТекСтрока из лДокументыЗагрузки Цикл
					
					НоваяСтрока = лТзнВрем.Добавить();
					
					НоваяСтрока.Документ 						= ТекСтрока.Документ;
					НоваяСтрока.СинонимДокумента 				= ТекСтрока.СинонимДокумента;
					
					Если ТекСтрока.Документ = "ОперацияПоПлатежнойКарте" тогда
						НоваяСтрока.ВидДокумента 					= "Эквайринговая операция";
					Иначе
						НоваяСтрока.ВидДокумента 					= ТекСтрока.ВидДокумента;
					КонецЕсли;				
					
					НоваяСтрока.НумерацияДокументов 			= ТекСтрока.НумерацияДокументов;
					НоваяСтрока.ДатаДокументов 					= ТекСтрока.ДатаДокументов;
					НоваяСтрока.ДействияСОтмененнымиДокументами = ТекСтрока.ДействияСОтмененнымиДокументами;
					НоваяСтрока.РежимЗаписиДокументов 			= ТекСтрока.РежимЗаписиДокументов;
					
				КонецЦикла;
				
				//////////////////  
				НоваяСтрока = лТзнВрем.Добавить();
				НоваяСтрока.Документ 			= "ПоступлениеБезналичныхДенежныхСредств";
				НоваяСтрока.СинонимДокумента 	= "Поступление безналичных денежных средств";
				НоваяСтрока.ВидДокумента 	= "Выплата безналичных денег";
				
				НоваяСтрока.НумерацияДокументов 			= "Автоматически";
				НоваяСтрока.ДатаДокументов 					= "С сайта";
				НоваяСтрока.ДействияСОтмененнымиДокументами = "Помечать на удаление";
				НоваяСтрока.РежимЗаписиДокументов 			= "Только записывать документы";
				//////////////////
				
				лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ДокументыЗагрузки = лТзнВрем; 
				
				
				лУзелОбмена.СохраненныеНастройки = Новый ХранилищеЗначения(лСохраненныеНастройки);
				лУзелОбмена.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		СообщитьПодробно("Обновление до версии 6.0.1.2 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 6.0.1.2 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры, Истина, Истина);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновлениеДоВерсии6_0_3_1(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 6.0.3.1.", ОсновныеПараметры);	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	УникальныйИдентификатор = Новый УникальныйИдентификатор;	
	Попытка
		
		ЗагружаемыеТипыОплат = Новый СписокЗначений;
		ЗагружаемыеТипыОплат.Добавить("Выплата наличных денег"		,, Истина);
		ЗагружаемыеТипыОплат.Добавить("Эквайринговая операция"		,, Истина);
		ЗагружаемыеТипыОплат.Добавить("Выплата безналичных денег"	,, Истина);
		
		Выборка = ПланыОбмена.Б_ОбменССайтом.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			УзелОбменаЭтаИБ = Выборка.Ссылка = ПланыОбмена.Б_ОбменССайтом.УзелОбменаЭтойИБСервер();
			
			Если НЕ УзелОбменаЭтаИБ тогда
				лУзелОбмена = Выборка.ПолучитьОбъект();
				лСохраненныеНастройки = лУзелОбмена.СохраненныеНастройки.Получить();
				
				Если лСохраненныеНастройки.Заказы.Свойство("ЗагружаемыеТипыОплат") = Ложь тогда
					
					лСохраненныеНастройки.Заказы.Вставить("ЗагружаемыеТипыОплат", ЗагружаемыеТипыОплат);
					
				КонецЕсли;
				
				лУзелОбмена.СохраненныеНастройки = Новый ХранилищеЗначения(лСохраненныеНастройки);

				лУзелОбмена.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		СообщитьПодробно("Обновление до версии 6.0.3.1 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 6.0.3.1 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры, Истина, Истина);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновлениеДоВерсии6_5_0_0(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 6.5.0.0.", ОсновныеПараметры);	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	Попытка
		
		Выборка = ПланыОбмена.Б_ОбменССайтом.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			УзелОбменаЭтаИБ = Выборка.Ссылка = ПланыОбмена.Б_ОбменССайтом.УзелОбменаЭтойИБСервер();
			УникальныйИдентификатор = Новый УникальныйИдентификатор;
			
			Если НЕ УзелОбменаЭтаИБ тогда
				
				Если Выборка.ОбменВРеальномВремени тогда
					Константы.Б_ИспользоватьМеханизмОбменаВРеальномВремени.Установить(Истина);	
					Константы.Б_НастройкаОбменаДокументовВРеальномВремени.Установить(Выборка.Ссылка);	
				КонецЕсли;
				
				лУзелОбмена = Выборка.ПолучитьОбъект();
				лСохраненныеНастройки = лУзелОбмена.СохраненныеНастройки.Получить();
				
				Если лСохраненныеНастройки.Свойство("Заказы") = Истина тогда
					
					РеквизитыДокументовЗагрузки 	= лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ВсеСоответствияШапокДокументов;
					
					Для Каждого ТекСтрока из РеквизитыДокументовЗагрузки Цикл
						Если ТекСтрока.НаименованиеРеквизита1С = "Б_Идентификатор" И ТекСтрока.Значение = "Номер с сайта" тогда
							ТекСтрока.Значение = "Ид с сайта";	
						КонецЕсли;
					КонецЦикла;
					
					лСохраненныеНастройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов.ВсеСоответствияШапокДокументов = РеквизитыДокументовЗагрузки;

					Если лСохраненныеНастройки.Заказы.Свойство("НастройкиКомпоновкиДанныхЗаказов") = Истина тогда
						
						КомпоновщикНастроекКомпоновкиДанныхЗаказов = Новый КомпоновщикНастроекКомпоновкиДанных;		
						АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Заказы, УникальныйИдентификатор);
						КомпоновщикНастроекКомпоновкиДанныхЗаказов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
						КомпоновщикНастроекКомпоновкиДанныхЗаказов.ЗагрузитьНастройки(СтруктураССхемамиК.Заказы.НастройкиПоУмолчанию);
						
						лСохраненныеНастройки.Заказы.НастройкиКомпоновкиДанныхЗаказов = КомпоновщикНастроекКомпоновкиДанныхЗаказов.ПолучитьНастройки();	
						
					КонецЕсли;
					
					Если лСохраненныеНастройки.Заказы.Свойство("НастройкиКомпоновкиДанныхОплат") = Истина тогда
						
						КомпоновщикНастроекКомпоновкиДанныхОплат = Новый КомпоновщикНастроекКомпоновкиДанных;		
						АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Оплаты, УникальныйИдентификатор);
						КомпоновщикНастроекКомпоновкиДанныхОплат.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
						КомпоновщикНастроекКомпоновкиДанныхОплат.ЗагрузитьНастройки(СтруктураССхемамиК.Оплаты.НастройкиПоУмолчанию);
						
						лСохраненныеНастройки.Заказы.НастройкиКомпоновкиДанныхОплат = КомпоновщикНастроекКомпоновкиДанныхОплат.ПолучитьНастройки();	
						
					КонецЕсли;
					
					Если лСохраненныеНастройки.Заказы.Свойство("НастройкиКомпоновкиДанныхОтгрузок") = Истина тогда
						
						КомпоновщикНастроекКомпоновкиДанныхОтгрузок = Новый КомпоновщикНастроекКомпоновкиДанных;		
						АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Отгрузки, УникальныйИдентификатор);
						КомпоновщикНастроекКомпоновкиДанныхОтгрузок.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
						КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ЗагрузитьНастройки(СтруктураССхемамиК.Отгрузки.НастройкиПоУмолчанию);
						
						лСохраненныеНастройки.Заказы.НастройкиКомпоновкиДанныхОтгрузок = КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ПолучитьНастройки();	
						
					КонецЕсли;
					
					Массив = Новый Массив;
					Массив.Добавить(Тип("СписокЗначений"));
					ОписаниеТиповСпк = Новый ОписаниеТипов(Массив);
					
					Массив = Новый Массив;
					Массив.Добавить(Тип("СправочникСсылка.ЭквайринговыеТерминалы"));
					ОписаниеТиповЭТ = Новый ОписаниеТипов(Массив);

					Массив = Новый Массив;
					Массив.Добавить(Тип("СправочникСсылка.Кассы"));
					ОписаниеТиповК = Новый ОписаниеТипов(Массив);
					
					СоответствиеПлатежныхСистемИКасс = Новый ТаблицаЗначений;
					СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("ПлатежнаяСистема"		, ОписаниеТиповСпк);
					СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("Касса"					, ОписаниеТиповК);
					СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("Терминал"				, ОписаниеТиповЭТ);
					
					лСохраненныеНастройки.Заказы.СоответствиеПлатежныхСистемИКасс = СоответствиеПлатежныхСистемИКасс;	
					
				КонецЕсли;
				
				лУзелОбмена.СохраненныеНастройки = Новый ХранилищеЗначения(лСохраненныеНастройки);

				лУзелОбмена.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		СообщитьПодробно("Обновление до версии 6.5.0.0 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 6.5.0.0 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры, Истина, Истина);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновлениеДоВерсии7_0_0_0(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 7.0.0.0", ОсновныеПараметры);	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	Попытка
		
		Выборка = ПланыОбмена.Б_ОбменССайтом.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			УзелОбменаЭтаИБ = Выборка.Ссылка = ПланыОбмена.Б_ОбменССайтом.УзелОбменаЭтойИБСервер();
			
			Если НЕ УзелОбменаЭтаИБ тогда
				
				
				лУзелОбмена = Выборка.ПолучитьОбъект();
				лСохраненныеНастройки = лУзелОбмена.СохраненныеНастройки.Получить();
				
				Если лСохраненныеНастройки.Свойство("Контрагенты") = Истина тогда
					
					НастройкиКонтрагентов 	= лСохраненныеНастройки.Контрагенты;
					
					Если НастройкиКонтрагентов.Свойство("СпособИдентификацииКонтрагентов") тогда
						лСпособИдентификацииКонтрагентов = НастройкиКонтрагентов.СпособИдентификацииКонтрагентов;
					Иначе
						лСпособИдентификацииКонтрагентов = "";	
					КонецЕсли;
					
					СпкПорядокИдентификацииЮ = новый СписокЗначений;
					СпкПорядокИдентификацииЮ.Добавить("Внешний идентификатор");
					СпкПорядокИдентификацииЮ.Добавить(лСпособИдентификацииКонтрагентов);
					СпкПорядокИдентификацииЮ.Добавить("Email");
					
					СпкПорядокИдентификацииФ = новый СписокЗначений;
					СпкПорядокИдентификацииФ.Добавить("Внешний идентификатор");
					СпкПорядокИдентификацииФ.Добавить(?(лСпособИдентификацииКонтрагентов = "ИНН", "Наименование", лСпособИдентификацииКонтрагентов));
					СпкПорядокИдентификацииФ.Добавить("Email");
	
					Если НЕ НастройкиКонтрагентов.Свойство("ПорядокИдентификацииФизЛиц") тогда
						НастройкиКонтрагентов.Вставить("ПорядокИдентификацииФизЛиц"	, СпкПорядокИдентификацииФ);	
					КонецЕсли;
					
					Если НЕ НастройкиКонтрагентов.Свойство("ПорядокИдентификацииЮрЛиц") тогда
						НастройкиКонтрагентов.Вставить("ПорядокИдентификацииЮрЛиц"	, СпкПорядокИдентификацииЮ);	
					КонецЕсли;
					
					лСохраненныеНастройки.Контрагенты = НастройкиКонтрагентов;	
					
				КонецЕсли;
				
				Если лСохраненныеНастройки.Свойство("ИнформацияОНоменклатуре") = Истина тогда
					
					НастройкиТоваров 	= лСохраненныеНастройки.ИнформацияОНоменклатуре;
					
					Для Каждого ТекСтрока из НастройкиТоваров.СоответствиеОсновныхРеквизитовНоменклатуры Цикл
						
						лНаименованиеПоля1С = ТекСтрока.НаименованиеПоля1С;
						
						Если СтрНайти(лНаименованиеПоля1С, "Номенклатура") > 0 тогда 
							
							лНаименованиеПоля1С = стрЗаменить(лНаименованиеПоля1С, "Номенклатура", "[Номенклатура]");

							лНаименованиеПоля1С = "[Результат] = Строка(" + лНаименованиеПоля1С + ")";	
							
							ТекСтрока.НаименованиеПоля1С = лНаименованиеПоля1С;
						КонецЕсли;
						
					КонецЦикла;
					
					лСохраненныеНастройки.ИнформацияОНоменклатуре = НастройкиТоваров;	
					
				КонецЕсли;
				
				Попытка
					лТаблицаИнфоблоков = Выборка.СохраненнаяТаблицаКаталогов.Получить();
					лДеревоКаталогов = Выборка.ХранилищеТаблицыКлассификаторовНоменклатуры.получить();
					
					Если ТипЗнч(лТаблицаИнфоблоков) = Тип("ТаблицаЗначений") И ТипЗнч(лДеревоКаталогов) = Тип("ТаблицаЗначений") тогда
						Для каждого ТекИнфоблок из лТаблицаИнфоблоков Цикл
							Для каждого ТекДерево из лДеревоКаталогов Цикл 
								
								Если ТекИнфоблок.ИдентификаторКаталога = ТекДерево.ИдентификаторКаталога тогда
									
									лИнфоблок = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(ТекИнфоблок.ИдентификаторКаталога, Истина, Справочники.Б_ПользовательскиеГруппыТоваров.ПустаяСсылка());
									Если Не ЗначениеЗаполнено(лИнфоблок) тогда
										
										НовыйИнфоблок = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
										НовыйИнфоблок.Наименование 			= ТекИнфоблок.ИдентификаторКаталога;
										НовыйИнфоблок.ИдентификаторРаздела 	= ТекИнфоблок.ИдентификаторКаталога;
										НовыйИнфоблок.Инфоблок				= Истина;
										НовыйИнфоблок.Записать();
										
										лИнфоблок = НовыйИнфоблок.Ссылка;
									КонецЕсли;
									
									 ОбновлениеДоВерсии7_0_0_0_ПереборПользовательскогоДереваГруппРекурсивно(ТекДерево.ДеревоГрупп.Строки, лИнфоблок);
									
								КонецЕсли;
								
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				Исключение
					СообщитьПодробно("Не удалось сконвертировать пользовательское дерево групп для настройки:" + Выборка.Наименование, ОсновныеПараметры);
				КонецПопытки;
				
				
				
				лУзелОбмена.СохраненныеНастройки = Новый ХранилищеЗначения(лСохраненныеНастройки);

				лУзелОбмена.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		СообщитьПодробно("Обновление до версии 7.0.0.0 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 7.0.0.0 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры, Истина, Истина);
		СообщитьПодробно(ОписаниеОшибки(), ОсновныеПараметры, Истина, Истина);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Процедура ОбновлениеДоВерсии7_0_0_0_ПереборПользовательскогоДереваГруппРекурсивно(ДеревоГрупп, Родитель);
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		лРаздел = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоРеквизиту("ИдентификаторРаздела", СтрокаДерева.ИдГруппы, Родитель);
		
		Если ЗначениеЗаполнено(лРаздел) тогда
			Сообщить("Раздел с ИД:" + СтрокаДерева.ИдГруппы + " будет пропущен, т.к. уже есть раздел с таким ИД.");
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
		НовыйЭлемент.Наименование 			= СтрокаДерева.Группа;
		НовыйЭлемент.ИдентификаторРаздела 	= СтрокаДерева.ИдГруппы;
		НовыйЭлемент.Родитель 				= Родитель;
		
		Для каждого ТекЭлемент из СтрокаДерева.Номенклатура Цикл
			НовыйЭлемент.Товары.Добавить().Номенклатура = ТекЭлемент.Значение;
		КонецЦикла;
		
		НовыйЭлемент.Записать();
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОбновлениеДоВерсии7_0_0_0_ПереборПользовательскогоДереваГруппРекурсивно(СтрокаДерева.Строки, НовыйЭлемент.Ссылка);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


#КонецОбласти


#Область ПроцедурыИФункцииОбменаДанных

			///////////////////////////////////////////////////////////////////
			//			       ПРОЦЕДУРЫ И ФУНКЦИИ ОБМЕНА                   //
			/////////////////////////////////////////////////////////////////

			
Функция ПолучитьМассивРеквизитов5ВерсииМодуля()
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("АдресСайта");
	МассивРеквизитов.Добавить("ВыгружатьЛогНаСайт");
	МассивРеквизитов.Добавить("ВыгружатьНаСайт");
	МассивРеквизитов.Добавить("ДеактивироватьТоварыЕслиПолнаяВыгрузка");
	МассивРеквизитов.Добавить("ИдентификаторРегламентногоЗадания");
	МассивРеквизитов.Добавить("ИмяПользователя");
	МассивРеквизитов.Добавить("ИспользоватьРегламентныеЗадания");
	МассивРеквизитов.Добавить("Код");
	МассивРеквизитов.Добавить("КаталогВыгрузки");
	МассивРеквизитов.Добавить("КаталогЛога");
	МассивРеквизитов.Добавить("Комментарий");
	МассивРеквизитов.Добавить("НастройкаВерсионностиВыгружаемыхДанных");
	МассивРеквизитов.Добавить("ОбменВРеальномВремени");
	МассивРеквизитов.Добавить("Пароль");
	МассивРеквизитов.Добавить("ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах");
	МассивРеквизитов.Добавить("ФайлЗагрузки");
	МассивРеквизитов.Добавить("ХранитьФайлыОбменаНаСайте");
	МассивРеквизитов.Добавить("ЧислоПовторовПриНеудачноОтправленныхПакетах");
	МассивРеквизитов.Добавить("Идентификатор");
	МассивРеквизитов.Добавить("ВыгружатьТолькоИзменения");
	МассивРеквизитов.Добавить("СохраненнаяТаблицаКаталогов");
	МассивРеквизитов.Добавить("СохраненныеНастройки");
	МассивРеквизитов.Добавить("ХранилищеТаблицыКлассификаторовНоменклатуры");
	МассивРеквизитов.Добавить("ОбменДокументами");
	МассивРеквизитов.Добавить("ОбменТоварами");
	МассивРеквизитов.Добавить("ОбменПользовательскимиСправочниками");
	
	Возврат МассивРеквизитов;
	
КонецФункции
			
// Функция - формирует настройки узла обмена, которые используются на протяжении всего обмена данными
//
// Параметры:
//  УзелОбмена									 - 	 Узел обмена, из которого собираем настройки 
//  Параметры									 - 	 Структура с будущими настройками 
//  ПринудительнаяПолноеОбновлениеДанныхТовара	 - 	 Прзнак того, что нужно принудительно выгружать все картинки 
Функция ДобавитьОсновныеНастройкиВПараметры(УзелОбмена, Параметры) Экспорт
	
	МассивРеквизитов = ПолучитьМассивРеквизитов5ВерсииМодуля();

	//добавляем реквизиты узла обмена
	Для каждого ТекРеквизит из УзелОбмена.Метаданные().Реквизиты Цикл
		
		Если МассивРеквизитов.Найти(ТекРеквизит.Имя) = Неопределено тогда
			Продолжить;
		КонецЕсли;         
		
		Параметры.Вставить(ТекРеквизит.Имя, УзелОбмена[ТекРеквизит.Имя]);
	КонецЦикла;
	
	//Добавляем свойства, которые используем в обмене
	Параметры.Вставить("СвойствоИдМетодаОплаты", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Метод оплаты ИД", Истина));
	Параметры.Вставить("СвойствоИдентификаторОтправления", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор отправления", Ложь));
	
	Параметры.Вставить("ЕстьКритичныеОшибкиВОбмене"	, Ложь);
	Параметры.Вставить("ОбменВыполненБезОшибок"		, Истина);
	//общие настройки
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	лКаталогДляСхемыXSD = КаталогВременныхФайлов() + Строка(ГСЧ.СлучайноеЧисло()) + "\" + СокрЛП(УзелОбмена.Код);
	
	СоздатьКаталог(лКаталогДляСхемыXSD);

	лфайлСхемыXSD 	= лКаталогДляСхемыXSD +"\SchemaXSD_Exchange.XSD";
	СхемаXSD  		= ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаXSDОбмена");
	СхемаXSD.Записать(лфайлСхемыXSD);

	Параметры.Вставить("ПространствоИмен", "urn:1C.ru:commerceml_3");
	Параметры.Вставить("МояФабрикаXDTO", );
	           
	Параметры.Вставить("ВерсияСхемы"		, "3.1");
	Параметры.Вставить("ФайлСхемы"			, лфайлСхемыXSD);
	
	Параметры.Вставить("ФорматСуммы"		, "ЧЦ=18; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=");
	Параметры.Вставить("ФорматКоличества"	, "ЧРД=.; ЧН=; ЧГ=");
	
	Параметры.Вставить("Ссылка"				, УзелОбмена);
	
	ГСЧ = новый ГенераторСлучайныхЧисел;	
	Параметры.Вставить("ИдентификаторОбмена", Строка(Формат(ГСЧ.СлучайноеЧисло(), "ЧГ=0"))); 
	
	Параметры.Вставить("ПрефиксВерсии"		, Строка(Формат(ТекущаяДата()-НачалоДня(ТекущаяДата()), "ЧГ=0"))); 
	
	Параметры.Вставить("ИспользоватьПартнеровИКонтрагентов"	, ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов"));
	Параметры.Вставить("ИспользоватьУпаковкиНоменклатуры"	, ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры"));
	
	Параметры.Вставить("ИспользоватьРучныеСкидкиВПродажах"	, ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах"));
	Параметры.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах"	, ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах"));
	
	Параметры.Вставить("СтруктураСхемКомпоновки"	, ПолучитьСтруктуруСхемКомпоновки());
	
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	Параметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДатаФормирования = ТекущаяДата();
	Параметры.Вставить("ДатаФормирования", ДатаФормирования);
																																																					
	//добавляем расширения картинок
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("gif");
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");
	РазрешенныеТипыКартинок.Добавить(".gif");
	РазрешенныеТипыКартинок.Добавить(".jpg");
	РазрешенныеТипыКартинок.Добавить(".jpeg");
	РазрешенныеТипыКартинок.Добавить(".png");
	РазрешенныеТипыКартинок.Добавить("");
	Параметры.Вставить("РасширенияКартинок", РазрешенныеТипыКартинок);
	
	Параметры.НастройкаВерсионностиВыгружаемыхДанных = УзелОбмена.НастройкаВерсионностиВыгружаемыхДанных.Получить();  	
	
	Параметры.Вставить("ДатаДеактивацииПриПакетнойВыгрузке"		, Неопределено);
	
	//добавляем  данные для логирования
	Если Параметры.КаталогЛога = "" тогда
		
		Сообщить("Для настройки не задан каталог хранения лога. Лог будет храниться в каталоге выгрузки файлов.");
		
		Параметры.КаталогЛога = Параметры.КаталогВыгрузки;
		
		Если Параметры.КаталогЛога = "" тогда
			Сообщить("Не удалось указать каталог выгрузки в качестве каталога хранения лога. Ведение лога невозможно.");
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФайлаЛога = "";
	
	Если НЕ ПустаяСтрока(Параметры.КаталогЛога) Тогда
		
		лКаталогЛога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(Параметры.ПлатформаWindows, Параметры.КаталогЛога + "\reports"); 
			
		Если НЕ Б_ОбщиеПроцедурыИФункцииСервер.СуществуетФайл(лКаталогЛога) тогда
			СоздатьКаталог(лКаталогЛога);	
		КонецЕсли;
			
		ИмяФайлаЛога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(Параметры.ПлатформаWindows, лКаталогЛога + "\") + "Exchange_" + "(" + УзелОбмена.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt";
		
	КонецЕсли;
	
	Параметры.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	
	Возврат Истина;
	
КонецФункции
			
// Функция - формирует настройки узла обмена, которые используются на протяжении всего обмена данными
//
// Параметры:
//  УзелОбмена									 - 	 Узел обмена, из которого собираем настройки 
//  Параметры									 - 	 Структура с будущими настройками 
//  ПринудительнаяПолноеОбновлениеДанныхТовара	 - 	 Прзнак того, что нужно принудительно выгружать все картинки 
Функция ДобавитьНастройкиОбменаВПараметры(УзелОбмена, Параметры, ПринудительнаяПолноеОбновлениеДанныхТовара = Ложь) Экспорт
	
	ВыполнятьПолнуюВыгрузкуПринудительно = Ложь;
	Выборка = РегистрыСведений.Б_ИнформацияОНастройкахОбменаССайтом.Выбрать(Новый Структура("НастройкаОбмена" , УзелОбмена));
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидСостояния = "Принудительная полная выгрузка" тогда
			ВыполнятьПолнуюВыгрузкуПринудительно = Выборка.ПринудительнаяПолнаяВыгрузка;
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("ВыполнятьПолнуюВыгрузкуПринудительно", ВыполнятьПолнуюВыгрузкуПринудительно);	
	
	Параметры.Вставить("ПолнаяВыгрузка"	, (НЕ Параметры.ВыгружатьТолькоИзменения ИЛИ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно));
	
	Если Параметры.ВыполнятьПолнуюВыгрузкуПринудительно ИЛИ ПринудительнаяПолноеОбновлениеДанныхТовара тогда
		Параметры.Вставить("ПринудительнаяПолноеОбновлениеДанныхТовара", Истина);   		
	Иначе
		Параметры.Вставить("ПринудительнаяПолноеОбновлениеДанныхТовара", Ложь);   		
	КонецЕсли;
	
	
	Если Параметры.ОбменТоварами Тогда
		

		ТаблицаКаталогов = ПолучитьТаблицуКаталогов(Параметры);
		
		ДобавитьКлассификаторыВТаблицуКаталогов(ТаблицаКаталогов);
		
		Параметры.Вставить("ТаблицаКаталогов", ТаблицаКаталогов);
		
	КонецЕсли;	
		
	СтруктураССхемамиК 		= Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	///////////////////////////////////////
	// КЭШИРОВАНИЕ ОБЩЕЙ ИНФОРМАЦИИ     //
	/////////////////////////////////////

	тзнКэшДанных = новый ТаблицаЗначений;
	тзнКэшДанных.Колонки.Добавить("ИдентификаторКаталога");
	тзнКэшДанных.Колонки.Добавить("ОбщийСписокСкладов");
	тзнКэшДанных.Колонки.Добавить("ОбщийСписокСоглашений");
	тзнКэшДанных.Колонки.Добавить("ОбщийСписокЕдиницИзмерений");
	////////////////////////////////////////////
	тзнКэшДанных.Колонки.Добавить("ИмяДанных");
	тзнКэшДанных.Колонки.Добавить("Значение");
	
	
	Параметры.Вставить("КэшДанных", тзнКэшДанных);
	
	
	///////////////////////////////////////
	// ПАРАМЕТРЫ ОБЪЕКТОВ               //
	/////////////////////////////////////
	
	СтрСохраненныхНастроек = Параметры.СохраненныеНастройки.Получить();	
	
	Если СтрСохраненныхНастроек = Неопределено тогда
		Сообщить("Ошибка в данных настройки. Пересоздадите эту настройку обмена.");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка		
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.ИнформацияОНоменклатуре);
		Параметры.НастройкаСвойствТоваровИХарактеристик = ПланыОбмена.Б_ОбменССайтом.ОбновитьСвойстваВТаблицеЗначений(Параметры.НастройкаСвойствТоваровИХарактеристик);
		
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.ПользовательскиеСправочники);
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Скидки);
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.КартыЛояльности);
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Контрагенты);
		  
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Заказы);
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, Параметры.СохраненныеНастройкиЗагружаемыхДокументов);
		
		//Проверяем важные реквизиты	
		
		Если НЕ СтрСохраненныхНастроек.ИнформацияОНоменклатуре.Свойство("ВыгружатьКартинкиИФайлыПредложений") тогда
			Параметры.Вставить("ВыгружатьКартинкиИФайлыПредложений", Ложь);
		КонецЕсли;
		
		Если НЕ СтрСохраненныхНастроек.Заказы.Свойство("ВыгрузкаОплат") тогда
			Параметры.Вставить("ВыгрузкаОплат", Ложь);
		КонецЕсли;
		
		Если НЕ СтрСохраненныхНастроек.Заказы.Свойство("КоличествоДокументовВПакете") тогда
			Параметры.Вставить("КоличествоДокументовВПакете", 20);
		КонецЕсли;
			
		Если НЕ СтрСохраненныхНастроек.Заказы.Свойство("ВыгружатьВсеДокументы") тогда
			Параметры.Вставить("ВыгружатьВсеДокументы", Ложь);
		КонецЕсли;
		
		Если НЕ СтрСохраненныхНастроек.Заказы.Свойство("НастройкиКомпоновкиДанныхОтгрузок") тогда
			КомпоновщикНастроекКомпоновкиДанныхОтгрузок = Новый КомпоновщикНастроекКомпоновкиДанных;		
			АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Отгрузки, УникальныйИдентификатор);
			КомпоновщикНастроекКомпоновкиДанныхОтгрузок.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
			КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ЗагрузитьНастройки(СтруктураССхемамиК.Отгрузки.НастройкиПоУмолчанию);
			
			Параметры.Вставить("НастройкиКомпоновкиДанныхОтгрузок", КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ПолучитьНастройки());
		КонецЕсли;
		
		Если НЕ СтрСохраненныхНастроек.Заказы.Свойство("НастройкиКомпоновкиДанныхОплат") тогда
			КомпоновщикНастроекКомпоновкиДанныхОплат = Новый КомпоновщикНастроекКомпоновкиДанных;		
			АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Оплаты, УникальныйИдентификатор);
			КомпоновщикНастроекКомпоновкиДанныхОплат.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
			КомпоновщикНастроекКомпоновкиДанныхОплат.ЗагрузитьНастройки(СтруктураССхемамиК.Оплаты.НастройкиПоУмолчанию);
			
			Параметры.Вставить("НастройкиКомпоновкиДанныхОплат", КомпоновщикНастроекКомпоновкиДанныхОплат.ПолучитьНастройки());
		КонецЕсли;
		
		//проверка корректности значений параметров объектов
		
		//соответствия касс конвертируем в одну таблицу.
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.ЭквайринговыеТерминалы"));
		ОписаниеТиповЭТ = Новый ОписаниеТипов(Массив);

		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Кассы"));
		ОписаниеТиповК = Новый ОписаниеТипов(Массив);
		
		СоответствиеПлатежныхСистемИКасс = Новый ТаблицаЗначений;
		СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("ИдПлатежнойСистемы"		, ОписаниеТиповС);
		СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("НазваниеПлатежнойСистемы", ОписаниеТиповС);
		СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("Касса"					, ОписаниеТиповК);
		СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("Терминал"				, ОписаниеТиповЭТ);
		
		Если ЗначениеЗаполнено(Параметры.СоответствиеПлатежныхСистемИКасс) тогда
			Для каждого ТекЭлемент из Параметры.СоответствиеПлатежныхСистемИКасс Цикл
				
				Для Каждого ТекПлатежнаяСистема из ТекЭлемент.ПлатежнаяСистема Цикл 
					НоваяСтрока = СоответствиеПлатежныхСистемИКасс.Добавить();
					НоваяСтрока.Касса 						= ТекЭлемент.Касса;
					НоваяСтрока.Терминал 					= ТекЭлемент.Терминал;
					НоваяСтрока.ИдПлатежнойСистемы 			= ТекПлатежнаяСистема.Значение;
					НоваяСтрока.НазваниеПлатежнойСистемы 	= ТекПлатежнаяСистема.Представление;
					
				КонецЦикла;		
				
			КонецЦикла;
			
		КонецЕсли;
		Параметры.СоответствиеПлатежныхСистемИКасс = СоответствиеПлатежныхСистемИКасс;
		//////////////////////////////////////////////////////////////////////////////////////////////////
		
		Параметры.КоличествоТоваровВПакете  			= ?(Параметры.КоличествоТоваровВПакете 				= 0, 1, Параметры.КоличествоТоваровВПакете);
		Параметры.КоличествоДокументовВПакете 			= ?(Параметры.КоличествоДокументовВПакете 			= 0, 1, Параметры.КоличествоДокументовВПакете);
		Параметры.КоличествоКонтрагентовВПакете 		= ?(Параметры.КоличествоКонтрагентовВПакете 		= 0, 1, Параметры.КоличествоКонтрагентовВПакете);
		Параметры.КоличествоЭлементовСправочникаВПакете = ?(Параметры.КоличествоЭлементовСправочникаВПакете = 0, 1, Параметры.КоличествоЭлементовСправочникаВПакете);
		Параметры.КоличествоКартЛояльностиВПакете 		= ?(Параметры.КоличествоКартЛояльностиВПакете 		= 0, 1, Параметры.КоличествоКартЛояльностиВПакете);
		Параметры.КоличествоПредложенийВПакете 			= ?(Параметры.КоличествоПредложенийВПакете 			= 0, 1, Параметры.КоличествоПредложенийВПакете);
		Параметры.КоличествоСвойствВПакете 				= ?(Параметры.КоличествоСвойствВПакете 				= 0, 1, Параметры.КоличествоСвойствВПакете);
		Параметры.КоличествоСкидокВПакете 				= ?(Параметры.КоличествоСкидокВПакете 				= 0, 1, Параметры.КоличествоСкидокВПакете);
	Исключение
		Сообщить("Ошибка в данных настройки. Пересоздадите эту настройку обмена.");
		Возврат Ложь;
	КонецПопытки;

	
	
	//добавляем массивы документов для отборов
	Если Параметры.ОбменДокументами тогда
		
		лИспользуетсяОтборПоЗаказам = Ложь;
		Для Каждого ТекОтбор из Параметры.НастройкиКомпоновкиДанныхЗаказов.Отбор.Элементы Цикл
			Если ТекОтбор.Использование тогда
				лИспользуетсяОтборПоЗаказам = Истина;	
			КонецЕсли;
		КонецЦикла;
		
		Если лИспользуетсяОтборПоЗаказам тогда
			Запрос = Б_ОбменССайтомСерверВыгрузкаДанных.ПолучитьЗапросДляВыгрузкиДанных(Параметры, "Документы", Параметры.СтруктураСхемКомпоновки.Заказы, Параметры.НастройкиКомпоновкиДанныхЗаказов, Истина, Неопределено);
			ТаблицаВыгрузкиЗаказов = Запрос.Выполнить().Выгрузить();
			Параметры.Вставить("ВыгружаемыеЗаказыПоОтборам", ТаблицаВыгрузкиЗаказов.ВыгрузитьКолонку("Объект"));	
		Иначе
			Параметры.Вставить("ВыгружаемыеЗаказыПоОтборам", Неопределено);	
		КонецЕсли;
		
		
		лИспользуетсяОтборПоОплатам = Ложь;
		Если Параметры.ВыгрузкаОплат тогда
			Для Каждого ТекОтбор из Параметры.НастройкиКомпоновкиДанныхОплат.Отбор.Элементы Цикл
				Если ТекОтбор.Использование тогда
					лИспользуетсяОтборПоОплатам = Истина;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если лИспользуетсяОтборПоОплатам тогда
			Запрос = Б_ОбменССайтомСерверВыгрузкаДанных.ПолучитьЗапросДляВыгрузкиДанных(Параметры, "Документы", Параметры.СтруктураСхемКомпоновки.Оплаты, Параметры.НастройкиКомпоновкиДанныхОплат, Истина, Неопределено);
			ТаблицаВыгрузкиОплат = Запрос.Выполнить().Выгрузить();
			Параметры.Вставить("ВыгружаемыеОплатыПоОтборам", ТаблицаВыгрузкиОплат.ВыгрузитьКолонку("Объект"));	
		Иначе
			Параметры.Вставить("ВыгружаемыеОплатыПоОтборам", Неопределено);	
		КонецЕсли;
		
		
		лИспользуетсяОтборПоОтгрузкам = Ложь;
		Если Параметры.ВыгрузкаОтгрузок тогда
			Для Каждого ТекОтбор из Параметры.НастройкиКомпоновкиДанныхОтгрузок.Отбор.Элементы Цикл
				Если ТекОтбор.Использование тогда
					лИспользуетсяОтборПоОтгрузкам = Истина;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если лИспользуетсяОтборПоОтгрузкам тогда
			Запрос = Б_ОбменССайтомСерверВыгрузкаДанных.ПолучитьЗапросДляВыгрузкиДанных(Параметры, "Документы", Параметры.СтруктураСхемКомпоновки.Отгрузки, Параметры.НастройкиКомпоновкиДанныхОтгрузок, Истина, Неопределено);
			ТаблицаВыгрузкиОтгрузок = Запрос.Выполнить().Выгрузить();
			Параметры.Вставить("ВыгружаемыеОтгрузкиПоОтборам", ТаблицаВыгрузкиОтгрузок.ВыгрузитьКолонку("Объект"));	
		Иначе
			Параметры.Вставить("ВыгружаемыеОтгрузкиПоОтборам", Неопределено);	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция - возвращает структуру со схемами компоновки данных 
// Возвращаемое значение:
//   Структура со схемами данных 
Функция ПолучитьСтруктуруСхемКомпоновки() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ОбщаяИнформация"	, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиОбщейИнформации")); 	
	Результат.Вставить("Свойства"			, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиСвойств")); 	
	Результат.Вставить("Товары"				, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиТоваров")); 	
	Результат.Вставить("Скидки"				, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиСкидок")); 	
	Результат.Вставить("ДисконтныеКарты"	, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиДисконтныхКарт")); 	
	Результат.Вставить("Контрагенты"		, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиКонтрагентов")); 	
	Результат.Вставить("Заказы"				, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиЗаказов")); 	
	Результат.Вставить("Оплаты"				, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиОплат")); 	
	Результат.Вставить("Отгрузки"			, ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиОтгрузок")); 	
	
	Возврат Результат;
	
КонецФункции

// Процедура - добавляет в настройки узла обмена ключи и значения указанной структуры настроек 
//
// Параметры:
//  Параметры			 - 	 Настройки узла обмена  
//  СтруктураНастроек	 - 	 Структура настроек, которую нужно добавить в настройки узла обмена  
Процедура ДобавитьСтруктурыНастроекВПараметры(Параметры, СтруктураНастроек)
	
	Для Каждого ТекКлюч из СтруктураНастроек Цикл
		
		Если НЕ Параметры.Свойство(ТекКлюч.Ключ) тогда
			Параметры.Вставить(ТекКлюч.Ключ, ТекКлюч.Значение);	
		КонецЕсли;
  	КонецЦикла;
	
	
КонецПроцедуры

// Процедура - выполяняет таймаут 
//
// Параметры:
//  ДлительностьСек	 - 	 длительность таймаута (сек) 
Процедура Таймаут(ДлительностьСек) Экспорт
	
	Начало = ТекущаяДата();
	Сч = 0;
	
	Пока Истина Цикл
		
		Сч = Сч + 1;
		
		Если Сч % 10000 = 0 Тогда
			Если ТекущаяДата() - Начало > ДлительностьСек Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - выполняет обмен с сайтом
//
// Параметры:
//  Настройка									 - 	 Настройки узла обмена  
//  ПринудительнаяПолноеОбновлениеДанныхТовара	 - 	 Признак того, что нужно принудительно выгружать все картинки 
Процедура ВыполнитьОбмен(Настройка, ПринудительнаяПолноеОбновлениеДанныхТовара = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеПараметры = Новый Структура;
	НастройкиУспешноДобавлены = ДобавитьОсновныеНастройкиВПараметры(Настройка, ОсновныеПараметры);
	
	Если НЕ НастройкиУспешноДобавлены тогда
		Возврат;
	КонецЕсли;
	
	СообщитьПодробно("______________________________________________________________________", ОсновныеПараметры);	
	СообщитьПодробно("Начало обмена узла " + Строка(Настройка), ОсновныеПараметры, Истина, Ложь, Истина);	
	
	//Проверяем, необходимо ли сделать обновление базы.
	Если НЕ ПроверкаОбновленияДанныхМодуляОбменаССайтом(ОсновныеПараметры) тогда
		
		СообщитьПодробно("Не удалось установить все обновления. Продолжение выгрузки невозможно." , ОсновныеПараметры, Истина, Истина);	
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиУспешноДобавлены = ДобавитьНастройкиОбменаВПараметры(Настройка, ОсновныеПараметры, ПринудительнаяПолноеОбновлениеДанныхТовара);
	
	Если НЕ НастройкиУспешноДобавлены тогда
		
		СообщитьПодробно("Не удалось настройки обмена. Продолжение выгрузки невозможно." , ОсновныеПараметры, Истина, Истина);	
		
		Возврат;		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгружатьНаСайт Тогда
		
		ОписаниеОшибки = "";
		
		НастройкиПодключения = Новый Структура;
		
		Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, ОсновныеПараметры) Тогда
			
			СообщитьПодробно(ОписаниеОшибки, ОсновныеПараметры, Истина, Истина);	
			
			Возврат;
		КонецЕсли;
		
		ДобавитьПараметрыПротоколаОбменаВСтруктуру(НастройкиПодключения);
		
		ОсновныеПараметры.Вставить("НастройкиПодключения", НастройкиПодключения);
		
	КонецЕсли;
	
	//Обмен
	КаталогВыгрузки = "";
	
	Если НЕ ОсновныеПараметры.ВыгружатьНаСайт Тогда
		КаталогВыгрузки = ОсновныеПараметры.КаталогВыгрузки;
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		КаталогВыгрузки = КаталогВременныхФайлов() + Строка(ГСЧ.СлучайноеЧисло()) + "\";
	Иначе
		КаталогВыгрузки = ОсновныеПараметры.КаталогВыгрузки;
		ПоследнийСимвол = Прав(КаталогВыгрузки, 1);
		Если НЕ ПоследнийСимвол = "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
	КонецЕсли;
	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata\";
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки + СокрЛП(ОсновныеПараметры.Ссылка.Код);
	КаталогНаДиске = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, КаталогНаДиске);
	
	СообщитьПодробно("  Каталог на диске: " + КаталогНаДиске, ОсновныеПараметры);	
	
	Попытка
		СоздатьКаталог(КаталогНаДиске);
	Исключение
		
		СообщитьПодробно(ОписаниеОшибки(), ОсновныеПараметры, Истина, Истина);	
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ Б_ОбщиеПроцедурыИФункцииСервер.КаталогОчищен(КаталогНаДиске, ОсновныеПараметры) Тогда
		
		СообщитьПодробно("Не удалось очистить каталог: " + КаталогНаДиске + ". Продолжение выгрузки невозможно." , ОсновныеПараметры, Истина, Истина);	
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("КаталогНаДиске"	, КаталогНаДиске);
	ОсновныеПараметры.ФайлЗагрузки = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, ОсновныеПараметры.ФайлЗагрузки);
	
	ОсновныеПараметры.Вставить("ПодкаталогФайлов"	, "import_files");
	ОсновныеПараметры.Вставить("НаименованиеНалога"	, "НДС");
	ОсновныеПараметры.Вставить("НаименованиеСкидки"	, НСтр("ru = 'Скидка'"));
	
	Если ОсновныеПараметры.ОбменТоварами Тогда
				
		СообщитьПодробно("Выгрузка информации по товарам.", ОсновныеПараметры);	
		
		Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеПакетовДанных(ОсновныеПараметры			, "ОбщаяИнформация");
		Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры	, "ОбщаяИнформация");
		
		Если ОсновныеПараметры.ВыгружатьСвойства тогда
		
			СообщитьПодробно("Выгрузка неотправленных пакетов данных о  свойствах.", ОсновныеПараметры);	
				Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Свойства", Истина);
			СообщитьПодробно("Выгрузка неотправленных пакетов данных о свойствах ЗАВЕРШЕНА", ОсновныеПараметры);	
			
			СообщитьПодробно("Выгрузка свойств товаров и предложений.", ОсновныеПараметры);	
				Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеПакетовДанных(ОсновныеПараметры, "Свойства");
				Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Свойства");
			СообщитьПодробно("Выгрузка свойств товаров и предложений ЗАВЕРШЕНА", ОсновныеПараметры);	
		КонецЕсли;		
		
		СообщитьПодробно("Выгрузка неотправленных пакетов данных о товарах и предложениях.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Товары", Истина);
		СообщитьПодробно("Выгрузка неотправленных пакетов данных  о товарах и предложениях ЗАВЕРШЕНА", ОсновныеПараметры);	
		
		СообщитьПодробно("Выгрузка информации  о товарах и предложениях.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеПакетовДанных(ОсновныеПараметры, "Товары");
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Товары");
		СообщитьПодробно("Выгрузка информации  о товарах и предложениях ЗАВЕРШЕНА", ОсновныеПараметры);	
																																						
	КонецЕсли;

#Область НеиспользуемыеСкидки
	
	Если ОсновныеПараметры.ВыгрузкаСкидок Тогда 
		
		СообщитьПодробно("Выгрузка информации по скидкам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Скидки", Истина);
		СообщитьПодробно("Выгрузка информации по скидкам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
		СообщитьПодробно("Выгрузка информации по скидкам", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеПакетовДанных(ОсновныеПараметры, "Скидки");
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Скидки");
		СообщитьПодробно("Выгрузка информации по скидкам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгрузкаКартЛояльности Тогда 
				
		СообщитьПодробно("Выгрузка информации по дисконтным картам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "КартыЛояльности", Истина);
		СообщитьПодробно("Выгрузка информации по дисконтным картам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
		СообщитьПодробно("Выгрузка информации по дисконтным картам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеПакетовДанных(ОсновныеПараметры, "КартыЛояльности");
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "КартыЛояльности", Истина);
		СообщитьПодробно("Выгрузка информации по дисконтным картам ЗАВЕРШЕНА", ОсновныеПараметры);	

	КонецЕсли;

#КонецОбласти
	
	Если ОсновныеПараметры.ВыгрузкаКонтрагентов Тогда
			
		СообщитьПодробно("Выгрузка неотправленных пакетов о информации по контрагентам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Контрагенты", Истина);
		СообщитьПодробно("Выгрузка неотправленных пакетов и информации по контрагентам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
		СообщитьПодробно("Выгрузка информации по контрагентам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеПакетовДанных(ОсновныеПараметры, "Контрагенты");
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Контрагенты");
		СообщитьПодробно("Выгрузка информации по контрагентам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
	КонецЕсли;

	Если ОсновныеПараметры.ОбменДокументами Тогда
		
		СообщитьПодробно("Загрузка информации по документам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверЗагрузкиДанных.ЗагрузкаДокументов(ОсновныеПараметры);
		СообщитьПодробно("Загрузка информации по документам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
		СообщитьПодробно("Выгрузка неотправленных пакетов о информации по документам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Документы", Истина);
		СообщитьПодробно("Выгрузка неотправленных пакетов о информации по документам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
		СообщитьПодробно("Выгрузка информации по документам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеПакетовДанных(ОсновныеПараметры, "Документы");
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Документы");
		СообщитьПодробно("Выгрузка информации по документам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгрузкаПользовательскихСправочников Тогда 
		
		СообщитьПодробно("Выгрузка информации по пользовательским справочникам.", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "ПользовательскиеСправочники", Истина);
		СообщитьПодробно("Выгрузка информации по пользовательским справочникам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
		СообщитьПодробно("Выгрузка информации по пользовательским справочникам", ОсновныеПараметры);	
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеПакетовДанных(ОсновныеПараметры, "ПользовательскиеСправочники");
			Б_ОбменССайтомСерверВыгрузкаДанных.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "ПользовательскиеСправочники");
		СообщитьПодробно("Выгрузка информации по пользовательским справочникам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгружатьЛогНаСайт И ОсновныеПараметры.ВыгружатьНаСайт И ОсновныеПараметры.ИмяФайлаЛога <> "" тогда
		
		СообщитьПодробно("Выгрузка текущего лог файла на сайт.", ОсновныеПараметры, Истина, Ложь, Истина);	
		
		ВыгрузитьЛогФайлНаСайт(ОсновныеПараметры);
		
	КонецЕсли;
	
	СообщитьПодробно("  Удаление временных файлов: " + ОсновныеПараметры.ФайлСхемы, ОсновныеПараметры);	
	УдалитьФайлы(ОсновныеПараметры.ФайлСхемы);
	
	Если НЕ ОсновныеПараметры.ЕстьКритичныеОшибкиВОбмене тогда
		лНаборЗаписей = РегистрыСведений.Б_ИнформацияОНастройкахОбменаССайтом.СоздатьНаборЗаписей();
		лНаборЗаписей.Отбор.НастройкаОбмена.Установить(ОсновныеПараметры.Ссылка);
		лНаборЗаписей.Отбор.ВидСостояния.Установить("Ошибка");
		лНаборЗаписей.Записать();
		
		Если ОсновныеПараметры.ОбменВыполненБезОшибок тогда
			лНаборЗаписей = РегистрыСведений.Б_ПакетныйОбмен.СоздатьНаборЗаписей();
			лНаборЗаписей.Отбор.Объект.Установить(ОсновныеПараметры.Ссылка);
			лНаборЗаписей.Записать();
			
			лНоваяЗапись = РегистрыСведений.Б_ИнформацияОНастройкахОбменаССайтом.СоздатьМенеджерЗаписи();
			лНоваяЗапись.НастройкаОбмена 				= ОсновныеПараметры.Ссылка;
			лНоваяЗапись.ВидСостояния 					= "Принудительная полная выгрузка";
			лНоваяЗапись.ПринудительнаяПолнаяВыгрузка 	= Ложь;
			лНоваяЗапись.Записать();
		КонецЕсли;
		
	КонецЕсли;
		
	СообщитьПодробно("Завершение обмена " + Строка(Настройка), ОсновныеПараметры, Истина, Ложь, Истина);	
	СообщитьПодробно("______________________________________________________________________", ОсновныеПараметры);	
	СообщитьПодробно(" ", ОсновныеПараметры);	
	Б_ОбщиеПроцедурыИФункцииСервер.ОтображениеСостояния("")	
	
КонецПроцедуры

// Процедура - добавляет пользовательское дерево групп в таблицу каталогов
//
// Параметры:
//  ТаблицаКаталогов		 - 	 Таблица каталогов 
//  ТаблицаКлассификаторов	 - 	 Таблица пользовательских деревеьев групп 
Процедура ДобавитьКлассификаторыВТаблицуКаталогов(ТаблицаКаталогов) Экспорт
	
	ТаблицаКаталогов.Колонки.Добавить("ДеревоГрупп");
	
	Для Каждого СтрокаТаблицы Из ТаблицаКаталогов Цикл
		
		НайденноеДеревоГрупп = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(СтрокаТаблицы.ИдентификаторКаталога,Истина);
		
		Если ЗначениеЗаполнено(НайденноеДеревоГрупп) тогда
			
			Выборка = Справочники.Б_ПользовательскиеГруппыТоваров.Выбрать(НайденноеДеревоГрупп);
			Если НЕ Выборка.Следующий() Тогда
				НайденноеДеревоГрупп = Справочники.Б_ПользовательскиеГруппыТоваров.ПустаяСсылка();	
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.ДеревоГрупп = НайденноеДеревоГрупп;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - возвращает таблицу каталогов их хранилища значений
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//  таблица каталогов 
Функция ПолучитьТаблицуКаталогов(ПараметрыОбмена)
	ТаблицаКаталогов = ПараметрыОбмена.СохраненнаяТаблицаКаталогов.Получить();
	Для Каждого ДанныеКаталога Из ТаблицаКаталогов Цикл
		МассивУдалить = Новый Массив;
		Для Каждого Группа Из ДанныеКаталога.Группы Цикл
			Если НЕ ЗначениеЗаполнено(Группа.Значение) Тогда
				МассивУдалить.Добавить(Группа);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдалитьЭлемент Из МассивУдалить Цикл
			ДанныеКаталога.Группы.Удалить(УдалитьЭлемент);
		КонецЦикла;
	КонецЦикла;
	ТаблицаКаталогов.Колонки.Добавить("СтруктураРезультата");
	Возврат ТаблицаКаталогов;
КонецФункции

#КонецОбласти


#Область ПрочиеПроцедурыИФункции

			///////////////////////////////////////////////////////////////////
			//				 ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ                     //
			/////////////////////////////////////////////////////////////////

Процедура ВыполнитьОбменИнтерактивно(ПараметрыОбмена, АдресРезультата = Неопределено) Экспорт
	
	ВыполнитьОбмен(ПараметрыОбмена.УзелОбмена, ПараметрыОбмена.ПринудительнаяПолноеОбновлениеДанныхТовара);
	
КонецПроцедуры

// Процедура запускается по расписанию фонового задания.
//
// Параметры:
//  КодНастройки - 	 код узла обмена с настройкаи обмена с сайтом 
Процедура ЗаданиеОбменССайтом(КодНастройки) Экспорт
	
	Если ЭтоКопияБазы() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена = ПланыОбмена.Б_ОбменССайтом.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыОбмена.ИспользоватьРегламентныеЗадания Тогда
		Возврат;
	КонецЕсли;
	
	Попытка    //замедляется скорость, но попробуем. Если не нужно - можно закоментить
		ВыполнитьОбмен(ПараметрыОбмена);
	Исключение
		Б_ОбменССайтомСервер.ДобавитьИнформациюООшибкеВОбмене(ПараметрыОбмена, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Функция возвращает версию выгружаемого объекта 1С с учетом дополнительных настроек.
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  Версия			 - 	 Текущая версия объекта 1С
//  ТипОбъекта		 - 	 Тип объекта 1С 
// Возвращаемое значение:
//   Версия объекта 1С  
Функция ПолучитьВерсиюОбъекта(ПараметрыОбмена, Версия, ТипОбъекта) Экспорт
	 
	 лВерсия = Версия;
	
	Если (ТипОбъекта = "Товаров" ИЛИ ТипОбъекта = "Предложений") И ПараметрыОбмена.ПринудительнаяПолноеОбновлениеДанныхТовара тогда
		лВерсия = Версия + ПараметрыОбмена.ПрефиксВерсии;	
		Возврат лВерсия;
	КонецЕсли;
	
	Если ПараметрыОбмена.НастройкаВерсионностиВыгружаемыхДанных <> Неопределено тогда
		НайденноеЗначение = ПараметрыОбмена.НастройкаВерсионностиВыгружаемыхДанных.НайтиПоЗначению(ТипОбъекта);
		
		Если НайденноеЗначение <> Неопределено тогда
			Если НайденноеЗначение.Пометка тогда
				лВерсия = Версия + ПараметрыОбмена.ПрефиксВерсии;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лВерсия;
	
КонецФункции
			
// Функция Функция проверяет, является ли указанный элемент верхнего уровня
//
// Параметры:
//  Элемент		 - 	 Выбранный проверяемый элемент 
//  СписокГрупп	 - 	 Список проверяемых групп 
// Возвращаемое значение:
//   Истина, если выбранный элемент верхнего уровня среди указанного списка групп
Функция ЭтоГруппаВерхнегоУровня(Элемент, СписокГрупп) Экспорт
	Если ТипЗнч(СписокГрупп) = Тип("СписокЗначений") Тогда
		Для Каждого Группа Из СписокГрупп Цикл
			Если Группа.Значение.ПринадлежитЭлементу(Элемент) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Функция возвращает истина, если группа является конечная
//
// Параметры:
//  СписокГрупп	 - 	 Список проверяемых групп 
//  Элемент		 - 	 Проверяеммая группа 
// Возвращаемое значение:
//   Истина, если гуказанную группу нужно выгружать
Функция НужноВыгружатьГруппу(СписокГрупп, Элемент) Экспорт
	
	Если ТипЗнч(СписокГрупп) = Тип("СписокЗначений") Тогда
		Если СписокГрупп.Количество() = 0 тогда
			Возврат Истина;
		КонецЕсли;  		
		Для Каждого Группа Из СписокГрупп Цикл
			Если Элемент.ПринадлежитЭлементу(Группа.Значение) ИЛИ Элемент = Группа.Значение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает строковое представление ставки НДС
//
// Параметры:
//  СтавкаНДС	 - 	 - 
// Возвращаемое значение:
//   Ставка НДС строкой
Функция ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС)Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ЗначениеНалога = "Без налога";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		ЗначениеНалога = "0";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ЗначениеНалога = "10";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ЗначениеНалога = "10/110";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ЗначениеНалога = "18";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ЗначениеНалога = "18/118";
	Иначе
		ЗначениеНалога = "";
	КонецЕсли;
	
	Возврат ЗначениеНалога;
	
КонецФункции

// Функция возвращает ставку НДС по строковому значению
//
// Параметры:
//  СтавкаНДС	 - 	 Ставка НДС строкой 
// Возвращаемое значение:
//   Ставка НДС. Если по строке не найдена, устанавливается "Без НДС"
Функция ПолучитьНДСПоставке(СтавкаНДС) Экспорт
	
	лНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Если СтавкаНДС = "18" тогда
		лНДС = Перечисления.СтавкиНДС.НДС18;	
	ИначеЕсли СтавкаНДС = "10" тогда
		лНДС = Перечисления.СтавкиНДС.НДС10;	
	КонецЕсли;
	
	Возврат лНДС;
	
КонецФункции

// Функция возвращает объект 1С, по идентификатору, пришедшему с сайта
//
// Параметры:
//  Код			 - 	 Идентификатор с сайта 
//  ТипОбъекта	 - 	 Типо объекта 1С 
//  ИмяОбъекта	 - 	 Имя справочника 1С, где искать объект 
// Возвращаемое значение:
//   Найденный объект 1С. Если не найден, то возвращается Неопределено
Функция ПолучениеОбъектаПоКоду(Код, ТипОбъекта, ИмяОбъекта = "", ТаблицаКэша = Неопределено) Экспорт
	
	Результат = Неопределено;

	Если ТаблицаКэша <> Неопределено тогда
		
		НайденнаяСтрока = ТаблицаКэша.Найти(Код, "Ид");
		
		Если НайденнаяСтрока <> Неопределено тогда
			Результат = НайденнаяСтрока.Ссылка;	
		КонецЕсли;
		
	КонецЕсли; 	
	
	Если Результат = Неопределено тогда
		Попытка
			Результат = XMLЗначение(Тип(ТипОбъекта), Код);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Если Результат = Неопределено и ИмяОбъекта <> "" тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Справочник.Ссылка
		|ИЗ
		|	" + ИмяОбъекта + " КАК Справочник
		|ГДЕ
		|	Справочник.Б_Идентификатор = &Идентификатор";
		запрос.УстановитьПараметр("Идентификатор",Код);
		тзнВрем = запрос.Выполнить().Выгрузить();
		Если тзнВрем.Количество() > 0 тогда
			Результат = тзнВрем[0].Ссылка; 	   
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает контрагента 1С, по идентификатору и наименованию, пришедшему с сайта
//
// Параметры:
//  Код						 - 	 Идентификатор с сайта 
//  ТипОбъекта				 - 	 Тип Объекта 1С 
//  НаименованиеКонтрагента	 - 	 Наименование контрагента 
// Возвращаемое значение:
//   Найденный контрагент 1С. Если не найден, то возвращается Неопределено
Функция ПолучениеКонтрагентаПоКоду(ПараметрыОбмена, Код, НаименованиеКонтрагента) Экспорт
	
	Попытка
		Результат = XMLЗначение(Тип("СправочникСсылка.Контрагенты"), Код);
	Исключение
		Результат = Справочники.Контрагенты.ПустаяСсылка();
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Результат) тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Справочники.Контрагенты.ПустаяСсылка(), Результат);
	КонецЕсли;
	
	Если Результат = Неопределено тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Справочник.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Справочник
		|ГДЕ
		|	Справочник.Б_Идентификатор = &Идентификатор
		|	И Справочник.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Идентификатор"	, Код);
		Запрос.УстановитьПараметр("Наименование"	, НаименованиеКонтрагента);
		
		тзнВрем = запрос.Выполнить().Выгрузить();
		
		КоличествоНайденных =  тзнВрем.Количество();
		
		Если КоличествоНайденных > 1 тогда
			СообщитьПодробно("Найдено несколько контрагентов по идентификатору: " + Код + ". Будет произведен поиск по другим критериям ", ПараметрыОбмена)		
		ИначеЕсли КоличествоНайденных = 1 тогда
			Результат = тзнВрем[0].Ссылка; 	   
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДокументПоКоду(ИмяДокумента, Номер1С, Дата1С, Идентификатор, ХозОперация, МенеджерВременныхТаблиц) Экспорт
	
	ВидДокумента 	= Документы[ИмяДокумента];
	
	Документ 		= ВидДокумента.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Номер1С) и ЗначениеЗаполнено(Дата1С) тогда
		Документ = ВидДокумента.НайтиПоНомеру(Номер1С, Дата1С);	
	КонецЕсли;
	
	Если Документ.Пустая() тогда	

		ТипОбъекта = Тип("ДокументСсылка."+ ИмяДокумента);
		
		Попытка
			Результат = XMLЗначение(ТипОбъекта, Идентификатор);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
		Если Результат <> Неопределено тогда
			Документ = ?(СокрЛП(Результат.ВерсияДанных) = "", Документ, Результат);
		КонецЕсли;
	
	КонецЕсли;
	
	Если Документ.Пустая() тогда	
		ЗапросЗ = Новый Запрос;
		ЗапросЗ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросЗ.Текст = "ВЫБРАТЬ * 			
		|ИЗ
		|	ВремДокументы КАК ВремДокументы
		|ГДЕ
		|	ВремДокументы.ТипДокумента = &ТипДокумента
		|	И ВремДокументы.Б_Идентификатор = &Идентификатор";
		ЗапросЗ.УстановитьПараметр("Идентификатор"	, Идентификатор);
		ЗапросЗ.УстановитьПараметр("ТипДокумента"	, ХозОперация);
		
		тзнВрем = ЗапросЗ.Выполнить().Выгрузить();
		Если тзнВрем.Количество() > 0 тогда
			Документ = тзнВрем[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

// Функция проверяет, является ли указанный тип справочником
//
// Параметры:
//  Тип	 - 	 Проверяемый тип 
// Возвращаемое значение:
//   Истина, если является 
Функция ТипЗначенияСправочник(Тип) Экспорт
	
	ТипЗначенияСправочник = Ложь;
	
	Попытка
		ОбъектПоТипу = Новый(Тип);
		ТипЗначенияСправочник = Метаданные.Справочники.Содержит(ОбъектПоТипу.Метаданные());
	Исключение
	КонецПопытки;
	
	Возврат ТипЗначенияСправочник;
	
КонецФункции

// Функция возвращает массив элементов 1С, по указанному отбору компоновки данных
//
// Параметры:
//  Объект	 - 	 Прикладной объект 1С 
//  Отбор	 - 	 Отбор объекта 
// Возвращаемое значение:
//   Массив элементов
Функция ПолучитьМассивЭлементовПоОтборуКомпоновки(Объект, Отбор) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 	"ВЫБРАТЬ
	|	Объект.Ссылка КАК Объект
	|ИЗ
	|	" + Объект + " КАК Объект
	|";
	
	лУсловие = "";
	
	Если Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
		лУсловие = "Объект.Ссылка = &П";
	ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно тогда
		лУсловие = "Объект.Ссылка <> &П";
	ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке тогда
		лУсловие = "Объект.Ссылка В (&П)";
	ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке тогда
		лУсловие = "НЕ Объект.Ссылка В (&П)";
	ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии тогда
		лУсловие = "Объект.Ссылка В ИЕРАРХИИ (&П)";
	ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии ИЛИ Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии тогда
		лУсловие = "НЕ Объект.Ссылка В ИЕРАРХИИ (&П)";
	ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено тогда
		лУсловие = "Объект.Ссылка <> (&П) И Объект.Ссылка ЕСТЬ НЕ NULL";
	ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено тогда
		лУсловие = "НЕ (Объект.Ссылка <> (&П) И Объект.Ссылка ЕСТЬ НЕ NULL)";
	КонецЕсли;
	
	
	Если Отбор.Использование = Ложь ИЛИ лУсловие = "" тогда
		
		Запрос.Текст = ТекстЗапроса; 
		
	Иначе
		
		Запрос.Текст = ТекстЗапроса + "
		|ГДЕ 
		|" + лУсловие;
		Запрос.УстановитьПараметр("П", Отбор.ПравоеЗначение);	
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьЗначениеХранилищаНастроек(Настройка, НаименованиеКлюча = "") Экспорт
	
	Результат = Неопределено;
	
	СохраненныеНастройки = ХранилищеОбщихНастроек.Загрузить("Настройки 1С-Битрикс", Настройка);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") тогда
		Если СохраненныеНастройки.Свойство(НаименованиеКлюча) <> Неопределено И СохраненныеНастройки.Свойство(НаименованиеКлюча) <> Ложь тогда
			Результат = СохраненныеНастройки[НаименованиеКлюча];	
		Иначе
			СохраненныеНастройки.Вставить(НаименованиеКлюча, Неопределено);
			УстановитьЗначениеВХранилищаНастроек(Настройка, СохраненныеНастройки);
		КонецЕсли;	
	Иначе         		
		
		Если СохраненныеНастройки = Неопределено тогда
			УстановитьЗначениеВХранилищаНастроек(Настройка, Неопределено);
		Иначе
			Результат = СохраненныеНастройки;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Процедура УстановитьЗначениеВХранилищаНастроек(Настрока, ЗначениеНастройки) Экспорт

	ХранилищеОбщихНастроек.Сохранить("Настройки 1С-Битрикс", Настрока, ЗначениеНастройки, "Настройки 1С-Битрикс");
	
КонецПроцедуры

Функция ЭтоКопияБазы()
	
	Результат = Ложь;
	
	ИнформацияОБазе = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	Если ИнформацияОБазе <> Неопределено тогда
		Результат =  ИнформацияОБазе.РаботаСВнешнимиРесурсамиЗаблокирована;
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции

#КонецОбласти
