
#Область ПрограммныйИнтерфейс

#Область ИнтерактивныеДействия

// Функция-конструктор дополнительных параметров разбиения строки.
//
// Возвращаемое значение:
// 		Структура:
//			*ИмяПоляКоличество - Строка - значение по умолчанию КоличествоУпаковок
//          *Заголовок - Строка - заголовок формы ввода числа, значение по умолчанию "Введите количество товара в новой строке"
//			*РазрешитьНулевоеКоличество - Булево - признак, что в исходной и конечной строке может быть 0, значение по умолчанию 0
//			*Количество - Неопределенно,Число - количество, которое будет отображено в форме редактирования числа. Если Неопределенно -
//					будет показано количество в текущей строке
//					
Функция ПараметрыРазбиенияСтроки() Экспорт
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции

// Обработчик команды "Разбить строку".
//
//	Параметры:
//		ТЧ - ДанныеФормыКоллеция
//		ЭлементФормы - ТаблицаФормы
//		ОповещениеПослеРазбиения - ОписаниеОповещения
//		ПараметрыРазбиенияСтроки - см. ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки
//
Процедура РазбитьСтрокуТЧ(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения = Неопределено, ПараметрыРазбиенияСтроки = Неопределено) Экспорт
	
	Если ПараметрыРазбиенияСтроки = Неопределено Тогда
		ПараметрыОбработки = ПараметрыРазбиенияСтроки();
	Иначе
		ПараметрыОбработки = ПараметрыРазбиенияСтроки;
	КонецЕсли;
	
	ТекущаяСтрока	= ЭлементФормы.ТекущиеДанные;
	ЧислоВведено = Истина;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] = 0
		И Не ПараметрыОбработки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно разбить строку с нулевым количеством.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "НоменклатураНабор") Тогда
			НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭлементФормы, ЭлементФормы.Имя, Отказ, Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Отказ Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] <> 0 Тогда
		
		Количество = ?(ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] = 0, 0, Неопределено);
		
		Если Количество = Неопределено Тогда
			РазбитьСтрокуТЧВводЧисла(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыОбработки);
			Возврат;
			
		КонецЕсли;
	Иначе
		Количество = 0;
		
	КонецЕсли;
	
	РазбитьСтрокуТЧДобавлениеСтроки(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыОбработки);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура РазбитьСтрокуТЧПослеВводаЧисла(Количество, ДополнительныеПараметры) Экспорт
	
	ТЧ                       = ДополнительныеПараметры.ТЧ;
	ЭлементФормы             = ДополнительныеПараметры.ЭлементФормы;
	ОповещениеПослеРазбиения = ДополнительныеПараметры.ОповещениеПослеРазбиения;
	ПараметрыОбработки       = ДополнительныеПараметры.ПараметрыОбработки;
	
	ТекущаяСтрока            = ЭлементФормы.ТекущиеДанные;
	
	ЧислоВведено = Количество <> Неопределено;
	
	Если Не ЧислоВведено Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли;
		Возврат;
	ИначеЕсли Количество = 0
		И Не ПараметрыОбработки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть равно нулю.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] >= 0
		И Количество < 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть отрицательным.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] <= 0
		И Количество > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть положительным.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] >= 0
		И Количество >  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше количества в текущей.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] <= 0
		И Количество <  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть меньше количества в текущей.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли Количество =  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество]
		И Не ПараметрыОбработки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке должно отличаться от количества в текущей.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РазбитьСтрокуТЧДобавлениеСтроки(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыОбработки);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура РазбитьСтрокуТЧПослеПредупреждения(ДополнительныеПараметры) Экспорт
	
	ТЧ                       = ДополнительныеПараметры.ТЧ;
	ЭлементФормы             = ДополнительныеПараметры.ЭлементФормы;
	ОповещениеПослеРазбиения = ДополнительныеПараметры.ОповещениеПослеРазбиения;
	ПараметрыОбработки       = ДополнительныеПараметры.ПараметрыОбработки;
	
	РазбитьСтрокуТЧВводЧисла(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыОбработки);
	
КонецПроцедуры

// Процедура проверяет возможность заполнения табличной части документа.
//
// Параметры:
//	ВозможноЗаполнениеТабличнойЧасти - ОписаниеОповещения - оповещение о возможности заполнения табличной части
//	Форма - УправляемаяФорма - Форма документа
//	ТабличнаяЧасть - ДанныеФормыКоллекция - Проверяемая табличная часть
//	СтруктураРеквизитов - Структура - Проверяемые реквизиты
//	ПроверятьПроведенность - Булево - Необходимость проверки того, что документ не проведен
//
Процедура ПроверитьВозможностьЗаполненияТабличнойЧасти(ВозможноЗаполнениеТабличнойЧасти, Форма, ТабличнаяЧасть, СтруктураРеквизитов, ПроверятьПроведенность = Истина, НазваниеТабличнойЧасти = "") Экспорт 
	
	Если (ПроверятьПроведенность И Форма.Объект.Проведен)
		ИЛИ (ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() > 0)  Тогда
		
		Если ПроверятьПроведенность 
			И Форма.Объект.Проведен 
			И (ТабличнаяЧасть = Неопределено 
			ИЛИ ТабличнаяЧасть.Количество() = 0) Тогда
			ТекстВопроса = НСтр("ru = 'Заполнение %1 возможно только в непроведенном документе, отменить проведение?'");
		ИначеЕсли ТабличнаяЧасть <> Неопределено 
			И ТабличнаяЧасть.Количество() > 0
			И (НЕ ПроверятьПроведенность 
			ИЛИ НЕ Форма.Объект.Проведен) Тогда
			ТекстВопроса = НСтр("ru = 'Табличная часть %1 будет очищена, продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Заполнение %1 возможно только в непроведенном документе.
				|Табличная часть будет очищена. Очистить и отменить проведение?'");
		КонецЕсли;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НазваниеТабличнойЧасти);
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "  ", " ");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВозможноЗаполнениеТабличнойЧасти", ВозможноЗаполнениеТабличнойЧасти);
		ДополнительныеПараметры.Вставить("ПроверятьПроведенность", ПроверятьПроведенность);
		ДополнительныеПараметры.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьВозможностьЗаполненияТабличнойЧастиПослеВопроса", 
			ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение(ВозможноЗаполнениеТабличнойЧасти, СтруктураРеквизитов, Форма);
		
	КонецЕсли; 
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ПроверитьВозможностьЗаполненияТабличнойЧастиПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВозможноЗаполнениеТабличнойЧасти = ДополнительныеПараметры.ВозможноЗаполнениеТабличнойЧасти;
	ПроверятьПроведенность = ДополнительныеПараметры.ПроверятьПроведенность;
	СтруктураРеквизитов = ДополнительныеПараметры.СтруктураРеквизитов;
	Форма = ДополнительныеПараметры.Форма;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверятьПроведенность И Форма.Объект.Проведен Тогда
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		
		// В форме используются специальные процедуры для записи документа. Отказ от модальности.
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "НеВыполнятьПроверкуПередЗаписью") Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПроверитьВозможностьЗаполненияТабличнойЧастиПослеВопросаПослеЗаписи",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи",ОписаниеОповещения);
			
			Форма.Записать(ПараметрыЗаписи);
			Возврат;
			
		Иначе
			
			Если Не Форма.Записать(ПараметрыЗаписи) Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Не удалось отменить проведение документа'"));
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение(ВозможноЗаполнениеТабличнойЧасти, СтруктураРеквизитов, Форма);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ПроверитьВозможностьЗаполненияТабличнойЧастиПослеВопросаПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось отменить проведение документа'"));
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение(
		ДополнительныеПараметры.ВозможноЗаполнениеТабличнойЧасти,
		ДополнительныеПараметры.СтруктураРеквизитов, ДополнительныеПараметры.Форма);
	
КонецПроцедуры

// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода. 
//                              Может быть установлена пост-обрабокта в месте вызова после выбора периода.
// 
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры

// Позволяет выбрать период из выпадающего списка
//
// Параметры:
//  Форма				- Форма - форма, в которой выполняется выбор периода
//  Элемент				- ЭлементФормы - элемент, рядом с которым нужно открыть выпадающий список
//	ВидПериода			- ПеречислениеСсылка.ДоступныеПериодыОтчета - вид выбираемого периода
//	ОбработчикВыбора	- ОписаниеОповещения - обработчик, расположенный в форме, который будет вызван после выбора
//
Процедура ВыбратьПериодИзСписка(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора) Экспорт
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ОбщегоНазначенияУТКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияУТВызовСервера.ДатаСеанса());
	КонецЕсли;
	
	ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ПериодНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, ВидПериода, ОповещениеОВыборе, НачалоПериода) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ОтчетыКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияУТВызовСервера.ДатаСеанса());
	КонецЕсли;
	
	Список = ОбщегоНазначенияУТКлиентСервер.ДоступныеЗначенияПериодаПоВидуПериода(НачалоПериода, ВидПериода);
	Если Список.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОВыборе, Неопределено);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВидПериода", ВидПериода);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе", ОповещениеОВыборе);
	ДополнительныеПараметры.Вставить("Список", Список);
	
	Оповещение = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	Форма.ПоказатьВыборИзСписка(Оповещение, Список, Элемент, ЭлементСписка);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ПериодНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйПериод);
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 ИЛИ Индекс = ДополнительныеПараметры.Список.Количество() - 1 Тогда
		ПериодНачалоВыбора(ДополнительныеПараметры.Форма, 
			ДополнительныеПараметры.Элемент, 
			Ложь, 
			ДополнительныеПараметры.ВидПериода, 
			ДополнительныеПараметры.ОповещениеОВыборе,
			ВыбранныйПериод.Значение);
		
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйПериод);
	
КонецПроцедуры

// Обертка для метода НачатьЗапускПриложения() в случае, если не требуется обработка результата запуска.
//
// Параметры:
//	СтрокаКоманды - Строка - Командная строка для запуска приложения 
//							 либо имя файла, ассоциированного с некоторым приложением.
//
Процедура ЗапуститьПриложениеБезОбработкиРезультата(СтрокаКоманды) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗапуститьПриложениеБезОбработкиРезультатаЗавершение",
		ЭтотОбъект);
		
	НачатьЗапускПриложения(ОписаниеОповещения, СтрокаКоманды);
	
КонецПроцедуры

// Обработчик команды "Установить пометку удаления"
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ТипСписка - Строка - тип документов списка.
//		Оповещение - ОписаниеОповещения - оповещение, которое должно быть вызвано после завершения попытки пометки на удаление
//
Процедура УстановитьПометкуУдаления(Список, ТипСписка, ОповещениеОЗавершении = Неопределено) Экспорт 
	
	ТекущиеДанные = Список.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			
			Документ = ТекущиеДанные.Ссылка;
			ЕстьСтрокиПомеченныеНаУдаление = ТекущиеДанные.ПометкаУдаления;
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(Документ);
			
			ТекстВопроса = ?(ТекущиеДанные.ПометкаУдаления,
				НСтр("ru='Снять с ""%Документ%"" пометку на удаление?'"),
				НСтр("ru='Пометить ""%Документ%"" на удаление?'"));
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Документ%", Документ);
			
		Иначе
			
			Результат = ОбщегоНазначенияУТВызовСервера.СсылкиОбъектовПомеченныхНаУдаление(ВыделенныеСтроки, "Ссылка");
			
			МассивСсылок = Результат.МассивСсылок;
			ЕстьСтрокиПомеченныеНаУдаление = Результат.ЕстьСтрокиПомеченныеНаУдаление;
			
			ТекстВопроса = ?(Результат.ЕстьСтрокиПомеченныеНаУдаление,
				НСтр("ru='Снять с выделенных элементов пометку на удаление?'"),
				НСтр("ru='Пометить выделенные элементы на удаление?'"));
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Список", 						Список);
		ДополнительныеПараметры.Вставить("ВыделенныеСтроки", 			МассивСсылок);
		ДополнительныеПараметры.Вставить("ТипСписка", 					ТипСписка);
		ДополнительныеПараметры.Вставить("УстановкаПометкиУдаления", 	Не ЕстьСтрокиПомеченныеНаУдаление);
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 		ОповещениеОЗавершении);
		
		Оповещение = Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Провести"
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ТипСписка - Строка - тип документов списка.
//
Процедура ПровестиДокументы(Список, ТипСписка) Экспорт
	
	ОчиститьСообщения();
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НепроведенныеДокументы = Новый Массив;
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2'");
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(МассивСсылок);
	
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
			ИнформацияОДокументе.Ссылка);
		
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	ПроведенныеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСсылок, НепроведенныеДокументы);
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК'"));
		
		ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
		ДополнительныеПараметры = Новый Структура("Список, ПроведенныеДокументы, ТипСписка",
			Список, ПроведенныеДокументы, ТипСписка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПроведенностьДокументовЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстДиалога, КнопкиДиалога);
	Иначе
		ОповещениеПроведенияОтменыПроведенияДокумента(Список, МассивСсылок, ТипСписка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Отмена проведения"
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ТипСписка - Строка - тип документов списка.
//
Процедура ОтменаПроведения(Список, ТипСписка) Экспорт
	
	ОчиститьСообщения();
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаспроведенныеДокументы = ОбщегоНазначенияУТВызовСервера.СсылкиРаспроведенныхДокументов(МассивСсылок);
	
	Если РаспроведенныеДокументы.Количество() > 0 Тогда
		ОповещениеПроведенияОтменыПроведенияДокумента(Список, РаспроведенныеДокументы, ТипСписка);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при выборе даты актуальности или даты события.
// Изменяет значение даты актуальности или даты события в зависимости от выбранного значения.
//
// Параметры:
//	ВыбранноеЗначение - Строка - выбранное значение отбора.
//	СтандартнаяОбработка - Булево - флаг стандартной обработки события.
//	Форма - УправляемаяФорма - форма списка документов.
//	Список - ДинамическийСписок - список документов.
//	ИмяРеквизитаАктуальность - Строка - имя реквизита строки отбора по актуальности.
//	ИмяРеквизитаДатаСобытия - Строка - имя реквизита даты, на которую документ будет просрочен.
//
Процедура ПриВыбореОтбораПоАктуальности(ВыбранноеЗначение, СтандартнаяОбработка, Форма, Список, ИмяРеквизитаАктуальность, ИмяРеквизитаДатаСобытия) Экспорт
	
	Если ВыбранноеЗначение = "Истекает на дату" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Список", Список);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаАктуальность", ИмяРеквизитаАктуальность);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаДатаСобытия", ИмяРеквизитаДатаСобытия);
		
		ПоясняющийТекст = НСтр("ru='Выберите дату для вывода просроченных документов:'") + " ";
		ПараметрыФормы = Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст);
		Оповещение = Новый ОписаниеОповещения("ПриВыбореОтбораПоАктуальностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ВыборДаты",
			ПараметрыФормы, , , , ,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Возврат;
		
	Иначе
		ДатаСобытия = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает диалог ввода даты. В случае ввода пустой даты - предлагает повторный диалог ввода даты.
//
// Параметры:
//	Дата - Дата - начальное значение даты диалога. В эту дату будет помещен результат диалога.
//	Подсказка - Строка - текст заголовка диалога ввода даты.
//	ЧастьДаты - ЧастиДаты - вариант использования значения типа 'Дата'.
//	ОповещениеОВыборе - ОписаниеОповещения - описание оповещения после выбора даты.
//
Процедура ВвестиДатуСКонтролемПустогоЗначения(Дата, Подсказка, ЧастьДаты, ОповещениеОВыборе) Экспорт
	
	ДатаВведена = Ложь;
	ВременноеЗначениеДаты = Дата;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Дата", Дата);
	ДополнительныеПараметры.Вставить("Подсказка", Подсказка);
	ДополнительныеПараметры.Вставить("ЧастьДаты", ЧастьДаты);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе", ОповещениеОВыборе);
	
	Оповещение = Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПоказатьВводДаты(Оповещение, Дата, Подсказка, ЧастьДаты);
	
КонецПроцедуры

// Обработчик команды "Изменить"
//
// Параметры:
//  Список	 - 	ТаблицаФормы - таблица формы, текущие данные которой содержат поле "Ссылка" - ссылку на изменяемый объект 
//
Процедура ИзменитьЭлемент(Список) Экспорт 
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Скопировать"
//
// Параметры:
//  Список	 - 	ТаблицаФормы - таблица формы, текущие данные которой содержат поле "Ссылка" - ссылку на копируемый объект 
//
Процедура СкопироватьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элемент = ТекущиеДанные.Ссылка;
				
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент);
		
		ИмяФормыОбъекта = ОбщегоНазначенияУТВызовСервера.ПолноеИмяФормыОбъекта(Элемент);
				
		ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициирует открытие формы выбора хоз оперции и типа документа для дальнейшего создания нового
//
// Параметры:
//  АдресДоступныхХозяйственныхОперацийИДокументов	 - Строрка	 - адрес во временном хранилище с таблицей доступных хоз. операций и документов
//  КлючФормы										 - Строка - ключ формы
//  КлючНазначенияИспользования						 - Строка - ключ настроек
//  СтруктураОтбора									 - Структура - структура с отборами для заполнения в документе.
//
Процедура СоздатьДокументЧерезФормуВыбора(АдресДоступныхХозяйственныхОперацийИДокументов, КлючФормы, КлючНазначенияИспользования, СтруктураОтбора) Экспорт 
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", АдресДоступныхХозяйственныхОперацийИДокументов);
	ПараметрыФормы.Вставить("РежимСоздания", Истина);
	ПараметрыФормы.Вставить("КлючФормы", КлючФормы);
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ДополнительныеПараметрыОповещения = Новый Структура("ЗначенияЗаполнения",СтруктураОтбора);
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("СоздатьПослеВыбораДокумента",
			ЭтотОбъект, ДополнительныеПараметрыОповещения));
	
КонецПроцедуры
	
// Обработчик оповещения, вызванный после работы процедуры СоздатьДокумент(...)
Процедура СоздатьПослеВыбораДокумента(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = ДополнительныеПараметры.ЗначенияЗаполнения;
	
	ИмяДокумента = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение.ИдентификаторОбъектаМетаданных, "Имя");
	
	СоздатьДокумент(ВыбранноеЗначение.ХозяйственнаяОперация, ЗначенияЗаполнения, ИмяДокумента);
		
КонецПроцедуры

// Создает документ по специально именованной команде
//
// Параметры:
//  ИмяКоманды	 - Строка - имя команды, до этого программно сформированное, вида ПриемНаКомиссию_ПриобретениеТоваровУслуг,
//  СтруктураОтбора	- Структура - структура с отборами для заполнения в документе.
//
Процедура СоздатьДокументЧерезКоманду(Знач ИмяКоманды, СтруктураОтбора) Экспорт
			
	МассивИмен = СтрРазделить(ИмяКоманды, "_");
	
	ИмяЗначенияПеречисления 	= МассивИмен[1];
	ИмяДокумента 				= МассивИмен[2];
	
	Если МассивИмен.ВГраница() > 2 Тогда
		МассивИмен.Удалить(0);
		МассивИмен.Удалить(0);
		ИмяДокумента = СтрСоединить(МассивИмен, "_");
	КонецЕсли; 
	
	ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации." + ИмяЗначенияПеречисления);

	СоздатьДокумент(ХозяйственнаяОперация, СтруктураОтбора, ИмяДокумента);
	
КонецПроцедуры

// Устанавливает статус для выделенных документов
//
// Параметры:
//  ИмяКоманды					 - Строка	 - Имя команды формы
//  СоответствиеКомандСтатусам	 - Соответствие	 - соответствие, которое хранится в реквизитах текущей формы
//  Список						 - ЭлементФормы	 - список формы, в котором будет происходить изменение статусов
//
Процедура УстановитьСтатус(ИмяКоманды, СоответствиеКомандСтатусам, Список)Экспорт 
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИмяКоманды", ИмяКоманды);
	
	НайденныйСтатус = СоответствиеКомандСтатусам.НайтиСтроки(Отбор);
	
	Если НайденныйСтатус.Количество() > 0 Тогда
		
		СтрокаСтатуса = НайденныйСтатус[0];
				
		ВыделенныеСтроки = ВыбратьИзВыделенныхСтрокСпискаДокументыПоИмениМетаданных(СтрокаСтатуса.ДокументСтрока, Список);
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одного документа, для которого можно установить выбранный статус'"));
			Возврат;
		КонецЕсли;
		
		ВыделенныеСтрокиСодержатОтгрузку = Ложь;
		ВыделенныеСтрокиСодержатНеТолькоОтгрузку = Ложь;
		Если СтрокаСтатуса.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено") Тогда
			СтруктураСписка = ПродажиВызовСервера.СформироватьСтруктуруСпискаДокументов(ВыделенныеСтроки);
			ВыделенныеСтрокиСодержатОтгрузку = СтруктураСписка.ВыделенныеСтрокиСодержатОтгрузку;
			ВыделенныеСтрокиСодержатНеТолькоОтгрузку = СтруктураСписка.ВыделенныеСтрокиСодержатНеТолькоОтгрузку;
		КонецЕсли;
		
		Если ВыделенныеСтрокиСодержатОтгрузку Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ДатаПереходаПраваСобственности", ОбщегоНазначенияКлиент.ДатаСеанса());
			ПараметрыФормы.Вставить("ВыделенныеСтрокиСодержатНеТолькоОтгрузку", ВыделенныеСтрокиСодержатНеТолькоОтгрузку);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
			СтруктураПараметров.Вставить("ОбрабатываемыйСписок", 	Список);
			СтруктураПараметров.Вставить("СтатусПредставление", 	СтрокаСтатуса.СтатусПредставление);
			СтруктураПараметров.Вставить("СтатусИмяЗначения", 		СтрокаСтатуса.СтатусИмяЗначения);
			
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ВопросОСменеСтатуса", 
				ПараметрыФормы,,,,,
				Новый ОписаниеОповещения("УстановитьСтатусРеализованоЗавершение", 
					ЭтотОбъект,
					СтруктураПараметров),
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ТекстВопроса = НСтр("ru='У выделенных в списке документов будет установлен статус ""%ПредставлениеСтатуса%"". Продолжить?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ПредставлениеСтатуса%", СтрокаСтатуса.СтатусПредставление);
			
			Режим = Новый СписокЗначений;
			Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Установить'"));
			Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не устанавливать'"));
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ВыделенныеСтроки", 		ВыделенныеСтроки);
			ДопПараметры.Вставить("СтатусПредставление", 	СтрокаСтатуса.СтатусПредставление);
			ДопПараметры.Вставить("СтатусИмяЗначения", 		СтрокаСтатуса.СтатусИмяЗначения);
			ДопПараметры.Вставить("Список", 				Список);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДопПараметры), ТекстВопроса,Режим);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения, вызванного после завершения работы процедуры УстановитьСтатус(...) 
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	СтатусПредставление = ДополнительныеПараметры.СтатусПредставление;
	СтатусИмяЗначения = ДополнительныеПараметры.СтатусИмяЗначения;
	Список = ДополнительныеПараметры.Список;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусЗавершениеФрагмент(ВыделенныеСтроки, СтатусИмяЗначения, СтатусПредставление, Список);
	
КонецПроцедуры

Процедура УстановитьСтатусЗавершениеФрагмент(Знач ВыделенныеСтроки, СтатусИмяЗначения, Знач СтатусПредставление, Знач Список, ДопПараметры = Неопределено)
	
	Перем КоличествоОбработанных;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, СтатусИмяЗначения, ДопПараметры);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), СтатусПредставление);

КонецПроцедуры

// Обработчик оповещения, вызванного после завершения работы процедуры УстановитьСтатус(...) 
Процедура УстановитьСтатусРеализованоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
	СтатусПредставление = ДополнительныеПараметры.СтатусПредставление;
	СтатусИмяЗначения = ДополнительныеПараметры.СтатусИмяЗначения;
	
	СтруктураОтвета = Результат;
	Если СтруктураОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусЗавершениеФрагмент(ВыделенныеСтроки, СтатусИмяЗначения, СтатусПредставление, ОбрабатываемыйСписок, СтруктураОтвета);
	
КонецПроцедуры

// Обрабатывает отсканированный штрихкод
//
// Параметры:
//  Штрихкод			 - 	Строка
//  ДанныеПоШтрихКоду	 - 	Структура 	- структура с ключом "КлючЗаписи" регистра сведений РеестрДокументов
//  Форма				 - 	ЭтаФорма    - форма со списком
//  ИмяСписка			 - 	Строка 		- имя списка, в котором должно произойти позиционирование
//
Процедура ОбработатьШтрихкоды(Штрихкод, ДанныеПоШтрихКоду, Форма, ИмяСписка) Экспорт 
	
	Если ЗначениеЗаполнено(ДанныеПоШтрихКоду) Тогда
		Если ЗначениеЗаполнено(ДанныеПоШтрихКоду.КлючЗаписи) Тогда
			Форма.Элементы[ИмяСписка].ТекущаяСтрока = ДанныеПоШтрихКоду.КлючЗаписи;
		КонецЕсли;
		ПоказатьЗначение(Неопределено, ДанныеПоШтрихКоду.Ссылка);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма          - форма элемента или документа
//
// Возвращаемое значение:
// 		Булево - признак отказа выполнения дальнейших действий
//
Функция ПриДействииСЭлементомЗависящимОтСтатуса(Форма) Экспорт
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение = Истина;
	Форма.Объект.Согласован = Ложь;
	
	Возврат Ложь;
	
КонецФункции

// Служебная процедура.
//
Процедура КонтрольНеСогласованныхИзмененийВызватьИсключение(Форма, Элемент) Экспорт
	ВызватьИсключение НСтр("ru = 'Внутренняя ошибка подсистемы контроля несогласованных изменений.'");
КонецПроцедуры

// Вызывается в формах документов и справочников для отказа от изменения значения реквизита.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// в механизме контроля несогласованных изменений.// Параметры:
// 		Форма          - форма элемента или документа
// 		Элемент        - Элемент формы
//
Процедура ВернутьПредыдущееЗначениеРеквизита(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Данные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента];
		ИначеЕсли ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Таблица.ТекущиеДанные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяТаблицы][СтрокаМассива];
			Прервать;
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в формах документов и справочников для сохранения предыдущего значения элемента.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// Параметры:
// 		Форма          - форма элемента или документа
// 		Элемент        - Элемент формы
//
Процедура СохранитьЗначениеРеквизита(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Возврат;
		Иначе
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента] = Данные[СтрокаМассива];
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма          - форма элемента или документа
//
Процедура ПослеИзмененияРеквизитаЗависящегоОтСтатуса(Форма) Экспорт
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОповещениеПользователейПриИзменении

// Процедура показывает оповещение после обработки статусов выделенных в списке документов
//
// Параметры:
//	СписокДокументов       - ДинамическийСписок - элемент формы
//	КоличествоОбработанных - Число - количество успешно обработанных документов
//	КоличествоВсего 	   - Число - количество выделенных в списке документов
//	Статус                 - Строка - устанавливаемый статус
//
Процедура ОповеститьПользователяОбУстановкеСтатуса(СписокДокументов, КоличествоОбработанных, КоличествоВсего, Статус) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
		
		Если СписокДокументов <> Неопределено Тогда
			СписокДокументов.Обновить();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);

	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура оповещение и записывает в историю пользователя изменение объекта, как делает платформа
//
// Параметры:
//	СсылкаНаОбъект       - ЛюбаяСсылка - измененный объект
//
Процедура ОповеститьПользователяОбИзмененииОбъекта(СсылкаНаОбъект, ТекстЗаголовка = "") Экспорт
	
	Если ПустаяСтрока(ТекстЗаголовка) Тогда	
		ТекстЗаголовка = НСтр("ru='Изменение:'");
	КонецЕсли;
	ТекстСообщения = Строка(СсылкаНаОбъект);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
	ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);

	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	
КонецПроцедуры

// Выполняет оповещение пользователя об осуществленной установке пометки на удаление
// или снятия пометки с удаления документа, а также записывает в историю информацию об изменениях объекта.
//
//	Параметры:
//		РезультатВопроса - КодВозвратаДиалога - результат ответа на вопрос,
//		ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура УстановитьПометкуУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьСообщения();
		
		Список = ДополнительныеПараметры.Список;
		ТипСписка = ДополнительныеПараметры.ТипСписка;
		МассивСсылок = ДополнительныеПараметры.ВыделенныеСтроки;
		ПометитьНаУдаление = ДополнительныеПараметры.УстановкаПометкиУдаления;
		
		ОбщегоНазначенияУТВызовСервера.УстановитьПометкуУдаленияЗавершениеСервер(МассивСсылок, ПометитьНаУдаление);
		
		НавигационнаяСсылка = Неопределено;
		Если МассивСсылок.Количество() > 1 Тогда
			Документ = ТипСписка;
			ТекстОповещения = ?(Не ПометитьНаУдаление, 
				НСтр("ru='Пометка удаления снята (%КоличествоДокументов%)'"),
				НСтр("ru='Пометка удаления установлена (%КоличествоДокументов%)'"));
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", МассивСсылок.Количество());
		Иначе
			Документ = МассивСсылок[0];
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Документ);
			ТекстОповещения = ?(Не ПометитьНаУдаление,
				НСтр("ru='Пометка удаления снята'"),
				НСтр("ru='Пометка удаления установлена'"));
		КонецЕсли;
		
		Список.Обновить();
		ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, Строка(Документ),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если ОповещениеОЗавершении <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВопроса);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет оповещение пользователя об осуществленном проведении документов
// а также обновляет информацию об измененных данных динамического списка.
//
//	Параметры:
//		РезультатВопроса - Перечисление - результат ответа на вопрос,
//		ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПроверитьПроведенностьДокументовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> Неопределено Тогда
		Список = ДополнительныеПараметры.Список;
		ТипСписка = ДополнительныеПараметры.ТипСписка;
		ПроведенныеДокументы = ДополнительныеПараметры.ПроведенныеДокументы;
		
		Если ПроведенныеДокументы.Количество() > 0 Тогда
			ОповещениеПроведенияОтменыПроведенияДокумента(Список, ПроведенныеДокументы, ТипСписка);
		Иначе
			Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура завершения для ВвестиДатуСКонтролемПустогоЗначения().
// Выполняет оповещение пользователя об осуществленном корректном вводе даты, в противном случае выводится 
// сообщение о том, что значение даты не было заполнено и предлагается выполнить повторный ввод.
//
// Параметры:
//	ВыбраннаяДата - Дата - введенное пользователем значение даты в результате диалога.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
	Иначе
		Если ВыбраннаяДата <> Дата('00010101000000') Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбраннаяДата);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияПослеПредупреждения", ЭтотОбъект,
				ДополнительныеПараметры);
			ПоказатьПредупреждение(Оповещение, НСтр("ru='Поле ""Дата"" не заполнено'"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура завершения для ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора().
// Выполняет оповещение пользователя о том, что значение даты не было заполнено и предлагается выполнить повторный ввод.
//
// Параметры:
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ВвестиДатуСКонтролемПустогоЗначенияПослеПредупреждения(ДополнительныеПараметры) Экспорт
	
	ВвестиДатуСКонтролемПустогоЗначения(ДополнительныеПараметры.Дата, ДополнительныеПараметры.Подсказка,
		ДополнительныеПараметры.ЧастьДаты, ДополнительныеПараметры.ОповещениеОВыборе);
	
КонецПроцедуры

#КонецОбласти

#Область РедакторированиеЗаблокированныхРеквизитов

// Вызывается в формах объектов для разблокировки заблокированных реквизитов.
// 
// Параметры:
//     ЭтаФорма              - Форма объекта
//     ИмяФормыРазблокировки - Имя формы разблокировки
//     ОповещениеОРазблокировке - Описание оповещения после разблокировки
//
Процедура РазрешитьРедактированиеРеквизитовОбъекта(Форма, Знач ИмяФормыРазблокировки = "", ОповещениеОРазблокировке = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Если Не ЗначениеЗаполнено(ИмяФормыРазблокировки) Тогда
			МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Форма.ИмяФормы, ".");
			МассивИмениФормы[3] = "РазблокированиеРеквизитов";
			ИмяФормыРазблокировки = СтрСоединить(МассивИмениФормы, ".");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма",Форма);
		Если ОповещениеОРазблокировке <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("ОповещениеОРазблокировке",ОповещениеОРазблокировке);
		КонецЕсли; 
		Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ИмяФормыРазблокировки, 
			Новый Структура("Объект", Форма.Объект.Ссылка),
			,
			,
			,
			,
			Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Служебная процедура.
//
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Если Результат = Истина Тогда
		
		ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(Форма);
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьРазрешенностьРедактированияРеквизитов(Форма, ЗаблокированныеРеквизиты);
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеОРазблокировке") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОРазблокировке, Результат);
		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ЗаполненияТабличныхЧастейДокумента

// Копирует значения реквизитов текущей строки табличной части в служебный реквизит формы.
//
//  Параметры:
//   Форма - УправляемаяФорма - форма, содержащая таблицу.
//   ИмяТабличнойЧасти - Строка - имя таблицы формы, текущие данные которой необходимо скопировать в служебный реквизит формы.
//		Имя служебного реквизита должно состоять из префикса Кеш и имени табличной части.
//
Процедура КешироватьТекущуюСтроку(Форма, ИмяТабличнойЧасти) Экспорт

	ТекущиеДанные = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	СтруктураКеш = Новый Структура(Форма[ИмяТабличнойЧасти + "КешТекущейСтроки"]);
	ЗаполнитьЗначенияСвойств(СтруктураКеш, ТекущиеДанные);
	Форма[ИмяТабличнойЧасти + "КешТекущейСтроки"] = Новый ФиксированнаяСтруктура(СтруктураКеш);

КонецПроцедуры

#КонецОбласти

#Область Прочие

// Проверяет наличие выделенных в списке строк.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Булево - Ложь - в списке нет выделенных строк.
//
Функция ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие выделенных в списке строк и возвращает массив их ссылок.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Массив - массив ссылок выделенных в списке строк.
//
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Проверяет наличие записей в списке.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//	ПредставлениеСписка - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Булево - Истина - список содержит записи.
//
Функция ПроверитьНаличиеСтрокВСписке(Список, ПредставлениеСписка) Экспорт
	
	Если Список.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""%ПредставлениеСписка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСписка%", ПредставлениеСписка);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, выбрано ли распоряжение для оформления накладной
//
// Параметры:
//  ТекущиеДанныеСтроки	 - 	ДанныеФормыСтруктура - текущие данные выделенной строки
//  ПараметрыЖурнала	 - 	Структура - структура с параметрами журнала (рабочего места)
// 
// Возвращаемое значение:
//  Булево - Истина
//
Функция ВыбраныДокументыКОформлению(ТекущиеДанныеСтроки, ПараметрыЖурнала) Экспорт
	
	Если ТекущиеДанныеСтроки <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПоказатьВопросНеВыбраноРаспоряжение(ПараметрыЖурнала);
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму обработки (журнала)
//
// Параметры:
//  Параметры	 - Структура	 - структура, один из ключей которой  "ИмяРабочегоМеста"
//
Процедура ОткрытьЖурнал(Параметры) Экспорт
	
	ОткрытьФорму("Обработка." + Параметры.ИмяРабочегоМеста + ".Форма", Параметры);
	
КонецПроцедуры

#Область ЗаписьОбъектов

// Записать объект и замерить длительность его записи.
//
// Параметры:
//  Форма - УправляемаяФорма - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Записать(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Записать объект, замерить длительность его записи и закрыть форму объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура ЗаписатьИЗакрыть(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Провести документ и замерить длительность его проведения.
//
// Параметры:
//  Форма - УправляемаяФорма - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Провести(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Провести документ, замерить длительность его проведения и закрыть форму документа.
//
// Параметры:
//  Форма - УправляемаяФорма - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при проведении могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура ПровестиИЗакрыть(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

Функция ЗаписатьОбъект(Форма, ПараметрыЗаписи)
	
	Перем Проведен;
	
	ОчиститьСообщения();
	
	Если Не ПараметрыЗаписи.ЕстьВопросыПередЗаписью Тогда
		Если Не Форма.Объект.Свойство("Проведен", Проведен) Тогда
			Проведен =  Ложь;
		КонецЕсли;
		
		Если Проведен Тогда
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи);
	КонецЕсли;
	
	Возврат Форма.Записать(ПараметрыЗаписи);
	
КонецФункции

Процедура ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи)
	
	ПараметрыЗаписи.ПринудительноЗакрытьФорму = Истина;
	ОчиститьСообщения();
	
	Если ПараметрыЗаписи.ЕстьВопросыПередЗаписью Тогда
		ПараметрыЗаписи.НовыйОбъект = Не ЗначениеЗаполнено(Форма.Объект.Ссылка);
		Форма.ПринудительноЗакрытьФорму = ПараметрыЗаписи.ПринудительноЗакрытьФорму;
		Форма.Записать(ПараметрыЗаписи);
	Иначе
		Если ЗаписатьОбъект(Форма, ПараметрыЗаписи) Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПараметровЗаписиОбъекта()
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("ЕстьВопросыПередЗаписью", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Ложь);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

Процедура НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи)
	
	Перем ПринудительноЗакрытьФорму;
	Перем РежимЗаписи;
	
	Если Не ПараметрыЗаписи.Свойство("ПринудительноЗакрытьФорму", ПринудительноЗакрытьФорму) Тогда
		ПринудительноЗакрытьФорму = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи) Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "Записать.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ЗаписатьИЗакрыть.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "Провести.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ПровестиИЗакрыть.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведение.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведениеИЗакрыть.%1";
	КонецЕсли;
	
	ИмяКлючевойОперации = СтрШаблон(ШаблонКлючевойОперации, Форма.ИмяФормы);
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтерактивныеДействия

Процедура РазбитьСтрокуТЧВводЧисла(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыОбработки)
	
	ТекущаяСтрока	= ЭлементФормы.ТекущиеДанные;
	
	Если ПараметрыОбработки.Количество = Неопределено Тогда
		Количество = ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество];
	Иначе
		Количество = ПараметрыОбработки.Количество;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТЧ",                       ТЧ);
	ДополнительныеПараметры.Вставить("ЭлементФормы",             ЭлементФормы);
	ДополнительныеПараметры.Вставить("ОповещениеПослеРазбиения", ОповещениеПослеРазбиения);
	ДополнительныеПараметры.Вставить("ПараметрыОбработки",       ПараметрыОбработки);
	
	Оповещение = Новый ОписаниеОповещения(
		"РазбитьСтрокуТЧПослеВводаЧисла", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьВводЧисла(Оповещение, Количество, ПараметрыОбработки.Заголовок, 15, 3);

КонецПроцедуры

Процедура РазбитьСтрокуТЧДобавлениеСтроки(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыОбработки)
	
	ТекущаяСтрока	= ЭлементФормы.ТекущиеДанные;
	
	ИндексТекущейСтроки 	 = ТЧ.Индекс(ТекущаяСтрока);
	НоваяСтрока 			 = ТЧ.Вставить(ИндексТекущейСтроки + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ПараметрыОбработки.ИмяПоляКоличество]   = Количество;
	ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] = ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество]
		- НоваяСтрока[ПараметрыОбработки.ИмяПоляКоличество];
	
	Если ОповещениеПослеРазбиения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, НоваяСтрока);
	КонецЕсли; 
	
	ЭлементФормы.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

Процедура ПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение(ВозможноЗаполнениеТабличнойЧасти, СтруктураРеквизитов, Форма)
	
	ЗаполнятьТабличнуюЧасть = Истина;
	
	Если СтруктураРеквизитов <> Неопределено Тогда
		ЗаполнятьТабличнуюЧасть = РеквизитыОбъектаЗаполнены(Форма.Объект, СтруктураРеквизитов);
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть И Не Форма.Модифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть Тогда
		ВыполнитьОбработкуОповещения(ВозможноЗаполнениеТабличнойЧасти, Истина);
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область РаботаСПериодомРегистрации

// Возвращает строковое представление периода.
//
// Параметры:
//  ПериодРегистрации - Дата   - Дата внутри месяца или квартала, представление которых нужно получить
//  КалендарныйПериод - Строка - "Месяц" или "Квартал"
//
// Возвращаемое значение:
//  Строка - Представление месяца или квартала, внутри которых находится значение ПериодРегистрации
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод = "Месяц") Экспорт
	
	Возврат ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод);
	
КонецФункции

// Увеличивает или уменьшает значение периода на одно значение.
//
// Параметры:
//  Направление                     - Число  - "1", если шагаем на следующий месяц, "-1", если шагаем в предыдущий месяц
//  СтандартнаяОбработка            - Булево - Признак стандартной обработки события
//  ПериодРегистрации               - Дата   - Переменная, в которую помещается значение следующего или предыдущего месяца
//  ПредставлениеПериодаРегистрации - Строка - Представление месяца ПериодаРегистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;

	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Выбирает период из списка возможных периодов.
//
// Параметры:
//  Элемент              - Поле формы - Поле формы, в котором наступает событие "НачалоВыбора".
//  СтандартнаяОбработка - Булево     - Признак стандартной обработки события
//  ПериодРегистрации    - Дата       - Переменная, в которую помещается выбранное значение
//  ЭтаФорма             - УправляемаяФорма - Управляемая форма, в которой происходит событие "Начало выбора"
//  ОповещениеОВыборе    - ОписаниеОповещения - Описание оповещения о выборе периода
//  НачальноеЗначение    - Дата       - Начальная дата для выбора периода
//  КалендарныйПериод    - Строка     - "Месяц" или "Квартал" - шаг периода
//
Процедура НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, Форма, ОповещениеОВыборе, НачальноеЗначение = Неопределено, КалендарныйПериод = "Месяц") Экспорт

	СтандартнаяОбработка = Ложь;

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли;

	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоПериодаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	
	Если КалендарныйПериод = "Месяц" Тогда
		КоличествоПериодовВГоду = 12;
		КоличествоМесяцевВПериоде = 1;
	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
		КоличествоПериодовВГоду = 4;
		КоличествоМесяцевВПериоде = 3;
	КонецЕсли;
	
	Для Счетчик = 1 По КоличествоПериодовВГоду Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоПериодаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоПериодаЗаполнения, КалендарныйПериод));
		Если НачальноеЗначение = НачалоПериодаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли;
		НачалоПериодаЗаполнения = ДобавитьМесяц(НачалоПериодаЗаполнения, КоличествоМесяцевВПериоде);
	КонецЦикла;
	
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент",              Элемент);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	ДополнительныеПараметры.Вставить("ПериодРегистрации",    ПериодРегистрации);
	ДополнительныеПараметры.Вставить("Форма",                Форма);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе",    ОповещениеОВыборе);
	ДополнительныеПараметры.Вставить("НачальноеЗначение",    НачальноеЗначение);
	ДополнительныеПараметры.Вставить("КалендарныйПериод",    КалендарныйПериод);
	
	Оповещение = Новый ОписаниеОповещения("НачалоВыбораПредставленияПериодаРегистрацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура НачалоВыбораПредставленияПериодаРегистрацииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДополнительныеПараметры.НачальноеЗначение) Тогда
		НачалоВыбораПредставленияПериодаРегистрации(
			ДополнительныеПараметры.Элемент, 
			ДополнительныеПараметры.СтандартнаяОбработка, 
			ДополнительныеПараметры.ПериодРегистрации,
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.ОповещениеОВыборе,
			ВыбранныйЭлемент.Значение, 
			ДополнительныеПараметры.КалендарныйПериод);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ВыборПериодаИзСписка

Процедура ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора)
	
	Список = ОбщегоНазначенияУТКлиентСервер.ДоступныеЗначенияПериодаПоВидуПериода(НачалоПериода, ВидПериода);
	Если Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВидПериода", ВидПериода);
	ДополнительныеПараметры.Вставить("НачалоПериода", НачалоПериода);
	ДополнительныеПараметры.Вставить("Список", Список);
	ДополнительныеПараметры.Вставить("ОбработчикВыбора", ОбработчикВыбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, ЭлементСписка);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ВыбратьПериодОтчетаЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 ИЛИ Индекс = ДополнительныеПараметры.Список.Количество() - 1 Тогда
		ВыбратьПериодОтчета(ДополнительныеПараметры.Форма, 
							ДополнительныеПараметры.Элемент, 
							ДополнительныеПараметры.ВидПериода, 
							ВыбранныйПериод.Значение, 
							ДополнительныеПараметры.ОбработчикВыбора);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикВыбора, ВыбранныйПериод);
	
КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод()
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт 

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ОбработатьЗаписьОбъектаВФорме(Форма, ПараметрыЗаписи, Отказ = Ложь) Экспорт
	
	ДействиеПослеЗаписи = Неопределено;
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Ложь;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи);
	Форма.НеВыполнятьПроверкуПередЗаписью = Истина;
	
	Отказ = Истина;
	ПараметрыЗаписи.Вставить(
		"ПринудительноЗакрытьФорму", Форма.ПринудительноЗакрытьФорму);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Форма.Объект.Ссылка));
	Результат = Форма.Записать(ПараметрыЗаписи);
	
	Форма.ПринудительноЗакрытьФорму = Ложь;
	Форма.НеВыполнятьПроверкуПередЗаписью = Ложь;
	
	Если Результат И ДействиеПослеЗаписи <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьДействияПослеЗаписи(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Если Не ПараметрыЗаписи.Свойство("НовыйОбъект") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.НовыйОбъект Тогда
		ТекстЗаголовка = НСтр("ru='Создание:'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Изменение:'");
	КонецЕсли;
	ОповеститьПользователяОбИзмененииОбъекта(Объект.Ссылка, ТекстЗаголовка);
	
	Если Форма.ПринудительноЗакрытьФорму Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыОбъектаЗаполнены(Объект, СтруктураРеквизитов)
	
	РеквизитыЗаполнены = Истина;
	ОчиститьСообщения();
	
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		
		Если Не ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено'"),
				?(ПустаяСтрока(Элемент.Значение), Элемент.Ключ, Элемент.Значение));
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Поле = Элемент.Ключ;
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			
			РеквизитыЗаполнены = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыЗаполнены;
	
	
КонецФункции

Процедура ЗапуститьПриложениеБезОбработкиРезультатаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат; // обработка результата запуска не требуется
	
КонецПроцедуры

Процедура ПриОпределенииВозможностиОбновления() Экспорт
	
	МинимальноДопустимаяВерсия = "11.3.4"; // для УТ11
	
	ПараметрыКлиента = Новый Структура;
	ОбщегоНазначенияУТВызовСервера.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыКлиента);
	
	Если ПараметрыКлиента.ВерсияДанных = "0.0.0.0" Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим допустимость обновления
	ТекущаяВерсияКонфигурации  = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ПараметрыКлиента.ВерсияДанных);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ТекущаяВерсияКонфигурации, МинимальноДопустимаяВерсия) < 0 Тогда
		Сообщение =
			НСтр("ru = 'Обновление на текущую версию допустимо только с версии %1 и выше.
			|(Недопустимая попытка обновления с версии %2)
			|Необходимо восстановить информационную базу из резервной копии
			|и повторить обновление согласно файлу 1cv8upd.htm'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			МинимальноДопустимаяВерсия,
			ПараметрыКлиента.ВерсияДанных);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	 
КонецПроцедуры

// Выполняет оповещение пользователя о проведении или отмене проведения документов,
// а также записывает в историю информацию об изменениях объекта.
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ВыделенныеСтроки - Массив - массив ссылок документов,
//		ТипСписка - Строка - тип документов списка.
//
Процедура ОповещениеПроведенияОтменыПроведенияДокумента(Список, ВыделенныеСтроки, ТипСписка)
	
	НавигационнаяСсылка = Неопределено;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Документ = ТипСписка;
		ТекстОповещения = НСтр("ru='Изменение (%КоличествоДокументов%)'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", ВыделенныеСтроки.Количество());
	Иначе
		Документ = ВыделенныеСтроки[0];
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Документ);
		ТекстОповещения = НСтр("ru='Изменение'");
	КонецЕсли;
	
	Список.Обновить();
	ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, Строка(Документ),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Процедура завершения для ПриВыбореОтбораПоАктуальности().
// Устанавливает в форме списка отбор по дате актуальности. Изменяет значение даты актуальности 
// в зависимости от строки актуальности.
//
// Параметры:
//	ДатаВыбора - Дата - введенное пользователем значение даты в результате диалога.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПриВыбореОтбораПоАктуальностиЗавершение(ДатаВыбора, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ЗначениеЗаполнено(ДатаВыбора) Тогда
		Форма[ДополнительныеПараметры.ИмяРеквизитаДатаСобытия] = ДатаВыбора;
		Актуальность = НСтр("ru='Истекает на %Дата%'");
		Актуальность = СтрЗаменить(Актуальность, "%Дата%", Формат(ДатаВыбора, "ДЛФ=D"));
		Форма[ДополнительныеПараметры.ИмяРеквизитаАктуальность] = Актуальность
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(ДополнительныеПараметры.Список,
		Форма[ДополнительныеПараметры.ИмяРеквизитаАктуальность], Форма[ДополнительныеПараметры.ИмяРеквизитаДатаСобытия]);
	
	Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

Функция ВыбратьИзВыделенныхСтрокСпискаДокументыПоИмениМетаданных(ИмяДокумента, Список)
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	
	ПодходящиеДокументы = Новый Массив();
	
	Тип = Тип("ДокументСсылка." + ИмяДокумента);
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Список.ДанныеСтроки(Строка);
		
		Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип Тогда
			ПодходящиеДокументы.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодходящиеДокументы;
	
КонецФункции

Процедура СоздатьДокумент(ХозяйственнаяОперация, ЗначенияЗаполнения, ИмяДокумента)
				
	ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", СтруктураПараметров);
	
КонецПроцедуры

Процедура ПоказатьВопросНеВыбраноРаспоряжение(Параметры)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросНеВыбраноРаспоряжение", ЭтотОбъект,Параметры);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не выбрано распоряжение для оформления документа.
			|Для создания документа без распоряжения необходимо перейти в журнал ""%1"".'"),
		Параметры.СинонимЖурнала);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Перейти в журнал'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,Кнопки,
		,
		КодВозвратаДиалога.Отмена,
		НСтр("ru = 'Не выбрано распоряжение'"));
	
КонецПроцедуры

Процедура ОбработатьВопросНеВыбраноРаспоряжение(Результат,Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Ок Тогда
		
		ОткрытьЖурнал(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеВнутриТаблицы(Форма, Элемент)
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ТаблицаФормы") Тогда
		Возврат Элемент.Родитель;
	ИначеЕсли ТипЗнч(Элемент.Родитель) = Тип("УправляемаяФорма") Тогда
		Возврат Неопределено;
	Иначе	
		Возврат ПолеВнутриТаблицы(Форма, Элемент.Родитель);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
