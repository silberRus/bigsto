#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции для работы с данными в базе

// Заполняет дополнительные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначний - Таблица, в которой необходимо заполнить реквизиты
// 		Реквизиты - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
// 		СтрокиЗаполнения - Массив ДанныеФормыЭлементКоллекции - строки, для которых требуется заполнение
//
Процедура ЗаполнитьДополнительныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, СтруктураДействий, СтрокиЗаполнения = Неопределено) Экспорт
	
	//Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	               |	Таблица.Номенклатура
	               |ПОМЕСТИТЬ втТаблицаНоменклатуры
	               |ИЗ
	               |	&КоллекцияДанных КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	               |	НоменклатураДополнительныеРеквизиты.Значение КАК Синоним1
	               |ИЗ
	               |	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
	               |		Внутреннее СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |		ПО втТаблицаНоменклатуры.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
	               |			И (НоменклатураДополнительныеРеквизиты.Свойство = &Свойство)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
				   
	// Пока в СтруктураДействий должен быть только 1 элемент. Если понадобится
	Для Каждого Действие Из СтруктураДействий Цикл
		Если СтруктураДействий.Свойство("ЗаполнитьМестоХранения") Тогда
			Для каждого СтруктураДействие Из СтруктураДействий.ЗаполнитьМестоХранения Цикл
			
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Синоним1", СтруктураДействие.Ключ);
				Запрос.УстановитьПараметр("Свойство", СтруктураДействие.Значение);
			
			КонецЦикла; 
		Иначе
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	Если СтрокиЗаполнения = Неопределено Тогда
		ПараметрКоллекция = КоллекцияДанных.Выгрузить( ,"НомерСтроки,Номенклатура");
	ИначеЕсли СтрокиЗаполнения.Количество() > 0 Тогда
		ПараметрКоллекция = КоллекцияДанных.Выгрузить(СтрокиЗаполнения ,"НомерСтроки,Номенклатура");
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КоллекцияДанных", ПараметрКоллекция);
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		
		ТЗРезультат = Запрос.Выполнить().Выгрузить();
		Для Каждого Стр Из ТЗРезультат Цикл
			ЗаполнитьЗначенияСвойств(КоллекцияДанных[Стр.Номерстроки - 1], Стр);
		КонецЦикла;
		
	Иначе
		
		Выборка = Запрос.Выполнить().Выбрать();
		Для Н=0 По КоллекцияДанных.Количество()-1 Цикл
			Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
			ЗаполнитьЗначенияСвойств(КоллекцияДанных[Н], Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВКоллекции()

// Заполняет дополнительные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначний - Таблица, в которой необходимо заполнить реквизиты
// 		Реквизиты - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
// 		СтрокиЗаполнения - Массив ДанныеФормыЭлементКоллекции - строки, для которых требуется заполнение
//
Процедура ЗаполнитьМестаХраненияПоНоменклатуреВКоллекции(КоллекцияДанных, ПараметрыЗаполнения, СтрокиЗаполнения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	               |	Таблица.Номенклатура,
	               |	&Склад
	               |ПОМЕСТИТЬ втТаблицаНоменклатуры
	               |ИЗ
	               |	&КоллекцияДанных КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	               |	ЕСТЬNULL(МестаХранения.МестоХранения, """") КАК МестоХранения
	               |ИЗ
	               |	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СТ_МестаХраненияНоменклатурыНаСкладах.СрезПоследних(
	               |				,
	               |				(Номенклатура, Склад) В
	               |					(ВЫБРАТЬ
	               |						вт.Номенклатура,
	               |						вт.Склад
	               |					ИЗ
	               |						втТаблицаНоменклатуры КАК вт)) КАК МестаХранения
	               |		ПО втТаблицаНоменклатуры.Номенклатура = МестаХранения.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
				   	
	Если СтрокиЗаполнения = Неопределено Тогда
		ПараметрКоллекция = КоллекцияДанных.Выгрузить( ,"НомерСтроки,Номенклатура");
	ИначеЕсли СтрокиЗаполнения.Количество() > 0 Тогда
		ПараметрКоллекция = КоллекцияДанных.Выгрузить(СтрокиЗаполнения ,"НомерСтроки,Номенклатура");
	Иначе
		Возврат;
	КонецЕсли;
	 
	Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
	Запрос.УстановитьПараметр("КоллекцияДанных", ПараметрКоллекция);
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		
		ТЗРезультат = Запрос.Выполнить().Выгрузить();
		Для Каждого Стр Из ТЗРезультат Цикл
			ЗаполнитьЗначенияСвойств(КоллекцияДанных[Стр.Номерстроки - 1], Стр);
		КонецЦикла;
		
	Иначе
		
		Выборка = Запрос.Выполнить().Выбрать();
		Для Н=0 По КоллекцияДанных.Количество()-1 Цикл
			Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
			ЗаполнитьЗначенияСвойств(КоллекцияДанных[Н], Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВКоллекции()

// Получает значение дополнительного реквизита объекта
//
// Параметры:
//  ВладелецСвойств - Ссылка - например, СправочникСсылка.Номенклатура, ДокументСсылка.ЗаказПокупателя, ...
//  Свойство        - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - проверяемое свойство.
//
// Возвращаемое значение:
//  Значение свойства или Неопределено, если такого свойства нет
//
Функция ПолучитьЗначениеДополнительногоРеквизита(ВладелецСвойств, Свойство) Экспорт
	
	ЗначениеДополнительногоРеквизита = Неопределено;
	
	ТаблицаСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(ВладелецСвойств, Истина, Ложь, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Свойство));
	
	Для каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		ЗначениеДополнительногоРеквизита = СтрокаСвойства.Значение;    		
		Прервать;
	КонецЦикла; 
	
	Возврат ЗначениеДополнительногоРеквизита;

КонецФункции // ПолучитьЗначениеДополнительногоРеквизита()

Функция ПолучитьКлючПоСтроке(Знач Строка) Экспорт
	
	Строка = Строка(Строка);
	RegExp = Новый COMОбъект("VBScript.RegExp");	
	RegExp.MultiLine = Ложь; 
	RegExp.Global = Истина;
	RegExp.Pattern = "[^А-яA-z0-9]";
	
	Результат = RegExp.Replace(Строка, "");
	
	Возврат Результат;  

КонецФункции // ПолучитьКлючПоНаименованию()

Процедура ОбновитьКлючПоискаДляОбъектов(МассивОбъектов, Отказ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Артикул,
		|	Номенклатура.Производитель,
		|	Номенклатура.ПометкаУдаления
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СТ_АналогиСрезПоследних.Номенклатура,
		|	СТ_АналогиСрезПоследних.АналогДляПоиска
		|ИЗ
		|	РегистрСведений.СТ_Аналоги.СрезПоследних(, Номенклатура В (&МассивОбъектов)) КАК СТ_АналогиСрезПоследних
		|ГДЕ
		|	СТ_АналогиСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаОбъектов = ПакетЗапросов[0].Выбрать();
	ТаблицаАналогов = ПакетЗапросов[1].Выгрузить();
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СТ_КлючиПоиска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаОбъектов.Ссылка);
		
		НомерЗаписиПоОбъекту = 0;
		
		Если НЕ ВыборкаОбъектов.ПометкаУдаления Тогда
			
			КлючПоиска = "";
			
			ДобавитьСтрокуВКлючПоиска(КлючПоиска, ВыборкаОбъектов.Артикул);
			ДобавитьСтрокуВКлючПоиска(КлючПоиска, ВыборкаОбъектов.Производитель);
			
			СтрокиАналогов = ТаблицаАналогов.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаОбъектов.Ссылка));
			Для каждого СтрокаАналога Из СтрокиАналогов Цикл
					
				ДобавитьСтрокуВКлючПоиска(КлючПоиска, СтрокаАналога.АналогДляПоиска);
				
				Если СтрДлина(КлючПоиска) > 1000 Тогда
					НоваяЗапись = НаборЗаписей.Добавить();		
					НоваяЗапись.Объект = ВыборкаОбъектов.Ссылка;
					НоваяЗапись.КлючПоиска = КлючПоиска;					
					НоваяЗапись.НомерЗаписиПоОбъекту = НомерЗаписиПоОбъекту;
					КлючПоиска = "";
					НомерЗаписиПоОбъекту = НомерЗаписиПоОбъекту + 1;
				КонецЕсли; 
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(КлючПоиска) Тогда
				НоваяЗапись = НаборЗаписей.Добавить();		
				НоваяЗапись.Объект = ВыборкаОбъектов.Ссылка;
				НоваяЗапись.НомерЗаписиПоОбъекту = НомерЗаписиПоОбъекту;
				НоваяЗапись.КлючПоиска = КлючПоиска;	
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			
			НаборЗаписей.Записать();		
			
		Исключение
			
			Отказ = Истина;
			
			ШаблонОшибки = "Не удалось обновить ключ поиска объекта: %1
			| по причине: %2";
			
			ПредставлениеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, 
				Строка(ВыборкаОбъектов.Ссылка), 
				ОписаниеОшибки());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПредставлениеИсключения, ВыборкаОбъектов.Ссылка);
			
			ЗаписьЖурналаРегистрации(
				ПредставлениеИсключения,
				УровеньЖурналаРегистрации.Ошибка,
				ВыборкаОбъектов.Ссылка.Метаданные(),
				ВыборкаОбъектов.Ссылка);
				
		КонецПопытки;		
		
	КонецЦикла;  

КонецПроцедуры

Процедура ЗаписатьСтатистикуПоиска(Форма, КлючПоиска) Экспорт

	ДатаЗапроса = ТекущаяДата();
	Пользователь = Пользователи.ТекущийПользователь();
	// Велосипед не мой. Пока не нужно
	////получим результаты поискового запроса
	//Список = Элементы.СписокНоменклатуры;	
	//Схема = Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	//Настройки = Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	//
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//
	//Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//
	//ДатаЗапроса = ТекущаяДата();
	//Пользователь = Пользователи.ТекущийПользователь();
	//
	////создадим набор записей
	//Набор = РегистрыСведений.СТ_СтатистикаЗапросов.СоздатьНаборЗаписей();
	//Набор.Отбор.Период.Установить(ДатаЗапроса);
	//Набор.Отбор.Запрос.Установить(КлючПоиска);
	//Набор.Отбор.Пользователь.Установить(Пользователь);
	//
	//Если Результат.Количество() > 50 Тогда  //слишком много результатов
	//	СтатусЗапроса = Перечисления.СТ_СтатусыЗапросов.D;
	//	
	//	Запись = Набор.Добавить();
	//	Запись.Период = ДатаЗапроса;
	//	Запись.Пользователь = Пользователь;
	//	Запись.НомерСтрокиРезультата = 1;
	//	Запись.Статус = СтатусЗапроса;
	//	Запись.Запрос = КлючПоиска;
	//	Набор.Записать();
	//	
	//ИначеЕсли Результат.Количество() = 0 Тогда   //ничего не найдено
	//	СтатусЗапроса = Перечисления.СТ_СтатусыЗапросов.C;
	//	
	//	Запись = Набор.Добавить();
	//	Запись.Период = ДатаЗапроса;
	//	Запись.Пользователь = Пользователь;
	//	Запись.НомерСтрокиРезультата = 1;
	//	Запись.Статус = СтатусЗапроса;
	//	Запись.Запрос = КлючПоиска;
	//	Набор.Записать();
	//	
	//Иначе   //обработаем кажду строку результата
	//	ТекНомерСтроки = 1;
	//	Для каждого СтрокаРезультата Из Результат Цикл
	//		Запись = Набор.Добавить();
	//		Запись.Период = ДатаЗапроса;
	//		Запись.Пользователь = Пользователь;
	//		Запись.НомерСтрокиРезультата = ТекНомерСтроки;
	//		
	//		Запись.Запрос = КлючПоиска; 
	//		Запись.Производитель = СтрокаРезультата.Ссылка.Производитель;
	//		Запись.Артикул = СтрокаРезультата.Ссылка.Артикул;
	//		Запись.ГруппаТМЦ = СтрокаРезультата.Ссылка.Родитель;
	//		Запись.Остаток = СтрокаРезультата.СвободныйОстаток;
	//		Запись.Статус = ?(Запись.Остаток > 0, Перечисления.СТ_СтатусыЗапросов.A, Перечисления.СТ_СтатусыЗапросов.B);
	//		
	//		ТекНомерСтроки = ТекНомерСтроки + 1;
	//		
	//	КонецЦикла; 				   
	//	Набор.Записать();
	//	
	//	
	//Конецесли;

КонецПроцедуры

Функция ПолучитьПроцентСкидкиПоСоглашению(Соглашение) Экспорт

	ЗначениеСкидкиНаценки = 0;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка,
		|	МАКСИМУМ(ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки, 0)) КАК ЗначениеСкидкиНаценки
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(, Источник = &Соглашение) КАК ДействиеСкидокНаценокСрезПоследних
		|ГДЕ
		|	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ВариантОтбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.БезОграничений)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка";
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗначениеСкидкиНаценки = ВыборкаДетальныеЗаписи.ЗначениеСкидкиНаценки;				
	КонецЕсли;
	
	Возврат ЗначениеСкидкиНаценки;

КонецФункции // ()

Процедура ОбновитьСкидкиПоСоглашению(Соглашение, Отказ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	//Очищаем все записи по соглашению в СТ_ДополнительныеСкидки
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СТ_ДополнительныеСкидки.Период,
		|	СТ_ДополнительныеСкидки.Соглашение
		|ИЗ
		|	РегистрСведений.СТ_ДополнительныеСкидки КАК СТ_ДополнительныеСкидки
		|ГДЕ
		|	СТ_ДополнительныеСкидки.Соглашение = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СТ_ДополнительныеСкидки = РезультатЗапроса.Выбрать();
	
	Пока СТ_ДополнительныеСкидки.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СТ_ДополнительныеСкидки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(СТ_ДополнительныеСкидки.Период);
		НаборЗаписей.Отбор.Соглашение.Установить(СТ_ДополнительныеСкидки.Соглашение);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), СТ_ДополнительныеСкидки.Соглашение,,,Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействиеСкидокНаценокСрезПоследних.Период,
		|	ДействиеСкидокНаценокСрезПоследних.Источник КАК Соглашение,
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка,
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ВариантОтбораНоменклатуры КАК ВариантОтбораНоменклатуры,
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(, Источник = &Соглашение) КАК ДействиеСкидокНаценокСрезПоследних
		|ГДЕ
		|	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент)
		|	И НЕ ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДействиеСкидокНаценок = РезультатЗапроса.Выбрать();
	
	ПолеНоменклатура		 = Новый ПолеКомпоновкиДанных("Номенклатура");
	ПолеНоменклатураГруппа	 = Новый ПолеКомпоновкиДанных("Номенклатура.Родитель");
	ПолеПроизводитель		 = Новый ПолеКомпоновкиДанных("Номенклатура.Производитель");
	
	Пока ДействиеСкидокНаценок.Следующий() Цикл 
		
		Настройки = Неопределено;
		
		Если ДействиеСкидокНаценок.ВариантОтбораНоменклатуры = Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.ОтборКомпоновкиДанных Тогда
			Настройки = ДействиеСкидокНаценок.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
		Если Настройки = Неопределено
			Или НЕ ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Настройки, "ОтборПоНоменклатуре") Тогда
			Продолжить;
		КонецЕсли;
		
		СписокГрупп				 = Новый СписокЗначений;
		СписокПроизводителей	 = Новый СписокЗначений;
		Производитель			 = Неопределено;
		
		Для каждого ЭлементОтбора Из Настройки.ОтборПоНоменклатуре.Отбор.Элементы Цикл
			
			Если НЕ ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеНоменклатура Тогда
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					СписокГрупп.Добавить(ЭлементОтбора.ПравоеЗначение);
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					СписокГрупп = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
			
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеНоменклатураГруппа Тогда
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					СписокГрупп.Добавить(ЭлементОтбора.ПравоеЗначение);
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					СписокГрупп = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
			
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеПроизводитель Тогда
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					СписокПроизводителей.Добавить(ЭлементОтбора.ПравоеЗначение);
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					СписокПроизводителей = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СписокГрупп)
			ИЛИ НЕ ЗначениеЗаполнено(СписокПроизводителей) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаГруппа Из СписокГрупп Цикл
			
			Группа = СтрокаГруппа.Значение;
			
			Если НЕ ЗначениеЗаполнено(Группа) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаПроизводитель Из СписокПроизводителей Цикл
				
				ЗначениеПроизводителя = СтрокаПроизводитель.Значение;
				
				Если НЕ ЗначениеЗаполнено(ЗначениеПроизводителя) Тогда
					Продолжить;
				КонецЕсли;
			
				Запись = РегистрыСведений.СТ_ДополнительныеСкидки.СоздатьМенеджерЗаписи();
				Запись.Период		 = ДействиеСкидокНаценок.Период;
				Запись.Соглашение	 = Соглашение;
				Запись.Производитель = ЗначениеПроизводителя;
				Запись.Группа		 = Группа;
				Запись.Скидка		 = ДействиеСкидокНаценок.ЗначениеСкидкиНаценки;
				
				Попытка
					Запись.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Соглашение,,,Отказ);
					Возврат;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМестоХранения(Номенклатура, Склад) Экспорт

	МестоХранения = Неопределено;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СТ_МестаХраненияНоменклатурыНаСкладахСрезПоследних.МестоХранения
		|ИЗ
		|	РегистрСведений.СТ_МестаХраненияНоменклатурыНаСкладах.СрезПоследних(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Склад = &Склад) КАК СТ_МестаХраненияНоменклатурыНаСкладахСрезПоследних";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		МестоХранения = Выборка.МестоХранения;	
		
	КонецЕсли;
	
	Возврат МестоХранения;

КонецФункции // ПолучитьМестоХранения()
 
Функция ПолучитьДанныеПодписиПользователя(Пользователь,ОтветственноеЛицо)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Должность,
		|	ОтветственныеЛицаОрганизаций.Наименование
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	(ОтветственныеЛицаОрганизаций.ДатаНачала <= &ТекущаяДата
		|			ИЛИ ОтветственныеЛицаОрганизаций.ДатаНачала = &ПустаяДата)
		|	И (ОтветственныеЛицаОрганизаций.ДатаОкончания >= &ТекущаяДата
		|			ИЛИ ОтветственныеЛицаОрганизаций.ДатаОкончания = &ПустаяДата)
		|	И ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
		|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизическоеЛицо", Пользователь.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЕстьПравоПодписиПользователя(Пользователь)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Должность,
		|	ОтветственныеЛицаОрганизаций.Наименование
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	(ОтветственныеЛицаОрганизаций.ДатаНачала <= &ТекущаяДата
		|			ИЛИ ОтветственныеЛицаОрганизаций.ДатаНачала = &ПустаяДата)
		|	И (ОтветственныеЛицаОрганизаций.ДатаОкончания >= &ТекущаяДата
		|			ИЛИ ОтветственныеЛицаОрганизаций.ДатаОкончания = &ПустаяДата)
		|	И ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
		|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизическоеЛицо", Пользователь.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьПодписантаКладовщикаЗаместителя(Склад)    Экспорт
	
	Кладовщик = "";
	Должность = "";
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Новый Структура("Кладовщик,Должность",Кладовщик,Должность);
	КонецЕсли;
	
	Для каждого текСтрока Из Склад.ТекущийОтветственный.ДополнительныеРеквизиты Цикл
		Если Нрег(текСтрока.Свойство.Заголовок) = "в отпуске" 
			И текСтрока.Значение = Истина Тогда  
			Для каждого текСтр Из Склад.ДополнительныеРеквизиты Цикл
				Если Нрег(текСтр.Свойство.Заголовок) = "заместитель ответственного" Тогда
					Кладовщик = текСтр.Значение;
				КонецЕсли;	
				Если Нрег(текСтр.Свойство.Заголовок) = "должность заместителя ответственного" Тогда
					Должность = текСтр.Значение;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Кладовщик) Тогда
		Кладовщик = Склад.ТекущийОтветственный;
		Должность = Склад.ТекущаяДолжностьОтветственного;
	КонецЕсли;
	
	Возврат Новый Структура("Кладовщик,Должность",Кладовщик,Должность);
			
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Процедура ДобавитьСтрокуВКлючПоиска(КлючПоиска, Строка)

	КлючПоля = ПолучитьКлючПоСтроке(Строка);
	Если НЕ ПустаяСтрока(КлючПоля) Тогда
		КлючПоиска = КлючПоиска + ?(ПустаяСтрока(КлючПоиска), "", "&") + КлючПоля;	
	КонецЕсли; 	

КонецПроцедуры

#КонецОбласти
