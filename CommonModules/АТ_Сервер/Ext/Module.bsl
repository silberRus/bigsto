
#Область Ценообразование

#Область ПрограммныйИнтерфейс

Функция ПолучитьСформироватьСоглашение(Партнер, Параметры) Экспорт
	
	// Возвращает первое действующие попавшиее соглашение по переданным параметрам
	// в случае если соглашение не найдено, тогда создает новое соглашение
	//	1. Поиск соглашений по переданным параметрам
	//		1.1 Нет соглашений, вернет пустую ссылку
	//	2. Проверка формы оплаты
	// 		2.1 Если формы оплаты наличкой тогда ищет соглашение с типом "розница" и возвращается 
	//			Если не находится розница, тогда создается новое соглашение розница и возвращается
	//		2.2 Форма оплаты не розница, ищется соглашение лбое и возвращается
	//			если не найдено тогда возвращается пустая ссылка	
	
	// Параметры - структура 
	//	- ФормаОплаты (обязательное) - форма оплаты клиента
	//	- Организация
	//	- Контрагент
	
	Если Не Параметры.Свойство("ФормаОплаты") Тогда
		ВызватьИсключение "При определении соглашения не передана форма оплаты";
	КонецЕсли;
	
	ЭтоРозница	= Параметры.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	Соглашение 	= Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	Запрос 		= Новый Запрос(СтрШаблон("
	
	// Ищем вместе по форме оплаты и с дополнительными параметрами
	|ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка, АТ_Тип ТипСоглашения ИЗ Справочник.СоглашенияСКлиентами ГДЕ Партнер = &Партнер И АТ_Тип = &Тип И Статус = &Действует %1 %2
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Ищем вместе с дополнительными параметрами
	|ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка, АТ_Тип ИЗ Справочник.СоглашенияСКлиентами ГДЕ Партнер = &Партнер И Статус = &Действует %1 %2
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Ищем любое
	|ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка, АТ_Тип ИЗ Справочник.СоглашенияСКлиентами ГДЕ Партнер = &Партнер И Статус = &Действует
	|", 
				?(Параметры.Свойство("Организация"), "	И Организация = &Организация", ""),
				?(Параметры.Свойство("Контрагент"), "	И Контрагент = &Контрагент", "")));
			
	Запрос.УстановитьПараметр("Партнер", 		Партнер);
	Запрос.УстановитьПараметр("Организация", 	?(Параметры.Свойство("Организация"), Параметры.Организация, ""));
	Запрос.УстановитьПараметр("Контрагент", 	?(Параметры.Свойство("Контрагент"), Параметры.Контрагент, ""));
	Запрос.УстановитьПараметр("Действует", 		Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	Запрос.УстановитьПараметр("Тип", 			?(ЭтоРозница, 
														Перечисления.АТ_ТипыСоглашенийСКлиентами.Розница,
														Перечисления.АТ_ТипыСоглашенийСКлиентами.Основное));
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Соглашение = Выборка.Ссылка;
		
		Если ЭтоРозница И Не Выборка.ТипСоглашения = Перечисления.АТ_ТипыСоглашенийСКлиентами.Розница Тогда
				
			Соглашение = СформироватьНовоеСоглашение(Партнер, Соглашение, Параметры);
				
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Соглашение;
	
КонецФункции
Функция ПолучитьСформироватьСоглашение_Ст(Партнер, Параметры) Экспорт
	
	// УДАЛИТЬ ПОСЛЕ 01.05.18 или раньше если есть смыл
	
	//// Возвращает первое попавшиесие соглашение по переданным параметрам
	//// в случае если соглашение не найдено, тогда создает новое соглашение 
	//
	//// Параметры - структура 
	////	- ФормаОплаты (обязательное) - форма оплаты клиента
	////	- Организация
	////	- Контрагент
	//
	//Если Не Параметры.Свойство("ФормаОплаты") Тогда
	//	ВызватьИсключение "При определении соглашения не передана форма оплаты";
	//КонецЕсли;
	//
	//Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.СоглашенияСКлиентами ГДЕ Партнер = &Партнер И ФормаОплаты = &ФормаОплаты %1 %2", 
	//			?(Параметры.Свойство("Организация"), "	И Организация = &Организация", ""),
	//			?(Параметры.Свойство("Контрагент"), "	И Контрагент = &Контрагент", "")));
	//			
	//Запрос.УстановитьПараметр("Партнер", 		Партнер);
	//Запрос.УстановитьПараметр("ФормаОплаты", 	Параметры.ФормаОплаты);
	//Запрос.УстановитьПараметр("Организация", 	АТ_ОбщегоНазначения.Параметр(Параметры, "Организация"));
	//Запрос.УстановитьПараметр("Контрагент", 	АТ_ОбщегоНазначения.Параметр(Параметры, "Контрагент"));
	//
	//Выполнение = Запрос.Выполнить();
	//Если Выполнение.Пустой() Тогда
	//	
	//	Если Параметры.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
	//		
	//		Контрагент = АТ_ОбщегоНазначения.Параметр(Параметры, "Контрагент");
	//		Если Контрагент = Неопределено Тогда
	//			Параметры.Вставить("Контрагент", ПолучитьСформироватьРозничногоКонтрагента(Партнер, Параметры));
	//		ИначеЕсли Не Контрагент.ЭтоРозничный Тогда
	//			ВызватьИсключение СтрШаблон("Переданный контрагент не розничный! Партнер( %1 ) Контрагент( %2 )", Партнер, Контрагент);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//				
	//	Возврат СформироватьНовоеСоглашение(Партнер, Параметры);
	//	
	//Иначе
	//	
	//	Выборка = Выполнение.Выбрать();
	//	Выборка.Следующий();
	//	Возврат Выборка.Ссылка; 
	//	
	//КонецЕсли;
	
КонецФункции

Функция ПолучитьНазначениеПоЗаказу(ЗаказСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Назначения ГДЕ Заказ = &Заказ");
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
			
		Ссылканазначение = Выборка.Ссылка;
			
	Иначе
			
		СпрНазначение = Справочники.Назначения.СоздатьЭлемент();
		СпрНазначение.Записать();	
		Справочники.Назначения.СоздатьОбновитьНазначение(ЗаказСсылка, Строка(ЗаказСсылка), ЗаказСсылка.Партнер, ЗаказСсылка.Номер, ЗаказСсылка.Дата, Ложь);
		Ссылканазначение = СпрНазначение.Ссылка;
			
	КонецЕсли;

	Возврат СсылкаНазначение;
	
КонецФункции

Функция ПолучитьЦеныПоВидуЦен(ВидЦены, МассивТоваров) Экспорт
	
	// Возвращает таблицу значений цен
	//		- Номенклатура
	//		- Цена
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Номенклатура,
	|	Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ВидЦены = &ВидЦены И Номенклатура В(&Товары))
	|");
	
	Запрос.УстановитьПараметр("ВидЦены", 	ВидЦены);
	Запрос.УстановитьПараметр("Товары", 	МассивТоваров);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Процедура ОбновитьСкидкуНаценкуСтрокиТоваров(Объект, СтрокаТовара) Экспорт
	
	// Пересчитвает скидку по указанной строке товара
	//
	
	МассивТоваров = Новый Массив;
	МассивТоваров.Добавить(СтрокаТовара.Номенклатура);
	ВиртОбъект = ПолучитьВиртуальныйОбъектДляРасчетаСкидки(Объект.Соглашение, МассивТоваров);
	ЗаполнитьЗначенияСвойств(ВиртОбъект, Объект);
	
	ЗаполнитьЗначенияСвойств(ВиртОбъект.Товары.Добавить(), СтрокаТовара);
	СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ВиртОбъект, ПолучитьСтруктуруПараметровДляРасчетаСкидки());
	
	ЗаполнитьЗначенияСвойств(СтрокаТовара, ВиртОбъект.Товары[0]);
	
КонецПроцедуры
Функция ПолучитьЦеныСоСкидкамиПоСоглашению(Соглашение, МассивТоваров) Экспорт
	
	// Параметры:
	//	Соглашение
	//	МассивТоваров - массив с товарами, на которые нужно рассчитать цену
	//
	// Возвращает таблицу значений
	//				- Номенклатура
	//				- Цена
	//				- ЦенаСоСкидкой
	//				- ПроцентАвтоматическойСкидки
		
	ОбъектЗаказ = ПолучитьВиртуальныйОбъектДляРасчетаСкидки(Соглашение, МассивТоваров);
	ТабЦен 		= ПолучитьЦеныПоВидуЦен(Соглашение.ВидЦен, МассивТоваров);
	
	Для Каждого Строка Из ТабЦен Цикл
		НовСтрока = ОбъектЗаказ.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		НовСтрока.Количество 			= 1;
		НовСтрока.КоличествоУпаковок 	= 1;
		НовСтрока.Сумма 		= Строка.Цена;
		НовСтрока.Склад			= Соглашение.Склад;
		НовСтрока.ВидЦены		= Соглашение.ВидЦен;
	КонецЦикла;
	
	СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ОбъектЗаказ, ПолучитьСтруктуруПараметровДляРасчетаСкидки());
	Возврат ОбъектЗаказ.Товары.Выгрузить(,"Номенклатура, Цена, ЦенаСоСкидкой, ПроцентАвтоматическойСкидки");
	
КонецФункции

Функция ПолучитьСформироватьРозничногоКонтрагента(Партнер, Параметры = Неопределено, новыйДоговор = Неопределено) Экспорт
	
	// Возвращает первого розничного контрагента
	// если не найдет тогда создаст нового
	//
	// новыйДоговор - сюда вернеться сформированный договор, если будет создан новый договор.
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Если Не Параметры.Свойство("СоздатьДоговор") Тогда
		Параметры.Вставить("СоздатьДоговор", Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Контрагенты ГДЕ Партнер = &Партнер И ЭтоРозничный");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		
		НовКонтр = Справочники.Контрагенты.СоздатьЭлемент();
		НовКонтр.Наименование 				= Строка(Партнер) + " Розница";
		НовКонтр.Партнер 					= Партнер;
		НовКонтр.ЮридическоеФизическоеЛицо 	= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		НовКонтр.ЮрФизЛицо 					= Перечисления.ЮрФизЛицо.ФизЛицо;
		НовКонтр.ЭтоРозничный				= Истина;
		НовКонтр.Записать();
		
		Параметры.Вставить("Контрагент", НовКонтр.Ссылка);
		
		Если Параметры.СоздатьДоговор Тогда
			новыйДоговор = СоздатьДоговорДляРозничногоКонтрагента(Партнер, Параметры);
		КонецЕсли;
		
		Возврат НовКонтр.Ссылка;		
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции
Функция СоздатьДоговорДляРозничногоКонтрагента(Партнер, Параметры)
	
	ДоговорЭлемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	ДоговорЭлемент.Наименование = "Основной договор " + Строка(Параметры.Контрагент);
	ДоговорЭлемент.НаименованиеДляПечати = ДоговорЭлемент.Наименование;
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = АТ_ОбщегоНазначения.ПолучитьЭлементНастройки("ОбщиеНастройки", "ОсновнаяОрганизация");
	КонецЕсли;
	ДоговорЭлемент.Организация = Организация;
	ДоговорЭлемент.Подразделение = АТ_ОбщегоНазначения.ПолучитьЭлементНастройки("ОбщиеНастройки", "ОсновноеПодразделение");
	ДоговорЭлемент.Партнер = Партнер;
	ДоговорЭлемент.Контрагент = Параметры.Контрагент;
	ДоговорЭлемент.Дата = ТекущаяДата();
	
	ДоговорЭлемент.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	ДоговорЭлемент.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	ДоговорЭлемент.Согласован = Истина;
	ДоговорЭлемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	ДоговорЭлемент.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ДоговорЭлемент.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	ДоговорЭлемент.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ДоговорЭлемент.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДоговорЭлемент.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	
	ДоговорЭлемент.Комментарий = "Создано автоматически";
	
	ДоговорЭлемент.Записать();
	
	Возврат ДоговорЭлемент.Ссылка;
	
КонецФункции
#КонецОбласти

Функция СформироватьНовоеСоглашение(Партнер, Соглашение, Параметры)
	
	// Возвращает новое настроенное соглашение
	// Параметры - структура
	//  ФормаОплаты (обязательный параметр)
	
	новСоглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
	новСоглашение.Наименование = СтрШаблон(
		"Соглашение %1%2",
		Партнер,
		?(Параметры.ФормаОплаты = Перечисления.ФормыОплаты.Наличная,
		" РОЗНИЦА",
		""));
	новСоглашение.ДатаНачалаДействия = ТекущаяДата();
	новСоглашение.Дата = ТекущаяДата();
	новСоглашение.Партнер 		= Партнер;
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = АТ_ОбщегоНазначения.ПолучитьЭлементНастройки("ОбщиеНастройки", "ОсновнаяОрганизация");
	КонецЕсли;
	новСоглашение.Организация 	= Организация;
	новСоглашение.АТ_Тип 		= Перечисления.АТ_ТипыСоглашенийСКлиентами.Розница;
	новСоглашение.ВидЦен 		= АТ_ОбщегоНазначения.ПолучитьЭлементНастройки("ОбщиеНастройки", "РозничныйВидЦен");
	новСоглашение.Валюта 		= ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	новСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	новСоглашение.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
	новСоглашение.Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "ОсновнойМенеджер");
	
	новСоглашение.ИспользуютсяДоговорыКонтрагентов = Истина;
	новСоглашение.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	новСоглашение.ЦенаВключаетНДС = Истина;
	новСоглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	СтрокаСрокОплаты = новСоглашение.ЭтапыГрафикаОплаты.Добавить();
	СтрокаСрокОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
	СтрокаСрокОплаты.Сдвиг = 3;
	СтрокаСрокОплаты.ПроцентПлатежа = 100;
	
	новСоглашение.Комментарий = "Создано автоматически";
	
	новСоглашение.Записать();
	
	ЗаполнитьРегистрДействиеСкидокНаценок(новСоглашение.Ссылка, Соглашение);
	
	Возврат новСоглашение.Ссылка;
	
КонецФункции
Процедура ЗаполнитьРегистрДействиеСкидокНаценок(Ссылка, СсылкаОснование)
	НаборЗаписей = РегистрыСведений.ДействиеСкидокНаценок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(СсылкаОснование);
	НаборЗаписей.Прочитать();
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Источник");
	
	НаборЗаписей = РегистрыСведений.ДействиеСкидокНаценок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(Ссылка);
	НаборЗаписей.Загрузить(ТаблицаДвижений);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьВиртуальныйОбъектДляРасчетаСкидки(Соглашение, МассивТоваровИлиСтрока)
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Соглашение", Соглашение);
	
	Объект = Документы.БП_РегистрацияУпущенногоСпроса.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Объект, ОбъектСтруктура);
	
	Возврат Объект;
	
КонецФункции
Функция ПолучитьСтруктуруПараметровДляРасчетаСкидки()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	
	Возврат СтруктураПараметры;
	
КонецФункции

Функция ЗаполнитьИПровестиДокОснование(Менеджер, Свойства, Основание, ДопСвойства = Неопределено, СвойстваПослеЗаполнения = Неопределено, ИмяРеквОснование = "ДокументОснование") Экспорт
	
	// Заполняет и проводит на основании документ 
	// Возвращает ссылку на новый записанный документ введенный на основании
	//
	// Менеджер 				- менеджер документа
	// Свойства 				- структура свойств которые нужно заполнить до вввода на основании
	// Основание 				- сущность основание на основании которого создается документ
	// ДопСвойства 				- структура которая добовляется до ввода на основании к новому объекту в "дполнитеоьные свойства"
	// СвойстваПослеЗаполнения 	- структура по которой заполняется новый документ после ввода на основании
	// ИмяРеквОснование			- имя реквизита в котроее добовится документ введенный на основании
	
	Док = менеджер.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Док, Свойства);
	Док.Дата = ТекущаяДата();
	
	Док[ИмяРеквОснование] = Основание;
		
	Если ТипЗнч(ДопСвойства) = Тип("Структура")Тогда
		Для Каждого Элемент Из ДопСвойства Цикл
			Док.ДополнительныеСвойства.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Док.Заполнить(Основание);
	
	Если ТипЗнч(СвойстваПослеЗаполнения) = Тип("Структура")Тогда
		Для Каждого Элемент Из СвойстваПослеЗаполнения Цикл
			Док[Элемент.Ключ] = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;	
		
	Если Док.Товары.Количество() Тогда
		Док.Записать(РежимЗаписиДокумента.Проведение);
		Возврат Док.Ссылка;
	Иначе
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура АТ_ПриПроведенииЗаказаПоставщикуОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Бэкордер = Справочники.ПричиныОтменыЗаказовПоставщикам.НайтиПоНаименованию("BackOrder");
	Если Не ЗначениеЗаполнено(Бэкордер) Тогда
		Возврат;
	КонецЕсли;
	
	Наборы = Источник.Движения;
	НаборЗаписей = Наборы.АТ_Бэкордера;
	НаборЗаписей.Записывать = Истина;
	
	Товары = Источник.Товары.Выгрузить();
	ТоварыБэкордер = Товары.Скопировать(Новый Структура("Отменено, ПричинаОтмены", Истина, Бэкордер));
	ТоварыДвижения = Товары.Скопировать(Новый Структура("Отменено", Ложь));
	
	Для Каждого Строка Из ТоварыБэкордер Цикл
		Если Строка.Отменено И Строка.ПричинаОтмены = Бэкордер Тогда
			
			Запись = НаборЗаписей.ДобавитьПриход();
			Запись.Период = Источник.Дата;
			Запись.Регистратор = Источник.Ссылка;
			Запись.Поставщик = Источник.Партнер;
			Запись.ДокументЗаказа = Источник.Ссылка;
			Запись.Номенклатура = Строка.Номенклатура;
			Запись.Склад = Источник.Склад;
			Запись.Цена = Строка.Цена;
			Запись.Количество = Строка.Количество;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыДвижения.Номенклатура КАК Номенклатура,
	|	ТоварыДвижения.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыДвиженияБезГруппировки
	|ИЗ
	|	&ТоварыДвижения КАК ТоварыДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДвиженияБезГруппировки.Номенклатура КАК Номенклатура,
	|	СУММА(ТоварыДвиженияБезГруппировки.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДвижения
	|ИЗ
	|	ТоварыДвиженияБезГруппировки КАК ТоварыДвиженияБезГруппировки
	|СГРУППИРОВАТЬ ПО Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АТ_БэкордераОстатки.Номенклатура КАК Номенклатура,
	|	АТ_БэкордераОстатки.ДокументЗаказа КАК ДокументЗаказа,
	|	АТ_БэкордераОстатки.Цена КАК Цена,
	|	АТ_БэкордераОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ТоварыДвижения.Количество КАК Количество
	|ИЗ
	|	РегистрНакопления.АТ_Бэкордера.Остатки(&ДатаОстатков, Поставщик = &Поставщик И Склад = &Склад) КАК АТ_БэкордераОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыДвижения КАК ТоварыДвижения
	|		ПО АТ_БэкордераОстатки.Номенклатура = ТоварыДвижения.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	АТ_БэкордераОстатки.ДокументЗаказа.МоментВремени
	|ИТОГИ
	|	МАКСИМУМ(Количество)
	|ПО
	|	Номенклатура";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(Источник.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Поставщик", Источник.Партнер);
	Запрос.УстановитьПараметр("Склад", Источник.Склад);
	Запрос.УстановитьПараметр("ТоварыДвижения", ТоварыДвижения);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоНоменклатуре = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
			
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ТребуетсяСписать = ВыборкаПоНоменклатуре.Количество;
			
		Выборка = ВыборкаПоНоменклатуре.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запись = НаборЗаписей.ДобавитьРасход();
			Запись.Период = Источник.Дата;
			Запись.Регистратор = Источник.Ссылка;
			Запись.Поставщик = Источник.Партнер;
			Запись.ДокументЗаказа = Выборка.ДокументЗаказа;
			Запись.Номенклатура = Выборка.Номенклатура;
			Запись.Склад = Источник.Склад;
			Запись.Цена = Выборка.Цена;
			
			Если Выборка.КоличествоОстаток >= ТребуетсяСписать Тогда
				Запись.Количество = ТребуетсяСписать;
				Прервать;
			Иначе
				Запись.Количество = Выборка.КоличествоОстаток;
				ТребуетсяСписать = ТребуетсяСписать - Выборка.КоличествоОстаток;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура АТ_РасчетСреднедневногоПотребления() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АТ_РасчетСреднедневногоПотребления);
	
	МассивХозОпераций = Новый Массив;
	МассивХозОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	МассивХозОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияВРозницу);
	МассивХозОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
	МассивХозОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
	МассивХозОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияПрочихАктивов);
	
	ОбеспечениеСкладов = АТ_ОбщегоНазначения.ПолучитьНастройку("ОбеспечениеСкладов");
	
	Если Не ОбеспечениеСкладов.Свойство("НастройкиСкладов") Тогда
		ЗаписьЖурналаРегистрации("Регламентное задание. РасчетСреднедневногоПотребления", УровеньЖурналаРегистрации.Ошибка,,, "В хранилище настроек ОбеспечениеСкладов не найден параметр НастройкиСкладов");
		Возврат;
	КонецЕсли;
	
	Склады = Новый Соответствие;
	Для Каждого СтрокаНастройки Из ОбеспечениеСкладов.НастройкиСкладов Цикл
		Склады.Вставить(СтрокаНастройки.Склад, СтрокаНастройки.ИсточникОбеспечения);
		Склады.Вставить(СтрокаНастройки.ИсточникОбеспечения, Справочники.Склады.ПустаяСсылка());
	КонецЦикла;
	
	Для Каждого ЭлементСоответсвия Из Склады Цикл
		
		Склад = ЭлементСоответсвия.Ключ;
		СписокСкладов = Новый Массив;
		СписокСкладов.Добавить(ЭлементСоответсвия.Ключ);
		Если ЗначениеЗаполнено(ЭлементСоответсвия.Значение) Тогда
			СписокСкладов.Добавить(ЭлементСоответсвия.Значение);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ПОМЕСТИТЬ Дн
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата >= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -12)
		|	И ДанныеПроизводственногоКалендаря.Дата <= &ТекущаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Дн1.Дата КАК Дата,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Дн1.ВидДня = &РабочийДень
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЭтоРабочийДень,
		|	СУММА(ВЫБОР
		|			КОГДА Дн2.ВидДня = &РабочийДень
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КолРабДней
		|ПОМЕСТИТЬ Дни
		|ИЗ
		|	Дн КАК Дн1
		|		ЛЕВОЕ СОЕДИНЕНИЕ Дн КАК Дн2
		|		ПО Дн1.Дата > Дн2.Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	Дн1.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	Дни.Дата КАК ДеньОстатка,
		|	МАКСИМУМ(Дни.ЭтоРабочийДень) КАК ЭтоРабочийДень,
		|	МАКСИМУМ(Дни.КолРабДней) КАК НомерРабДня,
		|	СУММА(ВЫБОР
		|			КОГДА ТоварыНаСкладахОстаткиИОбороты.Период = ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -12)
		|				ТОГДА ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТоварыНаСкладахОстаткиИОбороты.Период <= Дни.Дата
		|						ТОГДА ТоварыНаСкладахОстаткиИОбороты.ВНаличииОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ) КАК Остаток
		|ПОМЕСТИТЬ ОстаткиНаКаждыйДень
		|ИЗ
		|	Дни КАК Дни,
		|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -12), , День, , Склад В (&СписокСкладов)) КАК ТоварыНаСкладахОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
		|	Дни.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиНаКаждыйДень.Номенклатура КАК Номенклатура,
		|	ОстаткиНаКаждыйДень.ДеньОстатка КАК ДеньОстатка,
		|	ОстаткиНаКаждыйДень.ЭтоРабочийДень КАК ЭтоРабочийДень,
		|	ОстаткиНаКаждыйДень.НомерРабДня КАК НомерРабДня,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.КоличествоОборот, 0) > 0
		|			ТОГДА ЕСТЬNULL(ОстаткиНаКаждыйДень.Остаток, 0) + ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.КоличествоОборот, 0)
		|		ИНАЧЕ ОстаткиНаКаждыйДень.Остаток
		|	КОНЕЦ КАК Остаток
		|ПОМЕСТИТЬ ОстаткиНаКаждыйДеньРасширенные
		|ИЗ
		|	ОстаткиНаКаждыйДень КАК ОстаткиНаКаждыйДень
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|				ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -12),
		|				&ТекущаяДата,
		|				ДЕНЬ,
		|				ХозяйственнаяОперация В (&ХозОпРеализация)
		|					И АналитикаУчетаПоПартнерам.Организация = &Организация И АналитикаУчетаНоменклатуры.Склад = &Склад) КАК ВыручкаИСебестоимостьПродаж
		|		ПО (ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Номенклатура = ОстаткиНаКаждыйДень.Номенклатура)
		|			И (ВыручкаИСебестоимостьПродаж.Период = ОстаткиНаКаждыйДень.ДеньОстатка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	СУММА(ВыручкаИСебестоимостьПродаж.КоличествоОборот) КАК КоличествоПродано
		|ПОМЕСТИТЬ ПродажиЗаГод
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|			ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -12),
		|			&ТекущаяДата,
		|			ДЕНЬ,
		|			ХозяйственнаяОперация В (&ХозОпРеализация)
		|				И АналитикаУчетаПоПартнерам.Организация = &Организация
		|				И АналитикаУчетаНоменклатуры.Склад = &Склад) КАК ВыручкаИСебестоимостьПродаж
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродажиЗаГод.Номенклатура КАК Номенклатура,
		|	&Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА СУММА(ЕСТЬNULL(ОстаткиНаКаждыйДеньРасширенные.ЭтоРабочийДень, 0)) = 0
		|			ТОГДА 0
		|		ИНАЧЕ МАКСИМУМ(ПродажиЗаГод.КоличествоПродано) / СУММА(ЕСТЬNULL(ОстаткиНаКаждыйДеньРасширенные.ЭтоРабочийДень, 0))
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	ПродажиЗаГод КАК ПродажиЗаГод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаКаждыйДеньРасширенные КАК ОстаткиНаКаждыйДеньРасширенные
		|		ПО (ОстаткиНаКаждыйДеньРасширенные.Номенклатура = ПродажиЗаГод.Номенклатура)
		|			И (ОстаткиНаКаждыйДеньРасширенные.ЭтоРабочийДень = 1)
		|			И (ОстаткиНаКаждыйДеньРасширенные.Остаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиЗаГод.Номенклатура";
		
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Организация", АТ_Общегоназначения.ПолучитьЭлементНастройки("ОбщиеНастройки", "ОсновнаяОрганизация"));
		Запрос.УстановитьПараметр("РабочийДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		Запрос.УстановитьПараметр("ХозОпРеализация", МассивХозОпераций);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		НаборЗаписей = РегистрыСведений.АТ_СреднедневноеПотребление.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(Склад);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Перехватчики

Процедура ПриРегистрацииДокументаВРеестреДокументов(Ссылка, ДополнительныеСвойства, Отказ) Экспорт
	
	// Вызывается когда типовая пытается записать документ в реестр документов
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") И ЗначениеЗаполнено(Ссылка.ДокументОснование) Тогда
		
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеестрДокументов.ЗаполнитьЗначения(Ссылка.ДокументОснование.Партнер, "Партнер");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БП_по_КП

Функция СрезатьНулиСлева(СтрокаСНулямиВпереди) Экспорт
	
	Попытка
		Возврат Формат(Число(СтрокаСНулямиВпереди), "ЧГ=");
	Исключение
		Возврат СтрокаСНулямиВпереди;
	КонецПопытки;
	
КонецФункции
Процедура ОповеститьМенеджераЧтоСформированаРеализация(КПСсылка, РеализацияСсылка) Экспорт
	
	// Оповещает менеджера о том что его КП собран и готов отгружаться клиенту
	// как только менеджер пожелает этого
	
	СистемаВзаимодействияПривилегированный.ОтправитьСообщение(СтрШаблон(
			"КП №%1 готово к отгрузке клиенту. Сформирована реализация %6
			|Сумма: %3 %2 
			|%4,
			|%5", 
				СрезатьНулиСлева(КПСсылка.Номер),
				ПолучитьНавигационнуюСсылку(КПСсылка.Партнер),
				КПСсылка.СуммаДокумента,
				ПолучитьНавигационнуюСсылку(КПСсылка),
				ПолучитьНавигационнуюСсылку(РеализацияСсылка),
				РеализацияСсылка.Номер), 
			КПСсылка.Менеджер, 
			Перечисления.ВидыОбсуждений.КоммерческоеПредложение);
	
КонецПроцедуры
Процедура ОповеститьМенеджераЧтоКПГотов(КПСсылка) Экспорт
	
	// Оповещает менеджера о том что его КП собран и готов отгружаться клиенту
	// как только менеджер пожелает этого
	
	СистемаВзаимодействияПривилегированный.ОтправитьСообщение(СтрШаблон(
			"КП №%1 готово к отгрузке клиенту. Сформируйет реализацию самостоятельно.
			|Сумма: %3 %2
			|%4", 
				СрезатьНулиСлева(КПСсылка.Номер),
				ПолучитьНавигационнуюСсылку(КПСсылка.Партнер),
				КПСсылка.СуммаДокумента,
				ПолучитьНавигационнуюСсылку(КПСсылка)), 
			КПСсылка.Менеджер, 
			Перечисления.ВидыОбсуждений.КоммерческоеПредложение);
	
КонецПроцедуры

Процедура ИзменитьОбеспечениеВЗаказе(ЗаказОбъект)
	
	// Эта мегафункция для того чтобы симитровать нажаттие кнопки "обеспечивать" в заказе
	// меняет обеспечение в табличной части заказа 
	
	//Заказ = Документы.ЗаказКлиента.СоздатьДокумент();
	//
	Варианты = Новый Массив;
	Варианты.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
	Варианты.Добавить(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", 
												Варианты, Истина, Ложь);
		
	//ПутиКДанным = Новый Соответствие; //Описание особенностей формы
	//ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки"); // дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	//
	//ПараметрыДокумента = Новый Структура("ГруппаСкладов, МенеджерРегистра, ПутиКДанным, СтатусКВыполнению",
	//				ЗаказОбъект.Склад,
	//				РегистрыНакопления.ЗаказыКлиентов,
	//				путиКДанным,
	//				Истина);
	//				
					
					
	ОтборОформлено = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(
		Новый Структура(
			"Ссылка, КодСтроки",
			ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению(), ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0)));
			
	ОформитьПоНакладным = РегистрыНакопления.ЗаказыКлиентов.ТаблицаОформлено(ОтборОформлено);
	
	Строки = ЗаказОбъект.Товары.Выгрузить();
	Строки.Колонки.Добавить("ТипНоменклатуры", 	Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	Строки.Колонки.Добавить("Назначение", 		Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Строки.Колонки.Добавить("Ссылка");
	
	Строки.ЗаполнитьЗначения(Перечисления.ТипыНоменклатуры.Товар, "типНоменклатуры");
	
	РасчитанныеДанные = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияУниверсальный(
		Строки,
		ОформитьПоНакладным,
		ЗаказОбъект.Товары.ВыгрузитьКолонки(),
		ЗаказОбъект.Ссылка,
		ЗаказОбъект.Склад,
		Неопределено,
		ПараметрыЗаполнения);
					
					
	//РасчитанныеДанные = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
	//	Неопределено,//МассивИдентификаторовСтрок, 
	//	ЗаказОбъект,
	//	ЗаказОбъект.Товары,
	//	ПараметрыЗаполнения,
	//	ПараметрыДокумента);

	Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(
	
			ЗаказОбъект, 
			//Новый Структура("Модифицированность", ложь), 
			Неопределено,
			"ИндексыСтрок", 
			РасчитанныеДанные,, 
			//Новый Структура(
			//	"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
			//	"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
			//	"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
			//	"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки")
			);	
		
КонецПроцедуры
Процедура АТ_ИзменитьДействияВЗаказеПоКП() Экспорт
	
	// Робот за ленивого человека меняет действия в заказе
	
	// Смотрит в регистре документы которые уже завершились и
	// при этом есть не созданные реализации
	// по таким заказам пробегает процедуру подсовывания типового обеспечениия
	// и устанавливает флаг что обработано, чтобы следующий раз не обрабатывать

	
	
	ВОЗВРАТ;
	// пока отключаю, вместо робота работает процедура "ИзменитьДействияВЗаказеПоДокументу" при проведелнии документа результата
	
	
	Запрос = Новый Запрос("
	
	// Общие
	
	|ВЫБРАТЬ 	КП, СвязанныйДокумент, ДокументРезультат, Завершено, ИСТИНА ОбновленыДействия
	|ПОМЕСТИТЬ 	ТабКП
	|ИЗ 		РегистрСведений.АТ_СвязьОбъектовКП
	|
	|ГДЕ 	КП.Статус В(
	|				ВЫБРАТЬ ЗНАЧЕНИЕ(Перечисление.СтатусыКП.Сборка) ОБЪЕДИНИТЬ ВСЕ 
	|				ВЫБРАТЬ ЗНАЧЕНИЕ(Перечисление.СтатусыКП.ГотовКОтгрузке)) И
	|		ДокументРезультат <> Неопределено И
	|		НЕ ОбновленыДействия;
	
	// Для движений
	
	|ВЫБРАТЬ * ИЗ ТабКП ГДЕ Завершено И НЕ ДокументРезультат ССЫЛКА Документ.РеализацияТоваровУслуг;
	
	// Для заказов
	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ СвязанныйДокумент Заказ ИЗ РегистрСведений.АТ_СвязьОбъектовКП 
	|ГДЕ 	СвязанныйДокумент ССЫЛКА Документ.ЗаказКлиента И
	|		КП В (ВЫБРАТЬ КП ИЗ ТабКП)
	|");
	
	Пакет = Запрос.ВыполнитьПакет();
	
	НачатьТранзакцию();
	
		Выборка = Пакет[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаказДок = Выборка.Заказ.ПолучитьОбъект();
			ИзменитьОбеспечениеВЗаказе(ЗаказДок);
			ЗаказДок.Записать();
		КонецЦикла;
		
		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.АТ_СвязьОбъектовКП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Записать();
		КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
Функция ПолучитьЗаказы(КП, Склад = Неопределено)
	
	// Возвращает заказы связанные с КП
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ ПЕРВЫЕ 1 СвязанныйДокумент ИЗ РегистрСведений.АТ_СвязьОбъектовКП
	|ГДЕ 	СвязанныйДокумент ССЫЛКА Документ.ЗаказКлиента И
	|		КП = &КП %1", ?(Склад = Неопределено, "", " И
	|		СвязанныйДокумент.Склад = &Склад")));
	
	Запрос.УстановитьПараметр("КП", 	КП);
	Запрос.УстановитьПараметр("Склад", 	Склад);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СвязанныйДокумент");
	
КонецФункции
Процедура УстановитьДействияОтгрузитьВзаказе(КП)
	
	// ищет все заказы связанные с КП
	// после чего все действия "Обособлено" меняет на "Отгрузить"
	
	ЗаказыМассив = ПолучитьЗаказы(КП);
	Для Каждого Заказ Из ЗаказыМассив Цикл
		
		ЗаказОбъект = Заказ.ПолучитьОбъект();
		Строки 		= ЗаказОбъект.Товары.НайтиСтроки(Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Обособленно));
		КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Строки, 
				"Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить");
		
		Если Строки.Количество() Тогда
			ЗаказОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусКП(КПСсылка, Статус)
	
	КПДок = КПСсылка.ПолучитьОбъект();
	КПДок.Статус = Статус;
	КПДок.Записать();
	
КонецПроцедуры
Процедура УстановитьСтатусГотовКотгрузкеЕслиВозможно(КПСсылка)
	
	// Если в реестре связанных, не завершенными остались только заказы покупателей
	// тогда статус меняем на "готов к отгрузке" и оповещаем менеджера
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ РегистрСведений.АТ_СвязьОбъектовКП 
	|ГДЕ 	КП = &КП И 
	|		НЕ Завершено И 
	|		НЕ СвязанныйДокумент ССЫЛКА Документ.ЗаказКлиента");
	Запрос.УстановитьПараметр("КП", КПСсылка);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		УстановитьСтатусКП(КПСсылка, Перечисления.СтатусыКП.ГотовКОтгрузке);
		УстановитьДействияОтгрузитьВзаказе(КПСсылка);
		
		Если КПСсылка.ФормироватьРеализацию Тогда
			РеалСсылка = Документы.КП.СформироватьРеализацию(КПСсылка);
			ОповеститьМенеджераЧтоСформированаРеализация(КПСсылка, РеалСсылка);
		Иначе
			ОповеститьМенеджераЧтоКПГотов(КПСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗакрытьКПЕслиВсеДокиОтработаны(КПСсылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ РегистрСведений.АТ_СвязьОбъектовКП ГДЕ КП = &КП И НЕ Завершено");
	Запрос.УстановитьПараметр("КП", КПСсылка);
	
	Если Запрос.Выполнить().Пустой() Тогда
		УстановитьСтатусКП(КПСсылка, Перечисления.СтатусыКП.Выполнено);
	КонецЕсли;
	
КонецПроцедуры
Процедура АТ_ПриПроведенииСвязанногоДокументаКПОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	// Проверяет документ связан с КП или нет
	// если связан тогда записывает документ в регистр связей
	// также смотрит если количество совпадает с количеством в КП 
	// тогда устанавливает признак "Завершено" в регистре
	// если Источник это перемещение то флаг "Завершено" возможен только
	// у документа со статусом "Принят"
	
	ЭтоПеремещение 	= ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров");
	ЭтоРеализация	= ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг");
	ЭтоПриходник	= ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары");
	
	Если 	ЭтоПриходник И 
			ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") И 
			Источник.Проведен И 
			Источник.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят Тогда
			
		ЭтоПеремещение 	= Истина;
		Источник 		= Источник.Распоряжение;
		
	ИначеЕсли ЭтоПриходник Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СвязанныйДок 	= ?(ЭтоПеремещение, Источник.ЗаказНаПеремещение, 
										?(ЭтоРеализация, 	Источник.ЗаказКлиента, 
															Источник.ЗаказПоставщику));
															
	Запрос = Новый Запрос("ВЫБРАТЬ КП ИЗ РегистрСведений.АТ_СвязьОбъектовКП ГДЕ СвязанныйДокумент = &ДокументОснование");
	Запрос.УстановитьПараметр("ДокументОснование", СвязанныйДок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		ДокЗавершен = (Не ЭтоПеремещение И Не ЭтоПриходник) Или Источник.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
		ТабТоваров 	= Документы.КП.ПолучитьТаблицуТоваровПоДокументам(Выборка.КП, Новый Структура("ВидДокумента", СвязанныйДок.Метаданные().Имя));
		
		Набор = РегистрыСведений.АТ_СвязьОбъектовКП.СоздатьНаборЗаписей();
		Набор.Отбор.КП.Установить(Выборка.КП);
		Набор.Отбор.СвязанныйДокумент.Установить(СвязанныйДок);
		Набор.Прочитать();
		
		Табл = Набор.Выгрузить();
		КонвертацияТипов.УдалитьСтрокиТЗ(Табл, Новый Структура("ДокументРезультат", Неопределено)); 
		КонвертацияТипов.УдалитьСтрокиТЗ(Табл, Новый Структура("ДокументРезультат", Источник.Ссылка)); 
		
		Запись = Табл.Добавить();
		Запись.КП 					= Выборка.КП;
		Запись.СвязанныйДокумент 	= СвязанныйДок;
		Запись.ДокументРезультат 	= Источник.Ссылка;
		Запись.Завершено 			= ДокЗавершен;
		
		Набор.Загрузить(Табл);
		Набор.Записать();
		
		Если ЭтоРеализация Тогда
			
			ЗакрытьКПЕслиВсеДокиОтработаны(Выборка.КП);
			
		ИначеЕсли НЕ ЭтоПеремещение Или ДокЗавершен Тогда
			
			ИзменитьДействияВЗаказеПоДокументу(Выборка.КП, Источник.Ссылка);
			УстановитьСтатусГотовКотгрузкеЕслиВозможно(Выборка.КП);
						
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ИзменитьДействияВЗаказеПоДокументу(КП, Док) Экспорт
	
	// Меняет действия в заказе покупателя, по тем позициям на которых основан документ результат
	// устанавливает всем "отгрузить обособлено"
	// считатется что товары указаные в документеРезультат уже можно отгружать
	
	Обособлено 	= Перечисления.ВариантыОбеспечения.Обособленно;
	Отгрузить 	= Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	Изменилось	= Ложь;
	
	ТовДока		= Док.Товары.Выгрузить();
	
	ЗаказыМассив = ПолучитьЗаказы(КП, ?(ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеТоваров"), Док.СкладПолучатель, Док.Склад));
	Для Каждого Заказ Из ЗаказыМассив Цикл
		
		ЗаказОбъект = Заказ.ПолучитьОбъект();
		Товары		= ЗаказОбъект.Товары;
	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
			"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки",,"КоличествоУпаковок");
		
		Для Каждого Строка Из ТовДока Цикл
			
			Строки 	= Товары.НайтиСтроки(Новый Структура("Номенклатура, ВариантОбеспечения", Строка.Номенклатура, Обособлено));
			Нужно 	= Строка.Количество;
			
			Для Каждого НайдСтрока Из Строки Цикл
				Если Нужно Тогда
					
					Изменилось 	= Истина;
					Списываем 	= Мин(НайдСтрока.Количество, Нужно);
					НайдСтрока.ВариантОбеспечения = Отгрузить;
					
					Если НайдСтрока.Количество > Списываем Тогда
						
						ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, НайдСтрока);
						
						НовСтрока = Товары.Добавить();
						ЗаполнитьЗначенияСвойств(новСтрока, найдСтрока);
						НовСтрока.ВариантОбеспечения 	= Обособлено;
						НовСтрока.Количество 			= НайдСтрока.Количество - Списываем;
						найдСтрока.Количество 			= Списываем;
						
						ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, НайдСтрока);
						ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, НовСтрока);
						ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
						
					КонецЕсли;
					
					Нужно = Нужно - Списываем;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Изменилось Тогда
			ЗаказОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьДоступныеСкладыПоПартнеру(Партнер, РазрешенныеВКП = Истина) Экспорт
	
	// Возвращает доступные склады пользователю для заказа по адресам доставки
	// Все видят ток Питер, а доп чуваки из регистра видят еще дополнительные склады
	//
	// РазрешенныеВКП - если установить то попадут склады у которых стоит галочка "АТ_РазрешитьВКП"
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ	РАЗЛИЧНЫЕ Склад
	|ИЗ			РегистрСведений.АТ_ДоступныеСклады Скл
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ РАЗЛИЧНЫЕ Регион
	|							ИЗ 		Справочник.БП_АдресаДоставкиКонтрагентов
	|							ГДЕ 	Партнер = &Партнер
	|
	|							ОБЪЕДИНИТЬ ВСЕ
	|   	
	|							ВЫБРАТЬ РАЗЛИЧНЫЕ Регион
	|							ИЗ 		Справочник.Партнеры.КонтактнаяИнформация
	|							ГДЕ 	Ссылка = &Партнер
	|						) Адр
	|
	|ПО Адр.Регион ПОДОБНО Скл.УдалитьРегион + ""%""
	|
	|" + ?(РазрешенныеВКП, "ГДЕ Склад.АТ_РазрешитьВКП", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// После сноса из регистра УдалитьРегион, нужно убрать все что ввыше
	
	|
	|ВЫБРАТЬ
	|	РАЗЛИЧНЫЕ Склад
	|ИЗ
	|	РегистрСведений.АТ_ДоступныеСклады Скл			
	|ГДЕ
	|	БизнесРегион В ИЕРАРХИИ(&БизнесРегион)
	|");
	
	Запрос.УстановитьПараметр("Партнер", 			Партнер);
	Запрос.УстановитьПараметр("БизнесРегион", 		Партнер.БизнесРегион);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Добавить().Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("ef02ae83-b55a-11e4-8ed0-001517b9d0ec")); // Санкт-Петербург
	Таблица.Свернуть("Склад");
	
	Возврат Таблица.ВыгрузитьКолонку("Склад");
	
КонецФункции

#КонецОбласти


Функция ПолучитьАдресДоставкиСклада(Склад) Экспорт
	
	// Возвращает структуру последнего введенного адреса склада
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Представление
	|ИЗ 		Справочник.Склады.КонтактнаяИнформация
	|ГДЕ 		Ссылка = &Склад
	|УПОРЯДОЧИТЬ ПО НомерСтроки Убыв
	|");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Запрос.Выполнить().Выгрузить());
	
КонецФункции

Функция ПолучитьДействующиеДоговора(Партнер, ДопПараметрыЗапроса = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	допГде = новый Массив;
	допГде.Добавить("ИСТИНА");
	
	Если ДопПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Элемент Из ДопПараметрыЗапроса Цикл
			допГде.Добавить(СтрШаблон("%1 = &%1", Элемент.Ключ));
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон("
	|ВЫБРАТЬ 	Ссылка 
	|ИЗ 		Справочник.ДоговорыКонтрагентов 
	|ГДЕ 	Не ПометкаУдаления И 
	|		Партнер = &Партнер И
	|		%1 И
	|		Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|УПОРЯДОЧИТЬ ПО 
	|	Дата Убыв
	|", СтрСоединить(допГде, " И ")); 
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
Функция ПолучитьДействующийДоговор(Партнер, ДопПараметрыЗапроса = Неопределено) Экспорт
	
	// Возвращает самый актуальный действующий договор
	
	Договора = ПолучитьДействующиеДоговора(Партнер, ДопПараметрыЗапроса);
	Возврат ?(Договора.Количество(), Договора[0], Договора.Количество());
	
КонецФункции
Функция ПолучитьДействующийДоговорЕслиДоговорОдин(Партнер, ДопПараметрыЗапроса = Неопределено) Экспорт
	
	// Возвращает действующий договор в случае если договор у партнера один
	
	Договора = ПолучитьДействующиеДоговора(Партнер, ДопПараметрыЗапроса);
	Возврат ?(Договора.Количество() = 1, Договора[0], Договора.Количество());
	
КонецФункции

#Область Laximo

Функция Laximo_ПолучитьТаблицуАртикулов(Артикул) Экспорт
	
	// Возвращает массив с артикулами которые найдет на сервисе лаксимо
	
	Обработка = Обработки.AM.Создать();
	Обработка.Артикул 		= Артикул;
	Обработка.flag_crosses 	= Истина;
	Обработка.ЗаполнитьИнформацию();
	
	Таб = Обработка.crosses.Выгрузить();
	Таб.Колонки.Добавить("detailsname", Новый ОписаниеТипов("Строка"));
	Для Каждого Строка Из Таб Цикл
		НайдСтроки = Обработка.details.НайтиСтроки(Новый Структура("detailid", Строка.detailid));
		Если НайдСтроки.Количество() Тогда
			Строка.detailsname = НайдСтроки[0].name;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таб;
	
КонецФункции
Функция Laximo_ПолучитьМассивАртикулов(Артикул) Экспорт
	
	// Возвращает массив с артикулами которые найдет на сервисе лаксимо
	
	Колонка = "oem";
	
	Таб = Laximo_ПолучитьТаблицуАртикулов(Артикул).Скопировать(,Колонка);
	Таб.Свернуть(Колонка);
	
	Возврат Таб.ВыгрузитьКолонку(Колонка);
	
КонецФункции

#КонецОбласти

#Область Логистика

Процедура АТ_ПриЗаписиПриходногоКассовогоОрдераПриЗаписи(Источник, Отказ) Экспорт
	
	// Проверим, возможно этот кассовый ордер - это получение денег от водителей за реализации,
	// 	тогда мы добавим запись в маршрутный лист, так как будто деньги получены,
	// 	но если в маршрутном листе уже есть сумма по данной реализации, тогда записывать не будем.
	
	Если Источник.Проведен Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Зад.Ссылка 							МаршрутныйЛист,
		|	Зад.НомерСтроки - 1					ИндексСтроки,
		|	Зад.МаршрутноеЗадание.Контрагент	Контрагент,
		|	Зад.МаршрутноеЗадание.Номер			НомерЗадания,
		|	Орд.ОснованиеПлатежа.Номер			НомерРеализации,
		|	Орд.Сумма							Сумма
		|ИЗ
		|	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания Зад
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа Орд
		|ПО
		|	Орд.Ссылка = &Ссылка И
		|	Зад.МаршрутноеЗадание.ДокументОснование = Орд.ОснованиеПлатежа
		|
		|ГДЕ
		|	Зад.Ссылка.Проведен И 
		|	НЕ Зад.Ссылка.ПометкаУдаления И 
		|	Зад.АТ_ПолученаСумма = 0
		|	
		|ИТОГИ ПО МаршрутныйЛист
		|");
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		ВыборкаЛистов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаЛистов.Следующий() Цикл
			
			Текст = Новый Массив;
			ДокОб = ВыборкаЛистов.МаршрутныйЛист.ПолучитьОбъект();
			
			ВыборкаСтрок = ВыборкаЛистов.Выбрать();
			Пока ВыборкаСтрок.Следующий() Цикл
				ДокОб.МаршрутныеЗадания[ВыборкаСтрок.ИндексСтроки].АТ_ПолученаСумма = ВыборкаСтрок.Сумма;
				Текст.Добавить(СтрШаблон("	- реализация №%1 (%2) оплата по заданию №%3 - %4 р.", 
					ВыборкаСтрок.НомерРеализации, ВыборкаСтрок.Контрагент, ВыборкаСтрок.НомерЗадания, ВыборкаСтрок.Сумма));
			КонецЦикла;
			
			ДокОб.Записать();
			Сообщить("Оплата " + ВыборкаЛистов.МаршрутныйЛист + Символы.ПС + СтрСоединить(Текст, Символы.ПС));
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура АТ_ПриПроведенииПриобритениеТоваровОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Запрос = Новый Запрос("
	
	// Транспортные затраты
	
	|ВЫБРАТЬ 
	|	МАКСИМУМ(Ссылка.Дата)		Период,
	|	&ВидДвиженияРасход			ВидДвижения,
	|	АТ_МаршрутноеЗадание.Курьер	Курьер,
	|	АТ_МаршрутноеЗадание 		МаршрутноеЗадание,
	|	СУММА(Сумма) 				Сумма
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка И 
	|	АТ_МаршрутноеЗадание <> &ПустоеЗадание И 
	|	АТ_ЭкспедиторскаяРасписка = &ПустаяРасписка
	|
	|СГРУППИРОВАТЬ ПО
	|	АТ_МаршрутноеЗадание;
	
	// Экспедиторские расписки
	
	|ВЫБРАТЬ 
	|	МАКСИМУМ(Ссылка.Дата)			Период,
	|	&ВидДвиженияРасход				ВидДвижения,
	|	Ссылка.Партнер					ТК,
	|	АТ_ЭкспедиторскаяРасписка.Партнер	Партнер,
	|	АТ_ЭкспедиторскаяРасписка 		ЭкспедиторскаяРасписка,
	|	АТ_МаршрутноеЗадание			МаршрутноеЗадание,
	|	АТ_Документ 					Документ,
	|	СУММА(Сумма) 					Сумма
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка И АТ_ЭкспедиторскаяРасписка <> &ПустаяРасписка
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка, АТ_ЭкспедиторскаяРасписка, АТ_МаршрутноеЗадание, АТ_Документ;
	|");

	Запрос.УстановитьПараметр("Ссылка", 			Источник.Ссылка);
	Запрос.УстановитьПараметр("ПустоеЗадание", 		Документы.МегаЛогист_МаршрутноеЗадание.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяРасписка", 	Документы.АТ_ЭкспедиторскаяРасписка.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидДвиженияРасход", 	ВидДвиженияНакопления.Расход);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Источник.Движения.АТ_ТранспортныеЗатраты.Загрузить(Пакет[0].Выгрузить());
	Источник.Движения.АТ_ЭкспедиторскиеРасписки.Загрузить(Пакет[1].Выгрузить());
	
	Источник.Движения.АТ_ТранспортныеЗатраты.Записывать 	= Истина;
	Источник.Движения.АТ_ЭкспедиторскиеРасписки.Записывать 	= Истина;
	
КонецПроцедуры

Функция ПолучитьВесДокумента(ДокСсылка, ВесТочный = Ложь, ИмяТаблицыТовары = "Товары", ИмяКолонкиТовар = "Номенклатура") Экспорт
	
	// Возвращает вес товаров в документе
	//
	// ВесТочный - в эту переменную устанавливается ИСТИНА если у всех товаров был вес
	//				иначе если хоть у одного товара вес был 0 тогда ЛОЖЬ
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ 	СУММА(ВЫБОР КОГДА %3.ВесЗнаменатель = 0 ТОГДА 0 ИНАЧЕ %3.ВесЧислитель / %3.ВесЗнаменатель * Количество КОНЕЦ) 	Вес,
	|			МИНИМУМ(ВЫБОР КОГДА %3.ТипНоменклатуры = &ТипТовар И %3.ВесЗнаменатель = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ) 		ВесТочный
	|ИЗ 	Документ.%1.%2 
	|ГДЕ 	Ссылка = &Ссылка",
		ДокСсылка.Метаданные().Имя,
		ИмяТаблицыТовары,
		ИмяКолонкиТовар));
	
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("ТипТовар", Перечисления.ТипыНоменклатуры.Товар);
	
	Вес 	= 0;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Вес) Тогда
		
			Вес 		= Выборка.Вес;
			ВесТочный 	= Выборка.ВесТочный;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Вес;
	
КонецФункции

#КонецОбласти