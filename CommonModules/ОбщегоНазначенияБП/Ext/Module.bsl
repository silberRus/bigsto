#Область ПрограммныйИнтерфейс

// Позволяет определить заполнен ли реквизит в документе.
//
// Параметры:
//  ИмяРеквизита - Строка - Строковое имя искомого реквизита.
//  ДокументОбъект - ДокументОбъект - Объект, в котором проверяется заполненность реквизита.
//  МетаданныеДокумента - Метаданные - Объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит с указанным именен не заполнен в документе.
//
Функция ЕстьНезаполненныйРеквизитДокумента(ИмяРеквизита, ДокументОбъект, МетаданныеДокумента) Экспорт

	Результат =
		ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор, установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Параметры:
//  Список      - ДинамическийСписок - Динамический список, для которого устанавливается отбор.
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки списка.
//  ИмяОтбора   - Строка - Имя элемента отбора.
//
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Отборы[0];
	ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
	
	Для каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Устанавливает имя сохраняемого файла.
//
// Параметры:
//  МассивОбъектов - Массив - Массив объектов печати.
//  КоллекцияПечатныхФорм - Массив - Коллекция печатных форм.
//  ОбъектыПечати - Массив - Массив объектов печати.
//  ПараметрыВывода - Структура - Параметры вывода печатной формы.
//
Процедура ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода = Неопределено) Экспорт
	
	// В БРУ и УП2 не используется, оставлено для совместимости с БП.

КонецПроцедуры

// Позволяет получить индекс картинки состояния документа из коллекции СостоянияДокумента
// по свойствам Проведен/ПометкаУдаления/РучнаяКорректировка.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Основной реквизит формы документа.
//
// Возвращаемое значение:
//	Число - Индекс картинки.
//
Функция СостояниеДокумента(Объект) Экспорт
	
	// Совместимость с БП.
	Возврат 0;
	
КонецФункции

// Возвращает массив пустых ссылок указанных типов документов.
// Обрабатывает только ссылки на документы, другие виды объектов метаданных не учитывает.
//
// Параметры:
//	Типы - Массив - Массив значений типа Тип.
//
// Возвращаемое значение:
//	Массив - массив с пустыми ссылками указанных типов.
//
Функция ПустыеСсылки(Типы) Экспорт

	Результат = Новый Массив;

	Для Каждого ТекущийТип Из Типы Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекущийТип);
		Если МетаданныеТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа) Тогда
			Результат.Добавить(Документы[МетаданныеТипа.Имя].ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
	Если Типы.Количество() > 1 Тогда
		// Для составных типов в качестве пустого значения может выступать Неопределено.
		Результат.Добавить(Неопределено);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать ОбщегоНазначения.ЕстьРеквизитОбъекта
// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Устарела. Необходимо использовать функцию БСП ОбщегоНазначения.ТекущаяДатаПользователя().
//
// Возвращаемое значение:
//	Дата - рабочая дата пользователя.
//
Функция ПолучитьРабочуюДату() Экспорт

	Возврат ОбщегоНазначения.ТекущаяДатаПользователя();

КонецФункции
 
#КонецОбласти
