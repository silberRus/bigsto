

#Область ПроцедурыИФункцииПечати

Функция ПолучитьСпкДокументов(Статус) Экспорт
	
	мДокументы = новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.Текст = "ВЫБРАТЬ
	|	Б_ОчередьПечати.Документ,
	|	Б_ОчередьПечати.Статус,
	|	Б_ОчередьПечати.Документ.Дата КАК ДатаДокумента,
	|	Б_ОчередьПечати.ИдЧекаНаСайте
	|ИЗ
	|	РегистрСведений.Б_ОчередьПечати КАК Б_ОчередьПечати
	|ГДЕ
	|	Б_ОчередьПечати.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		мДокументы.Добавить(Новый Структура("Документ, ИдЧекаНаСайте",Выборка.Документ , Выборка.ИдЧекаНаСайте));
	КонецЦикла;
	
	Возврат мДокументы;
	
КонецФункции

Процедура ИзменитьЗаписьВРегистре_Б_ОчередьПечати(Элемент, Статус) Экспорт
	
	Выборка = РегистрыСведений.Б_ОчередьПечати.Выбрать(Новый Структура("Документ", Элемент.Документ));
	
	Пока Выборка.Следующий() Цикл
		
		лЗапись = Выборка.ПолучитьМенеджерЗаписи();	
		
		лЗапись.Статус 			= Статус; 	
		лЗапись.ИдЧекаНаСайте 	= Элемент.ИдЧекаНаСайте; 	
		лЗапись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураНастроекДляПечати(АктивныйДокумент) Экспорт
	
	лПараметры = новый Структура;
	лПараметры.Вставить("ДокументСсылка", АктивныйДокумент);	
	лПараметры.Вставить("Партнер", АктивныйДокумент.Контрагент.Партнер);	
	лПараметры.Вставить("Организация", АктивныйДокумент.Организация);	
	
	Если ТипЗнч(АктивныйДокумент) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
		лПараметры.Вставить("ТорговыйОбъект", АктивныйДокумент.Касса);	
	Иначе
		лПараметры.Вставить("ТорговыйОбъект",                 Неопределено);
		лПараметры.Вставить("ПараметрыЭквайринговойОперации", Неопределено);
	КонецЕсли;
	
	лПодключенноеОборудование = новый Структура;
	лПодключенноеОборудование.Вставить("ККТ", Константы.Б_ОбщиеНастройки.Получить().Получить().ПодключаемоеОборудование);
	лПодключенноеОборудование.Вставить("Терминал", Неопределено);
	
	лПараметры.Вставить("ПодключенноеОборудование", лПодключенноеОборудование);	
	
	Возврат лПараметры;
	
КонецФункции

#КонецОбласти


#Область ОбщиеПроцедурыИФункции

Функция КоличествоДокументовДляЧеков() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Б_ОчередьПечати.Документ,
	|	Б_ОчередьПечати.Статус
	|ИЗ
	|	РегистрСведений.Б_ОчередьПечати КАК Б_ОчередьПечати
	|ГДЕ
	|	Б_ОчередьПечати.Статус <> 3";
	ТзнЗапроса =  Запрос.Выполнить().Выгрузить();
		
	Результат = ТзнЗапроса.Количество();
	
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоНужноеРабочееМесто() Экспорт
	
	Результат = Ложь;
	
	лОбщиеНастройки = Константы.Б_ОбщиеНастройки.Получить().Получить();
	Если лОбщиеНастройки = Неопределено тогда
		Возврат Результат;
	КонецЕсли;
	
	Если лОбщиеНастройки.Свойство("РабочееМесто") тогда
		РабочееМесто = лОбщиеНастройки.РабочееМесто;
	КонецЕсли;
	
	Результат = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента() = РабочееМесто;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторУстройства() Экспорт
	
	лОбщиеНастройки = Константы.Б_ОбщиеНастройки.Получить().Получить();
	Если  лОбщиеНастройки = Неопределено тогда
		Возврат Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	КонецЕсли;
	
	Если лОбщиеНастройки.Свойство("ПодключаемоеОборудование") тогда
		ПодключаемоеОборудование = лОбщиеНастройки.ПодключаемоеОборудование;
	Иначе
		ПодключаемоеОборудование = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПодключаемоеОборудование;
	
КонецФункции

Функция ПолучитьВариантОтправкиЭлектронногоЧека() Экспорт
	
	лОбщиеНастройки = Константы.Б_ОбщиеНастройки.Получить().Получить();
	Если  лОбщиеНастройки = Неопределено тогда
		Возврат Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	КонецЕсли;
	
	Если лОбщиеНастройки.Свойство("ВариантОтправкиЭлектронногоЧека") тогда
		ПодключаемоеОборудование = лОбщиеНастройки.ВариантОтправкиЭлектронногоЧека;
	Иначе
		ПодключаемоеОборудование = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	КонецЕсли;
	
	Возврат ПодключаемоеОборудование;
	
КонецФункции

Функция ЕстьЧекУДокумента(Документ) Экспорт
	
	Выборка = РегистрыСведений.ЖурналФискальныхОпераций.Выбрать(Новый Структура("ДокументОснование", Документ));
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПолучитьКонтактыДокумента(Документ) Экспорт
	
	Результат = новый Структура;
	Результат.Вставить("Email","");
	Результат.Вставить("Телефон","");
	
	Если Документ.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено тогда
		
		лКонтрагент = Документ.Контрагент;
		
		Для Каждого ТекКИ из лКонтрагент.КонтактнаяИнформация Цикл
			
			Если ТекКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента  тогда
				Результат.Телефон = ТекКИ.Представление;	
			КонецЕсли;
			
			Если ТекКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента  тогда
				Результат.Email = ТекКИ.Представление;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СообщитьПодробно(пСобытие, ЗаписьВЖурналРегистрации = Ложь) Экспорт
	
	//#Если Клиент Тогда
		Сообщить(пСобытие);
	//#КонецЕсли
	
	Б_ОбщиеПроцедурыИФункцииСервер.ОтображениеСостояния(пСобытие);
	
	Если ЗаписьВЖурналРегистрации тогда
		ЗаписьЖурналаРегистрации("СобытияПечатиЧековМодуляБитрикс", УровеньЖурналаРегистрации.Ошибка,,, пСобытие);
	КонецЕсли;
	
	
	лОбщиеНастройки = Константы.Б_ОбщиеНастройки.Получить().Получить();
	Если  лОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	КаталогЛога 	= лОбщиеНастройки.КаталогЛога;
	РабочееМесто 	= лОбщиеНастройки.РабочееМесто;
	
	Если НЕ ЗначениеЗаполнено(КаталогЛога) тогда 	
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	ИмяЛогФайла = "Receipt_" + Строка(РабочееМесто) + " " + СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"))+ ".txt";
	ПолноеИмяЛогФайла = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПлатформаWindows, КаталогЛога + "\"+ИмяЛогФайла);
	
	Если НЕ Б_ОбщиеПроцедурыИФункцииСервер.СуществуетФайл(КаталогЛога) тогда
		СоздатьКаталог(КаталогЛога);	
	КонецЕсли;
	
	Текст = Новый ЗаписьТекста(ПолноеИмяЛогФайла, КодировкаТекста.ANSI,,истина);
	Текст.ЗаписатьСтроку(Строка(ТекущаяДата()) + "--" + пСобытие);
	Текст.Закрыть(); 
	
КонецПроцедуры

#КонецОбласти
