////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Форма отчета УТ (клиент, переопределяемый)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик расшифровки табличного документа формы отчета.
//
// Параметры:
//   см. ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки()
//
Процедура ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
	
	МенюОтчетов  = Новый Массив;
	МенюДействий = Новый Массив;
	Если ПолноеИмяОтчета = "Отчет.ПоступлениеИОтгрузкаТоваров" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураРасшифровки = ОтчетыУТВызовСервераПереопределяемый.СформироватьДанныеРасшифровки(Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		
		ИмяПоля = "ДокументОснование";
		
		Если СтруктураРасшифровки.Свойство(ИмяПоля)
			И ЗначениеЗаполнено(СтруктураРасшифровки[ИмяПоля])
			И НЕ ТипЗнч(СтруктураРасшифровки[ИмяПоля]) = Тип("Строка") Тогда
			ПоказатьЗначение(,СтруктураРасшифровки[ИмяПоля]);
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СверкаРасчетовСПартнерами" Тогда
		СтандартнаяОбработка  = Ложь;
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ОстаткиИДоступностьТоваров" Тогда
		
		// Расшифровать отчетом -> Поступление и отгрузка товаров
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя",              "ПоступлениеИОтгрузкаТоваров");
		ПараметрыОтчета.Вставить("Заголовок",        НСтр("ru = 'Поступление и отгрузка товаров'"));
		ПараметрыОтчета.Вставить("ИмяОтчета",        "Отчет.ПоступлениеИОтгрузкаТоваров");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Номенклатура");
		ПоляРасшифровки.Добавить("Характеристика");
		ПоляРасшифровки.Добавить("Склад");
		ПоляРасшифровки.Добавить("ДатаДоступности");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("ЕдиницыКоличества");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПлановаяИФактическаяСебестоимостьПродукции" Тогда
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя",              "ФактическаяСебестоимостьПродукции");
		ПараметрыОтчета.Вставить("Заголовок",        НСтр("ru = 'Фактическая себестоимость продукции'"));
		ПараметрыОтчета.Вставить("ИмяОтчета",        "Отчет.ФактическаяСебестоимостьПродукции");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Продукция");
		ПоляРасшифровки.Добавить("ХарактеристикаПродукции");
		ПоляРасшифровки.Добавить("НазначениеПродукции");
		ПоляРасшифровки.Добавить("ПартияПродукции");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя",              "ПлановаяСебестоимостьПродукции");
		ПараметрыОтчета.Вставить("Заголовок",        НСтр("ru = 'Плановая себестоимость продукции'"));
		ПараметрыОтчета.Вставить("ИмяОтчета",        "Отчет.ПлановаяСебестоимостьПродукции");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Продукция");
		ПоляРасшифровки.Добавить("ХарактеристикаПродукции");
		ПоляРасшифровки.Добавить("НазначениеПродукции");
		ПоляРасшифровки.Добавить("Калькуляция");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ВедомостьПоПереданнойВозвратнойТаре"
		ИЛИ ПолноеИмяОтчета = "Отчет.ВедомостьПоПринятойВозвратнойТаре" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		ЭтаФорма.ОтчетДанныеРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЭтаФорма.Отчет));
		
		ВыполненноеДействие = Неопределено;
		ПараметрВыполненногоДействия = Неопределено;
		
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
		
		ПараметрыДействия = Новый Структура("ЭтаФорма", ЭтаФорма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗавершение", 
			ОтчетыУТКлиентПереопределяемый, 
			ПараметрыДействия);
		ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия);
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ТоварыСИстекающимиСертификатами" Тогда
		
		СтандартнаяОбработка = Ложь;
			
		СтруктураРасшифровки = ОтчетыУТВызовСервераПереопределяемый.СформироватьДанныеРасшифровки(Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		
		Если ЗначениеЗаполнено(СтруктураРасшифровки.Номенклатура) Тогда
			ОткрытьОтчетСертификатыНоменклатуры(ЭтаФорма.Отчет, СтруктураРасшифровки);	
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.КартаПродаж" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьРасшифровкуКартыПродажПоРегионам(ЭтаФорма, Расшифровка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализИсполненияАссортимента" Тогда
		
		АссортиментКлиент.ОбработкаРасшифровкиИсполненияАссортимента(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СравнительныйАнализДинамикиАссортиментаИПродаж" Тогда
		
		АссортиментКлиент.ОбработкаРасшифровкиСравнительногоАнализаАссортимента(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализОстатковТоваровОрганизаций" Тогда	
		
		СтандартнаяОбработка = Ложь;
		ОбработатьРасшифровкуАнализОстатковТоваровОрганизаций(ЭтаФорма, Расшифровка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ОстаткиТоваровОрганизаций" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработатьРасшифровкуАнализОстатковТоваровОрганизаций(ЭтаФорма, Расшифровка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СтруктураСерииНоменклатуры" Тогда
		
		ОбработатьРасшифровкуСтруктураСерииНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПрименениеСерииНоменклатуры" Тогда
		
		ОбработатьРасшифровкуПрименениеСерииНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ВедомостьПоСериямНоменклатуры"
		И (КлючТекущегоВарианта = "ВедомостьПоСериямНоменклатуры" 
			ИЛИ КлючТекущегоВарианта = "ВедомостьПоСериямНоменклатурыКонтекст") Тогда
			
		ОбработатьРасшифровкуВедомостьПоСериямНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.УправленческийБаланс" Тогда
		
		ОбработатьРасшифровкуУправленческогоБаланса(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ТоварыСхемыОбеспечения" Тогда
		
		ПоляРасшифровки = Новый Массив;
		ПоляРасшифровки.Добавить("Номенклатура");
		ПоляРасшифровки.Добавить("Характеристика");
		ПоляРасшифровки.Добавить("Склад");
		
		СтруктураРасшифровки = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(Расшифровка,
			ЭтаФорма.ОтчетДанныеРасшифровки, Новый Массив, ПоляРасшифровки);
		
		Если СтруктураРасшифровки.Свойство("Номенклатура") И СтруктураРасшифровки.Свойство("Склад") Тогда
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Источник",		"ТоварыСхемыОбеспечения");
			ПараметрыФормы.Вставить("Номенклатура",	СтруктураРасшифровки.Номенклатура);
			ПараметрыФормы.Вставить("Склад",		СтруктураРасшифровки.Склад);
			Если СтруктураРасшифровки.Свойство("Характеристика") Тогда
				ПараметрыФормы.Вставить("Характеристика",	СтруктураРасшифровки.Характеристика);
			КонецЕсли;
			ОткрытьФорму("Обработка.НастройкаСпособовОбеспеченияПотребностей.Форма.Форма", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если МенюОтчетов.Количество() > 0 Или МенюДействий.Количество() > 0 Тогда
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	КонецЕсли;
	
	ОтчетыЕГАИСКлиент.ОбработкаРасшифровкиОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик дополнительной расшифровки (меню табличного документа формы отчета).
//
// Параметры:
//   см. ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки()
//
Процедура ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
	
	МенюОтчетов  = Новый Массив;
	МенюДействий = Новый Массив;
	
	Если ПолноеИмяОтчета = "Отчет.ПоступлениеИОтгрузкаТоваров" Тогда
		СтандартнаяОбработка  = Ложь;
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СверкаРасчетовСПартнерами" Тогда
		СтандартнаяОбработка  = Ложь;
	ИначеЕсли ПолноеИмяОтчета = "Отчет.УправленческийБаланс" Тогда
		Если КлючТекущегоВарианта = "УправленческийБаланс"
			ИЛИ КлючТекущегоВарианта = "ФинансовоеСостояниеБазовая" Тогда
			
			// Расшифровать отчетом -> Себестоимость продаж
			#Область АнализСебестоимостиТоваровРасширенный
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя",              "СебестоимостьТоваров");
			ПараметрыОтчета.Вставить("Заголовок",        НСтр("ru = 'Себестоимость товаров'"));
			ПараметрыОтчета.Вставить("ИмяОтчета",        "Отчет.АнализСебестоимостиТоваровРасширенный");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Показатель");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			ЗаменаПараметров = Новый Структура;
			ЗаменяющиеПараметры = Новый Соответствие;
			
			ЗаменаПараметров.Вставить("Показатель", Неопределено);
			ЗаменаПараметров.Вставить("Показатель_Родитель", Неопределено);
			ЗаменаПараметров.Вставить("ДинамическаяГруппировкаПоТипуАнализа", "СтруктураПредприятия_Организация");
			ПараметрыОтчета.Вставить("ЗаменаПараметров", ЗаменаПараметров);

			НеобходимыеЗначенияПараметра = Новый Массив;
			НеобходимыеЗначенияПараметра.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиАктивовПассивов.Товары"));
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("Показатель", НеобходимыеЗначенияПараметра);
			ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);		
			#КонецОбласти
		КонецЕсли;
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ВыручкаИСебестоимостьПродаж" Тогда
		// Расшифровать отчетом -> Себестоимость продаж
		#Область АнализСебестоимостиТоваровРасширенный
		ПараметрыОтчета = Новый Структура;
		Если СтрНайти(КлючТекущегоВарианта, "ПоПредприятию") <> 0
		 ИЛИ КлючТекущегоВарианта = "ПродажиСводно" Тогда
			ПараметрыОтчета.Вставить("Имя", "СебестоимостьТоваровПоПредприятию");
		Иначе
			ПараметрыОтчета.Вставить("Имя", "СебестоимостьТоваровПоОрганизациям");
		КонецЕсли;
		ПараметрыОтчета.Вставить("Заголовок",        НСтр("ru = 'Себестоимость товаров'"));
		ПараметрыОтчета.Вставить("ИмяОтчета",        "Отчет.АнализСебестоимостиТоваровРасширенный");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Организация");
		ПоляРасшифровки.Добавить("Подразделение");
		ПоляРасшифровки.Добавить("Менеджер");
		ПоляРасшифровки.Добавить("Склад");
		ПоляРасшифровки.Добавить("Партнер");
		ПоляРасшифровки.Добавить("Номенклатура");
		ПоляРасшифровки.Добавить("Характеристика");
		ПоляРасшифровки.Добавить("Серия");
		ПоляРасшифровки.Добавить("ХозяйственнаяОперация");
		ПоляРасшифровки.Добавить("СебестоимостьИтого");
		ПоляРасшифровки.Добавить("Себестоимость");
		ПоляРасшифровки.Добавить("ДопРасходы");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		ДостаточныеПараметры = Новый Структура;
		ДостаточныеПараметры.Вставить("СебестоимостьИтого");
		ДостаточныеПараметры.Вставить("Себестоимость");
		ДостаточныеПараметры.Вставить("ДопРасходы");
		ПараметрыОтчета.Вставить("ДостаточныеПараметры", ДостаточныеПараметры);
		
		ЗаменаПараметров = Новый Структура;
		ЗаменяющиеПараметры = Новый Соответствие;
		
		ЗаменаПараметров.Вставить("Организация",		"СтруктураПредприятия_Организация");
		ЗаменаПараметров.Вставить("Подразделение",		"СтруктураПредприятия_Подразделение");
		ЗаменаПараметров.Вставить("Менеджер",			"СтруктураПредприятия_Менеджер");
		ЗаменаПараметров.Вставить("Склад",				"СтруктураПредприятия_Склад");
		ЗаменаПараметров.Вставить("Номенклатура",		"АналитикаНоменклатуры_Номенклатура");
		ЗаменаПараметров.Вставить("Характеристика",		"АналитикаНоменклатуры_Характеристика");
		ЗаменаПараметров.Вставить("Серия",				"АналитикаНоменклатуры_Серия");
		ЗаменаПараметров.Вставить("СебестоимостьИтого", Неопределено);
		ЗаменаПараметров.Вставить("Себестоимость",		Неопределено);
		ЗаменаПараметров.Вставить("ДопРасходы",			Неопределено);
		
		ЗначенияПараметров = Новый Соответствие;
		ЗначенияПараметров.Вставить("АналитикаОборотов_ХозяйственнаяОперация", ХозяйственныеОперацииПродаж());
		ЗаменяющиеПараметры.Вставить(0, ЗначенияПараметров); // Все продажи
		
		ЗначенияПараметров = Новый Соответствие;
		ЗначенияПараметров.Вставить("АналитикаОборотов_ХозяйственнаяОперация", ХозяйственныеОперацииПродаж(Истина));
		ЗаменяющиеПараметры.Вставить(1, ЗначенияПараметров); // Кроме продаж между собственными юр. лицами
		
		ЗначенияПараметров = Новый Соответствие;
		ЗначенияПараметров.Вставить("АналитикаОборотов_ХозяйственнаяОперация", ПредопределенноеЗначение("Справочник.НастройкиХозяйственныхОпераций.РеализацияТоваровВДругуюОрганизацию"));
		ЗаменяющиеПараметры.Вставить(2, ЗначенияПараметров); // Только продажи между собственными юр. лицами
		
		ЗаменаПараметров.Вставить("ПоказыватьПродажи", ЗаменяющиеПараметры);
		
		ПараметрыОтчета.Вставить("ЗаменаПараметров", ЗаменаПараметров);
		
		ФиксированныеПараметры = Новый Структура;
		ФиксированныеПараметры.Вставить("АналитикаОборотов_ХозяйственнаяОперация_ИсточникДанных", "ВыручкаИСебестоимостьПродаж");
		ПараметрыОтчета.Вставить("ФиксированныеПараметры", ФиксированныеПараметры);
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("Период");
		СписокПараметров.Добавить("ДанныеОтчета");
		СписокПараметров.Добавить("ЕдиницыКоличества");
		СписокПараметров.Добавить("ПоказыватьПродажи");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);		
		#КонецОбласти
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализСебестоимостиТоваровРасширенный" Тогда
		// Расшифровать отчетом -> Ведомость по партиям товаров
		#Область ВедомостьПоПартиямТоваров
		ПараметрыОтчета = Новый Структура;
		Если СтрНайти(КлючТекущегоВарианта, "ПоПредприятию") <> 0 Тогда
			ПараметрыОтчета.Вставить("Имя", "ВедомостьПоПартиямТоваровПредприятия");
		Иначе
			ПараметрыОтчета.Вставить("Имя", "ВедомостьПоПартиямТоваровОрганизаций");
		КонецЕсли;
		ПараметрыОтчета.Вставить("Заголовок",        НСтр("ru = 'Ведомость по партиям товаров - только при ФИФО(скользящая оценка)'"));
		ПараметрыОтчета.Вставить("ИмяОтчета",        "Отчет.ВедомостьПоПартиямТоваров");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("СтруктураПредприятия_Организация");
		ПоляРасшифровки.Добавить("СтруктураПредприятия_Подразделение");
		ПоляРасшифровки.Добавить("АналитикаНоменклатуры_Номенклатура");
		ПоляРасшифровки.Добавить("АналитикаНоменклатуры_Характеристика");
		ПоляРасшифровки.Добавить("АналитикаНоменклатуры_Серия");
		ПоляРасшифровки.Добавить("СтруктураПредприятия_Склад");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		ЗаменаПараметров = Новый Структура;
		ЗаменяющиеПараметры = Новый Соответствие;
		
		ЗаменаПараметров.Вставить("СтруктураПредприятия_Организация", "Организация");
		ЗаменаПараметров.Вставить("СтруктураПредприятия_Подразделение", "Подразделение");
		ЗаменаПараметров.Вставить("АналитикаНоменклатуры_Номенклатура", "Номенклатура");
		ЗаменаПараметров.Вставить("АналитикаНоменклатуры_Характеристика", "Характеристика");
		ЗаменаПараметров.Вставить("АналитикаНоменклатуры_Серия", "Серия");
		ЗаменаПараметров.Вставить("СтруктураПредприятия_Склад", "Склад");
		ПараметрыОтчета.Вставить("ЗаменаПараметров", ЗаменаПараметров);
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("Период");
		СписокПараметров.Добавить("ДанныеОтчета");
		СписокПараметров.Добавить("ЕдиницыКоличества");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);		
		#КонецОбласти
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ТоварыСхемыОбеспечения" Тогда
		#Область ИзменениеСпособаОбеспеченияПотребностей
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("Имя", "ИзменениеСпособаОбеспеченияПотребностей");
		ПараметрыДействия.Вставить("Заголовок", НСтр("ru = 'Изменить способ обеспечения потребностей'"));
		ПараметрыДействия.Вставить("Действие", "ОткрытьФорму");
		ПараметрыДействия.Вставить("ИмяФормы", "Обработка.НастройкаСпособовОбеспеченияПотребностей.Форма.Форма");
		
		ПоляРасшифровки = Новый Массив;
		ПоляРасшифровки.Добавить("Номенклатура");
		ПоляРасшифровки.Добавить("Характеристика");
		ПоляРасшифровки.Добавить("Склад");
		ПараметрыДействия.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		НеобходимыеПараметры = Новый Структура;
		НеобходимыеПараметры.Вставить("Номенклатура");
		НеобходимыеПараметры.Вставить("Склад");
		ПараметрыДействия.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", "ТоварыСхемыОбеспечения");
		ПараметрыФормы.Вставить("Номенклатура");
		ПараметрыФормы.Вставить("Характеристика");
		ПараметрыФормы.Вставить("Склад");
		ПараметрыДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		МенюДействий.Добавить(ПараметрыДействия);
		#КонецОбласти
	КонецЕсли;
	
	Если МенюОтчетов.Количество() > 0 
		ИЛИ МенюДействий.Количество() > 0 Тогда
			ПараметрыРасшифровки = Новый Структура;
			ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
			ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
			ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
			
			КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

// Обработчик команд, добавленных динамически.
//
// Параметры:
//   см. ОтчетыКлиентПереопределяемый.ОбработчикКоманды()
//
Процедура ОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	
	// Вызов подключаемых команд отчетов
	Если ПолноеИмяОтчета = "Отчет.КартаПродаж"
		И Команда.Имя = "МасштабСхемы" Тогда
		МасштабироватьСхему(ЭтаФорма);
	КонецЕсли;
	
	ОтчетыЕГАИСКлиент.ОбработчикКоманды(ЭтаФорма, Команда, Результат);
КонецПроцедуры

// Обработчик результата выбора подчиненной формы.
//
// Параметры:
//   см. ОтчетыКлиентПереопределяемый.ОбработкаВыбора()
//
Процедура ОбработкаВыбора(ЭтаФорма,ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
КонецПроцедуры

// Обработчик оповещения формы отчета.
//
// Параметры:
//   см. ОтчетыКлиентПереопределяемый.ОбработкаОповещения()
//
Процедура ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник) Экспорт
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	
КонецПроцедуры

// Метод вызывается из формы отчета после его формирования.
//
//	Параметры:
//		ФормаОтчета - УправляемаяФорма - форма отчета.
//
Процедура ПослеФормированияНаКлиенте(ФормаОтчета) Экспорт
	ВосстановитьОффлайновыеРасчеты(ФормаОтчета)
КонецПроцедуры

// Метод вызывается из формы отчета после его формирования.
//
//	Параметры:
//		Ответ - КодВозвратаДиалога - При варианте "Да" будут выполнено переформирование форм
//		ПараметрыВыполнения - Структура - Содержит в себе перечень форм, которые необходимо переформировать.
//
Процедура ФормаОтчетаПослеПодтвержденияПереформирования(Ответ, ПараметрыВыполнения) Экспорт
	Перем НеобработанныеФормы;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ФормаОтчета Из ПараметрыВыполнения.Формы Цикл
		ФормаОтчета.ПодключитьОбработчикОжидания("Сформировать", 1, Истина);
	КонецЦикла;
	Если ПараметрыВыполнения.Свойство("НеобработанныеФормы", НеобработанныеФормы) Тогда
		Для Каждого КлючИЗначение из НеобработанныеФормы Цикл
			ПослеФормированияНаКлиенте(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Метод возвращает обработчик ожидания "ПараметрыПроверкиФоновыхЗаданий".
//
Функция ПараметрыПроверкиФоновыхЗаданий() Экспорт
	Возврат ПараметрыПроверкиФоновыхЗаданий;
КонецФункции

#Область ОткрытиеОтчетов
	
// Открывает указанный вариант отчета КарточкаРасчетовСКлиентами контекстно из документов
//
// Параметры:
//   КлючВарианта (Строка)           Имя открываемой настройки отчета
//   Документ   (ДокументСсылка)     Ссылка на документ, для установки контекста.
//
Процедура ОткрытьОтчетКарточкаРасчетовСКлиентами(КлючВарианта, Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные еще не записаны. Переход к отчету возможен только после записи данных.'"));
		Возврат;
	КонецЕсли;
	
	СтрокаБазовая = ?(ОтчетыУТВызовСервераПереопределяемый.ЗначениеФункциональнойОпции("БазоваяВерсия"), "Базовая", "");
	
	ПараметрыФормы = Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.Вставить("КлючВарианта",						КлючВарианта + СтрокаБазовая);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",		Неопределено);
	ПараметрыФормы.Вставить("Отбор",							Новый Структура("ЗаказКлиентаОтбор, ТекущийДокумент", Документ, Документ));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",			Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",	Ложь);
	
	ОткрытьФорму("Отчет.КарточкаРасчетовСКлиентами.Форма", ПараметрыФормы);
КонецПроцедуры

// Открывает указанный вариант отчета КарточкаРасчетовСПоставщиками контекстно из документов
//
// Параметры:
//   КлючВарианта (Строка)           Имя открываемой настройки отчета
//   Документ   (ДокументСсылка)     Ссылка на документ, для установки контекста.
//
Процедура ОткрытьОтчетКарточкаРасчетовСПоставщиками(КлючВарианта, Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные еще не записаны. Переход к отчету возможен только после записи данных.'"));
		Возврат;
	КонецЕсли;
	
	СтрокаБазовая = ?(ОтчетыУТВызовСервераПереопределяемый.ЗначениеФункциональнойОпции("БазоваяВерсия"), "Базовая", "");
	
	ПараметрыФормы = Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.Вставить("КлючВарианта",						КлючВарианта + СтрокаБазовая);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",		Неопределено);
	ПараметрыФормы.Вставить("Отбор",							Новый Структура("ЗаказПоставщикуОтбор, ТекущийДокумент", Документ, Документ));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",			Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",	Ложь);
	
	ОткрытьФорму("Отчет.КарточкаРасчетовСПоставщиками.Форма", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

// Возникает перед началом формирования отчета.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Отказ - Булево - Если установить в значение Истина, то процесс формирования отчета будет остановлен.
//       Для перезапуска процесса формирования
//       рекомендуется использовать процедуру ОтчетыКлиент.СформироватьОтчет().
//
Процедура ПередФормированием(ФормаОтчета, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Возникает после окончания формирования отчета.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   ОтчетСформирован - Булево - Истина если отчет был успешно сформирован.
//
Процедура ПослеФормирования(ФормаОтчета, ОтчетСформирован) Экспорт
	ВосстановитьОффлайновыеРасчеты(ФормаОтчета);
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработкаРасшифровкиЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт 
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		Если ТипЗнч(ПараметрВыполненногоДействия) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ОткрытьОтчетКарточкаРасчетовПоПереданнойВозвратнойТаре(ДополнительныеПараметры.ЭтаФорма.Отчет, ПараметрВыполненногоДействия);
		ИначеЕсли ТипЗнч(ПараметрВыполненногоДействия) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			ОткрытьОтчетКарточкаРасчетовПоПринятойВозвратнойТаре(ДополнительныеПараметры.ЭтаФорма.Отчет, ПараметрВыполненногоДействия);
		Иначе
			ПоказатьЗначение(Неопределено, ПараметрВыполненногоДействия);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

// Вызывается для отчета "ВедомостьПоПереданнойВозвратнойТаре"
//
Процедура ОткрытьОтчетКарточкаРасчетовПоПереданнойВозвратнойТаре(Отчет, Документ)
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючВарианта = "КарточкаРасчетовПоПринятойВозвратнойТаре";
	
	ИдентификаторПараметраПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")));
	НастройкаПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраПериод);
	
	Отбор = Новый Структура();
	
	Если НастройкаПериод.Использование Тогда
		Отбор.Вставить("Период", НастройкаПериод.Значение);
	КонецЕсли;
	ПараметрыФормы.Отбор = Отбор;
	ПараметрыФормы.Вставить("ПараметрКоманды", Документ);
	
	ОткрытьФорму("Отчет.КарточкаРасчетовПоПереданнойВозвратнойТаре.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Вызывается для отчета "ВедомостьПоПринятойВозвратнойТаре"
//
Процедура ОткрытьОтчетКарточкаРасчетовПоПринятойВозвратнойТаре(Отчет, Документ)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючВарианта = "КарточкаРасчетовПоПринятойВозвратнойТаре";
	
	ИдентификаторПараметраПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")));
	НастройкаПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраПериод);
	
	Отбор = Новый Структура();
	
	Если НастройкаПериод.Использование Тогда
		Отбор.Вставить("Период", НастройкаПериод.Значение);
	КонецЕсли;
	ПараметрыФормы.Отбор = Отбор;
	ПараметрыФормы.Вставить("ПараметрКоманды", Документ);
	
	ОткрытьФорму("Отчет.КарточкаРасчетовПоПринятойВозвратнойТаре.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Вызывается для отчета "Карта продаж по регионам"
//
Процедура ОбработатьРасшифровкуКартыПродажПоРегионам(ЭтаФорма, Расшифровка)
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	
	ПараметрВариантАнализа = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВариантАнализа");
	Если ПараметрВариантАнализа.Значение = 0 Тогда
		КлючВарианта = "РейтингПродажДвухПериодовБизнесРегионы";
	Иначе
		КлючВарианта = "СравнениеВыручкиДвухПериодовБизнесРегионы";
	КонецЕсли;
	
	СвойстваВариантаОтчета = Новый Структура("КлючВарианта, КлючОбъекта",
		КлючВарианта, "Отчет.ПродажиСравнениеДвухПериодов");
	
	КомпоновщикНастроекВариантаОтчета =
		ОтчетыУТВызовСервераПереопределяемый.КомпоновщикНастроекВариантаОтчета(СвойстваВариантаОтчета);
		
	Если КомпоновщикНастроекВариантаОтчета <> Неопределено Тогда
		
		ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ПериодОтчета", ПараметрПериодОтчета.Значение);
		ПараметрПериодСравнения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодСравнения");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ПериодСравнения", ПараметрПериодСравнения.Значение);
			
		ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДанныеОтчета");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ДанныеОтчета", ПараметрДанныеОтчета.Значение);
		
		ПользовательскиеНастройкиВариантаОтчета = КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки;
		
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура("ПользовательскиеНастройки, 
										|КлючВарианта, 
										|КлючНазначенияИспользования, 
										|СформироватьПриОткрытии");
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиВариантаОтчета);
	ПараметрыОтчета.Вставить("КлючВарианта", СвойстваВариантаОтчета.КлючВарианта);
	ПараметрыОтчета.Вставить("КлючНазначенияИспользования", "РасшифровкаКартыПродаж");
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ПродажиСравнениеДвухПериодов.Форма", ПараметрыОтчета);
	
КонецПроцедуры

// Вызывается для отчета "Карта продаж по регионам"
//
Процедура МасштабироватьСхему(ЭтаФорма)
	
	Масштаб = ЭтаФорма.МасштабСхемы;
	ЭтаФорма.Элементы.МасштабСхемы.Заголовок = "Масштаб " + Строка(Масштаб) + "%";
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, ЭтаФорма.Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Если ЭтаФорма.ОтчетТабличныйДокумент.Рисунки.Количество() Тогда
		Схема = ЭтаФорма.ОтчетТабличныйДокумент.Рисунки[0];
		Схема.Ширина = ЭтаФорма.ШиринаСхемы * Масштаб / 100;
		Схема.Высота = ЭтаФорма.ВысотаСхемы * Масштаб / 100;
	КонецЕсли;
	
	ДопСвойства = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("МасштабСхемы", Масштаб);
	
	ДопСвойства.Вставить("ВидимостьБыстрыхНастроек", НЕ ЭтаФорма.Элементы.БыстрыеНастройки.Видимость);
	ЗаполнитьЗначенияСвойств(ЭтаФорма.Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

// Вызывается для отчета "Анализ остатков товаров организаций" и "Остатки товаров организаций"
//
Процедура ОбработатьРасшифровкуАнализОстатковТоваровОрганизаций(ЭтаФорма, Расшифровка)
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		ЭтаФорма.ОтчетДанныеРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЭтаФорма.Отчет));
	
	ВыполненноеДействие = Неопределено;
	ПараметрВыполненногоДействия = Неопределено;
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(Новый ОписаниеОповещения("ОбработатьРасшифровкуАнализОстатковТоваровОрганизацийЗавершение", ЭтотОбъект, Новый Структура("ВыполненноеДействие, ПараметрВыполненногоДействия", ВыполненноеДействие, ПараметрВыполненногоДействия)), 
		Расшифровка, 
		ДоступныеДействия,
		//ДополнительноеМеню
	);
		
КонецПроцедуры

Процедура ОбработатьРасшифровкуАнализОстатковТоваровОрганизацийЗавершение( 
    ВыполненноеДействие,  
    ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
    
    Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
        ПоказатьЗначение(Неопределено, ПараметрВыполненногоДействия);
    КонецЕсли;

КонецПроцедуры

// Вызывается для отчета "Структура серии номенклатуры"
//
Процедура ОбработатьРасшифровкуСтруктураСерииНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка = Неопределено ИЛИ ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	СписокОтчетов = Новый  СписокЗначений;
	СписокОтчетов.Добавить("ДвижениеСерииНоменклатуры", НСтр("ru = 'Движение серии номенклатуры'"),, БиблиотекаКартинок.Отчет);
	СписокОтчетов.Добавить("ВедомостьПоСериямНоменклатуры", НСтр("ru = 'Ведомость по сериям номенклатуры'"),, БиблиотекаКартинок.Отчет);
	СписокОтчетов.Добавить("ПрименениеСерииНоменклатуры", НСтр("ru = 'Применение серии номенклатуры'"),, БиблиотекаКартинок.Отчет);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтчетаПоСериямЗавершение", ЭтотОбъект, Расшифровка);
	ЭтаФорма.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОтчетов);
		
КонецПроцедуры

// Вызывается для отчета "Применение серии номенклатуры"
//
Процедура ОбработатьРасшифровкуПрименениеСерииНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка = Неопределено ИЛИ ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	СписокОтчетов = Новый  СписокЗначений;
	СписокОтчетов.Добавить("ДвижениеСерииНоменклатуры", НСтр("ru = 'Движение серии номенклатуры'"),, БиблиотекаКартинок.Отчет);
	СписокОтчетов.Добавить("ВедомостьПоСериямНоменклатуры", НСтр("ru = 'Ведомость по сериям номенклатуры'"),, БиблиотекаКартинок.Отчет);
	СписокОтчетов.Добавить("СтруктураСерииНоменклатуры", НСтр("ru = 'Структура серии номенклатуры'"),, БиблиотекаКартинок.Отчет);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтчетаПоСериямЗавершение", ЭтотОбъект, Расшифровка);
	ЭтаФорма.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОтчетов);
		
КонецПроцедуры

// Вызывается для отчета "Ведомость по сериям номенклатуры"
//
Процедура ОбработатьРасшифровкуВедомостьПоСериямНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	ПараметрыРасшифровки = НоменклатураКлиент.ПараметрыРасшифровкиОтчетВедомостьПоСериямНоменклатуры();
	ПараметрыРасшифровки.Вставить("Расшифровка", Расшифровка);
	
	КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВыборОтчетаПоСериямЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ДвижениеСерииНоменклатуры" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Серия",  ДополнительныеПараметры.Серия);
		ПараметрыОтбора.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРасшифровки",             Истина);
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ДвижениеСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",      Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",  "ДвижениеСерииНоменклатурыКонтекст" + Строка(Новый УникальныйИдентификатор));
		ПараметрыФормы.Вставить("КлючВарианта",                 "ДвижениеСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("Отбор",                        ПараметрыОтбора);
		
		ОткрытьФорму("Отчет.ДвижениеСерииНоменклатуры.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ВедомостьПоСериямНоменклатуры" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Серия",  ДополнительныеПараметры.Серия);
		ПараметрыОтбора.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРасшифровки",             Истина);
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ВедомостьПоСериямНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",      Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",  "ВедомостьПоСериямНоменклатурыКонтекст" + Строка(Новый УникальныйИдентификатор));
		ПараметрыФормы.Вставить("КлючВарианта",                 "ВедомостьПоСериямНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("Отбор",                        ПараметрыОтбора);
		
		ОткрытьФорму("Отчет.ВедомостьПоСериямНоменклатуры.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "СтруктураСерииНоменклатуры" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Серия",  ДополнительныеПараметры.Серия);
		ПараметрыОтбора.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРасшифровки",             Истина);
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "СтруктураСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",      Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",  "СтруктураСерииНоменклатурыКонтекст" + Строка(Новый УникальныйИдентификатор));
		ПараметрыФормы.Вставить("КлючВарианта",                 "СтруктураСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("Отбор",                        ПараметрыОтбора);
		
		ОткрытьФорму("Отчет.СтруктураСерииНоменклатуры.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПрименениеСерииНоменклатуры" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Серия",  ДополнительныеПараметры.Серия);
		ПараметрыОтбора.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРасшифровки",             Истина);
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ПрименениеСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",      Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",  "ПрименениеСерииНоменклатурыКонтекст" + Строка(Новый УникальныйИдентификатор));
		ПараметрыФормы.Вставить("КлючВарианта",                 "ПрименениеСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("Отбор",                        ПараметрыОтбора);
		
		ОткрытьФорму("Отчет.ПрименениеСерииНоменклатуры.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ОткрытьОтчетСертификатыНоменклатуры(ЭтаФорма, СтруктураРасшифровки)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидНоменклатуры",СтруктураРасшифровки.ВидНоменклатуры);
	Отбор.Вставить("Номенклатура",СтруктураРасшифровки.Номенклатура);
	Отбор.Вставить("Характеристика",СтруктураРасшифровки.Характеристика);
	Отбор.Вставить("Серия",СтруктураРасшифровки.Серия);
	Отбор.Вставить("ДетализироватьПоХарактеристикамИСериям",
		СтруктураРасшифровки.Свойство("ДетализироватьПоХарактеристикамИСериям"));

	Форма = ПолучитьФорму("Отчет.СертификатыНоменклатурыСИстекающимСрокомДействия.Форма");   
	
	КомпоновщикНастроекКомпоновкиДанных = Форма.Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройки = КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;
	
	Параметр = ПолучитьПараметрПользовательскойНастройки(ЭтаФорма.КомпоновщикНастроек.ПользовательскиеНастройки,
										"НедействительныеНаДату");
	УстановитьПараметрПользовательскойНастройки(ПользовательскиеНастройки,
		"НедействительныеНаДату",
		Параметр);

	Параметр = ПолучитьПараметрПользовательскойНастройки(ЭтаФорма.КомпоновщикНастроек.ПользовательскиеНастройки,
										"ДатаСкрыватьСертификаты");
	УстановитьПараметрПользовательскойНастройки(ПользовательскиеНастройки,
		"ДатаСкрыватьСертификаты",
		Параметр);
		
	НастройкаТипСертификата = Новый Структура;
	НастройкаТипСертификата.Вставить("ВидСравнения",ВидСравненияКомпоновкиДанных.Равно);
	НастройкаТипСертификата.Вставить("ПравоеЗначение", СтруктураРасшифровки.ТипСертификата);
	НастройкаТипСертификата.Вставить("Использование", Истина);
	
	УстановитьПользовательскуюНастройку(КомпоновщикНастроекКомпоновкиДанных,
		ПользовательскиеНастройки,
		"ПользовательскиеПоля.Поле1",
		НастройкаТипСертификата);
	
	ПараметрыФормы = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки, Отбор",
		Истина,
		ПользовательскиеНастройки,
		Отбор);

	Форма = ПолучитьФорму("Отчет.СертификатыНоменклатурыСИстекающимСрокомДействия.Форма",ПараметрыФормы);	
	ОткрытьФорму(Форма);
	
КонецПроцедуры

Процедура УстановитьПользовательскуюНастройку(КомпоновщикНастроекКомпоновкиДанных, ПользовательскиеНастройки, ИмяНастройки, Настройка)
	
	ПолеКомпановки = Новый ПолеКомпоновкиДанных(ИмяНастройки);
	ЭлементОтбора = Неопределено;
	
	Для Каждого Элемент Из КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы Цикл
		Если Элемент.ЛевоеЗначение = ПолеКомпановки 
			И Элемент.ВидСравнения = Настройка.ВидСравнения Тогда
			ЭлементОтбора = Элемент;
			Прервать;	
		КонецЕсли;			
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
	
	Элемент.ВидСравнения     = Настройка.ВидСравнения;
	Элемент.ПравоеЗначение   = Настройка.ПравоеЗначение;
	Элемент.Использование    = Настройка.Использование;
	
КонецПроцедуры	

Функция ПолучитьПараметрПользовательскойНастройки(ПользовательскиеНастройки, ИмяНастройки)
	
	ПолеКомпановкиПараметр = Новый ПараметрКомпоновкиДанных(ИмяНастройки);
	ЭлементОтбора = Неопределено;
	
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если Элемент.Параметр = ПолеКомпановкиПараметр Тогда
			Возврат Новый Структура("Значение, Использование",Элемент.Значение, Элемент.Использование); 
			Прервать;	
		КонецЕсли;			
	КонецЦикла;
	
КонецФункции	

Процедура УстановитьПараметрПользовательскойНастройки(ПользовательскиеНастройки, ИмяНастройки, Параметр)
	
	ПолеКомпановкиПараметр = Новый ПараметрКомпоновкиДанных(ИмяНастройки);
	ЭлементОтбора = Неопределено;
	
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если Элемент.Параметр = ПолеКомпановкиПараметр Тогда
			Элемент.Значение = Параметр.Значение;
			Элемент.Использование = Параметр.Использование; 
			Прервать;	
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьОффлайновыеРасчеты(ФормаОтчета)
	
	ДопСвойства = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ТребуетсяОбработчикОжидания = Ложь;
	
	Если ТипЗнч(ПараметрыПроверкиФоновыхЗаданий) <> Тип("Структура") Тогда
		ПараметрыПроверкиФоновыхЗаданий = Новый Структура;
		ПараметрыПроверкиФоновыхЗаданий.Вставить("Задания", Новый Структура());
		ПараметрыПроверкиФоновыхЗаданий.Вставить("Интервал", 7);
	КонецЕсли;
	
	Если ДопСвойства.Свойство("РасчетПартийИСебестоимости") И ДопСвойства.РасчетПартийИСебестоимости Тогда
		
		ТребуетсяОбработчикОжидания = Истина;
		
		Если НЕ ПараметрыПроверкиФоновыхЗаданий.Задания.Свойство("ПартионныйУчет") Тогда
			ПараметрыПроверкиФоновыхЗаданий.Задания.Вставить("ПартионныйУчет", Новый Соответствие);
		КонецЕсли;
		
		ПараметрыЗадания = ПараметрыПроверкиФоновыхЗаданий.Задания.ПартионныйУчет;
		
		ПараметрыФормы = Новый Структура("НачалоПериодаРасчета, КонецПериодаРасчета, МассивОрганизаций, НомерЗадания");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДопСвойства);
		
		ПараметрыЗадания.Вставить(ФормаОтчета, ПараметрыФормы);
		
	ИначеЕсли ДопСвойства.Свойство("ГраницаВзаиморасчетов") Тогда
		
		Если НЕ ДопСвойства.Свойство("ИмяРасчета") Тогда
			Возврат;
		КонецЕсли;
		
		ТребуетсяОбработчикОжидания = Истина;
		
		Если НЕ ПараметрыПроверкиФоновыхЗаданий.Задания.Свойство(ДопСвойства.ИмяРасчета) Тогда
			ПараметрыПроверкиФоновыхЗаданий.Задания.Вставить(ДопСвойства.ИмяРасчета, Новый Соответствие());
		КонецЕсли;
		
		ПараметрыЗадания = ПараметрыПроверкиФоновыхЗаданий.Задания[ДопСвойства.ИмяРасчета];
		
		ПараметрыФормы = Новый Структура("ГраницаВзаиморасчетов, НомерЗадания, АналитикиКРасчету, ИмяРасчета");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДопСвойства);
		
		ПараметрыЗадания.Вставить(ФормаОтчета, ПараметрыФормы);
		
	КонецЕсли;
	
	Если ТребуетсяОбработчикОжидания Тогда
		ФормаОтчета.ПодключитьОбработчикОжидания("ПроверитьФоновыеЗадания", ПараметрыПроверкиФоновыхЗаданий.Интервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ХозяйственныеОперацииПродаж(ИсключитьОперацииПродажСобственнымОрганизациям = Ложь)
	ХозяйственныеОперацииПродаж = ОтчетыУТВызовСервераПереопределяемый.ХозяйственныеОперацииАналитическихРегистров("ВыручкаИСебестоимостьПродаж");
	Если ИсключитьОперацииПродажСобственнымОрганизациям Тогда
		ИндексУдаляемогоЭлемента = ХозяйственныеОперацииПродаж.Найти(ПредопределенноеЗначение("Справочник.НастройкиХозяйственныхОпераций.РеализацияТоваровВДругуюОрганизацию"));
		ХозяйственныеОперацииПродаж.Удалить(ИндексУдаляемогоЭлемента);
	КонецЕсли;
	
	СписокХозяйственныхОпераций = Новый СписокЗначений;
	СписокХозяйственныхОпераций.ЗагрузитьЗначения(ХозяйственныеОперацииПродаж);
	
	Возврат СписокХозяйственныхОпераций;
КонецФункции

Процедура ОбработатьРасшифровкуУправленческогоБаланса(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	ОтчетыРасшифровки = ОтчетыУТВызовСервераПереопределяемый.НастройкиРасшифровкиСтатьиАктиваПассива(КомпоновщикНастроек, Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
	
	МенюОтчетов = ОтчетыРасшифровки.МенюОтчетов;
	Если МенюОтчетов.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтчетаРасшифровкиАктиваПассива", ЭтотОбъект, ОтчетыРасшифровки);
		ЭтаФорма.ПоказатьВыборИзМеню(ОписаниеОповещения, МенюОтчетов);
	ИначеЕсли МенюОтчетов.Количество() = 1 Тогда
		ВыборОтчетаРасшифровкиАктиваПассива(МенюОтчетов[0], ОтчетыРасшифровки)
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборОтчетаРасшифровкиАктиваПассива(ВыбранныйЭлемент, НастройкиРасшифровки) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	
	ИначеЕсли ВыбранныйЭлемент.Значение = "ОткрытьЗначение" Тогда
		ПоказатьЗначение(Неопределено, НастройкиРасшифровки.Показатель);
		
	Иначе
		Отчет = НастройкиРасшифровки[ВыбранныйЭлемент.Значение];
		ОткрытьФорму("Отчет."+Отчет.ИмяОтчета+".Форма", Отчет.ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
