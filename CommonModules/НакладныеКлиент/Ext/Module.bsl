
////////////////////////////////////////////////////////////////////////////////
// Модуль "НакладныеКлиент" содержит процедуры и функции для
// поддержки заполнения накладных и функциональности форм документов
// и списков накладных.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует массив ссылок по выделенным строкам списка, исключая группировки,
// предупреждает пользователя об отсутствии выделенных строк.
//
// Параметры:
//  Список 			- ДинамическийСписок - список, выделенные строки которого содержат ссылки для дальнейшей обработки.
//  ТипНакладная	- ОписаниеТипов - описание типов, содержащее типы накладных, присутствующих в списке.
//  СвойстваЗаказов	- Строка - перечень свойств, которые нужно получить из списка.
//
// Возвращаемое значение:
//  Структура - содержит два массива "Заказы" и "Накладные", содержащие ссылки на выделенные строки списка.
//
Функция СсылкиВыделенныхСтрокСпискаПоВидам(Список, ТипНакладная, СвойстваЗаказов = "") Экспорт
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	ИдентификаторыСтрок = Новый Массив();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для оформления накладных необходимо выделить одну или несколько
		                                 |строк в списке распоряжений к оформлению.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе
		
		Для Каждого Идентификатор Из Список.ВыделенныеСтроки Цикл
			
			Если ТипЗнч(Идентификатор) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				ИдентификаторыСтрок.Добавить(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИдентификаторыСтрок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Выполнение команды для группировки строк не предусмотрено.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументыПоВидам = Новый Структура;
	ДокументыПоВидам.Вставить("Заказы", Новый Массив);
	ДокументыПоВидам.Вставить("Накладные", Новый Массив);
	ДокументыПоВидам.Вставить("СоответствиеОрдера", 0);
	ДокументыПоВидам.Вставить("СостояниеНакладной", 0);
	ДокументыПоВидам.Вставить("СвойстваЗаказов", Новый Массив); // значения полей строки списка, если это строка - заказ
	ДокументыПоВидам.Вставить("Количество", ИдентификаторыСтрок.Количество());
	
	ЕстьНакладная = Ложь;
	Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
		
		СтрокаСписка = Список.ДанныеСтроки(Идентификатор);
		СоответствиеОрдераВСтрокеСписка = СтрокаСписка.СоответствиеОрдера;
		СостояниеНакладнойВСтрокеСписка = СтрокаСписка.СостояниеНакладной;
		
		Ссылка = СтрокаСписка.Ссылка;
		
		Если ТипНакладная.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			Если Не ЕстьНакладная Тогда
				ДокументыПоВидам.Накладные.Добавить(Ссылка);
				ДокументыПоВидам.СоответствиеОрдера = СоответствиеОрдераВСтрокеСписка;
				ЕстьНакладная = Истина;
			КонецЕсли;
			
		Иначе
			
			ДокументыПоВидам.Заказы.Добавить(Ссылка);
			ДокументыПоВидам.СоответствиеОрдера = Макс(ДокументыПоВидам.СоответствиеОрдера, СоответствиеОрдераВСтрокеСписка);
			ДокументыПоВидам.СостояниеНакладной = Макс(ДокументыПоВидам.СостояниеНакладной, СостояниеНакладнойВСтрокеСписка);
			
			Если СвойстваЗаказов <> "" Тогда
				ЗначенияСвойствЗаказа = Новый Структура(СвойстваЗаказов);
				ЗаполнитьЗначенияСвойств(ЗначенияСвойствЗаказа, СтрокаСписка);
				ДокументыПоВидам.СвойстваЗаказов.Добавить(ЗначенияСвойствЗаказа);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыПоВидам;
	
КонецФункции

// Сообщает об ошибках создания накладной на основании заказов, если у заказов не совпадают реквизиты шапки.
// Параметры:
//  ТекстыОшибок - Массив, Строка - Массив текстов ошибок или текст одной ошибки.
//
Процедура СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ТекстыОшибок) Экспорт
	
	ОчиститьСообщения();
	Если ТипЗнч(ТекстыОшибок) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстыОшибок,,,,);
	Иначе
		
		Для Каждого ТекстОшибки Из ТекстыОшибок Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует соответсвие складов и массивов ссылок по выделенным строкам списка распоряжений, исключая некорректные состояния.
//
// Параметры:
//  СписокРаспоряжения	- ТаблицаФормы - элемент списка на форме, выделенные строки которого содержат ссылки для дальнейшей обработки.
//  ДанныеРаспоряжений	- ДанныеФормыКоллекция - реквизит на форме, содержащий данные списка распоряжений
//  ПоОрдерам			- Строка - заполняется при оформлении по ордерам
//  СписокОшибок		- Структура - список ошибок.
//  ПолеОшибки			 - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//
// Возвращаемое значение:
//  Соответствие
//
Функция РаспоряженияДляОформленияПоСкладам(СписокРаспоряжения, ДанныеРаспоряжений, ПоОрдерам = "", СписокОшибок, ПолеОшибки) Экспорт
	
	СписокРаспоряжений = Новый Соответствие;
	Заказы = Новый Соответствие;
	Накладные = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из СписокРаспоряжения.ВыделенныеСтроки Цикл
		
		Строка = ДанныеРаспоряжений.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекстОшибки = "";
		
		Если ЗначениеЗаполнено(ПоОрдерам) Тогда // оформление по ордерам
			
			Если Строка.СостояниеОрдера = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную %2, т.к. ордера соответствуют накладным.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Ссылка, ПоОрдерам);
			ИначеЕсли Строка.СостояниеОрдера = 1 Тогда
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную %2, т.к. нет ни одного ордера.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Ссылка, ПоОрдерам);
			ИначеЕсли Строка.СостояниеОрдера = 4 Тогда
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную %2, т.к. ордера не используются.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Ссылка, ПоОрдерам);
			ИначеЕсли Строка.СостояниеНакладной = 4 Тогда
				Накладные.Добавить(Строка.Ссылка);
			Иначе
				Если Заказы[Строка.СкладОформления] = Неопределено Тогда
					Заказы.Вставить(Строка.СкладОформления, Новый Массив);
				КонецЕсли;
				Заказы[Строка.СкладОформления].Добавить(Строка.Ссылка);
			КонецЕсли;
			
		Иначе // оформление по заказам
			
			Если Строка.СостояниеНакладной = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Ссылка);
			ИначеЕсли Строка.СостояниеНакладной = 4 Тогда
				ТекстОшибки = НСтр("ru = 'Распоряжение %1 явлется накладной. Невозможно оформить накладную по накладной.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			Если СписокРаспоряжений[Строка.СкладОформления] = Неопределено Тогда
				СписокРаспоряжений.Вставить(Строка.СкладОформления, Новый Массив);
			КонецЕсли;
			СписокРаспоряжений[Строка.СкладОформления].Добавить(Строка.Ссылка);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, ПолеОшибки, ТекстОшибки, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПоОрдерам) Тогда
		ЕстьЗаказы = ЗначениеЗаполнено(Заказы);
		Если ЕстьЗаказы ИЛИ Накладные.Количество() > 1 Тогда
			Для каждого Накладная Из Накладные Цикл
				ТекстОшибки = НСтр("ru = 'Одновременное оформление %1 накладной %2 вместе с другими распоряжениями невозможно. Выберите накладную отдельно.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ПоОрдерам, Накладная);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, ПолеОшибки, ТекстОшибки, Неопределено);
			КонецЦикла;
			
			СписокРаспоряжений = Заказы;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокРаспоряжений.Количество() = 0 И СписокРаспоряжения.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		Если ЗначениеЗаполнено(ПоОрдерам) Тогда
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПоОрдерам);
		Иначе
			ТекстОшибки = СтрШаблон(ТекстОшибки, НСтр("ru = 'по заказам'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, ПолеОшибки, ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Возврат СписокРаспоряжений;
	
КонецФункции

// Открывает форму оформления либо список уже оформленных документов.
//
// Параметры:
//  ПараметрыСозданныхДокументов	- Структура - содержащая поля "ИмяФормы" и "Параметры".
//  Владелец						- Форма, элемент формы - владелец открываемой формы.
//
Процедура ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, Владелец) Экспорт
	
	Если ПараметрыСозданныхДокументов = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
		
		ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
		Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
			ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
			ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
		Иначе
			ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, Владелец);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
