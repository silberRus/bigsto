///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры протоколирования расчета, выполняемого механизмами
//	- партионного учета версии 2.2
//	- расчета себестоимости
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ПротоколированиеРасчета

// Инициализирует вспомогательные данные для ведения протокола расчета.
// Можно не вызывать явно - вызывается при начале первого этапа.
//
Процедура НачалоРасчета(ПараметрыРасчета) Экспорт
	
	// Сделаем запись о начале этапа в ЖР.
	ОтметкаВЖурналеРегистрации(ПараметрыРасчета, "ИнициализироватьПараметрыРасчета");
	
	ПротоколРасчета = Новый Структура;
	
	// Общая информация о расчете.
	ПротоколРасчета.Вставить("Идентификатор",  СокрЛП(Новый УникальныйИдентификатор));;
	ПротоколРасчета.Вставить("ДатаНачала",     ТекущаяДатаСеанса());
	ПротоколРасчета.Вставить("ВремяНачала",    ТекущаяУниверсальнаяДатаВМиллисекундах());
	ПротоколРасчета.Вставить("ВремяОкончания", Неопределено);
	ПротоколРасчета.Вставить("Длительность",   Неопределено);
	
	// Информация об ошибках.
	ПротоколРасчета.Вставить("ОшибкиРасчета",  Новый Соответствие); // виды возникших при расчете ошибок
	ПротоколРасчета.Вставить("ОшибкиДвижений", Новый Массив); // тексты ошибок о некорректных регистраторах
	ПротоколРасчета.Вставить("ОшибкиЗаписи",   Новый Массив); // тексты ошибок, возникших при записи движений
	
	// Информация о записанных в ИБ движениях.
	ПротоколРасчета.Вставить("ЗаписьДвижений", Новый Структура);
	
	// Для подсчета общего количества сформированных в кэше движений (нарастающим итогом).
	ПротоколРасчета.Вставить("СформированныеДвижения", Новый Структура);
	
	// Таблица описания каждого этапа.
	ПротоколРасчета.Вставить("Этапы", Новый ТаблицаЗначений);
	ПротоколРасчета.Этапы.Колонки.Добавить("ПредставлениеЭтапа");
	ПротоколРасчета.Этапы.Колонки.Добавить("УровеньЭтапа");
	ПротоколРасчета.Этапы.Колонки.Добавить("ДатаНачала");
	ПротоколРасчета.Этапы.Колонки.Добавить("ВремяНачала");
	ПротоколРасчета.Этапы.Колонки.Добавить("ВремяОкончания");
	ПротоколРасчета.Этапы.Колонки.Добавить("СформированныеДвижения"); // по конкретному этапу, только по измененным регистрам
	ПротоколРасчета.Этапы.Колонки.Добавить("ВременныеТаблицы"); // Структура(имя временной таблицы - Массив(Структура(количество записей, время формирования)))
	ПротоколРасчета.Этапы.Колонки.Добавить("ИнформацияОбОшибках"); // массив строк, сгруппированных по типам ошибок
	ПротоколРасчета.Этапы.Колонки.Добавить("КоличествоДанных"); // количество данных для замера производительности
	ПротоколРасчета.Этапы.Колонки.Добавить("ДополнительнаяИнформация"); // массив произвольных строк
	
	// Добавим протокол в общие параметры расчета.
	ПараметрыРасчета.Вставить("ПротоколРасчета", ПротоколРасчета);
	
	// Добавим параметры замера производительности в общие параметры расчета.
	НачатьЗамерВремени(ПараметрыРасчета);
	
КонецПроцедуры

// Завершает ведение протокола и формирует текстовый протокол расчета.
//
Процедура ОкончаниеРасчета(ПараметрыРасчета) Экспорт
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	// Если не было явного объявления конца предыдущего этапа расчета, то закроем его в связи с окончание расчета.
	ОкончаниеЭтапаРасчета(ПараметрыРасчета);
	
	ПротоколРасчета.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПротоколРасчета.Длительность   = ПредставлениеВремениВыполнения(ПротоколРасчета);
	
	// Определим наличие ошибок при расчете.
	БылиОшибки 		   = (ПротоколРасчета.ОшибкиРасчета.Количество() > 0);
	БылиОшибкиДвижений = (ПротоколРасчета.ОшибкиДвижений.Количество() > 0); // проблемы с Регистратором
	БылиОшибкиЗаписи   = (ПротоколРасчета.ОшибкиЗаписи.Количество() > 0);   // проблемы записи движений
	
	// Сформируем текст протокола.
	Протокол = Новый ТекстовыйДокумент;
	
#Область ЗаголовокПротокола
	
	Если БылиОшибки Тогда
		
		Протокол.ДобавитьСтроку(НСтр("ru='ВНИМАНИЕ !'"));
		Протокол.ДобавитьСтроку(ПредставлениеОшибокРасчета(
			ПротоколРасчета,
			НСтр("ru='В ходе расчета были диагностированы ошибки:'"),
			Символы.ПС + "	- "));
		Протокол.ДобавитьСтроку(НСтр("ru='Подробное описание ошибок можно найти (Ctrl-F) в тексте протокола по символу ""!"".'"));
		
		Если БылиОшибкиДвижений ИЛИ БылиОшибкиЗаписи Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Расчет завершился аварийно.'"));
		КонецЕсли;
		
		Протокол.ДобавитьСтроку("");
		
	КонецЕсли;
	
	Протокол.ДобавитьСтроку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Протокол расчета (идентификатор %1)'"),
		ПротоколРасчета.Идентификатор));
	Протокол.ДобавитьСтроку(НСтр("ru='Конфигурация:'") + " " + ПредставлениеЗначения(Метаданные.Имя)
		+ ", " + НСтр("ru='версия:'") + " " + ПредставлениеЗначения(Метаданные.Версия));
	Протокол.ДобавитьСтроку(НСтр("ru='Информационная база:'") + " " 
		+ ПредставлениеЗначения(ПараметрыРасчета.СтрокаСоединенияИБ));
	Протокол.ДобавитьСтроку(НСтр("ru='Начало расчета:'") + " " + ПредставлениеЗначения(ПротоколРасчета.ДатаНачала)
		+ ", " + НСтр("ru='длительность:'") + " " + ПредставлениеЗначения(ПротоколРасчета.Длительность));
	Протокол.ДобавитьСтроку(НСтр("ru='Место вызова расчета:'") + " " 
		+ ПредставлениеЗначения(ПараметрыРасчета.МестоВызоваРасчета));
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(НСтр("ru='Вариант расчета:'") + " " 
		+ ПредставлениеЗначения(ПараметрыРасчета.ВариантРасчета));
	Протокол.ДобавитьСтроку(НСтр("ru='Период расчета:'") + " "
		+ ПредставлениеПериодаРасчета(ПараметрыРасчета));
	
	Если ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость Тогда
		ОрганизацииДляПротокола = ПараметрыРасчета.МассивОрганизаций;
	Иначе		
		ОрганизацииДляПротокола = ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости;
	КонецЕсли;
	
	Протокол.ДобавитьСтроку(НСтр("ru='Организации для расчета:'"));
	Для Каждого ТекущаяОрганизация Из ОрганизацииДляПротокола Цикл
		Протокол.ДобавитьСтроку("	- "	+ ПредставлениеЗначения(ТекущаяОрганизация)
			+ ", " + НСтр("ru='метод оценки стоимости:'") + " " 
			+ ПредставлениеЗначения(ПараметрыРасчета.МетодыОценкиСтоимости[ТекущаяОрганизация]));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ИзмененоДокументов) Тогда
		Протокол.ДобавитьСтроку(НСтр("ru='Изменено документов в ИБ после прошлого расчета:'") + " "
			+ ПредставлениеЗначения(ПараметрыРасчета.ИзмененоДокументов));
	КонецЕсли;
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(РазделительЧастейПротокола());
	Протокол.ДобавитьСтроку(НСтр("ru='Функциональные опции, влияющие на результат расчета:'"));
	
	Для Каждого ТекущаяФО Из ПараметрыРасчета.ФО Цикл
		ОписаниеФО = УниверсальныеМеханизмыПартийИСебестоимости.ОписаниеКонстантыИлиФункциональнойОпции(ТекущаяФО.Ключ);
		Протокол.ДобавитьСтроку("	- " + ОписаниеФО.Метаданные.Представление() + ": "	+ ПредставлениеЗначения(ТекущаяФО.Значение, Истина));
	КонецЦикла;
	
	// Выведем технологические параметры расчета.
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(РазделительЧастейПротокола());
	Протокол.ДобавитьСтроку("Технологические параметры расчета:");
	Протокол.ДобавитьСтроку("");
	
	ОписаниеПараметров 		= УниверсальныеМеханизмыПартийИСебестоимости.ОписаниеПараметровОперацииЗакрытияМесяца();
	ОписаниеГруппПараметров = УниверсальныеМеханизмыПартийИСебестоимости.ОписаниеГруппПараметровОперацииЗакрытияМесяца();
	ЗначенияПараметров 		= Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().УстановленныеЗначенияПараметровОперации(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
		
	Для Каждого ТекущаяГруппа Из ОписаниеГруппПараметров Цикл
		
		Протокол.ДобавитьСтроку("	" + ТекущаяГруппа.Наименование + ":");
		
		ПараметрыГруппы = ОписаниеПараметров.НайтиСтроки(Новый Структура("Родитель", ТекущаяГруппа.Имя));
		
		Для Каждого ТекущийПараметр Из ПараметрыГруппы Цикл
			
			ТекущееЗначениеПараметра = ЗначенияПараметров[ТекущийПараметр.Имя];
			
			Если ТекущееЗначениеПараметра <> ТекущийПараметр.ЗначениеПоУмолчанию Тогда
				ДополнениеКОписанию = "; (" + НСтр("ru='значение по умолчанию'") + ": "
					+ ПредставлениеЗначения(ТекущийПараметр.ЗначениеПоУмолчанию) + ")";
			Иначе
				ДополнениеКОписанию = "";
			КонецЕсли;
			
			Протокол.ДобавитьСтроку("		- " + ТекущийПараметр.Наименование + ": "
				+ ПредставлениеЗначения(ТекущееЗначениеПараметра) + ДополнениеКОписанию);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Выведем информацию об обслуживаемых регистрах.
	Если ПараметрыРасчета.Свойство("Движения") Тогда
		
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку(РазделительЧастейПротокола());
		Протокол.ДобавитьСтроку(НСтр("ru='Обслуживаемые регистры:'"));
		
		Для Каждого ОписаниеРегистра Из ПараметрыРасчета.Движения Цикл
			Протокол.ДобавитьСтроку("	- " + ОписаниеРегистра.Значение.ПолноеИмяРегистра
				+ ?(ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.Ключ),
					" (" + НСтр("ru='кэш оборотов'") + ")", "")
				+ ?(ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.Ключ),
					" (" + НСтр("ru='кэш остатков'") + ")", ""));
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти

#Область ЭтапыРасчета
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(РазделительЧастейПротокола());
	Протокол.ДобавитьСтроку(НСтр("ru='Протокол выполнения этапов расчета:'"));
	
	Счетчик = 0;
	
	Для Каждого ОписаниеЭтапа Из ПротоколРасчета.Этапы Цикл
		
		Счетчик = Счетчик + 1;
		
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку(СокрЛП(Счетчик) + ". " + ОписаниеЭтапа.ПредставлениеЭтапа); // УровеньЭтапа пока не поддерживаем
		Протокол.ДобавитьСтроку(НСтр("ru='Начало этапа:'") + " " + ПредставлениеЗначения(ОписаниеЭтапа.ДатаНачала)
			+ ", " + НСтр("ru='длительность:'") + " " + ПредставлениеВремениВыполнения(ОписаниеЭтапа, ПротоколРасчета));
		
		Если ЗначениеЗаполнено(ОписаниеЭтапа.СформированныеДвижения) Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Сформированы движения по регистрам (всего / уникальных):'"));
			Для Каждого ОписаниеДвижений Из ОписаниеЭтапа.СформированныеДвижения Цикл
				Протокол.ДобавитьСтроку("	- " + ОписаниеДвижений.Ключ + ": "
					+ ПредставлениеЗначения(ОписаниеДвижений.Значение.Всего) + " / "
					+ ПредставлениеЗначения(ОписаниеДвижений.Значение.Уникальных));
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеЭтапа.ВременныеТаблицы) Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Сформированы временные таблицы (размер / время (% времени этапа) / уточнение / исходные таблицы):'"));
			Для Каждого ОписаниеТаблицы Из ОписаниеЭтапа.ВременныеТаблицы Цикл
				Протокол.ДобавитьСтроку("	- " + ОписаниеТаблицы.Ключ + ": ");
				Для Каждого ОписаниеДействия Из ОписаниеТаблицы.Значение Цикл
					Протокол.ДобавитьСтроку("		- "
						+ ПредставлениеЗначения(ОписаниеДействия.КоличествоСтрок)
						+ " / " + ПредставлениеВремениВыполнения(ОписаниеДействия, ОписаниеЭтапа)
						+ ?(НЕ ЗначениеЗаполнено(ОписаниеДействия.Пояснение), "",
							" / " + ПредставлениеЗначения(ОписаниеДействия.Пояснение))
						+ ?(НЕ ЗначениеЗаполнено(ОписаниеДействия.ИсходныеДанные), "",
							" / " + ПредставлениеЗначения(ОписаниеДействия.ИсходныеДанные)));
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеЭтапа.ДополнительнаяИнформация) Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Дополнительная информация об этапе:'"));
			Для Каждого ОписаниеСведений Из ОписаниеЭтапа.ДополнительнаяИнформация Цикл
				Протокол.ДобавитьСтроку(ПредставлениеМногострочногоТекста(ОписаниеСведений, "	- "));
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеЭтапа.ИнформацияОбОшибках) Тогда
			ВывестиИнформациюОбОшибках(
				ПараметрыРасчета,
				Протокол,
				ОписаниеЭтапа.ИнформацияОбОшибках,
				НСтр("ru='При выполнении этапа расчета обнаружены ошибки'"),
				ОписаниеЭтапа.ПредставлениеЭтапа);
		КонецЕсли;
		
	КонецЦикла;
	
#КонецОбласти
	
#Область ИтоговыеПоказатели
	
	// Длительность этапов
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(РазделительЧастейПротокола());
	Протокол.ДобавитьСтроку(НСтр("ru='Итоговая информация о длительности этапов (абсолютная (относительная)):'"));
		
	Счетчик = 0;
	
	Для Каждого ОписаниеЭтапа Из ПротоколРасчета.Этапы Цикл
		
		Счетчик = Счетчик + 1;
		
		Протокол.ДобавитьСтроку("	" + СокрЛП(Счетчик) + ". " + ОписаниеЭтапа.ПредставлениеЭтапа + ": "
			+ ПредставлениеВремениВыполнения(ОписаниеЭтапа, ПротоколРасчета));
		
	КонецЦикла;
	
	// Сформированные движения
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(РазделительЧастейПротокола());
	Протокол.ДобавитьСтроку(НСтр("ru='Итоговая информация о сформированных движениях по регистрам (всего / уникальных):'"));
	
	Если ЗначениеЗаполнено(ПротоколРасчета.СформированныеДвижения) Тогда
		Для Каждого ОписаниеДвижений Из ПротоколРасчета.СформированныеДвижения Цикл
			
			Протокол.ДобавитьСтроку("	- " + ОписаниеДвижений.Ключ + ": "
				+ ПредставлениеЗначения(ОписаниеДвижений.Значение.Всего) + " / "
				+ ПредставлениеЗначения(ОписаниеДвижений.Значение.Уникальных));
			
			Если ОписаниеДвижений.Значение.Ошибочных > 0 Тогда
				
				Протокол.ДобавитьСтроку("		- " + НСтр("ru='в т.ч. ошибочных:'") + " "
					+ ПредставлениеЗначения(ОписаниеДвижений.Значение.Ошибочных) + " !");
				
				// Выведем описание ошибок сформированных движений в разрезе регистраторов
				Для Каждого ОписаниеОшибки Из ОписаниеДвижений.Значение.ОшибкиРегистраторов Цикл
					
					Протокол.ДобавитьСтроку("		" + ПредставлениеЗначения(ОписаниеОшибки.Ключ) + ":");
					
					Для Каждого ТекущийРегистратор Из ОписаниеОшибки.Значение Цикл
						Протокол.ДобавитьСтроку("			- "	+ ПредставлениеЗначения(ТекущийРегистратор));
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Протокол.ДобавитьСтроку(НСтр("ru='Нет сформированных движений.'"));
	КонецЕсли;
	
	// Выведем информацию об ошибках регистраторов
	Если БылиОшибкиДвижений Тогда
		ВывестиИнформациюОбОшибках(
			ПараметрыРасчета,
			Протокол,
			ПротоколРасчета.ОшибкиДвижений,
			НСтр("ru='Формирование движений выполнено с ошибками'"));
	КонецЕсли;
	
	// Записанные движения
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(РазделительЧастейПротокола());
	Протокол.ДобавитьСтроку(НСтр("ru='Итоговая информация о записанных движениях по регистрам (документов / записей):'")); // количество записей - с учетом "первичных"
	
	КоличествоДокументов 	= 0;
	КоличествоЗаписей		= 0;
	
	Если ПараметрыРасчета.ОбщееКоличествоФЗЗаписи > 0 Тогда
		
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку(НСтр("ru='Всего запущено фоновых заданий записи движений:'") + " "
			+ ПредставлениеЗначения(ПараметрыРасчета.ОбщееКоличествоФЗЗаписи));
		
	КонецЕсли;
	
	Если НЕ БылиОшибкиЗаписи Тогда
		
		Если ЗначениеЗаполнено(ПротоколРасчета.СформированныеДвижения)
		 И ПротоколРасчета.ЗаписьДвижений.Свойство("СформированныеДвижения") Тогда
			
			Для Каждого ОписаниеДвижений Из ПротоколРасчета.ЗаписьДвижений.СформированныеДвижения Цикл
				Если ОписаниеДвижений.Значение.КоличествоЗаписей > 0 Тогда
					
					КоличествоДокументов = КоличествоДокументов + ОписаниеДвижений.Значение.КоличествоДокументов;
					КоличествоЗаписей    = КоличествоЗаписей + ОписаниеДвижений.Значение.КоличествоЗаписей;
					
					Протокол.ДобавитьСтроку("	- " + ОписаниеДвижений.Ключ + ": "
						+ ПредставлениеЗначения(ОписаниеДвижений.Значение.КоличествоДокументов) + " / "
						+ ПредставлениеЗначения(ОписаниеДвижений.Значение.КоличествоЗаписей));
					
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоЗаписей > 0 Тогда
				Протокол.ДобавитьСтроку(НСтр("ru='Всего записано движений по регистрам:'") + " "
					+ ПредставлениеЗначения(КоличествоДокументов) + " / "
					+ ПредставлениеЗначения(КоличествоЗаписей));
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоЗаписей = 0 Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Запись движений не выполнялась - нет измененных движений.'"));
		КонецЕсли;
		
	Иначе
		ВывестиИнформациюОбОшибках(
			ПараметрыРасчета,
			Протокол,
			ПротоколРасчета.ОшибкиЗаписи,
			НСтр("ru='Запись движений выполнена с ошибками'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПротоколРасчета.ЗаписьДвижений) Тогда
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку(НСтр("ru='Длительность операций записи:'") + " "
			+ ПредставлениеВремениВыполнения(ПротоколРасчета.ЗаписьДвижений, ПротоколРасчета));
	КонецЕсли;
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(РазделительЧастейПротокола());
	
#КонецОбласти

#Область СохранениеПротоколаРасчета

	ТекстПротокола = Протокол.ПолучитьТекст();
	
	ТекстПротокола = СтрЗаменить(ТекстПротокола, УниверсальныеМеханизмыПартийИСебестоимости.СлужебныйСимвол_ТекстДляРегистрацииПроблемы(), "");
	ТекстПротокола = СтрЗаменить(ТекстПротокола, УниверсальныеМеханизмыПартийИСебестоимости.СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), "");
	
	Протокол.УстановитьТекст(ТекстПротокола);
	
	// Запишем протокол в журнал регистрации
	ЗаписьЖурналаРегистрации(
		УниверсальныеМеханизмыПартийИСебестоимости.ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ТекстПротокола);
		
	// Запишем протокол в регистр сведений
	ЗаписьПротокола = РегистрыСведений.ПротоколыРасчетаПартийИСебестоимости.СоздатьМенеджерЗаписи();
	
	ЗаписьПротокола.Период 					 = ТекущаяДатаСеанса();
	ЗаписьПротокола.Идентификатор 			 = ПротоколРасчета.Идентификатор;
	
	ЗаписьПротокола.Протокол 				 = Новый ХранилищеЗначения(Протокол, Новый СжатиеДанных(9));
	
	ЗаписьПротокола.ДлительностьРасчета 	 = ПротоколРасчета.Длительность;
	ЗаписьПротокола.ВариантРасчета 			 = ПараметрыРасчета.ВариантРасчета;
	ЗаписьПротокола.ПериодРасчета 			 = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
	ЗаписьПротокола.БылиОшибки 				 = БылиОшибки;
	ЗаписьПротокола.ОписаниеОшибок 			 = ПредставлениеОшибокРасчета(ПротоколРасчета);
	ЗаписьПротокола.ПредставлениеОрганизаций =
		УниверсальныеМеханизмыПартийИСебестоимости.ПредставлениеОрганизаций(ПараметрыРасчета.МассивОрганизаций, ", ");
	
	ЗаписьПротокола.Записать(Истина);
	
#КонецОбласти

#Область СохранениеОшибокРасчета
	
	// В регистр ошибок расчета записывается информация только о тех вариантах расчета,
	// которые влияют на определение состояния закрытия месяца в части расчета партий/себестоимости.
	
	ВариантРасчета = Неопределено;
	
	Если ПараметрыРасчета.ПартионныйУчетВерсии22 Тогда // партионный учет версии 2.2
		Если ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость
		 ИЛИ ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ФактическаяСебестоимость Тогда
			ВариантРасчета = ПараметрыРасчета.ВариантРасчета;
		КонецЕсли;
	Иначе // партионный учет версии 2.1 (или вообще не используется)
		Если ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ФактическаяСебестоимость Тогда
			ВариантРасчета = ПараметрыРасчета.ВариантРасчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантРасчета) Тогда		
		
		// Создадим записи в регистр ошибок по каждой организации/ошибке.
		// При этом необходимо очистить все предыдущие ошибки по данному периоду и организации.
		
		Для Каждого ТекущаяОрганизация Из ПараметрыРасчета.МассивОрганизаций Цикл
			
			ЗаписиОшибок = РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.СоздатьНаборЗаписей();
			
			ЗаписиОшибок.Отбор.Период.Установить(ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
			ЗаписиОшибок.Отбор.Организация.Установить(ТекущаяОрганизация);
			
			ЕстьОшибкиВХодеРасчета = Ложь;
			
			Для Каждого ТекущаяОшибка Из ПротоколРасчета.ОшибкиРасчета Цикл
				
				ЗаписьОшибки = ЗаписиОшибок.Добавить();
				
				ЗаписьОшибки.Период 	 			= ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
				ЗаписьОшибки.Организация 			= ТекущаяОрганизация;
				ЗаписьОшибки.ВариантРасчета	 		= ВариантРасчета;
				ЗаписьОшибки.ТипОшибки				= ТекущаяОшибка.Ключ;
				ЗаписьОшибки.ИдентификаторПротокола	= ПротоколРасчета.Идентификатор;
				
				Если ЗаписьОшибки.ТипОшибки <> Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВИсходныхДанныхДляРасчета
				 И ЗаписьОшибки.ТипОшибки <> Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВОстаткахПослеРасчета Тогда
					ЕстьОшибкиВХодеРасчета = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаписиОшибок.Записать(Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти
	
	ЗакончитьЗамерВремени(ПараметрыРасчета);
	
	ПараметрыРасчета.Удалить("ПротоколРасчета");
	
	Если БылиОшибкиДвижений ИЛИ БылиОшибкиЗаписи Тогда
		// Движения сформированы/записаны некорректно - расчет не выполнен
		ВызватьИсключение НСтр("ru='Расчет себестоимости завершился аварийно.
								|Подробнее см. в Журнале регистрации'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет, была ли выполнена инициализация протокола.
//
Функция ВедетсяПротоколРасчета(ПараметрыРасчета) Экспорт
	
	Возврат ЗначениеЗаполнено(ПараметрыРасчета) И ПараметрыРасчета.Свойство("ПротоколРасчета");
	
КонецФункции

// Возвращает идентификатор протокола в регистре сведений ПротоколыРасчетаПартийИСебестоимости.
//
Функция ИдентификаторПротокола(ПараметрыРасчета) Экспорт
	Возврат ПараметрыРасчета.ПротоколРасчета.Идентификатор;
КонецФункции

#КонецОбласти

#Область ПротоколированиеЭтаповРасчета

// Протоколирует начало этапа расчета.
//
Процедура НачалоЭтапаРасчета(ПараметрыРасчета, ПредставлениеЭтапа, УровеньЭтапа = 1) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета) Тогда
		Возврат; // параметры расчета еще не инициализированы
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("ПредставлениеЭтапа", ПредставлениеЭтапа);
	
	Если НЕ ВедетсяПротоколРасчета(ПараметрыРасчета) Тогда
		НачалоРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	// Если не было явного объявления конца предыдущего этапа расчета, то закроем его в связи с началом нового этапа
	ОкончаниеЭтапаРасчета(ПараметрыРасчета);
	
	ПолноеПредставлениеЭтапа =
		?(ПараметрыРасчета.ИдетРасчетПартий, НСтр("ru='Партионный учет'"), НСтр("ru='Расчет себестоимости'"))
		+ ": " + ПредставлениеЭтапа;
	
	Если УровеньЭтапа = 1 Тогда
		// Сделаем запись о начале этапа в ЖР
		ОтметкаВЖурналеРегистрации(ПараметрыРасчета, ПолноеПредставлениеЭтапа);
	КонецЕсли;
	
	ОписаниеЭтапа = ПротоколРасчета.Этапы.Добавить();
	
	ОписаниеЭтапа.ПредставлениеЭтапа 	 	= ПолноеПредставлениеЭтапа;
	ОписаниеЭтапа.УровеньЭтапа 			 	= УровеньЭтапа;
	ОписаниеЭтапа.ДатаНачала 	 		 	= ТекущаяДатаСеанса();
	ОписаниеЭтапа.ВремяНачала 	 		 	= ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеЭтапа.СформированныеДвижения 	= Новый Структура;
	ОписаниеЭтапа.ВременныеТаблицы 		 	= Новый Структура;
	ОписаниеЭтапа.ИнформацияОбОшибках 		= Новый Соответствие;
	ОписаниеЭтапа.КоличествоДанных			= 0;
	ОписаниеЭтапа.ДополнительнаяИнформация 	= Новый Массив;
	
КонецПроцедуры

// Протоколирует окончание этапа расчета.
// Можно не вызывать явно - вызывается при начале следующего этапа.
//
Процедура ОкончаниеЭтапаРасчета(ПараметрыРасчета) Экспорт
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	ОписаниеЭтапа 	= ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеЭтапа) // еще не начали протоколирование расчета
	 ИЛИ ЗначениеЗаполнено(ОписаниеЭтапа.ВремяОкончания) Тогда // протокол этапа уже сформирован
		Возврат;
	КонецЕсли;
	
	ОписаниеЭтапа.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для Каждого ОписаниеДвижения Из ОписаниеЭтапа.СформированныеДвижения Цикл
		
		Если НЕ ПротоколРасчета.СформированныеДвижения.Свойство(ОписаниеДвижения.Ключ) Тогда
			ОчисткаСформированныхДвижений(ПараметрыРасчета, ОписаниеДвижения.Ключ); // инициализирует счетчики движений
		КонецЕсли;
		
		// Подсчитаем количество уникальных движений, сформированных на текущем этапе
		ВсегоДвижений = УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэш" + ОписаниеДвижения.Ключ);
		ОписаниеЭтапа.СформированныеДвижения[ОписаниеДвижения.Ключ].Уникальных =
			ВсегоДвижений - ПротоколРасчета.СформированныеДвижения[ОписаниеДвижения.Ключ].Уникальных;
		
		// Пересчитаем общее количество сформированных движений
		ПротоколРасчета.СформированныеДвижения[ОписаниеДвижения.Ключ].Всего = 
			ПротоколРасчета.СформированныеДвижения[ОписаниеДвижения.Ключ].Всего + ОписаниеДвижения.Значение.Всего;
		ПротоколРасчета.СформированныеДвижения[ОписаниеДвижения.Ключ].Уникальных = ВсегоДвижений;
		
	КонецЦикла;
	
	// Зафиксируем данные замера производительности.
	ЗафиксироватьЗамерВремени(ПараметрыРасчета);
	
КонецПроцедуры

// Возвращает описание текущего этапа.
//
Функция ОписаниеТекущегоЭтапа(ПараметрыРасчета)
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	Если ПротоколРасчета.Этапы.Количество() = 0 Тогда
		ОписаниеТекущегоЭтапа = Неопределено;
	Иначе
		ОписаниеТекущегоЭтапа = ПротоколРасчета.Этапы[ПротоколРасчета.Этапы.Количество()-1];
	КонецЕсли;
	
	Возврат ОписаниеТекущегоЭтапа;
	
КонецФункции

// Возвращает текстовое описание текущего этапа.
//
Функция ПредставлениеТекущегоЭтапа(ПараметрыРасчета) Экспорт
	
	Описание = ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	Если НЕ ЗначениеЗаполнено(Описание) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Описание.ПредставлениеЭтапа;
	
КонецФункции

#КонецОбласти

#Область ПротоколированиеВременныхТаблиц

// Протоколирует начало формирования временной таблицы (внутри этапа расчета).
//
Процедура НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, ИмяВременнойТаблицы, Пояснение = "", ИменаИсходныхТаблиц = "") Экспорт
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	ОписаниеВременнойТаблицы = Новый Структура;
	ОписаниеВременнойТаблицы.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ОписаниеВременнойТаблицы.Вставить("ВремяНачала", 		 ТекущаяУниверсальнаяДатаВМиллисекундах());
	ОписаниеВременнойТаблицы.Вставить("Пояснение", 			 Пояснение);
	ОписаниеВременнойТаблицы.Вставить("ИсходныеДанные", 	 "");
	
	Если ЗначениеЗаполнено(ИменаИсходныхТаблиц) Тогда
		
		ТекстИсходныеДанные = "";
		
		Для Каждого КлючИЗначение Из Новый Структура(ИменаИсходныхТаблиц) Цикл
			ТекстИсходныеДанные =
				ТекстИсходныеДанные + ?(ТекстИсходныеДанные = "", "", ", ")
				+ КлючИЗначение.Ключ + " ("
				+ ПредставлениеЗначения(
					УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, КлючИЗначение.Ключ)) + ")";
		КонецЦикла;
		
		ОписаниеВременнойТаблицы.ИсходныеДанные = ТекстИсходныеДанные;
		
	КонецЕсли;
	
	ПротоколРасчета.Вставить("ФормированиеВременнойТаблицы", ОписаниеВременнойТаблицы);
	
КонецПроцедуры

// Протоколирует окончание формирования временной таблицы (внутри этапа расчета).
//
Процедура ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета) Экспорт
	
	ПротоколРасчета 	= ПараметрыРасчета.ПротоколРасчета;
	ОписаниеЭтапа 		= ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	ИмяВременнойТаблицы = ПротоколРасчета.ФормированиеВременнойТаблицы.ИмяВременнойТаблицы;
	
	Если НЕ ОписаниеЭтапа.ВременныеТаблицы.Свойство(ИмяВременнойТаблицы) Тогда
		ОписаниеЭтапа.ВременныеТаблицы.Вставить(ИмяВременнойТаблицы, Новый Массив);
	КонецЕсли;
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы) Тогда
		КоличествоСтрок = УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, ИмяВременнойТаблицы);
	Иначе
		КоличествоСтрок = 0;
	КонецЕсли;
	
	ОписаниеВременнойТаблицы = Новый Структура;
	ОписаниеВременнойТаблицы.Вставить("КоличествоСтрок", КоличествоСтрок);
	ОписаниеВременнойТаблицы.Вставить("ВремяНачала", 	 ПротоколРасчета.ФормированиеВременнойТаблицы.ВремяНачала);
	ОписаниеВременнойТаблицы.Вставить("ВремяОкончания",  ТекущаяУниверсальнаяДатаВМиллисекундах());
	ОписаниеВременнойТаблицы.Вставить("Пояснение", 		 ПротоколРасчета.ФормированиеВременнойТаблицы.Пояснение);
	ОписаниеВременнойТаблицы.Вставить("ИсходныеДанные",  ПротоколРасчета.ФормированиеВременнойТаблицы.ИсходныеДанные);
	
	ОписаниеЭтапа.ВременныеТаблицы[ИмяВременнойТаблицы].Добавить(ОписаниеВременнойТаблицы);
	
	ПротоколРасчета.Удалить("ФормированиеВременнойТаблицы");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, КоличествоСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколированиеДвижений

// Протоколирует начало записи сформированных движений.
//
Процедура НачалоЗаписиДвижений(ПараметрыРасчета) Экспорт
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	ЗаписьДвижений	= ПротоколРасчета.ЗаписьДвижений;
	
	// Если не было явного объявления конца предыдущего этапа расчета, то закроем его в связи с началом нового этапа
	ОкончаниеЭтапаРасчета(ПараметрыРасчета);
	
	НачалоЭтапаРасчета(ПараметрыРасчета, "ЗаписатьСформированныеДвижения");
	
	ЗаписьДвижений.Вставить("ВремяНачала", 			  ТекущаяУниверсальнаяДатаВМиллисекундах());
	ЗаписьДвижений.Вставить("СформированныеДвижения", Новый Структура);
	
КонецПроцедуры

// Протоколирует окончание записи сформированных движений.
//
Процедура ОкончаниеЗаписиДвижений(ПараметрыРасчета) Экспорт
	
	ЗаписьДвижений = ПараметрыРасчета.ПротоколРасчета.ЗаписьДвижений;
	
	ЗаписьДвижений.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	
КонецПроцедуры

// Протоколирует количественные показатели кэширования сформированных движений.
//
Процедура КэшированиеСформированныхДвижений(ПараметрыРасчета, ИмяРегистра, КоличествоСтрокТаблицыЗначений) Экспорт
	
	ОписаниеЭтапа = ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	Если НЕ ОписаниеЭтапа.СформированныеДвижения.Свойство(ИмяРегистра) Тогда
		ОписаниеЭтапа.СформированныеДвижения.Вставить(
			ИмяРегистра,
			Новый Структура("Всего, Уникальных", КоличествоСтрокТаблицыЗначений, 0)); //в таблице значений и во временной таблице (свернутые записи)
	Иначе
		ОписаниеЭтапа.СформированныеДвижения[ИмяРегистра].Всего =
			ОписаниеЭтапа.СформированныеДвижения[ИмяРегистра].Всего + КоличествоСтрокТаблицыЗначений;
	КонецЕсли;
	
КонецПроцедуры

// Протоколирует количественные показатели записи сформированных движений.
//
Процедура ЗаписьСформированныхДвижений(ПараметрыРасчета, ИмяРегистра, КоличествоДокументов = 0, КоличествоЗаписей = 0) Экспорт
	
	ЗаписьДвижений	= ПараметрыРасчета.ПротоколРасчета.ЗаписьДвижений;
	
	Если НЕ ЗаписьДвижений.СформированныеДвижения.Свойство(ИмяРегистра) Тогда
		ЗаписьДвижений.СформированныеДвижения.Вставить(
			ИмяРегистра,
			Новый Структура("КоличествоДокументов, КоличествоЗаписей", КоличествоДокументов, КоличествоЗаписей));
	Иначе
		ЗаписьДвижений.СформированныеДвижения[ИмяРегистра].КоличествоДокументов =
			ЗаписьДвижений.СформированныеДвижения[ИмяРегистра].КоличествоДокументов + КоличествоДокументов;
		ЗаписьДвижений.СформированныеДвижения[ИмяРегистра].КоличествоЗаписей =
			ЗаписьДвижений.СформированныеДвижения[ИмяРегистра].КоличествоЗаписей + КоличествоЗаписей;
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует в протоколе расчета наличие ошибок в сформированных движениях.
//
Процедура ЗафиксироватьОшибкиВСформированныхДвижениях(ПараметрыРасчета, ОписаниеРегистра, ИмяТаблицы, ОписаниеОшибки) Экспорт
	
	РезультатЗапроса = УниверсальныеМеханизмыПартийИСебестоимости.ВыбратьМоментыВремениРегистраторов(ПараметрыРасчета, ИмяТаблицы);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // нет некорректных движений
	КонецЕсли;
	
	ПротоколРасчета  = ПараметрыРасчета.ПротоколРасчета;
	ОписаниеДвижений = ПротоколРасчета.СформированныеДвижения[ОписаниеРегистра.ИмяРегистра];
	
	ТаблицаРегистраторы = РезультатЗапроса.Выгрузить();
	
	Регистраторы = ТаблицаРегистраторы.Скопировать(, "Регистратор");
	Регистраторы.Свернуть("Регистратор", "");
	Регистраторы = Регистраторы.ВыгрузитьКолонку("Регистратор");
	
	ОписаниеДвижений.ОшибкиРегистраторов.Вставить(ОписаниеОшибки, Регистраторы);
	ОписаниеДвижений.Ошибочных = ОписаниеДвижений.Ошибочных + Регистраторы.Количество();
	
	ЗафиксироватьОшибкуРасчета(
		ПараметрыРасчета,
		Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам);
		
	Для Каждого ТекСтр Из ТаблицаРегистраторы Цикл
		
		УниверсальныеМеханизмыПартийИСебестоимости.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			ТекСтр.Организация,
			НСтр("ru='При формировании движений диагностированы ошибки'"),
			ОписаниеОшибки + ": " + СокрЛП(ТекСтр.Регистратор),
			ТекСтр.Регистратор);
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает счетчики сформированных в случае, когда кэш регистра очищается и движения формируются заново.
//
Процедура ОчисткаСформированныхДвижений(ПараметрыРасчета, ИмяРегистра) Экспорт
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	ОписаниеДвижений = Новый Структура;
	ОписаниеДвижений.Вставить("Всего", 				 0);
	ОписаниеДвижений.Вставить("Уникальных", 		 0);
	ОписаниеДвижений.Вставить("Ошибочных", 			 0);
	ОписаниеДвижений.Вставить("ОшибкиРегистраторов", Новый Соответствие);
	
	ПротоколРасчета.СформированныеДвижения.Вставить(ИмяРегистра, ОписаниеДвижений);
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколированиеДополнительнойИнформации

// Добавляет в протокол произвольный текст (внутри этапа расчета).
//
Процедура ДополнительнаяИнформация(ПараметрыРасчета, ТекстовоеОписание) Экспорт
	
	ПротоколРасчета	= ПараметрыРасчета.ПротоколРасчета;
	ОписаниеЭтапа	= ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	ОписаниеЭтапа.ДополнительнаяИнформация.Добавить(ТекстовоеОписание);
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколированиеОшибокРасчета

// Добавляет в протокол информацию об ошибке расчета.
//
Процедура ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, ТипОшибки,
			ТекстДляПротокола = Неопределено, ТекстДляЖурналаРегистрации = Неопределено,
			МассивОрганизаций = Неопределено) Экспорт
	
	Если ВедетсяПротоколРасчета(ПараметрыРасчета) Тогда
		
		ПротоколРасчета	= ПараметрыРасчета.ПротоколРасчета;
		
		ТекстДляПротоколаФорматированный = ПредставлениеТекстаОшибки(ТекстДляПротокола);
		
		КоличествоОшибок = ПротоколРасчета.ОшибкиРасчета[ТипОшибки];
		ПротоколРасчета.ОшибкиРасчета.Вставить(
			ТипОшибки,
			?(НЕ ЗначениеЗаполнено(КоличествоОшибок), 0, КоличествоОшибок) + 1);
		
		// Запишем описание ошибки в протокол.
		Если ТипОшибки = Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам
		 И ЗначениеЗаполнено(ТекстДляПротоколаФорматированный) Тогда
			
			// Т.к. ошибки этого типа выводятся не в этапе, а в конце протокола, то в тексте ошибки надо уточнить имя проблемного этапа.
			Если ПротоколРасчета.Этапы.Количество() > 0 Тогда
				ИмяЭтапа = ПротоколРасчета.Этапы[ПротоколРасчета.Этапы.Количество()-1].ПредставлениеЭтапа;
				ТекстДляПротоколаФорматированный = ТекстДляПротоколаФорматированный + " (" + ИмяЭтапа + ")";
			КонецЕсли;
			
			ПротоколРасчета.ОшибкиДвижений.Добавить(ТекстДляПротоколаФорматированный);
			
		ИначеЕсли ТипОшибки = Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам
		 И ЗначениеЗаполнено(ТекстДляПротоколаФорматированный) Тогда
			
			ПротоколРасчета.ОшибкиЗаписи.Добавить(ТекстДляПротоколаФорматированный);
			
		ИначеЕсли ЗначениеЗаполнено(ТекстДляПротоколаФорматированный) Тогда
			
			ОписаниеЭтапа = ОписаниеТекущегоЭтапа(ПараметрыРасчета);
			
			Если ОписаниеЭтапа.ИнформацияОбОшибках[ТипОшибки] = Неопределено Тогда
				ОписаниеЭтапа.ИнформацияОбОшибках.Вставить(ТипОшибки, Новый Массив);
			КонецЕсли;
			
			ОписаниеЭтапа.ИнформацияОбОшибках[ТипОшибки].Добавить(ТекстДляПротоколаФорматированный);
			
		КонецЕсли;		
		
	КонецЕсли;
	
	// Запишем описание ошибки в журнал регистрации.
	Если ЗначениеЗаполнено(ТекстДляЖурналаРегистрации) Тогда
		
		ЗаписьЖурналаРегистрации(
			УниверсальныеМеханизмыПартийИСебестоимости.ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПредставлениеТекстаОшибки(ТекстДляЖурналаРегистрации));
		
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти


#Область ЖурналРегистрации

// Делает запись в журнал регистрации о начале выполнения этапа.
//
Процедура ОтметкаВЖурналеРегистрации(ПараметрыРасчета, ПредставлениеЭтапа, Уровень = Неопределено, Комментарий = "")
	
	Если НЕ ЗначениеЗаполнено(Уровень) Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = НСтр("ru = 'Начало выполнения этапа.'");
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		УниверсальныеМеханизмыПартийИСебестоимости.ИмяСобытияЖурналаРегистрации(
			ПараметрыРасчета, НСтр("ru='Этап'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + "." + ПредставлениеЭтапа),
		Уровень,
		,
		,
		Комментарий);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеИВыводДанных

// Возвращает представление интервала времени (ВремяНачала, ВремяОкончания) и его % от общего времени расчета.
//
Функция ПредставлениеВремениВыполнения(ИсточникДанныхОВремени, ИсточникДанныхОбОбщемВремени = Неопределено)
	
	СтруктураДанныхОВремени = Новый Структура("ВремяНачала, ВремяОкончания");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхОВремени, ИсточникДанныхОВремени);
	
	Если ЗначениеЗаполнено(СтруктураДанныхОВремени.ВремяНачала) И ЗначениеЗаполнено(СтруктураДанныхОВремени.ВремяОкончания) Тогда
		Секунды = (СтруктураДанныхОВремени.ВремяОкончания - СтруктураДанныхОВремени.ВремяНачала) / 1000;
	Иначе
		Секунды = 0;
	КонецЕсли;
	
	ПредставлениеВремени = ПредставлениеВремени(Секунды);
	
	Если ИсточникДанныхОбОбщемВремени <> Неопределено Тогда
		
		СтруктураДанныхОВремени = Новый Структура("ВремяНачала, ВремяОкончания");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхОВремени, ИсточникДанныхОбОбщемВремени);
		
		Если ЗначениеЗаполнено(СтруктураДанныхОВремени.ВремяНачала) И ЗначениеЗаполнено(СтруктураДанныхОВремени.ВремяОкончания) Тогда
			ПроцентВремени = Окр(100*Секунды/((СтруктураДанныхОВремени.ВремяОкончания - СтруктураДанныхОВремени.ВремяНачала + 1) / 1000), 2);
			ПредставлениеВремени = ПредставлениеВремени + " (" + ПредставлениеЗначения(ПроцентВремени) + "%)";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СокрЛП(ПредставлениеВремени);
	
КонецФункции

// Возвращает представление месяца расчета.
//
Функция ПредставлениеПериодаРасчета(ПараметрыРасчетаИлиПериод) Экспорт
	
	Если ТипЗнч(ПараметрыРасчетаИлиПериод) = Тип("Структура") Тогда
		Дата = ПараметрыРасчетаИлиПериод.РасчетныйПериод.НачалоПериода;
	Иначе
		Дата = ПараметрыРасчетаИлиПериод;
	КонецЕсли;
	
	Возврат Формат(Дата, "ДФ='MMMM yyyy'");
	
КонецФункции

// Возвращает представление произвольного значения.
// При использовании этой функции все значения одинакового типа будут одинаковое форматирование.
//
Функция ПредставлениеЗначения(Значение, ПредставлениеДатыКакПериодРасчета = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Возврат Формат(Значение, "БЛ=Нет; БИ=Да");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда 
		
		Если Значение <> 0 И Значение > -0.001 И Значение < 0.001 Тогда
			
			// Представление малых чисел
			
			Степень 	  = 0;
			НовоеЗначение = Значение;
			
			Пока НовоеЗначение > -1 И НовоеЗначение < 1 Цикл
				Степень = Степень + 1;
				НовоеЗначение = НовоеЗначение * 10;
			КонецЦикла;
			
			Возврат СокрЛП(НовоеЗначение) + " * 10^-" + СокрЛП(Степень);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") И ПредставлениеДатыКакПериодРасчета Тогда 
		
		Возврат ПредставлениеПериодаРасчета(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров") Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат "<" + НСтр("ru='Не используется'") + ">";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ТипыЗаписейПартий") Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат "<" + НСтр("ru='Пустой тип записи партии'") + ">";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СокрЛП(Значение);
	
КонецФункции

// Возвращает представление времени в часах/минутах/секундах.
//
Функция ПредставлениеВремени(Значение) Экспорт
	
	Секунды = Значение;
	
	Часы = Цел(Секунды / 3600);
	Секунды = Секунды - Часы*3600;
	
	Минуты  = Цел(Секунды / 60);
	Секунды = Секунды - Минуты*60;
	
	ПредставлениеВремени = ""
		+ ?(Часы = 0, "", ПредставлениеЗначения(Часы) + " " + НСтр("ru='ч.'") + " ")
		+ ?(Минуты = 0, "", ПредставлениеЗначения(Минуты) + " " + НСтр("ru='мин.'") + " ")
		+ ПредставлениеЗначения(Секунды) + " " + НСтр("ru='сек.'");
	
	Возврат СокрЛП(ПредставлениеВремени);
	
КонецФункции

// Возвращает представление многострочного текста - добавляет отступы для каждой строки.
//
Функция ПредставлениеМногострочногоТекста(Значение, Знач ТекстФорматаАбзаца = "",
			НеВыводитьПустыеСтроки = Истина, УдалятьСтароеФорматирование = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеТекста = "";
	ТекстФорматаАбзаца  = СтрЗаменить(ТекстФорматаАбзаца, "	", "    "); // заменим табуляцию на пробелы
	ТекстОтступ			= Символы.ПС;
	
	Для НС = 1 По СтрДлина(ТекстФорматаАбзаца) Цикл
		ТекстОтступ = ТекстОтступ + " "; // отступ для 2й и следующих строк
	КонецЦикла;
	
	Для НС = 1 По СтрЧислоСтрок(Значение) Цикл
		
		Если УдалятьСтароеФорматирование Тогда
			ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(Значение, НС));
		Иначе
			ТекущаяСтрока = СтрПолучитьСтроку(Значение, НС);
		КонецЕсли;
		
		Если НеВыводитьПустыеСтроки И НЕ ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеТекста = ПредставлениеТекста
			+ ?(НЕ ЗначениеЗаполнено(ПредставлениеТекста), ТекстФорматаАбзаца, ТекстОтступ) + ТекущаяСтрока;
		
	КонецЦикла;
	
	Возврат ПредставлениеТекста;
	
КонецФункции

// Возвращает представление текста сообщения об ошибке.
//
Функция ПредставлениеТекстаОшибки(Значение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеТекста = "";
	ТекстОтступ 		= Символы.ПС;
	ТекстРазделитель 	= "}:";
	
	Для НС = 1 По СтрЧислоСтрок(Значение) Цикл
		
		ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(Значение, НС));
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(НРег(ТекущаяСтрока), НРег("ВызватьИсключение")) = 1
		 ИЛИ СтрНайти(НРег(ТекущаяСтрока), НРег("Raise")) = 1 Тогда
			Продолжить; // текущая строка лишняя, неинформативная - мы сами вызвали ошибку
		КонецЕсли;
		
		Если Лев(ТекущаяСтрока, СтрДлина(СлужебныйСимвол_МаркированныйСписок())) = СлужебныйСимвол_МаркированныйСписок() Тогда
			ТекстОтступ = Символы.ПС; // описание ошибки содержит список - очищаем форматирование для вывода очередного элемента списка
			ТекущаяСтрока = "- " + Сред(ТекущаяСтрока, 2);
		КонецЕсли;
		
		Пока ЗначениеЗаполнено(ТекущаяСтрока) И СтрНайти(ТекущаяСтрока, ТекстРазделитель) > 0 Цикл
			
			ТекущаяПодстрока = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, ТекстРазделитель) + СтрДлина(ТекстРазделитель) - 1); // место ошибки в коде
			ТекущаяСтрока 	 = СокрЛП(Сред(ТекущаяСтрока, СтрДлина(ТекущаяПодстрока) + 1)); // остаток строки
			
			ПредставлениеТекста = ПредставлениеТекста
				+ ?(НЕ ЗначениеЗаполнено(ПредставлениеТекста), "", ТекстОтступ) + ТекущаяПодстрока; // левая часть текущей строки
			
			ТекстОтступ = ТекстОтступ + "    "; // увеличим отступ остального текста ошибки
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ПредставлениеТекста = ПредставлениеТекста
				+ ?(НЕ ЗначениеЗаполнено(ПредставлениеТекста), "", ТекстОтступ) + ТекущаяСтрока; // остаток текущей строки
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставлениеТекста;
	
КонецФункции

// Возвращает представление списка ошибок, зафиксированных при расчете.
//
Функция ПредставлениеОшибокРасчета(ПротоколРасчета, Заголовок = Неопределено, Разделитель = Неопределено)
	
	Если Заголовок = Неопределено Тогда
		Заголовок = НСтр("ru='Обнаружены ошибки'");
	КонецЕсли;
	
	Если Разделитель = Неопределено Тогда
		Разделитель = ", ";
	КонецЕсли;
	
	МногострочныйРазделитель = (СтрНайти(Разделитель, Символы.ПС) > 0);
	
	ПредставлениеОшибок = "";
	
	// Выведем типы ошибок в том же порядке, в котором они присутствуют в метаданных.
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ЗначенияПеречисления Цикл
		
		Если ЗначениеЗаполнено(ПротоколРасчета.ОшибкиРасчета[Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости[МетаЗначение.Имя]]) Тогда 
			ПредставлениеОшибок = ПредставлениеОшибок
				+ ?(ПредставлениеОшибок = "", "", Разделитель) + СокрЛП(МетаЗначение.Комментарий);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредставлениеОшибок) Тогда
		ПредставлениеОшибок =
			Заголовок + ?(МногострочныйРазделитель, Разделитель, " ")
			+ ПредставлениеОшибок + ?(МногострочныйРазделитель, "", ".");
	КонецЕсли;
	
	Возврат ПредставлениеОшибок;
	
КонецФункции

// Возвращает служебный символ, который позволяет пропустить нумерацию для "заголовка" списка ошибок протокола.
//
Функция СлужебныйСимвол_БезНумерации() Экспорт
	Возврат "#";
КонецФункции

// Возвращает служебный символ, который позволяет сформировать маркированный список ошибок.
//
Функция СлужебныйСимвол_МаркированныйСписок() Экспорт
	Возврат "~";
КонецФункции

// Возвращает строку, разделяющую части протокола расчета.
//
Функция РазделительЧастейПротокола()
	Возврат "=================================================================================";
КонецФункции

// Возвращает заголовок протокола для вывода его на экран.
//
Функция ЗаголовокПротоколаПриВыводе(ПериодРасчета) Экспорт
	
	ТекстЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Протокол расчета периода %1'"),
		ПредставлениеПериодаРасчета(ПериодРасчета));
	
	Возврат ТекстЗаголовок;
	
КонецФункции

	
// Выводит в протокол и дублирует в журнал регистрации информацию об ошибках.
//
Процедура ВывестиИнформациюОбОшибках(ПараметрыРасчета, Протокол, ДанныеОшибок, Заголовок, ПредставлениеЭтапа = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ДанныеОшибок) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОшибок) = Тип("Массив") Тогда
		СоответствиеОшибок = Новый Соответствие;
		СоответствиеОшибок.Вставить(Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ПустаяСсылка(), ДанныеОшибок);
	Иначе
		СоответствиеОшибок = ДанныеОшибок;
	КонецЕсли;
	
	ОписаниеОшибок = "";
	НомерОшибки    = 0;
	
	Для Каждого КлючИЗначение Из СоответствиеОшибок Цикл
		
		Если СоответствиеОшибок.Количество() > 1 Тогда
			// Если есть несколько типов ошибок, то выведем текст-группировку по типу.
			ОписаниеОшибок = ОписаниеОшибок + ?(ОписаниеОшибок = "", "", "
				|") + НСтр("ru='Тип ошибки'") + ": """ + ПредставлениеЗначения(КлючИЗначение.Ключ) + """.";
		КонецЕсли;
		
		Для Каждого ТекстОшибки Из КлючИЗначение.Значение Цикл
			
			ТребуетсяНумерация = (Лев(ТекстОшибки, СтрДлина(СлужебныйСимвол_БезНумерации())) <> СлужебныйСимвол_БезНумерации());
			
			Если ТребуетсяНумерация Тогда 
				НомерОшибки = НомерОшибки + 1;
				ПрефиксНумерации = "	" + ПредставлениеЗначения(НомерОшибки) + ". ";
			Иначе
				// В начале строк-группировок можно указать специальный символ #, и такие строки не будут нумероваться при выводе.
				ТекстОшибки = Сред(ТекстОшибки, 2);
				ПрефиксНумерации = "";
			КонецЕсли;
			
			ОписаниеОшибок = ОписаниеОшибок + ?(ОписаниеОшибок = "", "", "
				|") + ПредставлениеМногострочногоТекста(ТекстОшибки, ?(СоответствиеОшибок.Количество() > 1, "	", "") + ПрефиксНумерации, Ложь, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОписаниеОшибок =
		Заголовок
		+ ?(НомерОшибки > 0,  " (" + ПредставлениеЗначения(НомерОшибки) + " " + НСтр("ru='шт.'") + ")", "")
		+ " !" + Символы.ПС + ОписаниеОшибок;
	
	Протокол.ДобавитьСтроку(ОписаниеОшибок);
	
	Если ЗначениеЗаполнено(ПредставлениеЭтапа) Тогда
		ОписаниеОшибок = ПредставлениеЭтапа + Символы.ПС + ОписаниеОшибок;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		УниверсальныеМеханизмыПартийИСебестоимости.ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область Производительность

Процедура НачатьЗамерВремени(ПараметрыРасчета) Экспорт
	
	Если ПараметрыРасчета.Свойство("ОписаниеЗамера") Тогда
		// Штатный вызов из механизма партионного учета версии 2.1.
		ОписаниеЗамераПроизводительности = ПараметрыРасчета.ОписаниеЗамера;
	ИначеЕсли ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость Тогда
		ОписаниеЗамераПроизводительности = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца.РасчетПартийИСебестоимости22");
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("Производительность", Новый Структура);
	
	ПараметрыРасчета.Производительность.Вставить("ОписаниеЗамераПроизводительности", ОписаниеЗамераПроизводительности);
	ПараметрыРасчета.Производительность.Вставить("КоличествоДанных", 0);
	ПараметрыРасчета.Производительность.Вставить("НаименованиеЭтапа", ПараметрыРасчета.ПредставлениеЭтапа);
	
КонецПроцедуры

Процедура ЗакончитьЗамерВремени(ПараметрыРасчета) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("Производительность") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("ОписаниеЗамера") Тогда
		// Замер запущен "извне" - там же должен закончиться.
		ЗафиксироватьЗамерВремени(ПараметрыРасчета);
	Иначе
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
			ПараметрыРасчета.Производительность.ОписаниеЗамераПроизводительности,
			ПараметрыРасчета.Производительность.КоличествоДанных);
	КонецЕсли;
	
	ПараметрыРасчета.Удалить("Производительность");
	ПараметрыРасчета.Удалить("ОписаниеЗамера");
	
КонецПроцедуры

Процедура ЗафиксироватьЗамерВремени(ПараметрыРасчета) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("Производительность") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЭтапа = ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасчета.Производительность.КоличествоДанных = 0 Тогда
		ПараметрыРасчета.Производительность.КоличествоДанных = 1;
	КонецЕсли;
	
	ОписаниеЭтапа.КоличествоДанных = ОписаниеЭтапа.КоличествоДанных + ПараметрыРасчета.Производительность.КоличествоДанных;
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
		ПараметрыРасчета.Производительность.ОписаниеЗамераПроизводительности,
		ПараметрыРасчета.Производительность.КоличествоДанных,
		ПараметрыРасчета.Производительность.НаименованиеЭтапа);
	
	ПараметрыРасчета.Производительность.КоличествоДанных = 0;
	
КонецПроцедуры

Процедура УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, КоличествоДанных) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("Производительность") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета.Производительность.КоличествоДанных =
		ПараметрыРасчета.Производительность.КоличествоДанных + ?(КоличествоДанных <= 0, 1, КоличествоДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеИВыводДанных

Функция ВыполнитьЗапросСЗамерами(ПараметрыРасчета, ЗапросДляЗамера) Экспорт
	
	ПротоколРасчета 	= ПараметрыРасчета.ПротоколРасчета;
	ОписаниеЭтапа 		= ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	ТаблицаЗамеров = Новый ТаблицаЗначений;
	ТаблицаЗамеров.Колонки.Добавить("ИмяВременнойТаблицы", Новый ОписаниеТипов("Строка"));
	ТаблицаЗамеров.Колонки.Добавить("УничтожениеТаблицы",  Новый ОписаниеТипов("Булево"));
	ТаблицаЗамеров.Колонки.Добавить("ВремяНачала", 		   Новый ОписаниеТипов("Дата"));
	ТаблицаЗамеров.Колонки.Добавить("Длительность", 	   Новый ОписаниеТипов("Число"));
	ТаблицаЗамеров.Колонки.Добавить("РазмерРезультата",    Новый ОписаниеТипов("Число"));
	
	РезультатЗапроса   = Новый Массив;
	СтарыйТекстЗапроса = ЗапросДляЗамера.Текст;
	
	Если ЗапросДляЗамера.МенеджерВременныхТаблиц = Неопределено Тогда
		ВремененныйМенеджерВТ = Новый МенеджерВременныхТаблиц;
		ЗапросДляЗамера.МенеджерВременныхТаблиц = ВремененныйМенеджерВТ;
	Иначе
		ВремененныйМенеджерВТ = Неопределено;
	КонецЕсли;
	
	СхемаЗапросаДляЗамера = Новый СхемаЗапроса;
	СхемаЗапросаДляЗамера.УстановитьТекстЗапроса(СтарыйТекстЗапроса);
	
	Для Каждого ТекущийЗапрос Из СхемаЗапросаДляЗамера.ПакетЗапросов Цикл
		
		ИмяВременнойТаблицы = "";
		
		НоваяСтрока = ТаблицаЗамеров.Добавить();
		НоваяСтрока.УничтожениеТаблицы = (ТипЗнч(ТекущийЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		
		Если НоваяСтрока.УничтожениеТаблицы Тогда
			НоваяСтрока.ИмяВременнойТаблицы = ТекущийЗапрос.ИмяТаблицы;
			ЗапросДляЗамера.Текст = "УНИЧТОЖИТЬ " + ТекущийЗапрос.ИмяТаблицы;
		Иначе
			НоваяСтрока.ИмяВременнойТаблицы = ТекущийЗапрос.ТаблицаДляПомещения;
			ЗапросДляЗамера.Текст = ТекущийЗапрос.ПолучитьТекстЗапроса();
		КонецЕсли;
		
		НоваяСтрока.ВремяНачала = ТекущаяДатаСеанса();
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		РезультатТекущегоЗапроса = ЗапросДляЗамера.Выполнить();
		
		ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		НоваяСтрока.Длительность = ВремяОкончания - ВремяНачала;
		
		Если НоваяСтрока.УничтожениеТаблицы Тогда
			
			ИмяВременнойТаблицы = "_УНИЧТОЖИТЬ_" + ТекущийЗапрос.ИмяТаблицы;
			РезультатЗапроса.Добавить(Неопределено);
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ИмяВременнойТаблицы) Тогда
			
			ИмяВременнойТаблицы = НоваяСтрока.ИмяВременнойТаблицы;
			
			РезультатЗапроса.Добавить(Неопределено);
			
			НоваяСтрока.РазмерРезультата = РезультатТекущегоЗапроса.Выгрузить()[0][0];
			
		Иначе
			
			ИмяВременнойТаблицы = "_ВЫБРАТЬ_";
			
			ВыборкаТекущегоЗапроса = РезультатТекущегоЗапроса.Выбрать();
			РезультатЗапроса.Добавить(ВыборкаТекущегоЗапроса);
			
			НоваяСтрока.РазмерРезультата = ВыборкаТекущегоЗапроса.Количество();
			
		КонецЕсли;
		
		Если НЕ ОписаниеЭтапа.ВременныеТаблицы.Свойство(ИмяВременнойТаблицы) Тогда
			ОписаниеЭтапа.ВременныеТаблицы.Вставить(ИмяВременнойТаблицы, Новый Массив);
		КонецЕсли;
	
		ОписаниеВременнойТаблицы = Новый Структура;
		ОписаниеВременнойТаблицы.Вставить("КоличествоСтрок", НоваяСтрока.РазмерРезультата);
		ОписаниеВременнойТаблицы.Вставить("ВремяНачала", 	 ВремяНачала);
		ОписаниеВременнойТаблицы.Вставить("ВремяОкончания",  ВремяОкончания);
		ОписаниеВременнойТаблицы.Вставить("Пояснение", 		 "");
		ОписаниеВременнойТаблицы.Вставить("ИсходныеДанные",  "");
		
		ОписаниеЭтапа.ВременныеТаблицы[ИмяВременнойТаблицы].Добавить(ОписаниеВременнойТаблицы);
		
	КонецЦикла;
	
	Если ВремененныйМенеджерВТ <> Неопределено Тогда
		ЗапросДляЗамера.МенеджерВременныхТаблиц = Неопределено;
		ВремененныйМенеджерВТ.Закрыть();
	КонецЕсли;
	
	ЗапросДляЗамера.Текст = СтарыйТекстЗапроса;
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли РезультатЗапроса.Количество() = 1 Тогда
		Возврат РезультатЗапроса[0];
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти
