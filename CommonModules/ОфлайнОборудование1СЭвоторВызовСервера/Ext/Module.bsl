#Область ПрограммныйИнтерфейс
// Функция возвращает JSON-текст Post запроса в формате XDTO-пакета Evotor.
//		Параметры:
//			- СтруктураЗаписиJSON - <Cтруктура>
//			- структура данных, преобразуемая в JSON, для передачи в облако Эвотор
//			- ВидЗапроса - <Строка>
//			- вид запроса к облаку Эвотор
//			// Возвращаемое значение:
//			<Строка> - Результат работы функции.
//
Функция ПолучитьТекстJSONЗапроса(СтруктураЗаписиJSON, ВидЗапроса) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Если ВидЗапроса = "ВыгрузитьДанные" Тогда
		
		МассивТоваров = Новый Массив;
		
		Если Не СтруктураЗаписиJSON.Товары.Количество() = 0 ИЛИ Не СтруктураЗаписиJSON.ГруппыТоваров.Количество() = 0 Тогда
			
			СоответствиеТоваровГрупп = Новый Соответствие;
			
			Для Каждого Группа Из СтруктураЗаписиJSON.ГруппыТоваров Цикл
				
				СтруктураТовара = ПолучитьГруппу();
				СтруктураТовара.uuid        = Строка(Группа.УникальныйИдентификатор);
				СтруктураТовара.name        = Группа.Наименование;
				СтруктураТовара.group       = Истина;
				СтруктураТовара.hasVariants = Истина;
				СтруктураТовара.allowToSell = Истина;
				СоответствиеТоваровГрупп.Вставить(Группа.Код, Строка(Группа.УникальныйИдентификатор));
				Если Группа.КодГруппы <> 0 Тогда
					СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Группа.КодГруппы);
				Иначе
					СтруктураТовара.parentUuid = Неопределено;
				КонецЕсли;
				
				МассивТоваров.Добавить(СтруктураТовара);
				
			КонецЦикла;
			
			Для Каждого Товар Из СтруктураЗаписиJSON.Товары Цикл
				Если Товар.ИмеетХарактеристики Тогда
					Для Каждого Характеристика Из Товар.Характеристики Цикл
						Если Характеристика.ИмеетУпаковки Тогда
							Для Каждого Упаковка Из Характеристика.Упаковки Цикл
								СтруктураТовара = ПолучитьТовар();
								СтруктураТовара.name      = Товар.Наименование + Характеристика.Наименование + Упаковка.Наименование;
								СтруктураТовара.price     = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
								СтруктураТовара.quantity  = ?(Упаковка.Остаток = Неопределено, 0, Упаковка.Остаток);
								СтруктураТовара.costPrice = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
								Если Не ПустаяСтрока(Упаковка.УникальныйИдентификатор) Тогда
									СтруктураТовара.uuid      = Строка(Упаковка.УникальныйИдентификатор);
								Иначе
									СтруктураТовара.uuid      = Строка(Характеристика.УникальныйИдентификатор);
								КонецЕсли;
								СтруктураТовара.code      = Упаковка.Код;
								Если Товар.КодГруппы <> 0 Тогда
									СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
								Иначе
									СтруктураТовара.parentUuid = Неопределено;
								КонецЕсли;
								ЗаписатьШтрихкодыТовара(Упаковка.Штрихкоды, СтруктураТовара);
								СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
								ЗаполнитьТовар(СтруктураТовара, Товар);
								МассивТоваров.Добавить(СтруктураТовара);
							КонецЦикла;
						Иначе
							СтруктураТовара = ПолучитьТовар();
							СтруктураТовара.name      = Товар.Наименование + Характеристика.Наименование;
							СтруктураТовара.price     = ?(Характеристика.Цена = Неопределено, 0, Характеристика.Цена);
							СтруктураТовара.quantity  = ?(Характеристика.Остаток = Неопределено, 0, Характеристика.Остаток);
							СтруктураТовара.costPrice = ?(Характеристика.Цена = Неопределено, 0, Характеристика.Цена);
							Если Не ПустаяСтрока(Характеристика.УникальныйИдентификатор) Тогда
								СтруктураТовара.uuid      = Строка(Характеристика.УникальныйИдентификатор);
							Иначе
								СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
							КонецЕсли;
							СтруктураТовара.code      = Характеристика.Код;
							Если Товар.КодГруппы <> 0 Тогда
								СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
							Иначе
								СтруктураТовара.parentUuid = Неопределено;
							КонецЕсли;
							ЗаписатьШтрихкодыТовара(Характеристика.Штрихкоды, СтруктураТовара);
							СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
							ЗаполнитьТовар(СтруктураТовара, Товар);
							МассивТоваров.Добавить(СтруктураТовара);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Товар.ИмеетУпаковки Тогда
					Если ЗначениеЗаполнено(Товар.Код) Тогда
						СтруктураТовара = ПолучитьТовар();
						СтруктураТовара.name      = Товар.Наименование;
						СтруктураТовара.price     = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
						СтруктураТовара.quantity  = ?(Товар.Остаток = Неопределено, 0, Товар.Остаток);
						СтруктураТовара.costPrice = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
						СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
						СтруктураТовара.code      = Товар.Код;
						Если Товар.КодГруппы <> 0 Тогда
							СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
						Иначе
							СтруктураТовара.parentUuid = Неопределено;
						КонецЕсли;
						ЗаписатьШтрихкодыТовара(Товар.Штрихкоды, СтруктураТовара);
						СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
						ЗаполнитьТовар(СтруктураТовара, Товар);
						МассивТоваров.Добавить(СтруктураТовара);
					КонецЕсли;
					Для Каждого Упаковка Из Товар.Упаковки Цикл
						СтруктураТовара = ПолучитьТовар();
						СтруктураТовара.name      = Товар.Наименование + Упаковка.Наименование;
						СтруктураТовара.price     = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
						СтруктураТовара.quantity  = ?(Упаковка.Остаток = Неопределено, 0, Упаковка.Остаток);
						СтруктураТовара.costPrice = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
						Если Не ПустаяСтрока(Упаковка.УникальныйИдентификатор) Тогда
							СтруктураТовара.uuid      = Строка(Упаковка.УникальныйИдентификатор);
						Иначе
							СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
						КонецЕсли;
						СтруктураТовара.code      = Упаковка.Код;
						Если Товар.КодГруппы <> 0 Тогда
							СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
						Иначе
							СтруктураТовара.parentUuid = Неопределено;
						КонецЕсли;
						ЗаписатьШтрихкодыТовара(Упаковка.Штрихкоды, СтруктураТовара);
						СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
						ЗаполнитьТовар(СтруктураТовара, Товар);
						МассивТоваров.Добавить(СтруктураТовара);
					КонецЦикла;
				Иначе
					СтруктураТовара = ПолучитьТовар();
					СтруктураТовара.name      = Товар.Наименование;
					СтруктураТовара.price     = ?(Товар.Цена = Неопределено, 1, Товар.Цена);
					СтруктураТовара.quantity  = ?(Товар.Остаток = Неопределено, 1, Товар.Остаток);
					СтруктураТовара.costPrice = ?(Товар.Цена = Неопределено, 1, Товар.Цена);
					СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
					СтруктураТовара.code      = Товар.Код;
					Если Товар.КодГруппы <> 0 Тогда
						СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
					Иначе
						СтруктураТовара.parentUuid = Неопределено;
					КонецЕсли;
					ЗаписатьШтрихкодыТовара(Товар.Штрихкоды, СтруктураТовара);
					СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
					ЗаполнитьТовар(СтруктураТовара, Товар);
					МассивТоваров.Добавить(СтруктураТовара);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
		
	ИначеЕсли ВидЗапроса = "УдалитьТовары" Тогда
		МассивТоваров = Новый Массив;
		Если ЗначениеЗаполнено(СтруктураЗаписиJSON) Тогда
			Для Каждого Товар Из СтруктураЗаписиJSON Цикл
				МассивТоваров.Добавить(Строка(Товар.УникальныйИдентификатор));
			КонецЦикла;
		КонецЕсли;
		ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
	КонецЕсли;
	
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ЗаполнитьТовар(СтруктураТовара, Товар)
	
	Если Товар.ЭтоАлкоголь <> Неопределено ИЛИ Товар.ЭтоАлкоголь = Ложь Тогда
		
		СтруктураТовара.alcoholByVolume        = Неопределено;
		СтруктураТовара.alcoholProductKindCode = Неопределено;
		СтруктураТовара.tareVolume             = Неопределено;
		СтруктураТовара.alcocodes              = Неопределено;
		СтруктураТовара.type                   = "NORMAL";
		
	Иначе
		
		СтруктураТовара.alcoholByVolume        = Товар.АлкогольныеРеквизиты.Крепость;
		СтруктураТовара.alcoholProductKindCode = Товар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
		СтруктураТовара.tareVolume             = Товар.АлкогольныеРеквизиты.ЕмкостьТары;
		Если Товар.АлкогольныеРеквизиты.Маркируемый = Истина Тогда
			СтруктураТовара.type               = "ALCOHOL_MARKED";
		Иначе
			СтруктураТовара.type               = "ALCOHOL_NOT_MARKED";
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураТовара.allowToSell                = Истина;
	СтруктураТовара.articleNumber              = Строка(Товар.Артикул);
	СтруктураТовара.description                = "";
	СтруктураТовара.group                      = Ложь;
	Если Строка(Товар.СтавкаНДС) = "18" Тогда
		СтруктураТовара.tax                    = "VAT_18";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "10" Тогда
		СтруктураТовара.tax                    = "VAT_10";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "0" Тогда
		СтруктураТовара.tax                    = "VAT_0";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "110" Тогда
		СтруктураТовара.tax                    = "VAT_10_110";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "118" Тогда
		СтруктураТовара.tax                    = "VAT_18_118";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "none" Тогда
		СтруктураТовара.tax                    = "NO_VAT";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьШтрихкодыТовара(Штрихкоды, СтруктураТовара)
	
	Для Каждого Штрихкод Из Штрихкоды Цикл
		
		СтруктураТовара.barCodes.Добавить(Штрихкод.Штрихкод);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьЕдиницуИзмеренияТовара(ЕдиницыИзмерения, Товар)
	
	Если ЗначениеЗаполнено(Товар.КодЕдиницыИзмерения) Тогда
		
	Для Каждого ЕИ Из ЕдиницыИзмерения Цикл
			Если ЕИ.Код = Товар.КодЕдиницыИзмерения Тогда
				Возврат ЕИ.Наименование;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат "шт";
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьСтруктуруОтвета(ТекстJSON, ВыходныеПараметры) Экспорт
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		ПоляДат = Новый Массив;
		ПоляДат.Добавить("openDate");
		ПоляДат.Добавить("closeDate");
		ПоляДат.Добавить("creationDate");
		ВыходныеПараметры = ПрочитатьJSON(ЧтениеJSON,,ПоляДат);
		ЧтениеJSON.Закрыть();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось прочитать файл ответа'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТовар()
	
	СтруктураТовара = Новый Структура;
	СтруктураТовара.Вставить("uuid");
	СтруктураТовара.Вставить("code");
	СтруктураТовара.Вставить("barCodes",  Новый Массив);
	СтруктураТовара.Вставить("alcoCodes", Новый Массив);
	СтруктураТовара.Вставить("name");
	СтруктураТовара.Вставить("price");
	СтруктураТовара.Вставить("quantity", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	СтруктураТовара.Вставить("costPrice");
	СтруктураТовара.Вставить("measureName");
	СтруктураТовара.Вставить("tax");
	СтруктураТовара.Вставить("allowToSell");
	СтруктураТовара.Вставить("description");
	СтруктураТовара.Вставить("articleNumber");
	СтруктураТовара.Вставить("parentUuid");
	СтруктураТовара.Вставить("group");
	СтруктураТовара.Вставить("type");
	СтруктураТовара.Вставить("alcoholByVolume");
	СтруктураТовара.Вставить("alcoholProductKindCode");
	СтруктураТовара.Вставить("tareVolume");
	
	Возврат СтруктураТовара;
	
КонецФункции

Функция ПолучитьГруппу()
	
	СтруктураТовара = Новый Структура;
	СтруктураТовара.Вставить("uuid");
	СтруктураТовара.Вставить("name");
	СтруктураТовара.Вставить("group");
	СтруктураТовара.Вставить("parentUuid");
	СтруктураТовара.Вставить("hasVariants");
	СтруктураТовара.Вставить("allowToSell");
	
	Возврат СтруктураТовара;
	
КонецФункции

Функция ОбработатьДанныеЗапроса(МассивДанных, ДополнительныеПараметры) Экспорт
	
	СтруктураВозвращаемыхДанных = Новый Массив;
	Если ДополнительныеПараметры.НаименованиеКоманды = "ЗагрузитьДанные" Тогда
		
		МассивДопДанных = Новый Массив;
		СтруктураДанных = МенеджерОфлайнОборудования.ПолучитьЗагружаемыеДанныеИзККМ();
		СоответствиеСмен = Новый Соответствие;
		
		Для Каждого Документ Из МассивДанных Цикл
			Если Документ.CloseDate < ДополнительныеПараметры.ДатаНачалаВыгрузки Тогда
				МассивДопДанных.Добавить(Документ);
			Иначе
				Если Документ.type = "OPEN_SESSION" Тогда
					ОтчетОПродажахККМ = МенеджерОфлайнОборудования.ПолучитьОтчетОПродажахККМ();
					ОтчетОПродажахККМ.ДатаОткрытияСмены = Документ.openDate;
					ОтчетОПродажахККМ.НомерСмены        = Документ.sessionNumber;
					ОтчетОПродажахККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.sessionUUID);
					СоответствиеСмен.Вставить(Документ.sessionUUID, ОтчетОПродажахККМ);
				ИначеЕсли Документ.type = "SELL" ИЛИ Документ.type = "PAYBACK" Тогда
					
					ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
					Если Не ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
						ОтчетОПродажахККМ = ОбработатьМассивДопДанных(МассивДопДанных, Документ.sessionUUID, СоответствиеСмен);
					КонецЕсли;
					
					ОплатаЧекаККМ = МенеджерОфлайнОборудования.ПолучитьОплатуЧекаККМ();
					ЧекККМ = МенеджерОфлайнОборудования.ПолучитьЧекККМ();
					ЧекККМ.ДатаЧека                = Документ.openDate;
					ЧекККМ.НомерЧека               = Документ.number;
					ЧекККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.uuid);
					Если Документ.type = "SELL" Тогда
						ЧекККМ.ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьТипРасчетаДенежнымиСредствамиПоКоду(1);
					ИначеЕсли Документ.type = "PAYBACK" Тогда
						ЧекККМ.ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьТипРасчетаДенежнымиСредствамиПоКоду(2);
					КонецЕсли;
					Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
						ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
					КонецЕсли;
					
					Для Каждого Транзакция Из Документ.transactions Цикл
						Если Транзакция.type ="DOCUMENT_OPEN" Тогда
							Если Транзакция.baseDocumentUUID <> Неопределено Тогда
								ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ = Новый Уникальныйидентификатор(Транзакция.baseDocumentUUID);
								ЧекККМ.ТипСвязанногоДокументаККМ = "Чек";
							КонецЕсли;
						ИначеЕсли Транзакция.type = "REGISTER_POSITION" Тогда
							ТоварККМ = МенеджерОфлайнОборудования.ПолучитьТоварЧекаККМ();
							ТоварККМ.Код                          = Транзакция.commodityCode;
							ТоварККМ.Количество                   = ?(Документ.type = "SELL", Транзакция.quantity, -Транзакция.quantity);
							ТоварККМ.Сумма                        = ?(Документ.type = "SELL", Транзакция.resultSum, -Транзакция.resultSum);
							ТоварККМ.Цена                         = Транзакция.price;
							
							Если ЗначениеЗаполнено(Транзакция.mark) Тогда
								ТоварККМ.ШтрихкодАлкогольнойПродукции.Добавить(Транзакция.mark);
							КонецЕсли;
							
							ТоварККМ.ПризнакСпособаРасчета        = МенеджерОборудованияКлиентСервер.ПолучитьПризнакСпособаРасчетаПоКоду(4);
							ЧекККМ.Товары.Добавить(ТоварККМ);
							СоответствиеТоваровНалогов = Новый Соответствие;
							СоответствиеТоваровНалогов.Вставить(Транзакция.commodityCode, ТоварККМ);
						ИначеЕсли Транзакция.type = "POSITION_TAX" Тогда
							Товар = СоответствиеТоваровНалогов.Получить(Транзакция.commodityCode);
							Если ЗначениеЗаполнено(Товар) Тогда
								Если Транзакция.tax = "NO_VAT" Тогда
									Товар.СтавкаНДС = "none";
								Иначе
									Товар.СтавкаНДС = Строка(Транзакция.taxPercent);
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли Транзакция.type = "PAYMENT" Тогда
							Если Транзакция.paymentType = "CASH" Тогда
								Если Не ОплатаЧекаККМ.СуммаНаличнойОплаты = Неопределено Тогда
									ОплатаЧекаККМ.СуммаНаличнойОплаты = ОплатаЧекаККМ.СуммаНаличнойОплаты + ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
								Иначе
									ОплатаЧекаККМ.СуммаНаличнойОплаты = ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
								КонецЕсли;
								ОплатаЧекаККМ.СуммаЭлектроннойОплаты = 0;
							ИначеЕсли Транзакция.paymentType = "CARD" Тогда
								Если Не ОплатаЧекаККМ.СуммаЭлектроннойОплаты = Неопределено Тогда
									ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ОплатаЧекаККМ.СуммаЭлектроннойОплаты + ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
								Иначе
									ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
								КонецЕсли;
								ОплатаЧекаККМ.СуммаНаличнойОплаты    = 0;
							КонецЕсли;
							ОплатаЧекаККМ.СуммаПостоплатой           = 0;
							ОплатаЧекаККМ.СуммаПредоплатой           = 0;
						КонецЕсли;
					КонецЦикла;
					ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
					
				ИначеЕсли Документ.type = "CLOSE_SESSION" Тогда
					ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
					Если Не ЗначениеЗаполнено (ОтчетОпродажахККМ) Тогда
						ОтчетОПродажахККМ = ОбработатьМассивДопДанных(МассивДопДанных, Документ.sessionUUID, СоответствиеСмен);
					КонецЕсли;
					Если ЗначениеЗаполнено(ОтчетОпродажахККМ) Тогда
						ОтчетОПродажахККМ.ДатаЗакрытияСмены = Документ.openDate;
						СтруктураДанных.ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
					КонецЕсли;
				ИначеЕсли Документ.type = "OPEN_TARE" Тогда
					ВскрытиеТарыККМ = МенеджерОфлайнОборудования.ПолучитьВскрытиеТарыККМ();
					ВскрытиеТарыККМ.Дата                    = Документ.openDate;
					ВскрытиеТарыККМ.Номер                   = Документ.number;
					ВскрытиеТарыККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.uuid);
					Для Каждого Транзакция Из Документ.transactions Цикл
					
						Если Транзакция.type = "REGISTER_POSITION" Тогда
							ТоварВскрытияТарыККМ = МенеджерОфлайнОборудования.ПолучитьТоварВскрытияТарыККМ();
							ТоварВскрытияТарыККМ.Код        = Транзакция.commodityCode;
							ТоварВскрытияТарыККМ.Количество = Транзакция.quantity;
							
							Если ЗначениеЗаполнено(Транзакция.barcode) Тогда
								ТоварВскрытияТарыККМ.ШтрихкодАлкогольнойПродукции.Добавить(Транзакция.barcode);
							КонецЕсли;
							
							ВскрытиеТарыККМ.Товары.Добавить(ТоварВскрытияТарыККМ);
						КонецЕсли;
					
					КонецЦикла;
					
					СтруктураДанных.ВскрытияАлкогольнойТары.Добавить(ВскрытиеТарыККМ);
					
				ИначеЕсли Документ.type = "CASH_INCOME" ИЛИ Документ.type = "CASH_OUTCOME" Тогда 
					ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
					Если Не ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
						ОтчетОПродажахККМ = ОбработатьМассивДопДанных(МассивДопДанных, Документ.sessionUUID, СоответствиеСмен);
					КонецЕсли;
					ДвижениеДСККМ = МенеджерОфлайнОборудования.ПолучитьДвижениеДСККМ();
					ДвижениеДСККМ.Дата                    = Документ.openDate;
					ДвижениеДСККМ.Номер                   = Документ.number;
					ДвижениеДСККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.uuid);
					ДвижениеДСККМ.Сумма                   = Документ.closeSum;
					Если Документ.type = "CASH_INCOME" Тогда
						ДвижениеДСККМ.ТипДвижения = "Внесение";
					Иначе
						ДвижениеДСККМ.ТипДвижения = "Выемка"
					КонецЕсли;
					Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
						ОтчетОПродажахККМ.ДвиженияДС.Добавить(ДвижениеДСККМ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураВозвращаемыхДанных.Добавить(СтруктураДанных);
		
	ИначеЕсли ДополнительныеПараметры.НаименованиеКоманды = "ЗагрузитьМагазины" Тогда
		
		СтруктураВозвращаемыхДанных = МассивДанных;
		
	ИначеЕсли ДополнительныеПараметры.НаименованиеКоманды = "ЗагрузитьТерминалы" Тогда
		
		СтруктураВозвращаемыхДанных = МассивДанных;
		
	ИначеЕсли ДополнительныеПараметры.НаименованиеКоманды = "ТестУстройства" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции

Функция ОбработатьМассивДопДанных(МассивДопДанных, ИДСмены, СоответствиеСмен)
	
	Индекс = МассивДопДанных.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если МассивДопДанных[Индекс].sessionUUID <> ИДСмены Тогда
			МассивДопДанных.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Для Каждого Документ Из МассивДопДанных Цикл
		Если Документ.type = "OPEN_SESSION" Тогда
			ОтчетОПродажахККМ = МенеджерОфлайнОборудования.ПолучитьОтчетОПродажахККМ();
			ОтчетОПродажахККМ.ДатаОткрытияСмены = Документ.openDate;
			ОтчетОПродажахККМ.НомерСмены        = Документ.sessionNumber;
			ОтчетОПродажахККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.sessionUUID);
			СоответствиеСмен.Вставить(Документ.sessionUUID, ОтчетОПродажахККМ);
		ИначеЕсли Документ.type = "SELL" ИЛИ Документ.type = "PAYBACK" Тогда
			
			ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
			ОплатаЧекаККМ = МенеджерОфлайнОборудования.ПолучитьОплатуЧекаККМ();
			ЧекККМ = МенеджерОфлайнОборудования.ПолучитьЧекККМ();
			ЧекККМ.ДатаЧека                = Документ.openDate;
			ЧекККМ.НомерЧека               = Документ.number;
			ЧекККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.uuid);
			Если Документ.type = "SELL" Тогда
				ЧекККМ.ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьТипРасчетаДенежнымиСредствамиПоКоду(1);
			ИначеЕсли Документ.type = "PAYBACK" Тогда
				ЧекККМ.ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьТипРасчетаДенежнымиСредствамиПоКоду(2);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
				ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
			КонецЕсли;
			
			Для Каждого Транзакция Из Документ.transactions Цикл
				Если Транзакция.type ="DOCUMENT_OPEN" Тогда
					Если Транзакция.baseDocumentUUID <> Неопределено Тогда
						ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ = Новый Уникальныйидентификатор(Транзакция.baseDocumentUUID);
						ЧекККМ.ТипСвязанногоДокументаККМ = "Чек";
					КонецЕсли;
				ИначеЕсли Транзакция.type = "REGISTER_POSITION" Тогда
					ТоварККМ = МенеджерОфлайнОборудования.ПолучитьТоварЧекаККМ();
					ТоварККМ.Код                          = Транзакция.commodityCode;
					ТоварККМ.Количество                   = ?(Документ.type = "SELL", Транзакция.quantity, -Транзакция.quantity);
					ТоварККМ.Сумма                        = ?(Документ.type = "SELL", Транзакция.resultSum, -Транзакция.resultSum);
					ТоварККМ.Цена                         = Транзакция.price;
					
					Если ЗначениеЗаполнено(Транзакция.mark) Тогда
						ТоварККМ.ШтрихкодАлкогольнойПродукции.Добавить(Транзакция.mark);
					КонецЕсли;
					
					ТоварККМ.ПризнакСпособаРасчета        = МенеджерОборудованияКлиентСервер.ПолучитьПризнакСпособаРасчетаПоКоду(4);
					ЧекККМ.Товары.Добавить(ТоварККМ);
					СоответствиеТоваровНалогов = Новый Соответствие;
					СоответствиеТоваровНалогов.Вставить(Транзакция.commodityCode, ТоварККМ);
				ИначеЕсли Транзакция.type = "POSITION_TAX" Тогда
					Товар = СоответствиеТоваровНалогов.Получить(Транзакция.commodityCode);
					Если ЗначениеЗаполнено(Товар) Тогда
						Если Транзакция.tax = "NO_VAT" Тогда
							Товар.СтавкаНДС = "none";
						Иначе
							Товар.СтавкаНДС = Строка(Транзакция.taxPercent);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Транзакция.type = "PAYMENT" Тогда
					Если Транзакция.paymentType = "CASH" Тогда
						Если Не ОплатаЧекаККМ.СуммаНаличнойОплаты = Неопределено Тогда
							ОплатаЧекаККМ.СуммаНаличнойОплаты = ОплатаЧекаККМ.СуммаНаличнойОплаты + ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
						Иначе
							ОплатаЧекаККМ.СуммаНаличнойОплаты = ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
						КонецЕсли;
						ОплатаЧекаККМ.СуммаЭлектроннойОплаты = 0;
					ИначеЕсли Транзакция.paymentType = "CARD" Тогда
						Если Не ОплатаЧекаККМ.СуммаЭлектроннойОплаты = Неопределено Тогда
							ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ОплатаЧекаККМ.СуммаЭлектроннойОплаты + ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
						Иначе
							ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
						КонецЕсли;
						ОплатаЧекаККМ.СуммаНаличнойОплаты    = 0;
					КонецЕсли;
					ОплатаЧекаККМ.СуммаПостоплатой           = 0;
					ОплатаЧекаККМ.СуммаПредоплатой           = 0;
				КонецЕсли;
			КонецЦикла;
			ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
			
		ИначеЕсли Документ.type = "CASH_INCOME" ИЛИ Документ.type = "CASH_OUTCOME" Тогда 
			ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
			ДвижениеДСККМ = МенеджерОфлайнОборудования.ПолучитьДвижениеДСККМ();
			ДвижениеДСККМ.Дата                    = Документ.openDate;
			ДвижениеДСККМ.Номер                   = Документ.number;
			ДвижениеДСККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.uuid);
			ДвижениеДСККМ.Сумма                   = Документ.closeSum;
			Если Документ.type = "CASH_INCOME" Тогда
				ДвижениеДСККМ.ТипДвижения = "Внесение";
			Иначе
				ДвижениеДСККМ.ТипДвижения = "Выемка"
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
				ОтчетОПродажахККМ.ДвиженияДС.Добавить(ДвижениеДСККМ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтчетОПродажахККМ;
	
КонецФункции

// Процедура добавляет в массив выходных параметров сообщение об ошибке.
//		Параметры:
//			- ВыходныеПараметры - массив, в который будет помещено сообщение об ошибке.
//			- ТекстСообщения - текст сообщения, содержащий информация об ошибке.
Процедура СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения)
	
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(ТекстСообщения);
	
КонецПроцедуры

// Функция возвращает дату в формате JSON-даты с добавлением смещения по часовому поясу.
//
Функция ПреобразоватьДату(Дата) Экспорт
	
	Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса(),УниверсальноеВремя(ТекущаяДатаСеанса()))/60/60;
	
	Если Смещение < 0 Тогда
		Знак = "%2D";
		Смещение = Смещение * (-1);
	Иначе
		Знак = "%2B";
	КонецЕсли;
	КоличествоЧасов = ?(Смещение > 9, Строка(Смещение), "0" + Строка(Смещение));
	
	СмещениеЧасов = ".000" + Знак + КоличествоЧасов + "00";
	
	ФорматированнаяДата = Формат(Дата, "ДФ=гггг-ММ-дд") + "T" + Формат(Дата, "ДФ=ЧЧ:мм:сс") + СмещениеЧасов;
	
	Возврат ФорматированнаяДата;
	
КонецФункции

Функция ОтправитьЗапрос(ПараметрыЗапроса, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыЗапроса.СерверЗапроса, 443, , , Новый ИнтернетПрокси(Истина), 300, Новый ЗащищенноеСоединениеOpenSSL);
	Исключение
		ТекстСообщения = НСтр("ru = 'При создании соединения произошла ошибка'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.АдресЗапроса, ПараметрыЗапроса.ЗаголовкиЗапроса);
		Если ПараметрыЗапроса.МетодЗапроса = "GET" Тогда
			Ответ = Соединение.Получить(HTTPЗапрос);
			ВыходныеПараметры.Добавить(Ответ.ПолучитьТелоКакСтроку());
			Результат = Истина;
		ИначеЕсли ПараметрыЗапроса.МетодЗапроса = "POST" Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТекстЗапроса);
			Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
			Результат = Истина;
		ИначеЕсли ПараметрыЗапроса.МетодЗапроса = "DELETE" Тогда
			Ответ = Соединение.Удалить(HTTPЗапрос);
			Результат = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения =  НСтр("ru = 'Не удалось получить данные'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Ответ.КодСостояния = 401 Тогда
		ТекстСообщения = НСтр("ru = 'Ключ авторизации неверный.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 402 Тогда
		ТекстСообщения = НСтр("ru = 'Точка продаж, аккаунт или поддержка интеграции заблокирована.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена указанная точка продаж.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 405 Тогда
		ТекстСообщения = НСтр("ru = 'Терминал не активен в рамках текущей подписки.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 500 Тогда
		ТекстСообщения = НСтр("ru = 'Внутренняя ошибка сервиса.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 503 Тогда
		ТекстСообщения = НСтр("ru = 'Сервис недоступен.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 500 Тогда
		ТекстСообщения = НСтр("ru = 'Терминал не активен.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли НЕ Ответ.КодСостояния = 200 Тогда
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при выгрузке данных. Код ответа: %КодСостояния%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСостояния%", Ответ.КодСостояния);
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти