
#Область ЗагрузкаДокументовОбщее

			///////////////////////////////////////////////////////////////////
			//					ЗАГРУЗКА ДОКУМЕНТОВ ОБЩЕЕ                   //
			/////////////////////////////////////////////////////////////////
			
// Процедура - запускает процес загрузки документов с сайта или файла XML
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
Процедура ЗагрузкаДокументов(ПараметрыОбмена) Экспорт
	
	Если ПараметрыОбмена.ВыгружатьНаСайт тогда
		
		ЗагрузкаДокументовССайта(ПараметрыОбмена);	
		
	Иначе
	
		ЗагрузкаДокументовИзФайла(ПараметрыОбмена);
		
	КонецЕсли;
				
КонецПроцедуры
			
// Процедура - Загрузка документов из файла XML
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
Процедура ЗагрузкаДокументовИзФайла(ПараметрыОбмена)
	
	Файл = Новый Файл(ПараметрыОбмена.ФайлЗагрузки);
	
	Если НЕ Файл.Существует()
		ИЛИ Файл.ЭтоКаталог() Тогда
		
			Б_ОбменССайтомСервер.СообщитьПодробно("Файл загрузки не найден: " + ПараметрыОбмена.ФайлЗагрузки, ПараметрыОбмена);
		Возврат;
		
	КонецЕсли;
	
	ФайлXML = Новый ТекстовыйДокумент;
	ФайлXML.Прочитать(ПараметрыОбмена.ФайлЗагрузки);
	СтрокаXML = ФайлXML.ПолучитьТекст();
	
	ОбработатьКонтейнеры(СтрокаXML, ПараметрыОбмена);
	
КонецПроцедуры
			
// Процедура - Загрузка документов с сайта
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
Процедура ЗагрузкаДокументовССайта(ПараметрыОбмена)
	
	ОтветСервера = "";
	Соединение = Неопределено;
	ТипСоединения = "sale";
	
	НастройкиПодключения = ПараметрыОбмена.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Отправка запроса на авторизацию.", ПараметрыОбмена);
	
	Успешно = Б_ОбменССайтомСервер.АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Не Успешно Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("Авторизация на сайте не выполнена.", ПараметрыОбмена, Истина, Истина);	
		Возврат;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	Попытка
		Токен			= "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		Б_ОбменССайтомСервер.СообщитьПодробно("CSRF токен не поддерживается. Для того, чтобы поддерживался - необходимо обновить БУС.", ПараметрыОбмена);	
	КонецПопытки;
	
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Отправка запроса на инициализацию, для определения версии обмена данных.", ПараметрыОбмена);
	ОтветСервераОИнициализации = Б_ОбменССайтомСервер.ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_Инициализация + Токен + "&version=" + ПараметрыОбмена.ВерсияСхемы , ЗаголовкиЗапросов, ПараметрыОбмена);
	
	Если ОтветСервераОИнициализации = Неопределено Тогда 
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось провести инициализацию. Загрузка с сайта невозможна", ПараметрыОбмена);	
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ВерсияXML		= СтрПолучитьСтроку(ОтветСервераОИнициализации, 4);
		
		ВерсияЧислом 	= Число(Прав(ВерсияXML,4)); 
		
	Исключение
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось получить версию XML. Загрузка с сайта невозможна", ПараметрыОбмена);
		Б_ОбменССайтомСервер.СообщитьПодробно("Ответ сервера: " + ОтветСервераОИнициализации, ПараметрыОбмена);
		Возврат;
		
	КонецПопытки;
	
	Если ВерсияЧислом < 2.08 тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Версия Commerce ML не 2.08, а " + Строка(ВерсияЧислом) + ". Загрузка документов этим модулем обмена невозможна.", ПараметрыОбмена);	
		Возврат;
		
	КонецЕсли;

	лЕстьДокументы = Истина;
	
	Пока лЕстьДокументы Цикл
		ОписаниеОшибки = "";
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Отправка запроса на получение заказов с сайта.", ПараметрыОбмена);
		
		ОтветСервера = Б_ОбменССайтомСервер.ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПолучитьДанные + Токен + "&version=" + ПараметрыОбмена.ВерсияСхемы, ЗаголовкиЗапросов, ПараметрыОбмена);
		
		Если ОтветСервера = Неопределено Тогда 
			Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось загрузить данные с сервера.", ПараметрыОбмена);	
			Возврат;
			
		КонецЕсли;
		
		СтрокаCML = "";
		
		Если Лев(ОтветСервера, 2) = "PK" Тогда
			СтрокаCML = РаспаковкаZIPАрхива(ОтветСервера);
		Иначе
			Если Лев(ОтветСервера, 5) = "<?xml" Тогда
				СтрокаCML = ОтветСервера;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаCML) Тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось прочитать данные, загруженные с сервера.", ПараметрыОбмена);
			Возврат;
		КонецЕсли;

		лЕстьДокументы = ОбработатьКонтейнеры(СтрокаCML, ПараметрыОбмена);
		
	КонецЦикла;
	
	ОтветСервера = Б_ОбменССайтомСервер.ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта + Токен + "&version=" + ПараметрыОбмена.ВерсияСхемы , ЗаголовкиЗапросов, ПараметрыОбмена);
	
	Если ОтветСервера = Неопределено Тогда 
		Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось отправить сообщение на сайт, что заказы получены и обработаны.", ПараметрыОбмена);	
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось отправить сообщение на сайт, что заказы получены и обработаны.", ПараметрыОбмена);	
		Б_ОбменССайтомСервер.СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
	Иначе
		Б_ОбменССайтомСервер.СообщитьПодробно("Сообщение на сайт, что заказы получены и обработаны, доставлено.", ПараметрыОбмена);	
	КонецЕсли;
	
	
	
КонецПроцедуры

// Функция - распаковывает Zip архив, пришедший с сайта
//
// Параметры:
//  СтрокаZIP	 - 	 Содержимое Zip архива 
// Возвращаемое значение:
//   Содержимое архива 
Функция РаспаковкаZIPАрхива(СтрокаZIP) Экспорт
	
	СтрокаСодержимого = "ZIP_ERROR";
	
	ИмяФайла    = ПолучитьИмяВременногоФайла("zip");
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	СоздатьКаталог(ИмяКаталога);
	
	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	Попытка
		СтрокаВФайл.Записать(ИмяФайла);
	Исключение
	КонецПопытки;
	
	ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
	ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
	ЧтениеZIP.Закрыть();
	
	РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
	
	Если РаспакованныеФайлы.Количество() = 1 Тогда
		СтрокаИзФайла 	  = Новый ТекстовыйДокумент;
		СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя);
		СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяКаталога);
	Исключение
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции

Процедура ЗаполнитьИнформациюОЧеке(Документ, ДокументXML)
	
	ИнформацияОЧеках = ДокументXML.ИнформацияОЧеках;
	
	Если ИнформацияОЧеках <> Неопределено тогда
		
		Если ИнформацияОЧеках.Количество() > 0 тогда
			
			НужныйЧек 	= ИнформацияОЧеках[0].Чек;
			лНомерЧека 	= НужныйЧек.Ид; 
			
			Оплачено = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Оплачено");		
			Оплачено = ?((Оплачено = Неопределено ИЛИ Оплачено = "false"), Ложь, Истина);
				
			Если Константы.Б_ИспользоватьМеханизмПечатиЧеков.Получить() И Документ.Проведен И Оплачено тогда
				
				НайденнаяСтрока = НужныйЧек.ЗначенияСвойств.Найти(Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПредопределенныйИдОбъекта("ИдСвойствПечатьЧека"),"Ид"); 
				
				Если НайденнаяСтрока <> Неопределено тогда
					
					НуженЧек = НайденнаяСтрока.Значение;
					НуженЧек = ?((НуженЧек = "true"), Истина, Ложь);
					
					Если НуженЧек тогда
						ДобавлениеОплатыВОчередьПечати(Документ, лНомерЧека);	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавлениеОплатыВОчередьПечати(Документ, ИдЧека)
	
	Выборка = РегистрыСведений.Б_ОчередьПечати.Выбрать(Новый Структура("Документ",Документ));
	
	Если НЕ Выборка.Следующий() тогда
		
		НоваяЗапись = РегистрыСведений.Б_ОчередьПечати.СоздатьМенеджерЗаписи();
		НоваяЗапись.Документ 		= Документ;
		НоваяЗапись.ИдЧекаНаСайте 	= ИдЧека;
		НоваяЗапись.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область РазборИАнализXMLФайловДокументов

//////////////////////////////////////////////////////////////////////////
//   		 	  АНАЛИЗ И РАЗБОР XML ФАЙЛОВ ДОКУМЕНТОВ 		       //
////////////////////////////////////////////////////////////////////////


Процедура ЗагрузитьДокументы(ПараметрыОбмена, ТзнДокументов, ДокументXDTO)
	
	лНомер 	= "";
	лДата	= "";
	Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Номер") Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Документ>.<Номер> документа XML. Документ будет пропущен.", ПараметрыОбмена);
		возврат;
	Иначе
		Если НЕ	Б_ОбменССайтомСервер.СвойствоXDTOЗаполнено(ДокументXDTO.Номер) тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Некорректные данные в <Документ>.<Номер> документа XML. Документ будет пропущен.", ПараметрыОбмена);
			возврат;
		Иначе
			лНомер = ДокументXDTO.Номер;
		конецЕсли;
	КонецЕсли;	
	
	Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Дата") Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Документ>.<Дата> документа XML. Документ будет пропущен.", ПараметрыОбмена);
		возврат;
	Иначе
		Если НЕ	Б_ОбменССайтомСервер.СвойствоXDTOЗаполнено(ДокументXDTO.Дата) тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Некорректные данные в <Документ>.<Дата> документа XML. Документ будет пропущен.", ПараметрыОбмена);
			возврат;
		Иначе
			лДата = ДокументXDTO.Дата;
		конецЕсли;
	КонецЕсли;	
	
	
	Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "ХозОперация")
		ИЛИ (НЕ НРег(ДокументXDTO.ХозОперация) = "заказ товара"	И НЕ НРег(ДокументXDTO.ХозОперация) = "отпуск товара" И НЕ НРег(ДокументXDTO.ХозОперация) = "выплата наличных денег" И НЕ НРег(ДокументXDTO.ХозОперация) = "выплата безналичных денег" И НЕ НРег(ДокументXDTO.ХозОперация) = "эквайринговая операция") Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Документ>.<ХозОперация> документа XML: " + лНомер + "от " + лДата + ". Документ с таким типом не обрабатывается. Документ будет пропущен.", ПараметрыОбмена);
	КонецЕсли;		
	
	Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Контрагенты") Тогда
		лКонтрагент = Неопределено;
	Иначе
		Контрагенты = ДокументXDTO.Контрагенты;
		Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(Контрагенты, "Контрагент") Тогда
			лКонтрагент = Неопределено;
		Иначе
			Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(Контрагенты.Контрагент) тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Документ>.<Контрагенты> документа XML: " + лНомер + "от " + лДата + ". Указано несколько контрагентов. Будет взят первый.", ПараметрыОбмена);
				лКонтрагентXDTO =  Контрагенты.Контрагент[0];
			иначе
				лКонтрагентXDTO =  Контрагенты.Контрагент;
			КонецЕсли;
		
			лКонтрагент= ОбработатьИнформациюОКонтрагентеXDTO(ПараметрыОбмена, лКонтрагентXDTO, лНомер);   
			
		КонецЕсли;	
		
	КонецЕсли;	 		
	
	
	Если  ДокументXDTO.ХозОперация = "Заказ товара" ИЛИ ДокументXDTO.ХозОперация = "Отпуск товара" тогда
		
		Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Товары")  Тогда
			лТовары = Неопределено;	
		Иначе
			//ТоварыXDTO 	= ДокументXDTO.Товары;
			
			лТовары 	= ОбработатьИнформациюОТабличнойЧастиДокументаXDTO(ПараметрыОбмена, ТзнДокументов, ДокументXDTO);
			
		КонецЕсли;
	Иначе
		лТовары = Неопределено;	
	КонецЕсли;
	
	НовСтр = ТзнДокументов.Добавить();
	
	НовСтр.Дата 			= лДата;
	НовСтр.Номер 			= лНомер;
	НовСтр.Дата1С 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Дата1С"			, "Дата");
	НовСтр.Номер1С 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Номер1С"			, "Строка");
	НовСтр.НомерВерсии		= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "НомерВерсии"		, "Строка");
	НовСтр.ПометкаУдаления 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "ПометкаУдаления"	, "Булево");
	НовСтр.Время 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Время"				, "Строка");
	НовСтр.ХозОперация 		= ДокументXDTO.ХозОперация;
	НовСтр.Ид 				= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Ид"				, "Строка");
	лВалюта					= Справочники.Валюты.НайтиПоНаименованию(Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Валюта", "Строка")).Ссылка;
	НовСтр.Валюта 			= ?(ЗначениеЗаполнено(лВалюта), лВалюта, Константы.ВалютаУправленческогоУчета.Получить());
	
	НовСтр.Комментарий 		= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Комментарий"		, "Строка");
	НовСтр.Курс 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Курс"				, "Число");
	НовСтр.Сумма 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Сумма"				,  "Число");
	
	НовСтр.Контрагент		= лКонтрагент;
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Склады") Тогда
		
		Склады = ДокументXDTO.Склады;
		Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(Склады, "Склад") Тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Документ>.<Склады>.<Склад> документа XML: " + лНомер + "от " + лДата + "", ПараметрыОбмена);
		Иначе
			Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(Склады.Склад) тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Документ>.<Склады> документа XML: " + лНомер + "от " + лДата + ". Указано несколько складов. Будет взят первый.", ПараметрыОбмена);
				лСкладXDTO			=  Склады.Склад[0];
				лСклад 				= ОбработатьИнформациюОСкладеXDTO(ПараметрыОбмена, лСкладXDTO, лНомер);
				НовСтр.Склад		= лСклад;
			иначе
				лСкладXDTO 			=  Склады.Склад;
				лСклад 				= ОбработатьИнформациюОСкладеXDTO(ПараметрыОбмена, лСкладXDTO, лНомер);
				НовСтр.Склад		= лСклад;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Основание") Тогда
		
		НовСтр.Основание = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству( ДокументXDTO, "Основание",		  "Строка");
	Иначе
		Если ДокументXDTO.ХозОперация = "Отпуск товара" тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Для отгрузки с номером: " + лНомер + "от " + лДата + " не указано основание.", ПараметрыОбмена);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Налоги") Тогда
		НалогиXDTO = ДокументXDTO.Налоги;
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(НалогиXDTO, "Налог") Тогда
			Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(НалогиXDTO.Налог) тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Документ>.<Налоги> документа XML: " + лНомер + "от " + лДата + ". Указано несколько НДС. Будет взят первый.", ПараметрыОбмена);
				НалогXDTO			= НалогиXDTO.Налог[0];
				НовСтр.НДСВСумме 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(НалогXDTO, "УчтеноВСумме",	  "Булево");
				НовСтр.СуммаНДС 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(НалогXDTO, "Сумма",			  "Число");
			иначе   				
				НалогXDTO = НалогиXDTO.Налог;
				
				НовСтр.НДСВСумме 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(НалогXDTO, "УчтеноВСумме",	  "Булево");
				НовСтр.СуммаНДС 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(НалогXDTO, "Сумма",			  "Число");
			КонецЕсли;	
		Конецесли;
	Иначе
		НовСтр.НДСВСумме 	= Неопределено;
		НовСтр.СуммаНДС 	= 0;
	КонецЕсли;
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Скидки") Тогда
		СкидкиXDTO 		= ДокументXDTO.Скидки;
		НовСтр.Скидки 	= Б_ОбменССайтомСервер.ОбработатьЗначенияСкидокXDTO(ПараметрыОбмена, СкидкиXDTO);
	КонецЕсли;
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "ЗначенияРеквизитов") Тогда
		ЗначенияРеквизитовXDTO 		= ДокументXDTO.ЗначенияРеквизитов;
		НовСтр.ЗначенияРеквизитов 	= Б_ОбменССайтомСервер.ОбработатьЗначенияРеквизитовXDTO(ПараметрыОбмена, ЗначенияРеквизитовXDTO);
	КонецЕсли;
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "ИнформацияОЧеках") Тогда
		ИнформацияОЧекахXDTO 		= ДокументXDTO.ИнформацияОЧеках;
		НовСтр.ИнформацияОЧеках 	= Б_ОбменССайтомСервер.ОбработатьИнформацияОЧекахXDTO(ПараметрыОбмена, ИнформацияОЧекахXDTO);
	КонецЕсли;
	
	НовСтр.Товары		= лТовары;
	
КонецПроцедуры

// Функция - разбирает файл XML с документами
//
// Параметры:
//  ДанныеЗаказов	 - 	 XML файл с документами с сайта 
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Истина, если в файле были документы 
Функция ОбработатьКонтейнеры(ДанныеЗаказов, ПараметрыОбмена)
	
	Если ТипЗнч(ДанныеЗаказов) = Тип("ОбъектXDTO") Тогда
		ДокументыXDTO 	= ДанныеЗаказов;
	Иначе
		ПараметрыОбмена.МояФабрикаXDTO 	= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
		ДокументыXDTO 	= Б_ОбменССайтомСервер.ДанныеЗаказовВXDTO(ПараметрыОбмена, ДанныеЗаказов);
                            
	КонецЕсли;
	
	Если ДокументыXDTO 	= Неопределено Тогда 
		
		Возврат Ложь;
		
	ИначеЕсли НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументыXDTO, "Контейнер") Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Нет документов для обработки", ПараметрыОбмена);
		Возврат Ложь;
		
	КонецЕсли;
	
	МассивДокументовXDTO = Б_ОбменССайтомСервер.ПолучитьМассивОбъектовСпискаXDTO(ДокументыXDTO.Контейнер);
	
	ТзнДокументов = Новый ТаблицаЗначений;
	ТзнДокументов.Колонки.Добавить("Валюта");
	ТзнДокументов.Колонки.Добавить("Время");
	ТзнДокументов.Колонки.Добавить("Дата");
	ТзнДокументов.Колонки.Добавить("Дата1С");
	ТзнДокументов.Колонки.Добавить("Номер");
	ТзнДокументов.Колонки.Добавить("Номер1С");
	ТзнДокументов.Колонки.Добавить("НомерВерсии");
	ТзнДокументов.Колонки.Добавить("ЗначенияРеквизитов");
	ТзнДокументов.Колонки.Добавить("ИнформацияОЧеках");
	ТзнДокументов.Колонки.Добавить("Основание");
	ТзнДокументов.Колонки.Добавить("Ид");
	ТзнДокументов.Колонки.Добавить("Комментарий");
	ТзнДокументов.Колонки.Добавить("Курс");
	ТзнДокументов.Колонки.Добавить("Контрагент");
	ТзнДокументов.Колонки.Добавить("ПометкаУдаления");
	ТзнДокументов.Колонки.Добавить("Склад");
	ТзнДокументов.Колонки.Добавить("Сумма");
	ТзнДокументов.Колонки.Добавить("Товары");
	ТзнДокументов.Колонки.Добавить("ХозОперация");
	ТзнДокументов.Колонки.Добавить("НДСВСумме");
	ТзнДокументов.Колонки.Добавить("СуммаНДС");
	ТзнДокументов.Колонки.Добавить("Скидки");
	
	Результат = Ложь;
	
	Для Каждого КонтейнерXDTO Из МассивДокументовXDTO Цикл
		
		Результат = Истина;
		
		Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(КонтейнерXDTO.Документ) тогда
			Для Каждого ДокументXDTO Из КонтейнерXDTO.Документ Цикл
				ЗагрузитьДокументы(ПараметрыОбмена, ТзнДокументов, ДокументXDTO);
			КонецЦикла;
		Иначе	
			ЗагрузитьДокументы(ПараметрыОбмена, ТзнДокументов, КонтейнерXDTO.Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	СоздатьОбновитьТиповыеДокументы(ПараметрыОбмена, ТзнДокументов);	
	
	Возврат Результат;
	
КонецФункции

// Функция - получает информацию о контрагенте из соответствующего объекта XDTO
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  КонтрагентXDTO	 - 	 Объект XDTO хранящий информацию о контрагенте 
//  НомерДокумента	 - 	 Номер документа с сайта 
// Возвращаемое значение:
//   - 
Функция ОбработатьИнформациюОКонтрагентеXDTO(ПараметрыОбмена, КонтрагентXDTO, НомерДокумента)
	
	СтрИнформацияОКонтрагенте = Новый Структура;
	
	Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Ид") Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Контрагент>.<Ид> документа XML: " + НомерДокумента + ". Контрагент не будет создан.", ПараметрыОбмена);
		
		Возврат Неопределено;

	КонецЕсли;		
	
	СтрИнформацияОКонтрагенте.Вставить("Ид"						, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Ид"						, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("НомерВерсии"			, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "НомерВерсии"				, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("ПометкаУдаления"		, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "ПометкаУдаления"			, "Булево"));
	СтрИнформацияОКонтрагенте.Вставить("Наименование"			, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Наименование"				, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("Фамилия"				, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Фамилия"					, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("Имя"					, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Имя"						, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("Отчество"				, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Отчество"					, "Строка"));
	
	лОфициальноеНаименование    = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "ОфициальноеНаименование"	, "Строка");
	лПолноеНаименование			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "ПолноеНаименование"		, "Строка");
	лИНН 						= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "ИНН"						, "Строка");
	
	Если ЗначениеЗаполнено(лОфициальноеНаименование) тогда
		СтрИнформацияОКонтрагенте.Вставить("НаименованиеПолное"	, лОфициальноеНаименование);
		СтрИнформацияОКонтрагенте.Вставить("ЮрФизЛицо"			, ?(СтрДлина(лИНН) >10, Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, Перечисления.ЮрФизЛицо.ЮрЛицо));
	Иначе
		
		Если ПараметрыОбмена.ИспользоватьФИОДляФизЛиц тогда
			
			лПолноеНаименование = "";
			
			Если ЗначениеЗаполнено(СтрИнформацияОКонтрагенте.Фамилия) Тогда
				лПолноеНаименование = СтрИнформацияОКонтрагенте.Фамилия;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрИнформацияОКонтрагенте.Имя) Тогда
				лПолноеНаименование = СокрЛП(лПолноеНаименование + " " + Строка(СтрИнформацияОКонтрагенте.Имя));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрИнформацияОКонтрагенте.Отчество) Тогда
				лПолноеНаименование = СокрЛП(лПолноеНаименование + " " + Строка(СтрИнформацияОКонтрагенте.Отчество));
			КонецЕсли;
		КонецЕсли;
		
		СтрИнформацияОКонтрагенте.Вставить("НаименованиеПолное"	, лПолноеНаименование);
		СтрИнформацияОКонтрагенте.Вставить("ЮрФизЛицо"			, ?(СтрДлина(лИНН) >10, Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, Перечисления.ЮрФизЛицо.ФизЛицо));
	КонецЕсли;
	
	СтрИнформацияОКонтрагенте.Вставить("ИНН"					, лИНН);
	СтрИнформацияОКонтрагенте.Вставить("КПП"					, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "КПП"		 , "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("КодПоОКПО"				, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "КодПоОКПО", "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("Контакты",);
	
	тзнРасчетныеСчета = Новый ТаблицаЗначений;
	тзнРасчетныеСчета.Колонки.Добавить("НомерСчета");
	тзнРасчетныеСчета.Колонки.Добавить("БанкКорреспондент");
	тзнРасчетныеСчета.Колонки.Добавить("Банк");
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета") Тогда
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
			РасчетныйСчет = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
			Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(РасчетныйСчет) тогда
				Для каждого ТекСчет из РасчетныйСчет Цикл
					НовРасчтСчет 					= тзнРасчетныеСчета.Добавить();
					НовРасчтСчет.НомерСчета 		= ТекСчет.НомерСчета;
					
					Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТекСчет, "БанкКорреспондент") тогда
						НовРасчтСчет.БанкКорреспондент 	= ОбработатьИнформациюОБанкеXDTO(ТекСчет.БанкКорреспондент);
					КонецЕсли;
					Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТекСчет, "Банк") тогда
						НовРасчтСчет.Банк		 		= ОбработатьИнформациюОБанкеXDTO(ТекСчет.Банк);
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				НовРасчтСчет 					= тзнРасчетныеСчета.Добавить();
				НовРасчтСчет.НомерСчета 		= РасчетныйСчет.НомерСчета; 
				
				Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(РасчетныйСчет, "БанкКорреспондент") тогда
					НовРасчтСчет.БанкКорреспондент 	= ОбработатьИнформациюОБанкеXDTO(РасчетныйСчет.БанкКорреспондент);
				КонецЕсли;
				Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(РасчетныйСчет, "Банк") тогда
					НовРасчтСчет.Банк		 		= ОбработатьИнформациюОБанкеXDTO(РасчетныйСчет.Банк);
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если тзнРасчетныеСчета.Количество() > 0 тогда
		СтрИнформацияОКонтрагенте.Вставить("БанковскиеСчета", тзнРасчетныеСчета);
	Иначе
		СтрИнформацияОКонтрагенте.Вставить("БанковскиеСчета", Неопределено);
	КонецЕсли;
	
	лКонтакты = ОбработатьКонтактнуюИнформациюКонтрагентаXDTO(ПараметрыОбмена, КонтрагентXDTO, СтрИнформацияОКонтрагенте.ЮрФизЛицо);
	
	Если лКонтакты.Количество() > 0 тогда
		СтрИнформацияОКонтрагенте.Вставить("Контакты", лКонтакты);
	Иначе
		СтрИнформацияОКонтрагенте.Вставить("Контакты", Неопределено);
	КонецЕсли;
	
	лКонтактныеЛица = ОбработатьКонтактныеЛицаКонтрагентаXDTO(КонтрагентXDTO);
	
	Если лКонтактныеЛица.Количество() > 0 тогда
		СтрИнформацияОКонтрагенте.Вставить("КонтактныеЛица", лКонтактныеЛица);
	Иначе
		СтрИнформацияОКонтрагенте.Вставить("КонтактныеЛица", Неопределено);
	КонецЕсли;
	
	Возврат СтрИнформацияОКонтрагенте;
	
КонецФункции

// Функция - получае информацию о банке из соответствующего объекта XDTO
//
// Параметры:
//  БанкXDTO - 	 Объект XDTO хранящий информацию о банке 
// Возвращаемое значение:
//   Структура с информацией о банке 
Функция ОбработатьИнформациюОБанкеXDTO(БанкXDTO)
	
	стрИнформацияОБанке = Новый Структура;
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(БанкXDTO, "Адрес") Тогда
		стрИнформацияОБанке.Вставить("Адрес", Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(БанкXDTO.Адрес, "Представление"	, "Строка"));	
	Иначе
		стрИнформацияОБанке.Вставить("Адрес", Неопределено);	
	КонецЕсли;
	
	стрИнформацияОБанке.Вставить("БИК"					, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(БанкXDTO, "БИК"					, "Строка"));
	стрИнформацияОБанке.Вставить("Наименование"			, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(БанкXDTO, "Наименование"			, "Строка"));
	стрИнформацияОБанке.Вставить("СчетКорреспондентский", Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(БанкXDTO, "СчетКорреспондентский"	, "Строка"));
	
	Возврат стрИнформацияОБанке;
	
КонецФункции

// Функция - получает информацию о контактной информации контрагента из соответствующего объекта XDTO
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  КонтрагентXDTO	 - 	 Объект XDTO хранящий информацию о контрагенте 
//  ЮрФизЛицо		 - 	 Тип контрагента
// Возвращаемое значение:
//   Таблица значений с контактной информацией о контрагенте 
Функция ОбработатьКонтактнуюИнформациюКонтрагентаXDTO(ПараметрыОбмена, КонтрагентXDTO, ЮрФизЛицо)
	
	тзнКонтакты = Новый ТаблицаЗначений;
	
	тзнКонтакты.Колонки.Добавить("ТипВидКонтактнойИнформации");
	тзнКонтакты.Колонки.Добавить("Представление");
	тзнКонтакты.Колонки.Добавить("АдресныеПоля");
	тзнКонтакты.Колонки.Добавить("ТипКонтрагента");
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо тогда
		тзнСоответствийАдресов = ПараметрыОбмена.СоответствиеАдресовЮрЛиц;
	Иначе
		тзнСоответствийАдресов = ПараметрыОбмена.СоответствиеАдресовФизЛиц;
	КонецЕсли;
	
	Для Каждого ТекСтр из тзнСоответствийАдресов Цикл
		
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, ТекСтр.НаименованиеПоля) Тогда
			лАдрес = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(КонтрагентXDTO[ТекСтр.НаименованиеПоля], "Представление"	, "Строка");
			Если ЗначениеЗаполнено(лАдрес) тогда
				
				НовСтр 	= тзнКонтакты.Добавить();
				
				НовСтр.ТипВидКонтактнойИнформации	= ТекСтр.ВидКонтактнойИнформации;
				НовСтр.ТипКонтрагента				= ТекСтр.Тип;
				НовСтр.Представление				= лАдрес;
				НовСтр.АдресныеПоля					= ОбработатьАдресныеПоляXDTO(КонтрагентXDTO[ТекСтр.НаименованиеПоля]);
				                  
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") Тогда
		
		Контакты = КонтрагентXDTO.Контакты;
		Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(Контакты.Контакт) тогда
			Для каждого ТекКонтакт из Контакты.Контакт Цикл
				
				лАдрес = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекКонтакт, "Значение"	, "Строка");
				Если ЗначениеЗаполнено(лАдрес) тогда
					
					НовСтрП = тзнКонтакты.Добавить();
					НовСтрК	= тзнКонтакты.Добавить();
					
					НовСтрП.ТипКонтрагента	= "Контрагент"; 
					НовСтрК.ТипКонтрагента	= "Партнер"; 
					
					Если  ТекКонтакт.Тип = "Электронная почта" ИЛИ ТекКонтакт.Тип 	= "Почта" тогда
						НовСтрП.ТипВидКонтактнойИнформации	= "Почта"; 
						НовСтрК.ТипВидКонтактнойИнформации	= "Почта"; 
						
					ИначеЕсли  ТекКонтакт.Тип = "Телефон рабочий" ИЛИ ТекКонтакт.Тип = "ТелефонРабочий" тогда
						НовСтрП.ТипВидКонтактнойИнформации	= "Телефон"; 
						НовСтрК.ТипВидКонтактнойИнформации	= "Телефон"; 
					КонецЕсли;	
					
					НовСтрП.Представление	= лАдрес;
					НовСтрК.Представление	= лАдрес;
					
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			ТекКонтакт = Контакты.Контакт;
			лАдрес = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекКонтакт, "Значение"	, "Строка");
			Если ЗначениеЗаполнено(лАдрес) тогда
				
				НовСтрП = тзнКонтакты.Добавить();
				НовСтрК	= тзнКонтакты.Добавить();
				
				НовСтрП.ТипКонтрагента	= "Контрагент"; 
				НовСтрК.ТипКонтрагента	= "Партнер"; 
				
				Если  ТекКонтакт.Тип 		= "Электронная почта" ИЛИ ТекКонтакт.Тип 	= "Почта" тогда
					НовСтрП.ТипВидКонтактнойИнформации	= "Почта";
					НовСтрК.ТипВидКонтактнойИнформации	= "Почта";
				ИначеЕсли  ТекКонтакт.Тип 	= "Телефон рабочий" ИЛИ ТекКонтакт.Тип 	= "ТелефонРабочий" тогда
					НовСтрП.ТипВидКонтактнойИнформации	= "Телефон";
					НовСтрК.ТипВидКонтактнойИнформации	= "Телефон";
 				КонецЕсли;	
				                                          
				НовСтрП.Представление		= лАдрес;
				НовСтрК.Представление		= лАдрес;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Конецесли;
	
	Возврат тзнКонтакты;

КонецФункции

// Функция - получает информацию о контактных лицах контрагента из соответствующего объекта XDTO
//
// Параметры:
//  КонтрагентXDTO	 - 	 Объект XDTO хранящий информацию о контрагенте 
// Возвращаемое значение:
//   Таблица значений с контактными лицами контрагента 
Функция ОбработатьКонтактныеЛицаКонтрагентаXDTO(КонтрагентXDTO)
	
	тзнКонтактныеЛица = Новый ТаблицаЗначений;
	
	тзнКонтактныеЛица.Колонки.Добавить("Ид");
	тзнКонтактныеЛица.Колонки.Добавить("Наименование");
	тзнКонтактныеЛица.Колонки.Добавить("Отношение");
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители") Тогда
		Представители = КонтрагентXDTO.Представители;
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(Представители, "Представитель") Тогда
			Представитель = Представители.Представитель;

			Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(Представитель) тогда
				Для каждого ТекПредставитель из Представитель Цикл
					
					НовСтр 				= тзнКонтактныеЛица.Добавить();
					НовСтр.Ид 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекПредставитель, "Ид"			, "Строка");
					НовСтр.Наименование = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекПредставитель, "Наименование"	, "Строка");
					НовСтр.Отношение 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекПредставитель, "Отношение"		, "Строка");
					
				КонецЦикла;
			Иначе
				
				НовСтр 				= тзнКонтактныеЛица.Добавить();
				НовСтр.Ид 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(Представитель.Контрагент, "Ид"				, "Строка");
				НовСтр.Наименование = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(Представитель.Контрагент, "Наименование"	, "Строка");
				НовСтр.Отношение 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(Представитель.Контрагент, "Отношение"		, "Строка");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат тзнКонтактныеЛица; 
	
КонецФункции

// Функция - получает информацию о складе из соответствующего объекта XDTO
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  СкладXDTO		 - 	 Объект XDTO хранящий информацию о складе  
//  НомерДокумента	 - 	 Номер документа с сайта 
// Возвращаемое значение:
//   Структура с информацией о складе 
Функция ОбработатьИнформациюОСкладеXDTO(ПараметрыОбмена, СкладXDTO, НомерДокумента)
	
	стрИнформацияОСкладе = Новый Структура;
	
	стрИнформацияОСкладе.Вставить("Ид"			, Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(СкладXDTO, "Ид"						, "Строка"));
	стрИнформацияОСкладе.Вставить("Наименование", Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(СкладXDTO, "Наименование"				, "Строка"));
	
	
	Возврат стрИнформацияОСкладе;
	
КонецФункции






// Функция - получает информацию о заказанных позициях(товар, количество, цена, сцмма и тд.) документа из соответствующего объекта XDTO
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ТоварыXDTO		 - 	 Объект XDTO хранящий информацию о товарах документа 
//  НомерДокумента	 - 	 Номер документа с сайта 
// Возвращаемое значение:
//   Таблица значений с информацией о товарах документа с сайта 
Функция ОбработатьИнформациюОТабличнойЧастиДокументаXDTO(ПараметрыОбмена, ТзнДокументов, ДокументXDTO)
	
	ТоварыXDTO = ДокументXDTO.Товары;
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Основание") Тогда
		лОснование = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству( ДокументXDTO, "Основание",  "Строка");
	Иначе
		лОснование = "";
	КонецЕсли;
	
	тзнТовары = Новый ТаблицаЗначений;
	тзнТовары.Колонки.Добавить("Ид");
	тзнТовары.Колонки.Добавить("Наименование");
	тзнТовары.Колонки.Добавить("СтавкаНДСТовара");
	тзнТовары.Колонки.Добавить("Коэффициент");
	тзнТовары.Колонки.Добавить("Количество");
	тзнТовары.Колонки.Добавить("Цена");
	тзнТовары.Колонки.Добавить("Сумма");
	тзнТовары.Колонки.Добавить("Единица");
	тзнТовары.Колонки.Добавить("НаименованиеНалога");
	тзнТовары.Колонки.Добавить("СуммаНДС");
	тзнТовары.Колонки.Добавить("УчтеноВСумме");
	тзнТовары.Колонки.Добавить("ЗначенияРеквизитов");
	тзнТовары.Колонки.Добавить("Скидки");
	тзнТовары.Колонки.Добавить("КодСтроки");
	
	Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварыXDTO, "Товар") Тогда
		Возврат тзнТовары;
	Иначе
		
		лКодСтроки = 1;    //для старых модулей, где нет номеров позиций товаров
		
		Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(ТоварыXDTO.Товар) тогда
			
			Для каждого ТекТовар из ТоварыXDTO.Товар Цикл
				
				Если НРег(ДокументXDTO.ХозОперация) = "заказ товара" тогда				
					лКодСтроки = лКодСтроки + 1;  				
				Иначе
					
					НайденныеСтроки = ТзнДокументов.НайтиСтроки(Новый Структура("ХозОперация, Номер", "Заказ товара", лОснование));
					Если НайденныеСтроки.Количество() > 0 тогда
						
						НашиТовары = НайденныеСтроки[0].Товары;
						
						идТовара = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекТовар, "Ид", "Строка");
						
						НайденнаяСтрока = НашиТовары.Найти(идТовара,"Ид");
 
						Если НайденнаяСтрока = Неопределено Тогда
							лКодСтроки = лКодСтроки + 1;  				
						Иначе
						    лКодСтроки = НайденнаяСтрока.КодСтроки;
						КонецЕсли;

					Иначе
						лКодСтроки = лКодСтроки + 1;  				
					КонецЕсли;
					
				КонецЕсли;
				
				ОбработатьИнформациюОТовареДокументаXDTO(ПараметрыОбмена, ТекТовар, тзнТовары, лКодСтроки);	
				
			КонецЦикла; 			
		Иначе
			ОбработатьИнформациюОТовареДокументаXDTO(ПараметрыОбмена, ТоварыXDTO.Товар, тзнТовары, лКодСтроки);	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат тзнТовары;	
КонецФункции

// Функция - получает информацию о заказанных товарах документа из соответствующего объекта XDTO
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ТоварыXDTO		 - 	 Объект XDTO хранящий информацию о товарах документа 
//  тзнТовары		 - 	 Таблица значений с информацией о товарах документа с сайта  
//  НомерДокумента	 - 	 Номер документа с сайта 
Процедура ОбработатьИнформациюОТовареДокументаXDTO(ПараметрыОбмена, ТоварXDTO, тзнТовары, КодСтроки)
	
	Если НЕ Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка в значении узла <Документ>.<Товары>.<Товар>.<Ид> документа XML. Товар в документ не будет добавлен.", ПараметрыОбмена);
	Иначе
		
		НовСтр = тзнТовары.Добавить();
		
		НовСтр.Ид 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Ид"			, "Строка"); 
		НовСтр.Наименование = Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Наименование"	, "Строка");
		НовСтр.Количество 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Количество"	, "Число");             
		НовСтр.Коэффициент 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Коэффициент"	, "Число");             
		НовСтр.Цена 		= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТоварXDTO, "ЦенаЗаЕдиницу"	, "Число");             
		НовСтр.Сумма 		= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Сумма"			, "Число");             
		
		
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов") Тогда
			ЗначенияРеквизитовXDTO 		= ТоварXDTO.ЗначенияРеквизитов;
			НовСтр.ЗначенияРеквизитов 	= Б_ОбменССайтомСервер.ОбработатьЗначенияРеквизитовXDTO(ПараметрыОбмена, ЗначенияРеквизитовXDTO);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовСтр.ЗначенияРеквизитов) тогда
			
			НайденнаяСтрока = НовСтр.ЗначенияРеквизитов.Найти("НомерПозицииКорзины","Наименование");
			
			Если НайденнаяСтрока = Неопределено Тогда
				НовСтр.КодСтроки = КодСтроки;    
			Иначе
			    НовСтр.КодСтроки = XMLЗначение(Тип("Число"), НайденнаяСтрока.Значение);
			КонецЕсли;		
			
		Иначе
			НовСтр.КодСтроки 	= КодСтроки;    
		КонецЕсли;
		
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварXDTO, "Налоги") Тогда
			Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварXDTO.Налоги, "Налог") Тогда
				
				НалогXDTO 	= ТоварXDTO.Налоги.Налог;
				
				НовСтр.НаименованиеНалога	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(НалогXDTO, "Наименованние"	, "Строка");
				НовСтр.СуммаНДС 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(НалогXDTO, "Сумма"			, "Число");             
				НовСтр.УчтеноВСумме			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(НалогXDTO, "УчтеноВСумме"	, "Булево");             
				
			КонецЕсли;
		КонецЕсли;
		
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварXDTO, "СтавкиНалогов") Тогда
			Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварXDTO.СтавкиНалогов, "СтавкаНалога") Тогда
				
				СтавкаНалогаXDTO 		= ТоварXDTO.СтавкиНалогов.СтавкаНалога;
				
				лСтрокойНДС 			= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(СтавкаНалогаXDTO, "Ставка"		, "Строка");
				НовСтр.СтавкаНДСТовара 	= Б_ОбменССайтомСервер.ПолучитьНДСПоставке(лСтрокойНДС);
			КонецЕсли;
		КонецЕсли;
		
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварXDTO, "Единица") Тогда
			
			ЕдиницаXDTO 		= ТоварXDTO.Единица;
			стрЕдиницыИзмерения = Новый Структура;
			
			стрЕдиницыИзмерения.Вставить("Ид"					,Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЕдиницаXDTO, "Ид"					, "Строка"));
			стрЕдиницыИзмерения.Вставить("Код"					,Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЕдиницаXDTO, "Код"					, "Строка"));
			стрЕдиницыИзмерения.Вставить("НаименованиеКраткое"	,Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЕдиницаXDTO, "НаименованиеКраткое"	, "Строка"));
			стрЕдиницыИзмерения.Вставить("НаименованиеПолное"	,Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ЕдиницаXDTO, "НаименованиеПолное"	, "Строка"));
			
			НовСтр.Единица = стрЕдиницыИзмерения
		КонецЕсли;
		
		Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(ТоварXDTO, "Скидки") Тогда
			ЗначенияРеквизитовXDTO 		= ТоварXDTO.Скидки;
			НовСтр.Скидки 	= Б_ОбменССайтомСервер.ОбработатьЗначенияСкидокXDTO(ПараметрыОбмена, ЗначенияРеквизитовXDTO);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Функция - получает информацию о адресных полях из соответствующего объекта XDTO
//
// Параметры:
//  XDTOАдрес	 - 	 Объект XDTO хранящий информацию о адресных полях  
// Возвращаемое значение:
//   Таблица значений с адресными полями  
Функция ОбработатьАдресныеПоляXDTO(XDTOАдрес)	
	
	тзнАдресныеПоля = Новый ТаблицаЗначений;
	тзнАдресныеПоля.Колонки.Добавить("Значение");
	тзнАдресныеПоля.Колонки.Добавить("ТипЗначения");
	
	Если Б_ОбменССайтомСервер.ОбъектXDTOСодержитСвойство(XDTOАдрес, "АдресноеПоле") тогда
	
		АдресноеПоле = XDTOАдрес.АдресноеПоле;
		Если Б_ОбменССайтомСервер.ЭтоСписокXDTO(АдресноеПоле) тогда
			
			Для каждого ТекАдресноеПоле из АдресноеПоле Цикл
				
				НовСтр = тзнАдресныеПоля.Добавить();
				НовСтр.ТипЗначения 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекАдресноеПоле, "Тип"			, "Строка");
				НовСтр.Значение 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(ТекАдресноеПоле, "Значение"	, "Строка");
				
			КонецЦикла;
			
		Иначе
			
			НовСтр = тзнАдресныеПоля.Добавить();
			НовСтр.ТипЗначения 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(АдресноеПоле, "Тип"				, "Строка");
			НовСтр.Значение 	= Б_ОбменССайтомСервер.ПолучитьЗначениеПоСвойству(АдресноеПоле, "Значение"			, "Строка");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат тзнАдресныеПоля;
	
КонецФункции

Функция ПроверитьЗагружаемостьОплаты(ПараметрыОбмена, ВидДокумента)
	
	НайденноеЗначение = ПараметрыОбмена.ЗагружаемыеТипыОплат.НайтиПоЗначению(ВидДокумента);
	
	Если НайденноеЗначение = Неопределено тогда
		Результат = Ложь;	
	Иначе
		Результат = НайденноеЗначение.Пометка;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - создает/обновляет документы в 1С, на основе данных, пришедших с сайта
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ТзнДокументов	 - 	 Таблица значений, хранящая данные о документах с сайта 
// Возвращаемое значение:
//   - 
Функция СоздатьОбновитьТиповыеДокументы(ПараметрыОбмена, ТзнДокументов)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокИдДокументов"			, ТзнДокументов.ВыгрузитьКолонку("Ид"));
	
	лКоличествоСтрок 	= ПараметрыОбмена.ДокументыЗагрузки.Количество()-1; 	
	Для Итератор = 0 по лКоличествоСтрок Цикл
		ТекВидДокумента = ПараметрыОбмена.ДокументыЗагрузки[Итератор]; 
		лВидДокумента = ТекВидДокумента.ВидДокумента;
		Если Итератор = 0 тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Документ.Ссылка КАК Ссылка,
			|	"""+лВидДокумента+""" КАК ТипДокумента,
			|	Документ.Б_НомерВерсии,
			|	Документ.Б_Идентификатор КАК Б_Идентификатор
			|ПОМЕСТИТЬ ВремДокументы
			|ИЗ
			|	Документ."+ТекВидДокумента.Документ+" КАК Документ
			|ГДЕ
			|	Документ.Б_Идентификатор В(&СписокИдДокументов)";
		ИначеЕсли ((лВидДокумента = "Отпуск товара" И ПараметрыОбмена.ЗагрузкаОтгрузок) 
			ИЛИ ((лВидДокумента = "Выплата наличных денег" И ПараметрыОбмена.ЗагрузкаОплат) 
			ИЛИ (лВидДокумента = "Эквайринговая операция" И ПараметрыОбмена.ЗагрузкаОплат) 
			ИЛИ (лВидДокумента = "Выплата безналичных денег" И ПараметрыОбмена.ЗагрузкаОплат))
			И ПроверитьЗагружаемостьОплаты(ПараметрыОбмена, лВидДокумента)) тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|  ВЫБРАТЬ
			|	Документ.Ссылка КАК Ссылка,
			|	"""+лВидДокумента+""" КАК ТипДокумента,
			|	Документ.Б_НомерВерсии,
			|	Документ.Б_Идентификатор КАК Б_Идентификатор
			|ИЗ
			|	Документ."+ТекВидДокумента.Документ+" КАК Документ
			|ГДЕ
			|	Документ.Б_Идентификатор В(&СписокИдДокументов)";
		КонецЕсли;
		
		Если Итератор = лКоличествоСтрок тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ТипДокумента,	
			|	Б_Идентификатор";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	              
	Для каждого ТекДокумент из ТзнДокументов Цикл
		
		Если ТекДокумент.ХозОперация = "Отпуск товара" И НЕ ПараметрыОбмена.ЗагрузкаОтгрузок тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Отгрузка с номером:" + ТекДокумент.Номер + " не будет загружена, т.к. в настройках стоит, ччобы отгрузки не загружались.", ПараметрыОбмена);
			Продолжить;	
		КонецЕсли;
		
		Если ТекДокумент.ХозОперация = "Выплата наличных денег" ИЛИ ТекДокумент.ХозОперация = "Выплата безналичных денег" ИЛИ ТекДокумент.ХозОперация = "Эквайринговая операция" тогда
			Если НЕ ПараметрыОбмена.ЗагрузкаОплат тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Оплата с номером:" + ТекДокумент.Номер + " не будет загружена, т.к. в настройках стоит, чтобы оплаты не загружались.", ПараметрыОбмена);
				Продолжить;	
			КонецЕсли;
			
			Если ПроверитьЗагружаемостьОплаты(ПараметрыОбмена, ТекДокумент.ХозОперация) = Ложь тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Оплата с номером:" + ТекДокумент.Номер + " не будет загружена, т.к. в настройках стоит индивидуальная настройка, чтобы оплаты этого типа не загружались.", ПараметрыОбмена);
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		
		НайденнаяСтрока = ПараметрыОбмена.ДокументыЗагрузки.Найти(ТекДокумент.ХозОперация, "ВидДокумента");

		Если НайденнаяСтрока = Неопределено тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("ОШИБКА!!! Не определено, с каким документом 1С сопоставлять документ XML с типом:" + ТекДокумент.ХозОперация, ПараметрыОбмена);
			Продолжить;	
		КонецЕсли;
		
		ИмяДокумента 	= НайденнаяСтрока.Документ;

	    Документ = Б_ОбменССайтомСервер.ПолучитьДокументПоКоду(ИмяДокумента, ТекДокумент.Номер1С, ТекДокумент.Дата1С, ТекДокумент.Ид, ТекДокумент.ХозОперация, МенеджерВременныхТаблиц);
		
		Если НЕ Документ.Пустая() тогда
			
			Если ТекДокумент.НомерВерсии <> Документ.Б_НомерВерсии тогда
				
				Если НЕ ПараметрыОбмена.НеРедактироватьДокументыПришедшиеССайта тогда
					СоздатьОбновитьДокумент(ПараметрыОбмена, ИмяДокумента, ТекДокумент, Ложь, Документ);
				Иначе
					Б_ОбменССайтомСервер.СообщитьПодробно("Стоит настройка, чтобы документы в 1С не обновлялись. Документ: " + Строка(Документ.Ссылка) + " будет пропущен.", ПараметрыОбмена);
				КонецЕсли;
			Иначе
				Б_ОбменССайтомСервер.СообщитьПодробно("С последней загрузки из БУС документ: " + Строка(Документ.Ссылка) + " не менялся. Документ будет пропущен.", ПараметрыОбмена);
			КонецЕсли;
		Иначе
			СоздатьОбновитьДокумент(ПараметрыОбмена, ИмяДокумента, ТекДокумент, Истина);
		КонецЕсли;
		
	КонецЦикла;	
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецФункции

// Процедура - Создать обновить документ
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  НазваниеДокумента	 - 	 Имя документа в конфигураторе 
//  ДокументXML			 - 	 Строка таблицы значений, хранящая данные о документе 
//  НовыйДокумент		 - 	 Признак того, что нужно создать новый документ 
//  СсылкаНаДокумент	 - 	 Ссыла на документ, который нужно обновить. По умолчанию "Неопределено" 
Процедура СоздатьОбновитьДокумент(ПараметрыОбмена, НазваниеДокумента, ДокументXML, НовыйДокумент, СсылкаНаДокумент = Неопределено)
	
	Если НовыйДокумент И НЕ ДокументXML.ПометкаУдаления = ИСТИНА тогда
		Документ = Документы[НазваниеДокумента].СоздатьДокумент();	
	ИначеЕсли НовыйДокумент И ДокументXML.ПометкаУдаления = ИСТИНА тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("Помеченный на удаление документ  '"+ НазваниеДокумента + "' не загружаем.", ПараметрыОбмена);
		Возврат;   
	Иначе             
		Документ = СсылкаНаДокумент.ПолучитьОбъект();  		
	КонецЕсли;   
	
	Если ДокументXML.ПометкаУдаления = ИСТИНА тогда
		
		Попытка 
			Документ.УстановитьПометкуУдаления(Истина);
			Б_ОбменССайтомСервер.СообщитьПодробно("Помечен на удаление документ:" + Строка(Документ.Ссылка), ПараметрыОбмена);
		Исключение
			Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось удалить документ:" + Строка(Документ.Ссылка), ПараметрыОбмена);
		КонецПопытки;
				
		Возврат;

	КонецЕсли;
	
	ВремТабТЧ = ПараметрыОбмена.ВсеСоответствияТабличныхЧастейДокументов.Скопировать();
	ВремТабТЧ.Свернуть("ТабличнаяЧасть, Документ, ПолеXML");
	
	мНастройкиДокумента	= ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ПараметрыОбмена.ДокументыЗагрузки);
	мРеквизитыДокумента = ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ПараметрыОбмена.ВсеСоответствияШапокДокументов);
	мТабличныеЧасти		= ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ВремТабТЧ); 
	мРеквизитыТЧ		= ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ПараметрыОбмена.ВсеСоответствияТабличныхЧастейДокументов);
	
	Если мНастройкиДокумента.Количество() = 0 тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("У документа " + НазваниеДокумента + " не найдены основные параметры документа в настройках соответствий. Загрузка документа невозможна.", ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеНастройкиДокумента = мНастройкиДокумента[0];
	
	Для Каждого ТекРеквизит из мРеквизитыДокумента Цикл
																																																										
		Если НЕ ПустаяСтрока(ТекРеквизит.Значение) тогда
			
			Документ[ТекРеквизит.НаименованиеРеквизита1С] = ПолучитьЗначениеРеквизитаДокументаПоСоответствию(ПараметрыОбмена, ДокументXML, Документ, ОсновныеНастройкиДокумента, ТекРеквизит);	
			
		КонецЕсли;
			
	КонецЦикла;
	
	ДокументОтменен = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Отменен");
	ДокументОтменен = ?((ДокументОтменен = Неопределено ИЛИ ДокументОтменен = "false"), Ложь, Истина);
	
	Если ОсновныеНастройкиДокумента.НумерацияДокументов =  "С сайта" тогда
		Документ.Номер = ДокументXML.Номер; 	
	Иначе
		Если НовыйДокумент тогда
			
			Документ.УстановитьНовыйНомер();	
			
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекТабЧасть из мТабличныеЧасти Цикл
		
		СтрараяТабличнаяЧасть = Документ[ТекТабЧасть.ТабличнаяЧасть].Выгрузить();
		
		Документ[ТекТабЧасть.ТабличнаяЧасть].Очистить();
		
		Если ТекТабЧасть.ПолеXML = "" тогда
			
			НовСтрока = Документ[ТекТабЧасть.ТабличнаяЧасть].Добавить();
			
			Для Каждого ТекРеквизитТЧ из мРеквизитыТЧ Цикл
				
				Если НЕ ПустаяСтрока(ТекРеквизитТЧ.Значение) тогда
					
					НовСтрока[ТекРеквизитТЧ.НаименованиеРеквизита1С] = ПолучитьЗначениеРеквизитаДокументаПоСоответствию(ПараметрыОбмена, ДокументXML, Документ, ОсновныеНастройкиДокумента, ТекРеквизитТЧ, , НовСтрока, СтрараяТабличнаяЧасть);	
					
				КонецЕсли;
				
			КонецЦикла;
			
#Область ОсобенностиПКО
			Если НазваниеДокумента = "ПриходныйКассовыйОрдер" тогда

				СтруктураПересчетаСуммы = Новый Структура;
				СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НовСтрока, СтруктураДействий, Неопределено);
			КонецЕсли;	
#КонецОбласти

		Иначе
			
			Для каждого ТекСтрокаТЗ из ДокументXML[ТекТабЧасть.ПолеXML] Цикл
				
				Если ДокументXML[ТекТабЧасть.ПолеXML].Колонки.Найти("Количество") <> Неопределено тогда
					Если ТекСтрокаТЗ.Количество = 0 тогда
						Продолжить;	
					КонецЕсли;
				
				КонецЕсли;	
				
				Если ТекСтрокаТЗ.Ид = "ORDER_DELIVERY" И ДокументXML.ХозОперация = "Отпуск товара" тогда
					
					СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, ТекСтрокаТЗ);
				
					Если СтрИнформацииОНоменклатуре.Номенклатура = Неопределено тогда
						Продолжить;
					Иначе
						ТоварДоставка = СтрИнформацииОНоменклатуре.Номенклатура;	
						
						Если ТоварДоставка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга тогда
							
							Если НЕ ТоварДоставка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг тогда
								Продолжить;
							КонецЕсли;
							
						КонецЕсли; 
					КонецЕсли;
					
				КонецЕсли;				
				
				НовСтрока = Документ[ТекТабЧасть.ТабличнаяЧасть].Добавить();
				
				Для Каждого ТекРеквизитТЧ из мРеквизитыТЧ Цикл
					
					Если НЕ ПустаяСтрока(ТекРеквизитТЧ.Значение) И ТекРеквизитТЧ.ТабличнаяЧасть = ТекТабЧасть.ТабличнаяЧасть тогда
						
						НовСтрока[ТекРеквизитТЧ.НаименованиеРеквизита1С] = ПолучитьЗначениеРеквизитаДокументаПоСоответствию(ПараметрыОбмена, ДокументXML, Документ, ОсновныеНастройкиДокумента, ТекРеквизитТЧ, ТекСтрокаТЗ, НовСтрока, СтрараяТабличнаяЧасть);	
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТекТабЧасть.ТабличнаяЧасть = "Товары" И (НазваниеДокумента = "ЗаказКлиента" или НазваниеДокумента = "РеализацияТоваровУслуг") тогда
					
					СтруктураДействий = Новый Структура;
					
					ПересчитатьСтрокуДокумента(Документ, НовСтрока);

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
#Область ОсобенностиЗаказовИОтгрузок
	Если НазваниеДокумента = "ЗаказКлиента" или НазваниеДокумента = "РеализацияТоваровУслуг" тогда
		Если ПараметрыОбмена.УстанавливатьРучнуюСкидкуВДокументе Тогда
			Если ДокументXML.Скидки <> Неопределено тогда
				СуммаСкидки = 0;
				Для Каждого СтрокаСкидки Из ДокументXML.Скидки Цикл
					
					Если ЗначениеЗаполнено(СтрокаСкидки.Сумма) И СтрокаСкидки.УчтеноВСумме Тогда

						СуммаСкидки = СуммаСкидки + СтрокаСкидки.Сумма;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаСкидки <> 0 Тогда
					
					Если Документ.Товары.Количество() > 0 Тогда
						РаспределитьСуммуПоКолонке(Документ, Документ.Товары, -СуммаСкидки);
					КонецЕсли;
					
				КонецЕсли;  				
				
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту"					, Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет"		, Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки"	, Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки"					, Неопределено);
		СтруктураПараметры.Вставить("РеализацияСверхЗаказа"				, Ложь);
		
		Если ПараметрыОбмена.ИспользоватьАвтоматическиеСкидкиВПродажах тогда
			СкидкиНаценкиСервер.Рассчитать(Документ, СтруктураПараметры);
		КонецЕсли;
		
		Документ.СуммаДокумента = Документ.Товары.Итог("Сумма");
		
		Если НазваниеДокумента = "ЗаказКлиента" тогда
			Документ.ЗаполнитьЭтапыГрафикаОплаты();
			
			Если ПараметрыОбмена.Свойство("НастройкиСтатусовЗаказа") тогда
				Если ПараметрыОбмена.НастройкиСтатусовЗаказа.ИсточникСтатусов1С = "СвойствоЗаказов" тогда
					
					ИдСтатуса		= ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Статуса заказа ИД");
				                            
					Если ИдСтатуса 	<> Неопределено тогда
					                                    
						НайденноеЗначениеСвойства =ПараметрыОбмена.НастройкиСтатусовЗаказа.СоответствияЗначенийСвойствЗаказа.Найти(ИдСтатуса);
							
						Если НайденноеЗначениеСвойства <> Неопределено тогда
							
							НовоеСвойство = Документ.ДополнительныеРеквизиты.Добавить();
							НовоеСвойство.Свойство = ПараметрыОбмена.НастройкиСтатусовЗаказа.СвойствоЗаказа; 
							НовоеСвойство.Значение = НайденноеЗначениеСвойства.Статус; 
							
						КонецЕсли;
							
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыОбмена.Свойство("НастройкиСлужбДоставкиДокументов") тогда
				Если ПараметрыОбмена.НастройкиСлужбДоставкиДокументов.ИсточникСлужбДоставкиЗаказа = "СвойствоЗаказов" тогда
					
					ИдМетодаДоставки = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Метод доставки ИД");
				                            
					Если ИдМетодаДоставки 	<> Неопределено тогда
					                                    
						НайденноеЗначениеСвойства = ПараметрыОбмена.НастройкиСлужбДоставкиДокументов.СоответствияЗначенийСвойствЗаказа.Найти(ИдМетодаДоставки);
							
						Если НайденноеЗначениеСвойства <> Неопределено тогда
							
							НовоеСвойство = Документ.ДополнительныеРеквизиты.Добавить();
							НовоеСвойство.Свойство = ПараметрыОбмена.НастройкиСлужбДоставкиДокументов.СвойствоЗаказа; 
							НовоеСвойство.Значение = НайденноеЗначениеСвойства.Служба; 
							
						КонецЕсли;
							
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НазваниеДокумента = "РеализацияТоваровУслуг" тогда
			Если ПараметрыОбмена.Свойство("НастройкиСлужбДоставкиДокументов") тогда
				
				ИдМетодаДоставки = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Метод доставки ИД");
				
				Если ИдМетодаДоставки 	<> Неопределено тогда
					
					НайденноеЗначениеСвойства = ПараметрыОбмена.НастройкиСлужбДоставкиДокументов.СоответствияЗначенийСвойствОтгрузки.Найти(ИдМетодаДоставки);
					
					Если НайденноеЗначениеСвойства <> Неопределено тогда
						
						НовоеСвойство = Документ.ДополнительныеРеквизиты.Добавить();
						НовоеСвойство.Свойство = ПараметрыОбмена.НастройкиСлужбДоставкиДокументов.СвойствоОтгрузки; 
						НовоеСвойство.Значение = НайденноеЗначениеСвойства.Служба; 
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Документ.Склад);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Документ.Склад, СкладГруппа, Документ.Товары, Ложь);
		
	КонецЕсли;
#КонецОбласти

	Если ОсновныеНастройкиДокумента.РежимЗаписиДокументов = "Проводить оперативно" тогда
		ДокументСозданИзменен = ЗаписьИПроведениеДокумента(ПараметрыОбмена, Документ, ?(ДокументОтменен, Ложь, Истина), Истина);
	ИначеЕсли ОсновныеНастройкиДокумента.РежимЗаписиДокументов = "Проводить не оперативно" тогда
		ДокументСозданИзменен = ЗаписьИПроведениеДокумента(ПараметрыОбмена, Документ, ?(ДокументОтменен, Ложь, Истина), Ложь);
		
	Иначе
		
		лПроводитьДокумент 		= ПроверкаНаПроведениеПоДополнительнымУсловиям(ПараметрыОбмена, НазваниеДокумента, ДокументОтменен, ДокументXML, Документ);
		ДокументСозданИзменен 	= ЗаписьИПроведениеДокумента(ПараметрыОбмена, Документ, лПроводитьДокумент, Ложь);
			
	КонецЕсли;
	
	Если ДокументСозданИзменен тогда 
		
		Если НазваниеДокумента = "ОперацияПоПлатежнойКарте" ИЛИ НазваниеДокумента = "ПриходныйКассовыйОрдер" тогда
			ЗаполнитьИнформациюОЧеке(Документ.Ссылка, ДокументXML);
		ИначеЕсли НазваниеДокумента = "ЗаказКлиента" тогда 
			
			Если ПараметрыОбмена.Свойство("НастройкиСтатусовЗаказа") тогда
			
				Если ПараметрыОбмена.НастройкиСтатусовЗаказа.ИсточникСтатусов1С = "СостоянияЗаказов" тогда
					
					ИдСтатуса		= ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Статуса заказа ИД");
				                            
					Если ИдСтатуса 	<> Неопределено тогда
					                                    
						НайденноеСостояниеЗаказа = ПараметрыОбмена.НастройкиСтатусовЗаказа.СоответствияСостоянийЗаказа.Найти(ИдСтатуса);
							
						Если НайденноеСостояниеЗаказа <> Неопределено тогда
							НоваяЗапись = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьМенеджерЗаписи();
							НоваяЗапись.Заказ 		= Документ.Ссылка;
							НоваяЗапись.ДатаСобытия = ТекущаяДата();
							НоваяЗапись.Состояние 	= НайденноеСостояниеЗаказа.Статус;
							НоваяЗапись.Записать();
						КонецЕсли;
							
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьСтатусовИУдалениеЗагруженныхДокументов(ПараметрыОбмена, ДокументXML, ОсновныеНастройкиДокумента, Документ, НовыйДокумент, ДокументОтменен);
	КонецЕсли;
	
КонецПроцедуры	

Функция ПроверкаНаПроведениеПоДополнительнымУсловиям(ПараметрыОбмена, НазваниеДокумента, ДокументОтменен, ДокументXML, Документ)
	
	ПроводитьДокумент = Ложь;
	
	Если НазваниеДокумента = "РеализацияТоваровУслуг" И НЕ ДокументОтменен И ПараметрыОбмена.ПроводитьЕслиОтгружен тогда
		
		лОтгружено = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Отгружено");
		лОтгружено = ?((лОтгружено = Неопределено ИЛИ лОтгружено = "false"), Ложь, Истина);
		
		Если лОтгружено = Истина тогда
			Документ.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;     	
			ПроводитьДокумент = Истина;
		КонецЕсли;
		
	ИначеЕсли (НазваниеДокумента = "ПриходныйКассовыйОрдер" ИЛИ НазваниеДокумента = "ОперацияПоПлатежнойКарте") И НЕ ДокументОтменен И ПараметрыОбмена.ПроводитьЕслиОплачен тогда
		
		лОплачено = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Оплачено");
		лОплачено = ?((лОплачено = Неопределено ИЛИ лОплачено = "false"), Ложь, Истина);
		
		Если лОплачено = Истина тогда
			ПроводитьДокумент = Истина;
		КонецЕсли;
		  
	ИначеЕсли (НазваниеДокумента = "ПоступлениеБезналичныхДенежныхСредств") И НЕ ДокументОтменен И ПараметрыОбмена.ПроводитьЕслиОплачен тогда
		
		лОплачено = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Оплачено");
		лОплачено = ?((лОплачено = Неопределено ИЛИ лОплачено = "false"), Ложь, Истина);
		
		Если лОплачено = Истина тогда
			ПроводитьДокумент = Истина;
		КонецЕсли;
		
		лДатаОплаты = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Дата оплаты");
		
		Если ЗначениеЗаполнено(лДатаОплаты) тогда
			
			Документ.ПроведеноБанком = Истина;
			
			Попытка
				Документ.ДатаПроведенияБанком = XMLЗначение(Тип("Дата"),лДатаОплаты); 
			Исключение
				Документ.ДатаПроведенияБанком = Документ.Дата;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПроводитьДокумент;
	
КонецФункции



// Процедура - обновялет свойства документов пришедших из сайта
//
// Параметры:
//  Документ	 - 	 Документ 1С 
//  ДокументXML	 - 	 Строка таблицы значений с содержимым документа с сайта  
//  ТипДокумента - 	 Тип дкоумента (Заказ, Отгрузка, ПКО) 
Процедура ОбновлениеСвойствДокументов(ПараметрыОбмена, Документ, ДокументXML, ТипДокумента)
	
	Если НЕ ДокументXML.ЗначенияРеквизитов = Неопределено тогда
		
		//лМассивПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
		//НайденныйЭлемент 		= лМассивПредопределенных.Найти("Документ_"+ТипДокумента.Документ);
		//
		//Если НайденныйЭлемент = Неопределено тогда
		//	Возврат;
		//КонецЕсли;	
		//
		
		Если ТипДокумента.Документ = "ЗаказКлиента" тогда
			ТипНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента; 	
		ИначеЕсли ТипДокумента.Документ = "РеализацияТоваровУслуг" тогда
			ТипНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг; 	
		ИначеЕсли ТипДокумента.Документ = "ПриходныйКассовыйОрдер" тогда
			ТипНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПриходныйКассовыйОрдер; 	
		ИначеЕсли ТипДокумента.Документ = "ОперацияПоПлатежнойКарте" тогда
			ТипНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ОперацияПоПлатежнойКарте; 
		ИначеЕсли ТипДокумента.Документ = "ПоступлениеБезналичныхДенежныхСредств" тогда
			ТипНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПоступлениеБезналичныхДенежныхСредств; 
			
		Иначе
			ТипНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка(); 	
		КонецЕсли;
		
		МенеджерВременныхТаблицСвойств 	= Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицСвойств;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыИСведения.Ссылка,
		|	ДополнительныеРеквизитыИСведения.ТипЗначения,
		|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение,
		|	ДополнительныеРеквизитыИСведения.Заголовок  КАК Заголовок
		|ПОМЕСТИТЬ ВремДопРеквизиты
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заголовок";
		Запрос.Выполнить();
		
		МенеджерВременныхТаблицНаборов = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицНаборов;
		Запрос.УстановитьПараметр("ТипНабора", ТипНабора);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство
		|ПОМЕСТИТЬ ВремНаборыСвойств
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = &ТипНабора
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Свойство";
		Запрос.Выполнить();
		
		Для каждого ТекЗначениеРеквизита из ДокументXML.ЗначенияРеквизитов Цикл
			
			СвойствоСтрокой = ТекЗначениеРеквизита.Наименование;
			
			Если ТипДокумента.Документ 	= "РеализацияТоваровУслуг" И СвойствоСтрокой = "Сумма доставки" тогда
				СоздаватьРеквизит = Истина;
			Иначе
				СоздаватьРеквизит = Ложь;
			КонецЕсли;
			
			Если СоздаватьРеквизит И Документ.метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено тогда
				Продолжить;
			КонецЕсли;			
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицСвойств;
			Запрос.УстановитьПараметр("СоздаватьРеквизит", НЕ СоздаватьРеквизит);
			Запрос.Текст ="ВЫБРАТЬ *
			|ИЗ
			|	ВремДопРеквизиты КАК ВремДопРеквизиты
			|ГДЕ
			|	ВремДопРеквизиты.Заголовок = &Заголовок
			|	И ВремДопРеквизиты.ЭтоДополнительноеСведение = &СоздаватьРеквизит";
			Запрос.УстановитьПараметр("Заголовок", СвойствоСтрокой);
			
			Свойство = НеОпределено;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ТипЗначения = Новый ОписаниеТипов("Строка") ИЛИ Выборка.ТипЗначения = Новый ОписаниеТипов("Число") Тогда
					Свойство = Выборка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Свойство = НеОпределено Тогда
				
				СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
				СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке заказа с сайта'");
				СвойствоОбъект.Наименование = СвойствоСтрокой;
				СвойствоОбъект.Заголовок 	= СвойствоСтрокой;
				СвойствоОбъект.ЗаголовокФормыВыбораЗначения = СвойствоСтрокой;
				СвойствоОбъект.ЗаголовокФормыЗначения 		= СвойствоСтрокой;
				СвойствоОбъект.Б_Идентификатор = "СвойствоЗаказа";
				СвойствоОбъект.НаборСвойств = ТипНабора;
				
				Если СвойствоСтрокой = "Сумма доставки" тогда
					СвойствоОбъект.ТипЗначения 	= Новый ОписаниеТипов("Число");
				Иначе
					СвойствоОбъект.ТипЗначения 	= Новый ОписаниеТипов("Строка");
				КонецЕсли;
				
				Если СоздаватьРеквизит тогда
					
					СвойствоОбъект.Доступен = Истина;
					СвойствоОбъект.Виден 	= Истина;
					СвойствоОбъект.Записать();
					
					лНабор = ТипНабора.ПолучитьОбъект();
					лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
					лНабор.Записать();

				Иначе
					СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
					СвойствоОбъект.Доступен = Истина;
					СвойствоОбъект.Виден 	= Истина;
					СвойствоОбъект.Записать();
					
					лНабор = ТипНабора.ПолучитьОбъект();
					лНабор.ДополнительныеСведения.Добавить().Свойство = СвойствоОбъект.Ссылка;
					лНабор.Записать();
				КонецЕсли;
				
				Свойство = СвойствоОбъект.Ссылка;
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицНаборов;
			Запрос.Текст ="ВЫБРАТЬ
			|	ВремНаборыСвойств.Свойство
			|ИЗ
			|	ВремНаборыСвойств КАК ВремНаборыСвойств
			|ГДЕ
			|	ВремНаборыСвойств.Свойство = &Свойство";
			
			Запрос.УстановитьПараметр("Свойство", Свойство);
			
			Если Запрос.Выполнить().Пустой() Тогда
				
				ЗаписьНабора 	= ТипНабора.ПолучитьОбъект();
				Если СоздаватьРеквизит тогда
					НовСвойство 	= ЗаписьНабора.ДополнительныеРеквизиты.Добавить().Свойство = Свойство;
					ЗаписьНабора.Записать();
				Иначе
					НовСвойство 	= ЗаписьНабора.ДополнительныеСведения.Добавить().Свойство = Свойство;
					ЗаписьНабора.Записать();
				КонецЕсли;	
			КонецЕсли;
			
			Если СвойствоСтрокой = "Сумма доставки" тогда
				Значение = Число(ТекЗначениеРеквизита.Значение);
			Иначе
				Значение = ТекЗначениеРеквизита.Значение;
			конецЕсли;
			
			Если СоздаватьРеквизит тогда
				
				НайденнаяСтрока = Документ.ДополнительныеРеквизиты.Найти(Свойство, "Свойство");
				
				Если НайденнаяСтрока = Неопределено тогда 
					лНовыйРеквизит = Документ.ДополнительныеРеквизиты.Добавить();
					лНовыйРеквизит.Свойство = Свойство;
					лНовыйРеквизит.Значение = Значение;
				Иначе
					НайденнаяСтрока.Значение = Значение;
				КонецЕсли;
				
				Документ.Записать();
			Иначе
				
				НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				НоваяЗапись.Объект 		= Документ.Ссылка;
				НоваяЗапись.Значение 	= Значение;
				НоваяЗапись.Свойство 	= Свойство;
				НоваяЗапись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		МенеджерВременныхТаблицНаборов.Закрыть();
		МенеджерВременныхТаблицСвойств.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеСвойствТоваровДокумента(ПараметрыОбмена, Документ, ДокументXML, ОсновныеНастройкиДокумента)
	
	Если (ОсновныеНастройкиДокумента.Документ = "ЗаказКлиента" ИЛИ ОсновныеНастройкиДокумента.Документ = "РеализацияТоваровУслуг") И ДокументXML.Товары <> Неопределено тогда
		
		НовыйНабор = РегистрыСведений.Б_СвойстваТоваровДокументов.СоздатьНаборЗаписей();
		НовыйНабор.Отбор.Документ.Установить(Документ.Ссылка); 
		
		Для каждого ТекТовар из ДокументXML.Товары Цикл
			
			СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, ТекТовар);
			
			Для каждого Свойство из ТекТовар.ЗначенияРеквизитов Цикл
				
				Если Свойство.Наименование <> "ВидНоменклатуры" И Свойство.Наименование <> "ТипНоменклатуры" тогда
				
					НоваяЗапись = НовыйНабор.Добавить();
					
					НоваяЗапись.Документ 					= Документ.Ссылка;	
					НоваяЗапись.Номенклатура 				= СтрИнформацииОНоменклатуре.Номенклатура;	
					НоваяЗапись.Характеристика 				= СтрИнформацииОНоменклатуре.ХарактеристикаНоменклатуры;	
					НоваяЗапись.КодСтроки 					= ТекТовар.КодСтроки;	
					НоваяЗапись.Значение 					= Свойство.Значение;	
					
					Если Лев(Свойство.Наименование, 16) = "СвойствоКорзины#" тогда
						НоваяЗапись.НаименованиеСвойства	= Прав(Свойство.Наименование, СтрДлина(Свойство.Наименование)- 16);
					Иначе
						НоваяЗапись.НаименованиеСвойства 	= Свойство.Наименование;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;  
		КонецЦикла;  
		
		НовыйНабор.Записать();	
		
	КонецЕсли;	
КонецПроцедуры




// Процедура - записывает статусы документов, а также, при необходимость, удаляет загруженные документы
//
// Параметры:
//  ПараметрыОбмена				 - 	 Настройки узла обмена  
//  ДокументXML					 - 	 Строка таблицы значений с содержимым документа с сайта 
//  ОсновныеНастройкиДокумента	 - 	 Основные настройки документа из настроек загружаемых документов 
//  Документ					 - 	 Документ 1С  
//  НовыйДокумент				 - 	 Признак, что это новый документ 
//  ДокументОтменен				 - 	 Признак, что документ отменен 
Процедура ЗаписьСтатусовИУдалениеЗагруженныхДокументов(ПараметрыОбмена, ДокументXML, ОсновныеНастройкиДокумента, Документ, НовыйДокумент, ДокументОтменен)
	
	ОбновлениеСвойствДокументов(ПараметрыОбмена, Документ, ДокументXML, ОсновныеНастройкиДокумента);
	
	ОбновлениеСвойствТоваровДокумента(ПараметрыОбмена, Документ, ДокументXML, ОсновныеНастройкиДокумента);
	
	Если ДокументОтменен Тогда
		
		Документ.Б_НомерВерсии = ДокументXML.НомерВерсии;	
		
		Если ОсновныеНастройкиДокумента.ДействияСОтмененнымиДокументами = "Помечать на удаление" тогда
			ДействияСОтмененнымиДокументами	= 0;
		ИначеЕсли ОсновныеНастройкиДокумента.ДействияСОтмененнымиДокументами = "Отменять проведение" тогда
			ДействияСОтмененнымиДокументами	= 1;
		Иначе
			ДействияСОтмененнымиДокументами	= 3;
		КонецЕсли;
		
		Если ДействияСОтмененнымиДокументами = 3 Тогда // Ничего
			  
		ИначеЕсли ДействияСОтмененнымиДокументами = 0 Тогда // Удалять
			Если НЕ Документ.ПометкаУдаления Тогда
				Документ.ПометкаУдаления = Истина;
				Попытка
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Б_ОбменССайтомСервер.СообщитьПодробно("Помечен на удаление документ: " + Строка(Документ), ПараметрыОбмена);
				Исключение
					Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка при установке пометки на удаление документа: " + Строка(Документ) + Символы.ПС + ОписаниеОшибки(), ПараметрыОбмена);
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ДействияСОтмененнымиДокументами = 1 Тогда // отменять
			Если Документ.Проведен Тогда
				Попытка
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Б_ОбменССайтомСервер.СообщитьПодробно("Отменено проведение у документа: " + Строка(Документ), ПараметрыОбмена);
				Исключение
					Б_ОбменССайтомСервер.СообщитьПодробно("Ошибка при отмене проведения документа: " + Строка(Документ) + Символы.ПС + ОписаниеОшибки(), ПараметрыОбмена);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Б_ОбменССайтомСервер.ПолучениеОбщегоМассиваУзлов(), Документ.Ссылка);
	
	Если Документ.Проведен Тогда
		
		ТипОбъекта = ТипЗнч(Документ.Ссылка);
		
		Если ТипОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
			
			Если Документ.РасшифровкаПлатежа.Количество() > 0 тогда
				лЗаказ = Документ.РасшифровкаПлатежа[0].Заказ; 
				Если ЗначениеЗаполнено(лЗаказ) тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(Б_ОбменССайтомСервер.ПолучениеОбщегоМассиваУзлов(), лЗаказ);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
			Если ЗначениеЗаполнено(Документ.ЗаказКлиента) тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Б_ОбменССайтомСервер.ПолучениеОбщегоМассиваУзлов(), Документ.ЗаказКлиента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры
 
// Функция - записывает и проведит документ 1С
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  Документ			 - 	 Ссылка на документ 1С 
//  ПроводитьДокумент	 - 	 Признак определяющий режим записи документа 
//  ПроводитьОперативно	 - 	 Признак определяющий режим проведения документа 
// Возвращаемое значение:
//   Ложь, если запись документа не удалась 
Функция ЗаписьИПроведениеДокумента(ПараметрыОбмена, Документ, ПроводитьДокумент, ПроводитьОперативно)
	
	Результат = Истина;
	
	Если ПроводитьДокумент тогда
		Если НЕ Документ.ПометкаУдаления тогда
			
			Попытка
				
				Если ПроводитьОперативно тогда
					Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Б_ОбменССайтомСервер.СообщитьПодробно("Документ: " + Строка(Документ) + " оперативно проведен.", ПараметрыОбмена);
				Иначе
					Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
					Б_ОбменССайтомСервер.СообщитьПодробно("Документ: " + Строка(Документ) + " проведен неоперативно.", ПараметрыОбмена);
				КонецЕсли; 
				
			Исключение
				
				Б_ОбменССайтомСервер.СообщитьПодробно("Документ: " + Строка(Документ) + " не удалось провести. Будет попытка записать документ", ПараметрыОбмена);
				
				Попытка
					Документ.Записать(РежимЗаписиДокумента.Запись);	
					Б_ОбменССайтомСервер.СообщитьПодробно("Документ: " + Строка(Документ) + " записан.", ПараметрыОбмена);
				Исключение
					Б_ОбменССайтомСервер.СообщитьПодробно("НЕ УДАЛОСЬ ЗАПИСАТЬ ДОКУМЕНТ: " + Строка(Документ), ПараметрыОбмена);
					
					Результат = Ложь;

				КонецПопытки;
				
			КонецПопытки;
			
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Помеченный на удаление документ: " + Строка(Документ) + " не может быть проведен. документ будет записан.", ПараметрыОбмена);
			Документ.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	Иначе
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Запись);	
			Б_ОбменССайтомСервер.СообщитьПодробно("Документ: " + Строка(Документ) + " записан.", ПараметрыОбмена);
		Исключение
			Б_ОбменССайтомСервер.СообщитьПодробно("НЕ УДАЛОСЬ ЗАПИСАТЬ ДОКУМЕНТ: " + Строка(Документ), ПараметрыОбмена);
					
			Результат = Ложь;

		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Процедура - пересчитывает  указанную строку табличной части документа
//
// Параметры:
//  Док		 - 	 Документ 1С 
//  СтрокаТЧ - 	 Строка табличной части документа 
Процедура ПересчитатьСтрокуДокумента(Документ, СтрокаТЧ)
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Документ);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

// Процедура - Распределяет сумму по колонке
//
// Параметры:
//  ДокументОбъект		 - 	 Документ объект 1С 
//  Товары				 - 	 Табличная часть документа 1С, где будет перераспределение 
//  СуммаРаспределения	 - 	 Сумма распределения 
Процедура РаспределитьСуммуПоКолонке(ДокументОбъект, Товары, СуммаРаспределения)	
	
	МассивДанныхКолонки = Товары.ВыгрузитьКолонку("Сумма");
	
	МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРаспределения, МассивДанныхКолонки);
	
	Если МассивРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Индекс = 0;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + МассивРаспределения[Индекс];
		Индекс = Индекс + 1;
		
		ПересчитатьСтрокуДокумента(ДокументОбъект, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьНаличиеОплатыУЗаказа(пЗаказ, пМенеджерВременныхТаблиц)
	
	Если  пЗаказ = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросОплаты = Новый Запрос;
	ЗапросОплаты.МенеджерВременныхТаблиц = пМенеджерВременныхТаблиц;
	ЗапросОплаты.Текст = "ВЫБРАТЬ * 			
	|ИЗ
	|	ВремРасчетыСКлиентами КАК ВремРасчетыСКлиентами
	|ГДЕ
	|	ВремРасчетыСКлиентами.Заказ = &Заказ";
	ЗапросОплаты.УстановитьПараметр("Заказ"	, пЗаказ);
	Выборка = ЗапросОплаты.Выполнить();
	
	Если НЕ Выборка.Пустой() тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции


#КонецОбласти


#Область ФункцииПолученияЗначенийРеквизитовДокументов

//////////////////////////////////////////////////////////////////////////
//   		 	 ПОЛУЧЕНИЕ РЕКВИЗИТОВ ДОКУМЕНТОВ	 		   	       //
////////////////////////////////////////////////////////////////////////

// Функция - возвращает таблицу значений табличной части документа с соответствием реквизитов 
//
// Параметры:
//  НазваниеДокумента	 - 	 Название документа 
//  ТаблицаСоответствий	 - 	 Название табличной части документа 
// Возвращаемое значение:
//   Таблица значений с реквизитами табличной части документа 
Функция ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ТаблицаСоответствий)
	
	НайденныеСтроки =  ТаблицаСоответствий.НайтиСтроки(Новый Структура("Документ", НазваниеДокумента));

	Возврат НайденныеСтроки; 
	
КонецФункции

// Функция - возвращает значение  по соответствию полей документа, из данных документа пришедших с сайта.
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ДокументXML		 - 	 Строка таблицы значений с содержимым документа с сайта 
//  Документ					 - 	 Документ 1С 
//  ОсновныеНастройкиДокумента	 - 	 Основные настройки документа
//  ТекущийРеквизит				 - 	 Наименование реквизита 1С, в который будет установлено значение 
//  СтрокаТабличнойЧасти		 - 	 Строка табличной части документа пришедшего из сайта. 
// Возвращаемое значение:
//   Значение реквизита документа 
Функция ПолучитьЗначениеРеквизитаДокументаПоСоответствию(ПараметрыОбмена, ДокументXML, Документ, ОсновныеНастройкиДокумента, ТекущийРеквизит, СтрокаXML = Неопределено, СтрокаТабличнойЧасти = Неопределено, СтрараяТабличнаяЧасть = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено тогда
		лРеквизит = Документ.Метаданные().Реквизиты.Найти(ТекущийРеквизит.НаименованиеРеквизита1С);
	Иначе
		лРеквизит = Метаданные.НайтиПоТипу(Тип(СтрокаТабличнойЧасти)).Реквизиты.Найти(ТекущийРеквизит.НаименованиеРеквизита1С)	
	КонецЕсли;
	
	Если лРеквизит = Неопределено тогда
		
		Массив = Новый Массив;
		Массив.Добавить(ТипЗнч(Документ[ТекущийРеквизит.НаименованиеРеквизита1С]));
		лТипРеквизита = Новый ОписаниеТипов(Массив);
		
	Иначе
		
		лТипРеквизита = лРеквизит.Тип;
		
	КонецЕсли;
	
	мПростыеТипы = Новый Массив;
	мПростыеТипы.Добавить(Тип("Строка"));	
	мПростыеТипы.Добавить(Тип("Число"));	
	мПростыеТипы.Добавить(Тип("Булево"));	
	мПростыеТипы.Добавить(Тип("Дата"));	
	
	Результат = Неопределено;
	
	Если ТекущийРеквизит.ТипДанных = "Из поля XML документа" тогда
		
		Если ТекущийРеквизит.Значение = "Дата с сайта с учетом настройки обмена" тогда
			
			ДатаДокументаНаСайте 	= XMLЗначение(Тип("Дата"),ДокументXML.Дата + "T" + ДокументXML.Время);
			
			Если ОсновныеНастройкиДокумента.ДатаДокументов = "Текущая дата" тогда
				Результат = ТекущаяДата();
			Иначе
				Результат = ДатаДокументаНаСайте;
			КонецЕсли;
			
			
		ИначеЕсли ТекущийРеквизит.Значение = "Дата отгрузки" тогда
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОтгрузки) тогда
				Результат = СтрокаТабличнойЧасти.ДатаОтгрузки;	
			Иначе
				
				ДатаДокументаНаСайте 	= XMLЗначение(Тип("Дата"),ДокументXML.Дата + "T" + ДокументXML.Время);
				
				Если ОсновныеНастройкиДокумента.ДатаДокументов = "Текущая дата" тогда
					Результат = ТекущаяДата();
				Иначе
					Результат = ДатаДокументаНаСайте;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Дата с сайта" тогда
			
			Результат 	= XMLЗначение(Тип("Дата"),ДокументXML.Дата + "T" + ДокументXML.Время);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Дата 1С" тогда
			
			Результат =  ТекущаяДата();
			
		ИначеЕсли ТекущийРеквизит.Значение = "Номер с сайта" тогда
			
			Результат =  ДокументXML.Номер;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Ид с сайта" тогда
			
			Результат =  ДокументXML.Ид;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Номер 1С" тогда
			
			Результат = ДокументXML.Номер1С;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Номер версии с сайта" тогда
			
			Результат = ДокументXML.НомерВерсии;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Пометка удаления" тогда
	
			Результат = ДокументXML.ПометкаУдаления;	
	
		ИначеЕсли ТекущийРеквизит.Значение = "Комментарий" тогда
			
			Результат = ФормированиеКомментарияДокумента(ДокументXML.Номер,  ДокументXML.Комментарий);	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Склад" тогда
			
			Результат = ПолучитьСклад(ПараметрыОбмена, Документ, ДокументXML);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Статус" тогда
			
			Результат = ПолучитьСтатусДокумента(ПараметрыОбмена, Документ, ДокументXML);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Способ доставки" тогда
			
			Результат = ПолучитьСпособДоставки(ПараметрыОбмена, Документ, ДокументXML);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Налогообложение НДС" тогда
			
			Результат = Документ.Соглашение.НалогообложениеНДС;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Цена включает НДС" тогда
			
			Результат = ДокументXML.НДСВСумме;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Валюта" тогда
			
			Результат = ДокументXML.Валюта	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Контрагент" тогда
			
			Результат = ПолучитьКонтрагента(ПараметрыОбмена, ДокументXML.Контрагент.ЮрФизЛицо, ДокументXML);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Партнер" тогда
			
			Контрагент = ПолучитьКонтрагента(ПараметрыОбмена, ДокументXML.Контрагент.ЮрФизЛицо, ДокументXML);
			
			Если Контрагент <> неопределено  тогда
				Результат = Контрагент.Партнер;
			Иначе
				Результат = Справочники.Партнеры.ПустаяСсылка();	
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Соглашение" тогда
			
			Результат = ПолучитьСоглашение(ПараметрыОбмена, ДокументXML.Контрагент.ЮрФизЛицо, ДокументXML);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Адрес доставки" тогда
			
			Если ДокументXML.ХозОперация = "Заказ товара" И ДокументXML.Контрагент.Контакты <> Неопределено тогда
				
				Для Каждого ТекАдрес из ДокументXML.Контрагент.Контакты Цикл
					
					Если ТекАдрес.ТипВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента тогда
						
						Результат 	= ТекАдрес.Представление;
						
					КонецЕсли;
					
				КонецЦикла;
			
			Иначе
				Результат = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Адрес доставки");
			Конецесли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Адрес доставки значения полей" тогда
			
			Если ДокументXML.Контрагент.Контакты <> Неопределено тогда
			
				Для Каждого ТекАдрес из ДокументXML.Контрагент.Контакты Цикл
					
					Если ТекАдрес.ТипВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента тогда
						
						Результат = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ТекАдрес.Представление, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента); 						
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Адрес контрагента" тогда
			
			Результат =  "";	
			
			Если ДокументXML.Контрагент.Контакты <> Неопределено тогда
				
				НайденныйАдрес = ДокументXML.Контрагент.Контакты.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ТипВидКонтактнойИнформации");
				
				Если НайденныйАдрес <> Неопределено тогда 
					Результат =  (НайденныйАдрес.Представление);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Телефон контрагента" тогда
			
			Результат =  "";	
			
			Если ДокументXML.Контрагент.Контакты <> Неопределено тогда
				
				НайденныйАдрес = ДокументXML.Контрагент.Контакты.Найти("Телефон", "ТипВидКонтактнойИнформации");
				
				Если НайденныйАдрес <> Неопределено тогда 
					Результат =  НайденныйАдрес.Представление;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Адрес эл. почты контрагента" тогда
			
			Результат =  "";	
			
			Если ДокументXML.Контрагент.Контакты <> Неопределено тогда
				
				НайденныйАдрес = ДокументXML.Контрагент.Контакты.Найти("Почта", "ТипВидКонтактнойИнформации");
				
				Если НайденныйАдрес <> Неопределено тогда 
					Результат =  НайденныйАдрес.Представление;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Полное наименование контрагента" тогда
			
			Результат =  ?(ЗначениеЗаполнено(ДокументXML.Контрагент.НаименованиеПолное), ДокументXML.Контрагент.НаименованиеПолное, ДокументXML.Контрагент.Наименование);	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Банковский счет" тогда
			
			Результат = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
			
			ВремСтруктДанных = Новый Структура;
			ВремСтруктДанных.Вставить("Организация"		, Документ.Организация);
			ВремСтруктДанных.Вставить("ФормаОплаты"		, Перечисления.ФормыОплаты.Безналичная);
			ВремСтруктДанных.Вставить("БанковскийСчет"	, Неопределено);
			ВремСтруктДанных.Вставить("Валюта"			, ДокументXML.Валюта);
			ВремСтруктДанных.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
			
			Если Документ.Метаданные().Реквизиты.Найти("БанковскийСчет") <> Неопределено тогда
				ВремСтруктДанных.БанковскийСчет = Документ.БанковскийСчет; 	
				Результат = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ВремСтруктДанных);	
			ИначеЕсли Документ.Метаданные().Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено тогда
				ВремСтруктДанных.БанковскийСчет = Документ.БанковскийСчетОрганизации; 	
				Результат = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ВремСтруктДанных);			
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Банковский счет контрагента" тогда
			
			Контрагент = ПолучитьКонтрагента(ПараметрыОбмена, ДокументXML.Контрагент.ЮрФизЛицо, ДокументXML);
			
			Результат = ПолучитьбанковскийСчетДляДокумента(ДокументXML, Контрагент);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Касса" тогда
			
			Результат = Справочники.Кассы.ПустаяСсылка();
			ЗначениеОплаты = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Метод оплаты ИД");
				
			ИдОплаты = "";
			Если НЕ ЗначениеОплаты = Неопределено тогда
				ИдОплаты = СокрЛП(ЗначениеОплаты);	
			КонецЕсли;
				
			Если ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс <> Неопределено тогда
					
				НайденнаяСтрока = ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс.Найти(ИдОплаты, "ИдПлатежнойСистемы");
				Если НайденнаяСтрока = Неопределено тогда
					Результат = Справочники.Кассы.ПустаяСсылка();
				Иначе
					Результат = ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс.Найти(ИдОплаты, "ИдПлатежнойСистемы").Касса;
				КонецЕсли;
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(Результат) тогда
				Результат = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию()
			КонецЕсли;
			
			
		ИначеЕсли ТекущийРеквизит.Значение = "Эквайринговый терминал" тогда
			
			Результат = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
			ЗначениеОплаты = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Метод оплаты ИД");
				
			ИдОплаты = "";
			Если НЕ ЗначениеОплаты = Неопределено тогда
				ИдОплаты = СокрЛП(ЗначениеОплаты);	
			КонецЕсли;
				
			Если ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс <> Неопределено тогда
					
				НайденнаяСтрока = ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс.Найти(ИдОплаты, "ИдПлатежнойСистемы");
				Если НайденнаяСтрока = Неопределено тогда
					Результат = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
				Иначе
					Результат = НайденнаяСтрока.Терминал;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Порядок оплаты" тогда
			
			Результат = Документ.Соглашение.ПорядокОплаты;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Форма оплаты" тогда
			
			Результат = Документ.Соглашение.ФормаОплаты;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Основание" тогда
			
			Результат = ПолучитьОснование(ДокументXML, лТипРеквизита);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Реализация по заказам" тогда
			
			Основание = ПолучитьОснование(ДокументXML, лТипРеквизита);
			
			Если Основание <> Неопределено тогда
				Результат = Истина;
			Иначе
				Результат = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Менеджер" тогда
			Если Документ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено тогда
				Результат = Документ.Соглашение.Менеджер;
			Иначе
				Результат = Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ТекущийРеквизит.Значение = "Приоритет" тогда
			
			Результат = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
			
		ИначеЕсли ТекущийРеквизит.Значение = "Операция" тогда
			
			Если Документ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено тогда
				Результат = Документ.Соглашение.ХозяйственнаяОперация;
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "График оплаты" тогда
			
			Результат = Документ.Соглашение.ГрафикОплаты;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Дата платежа" тогда
			
			ДатаОплаты			= ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Дата оплаты");
			
			Если НЕ ДатаОплаты 	= Неопределено тогда
				
				Попытка
					ДатаОплаты 				= Дата(ДатаОплаты);
					Результат   			= ДатаОплаты;
				Исключение
					Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось получить дату оплаты для документа: " + Документ.Номер, ПараметрыОбмена);
				КонецПопытки
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Сумма" тогда
			
			Если ДокументXML.ХозОперация = "Отпуск товара" тогда
				СуммаДоставки = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Сумма доставки");
				Результат = ДокументXML.Сумма - Число(?(ЗначениеЗаполнено(СуммаДоставки),СуммаДоставки,0));	
			Иначе
				Результат = ДокументXML.Сумма;
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Курс" тогда
			
			Результат = ДокументXML.Курс;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Кратность" тогда
			
			Результат = 1;
			
		ИначеЕсли ТекущийРеквизит.Значение = "НДС в сумме" тогда
			
			Результат = ДокументXML.НДСВСумме;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Сумма НДС" тогда
			
			Результат = ДокументXML.СуммаНДС;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Номенклатура" тогда
			
			СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаXML);
			
			Если СтрИнформацииОНоменклатуре.Номенклатура = Неопределено тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("В документе: " + Строка(Документ) + " не найдена/создана номенклатура. ", ПараметрыОбмена);
				Результат = Справочники.Номенклатура.ПустаяСсылка();	
			Иначе
				Результат = СтрИнформацииОНоменклатуре.Номенклатура;	
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Наименование номенклатуры" тогда
			
			СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаXML);
			
			Если СтрИнформацииОНоменклатуре.Номенклатура = Неопределено тогда
				Результат = "";	
			Иначе
				Результат = СтрИнформацииОНоменклатуре.Номенклатура.Наименование;	
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Характеристика" тогда
			
			СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаXML);
		
			Если СтрИнформацииОНоменклатуре.ХарактеристикаНоменклатуры = Неопределено тогда
				Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
			Иначе
				Результат = СтрИнформацииОНоменклатуре.ХарактеристикаНоменклатуры;	
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Единица измерения" тогда
			
			СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаXML);
		
			Если СтрИнформацииОНоменклатуре.ЕдиницаИзмерения = Неопределено тогда
				Результат = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();	
			Иначе
				Результат = СтрИнформацииОНоменклатуре.ЕдиницаИзмерения;	
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Ставка НДС" тогда
				
			Если ЗначениеЗаполнено(СтрокаXML.СтавкаНДСТовара) Тогда
				Результат = СтрокаXML.СтавкаНДСТовара;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
					Результат = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Количество" тогда
			
			Результат = СтрокаXML.Количество;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Количество упаковок" тогда
			
			Результат = СтрокаXML.Количество;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Цена" тогда
			
			Если СтрокаXML.Количество = 0 тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("У документа: " + Документ.Номер + " есть позиция, с 0 количеством. Цена будет установлена 0", ПараметрыОбмена);
				Возврат 0;
			КонецЕсли;
			
			Если НЕ ПараметрыОбмена.УстанавливатьРучнуюСкидкуВДокументе тогда
			
				Результат = 0;	
					
				Если ЗначениеЗаполнено(СтрокаXML.Цена) Тогда
					Результат = СтрокаXML.Цена;
				КонецЕсли;
				
				Если Результат = 0 Тогда
					Результат = СтрокаXML.Сумма / СтрокаXML.Количество;
				КонецЕсли;
			Иначе	
				
				ЦенаДоСкидки =  СтрокаXML.Сумма/СтрокаXML.Количество;
				
				лСкидка = 0;
				Если СтрокаXML.Скидки <> Неопределено тогда
					лСкидка = СтрокаXML.Скидки.Итог("Сумма");	
				КонецЕсли;
				
				Результат = ЦенаДоСкидки + лСкидка;
				
			КонецЕсли;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Процент ручной скидки" тогда
			
			Если НЕ ПараметрыОбмена.УстанавливатьРучнуюСкидкуВДокументе тогда
			
				Результат = 0;
				
			Иначе	
				
				ЦенаДоСкидки =  СтрокаXML.Сумма/СтрокаXML.Количество;
				
				Если ЦенаДоСкидки = 0 тогда
					Б_ОбменССайтомСервер.СообщитьПодробно("У документа: " + Документ.Номер + " есть позиция с суммой без скидок = 0. Скидка будет установлена = 0", ПараметрыОбмена);
					Возврат 0;
				КонецЕсли;
				
				лСкидка = 0;
				Если СтрокаXML.Скидки <> Неопределено тогда
					лСкидка = СтрокаXML.Скидки.Итог("Сумма");	
				КонецЕсли;
				
				Результат = лСкидка*100/(ЦенаДоСкидки+лСкидка);
				
			КонецЕсли;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Сумма позиции" тогда
			
			Результат = СтрокаXML.Сумма;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Вариант обеспечения" тогда
			
			Результат = Неопределено;
			
			Если СтрараяТабличнаяЧасть <> Неопределено тогда
				
				СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаXML);
				
				Для Каждого ТекЭлементТЧ из СтрараяТабличнаяЧасть Цикл
					Если ТекЭлементТЧ.КодСтроки = СтрокаXML.КодСтроки И СтрокаТабличнойЧасти.Номенклатура = СтрИнформацииОНоменклатуре.Номенклатура тогда
						Результат	= ТекЭлементТЧ.ВариантОбеспечения;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если Результат = Неопределено Тогда
				Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга тогда
					Результат	= Перечисления.ВариантыОбеспечения.НеТребуется;
				Иначе
					Результат 	= Перечисления.ВариантыОбеспечения.Требуется;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ТекущийРеквизит.Значение = "Отменено" тогда
			
			Отменен 	= ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Отменен");
			Результат   = ?((Отменен = Неопределено ИЛИ Отменен = "false"), Ложь, Истина);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Причина отмены" тогда
			
			ЗаказОтменен 	= ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Отменен");
			ЗаказОтменен    = ?((ЗаказОтменен = Неопределено ИЛИ ЗаказОтменен = "false"), Ложь, Истина);
		
			Если ЗаказОтменен тогда
				
				ПричинаОтменыНаименование 	= ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Причина отмены"); 
				Если Б_ОбменССайтомСервер.СвойствоXDTOЗаполнено(ПричинаОтменыНаименование) тогда
					Результат				= ПолучитьЗначениеПричиныОтменыЗаказа(ПричинаОтменыНаименование);
				Иначе
					
					Б_ОбменССайтомСервер.СообщитьПодробно("В документе: " + Строка(Документ) + " не найдена причина отмена заказа по наименованию. Будет установлена из настроек обмена.", ПараметрыОбмена);
					Результат				= ПараметрыОбмена.ПричинаОтменыЗаказа;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Код строки" тогда
			Результат = СтрокаXML.КодСтроки;	 		
		КонецЕсли;
		
	ИначеЕсли ТекущийРеквизит.ТипДанных = "Фиксированное значение" тогда
		
		Результат = ТекущийРеквизит.Значение;	
		
	ИначеЕсли ТекущийРеквизит.ТипДанных = "Из дополнительных свойств документа (по наименованию)" тогда
		
		лЗначениеДопСвойства = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, ТекущийРеквизит.Значение);
		
		Если НЕ ЗначениеЗаполнено(лЗначениеДопСвойства) тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для каждого ТекТип из лТипРеквизита.Типы() Цикл
		
			Если мПростыеТипы.Найти(ТекТип) = Неопределено тогда
				
		    	лОбъект = Метаданные.НайтиПоТипу(ТекТип);
				
				Если лОбъект <> Неопределено тогда
				
					лПолноеИмяОбъектаПоиска = лОбъект.ПолноеИмя();
					
					Если Лев(лПолноеИмяОбъектаПоиска, 3) = "Пер" тогда
						
						Для каждого ТекЗначение из лОбъект.ЗначенияПеречисления Цикл
							
							Если ТекЗначение.Синоним = лЗначениеДопСвойства тогда
								
								Результат = Перечисления[лОбъект.Имя][ТекЗначение.Имя];
								
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					ИначеЕсли Лев(лПолноеИмяОбъектаПоиска, 3) = "Док" тогда
						
						Результат = Документы[лОбъект.Имя].НайтиПоНомеру(лЗначениеДопСвойства, ТекущаяДата());
								
						Прервать;
						
					ИначеЕсли Лев(лПолноеИмяОбъектаПоиска, 3) = "Спр" тогда
						
						Если лОбъект.Имя = "СоглашенияСКлиентами" И ДокументXML.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.СоглашениеКонтрагентаФизлицо) тогда	
							Возврат ПараметрыОбмена.СоглашениеКонтрагентаФизлицо; 	
						КонецЕсли;
						
						Если лОбъект.Имя = "Контрагент" И ДокументXML.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.КонтрагентФизлицо) тогда	
							Возврат ПараметрыОбмена.КонтрагентФизлицо; 	
						КонецЕсли;
						
						Если лОбъект.Имя = "Партнер" И ДокументXML.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.КонтрагентФизлицо) тогда	
							Возврат ПараметрыОбмена.СоглашениеКонтрагентаФизлицо.Партнер; 	
						КонецЕсли;
						
						Результат = Справочники[лОбъект.Имя].НайтиПоНаименованию(лЗначениеДопСвойства);
						
					КонецЕсли;
					
				Иначе
					
					Результат = лЗначениеДопСвойства;

				КонецЕсли;
				
		  Иначе
				
				Попытка 
					Результат = XMLЗначение(ТекТип, лЗначениеДопСвойства);    
				Исключение 
					Результат = ""; 
				КонецПопытки ; 	  
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;			
			
	ИначеЕсли ТекущийРеквизит.ТипДанных = "Из дополнительных свойств документа (по ид)" тогда
		
		лЗначениеДопСвойства = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, ТекущийРеквизит.Значение);
		
		Если НЕ ЗначениеЗаполнено(лЗначениеДопСвойства) тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для каждого ТекТип из лТипРеквизита.Типы() Цикл
			
			Попытка
				
				Результат =	XMLЗначение(ТекТип, лЗначениеДопСвойства);	
				
				Прервать;
				
			Исключение
				
			КонецПопытки
	
		КонецЦикла;
		
	ИначеЕсли ТекущийРеквизит.ТипДанных = "<Свой алгоритм>" тогда
		
		лИтоговоеНазваниеПоля = ТекущийРеквизит.Значение;	
		
		лИтоговоеНазваниеПоля = стрЗаменить(лИтоговоеНазваниеПоля, "[Документ]"		, "Документ");
		лИтоговоеНазваниеПоля = стрЗаменить(лИтоговоеНазваниеПоля, "[Результат]"		, "Результат");
		лИтоговоеНазваниеПоля = стрЗаменить(лИтоговоеНазваниеПоля, "[НоваяСтрока]"		, "СтрокаТабличнойЧасти");
		лИтоговоеНазваниеПоля = стрЗаменить(лИтоговоеНазваниеПоля, "[ПараметрыОбмена]"	, "ПараметрыОбмена");
		лИтоговоеНазваниеПоля = стрЗаменить(лИтоговоеНазваниеПоля, "[ДокументXML]"		, "ДокументXML");
		лИтоговоеНазваниеПоля = стрЗаменить(лИтоговоеНазваниеПоля, "[СтрокаXML]"		, "СтрокаXML");
		
		Если ЗначениеЗаполнено(лИтоговоеНазваниеПоля) тогда
			Выполнить(лИтоговоеНазваниеПоля);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции


// Функция - возвращает склад по данным документа с сайта
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ДокументXML		 - 	 Строка таблицы значений с содержимым документа с сайта 
// Возвращаемое значение:
//   Склад 
Функция ПолучитьСклад(ПараметрыОбмена, Документ, ДокументXML)
	
	лСклад 		= Неопределено;
	
	ИнформацияОСкладе = ДокументXML.Склад;
	
	Если ИнформацияОСкладе <> Неопределено тогда
		лСклад = Б_ОбменССайтомСервер.ПолучениеОбъектаПоКоду(ИнформацияОСкладе.Ид, "СправочникСсылка.Склады", "Справочник.Склады");
	КонецЕсли;
	
	Если лСклад <> Неопределено тогда
		Возврат лСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.Склад) тогда
		лСклад = Документ.Склад;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") И НЕ ЗначениеЗаполнено(лСклад) Тогда
		
		ПараметрыОбмена.Свойство("СкладПоУмолчанию", лСклад);
		
		Если ЗначениеЗаполнено(лСклад) Тогда
			Возврат лСклад;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	НЕ Склады.ПометкаУдаления
			|	И НЕ Склады.ЭтоГруппа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	Справочник.Склады КАК Склады");
			
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ВыборкаСкладПоУмолчанию = МассивРезультатов[0].Выбрать();
		ВыборкаСклад = МассивРезультатов[1].Выбрать();
		
		Если ВыборкаСкладПоУмолчанию.Следующий()
			И ВыборкаСкладПоУмолчанию.Количество() = 1 Тогда
			
			лСклад = ВыборкаСкладПоУмолчанию.Склад;
			ПараметрыОбмена.Вставить("СкладПоУмолчанию", лСклад);
			
		Иначе
			
			Если ВыборкаСклад.Количество() = 2 Тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось заполнить поле ""Склад"". В информационной базе введено несколько складов. Включите функциональную опцию ""Использовать несколько складов", ПараметрыОбмена);
			Иначе
				Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось заполнить поле ""Склад"". Возможно, в информационной базе не введено ни одного склада", ПараметрыОбмена);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат лСклад;
	
КонецФункции

// Функция - возвращает статус документа по данным с сайта
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ДокументXML		 - 	 Строка таблицы значений с содержимым документа с сайта 
// Возвращаемое значение:
//   Статусдокумента 
Функция ПолучитьСтатусДокумента(ПараметрыОбмена, Документ, ДокументXML)

	Результат = Неопределено;
	Если ДокументXML.ХозОперация = "Заказ товара" тогда
		
		Если ПараметрыОбмена.Свойство("НастройкиСтатусовЗаказа") тогда
			
			Если ПараметрыОбмена.НастройкиСтатусовЗаказа.ИсточникСтатусов1С = "СтатусыЗаказов" тогда
				
				
				ИдСтатуса		= ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Статуса заказа ИД");
				
				Если ИдСтатуса 	= Неопределено тогда
					Результат = Документ.Статус;	
				Иначе
					
					НайденныйСтатус = ПараметрыОбмена.НастройкиСтатусовЗаказа.СоответствияСтатусовЗаказа.Найти(ИдСтатуса);
					
					Если НайденныйСтатус <> Неопределено тогда
						Результат = НайденныйСтатус.Статус;
					Иначе
						Результат = Документ.Статус;	
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Результат = Документ.Статус;
			КонецЕсли;
		Иначе
			Результат = Документ.Статус;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьСпособДоставки(ПараметрыОбмена, Документ, ДокументXML)
	
	Результат = Неопределено;
	
	Если ДокументXML.ХозОперация = "Заказ товара" тогда
		
		Если ПараметрыОбмена.Свойство("НастройкиСлужбДоставкиДокументов") тогда
			
			Если ПараметрыОбмена.НастройкиСлужбДоставкиДокументов.ИсточникСлужбДоставкиЗаказа = "СпособыДоставкиЗаказов" тогда
				
				ИдМетодаДоставки = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Метод доставки ИД");
				
				Если ИдМетодаДоставки <> Неопределено тогда
					
					НайденныйСтатус = ПараметрыОбмена.НастройкиСлужбДоставкиДокументов.СоответствияСпособовДоставкиЗаказа.Найти(ИдМетодаДоставки);
					
					Если НайденныйСтатус <> Неопределено тогда
						Результат = НайденныйСтатус.Служба;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Результат = Документ.СпособДоставки;
			КонецЕсли;
		Иначе
			Результат = Документ.СпособДоставки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

// Функция - возвращает соглашение по данным документа с сайта
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ЮрФизЛицо		 - 	 Признак определяющий кем является контрагент. 
//  ДокументXML		 - 	 Строка таблицы значений с содержимым документа с сайта 
// Возвращаемое значение:
//   Соглашение 
Функция ПолучитьСоглашение(ПараметрыОбмена, ЮрФизЛицо,ДокументXML)
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.КонтрагентФизлицо) тогда	
		Возврат ПараметрыОбмена.СоглашениеКонтрагентаФизлицо; 	
	КонецЕсли;
	
	лСоглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	
	Возврат лСоглашение;
	
КонецФункции

// Функция - возвращает документ основание по данным документа с сайта
//
// Параметры:
//  ДокументXML		 - 	 Строка таблицы значений с содержимым документа с сайта 
//  лТипРеквизита	 - 	 Тип документа основания 
// Возвращаемое значение:
//   Документ основание 
Функция ПолучитьОснование(ДокументXML, лТипРеквизита)
	
	Результат = Документы.ЗаказКлиента.ПустаяСсылка();
	
	ЗапросЗ = Новый Запрос;
	
	ЗапросЗ.Текст = "ВЫБРАТЬ
	|	ИскомыйДокумент.Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ИскомыйДокумент
	|ГДЕ
	|	ИскомыйДокумент.Б_Идентификатор = &Идентификатор";
	ЗапросЗ.УстановитьПараметр("Идентификатор"	, ДокументXML.Основание);
	
	тзнВрем = ЗапросЗ.Выполнить().Выгрузить();
	Если тзнВрем.Количество() > 0 тогда
		Результат = тзнВрем[0].Ссылка;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция - возвращает значение реквизита документа пришедшего с сайта
//
// Параметры:
//  ЗначенияРеквизитов	 - 	 Таблица значений с реквизитами документа 
//  ИмяРеквизита		 - 	 Наименование реквизита 
// Возвращаемое значение:
//   Значение реквизита 
Функция ПолучитьЗначениеРеквизитаДокумента(ЗначенияРеквизитов, ИмяРеквизита)
	
	Если ЗначенияРеквизитов = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ЗначенияРеквизитов.Найти(ИмяРеквизита, "Наименование");
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденнаяСтрока.Значение;	
	КонецЕсли;
	
КонецФункции

// Функция - возвращает дополненный служебной информацией комментарий документа
//
// Параметры:
//  Номер		 - 	 Номер документа 
//  Комментарий	 - 	 коммнетарий 
// Возвращаемое значение:
//   Дополненный комментарий 
Функция ФормированиеКомментарияДокумента(Номер, Комментарий)
	
	Если Найти(Комментарий, "[Номер документа на сайте:") = 0 Тогда
		лКомментарий = "[Номер документа на сайте: " + Номер + "] " + Комментарий;	
	Иначе
		лКомментарий = Комментарий;	
	КонецЕсли;
	
	Возврат лКомментарий;

КонецФункции

// Функция - возвращает причину отмены заказа по данным заказа с сайта
//
// Параметры:
//  ЗначениеПричиныОтменыСтрокой - 	 Причина отмены заказа строкой 
// Возвращаемое значение:
//   Причина отмены заказа 
Функция ПолучитьЗначениеПричиныОтменыЗаказа(ЗначениеПричиныОтменыСтрокой)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПричиныОтменыЗаказовКлиентов.Ссылка
	|ИЗ
	|	Справочник.ПричиныОтменыЗаказовКлиентов КАК ПричиныОтменыЗаказовКлиентов
	|ГДЕ
	|	ПричиныОтменыЗаказовКлиентов.Наименование ПОДОБНО &Наименование
	|	И (НЕ ПричиныОтменыЗаказовКлиентов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Наименование", ЗначениеПричиныОтменыСтрокой);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат НеОпределено;
	
КонецФункции

// Функция - возвращает информацию о товаре, номенклатуре и единице измерения по указанной позиции товара заказа с сайта
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  СтрокаТовара	 - 	 Строка с указанным товаром в заказе с сайта  
// Возвращаемое значение:
//   Структура с данными по номенклатуре, характеристике и единице измерений 
Функция ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаТовара)
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура"				, Справочники.Номенклатура.ПустаяСсылка());
	Результат.Вставить("ХарактеристикаНоменклатуры"	, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Результат.Вставить("ЕдиницаИзмерения"			, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	ИдТовара = СтрокаТовара.Ид;
	
	ПозицияРазделителя = Найти(ИдТовара, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдНоменклатуры = Лев(ИдТовара, ПозицияРазделителя - 1);
	Иначе
		ИдНоменклатуры = СтрокаТовара.Ид;
	КонецЕсли;
	Если ПозицияРазделителя > 0 Тогда
		ИдХарактеристики = Прав(ИдТовара, СтрДлина(ИдТовара) - ПозицияРазделителя);
	Иначе
		ИдХарактеристики = "";
	КонецЕсли;
	
	ЭтоНоваяНоменклатура = Ложь;
	Номенклатура = Б_ОбменССайтомСервер.ПолучениеОбъектаПоКоду(ИдНоменклатуры, "СправочникСсылка.Номенклатура", "Справочник.Номенклатура");
	
	Если ЗначениеЗаполнено(ИдХарактеристики) тогда
		
		ХарактеристикаНоменклатуры = Б_ОбменССайтомСервер.ПолучениеОбъектаПоКоду(ИдХарактеристики, "СправочникСсылка.ХарактеристикиНоменклатуры", "Справочник.ХарактеристикиНоменклатуры");
		
	КонецЕсли;
	
	//Если Номенклатура = Неопределено И ИдХарактеристики <> ИдТовара тогда
	Если Номенклатура = Неопределено тогда
		
		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяНоменклатура.Б_Идентификатор 	= ИдНоменклатуры; 
		НоваяНоменклатура.Родитель			= ПараметрыОбмена.ГруппаДляНовойНоменклатуры;
		
		НоваяНоменклатура.Наименование 		= СтрокаТовара.Наименование; 
		НоваяНоменклатура.СтавкаНДС 		= СтрокаТовара.СтавкаНДСТовара; 
		
		НоваяНоменклатура.Качество			= Перечисления.ГрадацииКачества.Новый;
		
		//Добавляем вид номенклатуры для товара
		Если СтрокаТовара.ЗначенияРеквизитов <> Неопределено тогда
			
			ВидНоменклатурыНаименование = ПолучитьЗначениеРеквизитаДокумента(СтрокаТовара.ЗначенияРеквизитов, "ВидНоменклатуры");
			ТипНоменклатурыНаименование = ПолучитьЗначениеРеквизитаДокумента(СтрокаТовара.ЗначенияРеквизитов, "ТипНоменклатуры");
			
			Если ЗначениеЗаполнено(ТипНоменклатурыНаименование) тогда						
				Если ТипНоменклатурыНаименование = "Товар" тогда
					ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
				ИначеЕсли ТипНоменклатурыНаименование = "Услуга" тогда
					ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
				Иначе
					ТипНоменклатуры 	= Перечисления.ТипыНоменклатуры.Товар;
				КонецЕсли;
			Иначе
				ТипНоменклатуры 		= Перечисления.ТипыНоменклатуры.Товар;
				ВидНоменклатурыНаименование = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВидНоменклатурыНаименование) тогда
				
				ВидНоменклатуры 		= Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ВидНоменклатурыНаименование, Истина);
				
				Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) тогда
					
					Выборка = Справочники.ВидыНоменклатуры.Выбрать();	
					Пока Выборка.Следующий() Цикл
						Если Выборка.ТипНоменклатуры = ТипНоменклатуры тогда
							ВидНоменклатуры = Выборка.Ссылка;	
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				
				Если ТипНоменклатуры 	= Перечисления.ТипыНоменклатуры.Товар тогда
					ВидНоменклатуры 	= ПараметрыОбмена.ВидНоменклатурыТовар;	
				Иначе
					ВидНоменклатуры 	= ПараметрыОбмена.ВидНоменклатурыУслуга;	
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяНоменклатура.ВидНоменклатуры 				= ВидНоменклатуры;	
			НоваяНоменклатура.ТипНоменклатуры 				= ВидНоменклатуры.ТипНоменклатуры;	
			НоваяНоменклатура.ИспользованиеХарактеристик 	= ВидНоменклатуры.ИспользованиеХарактеристик;	
			НоваяНоменклатура.ИспользоватьУпаковки 			= ВидНоменклатуры.ИспользоватьУпаковки;	
			НоваяНоменклатура.НаборУпаковок 				= ВидНоменклатуры.НаборУпаковок;
			НоваяНоменклатура.ВариантОформленияПродажи      = ВидНоменклатуры.ВариантОформленияПродажи;
			
			Если НоваяНоменклатура.НаборУпаковок.Пустая() И ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга тогда
				НоваяНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
			КонецЕсли;
			
			НоваяНоменклатура.ВариантОформленияПродажи 		= ВидНоменклатуры.ВариантОформленияПродажи;
			
			//добавляем единицы измерения
			ЕдиницаИзмеренияXML = СтрокаТовара.Единица;
			Если ЕдиницаИзмеренияXML <> Неопределено тогда
				
				ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ЕдиницаИзмеренияXML.Код).Ссылка; 
				
				Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) тогда

					НоваяЕдиницаИзмерения 						= Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
					НоваяЕдиницаИзмерения.ТипИзмеряемойВеличины	= Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;
					НоваяЕдиницаИзмерения.Код 					= ЕдиницаИзмеренияXML.Код;
					НоваяЕдиницаИзмерения.Б_Идентификатор 		= ЕдиницаИзмеренияXML.Ид;
					НоваяЕдиницаИзмерения.Наименование 			= ?(ЕдиницаИзмеренияXML.НаименованиеКраткое = "", ЕдиницаИзмеренияXML.НаименованиеПолное, ЕдиницаИзмеренияXML.НаименованиеКраткое) ;
					НоваяЕдиницаИзмерения.НаименованиеПолное	= ЕдиницаИзмеренияXML.НаименованиеПолное;

					Попытка
						НоваяЕдиницаИзмерения.Записать();
						ЕдиницаИзмерения = НоваяЕдиницаИзмерения.Ссылка;   						
					Исключение
						Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось записать единицу измерения " + ЕдиницаИзмеренияXML.НаименованиеКраткое + " "+ ОписаниеОшибки(), ПараметрыОбмена);
						НоваяЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецПопытки;			
				КонецЕсли;
				
				НоваяНоменклатура.ЕдиницаИзмерения 	= ЕдиницаИзмерения;
				НоваяНоменклатура.ЕдиницаДляОтчетов = ЕдиницаИзмерения;
				
				Попытка
					НоваяНоменклатура.Записать();
					Номенклатура = НоваяНоменклатура.Ссылка;
				Исключение
					Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось записать номенклатуру " + СтрокаТовара.Наименование + " "+ ОписаниеОшибки(), ПараметрыОбмена);
				КонецПопытки;
			Иначе
				Б_ОбменССайтомСервер.СообщитьПодробно("У номенклатуры с кодом: " + ИдНоменклатуры + "не найдена единица измерения в заказе. Номенклатура не будет создана.", ПараметрыОбмена);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ХарактеристикаНоменклатуры = Неопределено И ЗначениеЗаполнено(ИдХарактеристики) И ЗначениеЗаполнено(Номенклатура) тогда
		
		НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		НоваяХарактеристика.Владелец 		= Номенклатура;
		НоваяХарактеристика.Б_Идентификатор = ИдХарактеристики;
		НоваяХарактеристика.Наименование 	= СтрокаТовара.Наименование;
		
		Попытка
			НоваяХарактеристика.Записать();
			ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;
		Исключение
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось создать характеристику " + СтрокаТовара.Наименование + " "+ ОписаниеОшибки(), ПараметрыОбмена);
			
		КонецПопытки;
		
	КонецЕсли;
    
    Если ЗначениеЗаполнено(Номенклатура) тогда
        Результат.Вставить("Номенклатура"                , Номенклатура);
        Результат.Вставить("ЕдиницаИзмерения"            , Номенклатура.ЕдиницаИзмерения);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) тогда
        Результат.Вставить("ХарактеристикаНоменклатуры"    , ХарактеристикаНоменклатуры);
    КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииДобавленияИОбновленияИнформацииОКонтрагенте

/////////////////////////////////////////////////////////////////////////
//      Добавление и обновление информации о контрагенте/партнере      //
/////////////////////////////////////////////////////////////////////////

// Функция - возвращает контрагента по данным с сайта. Если необходимо - создает/обновляет его
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ЮрФизЛицо		 - 	 Тип контрагента 
//  ДокументXML		 - 	 Строка таблицы значений с содержимым документа с сайта 
// Возвращаемое значение:
//   Контрагент 
Функция ПолучитьКонтрагента(ПараметрыОбмена, ЮрФизЛицо, ДокументXML)
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.КонтрагентФизлицо) тогда	
		Возврат ПараметрыОбмена.КонтрагентФизлицо; 	
	КонецЕсли;
	
	Контрагент 	= Справочники.Контрагенты.ПустаяСсылка();
	
	ИнформацияОКонтрагенте = ДокументXML.Контрагент;
	
	лПорядокИдентификации = Новый СписокЗначений;
	
	Если ИнформацияОКонтрагенте.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо тогда
		лПорядокИдентификации = ПараметрыОбмена.ПорядокИдентификацииЮрЛиц;	
	Иначе
		лПорядокИдентификации = ПараметрыОбмена.ПорядокИдентификацииФизЛиц;	
	КонецЕсли;
	
	Для Каждого ТекЗначение из лПорядокИдентификации Цикл
		
		Критерий = ТекЗначение.Значение;
		
		Если Критерий = "Внешний идентификатор" тогда	
			Контрагент = Б_ОбменССайтомСервер.ПолучениеКонтрагентаПоКоду(ПараметрыОбмена, ИнформацияОКонтрагенте.Ид, ИнформацияОКонтрагенте.Наименование);
		ИначеЕсли Критерий = "Не использовать" тогда			
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			Контрагент = ПолучитьКонтрагентаПоКритерию(ПараметрыОбмена, Критерий, ИнформацияОКонтрагенте)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) или  Контрагент = Неопределено тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Контрагент = Неопределено тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Из за того, что по критерию было найдено несколько контрагентов,в документ это поле не будет заполнено. Документ с Ид:" + ДокументXML.Ид, ПараметрыОбмена);		
		Возврат Справочники.Контрагенты.ПустаяСсылка();
		
	ИначеЕсли НЕ Контрагент = Справочники.Контрагенты.ПустаяСсылка() тогда
		
		//версионность не учитываем
		//Если Контрагент.ВерсияДанных 	= ИнформацияОКонтрагенте.НомерВерсии И НЕ Контрагент.Партнер.Пустая() тогда
		//	Возврат Контрагент.Ссылка;	
		//КонецЕсли;
		
		Если ПараметрыОбмена.НеРедактироватьКонтрагентовПришедшихССайта тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("В настройках указано, что контрагенты не обновляются. Контрагент: " + ИнформацияОКонтрагенте.Наименование + " не будет обновлен.", ПараметрыОбмена);
			Возврат Контрагент.Ссылка;	
		Иначе
			Контрагент 	= Контрагент.ПолучитьОбъект();
		КонецЕсли;

	Иначе
		Контрагент 	= Справочники.Контрагенты.СоздатьЭлемент();
		
	КонецЕсли;	
	
	Партнер 	= ПолучитьОбновитьПартнера(ПараметрыОбмена, Контрагент, ИнформацияОКонтрагенте);
			
	Если НЕ ЗначениеЗаполнено(Партнер) тогда
		
		Если  Контрагент.Партнер.Пустая() тогда

			Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось создать партнера для контрагента: " + ИнформацияОКонтрагенте.Наименование + ". Контрагент не будет создан.", ПараметрыОбмена);
					
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			Партнер = Контрагент.Партнер;	
		КонецЕсли;
		

	КонецЕсли;
	
	Контрагент.Партнер = Партнер;
	
	Контрагент.Б_Идентификатор 		= ИнформацияОКонтрагенте.Ид;
	Контрагент.Б_НомерВерсии 		= ИнформацияОКонтрагенте.НомерВерсии;
	
	Контрагент.Наименование			= ИнформацияОКонтрагенте.Наименование;
	
	Контрагент.ИНН		 			= ИнформацияОКонтрагенте.ИНН;
	Контрагент.КПП					= ИнформацияОКонтрагенте.КПП;
	Контрагент.КодПоОКПО 			= ИнформацияОКонтрагенте.КодПоОКПО;
	Контрагент.ПометкаУдаления		= ИнформацияОКонтрагенте.ПометкаУдаления;
	
	Контрагент.ЮрФизЛицо			= ИнформацияОКонтрагенте.ЮрФизЛицо;
	
	Если ИнформацияОКонтрагенте.ЮрФизЛицо 	= Перечисления.ЮрФизЛицо.ЮрЛицо тогда
		
		Контрагент.ЮридическоеФизическоеЛицо= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;	
		
	Иначе
		
		Контрагент.ЮридическоеФизическоеЛицо= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;	
		
	КонецЕсли;
	
	Контрагент.НаименованиеПолное	= ИнформацияОКонтрагенте.НаименованиеПолное;
	
	Попытка

		ЗаполнениеКонтактовКонтрагента(Контрагент, "Контрагент", ИнформацияОКонтрагенте);
		
		Контрагент.Записать();
		
		Результат = Контрагент.Ссылка;
		
		ЗаполнениеКонтактныхЛицКонтрагента(Результат.Партнер, ИнформацияОКонтрагенте);
		
		ЗаписатьБанковскиеСчетаКонтрагента(ПараметрыОбмена, Результат, ИнформацияОКонтрагенте.БанковскиеСчета);

	Исключение
		
		Б_ОбменССайтомСервер.СообщитьПодробно(ОписаниеОшибки(), ПараметрыОбмена);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонтрагентаПоКритерию(ПараметрыОбмена, Критерий, ИнформацияОКонтрагенте)
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	лЗначениеПоиска = "";
	
	Запрос = Новый Запрос();
	
	Если Критерий = "Email" ИЛИ Критерий = "Телефон" тогда
		
			
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Почта
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО КонтрагентыКонтактнаяИнформация.Ссылка = Контрагенты.Ссылка
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = &ТипКИ";
		
		Если Критерий = "Email" тогда
			
			Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			
			Запрос.Текст = Запрос.Текст + "
			|	И КонтрагентыКонтактнаяИнформация.Представление = &Почта";
			
			тзнКонтактактов = ИнформацияОКонтрагенте.Контакты;
			
			Если тзнКонтактактов <> Неопределено тогда
				Для каждого ТекКонтакт из тзнКонтактактов Цикл
					Если ТекКонтакт.ТипВидКонтактнойИнформации = "Почта" тогда
						
						лЗначениеПоиска = ТекКонтакт.Представление;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Почта", лЗначениеПоиска);
			
		ИначеЕсли Критерий = "Телефон" тогда
			
			Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.Телефон);
			
			Запрос.Текст = Запрос.Текст + "
			|	И КонтрагентыКонтактнаяИнформация.Представление = &Телефон";
			
			тзнКонтактактов = ИнформацияОКонтрагенте.Контакты;
			
			Если тзнКонтактактов <> Неопределено тогда
				Для каждого ТекКонтакт из тзнКонтактактов Цикл
					Если ТекКонтакт.ТипВидКонтактнойИнформации = "Телефон" тогда
						
						лЗначениеПоиска 	= ТекКонтакт.Представление;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Телефон", лЗначениеПоиска);
			
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст =		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка Как Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|";
		
		Если Критерий = "ИНН" тогда
			
			лЗначениеПоиска = ИнформацияОКонтрагенте.ИНН;
			Запрос.УстановитьПараметр("ИНН", ?(ЗначениеЗаполнено(ИнформацияОКонтрагенте.ИНН), ИнформацияОКонтрагенте.ИНН, "Это физ. лицо. Поиск по ИНН пропускаем."));
			Запрос.УстановитьПараметр("КПП", ИнформацияОКонтрагенте.КПП);
			
			Запрос.Текст = Запрос.Текст + "
			| Контрагенты.ИНН = &ИНН
			| И Контрагенты.КПП = &КПП ";
			
		ИначеЕсли Критерий = "Наименование" тогда
			
			лЗначениеПоиска = ИнформацияОКонтрагенте.Наименование;			
			Запрос.УстановитьПараметр("Наименование", лЗначениеПоиска);
			
			Запрос.Текст = Запрос.Текст + "
			|Контрагенты.Наименование = &Наименование ";
				
		ИначеЕсли Критерий = "Полное наименование" тогда
			
			лЗначениеПоиска = ИнформацияОКонтрагенте.НаименованиеПолное;			
			Запрос.УстановитьПараметр("Наименование", лЗначениеПоиска);
			
			Запрос.Текст = Запрос.Текст + "
			|Контрагенты.Наименование = &Наименование ";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если лЗначениеПоиска = "" тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Не найдено значение по критерию: " + Критерий + ". Будет произведен поиск по другим критериям. Контрагент: " + ИнформацияОКонтрагенте.Наименование, ПараметрыОбмена);		
		Возврат Контрагент;
	
	КонецЕсли;
	
	
	тзнКонтрагента 	= Запрос.Выполнить().Выгрузить();

	КоличествоНайденных = тзнКонтрагента.Количество();
	
	Если КоличествоНайденных > 1 тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Найдено несколько контрагентов по критерию: " + Критерий + " с значением: " + лЗначениеПоиска, ПараметрыОбмена);		
		Контрагент = Неопределено;
		
	ИначеЕсли КоличествоНайденных = 1 тогда
		Контрагент = тзнКонтрагента[0].Контрагент; 	   
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции


// Функция - возвращает партнера по данным с сайта. Если необходимо - создает/обновляет его
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  ИнформацияОКонтрагенте	 - 	 Структура, хранящая информацию о контрагенте заказа 
// Возвращаемое значение:
//   Партнер 
Функция ПолучитьОбновитьПартнера(ПараметрыОбмена, Контрагент, ИнформацияОКонтрагенте)
	
	Партнер = Неопределено;
	
	Если ЗначениеЗаполнено(Контрагент.Партнер) тогда
		Партнер =	Контрагент.Партнер;
	КонецЕсли;
	
	Если Партнер = Неопределено И ИнформацияОКонтрагенте.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.КонтрагентФизлицо) тогда	
		Возврат ПараметрыОбмена.КонтрагентФизлицо.Партнер; 	
	КонецЕсли;
	
	//Если Партнер = Неопределено тогда
	//
	//	Запрос = Новый запрос;
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	Партнеры.Ссылка КАК Партнер
	//	|ИЗ
	//	|	Справочник.Партнеры КАК Партнеры
	//	|ГДЕ
	//	|	Партнеры.Б_Идентификатор = &Идентификатор
	//	|	И Партнеры.Наименование = &Наименование";
	//	Запрос.УстановитьПараметр("Идентификатор", ИнформацияОКонтрагенте.Ид);
	//	Запрос.УстановитьПараметр("Наименование", ИнформацияОКонтрагенте.Наименование);
	//	
	//	ТзнПартнеров = Запрос.Выполнить().Выгрузить();
	//	
	//	Если ТзнПартнеров.Количество() > 0 Тогда
	//		Партнер = ТзнПартнеров[0].Партнер;
	//	Иначе
	//		Партнер = Неопределено;	
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если Партнер = Неопределено тогда
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	Иначе
		//Если Партнер.ВерсияДанных <> ИнформацияОКонтрагенте.НомерВерсии тогда
		
		Если ПараметрыОбмена.НеРедактироватьКонтрагентовПришедшихССайта тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("В настройках указано, что партнеры не обновляются. Партнер: " + ИнформацияОКонтрагенте.Наименование + " не будет обновлен.", ПараметрыОбмена);
			Возврат Партнер;	
		Иначе
			ПартнерОбъект = Партнер.ПолучитьОбъект();	
		КонецЕсли;
		//Иначе
		//	Возврат Партнер;
		//КонецЕсли;
	КонецЕсли;
	
	ПартнерОбъект.Б_Идентификатор	= ИнформацияОКонтрагенте.Ид;
	ПартнерОбъект.Б_НомерВерсии		= ИнформацияОКонтрагенте.НомерВерсии;
	
	ПартнерОбъект.Клиент = Истина;
	ПартнерОбъект.Родитель 	= ПараметрыОбмена.ГруппаДляНовыхКонтрагентов;
	
	Если ИнформацияОКонтрагенте.ЮрФизЛицо 	= Перечисления.ЮрФизЛицо.ЮрЛицо тогда
		ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	Иначе
		ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	КонецЕсли;
	
	ПартнерОбъект.ДатаРегистрации 	= ?(ЗначениеЗаполнено(ПартнерОбъект.ДатаРегистрации), ПартнерОбъект.ДатаРегистрации, ТекущаяДата());
	ПартнерОбъект.Комментарий 		= НСтр("ru = 'Создан автоматически при импорте заказов с сайта'");
	ПартнерОбъект.Наименование 		= ИнформацияОКонтрагенте.Наименование;
	ПартнерОбъект.НаименованиеПолное= ИнформацияОКонтрагенте.НаименованиеПолное;
	
	Попытка
		
		ЗаполнениеКонтактовКонтрагента(ПартнерОбъект, "Партнер", ИнформацияОКонтрагенте);
		
		ПартнерОбъект.Записать();
		
		Возврат ПартнерОбъект.Ссылка;
		
	Исключение
		
		Б_ОбменССайтомСервер.СообщитьПодробно(ОписаниеОшибки(), ПараметрыОбмена);
		
        Возврат Справочники.Партнеры.ПустаяСсылка();
		
	КонецПопытки;
	
КонецФункции

// Процедура - Создает банковские счета контрагента по данным документа
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  Контрагент		 - 	 Контрагент документа 
//  БанковскиеСчета	 - 	 Таблица значений банковских счетов контрагента документа 
Процедура ЗаписатьБанковскиеСчетаКонтрагента(ПараметрыОбмена, Контрагент, БанковскиеСчета)
	
	Если БанковскиеСчета <> Неопределено тогда
		
		Для каждого ТекБанковскийСчет из БанковскиеСчета Цикл
			
			НомерСчета = СтрЗаменить(ТекБанковскийСчет.НомерСчета, " ", "");
			Если ПустаяСтрока(НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			БИК = СтрЗаменить(ТекБанковскийСчет.Банк.БИК, " ", "");
			
			Если ПустаяСтрока(БИК) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	Банки.Ссылка
			|ИЗ
			|	Справочник.КлассификаторБанковРФ КАК Банки
			|ГДЕ
			|	Банки.Код = &БИК");
			Запрос.УстановитьПараметр("БИК", БИК);
			
			БанкСсылка = НеОпределено;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				БанкСсылка = Выборка.Ссылка;
				
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Владелец
			|	И БанковскиеСчета.НомерСчета = &НомерСчета");
			
			Запрос.УстановитьПараметр("Владелец", Контрагент);
			Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
			
			Если БанкСсылка = НеОпределено Тогда
				Запрос.Текст = Запрос.Текст
				+ " И БанковскиеСчета.БИКБанка = &БИК 
				| И БанковскиеСчета.РучноеИзменениеРеквизитовБанка ";
				Запрос.УстановитьПараметр("БИК", БИК);
			Иначе
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Банк = &Банк ";
				Запрос.УстановитьПараметр("Банк", БанкСсылка);
			КонецЕсли;
			
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Валюта = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(НомерСчета);
			
			Если НЕ ЗначениеЗаполнено(Валюта) Тогда
				
				Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось определить валюту банковского счета: " + НомерСчета, ПараметрыОбмена);
				
				Продолжить;
				
			КонецЕсли;
			
			СчетОбъект = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			СчетОбъект.ВалютаДенежныхСредств = Валюта;
			СчетОбъект.Владелец = Контрагент;
			СчетОбъект.НомерСчета = НомерСчета;
			СчетОбъект.Наименование = НомерСчета;
			
			Если БанкСсылка = НеОпределено Тогда
				
				СчетОбъект.РучноеИзменениеРеквизитовБанка = Истина;
				
				СчетОбъект.НаименованиеБанка = СокрЛП(ТекБанковскийСчет.Банк.Наименование);
				СчетОбъект.БИКБанка = БИК;
				СчетОбъект.АдресБанка = СокрЛП(ТекБанковскийСчет.Банк.Адрес.Представление);
				СчетОбъект.КоррСчетБанка = СтрЗаменить(ТекБанковскийСчет.Банк.СчетКорреспондентский, " ", "");
				
			Иначе
				
				СчетОбъект.Банк = БанкСсылка;
				
			КонецЕсли;
			
			СчетОбъект.Записать();
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - заполянет контактные данные контрагента по данным документа с сайта 
//
// Параметры:
//  Объект					 - 	 Контрагент/Партнер 
//  ТипОбъекта				 - 	 Тип объекта 
//  ИнформацияОКонтрагенте	 - 	 Информация контрагента с документа сайта 
Процедура ЗаполнениеКонтактовКонтрагента(Объект, ТипОбъекта, ИнформацияОКонтрагенте)
		
	Если ТипОбъекта = "Контрагент" тогда
		
		лПочта      = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		лТелефон	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		
	ИначеЕсли ТипОбъекта = "Партнер" тогда

		лПочта      = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		лТелефон	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		
	КонецЕсли;

	тзнКонтактактов = ИнформацияОКонтрагенте.Контакты;
	
	Если тзнКонтактактов <> Неопределено тогда
		
		Для каждого ТекКонтакт из тзнКонтактактов Цикл
			
			Если ТекКонтакт.ТипКонтрагента = ТипОбъекта тогда

				Если НЕ ЗначениеЗаполнено(ТекКонтакт.ТипВидКонтактнойИнформации) ИЛИ ПустаяСтрока(ТекКонтакт.Представление) тогда
					Продолжить;	
				КонецЕсли;
			
				Если ТекКонтакт.ТипВидКонтактнойИнформации = "Почта" тогда
					
					СтруктураПоиска = Новый Структура("Тип, Вид");
					СтруктураПоиска.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					СтруктураПоиска.Вид = лПочта;
					ОчиститьКонтактнуюИнформациюКонтрагентаПартнера(Объект, СтруктураПоиска);

					НовКонтакт 					= Объект.КонтактнаяИнформация.Добавить();
					НовКонтакт.Тип 				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					НовКонтакт.Вид 				= лПочта;
					НовКонтакт.Представление 	= ТекКонтакт.Представление;
					НовКонтакт.АдресЭП		 	= ТекКонтакт.Представление;
					НовКонтакт.ЗначенияПолей	= УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ТекКонтакт.Представление, лПочта);
					
				ИначеЕсли ТекКонтакт.ТипВидКонтактнойИнформации = "Телефон" тогда
					
					СтруктураПоиска = Новый Структура("Тип, Вид");
					СтруктураПоиска.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтруктураПоиска.Вид = лТелефон;
					ОчиститьКонтактнуюИнформациюКонтрагентаПартнера(Объект, СтруктураПоиска);

					НовКонтакт 					= Объект.КонтактнаяИнформация.Добавить();
					НовКонтакт.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
					НовКонтакт.Вид 				= лТелефон;
					НовКонтакт.Представление 	= ТекКонтакт.Представление;
					НовКонтакт.НомерТелефона 	= ТекКонтакт.Представление;
					НовКонтакт.НомерТелефонаБезКодов = ТекКонтакт.Представление;
					НовКонтакт.ЗначенияПолей	= УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ТекКонтакт.Представление, лТелефон);
					
				Иначе
					
					СтруктураПоиска = Новый Структура("Тип, Вид");
					СтруктураПоиска.Тип = ТекКонтакт.ТипВидКонтактнойИнформации.Тип;
					СтруктураПоиска.Вид = ТекКонтакт.ТипВидКонтактнойИнформации;
					ОчиститьКонтактнуюИнформациюКонтрагентаПартнера(Объект, СтруктураПоиска);
					
					НовКонтакт 					= Объект.КонтактнаяИнформация.Добавить();
					НовКонтакт.Тип 				= ТекКонтакт.ТипВидКонтактнойИнформации.Тип;
					НовКонтакт.Вид 				= ТекКонтакт.ТипВидКонтактнойИнформации;
					НовКонтакт.ЗначенияПолей	= УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ТекКонтакт.Представление, ТекКонтакт.ТипВидКонтактнойИнформации);
					НовКонтакт.Представление 	= ТекКонтакт.Представление;
					
					Если ТекКонтакт.АдресныеПоля <> Неопределено тогда
						Для Каждого СтрокаУточнения Из ТекКонтакт.АдресныеПоля Цикл
							
							Если СтрокаУточнения.ТипЗначения = "Страна" Тогда
								НовКонтакт.Страна = СтрокаУточнения.Значение;
							ИначеЕсли СтрокаУточнения.ТипЗначения = "Регион" Тогда
								НовКонтакт.Регион = СтрокаУточнения.Значение;
							ИначеЕсли СтрокаУточнения.ТипЗначения = "Город" Тогда
								НовКонтакт.Город = СтрокаУточнения.Значение;
							КонецЕсли;
							
						КонецЦикла;
						НовКонтакт.ЗначенияПолей = СтрокаПоСпискуПолей(ТекКонтакт.АдресныеПоля);
					КонецЕсли;  				
				
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - очищаеь контактную информацию контрагента/партнера по структуре поиска
//
// Параметры:
//  Объект			 - 	 Контрагент/Партнер 
//  СтруктураПоиска	 - 	 Структура отбора в контактной информации контрагента/партнера 
Процедура ОчиститьКонтактнуюИнформациюКонтрагентаПартнера(Объект, Знач СтруктураПоиска)
	
	Найдено = Объект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаНайдено Из Найдено Цикл
		Объект.КонтактнаяИнформация.Удалить(СтрокаНайдено);
	КонецЦикла;
	
КонецПроцедуры

// Функция - Получить банковский счет для документа
//
// Параметры:
//  ДокументXML	 - 	 Строка таблицы значений с содержимым документа с сайта 
//  Контрагент	 - 	 Контрагент, по которому ищется счет 
// Возвращаемое значение:
//   Банковский счет 
Функция ПолучитьБанковскийСчетДляДокумента(ДокументXML, Контрагент)
	
	Результат = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	
	БанковскиеСчета = ДокументXML.Контрагент.БанковскиеСчета;
	
	Если БанковскиеСчета <> Неопределено тогда
		
		Для Каждого ТекБанковскийСчет из БанковскиеСчета Цикл
			
			НомерСчета = СтрЗаменить(ТекБанковскийСчет.НомерСчета, " ", "");
			Если ПустаяСтрока(НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			БИК = СтрЗаменить(ТекБанковскийСчет.Банк.БИК, " ", "");
			
			Если ПустаяСтрока(БИК) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	Банки.Ссылка
			|ИЗ
			|	Справочник.КлассификаторБанковРФ КАК Банки
			|ГДЕ
			|	Банки.Код = &БИК");
			Запрос.УстановитьПараметр("БИК", БИК);
			
			БанкСсылка = НеОпределено;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				БанкСсылка = Выборка.Ссылка;
				
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Владелец
			|	И БанковскиеСчета.НомерСчета = &НомерСчета");
			
			Запрос.УстановитьПараметр("Владелец", Контрагент);
			Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
			
			Если БанкСсылка = НеОпределено Тогда
				Запрос.Текст = Запрос.Текст
				+ " И БанковскиеСчета.БИКБанка = &БИК 
				| И БанковскиеСчета.РучноеИзменениеРеквизитовБанка ";
				Запрос.УстановитьПараметр("БИК", БИК);
			Иначе
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Банк = &Банк ";
				Запрос.УстановитьПараметр("Банк", БанкСсылка);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Возврат Результат.Ссылка;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;	
		
КонецФункции

// Функция - возвращает валюту по номеру счета
//
// Параметры:
//  НомерСчета	 - 	 Номер счета 
// Возвращаемое значение:
//   Валюта 
Функция ПолучитьВалютуПоНомеруСчета(НомерСчета) Экспорт
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|");
	
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

// Процедура - заполняет контактные лиц контрагента
//
// Параметры:
//  Партнер					 - 	 Партнер 
//  ИнформацияОКонтрагенте	 - 	 Данные контрагента с документа сайта 
Процедура ЗаполнениеКонтактныхЛицКонтрагента(Партнер, ИнформацияОКонтрагенте)
	
	тзнКонтактыхЛиц = ИнформацияОКонтрагенте.КонтактныеЛица;
	
	Если тзнКонтактыхЛиц <> Неопределено тогда
		
		Для каждого ТекКонтактноеЛицо из тзнКонтактыхЛиц Цикл
			
			КонтактноеЛицо = Б_ОбменССайтомСервер.ПолучениеОбъектаПоКоду(ТекКонтактноеЛицо.Ид, "СправочникСсылка.КонтактныеЛицаПартнеров", "Справочник.КонтактныеЛицаПартнеров");
			
			Если КонтактноеЛицо = Неопределено тогда
				
				Элемент = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
				Элемент.Б_Идентификатор = ТекКонтактноеЛицо.Ид;
				Элемент.Владелец = Партнер;
				Элемент.Наименование = ТекКонтактноеЛицо.Наименование;
				Элемент.Комментарий = НСтр("ru = 'Создан автоматически при импорте заказа с сайта '") + ТекущаяДата();
				Элемент.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает адрес строкой по списку полей
//
// Параметры:
//  АдресныеПоля - 	 адресные поля контактного адреса контаргента/партнера
// Возвращаемое значение:
//   Строка адреса 
Функция СтрокаПоСпискуПолей(АдресныеПоля)
	
	Результат = "";
	Для Каждого СтрТаблицы Из АдресныеПоля Цикл
		
		Значение 	= СтрТаблицы.Значение;
		ТипЗначения = СтрТаблицы.ТипЗначения;
		ТипЗначения = ?(ТипЗначения = "Почтовый индекс"	, "Индекс"			, ТипЗначения);
		ТипЗначения = ?(ТипЗначения = "Населенный пункт", "НаселенныйПункт"	, ТипЗначения);
		
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			ТипЗначения + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

