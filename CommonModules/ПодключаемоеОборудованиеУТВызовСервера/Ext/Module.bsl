
#Область ПрограммныйИнтерфейс

// Получить оборудование подключенное к терминалу.
//
// Параметры:
//  ЭквайринговыйТерминал - СправочникСсылка.ЭквайринговыеТерминалы - Эквайринговый терминал.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * Терминал - СправочникСсылка.ПодключаемоеОборудование - Терминал.
//   * ККТ - СправочникСсылка.ПодключаемоеОборудование - ККТ.
//
Функция ОборудованиеПодключенноеКТерминалу(ЭквайринговыйТерминал) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НастройкаРМК
	|ИЗ
	|	Справочник.НастройкиРМК КАК Т
	|ГДЕ
	|	Т.РабочееМесто = &РабочееМесто
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование                    КАК Терминал,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования      КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудованиеККТ                 КАК ККТ,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудованиеККТ.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаРМК КАК НастройкаРМК
	|		ПО НастройкаРМК.Ссылка = ЭквайринговыеТерминалы.Ссылка
	|ГДЕ
	|	ЭквайринговыеТерминалы.ЭквайринговыйТерминал = &ЭквайринговыйТерминал");
	
	Запрос.УстановитьПараметр("РабочееМесто",          МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Терминал");
	ВозвращаемоеЗначение.Вставить("ККТ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Выборка);
		Если Выборка.ИспользоватьБезПодключенияОборудования Тогда
			ВозвращаемоеЗначение.Терминал = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить оборудование подключенное к кассе.
//
// Параметры:
//  Касса - СправочникСсылка.Кассы - Касса.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * Терминал - СправочникСсылка.ПодключаемоеОборудование - Терминал.
//   * ККТ - СправочникСсылка.ПодключаемоеОборудование - ККТ.
//
Функция ОборудованиеПодключенноеККассе(Касса) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НастройкаРМК
	|ИЗ
	|	Справочник.НастройкиРМК КАК Т
	|ГДЕ
	|	Т.РабочееМесто = &РабочееМесто
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Кассы.ПодключаемоеОборудование                 КАК ККТ,
	|	Кассы.ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.НастройкиРМК.Кассы КАК Кассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаРМК КАК НастройкаРМК
	|		ПО НастройкаРМК.Ссылка = Кассы.Ссылка
	|ГДЕ
	|	Кассы.Касса = &Касса");
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("Касса",        Касса);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Терминал");
	ВозвращаемоеЗначение.Вставить("ККТ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Выборка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить оборудование подключенное к кассе ККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * Терминал - СправочникСсылка.ПодключаемоеОборудование - Терминал.
//   * ККТ - СправочникСсылка.ПодключаемоеОборудование - ККТ.
//
Функция ОборудованиеПодключенноеККассеККМ(КассаККМ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НастройкаРМК
	|ИЗ
	|	Справочник.НастройкиРМК КАК Т
	|ГДЕ
	|	Т.РабочееМесто = &РабочееМесто
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассыККМ.ПодключаемоеОборудование                 КАК ККТ,
	|	КассыККМ.ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаРМК КАК НастройкаРМК
	|		ПО НастройкаРМК.Ссылка = КассыККМ.Ссылка
	|ГДЕ
	|	Не КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И КассыККМ.КассаККМ = &КассаККМ");
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("КассаККМ",     КассаККМ);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Терминал");
	ВозвращаемоеЗначение.Вставить("ККТ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Выборка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить оборудование подключенное по организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияБПО - Организация.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * Терминал - СправочникСсылка.ПодключаемоеОборудование - Терминал.
//   * ККТ - СправочникСсылка.ПодключаемоеОборудование - ККТ.
//
Функция ОборудованиеПодключенноеПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка          КАК ККТ,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Организация = &Организация
	|	И Не ПодключаемоеОборудование.ПометкаУдаления
	|	И ПодключаемоеОборудование.УстройствоИспользуется
	|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто");
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("Организация",  Организация);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Терминал");
	ВозвращаемоеЗначение.Вставить("ККТ", Новый Массив);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозвращаемоеЗначение.ККТ.Добавить(Выборка.ККТ);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * ИдентификаторЗаписи - Строка - Идентификатор записи.
//   * НомерЧекаККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ДокументСсылка - Документ-основание.
//   * Данные - ХранилищеЗначений - Данные чека, переданные в ККТ (XML).
//
Функция ДанныеЖурналаФискальныхОпераций(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналФискальныхОпераций.ФискальнаяОперацияНомерЧекаККМ           КАК НомерЧекаККМ,
	|	ЖурналФискальныхОпераций.ФискальнаяОперацияНомерСменыККМ          КАК НомерСменыККМ,
	|	ЖурналФискальныхОпераций.Устройство                               КАК Устройство,
	|	ЕСТЬNULL(ЖурналФискальныхОпераций.Устройство.СерийныйНомер, """") КАК УстройствоСерийныйНомер,
	|	ЖурналФискальныхОпераций.ФискальнаяОперацияСумма                  КАК Сумма,
	|	ЖурналФискальныхОпераций.ДокументОснование                        КАК ДокументОснование,
	|	ЖурналФискальныхОпераций.Данные                                   КАК Данные,
	|	ЖурналФискальныхОпераций.ИдентификаторЗаписи                      КАК ИдентификаторЗаписи
	|ИЗ
	|	РегистрСведений.ЖурналФискальныхОпераций КАК ЖурналФискальныхОпераций
	|ГДЕ
	|	ЖурналФискальныхОпераций.ДокументОснование = &ДокументСсылка
	|");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("Устройство");
		ФискальнаяОперация.Вставить("УстройствоСерийныйНомер");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("Данные");
		
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		
		Возврат ФискальнаяОперация;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить параметры фискализации чека.
//
// Параметры:
//  Шапка - Структура - Данные шапки документа.
//  Товары - Структура - Данные шапки документа.
//  Заказы - Структура - Данные шапки документа.
//  СуммаПредоплатыКорректировка - Число - Сумма предоплаты.
//  ЭтоВозврат - Булево - Признак возврата.
// 
// Возвращаемое значение:
//  Структура - см. функцию МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Функция ПараметрыФискализацииЧека(Шапка, Товары, Заказы = Неопределено, СуммаПредоплатыКорректировка = Неопределено, ЭтоВозврат = Ложь) Экспорт
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, ТекущаяДатаСеанса());
	
	ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ПараметрыФискализацииЧека.ДокументОснование      = Шапка.ДокументСсылка;
	Если ЭтоВозврат Тогда
		ПараметрыФискализацииЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	Иначе
		ПараметрыФискализацииЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	КонецЕсли;
	
	Если Шапка.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		ПараметрыФискализацииЧека.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	Иначе
		ПараметрыФискализацииЧека.СистемаНалогообложения = РозничныеПродажи.СистемаНалогообложенияФискальнойОперации(Шапка.Организация);
	КонецЕсли;
	
	ПараметрыФискализацииЧека.АдресРасчетов          = СведенияОЮрФизЛице.ФактическийАдрес;
	ПараметрыФискализацииЧека.МестоРасчетов          = "";
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыФискализацииЧека.ОрганизацияНазвание  = СведенияОЮрФизЛице.ПолноеНаименование;
	ПараметрыФискализацииЧека.ОрганизацияИНН       = СведенияОЮрФизЛице.ИНН;
	ПараметрыФискализацииЧека.ОрганизацияКПП       = СведенияОЮрФизЛице.КПП;
	ПараметрыФискализацииЧека.АдресМагазина        = СведенияОЮрФизЛице.ФактическийАдрес;
	ПараметрыФискализацииЧека.НаименованиеМагазина = СведенияОЮрФизЛице.СокращенноеНаименование;
	
	СуммаПоЗаказам  = 0;
	СуммаБезЗаказов = 0;
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если Шапка.ПоЗаказам И СтрокаТЧ.СверхЗаказа Тогда
			СуммаБезЗаказов = СуммаБезЗаказов + СтрокаТЧ.СуммаСНДС;
		ИначеЕсли Шапка.ПоЗаказам Тогда
			СуммаПоЗаказам = СуммаПоЗаказам + СтрокаТЧ.СуммаСНДС;
		Иначе
			СуммаБезЗаказов = СуммаБезЗаказов + СтрокаТЧ.СуммаСНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаПредоплаты = 0;
	Если СуммаПредоплатыКорректировка <> Неопределено Тогда
		
		СуммаПредоплаты = СуммаПредоплатыКорректировка
		
	Иначе
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
			
			Если Шапка.ПоЗаказам И СтрокаТЧ.СверхЗаказа Тогда
				
				Если ВалютаРегл <> Шапка.Валюта Тогда
					
					ПроцентПредоплаты = (Шапка.СуммаПредоплаты / Шапка.СуммаДокумента);
					
					СуммаПредоплаты = ПроцентПредоплаты
					                * СтрокаТЧ.СуммаСНДС + СуммаПредоплаты;
					
				Иначе
					
					// Сумма предоплаты берется из шапки документа
					
				КонецЕсли;
				
			ИначеЕсли Шапка.ПоЗаказам Тогда
				
				ДанныеЗаказа = Заказы.Найти(СтрокаТЧ.Заказ, "Заказ");
				Если ДанныеЗаказа <> Неопределено
					И ДанныеЗаказа.СуммаЗаказа <> 0 Тогда
					ПроцентПредоплаты = (ДанныеЗаказа.СуммаПредоплаты / ДанныеЗаказа.СуммаЗаказа);
				Иначе
					ПроцентПредоплаты = 0;
				КонецЕсли;
				
				СуммаПредоплаты = ПроцентПредоплаты * СтрокаТЧ.СуммаСНДС + СуммаПредоплаты;
				
			Иначе
				
				Если ВалютаРегл <> Шапка.Валюта Тогда
					
					ПроцентПредоплаты = (Шапка.СуммаПредоплаты / СуммаБезЗаказов);
					
					СуммаПредоплаты = ПроцентПредоплаты
					                * СтрокаТЧ.СуммаСНДС + СуммаПредоплаты;
					
				Иначе
					
					// Сумма предоплаты берется из шапки документа
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Шапка.ПоЗаказам
			И ВалютаРегл = Шапка.Валюта Тогда
			СуммаПредоплаты = СуммаПредоплаты + Шапка.СуммаПредоплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		Если СуммаПредоплаты > 0
			И СуммаПредоплаты >= (СуммаБезЗаказов + СуммаПоЗаказам) Тогда
			СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		ИначеЕсли СуммаПредоплаты > 0 Тогда
			СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
		Иначе
			СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
		КонецЕсли;
		
		СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиКлиентСервер.ПризнакПредметаРасчетаФискальнойОперации(
			СтрокаТЧ.ТипНоменклатуры,
			СтрокаТЧ.ПодакцизныйТовар);
		
		СтрокаПозицииЧека.НомерСекции       = 1;
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
		СтрокаПозицииЧека.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТЧ.НоменклатураНаименование,
			СтрокаТЧ.ХарактеристикаНаименование,
			СтрокаТЧ.УпаковкаНаименование);
		СтрокаПозицииЧека.Количество        = СтрокаТЧ.КоличествоУпаковок;
		СтрокаПозицииЧека.Цена              = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма             = СтрокаТЧ.СуммаСНДС;
		СтрокаПозицииЧека.СуммаСкидок       = СтрокаТЧ.СуммаСкидки;
		СтрокаПозицииЧека.СтавкаНДС         = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтрокаТЧ.СтавкаНДС);
		
		Если СтрокаПозицииЧека.Количество <> 0 Тогда
			СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2);
		КонецЕсли;
		
		ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	// Сумма постоплатой (в кредит)
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
	СтрокаОплаты.Вставить("Сумма",     СуммаПоЗаказам + СуммаБезЗаказов - СуммаПредоплаты);
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Сумма предоплатой (зачетом аванса)
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
	СтрокаОплаты.Вставить("Сумма",     СуммаПредоплаты);
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	Возврат ПараметрыФискализацииЧека;
	
КонецФункции

// Записать операцию в журнал фискальных операций.
//
// Параметры:
//  ТребуетсяПовторнаяПопыткаЗаписи - Булево - Требуется повторная попытка записи.
//  РеквизитыОперацииКассовогоУзла - Структура - см. функцию ПодключаемоеОборудованиеУТКлиент.СтруктураРеквизитыФискальнойОперацииКассовогоУзла().
//
Функция ЗаписатьВЖурналФискальныхОпераций(ТребуетсяПовторнаяПопыткаЗаписи, Знач РеквизитыФискальнойОперацииКассовогоУзла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "РегистрСведений.ЖурналФискальныхОпераций";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("ДокументОснование", РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование);
		Блокировка.Заблокировать();
		
		ВнесениеДенежныхСредствВКассуККМ = Неопределено;
		Если РеквизитыФискальнойОперацииКассовогоУзла.ДополнительныеПараметры.Свойство(
				"ВнесениеДенежныхСредствВКассуККМ",
				ВнесениеДенежныхСредствВКассуККМ)
				И ВнесениеДенежныхСредствВКассуККМ <> Неопределено Тогда
			РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование = РозничныеПродажи.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВнесениеДенежныхСредствВКассуККМ);
		КонецЕсли;
		
		ВыемкаДенежныхСредствИзКассыККМ = Неопределено;
		Если РеквизитыФискальнойОперацииКассовогоУзла.ДополнительныеПараметры.Свойство(
				"ВыемкаДенежныхСредствИзКассыККМ",
				ВыемкаДенежныхСредствИзКассыККМ)
				И ВыемкаДенежныхСредствИзКассыККМ <> Неопределено Тогда
			РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование = РозничныеПродажи.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВыемкаДенежныхСредствИзКассыККМ);
		КонецЕсли;
		
		ПодключаемоеОборудованиеУТСервер.ЗаписатьВЖурналФискальныхОперацийУпрощенно(РеквизитыФискальнойОперацииКассовогоУзла);
		
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
