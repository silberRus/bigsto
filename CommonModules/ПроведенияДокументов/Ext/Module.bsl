
Процедура ПровестиПоВсемРегистрам(МетаДвижения, ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	Для Каждого Движение Из МетаДвижения Цикл
		
		Если ДополнительныеСвойства.Свойство(Движение.Имя) Тогда
			
			НаборДвижениий = Движения[Движение.Имя];
			НаборДвижениий.Записывать = Истина;
			НаборДвижениий.Загрузить(ДополнительныеСвойства[Движение.Имя]);
			
			
			//Круглов 11.02.16
			//Установка управляемой блокировки:
			//1. Взяты все регистры, по которым производится контроль остатков
			//2. Из них выбраны только те, по которым возможна конкуренция.
			//3. Для каждого регистра определяем вид движения по которому возможна конкуренция. Если не указано, то блокируем все виды.
			
			
			НужнаБлокировка=Ложь;
			БлокируемыйВидДвижений="";
			
			Если Движение.Имя = "ТоварыНаСкладах" Тогда
				НужнаБлокировка=Истина;
				БлокируемыйВидДвижений=ВидДвиженияНакопления.Расход;
			//ИначеЕсли Движение.Имя 	= "ПартииТоваров" Тогда
			//	НужнаБлокировка=Истина;
			//	БлокируемыйВидДвижений=ВидДвиженияНакопления.Расход;
			ИначеЕсли Движение.Имя 	= "ТоварыВЯчейках" Тогда  
				НужнаБлокировка=Истина;
				БлокируемыйВидДвижений=ВидДвиженияНакопления.Расход;
			ИначеЕсли Движение.Имя 	= "ТоварыВПути" Тогда 	
				НужнаБлокировка=Истина;
				БлокируемыйВидДвижений=ВидДвиженияНакопления.Расход;
			ИначеЕсли Движение.Имя 	= "ТоварыНаТаможне" Тогда 	
				НужнаБлокировка=Истина;
				БлокируемыйВидДвижений=ВидДвиженияНакопления.Расход;
			//ИначеЕсли Движение.Имя 	= "СборкаЗаказа" Тогда 				
			//ИначеЕсли Движение.Имя 	= "ПередачаТоваров" Тогда 			
			//ИначеЕсли Движение.Имя 	= "ИнтернетЗаказПокупателя" Тогда 	
			//ИначеЕсли Движение.Имя 	= "ВнутренниеЗаказы" Тогда 			
			//ИначеЕсли Движение.Имя 	= "ЗаказыПоставщикам" Тогда 		
			//ИначеЕсли Движение.Имя 	= "ТоварыПоставщиковВПути" Тогда 
			//ИначеЕсли Движение.Имя 	= "РазмещениеЗаказов" Тогда 
			//ИначеЕсли Движение.Имя 	= "ДенежныеСредства" Тогда 			
			//ИначеЕсли Движение.Имя 	= "ОплатыПоБанковскимКартам" Тогда  
			
			ИначеЕсли Движение.Имя 	= "РазмещениеЗаказовВПути" Тогда 
				НужнаБлокировка=Ложь; //БлокироватьДляИзменения здесь не подойдет т.к. заблокируются данные только по конкретному набору измерений.
				БлокируемыйВидДвижений=ВидДвиженияНакопления.Приход;
				
				Если ДополнительныеСвойства[Движение.Имя].Количество()>0 Тогда
					
					СтрокаНужныйВидДвижений = ДополнительныеСвойства[Движение.Имя].Найти(БлокируемыйВидДвижений,"ВидДвижения");
					Если Не СтрокаНужныйВидДвижений = Неопределено Тогда
						
						ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РазмещениеЗаказовВПути");
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства[Движение.Имя];
						ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
						ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказПоставщику", "ЗаказПоставщику");
						Блокировка.Заблокировать();
						
					КонецЕсли;
				КонецЕсли;
				
			
			ИначеЕсли Движение.Имя 	= "ТоварыВРезерве" Тогда
				НужнаБлокировка=Ложь; //БлокироватьДляИзменения здесь не подойдет т.к. заблокируются данные только по данному документу резерва (ДокументРезерва - это измерение).
				//в то время можно будет делать движения по этому же резерву но другими документами резерва. таким образом в режиме 8.3 мы уйдем в минус.
				БлокируемыйВидДвижений=ВидДвиженияНакопления.Приход;
				
				Если ДополнительныеСвойства[Движение.Имя].Количество()>0 Тогда
					
					СтрокаНужныйВидДвижений = ДополнительныеСвойства[Движение.Имя].Найти(БлокируемыйВидДвижений,"ВидДвижения");
					Если Не СтрокаНужныйВидДвижений = Неопределено Тогда
						
						ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыВРезерве");
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства[Движение.Имя];
						ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
						ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Размещение", "Размещение");
						Блокировка.Заблокировать();
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НужнаБлокировка Тогда
				Если ДополнительныеСвойства[Движение.Имя].Количество()>0 Тогда
					Если ЗначениеЗаполнено(БлокируемыйВидДвижений) Тогда
						СтрокаНужныйВидДвижений = ДополнительныеСвойства[Движение.Имя].Найти(БлокируемыйВидДвижений,"ВидДвижения");
						Если Не СтрокаНужныйВидДвижений = Неопределено Тогда
							НаборДвижениий.БлокироватьДляИзменения=Истина;
						КонецЕсли;	
					Иначе
						НаборДвижениий.БлокироватьДляИзменения=Истина;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			//Круглов 11.02.16
			
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Процедура ОчиститьДвиженияДокумента(МетаДвижения, Движения) Экспорт
	
	Для Каждого Движение Из МетаДвижения Цикл 
		
		НаборДвижениий = Движения[Движение.Имя];
		НаборДвижениий.Записывать = Истина;
		НаборДвижениий.Очистить();
		
	КонецЦикла;
	
	Движения.Записать();
	
КонецПроцедуры

Процедура ТиповоеДвижение(Таблица, НаборДвижениий, Отказ)

	Если 	Отказ ИЛИ 
			Таблица.Количество() = 0 Тогда
			
		Возврат;
		
	КонецЕсли;
	
	НаборДвижениий.Записывать = Истина;
	НаборДвижениий.Загрузить(Таблица);
	
КонецПроцедуры

Процедура СборкаЗаказа(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТиповоеДвижение(
			ДополнительныеСвойства.СборкаЗаказа, 
			Движения.СборкаЗаказа, 
			Отказ);
	
КонецПроцедуры
Процедура ТоварыВРезерве(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТиповоеДвижение(
			ДополнительныеСвойства.ТоварыВРезерве, 
			Движения.ТоварыВРезерве, 
			Отказ);
	
КонецПроцедуры
Процедура ТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТиповоеДвижение(
			ДополнительныеСвойства.ТоварыНаСкладах, 
			Движения.ТоварыНаСкладах, 
			Отказ);
	
КонецПроцедуры
Процедура ТоварыВПути(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТиповоеДвижение(
			ДополнительныеСвойства.ТоварыВПути, 
			Движения.ТоварыВПути, 
			Отказ);
	
КонецПроцедуры
Процедура Взаиморасчеты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТиповоеДвижение(
			ДополнительныеСвойства.Взаиморасчеты, 
			Движения.Взаиморасчеты, 
			Отказ);
	
КонецПроцедуры
		
Процедура ИнтернетЗаказПокупателя(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТиповоеДвижение(
			ДополнительныеСвойства.ИнтернетЗаказПокупателя, 
			Движения.ИнтернетЗаказПокупателя, 
			Отказ);
	
КонецПроцедуры
Процедура ВнутренниеЗаказы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТиповоеДвижение(
			ДополнительныеСвойства.ВнутренниеЗаказы, 
			Движения.ВнутренниеЗаказы, 
			Отказ);
	
КонецПроцедуры
Процедура ЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТиповоеДвижение(
			ДополнительныеСвойства.ЗаказыПокупателей, 
			Движения.ЗаказыПокупателей, 
			Отказ);
	
КонецПроцедуры
Процедура ЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТиповоеДвижение(
			ДополнительныеСвойства.ЗаказыПоставщикам, 
			Движения.ЗаказыПоставщикам, 
			Отказ);
	
КонецПроцедуры
Процедура РасчетныеСрокиДвиженияЗаказа(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТиповоеДвижение(
			ДополнительныеСвойства.РасчетныеСрокиДвиженияЗаказа, 
			Движения.РасчетныеСрокиДвиженияЗаказа, 
			Отказ);
	
КонецПроцедуры

Процедура ТоварыПоставщиковВПути(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТиповоеДвижение(
			ДополнительныеСвойства.ТоварыПоставщиковВПути, 
			Движения.ТоварыПоставщиковВПути, 
			Отказ);
	
КонецПроцедуры
Процедура ЗаказНаряды(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТиповоеДвижение(
			ДополнительныеСвойства.ЗаказНаряд, 
			Движения.ЗаказНаряды, 
			Отказ);
	
КонецПроцедуры

Процедура ПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТиповоеДвижение(
			ДополнительныеСвойства.ПродажиПоДисконтнымКартам, 
			Движения.ТоварыПоставщиковВПути, 
			Отказ);
	
КонецПроцедуры
// регистры сведений

Процедура СкидкиПоЦеновымГруппам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТиповоеДвижение(
			ДополнительныеСвойства.СкидкиПоЦеновымГруппам, 
			Движения.СкидкиПоЦеновымГруппам, 
			Отказ);
	
КонецПроцедуры

// ОБЩИЕ ФУНКЦИИ

Функция ПровестиДокумент(	ДокОбъект, 
							СообщатьОшибку 		= Истина, 
							стрОшибки 			= "", 
							РежимЗаписи 		= Неопределено, 
							РежимПроведения 	= Неопределено) Экспорт
							
	// Иницилизируем переменные
							
	Если РежимЗаписи = Неопределено Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Оперативный;
	КонецЕсли;
	
	// Определим текст сообщений
	
	Если СообщатьОшибку Тогда
	
		Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			стрСообщ = "записи";
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			стрСообщ = "отмене проведения";
		Иначе
			стрСообщ = "проведении";
		КонецЕсли;
		
	КонецЕсли;
	
	// Проведем
	
	Попытка
			
		ДокОбъект.Записать(РежимЗаписи, РежимПроведения);
			
	Исключение
		
		// Сматеримся
		
		стрОшибки = ОписаниеОшибки();
		
		Если СообщатьОшибку Тогда
			Сообщить("Ошибка при " + стрСообщ + " " + строка(ДокОбъект) + "
											|" + стрОшибки);
		КонецЕсли;
		
		Возврат Ложь;
											
	КонецПопытки;
	
	// Врнем что все ок
	
	Возврат Истина;
	
КонецФункции

// ::::::::::::::::::::::::::::::::::: ПОСЛЕДОВАТЕЛЬНОСТИ ::::::::::::::::::::::::::::::::::::::

//avdonin {{12.09.2010#
//

Процедура ПоследовательностьОстаткиТоваров(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ, ОтменаПроведения = Ложь) Экспорт 
	
	ВОЗВРАТ; //silber {Ваня прости, мы отключаем}
	
	// Процедура заполняет последовательность ОстаткиТоваров или очищает, если параметр ОтменаПроведения = Истина
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	наборЗаписей = ПринадлежностьПоследовательностям.ОстаткиТоваров;
	наборЗаписей.Очистить();
	
	Если ОтменаПроведения Тогда
		// очищение уже выполнено - можно возвращаться
		
		Возврат;
	КонецЕсли;
	
	// иначе заполняем последовательность
	
	Для каждого лСтрока Из ДополнительныеСвойства.ТоварыНаСкладах Цикл
		ЗаполнитьЗначенияСвойств(наборЗаписей.Добавить(), лСтрока);
	КонецЦикла;
	
КонецПроцедуры // ПоследовательностьОстаткиТоваров()

//}}avdonin

Функция ИмяРегРазрешено(Все, стрИменаРег, ИмяРег)
	
	Возврат Все Или СтрНайти(стрИменаРег, "#" + НРег(ИмяРег) + "#");
	
КонецФункции
Процедура УстановитьДопПараметрыДляПроведения(Запрос, ТекстЗапроса, ДопСвойстваДок) Экспорт
	
	// Устанавливает при проведении в таблицы для проведения на основнаии отчета
	//
	// Запрос 			- запрос с устанавленными параметрами
	// ТекстЗапроса 	- текст запроса шаблон по правилам (описание ниже)
	// ДопСвойстваДок:	- структура ДополнительныеСвойства документа
	//		- ИменаРегистров (необ) - массив, если заполнен тогда будет отработан запрос только по указанным регистрам
	//
	// При отрабатывании в ДопСвойстваДок вставляет таблицы полученные из запроса по сл. правилам
	//
	// Понимаент сл. схему:
	//			>>> ИмяРегистра
	//			ищет с помощью разделителя имя регистра,
	//			текст запроса считается до символа ";"
	//			если встречает слово ПОМЕСТИТЬ, тогда ищет до следующего символа ";"
	//			можно указывать несколько раз регистр, все места будут объеденены в таблице
	//			если не указать имя регистра, тогда такой запрос всегда будет помещен
	//			Имена регистров "ПараметрыСистемы" и "Шапка" всегда конвертируются в структуру, а если их не будет то и пофиг
	
	Перем ИменаРегистров;
	
	Разделитель 		= ">>>"; // <<<
	ДлинаРазделителя 	= СтрДлина(Разделитель);
	
	РазделительИмен		= ";";
	
	// Определим все или не все
	
	стрИменаРег = "#ПараметрыСистемы#Шапка#"; Все = Истина;
	Если ДопСвойстваДок.Свойство("ИменаРегистров") Тогда
		Все = Ложь;
		стрИменаРег = НРег(стрИменаРег + СтрСоединить(ДопСвойстваДок.ИменаРегистров, "#") + "#"); КонецЕсли;
	
	// Когда я начал писать - этот код пониал я и бог,
	//	теперь остался только бог ...
	
	// Начинаем складывать
	
	стрБиг = ВРег(ТекстЗапроса); // будем использовать верхний регистр для поисков
	
	ПропуститьМ = Ложь;
	ПозНач 		= 1;
	ПозОк		= -1;
	стрДлина 	= стрДлина(ТекстЗапроса);
	Регистры	= Новый Структура;
	
	ИндЗапроса = -1;// стИнд = ИндЗапроса;
	Пока ПозНач Цикл ИндЗапроса = ИндЗапроса + 1;
		
		// Посмотри откуда начинается наш регистр
		ПозНач = СтрНайти(ТекстЗапроса, Разделитель,, ?(ПозОк > 0, ПозОк, Неопределено));
		
		// Это конец (добавляем все что осталось)
		Если Не ПозНач Тогда 
			Если ПозОк < СтрДлина Тогда
				Запрос.Текст = Запрос.Текст + Сред(ТекстЗапроса, ПозОк + 1); КонецЕсли;
			Прервать; КонецЕсли;
				
		// Вытаскимваем промежуток между разделителями, на случай если там встречается запрос без указания таблицы
		стрПромежъе = ?(ПозНач > ПозОк + ДлинаРазделителя + 1 И НЕ ПропуститьМ, Сред(ТекстЗапроса, ПозОк + 1, ПозНач - ПозОк - 1 + ДлинаРазделителя), "");
		Если Не ПропуститьМ Тогда
			Запрос.Текст = Запрос.Текст + стрПромежъе;
			// Расчитаем сколько в промежутке запросов
			ИндЗапроса = ИндЗапроса + СтрЧислоВхождений(стрПромежъе, ";"); КонецЕсли;
		
		// Теперь окончание
		ПозОк = СтрНайти(ТекстЗапроса, ";",, ПозНач);
		
		// Вытащим имя регистра ( пищем до конца строки и с учетом пробелов и табов вырежим нахрен имя регистра)
		
		позКонСтроки 	= СтрНайти(ТекстЗапроса, символы.ПС,,ПозНач);
		ИмяРег 			= Сред(ТекстЗапроса, ПозНач + ДлинаРазделителя, позКонСтроки - ПозНач);
		ИмяРег			= СтрЗаменить(СокрЛ(ИмяРег), Символы.Таб, " ");
		ИмяРег			= СтрЗаменить(СокрЛ(ИмяРег), Символы.ПС, " ");
		ИмяРег			= СокрЛП(Лев(ИмяРег, СтрНайти(ИмяРег, " ")));
		
		// Ищем есть ли внутри ПОМЕСТИТЬ тогда просто не считаем его но добавляем
		
		ПозПодобно = СтрНайти(стрБиг, "ПОМЕСТИТЬ",, ПозНач);
		Если ПозПодобно < ПозОк Тогда
			Если ИмяРегРазрешено(Все, стрИменаРег, ИмяРег) Тогда 
				Запрос.Текст = Запрос.Текст + Сред(ТекстЗапроса, ПозНач + ДлинаРазделителя, ПозОк - ПозНач + 1 - ДлинаРазделителя);
			Иначе
				ПропуститьМ = Истина; КонецЕсли; Продолжить; КонецЕсли;
		
		// Если нам заданы конкретные регистры и это не они тогда пропустим из
		
		Если ИмяРегРазрешено(Все, стрИменаРег, ИмяРег) Тогда 
			//стИнд 		= ИндЗапроса;
			ПропуститьМ = Ложь;
		Иначе	ИндЗапроса = ИндЗапроса - 1;
				//ИндЗапроса = стИнд; // возвращаем индекс (ctl+z)
				Продолжить; КонецЕсли;
		
		// Добавим индексы запроса через разделитель которые будем вызывать
		
		Регистры.Вставить(ИмяРег, ?(Регистры.Свойство(ИмяРег), Регистры[ИмяРег] + РазделительИмен, "") + Формат(ИндЗапроса, "ЧН=0; ЧГ="));
		
		// Добавим в запрос
		
		Запрос.Текст = Запрос.Текст + Сред(ТекстЗапроса, ПозНач, ПозОк - ПозНач + 1); КонецЦикла;
	
	// Теперь выполняем и пихаем !
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Для Каждого Элемент Из Регистры Цикл
		
		// Если несколько таблиц
		
		Если СтрНайти(Элемент.Значение, РазделительИмен) Тогда
		
			Индексы = СтрРазделить(Элемент.Значение, РазделительИмен);
			Для Каждого Индекс Из Индексы Цикл
				
				Табл = Пакет[Число(Индекс)].Выгрузить();
				Если ДопСвойстваДок.Свойство(Элемент.Ключ) Тогда
						КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(ДопСвойстваДок[Элемент.Ключ], Табл);
				Иначе	ДопСвойстваДок.Вставить(Элемент.Ключ, Табл); КонецЕсли; КонецЦикла;
					
		// если 1 таблица
		
		Иначе
			ДопСвойстваДок.Вставить(Элемент.Ключ, Пакет[Число(Элемент.Значение)].Выгрузить()); КонецЕсли; КонецЦикла;
	
	// Меняем шапку с парвматреми на структуру
	
	Если ДопСвойстваДок.Свойство("ПараметрыСистемы") Тогда
		ДопСвойстваДок.Вставить("ПараметрыСистемы", КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(ДопСвойстваДок.ПараметрыСистемы)) КонецЕсли;
	Если ДопСвойстваДок.Свойство("Шапка") Тогда
		ДопСвойстваДок.Вставить("Шапка", КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(ДопСвойстваДок.Шапка)) КонецЕсли;
	
//Масс = Новый Массив;
//Масс.Добавить("ПродажиВРозницу");

//Док = Документы.РеализацияТоваров.НайтиПоНомеру("Г-140030825").ПолучитьОбъект();
//Док.ДополнительныеСвойства.Вставить("ИменаРегистров", Масс);

//Док.Записать(РежимЗаписиДокумента.Проведение);

	
КонецПроцедуры

//
Функция РазрешеноПерепроводитьДокумент(Ссылка) Экспорт
	Запрос = Новый Запрос("Выбрать Документ из РегистрСведений.ЗапрещенныеКПерепроведениюДокументы ГДЕ Документ = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции	
