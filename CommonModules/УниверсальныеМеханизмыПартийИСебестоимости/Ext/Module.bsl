///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры, используемые механизмами
//	- партионного учета версии 2.2
//	- расчета себестоимости
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

// Перед началом расчета заполняет все общие параметры, используемые алгоритма расчета.
//
Процедура ИнициализироватьОбщиеПараметрыРасчета(ПараметрыИнициализации, ПараметрыРасчета, ПараметрыОтладки = Неопределено) Экспорт
	
	Если ПараметрыРасчета <> Неопределено Тогда
		Возврат; // ПараметрыРасчета уже инициализированы
	КонецЕсли;
	
	Дата 			  = ПараметрыИнициализации.Дата;
	МассивОрганизаций = ДоступныеОрганизации(ПараметрыИнициализации.МассивОрганизаций);
		
	СокращеннаяИнициализация = НЕ ПараметрыИнициализации.Свойство("ЗапущенРасчетПартий");
	
	Если НЕ СокращеннаяИнициализация Тогда
		ЗапущенРасчетПартий 					 = ПараметрыИнициализации.ЗапущенРасчетПартий;
		ТолькоПредварительныйРасчетСебестоимости = ПараметрыИнициализации.ТолькоПредварительныйРасчетСебестоимости;
		ЗапущеноРегламентнымЗаданием 			 = ПараметрыИнициализации.ЗапущеноРегламентнымЗаданием;
	Иначе
		// Вызов извне механизма расчета с параметрами по умолчанию.
		ЗапущенРасчетПартий 					 = Истина;
		ТолькоПредварительныйРасчетСебестоимости = Ложь;
		ЗапущеноРегламентнымЗаданием 			 = Ложь;
	КонецЕсли;
	
	// Создадим контейнер всех общих параметров, используемых механизмами расчета партий и себестоимости
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоПараметрыРасчетаПУ22",		 Истина); // служебный идентификатор структуры
	
	// Параметры старта и текущего состояния расчета
	ПараметрыРасчета.Вставить("ЗапущенРасчетПартий", 			 ЗапущенРасчетПартий); // запущен полный расчет (партии+себестоимость) или только расчет себестоимости?
	ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, 	 НЕ ЗапущенРасчетПартий); // заполняет свойство ИдетРасчетПартий
	
	ПараметрыРасчета.Вставить("ЗаполняютсяПартииВСебестоимости", Ложь); // управляет логикой заполнения реквизита "РасчетПартий" в регистре себестоимости
	ПараметрыРасчета.Вставить("ЗаполненыПартииВСебестоимости",   НЕ ЗапущенРасчетПартий); // управляет логикой получения кэша оборотов регистра себестоимости
	ПараметрыРасчета.Вставить("ЗаполняютсяПартииВВыручке", 		 Ложь); // управляет логикой заполнения реквизита "РасчетПартий" и логикой заполнения кэша оборотов регистра выручки
	ПараметрыРасчета.Вставить("ЗаполненыПартииВВыручке",   		 НЕ ЗапущенРасчетПартий); // управляет логикой получения кэша оборотов регистра выручки
	
	ПараметрыРасчета.Вставить("МестоВызоваРасчета",
		?(ЗначениеЗаполнено(ПараметрыОтладки) И ПараметрыОтладки.Свойство("МестоВызоваРасчета"),
			ПараметрыОтладки.МестоВызоваРасчета, НСтр("ru='Не указано'"))); // откуда вызвали расчет (для протокола)
	
	Если ПараметрыИнициализации.Свойство("ВыполняетсяОбновлениеИБ") Тогда
		ПараметрыРасчета.Вставить("ВыполняетсяОбновлениеИБ", ПараметрыИнициализации.ВыполняетсяОбновлениеИБ);
	Иначе
		ПараметрыРасчета.Вставить("ВыполняетсяОбновлениеИБ", Ложь);
	КонецЕсли;
	
	// Вариант расчета
	Если ЗапущенРасчетПартий Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость);
	ИначеЕсли ЗапущеноРегламентнымЗаданием Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимостьРегламентноеЗадание);
	ИначеЕсли ТолькоПредварительныйРасчетСебестоимости Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимость);
	Иначе
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ФактическаяСебестоимость);
	КонецЕсли;
	
	Если ПараметрыИнициализации.Свойство("ОписаниеЗамера") Тогда
		// Штатный вызов из механизма партионного учета версии 2.1.
		ПараметрыРасчета.Вставить("ОписаниеЗамера", ПараметрыИнициализации.ОписаниеЗамера);
	КонецЕсли;
	
	// Создаем описание данных для протоколирования расчета и замера производительности.
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ИнициализироватьОбщиеПараметрыРасчета");
	
	// Общий менеджер временных таблиц для всех этапов расчета
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц",	   Новый МенеджерВременныхТаблиц);
	
	// Периода расчета и границы периода
	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода", 		 		   НачалоМесяца(Дата));
	РасчетныйПериод.Вставить("КонецПериода",  		 		   Дата);
	РасчетныйПериод.Вставить("КонецПредыдущегоПериода", 	   РасчетныйПериод.НачалоПериода - 1);
	РасчетныйПериод.Вставить("НачалоСледующегоПериода", 	   КонецМесяца(Дата) + 1);
	РасчетныйПериод.Вставить("ГраницаНачалоПериода", 		   Новый Граница(РасчетныйПериод.НачалоПериода, ВидГраницы.Исключая));
	РасчетныйПериод.Вставить("ГраницаКонецПериода",  		   Новый Граница(РасчетныйПериод.КонецПериода, ВидГраницы.Включая));
	РасчетныйПериод.Вставить("ГраницаКонецПредыдущегоПериода", Новый Граница(РасчетныйПериод.КонецПредыдущегоПериода, ВидГраницы.Включая));
	
	ПараметрыРасчета.Вставить("РасчетныйПериод", 			   РасчетныйПериод);
	
	// Статистика изменения документов за расчетный период (причина пересчета периода).
	Если ПараметрыИнициализации.Свойство("ИзмененоДокументов") Тогда
		// Штатный вызов из механизма партионного учета версии 2.2.
		ПараметрыРасчета.Вставить("ИзмененоДокументов",   	   ПараметрыИнициализации.ИзмененоДокументов);
	Иначе
		ПараметрыРасчета.Вставить("ИзмененоДокументов",   	   Неопределено);
	КонецЕсли;
	
	// Прочие служебные свойства
	ПараметрыРасчета.Вставить("СтрокаСоединенияИБ",	 		   СтрокаСоединенияИнформационнойБазы());
	ПараметрыРасчета.Вставить("ИнформационнаяБазаФайловая",	   ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
	// Параметры расчета себестоимости
	ПараметрыРасчета.Вставить("РегламентноеЗадание",		   ЗапущеноРегламентнымЗаданием);
	ПараметрыРасчета.Вставить("ПредварительныйРасчет",		   ТолькоПредварительныйРасчетСебестоимости);
	
	// Свойства фоновых заданий расчета и записи движений.
	ТаблицаЗаданийЗаписи = Новый ТаблицаЗначений;
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИдентификаторЗадания");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ПредыдущееЗадание");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИмяРегистра");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("КоличествоДвижений");
	
	ТаблицаЗаданийРасчета = Новый ТаблицаЗначений;
	ТаблицаЗаданийРасчета.Колонки.Добавить("ИдентификаторЗадания");
	ТаблицаЗаданийРасчета.Колонки.Добавить("КлючЗадания");
	ТаблицаЗаданийРасчета.Колонки.Добавить("ИдентификаторРасчета");
	
	ПараметрыРасчета.Вставить("СтекЗаданийЗаписи",    		   Новый Массив); // стек вызовов фоновых заданий для записи движений
	ПараметрыРасчета.Вставить("ТаблицаЗаданийЗаписи", 		   ТаблицаЗаданийЗаписи); // описание каждого запущенного задания записи
	ПараметрыРасчета.Вставить("ОбщееКоличествоФЗЗаписи",	   0); // общее количество выполненных фоновых заданий записи
	
	ПараметрыРасчета.Вставить("ТаблицаЗаданийРасчета", 		   ТаблицаЗаданийРасчета); // описание каждого запущенного задания расчета
	ПараметрыРасчета.Вставить("ОбщееКоличествоФЗРасчета",	   0); // общее количество выполненных фоновых заданий расчета
	
	ПараметрыРасчета.Вставить("ИдентификаторРасчета"); // заполняется для фоновых заданий расчета партий
		
	// Технологические параметры расчета.
	УстановитьТехнологическиеПараметрыРасчета(ПараметрыРасчета);
	
	// Значения анализируемых функциональных опций и констант (они также устанавливаются в качестве одноименных параметров запросов)
	ПараметрыРасчета.Вставить("ФО", Новый Структура);
	ИменаФО =
		"ИспользоватьПартионныйУчет,
		|ПартионныйУчетВерсии22,
		|ДатаПереходаНаПартионныйУчетВерсии22,
		|ИспользоватьУправлениеПроизводством2_2,
		|ВалютыУпрИРеглУчетаСовпадают,
		|ИспользоватьУправленческуюОрганизацию,
		|ИспользоватьУчетПрочихДоходовРасходов,
		|ИспользоватьУчетПрочихДоходовРасходовРегл,
		|РаспределениеДопРасходовПоВыбывшимТоварам,
		|УчитыватьСебестоимостьТоваровПоВидамЗапасов,
		|ФормироватьВидыЗапасовПоГруппамФинансовогоУчета,
		|ФормироватьФинансовыйРезультат,
		|ФормироватьУправленческийБаланс,
		|ИспользоватьВводОстатковВерсии24";
	
	Для Каждого КлючИЗначение Из Новый Структура(ИменаФО) Цикл
		
		ОписаниеФО = ОписаниеКонстантыИлиФункциональнойОпции(КлючИЗначение.Ключ);
		
		Если ОписаниеФО.Метаданные <> Неопределено Тогда
			ПараметрыРасчета.ФО.Вставить(КлючИЗначение.Ключ, ОписаниеФО.Значение);
		Иначе
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найдена функциональная опция или константа ""%1""'"),
				КлючИЗначение.Ключ);
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета,
				ТекстДляПротокола);
			
			ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРасчета,
				МассивОрганизаций, // т.к. свойство ПараметрыРасчета.МассивОрганизаций еще не инициализировано
				НСтр("ru='При запуске расчета диагностированы ошибки'"),
				ТекстДляПротокола);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРасчета.ФО.ДатаПереходаНаПартионныйУчетВерсии22 = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
	
	// Признак ведения упр. учета (расширенная проверка ФО ВестиУправленческийУчетОрганизаций).
	ПараметрыРасчета.Вставить("УправленческийУчетОрганизаций",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.УправленческийУчетОрганизаций(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	
	// Признак использования в рассчитываемом периоде управления внеоборотными активами версии 2.4	
	ИспользуетсяУправлениеВНА_2_4 = Ложь;
	ПараметрыРасчета.Вставить("ИспользуетсяУправлениеВНА_2_4", ИспользуетсяУправлениеВНА_2_4);
	
	// Признаки использования в рассчитываемом периоде партионного учета
	ПараметрыРасчета.Вставить("ПартионныйУчетНеИспользуется",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ПартионныйУчетВерсии21",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии21(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
		
	// Признак расчета первого месяца в партионном учете версии 2.2
	ПараметрыРасчета.Вставить("ФормироватьНачальныеОстаткиПартий22",
		ПараметрыРасчета.ПартионныйУчетВерсии22
	 	И ПараметрыРасчета.РасчетныйПериод.НачалоПериода = ПараметрыРасчета.ФО.ДатаПереходаНаПартионныйУчетВерсии22);
		
	// Типы записей регистра "Себестоимость товаров"
	ПараметрыРасчета.Вставить("ТипыЗаписейПервичныхПартий",   ТипыЗаписейПервичныхПартий());
	ПараметрыРасчета.Вставить("НепересчитываемыеТипыЗаписей", НепересчитываемыеТипыЗаписей());
	ПараметрыРасчета.Вставить("ТипыЗаписейКонвертацииДанных", ТипыЗаписейКонвертацииДанных());
	
	// Правила заполнения поля ТипЗаписи регистра "Себестоимость товаров"
	ПараметрыРасчета.Вставить("ПравилаЗаполненияПоляТипЗаписи",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПравилаЗаполненияПоляТипЗаписи());
	
	// Организации и их учетные политики
	ПараметрыРасчета.Вставить("МассивОрганизаций", 					       МассивОрганизаций);
	ПараметрыРасчета.Вставить("КопияМассивОрганизаций", 			       ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСДвижениямиПоСебестоимости",     ОрганизацииСДвижениямиПоСебестоимости(Дата, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСФИФОСкользящая", 		   	   ОрганизацииСФИФОСкользящая(Дата, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСФИФОСкользящаяВПрошломПериоде", ОрганизацииСФИФОСкользящая(НачалоМесяца(Дата)-1, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииНаУСН",					       Новый Массив);
	ПараметрыРасчета.Вставить("МетодыОценкиСтоимости", 				       Новый Соответствие); // Организация - Метод оценки
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		ТекущийМетодОценки = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.МетодОценкиСтоимостиТоваровОрганизации(
			ТекущаяОрганизация,
			НачалоМесяца(Дата));
		
		ПараметрыРасчета.МетодыОценкиСтоимости.Вставить(ТекущаяОрганизация,	ТекущийМетодОценки);
		
		ТекущаяСистемаНалогообложения = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.СистемаНалогообложенияОрганизации(
			ТекущаяОрганизация,
			НачалоМесяца(Дата));
		
		Если ТекущаяСистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ПараметрыРасчета.ОрганизацииНаУСН.Добавить(ТекущаяОрганизация);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СокращеннаяИнициализация И ПараметрыРасчета.ФормироватьНачальныеОстаткиПартий22 Тогда
		// Для всех рассчитываемых организаций обязательно должны присутствовать документы расчета себестоимости,
		// т.к. по этим организациям будут формироваться остатки партий и записываться в движения этих документов.
		// Поэтому эти организации гарантировано должны быть в массиве ОрганизацииСДвижениямиПоСебестоимости.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости,
			ПараметрыРасчета.МассивОрганизаций,
			Истина);
	КонецЕсли;
	
	Если НЕ СокращеннаяИнициализация Тогда
		
		// Получим группы организаций, связанных по Интеркампани (для расчета себестоимости)
		Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости) Тогда
			ПараметрыРасчета.Вставить("ГруппыОрганизацийПоИнтеркампани", Новый Массив);
		Иначе
			ПараметрыРасчета.Вставить("ГруппыОрганизацийПоИнтеркампани",
				СвязиОрганизацийПоСхемеИнтеркампани(Дата, ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости, Истина));
		КонецЕсли;
		
		// Методы оценки стоимости для каждой из этих групп; сопоставляется с ГруппыОрганизацийПоИнтеркампани по индексу элемента
		ПараметрыРасчета.Вставить("МетодыОценкиПоГруппамОрганизаций", Новый Массив);
		
		Для Каждого ГруппаОрганизаций Из ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани Цикл
			ПараметрыРасчета.МетодыОценкиПоГруппамОрганизаций.Добавить(
				ОпределитьМетодОценкиСтоимостиДляГруппыОрганизаций(ПараметрыРасчета, ГруппаОрганизаций));
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыИнициализации.Свойство("ПолучениеСпискаПараметров") Тогда
		Возврат; // для вызова процедуры извне механизма с целью получения списка переопределяемых параметров расчета и отладки
	КонецЕсли;
		
	// Формирует общие временные таблицы для отбора данных в запросах.
	ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	
	// Формирует вспомогательные временные таблицы.
	ИнициализироватьВспомогательныеВременныеТаблицы(ПараметрыРасчета);
	
	// Описание регистров
	ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);
	
	Если СокращеннаяИнициализация Тогда
		Возврат; // для вызова процедуры извне механизма с целью инициализации временных таблиц
	КонецЕсли;
	
	// Формирует в ИБ документы расчета себестоимости для рассчитываемых организаций.
	// Также формирует временную таблицу ВТДокументыРасчетаСебестоимости и свойство ДокументыРасчетаПоОрганизациям
	ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета, ТолькоПредварительныйРасчетСебестоимости, ЗапущеноРегламентнымЗаданием);
	
КонецПроцедуры

Функция ИнициализироватьОсновныеПараметрыРасчета(Период, МассивОрганизаций, ЗапущенРасчетПартий = Ложь, ИдетРасчетПартий = Ложь) Экспорт
	
	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода",	   	 НачалоМесяца(Период));
	РасчетныйПериод.Вставить("КонецПериода",  	   	 КонецМесяца(Период));
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РасчетныйПериод",   	 РасчетныйПериод);
	ПараметрыРасчета.Вставить("МассивОрганизаций", 	 МассивОрганизаций);
	
	ПараметрыРасчета.Вставить("ЗапущенРасчетПартий", ЗапущенРасчетПартий);
	ПараметрыРасчета.Вставить("ИдетРасчетПартий", 	 ИдетРасчетПартий);
	
	Возврат ПараметрыРасчета;
	
КонецФункции


Процедура ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, ИдетРасчетСебестоимости) Экспорт
	
	ПараметрыРасчета.Вставить("ИдетРасчетПартий", НЕ ИдетРасчетСебестоимости); // в данный выполняется расчет партий или расчет себестоимости?
	
	Если ИдетРасчетСебестоимости Тогда
		ПараметрыРасчета.Вставить("ИмяМодуляМеханизмаРасчета", Метаданные.ОбщиеМодули.РасчетСебестоимости.Имя);
	Иначе
		ПараметрыРасчета.Вставить("ИмяМодуляМеханизмаРасчета", Метаданные.ОбщиеМодули.ПартионныйУчет22.Имя);
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("МодульМеханизмаРасчета", ОбщегоНазначения.ОбщийМодуль(ПараметрыРасчета.ИмяМодуляМеханизмаРасчета));
	
КонецПроцедуры

Процедура ВыполняетсяЗаполнениеПартийВРегистреСебестоимостьТоваров(ПараметрыРасчета, ИдетЗаполнение) Экспорт
	
	Если ИдетЗаполнение Тогда
		ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости = Истина; // этап начат
	Иначе
		ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости = Ложь;   // этап завершен
		ПараметрыРасчета.ЗаполненыПартииВСебестоимости   = Истина; // партии в себестоимости заполнены
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполняетсяЗаполнениеПартийВРегистреВыручкаИСебестоимостьПродаж(ПараметрыРасчета, ИдетЗаполнение) Экспорт
	
	Если ИдетЗаполнение Тогда
		ПараметрыРасчета.ЗаполняютсяПартииВВыручке = Истина; // этап начат
	Иначе
		ПараметрыРасчета.ЗаполняютсяПартииВВыручке = Ложь; // этап завершен
		ПараметрыРасчета.ЗаполненыПартииВВыручке   = Истина; // партии в выручке заполнены
	КонецЕсли;
	
КонецПроцедуры
	
	
// Инициализирует общие параметры расчета, описывающие обслуживаемые механизмом расчета регистры.
//
Процедура ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета)
	
	// Значения структур РегистрыСРасчетнымиОборотами и РегистрыСРасчетнымиОстатками определяет,
	// будет ли выполняться автообновления расчетных записей (оборотов)/остатков при кэшировании сформированных движений.
	// Если требуется отключить автообновление, то перед обращением к расчетным таблицам надо добавить вызов
	// ОбновитьРасчетныеОборотыРегистра() или ОбновитьРасчетныеОстаткиРегистра()
	// Сначала необходимо выполнять обновление расчетных записей, т.к. при расчете остатков используются эти данные.
	
	// К основным таблицам этих регистров обращаться нельзя, т.к. они содержат результаты предыдущего расчета
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОборотами", Новый Структура); // ВТКэшРасчетныеОбороты...
	
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя, Истина);
	
	// К "реальным" конечным остаткам этих регистров обращаться нельзя,
	// т.к. они некорректны - содержат результаты предыдущего расчета
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОстатками", Новый Структура); // ВТКэшРасчетныеОстатки...
	
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя, Истина);
	
	// Инициализируем регистры, используемые механизмами расчета партий и себестоимости
	ОбслуживаемыеРегистры = Новый Соответствие;
	РасчетСебестоимости.ИсходящиеДанныеМеханизма(ОбслуживаемыеРегистры);
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		ПартионныйУчет22.ИсходящиеДанныеМеханизма(ОбслуживаемыеРегистры); // дополним перечень регистров
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("Движения", Новый Структура);
	Для Каждого КлючИЗначение Из ОбслуживаемыеРегистры Цикл
		ИнициализироватьДанныеРегистра(ПараметрыРасчета, КлючИЗначение.Ключ);
	КонецЦикла;
	
	// При необходимости выполняется полная очистка всех движений, сформированных предыдущим расчетом
	Если ПараметрыРасчета.Отладка.ОчищатьСтарыеДвижения Тогда
		ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета);
		ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Формирует общие временные таблицы для отбора данных в запросах.
//
Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета) Экспорт
	
	// Для повторной инициализации надо уничтожить все временные таблицы, создаваемые в этой процедуре.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики 				КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация 				КАК Организация,
	|	АналитикаПоПартнерам.Контрагент					КАК Контрагент,
	|	АналитикаПоПартнерам.Партнер 					КАК Партнер,
	|	АналитикаПоПартнерам.НаправлениеДеятельности 	КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВТОтборАналитикаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В (&МассивОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.КлючАналитики,
	|	Т.Организация
	|ИЗ
	|	ВТОтборАналитикаПоПартнерам КАК Т
	|";
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");
	
	ОрганизацияПоАналитикеПартнеров = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОрганизацияПоАналитикеПартнеров.Вставить(Выборка.КлючАналитики, Выборка.Организация);
	КонецЦикла;

	ПараметрыРасчета.Вставить("ОрганизацияПоАналитикеПартнеров", ОрганизацияПоАналитикеПартнеров);
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует вспомогательные временные таблицы.
//
Процедура ИнициализироватьВспомогательныеВременныеТаблицы(ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	СоздатьТаблицуПравилЗаполненияПоляТипЗаписи(
		Запрос.МенеджерВременныхТаблиц,
		ПараметрыРасчета.ПравилаЗаполненияПоляТипЗаписи);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА СпрУчетнаяПолитика.Ссылка ЕСТЬ НЕ NULL
	|			И (СпрУчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС
	|				ИЛИ СпрУчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|	КОНЕЦ КАК НалогообложениеНДС
	|ПОМЕСТИТЬ ВТНалогообложениеОрганизацийПоУмолчанию
	|ИЗ
	|	Справочник.Организации КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|	  &НачалоПериода, Организация В (&МассивОрганизаций)) КАК РегУчетнаяПолитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|		ПО РегУчетнаяПолитика.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|	ПО Т.Ссылка = РегУчетнаяПолитика.Организация
	|ГДЕ
	|	Т.Ссылка В (&МассивОрганизаций)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.ДокументДвижения				КАК ДокументДвижения,
	|	Т.Период						КАК Период,
	|
	|	Т.Организация					КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов					КАК ВидЗапасов,
	|	Т.РазделУчета					КАК РазделУчета,
	|	Т.Партия						КАК Партия,
	|	Т.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета		КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК Стоимость,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьЗабалансовая,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьДопРасходыБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК Трудозатраты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеПостоянныеСНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеПостоянныеБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеПеременныеСНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеПеременныеБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьЗабалансоваяРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостояннаяРазница,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ВременнаяРазница,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ДопРасходыРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ТрудозатратыРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеПостоянныеРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеПеременныеРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ДопРасходыУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ТрудозатратыУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеПостоянныеУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеПеременныеУпр
	|ПОМЕСТИТЬ ВТСтоимостьПартийТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует ВТПравилаЗаполненияПоляТипЗаписи.
//
Процедура СоздатьТаблицуПравилЗаполненияПоляТипЗаписи(МенеджерВременныхТаблиц, ПравилаЗаполненияПоляТипЗаписи) Экспорт
	
	УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ВТПравилаЗаполненияПоляТипЗаписи");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПравилаЗаполненияПоляТипЗаписи", ПравилаЗаполненияПоляТипЗаписи);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.ПустоеЗначениеРегистратора КАК ПустоеЗначениеРегистратора,
	|	Т.ХозяйственнаяОперация 	 КАК ХозяйственнаяОперация,
	|	Т.ПоложительноеКоличество    КАК ПоложительноеКоличество,
	|	Т.ТипЗаписиПриход 			 КАК ТипЗаписиПриход,
	|	Т.ТипЗаписиРасход 			 КАК ТипЗаписиРасход,
	|	Т.ДокументИсточникВПриходе 	 КАК ДокументИсточникВПриходе,
	|	Т.ДокументИсточникВРасходе 	 КАК ДокументИсточникВРасходе,
	|	Т.КорПартияВРасходе 		 КАК КорПартияВРасходе
	|ПОМЕСТИТЬ ВТПравилаЗаполненияПоляТипЗаписи
	|ИЗ
	|	&ПравилаЗаполненияПоляТипЗаписи КАК Т";
	
	Запрос.Выполнить();
	
КонецПроцедуры


// Действия, выполняемые при окончании расчета.
//
Функция ОкончаниеРасчета(ПараметрыРасчета)
	
	Если ПротоколРасчетаПартийИСебестоимости.ВедетсяПротоколРасчета(ПараметрыРасчета) Тогда
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("МенеджерВременныхТаблиц") Тогда
		ПараметрыРасчета.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	ПараметрыРасчета = Неопределено;
	
КонецФункции


// Возвращает перечень документов, которые могут иметь движения в разных месяцах или по нескольким организациям.
//
// Параметры:
//	РазныеПериоды - Булево - добавлять в результат документы с движениями в разных периодах
//	РазныеОрганизации - Булево - добавлять в результат документы с движениями по нескольким организациям
//	ИмяРегистра - Строка - имя регистра накопления, для которого нужно получить перечень документов;
//		пустое значение - перечень документов для всех регистров
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных
//
Функция ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра = "") Экспорт
	
	ОписаниеДокументов = Новый Соответствие;
	
	// Для движений в других периодах Значение = Истина означает наличие первичных+расчетных движений;
	// если Ложь, то есть только расчетные движения, которые формируются при расчете периода самого документа - при расчете других периодов их не нужно затирать.
	// Для движений других организаций Значение должно быть только Истина.
	Значение = Истина;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг,     				Значение); // операция РеализацияБезПереходаПраваСобственности
			ОписаниеДокументов.Вставить(Метаданные.Документы.РасчетСебестоимостиТоваров, 				Значение); // формирование остатков партий себестоимости на конец прошлого периода
			ОписаниеДокументов.Вставить(Метаданные.Документы.АвансовыйОтчет, 							Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВводОстатков, 								Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.КорректировкаПриобретения, 				Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.КорректировкаРеализации, 					Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПриобретениеТоваровУслуг, 					Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов, 			Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПрочиеДоходыРасходы, 						Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.РаспределениеРасходовБудущихПериодов, 		Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.РасходныйКассовыйОрдер, 					Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств, 		Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт, 				Значение); // доп. расходы
		КонецЕсли;
		
		Если РазныеОрганизации Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями, 			 Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями, 		 Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании, Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями, 		 Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПеремещениеТоваров, 						 Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг, 	 Значение); // операция РеализацияБезПереходаПраваСобственности
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя Тогда
		
		Если РазныеПериоды Тогда
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПартииПрочихРасходов) Тогда
					ОписаниеДокументов.Вставить(МетаДокумент, Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
		
		Если РазныеПериоды Тогда
			
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы) Тогда
					ОписаниеДокументов.Вставить(МетаДокумент, Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если РазныеОрганизации Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями, Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РаспределениеРасходовБудущихПериодов, Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг, Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	// Этот тип документов не должен обрабатываться расчетными механизмами
	ОписаниеДокументов.Удалить(Метаданные.Документы.КорректировкаРегистров);
	
	Возврат ОписаниеДокументов;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДанных

#Область ПроверкаИсходныхИИтоговыхДанных

// Выполняет проверку корректности остатков себестоимости, а также выполнение регламентных операций, предшествующих расчету.
//
Процедура ПроверитьКорректностьИсходныхДанныхДоРасчета(ПараметрыРасчета) Экспорт
	
	Если НЕ (ПараметрыРасчета.ИдетРасчетПартий
	  ИЛИ НЕ ПараметрыРасчета.ЗапущенРасчетПартий) Тогда
		Возврат; // нужно или в начале расчета партий, или в начале отдельного расчета себестоимости
	КонецЕсли;
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьИсходныхДанныхДоРасчета");
	
	// Получим результаты проверки и поместим их в протокол.
	ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета);
		
	ТаблицаОбъектов = АудитСостоянияСистемы.ТаблицаОбъектовПроблемСостоянияСистемы(
		ТаблицаПроверок.ВыгрузитьКолонку("Проверка"),
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	
	Для Каждого ОписаниеОшибки Из ТаблицаОбъектов Цикл
			
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВИсходныхДанныхДляРасчета,
			ОписаниеОшибки.ПредставлениеОбъекта);
		
	КонецЦикла;
	
	ПротоколРасчетаПартийИСебестоимости.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
		ПараметрыРасчета,
		ТаблицаОбъектов.Количество());
	
КонецПроцедуры

// Проверяет наличие некорректных остатков по себестоимости, получившихся в результате выполнения расчета.
//
Процедура ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета");
	
	ВыполняемыеПроверки = Новый Структура("СоответствиеСуммИКоличества, ПроверкаРезультатаРасчетаПоКоличеству, СоответствиеРегистровСебестоимостиИПартийНДС");
	
	Для Каждого ТекущаяПроверка Из ВыполняемыеПроверки Цикл
		
		// Выполним проверку.
		Проверка = АудитСостоянияСистемы.НайтиПроверкуПоКлючевымПолям(
			Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
			ТекущаяПроверка.Ключ);
		
		Если НЕ ЗначениеЗаполнено(Проверка) Тогда
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найдена проверка ""%1"".'"),
				ТекущаяПроверка.Ключ);
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
				ТекстДляПротокола);
				
			ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
			
		КонецЕсли;
		
		ПараметрыРасчетаПроверки = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруПараметрыРасчета(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.МассивОрганизаций);
		
		РезультатПроверки = АудитСостоянияСистемы.ВыполнитьПроверкуСостоянияСистемы(
			Проверка,
			ПараметрыРасчетаПроверки);
			
		// Получим результаты проверки и поместим их в протокол.
		КоличествоПроблем = 0;
		
		Для Каждого ВыявленнаяПроблема Из РезультатПроверки.ВыявленныеПроблемы Цикл
			
			КоличествоПроблем = КоличествоПроблем + ВыявленнаяПроблема.Объекты.Количество();
			
			Для Каждого ОписаниеОшибки Из ВыявленнаяПроблема.Объекты Цикл
				
				ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВОстаткахПослеРасчета,
					ОписаниеОшибки.Представление);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПротоколРасчетаПартийИСебестоимости.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			КоличествоПроблем);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСформированныхРасчетныхДанных

// Проверяет отсутствие ошибок в сформированных движениях.
//
Функция ПроверитьКорректностьСформированныхДвижений(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьСформированныхДвижений");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// Проверяет корректность указания Организации в сформированных движениях:
	// - не должно быть движений по не рассчитываемым организациям
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		ПротоколРасчетаПартийИСебестоимости.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэш" + ОписаниеРегистра.ИмяРегистра));
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор,
			|	Т.Организация
			|ПОМЕСТИТЬ ВТДвиженияСНекорректнойОрганизацией
			|ИЗ
			|	ВТКэш%1 КАК Т
			|ГДЕ
			|	%ОтборПоОрганизации
			|";
			
			ОтборПоОрганизации = "НЕ (Т.Организация В(&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
				// Записи с незаполненной организаций в этом регистре не считаются ошибочными.
				ОтборПоОрганизации = ОтборПоОрганизации + " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации", ОтборПоОрганизации);
			
		Иначе // ЕстьАналитикаПартнеров
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор,
			|	Т.АналитикаУчетаПоПартнерам.Организация КАК Организация
			|ПОМЕСТИТЬ ВТДвиженияСНекорректнойОрганизацией
			|ИЗ
			|	ВТКэш%1 КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
			|			ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
			|ГДЕ
			|	АналитикаПартнеров.КлючАналитики ЕСТЬ NULL
			|";
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ОписаниеРегистра.ИмяРегистра);
		
		Запрос.Выполнить();
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			"ВТДвиженияСНекорректнойОрганизацией",
			НСтр("ru='Сформированы движения с некорректной организацией'"));
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияСНекорректнойОрганизацией");
		
	КонецЦикла;
	
	// Проверки для партионного учета версии 2.2:
	// убедимся, что при расчете не было сформировано ошибочных движений по регистру "Себестоимость товаров".
	Если ПараметрыРасчета.ПартионныйУчетВерсии22
	 И ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость
	 И ПараметрыРасчета.Движения.Свойство(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя) Тогда
		
		ОписаниеРегистра = ПараметрыРасчета.Движения[Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя];
		
		ПротоколРасчетаПартийИСебестоимости.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэш" + ОписаниеРегистра.ИмяРегистра));
		
		// Проверяем корректность типа записи в движениях, сформированных на этапе распределения партий.
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор,
		|	Т.Организация
		|ПОМЕСТИТЬ ВТДвиженияНепересчитываемыхТипов
		|ИЗ
		|	ВТКэшСебестоимостьТоваров КАК Т
		|ГДЕ
		|	Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей)
		|	И НЕ Т.РасчетПартий
		|	И НЕ Т.РасчетСебестоимости
		|";
		
		Запрос.Выполнить();
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			"ВТДвиженияНепересчитываемыхТипов",
			НСтр("ru='Сформированы движения по непересчитываемому типу записи'"));
		
		// Проверяем соответствие количества в первичных движениях в ИБ и в движениях, сформированных на этапе распределения партий.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.КорАналитикаУчетаНоменклатуры,
		|	Т.КорРазделУчета,
		|	Т.КорВидЗапасов,
		|	Т.КорОрганизация,
		|	Т.ТипЗаписи,
		|	Т.ХозяйственнаяОперация,
		|	СУММА(Т.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТИзмененныеПервичныеДвижения
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Регистратор КАК Регистратор,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ИНАЧЕ Т.РазделУчета
		|		КОНЕЦ КАК РазделУчета,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.ВидЗапасов
		|		КОНЕЦ КАК ВидЗапасов,
		|		Т.Организация КАК Организация,
		|		Т.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ИНАЧЕ Т.КорРазделУчета
		|		КОНЕЦ КАК КорРазделУчета,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.КорВидЗапасов
		|		КОНЕЦ КАК КорВидЗапасов,
		|		Т.КорОрганизация КАК КорОрганизация,
		|		Т.ТипЗаписи КАК ТипЗаписи,
		|		Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		Т.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Т
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Т.Организация В(&МассивОрганизаций)
		|		И Т.Активность
		|		И НЕ (Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей))
		|		И НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		|		И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.КорректировкаРегистров)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ИНАЧЕ Т.РазделУчета
		|		КОНЕЦ,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.ВидЗапасов
		|		КОНЕЦ КАК ВидЗапасов,
		|		Т.Организация,
		|		Т.КорАналитикаУчетаНоменклатуры,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ИНАЧЕ Т.КорРазделУчета
		|		КОНЕЦ,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.КорВидЗапасов
		|		КОНЕЦ КАК КорВидЗапасов,
		|		Т.КорОрганизация,
		|		Т.ТипЗаписи,
		|		Т.ХозяйственнаяОперация,
		|		-Т.Количество
		|	ИЗ
		|		ВТКэшСебестоимостьТоваров КАК Т
		|	ГДЕ
		|		НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		|
		|) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.КорАналитикаУчетаНоменклатуры,
		|	Т.КорРазделУчета,
		|	Т.КорВидЗапасов,
		|	Т.КорОрганизация,
		|	Т.ТипЗаписи,
		|	Т.ХозяйственнаяОперация,
		|	Т.Регистратор
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) <> 0
		|";
		
		ПроизводственныеДокументыБезВидаЗапасов = Новый Массив;
		
		Запрос.УстановитьПараметр("ПроизводственныеДокументыБезВидаЗапасов", ПроизводственныеДокументыБезВидаЗапасов);
		
		Запрос.Выполнить();
		
		ПротоколРасчетаПартийИСебестоимости.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров"));
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			"ВТИзмененныеПервичныеДвижения",
			НСтр("ru='Изменилось количество в первичных движениях'"));
			
		// Проверяем,что реквизит ДокументИсточник не изменился в документах, которые заполняют его сами, при проведении.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.Организация,
		|	Т.ХозяйственнаяОперация,
		|	Т.ДокументИсточник,
		|	СУММА(Т.КоличествоСтарое) КАК КоличествоСтарое,
		|	СУММА(Т.КоличествоНовое) КАК КоличествоНовое
		|ПОМЕСТИТЬ ВТРазличияДокументовИсточников
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Регистратор КАК Регистратор,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК СлужебноеВидДвиженияПриход,
		|		Т.Организация КАК Организация,
		|		Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		Т.ДокументИсточник КАК ДокументИсточник,
		|		СУММА(Т.Количество) КАК КоличествоСтарое,
		|		0 КАК КоличествоНовое
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Т
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Т.Организация В(&МассивОрганизаций)
		|		И Т.Активность
		|		И НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		|		И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.КорректировкаРегистров)
		|	СГРУППИРОВАТЬ ПО
		|		Т.Регистратор,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		Т.Организация,
		|		Т.ХозяйственнаяОперация,
		|		Т.ДокументИсточник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.Организация,
		|		Т.ХозяйственнаяОперация,
		|		Т.ДокументИсточник КАК ДокументИсточник,
		|		0 КАК КоличествоСтарое,
		|		СУММА(Т.Количество) КАК КоличествоНовое
		|	ИЗ
		|		ВТКэшСебестоимостьТоваров КАК Т
		|	ГДЕ
		|		НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		|	СГРУППИРОВАТЬ ПО
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.Организация,
		|		Т.ХозяйственнаяОперация,
		|		Т.ДокументИсточник
		|
		|) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.Организация,
		|	Т.ХозяйственнаяОперация,
		|	Т.ДокументИсточник
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.КоличествоСтарое) <> 0
		|	И СУММА(Т.КоличествоСтарое) <> СУММА(Т.КоличествоНовое)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.Организация,
		|	Т.ХозяйственнаяОперация,
		|	Т.ДокументИсточник,
		|	Т.КоличествоСтарое,
		|	Т.КоличествоНовое
		|ПОМЕСТИТЬ ВТИзмененныеДокументыИсточники
		|ИЗ
		|	ВТРазличияДокументовИсточников КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПравилаЗаполненияПоляТипЗаписи КАК Правила
		|		ПО ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИПЗНАЧЕНИЯ(Правила.ПустоеЗначениеРегистратора)
		|			И (Правила.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|				ИЛИ Т.ХозяйственнаяОперация = Правила.ХозяйственнаяОперация)
		|ГДЕ
		|	(Т.СлужебноеВидДвиженияПриход И Правила.ДокументИсточникВПриходе)
		|		ИЛИ (НЕ Т.СлужебноеВидДвиженияПриход И Правила.ДокументИсточникВРасходе)
		|";
		
		Запрос.Выполнить();
		
		ПротоколРасчетаПартийИСебестоимости.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров"));
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			"ВТИзмененныеДокументыИсточники",
			НСтр("ru='Изменился реквизит ДокументИсточник в движениях'"));
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета,
			"ВТДвиженияНепересчитываемыхТипов, ВТИзмененныеПервичныеДвижения,
			|ВТРазличияДокументовИсточников, ВТИзмененныеДокументыИсточники");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ФормированиеДвижений

Процедура СформироватьДвиженияПоРегиструПоДаннымЗапроса(ПараметрыРасчета, ИмяРегистра, Запрос) Экспорт

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Добавим движение в соответствии с логикой выполняемого сейчас механизма расчета.
		Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(
			ПараметрыРасчета,
			ИмяРегистра,
			Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет новую строку в таблицу движений указанного регистра и заполняет служебные поля.
//
Функция ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ОписаниеРегистра, ДанныеДвижения, КопируемыеПоля = Неопределено) Экспорт
	
	// При необходимости кэшируем сформированную порцию движений из таблицы значений во временную таблицу
	Если ОписаниеРегистра.Таблица.Количество() >= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		КэшироватьСформированныеДвижения(ПараметрыРасчета, ОписаниеРегистра.ИмяРегистра, Ложь);
	КонецЕсли;
	
	// Добавим новую строку в таблицу движений и заполним ее поля
	Запись = ОписаниеРегистра.Таблица.Добавить();
	
	Если ЗначениеЗаполнено(КопируемыеПоля) Тогда
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения, КопируемыеПоля); // только требуемые поля
	Иначе
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения); // все поля
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

#КонецОбласти

#Область ЗаписьДвижений

// Записывает сформированные новые движения.
//
Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета, ПротоколыРасчета = Неопределено) Экспорт
	
	Если НЕ ПараметрыРасчета.ИдетРасчетПартий Тогда
		
		// Восстановим отбор по всем организациям, т.к. при расчете себестоимости он подменялся при расчете по группам организаций
		ПараметрыРасчета.Вставить("МассивОрганизаций",
			ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыРасчета.КопияМассивОрганизаций));
		
		// Восстановим временные таблицы с отборами по всем организациям
		ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
		
		Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
			
			// Возврат в механизм расчета партий из расчета себестоимости
			ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, Ложь);
			
			// Восстановим все расчетные кэши остатков и оборотов по всем организациям
			ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета);
			
			Возврат; // записывать движения нужно или в конце расчета партий, или в конце отдельного расчета себестоимости
			
		КонецЕсли;
		
		// Удалим данные регистров, которые использовались в расчете себестоимости только для чтения их кэшей.
		Для Каждого КлючИЗначение Из РасчетСебестоимости.ИспользуемыеКэшиРегистровПартионногоУчета() Цикл
			УничтожитьДанныеРегистра(ПараметрыРасчета, КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверяет отсутствие ошибок в сформированных движениях.
	ПроверитьКорректностьСформированныхДвижений(ПараметрыРасчета);
	
	// Записывает движения и формирует временную таблицу ВТИзмененныеДокументы
	НачалоЗаписиДвижений(ПараметрыРасчета);

	
	// Ожидает окончания заданий записи для последующей проверки корректности результатов расчета
	ЗавершениеЗаписиДвижений(ПараметрыРасчета);
	
	Если (НЕ ПараметрыРасчета.ЗапущенРасчетПартий И НЕ ПараметрыРасчета.ПредварительныйРасчет)
	 ИЛИ ПараметрыРасчета.ИдетРасчетПартий Тогда
	 	// Проверяет корректность остатков в конце отдельного фактического расчета себестоимости или в конце расчета партий
		ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	// Отметим в "регистрах-последовательностях" текущий период как рассчитанный
	Если НЕ ПараметрыРасчета.ВыполняетсяОбновлениеИБ И ПараметрыРасчета.ЗапущенРасчетПартий Тогда 
		
		Если НЕ ПараметрыРасчета.Отладка.НеСдвигатьПериодПоОкончанииРасчета
			И ПараметрыРасчета.Свойство("ИсходныеЗаданияКРасчетуСебестоимости") Тогда
			УвеличитьПериодРасчетаСебестоимости(
				ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыРасчета.ИсходныеЗаданияКРасчетуСебестоимости,
				ПараметрыРасчета);
		КонецЕсли;
		
		СформироватьЗаданияКРаспределениюНДС(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.МассивОрганизаций);
		
		СформироватьЗаданияКФормированиюЗаписейКнигиПокупокПродаж(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.МассивОрганизаций);
		
	КонецЕсли;
	
	Если ПротоколыРасчета <> Неопределено Тогда
		// Сохраним идентификатор протокола в массив протоколов
		ПротоколыРасчета.Добавить(ПротоколРасчетаПартийИСебестоимости.ИдентификаторПротокола(ПараметрыРасчета));
	КонецЕсли;
	
	ОкончаниеРасчета(ПараметрыРасчета);
	
КонецПроцедуры

// Запускает процесс записи новых движений.
//
Процедура НачалоЗаписиДвижений(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЗаписиДвижений(ПараметрыРасчета);
	
	ОбработаноРегистров = 0;
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		ПротоколРасчетаПартийИСебестоимости.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэш" + ОписаниеРегистра.ИмяРегистра));
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшИзмененныеДокументы
		СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Подсчитаем количество документов с измененными движениями
		КоличествоДокументов = РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументы");
		
		ПротоколРасчетаПартийИСебестоимости.ЗаписьСформированныхДвижений(
			ПараметрыРасчета,
			КлючИЗначение.Ключ,
			КоличествоДокументов);
		
		Если КоличествоДокументов > 0 Тогда
			
			// Шаблоны для замены в тексте запроса
			ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
				|		Т."));
			ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
				|		Т."));
			ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоляКэшаРегистра);
			
			ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
				|		Т."));
			ТекстПоляСортировки = "Т.Регистратор, Т.Период"
				+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
				+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", Т.РасчетСебестоимости", "")
				+ ?(ОписаниеРегистра.ЕстьРасчетПартий, 		  ", Т.РасчетПартий", "");
			
			Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
				НеВременныеЗаписиБаланса =
					"	И НЕ Т.ВидИсточника В (
					|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетБаланса),
					|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости))";
			Иначе
				НеВременныеЗаписиБаланса = "";
			КонецЕсли;
			
			// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
			СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			// Сформируем ВТКэшОчищаемыеДокументы
			СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			// Подготовим данные для очистки старых движений
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТКэшОчищаемыеДокументы КАК Т";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ОписаниеРегистра.ЕстьИзмененныеДанные = НЕ РезультатЗапроса.Пустой();
			
			Если ПараметрыРасчета.УправлениеИтогами.ОтключатьИтогиПередЗаписью
			 И ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда // Это регистр остатков
				
				ВыключитьИтогиРегистра(ПараметрыРасчета, ОписаниеРегистра.МенеджерРегистра);
				
			КонецЕсли;
			
			Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
				
				// Запишем движения синхронно, без фоновых заданий.
				
				// Очистим старые движения у выбранных регистраторов
				ЗаписатьДвиженияПоРегистру(
					РезультатЗапроса,
					ОписаниеРегистра.МенеджерРегистра,
					ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
				
				// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- непересчитываемые движения документа
				//	- новые "расчетные" движения документа
				Запрос.Текст =
				"ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	%ПолноеИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	%ОтборПоОрганизации
				|	%ОтборПоСлужебнымРеквизитам
				|	%НеВременныеЗаписиБаланса
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляКэшаРегистра
				|ИЗ
				|	ВТКэш%ИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|
				|УПОРЯДОЧИТЬ ПО
				|	%Порядок";
				
				// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",   		 ТекстПоляКэшаРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", 					 ТекстПоляСортировки);
				
				// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
				 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
					// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", 	 НеВременныеЗаписиБаланса);
				
				// Выберем движения
				Выборка = Запрос.Выполнить().Выбрать();
				
				ПротоколРасчетаПартийИСебестоимости.ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, , Выборка.Количество());
				
				Попытка
					
					ОписаниеРегистра.ЕстьИзмененныеДанные = ОписаниеРегистра.ЕстьИзмененныеДанные ИЛИ Выборка.Количество() > 0;
					
					ЗаписатьДвиженияПоРегистру(
						Выборка,
						ОписаниеРегистра.МенеджерРегистра,
						ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
						
				Исключение
					
					// Информацию об ошибке добавим в протокол расчета.
					// Затем, по окончании расчета, запишем протокол расчета и только потом вызовем исключение.
					ТекстДляПротокола = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
					ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
						ПараметрыРасчета,
						Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
						ТекстДляПротокола);
						
					Если НЕ ИсключениеВызваноПрограммно(ТекстДляПротокола) Тогда
						ЗарегистрироватьПроблемуВыполненияРасчета(
							ПараметрыРасчета,
							,
							НСтр("ru='При записи движений диагностированы ошибки'"),
							ТекстДляПротокола);
					КонецЕсли;
					
				КонецПопытки;
				
			Иначе
					
				// Запишем движения асинхронно, в фоновых заданиях.
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					// Очистим старые движения движения у выбранных регистраторов.
					ОписаниеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1, очистка старых движений.'"),
						СокрЛП(ПараметрыРасчета.ВариантРасчета));
					
					ЗапуститьЗаданиеЗаписи(ПараметрыРасчета, ОписаниеРегистра, РезультатЗапроса.Выгрузить(), ОписаниеЗадания);
					
				КонецЕсли;
				
				// Деление регистраторов на порции для параллельной записи:
				// - размер порции будет примерно соответствовать ограничению на максимальный размер таблицы значений
				// - один документ не может присутствовать в нескольких порциях - иначе одно задание записи затрет результаты другого
				// - "большие" документы пишутся по одному документу на порцию - считаем, что движения документа всегда "поместятся" в таблицу значений
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.Регистратор   		  	КАК Регистратор,
				|	СУММА(Т.КоличествоДвижений) КАК КоличествоДвижений
				|ПОМЕСТИТЬ ВТДвиженияДокументов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ИзмененныеДокументы.Регистратор   КАК Регистратор,
				|		СУММА(1) 						  КАК КоличествоДвижений
				|	ИЗ
				|		%ПолноеИмяРегистра КАК Т
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|	ГДЕ
				|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|		%ОтборПоОрганизации
				|		%ОтборПоСлужебнымРеквизитам
				|		%НеВременныеЗаписиБаланса
				|	СГРУППИРОВАТЬ ПО
				|		ИзмененныеДокументы.Регистратор
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		Т.Регистратор,
				|		СУММА(1) КАК КоличествоДвижений
				|	ИЗ
				|		ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|	СГРУППИРОВАТЬ ПО
				|		Т.Регистратор
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ИзмененныеДокументы.Регистратор,
				|		СУММА(1) КАК КоличествоДвижений
				|	ИЗ
				|		ВТКэш%ИмяРегистра КАК Т
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|	СГРУППИРОВАТЬ ПО
				|		ИзмененныеДокументы.Регистратор
				|	) КАК Т
				|
				|СГРУППИРОВАТЬ ПО
				|	Т.Регистратор
				|";

				// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
				 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
					// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", НеВременныеЗаписиБаланса);
				
				Запрос.Выполнить();
				
				// Разделим регистраторы на порции для записи.
				ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
					ПараметрыРасчета.ОграниченияФЗ.КоличествоДвиженийВФЗЗаписи,
					"КоличествоДвижений", "КоличествоДвижений УБЫВ, Регистратор",, "НомерПорции");
				
				МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТДвиженияДокументов");
				
				// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- непересчитываемые движения документа
				//	- новые "расчетные" движения документа
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.Регистратор КАК Регистратор
				|ПОМЕСТИТЬ ВТРегистраторыТекущейПорции
				|ИЗ
				|	ВТДвиженияДокументов КАК Т
				|ГДЕ
				|	Т.НомерПорции = &НомерПорции
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Регистратор
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	%ПолноеИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	%ОтборПоОрганизации
				|	%ОтборПоСлужебнымРеквизитам
				|	%НеВременныеЗаписиБаланса
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляКэшаРегистра
				|ИЗ
				|	ВТКэш%ИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|
				|УПОРЯДОЧИТЬ ПО
				|	%Порядок";
				
				// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",   		 ТекстПоляКэшаРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", 					 ТекстПоляСортировки);
				
				// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
				 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
					// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", 	 НеВременныеЗаписиБаланса);
					
				Для НомерПорции = 1 По МаксНомерПорции Цикл
					
					// Выберем очередную порцию движений.
					Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
					
					ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
					
					УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТРегистраторыТекущейПорции");
					
					Если ТаблицаДвижений.Количество() = 0 Тогда
						Продолжить; // в эту порцию ничего не попало
					КонецЕсли;
					
					ПротоколРасчетаПартийИСебестоимости.ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, , ТаблицаДвижений.Количество());
					
					ОписаниеРегистра.ЕстьИзмененныеДанные = Истина;
					
					// Запишем новые движения.
					ОписаниеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1, запись порции движений %2 из %3.'"),
						СокрЛП(ПараметрыРасчета.ВариантРасчета),
						СокрЛП(НомерПорции),
						СокрЛП(МаксНомерПорции));
					
					ЗапуститьЗаданиеЗаписи(ПараметрыРасчета, ОписаниеРегистра, ТаблицаДвижений, ОписаниеЗадания);
					
				КонецЦикла;
				
				УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияДокументов");
				
			КонецЕсли; // пишем в фоновых заданиях
			
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");
			
		КонецЕсли; // есть измененные документы
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы");
		
		
	КонецЦикла;
	
	Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;
	
	// Зафиксируем данные замера производительности.
	ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьЗамерВремени(ПараметрыРасчета);
	
КонецПроцедуры

// Завершает процесс многопоточной записи движений.
//
Процедура ЗавершениеЗаписиДвижений(ПараметрыРасчета)
	
	Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
		// Запись уже закончена - выполнялась в один поток, без фоновых заданий
		Возврат;
	КонецЕсли;
	
	// Если движения пишутся фоновыми заданиями, то дождемся окончания всех заданий
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, Истина);
	
	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ
	 ИЛИ ПараметрыРасчета.Отладка.РегистраторыВФЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Свернуть("ИмяРегистра, Регистратор", "Количество");
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Сортировать("Количество Убыв, ИмяРегистра, Регистратор");
	
	Если ПараметрыРасчета.Отладка.РегистраторыВФЗ[0].Количество > 1 Тогда
		
		ТекстДляПротокола =	НСтр("ru = 'Некорректно выполнено разделение движений на порции для многопоточной записи. Движения могут быть некорректны.'");
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
			ТекстДляПротокола);
		
		ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			,
			НСтр("ru='При записи движений диагностированы ошибки'"),
			ТекстДляПротокола);
		
	КонецЕсли;
	
КонецПроцедуры


// Выполняет запись движений документов по указанному регистру в фоновом задании.
//
// Параметры:
//	Таблица - ТаблицаЗначений - движения по регистру, упорядоченные по регистратору
//		Если в таблице есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - менеджер регистра
//	КоличествоЗаписейВНЗ - Число - количество записей в наборе, при достижении которого выполняется запись набора
//	ПредыдущееЗадание - УникальныйИдентификатор - идентификатор задания, записывающего предыдущую порцию движений по этому регистру
//		Если идентификатор указан, то перед записью этой порции надо дождаться окончания предыдущей.
//
Процедура ЗаписатьДвиженияПоРегиструФоновымЗаданием(Таблица, МенеджерРегистра, КоличествоЗаписейВНЗ, ПредыдущееЗадание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПредыдущееЗадание) Тогда
		// Подождем завершения предыдущего задания.
		// Даже если оно почему-то завершилось с ошибкой, все равно запишем текущую порцию.
		// Тогда, при перезапуске расчета, движения текущей порции уже будут в ИБ, перезаписывать их уже будет не надо.
		// Т.о. при перезапуске расчета будут только дописаны движения, которые "не смогли" дописать упавшие задания.
		// Результат завершения предыдущего задания будет обработан централизованно, в ОжидатьЗавершенияФоновогоЗадания()
		Попытка
			ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ПредыдущееЗадание).ОжидатьЗавершения();
		Исключение
			БылиОшибки = Истина; // для исключения срабатывания проверки стандарта 499 
		КонецПопытки;
	КонецЕсли;
	
	ЗаписатьДвиженияПоРегистру(Таблица, МенеджерРегистра, КоличествоЗаписейВНЗ, Истина);
	
КонецПроцедуры

// Выполняет запись движений документов по указанному регистру.
//
// Параметры:
//	ИсходныеДанные - Запрос, РезультатЗапроса, ВыборкаИзРезультатаЗапроса или ТаблицаЗначений
//		Движения по регистру, обязательно упорядоченные по регистратору
//		Если в источнике есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - менеджер регистра
//	КоличествоЗаписейВНЗ - Число - количество записей в наборе, при достижении которого выполняется запись набора
//	ВФоновомЗадании - Булево - признак того, что запись выполняется в фоновом задании
//
Процедура ЗаписатьДвиженияПоРегистру(ИсходныеДанные, МенеджерРегистра, КоличествоЗаписейВНЗ, ВФоновомЗадании = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КоличествоЗаписейВНЗ) Тогда
		// Можно использовать для целей отладки - выполнить полноценный расчет без изменения данных ИБ
		// Не стоит использовать эту возможность, если выполняется расчет первого месяца на механизме партионного учета версии 2.2,
		// т.к. не будут записаны начальные остатки партий и весь последующий расчет не будет иметь смысла
		Возврат; 
	КонецЕсли;
	
	// Приведем исходные данные к типу выборки из запроса или таблицы значений
	Если ТипЗнч(ИсходныеДанные) = Тип("Запрос") Тогда
		ИсточникДанных = ИсходныеДанные.Выполнить().Выбрать(); // выборка
	ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("РезультатЗапроса") Тогда
		ИсточникДанных = ИсходныеДанные.Выбрать(); // выборка
	Иначе
		ИсточникДанных = ИсходныеДанные; // выборка или таблица значений
	КонецЕсли;
	
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат; // нечего записывать
	КонецЕсли;
	
	// Если в источнике нет обязательных для регистра колонок, например, Период,
	// то считаем, что переданы регистраторы, у которых надо просто очистить движения.
	Если ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда 
		ТолькоОчищатьЗаписи = (ИсточникДанных.Владелец().Колонки.Найти("Период") = Неопределено);
	Иначе // источник данных - это таблица значений
		ТолькоОчищатьЗаписи = (ИсточникДанных.Колонки.Найти("Период") = Неопределено);
	КонецЕсли;
	
	ОписаниеОшибокЗаписи = "";
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	ПорцияДанныхИсточника = Неопределено;
	ТекущийРегистратор    = Неопределено;
	НомерПорцииЗаписи     = 1;
	
	Пока ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника) Цикл
		
		Если ТекущийРегистратор <> ПорцияДанныхИсточника.Регистратор Тогда
			
			// Если изменился регистратор в движениях - запишем движения предыдущего регистратора
			Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи);
			КонецЕсли;
			
			ТекущийРегистратор = ПорцияДанныхИсточника.Регистратор;
			НомерПорцииЗаписи = 1;
			
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			
		ИначеЕсли НЕ ТолькоОчищатьЗаписи И НаборЗаписей.Количество() >= КоличествоЗаписейВНЗ Тогда
			
			// Если в движениях документа много записей - будем записывать их порциями
			// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям
			ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи);
			
			НомерПорцииЗаписи = НомерПорцииЗаписи + 1;
			
		КонецЕсли;
		
		Если НЕ ТолькоОчищатьЗаписи Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ПорцияДанныхИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
		ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибокЗаписи) Тогда
		
		ВызватьИсключение СлужебныйСимвол_ПроблемаУжеЗарегистрирована() + ОписаниеОшибокЗаписи; // все ошибки записи переданной порции движений
		
	КонецЕсли;
	
КонецПроцедуры

// Получает следующую порцию из выборки или следующую строку из таблицы значений.
//
Функция ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника)
	
	Если ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда 
		
		Если ИсточникДанных.Следующий() Тогда
			ПорцияДанныхИсточника = ИсточникДанных; // данные хранятся в полях самой выборки
		Иначе
			Возврат Ложь; // больше нет данных
		КонецЕсли;
		
	Иначе // источник данных - это таблица значений
		
		Если ПорцияДанныхИсточника = Неопределено Тогда
			ИндексСтроки = 0;
		Иначе
			ИндексСтроки = ИсточникДанных.Индекс(ПорцияДанныхИсточника) + 1;
		КонецЕсли;
		
		Если ИндексСтроки < ИсточникДанных.Количество() Тогда
			ПорцияДанныхИсточника = ИсточникДанных[ИндексСтроки]; // следующая строка
		Иначе
			Возврат Ложь; // больше нет данных
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина; // новая порция данных помещена в ПорцияДанныхИсточника
	
КонецФункции

// Выполняет запись переданного набора записей.
//
Процедура ЗаписатьНаборЗаписей(НаборЗаписей, Замещать, ОписаниеОшибокЗаписи)
	
	Попытка
		НаборЗаписей.Записать(Замещать);
	Исключение
		
		Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка записи движений документа ""%1"":
				|%2'"),
			СокрЛП(Регистратор),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Если СтрЧислоСтрок(ОписаниеОшибокЗаписи) < 100 Тогда
			ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи + ?(ПустаяСтрока(ОписаниеОшибокЗаписи), "
				|", "") + ПротоколРасчетаПартийИСебестоимости.СлужебныйСимвол_МаркированныйСписок() + ТекстДляПротокола + "
				|";
		Иначе
			// Получается слишком большое сообщение об ошибке.
			// Скорее всего записи в нем будут однотипные - незачем выводить их все.
			Если СтрНайти(ОписаниеОшибокЗаписи, "...") = 0 Тогда
				ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи + "
					|" + ПротоколРасчетаПартийИСебестоимости.СлужебныйСимвол_МаркированныйСписок() + " ...";
			КонецЕсли;
		КонецЕсли;
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "Дата, Организация");
		ПараметрыРасчета   = ИнициализироватьОсновныеПараметрыРасчета(РеквизитыДокумента.Дата, РеквизитыДокумента.Организация);
		
		ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			,
			НСтр("ru='При записи движений диагностированы ошибки'"),
			ТекстДляПротокола,
			Регистратор);
		
	КонецПопытки;
	
	НаборЗаписей.Очистить();
	
КонецПроцедуры

// Проверяет необходимость записи сформированных движений регистра в зависимости от выполняемого варианта расчета.
//
Функция НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра)
	
	Если НЕ ОписаниеРегистра.ЕстьРасчетСебестоимости И НЕ ОписаниеРегистра.ЕстьРасчетПартий
	 И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
		// В обслуживаемых регистрах могут быть регистры, по которым не формируются расчетные движения,
		// но с этими регистрами могут выполняться какие-то сервисные действия для смежных механизмов.
		// Пример такого регистра - НДСПредъявленный, по которому выполняется заполнение ресурса НДСУпр.
		Возврат Ложь;
	ИначеЕсли НЕ ПараметрыРасчета.ЗапущенРасчетПартий И ПараметрыРасчета.ПредварительныйРасчет
	 И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
		// При предварительном расчете себестоимости пересчитывается только стоимость товаров.
		// Движения по всем остальным регистрам остаются без изменений.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Формирует временную таблицу ВТКэшСтарыеДокументы - документы, у которых были "старые" расчетные движения
//
Процедура СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшСтарыеДокументы",
		НСтр("ru='Регистр'") + ": " + ОписаниеРегистра.ИмяРегистра);
		
	// Выберем все старые регистраторы данного регистра (кроме док. КорректировкаРегистров)
	// Поле Активность не проверяем
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	%ОтборПоОрганизации
	|	%ОтборПоСлужебнымРеквизитам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	// Отбор - расчетные движения
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
	 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		// Все движения являются расчетными
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина);
	Иначе
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Ложь, Истина, Истина, Истина);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшИзмененныеДокументы - документы, у которых изменились расчетные движения
//
Процедура СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшИзмененныеДокументы",
		НСтр("ru='Регистр'") + ": " + ОписаниеРегистра.ИмяРегистра,
		"ВТКэшСтарыеДокументы, ВТКэш" + ОписаниеРегистра.ИмяРегистра);
	
	// Шаблоны для замены в тексте запроса
	ТекстОтборНепустыхРесурсов 		 = "";
	ТекстГруппировкаПолей 	   		 = "";
	ТекстПоляОсновнойТаблицыРегистра = ""; // ресурсы с "минусом"
	ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
		|		Т.")); // ресурсы с "плюсом
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляОтбораНепустыхДвижений, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		ЭтоРесурсРегистра = (МассивРесурсов.Найти(ТекущееПоле) <> Неопределено);
		
		Если ЭтоРесурсРегистра Тогда
			// Ресурс
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
			// Измерение или реквизит
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
		КонецЕсли;
		
		ТекстПоляОсновнойТаблицыРегистра = ТекстПоляОсновнойТаблицыРегистра 
			+ ?(ТекстПоляОсновнойТаблицыРегистра = "", "", ",
			|		") + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;
		
	КонецЦикла;
	
	// Заменим значение поля ВидДвижения основной таблицы регистра на булево значение; ресурсы с "минусом"
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ТекстПоляОсновнойТаблицыРегистра);
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
	
	// Выбор регистраторов, у которых есть хоть какие-то отличия в старых и новых движениях
	// Будут перезаписаны движения только этих регистраторов
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТКэш%ИмяРегистра_МоментыВремени
	|ИЗ
	|	(ВЫБРАТЬ // новые расчетные движения, с плюсом
	|		%ПоляКэшаРегистра
	|	ИЗ
	|		ВТКэш%ИмяРегистра КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ // старые расчетные движения, с минусом
	|		%ПоляОсновнойТаблицыРегистра
	|	ИЗ
	|		%ПолноеИмяРегистра КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшСтарыеДокументы КАК СтарыеДокументы
	|			ПО Т.Регистратор = СтарыеДокументы.Регистратор
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		%ОтборПоОрганизации
	|		%ОтборПоСлужебнымРеквизитам
	|	) КАК Т
	|
	|%ГруппировкаПолей
	|
	|%ОтборНепустыхРесурсов
	|";
	
	// Заменим шаблоны в тексте запроса
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",			 ТекстПоляКэшаРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей",			 ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов",		 ТекстОтборНепустыхРесурсов);
	
	// Отбор - расчетные движения
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
	 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		// Все движения являются расчетными
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина);
	Иначе
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Ложь, Истина, Истина, Истина);
	КонецЕсли;
	
	Если ОписаниеРегистра.ЕстьОрганизация И НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "(&МассивОрганизаций)", "(&МассивОрганизаций, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	СформироватьТаблицуМоментовВремени(
		ПараметрыРасчета,
		"ВТКэш" + ОписаниеРегистра.ИмяРегистра + "_МоментыВремени",
		,
		"ВТКэшИзмененныеДокументы");
		
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэш" + ОписаниеРегистра.ИмяРегистра + "_МоментыВремени");
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшДвиженияДругихПериодовИлиОрганизаций - движения измененных документов по
// периодам или организациям, не входящим в параметры расчета.
//
Процедура СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ОтборПоТипамРегистраторов = "";
	Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
		Если КлючИЗначение.Значение Тогда
			ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов + ?(ОтборПоТипамРегистраторов = "", "", ", ")
				+ "ТИП(Документ." + КлючИЗначение.Ключ.Имя + ")";
		КонецЕсли;
	КонецЦикла;
	
	МогутБытьДвиженияПоДругимПериодамИлиОрганизациям = ЗначениеЗаполнено(ОтборПоТипамРегистраторов);
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшДвиженияДругихПериодовИлиОрганизаций",
		НСтр("ru='Регистр'") + ": " + ОписаниеРегистра.ИмяРегистра,
		?(МогутБытьДвиженияПоДругимПериодамИлиОрганизациям, "ВТКэшИзмененныеДокументы", ""));
	
	Если МогутБытьДвиженияПоДругимПериодамИлиОрганизациям Тогда
		
		// По этому регистру есть регистраторы с движениями по другим периодам и/или организациям.
		// Сохраним такие движения во временной таблице ВТКэшДвиженияДругихПериодовИлиОрганизаций.
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "ИЛИ (НЕ (Т.Организация В (&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
				ОтборПоОрганизации = ОтборПоОрганизации + " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			КонецЕсли;
			ОтборПоОрганизации = ОтборПоОрганизации + ")";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "ИЛИ НЕ (Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор))";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТОтборПоРегистраторам
		|ИЗ
		|	ВТКэшИзмененныеДокументы КАК Т
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Т.Регистратор) В (%ОтборПоТипамРегистраторов)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
		|ИЗ
		|	%ПолноеИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборПоРегистраторам КАК ИзмененныеДокументы
		|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
		|ГДЕ
		|	НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)
		|	%ОтборПоОрганизации
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТОтборПоРегистраторам
		|";
		
		// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации",   	   ОтборПоОрганизации);
		
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос); // шаблоны имени регистра
		
	Иначе
		
		// По этому регистру не может быть регистраторов с движениями по другим периодам и/или организациям.
		// Создадим пустую временную таблицу с полями, идентичными полям регистра.
		
		Запрос.УстановитьПараметр("ПустаяТаблицаРегистра", ОписаниеРегистра.МенеджерРегистра.СоздатьНаборЗаписей().Выгрузить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
		|ИЗ
		|	&ПустаяТаблицаРегистра КАК Т";
		
	КонецЕсли;
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
		|		Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
		
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшОчищаемыеДокументы - документы, у которых не осталось расчетных движений
//
Процедура СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшОчищаемыеДокументы",
		НСтр("ru='Регистр'") + ": "  + ОписаниеРегистра.ИмяРегистра,
		"ВТКэшИзмененныеДокументы, ВТКэш" + ОписаниеРегистра.ИмяРегистра + ", ВТКэшДвиженияДругихПериодовИлиОрганизаций");
	
	// Выберем регистраторы, у которых (по И)
	// - есть только старые движения расчета себестоимости (нет "первичных движений")
	// - нет новых движений расчета себестоимости
	// - нет движений по другим периодам и/или организациям
	// - они не являются исключениями (у которых есть расчетные движения не в периоде документа)
	// Для таких документов надо просто очистить их движения - записать пустой набор.
	
	ОтборПоТипамРегистраторов = "";
	Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
		Если НЕ КлючИЗначение.Значение Тогда
			ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов + ?(ОтборПоТипамРегистраторов = "", "", " ИЛИ ")
				+ "(ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ." + КлючИЗначение.Ключ.Имя
				+ ") И НЕ (ВЫРАЗИТЬ(Т.Регистратор КАК Документ." + КлючИЗначение.Ключ.Имя + ").Дата МЕЖДУ &НачалоПериода И &КонецПериода))";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоТипамРегистраторов) Тогда
		ОтборПоТипамРегистраторов = "ЛОЖЬ";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТДокументыСНовымиДвижениями
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Регистратор КАК Регистратор
	|	ИЗ
	|		ВТКэш%ИмяРегистра КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Регистратор
	|	ИЗ
	|		ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
	|	) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТДокументыБезНовыхДвижений
	|ИЗ
	|	ВТКэшИзмененныеДокументы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСНовымиДвижениями КАК ДокументыСНовымиДвижениями
	|		ПО Т.Регистратор = ДокументыСНовымиДвижениями.Регистратор
	|ГДЕ
	|	ДокументыСНовымиДвижениями.Регистратор ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыБезНовыхДвижений КАК ДокументыБезНовыхДвижений
	|		ПО Т.Регистратор = ДокументыБезНовыхДвижений.Регистратор
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	%ОтборПоСлужебнымРеквизитам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыБезНовыхДвижений КАК ДокументыБезНовыхДвижений
	|		ПО Т.Регистратор = ДокументыБезНовыхДвижений.Регистратор
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (%ОтборПоТипамРегистраторов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТКэшОчищаемыеДокументы
	|ИЗ
	|	ВТДокументыБезНовыхДвижений КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями КАК ДокументыСПервичнымиИЛИСохраняемымиДвижениями
	|		ПО Т.Регистратор = ДокументыСПервичнымиИЛИСохраняемымиДвижениями.Регистратор
	|ГДЕ
	|	ДокументыСПервичнымиИЛИСохраняемымиДвижениями.Регистратор ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыСНовымиДвижениями
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыБезНовыхДвижений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями";
	
	// Отбор - первичные движения
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, , Истина, Ложь, Ложь, );
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры


// Отладочная процедура - очистка всех движений, сформированных предыдущим расчетом.
// Может выполняться достаточно долго, поэтому рекомендуется только для целей отладки.
//
Процедура ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ОчиститьСтарыеДвиженияРасчетаСебестоимости");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ ОписаниеРегистра.ЕстьРасчетСебестоимости И НЕ ОписаниеРегистра.ЕстьРасчетПартий
		 И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
			Продолжить; // см. комментарий в НужноЗаписатьРегистр()
		КонецЕсли;
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшИзмененныеДокументы
		СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
		СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшОчищаемыеДокументы
		СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Подготовим данные для очистки движений документов, не имеющих первичных движений
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТКэшОчищаемыеДокументы КАК Т";
		
		ЗаписатьДвиженияПоРегистру(Запрос, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
		
		// Шаблоны для замены в тексте запроса
		ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
			|		Т."));
		ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
			|		Т."));
		ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоляКэшаРегистра);
		
		ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
			|		Т."));
		ТекстПоляСортировки = "Т.Регистратор, Т.Период"
			+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
			+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", Т.РасчетСебестоимости", "")
			+ ?(ОписаниеРегистра.ЕстьРасчетПартий, 		  ", Т.РасчетПартий", "");
		
		// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
		//	- "первичные" движения документа в периоде расчета
		//	- непересчитываемые движения документа
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ИЗ
		|	%ПолноеИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
		|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	%ОтборПоОрганизации
		|	%ОтборПоСлужебнымРеквизитам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ИЗ
		|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	%Порядок";
		
		// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", 					 ТекстПоляСортировки);
		
		// Отбор - первичные движения
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);
		
		ЗаписатьДвиженияПоРегистру(Запрос, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета,
			"ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы, ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");
		
	КонецЦикла;
	
КонецПроцедуры


// Запускает новое задание многопоточной записи движений.
//
Процедура ЗапуститьЗаданиеЗаписи(ПараметрыРасчета, ОписаниеРегистра, ТаблицаДвижений, ОписаниеЗадания = "") Экспорт
	
	// Если накопилось много незавершенных заданий записи движений, то подождем, пока хоть одно завершится.
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета);
	
	// Определим, должно ли новое задание ожидать завершения предыдущего
	ПредыдущееЗадание = Неопределено; // идентификатор задания записи предыдущей порции этого регистра
	
	Если ПараметрыРасчета.ОграниченияФЗ.ПоследовательнаяЗаписьРегистра
	 И ПараметрыРасчета.ТаблицаЗаданийЗаписи.Количество() > 0 Тогда
		ПоследняяСтрока = ПараметрыРасчета.ТаблицаЗаданийЗаписи[ПараметрыРасчета.ТаблицаЗаданийЗаписи.Количество() - 1];
		Если ПоследняяСтрока.ИмяРегистра = ОписаниеРегистра.ИмяРегистра Тогда
			ПредыдущееЗадание = ПоследняяСтрока.ИдентификаторЗадания;
		КонецЕсли;
	КонецЕсли;

	// Подготовим и запустим новое задание записи.
	ПараметрыРасчета.ОбщееКоличествоФЗЗаписи = ПараметрыРасчета.ОбщееКоличествоФЗЗаписи + 1;
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ТаблицаДвижений); // таблица первичных и расчетных движений
	ПараметрыОбработчикаЗадания.Добавить(ОписаниеРегистра.МенеджерРегистра); // менеджер регистра
	ПараметрыОбработчикаЗадания.Добавить(ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ); // порция записи
	ПараметрыОбработчикаЗадания.Добавить(ПредыдущееЗадание); // ожидать завершения этого задания
	
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ФЗ №%1 - %2 (%3)'"),
		СокрЛП(ПараметрыРасчета.ОбщееКоличествоФЗЗаписи),
		ОписаниеРегистра.ИмяРегистра,
		СокрЛП(Новый УникальныйИдентификатор));
	
	// Запустим задание и запомним его идентификатор в стеке и общей таблице заданий записи
	НовоеЗадание = ФоновыеЗадания.Выполнить(
		"УниверсальныеМеханизмыПартийИСебестоимости.ЗаписатьДвиженияПоРегиструФоновымЗаданием",
		ПараметрыОбработчикаЗадания,
		КлючЗадания,
		ОписаниеЗадания);
	
	ПараметрыРасчета.СтекЗаданийЗаписи.Добавить(НовоеЗадание.УникальныйИдентификатор);
	
	ПоследняяСтрока = ПараметрыРасчета.ТаблицаЗаданийЗаписи.Добавить();
	ПоследняяСтрока.ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	ПоследняяСтрока.ПредыдущееЗадание 	 = ПредыдущееЗадание;
	ПоследняяСтрока.ИмяРегистра 		 = ОписаниеРегистра.ИмяРегистра;
	ПоследняяСтрока.КоличествоДвижений	 = ТаблицаДвижений.Количество();
	
	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРегистраторов = ТаблицаДвижений.Скопировать(, "Регистратор");
	ТаблицаРегистраторов.Свернуть("Регистратор", "");
	
	Для Каждого ТекСтр Из ТаблицаРегистраторов Цикл
		НовСтр = ПараметрыРасчета.Отладка.РегистраторыВФЗ.Добавить();
		НовСтр.ИмяРегистра = ОписаниеРегистра.ИмяРегистра;
		НовСтр.Регистратор = ТекСтр.Регистратор;
		НовСтр.Количество = 1;
	КонецЦикла;
	
КонецПроцедуры

// Ожидает завершения одного или всех заданий в очереди записи движений.
//
Процедура ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, ЗавершениеВсехЗаданий = Ложь)
	
	Если ЗавершениеВсехЗаданий
	 ИЛИ ПараметрыРасчета.СтекЗаданийЗаписи.Количество() >= МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) Тогда
		
		// Если размер очереди заданий записи достиг максимума, то удалим из очереди завершенные задания
		НомерЗадания = 0;
		
		Пока НомерЗадания < ПараметрыРасчета.СтекЗаданийЗаписи.Количество() Цикл
			
			Если НЕ ЗавершениеВсехЗаданий Тогда
				Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
				Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					НомерЗадания = НомерЗадания + 1; // движения еще записываются
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, НомерЗадания);
			
		КонецЦикла;
		
		Если ПараметрыРасчета.СтекЗаданийЗаписи.Количество() >= МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) Тогда
			// Если в очереди нет завершенных заданий, то подождем пока освободится хотя бы одно место в очереди.
			ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, 0); // самое старое задание
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗавершениеВсехЗаданий Тогда
		// В случае, когда МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) > 1
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Ожидает завершения указанного фонового задания.
//
Функция ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, НомерЗадания)
	
	Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		Попытка
			Задание.ОжидатьЗавершения();
		Исключение
			// Возвращается неинформативная ошибка "Выполнение одного или нескольких заданий завершилось с ошибкой"
			БылиОшибки = Истина; // для исключения срабатывания проверки стандарта 499 
		КонецПопытки;
		
		// Чтобы узнать статус завершенного задания надо получить его повторно
		Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
		
	КонецЕсли;
	
	Если Задание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда // запись движений не выполнилась
		
		Если Задание.Состояние = Неопределено Тогда
			
			// Задание не найдено в списке фоновых заданий.
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновое задание %1 не найдено. Вероятно задание завершено аварийно, см. Журнал регистрации.'"),
				"""" + СокрЛП(Задание.Ключ) + """");
			
		Иначе
			
			// Состояние задания "ЗавершеноАварийно" или "Отменено".
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновое задание %1 %2:
				|%3'"),
				"""" + СокрЛП(Задание.Ключ) + """",
				?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено, НСтр("ru='отменено'"), НСтр("ru='завершено аварийно'")),
				?(Задание.ИнформацияОбОшибке = Неопределено,
					НСтр("ru='<Нет описания ошибки>'"),
					ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
			
		КонецЕсли;
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
			ТекстДляПротокола);
		
		ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			,
			НСтр("ru='При записи движений диагностированы ошибки'"),
			ТекстДляПротокола);
		
	КонецЕсли;
	
	ПараметрыРасчета.СтекЗаданийЗаписи.Удалить(НомерЗадания); // закончено
	
КонецФункции

// Получает фоновое задание по его номеру в очереди.
//
Функция ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания)
	
	Идентификатор = ПараметрыРасчета.СтекЗаданийЗаписи[НомерЗадания];
	Задание 	  = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	
	Если Задание = Неопределено Тогда
		
		СтрокаЗадания = ПараметрыРасчета.ТаблицаЗаданийЗаписи.Найти(Идентификатор, "ИдентификаторЗадания");
		
		Если СтрокаЗадания = Неопределено Тогда
			
			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ФЗ №? (%1)'"),
				СокрЛП(Идентификатор));
			
		Иначе
			
			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ФЗ №%1 - %2 (%3)'"),
				СокрЛП(ПараметрыРасчета.ТаблицаЗаданийЗаписи.Индекс(СтрокаЗадания) + 1),
				СтрокаЗадания.ИмяРегистра,
				СокрЛП(Идентификатор));
			
		КонецЕсли;
		
		Задание = Новый Структура("Состояние, Ключ", Неопределено, КлючЗадания);
		
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

Функция МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета)
	
	// Если запущено регламентное задание расчета предварительной себестоимости,
	// то многопоточная запись не требуется, т.к. рассчитываются движения только по регистру сведений СтоимостьТоваров.
	КоличествоЗаданий =
		?(ПараметрыРасчета.РегламентноеЗадание ИЛИ ОбщегоНазначения.ИнформационнаяБазаФайловая(),
			1,
			ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗЗаписи);
	
	Возврат КоличествоЗаданий;
	
КонецФункции



Функция ИмяСлужебногоДополнительногоСвойстваОбъекта() Экспорт
	Возврат "РасчетПартийИСебестоимости";
КонецФункции

#КонецОбласти

#Область ВосстановленияДвижений

// Перепроводит документы по нескольким регистрам накопления.
//
// Параметры:
//	ПараметрыРасчета - параметры расчета
//	Запрос - Запрос - запрос с текстом для формирования временной таблицы
//		ВТРегистраторыСНекорректнымиДвижениями с полями: Ссылка, ИмяРегистра, КодОшибки
//		Указанные в этой временной таблице документы из поля Ссылка
//		будут перепроведены по указанным регистрам накопления из поля ИмяРегистра.
//	РасшифровкаКодовОшибок - Соответствие - описание ошибок
//		Ключ - Число, Строка - код ошибки из поля КодОшибки временной таблицы ВТРегистраторыСНекорректнымиДвижениями
//		Значение - Строка - пользовательское описание ошибки
//	ПричинаПерепроведения - Строка - описание причины, вызвавшей перепроведение документов
//
Процедура ПерепровестиДокументыПоОтдельнымРегистрамНакопления(ПараметрыРасчета, Запрос, РасшифровкаКодовОшибок, ПричинаПерепроведения, ДополнительныеПоля = Неопределено) Экспорт
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СформироватьТаблицуМоментовВремени(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями", "Ссылка"); // создает ВТМоментыВремени
	
	НовыйТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ИмяРегистра 				 КАК ИмяРегистра,
	|	Т.Ссылка 	  				 КАК Ссылка,
	|	Т.Организация  				 КАК Организация,
	|	МоментыВремени.МоментВремени КАК МоментВремени
	|ИЗ
	|	ВТРегистраторыСНекорректнымиДвижениями КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
	|		ПО Т.Ссылка = МоментыВремени.Ссылка
	|ГДЕ
	|	НЕ (Т.Ссылка ССЫЛКА Документ.КорректировкаРегистров)
	|	ИЛИ (&ВключатьКорректировкиРегистров И (Т.Ссылка ССЫЛКА Документ.КорректировкаРегистров))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяРегистра,
	|	МоментВремени
	|
	|ИТОГИ ПО
	|	ИмяРегистра";
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	Запрос.Текст = НовыйТекстЗапроса;
	
	// Если будем перепроводить документы, то корректировки регистров надо исключить, т.к. они не перепроводятся.
	Запрос.УстановитьПараметр("ВключатьКорректировкиРегистров",
		ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Если НЕ РезультатЗапроса.Пустой() И НЕ ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения Тогда
		
		// Обнаружены некорректные движения.
		ВыборкаРегистры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРегистры.Следующий() Цикл
			
			ОписаниеРегистра = ПараметрыРасчета.Движения[ВыборкаРегистры.ИмяРегистра];
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
			
			ПротоколРасчетаПартийИСебестоимости.ДополнительнаяИнформация(
				ПараметрыРасчета,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Обнаружены некорректные движения по регистру накопления ""%1"".
						|	  Причина: %2'"),
					ОписаниеРегистра.ИмяРегистра,
					ПричинаПерепроведения));
			
			// Перепроведем документы с некорректными движениями по текущему регистру.
			ВыборкаРегистраторы = ВыборкаРегистры.Выбрать();
			
			ВосстановитьДвиженияДокументовПоРегиструНакопления(
				ПараметрыРасчета,
				ВыборкаРегистраторы,
				ОписаниеРегистра.ИмяРегистра);
				
			ПротоколРасчетаПартийИСебестоимости.ДополнительнаяИнформация(
				ПараметрыРасчета,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Перепроведено документов: %1'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеЗначения(ВыборкаРегистраторы.Количество())));
			
		КонецЦикла;
			
		УничтожитьВременныеТаблицы(Запрос, "ВТРегистраторыСНекорректнымиДвижениями");
		
		// Повторно проанализируем движения после перепроведения документов - ожидаем, что теперь ошибок быть не должно.
		// Корректировки регистров включаем в результат - об их ошибках тоже надо сообщить.
		Запрос.УстановитьПараметр("ВключатьКорректировкиРегистров", Истина);
		
		ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями");
		
		Запрос.Текст =
			ИсходныйТекстЗапроса + "
			|;
			|" + НовыйТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
		
		Если РезультатЗапроса.Пустой() Тогда // если остались ошибки - о них сообщим ниже, подробно
			ПротоколРасчетаПартийИСебестоимости.ДополнительнаяИнформация(
				ПараметрыРасчета,
				НСтр("ru='Все некорректные движения исправлены в результате перепроведения документов.'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РезультатЗапроса.Пустой()
	 ИЛИ РазмерВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями") > 0 Тогда
		
	 	// Остались некорректные записи, но выполнение расчета все равно продолжим.
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
			ПротоколРасчетаПартийИСебестоимости.СлужебныйСимвол_БезНумерации()
				+ НСтр("ru='После перепроведения остались документы с некорректными движениями:'"));
		
		// Выведем детальную информацию об ошибках в движениях документов.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	//%ДополнительныеПоля%
		|	Т.ИмяРегистра 				 КАК ИмяРегистра,
		|	Т.Ссылка 	  				 КАК Ссылка,
		|	Т.Организация  				 КАК Организация,
		|	МоментыВремени.МоментВремени КАК МоментВремени,
		|	Т.КодОшибки   				 КАК КодОшибки
		|ИЗ
		|	ВТРегистраторыСНекорректнымиДвижениями КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
		|		ПО Т.Ссылка = МоментыВремени.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодОшибки,
		|	МоментВремени,
		|	ИмяРегистра
		|
		|ИТОГИ ПО
		|	КодОшибки";
		
		Если ДополнительныеПоля <> Неопределено Тогда
			ТекстДополнительныхПолей = "";
			Для Каждого Поле Из ДополнительныеПоля Цикл
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + Поле.Ключ + ",";
			КонецЦикла;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДополнительныеПоля%", ТекстДополнительныхПолей);
		КонецЕсли;
		
		ВыборкаКодыОшибок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКодыОшибок.Следующий() Цикл
			
			ТекстОшибки = РасшифровкаКодовОшибок[ВыборкаКодыОшибок.КодОшибки];
			
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='№%1, описание отсутствует'"),
					ВыборкаКодыОшибок.КодОшибки);
			КонецЕсли;
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
				"#- " + НСтр("ru='ошибка'")  + " """ + ТекстОшибки + """:");
			
			Выборка = ВыборкаКодыОшибок.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстДополнительныхПолей = "";
				
				Если ДополнительныеПоля <> Неопределено Тогда
					ТекстДополнительныхПолей = "";
					Для Каждого Поле Из ДополнительныеПоля Цикл
						Если ЗначениеЗаполнено(Выборка[Поле.Ключ]) Тогда
							ТекстДополнительныхПолей = ТекстДополнительныхПолей + 
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", %1 ""%2""", Поле.Значение, Выборка[Поле.Ключ]);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1, организация ""%2"", регистр ""%3""%4'"),
					СокрЛП(Выборка.Ссылка),
					СокрЛП(Выборка.Организация),
					Выборка.ИмяРегистра,
					ТекстДополнительныхПолей);
				
				ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
					ТекстДляПротокола);
					
				ЗарегистрироватьПроблемуВыполненияРасчета(
					ПараметрыРасчета,
					Выборка.Организация,
					НСтр("ru='Не удалось исправить проблемы в движениях документов'"),
					ТекстОшибки + ":" + Символы.ПС + ТекстДляПротокола,
					Выборка.Ссылка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = ИсходныйТекстЗапроса;
	
	УничтожитьВременныеТаблицы(Запрос, "ВТРегистраторыСНекорректнымиДвижениями, ВТМоментыВремени");
	
КонецПроцедуры

// Перепроводит документы по одному регистру накопления.
//
// Параметры:
//	ВыборкаДокументов - ВыборкаИзРезультатаЗапроса - выборка запроса, обязательно должна содержать поле Ссылка
//	ИмяРегистраНакопления - Строка - имя регистра накопления, по которому надо перепровести документы
//
Процедура ВосстановитьДвиженияДокументовПоРегиструНакопления(ПараметрыРасчета, ВыборкаДокументов, ИмяРегистраНакопления) Экспорт
	
	Если ВыборкаДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");
	
	ОбработанныеДокументы = Новый Соответствие;
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистраНакопления].СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Регистратор = ВыборкаДокументов.Ссылка;
		
		Если ОбработанныеДокументы.Получить(Регистратор) <> Неопределено Тогда
			Продолжить; // у одного документа движения по нескольким организациям, повторно перепроводить его не нужно
		КонецЕсли;
		
		ДополнительныеСвойства = Новый Структура("ЭтоНовый, РежимЗаписи", Ложь, РежимЗаписиДокумента.Проведение);
		
		НачатьТранзакцию();
		
		Попытка
			
			ЭтоРегламентнаяОперация = Ложь;
			
			Если ЭтоРегламентнаяОперация
			 ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РаспределениеНДС") Тогда
				
				// Для этих документов частичное проведение по регистрам не поддерживается.
				ДокументОперации = Регистратор.ПолучитьОбъект();
				
				ДокументОперации.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
				
				ДокументОперации.Записать(РежимЗаписиДокумента.Проведение);
				
			ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаРегистров")
			 ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасчетСебестоимостиТоваров") Тогда
				// Для этих документов проведение не предусматривается.
			Иначе
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления." + ИмяРегистраНакопления + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				Блокировка.Заблокировать();
			
				ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(
					Регистратор,
					ДополнительныеСвойства,
					РежимПроведенияДокумента.Неоперативный);
					
				МетаданныеДокумента = ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента;
				
				Документы[МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(
					Регистратор,
					ДополнительныеСвойства,
					ИмяРегистраНакопления);
					
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Записывать = Истина;
				НаборЗаписей.Загрузить(ДополнительныеСвойства.ТаблицыДляДвижений["Таблица" + ИмяРегистраНакопления]);
				
				НаборЗаписей.Записать(Истина);
				
			КонецЕсли;
			
			ОбработанныеДокументы.Вставить(Регистратор, ВыборкаДокументов.Организация);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ ""%1"" по причине:
					|		%2'"),
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если НЕ ЭтоПараметрыРасчетаПУ22 Тогда
				ЗаписьЖурналаРегистрации(
					ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), 
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					Регистратор,
					ТекстСообщения);
			Иначе
				ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
					ТекстСообщения,
					ТекстСообщения);
			КонецЕсли;
			
			ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРасчета,
				ВыборкаДокументов.Организация,
				НСтр("ru='Не удалось исправить проблемы в движениях документов'"),
				ТекстСообщения,
				Регистратор);
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КэшированиеДанныхРегистров

// Инициализирует данные общего параметра расчета, описывающие указанный регистр.
//
Процедура ИнициализироватьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра) Экспорт
	
	Если ПараметрыРасчета.Движения.Свойство(МетаданныеРегистра.Имя) Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка инициализации расчета: регистр %1 уже инициализирован'"),
			МетаданныеРегистра.Имя);
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета,
			ТекстДляПротокола);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
		
	КонецЕсли;
	
	ОписаниеРегистра = СформироватьОписаниеРегистра(МетаданныеРегистра);
	
	// Создадим временную таблицу для кэширования всех новых движений регистра
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПараметрыРасчета,
		"ВТКэш" + ОписаниеРегистра.ИмяРегистра,
		ОписаниеРегистра.Таблица,
		ОписаниеРегистра.ПоляКэшаРегистра);
		
	// Добавим описание регистра в параметры расчета
	ПараметрыРасчета.Движения.Вставить(ОписаниеРегистра.ИмяРегистра, ОписаниеРегистра);
	
	// Создадим временную таблицу для кэширования записей основной таблицы регистра
	Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
	// Создадим временную таблицу для кэширования расчетных остатков
	Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Уничтожает данные из общего параметра расчета, описывающие указанный регистр.
//
Процедура УничтожитьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра) Экспорт
	
	ПараметрыРасчета.Движения.Удалить(МетаданныеРегистра.Имя);
	
КонецПроцедуры

// Формирует описание свойств и полей регистра, обслуживаемого механизмом расчета.
//
Функция СформироватьОписаниеРегистра(МетаданныеРегистра) Экспорт
	
	ЭтоРегистрСебестоимости = (МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("ИмяРегистра",          	  МетаданныеРегистра.Имя);
	ОписаниеРегистра.Вставить("ПолноеИмяРегистра",    	  МетаданныеРегистра.ПолноеИмя());
	ОписаниеРегистра.Вставить("ЭтоРегистрНакопления", 	  Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра));
	ОписаниеРегистра.Вставить("Наименование",    	  	  МетаданныеРегистра.Представление());
	
	ОписаниеРегистра.Вставить("ЕстьОрганизация", 		  МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено);
	ОписаниеРегистра.Вставить("ОрганизацияОбязательна",   ОписаниеРегистра.ЕстьОрганизация И МетаданныеРегистра.Измерения.Организация.ЗапрещатьНезаполненныеЗначения);
	ОписаниеРегистра.Вставить("ЕстьАналитикаПартнеров",   МетаданныеРегистра.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено);
	
	ОписаниеРегистра.Вставить("ОтборПоТипуЗаписи",		  ЭтоРегистрСебестоимости);
	ОписаниеРегистра.Вставить("ЕстьРасчетПартий",		  МетаданныеРегистра.Реквизиты.Найти("РасчетПартий") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетСебестоимости",  МетаданныеРегистра.Реквизиты.Найти("РасчетСебестоимости") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетНеЗавершен",	  МетаданныеРегистра.Реквизиты.Найти("РасчетНеЗавершен") <> Неопределено);
	
	ОписаниеРегистра.Вставить("ИспользоватьВТКэш", 		  Истина); // при расчете кэша оборотов/остатков использовать ВТКэш
	ОписаниеРегистра.Вставить("НадоОбновитьРасчетныйКэш", Ложь); // были сформированы движения, еще не учтенные в расчетных остатках/записях
	
	Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
		МенеджерРегистра = РегистрыНакопления[ОписаниеРегистра.ИмяРегистра];
	Иначе
		МенеджерРегистра = РегистрыСведений[ОписаниеРегистра.ИмяРегистра];
	КонецЕсли;
	
	ОписаниеРегистра.Вставить("МетаданныеРегистра", 	  МетаданныеРегистра);
	ОписаниеРегистра.Вставить("МенеджерРегистра", 		  МенеджерРегистра);
	ОписаниеРегистра.Вставить("ЕстьСвойствоВидДвижения",
		ОписаниеРегистра.ЭтоРегистрНакопления И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
	
	ОписаниеРегистра.Вставить("ЕстьИзмененныеДанные", 	  Ложь); // изменились ли данные регистра после расчета
	
	ОбязательныеПоля = Новый Структура;
	
#Область РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях

	// В конфигурации есть документы, которые могут делать движения по регистру (и/или)
	//	- в разных расчетных периодах (обязательно первичные + расчетные)
	//	- по разным организациям (любые виды движений)
	// Для таких документов при расчете надо сохранять не только первичные движения в расчетном периоде,
	// но и все (первичные + расчетные) движения по другим периодам и организациям.
	
	ОписаниеРегистра.Вставить("РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях", Новый Соответствие);
	
	ДокументыССохраняемымиДвижениями = ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(Истина, Истина, ОписаниеРегистра.ИмяРегистра);
	
	Для Каждого КлючИЗначение Из ДокументыССохраняемымиДвижениями Цикл
		Если КлючИЗначение.Ключ.Движения.Содержит(МетаданныеРегистра) Тогда
			ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
#КонецОбласти
	
#Область Таблица

	// Таблица для накапливания формируемых движений
	ОписаниеРегистра.Вставить(
		"Таблица", 
		МенеджерРегистра.СоздатьНаборЗаписей().ВыгрузитьКолонки());
		
	// Колонку "Регистратор" поместим на первое место
	КолонкаРегистратор = ОписаниеРегистра.Таблица.Колонки.Найти("Регистратор");
	ОписаниеРегистра.Таблица.Колонки.Сдвинуть(
		КолонкаРегистратор,
		-ОписаниеРегистра.Таблица.Колонки.Индекс(КолонкаРегистратор));
		
	// Для остаточных регистров накопления создадим служебную колонку СлужебноеВидДвиженияПриход.
	// В ней будем хранить булево представление вида движения (обход ошибки Платформы 30025997)
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ОписаниеРегистра.Таблица.Колонки.Добавить("СлужебноеВидДвиженияПриход",	Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
#КонецОбласти
	
#Область ПоляРегистра

	// Список всех полей регистра, за исключением "техногенных"
	// Перед именем каждого поля стоят символы "%1" - для автоподстановки имен таблиц в запросах
	ПоляОсновнойТаблицыРегистра = ""; // здесь поле "ВидДвижения"
	ПоляКэшаРегистра  			= ""; // здесь поле "СлужебноеВидДвиженияПриход"
	ИгнорируемыеПоля  			= Новый Структура("НомерСтроки, Активность, МоментВремени, ВидДвижения");
	
	Для Каждого Колонка Из ОписаниеРегистра.Таблица.Колонки Цикл
		Если Колонка.Имя = "СлужебноеВидДвиженияПриход" Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + "ВидДвижения";
			ПоляКэшаРегистра = ПоляКэшаРегистра
				+ ?(ПоляКэшаРегистра = "", "", ", ") + "%1" + "СлужебноеВидДвиженияПриход";
		ИначеЕсли НЕ ИгнорируемыеПоля.Свойство(Колонка.Имя) Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + Колонка.Имя;
			ПоляКэшаРегистра = ПоляКэшаРегистра
				+ ?(ПоляКэшаРегистра = "", "", ", ") + "%1" + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	ОписаниеРегистра.Вставить("ПоляКэшаРегистра", 			 ПоляКэшаРегистра);
	
#КонецОбласти

#Область ИзмеренияРегистра

	// Список всех измерений регистра
	// Перед именем каждого измерения стоят символы "%1" - для автоподстановки имен таблиц в запросах
	ИзмеренияРегистра = "";
	Для Каждого Мета Из МетаданныеРегистра.Измерения Цикл
		
		ИзмеренияРегистра = ИзмеренияРегистра + ?(ИзмеренияРегистра = "", "", ", ") + "%1" + Мета.Имя;
		
		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ИзмеренияРегистра", ИзмеренияРегистра);
	
#КонецОбласти

#Область РесурсыРегистра

	// Список всех ресурсов регистра
	// Перед именем каждого ресурса стоят символы "%1" - для автоподстановки имен таблиц в запросах
	РесурсыРегистра = "";
	РесурсыРегистраССуффиксом = "";
	Для Каждого Мета Из МетаданныеРегистра.Ресурсы Цикл
		
		РесурсыРегистра = РесурсыРегистра
			+ ?(РесурсыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		РесурсыРегистраССуффиксом = РесурсыРегистраССуффиксом
			+ ?(РесурсыРегистраССуффиксом = "", "", ", ") + "%1" + Мета.Имя + "%2 КАК " + Мета.Имя;
		
		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("РесурсыРегистра", 		   РесурсыРегистра);
	ОписаниеРегистра.Вставить("РесурсыРегистраССуффиксом", РесурсыРегистраССуффиксом);
	
#КонецОбласти

#Область РеквизитыРегистра

	// Список всех реквизитов регистра
	// Перед именем каждого реквизиты стоят символы "%1" - для автоподстановки имен таблиц в запросах
	РеквизитыРегистра = "";
	ЧисловыеРеквизитыРегистра = ""; // реквизиты регистра, хранящие суммовые показатели (аналогично ресурсам)
	
	Для Каждого Мета Из МетаданныеРегистра.Реквизиты Цикл
		
		РеквизитыРегистра = РеквизитыРегистра
			+ ?(РеквизитыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		
		Если ЭтоСуммируемыйРеквизитРегистра(Мета) Тогда // в некоторых регистрах НДС хранится в реквизитах
			ЧисловыеРеквизитыРегистра = ЧисловыеРеквизитыРегистра
				+ ?(ЧисловыеРеквизитыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		КонецЕсли;
		
		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("РеквизитыРегистра", 		   РеквизитыРегистра);
	ОписаниеРегистра.Вставить("ЧисловыеРеквизитыРегистра", ЧисловыеРеквизитыРегистра);
	
#КонецОбласти

#Область ПоляОтбораНепустыхДвижений

	ПоляОтбораНепустыхДвижений = РесурсыРегистра + ?(РесурсыРегистра = "", "", ", ") + ЧисловыеРеквизитыРегистра;

	ОписаниеРегистра.Вставить("ПоляОтбораНепустыхДвижений", ПоляОтбораНепустыхДвижений);
	
#КонецОбласти

#Область ОтборНекорректныхДвижений

	ОбязательныеПоля.Вставить("Регистратор", Неопределено);
	
	ТекстПроверки = "";
	
	Для Каждого КлючИЗначение Из ОбязательныеПоля Цикл
		
		ПустоеЗначение = КлючИЗначение.Значение;
		ТекстЗначение = "";
		
		Если ПустоеЗначение = Неопределено Тогда
			ТекстЗначение = "НЕОПРЕДЕЛЕНО";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Строка") Тогда
			ТекстЗначение = """""";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Число") Тогда
			ТекстЗначение = "0";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Дата") Тогда
			ТекстЗначение = "ДАТАВРЕМЯ(1,1,1,0,0,0)";
		Иначе
			Мета = Метаданные.НайтиПоТипу(ТипЗнч(ПустоеЗначение));
			Если Мета <> Неопределено Тогда
				ТекстЗначение = "ЗНАЧЕНИЕ(" + Мета.ПолноеИмя() + ".ПустаяСсылка)";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗначение) Тогда
			
			ТекстПроверки = ТекстПроверки + ?(ТекстПроверки = "", "", Символы.ПС + "	ИЛИ ")
				+ "Т." + КлючИЗначение.Ключ + " = " + ТекстЗначение;
				
			ОписаниеРегистра.Таблица.Индексы.Добавить(КлючИЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ОбязательныеПоля", 				ОбязательныеПоля);
	ОписаниеРегистра.Вставить("ТекстПроверкиОбязательныхПолей", ТекстПроверки);
	
#КонецОбласти

	Возврат ОписаниеРегистра;
	
КонецФункции


// Переносит распределенные партии в таблицу движений регистра.
//
Процедура КэшироватьРаспределенныеПартии(ПараметрыРасчета, ОкончаниеРаспределения = Истина) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
		// На этом этапе расчета не выполняется распределение партий
		Возврат;
	КонецЕсли;
	
	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	
	Если ОписаниеДвижений.РаспределениеНеТребуется Тогда // выполняется трансляция партий
		КэшироватьТранслируемыеПартии(ПараметрыРасчета, ОкончаниеРаспределения);
		Возврат;
	КонецЕсли;
	
	ИмяРегистра 		 = ОписаниеДвижений.ИмяРегистра;
	ИмяВременнойТаблицы  = ОписаниеДвижений.ИмяВременнойТаблицы;
	ПоляИндексирования   = ОписаниеДвижений.ПоляИндексирования;
	
	РасчетныеПартии 	 = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;
	НезаписываемыеДанные = ПараметрыРасчета.РаспределениеПартий.НезаписываемыеДанные;
	
	// Для целей тестирования используется таблица ВсеРасчетныеПартии, в которой накапливаются все данные из РасчетныеПартии.
	НакапливатьРасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.Свойство("ВсеРасчетныеПартии");
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		Для Каждого РасчетнаяПартия Из РасчетныеПартии Цикл
			
			Если НакапливатьРасчетныеПартии Тогда
				ЗаполнитьЗначенияСвойств(
					ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии.Добавить(),
					РасчетнаяПартия);
			КонецЕсли;
			
			Если РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим партию в движения и заполним его свойства
			Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(
				ПараметрыРасчета,
				ИмяРегистра,
				РасчетнаяПартия,
				,
				Новый Структура("РасчетНеЗавершен", НЕ РасчетнаяПартия.РасчетЗавершен));
			
		КонецЦикла;
		
		РасчетныеПартии.Очистить(); // закэшировали в движения
		
	ИначеЕсли ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		
		// Удалим незаписываемые строки
		ИндексСтроки = 0;
		
		Пока ИндексСтроки <= РасчетныеПартии.Количество() - 1 Цикл
			
			РасчетнаяПартия = РасчетныеПартии[ИндексСтроки];
			
			Если НакапливатьРасчетныеПартии Тогда
				ЗаполнитьЗначенияСвойств(
					ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии.Добавить(),
					РасчетнаяПартия);
			КонецЕсли;
			
			Если РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Тогда
				РасчетныеПартии.Удалить(РасчетнаяПартия);
			Иначе
				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Составим перечень значимых колонок таблицы расчетных партий
		ИменаЧисловыхКолонок	 = "";
		ИменаНеЧисловыхКолонок	 = "";
		
		ВременнаяТаблицаСуществует = ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы);
		
		Если ВременнаяТаблицаСуществует Тогда 
			ИсточникКолонок = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, 0).Колонки;
		Иначе
			ИсточникКолонок = РасчетныеПартии.Колонки;
		КонецЕсли;
		
		Для Каждого Колонка Из ИсточникКолонок Цикл
			
			Если НЕ ВременнаяТаблицаСуществует
			 И (Колонка.Имя = ИмяКолонкиДляНумерацииПоУмолчанию()
			 	ИЛИ Колонка.Имя = "Приоритет"
			 	ИЛИ Колонка.Имя = ОписаниеДвижений.БазисПрихода
			 	ИЛИ Колонка.Имя = ОписаниеДвижений.БазисРасхода) Тогда
				// Из расчетных партий не берем служебные поля, из временной таблицы берем все поля.
				Продолжить;
			ИначеЕсли ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				ИменаЧисловыхКолонок = ИменаЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			Иначе
				ИменаНеЧисловыхКолонок = ИменаНеЧисловыхКолонок + ?(ИменаНеЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			КонецЕсли;
				
		КонецЦикла;
		
		ИменаКолонок = ИменаНеЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", " + ИменаЧисловыхКолонок);
		
		// Поместим таблицу расчетных партий в указанную временную таблицу (произвольную - не являющуюся кэшем регистра)
		Если НЕ ВременнаяТаблицаСуществует Тогда
			
			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
				ПараметрыРасчета,
				ИмяВременнойТаблицы,
				РасчетныеПартии,
				ИменаКолонок,
				ПоляИндексирования);
			
		ИначеЕсли РасчетныеПартии.Количество() > 0 Тогда
			
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета, 
				ИмяВременнойТаблицы,
				РасчетныеПартии,
				"", // все колонки таблицы РасчетныеПартии
				ИменаКолонок,
				ИменаЧисловыхКолонок,
				ПоляИндексирования);
			
		КонецЕсли;
		
		РасчетныеПартии.Очистить(); // закэшировали во временную таблицу
		
	Иначе
		// С таблицей РасчетныеПартии ничего не делаем - она будет накапливать в себе записи до окончания распределения.
		// При этом для нее не действует ограничение на превышение максимального размера таблицы значений (КоличествоСтрокВТЗ).
	КонецЕсли;
	
	Если ОкончаниеРаспределения Тогда
		ПараметрыРасчета.Удалить("РаспределениеПартий");
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость сохранения указанной расчетной партии.
//
Функция РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные)
	
	Результат =
		(НЕ НезаписываемыеДанные.ЗаписыватьНезавершенные И НЕ РасчетнаяПартия.РасчетЗавершен)
		ИЛИ НезаписываемыеДанные.НезаписываемыеТипыЗаписей[РасчетнаяПартия.ТипЗаписи] <> Неопределено
	 	ИЛИ НезаписываемыеДанные.НезаписываемыеРазделы[РасчетнаяПартия.РазделУчета] <> Неопределено
	 	ИЛИ (ЗначениеЗаполнено(РасчетнаяПартия.Регистратор) // если регистратор не заполнен, то эта ситуация будет обработана при добавлении движения
	  		 И НезаписываемыеДанные.НезаписываемыеРегистраторы[РасчетнаяПартия.Регистратор.Метаданные().Имя] <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Определяет, является ли указанная колонка таблицы значений колонкой для суммирования или для группировки.
//
Функция ЭтоСуммируемаяКолонкаТаблицы(Колонка)
	
	СтруктураИсключения = Новый Структура("Приоритет, КодСтроки, КодСтрокиПродукция"); // числовые реквизиты, которые не нужно суммировать
	
	Возврат Колонка.ТипЗначения.СодержитТип(Тип("Число")) И НЕ СтруктураИсключения.Свойство(Колонка.Имя);
	
КонецФункции

// Определяет, является ли указанный реквизит регистра подходящим для суммирования или для группировки.
//
Функция ЭтоСуммируемыйРеквизитРегистра(МетаРеквизит)
	
	Если СтрНайти(МетаРеквизит.Имя, "НДС") = 0 Тогда
		Возврат Ложь; // суммируем только реквизиты с НДС
	КонецЕсли;
	
	ОписаниеПоля = Новый Структура("Имя, ТипЗначения", МетаРеквизит.Имя, МетаРеквизит.Тип);
	
	Возврат ЭтоСуммируемаяКолонкаТаблицы(ОписаниеПоля);
	
КонецФункции

// Переносит распределенные партии в таблицу движений регистра.
//
Процедура КэшироватьТранслируемыеПартии(ПараметрыРасчета, ОкончаниеРаспределения = Истина) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
		// На этом этапе расчета не выполняется распределение партий
		Возврат;
	КонецЕсли;
	
	ОписаниеДвижений 	 = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	ИмяРегистра 		 = ОписаниеДвижений.ИмяРегистра;
	ИмяВременнойТаблицы  = ОписаниеДвижений.ИмяВременнойТаблицы;
	ПоляИндексирования   = ОписаниеДвижений.ПоляИндексирования;
	ИмяТаблицыДанных  	 = "Данные";
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		Выборка = ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыДанных);
		
		Пока Выборка.Следующий() Цикл
			
			// Добавим партию в движения и заполним его свойства
			Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(
				ПараметрыРасчета,
				ИмяРегистра,
				Выборка);
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		
		// Таблица расчетных партий пустая, нужна только для формирования структуры временной таблицы-приемника.
		РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.СкопироватьКолонки();
		
		// Составим перечень значимых колонок таблицы расчетных партий
		ИменаЧисловыхКолонок	 = "";
		ИменаНеЧисловыхКолонок	 = "";
		
		ВременнаяТаблицаСуществует = ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы);
		
		Если ВременнаяТаблицаСуществует Тогда 
			ИсточникКолонок = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, 0).Колонки;
		Иначе
			ИсточникКолонок = РасчетныеПартии.Колонки;
		КонецЕсли;
		
		Для Каждого Колонка Из ИсточникКолонок Цикл
			
			Если ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				ИменаЧисловыхКолонок = ИменаЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			Иначе
				ИменаНеЧисловыхКолонок = ИменаНеЧисловыхКолонок + ?(ИменаНеЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			КонецЕсли;
				
		КонецЦикла;
		
		ИменаКолонок = ИменаНеЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", " + ИменаЧисловыхКолонок);
		
		// Поместим таблицу расчетных партий в указанную временную таблицу (произвольную - не являющуюся кэшем регистра)
		Если НЕ ВременнаяТаблицаСуществует Тогда
			
			// Создадим пустую временную таблицу требуемой структуры.
			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
				ПараметрыРасчета,
				ИмяВременнойТаблицы,
				РасчетныеПартии,
				ИменаКолонок,
				ПоляИндексирования);
			
		КонецЕсли;
		
		Если РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыДанных) > 0 Тогда
			
			ДобавитьНедостающиеКолонкиВременнойТаблицы(
				ПараметрыРасчета,
				ИмяТаблицыДанных,
				ИмяВременнойТаблицы,
				ПоляИндексирования);
			
			ОбъединитьВременныеТаблицы(
				ПараметрыРасчета,
				ИмяТаблицыДанных,
				ИмяВременнойТаблицы,
				ИменаКолонок,
				ИменаЧисловыхКолонок,
				ПоляИндексирования);
			
		КонецЕсли;
		
	Иначе
		// Не указана таблица-приемник, ничего не делаем.
	КонецЕсли;
	
	Если ОкончаниеРаспределения Тогда
		ПараметрыРасчета.Удалить("РаспределениеПартий");
	КонецЕсли;
	
КонецПроцедуры

// Переносит новые движения регистра из таблицы значений во временную таблицу.
// Процедуру необходимо вызывать в конце каждого этапа, на котором формируются какие-то движения,
// иначе следующий этап может не учесть движения предыдущего.
//
Процедура КэшироватьСформированныеДвижения(ПараметрыРасчета, ИмяРегистра = Неопределено, ОкончаниеЭтапа = Истина) Экспорт
	
	Если ОкончаниеЭтапа Тогда
		// При окончании этапа таблицу распределения партий надо перенести в таблицу движений регистра
		// или во временную таблицу, в зависимости от настроек распределения.
		КэшироватьРаспределенныеПартии(ПараметрыРасчета, ОкончаниеЭтапа);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ИмяРегистра <> Неопределено И НРег(КлючИЗначение.Ключ) <> НРег(ИмяРегистра) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда
			
			// Переместим сформированные движения из ОписаниеРегистра.Таблица во временную таблицу ВТКэш
			
			ЭтоРегистрСебестоимости = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
			ЭтоРегистрВыручки = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);
			
			// Заполним служебное поле РасчетСебестоимости
			Если ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(НЕ ПараметрыРасчета.ИдетРасчетПартий, "РасчетСебестоимости");
			КонецЕсли;
			
			// Заполним служебное поле РасчетПартий
			// (для этапа заполнения партий в себестоимости этот признак устанавливается в функции ДобавитьЗаписьВТаблицуДвижений)
			Если ОписаниеРегистра.ЕстьРасчетПартий
			 И НЕ (ЭтоРегистрСебестоимости И ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости)
			 И НЕ (ЭтоРегистрВыручки И ПараметрыРасчета.ЗаполняютсяПартииВВыручке) Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(ПараметрыРасчета.ИдетРасчетПартий, "РасчетПартий");
			КонецЕсли;
			
			Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
				
				Для Каждого Запись Из ОписаниеРегистра.Таблица Цикл
					
					// Дозаполним поле СлужебноеВидДвиженияПриход
					Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
						Запись.СлужебноеВидДвиженияПриход = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Проверим заполненность обязательных полей.
			НекорректныеРегистраторы = Новый Соответствие; 
			
			Для Каждого ОписаниеПоля Из ОписаниеРегистра.ОбязательныеПоля Цикл
				
				СтруктураПоиска    = Новый Структура(ОписаниеПоля.Ключ, ОписаниеПоля.Значение);
				НекорректныеСтроки = ОписаниеРегистра.Таблица.НайтиСтроки(СтруктураПоиска);
					
				Для Каждого ДанныеДвижения Из НекорректныеСтроки Цикл
					
					// Выведем информацию об ошибке в сформированных движениях.
					// Информацию о проблеме с регистратором выводится в процедурах ДобавитьЗаписьВТаблицуДвижений.
					Если НекорректныеРегистраторы.Получить(ДанныеДвижения.Регистратор) = Неопределено
					 И ОписаниеПоля.Ключ <> "Регистратор" Тогда
						
						НекорректныеРегистраторы.Вставить(ДанныеДвижения.Регистратор, Истина);
						
						Если ОписаниеРегистра.ЕстьОрганизация Тогда
							ОрганизацияСПроблемой = ДанныеДвижения.Организация;
						ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
							ОрганизацияСПроблемой = ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров.Получить(ДанныеДвижения.АналитикаУчетаПоПартнерам);
						Иначе
							ОрганизацияСПроблемой = Неопределено;
						КонецЕсли;
						
						ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'По документу ""%1"" сформированы движения  по регистру ""%2"" с незаполненными обязательными полями'"),
							СокрЛП(ДанныеДвижения.Регистратор),
							ОписаниеРегистра.ИмяРегистра);
						
						ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
							ПараметрыРасчета,
							Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам,
							ТекстДляПротокола);
						
						ЗарегистрироватьПроблемуВыполненияРасчета(
							ПараметрыРасчета,
							ОрганизацияСПроблемой,
							НСтр("ru='При формировании движений диагностированы ошибки'"),
							ТекстДляПротокола,
							ДанныеДвижения.Регистратор);
							
					КонецЕсли;
					
					ОписаниеРегистра.Таблица.Удалить(ДанныеДвижения);
					
				КонецЦикла;
					
			КонецЦикла;
			
			Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда
				
				// Добавим информацию в протокол 
				ПротоколРасчетаПартийИСебестоимости.КэшированиеСформированныхДвижений(
					ПараметрыРасчета,
					КлючИЗначение.Ключ,
					ОписаниеРегистра.Таблица.Количество());
				
				// Добавим данные из таблицы во временную таблицу
				ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
					ПараметрыРасчета, 
					"ВТКэш" + КлючИЗначение.Ключ,
					ОписаниеРегистра.Таблица,
					ОписаниеРегистра.ПоляКэшаРегистра,
					ОписаниеРегистра.ПоляКэшаРегистра,
					ОписаниеРегистра.ПоляОтбораНепустыхДвижений);
					
				// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу
				ОписаниеРегистра.Таблица.Очистить();
				
				// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты
				ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОкончаниеЭтапа И ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда
			
			// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).
			
			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(КлючИЗначение.Ключ)  // нужна таблица записей 
			 И ПараметрыРасчета.РегистрыСРасчетнымиОборотами[КлючИЗначение.Ключ] Тогда       // нужно автообновление таблицы записей
				ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
			 И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда      // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает результаты прошлого расчета из ИБ во временную таблицу.
//
Процедура КэшироватьРезультатыПрошлогоРасчета(ПараметрыРасчета, ИмяРегистра,
			ПоРасчетСебестоимости = Неопределено, ПоРасчетПартий = Неопределено, ПоНепересчитываемыйТипЗаписи = Неопределено) Экспорт
	
	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэш" + ОписаниеРегистра.ИмяРегистра,
		НСтр("ru='результаты прошлого расчета'"));
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТКэш%ИмяРегистра
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	%ПоляОсновнойТаблицыРегистра
	|ПОМЕСТИТЬ ВТКэш%ИмяРегистра
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	%ОтборПоОрганизации
	|	%ОтборПоСлужебнымРеквизитам
	|";
	
	ПоляОсновнойТаблицыРегистра = СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т.");
	
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ПоляОсновнойТаблицыРегистра, "ВидДвижения");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, ПоРасчетСебестоимости, ПоРасчетПартий, ПоНепересчитываемыйТипЗаписи);
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует кэш расчетных движений регистра с учетом необходимости пересчета части ресурсов.
//
Процедура КэшироватьРезультатыПересчетаЧастиРесурсов(ПараметрыРасчета, ИмяРегистра,	РесурсыРасчетаПартий, РесурсыРасчетаСебестоимости) Экспорт
	
	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
	
	УчаствуетВРасчетеПартий = (ПартионныйУчет22.ИсходящиеДанныеМеханизма().Получить(ОписаниеРегистра.МетаданныеРегистра) <> Неопределено);
	УчаствуетВРасчетеСебестоимости = (РасчетСебестоимости.ИсходящиеДанныеМеханизма().Получить(ОписаниеРегистра.МетаданныеРегистра) <> Неопределено);
	
	Если (НЕ УчаствуетВРасчетеПартий ИЛИ РесурсыРасчетаПартий = Неопределено)
	 И (НЕ УчаствуетВРасчетеСебестоимости ИЛИ РесурсыРасчетаСебестоимости = Неопределено) Тогда
		
		Возврат; // этот регистр не пересчитывается
		
	ИначеЕсли НЕ ЗначениеЗаполнено(РесурсыРасчетаПартий) И НЕ ЗначениеЗаполнено(РесурсыРасчетаСебестоимости) Тогда
		
		Возврат; // этот регистр пересчитывается полностью, все данные уже в ВТКэш
		
	КонецЕсли;
		
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэш" + ОписаниеРегистра.ИмяРегистра,
		НСтр("ru='данные для записи частичных изменений'"));
	
	#Область ТекстыШаблонов
	
	ПоляОсновнойТаблицыРегистра = СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т.");
	ПоляКэшаРегистра = СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "Т.");
	
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ПоляОсновнойТаблицыРегистра, "ВидДвижения");
	
	ПоляОсновнойТаблицыРегистраЧастичноПартии = ПоляОсновнойТаблицыРегистра + ",";
	ПоляКэшаРегистраЧастичноПартии = ПоляКэшаРегистра + ",";
	
	ПоляОсновнойТаблицыРегистраЧастичноСебестоимость = ПоляОсновнойТаблицыРегистра + ",";
	ПоляКэшаРегистраЧастичноСебестоимость = ПоляКэшаРегистра + ",";
	
	Для Каждого МетаРесурс Из ОписаниеРегистра.МетаданныеРегистра.Ресурсы Цикл
		
		Если УчаствуетВРасчетеПартий И РесурсыРасчетаПартий <> Неопределено Тогда
			
			Если РесурсыРасчетаПартий.Свойство(МетаРесурс.Имя) Тогда
				ПоляОсновнойТаблицыРегистраЧастичноПартии = СтрЗаменить(
					ПоляОсновнойТаблицыРегистраЧастичноПартии,
					"Т." + МетаРесурс.Имя + ",",
					"0 КАК " + МетаРесурс.Имя + ",");
			Иначе
				ПоляКэшаРегистраЧастичноПартии = СтрЗаменить(
					ПоляКэшаРегистраЧастичноПартии,
					"Т." + МетаРесурс.Имя + ",",
					"0 КАК " + МетаРесурс.Имя + ",");
			КонецЕсли;
			
		КонецЕсли;
		
		Если УчаствуетВРасчетеСебестоимости И РесурсыРасчетаСебестоимости <> Неопределено Тогда
			
			Если РесурсыРасчетаСебестоимости.Свойство(МетаРесурс.Имя) Тогда
				ПоляОсновнойТаблицыРегистраЧастичноСебестоимость = СтрЗаменить(
					ПоляОсновнойТаблицыРегистраЧастичноСебестоимость,
					"Т." + МетаРесурс.Имя + ",",
					"0 КАК " + МетаРесурс.Имя + ",");
			Иначе
				ПоляКэшаРегистраЧастичноСебестоимость = СтрЗаменить(
					ПоляКэшаРегистраЧастичноСебестоимость,
					"Т." + МетаРесурс.Имя + ",",
					"0 КАК " + МетаРесурс.Имя + ",");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляОсновнойТаблицыРегистраЧастичноПартии = Лев(ПоляОсновнойТаблицыРегистраЧастичноПартии, СтрДлина(ПоляОсновнойТаблицыРегистраЧастичноПартии) - 1);
	ПоляКэшаРегистраЧастичноПартии = Лев(ПоляКэшаРегистраЧастичноПартии, СтрДлина(ПоляКэшаРегистраЧастичноПартии) - 1);
	
	ПоляОсновнойТаблицыРегистраЧастичноСебестоимость = Лев(ПоляОсновнойТаблицыРегистраЧастичноСебестоимость, СтрДлина(ПоляОсновнойТаблицыРегистраЧастичноСебестоимость) - 1);
	ПоляКэшаРегистраЧастичноСебестоимость = Лев(ПоляКэшаРегистраЧастичноСебестоимость, СтрДлина(ПоляКэшаРегистраЧастичноСебестоимость) - 1);
		
	ШаблонЗапросаИзИБ =
	"ВЫБРАТЬ
	|	%ПоляОсновнойТаблицыРегистра
	|//ПОМЕСТИТЬ ВТНовыйКэшРегистра
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	%ОтборПоОрганизации
	|	%ОтборПоСлужебнымРеквизитам";
	
	ШаблонЗапросаИзКэша =
	"ВЫБРАТЬ
	|	%ПоляКэшаРегистра
	|//ПОМЕСТИТЬ ВТНовыйКэшРегистра
	|ИЗ
	|	ВТКэш%ИмяРегистра КАК Т
	|ГДЕ
	|	ИСТИНА
	|	%ОтборПоСлужебнымРеквизитам";
	
	ШаблонЗапросаСуммировать =
	"ВЫБРАТЬ
	|	%ПоляОсновнойТаблицыРегистраЧастично
	|//ПОМЕСТИТЬ ВТНовыйКэшРегистра
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	%ОтборПоОрганизации
	|	%ОтборПоСлужебнымРеквизитам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%ПоляКэшаРегистраЧастично
	|ИЗ
	|	ВТКэш%ИмяРегистра КАК Т
	|ГДЕ
	|	ИСТИНА
	|	%ОтборПоСлужебнымРеквизитам";
	
	ШаблонОбъединения = "
	|
	| ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	#КонецОбласти
	
	#Область ТекстЗапросаПартий
	
	Если НЕ УчаствуетВРасчетеПартий Тогда
		// Ничего не делаем
		ТекстЗапросаПартий = "";
	ИначеЕсли РесурсыРасчетаПартий = Неопределено Тогда
		// Не пересчитывается - взять из ИБ
		ТекстЗапросаПартий = ШаблонЗапросаИзИБ;
	ИначеЕсли НЕ ЗначениеЗаполнено(РесурсыРасчетаПартий) Тогда
		// Пересчитывается целиком - взять все из ВТКэш
		ТекстЗапросаПартий = ШаблонЗапросаИзКэша;
	Иначе
		// Из ВТКэш с 0 в непересчитываемых + из ИБ с 0 в пересчитываемых
		ТекстЗапросаПартий = ШаблонЗапросаСуммировать;
	КонецЕсли;
	
	ТекстЗапросаПартий = СтрЗаменить(ТекстЗапросаПартий, "%ПоляОсновнойТаблицыРегистраЧастично", ПоляОсновнойТаблицыРегистраЧастичноПартии);
	ТекстЗапросаПартий = СтрЗаменить(ТекстЗапросаПартий, "%ПоляКэшаРегистраЧастично", ПоляКэшаРегистраЧастичноПартии);
	
	Если ОписаниеРегистра.ОтборПоТипуЗаписи Тогда
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, ТекстЗапросаПартий, Истина, Истина, Ложь, , Истина);
	Иначе
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, ТекстЗапросаПартий, Истина, Истина, , Истина);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаСебестоимости
	
	Если НЕ УчаствуетВРасчетеСебестоимости Тогда
		// Ничего не делаем
		ТекстЗапросаСебестоимости = "";
	ИначеЕсли РесурсыРасчетаСебестоимости = Неопределено Тогда
		// Не пересчитывается - взять из ИБ
		ТекстЗапросаСебестоимости = ШаблонЗапросаИзИБ;
	ИначеЕсли НЕ ЗначениеЗаполнено(РесурсыРасчетаСебестоимости) Тогда
		// Пересчитывается целиком - взять все из ВТКэш
		ТекстЗапросаСебестоимости = ШаблонЗапросаИзКэша;
	Иначе
		// Из ВТКэш с 0 в непересчитываемых + из ИБ с 0 в пересчитываемых
		ТекстЗапросаСебестоимости = ШаблонЗапросаСуммировать;
	КонецЕсли;
	
	ТекстЗапросаСебестоимости = СтрЗаменить(ТекстЗапросаСебестоимости, "%ПоляОсновнойТаблицыРегистраЧастично", ПоляОсновнойТаблицыРегистраЧастичноСебестоимость);
	ТекстЗапросаСебестоимости = СтрЗаменить(ТекстЗапросаСебестоимости, "%ПоляКэшаРегистраЧастично", ПоляКэшаРегистраЧастичноСебестоимость);
	
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, ТекстЗапросаСебестоимости, Истина, Истина, Истина);
	
	#КонецОбласти
	
	#Область ТекстЗапросаИтоговый
	
	ТекстЗапроса = ""
	+ СтрЗаменить(ТекстЗапросаПартий, "//", "")
	+ ?(ЗначениеЗаполнено(ТекстЗапросаПартий) И ЗначениеЗаполнено(ТекстЗапросаСебестоимости), ШаблонОбъединения, "")
	+ ?(ЗначениеЗаполнено(ТекстЗапросаПартий), ТекстЗапросаСебестоимости, СтрЗаменить(ТекстЗапросаСебестоимости, "//", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляКэшаРегистра", ПоляКэшаРегистра);
	
	#КонецОбласти
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить(); // создаем ВТНовыйКэшРегистра
	
	ОчиститьВременнуюТаблицу(ПараметрыРасчета, "ВТКэш" + ИмяРегистра);
	
	ОбъединитьВременныеТаблицы(
		ПараметрыРасчета,
		"ВТНовыйКэшРегистра",
		"ВТКэш" + ИмяРегистра,
		ОписаниеРегистра.ПоляКэшаРегистра,
		ОписаниеРегистра.ПоляОтбораНепустыхДвижений); // переносим данные в ВТКэш с группировкой строк
		
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТНовыйКэшРегистра");
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Для регистров, к основным таблицам которых есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшРасчетныеОбороты<ИмяРегистра> - в ней будет расчетные обороты регистра
// Т.о. на любом этапе расчета будет готовая таблица записей регистра за период,
// которую надо использовать вместо основной таблицы РегистрНакопления.<ИмяРегистра>
// и вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Обороты(<период расчета>)
Процедура ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь) Экспорт
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшРасчетныеОбороты" + ОписаниеРегистра.ИмяРегистра);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// Если не нужно использовать временную таблицу ВТКэш, то все данные будут взяты из ИБ.
	// В противном случае из ИБ будут взяты только первичные движения и просуммированы с расчетными движениями из ВТКэш.
	Запрос.УстановитьПараметр("ИспользоватьКэш", ОписаниеРегистра.ИспользоватьВТКэш И НЕ ПараметрыРасчета.Отладка.РасчетОдногоЭтапа);
	
	Если НЕ Инициализация Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	%ПоляОсновнойТаблицыРегистра
	|ПОМЕСТИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Активность
	|	%ОтборПоОрганизации
	|	И (%ОтборСлужебныеЗаписиКонвертацииДанных
	|	   %ОтборПоСлужебнымРеквизитам
	|		  ИЛИ НЕ &ИспользоватьКэш)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%ПоляКэшаРегистра
	|ИЗ
	|	ВТКэш%ИмяРегистра КАК Т
	|ГДЕ
	|	&ИспользоватьКэш
	|	%ОтборПоОрганизации
	|";
	
	ПоляКэшаРегистра 			= СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, 			"%1", "Т.");
	ПоляОсновнойТаблицыРегистра = СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т.");
	
	// Для расчета себестоимости по средней (без учета партий) очистим партионные поля расчетного кэша
	Если НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра) Тогда
		
		ЗаменяемыеФрагменты = Новый Структура;
		ЗаменяемыеФрагменты.Вставить("Партия",					  "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("АналитикаУчетаПартий",	  "ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
		ЗаменяемыеФрагменты.Вставить("АналитикаФинансовогоУчета", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("ВидДеятельностиНДС",		  "ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)");
		
		ПоляКэшаРегистра 			= ПоляКэшаРегистра + ",";
		ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра + ",";
		
		Для Каждого КлючИЗначение Из ЗаменяемыеФрагменты Цикл
			
			ПоляКэшаРегистра = СтрЗаменить(ПоляКэшаРегистра,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
			ПоляКэшаРегистра = СтрЗаменить(ПоляКэшаРегистра,
				"Т.Кор" + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т.Кор" + КлючИЗначение.Ключ + " КОНЕЦ КАК Кор" + КлючИЗначение.Ключ + ",");
			
			ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
			ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра,
				"Т.Кор" + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т.Кор" + КлючИЗначение.Ключ + " КОНЕЦ КАК Кор" + КлючИЗначение.Ключ + ",");
			
		КонецЦикла;
		
		ПоляКэшаРегистра 			= Лев(ПоляКэшаРегистра, СтрДлина(ПоляКэшаРегистра) - 1);
		ПоляОсновнойТаблицыРегистра	= Лев(ПоляОсновнойТаблицыРегистра, СтрДлина(ПоляОсновнойТаблицыРегистра) - 1);
		
	КонецЕсли;
	
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ПоляОсновнойТаблицыРегистра, "ВидДвижения");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра", 			 ПоляКэшаРегистра);
	
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя
	 ИЛИ ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.Имя Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборСлужебныеЗаписиКонвертацииДанных", "(НЕ Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборСлужебныеЗаписиКонвертацииДанных", "ИСТИНА");
	КонецЕсли;
	
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя Тогда
		Если ПараметрыРасчета.ЗапущенРасчетПартий
		 И (ПараметрыРасчета.ЗаполняютсяПартииВВыручке ИЛИ ПараметрыРасчета.ЗаполненыПартииВВыручке) Тогда
			// Данные из ИБ не выбираются - они все находятся в кэше
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
		КонецЕсли;
		// Отбор - первичные движения
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);
	ИначеЕсли ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости ИЛИ ПараметрыРасчета.ЗаполненыПартииВСебестоимости
	 ИЛИ ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		// Отбор - первичные движения (с непересчитываемыми типами записи)
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
	Иначе
		// Отбор - первичные движения (все, в т.ч. с пересчитываемыми типами записи)
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Для регистров, к остаткам которых на конец периода есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшРасчетныеОстатки<ИмяРегистра> - в ней будет расчетная сумма конечных остатков регистра
// Т.о. на любом этапе расчета будет готовая таблица расчетных остатков,
// которую надо использовать вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Остатки(<конец периода>)
Процедура ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь) Экспорт
	
	Если НЕ ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		// На постоянной основе ВТКэшРасчетныеОбороты не нужна, но для расчета остатков надо ее сформировать, а потом уничтожить.
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшРасчетныеОстатки" + ОписаниеРегистра.ИмяРегистра);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если НЕ Инициализация Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ВТКэшРасчетныеОстатки%ИмяРегистра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	%ИзмеренияРегистра,
	|	%РесурсыРегистраСумма
	|ПОМЕСТИТЬ ВТКэшРасчетныеОстатки%ИмяРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		%ИзмеренияРегистраПодзапрос,
	|		%РесурсыРегистраОстатки
	|	ИЗ
	|		%ПолноеИмяРегистра.Остатки(&ГраницаНачалоПериода, %ОтборПоОрганизацииОстатки) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		%ИзмеренияРегистраПодзапрос,
	|		%РесурсыРегистраОбороты
	|	ИЗ
	|		ВТКэшРасчетныеОбороты%ИмяРегистра КАК Т
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	%ИзмеренияРегистра";
	
	Если НЕ ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
		|";
	КонецЕсли;
	
	ИзмеренияРегистра = СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
	ИзмеренияРегистраПодзапрос = ИзмеренияРегистра;
	
	РесурсыРегистраСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"СУММА(Т.",
		")");
	РесурсыРегистраОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"Т.",
		"Остаток");
	РесурсыРегистраОбороты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т.",
		"");
	
	// Для расчета себестоимости по средней (без учета партий) очистим партионные поля расчетного кэша
	Если НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра) Тогда
		
		ЗаменяемыеФрагменты = Новый Структура;
		ЗаменяемыеФрагменты.Вставить("Партия",					  "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("АналитикаУчетаПартий",	  "ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
		ЗаменяемыеФрагменты.Вставить("АналитикаФинансовогоУчета", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("ВидДеятельностиНДС",		  "ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)");
		
		ИзмеренияРегистраПодзапрос = ИзмеренияРегистраПодзапрос + ",";
		
		Для Каждого КлючИЗначение Из ЗаменяемыеФрагменты Цикл
			
			ИзмеренияРегистраПодзапрос = СтрЗаменить(ИзмеренияРегистраПодзапрос,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
		КонецЦикла;
		
		ИзмеренияРегистраПодзапрос = Лев(ИзмеренияРегистраПодзапрос, СтрДлина(ИзмеренияРегистраПодзапрос) - 1);
		
	КонецЕсли;
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизацииОстатки = "Организация В (&МассивОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
		ОтборПоОрганизацииОстатки = "АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
	Иначе
		ОтборПоОрганизацииОстатки = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистраПодзапрос", ИзмеренияРегистраПодзапрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистра", 			ИзмеренияРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраСумма", 		РесурсыРегистраСумма);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОстатки", 	РесурсыРегистраОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОбороты", 	РесурсыРегистраОбороты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизацииОстатки", 	ОтборПоОрганизацииОстатки);
	
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос);
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Выполняет (по необходимости) обновление расчетных оборотов и остатков по всем регистрам.
//
Процедура ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета, ТолькоТребующиеОбновления = Ложь) Экспорт
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ ОписаниеРегистра.НадоОбновитьРасчетныйКэш И ТолькоТребующиеОбновления Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновитьРасчетныеКэшиРегистра(ПараметрыРасчета, ОписаниеРегистра.ИмяРегистра);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет (безусловно) обновление расчетных оборотов и остатков указанного регистра.
//
Процедура ОбновитьРасчетныеКэшиРегистра(ПараметрыРасчета, ИмяРегистра) Экспорт
	
	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
	
	Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
	КонецЕсли;
	
	Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
	КонецЕсли;
	
	ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь;
	
КонецПроцедуры

// Определяет необходимость формирования расчетных кэшей с пустыми полями партий (для расчета себестоимости по средней).
//
Функция НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра)
	
	Возврат ПараметрыРасчета.ПартионныйУчетВерсии22 И НЕ ПараметрыРасчета.ИдетРасчетПартий И ПараметрыРасчета.РегламентноеЗадание
			И (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя
				ИЛИ ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);
	
КонецФункции

#КонецОбласти

#Область ТекущиеИтогиРегистров

Функция СостояниеИтоговРегистров() Экспорт
	
	СостояниеИтоговРегистров = Новый Структура;
	
	ИсходящиеДанные = Новый Соответствие;
	ПартионныйУчет22.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	РасчетСебестоимости.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	
	Для Каждого КлючИЗначение Из ИсходящиеДанные Цикл
		
		МетаданныеРегистра = КлючИЗначение.Ключ;
		
		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра)
		 И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			
			МенеджерРегистра  = РегистрыНакопления[МетаданныеРегистра.Имя];
			СостояниеРегистра = Новый Структура;
			
			СостояниеРегистра.Вставить("Использование", 	 МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов());
			СостояниеРегистра.Вставить("МинимальныйПериод",  МенеджерРегистра.ПолучитьМинимальныйПериодРассчитанныхИтогов());
			СостояниеРегистра.Вставить("МаксимальныйПериод", МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов());
			
			СостояниеИтоговРегистров.Вставить(МетаданныеРегистра.Имя, СостояниеРегистра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СостояниеИтоговРегистров;
	
КонецФункции

Процедура ВернутьСостояниеИтоговРегистров(СостояниеИтоговДоРасчета) Экспорт
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(СостояниеИтоговДоРасчета);

	ФоновыеЗадания.Выполнить(
		"УниверсальныеМеханизмыПартийИСебестоимости.ВернутьСостояниеИтоговРегистровФоновымЗаданием",
		ПараметрыОбработчикаЗадания,
		,
		НСтр("ru='Расчет партий и себестоимости, включение итогов.'"));
	
КонецПроцедуры

Процедура ВернутьСостояниеИтоговРегистровФоновымЗаданием(СостояниеИтоговДоРасчета) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из СостояниеИтоговДоРасчета Цикл
		
		МенеджерРегистра   = РегистрыНакопления[КлючИЗначение.Ключ];
		СостояниеРегистра  = КлючИЗначение.Значение;
		
		МинимальныйПериод  = МенеджерРегистра.ПолучитьМинимальныйПериодРассчитанныхИтогов();
		МаксимальныйПериод = МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов();
		
		Если СостояниеРегистра.МинимальныйПериод <> МинимальныйПериод
		 ИЛИ СостояниеРегистра.МаксимальныйПериод <> МаксимальныйПериод Тогда
			
			МенеджерРегистра.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(
				СостояниеРегистра.МинимальныйПериод,
				СостояниеРегистра.МаксимальныйПериод);
			
		КонецЕсли;
		
		Если СостояниеРегистра.Использование И НЕ МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов() Тогда
			
			МенеджерРегистра.УстановитьИспользованиеТекущихИтогов(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВыключитьИтогиРегистра(ПараметрыРасчета, МенеджерРегистра)
	
	ПериодРасчета      = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
	МинимальныйПериод  = МенеджерРегистра.ПолучитьМинимальныйПериодРассчитанныхИтогов();
	МаксимальныйПериод = МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов();
	
	Если МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов() Тогда
		МенеджерРегистра.УстановитьИспользованиеТекущихИтогов(Ложь); // отключим итоги
	КонецЕсли;
	
	Если ПериодРасчета <= НачалоМесяца(МаксимальныйПериод) Тогда
		
		МенеджерРегистра.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(
			Мин(МинимальныйПериод, НачалоМесяца(ПериодРасчета - 1)),
			ПериодРасчета - 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Запросы

// Устанавливает общие параметры запроса из параметров расчета.
// Следует использовать для идентичности имен и значений параметров во всех запросах.
//
Процедура ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета, ИспользоватьОбщийМенеджерВТ = Истина) Экспорт
	
	РасчетныйПериод = ПараметрыРасчета.РасчетныйПериод;
	
	// Общие параметры
	Запрос.УстановитьПараметр("НачалоПериода",				  				РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",				  				РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода",	  				РасчетныйПериод.КонецПредыдущегоПериода);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода",	  				РасчетныйПериод.НачалоСледующегоПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",		  				РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПериода",		  				РасчетныйПериод.ГраницаКонецПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода",				РасчетныйПериод.ГраницаКонецПредыдущегоПериода);
	
	Запрос.УстановитьПараметр("РегламентноеЗадание",   						ПараметрыРасчета.РегламентноеЗадание);
	
	Запрос.УстановитьПараметр("МассивОрганизаций",			  				ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящая", 				ПараметрыРасчета.ОрганизацииСФИФОСкользящая);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящаяВПрошломПериоде", 	ПараметрыРасчета.ОрганизацииСФИФОСкользящаяВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииНаУСН", 							ПараметрыРасчета.ОрганизацииНаУСН);
	
	// Типы записей регистра "Себестоимость товаров"
	Запрос.УстановитьПараметр("НепересчитываемыеТипыЗаписей", 				ПараметрыРасчета.НепересчитываемыеТипыЗаписей);
	Запрос.УстановитьПараметр("ТипыЗаписейПервичныхПартий",   				ПараметрыРасчета.ТипыЗаписейПервичныхПартий);
	Запрос.УстановитьПараметр("ТипыЗаписейКонвертацииДанных", 				ПараметрыРасчета.ТипыЗаписейКонвертацииДанных);
	
	// Значения функциональных опций
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ФО Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Признак ведения упр. учета (расширенная проверка ФО ВестиУправленческийУчетОрганизаций).
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", ПараметрыРасчета.УправленческийУчетОрганизаций);
	
	// Переопределим значение ФО ПартионныйУчетВерсии22 - для проверки версии механизма партионного учета
	// надо учитывать еще значения опций ИспользоватьПартионныйУчет и ДатаПереходаНаПартионныйУчетВерсии22.
	// "Правильное" значение ПартионныйУчетВерсии22 хранится в одноименном параметре расчета.
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22", ПараметрыРасчета.ПартионныйУчетВерсии22);
	
	Запрос.УстановитьПараметр("ИспользовалсяПартионныйУчетДоПереходаНаВерсию22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата(1,1,1)));
		
	// Менеджер временных таблиц
	Если ИспользоватьОбщийМенеджерВТ Тогда
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // используется в редких случаях
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ТекстПоля, ПсевдонимПоля = "СлужебноеВидДвиженияПриход")
	
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ТекстПоля = СтрЗаменить(ТекстПоля,
			"Т." + ПсевдонимПоля,
			"ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СлужебноеВидДвиженияПриход");
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоля, ПсевдонимПоля = "СлужебноеВидДвиженияПриход")
	
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ТекстПоля = СтрЗаменить(ТекстПоля,
			"Т." + ПсевдонимПоля,
			"ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КОНЕЦ КАК ВидДвижения");
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, ЗапросИлиТекст,
		ПоОрганизации = Неопределено, ПоСлужебнымПоИ = Неопределено,
		ПоРасчетСебестоимости = Неопределено, ПоРасчетПартий = Неопределено, ПоНепересчитываемыйТипЗаписи = Неопределено)
		
	ТекстЗапроса = ?(ТипЗнч(ЗапросИлиТекст) = Тип("Строка"), ЗапросИлиТекст, ЗапросИлиТекст.Текст);
	
	// Имя регистра
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРегистра",	   ОписаниеРегистра.ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолноеИмяРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
	
	// Отбор по организации
	Если ПоОрганизации <> Неопределено Тогда
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "И %НЕ Т.Организация В (&МассивОрганизаций)";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "И %НЕ Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;
		
		ОтборПоОрганизации = СтрЗаменить(ОтборПоОрганизации, "%НЕ ", ?(ПоОрганизации, "", "НЕ "));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОрганизации", ОтборПоОрганизации);
		
	КонецЕсли;
	
	ОтборПоСлужебнымРеквизитам = "";
	
	// Отборы по служебным реквизитам
	Если ПоСлужебнымПоИ <> Неопределено Тогда
		
		Если ПоРасчетСебестоимости <> Неопределено Тогда
			Если ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетСебестоимости, "", "НЕ ") + "Т.РасчетСебестоимости";
			ИначеЕсли НЕ ОписаниеРегистра.ЭтоРегистрНакопления Тогда
				// У регистра сведений СтоимостьТоваров нет ресурса РасчетСебестоимости.
				// Все его движения считаются расчетными.
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетСебестоимости, "ИСТИНА", "ЛОЖЬ");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
			
			Если ПоРасчетПартий <> Неопределено И ОписаниеРегистра.ЕстьРасчетПартий Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетПартий, "", "НЕ ") + "Т.РасчетПартий";
			КонецЕсли;
			
			Если ПоНепересчитываемыйТипЗаписи <> Неопределено И ОписаниеРегистра.ОтборПоТипуЗаписи Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(НЕ ПоНепересчитываемыйТипЗаписи, "", "НЕ ") + "Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей)";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОтборПоСлужебнымРеквизитам) Тогда
			ОтборПоСлужебнымРеквизитам = "И (" + ОтборПоСлужебнымРеквизитам + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоСлужебнымРеквизитам", ОтборПоСлужебнымРеквизитам);
	
	Если ТипЗнч(ЗапросИлиТекст) = Тип("Строка") Тогда
		ЗапросИлиТекст = ТекстЗапроса;
	Иначе
		ЗапросИлиТекст.Текст = ТекстЗапроса;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВременныеТаблицы

#Область ОперацииСВременнымиТаблицами

// Помещает таблицу значений в новую временную таблицу
//
Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяПриемника, Таблица, ПоляТаблицы, ПоляИндексирования = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%Поля
	|ПОМЕСТИТЬ %ИмяПриемника
	|ИЗ
	|	&Таблица КАК Т
	|%Индексы";
	
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО " + ПоляИндексирования);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля",   	  ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяПриемника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Индексы", 	  ТекстПоляИндексирования);
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет таблицу значений в существующую временную таблицу
//
Процедура ОбъединитьТаблицуЗначенийИВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяПриемника, Таблица, ПоляТаблицыЗначений, ПоляТаблицы, РесурсыТаблицы, ПоляИндексирования = "") Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОбъединенияТЗиВТ";
	
	Если ЗначениеЗаполнено(ПоляТаблицыЗначений) Тогда
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, Таблица, ПоляТаблицыЗначений, ПоляИндексирования);
	Иначе
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, Таблица, ПолучитьИменаКолонокСтрокой(Таблица), ПоляИндексирования);
	КонецЕсли;
	
	ДобавитьНедостающиеКолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, ИмяПриемника, ПоляИндексирования);
	
	ОбъединитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы, ПоляИндексирования);
	
	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы);
	
КонецПроцедуры

// Переносит данные из одной временной таблицы в другую
//
Процедура ОбъединитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяИсточника, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы, ПоляИндексирования = "") Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОбъединенияВТиВТ";
	
	// Записи итоговой временной таблицы сворачиваются по всем измерениям и реквизитам регистра (всем полям, не являющимися ресурсами).
	// Записи со всеми пустыми ресурсами не помещаются в итоговую временную таблицу.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%Поля
	|ПОМЕСТИТЬ %ИмяВнутреннейТаблицы
	|ИЗ
	|	%ИмяИсточника КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%Поля
	|ИЗ
	|	%ИмяПриемника КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяПриемника
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	%СгруппированныеПоля
	|ПОМЕСТИТЬ %ИмяПриемника
	|ИЗ
	|	%ИмяВнутреннейТаблицы КАК Т
	|
	|%ГруппировкаПолей
	|
	|%ОтборНепустыхРесурсов
	|
	|%Индексы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяВнутреннейТаблицы";
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО " + ПоляИндексирования);
	
	ТекстСгруппированныеПоля   = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей 	   = "";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ПоляТаблицы, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(РесурсыТаблицы, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		Если МассивРесурсов.Найти(ТекущееПоле) <> Неопределено Тогда
			
			// Ресурс
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля 
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + "СУММА(" + ТекущееПоле + ")";
				
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
			
		Иначе
			
			// Измерение или реквизит
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля 
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + ТекущееПоле;
			
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля",   	  			ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника", 			ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 			ИмяПриемника);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СгруппированныеПоля", 	ТекстСгруппированныеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей", 		ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", 	ТекстОтборНепустыхРесурсов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Индексы", 	  			ТекстПоляИндексирования);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВнутреннейТаблицы", 	ИмяВнутреннейТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет во временную таблицу отсутствующие колонки.
//
Процедура ДобавитьНедостающиеКолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяОбразца, ПоляИндексирования = "") Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляДобавленияКолонокВТ";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	// Составим перечень колонок, которые есть в таблице-образце, но отсутствуют в самой таблице.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяТаблицы);
	КолонкиТаблицы = Запрос.Выполнить().Колонки;
	
	Запрос.Текст   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяОбразца);
	КолонкиОбразца = Запрос.Выполнить().Колонки;
	
	НовыеКолонки = Новый Структура; // Имя колонки - пустое значение соответствующего ей типа
	
	Для Каждого ТекущаяКолонка Из КолонкиОбразца Цикл
		
		Если КолонкиТаблицы.Найти(ТекущаяКолонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначенияКолонки = Новый ОписаниеТипов(ТекущаяКолонка.ТипЗначения,, "Null");
		
		НовыеКолонки.Вставить(ТекущаяКолонка.Имя, ТипЗначенияКолонки.ПривестиЗначение(Неопределено));
		
	КонецЦикла;
	
	Если НовыеКолонки.Количество() = 0 Тогда
		Возврат; // в таблице есть все колонки, присутствующие в таблице-образце
	КонецЕсли;
	
	// Составим список полей для текста запроса.
	ТекстПоляТаблицы = "";
	КоличествоПараметров = 0;
	
	Для Каждого ТекущаяКолонка Из КолонкиТаблицы Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя;
	КонецЦикла;
	
	Для Каждого ТекущаяКолонка Из НовыеКолонки Цикл
		
		КоличествоПараметров = КоличествоПараметров + 1;
		ИмяПараметра = "ЗначениеНовогоПоля" + Формат(КоличествоПараметров, "ЧН=0; ЧГ=");
		
		Запрос.УстановитьПараметр(ИмяПараметра, ТекущаяКолонка.Значение);
		
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "&" + ИмяПараметра + " КАК " + ТекущаяКолонка.Ключ;
		
	КонецЦикла;
	
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО " + ПоляИндексирования);
	
	// Выполним запрос, получающий исходную таблицу с полным списком полей.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	%1 КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ %1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%3
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	%2 КАК Т
	|%4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ %2";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаЗапроса,
		ИмяТаблицы,
		ИмяВнутреннейТаблицы,
		ТекстПоляТаблицы,
		ТекстПоляИндексирования);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Удаляет все записи из временной таблицы, при этом все ее поля остаются без изменения.
//
Процедура ОчиститьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяТаблицы) Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОчисткиВТ";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	%1 КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	%2 КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %2";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяТаблицы,
		ИмяВнутреннейТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Уничтожает указанные временные таблицы
//
Процедура УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИменаТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	ТекстЗапроса 	= "";
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		Если НЕ ВременнаяТаблицаСуществует(Запрос.МенеджерВременныхТаблиц, КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса 
			+ ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет существование временной таблицы с указанным именем.
//
Функция ВременнаяТаблицаСуществует(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	// Из-за ошибки Платформы №50006544 нельзя воспользоваться методом
	// МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицы)
	// Поэтому будем искать временную таблицу перебором элементов коллекции.
	
	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		Если НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ИмяВременнойТаблицы) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Получает из переданного контейнера-источника данных менеджер временных таблиц.
//
Функция ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ)
	
	Если ТипЗнч(КонтейнерМенеджераВТ) = Тип("МенеджерВременныхТаблиц") Тогда
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ;
	Иначе // менеджер хранится в одноименном свойстве структуры или запроса
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область НумерацияИРазделениеНаПорцииСтрокВременнойТаблицы

// Возвращает имя колонки по умолчанию для нумерации строк временной таблицы.
//
Функция ИмяКолонкиДляНумерацииПоУмолчанию()
	Возврат "К";
КонецФункции

// Добавляет колонку для нумерации строк в таблицу значений.
//
Функция ДобавитьКолонкуДляНумерацииСтрок(Таблица, ИмяПоляНомераСтроки = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки) Тогда
		ИмяПоляНомераСтроки = ИмяКолонкиДляНумерацииПоУмолчанию();
	КонецЕсли;
	
	Возврат ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераСтроки);
	
КонецФункции

// Формирует параметры нумерации строк временной таблицы.
//
Функция СформироватьПараметрыНумерацииСтрокВременнойТаблицы(ИмяПоляРазделителя = "",
			ИменаСуммируемыхПолей = "", ИменаПолейУпорядочивания = "", ИмяПоляНомераСтроки = "",
			ИменаПолейИндексирования = "", ИмяПоляНакопления = "", ПодбиратьРазделитель = Истина) Экспорт
	
	ПараметрыНумерации = Новый Структура;
	ПараметрыНумерации.Вставить("ИмяПоляРазделителя", 		ИмяПоляРазделителя);
	ПараметрыНумерации.Вставить("ОптимальныйРазделитель", 	?(ПодбиратьРазделитель, "", ИмяПоляРазделителя));
	ПараметрыНумерации.Вставить("ИменаСуммируемыхПолей", 	ИменаСуммируемыхПолей);
	ПараметрыНумерации.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляРазделителя, ИменаПолейУпорядочивания));
	ПараметрыНумерации.Вставить("ИмяПоляНомераСтроки", 		?(НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки), ИмяКолонкиДляНумерацииПоУмолчанию(), ИмяПоляНомераСтроки));
	ПараметрыНумерации.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыНумерации.ИмяПоляНомераСтроки, ИменаПолейИндексирования));
	ПараметрыНумерации.Вставить("ИмяПоляНакопления", 		ИмяПоляНакопления);
	
	Возврат ПараметрыНумерации;
	
КонецФункции

// Подбирает наиболее оптимальное поле-разделитель таблицы на порции.
// Решает проблему, когда указанное по умолчанию поле-разделитель является неподходящим - при этом порция выборки по этому полю
// получается слишком большой и возникает ошибка "Недостаточно памяти для получения результата запроса к базе данных".
//
Функция ПодобратьПодходящийРазделительДляНумерации(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ПустаяТаблицаДанных)
	
	Если ЗначениеЗаполнено(ПараметрыНумерации.ОптимальныйРазделитель) Тогда
		Возврат ПараметрыНумерации.ОптимальныйРазделитель; // уже определен
	ИначеЕсли РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы) <= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		Возврат ""; // не нужно делить на порции
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РазмерПорции", ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);
	
	// Соберем статистику по значениям колонок таблицы.
	ШаблонТекстаЗапроса =
	"%1
	|
	|ВЫБРАТЬ
	|	""%2"" КАК Разделитель,
	|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоРазделителей,
	|	МАКСИМУМ(Т.КоличествоСтрок) КАК КоличествоСтрок,
	|	%5 КАК ЭтоИсходныйРазделитель
	|%3
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.%2 КАК Разделитель,
	|		МАКСИМУМ(ВЫБОР КОГДА Т.%2 ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьЗначенияNULL,
	|		МАКСИМУМ(ВЫБОР КОГДА ВЫРАЗИТЬ(%6 КАК ЧИСЛО(23,3)) = %6 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ) КАК ЕстьЧислаСБольшойТочностью,
	|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоСтрок
	|	ИЗ
	|		%4 КАК Т
	|	СГРУППИРОВАТЬ ПО
	|		Т.%2) КАК Т
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Т.ЕстьЗначенияNULL) = ЛОЖЬ 
	|	И МАКСИМУМ(Т.ЕстьЧислаСБольшойТочностью) = ЛОЖЬ
	|
	|";
	
	ИменаКолонок = "";
	СтруктураИсключений = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);
	
	Для Каждого ТекКолонка Из ПустаяТаблицаДанных.Колонки Цикл
		
		Если СтруктураИсключений.Свойство(ТекКолонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекКолонка.ТипЗначения.СодержитТип(Тип("ВидДвиженияНакопления"))
		 ИЛИ (ТекКолонка.ТипЗначения.Типы().Количество() > 1
		 		И ТекКолонка.ТипЗначения.СодержитТип(Тип("Строка"))) Тогда
			Продолжить; // для недопущения ошибки "Индексируемое поле не может иметь составной тип и тип неограниченной длины"
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаЗапроса,
				?(Запрос.Текст = "", "", "ОБЪЕДИНИТЬ ВСЕ"),
				ТекКолонка.Имя,
				?(Запрос.Текст = "", "ПОМЕСТИТЬ ВТРазделители", ""),
				ИмяТаблицы,
				?(НРег(ТекКолонка.Имя) = НРег(ПараметрыНумерации.ИмяПоляРазделителя), "ИСТИНА", "ЛОЖЬ"),
				?(ТекКолонка.ТипЗначения.СодержитТип(Тип("Число")), "Т." + ТекКолонка.Имя, "0"));
		
	КонецЦикла;
	
	Запрос.Выполнить();
	
	// Выберем наиболее подходящий разделитель строк.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Разделитель
	|ИЗ
	|	ВТРазделители КАК Т
	|ГДЕ
	|	Т.КоличествоСтрок <= &РазмерПорции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.КоличествоРазделителей,
	|	Т.ЭтоИсходныйРазделитель УБЫВ,
	|	Т.Разделитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Разделитель КАК Разделитель
	|ИЗ
	|	ВТРазделители КАК Т
	|ГДЕ
	|	Т.КоличествоСтрок > &РазмерПорции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.КоличествоСтрок,
	|	Т.КоличествоРазделителей,
	|	Т.ЭтоИсходныйРазделитель УБЫВ,
	|	Т.Разделитель";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ПараметрыНумерации.ИмяПоляРазделителя);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать(); // найдем разделитель с размером порции меньше максимально допустимого
	
	Если НЕ Выборка.Следующий() Тогда
		
		Выборка = РезультатЗапроса[1].Выбрать(); // не нашли - найдем хотя бы разделитель с размером порции больше максимально допустимого
		
		Если НЕ Выборка.Следующий() Тогда
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось подобрать поле-разделитель для таблицы %1'"),
				ИмяТаблицы);
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
				ТекстДляПротокола);
			
			ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(Запрос, "ВТРазделители");
	
	Возврат Выборка.Разделитель; // нашли самый оптимальный разделитель
	
КонецФункции

// Заполняет номера строк временной таблицы.
//
Процедура ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ИмяПронумерованнойТаблицы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПронумерованнойТаблицы) Тогда
		ИмяПронумерованнойТаблицы = ИмяТаблицы;
	КонецЕсли;
	
	ПротоколРасчетаПартийИСебестоимости.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
		ПараметрыРасчета,
		2*РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РазмерПорции", ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);
	
	ПустаяТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	// Выполним группировку строк временной таблицы по всем полям, не являющимися полями суммирования.
	Если ЗначениеЗаполнено(ПараметрыНумерации.ИменаСуммируемыхПолей) Тогда
		
		СтруктураИменаСуммируемыхПолей = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);
		
		ТекстПоляТаблицы = "";
		ТекстПоляГруппировки  = "";
		
		Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
			
			Если СтруктураИменаСуммируемыхПолей.Свойство(КолонкаДанных.Имя) Тогда
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "СУММА(Т." + КолонкаДанных.Имя + ") КАК " + КолонкаДанных.Имя;
			Иначе
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя + " КАК " + КолонкаДанных.Имя;
				ТекстПоляГруппировки = ТекстПоляГруппировки + ?(ТекстПоляГруппировки = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстПоляГруппировки = ?(ТекстПоляГруппировки = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстПоляГруппировки;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%1
		|ПОМЕСТИТЬ %2ДляГруппировки
		|ИЗ
		|	%2 КАК Т
		|%3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%2ДляГруппировки КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %2ДляГруппировки
		|";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ТекстПоляТаблицы, ИмяТаблицы, ТекстПоляГруппировки);
		Запрос.Выполнить();
		
	КонецЕсли;
		
	// Подберем наиболее подходящее поле-разделитель для разделения на порции.
	ПараметрыНумерации.ОптимальныйРазделитель =
		ПодобратьПодходящийРазделительДляНумерации(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ПустаяТаблицаДанных);
	
	ДелитьТаблицуНаПорции = ЗначениеЗаполнено(ПараметрыНумерации.ОптимальныйРазделитель);
	
	// Получим полный список полей для упорядочивания - одни и те же данные должны всегда сортироваться одинаково.
	// Добавим в список все остальные колонки, не указанные в списке полей упорядочивания.
	// По суммовым полям будем упорядочивать после несуммовых полей.
	ИменаСуммируемыхПолей = ПараметрыНумерации.ИменаСуммируемыхПолей;
	
	ИменаВсехПолейУпорядочивания = СтрЗаменить(
		?(ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейУпорядочивания),
			ПараметрыНумерации.ИменаПолейУпорядочивания,
			ПараметрыНумерации.ОптимальныйРазделитель),
		"	",
		" ");
	
	СтруктураИсключаемыеПоля = Новый Структура(ПараметрыНумерации.ИмяПоляНомераСтроки + ", НомерСтроки, ЗапросИсточник, РасчетЗавершен");
	СтруктураИменаПолей 	 = Новый Структура(
		СтрЗаменить(СтрЗаменить(НРег(ИменаВсехПолейУпорядочивания), " возр", ""), " убыв", "")
		+ ?(ИменаСуммируемыхПолей = "" ИЛИ ИменаВсехПолейУпорядочивания = "", "", ", ") + ИменаСуммируемыхПолей);
	
	Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
		
		Если СтруктураИсключаемыеПоля.Свойство(КолонкаДанных.Имя)  // служебное поле
		 ИЛИ СтруктураИменаПолей.Свойство(КолонкаДанных.Имя) Тогда // поле уже используется для упорядочивания
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСуммируемаяКолонкаТаблицы(КолонкаДанных) Тогда // имена полей суммирования не указаны - суммируем по всем числовым полям
			ИменаСуммируемыхПолей = ИменаСуммируемыхПолей + ?(ИменаСуммируемыхПолей = "", "", ", ") + КолонкаДанных.Имя;
		Иначе
			ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
				+ ?(ИменаВсехПолейУпорядочивания = "", "", ", ") + КолонкаДанных.Имя;
		КонецЕсли;
		
		СтруктураИменаПолей.Вставить(СтруктураИменаПолей);
		
	КонецЦикла;
	
	ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
		+ ?(ИменаСуммируемыхПолей = "" ИЛИ ИменаВсехПолейУпорядочивания = "", "", ", ") + ИменаСуммируемыхПолей;
	
	// Получим перечень имен колонок таблицы.
	ДобавитьКолонкуДляНумерацииСтрок(ПустаяТаблицаДанных, ПараметрыНумерации.ИмяПоляНомераСтроки);
	
	ИменаКолонок = "";
	Для Каждого ТекКолонка Из ПустаяТаблицаДанных.Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + "Т." + ТекКолонка.Имя;
	КонецЦикла;
	
	Если ДелитьТаблицуНаПорции Тогда
		
		// Разделим строки на порции для того, чтобы не получить слишком большую выборку, которая вызовет ошибку нехватки памяти.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.%2 КАК Разделитель,
		|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоСтрок
		|ПОМЕСТИТЬ ВТПорцииСтрок
		|ИЗ
		|	%1 КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.%2";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			ИмяТаблицы,
			ПараметрыНумерации.ОптимальныйРазделитель);
		
		Запрос.Выполнить();
		
		ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
			ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ,
			"КоличествоСтрок", "Разделитель",, "Разделитель, НомерПорции");
		
		МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТПорцииСтрок");
		
	Иначе
		
		МаксНомерПорции = 1; // вся таблица это одна порция
		
	КонецЕсли;
	
	НомерСтроки = 0; // нумерация строк начинается с 0
	
	// Выберем данные исходной таблицы порциями.
	// Даже если исходная таблица не содержит строк цикл надо выполнить один раз, для формирования вспомогательных временных таблиц.
	Для НомерПорции = 1 По Макс(МаксНомерПорции, 1) Цикл
		
		Если МаксНомерПорции > 1 Тогда 
			
			Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.*
			|ИЗ
			|	%1 КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорцииСтрок КАК ПорцииСтрок
			|			ПО Т.%2 = ПорцииСтрок.Разделитель
			|			И ПорцииСтрок.НомерПорции = &НомерПорции
			|УПОРЯДОЧИТЬ ПО
			|	%3";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.*
			|ИЗ
			|	%1 КАК Т
			|УПОРЯДОЧИТЬ ПО
			|	%3";
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
			ИмяТаблицы,
			ПараметрыНумерации.ОптимальныйРазделитель, // нужен только для запроса с порциями
			ИменаВсехПолейУпорядочивания);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		// Добавим колонку номера строки если ее еще нет.
		ДобавитьКолонкуДляНумерацииСтрок(Таблица, ПараметрыНумерации.ИмяПоляНомераСтроки);
		
		// Пронумеруем строки текущей порции (нумерация сквозная для всей исходной таблицы).
		// Если требуется, то при этом в специальной колонке накопим сумму значений этой колонки в предыдущих строках.
		НакопленноеЗначение = 0;
		
		Для Каждого ТекСтр Из Таблица Цикл
			
			ТекСтр[ПараметрыНумерации.ИмяПоляНомераСтроки] = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			
			Если ЗначениеЗаполнено(ПараметрыНумерации.ИмяПоляНакопления) Тогда
				ТекущееЗначениеНакопления = ТекСтр[ПараметрыНумерации.ИмяПоляНакопления];
				ТекСтр[ПараметрыНумерации.ИмяПоляНакопления] = НакопленноеЗначение;
				НакопленноеЗначение = НакопленноеЗначение + ТекущееЗначениеНакопления;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НомерПорции = 1 Тогда // выбрана первая порция

			Запрос.Текст =
			"ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации
			|ИЗ
			|	&Т КАК Т";
			
		Иначе // выбрана вторая или следующие порции
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации2
			|ИЗ
			|	&Т КАК Т
			|;
			|///////////////////////////
			|ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации3
			|ИЗ
			|	%1ДляНумерации КАК Т
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	%2
			|ИЗ
			|	%1ДляНумерации2 КАК Т
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации2
			|;
			|///////////////////////////
			|ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации
			|ИЗ
			|	%1ДляНумерации3 КАК Т
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации3";
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ИменаКолонок);
		
		Запрос.УстановитьПараметр("Т", Таблица);
		Запрос.Выполнить();
		
	КонецЦикла;
	
	// Поместим пронумерованные данные в итоговую временную таблицу.
	Запрос.Текст =
	"УНИЧТОЖИТЬ %1
	|;
	|///////////////////////////
	|ВЫБРАТЬ
	|	%3
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	%1ДляНумерации КАК Т
	|%4
	|;
	|///////////////////////////
	|УНИЧТОЖИТЬ %1ДляНумерации";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ИмяТаблицы,
		ИмяПронумерованнойТаблицы,
		ИменаКолонок,
		?(НЕ ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейИндексирования), "", "ИНДЕКСИРОВАТЬ ПО " + ПараметрыНумерации.ИменаПолейИндексирования));
	
	Запрос.Выполнить();
	
	Если ДелитьТаблицуНаПорции Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТПорцииСтрок");
	КонецЕсли;
	
	// Проверим корректность новой нумерации.
	РазмерТаблицыДанных = РазмерВременнойТаблицы(Запрос, ИмяПронумерованнойТаблицы);
	
	Если РазмерТаблицыДанных > 0 Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(Т.КоличествоНомеров) КАК КоличествоНомеров,
		|	СУММА(Т.МинимальныйНомер)  КАК МинимальныйНомер,
		|	СУММА(Т.МаксимальныйНомер) КАК МаксимальныйНомер
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.%2) КАК КоличествоНомеров,
		|		0 КАК МинимальныйНомер,
		|		0 КАК МаксимальныйНомер
		|	ИЗ
		|		%1 КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		МИНИМУМ(Т.%2),
		|		МАКСИМУМ(Т.%2)
		|	ИЗ
		|		%1 КАК Т) КАК Т";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
			ИмяПронумерованнойТаблицы,
			ПараметрыНумерации.ИмяПоляНомераСтроки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.КоличествоНомеров <> РазмерТаблицыДанных Тогда
			ТекстДляПротокола = НСтр("ru='Ошибка нумерации временной таблицы: не соблюдается уникальность нумерации.'");
		ИначеЕсли Выборка.МинимальныйНомер <> 0 Тогда
			ТекстДляПротокола = НСтр("ru='Ошибка нумерации временной таблицы: некорректный минимальный номер.'");
		ИначеЕсли Выборка.МаксимальныйНомер <> РазмерТаблицыДанных - 1 Тогда
			ТекстДляПротокола = НСтр("ru='Ошибка нумерации временной таблицы: некорректный максимальный номер.'");
		Иначе
			ТекстДляПротокола = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
				ТекстДляПротокола);
			
			ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Возвращает имя колонки по умолчанию для номеров порций временных таблиц.
//
Функция ИмяКолонкиДляНомераПорцииПоУмолчанию()
	Возврат "НомерПорции";
КонецФункции

// Добавляет колонку для номеров порций в таблицу значений.
//
Функция ДобавитьКолонкуДляНомеровПорцийСтрок(Таблица, ИмяПоляНомераПорции = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции) Тогда
		ИмяПоляНомераПорции = ИмяКолонкиДляНомераПорцииПоУмолчанию();
	КонецЕсли;
	
	Возврат ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераПорции);
	
КонецФункции

// Формирует параметры разделения временной таблицы на порции.
//
Функция СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(РазмерПорции, ИмяПоляВесаСтроки,
			ИменаПолейУпорядочивания = "", ИмяПоляНомераПорции = "", ИменаПолейИндексирования = "") Экспорт
	
	ПараметрыРазделения = Новый Структура;
	ПараметрыРазделения.Вставить("РазмерПорции", 		 	 РазмерПорции);
	ПараметрыРазделения.Вставить("ИмяПоляВесаСтроки", 		 ИмяПоляВесаСтроки);
	ПараметрыРазделения.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляВесаСтроки + " " + "УБЫВ", ИменаПолейУпорядочивания));
	ПараметрыРазделения.Вставить("ИмяПоляНомераПорции", 	 ?(НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции), ИмяКолонкиДляНомераПорцииПоУмолчанию(), ИмяПоляНомераПорции));
	ПараметрыРазделения.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыРазделения.ИмяПоляНомераПорции, ИменаПолейИндексирования));
	
	Возврат ПараметрыРазделения;
	
КонецФункции

// Разделяет временную таблицу на порции.
//
Функция РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, ИмяТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	// Получим пустую таблицу значений с полями, соответствующими полям временной таблицы.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	// Получим описание полей таблицы.
	ТекстПоляТаблицы = "";
	ШаблонПоляТаблицы = "";
		
	Для Каждого КолонкаДанных Из ТаблицаДанных.Колонки Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + КолонкаДанных.Имя;
		ШаблонПоляТаблицы = ШаблонПоляТаблицы + ?(ШаблонПоляТаблицы = "", "", ", ") + "%1" + КолонкаДанных.Имя;
	КонецЦикла;
	
	// Добавим колонку для номера порции, к которой относится текущая строка таблицы.
	КолонкаДобавлена = ДобавитьКолонкуДляНомеровПорцийСтрок(ТаблицаДанных, ПараметрыРазделения.ИмяПоляНомераПорции);
	
	Если КолонкаДобавлена Тогда
		ШаблонПоляТаблицы = ШаблонПоляТаблицы + ", %1" + ПараметрыРазделения.ИмяПоляНомераПорции;
	КонецЕсли;
	
	// Создадим пустую временную таблицу, в которую будет помещена обработанная исходная таблица.
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПараметрыРасчета,
		ИмяТаблицы + "_Временная",
		ТаблицаДанных,
		ШаблонПоляТаблицы);
	
	// Поместим данные временной таблицы в таблицу значений, заполняя при этом номер порции для каждой строки.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%1
	|ИЗ
	|	%2 КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	%3";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ТекстПоляТаблицы,
		ИмяТаблицы,
		ПараметрыРазделения.ИменаПолейУпорядочивания);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерПорции = 1;
	РазмерТекущейПорции = 0;
	
	НомерСтрокиВыборки = 0;
	РазмерВыборки = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиВыборки = НомерСтрокиВыборки + 1;
		
		ТекущаяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
		ВесСтроки = ТекущаяСтрока[ПараметрыРазделения.ИмяПоляВесаСтроки];
		ВесСтроки = ?(ВесСтроки < 0, - ВесСтроки, ВесСтроки);
		
		Если РазмерТекущейПорции + ВесСтроки <= ПараметрыРазделения.РазмерПорции Тогда
			// Вес текущей строки "помещается" в текущую порцию.
			// Строка добавляется в текущую порцию.
		ИначеЕсли РазмерТекущейПорции > 0 Тогда
			// Вес текущей строки "выходит" за текущую порцию, в которой уже есть другие строки.
			// Строка добавляется первой в новую порцию.
			НомерПорции = НомерПорции + 1;
			РазмерТекущейПорции = 0;
		Иначе
			// Вес текущей строки "больше" возможного размера порции, при этом в текущей порции еще нет других строк.
			// Строка целиком помещается в отдельную порцию.
		КонецЕсли;
		
		ТекущаяСтрока[ПараметрыРазделения.ИмяПоляНомераПорции] = НомерПорции;
		
		РазмерТекущейПорции = РазмерТекущейПорции + ВесСтроки;
		
		Если НомерСтрокиВыборки = РазмерВыборки
		 ИЛИ ТаблицаДанных.Количество() = ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		 
			// Переместим данные из таблицы значений во временную таблицу.
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета, 
				ИмяТаблицы + "_Временная",
				ТаблицаДанных,
				"", // все колонки таблицы ТаблицаДанных
				ШаблонПоляТаблицы,
				"");
			
			ТаблицаДанных.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Уничтожим старую таблицу и поместим вместо нее новую, с заполненной колонкой номера порции.
	Запрос.Текст =
	"УНИЧТОЖИТЬ %1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	%1_Временная КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	%2
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %1_Временная";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ИмяТаблицы,
		ПараметрыРазделения.ИменаПолейИндексирования);
	
	Запрос.Выполнить();
	
	Возврат ?(РазмерВыборки = 0, 0, НомерПорции);
	
КонецФункции


// Добавляет числовую колонку в таблицу значений.
//
Функция ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяКолонки)
	
	Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РегистраторыИМоментыВремени

// Получает реквизит "Момент времени" для всех документов в указанной временной таблице.
//
Процедура СформироватьТаблицуМоментовВремени(КонтейнерМенеджераВТ, ИмяИсточника, ИмяПоляРегистратор = "Регистратор",
			ИмяПриемника = "ВТМоментыВремени", ДопустимыПустыеРегистраторы = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	// Выберем типы документов, для которых нужно получить момент времени.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.%ИмяПоляРегистратор КАК %ИмяПоляРегистратор
	|ПОМЕСТИТЬ %ИмяПриемника_Регистраторы
	|ИЗ
	|	%ИмяИсточника КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	%ИмяПоляРегистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(Т.%ИмяПоляРегистратор) КАК ТипРегистратора
	|ИЗ
	|	%ИмяПриемника_Регистраторы КАК Т
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника", 		ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 		ИмяПриемника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Составим текст поля для выбора момента времени документа в зависимости от типа документа.
	ТекстЗапроса = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипРегистратора = Тип("Неопределено")
		 ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(Выборка.ТипРегистратора) Тогда
			
			Если НЕ ДопустимыПустыеРегистраторы Тогда
				
				// В поле <ИмяПоляРегистратор> содержится не ссылка на документ.
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При обработке регистраторов из временной таблицы ""%1"" возникла ошибка:
						|некорректный тип регистратора ""%2""'"),
					ИмяИсточника,
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеЗначения(Выборка.ТипРегистратора));
				
				ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
					КонтейнерМенеджераВТ,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам,
					ТекстДляПротокола);
				
				ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
				
			Иначе
				
				Продолжить; // в итоговую таблицу такой регистратор не включаем
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяТипаРегистратора = Метаданные.НайтиПоТипу(Выборка.ТипРегистратора).Имя;
		ЭтоПервыйПодзапрос  = НЕ ЗначениеЗаполнено(ТекстЗапроса);
		
		ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервыйПодзапрос, "", "
		|ОБЪЕДИНИТЬ ВСЕ
		|") + "
		|ВЫБРАТЬ
		|	Т.%ИмяПоляРегистратор КАК %ИмяПоляРегистратор,
		|	ВЫРАЗИТЬ(Т.%ИмяПоляРегистратор КАК Документ.%ТипДокумента).МоментВремени КАК МоментВремени
		|" + ?(ЭтоПервыйПодзапрос, "ПОМЕСТИТЬ %ИмяПриемника", "") + "
		|ИЗ
		|	%ИмяПриемника_Регистраторы КАК Т
		|ГДЕ
		|	Т.%ИмяПоляРегистратор ССЫЛКА Документ.%ТипДокумента
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТипДокумента", ИмяТипаРегистратора);
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК %ИмяПоляРегистратор,
		|	НЕОПРЕДЕЛЕНО КАК МоментВремени
		|ПОМЕСТИТЬ %ИмяПриемника
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	%ИмяПоляРегистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяПриемника_Регистраторы";
	
	// Получим моменты времени документов.
	Запрос.Текст = СокрЛП(ТекстЗапроса);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 		ИмяПриемника);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Выбирает документы из указанной временной таблицы, упорядоченные по их моменту времени.
//
Функция ВыбратьМоментыВремениРегистраторов(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяПоляРегистратор = "Регистратор") Экспорт
	
	ИмяПриемника = "ВТМоментыВремени";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СформироватьТаблицуМоментовВремени(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяПоляРегистратор, ИмяПриемника);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.%ИмяПоляРегистратор,
	|	Источник.Организация,
	|	Т.МоментВремени
	|ИЗ
	|	%ИмяПриемника КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ %ИмяТаблицы КАК Источник
	|		ПО Т.%ИмяПоляРегистратор = Источник.%ИмяПоляРегистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.МоментВремени
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 		ИмяПриемника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицы", 		ИмяТаблицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяПриемника);
	
	Возврат РезультатЗапроса;
	
КонецФункции
	
#КонецОбласти

#КонецОбласти

#Область КолонкиТаблиц

// Возвращает строку шаблона, содержащего имена всех колонок переданного объекта.
//
Функция ПолучитьИменаКолонокСтрокой(ИсточникКолонок) Экспорт
	
	Если ТипЗнч(ИсточникКолонок) = Тип("ТаблицаЗначений")
	 ИЛИ ТипЗнч(ИсточникКолонок) = Тип("РезультатЗапроса") Тогда
		Колонки = ИсточникКолонок.Колонки;
	Иначе
		Колонки = ИсточникКолонок;
	КонецЕсли;
	
	ИменаКолонок = "";
	
	Для Каждого Колонка Из Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + "%1" + Колонка.Имя;
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

// Дополняет параметры обработки ЖурналРегистрации для просмотра ключевых событий расчета себестоимости.
// Параметры процедуры соответствуют аналогичным параметрам формы этой обработки.
//
// Параметры;
//	ОтборПоУровню  - СписокЗначений - отбор по уровням событий журнала регистрации
//	ОтборПоСобытию - Массив - отбор по событиям журнала регистрации
//
Процедура ДополнитьОтборыДляЖурналаРегистрации(ОтборПоУровню, ОтборПоСобытию) Экспорт
	
	Если ОтборПоУровню.НайтиПоЗначению("Ошибка") = Неопределено Тогда
		ОтборПоУровню.Добавить("Ошибка", "Ошибка"); // для ошибок расчета
	КонецЕсли;
	Если ОтборПоУровню.НайтиПоЗначению("Информация") = Неопределено Тогда
		ОтборПоУровню.Добавить("Информация", "Информация"); // для протокола расчета
	КонецЕсли;
	
	// Добавим имена событий механизмов расчета партий и себестоимости
	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Истина);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета));
	
	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Ложь);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета));
	
КонецПроцедуры


// Возвращает общее для всех этапов расчета себестоимости имя события для журнала регистрации.
//
Функция ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, Уточнение) Экспорт
	
	Если НЕ ПараметрыРасчета = Неопределено
	 И ПараметрыРасчета.Свойство("ЗапущенРасчетПартий")
	 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		ИмяСобытия = НСтр("ru = 'Расчет партий и себестоимости%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		ИмяСобытия = НСтр("ru = 'Расчет себестоимости%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ИмяСобытия,
		?(Уточнение = "", "", "." + Уточнение));
	
	Возврат ИмяСобытия;
	
КонецФункции

// Возвращает имя события журнала для записи ошибки расчета.
//
Функция ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт
	
	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru='Ошибка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции

// Возвращает имя события журнала для записи протокола расчета.
//
Функция ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт
	
	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru='Протокол расчета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции

// Обрабатывает run-time ошибки расчета - записывает протокол расчета и завершает расчет.
//
Функция ОбработатьИсключениеВызоваРассчитатьВсе(ПараметрыРасчета, ИнформацияОбОшибке, Отказ) Экспорт
	
	Отказ = Истина;
	
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	// Восстановим отбор по всем организациям, т.к. при расчете себестоимости он подменялся при расчете по группам организаций.
	Если НЕ ПараметрыРасчета.ИдетРасчетПартий И ПараметрыРасчета.Свойство("КопияМассивОрганизаций") Тогда
		ПараметрыРасчета.Вставить("МассивОрганизаций",
			ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыРасчета.КопияМассивОрганизаций));
	КонецЕсли;
	
	// Запишем информацию в журнал регистрации.
	ТекстДляПротокола = СтрЗаменить(ТекстОшибки, 	   СлужебныйСимвол_ТекстДляРегистрацииПроблемы(), "");
	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), "");
	
	ТекстДляПротокола = ПротоколРасчетаПартийИСебестоимости.ПредставлениеТекстаОшибки(ТекстДляПротокола);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстДляПротокола);
	
	// Запишем информацию в протокол расчета.
	ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='При выполнении расчета возникла ошибка:
			|%1'"),
		ТекстОшибки);
		
	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ТекстДляРегистрацииПроблемы(), "");
	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), "");
		
	Если ПротоколРасчетаПартийИСебестоимости.ВедетсяПротоколРасчета(ПараметрыРасчета)
	 И НЕ ИсключениеВызваноПрограммно(ТекстОшибки) Тогда
	 
		// Если исключение вызвано программно, то в протокол уже должна быть добавлена информация об ошибке в месте ее возникновения.
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	// Запишем информацию в механизме закрытия месяца.
	НачалоТекстаДляПротокола 	= СтрНайти(ТекстОшибки, СлужебныйСимвол_ТекстДляРегистрацииПроблемы(),,, 1);
	КонецТекстаДляПротокола  	= СтрНайти(ТекстОшибки, СлужебныйСимвол_ТекстДляРегистрацииПроблемы(),,, 2);
	ПроблемаУжеЗарегистрирована = (СтрНайти(ТекстОшибки, СлужебныйСимвол_ПроблемаУжеЗарегистрирована()) > 0);
	
	Если НЕ ПроблемаУжеЗарегистрирована И НачалоТекстаДляПротокола > 0 И КонецТекстаДляПротокола > 0 Тогда // в описании заключен текст для регистрации проблемы
		
		ДлинаСимвола = СтрДлина(СлужебныйСимвол_ТекстДляРегистрацииПроблемы());
		ТекстДляПротокола = СокрЛП(Сред(ТекстОшибки, НачалоТекстаДляПротокола + ДлинаСимвола, КонецТекстаДляПротокола - НачалоТекстаДляПротокола - ДлинаСимвола));
		
	ИначеЕсли НЕ ИсключениеВызваноПрограммно(ТекстОшибки) // "честное" падение
	 ИЛИ НЕ ПроблемаУжеЗарегистрирована Тогда // передача "честного" падения из вложенных Попытка-Исключение
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При выполнении расчета диагностирована ошибка:
				|%1'"),
			ТекстОшибки);
	Иначе
		// Проблема уже зарегистрирована в месте вызова исключения
		ТекстДляПротокола = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда
		ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			,
			,
			ТекстДляПротокола);
	КонецЕсли;
	
	ОкончаниеРасчета(ПараметрыРасчета); // запишем протокол
	
	ТекстОшибки = ТекстОшибки + СлужебныйСимвол_ПроблемаУжеЗарегистрирована();
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

Функция ИсключениеВызваноПрограммно(ТекстОшибки) Экспорт
	
	Возврат СтрНайти(НРег(ТекстОшибки), НРег("ВызватьИсключение")) > 0
	   ИЛИ СтрНайти(НРег(ТекстОшибки), НРег("Raise")) > 0;
	
КонецФункции

Функция ТекстИсключениеДляРегистрацииПроблемы(ТекстОшибки) Экспорт
	Возврат СлужебныйСимвол_ТекстДляРегистрацииПроблемы() + ТекстОшибки + СлужебныйСимвол_ТекстДляРегистрацииПроблемы();
КонецФункции

Функция СлужебныйСимвол_ТекстДляРегистрацииПроблемы() Экспорт
	Возврат Символы.ПС + "#Описание" + Символы.ПС;
КонецФункции

Функция СлужебныйСимвол_ПроблемаУжеЗарегистрирована() Экспорт
	Возврат ЗакрытиеМесяцаСервер.СлужебныйСимвол_ИсключениеУжеОтработаноВЭтапеРасчета()
КонецФункции

Функция ТекстОшибкиНекорректногоЗавершенияРасчетаСебестоимости() Экспорт
	Возврат СлужебныйСимвол_ПроблемаУжеЗарегистрирована()
		+ НСтр("ru='При расчете себестоимости возникла ошибка. Подробности см. в Журнале регистрации.'");
КонецФункции

#КонецОбласти


#Область Организации

// Возвращает строковое представление массива организаций.
//
// Параметры:
//	МассивОрганизаций - Массив - организации, для которых надо получить представление
//
// Возвращаемое значение:
//	Строка - строковое представление массива организаций
//
Функция ПредставлениеОрганизаций(МассивОрганизаций, Разделитель = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МассивОрганизаций = Неопределено Тогда
		Возврат НСтр("ru='<Все организации>'");
	КонецЕсли;
	
	ПредставлениеОрганизаций = "";
	
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ВК;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Наименование КАК ОрганизацияПредставление
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка В(&МассивОрганизаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеОрганизаций = ПредставлениеОрганизаций
			+ ?(ПустаяСтрока(ПредставлениеОрганизаций), "", Разделитель)
			+ Выборка.ОрганизацияПредставление;
	КонецЦикла;

	Возврат ПредставлениеОрганизаций;
	
КонецФункции

// Возвращает массив организаций, для которых необходимо выполнить расчет себестоимости.
//
Функция ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета, МассивОрганизаций = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Данные.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Данные
	|	ГДЕ
	|		Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Данные.Активность
	|		И (&ПоВсемОрганизациям
	|				ИЛИ Данные.Организация В (&ОтборОрганизации))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитики.Организация
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Данные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитики
	|			ПО Данные.АналитикаУчетаПоПартнерам = КлючиАналитики.Ссылка
	|				И (&ПоВсемОрганизациям
	|					ИЛИ КлючиАналитики.Организация В (&ОтборОрганизации))
	|	ГДЕ
	|		Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Данные.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Данные.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииПрочихРасходов КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|			ПО Данные.СтатьяРасходов = Статьи.Ссылка
	|	ГДЕ
	|		Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Данные.Активность
	|		И (&ПоВсемОрганизациям
	|				ИЛИ Данные.Организация В (&ОтборОрганизации))
	|		И Данные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И (Статьи.ВариантРаспределенияРасходовУпр
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|			ИЛИ Статьи.ВариантРаспределенияРасходовРегл
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Данные.Организация
	|	ИЗ
	|		Документ.РаспределениеРасходовБудущихПериодов КАК Данные
	|	ГДЕ
	|		Данные.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Данные.Проведен
	|		И (Данные.ВариантУказанияСуммыУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
	|			ИЛИ Данные.ВариантУказанияСуммыРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически))
	|		И (&ПоВсемОрганизациям
	|				ИЛИ Данные.Организация В (&ОтборОрганизации))
	|	) КАК Данные";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",		КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ОтборОрганизации", 	ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(МассивОрганизаций));
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив организаций с методом оценки стоимости "ФИФО скользящая".
//
Функция ОрганизацииСФИФОСкользящая(ПериодРасчета, МассивОрганизаций = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ТекущаяОрганизация Из ДоступныеОрганизации(МассивОрганизаций) Цикл
		
		ТекущийМетодОценки = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.МетодОценкиСтоимостиТоваровОрганизации(
			ТекущаяОрганизация,
			НачалоМесяца(ПериодРасчета));
		
		Если ТекущийМетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
			Результат.Добавить(ТекущаяОрганизация);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает доступные для расчета организации.
//
Функция ДоступныеОрганизации(МассивОрганизаций)
	
	Если ЗначениеЗаполнено(МассивОрганизаций) Тогда
		Возврат ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций);
	КонецЕсли;
	
	Возврат Справочники.Организации.ДоступныеОрганизации(Ложь, Ложь);
	
КонецФункции


// Дополняет перечень организаций из ОтборОрганизации остальными организациями ИБ, связанными с ними по схеме Интеркампани.
//
// Параметры:
//	Дата - Дата - период расчета
//	ОтборОрганизации - СписокЗначений, Массив или СправочникСсылка.Организации - отбор по организациям
//	Группировать - Булево - возвращать сгруппированный результат, или в все найденные организации в виде обычного массива
//
// Возвращаемое значение:
//	Массив - если Группировать, то результат аналогичен возвращаемому значению ВсеСвязиОрганизацийПоСхемеИнтеркампани(),
//			 но возвращены будут только те группы (массивы) организаций, в которые входят организации из ОтборОрганизации
//			 Если НЕ Группировать - то эти же группы будут слиты в один массив.
//			 Т.е. по сути эта функция лишь отбор для ВсеСвязиОрганизацийПоСхемеИнтеркампани()
//			 с возможностью представления результат в "линейном" виде.
//
Функция СвязиОрганизацийПоСхемеИнтеркампани(Дата = Неопределено, ОтборОрганизации = Неопределено, Группировать = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОтборПоОрганизациям = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);
	
	// Получим все организации ИБ, сгруппированные по связям схемы Интеркампани
	МассивГрупп = ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата);
	
	// Оставим такие группы организаций, в которых хоть одна организация группы
	// нуждается в пересчете (входит в требуемый ОтборПоОрганизациям)
	Результат = Новый Массив;
	
	Для Каждого ЭлементГруппа Из МассивГрупп Цикл
		Для Каждого Организация Из ЭлементГруппа Цикл
			
			Если НЕ ЗначениеЗаполнено(ОтборПоОрганизациям) ИЛИ ОтборПоОрганизациям.Найти(Организация) <> Неопределено Тогда
				
				// Эту группу связанных организаций надо пересчитать
				Если Группировать Тогда
					// Результат в виде "массив из массивов"
					Результат.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ЭлементГруппа));
				Иначе
					// Результат в виде "массив"
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ЭлементГруппа);
				КонецЕсли;
				
				Прервать; // добавили всю группу - переходим к следующей
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Возвращает информацию о всех организациях ИБ, сгруппированную по их участию в схеме Интеркампани в указанном периоде.
//
// Параметры:
//	Дата - Дата - период расчета
//
// Возвращаемое значение:
//	Массив - элементами данного массива являются массивы организаций (СправочникСсылка.Организации),
//			 связанных между собой по схеме Интеркампани.
//	 	= если организация не связана с другими, то она будет в массиве одна.
//		= одна и та же организация может входить только в один массив - не может встречаться в результате функции несколько раз.
//
// Например,
//	- есть организации 1, 2, 3, 4, 5
//	- по Интеркампани товары перемещаются между организациями 1-3 и 3-5
//	- организация 2 в этом периоде работает "сама по себе", не связана с другими организациями
//	- по организации 4 в этом периоде не было движений по регистру СебестоимостьТоваров
// Возвращаемый функцией массив будет иметь следующий вид:
//	элемент(0) - массив (организация 1, организация 3, организация 5) - схема Интеркампани
//	элемент(1) - массив (организация 2) - "одиночная", несвязанная организация
//	элемент(2) - массив (организация 4) - несмотря на отсутствие по ней движений будет дополнена из справочника организаций
//
Функция ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата) Экспорт

	МассивГрупп = Новый Массив; // результат функции - массив из массивов организаций
	УчтенныеОрганизации = Новый Массив; // связанные по Интеркампани - их не надо выбирать из справочника организаций
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СебестоимостьТоваров.КорОрганизация КАК КорОрганизация,
	|	ВЫБОР
	|		КОГДА СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РеализацияКлиентуРеглУчет
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.Активность
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Организация КАК Организация,
	|	Организации.КорОрганизация КАК КорОрганизация
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Организация КАК Организация,
	|		Организации.КорОрганизация КАК КорОрганизация
	|	ИЗ
	|		ВТОрганизации КАК Организации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Организация,
	|		ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	ИЗ
	|		ВТОрганизации КАК Организации
	|	ГДЕ
	|		Организации.РеализацияКлиентуРеглУчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КПередаче.ОрганизацияВладелец,
	|		КПередаче.ВидЗапасовПродавца.Организация
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|			ВидЗапасовПродавца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК КПередаче
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Резервы.Организация,
	|		Резервы.КорОрганизация
	|	ИЗ
	|		РегистрНакопления.РезервыТоваровОрганизаций КАК Резервы
	|	ГДЕ
	|		Резервы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Резервы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Резервы.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		И Резервы.Количество > 0
	|	) КАК Организации
	|ГДЕ
	|	Организации.Организация <> Организации.КорОрганизация
	|	И Организации.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Организации.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	КорОрганизация";
	Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",  		 КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));

	РезультатЗапроса = Запрос.Выполнить();

	// Необходимо собрать в группы организации, которые участвовали в перепродажах или межфирменных перемещениях.
	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			ГруппаОрганизации    = НайтиВМассивеГруппОрганизаций(Выборка.Организация,    МассивГрупп);
			ГруппаКорОрганизации = НайтиВМассивеГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп);
			
			Если ГруппаОрганизации = Неопределено И ГруппаКорОрганизации = Неопределено Тогда
				
				// таких организаций еще не было в выборке - добавим обе организации в новую группу
				ДобавитьВМассивГруппОрганизаций(Выборка.Организация,    МассивГрупп, Неопределено);
				ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, МассивГрупп.Количество() - 1);
				
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				
			ИначеЕсли ГруппаОрганизации <> Неопределено И ГруппаКорОрганизации <> Неопределено Тогда
				
				// обе организации уже были в выборке
				Если ГруппаОрганизации <> ГруппаКорОрганизации Тогда
					// перенесем все организации из группы кор.организации в группу организации
					ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ГруппаОрганизации, ГруппаКорОрганизации);
				КонецЕсли;
				
			Иначе
				// одной из организаций еще не было в выборке
				Если ГруппаОрганизации = Неопределено Тогда
					// добавим организацию в группу кор. организации
					ДобавитьВМассивГруппОрганизаций(Выборка.Организация,    МассивГрупп, ГруппаКорОрганизации);
					
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				Иначе
					// добавим кор. организацию в группу организации
					ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, ГруппаОрганизации);
					
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	// Дополним остальными организациями из справочника.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Ссылка В (&УчтенныеОрганизации)
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Предопределенный";
	
	Запрос.УстановитьПараметр("УчтенныеОрганизации",        		   УчтенныеОрганизации);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Новая группа - массив с одним элементом
		ДобавитьВМассивГруппОрганизаций(Выборка.Организация, МассивГрупп, Неопределено); 
	КонецЦикла;
	
	Возврат МассивГрупп;
	
КонецФункции


Функция НайтиВМассивеГруппОрганизаций(Значение, МассивГрупп)

	Для СчетчикГрупп = 0 По МассивГрупп.Количество() - 1 Цикл
		Если МассивГрупп[СчетчикГрупп].Найти(Значение) <> Неопределено Тогда
			Возврат СчетчикГрупп;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Процедура ДобавитьВМассивГруппОрганизаций(Значение, МассивГрупп, ПозицияГруппы)

	Если ПозицияГруппы = Неопределено Тогда
		МассивГрупп.Добавить(Новый Массив);
		ПозицияГруппы = МассивГрупп.Количество() - 1;
	КонецЕсли;

	ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппы], Значение);

КонецПроцедуры

Процедура ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ПозицияГруппыКуда, ПозицияГруппыОткуда)

	Для Каждого Значение Из МассивГрупп[ПозицияГруппыОткуда] Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппыКуда], Значение);
	КонецЦикла;

	МассивГрупп.Удалить(ПозицияГруппыОткуда);

КонецПроцедуры

#КонецОбласти

#Область МетодыОценкиСтоимости

// По переданному массиву организаций определяет метод оценки стоимости.
//
// Параметры:
//	ПараметрыРасчета
//	МассивОрганизаций - Массив - организации
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - метод оценки стоимости
//
Функция ОпределитьМетодОценкиСтоимостиДляГруппыОрганизаций(ПараметрыРасчета, МассивОрганизаций)
	
	Если ПараметрыРасчета.ПредварительныйРасчет Тогда
		Возврат Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
	КонецЕсли;
	
	МетодОценкиСтоимости   	   = Перечисления.МетодыОценкиСтоимостиТоваров.ПустаяСсылка();
	ОдинаковыйМетодОценки  	   = Истина;
	ЕстьФИФОВзвешеннаяОценка   = Ложь;
	ЕстьДругиеМетодыОценки     = Ложь;
	ТекстОшибки			   	   = "";
	
	ЕстьФИФОСкользящаяБезПУ    = Ложь;
	ОрганизацииСФИФОСкользящая = Новый Массив;
	
	ОрганизацииСОшибками	   = Неопределено;
	
	Для Каждого Организация Из МассивОрганизаций Цикл

		МетодОценкиПоОрганизации = ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, Организация);

		Если ПараметрыРасчета.ПартионныйУчетВерсии22 Тогда // проверка для партионного учета версии 2.2
			
			// В МетодОценкиСтоимости будет записано или ФИФОВзвешеннаяОценка, если такой метод используется у всех организаций
			// или пустая ссылка, означающая, что у организаций используется как метод СредняяЗаМесяц, так и ФИФОСкользящаяОценка.
			Если МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка Тогда
				ЕстьФИФОВзвешеннаяОценка = Истина;
				МетодОценкиСтоимости 	 = МетодОценкиПоОрганизации;
			Иначе
				ЕстьДругиеМетодыОценки   = Истина;
			КонецЕсли;
			
		Иначе // проверка для партионного учета версии 2.1 и отключенного партионного учета
			
			// Разрешен только один общий для всех организаций метод оценки, который и будет записан в МетодОценкиСтоимости.
			Если МетодОценкиСтоимости <> МетодОценкиПоОрганизации Тогда
				Если НЕ ЗначениеЗаполнено(МетодОценкиСтоимости) Тогда 
					МетодОценкиСтоимости = МетодОценкиПоОрганизации; // первый проход цикла
				Иначе
					ОдинаковыйМетодОценки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыРасчета.ПартионныйУчетНеИспользуется
			 И МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
				
				ЕстьФИФОСкользящаяБезПУ = Истина;
				ОрганизацииСФИФОСкользящая.Добавить(Организация);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьФИФОВзвешеннаяОценка И ЕстьДругиеМетодыОценки Тогда // проверка для партионного учета версии 2.2
		ОрганизацииСОшибками = МассивОрганизаций;
		ТекстОшибки = 
			НСтр("ru = 'Недопустимое сочетание методов оценки стоимости запасов для организаций, работающих по схеме Интеркампани:
						|%Организации%.
						|Метод оценки ""ФИФО взвешенная оценка"" не может использоваться совместно с любыми другими методами оценки.
						|Настройка метода оценки стоимости выполняется в учетной политике организаций.'");
	ИначеЕсли НЕ ОдинаковыйМетодОценки Тогда // проверка для партионного учета версии 2.1
		ОрганизацииСОшибками = МассивОрганизаций;
		ТекстОшибки = 
			НСтр("ru = 'Недопустимое сочетание методов оценки стоимости запасов для организаций, работающих по схеме Интеркампани:
						|%Организации%.
			            |Для всех организаций, работающих по схеме Интеркампани, должен использоваться одинаковый метод оценки.
						|Настройка метода оценки стоимости выполняется в учетной политике организаций.'");
	ИначеЕсли ЕстьФИФОСкользящаяБезПУ Тогда
		ОрганизацииСОшибками = ОрганизацииСФИФОСкользящая;
		ТекстОшибки = 
			НСтр("ru = 'Недопустимо использование метода оценки стоимости запасов ""ФИФО (скользящая оценка)"" при выключенном партионном учете:
						|%Организации%.
						|Настройка метода оценки стоимости выполняется в учетной политике организаций.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		// Недопустимые методы оценки стоимости или их сочетание - расчет невозможен.
		ТекстОшибки = СтрЗаменить(
			ТекстОшибки,
			"%Организации%",
			ПредставлениеОрганизаций(ОрганизацииСОшибками, ", "));
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВУчетныхПолитикахОрганизаций,
			ТекстОшибки,
			,
			ОрганизацииСОшибками);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстОшибки);
			
	КонецЕсли;
	
	Возврат МетодОценкиСтоимости;

КонецФункции

// Определяет метод оценки стоимости указанной организации.
//
// Параметры:
//	ПараметрыРасчета
//	Организация - СправочникСсылка.Организации - организация
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - метод оценки стоимости
//
Функция ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, Организация)
	
	// К расчету может быть передан МассивОрганизаций, в котором содержатся не все организации, связанные по схеме Интеркампани.
	// В этом случае надо дополнить МетодыОценкиСтоимости методами оценки отсутствующих в массиве организаций.
	
	МетодОценкиПоОрганизации = ПараметрыРасчета.МетодыОценкиСтоимости.Получить(Организация);
	
	Если НЕ ЗначениеЗаполнено(МетодОценкиПоОрганизации) Тогда
		
		МетодОценкиПоОрганизации = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.МетодОценкиСтоимостиТоваровОрганизации(
			Организация,
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
		
		ПараметрыРасчета.МетодыОценкиСтоимости.Вставить(Организация, МетодОценкиПоОрганизации);
		
	КонецЕсли;
	
	Возврат МетодОценкиПоОрганизации;
	
КонецФункции

#КонецОбласти

#Область ТипыЗаписейПартий

Функция ТипыЗаписейПервичныхПартий() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.Партия);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.КорректировкаСтоимости);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода);
	
	Возврат Результат;
	
КонецФункции

Функция ТипыЗаписейКонвертацииДанных() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ПереносДанных);
	
	Возврат Результат;
	
КонецФункции

Функция НепересчитываемыеТипыЗаписей() Экспорт
	
	Результат = Новый Массив;
	
	// Типы записей первичных партий текущего периода.
	Для Каждого Элемент Из ТипыЗаписейПервичныхПартий() Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// Типы записей конвертации данных при смене режима учета.
	Для Каждого Элемент Из ТипыЗаписейКонвертацииДанных() Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// Типы записей партий прошлых периодов.
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ОстатокНЗП);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.Остаток);
	
	// Типы записей "не партий" (с нулевым количеством).
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТипыЗапасов

Функция СобственныеТипыЗапасов() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыЗапасов.Товар);
	Результат.Добавить(Перечисления.ТипыЗапасов.СобственныйТоварВПути);
	Результат.Добавить(Перечисления.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке);
	Результат.Добавить(Перечисления.ТипыЗапасов.Услуга);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

Функция ХозяйственныеОперацииВнешнихПоступлений() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ВыкупТоваровХранящихсяНаСкладе);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Константы

Функция ОписаниеКонстантыИлиФункциональнойОпции(ИмяОбъекта) Экспорт
	
	Описание = Новый Структура("Значение, Метаданные");
	
	Если Метаданные.ФункциональныеОпции.Найти(ИмяОбъекта) <> Неопределено Тогда
		Описание.Метаданные = Метаданные.ФункциональныеОпции[ИмяОбъекта];
		Описание.Значение   = ПолучитьФункциональнуюОпцию(ИмяОбъекта);
	ИначеЕсли Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
		Описание.Метаданные = Метаданные.Константы[ИмяОбъекта];
		Описание.Значение   = Константы[ИмяОбъекта].Получить();
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область ДокументыРасчетаСебестоимости

// Формирует документы расчета себестоимости для рассчитываемых организаций.
//
Процедура ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета, ПредварительныйРасчет, РегламентноеЗадание)
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.УстановитьПараметр("ОрганизацииСДвижениямиПоСебестоимости", ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости);
	
	// Выберем все не удаленные документы расчета себестоимости за расчетный период.
	// Если по организации уже существует подходящий документ расчета себестоимости, то новый документ создаваться не будет.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Ссылка.Проведен КАК Проведен,
	|	Т.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Т.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НовыйФорматДокумента,
	|	ВЫБОР
	|		КОГДА Т.Организация В (&ОрганизацииСДвижениямиПоСебестоимости)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НетДанныхДляРасчета,
	|	Т.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров.Организации КАК Т
	|ГДЕ
	|	Т.Ссылка.Дата МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)
	|	И НЕ Т.Ссылка.ПометкаУдаления
	|	И Т.Организация В (&ТекущийОтборОрганизации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	НовыйФорматДокумента УБЫВ,
	|	Проведен УБЫВ,
	|	ПредварительныйРасчет,
	|	Т.Ссылка.Дата УБЫВ";
	
	// Сохраним связь Организация - Документ расчета себестоимости, который будем пересчитывать.
	ДокументыРасчетаПоОрганизациям = Новый Соответствие;
	// Сохраним перечень документов расчета себестоимости.
	ДокументыРасчетаСебестоимости  = Новый Массив;
	// Сохраним перечень устаревших документов расчета себестоимости, которые нужно удалить.
	ДокументыКУдаления  		   = Новый Массив;
	// Сохраним все организации из ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.
	МассивОрганизацийДляРасчета    = Новый Массив;
	
	НомерГруппы = 0;
	
	Пока НомерГруппы < ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.Количество() Цикл
		
		ГруппаОрганизаций = ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани[НомерГруппы];
		
		// Получим таблицу существующих документов расчета себестоимости для группы связанных организаций.
		Запрос.УстановитьПараметр("ТекущийОтборОрганизации", ГруппаОрганизаций);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		ТаблицаДокументов.Индексы.Добавить("Организация, ПредварительныйРасчет");
		
		// Удалим все документы расчета себестоимости в "старом формате" - когда организации не было в шапке документа.
		УдалитьДокументыРасчетаСебестоимости(
			ДокументыКУдаления,
			ТаблицаДокументов,
			Новый Структура("НовыйФорматДокумента", Ложь));
		
		// Удалим все документы расчета себестоимости по организациям, по которым нет данных для расчета.
		УдалитьДокументыРасчетаСебестоимости(
			ДокументыКУдаления,
			ТаблицаДокументов,
			Новый Структура("НетДанныхДляРасчета", Истина));
		
		ВозможенРасчет = Истина;
		
		// По организации за период может оказаться несколько документов расчета себестоимости - оставим только один.
		Для Каждого ТекущаяОрганизация Из ГруппаОрганизаций Цикл
			
			МассивОрганизацийДляРасчета.Добавить(ТекущаяОрганизация);
			
			СтрокиФакт = ТаблицаДокументов.НайтиСтроки(
				Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Ложь));
			
			Если СтрокиФакт.Количество() > 0 Тогда
				// Документы предварительного расчета больше не нужны.
				УдалитьДокументыРасчетаСебестоимости(
					ДокументыКУдаления,
					ТаблицаДокументов,
					Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Истина));
			КонецЕсли;
			
			Если РегламентноеЗадание И СтрокиФакт.Количество() > 0 Тогда
				// Т.к. уже есть документы фактического расчета,
				// то предварительный расчет регламентным заданием по этой группе больше не выполняем.
				ВозможенРасчет = Ложь;
				Продолжить;
			КонецЕсли;
			
			// Оставим только один документ для расчета, самый поздний по дате (если почему-то документов осталось несколько).
			ДокументРасчета = УдалитьДокументыРасчетаСебестоимости(
				ДокументыКУдаления,
				ТаблицаДокументов,
				Новый Структура("Организация", ТекущаяОрганизация),
				Истина);
				
			ДокументыРасчетаПоОрганизациям.Вставить(ТекущаяОрганизация, ДокументРасчета);
			
		КонецЦикла;
		
		Если НЕ ВозможенРасчет Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Расчет предварительной себестоимости за %1 по %2 регламентным заданием не выполнялся,
					|т.к. уже выполнен расчет фактической себестоимости'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета),
				?(ГруппаОрганизаций.Количество() > 1, "организациям", "организации")
					+ " """ + ПредставлениеОрганизаций(ГруппаОрганизаций) + """");
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости,
				ТекстОшибки,
				ТекстОшибки,
				ГруппаОрганизаций);
			
			Для Каждого ТекущаяОрганизация Из ГруппаОрганизаций Цикл
				ДокументыРасчетаПоОрганизациям.Удалить(ТекущаяОрганизация); // расчета по группе не будет, документы не обрабатываем
			КонецЦикла;
			
			ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.Удалить(НомерГруппы);
			ПараметрыРасчета.МетодыОценкиПоГруппамОрганизаций.Удалить(НомерГруппы);
			
			Продолжить;
			
		КонецЕсли;
		
		НомерГруппы = НомерГруппы + 1;
		
	КонецЦикла;
	
	// Удалим ранее сформированные документы расчета себестоимости по организациям, по которым расчет проводить не нужно.
	МассивНеРассчитываемых = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПараметрыРасчета.МассивОрганизаций,
		МассивОрганизацийДляРасчета);
	
	Если МассивНеРассчитываемых.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ТекущийОтборОрганизации", МассивНеРассчитываемых);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		УдалитьДокументыРасчетаСебестоимости(
			ДокументыКУдаления,
			ТаблицаДокументов);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Установим блокировку на изменяемые документы.
		ДокументыКБлокировке = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДокументыКУдаления);
		
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументыКБлокировке.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументыКБлокировке.Количество() > 0 Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Ссылка КАК Документ
			|ИЗ
			|	Документ.РасчетСебестоимостиТоваров КАК Т
			|ГДЕ
			|	Т.Ссылка В (&ДокументыКБлокировке)";
			
			Запрос.УстановитьПараметр("ДокументыКБлокировке", ДокументыКБлокировке);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РасчетСебестоимостиТоваров");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Документ");
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		ОшибкиДатЗапретаИзменения = "";
		
		// Удалим ненужные документы расчета себестоимости.
		Для Каждого ТекущийДокумент Из ДокументыКУдаления Цикл
			
			ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			
			// Проверим, что документ находится в доступном для изменения периоде.
			ОписаниеОшибкиДаты = "";
			
			Если ПараметрыРасчета.ВыполняетсяОбновлениеИБ Тогда
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			ИначеЕсли ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект, ТекущийДокумент, ОписаниеОшибкиДаты) Тогда
				// Накопим описание ошибок и потом вызовем одно исключение для всех документов.
				ОшибкиДатЗапретаИзменения = ОшибкиДатЗапретаИзменения + ?(ОшибкиДатЗапретаИзменения = "", "", "
					|") + ПротоколРасчетаПартийИСебестоимости.ПредставлениеМногострочногоТекста(ОписаниеОшибкиДаты);
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
			// Очистим задание к расчету, которое запишется из события в модуле набора записей.
			НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ТекущийДокумент);
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
		// Создадим новые или обновим существующие документы расчета себестоимости по организациям.
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументОбъект = КлючИЗначение.Значение.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.РасчетСебестоимостиТоваров.СоздатьДокумент();
			КонецЕсли;
			
			ДанныеЗаполненияДокумента = Новый Структура;
			ДанныеЗаполненияДокумента.Вставить("Дата", 					ПараметрыРасчета.РасчетныйПериод.КонецПериода);
			ДанныеЗаполненияДокумента.Вставить("Организация", 			КлючИЗначение.Ключ);
			ДанныеЗаполненияДокумента.Вставить("ПредварительныйРасчет", ПредварительныйРасчет);
			
			ДанныеЗаполненияДокумента.Вставить("МетодОценки",
				ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, ДанныеЗаполненияДокумента.Организация));
			
			// В шапке документа будет указана организация, по которой рассчитывается себестоимость.
			// Она же будет продублирована в табличной части документа.
			ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);
			
			// Проверим, что документ находится в доступном для изменения периоде.
			ОписаниеОшибкиДаты = "";
			
			Если ПараметрыРасчета.ВыполняетсяОбновлениеИБ Тогда
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			ИначеЕсли ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект, КлючИЗначение.Значение, ОписаниеОшибкиДаты) Тогда
				// Накопим описание ошибок и потом вызовем одно исключение для всех документов.
				ОшибкиДатЗапретаИзменения = ОшибкиДатЗапретаИзменения + ?(ОшибкиДатЗапретаИзменения = "", "", "
					|") + ПротоколРасчетаПартийИСебестоимости.ПредставлениеМногострочногоТекста(ОписаниеОшибкиДаты);
				Продолжить;
			КонецЕсли;
				
			// Записываем документ проведенным, при этом его старые движения останутся до окончания расчета.
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			// Запомним документ
			ДокументыРасчетаСебестоимости.Добавить(ДокументОбъект.Ссылка);
			ДокументыРасчетаПоОрганизациям[КлючИЗначение.Ключ] = ДокументОбъект.Ссылка;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОшибкиДатЗапретаИзменения) Тогда
			 // Исключение будет отловлено ниже по коду этой процедуры, вместе с другими ошибками записи документов.
			ВызватьИсключение ОшибкиДатЗапретаИзменения;
		КонецЕсли;
		
		ПараметрыРасчета.Вставить("ДокументыРасчетаСебестоимости",  ДокументыРасчетаСебестоимости);
		ПараметрыРасчета.Вставить("ДокументыРасчетаПоОрганизациям", ДокументыРасчетаПоОрганизациям);
		
		// Документ расчета себестоимости больше не имеет движений по регистрам:
		//	- ВыручкаИСебестоимостьПродаж
		//	- Закупки
		// Поэтому, если пересчитываем прошлый период, то движения документа "Расчет себестоимости товаров" по этим регистрам надо очистить.
		
		Запрос.УстановитьПараметр("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.%1 КАК Т
		|ГДЕ
		|	Т.Регистратор В (&ДокументыРасчетаСебестоимости)";
		
		СтруктураРегистров = Новый Структура("ВыручкаИСебестоимостьПродаж, Закупки");
		
		Для Каждого КлючИЗначение Из СтруктураРегистров Цикл
			
			ИмяРегистра = КлючИЗначение.Ключ;
			
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяРегистра);
			
			ЗаписатьДвиженияПоРегистру(Запрос, РегистрыНакопления[ИмяРегистра],	ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось инициализировать документы расчета себестоимости по причине:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости,
			ТекстДляПротокола);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
		
	КонецПопытки;
	
	// Сформируем временную таблицу ВТДокументыРасчетаСебестоимости
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.МоментВремени,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимости
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК Т
	|ГДЕ
	|	Т.Ссылка В (&ДокументыРасчетаСебестоимости)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Проверяет наличие регламентных документов расчета себестоимости товаров.
//
Функция ЕстьДокументыРасчетаСебестоимости(ПериодРасчета, МассивОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РассчитанныеОрганизации
	|		ПО Организации.Ссылка = РассчитанныеОрганизации.Организация
	|			И (РассчитанныеОрганизации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РассчитанныеОрганизации.Ссылка.Проведен)
	|			И (НЕ РассчитанныеОрганизации.Ссылка.ПредварительныйРасчет)
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|	И РассчитанныеОрганизации.Организация ЕСТЬ NULL 
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

// Выполняет удаление лишних документов расчета себестоимости из таблицы документов.
//
Функция УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления, ТаблицаДокументов, Отбор = Неопределено, ОставитьПервый = Ложь)
	
	ОставленныйДокумент = Неопределено;
	
	Если Отбор = Неопределено Тогда
		СтрокиТаблицы = ТаблицаДокументов; // вся таблица
	ИначеЕсли ТипЗнч(Отбор) = Тип("Структура") Тогда
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Отбор); // отобранные строки
	Иначе
		СтрокиТаблицы = Отбор; // уже готовый массив строк
	КонецЕсли;
	
	Индекс = 0;
	
	Для Каждого ТекущаяСтрока Из СтрокиТаблицы Цикл
		
		Индекс = Индекс + 1;
		Если ОставитьПервый И Индекс = 1 Тогда
			ОставленныйДокумент = ТекущаяСтрока.Ссылка;
			Продолжить;
		КонецЕсли;
		
		ДокументыКУдаления.Добавить(ТекущаяСтрока.Ссылка);
		
		ТаблицаДокументов.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ОставленныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ПоследовательностиРасчета

// Возвращает фактическое требуемое начало периода расчета.
//
Функция НачалоПериодаРасчета(Дата, МассивОрганизаций) Экспорт
	Перем Результат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	МИНИМУМ(Задания.Месяц) КАК Месяц
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|		ПО Организации.Ссылка = Задания.Организация
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Периоды.Месяц) КАК НачалоПериодаРасчета
	|ИЗ
	|	ВТПериоды КАК Периоды
	|ГДЕ
	|	Периоды.Месяц ЕСТЬ НЕ NULL 
	|	И Периоды.Месяц <= &Дата
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(Периоды.Месяц) ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Дата", 			   Дата);
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = ?(ЗначениеЗаполнено(Выборка.НачалоПериодаРасчета), НачалоМесяца(Выборка.НачалоПериодаРасчета), Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = КонецМесяца(Дата) + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает пустую схему пересчета партий и себестоимости.
//
// Возвращаемое значение:
//	ТаблицаЗначений - пустая таблица значений, состав колонок см. в теле функции
//
Функция ПустаяСхемаРасчетаПартий() Экспорт
	
	СхемаРасчета = Новый ТаблицаЗначений; // результат выполнения этой функции
	
	СхемаРасчета.Колонки.Добавить("Дата", 					  Новый ОписаниеТипов("Дата"));   // требуемый период пересчета
	СхемаРасчета.Колонки.Добавить("Организации", 			  Новый ОписаниеТипов("Массив")); // массив организаций, которые надо пересчитать в этом периоде
	СхемаРасчета.Колонки.Добавить("ПредставлениеОрганизаций", Новый ОписаниеТипов("Строка")); // строковое представление организаций
	СхемаРасчета.Колонки.Добавить("ИзмененоДокументов", 	  Новый ОписаниеТипов("Число"));  // для информации, количество измененных документов в этом периоде по этим организациям
	
	СхемаРасчета.Индексы.Добавить("Дата");
	
	Возврат СхемаРасчета;
	
КонецФункции

// Возвращает информацию о том, в каких периодах и по каким организациям необходимо пересчитать партии и себестоимость.
// Параметрами функции являются требуемые отборы по дате и организациям,
// а результат - это необходимые по факту (по данным ИБ) пересчеты.
// Например, может получится так, что
//	- пересчитать хочется только одну организацию в текущем месяце,
//  - но для этого надо пересчитать все организации начиная с прошлого года,
//	  т.к. по ним есть записи в регистре ЗаданияКРасчетуСебестоимости и организации связаны по схеме Интеркампани
//
// Параметры:
//	Дата - Дата - конец периода (месяца), в котором надо выполнить пересчет
//	ОтборОрганизации - СправочникСсылка.Организации, Массив - организации, по которым надо выполнить пересчет
//	РазделительВПредставлении - Строка - символ-разделитель в строковом представлении списка организаций
//	НомерЗадания - Число - Номер для фильтрация записей в регистре ЗаданияКРасчетуСебестоимости.
//
// Возвращаемое значение:
//	ТаблицаЗначений - схема выполнения пересчета партий и себестоимости, описание см. в ПустаяСхемаРасчетаПартий()
// 	Таблица отсортирована по колонке Дата и содержит все периоды (без пропусков),
// 	начиная с самой ранней необходимой даты пересчета и до даты из параметра Дата.
// 	В таблице не будет строк если пересчет не требуется,
// 	т.е. если параметр Дата больше, чем даты в записях регистра ЗаданияКРасчетуСебестоимости.
//
Функция СхемаРасчетаПартий(Знач Дата = Неопределено, ОтборОрганизации = Неопределено, РазделительВПредставлении = Неопределено, НомерЗадания = 0)Экспорт
	
	Дата 			  		= КонецМесяца(?(НЕ ЗначениеЗаполнено(Дата), ТекущаяДатаСеанса(), Дата));
	МассивОрганизаций 		= ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);
	ПолныйМассивОрганизаций = СвязиОрганизацийПоСхемеИнтеркампани(Дата, МассивОрганизаций);
	
	СхемаРасчета = ПустаяСхемаРасчетаПартий(); // результат выполнения этой функции
	
	ДатыПересчетаПоОрганизациям = Новый Соответствие; // Организация - Дата, с которой по ней необходим пересчет
	СамаяРанняяДатаПересчета    = КонецМесяца(КонецМесяца(Дата) + 1);
	
	ТребуетсяПересчетПоИсходнымОрганизациям = Ложь;
	
	// Запомним даты начала пересчета по каждой организации.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация КАК Организация,
	|	МИНИМУМ(КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	Задания.Месяц <= &Дата
	|	И (Задания.НомерЗадания <= &НомерЗадания ИЛИ &ПоВсемНомерамЗаданий)
	|	И НЕ Организации.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("ПоВсемНомерамЗаданий", НомерЗадания = 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПолныйМассивОрганизаций.Найти(Выборка.Организация) <> Неопределено Тогда
			ТребуетсяПересчетПоИсходнымОрганизациям = Истина;
		КонецЕсли;
		
		ДатыПересчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Месяц);
		СамаяРанняяДатаПересчета = Мин(СамаяРанняяДатаПересчета, Выборка.Месяц);
		
	КонецЦикла;
	
	// Соберем статистику изменения документов - для понимания интенсивности изменения документов "задним числом".
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ) КАК Месяц,
	|	Задания.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задания.Документ) КАК ИзмененоДокументов
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	Задания.Документ <> НЕОПРЕДЕЛЕНО
	|	И Задания.Месяц <= &Дата
	|	И (Задания.НомерЗадания <= &НомерЗадания ИЛИ &ПоВсемНомерамЗаданий)
	|	И НЕ Организации.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ),
	|	Задания.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Организация";
	
	ТаблицаИзмененныхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаИзмененныхДокументов.Индексы.Добавить("Месяц, Организация");
	
	// Добавим в схему расчета строки для каждого периода, начиная с самого раннего и до рассчитываемого периода.
	ОбрабатываемаяДата = СамаяРанняяДатаПересчета;
	
	Пока ОбрабатываемаяДата <= Дата Цикл
		
		ДобавитьСтрокуСхемыРасчетаПартий(
			СхемаРасчета,
			ОбрабатываемаяДата,
			?(ОбрабатываемаяДата = Дата, ПолныйМассивОрганизаций, Новый Массив));
		
		ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);
		
	КонецЦикла;
	
	// Заполним итеративно организации для перерасчета.
	ОбрабатываемаяДата = Макс(СамаяРанняяДатаПересчета, Дата);
	
	Пока ОбрабатываемаяДата <= Дата Цикл
		
		ТекущаяСтрока    = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
		ПредыдущаяСтрока = СхемаРасчета.Найти(НачалоМесяца(ОбрабатываемаяДата) - 1, "Дата");
		
		Если ПредыдущаяСтрока <> Неопределено Тогда
			
			ПоявилисьИзмененияВМассивеОрганизаций = Ложь;
			
			// Организации, которые пересчитывались в прошлом периоде, надо пересчитать и в текущем.
			Для Каждого ПредыдущаяОрганизация Из ПредыдущаяСтрока.Организации Цикл
				Если ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТекущаяСтрока.Организации, ПредыдущаяОрганизация) Тогда
					ПоявилисьИзмененияВМассивеОрганизаций = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// Дополним массив рассчитываемых организаций связанными с ними организациями.
			Если ПоявилисьИзмененияВМассивеОрганизаций Тогда
				ТекущаяСтрока.Организации = СвязиОрганизацийПоСхемеИнтеркампани(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			КонецЕсли;
			
		КонецЕсли;
		
		ИзмененнаяОбрабатываемаяДата = ОбрабатываемаяДата;
		
		// Проверим необходимость пересчета организаций текущего периода в более ранних периодах.
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл
			
			ДатаПересчетаПоОрганизации = ДатыПересчетаПоОрганизациям[ТекущаяОрганизация];
			
			Если ЗначениеЗаполнено(ДатаПересчетаПоОрганизации) И ДатаПересчетаПоОрганизации < ОбрабатываемаяДата Тогда
				
				СтрокаПоДатеОрганизации = СхемаРасчета.Найти(ДатаПересчетаПоОрганизации, "Дата");
				
				Если ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(СтрокаПоДатеОрганизации.Организации, ТекущаяОрганизация) Тогда
					// Такая организация в том периоде еще не была отобрана для пересчета.
					ИзмененнаяОбрабатываемаяДата = Мин(ИзмененнаяОбрабатываемаяДата, ДатаПересчетаПоОрганизации);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзмененнаяОбрабатываемаяДата < ОбрабатываемаяДата Тогда
			
			// Следующий цикл начнем с самого раннего измененного прошлого периода.
			ОбрабатываемаяДата = ИзмененнаяОбрабатываемаяДата;
			
			// Дополним в нем массив рассчитываемых организаций связанными с ними организациями.
			ТекущаяСтрока = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
			ТекущаяСтрока.Организации = СвязиОрганизацийПоСхемеИнтеркампани(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			
		Иначе
			
			// В прошлых периодах ничего не поменялось - переходим к следующему периоду.
			ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока СхемаРасчета.Количество() > 0 И СхемаРасчета[0].Организации.Количество() = 0 Цикл
		// Удалим строки ранних периодов, в которых нет организаций для пересчета.
		СхемаРасчета.Удалить(0);
	КонецЦикла;
	
	Если СхемаРасчета.Количество() > 0 И ЗначениеЗаполнено(МассивОрганизаций) Тогда
		
		// Если в составленную схему расчета (по И)
		// - не попала ни одна организация, не входящая исходный отбор (с учетом Интеркампани)
		// - по самим организациям, входящим с исходный отбор, пересчет не требуется
		// то выполнять расчет не требуется.
		ПересечениеМассивов = ОбщегоНазначенияУТКлиентСервер.ПересечениеМассивов(
			ПолныйМассивОрганизаций,
			СхемаРасчета[СхемаРасчета.Количество() - 1].Организации);
		
		Если ПересечениеМассивов.Количество() = ПолныйМассивОрганизаций.Количество() // только организации из исходного отбора
		 И НЕ ТребуетсяПересчетПоИсходнымОрганизациям Тогда // пересчет по этим организациям не требуется
			
			СхемаРасчета.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Для Каждого ТекущаяСтрока Из СхемаРасчета Цикл
		
		// Сформируем строковые представления пересчитываемых организаций.
		СписокОрганизаций.ЗагрузитьЗначения(ТекущаяСтрока.Организации);
		СписокОрганизаций.СортироватьПоЗначению();
		
		ТекущаяСтрока.Организации 			   = СписокОрганизаций.ВыгрузитьЗначения();
		ТекущаяСтрока.ПредставлениеОрганизаций = ПредставлениеОрганизаций(ТекущаяСтрока.Организации, РазделительВПредставлении);
		ТекущаяСтрока.ИзмененоДокументов	   = 0;
		
		// Заполним статистику изменения документов за период по массиву организаций.
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл
			
			СтрокиДокументов = ТаблицаИзмененныхДокументов.НайтиСтроки(
				Новый Структура("Месяц, Организация", ТекущаяСтрока.Дата, ТекущаяОрганизация));
				
			Если СтрокиДокументов.Количество() = 1 Тогда
				ТекущаяСтрока.ИзмененоДокументов = ТекущаяСтрока.ИзмененоДокументов + СтрокиДокументов[0].ИзмененоДокументов;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СхемаРасчета;
	
КонецФункции

Процедура ДобавитьСтрокуСхемыРасчетаПартий(СхемаРасчета, Дата, МассивОрганизаций, ЗаполнятьПредставление = Ложь) Экспорт
	
	НоваяСтрока = СхемаРасчета.Добавить();
	НоваяСтрока.Дата = КонецМесяца(Дата);
	НоваяСтрока.Организации = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивОрганизаций);
	
	Если ЗаполнятьПредставление Тогда
		НоваяСтрока.ПредставлениеОрганизаций = ПредставлениеОрганизаций(НоваяСтрока.Организации);
	КонецЕсли;
	
КонецПроцедуры

	
// Возвращает увеличенный перед началом расчета номер задания к расчету.
//
Функция УвеличитьНомерЗаданияКРасчетуСебестоимости() Экспорт
	
	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуСебестоимости.УвеличитьНомерЗадания();
	
	Возврат НомерЗадания;
	
КонецФункции

// Устанавливает признак окончания расчета партий в указанном периоде.
//
Процедура УвеличитьПериодРасчетаСебестоимости(РассчитанныйПериод, МассивОрганизаций, ВременныеТаблицы, ПараметрыРасчета = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачалоПериодаРасчета(РассчитанныйПериод, МассивОрганизаций) < НачалоМесяца(РассчитанныйПериод) Тогда
		Возврат; // есть более ранние нерассчитанные периоды
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ЗаданияКОчистке
	|ИЗ
	|	ИсходныеЗадания КАК ИсходныеЗадания
	|ГДЕ
	|	ИсходныеЗадания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СледующийМесяц КАК Месяц,
	|	МАКСИМУМ(ЗаданияКОчистке.НомерЗадания) КАК НомерЗадания,
	|	ЗаданияКОчистке.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ПОМЕСТИТЬ НовыеГраницы
	|ИЗ
	|	ЗаданияКОчистке КАК ЗаданияКОчистке
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданияКОчистке.Организация 
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ИсходныеЗаданияВрем
	|ИЗ
	|	ИсходныеЗадания КАК ИсходныеЗадания
	|	
	|ГДЕ
	|	НЕ (ИсходныеЗадания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НовыеГраницы.Месяц КАК Месяц,
	|	НовыеГраницы.НомерЗадания КАК НомерЗадания,
	|	НовыеГраницы.Организация КАК Организация,
	|	НовыеГраницы.Документ КАК Документ
	|ИЗ
	|	НовыеГраницы КАК НовыеГраницы
	|;
	|////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходныеЗадания
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ИсходныеЗадания
	|ИЗ
	|	ИсходныеЗаданияВрем КАК ИсходныеЗадания
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияКОчистке.Месяц,
	|	ЗаданияКОчистке.НомерЗадания,
	|	ЗаданияКОчистке.Организация,
	|	ЗаданияКОчистке.Документ
	|ИЗ
	|	ЗаданияКОчистке КАК ЗаданияКОчистке
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеГраницы.Месяц КАК Месяц,
	|	НовыеГраницы.НомерЗадания КАК НомерЗадания,
	|	НовыеГраницы.Организация КАК Организация,
	|	НовыеГраницы.Документ КАК Документ
	|ИЗ
	|	НовыеГраницы КАК НовыеГраницы
	|");
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("СледующийМесяц",    КонецМесяца(РассчитанныйПериод) + 1);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	НачатьТранзакцию();
	
	Попытка
		
		// Очистим рассчитанные периоды.
		Выборка = Результаты[5].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Записать(Истина);
		КонецЦикла;
		
		// Сдвинем период расчета.
		Выборка = Результаты[6].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отметить период %1 как рассчитанный по причине:
				|		%2'"),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(РассчитанныйПериод),	
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Если ПараметрыРасчета = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		Иначе
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВыполненияРегламентныхОпераций,
				ТекстСообщения,
				ТекстСообщения);
		КонецЕсли;
		
	КонецПопытки;
	
	УничтожитьВременныеТаблицы(ВременныеТаблицы, "ЗаданияКОчистке, НовыеГраницы, ИсходныеЗаданияВрем");
	
КонецПроцедуры

// Устанавливает признак необходимости распределению НДС в указанном периоде.
//
Процедура СформироватьЗаданияКРаспределениюНДС(РассчитанныйПериод, МассивОрганизаций) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация
	|ПОМЕСТИТЬ ПартииНаЭкспорт
	|ИЗ
	// Регистры, используемые только в партионном учете версии 2.1
	|	(ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация
	|	ИЗ 
	|		РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В (&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Партии.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация
	|	ИЗ 
	|		РегистрНакопления.ПартииПроизводственныхЗатрат КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В (&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров))
	|
	// Регистры, используемые только в партионном учете версии 2.2
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация
	|	ИЗ 
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В (&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.КорВидДеятельностиНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров))
	|
	|	) КАК Партии
	|;
	|
	|//////////////////////////////////////////////////////////
	// Регистры, используемые во всех версиях партионного учета
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Период            КАК Период,
	|	Партии.Организация       КАК Организация,
	|	Партии.СтатьяРасходов    КАК СтатьяРасходов,
	|	Партии.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ПартииПрочихРасходов
	|ИЗ
	|	РегистрНакопления.ПартииПрочихРасходов КАК Партии
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Организация В (&МассивОрганизаций)
	|	И Партии.Активность
	|	И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов,
	|	Организация
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Месяц КАК Месяц,
	|	Задания.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеНДС) КАК Операция
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(
	|			КОНЕЦПЕРИОДА(НДССостояниеРеализации0.ДатаПодтверждения, КВАРТАЛ), 
	|			МЕСЯЦ)                                 КАК Месяц,
	|		ПартииНаЭкспорт.Организация                КАК Организация
	|	ИЗ
	|		ПартииНаЭкспорт КАК ПартииНаЭкспорт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.НДССостояниеРеализации0 КАК НДССостояниеРеализации0
	|		ПО
	|			ПартииНаЭкспорт.Организация = НДССостояниеРеализации0.Организация
	|			И ПартииНаЭкспорт.Регистратор = НДССостояниеРеализации0.ДокументРеализации
	|	ГДЕ
	|		НДССостояниеРеализации0.Состояние В ( 
	|			ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0),
	|			ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(
	|			КОНЕЦПЕРИОДА(Таблица.Период, КВАРТАЛ), 
	|			МЕСЯЦ)                                 КАК Месяц,
	|		Таблица.Организация                        КАК Организация
	|	ИЗ
	|		ПартииПрочихРасходов КАК Таблица
	|	ГДЕ
	|		Таблица.СтатьяРасходов = НЕОПРЕДЕЛЕНО
	|		ИЛИ Таблица.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(
	|			КОНЕЦПЕРИОДА(Таблица.Период, КВАРТАЛ), 
	|			МЕСЯЦ)                                 КАК Месяц,
	|		Таблица.Организация                        КАК Организация
	|	ИЗ
	|		ПартииПрочихРасходов КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО
	|			Таблица.СтатьяРасходов = СтатьиРасходов.Ссылка
	|			И СтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
	|	) КАК Задания
	|ГДЕ
	|	Задания.Месяц >= &НачалоПериода
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

// Устанавливает признак необходимости формирования записей книги покупок/продаж в указанном периоде.
//
Процедура СформироватьЗаданияКФормированиюЗаписейКнигиПокупокПродаж(РассчитанныйПериод, МассивОрганизаций) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Месяц КАК Месяц,
	|	Партии.Организация КАК Организация,
	|	Партии.СчетФактура КАК СчетФактура
	|ИЗ
	// Регистры, используемые в партионном учете версии 2.1
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) КАК Месяц,
	|		Партии.Организация КАК Организация,
	|		Партии.ДокументПоступления КАК СчетФактура
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступления
	|	ИЗ
	|		РегистрНакопления.ПартииЗатратНаВыпуск КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступленияРасходов
	|	ИЗ
	|		РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступления
	|	ИЗ
	|		РегистрНакопления.ПартииПроизводственныхЗатрат КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступления
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеНаКомиссию КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступленияРасходов
	|	ИЗ
	|		РегистрНакопления.ПартииПрочихРасходов КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	// Регистры, используемые в партионном учете версии 2.2
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступления
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.ВидДеятельностиНДС <> Партии.КорВидДеятельностиНДС)
	|			ИЛИ Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступленияРасходов
	|	ИЗ
	|		РегистрНакопления.ПартииПрочихРасходов КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> Партии.ВидДеятельностиНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	// Партии, по которым ранее было зафиксировано изменение вида деятельности
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(НДСПредъявленный.Период, МЕСЯЦ),
	|		НДСПредъявленный.Организация,
	|		НДСПредъявленный.СчетФактура
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ГДЕ
	|		НДСПредъявленный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НДСПредъявленный.Организация В(&МассивОрганизаций)
	|		И НДСПредъявленный.Событие В (
	|				ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ИзменениеВидаДеятельностиНДС),
	|				ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ИсключениеНДСИзСтоимости),
	|				ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость),
	|				ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.РеализацияПоСтавке0))
	|		И НДСПредъявленный.Активность
	|		И НДСПредъявленный.РегламентнаяОперация
	|
	|) КАК Партии
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Организация,
	|	СчетФактура
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

#КонецОбласти

#Область ДействияСОбъектомСПерехватомСообщений

// Возвращает текст сообщений об ошибках, выданных при проверке заполнения объекта.
//
// Параметры:
//	ПроверяемыйОбъект - ДокументОбъект - документ, для которого надо выполнить проверку заполнения.
//	ПрефиксСообщения - Строка - символы, которые надо вывести перед каждым сообщением об ошибке.
//
// Возвращаемое значение:
//	Строка - многострочный текст сообщений
//
Функция ПроверитьЗаполнениеОбъектаСПерехватомСообщений(ПроверяемыйОбъект, ПрефиксСообщения = "") Экспорт
	
	ТекстСообщения = "";
	
	ПредыдущиеСообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Если НЕ ПроверяемыйОбъект.ПроверитьЗаполнение() Тогда 

		ВсеСообщения = ПолучитьСообщенияПользователю(Истина);
		
		// Сообщения, выведенные при проверке заполнения объекта, сохраним в ТекстСообщения.
		Для НомерСообщения = ПредыдущиеСообщения.Количество() По ВсеСообщения.Количество() - 1 Цикл
			
			ТекущееСообщение = ВсеСообщения[НомерСообщения];
			
			ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", "
				|") + ПрефиксСообщения + ТекущееСообщение.Текст;
			
		КонецЦикла;
		
		// Вернем предыдущие сообщения в буфер сообщений.
		Для НомерСообщения = 0 По ПредыдущиеСообщения.Количество() - 1 Цикл
			
			ТекущееСообщение = ВсеСообщения[НомерСообщения];
			
			ТекущееСообщение.Сообщить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращает текст сообщений об ошибках, выданных при проведении документа.
//
// Параметры:
//	ПроводимыйДокумент - ДокументОбъект - документ, который надо провести.
//	ПрефиксСообщения - Строка - символы, которые надо вывести перед каждым сообщением об ошибке.
//
// Возвращаемое значение:
//	Строка - многострочный текст сообщений
//
Функция ПровестиДокументСПерехватомСообщений(ПроводимыйДокумент, ПрефиксСообщения = "") Экспорт
	
	ТекстСообщения = "";
	БылиОшибки = Ложь;
	
	ПредыдущиеСообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Попытка
		ПроводимыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		БылиОшибки = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если НЕ БылиОшибки Тогда
		Возврат ТекстСообщения;
	КонецЕсли;
	
	ВсеСообщения = ПолучитьСообщенияПользователю(Истина);
	
	// Сообщения, выведенные при проведении объекта, сохраним в ТекстСообщения.
	Для НомерСообщения = ПредыдущиеСообщения.Количество() По ВсеСообщения.Количество() - 1 Цикл
		
		ТекущееСообщение = ВсеСообщения[НомерСообщения];
		
		ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", "
			|") + ПрефиксСообщения + ТекущееСообщение.Текст;
		
	КонецЦикла;
	
	// Вернем предыдущие сообщения в буфер сообщений.
	Для НомерСообщения = 0 По ПредыдущиеСообщения.Количество() - 1 Цикл
		
		ТекущееСообщение = ВсеСообщения[НомерСообщения];
		
		ТекущееСообщение.Сообщить();
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти



#Область ПроцедурыВызываемыеИзРегистров

// Возвращает признак записи движений по регистру механизмом расчета партий и себестоимости.
//
// Параметры:
//	НаборЗаписей - набор записей регистра
//
// Возвращаемое значение:
//	Булево - Истина, если движения записываются регламентной операцией закрытия месяца
//
Функция ДвиженияЗаписываютсяРасчетомПартийИСебестоимости(НаборЗаписей) Экспорт
	
	// Проверим наличие служебного дополнительного свойства у набора записей
	Возврат НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());
	
КонецФункции

// Вызывается ПередЗаписью набора записей регистра - сохраняет движения документа, сформированные расчетом партий и себестоимости.
// Такие движения имеют реквизит РасчетПартий = Истина или РасчетСебестоимости = Истина.
// При перепроведении документа эти движения добавляются к набору движений, сформированному самим документом.
//
// Параметры:
//	НаборЗаписей - НаборЗаписейРегистраНакопления - свойство ЭтотОбъект модуля набора записей
//	Замещение - Булево - режим записи набора (параметр события ПередЗаписью)
//
Процедура СохранитьДвиженияСформированныеРасчетомПартийИСебестоимости(НаборЗаписей, Замещение) Экспорт
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().НеСохранятьРасчетныеДвижения Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Замещение Тогда
		Возврат; // движения, сформированные расчетом партий и себестоимости, не затираются
	КонецЕсли;
	
	Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ТочноНужноСохранитьДвижения") Тогда
		Если (НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДатаРегистратора")
		 ИЛИ НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("РежимЗаписи")) 
		 ИЛИ НаборЗаписей.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Возврат; // движения, сформированные расчетом партий и себестоимости, надо удалить
		КонецЕсли;
	КонецЕсли;
	
	// Готовим вспомогательные данные
	ОписаниеРегистра = СформироватьОписаниеРегистра(НаборЗаписей.Метаданные());
	
	Если ОписаниеРегистра.ЕстьРасчетСебестоимости И ОписаниеРегистра.ЕстьРасчетПартий Тогда
		ТекстОтборРасчетныеДвижения = "И (Т.РасчетСебестоимости ИЛИ Т.РасчетПартий)";
	ИначеЕсли ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
		ТекстОтборРасчетныеДвижения = "И Т.РасчетСебестоимости";
	ИначеЕсли ОписаниеРегистра.ЕстьРасчетПартий Тогда
		Если НЕ УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
			// Для регистров партионного учета при использовании партионного учета ниже версии 2.2
			// сохранить оффлайновые движения не получится, т.к. у них не заполняется реквизит "РасчетПартий".
			Возврат;
		КонецЕсли;
		ТекстОтборРасчетныеДвижения = "И Т.РасчетПартий";
	Иначе
		// Регистр не обслуживается расчетом партий и себестоимости
		Возврат;
	КонецЕсли;
	
	ТекстОтборРасчетныеДвижения = ТекстОтборРасчетныеДвижения + "
		|	И Т.Активность";
	
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
		ТекстОтборРасчетныеДвижения = ТекстОтборРасчетныеДвижения + "
		|	И НЕ Т.ВидИсточника В (
		|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетБаланса))";
	КонецЕсли;
	
	ТекстПоляОсновнойТаблицыРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "
		|	Т.");
	
	// Определим периоды сохраняемых движений - это период самого документа плюс периоды его первичных движений.
	МассивПериодов = Новый Массив;
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ДатаРегистратора") Тогда
		МассивПериодов.Добавить(НачалоМесяца(НаборЗаписей.ДополнительныеСвойства.ДатаРегистратора));
	КонецЕсли;
	
	ПериодыДвижений = НаборЗаписей.Выгрузить(, "Период");
	ПериодыДвижений.Свернуть("Период", "");
	
	Для Каждого ТекСтр Из ПериодыДвижений Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивПериодов, НачалоМесяца(ТекСтр.Период));
	КонецЦикла;
	
	// Готовим запрос для выборки движений, сформированных расчетом партий и себестоимости
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", 	Регистратор);
	Запрос.УстановитьПараметр("МассивПериодов", МассивПериодов);
	
	ТекстОтборПериод = "И НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) В (&МассивПериодов)";
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		
		ТекстОтборПериод = "И (НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) В (&МассивПериодов) ИЛИ Т.Период <= &КонецПериода)";
		Запрос.УстановитьПараметр("КонецПериода", НаборЗаписей.ДополнительныеСвойства.ДополнитьДвижениямиИзИБЗаПериод.КонецПериода);
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ %1
	|ИЗ
	|	РегистрНакопления.%2 КАК Т
	|ГДЕ
	|	Т.Регистратор = &Регистратор
	|	%3
	|	%4
	|";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ТекстПоляОсновнойТаблицыРегистра,
		ОписаниеРегистра.ИмяРегистра,
		ТекстОтборПериод,
		ТекстОтборРасчетныеДвижения);
	
	// Дополним набор записей документа движениями, сформированных расчетом партий и себестоимости
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзДокументов

// Устанавливает параметры запроса выборки данных для проведения по регистру СебестоимостьТоваров.
//
Процедура ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты) Экспорт
	
	Если Запрос.Параметры.Свойство("ПараметрыПартийИСебестоимостиИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Период") Тогда
		Период = Реквизиты.Период;
	Иначе
		Период = Реквизиты.Дата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПартионныйУчетНеИспользуется",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоМесяца(Период)));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии21",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоМесяца(Период)));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(Период)));
		
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.УправленческийУчетОрганизаций(НачалоМесяца(Период)));
	
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Организация")
	 И ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		
		МетодОценки = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.МетодОценкиСтоимостиТоваровОрганизации(
			Реквизиты.Организация, НачалоМесяца(Период));
		
		Запрос.УстановитьПараметр("ФИФОСкользящаяОценка",
			(МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка));
		
	Иначе
		
		Запрос.УстановитьПараметр("ФИФОСкользящаяОценка", Ложь);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Сделка") Тогда
		Запрос.УстановитьПараметр("Сделка", Реквизиты.Сделка);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ОбособленныйУчетТоваровПоСделке") Тогда
		Запрос.УстановитьПараметр("ОбособленныйУчетТоваровПоСделке", Реквизиты.ОбособленныйУчетТоваровПоСделке);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ВариантОбособленногоУчетаТоваров") Тогда
		Запрос.УстановитьПараметр("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходовРегл", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходовРегл"));
	
	ИспользуетсяУправлениеВНА_2_4 = Ложь;
	Запрос.УстановитьПараметр("ИспользуетсяУправлениеВНА_2_4", ИспользуетсяУправлениеВНА_2_4);
	
	Запрос.УстановитьПараметр("ПараметрыПартийИСебестоимостиИнициализированы", Истина);
	
КонецПроцедуры

// Проверяет наличие изменений в табличных частях документа.
// Табличная часть документа-объекта сворачивается по суммовым/количественным реквизитам
// и сверяется с табличной частью документа в ИБ.
// Если в табличной части документа есть реквизит-дата, то определяется его минимальное значение в измененных строках.
// При этом строки, в которых дата не заполнена, на модифицированность не проверяются.
// 
// Параметры:
//	ДокументОбъект - проверяемый документ
//	ОписаниеТабличныхЧастей - Структура
//		Ключ - имя табличной части
//		Значение - Структура с обязательными ключами
//			"Ресурсы" - в строковом значении этого ключа через запятую перечисляются суммовые и количественные реквизиты табличной части
//			"Дата"    - в строковом значении этого ключа указывается имя реквизита с датой (если даты нет, то значение не заполняется)
//
// Возвращаемое значение:
//	Структура с ключами
//		ЕстьИзменения - Булево - признак наличия изменений в табличной части
//		Дата - Дата или Неопределено - минимальное значение реквизита даты в измененных строка табличной части
//
Функция ИзмененыТабличныеЧастиДокумента(ДокументОбъект, ОписаниеТабличныхЧастей) Экспорт
	
	Результат = Новый Структура("ЕстьИзменения, Дата", Ложь, Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаДокумент = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|%ПоляТаблицы
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|ВЫБРАТЬ
	|%ПоляСвернутые
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|(ВЫБРАТЬ
	|%ПоляТаблицы
	|ИЗ
	|	ВТТабличнаяЧасть КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|%ПоляСМинусом
	|ИЗ
	|	%ТаблицаДокумента КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|) КАК Т
	|%Группировка
	|%УсловиеОтбора
	|;
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(%Дата) КАК Результат
	|ИЗ
	|	ВТИзменения КАК Т
	|ГДЕ
	|	%Дата <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|";
	
	Для Каждого КлючИЗначение Из ОписаниеТабличныхЧастей Цикл
		
		// Подготовим тексты фрагментов запроса.
		СтрокаИзмерения    = "";
		СтрокаРесурсы	   = "";
		СтрокаРесурсыСумма = "";
		СтрокаРесурсыОтбор = "";
		СтруктураРесурсы = Новый Структура(?(ЗначениеЗаполнено(КлючИЗначение.Значение.Ресурсы), КлючИЗначение.Значение.Ресурсы, ""));
		СтрокаДата 		 = ?(ЗначениеЗаполнено(КлючИЗначение.Значение.Дата), "Т." + КлючИЗначение.Значение.Дата, "Неопределено");
		
		Для Каждого МетаРеквизит Из МетаДокумент.ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты Цикл
			
			Если МетаРеквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
			 ИЛИ МетаРеквизит.Тип = Новый ОписаниеТипов("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураРесурсы.Свойство(МетаРеквизит.Имя) Тогда
				СтрокаРесурсы = СтрокаРесурсы + ?(СтрокаРесурсы = "", "", ",
					|	") + "Т." + МетаРеквизит.Имя;
				СтрокаРесурсыСумма = СтрокаРесурсыСумма + ?(СтрокаРесурсыСумма = "", "", ",
					|	") + "СУММА(Т." + МетаРеквизит.Имя + ") КАК " + МетаРеквизит.Имя;
				СтрокаРесурсыОтбор = СтрокаРесурсыОтбор + ?(СтрокаРесурсыОтбор = "", "	", "
					|	ИЛИ ") + "СУММА(Т." + МетаРеквизит.Имя + ") <> 0";
			Иначе
				СтрокаИзмерения = СтрокаИзмерения + ?(СтрокаИзмерения = "", "", ",
					|") + "	Т." + МетаРеквизит.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПоля = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрокаРесурсы;
		СтрокаПоляСМинусом = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрЗаменить(СтрокаРесурсы, "Т.", "-Т.");
		СтрокаПоляСвернутые = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсыСумма = "", "", ",
			|	") + СтрокаРесурсыСумма;
		СтрокаТаблицаДокумента = "Документ." + МетаДокумент.Имя + "." + КлючИЗначение.Ключ;
		
		// Сформируем текст запроса и выполним запрос.
		Запрос.УстановитьПараметр("Таблица", ДокументОбъект[КлючИЗначение.Ключ].Выгрузить());
		
		Запрос.Текст = ШаблонЗапроса;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляТаблицы", 	  СтрокаПоля);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСМинусом", 	  СтрокаПоляСМинусом);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаДокумента", СтрокаТаблицаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвернутые", 	  СтрокаПоляСвернутые);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Группировка", 	  ?(СтрокаИзмерения = "", "", "СГРУППИРОВАТЬ ПО" + Символы.ПС + СтрокаИзмерения));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОтбора", 	  ?(СтрокаРесурсыОтбор = "", "", "ИМЕЮЩИЕ" + Символы.ПС + СтрокаРесурсыОтбор));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Дата", 			  СтрокаДата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Результат <> Null Тогда // найдены отличия
			
			Результат.ЕстьИзменения = Истина;
			
			Если ТипЗнч(Выборка.Результат) = Тип("Дата") Тогда
				Результат.Дата = ?(Результат.Дата = Неопределено, Выборка.Результат, Мин(Результат.Дата, Выборка.Результат));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает в документе и его движениях признак того, что документ проводится при выполнении расчета партий/себестоимости.
//
Процедура УстановитьПризнакВыполненияРасчетаПартийИСебестоимости(ДокументОбъект) Экспорт
	
	ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		Движение.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзОтчетов

// При формировании отчета проверяет актуальность расчета партий и при необходимости запускает расчет партий в фоновом задании.
// Также в шапку отчета выводится информация о текущем состоянии расчета партий.
// Параметры запуска расчета партий помещаются в КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.
//
// Параметры:
//	ДокументРезультат - ТабличныйДокумент - табличный документ отчета, вызывающего проверку
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек отчета, вызывающего проверку
//
Процедура АктуализироватьПартииДляОтчетов(ДокументРезультат, КомпоновщикНастроек, ИмяПоляОрганизация = "Организация") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыРасчета = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ПараметрыРасчета.Вставить("РасчетПартийИСебестоимости", Ложь);
	ПараметрыРасчета.Вставить("НачалоПериодаРасчета", 		Неопределено);
	ПараметрыРасчета.Вставить("КонецПериодаРасчета", 		Неопределено);
	ПараметрыРасчета.Вставить("МассивОрганизаций", 			Неопределено);
	ПараметрыРасчета.Вставить("КоличествоДокументов", 		0);
	ПараметрыРасчета.Вставить("НомерЗадания", 				РегистрыСведений.ЗаданияКРасчетуСебестоимости.ПолучитьНомерЗадания());
	
	ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	ГраницаРасчета 		 = ?(ПараметрПериодОтчета.Использование, ПараметрПериодОтчета.Значение.ДатаОкончания, ТекущаяДатаСеанса());
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено
	 И Константы.АктуализироватьДанныеПриФормированииОтчетов.Получить()
	 И УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ГраницаРасчета)) Тогда
		
		ОперацииСравнения = Новый Массив;
		ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		
		ОтборОрганизация = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, ИмяПоляОрганизация, ОперацииСравнения, Ложь);
		ПараметрыРасчета.МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизация);
		
		СхемаРасчета = СхемаРасчетаПартий(ГраницаРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		Если СхемаРасчета.Количество() > 0 Тогда
			
			ПараметрыРасчета.НачалоПериодаРасчета 		= НачалоМесяца(СхемаРасчета[0].Дата);
			ПараметрыРасчета.КонецПериодаРасчета  		= КонецМесяца(ГраницаРасчета);
			
			ПараметрыРасчета.МассивОрганизаций 	  		= ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
				СхемаРасчета[СхемаРасчета.Количество()-1].Организации); // в последней строке есть все организации, по которым будет выполнен расчет
			
			ПараметрыРасчета.КоличествоДокументов 		= КоличествоНеактуальныхДокументов(ПараметрыРасчета);
			
			ПараметрыРасчета.РасчетПартийИСебестоимости = ПартионныйУчет.РассчитатьФоновымЗаданием(
				ПараметрыРасчета.КонецПериодаРасчета,
				ПараметрыРасчета.МассивОрганизаций);
			
			ВывестиОписаниеАктуальностиРасчета(ДокументРезультат, ПараметрыРасчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что расчета партий, запущенный при формировании отчета, завершен.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры запуска расчета партий;
//		ключи структуры см. в АктуализироватьПартииДляОтчетов() и в ОтчетыУТКлиентПереопределяемый.ВосстановитьОффлайновыеРасчеты()
//
// Возвращаемое значение:
//	Булево - признак окончания расчета
//
Функция ПартииДляОтчетовАктуализированы(ПараметрыРасчета) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено
	 ИЛИ НЕ ПараметрыРасчета.Свойство("КонецПериодаРасчета")
	 ИЛИ НЕ ЗначениеЗаполнено(ПараметрыРасчета.КонецПериодаРасчета) Тогда
		Возврат Истина; // расчет не выполнялся
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МИНИМУМ(Очередь.Месяц) КАК НачалоПериодаРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Очередь
	|ГДЕ
	|	Очередь.НомерЗадания <= &НомерЗадания
	|	И Очередь.Организация В (&МассивОрганизаций)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Очередь.Месяц) ЕСТЬ NULL)
	|	И МИНИМУМ(Очередь.Месяц) <= &КонецПериодаРасчета
	|";
	
	Запрос.УстановитьПараметр("КонецПериодаРасчета", ПараметрыРасчета.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", 	 ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НомерЗадания", 		 ПараметрыРасчета.НомерЗадания);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции


// Возвращает количество документов, измененных после прошлого закрытия месяца.
//
Функция КоличествоНеактуальныхДокументов(ПараметрыРасчета)
	
	КоличествоДокументов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задания.Документ) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.Документ <> НЕОПРЕДЕЛЕНО
	|	И Задания.Месяц <= &Период
	|	И (&ПоВсемОрганизациям ИЛИ Задания.Организация В (&МассивОрганизаций))";
	
	Запрос.УстановитьПараметр("Период", 	  		ПараметрыРасчета.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", 	ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	
	Возврат КоличествоДокументов;
	
КонецФункции

// Выводит в табличный документ предупреждение, если отчет формируется по неактуальным данным.
//
Процедура ВывестиОписаниеАктуальностиРасчета(ДокументРезультат, ПараметрыРасчета)
	
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru ='Расчет партий выполнен до %1.'"),
		Формат(КонецМесяца(ПараметрыРасчета.НачалоПериодаРасчета - 1), "ДЛФ=D"));
	
	Если ПараметрыРасчета.РасчетПартийИСебестоимости Тогда
		
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru ='Запущено фоновое задание расчета партий до %1.
					|После окончания расчета Вам будет предложено переформировать отчет.'"),
				Формат(ПараметрыРасчета.КонецПериодаРасчета, "ДЛФ=D"));
			
		Если ЗначениеЗаполнено(ПараметрыРасчета.КоличествоДокументов) Тогда
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru ='(требуется распределить партии для %1)'"),
					ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КоличествоДокументов));
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПредупреждение = Новый ТабличныйДокумент;
	ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
	
	ОбластьПредупреждение.Текст 	 = ТекстПредупреждения;
	ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	
	ДокументРезультат.ВставитьОбласть(
		ОбластьПредупреждение,
		ДокументРезультат.Область(1,1,1,1),
		ТипСмещенияТабличногоДокумента.ПоВертикали);
	
КонецПроцедуры

// Возвращает массив организаций, по которым есть выручка за указанный период,
// но метод оценки стоимости отличается от "ФИФО (скользящая)"
//
// Параметры:
//	НачалоПериода - Дата - начало периода для получения движений
//	КонецПериода - Дата - конец периода для получения движений
//
Функция ОрганизацииБезФИФОСкользящая(НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Настройка.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизацииСФИФОСкользящая
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода) КАК Настройка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|		ПО Настройка.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|ГДЕ
	|	СпрУчетнаяПолитика.МетодОценкиСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аналитика.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизацииСДвижениями
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, , ) КАК Выручка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО Аналитика.Ссылка = Выручка.АналитикаУчетаПоПартнерам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизацииСДвижениями КАК ОрганизацииСДвижениями
	|		ПО Т.Ссылка = ОрганизацииСДвижениями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизацииСФИФОСкользящая КАК ОрганизацииСФИФОСкользящая
	|		ПО Т.Ссылка = ОрганизацииСФИФОСкользящая.Ссылка
	|ГДЕ
	|	ОрганизацииСФИФОСкользящая.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивИсключенныхОрганизаций = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивИсключенныхОрганизаций;
	
КонецФункции

// Выводит текст предупреждения в шапку отчета.
//
Процедура ДобавитьПредупреждениеОбОсобенностяхФормированияОтчета(ДокументРезультат, КомпоновщикНастроек, ПроверяемыеПоля, АктуализироватьПартии = Истина) Экспорт
	
	ИспользуютсяПроверяемыеПоля = Ложь;
	ИспользуемыеПоля = Новый Массив;
	ТекстИспользуемыеПоля = "";
	Для Каждого Поле Из ПроверяемыеПоля Цикл
		Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(КомпоновщикНастроек, Поле) Тогда
			ИспользуемыеПоля.Добавить(Поле);
			Если ПустаяСтрока(ТекстИспользуемыеПоля) Тогда
				ТекстИспользуемыеПоля = Поле;
			Иначе
				ТекстИспользуемыеПоля = ТекстИспользуемыеПоля + ", " + Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуемыеПоля.Количество() > 0 Тогда
	
		ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
		НачалоПериода = ?(ПараметрПериодОтчета.Использование, ПараметрПериодОтчета.Значение.ДатаНачала, НачалоГода(ТекущаяДатаСеанса()));
		КонецПериода = ?(ПараметрПериодОтчета.Использование, ПараметрПериодОтчета.Значение.ДатаОкончания, ТекущаяДатаСеанса());
		
		МассивИсключенныхОрганизаций = ОрганизацииБезФИФОСкользящая(НачалоПериода, КонецПериода);
		
		ПартионныйУчетВерсии22 = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода);
		Если НЕ ПартионныйУчетВерсии22 Тогда
			
			// Отчет не сформирован - сообщим о причинах.
			ДатаПереходаНаПартионныйУчетВерсии22 = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
			
			Если НЕ ЗначениеЗаполнено(ДатаПереходаНаПартионныйУчетВерсии22) Тогда
				Если ИспользуемыеПоля.Количество() = 1 Тогда
					ТекстПредупреждения = 
						НСтр("ru ='Поле ""%1"" заполняется только при включенном партионном учете версии 2.2.'");
				Иначе
					ТекстПредупреждения = 
						НСтр("ru ='Поля ""%1"" заполняются только при включенном партионном учете версии 2.2.'");
				КонецЕсли;
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстПредупреждения,
					ТекстИспользуемыеПоля);
			Иначе
				Если ИспользуемыеПоля.Количество() = 1 Тогда
					ТекстПредупреждения = 
						НСтр("ru ='Поле ""%1"" заполняется только в периодах использования партионного учета версии 2.2.
						|Дата перехода на партионный учет версии 2.2: %2'");
				Иначе
					ТекстПредупреждения = 
						НСтр("ru ='Поля ""%1"" заполняются только в периодах использования партионного учета версии 2.2.
						|Дата перехода на партионный учет версии 2.2: %2'");
				КонецЕсли;	
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстПредупреждения,
					ТекстИспользуемыеПоля,
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ДатаПереходаНаПартионныйУчетВерсии22));
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(МассивИсключенныхОрганизаций) Тогда
			
			Если ИспользуемыеПоля.Количество() = 1 Тогда
				ТекстПредупреждения =
					НСтр("ru ='Поле ""%1"" не заполняется для организаций, имеющих метод оценки стоимости, отличный от ""ФИФО (скользящая оценка)"": %2'");
			Иначе
				ТекстПредупреждения =
					НСтр("ru ='Поля ""%1"" не заполняются для организаций, имеющих метод оценки стоимости, отличный от ""ФИФО (скользящая оценка)"": %2'");
			КонецЕсли;
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстПредупреждения,
				ТекстИспользуемыеПоля,
				ПредставлениеОрганизаций(МассивИсключенныхОрганизаций, ", "));
			
		Иначе
			
			// Отчет сформирован без особенностей.
			ТекстПредупреждения = "";
			
		КонецЕсли;
		
		Если ПартионныйУчетВерсии22 Тогда
			АктуализироватьПартииДляОтчетов(ДокументРезультат, КомпоновщикНастроек);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
			
			ОбластьПредупреждение.Текст 	 = СокрЛП(ТекстПредупреждения);
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			
			ДокументРезультат.ВставитьОбласть(
				ОбластьПредупреждение,
				ДокументРезультат.Область(1,1,1,1),
				ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзОбменов

// При получении из периферийного узла данных, требующих перерасчета себестоимости, добавляет запись в регистр ЗаданияКРасчетуСебестоимости.
//
// Параметры:
//	ПолученныеДанные - Произвольный - это параметр ЭлементДанных одноименного события плана обмена
//
// Возвращаемое значение:
//	Булево - признак того, что ПолученныеДанные - это данные, относящиеся к механизму расчета себестоимости
//
Функция ПриПолученииДанныхОтПодчиненного(ПолученныеДанные) Экспорт
	
	Попытка
		МетаданныеПолученныхДанных = ПолученныеДанные.Метаданные();
	Исключение
		Возврат Ложь; // у этого объекта нет метода для получения его метаданных - объект не нужно обрабатывать
	КонецПопытки;
	
	Если НЕ Метаданные.РегистрыНакопления.Содержит(МетаданныеПолученныхДанных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получим описание входящих данных механизмов расчета
	ВходящиеДанные = Новый Соответствие;
	РасчетСебестоимости.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		ПартионныйУчет22.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	Иначе
		ПартионныйУчет.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	КонецЕсли;
	
	Если ВходящиеДанные.Получить(МетаданныеПолученныхДанных) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Только изменение регистра накопления, являющегося исходными данными для расчета,
	// приводит к необходимости перерасчета партий и себестоимости.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если МетаданныеПолученныхДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ИмяПоляОрганизации = "Организация";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ОрганизацияВладелец") <> Неопределено Тогда
		ИмяПоляОрганизации = "ОрганизацияВладелец";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ВидЗапасов") <> Неопределено Тогда
		ИмяПоляОрганизации = "ВидЗапасов";
		ИмяКонтейнераОрганизации = "Справочник.ВидыЗапасов"; // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "Ссылка";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено Тогда
		ИмяПоляОрганизации = "АналитикаУчетаПоПартнерам";
		ИмяКонтейнераОрганизации = "РегистрСведений.АналитикаУчетаПоПартнерам";  // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "КлючАналитики";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	Иначе
		Возврат Ложь; // невозможно определить организацию из данных регистра
	КонецЕсли;
	
	ТаблицаНабора = ПолученныеДанные.Выгрузить(, "Период," + ИмяПоляОрганизации);
	ТаблицаНабора.Свернуть("Период," + ИмяПоляОрганизации);
	
	Запрос.УстановитьПараметр("Т",	    ТаблицаНабора);
	Запрос.УстановитьПараметр("Ссылка", ПолученныеДанные.Отбор.Регистратор.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|	Т.%ИмяПоляОрганизации          КАК Организация
	|ПОМЕСТИТЬ ВТПолученныеДанные
	|ИЗ
	|	&Т КАК Т
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизации", ИмяПоляОрганизации);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период,
	|	Т.Организация
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Период 	  КАК Период,
	|		Т.Организация КАК Организация
	|	ИЗ
	|		ВТПолученныеДанные КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|		Т.%ИмяПоляОрганизации          КАК Организация
	|	ИЗ
	|		РегистрНакопления.%ИмяПолученныхДанных КАК Т
	|	ГДЕ
	|		Т.Регистратор = &Ссылка
	|	) КАК Т
	|";
	
	Если ЗначениеЗаполнено(ИмяКонтейнераОрганизации) Тогда
		
		// Организация хранится не в поле объекта, а в каком-то другом месте - с ним надо сделать соединение
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Период КАК Период,
		|	Контейнер.%ИмяПоляОрганизацииВКонтейнере КАК Организация
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|(" + СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТПериоды", "") + ") КАК Т
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ИмяКонтейнераОрганизации КАК Контейнер
		|ПО Т.Организация = Контейнер.%ИмяПоляСвязиВКонтейнере
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период 	  КАК Месяц,
	|	Т.Организация КАК Организация,
	|	&Ссылка 	  КАК Документ
	|ИЗ
	|	ВТПериоды КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК ЗаданияКРасчетуСебестоимости
	|			ПО Т.Период = ЗаданияКРасчетуСебестоимости.Месяц
	|			 И Т.Организация = ЗаданияКРасчетуСебестоимости.Организация
	|			 И ЗаданияКРасчетуСебестоимости.Документ = &Ссылка
	|ГДЕ
	|	ЗаданияКРасчетуСебестоимости.НомерЗадания ЕСТЬ NULL
	|   И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПолученныхДанных", 			МетаданныеПолученныхДанных.Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяКонтейнераОрганизации",  		ИмяКонтейнераОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляСвязиВКонтейнере",  		ИмяПоляСвязиВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизацииВКонтейнере",  ИмяПоляОрганизацииВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизации",  			ИмяПоляОрганизации);
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	
	Возврат Истина; // данные обработаны успешно
	
КонецФункции

#КонецОбласти


#Область СостояниеОперацииЗакрытияМесяца

// Возвращает текущее состояние корректировки налогообложения НДС.
//
Функция СостояниеКорректировкиНДС(ПериодРасчета, МассивОрганизаций) Экспорт
	
	НеТребуетсяКорректировкаНДС = Истина;
	ВыполненаКорректировкаНДС	= Истина;
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ПериодРасчета))
	 И КонецКвартала(ПериодРасчета) = КонецМесяца(ПериодРасчета) Тогда
		
		НачалоСледНалПериода = КонецМесяца(ПериодРасчета) + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", 	   		 НачалоМесяца(ПериодРасчета));
		Запрос.УстановитьПараметр("КонецПериода",  	   		 КонецМесяца(ПериодРасчета));
		Запрос.УстановитьПараметр("МассивОрганизаций", 		 МассивОрганизаций);
		Запрос.УстановитьПараметр("ГраницаКонецПериода", 	 Новый Граница(КонецМесяца(ПериодРасчета), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("НачалоПериодаМинус3Года", ДобавитьМесяц(НачалоСледНалПериода, -36));
		Запрос.УстановитьПараметр("КонецПериодаМинус3Года",  ДобавитьМесяц(КонецКвартала(НачалоСледНалПериода), -36));
		
		// Необходимость корректировки НДС проверяем по наборам аналитик
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Партии.Организация,
		|	Партии.АналитикаУчетаНоменклатуры,
		|	Партии.ДокументПоступления,
		|	Партии.ВидЗапасов,
		|	Партии.АналитикаУчетаПартий,
		|	СУММА(Партии.КоличествоОстаток) КАК КоличествоОстаток,
		|	СУММА(Партии.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТПартии
		|ИЗ
		// Регистры, используемые только в партионном учете версии 2.1
		|	(ВЫБРАТЬ
		|		Остатки.Организация						КАК Организация,
		|		Остатки.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		Остатки.ДокументПоступления				КАК ДокументПоступления,
		|		Остатки.ВидЗапасов						КАК ВидЗапасов,
		|		Остатки.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|		Остатки.КоличествоОстаток				КАК КоличествоОстаток,
		|		Остатки.КоличествоОстаток				КАК Количество
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровОрганизаций.Остатки(
		|				&ГраницаКонецПериода,
		|				АналитикаУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
		|					И Организация В(&МассивОрганизаций)) КАК Остатки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|			ПО Остатки.ДокументПоступления = ДанныеПервичныхДокументов.Документ
		|	ГДЕ
		|		ДанныеПервичныхДокументов.ДатаРегистратора МЕЖДУ &НачалоПериодаМинус3Года И &КонецПериодаМинус3Года
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Организация						КАК Организация,
		|		Остатки.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		Остатки.ДокументПоступления				КАК ДокументПоступления,
		|		Остатки.ВидЗапасов						КАК ВидЗапасов,
		|		Остатки.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|		0										КАК КоличествоОстаток,
		|		Остатки.Количество						КАК Количество
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровОрганизаций КАК Остатки
		|	ГДЕ
		|		Остатки.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Остатки.Организация В(&МассивОрганизаций)
		|		И Остатки.Активность
		|		И Остатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Остатки.Регистратор ССЫЛКА Документ.КорректировкаНалогообложенияНДСПартийТоваров
		|		И Остатки.ДокументПоступления.Дата МЕЖДУ &НачалоПериодаМинус3Года И &КонецПериодаМинус3Года
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Регистры, используемые только в партионном учете версии 2.2
		|	ВЫБРАТЬ
		|		Остатки.Организация						КАК Организация,
		|		Остатки.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		Остатки.ДокументПоступления				КАК ДокументПоступления,
		|		Остатки.ВидЗапасов						КАК ВидЗапасов,
		|		Остатки.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|		Остатки.КоличествоОстаток				КАК КоличествоОстаток,
		|		Остатки.КоличествоОстаток				КАК Количество
		|	ИЗ
		|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН.Остатки(
		|				&ГраницаКонецПериода,
		|				АналитикаУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
		|					И Организация В(&МассивОрганизаций)) КАК Остатки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|			ПО Остатки.ДокументПоступления = ДанныеПервичныхДокументов.Документ
		|	ГДЕ
		|		ДанныеПервичныхДокументов.ДатаРегистратора МЕЖДУ &НачалоПериодаМинус3Года И &КонецПериодаМинус3Года
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Организация						КАК Организация,
		|		Остатки.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		Остатки.ДокументПоступления				КАК ДокументПоступления,
		|		Остатки.ВидЗапасов						КАК ВидЗапасов,
		|		Остатки.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|		0										КАК КоличествоОстаток,
		|		Остатки.Количество						КАК Количество
		|	ИЗ
		|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Остатки
		|	ГДЕ
		|		Остатки.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Остатки.Организация В(&МассивОрганизаций)
		|		И Остатки.Активность
		|		И Остатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Остатки.Регистратор ССЫЛКА Документ.КорректировкаНалогообложенияНДСПартийТоваров
		|
		|	) КАК Партии
		|
		|СГРУППИРОВАТЬ ПО
		|	Партии.Организация,
		|	Партии.АналитикаУчетаНоменклатуры,
		|	Партии.ДокументПоступления,
		|	Партии.ВидЗапасов,
		|	Партии.АналитикаУчетаПартий
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Партии.КоличествоОстаток) КАК КоличествоОстаток,
		|	МАКСИМУМ(Партии.Количество) КАК Количество
		|ИЗ
		|	ВТПартии КАК Партии";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		НеТребуетсяКорректировкаНДС = (Выборка.Количество = NULL ИЛИ Выборка.Количество <= 0);
		ВыполненаКорректировкаНДС   = НеТребуетсяКорректировкаНДС ИЛИ (Выборка.КоличествоОстаток <> NULL И Выборка.КоличествоОстаток > 0);
		
	КонецЕсли;
	
	Если НеТребуетсяКорректировкаНДС Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли ВыполненаКорректировкаНДС Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

// Проверяет наличие движений по указанному регистру в расчетном периоде по рассчитываемым организациям.
//
Функция ЕстьДвиженияПоРегиструНакопления(ИмяРегистра, ПериодРасчета, МассивОрганизаций, ИмяПоляОрганизации = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрНакопления.%1 КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.%2 В(&МассивОрганизаций)
	|	И Т.Активность
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяРегистра,
		?(ЗначениеЗаполнено(ИмяПоляОрганизации), ИмяПоляОрганизации, "Организация"));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Проверяет наличие явных проблем в движениях по себестоимости товаров.
//
Функция ЕстьНекорректныеДвиженияСебестоимости(ПериодРасчета, МассивОрганизаций) Экспорт
	
	Если НЕ УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПериодРасчета)) Тогда
		Возврат Ложь; // проверяем только движения партионного учета версии 2.2
	КонецЕсли;
	
	// В первичных движениях документов и в движениях, сформированных механизмом расчета партий, должен быть заполнен тип записи.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Активность
	|	И НЕ Т.РасчетСебестоимости
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции
	
// Выполняет проверку окончания обновления входящих и исходящих данных запущенного механизма расчета.
//
Процедура ПроверитьБлокировкуДанныхПриОбновленииИБ(ВыполняетсяРасчетСебестоимости, ПартионныйУчетВерсии22 = Неопределено, ПараметрыОтладки = Неопределено) Экспорт
	
	ЗначенияПараметров = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	Если ЗначенияПараметров.НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ Тогда
		Возврат; // при вызове механизма расчета указали, что окончание обновления ИБ ожидать не надо
	КонецЕсли;
	
	ПроверяемыеДанные = Новый Соответствие;
	ПроверяемыеДанные.Вставить(Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости, Истина);
	
	РасчетСебестоимости.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
	РасчетСебестоимости.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
	
	Если ВыполняетсяРасчетСебестоимости Тогда // выполняется механизм расчета себестоимости
		ПредставлениеОперации = РасчетСебестоимости.ТекущаяВерсияМеханизма();
	ИначеЕсли НЕ ПартионныйУчетВерсии22 Тогда // выполняется механизм партионного учета версии 2.1
		ПартионныйУчет.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПартионныйУчет.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПредставлениеОперации = ПартионныйУчет.ТекущаяВерсияМеханизма();
	Иначе // выполняется механизм партионного учета версии 2.2
		ПартионныйУчет22.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПартионныйУчет22.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПредставлениеОперации = ПартионныйУчет22.ТекущаяВерсияМеханизма();
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПроверяемыеДанные, ПредставлениеОперации);
	
КонецПроцедуры

// Возвращает текущее состояние расчета себестоимости.
//
// Параметры:
//	ПериодРасчета - Дата - месяц расчета
//	ОтборОрганизации - Массив - организации, по которым надо получить состояние расчета
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца - текущее состояние расчета
//
Функция ТекущееСостояниеРасчета(ПериодРасчета, ОтборОрганизации) Экспорт
	
	Состояние = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		ПериодРасчета,
		ОтборОрганизации);
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти

#Область АнализСостоянияСистемы

// Заполняет проверки, выполняемые в рамках расчета партий и себестоимости.
//
// Параметры:
//	ТаблицаПроверок - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации()
//
Процедура ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	
	// Исходные данные для расчета.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ИсходныеДанныеДляРасчетаСебестоимости",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"УниверсальныеМеханизмыПартийИСебестоимости.ПроверкаКорректностиИсходныхДанныхДляРасчетаСебестоимости",
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность исходных данных для расчета себестоимости'"),
		НСтр("ru='Проверяются соблюдение следующих условий:
			|- в регистре ""Себестоимость товаров"" не должно быть отрицательных остатков по количеству;
			|- должны быть оформлены передачи товаров между организациями;
			|- должны быть оформлены отчеты комитенту о списании;
			|- должны быть оформлены поступления работ в подразделения.'"));
	
	// Переход на партионный учет версии 2.2.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьПереходаНаПУ22",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"УниверсальныеМеханизмыПартийИСебестоимости.ПроверкаКорректностиПереходаНаПартионныйУчетВерсии22",
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность перехода на партионный учет версии 2.2'"),
		НСтр("ru='Проверяется корректность движений по регистрам, сформированных при переходе на партионный учет версии 2.2:
			|движения вида ""Перенос данных"" должны быть сформированы на конец месяца, предшествующего переходу.'"));
	
	// Результаты расчета.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"СоответствиеСуммИКоличества",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"УниверсальныеМеханизмыПартийИСебестоимости.ПроверкаСоответствияСуммИКоличества",
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Соответствие остатков сумм и остатков по количеству в регистре ""Себестоимость товаров""'"),
		НСтр("ru='В регистре ""Себестоимость товаров"" не должно быть
		|- ненулевых остатков по суммам (упр. и регл.) при нулевом остатке по количеству;
		|- разных знаков у остатков по суммам (упр. и регл.) и остатка по количеству.'"));
		
	// Нераспределенные затраты.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ЗатратыНеРаспределенныеНаСебестоимость",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"УниверсальныеМеханизмыПартийИСебестоимости.ПроверкаЗатратНеРаспределенныхНаСебестоимость",
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Наличие остатков затрат, не распределенных на себестоимость.'"),
		НСтр("ru='В регистре ""Партии прочих расходов"" не должно быть остатков по статьям расходов с вариантом распределения расходов ""На себестоимость товаров"".'"));
		
	// Нерассчитанные партии.
	// Технологическая проверка для автотестов, см. технологический параметр "ПроверятьЗаписиСПризнакомРасчетНеЗавершен".
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ЗаписиСПризнакомРасчетНеЗавершен",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"УниверсальныеМеханизмыПартийИСебестоимости.ПроверкаЗаписейСПризнакомРасчетНеЗавершен",
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Наличие движений, для которых не удалось подобрать партии.'"),
		НСтр("ru='В регистрах, обслуживаемых механизмом партионного учета, для всех расчетных движений должна быть подобрана партия.
			|В некоторых случаях партии (полностью или частично) подобрать не удается,
			|из-за чего после расчета могут диагностироваться ошибки вида ""Есть суммовой остаток без остатка по количеству"".
			|Причина проблемы может заключаться как в ошибочных данных в информационной базе, так и в алгоритмах выборки/расчета партий.
			|В результате по окончании расчета остаются записи с признаком РасчетЗавершен = Ложь (в регистрах накопления он преобразуется в РасчетНеЗавершен = Истина).
			|Универсального способа исправления данной проблемы нет - в каждом случае надо анализировать причины в контексте конкретной информационной базы.'"));
		
	// Проверка отрицательных остатков по количеству после расчета.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаРезультатаРасчетаПоКоличеству",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"УниверсальныеМеханизмыПартийИСебестоимости.ПроверкаРезультатаРасчетаПоКоличеству",
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Наличие остатков партий с отрицательным количеством.'"),
		НСтр("ru='В регистре себестоимости не должно быть отрицательных остатков в разрезе партий.
			|Проверка отличается от аналогичной проверки исходных данных для расчета тем, что в данной проверке
			|анализируются ""детальные"" остатки в разрезе всех измерений регистра себестоимости.'"));
	
	// Соответствие остатков в регистрах СебестоимостьТоваров и ДетализацияПартийТоваровДляНДСиУСН.
	// Технологическая проверка для автотестов, см. технологический параметр "ПроверятьСоответствиеСебестоимостиИПартийНДС".
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"СоответствиеРегистровСебестоимостиИПартийНДС",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"УниверсальныеМеханизмыПартийИСебестоимости.ПроверкаСоответствияРегистровСебестоимостиИПартийНДС",
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Соответствие остатков в регистрах себестоимости и партий НДС.'"),
		НСтр("ru='Остатки по регистру ""Детализация партий товаров для НДС и УСН"" должны соответствовать остаткам по регистру ""Себестоимость товаров"":
			|- остатки по количеству в регистре партий НДС не должны превышать остатки по количеству в регистре себестоимости
			|- не должно быть остатков по суммам регл. (СтоимостьБезНДС + НДС) в регистре партий НДС при отсутствии остатков по суммам регл. в регистре себестоимости (СтоимостьРегл + ДопРасходыРегл)
			|- не должно быть остатков по суммам упр. в регистре партий НДС (НДСУпр) при отсутствии остатков по суммам упр. в регистре себестоимости (СтоимостьУпр + ДопРасходыУпр)'"));
	
КонецПроцедуры

#Область ПроцедурыПроверкиПартионногоУчетаИСебестоимости

// Процедура-обработчик проверки состояния системы "ИсходныеДанныеДляРасчетаСебестоимости".
//
Процедура ПроверкаКорректностиИсходныхДанныхДляРасчетаСебестоимости(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВозвратныеОтходы() + "
	|
	|ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.КоличествоОстаток
	|ПОМЕСТИТЬ КПередачеНаНачалоПериода
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПредыдущегоПериода,
	|		ОрганизацияВладелец В (&МассивОрганизаций)
	|	) КАК ПроданныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроданныеТовары.ВидЗапасовПродавца
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.КоличествоОстаток
	|ПОМЕСТИТЬ ТоварыПредварительная
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|		ОрганизацияВладелец В (&МассивОрганизаций)
	|	) КАК ПроданныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроданныеТовары.ВидЗапасовПродавца
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец            КАК ОрганизацияПродавец,
	|	ВидыЗапасов.Организация 					   КАК ОрганизацияПолучатель,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	СУММА(ПроданныеТовары.КоличествоОстаток - ЕСТЬNULL(НаНачалоПериода.КоличествоОстаток, 0)) КАК Количество,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ 										   КАК ВидЗапасовПродавца,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ 										   КАК ВидЗапасовПолучателя
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыПредварительная КАК ПроданныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО ПроданныеТовары.ВидЗапасовПродавца = ВидыЗапасов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ КПередачеНаНачалоПериода КАК НаНачалоПериода
	|		ПО НаНачалоПериода.ОрганизацияВладелец = ПроданныеТовары.ОрганизацияВладелец
	|		И НаНачалоПериода.ВидЗапасовПродавца = ПроданныеТовары.ВидЗапасовПродавца
	|		И НаНачалоПериода.АналитикаУчетаНоменклатуры = ПроданныеТовары.АналитикаУчетаНоменклатуры
	|		И НаНачалоПериода.АналитикаУчетаНоменклатуры = ПроданныеТовары.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	И (ПроданныеТовары.КоличествоОстаток - ЕСТЬNULL(НаНачалоПериода.КоличествоОстаток, 0) <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ВидыЗапасов.Организация,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыПредварительная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПродавец КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.ВидЗапасовПродавца КАК ВидЗапасов,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВтНетПередачТоваров
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПолучатель КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.ВидЗапасовПолучателя КАК ВидЗапасов,
	|	Товары.Количество КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СписанныеТовары.ВидЗапасов,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры,
	|	СписанныеТовары.КоличествоСписаноОстаток
	|ПОМЕСТИТЬ ВтНетОтчетовОСписанииПредварительная
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&ГраницаКонецПериода) КАК СписанныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	СписанныеТовары.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.Организация 						КАК Организация,
	|	ВидыЗапасов.ВладелецТовара 						КАК Владелец,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
	|	СУММА(СписанныеТовары.КоличествоСписаноОстаток) КАК Количество,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ 											КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтНетОтчетовОСписании
	|ИЗ
	|	ВтНетОтчетовОСписанииПредварительная КАК СписанныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО СписанныеТовары.ВидЗапасов = ВидыЗапасов.Ссылка
	|ГДЕ
	|	ВидыЗапасов.Организация В (&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.Организация,
	|	ВидыЗапасов.ВладелецТовара,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтНетОтчетовОСписанииПредварительная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Остатки.Организация 		КАК Организация,
	|	Остатки.Номенклатура 		КАК Номенклатура,
	|	Остатки.Характеристика 		КАК Характеристика,
	|	Остатки.Серия 				КАК Серия,
	|	Остатки.Назначение 			КАК Назначение,
	|	Остатки.Подразделение 		КАК Подразделение,
	|	Остатки.КоличествоОстаток 	КАК Количество
	|ПОМЕСТИТЬ ВтРаботыОстатки
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)) КАК Остатки
	|ГДЕ
	|	НЕ &ПартионныйУчетВерсии22
	|	И Остатки.КоличествоОстаток < 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Остатки.Организация 	КАК Организация,
	|	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	Остатки.Количество 		КАК Количество
	|ПОМЕСТИТЬ ВтРаботы
	|ИЗ
	|	ВтРаботыОстатки КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = Остатки.Номенклатура
	|		И Аналитика.Характеристика = Остатки.Характеристика
	|		И Аналитика.Серия = Остатки.Серия
	|		И Аналитика.Назначение = Остатки.Назначение
	|		И Аналитика.Склад = Остатки.Подразделение
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Остатки.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтРаботыОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.КоличествоОстаток
	|ПОМЕСТИТЬ СебестоимостьТоваровОстатки
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)) КАК Т
	|ГДЕ
	|	Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Таб.РазделУчета		  			КАК РазделУчета,
	|	Таб.ВидЗапасов		  			КАК ВидЗапасов,
	|	Таб.Организация		  			КАК Организация,
	|	Таб.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	СУММА(Таб.Количество) 			КАК Количество
	|ПОМЕСТИТЬ ВТОтрицательныеОстатки
	|ИЗ (
	|	ВЫБРАТЬ
	|		Т.РазделУчета 				 КАК РазделУчета,
	|		Т.ВидЗапасов				 КАК ВидЗапасов,
	|		Т.Организация 				 КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.КоличествоОстаток 		 КАК Количество
	|	ИЗ
	|		СебестоимостьТоваровОстатки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Т.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО СпрНоменклатура.Ссылка = Аналитика.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВозвратныеОтходы КАК Отходы
	|			ПО Т.АналитикаУчетаНоменклатуры  = Отходы.АналитикаУчетаНоменклатуры
	|			И Т.РазделУчета 				 = Отходы.РазделУчета
	|			И Т.ВидЗапасов 				 	 = Отходы.ВидЗапасов
	|			И Т.Организация 				 = Отходы.Организация
	|	ГДЕ
	|		(Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИЛИ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ Аналитика.Склад ССЫЛКА Справочник.Склады
	|			ИЛИ Аналитика.Склад ССЫЛКА Справочник.Партнеры)
	|		И Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		И Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		И Отходы.АналитикаУчетаНоменклатуры ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.РазделУчета                КАК РазделУчета,
	|		Т.ВидЗапасов                 КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				Т.Количество
	|			ИНАЧЕ
	|				-Т.Количество
	|		КОНЕЦ                        КАК Количество
	|	ИЗ
	|		ВтНетПередачТоваров КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.Количество                 КАК Количество
	|	ИЗ
	|		ВтНетОтчетовОСписании КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		-Т.Количество                КАК Количество
	|	ИЗ
	|		ВтРаботы КАК Т
	|
	|	) КАК Таб
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.РазделУчета,
	|	Таб.ВидЗапасов,
	|	Таб.Организация,
	|	Таб.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) < 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Таб.Организация КАК Организация,
	|	Таб.АналитикаУчетаНоменклатуры,
	|	СУММА(Таб.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТНеОформленоПоступлениеРабот
	|ИЗ
	|	ВтРаботы КАК Таб
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.Организация,
	|	Таб.АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.РазделУчета 				 КАК РазделУчета,
	|	Т.ВидЗапасов				 КАК ВидЗапасов,
	|	Т.Организация 				 КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.КоличествоОстаток 		 КАК Количество
	|ПОМЕСТИТЬ ВТНеотфактурованныеПоставки
	|ИЗ
	|	СебестоимостьТоваровОстатки КАК Т
	|ГДЕ
	|	Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|	И Т.КоличествоОстаток > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.РазделУчета 				 КАК РазделУчета,
	|	Т.ВидЗапасов				 КАК ВидЗапасов,
	|	Т.Организация 				 КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	-Т.КоличествоОстаток 		 КАК Количество
	|ПОМЕСТИТЬ ВТСобственныеТоварыВПути
	|ИЗ
	|	СебестоимостьТоваровОстатки КАК Т
	|ГДЕ
	|	Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|	И Т.КоличествоОстаток < 0
	|
	|;
	|";
	
	// Отрицательные остатки по количеству.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("РазделУчета",					НСтр("ru='Раздел учета'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("Количество",					НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОтрицательныеОстатки",
		НСтр("ru='Обнаружены отрицательные остатки по количеству в регистре себестоимости по организации ""%1"" на конец периода %2'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	// Не оформленные поступления работ.	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("Количество",					НСтр("ru='Количество'"));
	
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТНеОформленоПоступлениеРабот",
		НСтр("ru = 'Не отражены поступления работ в подразделения организации ""%1"" за период %2'"),
		СписокПолей);
	
	// Превышение нефактурованной поставки.	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("РазделУчета",					НСтр("ru='Раздел учета'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("Количество",					НСтр("ru='Количество'"));
	
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТНеотфактурованныеПоставки",
		НСтр("ru = 'Фактуровки превышают неотфактурованные поставки в организации ""%1"" за период %2'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	
	// Превышение товаров в пути.	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("РазделУчета",					НСтр("ru='Раздел учета'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("Количество",					НСтр("ru='Количество'"));
	
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТСобственныеТоварыВПути",
		НСтр("ru = 'Поступления из товаров в пути превышают остатки товаров в пути в организации ""%1"" за период %2'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "КорректностьПереходаНаПУ22".
//
Процедура ПроверкаКорректностиПереходаНаПартионныйУчетВерсии22(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СебестоимостьТоваров"" КАК ИмяРегистра,
	|	Т.Организация,
	|	Т.Регистратор
	|ПОМЕСТИТЬ НекорректныйПереносДанных
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Период <> ДОБАВИТЬКДАТЕ(&ДатаПереходаНаПартионныйУчетВерсии22, СЕКУНДА, -1)
	|	И Т.Активность
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПереносДанных)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ДетализацияПартийТоваровДляНДСиУСН"" КАК ИмяРегистра,
	|	Т.Организация,
	|	Т.Регистратор
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Т
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Период <> ДОБАВИТЬКДАТЕ(&ДатаПереходаНаПартионныйУчетВерсии22, СЕКУНДА, -1)
	|	И Т.Активность
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПереносДанных)";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ИмяРегистра",		НСтр("ru='Регистр'"));
	СписокПолей.Добавить("Регистратор",		НСтр("ru='Документ'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"НекорректныйПереносДанных",
		НСтр("ru='Обнаружены некорректные движения ""Перенос данных"" по организации ""%1"" в периоде %2'"),
		СписокПолей,
		"Регистратор");
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "СоответствиеСуммИКоличества".
//
Процедура ПроверкаСоответствияСуммИКоличества(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.РазделУчета 									КАК РазделУчета,
	|	Т.ВидЗапасов 									КАК ВидЗапасов,
	|	Т.Организация 									КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры 					КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия 										КАК Партия,
	|	Т.АналитикаУчетаПартий 							КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 					КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС 							КАК ВидДеятельностиНДС,
	|
	|	СУММА(Т.Знак * Т.Количество) 					КАК Количество,
	|
	|	СУММА(Т.Знак * Т.Стоимость) 					КАК Стоимость,
	|	СУММА(Т.Знак * Т.СтоимостьБезНДС) 				КАК СтоимостьБезНДС,
	|	СУММА(Т.Знак * Т.ДопРасходы) 					КАК ДопРасходы,
	|	СУММА(Т.Знак * Т.ДопРасходыБезНДС) 				КАК ДопРасходыБезНДС,
	|	СУММА(Т.Знак * Т.СтоимостьРегл) 				КАК СтоимостьРегл,
	|	СУММА(Т.Знак * Т.СтоимостьЗабалансовая) 		КАК СтоимостьЗабалансовая,
	|	СУММА(Т.Знак * Т.Трудозатраты) 					КАК Трудозатраты,
	|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеСНДС) 	КАК ПостатейныеПостоянныеСНДС,
	|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеБезНДС) 	КАК ПостатейныеПостоянныеБезНДС,
	|	СУММА(Т.Знак * Т.ПостатейныеПеременныеСНДС) 	КАК ПостатейныеПеременныеСНДС,
	|	СУММА(Т.Знак * Т.ПостатейныеПеременныеБезНДС) 	КАК ПостатейныеПеременныеБезНДС,
	|	СУММА(Т.Знак * Т.СтоимостьЗабалансоваяРегл)		КАК СтоимостьЗабалансоваяРегл,
	|	СУММА(Т.Знак * Т.ДопРасходыРегл) 				КАК ДопРасходыРегл,
	|	СУММА(Т.Знак * Т.ТрудозатратыРегл) 				КАК ТрудозатратыРегл,
	|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеРегл) 	КАК ПостатейныеПостоянныеРегл,
	|	СУММА(Т.Знак * Т.ПостатейныеПеременныеРегл) 	КАК ПостатейныеПеременныеРегл,
	|	СУММА(Т.Знак * Т.СтоимостьУпр) 					КАК СтоимостьУпр,
	|	СУММА(Т.Знак * Т.ДопРасходыУпр) 				КАК ДопРасходыУпр,
	|	СУММА(Т.Знак * Т.ТрудозатратыУпр) 				КАК ТрудозатратыУпр,
	|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеУпр)		КАК ПостатейныеПостоянныеУпр,
	|	СУММА(Т.Знак * Т.ПостатейныеПеременныеУпр)		КАК ПостатейныеПеременныеУпр
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.РазделУчета 							КАК РазделУчета,
	|		Т.ВидЗапасов 							КАК ВидЗапасов,
	|		Т.Организация 							КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры 			КАК АналитикаУчетаНоменклатуры,
	|		Т.Партия 								КАК Партия,
	|		Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|		Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|		
	|		1										КАК Знак,
	|		Т.КоличествоОстаток 					КАК Количество,
	|		
	|		Т.СтоимостьОстаток 						КАК Стоимость,
	|		Т.СтоимостьБезНДСОстаток 				КАК СтоимостьБезНДС,
	|		Т.ДопРасходыОстаток 					КАК ДопРасходы,
	|		Т.ДопРасходыБезНДСОстаток 				КАК ДопРасходыБезНДС,
	|		Т.СтоимостьРеглОстаток 					КАК СтоимостьРегл,
	|		Т.СтоимостьЗабалансоваяОстаток 			КАК СтоимостьЗабалансовая,
	|		Т.ТрудозатратыОстаток 					КАК Трудозатраты,
	|		Т.ПостатейныеПостоянныеСНДСОстаток 		КАК ПостатейныеПостоянныеСНДС,
	|		Т.ПостатейныеПостоянныеБезНДСОстаток 	КАК ПостатейныеПостоянныеБезНДС,
	|		Т.ПостатейныеПеременныеСНДСОстаток 		КАК ПостатейныеПеременныеСНДС,
	|		Т.ПостатейныеПеременныеБезНДСОстаток 	КАК ПостатейныеПеременныеБезНДС,
	|		Т.СтоимостьЗабалансоваяРеглОстаток 		КАК СтоимостьЗабалансоваяРегл,
	|		Т.ДопРасходыРеглОстаток 				КАК ДопРасходыРегл,
	|		Т.ТрудозатратыРеглОстаток 				КАК ТрудозатратыРегл,
	|		Т.ПостатейныеПостоянныеРеглОстаток 		КАК ПостатейныеПостоянныеРегл,
	|		Т.ПостатейныеПеременныеРеглОстаток 		КАК ПостатейныеПеременныеРегл,
	|		Т.СтоимостьУпрОстаток 					КАК СтоимостьУпр,
	|		Т.ДопРасходыУпрОстаток 					КАК ДопРасходыУпр,
	|		Т.ТрудозатратыУпрОстаток 				КАК ТрудозатратыУпр,
	|		Т.ПостатейныеПостоянныеУпрОстаток 		КАК ПостатейныеПостоянныеУпр,
	|		Т.ПостатейныеПеременныеУпрОстаток 		КАК ПостатейныеПеременныеУпр
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Исключим из остатков на конец периода движения, формирующие начальные остатки для партионного учета версии 2.2
	|	ВЫБРАТЬ
	|		Т.РазделУчета 						КАК РазделУчета,
	|		Т.ВидЗапасов 						КАК ВидЗапасов,
	|		Т.Организация 						КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
	|		Т.Партия 							КАК Партия,
	|		Т.АналитикаУчетаПартий 				КАК АналитикаУчетаПартий,
	|		Т.АналитикаФинансовогоУчета 		КАК АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
	|		
	|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ								КАК Знак,
	|		Т.Количество 						КАК Количество,
	|		
	|		Т.Стоимость 						КАК Стоимость,
	|		Т.СтоимостьБезНДС 					КАК СтоимостьБезНДС,
	|		Т.ДопРасходы 						КАК ДопРасходы,
	|		Т.ДопРасходыБезНДС 					КАК ДопРасходыБезНДС,
	|		Т.СтоимостьРегл 					КАК СтоимостьРегл,
	|		Т.СтоимостьЗабалансовая 			КАК СтоимостьЗабалансовая,
	|		Т.Трудозатраты 						КАК Трудозатраты,
	|		Т.ПостатейныеПостоянныеСНДС 		КАК ПостатейныеПостоянныеСНДС,
	|		Т.ПостатейныеПостоянныеБезНДС 		КАК ПостатейныеПостоянныеБезНДС,
	|		Т.ПостатейныеПеременныеСНДС 		КАК ПостатейныеПеременныеСНДС,
	|		Т.ПостатейныеПеременныеБезНДС 		КАК ПостатейныеПеременныеБезНДС,
	|		Т.СтоимостьЗабалансоваяРегл 		КАК СтоимостьЗабалансоваяРегл,
	|		Т.ДопРасходыРегл 					КАК ДопРасходыРегл,
	|		Т.ТрудозатратыРегл 					КАК ТрудозатратыРегл,
	|		Т.ПостатейныеПостоянныеРегл 		КАК ПостатейныеПостоянныеРегл,
	|		Т.ПостатейныеПеременныеРегл 		КАК ПостатейныеПеременныеРегл,
	|		Т.СтоимостьУпр 						КАК СтоимостьУпр,
	|		Т.ДопРасходыУпр 					КАК ДопРасходыУпр,
	|		Т.ТрудозатратыУпр 					КАК ТрудозатратыУпр,
	|		Т.ПостатейныеПостоянныеУпр 			КАК ПостатейныеПостоянныеУпр,
	|		Т.ПостатейныеПеременныеУпр 			КАК ПостатейныеПеременныеУпр
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ГДЕ
	|		НЕ &ПартионныйУчетВерсии22
	|		И &ДатаПереходаНаПартионныйУчетВерсии22 = &НачалоСледующегоПериода
	|		И Т.Период = &КонецПериода
	|		И Т.Организация В (&МассивОрганизаций)
	|		И Т.Активность
	|		И Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.Партия,
	|	Т.АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета 							КАК РазделУчета,
	|	Т.ВидЗапасов 							КАК ВидЗапасов,
	|	Т.Организация 						 	КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры   			КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия 								КАК Партия,
	|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|
	|	Т.Количество 							КАК Количество,
	|	Т.Стоимость
	|		+ Т.СтоимостьЗабалансовая
	|		+ Т.ДопРасходы
	|		+ Т.Трудозатраты
	|		+ Т.ПостатейныеПостоянныеСНДС
	|		+ Т.ПостатейныеПеременныеСНДС 		КАК ПолнаяСтоимость,
	|	Т.СтоимостьБезНДС
	|		+ Т.ДопРасходыБезНДС
	|		+ Т.Трудозатраты
	|		+ Т.ПостатейныеПостоянныеБезНДС
	|		+ Т.ПостатейныеПеременныеБезНДС		КАК ПолнаяСтоимостьБезНДС,
	|	Т.СтоимостьРегл
	|		+ Т.СтоимостьЗабалансоваяРегл
	|		+ Т.ДопРасходыРегл
	|		+ Т.ТрудозатратыРегл
	|		+ Т.ПостатейныеПостоянныеРегл
	|		+ Т.ПостатейныеПеременныеРегл		КАК ПолнаяСтоимостьРегл,
	|	Т.СтоимостьУпр
	|		+ Т.ДопРасходыУпр
	|		+ Т.ТрудозатратыУпр
	|		+ Т.ПостатейныеПостоянныеУпр
	|		+ Т.ПостатейныеПеременныеУпр		КАК ПолнаяСтоимостьУпр
	|ПОМЕСТИТЬ ВТОстаткиБезКоличества
	|ИЗ
	|	ВТОстатки КАК Т
	|ГДЕ
	|	Т.Количество = 0
	|	И НЕ (Т.Стоимость = 0
	|		И Т.СтоимостьБезНДС = 0
	|		И Т.ДопРасходы = 0
	|		И Т.ДопРасходыБезНДС = 0
	|		И Т.СтоимостьРегл = 0
	|		И Т.СтоимостьЗабалансовая = 0
	|		И Т.Трудозатраты = 0
	|		И Т.ПостатейныеПостоянныеСНДС = 0
	|		И Т.ПостатейныеПостоянныеБезНДС = 0
	|		И Т.ПостатейныеПостоянныеБезНДС = 0
	|		И Т.ПостатейныеПеременныеБезНДС = 0
	|		И Т.СтоимостьЗабалансоваяРегл = 0
	|		И Т.ДопРасходыРегл = 0
	|		И Т.ТрудозатратыРегл = 0
	|		И Т.ПостатейныеПостоянныеРегл = 0
	|		И Т.ПостатейныеПеременныеРегл = 0
	|		И Т.СтоимостьУпр = 0
	|		И Т.ДопРасходыУпр = 0
	|		И Т.ТрудозатратыУпр = 0
	|		И Т.ПостатейныеПостоянныеУпр = 0
	|		И Т.ПостатейныеПеременныеУпр = 0)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета 							КАК РазделУчета,
	|	Т.ВидЗапасов 							КАК ВидЗапасов,
	|	Т.Организация 						 	КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры   			КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия 								КАК Партия,
	|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|
	|	Т.Количество 							КАК Количество,
	|	Т.Стоимость
	|		+ Т.СтоимостьЗабалансовая
	|		+ Т.ДопРасходы
	|		+ Т.Трудозатраты
	|		+ Т.ПостатейныеПостоянныеСНДС
	|		+ Т.ПостатейныеПеременныеСНДС 		КАК ПолнаяСтоимость,
	|	Т.СтоимостьБезНДС
	|		+ Т.ДопРасходыБезНДС
	|		+ Т.Трудозатраты
	|		+ Т.ПостатейныеПостоянныеБезНДС
	|		+ Т.ПостатейныеПеременныеБезНДС		КАК ПолнаяСтоимостьБезНДС,
	|	Т.СтоимостьРегл
	|		+ Т.СтоимостьЗабалансоваяРегл
	|		+ Т.ДопРасходыРегл
	|		+ Т.ТрудозатратыРегл
	|		+ Т.ПостатейныеПостоянныеРегл
	|		+ Т.ПостатейныеПеременныеРегл		КАК ПолнаяСтоимостьРегл,
	|	Т.СтоимостьУпр
	|		+ Т.ДопРасходыУпр
	|		+ Т.ТрудозатратыУпр
	|		+ Т.ПостатейныеПостоянныеУпр
	|		+ Т.ПостатейныеПеременныеУпр		КАК ПолнаяСтоимостьУпр
	|ПОМЕСТИТЬ ВТОстаткиСРазнымЗнаком
	|ИЗ
	|	ВТОстатки КАК Т
	|ГДЕ
	|	Т.Количество <> 0
	|	И НЕ (Т.Количество
	|			* (Т.Стоимость + Т.СтоимостьЗабалансовая
	|				+ Т.ДопРасходы + Т.Трудозатраты
	|				+ Т.ПостатейныеПостоянныеСНДС + Т.ПостатейныеПеременныеСНДС) >= 0
	|		И Т.Количество
	|			* (Т.СтоимостьБезНДС + Т.ДопРасходыБезНДС + Т.Трудозатраты
	|				+ Т.ПостатейныеПостоянныеБезНДС + Т.ПостатейныеПеременныеБезНДС) >= 0
	|		И Т.Количество
	|			* (Т.СтоимостьРегл + Т.СтоимостьЗабалансоваяРегл
	|				+ Т.ДопРасходыРегл + Т.ТрудозатратыРегл
	|				+ Т.ПостатейныеПостоянныеРегл + Т.ПостатейныеПеременныеРегл) >= 0
	|		И Т.Количество
	|			* (Т.СтоимостьУпр + Т.ДопРасходыУпр + Т.ТрудозатратыУпр
	|				+ Т.ПостатейныеПостоянныеУпр + Т.ПостатейныеПеременныеУпр) >= 0
	|		)
	|	И Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("РазделУчета",					НСтр("ru='Раздел учета'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("Партия",						НСтр("ru='Партия'"));
	СписокПолей.Добавить("АналитикаУчетаПартий",		НСтр("ru='Аналитика учета партий'"));
	СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru='Аналитика финансового учета'"));
	СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru='Вид деятельности НДС'"));
	СписокПолей.Добавить("Количество",					НСтр("ru='Количество'"));
	СписокПолей.Добавить("ПолнаяСтоимость",				НСтр("ru='Полная стоимость'"));
	СписокПолей.Добавить("ПолнаяСтоимостьБезНДС",		НСтр("ru='Полная стоимость без НДС'"));
	СписокПолей.Добавить("ПолнаяСтоимостьРегл",			НСтр("ru='Полная стоимость (регл.)'"));
	СписокПолей.Добавить("ПолнаяСтоимостьУпр",			НСтр("ru='Полная стоимость (упр.)'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиБезКоличества",
		НСтр("ru='Обнаружены ненулевые остатки по суммам при нулевом остатке по количеству в регистре себестоимости по организации ""%1"" на конец периода %2'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТОстаткиСРазнымЗнаком",
		НСтр("ru='Обнаружены разные знаки у остатков по суммам и остатка по количеству в регистре себестоимости по организации ""%1"" на конец периода %2'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	
	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДополнительныеПараметрыЗапроса.Вставить("ТипыЗаписейКонвертацииДанных", ТипыЗаписейКонвертацииДанных());
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса,
		ДополнительныеПараметрыЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ЗатратыНеРаспределенныеНаСебестоимость".
//
Процедура ПроверкаЗатратНеРаспределенныхНаСебестоимость(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСтатьиРасходовУпр
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
	|ГДЕ
	|	Т.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСтатьиРасходовРегл
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
	|ГДЕ
	|	Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.СтатьяРасходов,
	|	Т.АналитикаРасходов,
	|	Т.ДокументПоступленияРасходов,
	|	Т.АналитикаУчетаПартий,
	|	Т.НаправлениеДеятельности,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидДеятельностиНДС,
	|	СУММА(Т.Стоимость) КАК Стоимость,
	|	СУММА(Т.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(Т.СтоимостьРегл) КАК СтоимостьРегл,
	|	СУММА(Т.НДСРегл) КАК НДСРегл
	|ПОМЕСТИТЬ ВТОстаткиНераспределенныхРасходов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Организация КАК Организация,
	|		Т.Подразделение КАК Подразделение,
	|		Т.СтатьяРасходов КАК СтатьяРасходов,
	|		Т.АналитикаРасходов КАК АналитикаРасходов,
	|		Т.ДокументПоступленияРасходов КАК ДокументПоступленияРасходов,
	|		Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|		Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|		Т.СтоимостьОстаток КАК Стоимость,
	|		Т.СтоимостьБезНДСОстаток КАК СтоимостьБезНДС,
	|		0 КАК СтоимостьРегл,
	|		0 КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииПрочихРасходов.Остатки(
	|			&ГраницаКонецПериода,
	|			СтатьяРасходов В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ВТСтатьиРасходовУпр КАК Т)) КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Организация КАК Организация,
	|		Т.Подразделение КАК Подразделение,
	|		Т.СтатьяРасходов КАК СтатьяРасходов,
	|		Т.АналитикаРасходов КАК АналитикаРасходов,
	|		Т.ДокументПоступленияРасходов КАК ДокументПоступленияРасходов,
	|		Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|		Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|		0 КАК Стоимость,
	|		0 КАК СтоимостьБезНДС,
	|		Т.СтоимостьРеглОстаток КАК СтоимостьРегл,
	|		Т.НДСРеглОстаток КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииПрочихРасходов.Остатки(
	|			&ГраницаКонецПериода,
	|			СтатьяРасходов В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ВТСтатьиРасходовРегл КАК Т)) КАК Т) КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.СтатьяРасходов,
	|	Т.АналитикаРасходов,
	|	Т.ДокументПоступленияРасходов,
	|	Т.АналитикаУчетаПартий,
	|	Т.НаправлениеДеятельности,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидДеятельностиНДС";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение",				НСтр("ru='Подразделение'"));
	СписокПолей.Добавить("СтатьяРасходов",				НСтр("ru='Статья расходов'"));
	СписокПолей.Добавить("АналитикаРасходов",			НСтр("ru='Аналитика расходов'"));
	СписокПолей.Добавить("ДокументПоступленияРасходов",	НСтр("ru='Документ поступления расходов'"));
	СписокПолей.Добавить("АналитикаУчетаПартий",		НСтр("ru='Аналитика учета партий'"));
	СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru='Направление деятельности'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru='Вид деятельности НДС'"));
	СписокПолей.Добавить("Стоимость",					НСтр("ru='Стоимость'"));
	СписокПолей.Добавить("СтоимостьБезНДС",				НСтр("ru='Стоимость без НДС'"));
	СписокПолей.Добавить("СтоимостьРегл",				НСтр("ru='Стоимость (регл.)'"));
	СписокПолей.Добавить("НДСРегл",						НСтр("ru='НДС (регл.)'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиНераспределенныхРасходов",
		НСтр("ru='Обнаружены не распределенные на себестоимость остатки расходов по организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ЗаписиСПризнакомРасчетНеЗавершен".
//
Процедура ПроверкаЗаписейСПризнакомРасчетНеЗавершен(ПараметрыПроверки) Экспорт
	
	ЗначенияПараметров = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	АвтоматическоеТестирование = ЗакрытиеМесяцаСервер.ЗначениеДополнительногоПараметраПроверки(
		ПараметрыПроверки,
		"АвтоматическоеТестирование",
		Ложь);
	
	// Проверка выполняется в автотестах или если явно включен соответствующий технологический параметр.
	Если НЕ АвтоматическоеТестирование И НЕ ЗначенияПараметров.ПроверятьЗаписиСПризнакомРасчетНеЗавершен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	ШаблонЗапроса =
	"
	|%1
	|
	|ВЫБРАТЬ
	|	Т.%2 КАК Организация,
	|	""%3"" КАК ИмяРегистра,
	|	Т.Регистратор КАК Регистратор,
	|	СУММА(1) КАК КоличествоДвижений
	|%4
	|ИЗ
	|	РегистрНакопления.%3 КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.%2 В(&МассивОрганизаций)
	|	И Т.РасчетНеЗавершен
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.%2,
	|	Т.Регистратор
	|";
	
	Для Каждого КлючИЗначение Из ПартионныйУчет22.ИсходящиеДанныеМеханизма() Цикл
		
		МетаРегистр = КлючИЗначение.Ключ;
		
		Если НЕ Метаданные.РегистрыНакопления.Содержит(МетаРегистр)
		 ИЛИ МетаРегистр.Реквизиты.Найти("РасчетНеЗавершен") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    ШаблонЗапроса,
				?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ"),
				?(МетаРегистр.Измерения.Найти("Организация") = Неопределено, "АналитикаУчетаПоПартнерам.Организация", "Организация"),
				МетаРегистр.Имя,
				?(ТекстЗапроса = "", "ПОМЕСТИТЬ ВТДокументыСНезаполненнойПартией", ""));
			
	КонецЦикла;
	
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ИмяРегистра", НСтр("ru='Имя регистра'"));
	СписокПолей.Добавить("Регистратор", НСтр("ru='Документ'"));
	СписокПолей.Добавить("КоличествоДвижений", НСтр("ru='Количество движений'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТДокументыСНезаполненнойПартией",
		НСтр("ru='Обнаружены неподобранные партии в движениях документов организации ""%1"" за период %2'"),
		СписокПолей,
		"Регистратор");
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ПроверкаРезультатаРасчетаПоКоличеству".
//
Процедура ПроверкаРезультатаРасчетаПоКоличеству(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВозвратныеОтходы() + "
	|
	|ВЫБРАТЬ
	|	Т.Организация 							КАК Организация,
	|	Т.РазделУчета 							КАК РазделУчета,
	|	Т.АналитикаУчетаНоменклатуры 			КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов 							КАК ВидЗапасов,
	|	Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|	Т.Партия 								КАК Партия,
	|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|	МАКСИМУМ(Т.КоличествоКонечныйОстаток)	КАК Количество
	|ПОМЕСТИТЬ ВТОтрицательныеОстатки
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,,
	|		Организация В (&МассивОрганизаций)
	|		И &ПартионныйУчетВерсии22
	|		И РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		И РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		И НЕ ((АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов, Организация ) В
	|			(ВЫБРАТЬ Т.АналитикаУчетаНоменклатуры, Т.РазделУчета, Т.ВидЗапасов, Т.Организация ИЗ ВозвратныеОтходы КАК Т))
	|	) КАК Т	
	|
	|ГДЕ
	|	Т.КоличествоКонечныйОстаток < 0
	|	И (Т.КоличествоПриход <> 0 ИЛИ Т.КоличествоРасход <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.РазделУчета,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.ВидДеятельностиНДС,
	|	Т.Партия,
	|	Т.АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета
	|
	|";
	
	// Отрицательные остатки партий.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("РазделУчета",					НСтр("ru='Раздел учета'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru='Вид деятельности НДС'"));
	СписокПолей.Добавить("Партия",						НСтр("ru='Партия'"));
	СписокПолей.Добавить("АналитикаУчетаПартий",		НСтр("ru='Аналитика учета партий'"));
	СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru='Аналитика финансового учета'"));
	СписокПолей.Добавить("Количество",					НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОтрицательныеОстатки",
		НСтр("ru='Обнаружены отрицательные остатки партий в регистре себестоимости по организации ""%1"" на конец периода %2'"),
		СписокПолей);
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры
	
// Процедура-обработчик проверки состояния системы "СоответствиеРегистровСебестоимостиИПартийНДС".
//
Процедура ПроверкаСоответствияРегистровСебестоимостиИПартийНДС(ПараметрыПроверки) Экспорт
	
	ЗначенияПараметров = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	АвтоматическоеТестирование = ЗакрытиеМесяцаСервер.ЗначениеДополнительногоПараметраПроверки(
		ПараметрыПроверки,
		"АвтоматическоеТестирование",
		Ложь);
	
	// Проверка выполняется в автотестах или если явно включен соответствующий технологический параметр.
	Если НЕ АвтоматическоеТестирование И НЕ ЗначенияПараметров.ПроверятьСоответствиеСебестоимостиИПартийНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета КАК РазделУчета,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.Организация КАК Организация,
	|	Т.Партия КАК Партия,
	|	Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	Т.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ВТСебестоимость
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (&МассивОрганизаций)
	|				И &ПартионныйУчетВерсии22) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета КАК РазделУчета,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.Организация КАК Организация,
	|	Т.Партия КАК Партия,
	|	Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	Т.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ВТПартииНДС
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (&МассивОрганизаций)
	|				И &ПартионныйУчетВерсии22) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета КАК РазделУчета,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.Организация КАК Организация,
	|	Т.Партия КАК Партия,
	|	Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	СУММА(Т.КоличествоСебестоимость) КАК КоличествоСебестоимость,
	|	СУММА(Т.КоличествоПартииНДС) КАК КоличествоПартииНДС
	|ПОМЕСТИТЬ ВТРасхожденияСебестоимостиИПартийНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.РазделУчета КАК РазделУчета,
	|		Т.ВидЗапасов КАК ВидЗапасов,
	|		Т.Организация КАК Организация,
	|		Т.Партия КАК Партия,
	|		Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|		Т.Количество КАК КоличествоСебестоимость,
	|		0 КАК КоличествоПартииНДС
	|	ИЗ
	|		ВТСебестоимость КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.АналитикаУчетаНоменклатуры,
	|		Т.РазделУчета,
	|		Т.ВидЗапасов,
	|		Т.Организация,
	|		Т.Партия,
	|		Т.АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС,
	|		0,
	|		Т.Количество
	|	ИЗ
	|		ВТПартииНДС КАК Т) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.Партия,
	|	Т.АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.КоличествоСебестоимость) >= 0 И
	|	СУММА(Т.КоличествоСебестоимость) < СУММА(Т.КоличествоПартииНДС)";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("РазделУчета",					НСтр("ru='Раздел учета'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("Партия",						НСтр("ru='Партия'"));
	СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru='Аналитика финансового учета'"));
	СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru='Вид деятельности НДС'"));
	СписокПолей.Добавить("КоличествоСебестоимость",		НСтр("ru='Количество (себестоимость)'"));
	СписокПолей.Добавить("КоличествоПартииНДС",			НСтр("ru='Количество (партии НДС)'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРасхожденияСебестоимостиИПартийНДС",
		НСтр("ru='Обнаружены расхождения по количеству между регистрами себестоимости и партий НДС по организации ""%1"" на конец периода %2'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

Функция ТекстЗапросаВозвратныеОтходы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отходы.АналитикаУчетаНоменклатуры,
	|	Отходы.РазделУчета,
	|	Отходы.ВидЗапасов,
	|	Отходы.Организация
	|ПОМЕСТИТЬ ВозвратныеОтходы
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Отходы
	|ГДЕ
	|	Отходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Отходы.Организация В (&МассивОрганизаций)
	|	И Отходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Отходы.Количество < 0
	|	И Отходы.Активность
	|	И ((Отходы.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		)
	|	  ИЛИ
	|		(Отходы.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|    ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Отходы.АналитикаУчетаНоменклатуры,
	|	Отходы.РазделУчета,
	|	Отходы.ВидЗапасов,
	|	Отходы.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедуры

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении расчета партий и себестоимости.
// Является оберткой к процедуре ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета()
//
// Параметры:
//	ПараметрыРасчета  - Структура - параметры расчета, см. ИнициализироватьОбщиеПараметрыРасчета()
//	МассивОрганизаций - Массив - организации, к которым относится проблема
//							если не указано, то проблема относится к каждой из рассчитываемых организаций
//	ТекстПроблемы 	  - Строка - краткая информация о проблеме; выводится в форме закрытия месяца
//	ТекстУточнения 	  - Строка - подробное описание проблемы; проблемы в форме закрытия месяца группируются по ТекстПроблемы + Важность, а данный текст выводится в форме расшифровки проблем
//	Объект 			  - Произвольный - объект для расшифровки проблемы
//	Важность 		  - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус проблемы; по умолчанию "Ошибка"
//	
Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, МассивОрганизаций = Неопределено,
			ТекстПроблемы = "", ТекстУточнения = "", Объект = Неопределено, Важность = Неопределено) Экспорт
	
	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");
	
	//Запишем информацию о наличии ошибок в механизме закрытия месяца.
	Если ЗначениеЗаполнено(МассивОрганизаций) Тогда
		ОрганизацииДляПротокола = МассивОрганизаций;
	Иначе		
		ОрганизацииДляПротокола = ?(ЭтоПараметрыРасчетаПУ22, ПараметрыРасчета.КопияМассивОрганизаций, ПараметрыРасчета.МассивОрганизаций);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацииДляПротокола) Тогда
		ОрганизацииДляПротокола = Справочники.Организации.ДоступныеОрганизации();
	КонецЕсли;
	
	ОрганизацииДляПротокола = ОбщегоНазначенияУТКлиентСервер.Массив(ОрганизацииДляПротокола);
	
	Если НЕ ЗначениеЗаполнено(ТекстПроблемы) Тогда
		ТекстПроблемы = НСтр("ru='При выполнении расчета были диагностированы ошибки'");
	КонецЕсли;
	
	ПолныйТекстПроблемы = ТекстПроблемы
		+ ?(ОрганизацииДляПротокола.Количество() = 1, "; " + НСтр("ru='организация ""%1"", период ""%2""'"), "");
	
	Для Каждого ТекущаяОрганизация Из ОрганизацииДляПротокола Цикл
		
		ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
			Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
			ТекущаяОрганизация,
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
		
		ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРегистрации,
			ПолныйТекстПроблемы,
			Важность,
			ТекстУточнения,
			Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет подготовительные действия к расчету в случае, если расчет вызывается не из механизма закрытия месяца.
//
Процедура ВыполнитьОперацииЗакрытияМесяцаДляПодготовкиКРасчетуЭтапа(СтрокаСхемыРасчета) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.ВыполнитьОперацииПодготовкиКРасчетуЭтапа(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		НачалоМесяца(СтрокаСхемыРасчета.Дата),
		СтрокаСхемыРасчета.Организации);
	
КонецПроцедуры

// Выполняет завершающие действия для расчета в случае, если расчет вызывается не из механизма закрытия месяца.
//
Процедура ВыполнитьОперацииЗакрытияМесяцаДляЗавершенияРасчетаЭтапа(СтрокаСхемыРасчета) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.ВыполнитьОперацииЗавершенияРасчетаЭтапа(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		НачалоМесяца(СтрокаСхемыРасчета.Дата),
		СтрокаСхемыРасчета.Организации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПараметрыОперацийЗакрытияМесяца

// Формирует описание группа технологических параметров.
//
Функция ОписаниеГруппПараметровОперацииЗакрытияМесяца() Экспорт
	
	ЭтоФайловаяИБ    = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоОбластьДанных = ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	ОписаниеГруппПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеГруппПараметровОперации();
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "РешениеСЛУ";
	ОписаниеГруппы.Наименование = НСтр("ru='Решение СЛУ'");
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, влияющие на результат решения системы линейных уравнений, с помощью которой выполняется расчет стоимости номенклатуры.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ПогрешностиРешенияСЛУ";
	ОписаниеГруппы.Наименование = НСтр("ru='Погрешности решения СЛУ'");
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, влияющие на определение погрешностей решения СЛУ.
		|Максимальное значение ресурса, которую можно считать ошибкой округления, полученной в результате решения СЛУ.
		|Т.к. СЛУ не всегда решается с ""нулевой"" точностью, то при расчете накапливаются ошибки округления, которые, в свою очередь,
		|приводят к тому, что в регистрах могут появиться ""зависшие"" остатки в рассчитываемых ресурсах.
		|Эти ""зависшие"" остатки по окончании расчета просто списываются из ресурсов регистра.
		|Параметры этой группы также используются в операции ""Настройка распределения расходов"".'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ОграниченияВыборки";
	ОписаниеГруппы.Наименование = НСтр("ru='Ограничения на размер различных структур данных'");
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, ограничивающие максимальный размер различных типов данных, используемых механизмом расчета.
		|Необходимы для предотвращения ошибок нехватки памяти.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ОграниченияФЗ";
	ОписаниеГруппы.Наименование = НСтр("ru='Управление многопоточностью'");
	ОписаниеГруппы.Скрыть = ЭтоФайловаяИБ ИЛИ ЭтоОбластьДанных;
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, накладывающие ограничения на фоновые задания, используемые для
		|  - многопоточного расчета партий;
		|  - параллельной записи сформированных движений.
		|Необходимы для предотвращения ошибок нехватки памяти.
		|Используются только в клиент-серверной информационной базе,
		|т.к. в файловом режиме Платформа не поддерживает параллельную работу фоновых заданий.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "УправлениеИтогами";
	ОписаниеГруппы.Наименование = НСтр("ru='Управление итогами регистров'");
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, влияющие на скорость запись движений по регистрам, сформированным механизмом расчета.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "НачальныеОстатки";
	ОписаниеГруппы.Наименование = НСтр("ru='Переход на партионный учет версии 2.2'");
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, влияющие на формирование начальных остатков партий в регистре ""Себестоимость товаров"".'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "Проверки";
	ОписаниеГруппы.Наименование = НСтр("ru='Проверки данных'");
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, используемые в процедурах проверки данных до и после расчета.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ВыгрузкаДанныхРасчета";
	ОписаниеГруппы.Наименование = НСтр("ru='Выгрузка промежуточных данных расчета'");
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, позволяющие сохранить промежуточные данные расчета партий и себестоимости.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "Отладка";
	ОписаниеГруппы.Наименование = НСтр("ru='Отладка расчета'");
	ОписаниеГруппы.Описание =
		НСтр("ru='Параметры, используемые для отладки механизмов расчета.
		|Изменять данные параметры рекомендуется только в тестовых информационных базах!'");
		
	Возврат ОписаниеГруппПараметров;
	
КонецФункции

// Формирует описание технологических параметров.
//
Функция ОписаниеПараметровОперацииЗакрытияМесяца() Экспорт
	
	ЭтоФайловаяИБ      = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоОбластьДанных   = ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	
	#Область РешениеСЛУ
		
		Родитель = "РешениеСЛУ";
		
		// ТребуемаяТочность
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ТребуемаяТочность";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Точность решения СЛУ'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 9, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ДиапазонПо    	  = 0.1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 0.000001;
		ОписаниеПараметра.Описание =
			НСтр("ru='Точность решения системы линейных уравнений - максимальное значение разницы решений, полученных на итерациях n и (n+1).
			|Чем меньше данное значение, тем более точный получается результат решения СЛУ (стоимость номенклатуры),
			|но тем большее количество итераций решения СЛУ требуется, чтобы достигнуть этой точности.'");
		
		// МаксимальноеКоличествоИтераций
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоИтераций";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное количество итераций поиска решения СЛУ'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ДиапазонПо     	  = 9999;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 200;
		ОписаниеПараметра.Описание =
			НСтр("ru='Максимальное количество итераций, допустимое для поиска решения системы линейных уравнений.
			|Необходимо для того, чтобы принудительно закончить поиск подходящего решения СЛУ в случае, если не удается достичь требуемой точности решения СЛУ.'");
		
		// РазрядностьДляРасчетов
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "РазрядностьДляРасчетов";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Разрядность числовых полей, используемых при решении СЛУ.'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ЗначениеПоУмолчанию = 28;
		ОписаниеПараметра.ДиапазонС     	  = 23;
		ОписаниеПараметра.ДиапазонПо     	  = 38;
		ОписаниеПараметра.Описание =
			НСтр("ru='Разрядность числа, используемая в запросах механизма расчета себестоимости.
			|Изменять значение параметра имеет смысл только в случае возникновения ошибок вида ""Ошибка SQL: Переполнение поля."" или ""Arithmetic overflow"".
			|При этом в результате повышения значения данного параметра возможно ухудшение точности расчета.
			|Указанное значение не должно превышать максимальную разрядность чисел, допустимую в используемой СУБД (38 - для всех СУБД кроме DB2, для DB2 - 31).
			|Подробнее про разрядность см. https://its.1c.ru/db/metod8dev#content:2665:hdoc'");
		
		// ЗащитаОтПереполненияПоля
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗащитаОтПереполненияПоля";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное значение, допустимое для суммового поля запроса'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ЗначениеПоУмолчанию = 9;
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ДиапазонПо     	  = 38;
		ОписаниеПараметра.Описание =
			НСтр("ru='Максимально допустимая разрядность числа 1*10^х - значения суммы (цены) в строке временной таблицы решений при решении СЛУ.
			|Если сумма в строке получается больше, то такая строка считается ошибочной и отбрасывается.
			|В противном случае при решении СЛУ возможны ошибки вида ""Ошибка SQL: Переполнение поля."" или ""Arithmetic overflow"".
			|Если указано значение 0, то защита от переполнения не используется. 
			|Значение подобрано опытным путем.'");
		
	#КонецОбласти
	
	#Область ПогрешностиРешенияСЛУ
		
		Родитель = "ПогрешностиРешенияСЛУ";
		
		// ЗначениеПогрешностиСебестоимостьРегл
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиСебестоимостьРегл";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальная себестоимость (регл.), считаемая погрешностью'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется для регл. ресурсов регистра СебестоимостьТоваров.
			|Подробнее см. описание группы параметров.'");
		
		// ЗначениеПогрешностиСебестоимостьУпр
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиСебестоимостьУпр";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальная себестоимость (упр.), считаемая погрешностью'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется для упр. ресурсов регистра СебестоимостьТоваров.
			|Подробнее см. описание группы параметров.'");
		
		// ЗначениеПогрешностиРасходыРегл
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиРасходыРегл";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальная сумма расходов (регл.), считаемая погрешностью'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.Описание =
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется для регл. ресурсов регистров ПрочиеРасходы и ПрочиеРасходыНезавершенногоПроизводства (в КА и ERP).
			|Подробнее см. описание группы параметров.'");
		
		// ЗначениеПогрешностиРасходыУпр
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиРасходыУпр";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальная сумма расходов (упр.), считаемая погрешностью'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется для упр. ресурсов регистров ПрочиеРасходы и ПрочиеРасходыНезавершенногоПроизводства (в КА и ERP).
			|Подробнее см. описание группы параметров.'");
		
		// ЗначениеПогрешностиКоличество
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиКоличество";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное количество, считаемое погрешностью'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 3, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 0.05;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется для ресурсов ДоляСтоимости и ПоказательОтнесенияНаВыпуск регистра ПрочиеРасходыНезавершенногоПроизводства (в КА и ERP).
			|Подробнее см. описание группы параметров.'");
		
	#КонецОбласти
	
	#Область ОграниченияВыборки
		
		Родитель = "ОграниченияВыборки";
		
		// КоличествоСтрокВТЗ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КоличествоСтрокВТЗ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное количество строк в таблице значений'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 100000;
		ОписаниеПараметра.Описание =
			НСтр("ru='Максимальное количество строк, которое может быть помещено в таблицу значений.'");
		
		// КоличествоЗаписейВНЗ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КоличествоЗаписейВНЗ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное количество строк в наборе записей'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 10000;
		ОписаниеПараметра.Описание =
			НСтр("ru='Максимальное количество строк, которое может быть помещено в набор записей регистра.
			|Если указать значение 0, то запись движений в ИБ после расчета выполняться не будет.
			|Не следует использовать эту возможность при расчете первого месяца после перехода на партионный учет версии 2.2,
			|т.к. при этом не будут записаны начальные остатки в разрезе партий и последующий расчет будет некорректным.'");
		
		// ПорцияРасчетаПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПорцияРасчетаПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальная порция выборки данных при расчете партий'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 10000;
		ОписаниеПараметра.Описание =
			НСтр("ru='Максимальное количество узлов, обсчитываемых за один проход в механизме распределения партий версии 2.2.'");
		
		// МаксимальнаяДлинаЦепочки
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальнаяДлинаЦепочки";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальная длина цепочки движения партии'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 900;
		ОписаниеПараметра.Описание =
			НСтр("ru='Максимальная длина цепочки движения партии, которая может быть рассчитана механизмом партионного учета.
			|Если получается цепочка более длинная, то из-за рекурсивного вызова расчета возникнет ошибка ""Переполнение стека встроенного языка на сервере"".
			|Значение подобрано опытным путем.'");
		
	#КонецОбласти
	
	#Область ОграниченияФЗ
		
		Родитель = "ОграниченияФЗ";
		
		// МаксимальноеКоличествоФЗРасчетаПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоФЗРасчетаПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное количество одновременно выполняемых потоков расчета партий'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ЭтоФайловаяИБ, 0, ?(ЭтоОбластьДанных, 1, 5));
		ОписаниеПараметра.Описание =
			НСтр("ru='Максимальное количество одновременно запущенных фоновых заданий расчета партий.
			|Данные для расчета партий будут разделены на указанное количество порций (n) + 1,
			|после чего первая порция будет рассчитываться в основном сеансе, а остальные порции будут переданы для расчета в фоновые задания.
			|После окончания расчета всех порций результаты расчета будут собраны в основном сеансе и расчет перейдет к следующему этапу.
			|Если значение параметра равно 0, то расчет партий будет выполняться только в основном сеансе, без использования фоновых заданий.'");
		
		// Стабильность многопоточной записи на разном железе зависит от сочетания нескольких факторов:
		// - количества активных фоновых заданий (чем больше заданий, тем больше надо памяти для сервера Предприятия)
		// - количества движений, записываемых одним заданием (чем больше движений - тем больше памяти надо этому заданию)
		// - одновременности выполнения записи одного регистра разными заданиями (чем больше заданий пишет один регистр,
		//		тем больше вероятность возникновения ошибок, например, "Lock request time out period exceeded")
	
		// МаксимальноеКоличествоФЗЗаписи
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоФЗЗаписи";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное количество одновременно выполняемых заданий записи'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ЭтоФайловаяИБ, 0, ?(ЭтоОбластьДанных, 2, 5));
		ОписаниеПараметра.Описание =
			НСтр("ru='Максимальное количество одновременно запущенных фоновых заданий записи движений.
			|При достижении этого количества фоновых заданий новое задания не создается до тех пор, пока не будет завершено одно из уже запущенных заданий.
			|Если значение параметра меньше 2, то запись движений будет выполняться последовательно, без использования фоновых заданий.'");
		
		// КоличествоДвиженийВФЗЗаписи
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КоличествоДвиженийВФЗЗаписи";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное количество движений, записываемое одним фоновым заданием'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 100000;
		ОписаниеПараметра.Описание =
			НСтр("ru='Размер порций, на которые разбиваются сформированные движения.
			|Каждая порция движений передается в отдельное фоновое задание для ее записи в ИБ, при этом соблюдается следующее условие:
			|все движения, принадлежащие регистратору Х, обязательно должны быть помещены в одну порцию
			|(в противном случае одно фоновое задание затрет движения этого регистратора, записанные другим фоновым заданием).
			|При этом, если количество движений какого-то регистратора Х превышает значение этого параметра, то движения этого регистратора Х
			|будут помещены в отдельную порцию, размер которой будет превышать значение этого параметра.'");
	
		// ПоследовательнаяЗаписьРегистра
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПоследовательнаяЗаписьРегистра";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Ожидать окончания записи предыдущей порции этого же регистра'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Описание =
			НСтр("ru='Влияет на параллельность записи движений в фоновых заданиях в пределах одного регистра.
			|1. Если параметр включен, то задание №n записи очередной порции движений регистра Х не начнет выполнение до тех пор,
			|пока не будет завершено задание №(n-1) для этого же регистра Х.
			|В то же время могут выполняться задания записи регистра Y - они никак не будут влиять на выполнение заданий записи регистра Х.
			|2. Если параметр выключен, то задания записи регистра Х не будут ожидать завершения других заданий по этому же регистру.
			|Это позволяет вести параллельную запись движений ""в пределах"" одного регистра, что может уменьшить общее время записи движений
			|Но в то же время, в зависимости от параметров системы, это может привести к возникновению конфликтов блокировок транзакций записи.
			|Если возникнет хоть одна такая ошибка, то весь расчет будет считаться завершенным аварийно и потребуется его повторный запуск.'");
		
	#КонецОбласти
	
	#Область УправлениеИтогами
		
		Родитель = "УправлениеИтогами";
		
		// ОтключатьИтогиПередЗаписью
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ОтключатьИтогиПередЗаписью";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Отключать итоги регистра перед записью движений'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Описание =
			НСтр("ru='Влияет на управление итогами регистра (текущими итогами и периодами рассчитанных итогов).
			|Если параметр установлен, то
			|- перед началом расчета запоминается состояние использования итогов по всем рассчитываемым регистрам,
			|- при записи движений по каждому регистру его итоги отключаются,
			|- при окончании записи всех движений состояние использования итогов возвращается к первоначальному.
			|Это позволяет ускорить запись движений, но по окончании расчета тратится некоторое время на пересчет итогов.'");
		
	#КонецОбласти
	
	#Область НачальныеОстатки
		
		Родитель = "НачальныеОстатки";
		
		// ВзятьОстаткиСебестоимостиИзРегистровПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ВзятьОстаткиСебестоимостиИзРегистровПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Взять остатки себестоимости из партионных регистров'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|при расчете остатков партий в первом месяце после перехода на партионный учет 2.2 остатки регистра себестоимости подгоняются под остатки регистров партий:
			|- сначала выполняется сторнирование всех остатков себестоимости на начало этого месяца,
			|- потом выполняется приход партий по данным партионных регистров.'");
		
		// РаспределятьРасхожденияВСуммахПартийИСебестоимости
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "РаспределятьРасхожденияВСуммахПартийИСебестоимости";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Распределять расхождения в суммах регистра себестоимости и регистров партий'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|при расчете остатков партий в первом месяце после перехода на партионный учет 2.2 разницы в суммах остатков себестоимости и остатков партий
			|распределяются на остатки партий пропорционально количеству в партии.
			|Данный параметр имеет смысл если не установлен предыдущий параметр.'");
		
	#КонецОбласти
	
	#Область Проверки
		
		Родитель = "Проверки";
		
		// ПроверятьЗаписиСПризнакомРасчетНеЗавершен
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПроверятьЗаписиСПризнакомРасчетНеЗавершен";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Проверять подбор партий в сформированных движениях'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|определяет, необходимо ли при окончании расчета выполнять проверку подбора партий в сформированных движениях.
			|Проверка по умолчанию отключена, т.к. еще находится в режиме тестирования.'");
		
		// ПроверятьСоответствиеСебестоимостиИПартийНДС
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПроверятьСоответствиеСебестоимостиИПартийНДС";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Проверять соответствие остатков в регистрах себестоимости и партий НДС'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|остатки по регистру ""Детализация партий товаров для НДС и УСН"" должны соответствовать остаткам по регистру ""Себестоимость товаров"".
			|Проверка по умолчанию отключена, т.к. еще находится в режиме тестирования.'");
		
	#КонецОбласти
	
	#Область ВыгрузкаДанныхРасчета
	
		Родитель = "ВыгрузкаДанныхРасчета";
		
		// КаталогДляСохраненияДанныхРасчетаПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КаталогДляСохраненияДанныхРасчетаПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Каталог для сохранения данных расчета партий'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "";
		ОписаниеПараметра.Скрыть 			  = Истина; // пока не реализовано
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|в указанный каталог будут сохранены данные, используемые при расчете одного из этапов расчета партий (см. описание следующего параметра).
			|Каталог должен существовать - создание каталога не выполняется.'");
		
		// ЭтапПартионногоУчета22ДляВыгрузкиВФайлы
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЭтапПартионногоУчета22ДляВыгрузкиВФайлы";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Сохраняемый этап партионного учета 2.2'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "";
		ОписаниеПараметра.Скрыть 			  = Истина; // пока не реализовано
		ОписаниеПараметра.СписокВыбора 		  = ПартионныйУчет22.ЭтапыСВозможностьюВыгрузкиДанныхВФайлы();
		ОписаниеПараметра.СписокВыбора.Вставить(0, "", НСтр("ru='<не выгружать>'"));
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|позволяет сохранить данные, используемые при расчете одного из этапов расчета партий:
			|- таблица Данные (данные для расчета)
			|- таблицы Источники и Приемники (связи исходных данных)
			|- таблица РасчетныеПартии (результаты расчета)
			|Сохранение выполняется в указанный каталог (см. описание предыдущего параметра).'");
		
		// КаталогДляСохраненияДанныхСЛУ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КаталогДляСохраненияДанныхСЛУ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Каталог для сохранения СЛУ'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "";
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме расчета себестоимости:
			|в указанный каталог будут сохранены данные, используемые для составления СЛУ.
			|Каталог должен существовать - создание каталога не выполняется.'");
		
		// ФорматСохраненияДанныхСЛУ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ФорматСохраненияДанныхСЛУ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Формат сохранения СЛУ'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "csv";
		ОписаниеПараметра.СписокВыбора.Добавить("mxl");
		ОписаниеПараметра.СписокВыбора.Добавить("csv");
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме расчета себестоимости:
			|определяет в каком виде будут сохранены данные СЛУ.'");
		
	#КонецОбласти
	
	#Область Отладка
		
		Родитель = "Отладка";
		
		//////////////////////////////////////////////////////////////////////////////
		// Общие параметры отладки
		
		// НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Не проверять окончание обновления информационной базы'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Позволяет пропустить проверку окончания обновления информационной базы.
			|Если это свойство не установлено и обновление входящих данных механизма расчета еще не завершено,
			|то расчет выполняться не будет, т.к. его входящие данные могут быть некорректны.'");
		
		// ОчищатьСтарыеДвижения
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ОчищатьСтарыеДвижения";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Перед расчетом очищать старые расчетные движения'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Перед запуском расчета партий и себестоимости сначала очищает все расчетные движения в рассчитываемом периоде,
			|сформированные ранее, т.е. выполняет эмуляцию первого запуска расчета в данном периоде.
			|Может выполняться продолжительное время при большом количестве документов.
			|Аналогичен следующему параметру, но используется для всего расчета.'");
		
		// НеСохранятьРасчетныеДвижения
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеСохранятьРасчетныеДвижения";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='При проведении документа не сохранять старые расчетные движения'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='При проведении документа не сохранять расчетные движения партий и себестоимости,
			|а также не сохранять заполненные поля партионной идентификации:
			|Партия, АналитикаУчетаПартий, АналитикаФинансовогоУчета, ВидДеятельностиНДС, ДокументИсточник, РасчетНеЗавершен.
			|Аналогичен предыдущему параметру, но используется для конкретного проводимого документа.'");
		
		// КонтролироватьРегистраторыВФЗ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КонтролироватьРегистраторыВФЗ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Контролировать корректность разбиения на порции'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется при записи движений в фоновых заданиях:
			|проверяет, что все движения регистратора Х по регистру Y попали в одно фоновое задание записи.
			|Если это не так, то, в лучшем случае, фоновое задание упадет с ошибкой превышения времени ожидания блокировки,
			|а в худшем - затрет движения другого задания по этому регистру и регистратору.'");
		
		//////////////////////////////////////////////////////////////////////////////
		// Параметры отладки расчета партий
		
		// ИгнорироватьНекорректныеПервичныеДвижения
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ИгнорироватьНекорректныеПервичныеДвижения";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Игнорировать некорректные первичные движения документов'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|позволяет не выполнять перепроведение документов, имеющих ошибки в первичных движениях по регистрам.'");
		
		// НеВыполнятьОптимизациюЦепочек
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеВыполнятьОптимизациюЦепочек";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Не выполнять оптимизацию цепочек при расчете партий'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|позволяет пропустить этап оптимизации нумерации узлов графа перед расчетом партий по цепочкам.
			|Расчет цепочек будет выполняться как в партионном учете версии 2.1.'");
		
		// НеВыполнятьРасчетСебестоимости
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеВыполнятьРасчетСебестоимости";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Не выполнять расчет себестоимости'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|позволяет пропустить этапы расчета предварительной и фактической себестоимости.
			|Полезно при отладке этапов, не зависящих от результатов расчета предварительной себестоимости.
			|Фактическая себестоимость и так не оказывает влияния на другие этапы (внутри одного периода), т.к. рассчитывается в последнюю очередь.'");
		
		// НеСдвигатьПериодПоОкончанииРасчета
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеСдвигатьПериодПоОкончанииРасчета";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Не сдвигать период расчета по окончании расчета'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|позволяет не выполнять изменение регистра сведений ""Задания к расчету себестоимости"" по окончании расчета.
			|При этом расчет и запись движений будут выполнены, но факт выполнения расчета не будет зафиксирован в регистре заданий.
			|Полезно при отладке расчета какого-то конкретного периода - каждый раз не надо вручную возвращать задания к расчету.'");
		
		// РасчетОдногоЭтапа
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "РасчетОдногоЭтапа";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Расчет только одного этапа'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть 			  = Истина; // устанавливается программно
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме партионного учета версии 2.2:
			|позволяет выполнить один из этапов расчета партий отдельно от других.
			|Для этого расчетные кэши оборотов и остатков берут свои данные не из временной таблицы ВТКэш<имя регистра>
			|(куда были бы помещены данные предыдущих этапов при нормальном ходе расчета партий), а из данных ИБ.'");
		
		//////////////////////////////////////////////////////////////////////////////
		// Параметры отладки расчета себестоимости
	
		// ИсправлятьПустойРегистратор
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ИсправлятьПустойРегистратор";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Исправлять пустой регистратор в сформированных движениях'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='Используется в механизме расчета себестоимости:
			|если регистратор в каком-то наборе записей сформированных движений оказался не заполнен,
			|(например, в качестве регистратора выбран документ, который не может иметь движений по данному регистру),
			|то в качестве регистратора этого набора устанавливается документ расчета себестоимости.
			|При этом запись движений будет выполнена успешно.'");
		
	#КонецОбласти
	
	Возврат ОписаниеПараметров;
	
КонецФункции


// Добавляет технологические параметры расчета в общую структуру параметров расчета.
//
Процедура УстановитьТехнологическиеПараметрыРасчета(ПараметрыРасчета) Экспорт
	
	// Перенесем параметры операции в структура ПараметрыРасчета:
	//	- группы параметров становятся полями ПараметрыРасчета с типом "Структура"
	//	- сами параметры становятся элементами структур, соответствующим группам параметров
	
	ОписаниеПараметров = ОписаниеПараметровОперацииЗакрытияМесяца();
	ЗначенияПараметров = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
		
	// Группы параметров.
	Для Каждого ТекущаяСтрока Из ОписаниеГруппПараметровОперацииЗакрытияМесяца() Цикл
		ПараметрыРасчета.Вставить(ТекущаяСтрока.Имя, Новый Структура);
	КонецЦикла;
	
	// Значения параметров.
	Для Каждого КлючИЗначение Из ЗначенияПараметров Цикл
		
		СтрокаОписания = ОписаниеПараметров.Найти(КлючИЗначение.Ключ, "Имя");
		
		Если НЕ ЗначениеЗаполнено(СтрокаОписания.Родитель) Тогда
			ПараметрыРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Иначе
			ПараметрыРасчета[СтрокаОписания.Родитель].Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьНенастраиваемыеТехнологическиеПараметрыРасчета(ПараметрыРасчета);
	
КонецПроцедуры

// Добавляет дополнительные технологические параметры расчета, значения которых нельзя изменять.
//
Процедура УстановитьНенастраиваемыеТехнологическиеПараметрыРасчета(ПараметрыРасчета)
	
	// Дополнительные параметры отладки.
	// Вспомогательная таблица для хранения информации о том, сколько раз в фоновое задание записи передавалось сочетание регистр/регистратор.
	// Если в итоге получится хоть одна строка с "Количество > 1" - это критичная ошибка.
	РегистраторыВФЗ = Новый ТаблицаЗначений;
	РегистраторыВФЗ.Колонки.Добавить("ИмяРегистра");
	РегистраторыВФЗ.Колонки.Добавить("Регистратор");
	РегистраторыВФЗ.Колонки.Добавить("Количество");
	
	ПараметрыРасчета.Отладка.Вставить("РегистраторыВФЗ", РегистраторыВФЗ);
	
КонецПроцедуры

#КонецОбласти


#Область Вспомогательные

// Возвращает число строк во временной таблице.
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
Функция РазмерВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоСтрок;
	
КонецФункции

// Возвращает число строк во всех временных таблицах.
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременныхТаблиц(ПараметрыРасчета)
//
Функция РазмерыВременныхТаблиц(КонтейнерМенеджераВТ) Экспорт
	
	Результат = Новый Структура("ОбщийРазмерТаблиц", 0);
	Подзапросы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	""%1"" КАК ИмяТаблицы,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	%1 КАК Т
	|";
	
	Для Каждого ВременнаяТаблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		Подзапросы.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаЗапроса,
				ВременнаяТаблица.ПолноеИмя));
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Подзапросы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(Подзапросы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ИмяТаблицы, Выборка.Количество);
		Результат.ОбщийРазмерТаблиц = Результат.ОбщийРазмерТаблиц + Выборка.Количество;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает итог по указанному полю из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
Функция АгрегатнаяФункцияПоляВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, ИмяПоля, ИмяФункции = "СУММА") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%1(Т.%2) КАК Результат
	|ИЗ
	|	%3 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяФункции,
		ИмяПоля,
		ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Результат;
	
КонецФункции


// Возвращает нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
Функция ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ %1
	|	Т.*
	|ИЗ
	|	%2 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?(КоличествоСтрок = Неопределено, "", "ПЕРВЫЕ " + Формат(КоличествоСтрок, "ЧН=0; ЧГ=0")),
		ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ТекстСортировки;
	КонецЕсли;
	
	ВыгруженнаяТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгруженнаяТаблица;
	
КонецФункции

// Выгружает в файл нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыгрузитьВременнуюТаблицуВФайл(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", "C:\Temp\Таблица.mxl")
//
Функция ВыгрузитьВременнуюТаблицуВФайл(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, ПолноеИмяФайла, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	ВыгруженнаяТаблица = ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок, ТекстСортировки);
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(ВыгруженнаяТаблица, ПолноеИмяФайла);
	
	Возврат ТекстОшибки;
	
КонецФункции

// Выбирает нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", 1)
//
Функция ВыбратьСтрокиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ %1
	|	Т.*
	|ИЗ
	|	%2 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?(НЕ ЗначениеЗаполнено(КоличествоСтрок), "", "ПЕРВЫЕ " + Формат(КоличествоСтрок, "ЧГ=0")),
		ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ТекстСортировки;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Подменяет текст переданного запроса на текст из указанного файла и возвращает результат запроса.
// Выполняет запрос с указанным текстом.
// 
// Параметры:
//	ИсточникДанных - Запрос, МенеджерВременныхТаблиц, Структура (в которой хранятся ПараметрыРасчета), Неопределено
//	ПутьКФайлуСТекстомЗапроса - Строка - полное имя текстового файла, содержащего текст запроса
//
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыполнитьЗапросСПроизвольнымТекстом(Запрос, "C:\Temp\Запрос.txt")
//
Функция ВыполнитьЗапросСПроизвольнымТекстом(ИсточникДанных, ПутьКФайлуСТекстомЗапроса) Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Файл = Новый ТекстовыйДокумент;
	
	Результат = Новый Структура;
	
	Попытка
		
		Если ТипЗнч(ИсточникДанных) = Тип("Запрос") Тогда
			Запрос = ИсточникДанных;
			Результат.Вставить("СтарыйТекстЗапроса", Запрос.Текст);
		Иначе
			Запрос = Новый Запрос;
			Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда
				Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Структура") Тогда
				ИнициализироватьСвойстваЗапроса(Запрос, ИсточникДанных);
			КонецЕсли;
		КонецЕсли;
		
		Файл.Прочитать(ПутьКФайлуСТекстомЗапроса, КодировкаТекста.UTF8);
		
		Результат.Вставить("НовыйТекстЗапроса", Файл.ПолучитьТекст());
		Запрос.Текст = Результат.НовыйТекстЗапроса;
		
		Результат.Вставить("Результат", Запрос.Выполнить());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
	КонецПопытки;
	
	Если Результат.Свойство("СтарыйТекстЗапроса") Тогда // был передан запрос
		ИсточникДанных.Текст = Результат.СтарыйТекстЗапроса;
	КонецЕсли;
	
	Результат.Вставить("Время", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000);
	
	Возврат Результат;
	
КонецФункции

// Отладочная процедура выполнения пакетного запроса.
// Процедура выполняет пакет запросов по частям, при этом замеряется время выполнения
// и размер результирующей временной таблицы каждого запроса,
// формируются записи в протокол расчета себестоимости и журнал регистрации.
// Процедуру можно использовать в этапах партионного учета вместо стандартного выполнения запроса, при этом следует
// закомментировать вызов ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы после вызова процедуры.
//
Процедура ВыполнитьЗапросВРежимеОтладки(ПараметрыРасчета, Запрос, ПутьКФайлам = "", ПредставлениеЭтапа = "") Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого ЗапросВыбора Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросВыбора) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Запрос.Текст = "УНИЧТОЖИТЬ" + " " + ЗапросВыбора.ИмяТаблицы;
			Запрос.Выполнить();
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = ЗапросВыбора.ТаблицаДляПомещения;
		ДатаНачала = ТекущаяДатаСеанса();
		
		Запрос.Текст = ЗапросВыбора.ПолучитьТекстЗапроса();
		
		ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы);
		Запрос.Выполнить();
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
		
		ДатаОкончания = ТекущаяДатаСеанса();
		
		Если ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяТаблицы) Тогда
			КоличествоСтрок = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы);
		Иначе
			КоличествоСтрок = 0;
		КонецЕсли;
		
		ПолноеПредставлениеЭтапа =
			?(ПараметрыРасчета.ИдетРасчетПартий, НСтр("ru='Партионный учет'"), НСтр("ru='Расчет себестоимости'"))
			+ ?(ЗначениеЗаполнено(ПредставлениеЭтапа),": " + ПредставлениеЭтапа, "");
		
		Уточнение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Таблица: ""%1"", строк: %2, выполнялось с: %3, по: %4'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ИмяТаблицы,
			КоличествоСтрок,
			ДатаНачала,
			ДатаОкончания);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(ПараметрыРасчета,
				НСтр("ru='Этап'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + "." + ПолноеПредставлениеЭтапа),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Уточнение);
		
		Если ЗначениеЗаполнено(ПутьКФайлам) Тогда
			ВыгрузитьВременнуюТаблицуВФайл(
				ПараметрыРасчета.МенеджерВременныхТаблиц,
				ИмяТаблицы,
				ПутьКФайлам + ИмяТаблицы + ".mxl");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет колонку для нумерации строк партий.
//
Процедура ДобавитьКолонкуДляНумерацииСтрокПартий(Таблица, ИмяПоляНомераСтроки = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки) Тогда
		ИмяПоляНомераСтроки = ИмяКолонкиДляНумерацииПоУмолчанию();
	КонецЕсли;
	
	Если Таблица.Колонки.Найти(ИмяПоляНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяПоляНомераСтроки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие изменений в табличных частях документа.
// Табличная часть документа-объекта сворачивается по суммовым/количественным реквизитам
// и сверяется с табличной частью документа в ИБ.
// Если в табличной части документа есть реквизит-дата, то определяется его минимальное значение в измененных строках.
// При этом строки, в которых дата не заполнена, на измененность не проверяются.
// 
// Параметры:
//	ДокументОбъект - проверяемый документ
//	ОписаниеТабличныхЧастей - Структура
//		Ключ - имя табличной части
//		Значение - Структура с обязательными ключами
//			"Ресурсы" - в строковом значении этого ключа через запятую перечисляются суммовые и количественные реквизиты табличной части
//			"Дата"    - в строковом значении этого ключа указывается имя реквизита с датой (если даты нет, то значение не заполняется)
//
// Возвращаемое значение:
//	Структура с ключами
//		ЕстьИзменения - Булево - признак наличия изменений в табличной части
//		Дата - Дата или Неопределено - минимальное значение реквизита даты в измененных строка табличной части
//
Функция ПериодыИзмененияТабличныеЧастиДокумента(ДокументОбъект, ОписаниеТабличныхЧастей, Перезаполнить) Экспорт
	
	Результат 			       = Новый Структура;
	МинимальныйПериод 	       = Неопределено;
	ОбщийМинимальныйПериод     = Неопределено;
	ОбщийМинимальныйПериодДень = Неопределено;
	МетаДокумент 		       = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 	   ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Перезаполнить", Перезаполнить);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|%ПоляТаблицы
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|Т.Проведен,
	|Т.Перезаполнить,
	|%ПоляСвернутые
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|(ВЫБРАТЬ
	|	Истина КАК Проведен,
	|	&Перезаполнить КАК Перезаполнить,
	|%ПоляТаблицы
	|ИЗ
	|	ВТТабличнаяЧасть КАК Т
	|//%ОтборДанныхОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка.Проведен КАК Проведен,
	|	ЛОЖЬ КАК Перезаполнить,
	|%ПоляСМинусом
	|ИЗ
	|	%ТаблицаДокумента КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	//%ОтборДанныхИБ
	|) КАК Т
	|%Группировка
	|%УсловиеОтбора
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(%Дата) КАК Результат
	|ИЗ
	|	ВТИзменения КАК Т
	|ГДЕ
	|	%Дата <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|";
	
	Для Каждого КлючИЗначение Из ОписаниеТабличныхЧастей Цикл
		
		// Подготовим тексты фрагментов запроса.
		СтрокаИзмерения    = "";
		СтрокаРесурсы	   = "";
		СтрокаРесурсыСумма = "";
		СтрокаРесурсыОтбор = "";
		СтруктураРесурсы = Новый Структура(?(ЗначениеЗаполнено(КлючИЗначение.Значение.Ресурсы), КлючИЗначение.Значение.Ресурсы, ""));
		СтрокаДата 		 = ?(ЗначениеЗаполнено(КлючИЗначение.Значение.Дата), "Т." + КлючИЗначение.Значение.Дата, "Неопределено");
		
		Для Каждого МетаРеквизит Из МетаДокумент.ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты Цикл
			
			Если МетаРеквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
			 Или МетаРеквизит.Тип = Новый ОписаниеТипов("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураРесурсы.Свойство(МетаРеквизит.Имя) Тогда
				СтрокаРесурсы = СтрокаРесурсы + ?(СтрокаРесурсы = "", "", ",
					|	") + "Т." + МетаРеквизит.Имя;
				СтрокаРесурсыСумма = СтрокаРесурсыСумма + ?(СтрокаРесурсыСумма = "", "", ",
					|	") + "СУММА(Т." + МетаРеквизит.Имя + ") КАК " + МетаРеквизит.Имя;
				СтрокаРесурсыОтбор = СтрокаРесурсыОтбор + ?(СтрокаРесурсыОтбор = "", "	", "
					|	ИЛИ ") + "СУММА(Т." + МетаРеквизит.Имя + ") <> 0";
			Иначе
				СтрокаИзмерения = СтрокаИзмерения + ?(СтрокаИзмерения = "", "", ",
					|") + "	Т." + МетаРеквизит.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПоля = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрокаРесурсы;
		СтрокаПоляСМинусом = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрЗаменить(СтрокаРесурсы, "Т.", "-Т.");
		СтрокаПоляСвернутые = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсыСумма = "", "", ",
			|	") + СтрокаРесурсыСумма;
		СтрокаТаблицаДокумента = "Документ." + МетаДокумент.Имя + "." + КлючИЗначение.Ключ;
		
		СтрокаПоляГруппировка = ?(СтрокаИзмерения = "", "", "СГРУППИРОВАТЬ ПО" + Символы.ПС + "Т.Проведен, Т.Перезаполнить," + Символы.ПС + СтрокаИзмерения);
		
		// Сформируем текст запроса и выполним запрос.
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Таблица", ДокументОбъект[КлючИЗначение.Ключ].Выгрузить());
		
		Запрос.Текст = ШаблонЗапроса;
		
		Если КлючИЗначение.Ключ = "ОбеспечениеМатериаламиИРаботами" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхОбъекта", "
				|ГДЕ
				|	Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
				|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхИБ", "
				|	И Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
				|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))");
		ИначеЕсли КлючИЗначение.Ключ = "ВыходныеИзделия" Или КлючИЗначение.Ключ = "ПобочныеИзделия" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхОбъекта", "
				|ГДЕ
				|	Т.Произведено");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхИБ", "
				|	И Т.Произведено");
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляТаблицы", 	  СтрокаПоля);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСМинусом", 	  СтрокаПоляСМинусом);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаДокумента", СтрокаТаблицаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвернутые", 	  СтрокаПоляСвернутые);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Группировка", 	  СтрокаПоляГруппировка);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОтбора", 	  ?(СтрокаРесурсыОтбор = "", "", "ИМЕЮЩИЕ" + Символы.ПС + СтрокаРесурсыОтбор));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Дата", 			  СтрокаДата);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Выборка.Следующий();
		
		Если Выборка.Результат <> Null Тогда // найдены отличия
			
			Результат.Вставить(КлючИЗначение.Ключ, НачалоМесяца(Выборка.Результат));
			
			Если ЗначениеЗаполнено(ОбщийМинимальныйПериод) Тогда
				ОбщийМинимальныйПериод = Мин(ОбщийМинимальныйПериод, НачалоМесяца(Выборка.Результат));
			Иначе
				ОбщийМинимальныйПериод = НачалоМесяца(Выборка.Результат);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбщийМинимальныйПериодДень) Тогда
				ОбщийМинимальныйПериодДень = Мин(ОбщийМинимальныйПериодДень, Выборка.Результат);
			Иначе
				ОбщийМинимальныйПериодДень = Выборка.Результат;
			КонецЕсли;
			
			Если КлючИЗначение.Значение.ВключитьВМинимум Тогда
				Если ЗначениеЗаполнено(МинимальныйПериод) Тогда
					МинимальныйПериод = Мин(МинимальныйПериод, НачалоМесяца(Выборка.Результат));
				Иначе
					МинимальныйПериод = НачалоМесяца(Выборка.Результат);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Результат.Вставить(КлючИЗначение.Ключ, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбщийМинимальныйПериод) Тогда
		ОбщийМинимальныйПериод = НачалоМесяца(ОбщийМинимальныйПериод);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбщийМинимальныйПериодДень) Тогда
		ОбщийМинимальныйПериодДень = ОбщийМинимальныйПериодДень;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальныйПериод) Тогда
		МинимальныйПериод = НачалоМесяца(МинимальныйПериод);
	КонецЕсли;
	
	Результат.Вставить("МинимальныйПериод", 	     МинимальныйПериод);
	Результат.Вставить("ОбщийМинимальныйПериод",     ОбщийМинимальныйПериод);
	Результат.Вставить("ОбщийМинимальныйПериодДень", ОбщийМинимальныйПериодДень);
	
	Возврат Результат;
	
КонецФункции

// Метод блокирует записи в регистре ЗаданияКРасчетуСебестоимости в диапазоне номера заданий: 0 ... НомерЗаданияДоРасчета.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Верхняя граница диапазона блокировки.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРасчетуСебестоимости");
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Сохраняет в менеджер временных таблиц записи регистра Задания к расчету себестоимости.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Выбираются записи у которых номер задания <= НомерЗаданияДоРасчета.
//	ОрганизацииКРасчету - Массив - Перечень организаций, по которым сохраняются задания.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - Содержит в себе ВТ "ИсходныеЗадания".
//
Функция СформироватьВТЗаданияДоРасчета(НомерЗаданияДоРасчета, ОрганизацииКРасчету) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерЗадания,
	|	Задания.Организация,
	|	Задания.Документ
	|ПОМЕСТИТЬ ИсходныеЗадания
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Организация В (&МассивОрганизаций)
	|");
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗаданияДоРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(ОрганизацииКРасчету));
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.Выполнить();
	
	Возврат ВременныеТаблицы;
	
КонецФункции

// Возвращает количество движений документов по указанному регистру.
//
Функция КоличествоДвиженийДокументаПоРегистру(Регистраторы, ПолноеИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", ОбщегоНазначенияУТКлиентСервер.Массив(Регистраторы));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	%1 КАК Т
	|ГДЕ
	|	Т.Регистратор В (&Регистраторы)";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ПолноеИмяРегистра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

#КонецОбласти

#КонецОбласти
