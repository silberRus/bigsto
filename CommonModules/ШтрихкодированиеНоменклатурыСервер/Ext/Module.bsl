
#Область ПрограммныйИнтерфейс

//Процедура обрабатывает введенные штрихкоды:
// - добаваляет введенные штрихкоды в табличную часть документа;
// - вызвает помощник создания штрикода, если он не был найден.
// Параметры:
//   Форма - УправляемаяФорма - форма для которой будут обработаны введенные штрихкоды. 
//   Объект - ДанныеФормыСтруктура - объект формы.
//   СтруктураПараметров - Структура - структура формируется функцией ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов()
//									   и заполняется данными из формы.
//   КэшированныеЗначения - Структура - кэш формы
//
Процедура ОбработатьШтрихкоды(Форма, Объект, СтруктураПараметров, КэшированныеЗначения) Экспорт
	
	//Если нужно будет изменять количество, то данные формы нужно заблокировать
	//Если заблокировать не удастся - вылетит исключение
	Если СтруктураПараметров.ИзменятьКоличество
		И СтруктураПараметров.БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ИспользоватьУпаковочныеЛисты = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты");
	
	Модифицированность = Ложь;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;

	КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	
	Если ТипЗнч(СтруктураПараметров.Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = СтруктураПараметров.Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(СтруктураПараметров.Штрихкоды);
	КонецЕсли;
	
	НеЗакешированныеРанееШтрихкоды = Новый Массив;
	
	Для Каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		ТекШтрихкод.Штрихкод = ВРег(СокрЛП(ТекШтрихкод.Штрихкод));
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод, ПрефиксыВесовыхШтрихкодов);
		Если Не ЗначениеЗаполнено(КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод])
			Или КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод].НеизвестныйШтрихкод Тогда
			НеЗакешированныеРанееШтрихкоды.Добавить(ТекШтрихкод.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	Если НеЗакешированныеРанееШтрихкоды.Количество() > 0 Тогда
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, НеЗакешированныеРанееШтрихкоды);
		Если ИспользоватьУпаковочныеЛисты
			И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
			Документы.УпаковочныйЛист.ДополнитьДанныеПоШтрихкодам(КэшированныеЗначения, НеЗакешированныеРанееШтрихкоды);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтрокСНаборами = Новый Массив;
	МассивСтрокСУпЛистамиДляОбработки = Новый Массив;
	ТекущаяСтрока       = Неопределено;
	
	Если СтруктураПараметров.ПараметрыПроверкиАссортимента <> Неопределено Тогда
		ПроверятьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(
			СтруктураПараметров.ПараметрыПроверкиАссортимента.Склад, 
			СтруктураПараметров.ПараметрыПроверкиАссортимента.Дата);
		СтруктураПараметров.ПараметрыПроверкиАссортимента.Вставить("ПроверятьАссортимент", ПроверятьАссортимент);
	КонецЕсли;
	
	Назначения = Назначения(Объект, СтруктураПараметров, КэшированныеЗначения.Штрихкоды);
	
	Для Каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		
		ДобавляемыеДанные  = КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод];
		
		Если ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
			
			Если Не СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
				СтруктураПараметров.НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор
			И Не СоответствуетУсловиям(ДобавляемыеДанные, СтруктураПараметров) Тогда
				Продолжить;
		КонецЕсли;
		
		Если ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			
			ДобавляемыеДанные.КоличествоПоШтрихкоду = ТекШтрихкод.Количество;
			ДобавляемыеДанные.ШтрихкодНеИзКэша      = НеЗакешированныеРанееШтрихкоды.Найти(ТекШтрихкод.Штрихкод) <> Неопределено;
			РежимОбработки = "Товар";
			
			СтрокаТЧ = ДобавитьИзменитьСтрокуВТЧ(Объект,
				                                 СтруктураПараметров,
				                                 ДобавляемыеДанные,
				                                 РежимОбработки,
				                                 КэшированныеЗначения,
				                                 МассивСтрокСУпЛистамиДляОбработки,
				                                 Назначения);
			
			Если СтрокаТЧ <> Неопределено Тогда
				
				Если СтруктураПараметров.ШтрихкодыВТЧ
					И СтруктураПараметров.ИзменятьКоличество
					И Не ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
					СтрокаТЧ.ШтрихкодНеОпределен = 0;
				КонецЕсли;
				
				ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
				Модифицированность = Истина;
				
				//Добавим тару по отсканированной строке ТЧ
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") 
					И СтруктураПараметров.ИзменятьКоличество
					И Не СтруктураПараметров.НеИспользоватьУпаковки
					И Не СтруктураПараметров.ТолькоУслуги 
					И Не СтруктураПараметров.ТолькоТара Тогда
					
					ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Упаковка); 
					
					Для Каждого СтрТабл из ТаблицаТары Цикл
						ДобавляемыеДанные = ОбработкаТабличнойЧастиКлиентСервер.СтуктураКешируемойИнформацииПоШтрихкоду();
						ЗаполнитьЗначенияСвойств(ДобавляемыеДанные,СтрТабл);
						ДобавляемыеДанные.КоличествоПоШтрихкоду = ТекШтрихкод.Количество;
						ДобавляемыеДанные.НеизвестныйШтрихкод = Ложь;
						
						Если Не СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
							И ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
							РежимОбработки = "ТараПоСтрокеССериейБезУвеличенияКоличества"
						Иначе
							РежимОбработки = "Тара";
						КонецЕсли;
						
						СтрокаТЧ = ДобавитьИзменитьСтрокуВТЧ(Объект,
							                                СтруктураПараметров,
							                                ДобавляемыеДанные,
							                                РежимОбработки,
							                                КэшированныеЗначения);
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ПроверитьАссортимент(Объект, СтруктураПараметров, ДобавляемыеДанные) Тогда
				
				ДобавляемыеКомплектующие = Новый Массив;
				ОшибкаДобавленияКомплектующих = Ложь;
				
				Комплектующие = Комплектующие(ДобавляемыеДанные.Номенклатура, ДобавляемыеДанные.Характеристика);
				Для Каждого СтрокаКомплектующие Из Комплектующие Цикл
					
					Если Не СоответствуетУсловиям(СтрокаКомплектующие, СтруктураПараметров) Тогда
						ОшибкаДобавленияКомплектующих = Истина;
						Продолжить;
					КонецЕсли;
					
					СтрокаКомплектующие.КоличествоПоШтрихкоду = ТекШтрихкод.Количество;
					СтрокаКомплектующие.ШтрихкодНеИзКэша      = Истина;
					РежимОбработки = "КомплектующаяНабора";
					ДобавляемыеДанные.НеизвестныйШтрихкод = Ложь;

					СтрокаТЧ = ДобавитьИзменитьСтрокуВТЧ(Объект,
						                                 СтруктураПараметров,
						                                 СтрокаКомплектующие,
						                                 РежимОбработки,
						                                 КэшированныеЗначения);
					Если СтрокаТЧ <> Неопределено Тогда
						Данные = Новый Структура;
						Данные.Вставить("СтрокаТЧ", СтрокаТЧ);
						Данные.Вставить("ДобавляемыеДанные", СтрокаКомплектующие);
						ДобавляемыеКомплектующие.Добавить(Данные);
					Иначе
						ОшибкаДобавленияКомплектующих = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ОшибкаДобавленияКомплектующих
					И (ДобавляемыеДанные.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
					ИЛИ ДобавляемыеДанные.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
					Для Каждого Данные Из ДобавляемыеКомплектующие Цикл
						Если Данные.ДобавляемыеДанные.ВыполненныеДействия.Добавлено Тогда
							Объект[СтруктураПараметров.ИмяТЧ].Удалить(Данные.СтрокаТЧ);
						ИначеЕсли Данные.ДобавляемыеДанные.ВыполненныеДействия.Изменено Тогда
							Если Не СтруктураПараметров.НеИспользоватьУпаковки Тогда
								Данные.СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = Данные.СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество]
									- Данные.ДобавляемыеДанные.КоличествоПоШтрихкоду;
							Иначе
								Данные.СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = Данные.СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество]
									- Данные.ДобавляемыеДанные.КоличествоПоШтрихкоду * Данные.ДобавляемыеДанные.Коэффициент;
							КонецЕсли;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Данные.СтрокаТЧ, СтруктураПараметров.СтруктураДействийСИзмененнымиСтроками, КэшированныеЗначения);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЕстьИндексНабора = Неопределено;
					Для Каждого Данные Из ДобавляемыеКомплектующие Цикл
						Если ЕстьИндексНабора = Неопределено Тогда
							ЕстьИндексНабора = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Данные.СтрокаТЧ, "ИндексНабора");
						КонецЕсли;
						Если ЕстьИндексНабора Тогда
							Данные.СтрокаТЧ.ИндексНабора = 1;
						КонецЕсли;
						МассивСтрокСНаборами.Добавить(Данные.СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПараметров.РассчитыватьНаборы Тогда
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Соглашение") Тогда
			ПараметрыРасчета = Новый Структура(
					"Дата, Валюта, Соглашение, РасчитыватьНаборы, ПоляЗаполнения",
					Объект.Дата,
					Объект.Валюта,
					Объект.Соглашение,
					СтруктураПараметров.РассчитыватьНаборы,
					"Цена, ВидЦены");
		Иначе
			ПараметрыРасчета = Новый Структура(
					"Дата, Валюта, ВидЦены, РасчитыватьНаборы, ПоляЗаполнения",
					Объект.Дата,
					Объект.Валюта,
					Объект.ВидЦены,
					СтруктураПараметров.РассчитыватьНаборы,
					"Цена, ВидЦены");
		КонецЕсли;
		
		ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
			Объект[СтруктураПараметров.ИмяТЧ],
			МассивСтрокСНаборами, // Массив строк или структура отбора
			ПараметрыРасчета,
			СтруктураПараметров.СтруктураДействийСИзмененнымиСтроками);
	КонецЕсли;
	
	Если Модифицированность Тогда
		Форма.Модифицированность = Истина;
		Если ИспользоватьУпаковочныеЛисты
			И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
			Если СтруктураПараметров.ОтработатьИзменениеУпаковочныхЛистов Тогда
				УпаковочныеЛистыСервер.ДополнитьСтрокамиПоУпаковочнымЛистам(Форма, Объект[СтруктураПараметров.ИмяТЧ],
					МассивСтрокСУпЛистамиДляОбработки);
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, Форма.ПараметрыУказанияСерий, МассивСтрокСУпЛистамиДляОбработки);
			КонецЕсли;
			УпаковочныеЛистыСервер.ПеренумероватьСтроки(Форма, Объект[СтруктураПараметров.ИмяТЧ], Форма.МаксимальныйНомерСтроки);
			УпаковочныеЛистыСервер.ЗаполнитьСлужебныеРеквизиты(Форма, Объект[СтруктураПараметров.ИмяТЧ],
					СтруктураПараметров.СтруктураДействийСоСтрокамиИзУпаковочныхЛистов, МассивСтрокСУпЛистамиДляОбработки);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.ТекущаяСтрока = ТекущаяСтрока;
	
КонецПроцедуры

// Функция - Право регистрации штрихкодов номенклатуры доступно
// 
// Возвращаемое значение:
// Булево - Истина, если доступно
//
Функция ПравоРегистрацииШтрихкодовНоменклатурыДоступно() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
КонецФункции

// Возвращает ссылку на номенклатуру, соотвествующую переданному штрихкоду или Неопределено, если штрихкод не зарегистрирован
//
// Параметры:
//  ДанныеШтрихкода - Структура - см. ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов()
//  КэшированныеЗначения - Структура, Неопределено - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура, Неопределено - Результат поиска номенклатуры по штрихкоду.
//
Функция НоменклатураПоШтрихкоду(ПараметрыОбработки, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	КонецЕсли;
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	
	НеЗакешированныеРанееШтрихкоды = Новый Массив;
	
	ПараметрыОбработки.Штрихкоды.Штрихкод = ВРег(СокрЛП(ПараметрыОбработки.Штрихкоды.Штрихкод));
	РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ПараметрыОбработки.Штрихкоды, ПрефиксыВесовыхШтрихкодов);
	Если Не ЗначениеЗаполнено(КэшированныеЗначения.Штрихкоды[ПараметрыОбработки.Штрихкоды.Штрихкод])
		Или КэшированныеЗначения.Штрихкоды[ПараметрыОбработки.Штрихкоды.Штрихкод].НеизвестныйШтрихкод Тогда
		НеЗакешированныеРанееШтрихкоды.Добавить(ПараметрыОбработки.Штрихкоды.Штрихкод);
	КонецЕсли;
	
	Если НеЗакешированныеРанееШтрихкоды.Количество() > 0 Тогда
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, НеЗакешированныеРанееШтрихкоды);
		
	КонецЕсли;
	
	ДобавляемыеДанные = КэшированныеЗначения.Штрихкоды[ПараметрыОбработки.Штрихкоды.Штрихкод];
	
	Если ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
		
		ПараметрыОбработки.НеизвестныеШтрихкоды.Добавить(ПараметрыОбработки.Штрихкоды);
		Возврат Неопределено;
		
	Иначе
		
		Возврат ДобавляемыеДанные.Номенклатура;
		
	КонецЕсли;
	
КонецФункции

// Раскладывает переданный массив считанных штрихкодов по типам штрихкодов
//
// Параметры:
//  Штрихкоды	 - Массив - массив структур, который передается БПО от оборудования, см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода
//								
// Возвращаемое значение:
//  Структура - структура: 
//       *БезТипа - Массив - штрихкоды, тип которых не определен, элементы - структуры, см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода 
//		 *АкцизныеМарки - Массив
Функция СтруктураПоТипамШтрихкодов(Штрихкоды) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("БезТипа", Новый Массив);
	Результат.Вставить("АкцизныеМарки", Новый Массив);
	Результат.Вставить("КиЗ", Новый Массив);
	
	ПроверятьАкцизныеМарки = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции"); 
	ПроверятьКиз           = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	
	Для Каждого СтрМас из Штрихкоды Цикл
		
		Если ПроверятьАкцизныеМарки
			И АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(СтрМас.Штрихкод) Тогда
			Результат.АкцизныеМарки.Добавить(СтрМас);
		ИначеЕсли ПроверятьКиз
			И ИнтеграцияГИСМКлиентСервер.ЭтоНомерКиЗ(СтрМас.Штрихкод) Тогда
			Результат.КиЗ.Добавить(СтрМас);
		Иначе
			Результат.БезТипа.Добавить(СтрМас);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#Область RFID

// Функция - Параметры обработки считанных RFID и КиЗ
// 
// Возвращаемое значение:
// Структура - параметры обработки
//
Функция ПараметрыОбработкиСчитанныхRFIDИКиЗ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СчитывательRFID");
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("GTIN");
	Результат.Вставить("НастройкиИспользованияСерий");
	Результат.Вставить("ЭтоМаркировкаПерсонифицированнымиКиЗ");
	Результат.Вставить("ЭтоМаркировкаТоваровГИСМ");
	Результат.Вставить("ВидНоменклатуры");
	Результат.Вставить("ЭтоМаркировкаОстатковГИСМ");
	
	Возврат Результат;
	
КонецФункции

// Функция - Обработать считывание RFID
//
// Параметры:
//  ДанныеМеток					 - Массив	 - данные меток
//  Параметры					 - Структура - см. ПараметрыОбработкиСчитанныхRFIDИКиЗ()
//  ТЧСерии						 - ТабличнаяЧасть	 - табличная часть Серии
//  ИдентификаторТекущейСтроки	 - Число			 - идентификатор
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//  	*ЗакрытьФорму - Булево - признак необходимости закрыть форму
//  	*ИдентификаторТекущейСтроки - Число - идетификатор
//  	*ДанныеСерии - СтрокаТабличнойЧасти - строка с серией
//
Функция ОбработатьСчитываниеRFID(ДанныеМеток, Параметры, ТЧСерии = Неопределено, ИдентификаторТекущейСтроки = Неопределено) Экспорт
	
	GTIN                                 = Параметры.GTIN;
	НастройкиИспользованияСерий          = Параметры.НастройкиИспользованияСерий;
	ЭтоМаркировкаПерсонифицированнымиКиЗ = Параметры.ЭтоМаркировкаПерсонифицированнымиКиЗ;
	ЭтоМаркировкаОстатковГИСМ            = Параметры.ЭтоМаркировкаОстатковГИСМ;
	
	КорректноСчитанныеМетки = Новый Массив;
	
	Для Каждого Метка Из ДанныеМеток Цикл
		
		//Если TID не считался, то нельзя считать чтение метки успешным
		Если ЗначениеЗаполнено(Метка.TID) Тогда
			КорректноСчитанныеМетки.Добавить(Метка);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗакрытьФорму", Ложь);
	Результат.Вставить("ИдентификаторТекущейСтроки", Неопределено);
	Результат.Вставить("ДанныеСерии", Неопределено);
	
	//От считывателя одна и та же метка могла приехать несколько раз
	//Поэтому сначала свернем приехаевшие данные
	ТаблицаМеток = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(КорректноСчитанныеМетки);
	ИменаКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаМеток.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаМеток.Свернуть(СтрСоединить(ИменаКолонок,","));
	
	Если ТаблицаМеток.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Считалось сразу несколько RFID-метки. Оставьте в зоне действия считывателя только одну метку и повторите считывание.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;
	
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ТЧСерии = Неопределено Тогда
		ТЧСерии = Новый ТаблицаЗначений;
		ТЧСерии.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТЧСерии.Колонки.Добавить("Номер",ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ТЧСерии.Колонки.Добавить("НомерКиЗГИСМ", Метаданные.ОпределяемыеТипы.НомерКиЗГИСМ.Тип);
		ТЧСерии.Колонки.Добавить("RFIDTID", Метаданные.ОпределяемыеТипы.RFIDTID.Тип);
		ТЧСерии.Колонки.Добавить("RFIDUser",ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТЧСерии.Колонки.Добавить("RFIDEPC",ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТЧСерии.Колонки.Добавить("EPCGTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ТЧСерии.Колонки.Добавить("ГоденДо", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ТЧСерии.Колонки.Добавить("НужноЗаписатьМетку", Новый ОписаниеТипов("Булево"));
		ТЧСерии.Колонки.Добавить("ЗаполненRFIDTID", Новый ОписаниеТипов("Булево"));
		ТЧСерии.Колонки.Добавить("СтатусРаботыRFID", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		ТЧСерии.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		ТЧСерии.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	КонецЕсли;
	
	ТекущаяМетка = ТаблицаМеток[0];
	Если НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
		
		ИнформацияПоКиЗ = ИнтеграцияГИСМ.ИнформацияОКиЗПоRFIDTID(ТекущаяМетка.TID);
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.НомерКиЗ) Тогда
			ОбрабатываемаяСтрока = ДобавитьСериюПоИнформацииПоКиЗ(ИнформацияПоКиЗ, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);
		Иначе
			ОбрабатываемаяСтрока = ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);	
		КонецЕсли;
	Иначе
		ОбрабатываемаяСтрока = ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);	
	КонецЕсли;
	
	ПараметрыЗаполненияФлаговРаботыСМеткой = ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыЗаполненияФлаговРаботыСМеткой();
	ПараметрыЗаполненияФлаговРаботыСМеткой.GTIN = GTIN;
	ПараметрыЗаполненияФлаговРаботыСМеткой.ТекущаяМетка = ТекущаяМетка;
	ПараметрыЗаполненияФлаговРаботыСМеткой.НастройкиИспользованияСерий = НастройкиИспользованияСерий;
	ПараметрыЗаполненияФлаговРаботыСМеткой.ЭтоМаркировкаОстатковГИСМ = ЭтоМаркировкаОстатковГИСМ;
	ПараметрыЗаполненияФлаговРаботыСМеткой.ЭтоМаркировкаПерсонифицированнымиКиЗ = ЭтоМаркировкаПерсонифицированнымиКиЗ;
	ШтрихкодированиеНоменклатурыКлиентСервер.ЗаполнитьФлагиРаботыСМеткой(ОбрабатываемаяСтрока, ПараметрыЗаполненияФлаговРаботыСМеткой);
	
	Если ОбщегоНазначенияУТ.РежимОтладки() Тогда
		СтрокаМетки = "";
		
		Для Каждого Колонка Из ТаблицаМеток.Колонки Цикл
			СтрокаМетки = СтрокаМетки + Колонка.Имя + " " + ТаблицаМеток[0][Колонка.Имя] + " ";
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаМетки);
	КонецЕсли;
	
	Если ОбрабатываемаяСтрока <> Неопределено Тогда
		Если ТипЗнч(ТЧСерии) <> Тип("ТаблицаЗначений") Тогда
			Результат.ИдентификаторТекущейСтроки = ОбрабатываемаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		Результат.ДанныеСерии = ОбрабатываемаяСтрока;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьИзменитьСтрокуВТЧ(Объект, СтруктураПараметров, ДобавляемыеДанные, РежимОбработки,
	КэшированныеЗначения, МассивСтрокСУпЛистамиДляОбработки = Неопределено, Назначения = Неопределено)
	
	ИспользоватьУпаковочныеЛисты = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты");
	
	Если РежимОбработки = "Тара"
		Или РежимОбработки = "ТараПоСтрокеССериейБезУвеличенияКоличества" Тогда
		Тара = Истина;
	Иначе
		Тара = Ложь;
	КонецЕсли;
	
	ТЧ = Объект[СтруктураПараметров.ИмяТЧ];
	
	ЭтоУпаковочныйЛист = Не Тара И ЗначениеЗаполнено(ДобавляемыеДанные.УпаковочныйЛист);
	
	ДобавлятьТовар = ПроверитьАссортимент(Объект, СтруктураПараметров, ДобавляемыеДанные, ЭтоУпаковочныйЛист);
	
	ОтборПоУпаковкам = Новый Структура("Номенклатура, Характеристика, Упаковка, ХарактеристикиИспользуются");
	Если ИспользоватьУпаковочныеЛисты
		И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
		// Ищем только на текущем уровне.
		//	Если включен режим "По товарам", тогда ищем (и добавляем) только на верхнем уровне
		ОтборПоУпаковкам.Вставить("УпаковочныйЛистРодитель", СтруктураПараметров.ТекущийУпаковочныйЛист);
	КонецЕсли;
	
	Если ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
		
		НайденныеСтроки = Новый Массив;
		
		Если СтруктураПараметров.ШтрихкодыВТЧ Тогда
			
			Отбор = Новый Структура("Штрихкод, УпаковочныйЛистРодитель",
				ДобавляемыеДанные.Штрихкод, СтруктураПараметров.ТекущийУпаковочныйЛист);
			НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
			
		Иначе
			
			ДобавлятьТовар = Ложь;
			
		КонецЕсли;
		
		// Неизвестным может оказаться штрихкод, которому соответствует несколько упаковочных листов,
		//	при этом упаковочный лист уже может быть указан в ТЧ Товары, в этом случае нужно попробовать найти его
		Если ИспользоватьУпаковочныеЛисты
			И СтруктураПараметров.УчитыватьУпаковочныеЛисты
			И НайденныеСтроки.Количество() = 0 Тогда
			
			Отбор = Новый Структура("УпаковочныйЛистКод, УпаковочныйЛистРодитель", ДобавляемыеДанные.Штрихкод, СтруктураПараметров.ТекущийУпаковочныйЛист);
			НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Номенклатура или упаковочный лист со штрихкодом ""%Штрихкод%"" не найдены'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Штрихкод%", ДобавляемыеДанные.Штрихкод);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтоУпаковочныйЛист Тогда
			Отбор = Новый Структура("УпаковочныйЛист", Истина);
			Отбор.Вставить("ЭтоУпаковочныйЛист", Истина);
		Иначе
			Если СтруктураПараметров.НеИспользоватьУпаковки
				Или Тара Тогда
				Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборПоУпаковкам);
				Отбор.Удалить("Упаковка");
			Иначе
				Отбор = ОтборПоУпаковкам;
			КонецЕсли;
			
			Если СтруктураПараметров.РассчитыватьНаборы Тогда
				Отбор.Вставить("НоменклатураНабора");
				Отбор.Вставить("ХарактеристикаНабора");
			КонецЕсли;
			
			Если Не Тара
				И ДобавляемыеДанные.ШтрихкодНеИзКэша 
				И ДобавляемыеДанные.НесколькоЕдиничныхУпаковок 
				И ДобавляемыеДанные.ЕдиничнаяУпаковка = Неопределено Тогда
				
				ТекстСообщения = НСтр("ru = 'У номенклатуры ""%Номенклатура%"" используется несколько упаковок с единицей измерения ""%ЕдиницаИзмерения%"" и коэффициентом 1. Для корректной привязки штрихкодов рекомендуется использовать одну единичную упаковку.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", Строка(ДобавляемыеДанные.Номенклатура));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", Строка(ДобавляемыеДанные.ЕдиницаИзмерения));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, ДобавляемыеДанные);
		НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
		
	КонецЕсли;
	
	СтрокаТЧ = Неопределено;
	
	Если Не СтруктураПараметров.ИзменятьКоличество Тогда
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Если ЭтоУпаковочныйЛист Тогда
				
				ТекстСообщения = НСтр("ru = 'В табличной части не найдена строка, содержащая ""%УпаковочныйЛист%""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УпаковочныйЛист%", ДобавляемыеДанные.УпаковочныйЛист);
				
			ИначеЕсли ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
				
				Если СтруктураПараметров.ШтрихКодыВТЧ Тогда
					ТекстСообщения = НСтр("ru = 'В табличной части не найдена строка, содержащая штрихкод ""%Штрихкод%""'");
				ИначеЕсли ИспользоватьУпаковочныеЛисты
					И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
					ТекстСообщения = НСтр("ru = 'Номенклатура или упаковочный лист со штрихкодом ""%Штрихкод%"" не найдены'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Номенклатура со штрихкодом ""%Штрихкод%"" не найдена'");
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Штрихкод%", ДобавляемыеДанные.Штрихкод);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'В табличной части не найдена строка с товаром ""%НазваниеТовара%""'");
				
				НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ?(Тара, "",ДобавляемыеДанные.Упаковка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеТовара%",НазваниеТовара);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
			Если Не ЭтоУпаковочныйЛист
				И СтруктураПараметров.ПараметрыУказанияСерий <> Неопределено
				И СтруктураПараметров.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
				И Не ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
				
				Если СтрокаТЧ.СтатусУказанияСерий = 1
					Или СтрокаТЧ.СтатусУказанияСерий = 2
					Или СтрокаТЧ.СтатусУказанияСерий = 3 
					Или СтрокаТЧ.СтатусУказанияСерий = 4 Тогда
					
					СтруктураПараметров.МассивСтрокССериями.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат СтрокаТЧ;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() = 0
		И Не Тара
		И Не ЭтоУпаковочныйЛист
		И Не ДобавляемыеДанные.НеизвестныйШтрихкод Тогда 
			
		// Если для упаковки используется только одна упаковка с скоэффициентом 1 и ед. изм. как в номенклатуре,
		// то попробуем найти строку с этой упаковкой:
		//	- если найдем, то увеличим в ней количество
		//	- если нет - добавим новую строку	
		Если ЗначениеЗаполнено(ДобавляемыеДанные.ЕдиничнаяУпаковка) 
			И Не ЗначениеЗаполнено(ДобавляемыеДанные.Упаковка) Тогда	
			
			ЗаполнитьЗначенияСвойств(ОтборПоУпаковкам, ДобавляемыеДанные);
			
			Если СтруктураПараметров.НеИспользоватьУпаковки Тогда
				Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборПоУпаковкам);
				Отбор.Удалить("Упаковка");
			Иначе
				ОтборПоУпаковкам.Упаковка = ДобавляемыеДанные.ЕдиничнаяУпаковка;
				Отбор = ОтборПоУпаковкам;
			КонецЕсли;
			
			НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
			
		ИначеЕсли Не СтруктураПараметров.НеИспользоватьУпаковки
			И ЗначениеЗаполнено(ДобавляемыеДанные.ЕдиничнаяУпаковка)
			И ДобавляемыеДанные.ЕдиничнаяУпаковка = ДобавляемыеДанные.Упаковка Тогда
			
			ОтборПоУпаковкам.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			НайденныеСтроки = ТЧ.НайтиСтроки(ОтборПоУпаковкам);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьУпаковочныеЛисты
		И Не СтруктураПараметров.УчитыватьУпаковочныеЛисты
		И СтруктураПараметров.ТекущийУпаковочныйЛист <> Неопределено
		И НайденныеСтроки.Количество() > 0 Тогда
		
		//Удалим из найденных строки по другим упаковочным листам
		//Если в ТЧ уже есть строки с этим упаковочным листом - то в НайденныеСтроки[0] будет такая строка,
		//если таких строк нет, то или НайденныеСтроки очистится, или в НайденныеСтроки[0]
		//будет строка с пустым упаковочным листом
		
		Индекс = НайденныеСтроки.Количество();
		СтрокаСНепустымУпаковочнымЛистом = Неопределено;
					
		Пока Индекс > 0 Цикл
			
			Индекс = Индекс - 1;
			
			СтрМас = НайденныеСтроки[Индекс];
			
			УпаковочныйЛистРодитель = СтрМас.УпаковочныйЛист;
			
			Если ЗначениеЗаполнено(УпаковочныйЛистРодитель) Тогда
				Если УпаковочныйЛистРодитель <> СтруктураПараметров.ТекущийУпаковочныйЛист Тогда
					НайденныеСтроки.Удалить(Индекс);
				Иначе
					СтрокаСНепустымУпаковочнымЛистом = Индекс;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаСНепустымУпаковочнымЛистом)
					Или (Не ЗначениеЗаполнено(СтрокаСНепустымУпаковочнымЛистом)
						И Индекс <> 0) Тогда
					НайденныеСтроки.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИспользоватьУпаковочныеЛисты
		И СтруктураПараметров.ТекущийУпаковочныйЛист <> Неопределено
		И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
		ТекущийУпаковочныйЛистКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ТекущийУпаковочныйЛист, "Код");
	КонецЕсли;
	
	ДанныеЕстьВТЧ = (НайденныеСтроки.Количество() > 0);
	Если ДанныеЕстьВТЧ Тогда
		СтрокаТЧ = НайденныеСтроки[0];
	КонецЕсли;
	
	Количество = ДобавляемыеДанные.КоличествоПоШтрихкоду * ДобавляемыеДанные.КоличествоУпаковок * ДобавляемыеДанные.Коэффициент;
	КоличествоУпаковок = ДобавляемыеДанные.КоличествоПоШтрихкоду * ДобавляемыеДанные.КоличествоУпаковок;
	
	Если Не (ДобавляемыеДанные.МаркируемаяАлкогольнаяПродукция И СтруктураПараметров.МаркируемаяАлкогольнаяПродукцияВТЧ)
		Или СтруктураПараметров.ЗагрузкаИзТСД Тогда
		Если Не СтруктураПараметров.НеИспользоватьУпаковки Тогда
			ДобавляемоеКоличество = КоличествоУпаковок;
		Иначе
			ДобавляемоеКоличество = Количество;
		КонецЕсли;
	Иначе
		ДобавляемоеКоличество = 0;
	КонецЕсли;
	
	ЗаполнятьНазначение = ЗаполнятьНазначение(СтруктураПараметров, ДобавляемыеДанные);
	Если Не Тара
		И ЗаполнятьНазначение Тогда
		ТекущееНазначение = ПодобратьНазначение(ДобавляемыеДанные,
			Назначения, СтруктураПараметров.ИмяКолонкиКоличество, НайденныеСтроки, Количество, ДанныеЕстьВТЧ);
	КонецЕсли;
	
	Если Не ДанныеЕстьВТЧ Тогда
		
		Если ДобавлятьТовар Тогда
			
			СтрокаТЧ = ТЧ.Добавить();
			ДобавляемыеДанные.ВыполненныеДействия.Добавлено = Истина;
			
			Если СтруктураПараметров.ШтрихкодыВТЧ Тогда
				СтрокаТЧ.Штрихкод = ДобавляемыеДанные.Штрихкод;
			КонецЕсли;
			
			Если СтруктураПараметров.МаркируемаяАлкогольнаяПродукцияВТЧ Тогда
				СтрокаТЧ.МаркируемаяАлкогольнаяПродукция = ДобавляемыеДанные.МаркируемаяАлкогольнаяПродукция;
			КонецЕсли;
			
			Если ЭтоУпаковочныйЛист Тогда
				
				СтрокаТЧ.ЭтоУпаковочныйЛист = Истина;
				СтрокаТЧ.УпаковочныйЛист = ДобавляемыеДанные.УпаковочныйЛист;
				СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = 1;
				СтрокаТЧ.УпаковочныйЛистРодитель    = СтруктураПараметров.ТекущийУпаковочныйЛист;
				МассивСтрокСУпЛистамиДляОбработки.Добавить(СтрокаТЧ);
				
			ИначеЕсли ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
				
				СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = ДобавляемыеДанные.КоличествоПоШтрихкоду;
				СтрокаТЧ.ШтрихкодНеОпределен = 1;
				
			Иначе
				
				Если СтруктураПараметров.ПараметрыУказанияСерий <> Неопределено Тогда 
					НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(СтрокаТЧ,КэшированныеЗначения,
						СтруктураПараметров.ПараметрыУказанияСерий);
				КонецЕсли;
				
				Если СтруктураПараметров.РассчитыватьНаборы Тогда
					СтрокаТЧ.НоменклатураНабора = ДобавляемыеДанные.НоменклатураНабора;
					СтрокаТЧ.ХарактеристикаНабора = ДобавляемыеДанные.ХарактеристикаНабора;
				КонецЕсли;
				
				СтрокаТЧ.Номенклатура       = ДобавляемыеДанные.Номенклатура;
				СтрокаТЧ.Характеристика     = ДобавляемыеДанные.Характеристика;
				
				Если Не Тара
					И Не СтруктураПараметров.НеИспользоватьУпаковки Тогда
					Если ЗначениеЗаполнено(ДобавляемыеДанные.ЕдиничнаяУпаковка) Тогда
						СтрокаТЧ.Упаковка = ДобавляемыеДанные.ЕдиничнаяУпаковка;
					Иначе
						СтрокаТЧ.Упаковка = ДобавляемыеДанные.Упаковка;
					КонецЕсли;	
				КонецЕсли;
				
				СтрокаТЧ.ХарактеристикиИспользуются = ДобавляемыеДанные.ХарактеристикиИспользуются;
				
				Если ИспользоватьУпаковочныеЛисты
					И СтруктураПараметров.ТекущийУпаковочныйЛист <> Неопределено Тогда
					Если СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
						СтрокаТЧ.УпаковочныйЛистРодитель    = СтруктураПараметров.ТекущийУпаковочныйЛист;
						СтрокаТЧ.УпаковочныйЛистРодительКод = ТекущийУпаковочныйЛистКод;
					ИначеЕсли СтрокаТЧ.Свойство("Неотгружать")
						И СтрокаТЧ.Неотгружать = 0 Тогда
						СтрокаТЧ.УпаковочныйЛист = СтруктураПараметров.ТекущийУпаковочныйЛист;
					КонецЕсли;
				КонецЕсли;
				
				Если СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
					Или (Не СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
					И Не ЗначениеЗаполнено(СтрокаТЧ.Серия)) Тогда
					
					СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = ДобавляемоеКоличество;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ,
				СтруктураПараметров.СтруктураДействийСДобавленнымиСтроками,
				КэшированныеЗначения);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТЧ = НайденныеСтроки[0];
		
		Если СтруктураПараметров.ШтрихкодыВТЧ
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
			СтрокаТЧ.Штрихкод = ДобавляемыеДанные.Штрихкод;
		КонецЕсли;
		
		Если ЭтоУпаковочныйЛист
			Или ДобавляемыеДанные.НеизвестныйШтрихкод
				И СтруктураПараметров.УчитыватьУпаковочныеЛисты
				И ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛист) Тогда
			
			ТекстСообщения = НСтр("ru = '%УпаковочныйЛист% уже есть в табличной части.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%УпаковочныйЛист%", СтрокаТЧ.УпаковочныйЛист);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			Если СтруктураПараметров.ПараметрыУказанияСерий <> Неопределено Тогда 
				НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(СтрокаТЧ,КэшированныеЗначения,
					СтруктураПараметров.ПараметрыУказанияСерий);
			КонецЕсли;
			
			Если ИспользоватьУпаковочныеЛисты
				И СтруктураПараметров.ТекущийУпаковочныйЛист <> Неопределено Тогда
				Если СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
					СтрокаТЧ.УпаковочныйЛистРодитель    = СтруктураПараметров.ТекущийУпаковочныйЛист;
					СтрокаТЧ.УпаковочныйЛистРодительКод = ТекущийУпаковочныйЛистКод;
				ИначеЕсли  Не ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛист)
					И СтрокаТЧ.Свойство("Неотгружать")
					И СтрокаТЧ.НеОтгружать = 0 Тогда
					СтрокаТЧ.УпаковочныйЛист = СтруктураПараметров.ТекущийУпаковочныйЛист;
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
				Или (Не СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
					И Не ЗначениеЗаполнено(СтрокаТЧ.Серия))
					И РежимОбработки <> "ТараПоСтрокеССериейБезУвеличенияКоличества" Тогда
				
				СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество]
					+ ДобавляемоеКоличество;
				
				ДобавляемыеДанные.ВыполненныеДействия.Изменено = Истина;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ,
						СтруктураПараметров.СтруктураДействийСИзмененнымиСтроками,
						КэшированныеЗначения);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнятьНазначение
		И ЗначениеЗаполнено(Назначения) Тогда
		СтрокаТЧ.Назначение = ТекущееНазначение;
	КонецЕсли;
	
	Если Не ЭтоУпаковочныйЛист
		И Не ДобавляемыеДанные.НеизвестныйШтрихкод
		И СтруктураПараметров.ПараметрыУказанияСерий <> Неопределено
		И СтруктураПараметров.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
		И СтрокаТЧ <> Неопределено Тогда
		// В форме проверки заполнения документа отображаются только фин.серии, ТЧ Серии нет,
		// обработка серий произойдет при обработке строк ТЧ (выше)
		Если Не (СтруктураПараметров.ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма"
				И Объект.ИмяФормы = "ОбщаяФорма.ПроверкаЗаполненияДокументов") Тогда
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																							СтруктураПараметров.ПараметрыУказанияСерий, 
																							СтрокаТЧ.ПолучитьИдентификатор(),
																							КэшированныеЗначения);
		КонецЕсли;
		Если СтрокаТЧ.СтатусУказанияСерий <> 0 Тогда
			СтруктураПараметров.МассивСтрокССериями.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.МаркируемаяАлкогольнаяПродукцияВТЧ
		И СтрокаТЧ <> Неопределено
		И СтрокаТЧ.МаркируемаяАлкогольнаяПродукция Тогда
		СтруктураПараметров.МассивСтрокСАкцизнымиМарками.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
	КонецЕсли;
	
	Возврат СтрокаТЧ;
	
КонецФункции

Функция СоответствуетУсловиям(ДобавляемыеДанные, СтруктураПараметров)
	
	ЭтоУпаковочныйЛист = ЗначениеЗаполнено(ДобавляемыеДанные.УпаковочныйЛист);

	Если ЭтоУпаковочныйЛист
		И Не СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
		
		ТекстСообщения = НСтр("ru = 'Штрихкод ""%Штрихкод%"" соответствует упаковочному листу. В этом документе не поддерживается работа со штрихкодами упаковочных листов.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Штрихкод%",ДобавляемыеДанные.Штрихкод);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ЭтоУпаковочныйЛист
		И СтруктураПараметров.ТолькоТовары
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
		
		ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является услугой (работой). В данную табличную часть запрещено добавлять услуги (работы).'");
		
		НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеТовара%",НазваниеТовара);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ТолькоУслуги
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		ТекстСообщения = НСтр("ru = 'Номенклатура ""%НазваниеУслуги%"" является товаром (тарой). В данную табличную часть запрещено добавлять товары (тару).'");
		
		НазваниеУслуги = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеУслуги%", НазваниеУслуги);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ТолькоНеПодакцизныйТовар
		И ДобавляемыеДанные.ПодакцизныйТовар Тогда
		
		ТекстСообщения = НСтр("ru = 'Номенклатура ""%НазваниеНоменклатуры%"" является подакцизным товаром. В данную табличную часть подакцизный товар добавлять нельзя.'");
		
		НазваниеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																							 ДобавляемыеДанные.Характеристика,
																							 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеНоменклатуры%", НазваниеНоменклатуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ТолькоТара
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		
		ТекстСообщения = НСтр("ru = 'Номенклатура ""%НазваниеТары%"" не является тарой. В данную табличную часть можно добавлять только тару.'");
		
		НазваниеТары = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					ДобавляемыеДанные.Характеристика,
																					ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеТары%", НазваниеТары);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьАссортимент(Объект, СтруктураПараметров, ДобавляемыеДанные, ЭтоУпаковочныйЛист = Ложь)
	
	ДобавлятьТовар = Истина;
	
	Если СтруктураПараметров.ПараметрыПроверкиАссортимента = Неопределено
		Или Не СтруктураПараметров.ПараметрыПроверкиАссортимента.ПроверятьАссортимент
		Или ЭтоУпаковочныйЛист 
		Или ДобавляемыеДанные.НеизвестныйШтрихкод
		Или ЗначениеЗаполнено(ДобавляемыеДанные.НоменклатураНабора) Тогда
		
		Возврат ДобавлятьТовар;
		
	КонецЕсли;
	
	СтруктураСостоянияАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ДобавляемыеДанные.Номенклатура,
																									СтруктураПараметров.ПараметрыПроверкиАссортимента.Склад,
																									Объект.Дата);
	
	Если Не СтруктураСостоянияАссортимента[СтруктураПараметров.ПараметрыПроверкиАссортимента.ИмяРесурсаАссортимента] Тогда
		ПредставлениеТовара =  НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																				 ДобавляемыеДанные.Характеристика);
																				 
		ТекстСообщенияАссортимента = СтрЗаменить(СтруктураПараметров.ПараметрыПроверкиАссортимента.ТекстСообщения,
			"%1",
			ПредставлениеТовара);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияАссортимента);
		
		ДобавлятьТовар = СтруктураПараметров.ПараметрыПроверкиАссортимента.РазрешатьДобавление;
		
	КонецЕсли;

	Возврат ДобавлятьТовар;
	
КонецФункции

Функция Комплектующие(Номенклатура, Характеристика) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Данные = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Номенклатура.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	Таблица.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	|	МАКСИМУМ(УпаковкиНоменклатуры.Ссылка) КАК ЕдиничнаяУпаковка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиНоменклатуры.Ссылка) КАК КоличествоЕдиничныхУпаковок,
	|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения, Таблица.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (&ТекстЗапросаКоэффициентУпаковки2 = 1)
	|			И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
	|			И Таблица.Номенклатура.ЕдиницаИзмерения = УпаковкиНоменклатуры.ЕдиницаИзмерения
	|			И (Таблица.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					И Таблица.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|				ИЛИ Таблица.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					И Таблица.Номенклатура = УпаковкиНоменклатуры.Владелец)
	|ГДЕ
	|	Таблица.Ссылка.Владелец = &Владелец
	|	И Таблица.Ссылка.Характеристика = &Характеристика
	|	И Таблица.Ссылка.Основной
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НомерСтроки,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Номенклатура.ТипНоменклатуры,
	|	Таблица.Номенклатура.ПодакцизныйТовар,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1),
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения,
	|	Таблица.Номенклатура.ИспользоватьУпаковки,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения, Таблица.Номенклатура.ЕдиницаИзмерения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Таблица.Упаковка",
		"Таблица.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", Неопределено));
		
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекДанные = ОбработкаТабличнойЧастиКлиентСервер.СтуктураКешируемойИнформацииПоШтрихкоду();
		ТекДанные.НоменклатураНабора =         Номенклатура;
		ТекДанные.ХарактеристикаНабора =       Характеристика;
		ТекДанные.Номенклатура =               Выборка.Номенклатура;
		ТекДанные.ТипНоменклатуры =            Выборка.ТипНоменклатуры;
		ТекДанные.Характеристика =             Выборка.Характеристика;
		ТекДанные.Упаковка =                   Выборка.Упаковка;
		ТекДанные.КоличествоУпаковок =         Выборка.КоличествоУпаковок;
		ТекДанные.ПодакцизныйТовар =           Выборка.ПодакцизныйТовар;
		ТекДанные.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
		ТекДанные.Коэффициент =                Выборка.Коэффициент;
		ТекДанные.ЕдиницаИзмерения =           Выборка.ЕдиницаИзмерения;
		ТекДанные.НеизвестныйШтрихкод =        Ложь;
		ТекДанные.ЕдиничнаяУпаковка =          ?(Выборка.КоличествоЕдиничныхУпаковок = 1 И Выборка.Коэффициент = 1, Выборка.ЕдиничнаяУпаковка, Неопределено);
		ТекДанные.НесколькоЕдиничныхУпаковок = ?(Выборка.КоличествоЕдиничныхУпаковок > 1, Истина, Ложь);
		Данные.Добавить(ТекДанные);
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

Функция Назначения(Объект, СтруктураПараметров, ЗакешированныеШтрихкоды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не СтруктураПараметров.ЗаполнятьНазначения
		Или Не СтруктураПараметров.ИзменятьКоличество Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = СтруктураПараметров.Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(СтруктураПараметров.Штрихкоды);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	ПараметрыТекстаЗапроса = Справочники.Назначения.ПараметрыФормированияЗапросаДоступныхНазначений();
	ПараметрыТекстаЗапроса.УчестьУжеПодобранные              = Истина;
	ПараметрыТекстаЗапроса.ПоНесколькимТоварам               = Истина;
	ПараметрыТекстаЗапроса.УпорядочитьПоДатеЗаказаНазначения = Истина;
	Запрос.Текст = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ТекстЗапросаДоступныхНазначений(ПараметрыТекстаЗапроса);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Для Каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		ЗначениеИзКеша = ЗакешированныеШтрихкоды[ТекШтрихкод.Штрихкод];
		Если ЗначениеИзКеша <> Неопределено
			И ЗначениеЗаполнено(ЗначениеИзКеша.Номенклатура) Тогда
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеИзКеша);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТоварыДокумента",
		Объект[СтруктураПараметров.ИмяТЧ].Выгрузить(, "Номенклатура,Характеристика,Назначение,Количество"));
	Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	Назначения = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Назначения;
	
КонецФункции

Функция ЗаполнятьНазначение(СтруктураПараметров, ДобавляемыеДанные)
	
	Возврат СтруктураПараметров.ЗаполнятьНазначения
		И Не ДобавляемыеДанные.НеизвестныйШтрихкод
		И Не ЗначениеЗаполнено(ДобавляемыеДанные.УпаковочныйЛист)
		И СтруктураПараметров.ИзменятьКоличество;
	
КонецФункции

Функция ПодобратьНазначение(ДобавляемыеДанные,
			Назначения, ИмяКолонкиКоличество, МассивСтрокТЧ, ДобавляемоеКоличество, ДанныеЕстьВТЧ) Экспорт
	
	ОтборНазначений = Новый Структура("Номенклатура, Характеристика",
		ДобавляемыеДанные.Номенклатура, ДобавляемыеДанные.Характеристика);
	НазначенияПоТовару = Назначения.Скопировать(ОтборНазначений);
	
	ТекущееНазначение = Справочники.Назначения.ПустаяСсылка();
	
	СтрокаСПустымНазначениемНулевымКоличеством = Неопределено;
	
	Если ДанныеЕстьВТЧ Тогда
		
		ДанныеЕстьВТЧ = Ложь;
		Индекс = МассивСтрокТЧ.Количество();
		Пока Не ДанныеЕстьВТЧ
			И Индекс > 0 Цикл
			Индекс = Индекс - 1;
			СтрокаТЧ = МассивСтрокТЧ[Индекс];
			Если ЗначениеЗаполнено(СтрокаТЧ.Назначение) Тогда
				НайденныеНазначения = НазначенияПоТовару.НайтиСтроки(Новый Структура("Назначение",СтрокаТЧ.Назначение));
				Если НайденныеНазначения.Количество() > 0
					И НайденныеНазначения[0].Остаток >= ДобавляемоеКоличество Тогда
					ДанныеЕстьВТЧ = Истина;
					ТекущееНазначение = СтрокаТЧ.Назначение;
					МассивСтрокТЧ.Вставить(0, СтрокаТЧ);
					МассивСтрокТЧ.Удалить(Индекс + 1);
				КонецЕсли;
			Иначе
				Если СтрокаТЧ[ИмяКолонкиКоличество] > 0 Тогда
					// Если в строке уже заполнено количество и нет назначения,
					// значит, пользователь сам контролирует заполнение назначений, либо назначений нет
					ДанныеЕстьВТЧ = Истина;
					МассивСтрокТЧ.Вставить(0, СтрокаТЧ);
					МассивСтрокТЧ.Удалить(Индекс);
				Иначе
					// Запомним строку с пустым назначение, но попробуем найти строку с заполненным назначением,
					// чтобы дозаполнить ее при возможности
					СтрокаСПустымНазначениемНулевымКоличеством = СтрокаТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ДанныеЕстьВТЧ Тогда
		
		Для Каждого Стр Из НазначенияПоТовару Цикл
			Если Стр.Остаток >= ДобавляемоеКоличество Тогда
				ТекущееНазначение = Стр.Назначение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСПустымНазначениемНулевымКоличеством <> Неопределено Тогда
			СтрокаТЧ = СтрокаСПустымНазначениемНулевымКоличеством;
			ДанныеЕстьВТЧ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущееНазначение;
	
КонецФункции

#Область RFID

Функция ДобавитьСериюПоИнформацииПоКиЗ(ИнформацияПоКиЗ, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	GTIN                        = Параметры.GTIN;
	ЭтоМаркировкаТоваровГИСМ    = Параметры.ЭтоМаркировкаТоваровГИСМ;
	НастройкиИспользованияСерий = Параметры.НастройкиИспользованияСерий;
	ВидНоменклатуры             = Параметры.ВидНоменклатуры;
	ЭтоМаркировкаПерсонифицированнымиКиЗ = Параметры.ЭтоМаркировкаПерсонифицированнымиКиЗ;
	ЭтоМаркировкаОстатковГИСМ = Параметры.ЭтоМаркировкаОстатковГИСМ;
	
	Если Не ЗначениеЗаполнено(ИнформацияПоКиЗ.НомерКиЗ) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о КиЗ: не заполнен номер КиЗ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоМаркировкаТоваровГИСМ Тогда		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) 
			И GTIN <> ИнформацияПоКиЗ.GTIN Тогда
			ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован для маркировки товаров с GTIN %GTINТовара%, т.к. предназначен для маркировки товаров с GTIN %GTINКиЗ%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЭтоМаркировкаОстатковГИСМ Тогда
			
			Если ИнформацияПоКиЗ.ДляМаркировкиОстатков = Ложь Тогда
				ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован для маркировки остатков товаров.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	
			
		Иначе
			
			Если ИнформацияПоКиЗ.ДляМаркировкиОстатков = Истина Тогда
				ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован только для маркировки остатков товаров.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = ТЧСерии.НайтиСтроки(Новый Структура("НомерКИЗГИСМ", ИнформацияПоКиЗ.НомерКиЗ));
	
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = ТЧСерии.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	//Для случая, когда информации о КиЗ в системе нет, поэтому мы считываем RFID и сканером номер КиЗ
	Если НайденныеСтроки.Количество() = 0
		И ТекущаяСтрока <> Неопределено
		И Не ЗначениеЗаполнено(ТекущаяСтрока.НомерКИЗГИСМ)
		И (ТекущаяСтрока.RFIDTID = ИнформацияПоКиЗ.RFIDTID
		Или Не ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDTID)) Тогда
		
		ОбрабатываемаяСтрока = ТекущаяСтрока;
		ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
		
	ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
		
		ОбрабатываемаяСтрока = НайденныеСтроки[0];
		
		Если Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.Серия) Тогда
			Выборка = ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(ИнформацияПоКиЗ.НомерКиЗ, ВидНоменклатуры);
			
			Если Выборка.Следующий() Тогда
				Если РеквизитыСерииСовпадаютСИнформациейПоКиЗ(Выборка, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
					ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
				КонецЕсли;
			Иначе
				ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
			КонецЕсли;
			
		Иначе
			Если Не РеквизитыСерииСовпадаютСИнформациейПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
				ТЧСерии.Удалить(ОбрабатываемаяСтрока);
				ОбрабатываемаяСтрока = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Выборка = ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(ИнформацияПоКиЗ.НомерКиЗ, ВидНоменклатуры);
		
		Если Выборка.Следующий() Тогда
			Если РеквизитыСерииСовпадаютСИнформациейПоКиЗ(Выборка, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
				ОбрабатываемаяСтрока = ТЧСерии.Добавить();
				ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
				ОбрабатываемаяСтрока.Количество         = 1;
				ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
			КонецЕсли;
		Иначе
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
			ОбрабатываемаяСтрока.Количество         = 1;
			ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
		КонецЕсли;	
				
	КонецЕсли;
	
	ПараметрыЗаполненияФлаговРаботыСМеткой = ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыЗаполненияФлаговРаботыСМеткой();
	ПараметрыЗаполненияФлаговРаботыСМеткой.GTIN = GTIN;
	ПараметрыЗаполненияФлаговРаботыСМеткой.ТекущаяМетка = Неопределено;
	ПараметрыЗаполненияФлаговРаботыСМеткой.НастройкиИспользованияСерий = НастройкиИспользованияСерий;
	ПараметрыЗаполненияФлаговРаботыСМеткой.ЭтоМаркировкаОстатковГИСМ = ЭтоМаркировкаОстатковГИСМ;
	ПараметрыЗаполненияФлаговРаботыСМеткой.ЭтоМаркировкаПерсонифицированнымиКиЗ = ЭтоМаркировкаПерсонифицированнымиКиЗ;
	ШтрихкодированиеНоменклатурыКлиентСервер.ЗаполнитьФлагиРаботыСМеткой(ОбрабатываемаяСтрока, ПараметрыЗаполненияФлаговРаботыСМеткой);
	
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Функция ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	НастройкиИспользованияСерий = Параметры.НастройкиИспользованияСерий;
	ВидНоменклатуры             = Параметры.ВидНоменклатуры;
	
	Если Не ЗначениеЗаполнено(ТекущаяМетка.TID) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о RFID-метке: не заполнен TID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	ИначеЕсли Не НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о RFID-метке: для серий этого вида номенклатуры не используются метки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = ТЧСерии.НайтиСтроки(Новый Структура("RFIDTID", ТекущаяМетка.TID));
		
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = ТЧСерии.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	//Для случая, когда информации о КиЗ в системе нет, поэтому мы считываем RFID и сканером номер КиЗ
	Если НайденныеСтроки.Количество() = 0
		И ТекущаяСтрока <> Неопределено
		И Не ЗначениеЗаполнено(ТекущаяСтрока.RFIDTID)
		И (Не ЗначениеЗаполнено(ТекущаяСтрока.Номер)
			Или Не НастройкиИспользованияСерий.ИспользоватьНомерСерии 
			Или ТекущаяСтрока.Номер = ТекущаяМетка.СерийныйНомер) Тогда
		
		ОбрабатываемаяСтрока = ТекущаяСтрока;
		ОбрабатываемаяСтрока.RFIDTID = ТекущаяМетка.TID;
		Если ЗначениеЗаполнено(ТекущаяМетка.GTIN)
			И Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.EPCGTIN) Тогда
			ОбрабатываемаяСтрока.EPCGTIN = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяМетка.GTIN, "0");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяМетка.СерийныйНомер)
			И Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.Номер) Тогда
			ОбрабатываемаяСтрока.Номер = ТекущаяМетка.СерийныйНомер;
		КонецЕсли;
		
		Возврат ОбрабатываемаяСтрока;	
	
	ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
		ОбрабатываемаяСтрока = НайденныеСтроки[0];
		
		Возврат ОбрабатываемаяСтрока;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СерииНоменклатуры.Ссылка КАК Серия,
		|	СерииНоменклатуры.Номер КАК Номер,
		|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
		|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
		|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
		|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
		|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN,
		|	СерииНоменклатуры.ГоденДо КАК  ГоденДо
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
		|	И СерииНоменклатуры.RFIDTID = &TID";
		
		Запрос.УстановитьПараметр("TID", ТекущаяМетка.TID);
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
			ОбрабатываемаяСтрока.Количество         = 1;
			ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
		Иначе
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ОбрабатываемаяСтрока.RFIDTID = ТекущаяМетка.TID;
			
			Если ЗначениеЗаполнено(ТекущаяМетка.GTIN) Тогда
				ОбрабатываемаяСтрока.EPCGTIN = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяМетка.GTIN, "0");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяМетка.СерийныйНомер)
				И  НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
				ОбрабатываемаяСтрока.Номер = ТекущаяМетка.СерийныйНомер;
			КонецЕсли;
		КонецЕсли;	
				
	КонецЕсли;
		
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоИнформацииПоКиЗ(Строка, ИнформацияПоКиЗ, НастройкиИспользованияСерий)
	Строка.НомерКИЗГИСМ = ИнформацияПоКиЗ.НомерКиЗ;
		
	Если НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии Тогда
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDTID) Тогда
			Строка.RFIDTID = ИнформацияПоКиЗ.RFIDTID;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDEPC) Тогда
			Строка.RFIDEPC = ИнформацияПоКиЗ.RFIDEPC;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) Тогда
			Строка.EPCGTIN = ИнформацияПоКиЗ.GTIN;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьНомерСерии 
		И ЗначениеЗаполнено(ИнформацияПоКиЗ.СерийныйНомер) Тогда
		Строка.Номер = ИнформацияПоКиЗ.СерийныйНомер;
	КонецЕсли;
КонецПроцедуры

Функция ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(НомерКиЗ, ВидНоменклатуры)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.Номер КАК Номер,
	|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
	|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
	|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
	|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
	|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN,
	|	СерииНоменклатуры.ГоденДо КАК  ГоденДо
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|	И СерииНоменклатуры.НомерКиЗГИСМ = &НомерКиЗГИСМ";
	
	Запрос.УстановитьПараметр("НомерКиЗГИСМ", НомерКиЗ);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция РеквизитыСерииСовпадаютСИнформациейПоКиЗ(РеквизитыСерии, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ)
	
	Если ЭтоМаркировкаТоваровГИСМ
        И ((ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDTID)
			И РеквизитыСерии.RFIDTID <> ИнформацияПоКиЗ.RFIDTID) 
		Или (ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) 
			И РеквизитыСерии.EPCGTIN <> ИнформацияПоКиЗ.GTIN)
		Или (ЗначениеЗаполнено(ИнформацияПоКиЗ.СерийныйНомер)
		    И СтрЧислоВхождений(ИнформацияПоКиЗ.СерийныйНомер, "0") <> СтрДлина(ИнформацияПоКиЗ.СерийныйНомер)
			И РеквизитыСерии.Номер <> ИнформацияПоКиЗ.СерийныйНомер)) Тогда
		ТекстСообщения = НСтр("ru = 'Информация о КиЗ с номером %НомерКиЗ% предоставленная эмитентом не соответсвует информации, сохраненной в серии. Этот КиЗ не может быть использован для маркировки.'");	
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерКиЗ%", ИнформацияПоКиЗ.НомерКиЗ); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
