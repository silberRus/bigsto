#Область ПрограммныйИнтерфейс

// Позволяет настроить общие параметры подсистемы.
//
// Параметры:
//  ОбщиеПараметры - Структура - структура со свойствами:
//      * ИмяФормыПерсональныхНастроек            - Строка - имя формы для редактирования персональных настроек.
//                                                           Ранее определялись в
//                                                           ОбщегоНазначенияПереопределяемый.ИмяФормыПерсональныхНастроек.
//      * ЗапрашиватьПодтверждениеПриЗавершенииПрограммы - Булево - по умолчанию Истина. Если установить Ложь, то 
//                                                                  подтверждение при завершении работы программы не
//                                                                  будет запрашиваться,  если явно не разрешить в
//                                                                  персональных настройках программы.
//      * МинимальнаяВерсияПлатформы              - Строка - минимальная версии платформы, требуемая для запуска программы.
//                                                           Запуск программы на версии платформы ниже указанной будет невозможен.
//                                                           Например, "8.3.6.1650".
//      * РекомендуемаяВерсияПлатформы            - Строка - рекомендуемая версия платформы для запуска программы.
//                                                           Например, "8.3.8.2137".
//      * ОтключитьИдентификаторыОбъектовМетаданных - Булево - отключает заполнение справочников ИдентификаторыОбъектовМетаданных
//              и ИдентификаторыОбъектовРасширений, процедуру выгрузки и загрузки в узлах РИБ.
//              Для частичного встраивания отдельных функций библиотеки в конфигурации без постановки на поддержку.
//      * РекомендуемыйОбъемОперативнойПамяти - Число - объем памяти в гигабайтах, рекомендуемый для комфортной работы в
//                                                      программе.
//
//    Устарели, следует использовать свойства МинимальнаяВерсияПлатформы и РекомендуемаяВерсияПлатформы:
//      * МинимальноНеобходимаяВерсияПлатформы    - Строка - полный номер версии платформы для запуска программы.
//                                                           Например, "8.3.4.365".
//                                                           Ранее определялись в
//                                                           ОбщегоНазначенияПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы.
//      * РаботаВПрограммеЗапрещена               - Булево - Начальное значение Ложь.
//
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	ОбщиеПараметры.МинимальнаяВерсияПлатформы = "8.3.10.2125";
	ОбщиеПараметры.РекомендуемаяВерсияПлатформы = "8.3.10.2125";
	ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти  = 3;
	
КонецПроцедуры

// Определяет соответствие имен параметров сеанса и обработчиков для их установки.
//
// В указанных модулях должна быть размещена процедура обработчика, в которую передаются параметры
//  ИмяПараметра           - Строка - имя параметра сеанса, который требуется установить.
//  УстановленныеПараметры - Массив - имена параметров, которые уже установлены.
// 
// Далее пример процедуры обработчика для копирования в указанные модули.
//
//// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
//Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
//	
//	Если ИмяПараметра = "ТекущийПользователь" Тогда
//		ПараметрыСеанса.ТекущийПользователь = Значение;
//		УстановленныеПараметры.Добавить("ТекущийПользователь");
//	КонецЕсли;
//	
//КонецПроцедуры
//
// Параметры:
//  Обработчики - Соответствие - со свойствами:
//    * Ключ     - Строка - в формате "<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>".
//                   Символ '*'используется в конце имени параметра сеанса и обозначает,
//                   что один обработчик будет вызван для инициализации всех параметров сеанса
//                   с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
//    * Значение - Строка - в формате "<ИмяМодуля>.УстановкаПараметровСеанса".
//
//  Пример:
//   Обработчики.Вставить("ТекущийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	//++ НЕ ГИСМ
	
	//ИнтеграцияС1СДокументооборот
	ИнтеграцияС1СДокументооборот.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	//Конец ИнтеграцияС1СДокументооборот
	
	//-- НЕ ГИСМ
	
	//ПодключаемоеОборудование
	Обработчики.Вставить("РабочееМестоКлиента", "МенеджерОборудованияВызовСервера.УстановитьПараметрыСеансаПодключаемогоОборудования");
	//Конец ПодключаемоеОборудование
	
	// ИнтеграцияЕГАИС
	Обработчики.Вставить("ИдентификаторСеансаЕГАИС" , "ИнтеграцияЕГАИС.УстановитьПараметрыСеанса");
	// Конец ИнтеграцияЕГАИС
	
	//++ НЕ ГИСМ
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	// Конец ИнтернетПоддержкаПользователей
	
	
	// БиблиотекаЭлектронныхДокументов
	ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	// Конец БиблиотекаЭлектронныхДокументов
	
	Обработчики.Вставить("ПроводитьБезКонтроляОстатковТоваровОрганизаций" , "ЗапасыСервер.УстановитьПараметрыСеанса");
	
	//-- НЕ ГИСМ
	
КонецПроцедуры

// Позволяет задать значения параметров, необходимых для работы клиентского кода
// при запуске конфигурации (в обработчиках событий ПередНачаломРаботыСистемы и ПриНачалеРаботыСистемы) 
// без дополнительных серверных вызовов. 
// Для получения значений этих параметров из клиентского кода
// см. СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске.
//
// Важно: недопустимо использовать команды сброса кэша повторно используемых модулей, 
// иначе запуск может привести к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры - Структура - имена и значения параметров работы клиента при запуске, которые необходимо задать.
//                           Для установки параметров работы клиента при запуске:
//                           Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	//++ НЕ ЕГАИС
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	// Конец ИнтернетПоддержкаПользователей
	
	
	//-- НЕ ЕГАИС
	
КонецПроцедуры

// Позволяет задать значения параметров, необходимых для работы клиентского кода
// конфигурации без дополнительных серверных вызовов.
// Для получения этих параметров из клиентского кода
// см. СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента.
//
// Параметры:
//   Параметры - Структура - имена и значения параметров работы клиента, которые необходимо задать.
//                           Для установки параметров работы клиента:
//                           Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	//++ НЕ ЕГАИС
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПриДобавленииПараметровРаботыКлиента(Параметры);
	// Конец ИнтернетПоддержкаПользователей
	
	
	//-- НЕ ЕГАИС
	
КонецПроцедуры

// Определяет объекты метаданных и отдельные реквизиты, которые исключаются из результатов поиска ссылок,
// не учитываются при монопольном удалении помеченных, замене ссылок и в отчете по местам использования.
// См. также ОбщегоНазначения.ИсключенияПоискаСсылок.
//
// Пример задачи: к документу "Реализация товаров и услуг" подключены подсистемы "Версионирование объектов" и "Свойства".
// Также этот документ может быть указан в других объектах метаданных - документах или регистрах.
// Часть ссылок имеют значение для бизнес-логики (например движения по регистрам) и должны выводиться пользователю.
// Другая часть ссылок - "техногенные" (ссылки на документ из данных подсистем "Версионирование объектов" и "Свойства")
// и должны скрываться от пользователя при удалении, анализе мест использования или запретов редактирования ключевых реквизитов.
// Список таких "техногенных" объектов нужно перечислить в этой процедуре.
//
// При этом, для избежания появления появления ссылок на несуществующие объекты
// рекомендуется предусмотреть процедуру очистки указанных объектов метаданных.
//   * Для измерений регистров сведений - с помощью установки флажка "Ведущее",
//     тогда запись регистра сведений будет удалена вместе с удалением ссылки, указанной в измерении.
//   * Для других реквизитов указанных объектов - с помощью подписки на событие ПередУдалением всех типов объектов
//     метаданных, которые могут быть записаны в реквизиты указанных объектов метаданных.
//     В обработчике необходимо найти "техногенные" объекты, в реквизитах которых указана ссылка удаляемого объекта,
//     и выбрать как именно очищать ссылку: очищать значение реквизита, удалять строку таблицы или удалять весь объект.
// Подробнее см. в документации к подсистеме "Удаление помеченных объектов".
//
// Параметры:
//   ИсключенияПоискаСсылок - Массив - объекты метаданных или их реквизиты (ОбъектМетаданных, Строка),
//       которые не должно учитываться в бизнес-логике.
//       Стандартные реквизиты и табличные части могут быть указаны только в виде строковых имен (см. пример ниже).
//
// Пример:
//   ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов);
//   ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.Реквизиты.АвторВерсии);
//   ИсключенияПоискаСсылок.Добавить("ПланВидовРасчета._ДемоОсновныеНачисления.СтандартнаяТабличнаяЧасть.БазовыеВидыРасчета.СтандартныйРеквизит.ВидРасчета");
//
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	//++ НЕ ГИСМ
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаПартий.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца.ПолноеИмя());
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.Документы.РегистраторГрафикаДвиженияТоваров.ПолноеИмя());
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ДатыПередачиТоваровНаКомиссию.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ДоступностьТоваровДляВнешнихПользователей.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ЦелевыеЗначенияВариантовАнализа.ПолноеИмя());	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры.ПолноеИмя());	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ДатыЗапретаИзменения.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.НаличиеФайлов.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ДвоичныеДанныеФайлов.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц.ПолноеИмя());
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ТабличныеЧасти.РеквизитыБыстрогоОтбораНоменклатуры.Реквизиты.Свойство);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ТабличныеЧасти.РеквизитыБыстрогоОтбораХарактеристик.Реквизиты.Свойство);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ТабличныеЧасти.РеквизитыДляКонтроляНоменклатуры.Реквизиты.Свойство);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ТабличныеЧасти.РеквизитыДляКонтроляХарактеристик.Реквизиты.Свойство);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ТабличныеЧасти.РеквизитыДляКонтроляСерий.Реквизиты.Свойство);
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ТабличныеЧасти.ПолитикиУчетаСерий.Реквизиты.Склад);
	//-- НЕ ГИСМ
	
КонецПроцедуры

// Вызывается при обновлении информационной базы для учета переименований подсистем и ролей в конфигурации.
// В противном случае, возникнет рассинхронизация между метаданными конфигурации и 
// элементами справочника ИдентификаторыОбъектовМетаданных, что приведет к различным ошибкам при работе конфигурации.
//
// В этой процедуре последовательно для каждой версии конфигурации задаются переименования только подсистем и ролей, 
// а переименования остальных объектов метаданных задавать не следует, т.к. они обрабатываются автоматически.
//
// Параметры:
//  Итог - ТаблицаЗначений - таблица переименований, которую требуется заполнить.
//                           См. ОбщегоНазначения.ДобавитьПереименование.
//
// Пример:
//	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
//		"Подсистема._ДемоПодсистемы",
//		"Подсистема._ДемоСервисныеПодсистемы");
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	//++ НЕ ГИСМ
	ОбновлениеИнформационнойБазыУТ.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	// Конец ИнтернетПоддержкаПользователей
	//-- НЕ ГИСМ
КонецПроцедуры

// Позволяет виртуально отключать подсистемы для целей тестирования.
// Если подсистема отключена, то функция ОбщегоНазначения.ПодсистемаСуществует вернет Ложь.
// В этой процедуре нельзя использовать функцию ОбщегоНазначения.ПодсистемСуществует, т.к. это приводит к рекурсии.
//
// Параметры:
//   ОтключенныеПодсистемы - Соответствие - в ключе указывается имя отключаемой подсистемы, 
//                                          в значении - установить в Истина.
//
Процедура ПриОпределенииОтключенныхПодсистем(ОтключенныеПодсистемы) Экспорт
	
	
	
КонецПроцедуры

// Вызывается перед загрузкой приоритетных данных в подчиненном узле РИБ
// и предназначена для заполнения настроек размещения сообщения обмена данными или
// для реализации нестандартной загрузки приоритетных данных из главного узла РИБ.
//
// К приоритетным данным относятся предопределенные элементы, а также
// элементы справочника ИдентификаторыОбъектовМетаданных.
//
// Параметры:
//  СтандартнаяОбработка - Булево - начальное значение Истина; если установить Ложь, 
//                то стандартная загрузка приоритетных данных с помощью подсистемы
//                ОбменДанными будет пропущена (тоже будет и в случае,
//                если подсистемы ОбменДанными нет в конфигурации).
//
Процедура ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле(СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Определяет список версий программных интерфейсов, доступных через web-сервис InterfaceVersion.
// См. также ОбщегоНазначения.ВерсииИнтерфейса.
//
// Параметры:
//  ПоддерживаемыеВерсии - Структура - в ключе указывается имя программного интерфейса,
//                                     а в значениях - массив строк с поддерживаемыми версиями этого интерфейса.
//
// Пример:
//
//  // СервисПередачиФайлов
//  Версии = Новый Массив;
//  Версии.Добавить("1.0.1.1");
//  Версии.Добавить("1.0.2.1"); 
//  ПоддерживаемыеВерсии.Вставить("СервисПередачиФайлов", Версии);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(ПоддерживаемыеВерсии) Экспорт
	//++ НЕ ГИСМ
	//-- НЕ ГИСМ
	Возврат // В УТ 11.1 код данного обработчика пустой
	
КонецПроцедуры

// Задает параметры функциональных опций, действие которых распространяется на командный интерфейс и рабочий стол.
// Например, если значения функциональной опции хранятся в ресурсах регистра сведений,
// то параметры функциональных опций могут определять условия отборов по измерениям регистра,
// которые будут применяться при чтении значения этой функциональной опции.
//
// См. в синтакс-помощнике методы ПолучитьФункциональнуюОпциюИнтерфейса,
// УстановитьПараметрыФункциональныхОпцийИнтерфейса и ПолучитьПараметрыФункциональныхОпцийИнтерфейса.
//
// Параметры:
//   ОпцииИнтерфейса - Структура - значения параметров функциональных опций, установленных для командного интерфейса.
//       Ключ элемента структуры определяет имя параметра, а значение элемента - текущее значение параметра.
//
Процедура ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики отправки и получения данных для обмена в распределенной информационной базе.

// Дополнительный обработчик одноименного события, возникающего при обмене данными в распределенной информационной базе.
// Выполняется после выполнения базовых алгоритмов библиотеки.
// Не выполняется, если отправка элемента данных была проигнорирована ранее.
//
// Параметры:
//  Источник                  - ПланОбменаОбъект - узел, для которого выполняется обмен.
//  ЭлементДанных             - Произвольный - см. описание одноименного обработчика в синтаксис-помощнике.
//  ОтправкаЭлемента          - ОтправкаЭлементаДанных - см. описание одноименного обработчика в синтаксис-помощнике.
//  СозданиеНачальногоОбраза  - Булево - см. описание одноименного обработчика в синтаксис-помощнике.
//
Процедура ПриОтправкеДанныхПодчиненному(Источник, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
КонецПроцедуры

// Дополнительный обработчик одноименного события, возникающего при обмене данными в распределенной информационной базе.
// Выполняется после выполнения базовых алгоритмов библиотеки.
// Не выполняется, если отправка элемента данных была проигнорирована ранее.
//
// Параметры:
//  Источник          - ПланОбменаОбъект - узел, для которого выполняется обмен.
//  ЭлементДанных     - Произвольный - см. описание одноименного обработчика в синтаксис-помощнике.
//  ОтправкаЭлемента  - ОтправкаЭлементаДанных - см. описание одноименного обработчика в синтаксис-помощнике.
//
Процедура ПриОтправкеДанныхГлавному(Источник, ЭлементДанных, ОтправкаЭлемента) Экспорт
	
КонецПроцедуры

// Дополнительный обработчик одноименного события, возникающего при обмене данными в распределенной информационной базе.
// Выполняется после выполнения базовых алгоритмов библиотеки.
// Не выполняется, если получение элемента данных было проигнорировано ранее.
//
// Параметры:
//  Источник          - ПланОбменаОбъект - узел, для которого выполняется обмен.
//  ЭлементДанных     - Произвольный - см. описание одноименного обработчика в синтаксис-помощнике.
//  ПолучениеЭлемента - ПолучениеЭлементаДанных - см. описание одноименного обработчика в синтаксис-помощнике.
//  ОтправкаНазад     - Булево - см. описание одноименного обработчика в синтаксис-помощнике.
//
Процедура ПриПолученииДанныхОтПодчиненного(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
КонецПроцедуры

// Дополнительный обработчик одноименного события, возникающего при обмене данными в распределенной информационной базе.
// Выполняется после выполнения базовых алгоритмов библиотеки.
// Не выполняется, если получение элемента данных было проигнорировано ранее.
//
// Параметры:
//  Источник          - ПланОбменаОбъект - узел, для которого выполняется обмен.
//  ЭлементДанных     - Произвольный - см. описание одноименного обработчика в синтаксис-помощнике.
//  ПолучениеЭлемента - ПолучениеЭлементаДанных - см. описание одноименного обработчика в синтаксис-помощнике.
//  ОтправкаНазад     - Булево - см. описание одноименного обработчика в синтаксис-помощнике.
//
Процедура ПриПолученииДанныхОтГлавного(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
//
// Позволяет задать значения параметров, необходимых для работы клиентского кода
// при запуске конфигурации (в обработчиках событий ПередНачаломРаботыСистемы и ПриНачалеРаботыСистемы) 
// без дополнительных серверных вызовов. 
// Для получения значений этих параметров из клиентского кода
// см. СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске.
//
// Важно: недопустимо использовать команды сброса кэша повторно используемых модулей, 
// иначе запуск может привести к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры - Структура - имена и значения параметров работы клиента при запуске, которые необходимо задать.
//                           Для установки параметров работы клиента при запуске:
//                           Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	//++ НЕ ГИСМ
	Параметры.Вставить("ПодключатьКомпонентуОбменаДаннымиПриСтартеСистемы", МобильныеПриложения.ПодключатьКомпонентуОбменаДаннымиПриСтартеСистемы());
	Параметры.Вставить("ФормыОткрываемыеПриНачалеРаботыСистемы", 			ОткрытиеФормПриНачалеРаботыСистемы.ФормыОткрываемыеПриНачалеРаботыСистемы());
	Параметры.Вставить("ВозможенЗапускБазовойВерсии", 						ОбщегоНазначенияУТ.ВозможенЗапускБазовойВерсии());
	
	ОбщегоНазначенияУТВызовСервера.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	// Конец ИнтернетПоддержкаПользователей
	
	//-- НЕ ГИСМ
КонецПроцедуры

// Устарела. Следует использовать ПриДобавленииПараметровРаботыКлиента.
//
// Позволяет задать значения параметров, необходимых для работы клиентского кода
// конфигурации без дополнительных серверных вызовов.
// Для получения этих параметров из клиентского кода
// см. СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента.
//
// Параметры:
//   Параметры - Структура - имена и значения параметров работы клиента, которые необходимо задать.
//                           Для установки параметров работы клиента:
//                           Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	//++ НЕ ГИСМ
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПриДобавленииПараметровРаботыКлиента(Параметры);
	// Конец ИнтернетПоддержкаПользователей
	//-- НЕ ГИСМ
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
