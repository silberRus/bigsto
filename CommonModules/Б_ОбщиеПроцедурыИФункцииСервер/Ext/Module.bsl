
#Область ПроцедурыИФункцииПоРаботеСHTTP

// Функция - получает настройки прокси
//
// Параметры:
//  НастройкаПроксиСервера	 - 	 Настройки прокси сервера 
//  Протокол				 - 	 Протокол "https" или "http" 
// Возвращаемое значение:
//   Прокси. Если не удается, то Неопределено 
Функция ПолучитьПрокси(НастройкаПроксиСервера, Протокол) Экспорт
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер	
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

#КонецОбласти


#Область ПроверкаВерсий

Функция ПолучитьСлужебноеНазваниеКонфигурации() Экспорт
	
	Возврат "UT 11";
	
КонецФункции

Функция ПолучитьЛокализациюКонфигурации() Экспорт
	//UKR
	//BEL
	//KAZ
	Возврат "RUS";
	
КонецФункции

Функция РазобратьФайлСАктуальнымиВерсиямиМодулей(ИмяФайла) Экспорт
	
	ТзнВерсииМодулей = Новый ТаблицаЗначений;
	ТзнВерсииМодулей.Колонки.Добавить("НаименованиеКонфигурации");
	ТзнВерсииМодулей.Колонки.Добавить("РелизКонфигурации");
	ТзнВерсииМодулей.Колонки.Добавить("НаименованиеМодуля");
	ТзнВерсииМодулей.Колонки.Добавить("ВерсияМодуля");
	ТзнВерсииМодулей.Колонки.Добавить("Локализация");
	ТзнВерсииМодулей.Колонки.Добавить("Ссылка");
	ТзнВерсииМодулей.Колонки.Добавить("История");
		
	Чтение = новый ЧтениеXML;
	Чтение.ОткрытьФайл(сокрЛП(ИмяФайла));
	Modules 		= Ложь;
	Location        = Ложь;
	Link       		= Ложь;
	Module 	 		= Ложь;
	Name1C 			= Ложь;
	Version1C 		= Ложь;
	NameModule 		= Ложь;
	VersionModule 	= Ложь;
	
	History 		= Ложь;
	HModule 		= Ложь;
	HVersionModule 	= Ложь;
	HDescriptions 	= Ложь;

	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И НЕ History И Чтение.Имя = "Modules" Тогда
			Modules = Истина;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И НЕ History И Чтение.Имя = "Modules" тогда
			Modules = Ложь;
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И НЕ History И Чтение.Имя = "Module" И Modules Тогда
			Module = Истина;
			НовСтрока = ТзнВерсииМодулей.Добавить();
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И НЕ History И Чтение.Имя = "Module" И Modules Тогда 	
			Module = Ложь;
		КонецЕсли;
		
		Если Modules И Module И НЕ History тогда
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Name1C" Тогда
				Name1C = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Name1C" тогда
				Name1C = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Version1C" Тогда
				Version1C = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Version1C" тогда
				Version1C = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "NameModule" Тогда
				NameModule = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "NameModule" тогда
				NameModule = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "VersionModule" Тогда
				VersionModule = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "VersionModule" тогда
				VersionModule = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Location" Тогда
				Location = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Location" тогда
				Location = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Link" Тогда
				Link = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Link" тогда
				Link = Ложь;
			КонецЕсли;
			
			Если Name1C И Чтение.Имя = "#text" тогда
				НовСтрока.НаименованиеКонфигурации = Чтение.Значение;
			КонецЕсли;
			
			Если Version1C И Чтение.Имя = "#text" тогда
				НовСтрока.РелизКонфигурации = Чтение.Значение;
			КонецЕсли;
			
			Если NameModule И Чтение.Имя = "#text" тогда
				НовСтрока.НаименованиеМодуля = Чтение.Значение;
			КонецЕсли;
			
			Если VersionModule И Чтение.Имя = "#text" тогда
				НовСтрока.ВерсияМодуля = Чтение.Значение;
			КонецЕсли;
			
			Если Location И Чтение.Имя = "#text" тогда
				НовСтрока.Локализация = Чтение.Значение;
			КонецЕсли;
			
			Если Link И Чтение.Имя = "#text" тогда
				НовСтрока.Ссылка = Чтение.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "History" Тогда
			
			History = Истина;
			
			тзнИстории = Новый ТаблицаЗначений;
			тзнИстории.Колонки.Добавить("ВерсияМодуля"); 
			тзнИстории.Колонки.Добавить("Описание"); 
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "History" тогда
			
			History = Ложь;
			
			НовСтрока.История = тзнИстории;
			
		КонецЕсли;
			
		Если  Modules И Module И History тогда
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Module" Тогда
				
				HModule = Истина;
				
				НовИстрия = тзнИстории.Добавить();	

			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Module" тогда
				HModule = Ложь;
			КонецЕсли;
			
			Если  Modules И Module И History И HModule тогда
				
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "VersionModule" Тогда
					HVersionModule = Истина;
				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "VersionModule" тогда
					HVersionModule = Ложь;
				КонецЕсли;
				
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Descriptions" Тогда
					HDescriptions = Истина;
				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Descriptions" тогда
					HDescriptions = Ложь;
				КонецЕсли;
				
				Если HVersionModule И Чтение.Имя = "#text" тогда
					НовИстрия.ВерсияМодуля = Чтение.Значение;
				КонецЕсли;
				
				Если HDescriptions И Чтение.Имя = "#text" тогда
					НовИстрия.Описание = Чтение.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТзнВерсииМодулей;
	
КонецФункции

Функция РазобратьВерсиюМодуля4(ВерсияМодуля)
		
	СтруктураРазбора = Новый Структура;
	СтруктураРазбора.Вставить("МажорнаяВерсия"	, 0);
	СтруктураРазбора.Вставить("МинорнаяВерсия"	, 0);
	СтруктураРазбора.Вставить("Релиз"			, 0);
	СтруктураРазбора.Вставить("Сборка"			, 0);

	ДлинаВерсии = СтрДлина(ВерсияМодуля);	
	
	Ряд = 1;
	Версия = "";
	Для Пер = 1 по ДлинаВерсии Цикл
		
		Сим = Сред(ВерсияМодуля, Пер,1);
		
		Если Сим = "." тогда
			
			Если Ряд = 1 тогда
				СтруктураРазбора.МажорнаяВерсия = Число(Версия); 	
			ИначеЕсли Ряд = 2 тогда
				СтруктураРазбора.МинорнаяВерсия = Число(Версия); 	
			ИначеЕсли Ряд = 3 тогда
				СтруктураРазбора.Релиз 			= Число(Версия); 	
			КонецЕсли;
			
			Ряд 	= Ряд + 1;
			Версия 	= "";
			
		Иначе
			Версия 	= Версия + Сим;	
			
			Если Пер = ДлинаВерсии тогда
				СтруктураРазбора.Сборка 		= Число(Версия); 	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРазбора;
	
КонецФункции

Функция ПроверитьАктуальностьТекущегоМодуля4(ВерсияТекущегоМодуля, ВерсияАктуальногоМодуля) Экспорт
	
	Результат = Истина;
	
	РазобранаяВерсияТекущегоМодуля 		= РазобратьВерсиюМодуля4(ВерсияТекущегоМодуля);
	РазобранаяВерсияАктуальногоМодуля 	= РазобратьВерсиюМодуля4(ВерсияАктуальногоМодуля);
	
	Если  РазобранаяВерсияТекущегоМодуля.МажорнаяВерсия < РазобранаяВерсияАктуальногоМодуля.МажорнаяВерсия тогда
		Результат = Ложь;
	ИначеЕсли РазобранаяВерсияТекущегоМодуля.МажорнаяВерсия = РазобранаяВерсияАктуальногоМодуля.МажорнаяВерсия тогда
		
		Если  РазобранаяВерсияТекущегоМодуля.МинорнаяВерсия < РазобранаяВерсияАктуальногоМодуля.МинорнаяВерсия тогда
			Результат = Ложь;	
		ИначеЕсли  РазобранаяВерсияТекущегоМодуля.МинорнаяВерсия = РазобранаяВерсияАктуальногоМодуля.МинорнаяВерсия тогда

			Если  РазобранаяВерсияТекущегоМодуля.Релиз < РазобранаяВерсияАктуальногоМодуля.Релиз тогда
				Результат = Ложь;	
			ИначеЕсли  РазобранаяВерсияТекущегоМодуля.Релиз = РазобранаяВерсияАктуальногоМодуля.Релиз тогда
				Если  РазобранаяВерсияТекущегоМодуля.Сборка < РазобранаяВерсияАктуальногоМодуля.Сборка тогда
					Результат = Ложь;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Процедура - отображает состояние
//
// Параметры:
//  ТекстСостояния	-  Строка, предназначенная для вывода в панель состояния. Если параметр не указан, возобновляется вывод системного текста в панель состояния. 
Процедура ОтображениеСостояния(ТекстСостояния) Экспорт
	
	#Если Клиент Тогда
		Состояние(ТекстСостояния);
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьРеквизитОбъекта(Объект, НазваниеРеквизита) Экспорт
	
	Возврат Объект[НазваниеРеквизита]; 
	
КонецФункции

Функция ПолучитьПредопределенныйИдОбъекта(ИдОбъекта) Экспорт  //язык проверяем отдельно, т.к. есть ситуции, когда локализация не поможет
	
	Локализация = ПолучитьЛокализациюКонфигурации();
	
	Если ИдОбъекта = "ИдСвойстваФискальныйПризнак" и Локализация = "RUS" тогда
		Результат = "FISCAL_SIGN";	
	ИначеЕсли ИдОбъекта = "ИдСвойствАдресСайта" и Локализация = "RUS" тогда
		Результат = "URL";	
	ИначеЕсли ИдОбъекта = "ИдСвойствРегНомерККТ" и Локализация = "RUS" тогда
		Результат = "REG_NUMBER_KKT";	
	ИначеЕсли ИдОбъекта = "ИдСвойствПечатьЧека" и Локализация = "RUS" тогда
		Результат = "PRINT_CHECK";	
	Иначе
		Результат = "";	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСФС

// Функция - возвращает путь к файлам/папкам, в звависимости от ОС
//
// Параметры:
//  ПлатформаWindows - 	 Признак того, что эта ОС - Windows 
//  Путь			 - 	 Адрес к файлу/папке 
// Возвращаемое значение:
//   Адрес к файлу/папке 
Функция ПолучитьПутьДляПлатформы(ПлатформаWindows, Путь) Экспорт
	
	Если ПлатформаWindows Тогда
		ЧтоМенять = "/";
		НаЧтоМенять = "\";
	Иначе
		ЧтоМенять = "\";
		НаЧтоМенять = "/";
	КонецЕсли;
	
	Путь = СтрЗаменить(Путь, ЧтоМенять, НаЧтоМенять);
	
	Возврат Путь;
	
КонецФункции

// Функция - проверяет, существует ли указанный файл
//
// Параметры:
//  ИмяФайла - 	 Имя проверяемого файла 
// Возвращаемое значение:
//   Истина, если файл существует 
Функция СуществуетФайл(ИмяФайла) Экспорт
	ВыбФайл = Новый Файл(ИмяФайла);
	Если ВыбФайл.Существует()  Тогда  
		Возврат Истина;
	КонецЕсли;  
	Возврат Ложь;
КонецФункции

// Функция - очищает содержимое каталога 
//
// Параметры:
//  Каталог			 - 	 Каталог, в котором очищаются файлы 
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Истина, если каталог очищен 
Функция КаталогОчищен(Каталог, ПараметрыОбмена = Неопределено) Экспорт
	
	Попытка
		
		УдалитьФайлы(Каталог, "*.*");
		
	Исключение
		
		Сообщить("Не удалось очистить каталог обмена: (" + Каталог + ")");	
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти



#Область ПроцедурыИФункцииПоРаботеJSON

Функция РазобратьОтветСервера(Знач ТекстJSON) Экспорт
	
	ТекстJSON = стрЗаменить(ТекстJSON, "\/", "/");
	
	Результат = Новый Структура;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "[" Тогда
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		Иначе
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
				Иначе
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					КонецЕсли;
					
					Значение = ДекодироватьJSON(СокрЛП(Значение));
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
			ИначеЕсли ТипДанных = "Массив" Тогда
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДекодироватьJSON(URL)

	СписокСимволов = Новый СписокЗначений;
	СписокСимволов.Добавить("\u0430", "а");
	СписокСимволов.Добавить("\u0431", "б");
	СписокСимволов.Добавить("\u0432", "в");
	СписокСимволов.Добавить("\u0433", "г");
	СписокСимволов.Добавить("\u0434", "д");
	СписокСимволов.Добавить("\u0435", "е");
	СписокСимволов.Добавить("\u0451", "ё");
	СписокСимволов.Добавить("\u0436", "ж");
	СписокСимволов.Добавить("\u0437", "з");
	СписокСимволов.Добавить("\u0438", "и");
	СписокСимволов.Добавить("\u0439", "й");
	СписокСимволов.Добавить("\u043a", "к");
	СписокСимволов.Добавить("\u043b", "л");
	СписокСимволов.Добавить("\u043c", "м");
	СписокСимволов.Добавить("\u043d", "н");
	СписокСимволов.Добавить("\u043e", "о");
	СписокСимволов.Добавить("\u043f", "п");
	СписокСимволов.Добавить("\u0440", "р");
	СписокСимволов.Добавить("\u0441", "с");
	СписокСимволов.Добавить("\u0442", "т");
	СписокСимволов.Добавить("\u0443", "у");
	СписокСимволов.Добавить("\u0444", "ф");
	СписокСимволов.Добавить("\u0445", "х");
	СписокСимволов.Добавить("\u0446", "ц");
	СписокСимволов.Добавить("\u0447", "ч");
	СписокСимволов.Добавить("\u0448", "ш");
	СписокСимволов.Добавить("\u0448", "щ");
	СписокСимволов.Добавить("\u044a", "ъ");
	СписокСимволов.Добавить("\u044b", "ы");
	СписокСимволов.Добавить("\u044c", "ь");
	СписокСимволов.Добавить("\u044d", "э");
	СписокСимволов.Добавить("\u044e", "ю");
	СписокСимволов.Добавить("\u044f", "я");
	
	СписокСимволов.Добавить("\u0410", "А");
	СписокСимволов.Добавить("\u0411", "Б");
	СписокСимволов.Добавить("\u0412", "В");
	СписокСимволов.Добавить("\u0413", "Г");
	СписокСимволов.Добавить("\u0414", "Д");
	СписокСимволов.Добавить("\u0415", "Е");
	СписокСимволов.Добавить("\u0401", "Ё");
	СписокСимволов.Добавить("\u0416", "Ж");
	СписокСимволов.Добавить("\u0417", "З");
	СписокСимволов.Добавить("\u0418", "И");
	СписокСимволов.Добавить("\u0419", "Й");
	СписокСимволов.Добавить("\u041a", "К");
	СписокСимволов.Добавить("\u041b", "Л");
	СписокСимволов.Добавить("\u041c", "М");
	СписокСимволов.Добавить("\u041d", "Н");
	СписокСимволов.Добавить("\u041e", "О");
	СписокСимволов.Добавить("\u041f", "П");
	СписокСимволов.Добавить("\u0420", "Р");
	СписокСимволов.Добавить("\u0421", "С");
	СписокСимволов.Добавить("\u0422", "Т");
	СписокСимволов.Добавить("\u0423", "У");
	СписокСимволов.Добавить("\u0424", "Ф");
	СписокСимволов.Добавить("\u0425", "Х");
	СписокСимволов.Добавить("\u0426", "Ц");
	СписокСимволов.Добавить("\u0427", "Ч");
	СписокСимволов.Добавить("\u0428", "Ш");
	СписокСимволов.Добавить("\u0428", "Щ");
	СписокСимволов.Добавить("\u042a", "Ъ");
	СписокСимволов.Добавить("\u042b", "Ы");
	СписокСимволов.Добавить("\u042c", "Ь");
	СписокСимволов.Добавить("\u042d", "Э");
	СписокСимволов.Добавить("\u042e", "Ю");
	СписокСимволов.Добавить("\u042f", "Я");
	
	
	СписокСимволов.Добавить("\u0022", "'");
	
	СписокСимволов.Добавить("\u003E", ">");
	СписокСимволов.Добавить("\u003е", ">");
	
	СписокСимволов.Добавить("\u003C", "<");
	СписокСимволов.Добавить("\u003c", "<");
	
	Для Каждого текЭлемент из СписокСимволов Цикл
		
		URL = СтрЗаменить(URL,текЭлемент.Значение, текЭлемент.Представление);	
		
	КонецЦикла;

    Возврат URL;
	
КонецФункции

#КонецОбласти


