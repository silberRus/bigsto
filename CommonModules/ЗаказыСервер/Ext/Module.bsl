
#Область ПрограммныйИнтерфейс

// Процедура формирования движений по регистру "Услуги переработчиков к оформлению.
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьУслугиПереработчиковКОформлению(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаУслугиПереработчиковКОформлению = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУслугиПереработчиковКОформлению;
	
	Если Отказ ИЛИ ТаблицаУслугиПереработчиковКОформлению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияУслугиПереработчиковКОформлению = Движения.УслугиПереработчиковКОформлению;
	ДвиженияУслугиПереработчиковКОформлению.Записывать = Истина;
	ДвиженияУслугиПереработчиковКОформлению.Загрузить(ТаблицаУслугиПереработчиковКОформлению);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Товары к отгрузке".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОтгрузке;

	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = Движения.ТоварыКОтгрузке;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);

КонецПроцедуры

// Процедура формирования движений по регистру "Движение товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижениеТоваров = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвижениеТоваров;
	
	Если Отказ ИЛИ ТаблицаДвижениеТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТоваров = Движения.ДвижениеТоваров;
	ДвиженияТоваров.Записывать = Истина;
	ДвиженияТоваров.Загрузить(ТаблицаДвижениеТоваров);

КонецПроцедуры

// Процедура формирования движений по регистру "График отгрузки товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаГрафикОтгрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГрафикОтгрузкиТоваров;
	
	Если Отказ Или ТаблицаГрафикОтгрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.ГрафикОтгрузкиТоваров;
	Набор.Записывать = Истина;
	Набор.Загрузить(ТаблицаГрафикОтгрузки);

КонецПроцедуры

// Процедура формирования движений по регистру "Заказы клиентов".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗаказыКлиентов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыКлиентов;
	
	Если Отказ ИЛИ ТаблицаЗаказыКлиентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыКлиентов = Движения.ЗаказыКлиентов;
	ДвиженияЗаказыКлиентов.Записывать = Истина;
	ДвиженияЗаказыКлиентов.Загрузить(ТаблицаЗаказыКлиентов);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Заказы на сборку".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьЗаказыНаСборку(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаСборку;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Движения.ЗаказыНаСборку;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Заказы на перемещение".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьЗаказыНаПеремещение(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаПеремещение;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Движения.ЗаказыНаПеремещение;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Заказы на внутреннее потребление".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьЗаказыНаВнутреннееПотребление(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаВнутреннееПотребление;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = Движения.ЗаказыНаВнутреннееПотребление;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Товары к поступлению".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаТоварыКПоступлению = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКПоступлению;
	
	Если Отказ ИЛИ ТаблицаТоварыКПоступлению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТоварыКПоступлению = Движения.ТоварыКПоступлению;
	ДвиженияТоварыКПоступлению.Записывать = Истина;
	ДвиженияТоварыКПоступлению.Загрузить(ТаблицаТоварыКПоступлению);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Заказы поставщикам".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗаказыПоставщикам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыПоставщикам;
	
	Если Отказ ИЛИ ТаблицаЗаказыПоставщикам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыПоставщикам = Движения.ЗаказыПоставщикам;
	ДвиженияЗаказыПоставщикам.Записывать = Истина;
	ДвиженияЗаказыПоставщикам.Загрузить(ТаблицаЗаказыПоставщикам);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Заявки на возврат товаров от клиентов".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьЗаявкиНаВозвратТоваровОтКлиентов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗаявкиНаВозвратТоваровОтКлиентов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаявкиНаВозвратТоваровОтКлиентов;
	
	Если Отказ ИЛИ ТаблицаЗаявкиНаВозвратТоваровОтКлиентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаявкиНаВозвратТоваровОтКлиентов = Движения.ЗаявкиНаВозвратТоваровОтКлиентов;
	ДвиженияЗаявкиНаВозвратТоваровОтКлиентов.Записывать = Истина;
	ДвиженияЗаявкиНаВозвратТоваровОтКлиентов.Загрузить(ТаблицаЗаявкиНаВозвратТоваровОтКлиентов);
	
КонецПроцедуры



// Устанавливает ключ в строках табличной части
//
// Параметры:
//  Объект							 - ДокументОбъект.* - Изменяемый документ
//  ИмяТабличнойЧасти				 - Строка - Название табличной части
//  РеквизитМаксимальныйКодСтроки	 - Строка - 
//
Процедура УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТабличнойЧасти, РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецПроцедуры

// Получает минимальную дату отгрузки по неоформленным строкам заказа. Используется в событии обработка заполнения,
// для заполнения даты документа.
//
// Параметры:
//  ЗаказИлиМассивЗаказов - ДокументСсылка - заказ, дату отгрузки кторого необходимо получить.
//  ИмяРегистра - Строка - Имя регистра накопления, содержащего сведения о неоформленных строках заказа.
//  ИмяРаспоряжения - Строка - Имя измерения регистра накопления, содержащего распоряжение (заказ).
//
// Возвращаемое значение:
// Дата - Минимальная дата отгрузки по неоформленным строкам заказа.
//
Функция ПолучитьМинимальнуюДатуОтгрузкиЗаказа(ЗаказИлиМассивЗаказов, ИмяРегистра = "ЗаказыКлиентов", ИмяРаспоряжения = "ЗаказКлиента") Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос();
	Если ИмяРегистра = "ЗаказыНаСборку" Тогда

		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В(&МассивЗаказов)) КАК Отбор
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаСборку КАК ТаблицаКОформлению
			|		ПО Отбор.ЗаказНаСборку = ТаблицаКОформлению.ЗаказНаСборку
			|		 И Отбор.КодСтроки     = ТаблицаКОформлению.КодСтроки
			|		 И Отбор.КОформлениюОстаток > 0
			|		 И ТаблицаКОформлению.КОформлению > 0
			|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		 И ТаблицаКОформлению.Активность
			|		 И Отбор.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|		 И ТаблицаКОформлению.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";

	Иначе

		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента В(&МассивЗаказов)) КАК Отбор
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов КАК ТаблицаКОформлению
			|		ПО Отбор.ЗаказКлиента = ТаблицаКОформлению.ЗаказКлиента
			|		 И Отбор.КодСтроки    = ТаблицаКОформлению.КодСтроки
			|		 И Отбор.КОформлениюОстаток > 0
			|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		 И ТаблицаКОформлению.КОформлению > 0
			|		 И ТаблицаКОформлению.Активность
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказыКлиентов", ИмяРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента", ИмяРаспоряжения);

	КонецЕсли;

	Запрос.УстановитьПараметр("МассивЗаказов", ЗаказИлиМассивЗаказов);

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Макс(ТекущаяДатаСеанса(), Выборка.Период);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получает максимальную дату отгрузки по неоформленным строкам заказа. Используется в событии обработка заполнения,
// для заполнения даты документа.
//
// Параметры:
//  ЗаказИлиМассивЗаказов - ДокументСсылка - заказ, дату отгрузки кторого необходимо получить.
//  ИмяРегистра - Строка - Имя регистра накопления, содержащего сведения о неоформленных строках заказа.
//  ИмяРаспоряжения - Строка - Имя измерения регистра накопления, содержащего распоряжение (заказ).
//
// Возвращаемое значение:
// Дата - Максимальная дата отгрузки по неоформленным строкам заказа.
//
Функция ПолучитьМаксимальнуюДатуОтгрузкиЗаказа(ЗаказИлиМассивЗаказов, ИмяРегистра = "ЗаказыКлиентов", ИмяРаспоряжения = "ЗаказКлиента") Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос();
	Если ИмяРегистра = "ЗаказыНаСборку" Тогда

		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В(&МассивЗаказов)) КАК Отбор
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаСборку КАК ТаблицаКОформлению
			|		ПО Отбор.ЗаказНаСборку = ТаблицаКОформлению.ЗаказНаСборку
			|		 И Отбор.КодСтроки     = ТаблицаКОформлению.КодСтроки
			|		 И Отбор.КОформлениюОстаток > 0
			|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		 И ТаблицаКОформлению.КОформлению > 0
			|		 И ТаблицаКОформлению.Активность
			|		 И Отбор.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|		 И ТаблицаКОформлению.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";

	Иначе

		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента В(&МассивЗаказов)) КАК Отбор
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов КАК ТаблицаКОформлению
			|		ПО Отбор.ЗаказКлиента = ТаблицаКОформлению.ЗаказКлиента
			|		 И Отбор.КодСтроки    = ТаблицаКОформлению.КодСтроки
			|		 И Отбор.КОформлениюОстаток > 0
			|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		 И ТаблицаКОформлению.КОформлению > 0
			|		 И ТаблицаКОформлению.Активность
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказыКлиентов", ИмяРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента", ИмяРаспоряжения);

	КонецЕсли;

	Запрос.УстановитьПараметр("МассивЗаказов", ЗаказИлиМассивЗаказов);

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() И Выборка.Период >= НачалоДня(ТекущаяДатаСеанса()) Тогда
		Результат = Выборка.Период;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Изменяет в документе дату распоряжения концом текущего дня, если она больше конца текущего дня
//
// Параметры:
//  Объект - ДокументОбъект - документ, в котором необходимо заполнить дату.
//
Процедура ПроверитьДатуРаспоряжения(Объект) Экспорт

	ТекДатаРаспоряжения = КонецДня(Объект.Дата);

	// Дата распоряжения не должна быть больше текущей.
	Если ТекДатаРаспоряжения > КонецДня(ТекущаяДатаСеанса()) Тогда

		ТекДатаРаспоряжения = КонецДня(ТекущаяДатаСеанса());

	КонецЕсли;

	Если Объект.ДатаРаспоряжения <> ТекДатаРаспоряжения Тогда

		Объект.ДатаРаспоряжения = ТекДатаРаспоряжения;

	КонецЕсли;

КонецПроцедуры

// Функция-конструктор параметров обновления информации по заказам в форме
//
// Возвращаемое значение:
// СтруктураПараметров - Структура - Структура параметров для определения счета.
//      * ИмяРеквизитаСписокЗаказов         - Строка - Имя реквизита формы содержащего список заказов, например, "СписокЗаказов".
//      * ПутьЗаказаВШапке                  - Строка - Путь к заказу шапки, например, для вызова из формы документа "Объект.ЗаказКлиента",
//                                                     или "ЗаказКлиента" для вызова из формы подбора.
//      * ИмяНадписиЗаголовка               - Строка - Имя реквизита формы для вывода надписи "Всего заказов" или "Заказ ...".
//      * ИмяГруппыКолонокВТабличнойЧасти   - ГруппаФормы - Имя группы колонок заказа клиента и кода строки в ТЧ документа для установки группировки.
//      * ИмяЗаказаВТабличнойЧасти          - Строка - Имя колонки ТЧ с заказами (например "ЗаказКлиента").
//      * ИспользоватьЗаказыВТабличнойЧасти - Булево - Значение функциональной опции использовать несколько заказов.
//      * НадписьВсегоЗаказов               - Строка - Необязательный, префикс надписи заказа.
//
Функция ПараметрыОбновленияИнформацииПоЗаказамВФорме() Экспорт
	
	ПараметрыОбновления = Новый Структура();
	ПараметрыОбновления.Вставить("ИмяРеквизитаСписокЗаказов");
	ПараметрыОбновления.Вставить("ПутьЗаказаВШапке");
	ПараметрыОбновления.Вставить("ИмяНадписиЗаголовка");
	ПараметрыОбновления.Вставить("ИмяГруппыКолонокВТабличнойЧасти");
	ПараметрыОбновления.Вставить("ИмяЗаказаВТабличнойЧасти");
	ПараметрыОбновления.Вставить("ИспользоватьЗаказыВТабличнойЧасти");
	ПараметрыОбновления.Вставить("НадписьВсегоЗаказов", Неопределено);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

//Обновляет информацию по заказам в форме
//
// Параметры:
// 	 Форма - УправляемаяФорма - форма, для которой обновляется информация по заказам
// 	 ТабличнаяЧасть - ТаблицаЗначений, Табличная часть, используемая для заполнения списка заказов.
// 	 ПараметрыОбновления - Структура - Структура параметров для определения счета. Конструктор: ЗаказыСервер.ПараметрыОбновленияИнформацииПоЗаказамВФорме
//
Процедура ОбновитьИнформациюПоЗаказамВФорме(Форма, ТабличнаяЧасть, ПараметрыОбновления) Экспорт
	
	ЭлементыФормы                     = Форма.Элементы;
	СписокЗаказов                     = Форма[ПараметрыОбновления.ИмяРеквизитаСписокЗаказов];
	
	ЗаказВШапке                       = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПараметрыОбновления.ПутьЗаказаВШапке);
	ГруппаКолонокВТабличнойЧасти      = ?(ПараметрыОбновления.ИмяГруппыКолонокВТабличнойЧасти = Неопределено, Неопределено, Форма.Элементы[ПараметрыОбновления.ИмяГруппыКолонокВТабличнойЧасти]);
	
	ИмяЗаказаВТабличнойЧасти          = ПараметрыОбновления.ИмяЗаказаВТабличнойЧасти;
	ИспользоватьЗаказыВТабличнойЧасти = ПараметрыОбновления.ИспользоватьЗаказыВТабличнойЧасти;
	НадписьВсегоЗаказов               = ПараметрыОбновления.НадписьВсегоЗаказов;
	
	Если Не ИспользоватьЗаказыВТабличнойЧасти Тогда
		Возврат;
	КонецЕсли;
		
	СписокЗаказов.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяЗаказаВТабличнойЧасти]) И СписокЗаказов.НайтиПоЗначению(ТекСтрока[ИмяЗаказаВТабличнойЧасти]) = Неопределено Тогда
			СписокЗаказов.Добавить(ТекСтрока[ИмяЗаказаВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьЗаказыВТабличнойЧасти Тогда
		Если СписокЗаказов.Количество() = 1 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма,ПараметрыОбновления.ПутьЗаказаВШапке,СписокЗаказов[0].Значение);
		ИначеЕсли СписокЗаказов.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма,ПараметрыОбновления.ПутьЗаказаВШапке,Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если СписокЗаказов.Количество() > 1 Тогда
		Если НадписьВсегоЗаказов = Неопределено Тогда
			НадписьВсегоЗаказов = НСтр("ru = 'Всего заказов'");
		КонецЕсли;
		Форма[ПараметрыОбновления.ИмяНадписиЗаголовка] = НадписьВсегоЗаказов + ": " + СписокЗаказов.Количество();
	КонецЕсли;
	
	Если СписокЗаказов.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыЗаказ.ТекущаяСтраница = ЭлементыФормы.СтраницаЗаказ;
	Иначе
		ЭлементыФормы.СтраницыЗаказ.ТекущаяСтраница = ЭлементыФормы.СтраницаЗаказы;
	КонецЕсли;
	
	Если ГруппаКолонокВТабличнойЧасти <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЗаказВШапке) Или Не ИспользоватьЗаказыВТабличнойЧасти Тогда
			ГруппаКолонокВТабличнойЧасти.Группировка = ГруппировкаКолонок.Вертикальная;
		Иначе
			ГруппаКолонокВТабличнойЧасти.Группировка = ГруппировкаКолонок.ВЯчейке;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет заказ в шапке накладной если в табличной части указан только один заказ
//
// Параметры:
//  ЗаказВШапке - ДокументСсылка - поле, которое необходимо заполнить.
//  ТабличнаяЧасть - ТабличнаяЧасть - табличная часть накладной, по которой необходимо заполнить заказ в шапке.
//  ИмяЗаказаВТабличнойЧасти - Строка - имя реквизита в табличной части, где хранится ссылка на заказ.
//
Процедура ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказВШапке, Знач ТабличнаяЧасть, Знач ИмяЗаказаВТабличнойЧасти) Экспорт
	
	// Заполним заказ в шапке, если в табличной части указан один заказ
	ЗаказыТабличнойЧасти = ТабличнаяЧасть.Выгрузить(,ИмяЗаказаВТабличнойЧасти);
	ЗаказыТабличнойЧасти.Свернуть(ИмяЗаказаВТабличнойЧасти);
	
	Если ЗаказыТабличнойЧасти.Количество() = 1 Тогда
		СтрокаТабличнойЧасти = ЗаказыТабличнойЧасти[0];
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяЗаказаВТабличнойЧасти]) Тогда
			ЗаказВШапке = СтрокаТабличнойЧасти[ИмяЗаказаВТабличнойЧасти];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты шапки по табличным частям
//
// Параметры:
//  СоответствиеРеквизитов	- Соответствие - Соотвествие реквизитов шапки и реквизитов табличных частей (ключ - реквизит шапки, значение - реквизит ТЧ)
//  ТабличныеЧасти			- Строка - Список табличных частей из которых нужно получить значения
//  Объект					- ДокументОбъект, ДанныеФормыСтруктура - Объект в котором нужно заполнить реквизиты
//
Процедура ЗаполнитьРеквизитыШапкиПоТабличнымЧастям(СоответствиеРеквизитов, ТабличныеЧасти, Объект) Экспорт

	СписокТЧ = СтрРазделить(ТабличныеЧасти, ",");
	
	Для каждого КлючИЗначение Из СоответствиеРеквизитов Цикл
		
		КоличествоЗначений = 0;
		ЗначениеРеквизита = Неопределено;
		
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			
			Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтроки[КлючИЗначение.Значение]) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДанныеСтроки[КлючИЗначение.Значение] <> ЗначениеРеквизита Тогда
					КоличествоЗначений = КоличествоЗначений + 1;
				КонецЕсли;
				ЗначениеРеквизита = ДанныеСтроки[КлючИЗначение.Значение];
				Если КоличествоЗначений > 1 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоЗначений > 1 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоЗначений <> 1 Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Объект[КлючИЗначение.Ключ]));
			ТипРеквизита = Новый ОписаниеТипов(МассивТипов);
			ЗначениеРеквизита = ТипРеквизита.ПривестиЗначение();
		КонецЕсли; 
		
		Объект[КлючИЗначение.Ключ] = ЗначениеРеквизита;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак присутствия строки в документе относительно распоряжения по кодам строк
//
// Параметры:
//  ТаблицаТовары            - ТаблицаЗначений - таблица, в которой необходимо установить признак.
//  ИмяЗаказаВТабличнойЧасти - Строка - имя реквизита Заказ в таблице для сопоставления.
//  МассивКодовСтрок         - Массив - коды строк заказов, с которыми осуществляется сопоставление.
//  ИмяРеквизитаКодСтроки    - Строка - имя реквизита КодСтроки заказа в таблице для сопоставления.
//
Процедура УстановитьПризнакиПрисутствияСтрокиВДокументе(ТаблицаТовары, ИмяЗаказаВТабличнойЧасти, МассивКодовСтрок, ИмяРеквизитаКодСтроки = "КодСтроки") Экспорт

	Для Каждого СтрокаТаб Из ТаблицаТовары Цикл
	
		СтрокаТаб.ПрисутствуетВДокументе = Ложь;
		
		Для Каждого ТекСтрока Из МассивКодовСтрок Цикл
			
			Если ТекСтрока[ИмяРеквизитаКодСтроки] = СтрокаТаб[ИмяРеквизитаКодСтроки] 
				И ТекСтрока[ИмяЗаказаВТабличнойЧасти] = СтрокаТаб[ИмяЗаказаВТабличнойЧасти] Тогда
				
				СтрокаТаб.ПрисутствуетВДокументе = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТаб.СтрокаВыбрана = Не СтрокаТаб.ПрисутствуетВДокументе;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление отмененной строки ТЧ в форме Заказа
// Параметры:
//	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление формы;
//	ТаблицаФормы - ТаблицаФормы - элемент формы, связанного с ТЧ, в которой отменяются строки;
//	ИмяЭлементаОтменено - Строка - наименование элемента формы, связанного с признаком отмены строки заказа;
//	ИмяЭлементаПричинаОтмены - Строка - наименование элемента формы, связанного с причиной отмены строки заказа.
//
Процедура УстановитьОформлениеОтмененнойСтроки(УсловноеОформление, ТаблицаФормы, ИмяЭлементаОтменено, ИмяЭлементаПричинаОтмены = "", ИмяПоляВводаЦены = "", ИмяПоляВводаСуммы = "") Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;
	ИсключаяПоля.Добавить(ИмяЭлементаОтменено);
	Если ЗначениеЗаполнено(ИмяЭлементаПричинаОтмены) Тогда
		ИсключаяПоля.Добавить(ИмяЭлементаПричинаОтмены);
	КонецЕсли;
	ОбщегоНазначенияУТ.ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, ТаблицаФормы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Если ЗначениеЗаполнено(ИмяЭлементаПричинаОтмены) Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаПричинаОтмены);
		
		ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".ПричинаОтмены");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаПричинаОтмены);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляВводаЦены) Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаЦены);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляВводаСуммы) Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаСуммы);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьДублиКодовСтрокВТаблице(ДокументОбъект, КодСтроки, НомерСтроки, СоответствиеКодовСтрок, Отказ, ИмяТЧ = Неопределено) Экспорт
	Если ИмяТЧ = Неопределено Тогда
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодСтроки) Тогда
		Если СоответствиеКодовСтрок[КодСтроки] = Неопределено Тогда
			СоответствиеКодовСтрок.Вставить(КодСтроки, НомерСтроки);
		Иначе
			НомерСтрокиДубля = СоответствиеКодовСтрок[КодСтроки];
			ТекстОшибки = НСтр("ru='Дублируется значение реквизита ""КодСтроки"" строки %1 и строки %2 заказа.
				|Документ создан некорректно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерСтрокиДубля, НомерСтроки); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, НомерСтроки, "КодСтроки"),
				,
				Отказ);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОтменаНеотработанныхСтроки

// Оставляет в таблице только те строки, у которых вариант обеспечения - Не требуется
//
// Параметры:
//  Таблица	 - ТаблицаЗначений - 
//
Процедура СократитьТаблицуДоНеОбеспеченныхСтрок(Таблица) Экспорт
	
	// Когда есть контроль по обособленному обеспечению, нельзя отменять строки с вариантом обеспечения "Обеспечивать обособленно",
	// в случае если они обеспечены.
	// В случае когда допустимо обеспечение сверх потребности, строки с вариантом обеспечения "Обеспечивать обособленно" необходимо
	// отменить - все обеспечение по ней станет обеспечением сверх потребности.
	
	ОтменятьОбеспеченныеОбособленно = ПолучитьФункциональнуюОпцию("РазрешитьОбособлениеТоваровСверхПотребности");
	
	КоличествоИндексов = Таблица.Количество() - 1;
	Для Н = 0 По КоличествоИндексов Цикл
		
		Строка = Таблица[КоличествоИндексов - Н];
		
		СтрокаКОтмене = Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
			Или (ОтменятьОбеспеченныеОбособленно И Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно);
		
		Если Не СтрокаКОтмене Тогда
			Таблица.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит в таблицу документа информацию об отмене неотработанных строк
// Строки отменяются целиком, либо дробятся на две - отмененную и не отмененную.
//
// Параметры:
//  ТаблицаДокумента		 - ДанныеФормыКоллекция, ТабличнаяЧасть - 
//  ТаблицаОтмененныхСтрок	 - ТаблицаЗначений - 
//  ДопустимыеОтклонения	 - ТаблицаЗначений - Допустимые отклонения мерных товаров по текущему документу, если значение не заполнено
//                                               считаем, что отменяем всё, независимо от допустимых отклонений.
//
Процедура ПеренестиВТаблицуДокументаОтмененныеСтроки(ТаблицаДокумента, ТаблицаОтмененныхСтрок, ДопустимыеОтклонения = Неопределено) Экспорт
	
	СтрокиКОбработке = Новый Соответствие();
	Для Каждого Строка Из ТаблицаОтмененныхСтрок Цикл
		СтрокаТовары = ТаблицаДокумента[Строка.Идентификатор];
		СтрокиКОбработке.Вставить(Строка, СтрокаТовары);
	КонецЦикла;
	
	Если ДопустимыеОтклонения <> Неопределено Тогда
		
		//Для каждого типа заказа свои поля
		Ключ = "";
		Для Каждого Колонка Из ДопустимыеОтклонения.Колонки Цикл
			Если Колонка.Имя <> "ДопустимоеОтклонение" 
				И Колонка.Имя <> "Заказ" 
				И Колонка.Имя <> "ТипСборки" Тогда
				Ключ = Ключ + ?(Ключ="","",",")+Колонка.Имя;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура(Ключ);
		
		ТаблицаТоваровКОтмене = ДопустимыеОтклонения.Скопировать();
		ТаблицаТоваровКОтмене.Очистить();
		ТаблицаТоваровКОтмене.Колонки.Добавить("Количество",ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		
		//Сворачиваем стрки, которые собираемся отменять
		Для Каждого КлючЗначение Из СтрокиКОбработке Цикл
			Строка = КлючЗначение.Ключ;
			СтрокаТовары = КлючЗначение.Значение;
			
			СтрокаКОтмене = ТаблицаТоваровКОтмене.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКОтмене, СтрокаТовары);
			СтрокаКОтмене.Количество = Строка.Количество;
		КонецЦикла;
		
		ТаблицаТоваровКОтмене.Свернуть(Ключ,"Количество");
		ТаблицаТоваровКОтмене.Колонки.Добавить("ИсключитьИзОтмены",Новый ОписаниеТипов("Булево"));
		ТаблицаТоваровКОтмене.Индексы.Добавить(Ключ);
		
		//Недопустимые отклонения исключаем из отмены
		Для Каждого СтрокаОтмены из ТаблицаТоваровКОтмене Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаОтмены);
			СтрокиДопустимыхОтклонений = ДопустимыеОтклонения.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДопустимыхОтклонений.Количество() = 0 
				ИЛИ СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение < СтрокаОтмены.Количество Тогда
				СтрокаОтмены.ИсключитьИзОтмены = Истина;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СтрокиКОбработке Цикл
		Строка = КлючЗначение.Ключ;
		СтрокаТовары = КлючЗначение.Значение;
		
		Если Строка.Количество < СтрокаТовары.Количество Тогда
			
			Если НЕ ДопустимыеОтклонения = Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаТовары);
				СтрокаТаблицыКОтмене = ТаблицаТоваровКОтмене.НайтиСтроки(СтруктураПоиска)[0];
				Если СтрокаТаблицыКОтмене.ИсключитьИзОтмены Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТовары.Количество = СтрокаТовары.Количество - Строка.Количество;
			
			НоваяСтрока = ТаблицаДокумента.Вставить(ТаблицаДокумента.Индекс(СтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Отменено = Истина;
			НоваяСтрока.КодСтроки = 0;
			
		Иначе
			СтрокаТовары.Отменено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТаблицаДокумента, СтруктураДействий, Неопределено);
	
КонецПроцедуры

// Возвращает текст оповещения об операции отмены строк
//
// Параметры:
//  ОтмененоСтрок      - Число - Количество отмененных строк.
//  Модифицированность - Булево - Одноименный параметр формы, для изменения в процедуре.
// 
// Возвращаемое значение:
//  Структура - текст оповещения об операции отмены строк и количество отмененных строк
//
Функция РезультатОтменыНеотработанныхСтрок(ОтмененоСтрок, Модифицированность = Ложь) Экспорт
	
	Если ОтмененоСтрок = 0 Тогда
		ТекстОбработаноСтрок = НСтр("ru = 'Строки не отменены, поскольку полностью отработаны'");
	Иначе
		ТекстОбработаноСтрок = НСтр("ru = 'Отменено неотработанных строк: %1'");
	КонецЕсли;
	ТекстОбработаноСтрок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОбработаноСтрок, ОтмененоСтрок);
	
	Если ОтмененоСтрок > 0 Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	РезультатОтмены = Новый Структура();
	РезультатОтмены.Вставить("Оповещение", ТекстОбработаноСтрок);
	РезультатОтмены.Вставить("КоличествоСтрок", ОтмененоСтрок);
	
	Возврат РезультатОтмены;

КонецФункции

//Функция-конструктор структуры корректировки строк заказа
//
// Возвращаемое значение:
//  Структура - Структура параметров для корректировки строк заказа.
//      * ДокументОбъект - ДокументОбъект - Заказ, в котором требуется скорректировать строки.
//      * ИмяДокумента                    - Строка - Имя заказа (объекта метаданных).
//      * ИмяТабличнойЧасти               - Строка - Имя табличной части заказа.
//      * ПричинаОтмены                   - СправочникСсылка.ПричиныОтменыЗаказовКлиентов, СправочникСсылка.ПричиныОтменыЗаказовПоставщикам - Причина отмены строк заказа.
//      * ПроверятьОстатки                - Булево - Требуется ли проверять остатки при корректировке строк.
//      * ОтменитьНеотработанныеСтроки    - Булево - Строки заказа, по которым не оформлена накладная и не осуществлялась приемка/отгрузка будут отменены.
//      * СкорректироватьМерныеТовары     - Булево - Строки заказа, по которым в пределах допустимого отклонения не оформлена накладная и не осуществлялась приемка/отгрузка, будут отменены.
//                                                   Строки заказа, по которым было принято/отгружено и оформлено товара больше, чем в заказе в пределах допустимого отклонения будут увеличены.
//      * СкорректироватьМерныеТоварыПоПриемке - Булево - то же, что СкорректироватьМерныеТовары, но применяется если у документа
//                                                   есть отдельная табличная часть, ориентированная на приемку.
//      * КорректироватьПриемкуВПлюсНеограниченно - Булево - Снять запрет на верхнюю границу допустимых отклонений.
//      * ЗаполнениеПоПоступлению - Булево - Признак, указывающий применяются Приходные или Расходные ордера (если используется ордерная схема).
//      * ИмяРегистраЗаказов - Строка - Имя регистра заказа, который двигается накладной, например, "ЗаказыКлиентов".
//      * ЗаполнятьКоличествоОтклонением - Булево - Признак означающий, что метод рассчитывающий величину отклонения в поле "Количество"
//                                                  должен вернуть не значение количества после корректировки, а величину отклонения.
//      * РазделятьСтрокиСОтрицательнымОтклонением - Булево - Нужно ли выделить величину расхождения при корректировке в отдельную строку, если расхождение отрицательное.
//      * СкорректироватьЦены             - Булево - Цены заказа будут приведены к ценам накладной.
//      * ЗакрыватьЗаказы                 - Булево - Нужно ли предпринять попытку установки статуса Закрыт для закза
//
Функция СтруктураКорректировкиСтрокЗаказа() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ДокументОбъект");
	Структура.Вставить("ИмяДокумента");
	Структура.Вставить("ИмяТабличнойЧасти",                        "Товары");
	Структура.Вставить("ПричинаОтмены");
	Структура.Вставить("ПроверятьОстатки",                         Ложь);
	Структура.Вставить("ОтменитьНеотработанныеСтроки",             Ложь);
	
	Структура.Вставить("СкорректироватьМерныеТовары",              Ложь);
	
	Структура.Вставить("СкорректироватьМерныеТоварыПоПриемке",     Ложь);
	Структура.Вставить("КорректироватьПриемкуВПлюсНеограниченно",  Ложь);
	Структура.Вставить("ЗаполнениеПоПоступлению",                  Ложь);
	Структура.Вставить("ИмяРегистраЗаказов");
	Структура.Вставить("ЗаполнятьКоличествоОтклонением",           Ложь);
	
	Структура.Вставить("РазделятьСтрокиСОтрицательнымОтклонением", Ложь);
	
	Структура.Вставить("СкорректироватьЦены",                      Ложь);
	Структура.Вставить("ЗакрыватьЗаказы",                          Ложь);
	
	Возврат Структура;
	
КонецФункции

//Проверяет, есть ли превышения заказа по оформленным накладным. Если есть то корректирует заказ на размер этих отклонений.
//
// Параметры:
//  ЗаказОбъект                      - ДокументОбъект - Корректируемый заказ.
//  ТаблицаДокумента                 - Табличная часть, Таблица значений - Таблица товаров заказа.
//  КоличествоСкорректированныхСтрок - Число - количество скорректированных строк заказа до вызова процедуры.
//
Процедура УвеличитьСтрокиЗаказаНаРазмерПревышенияОтгрузкиМерныхТоваров(ЗаказОбъект,
	ТаблицаДокумента, КоличествоСкорректированныхСтрок = 0) Экспорт
	
	Если ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
		ТаблицаПревышенийОформления = 
			Документы.ЗаказНаВнутреннееПотребление.ПревышенияОформленияПоЗаказу(ЗаказОбъект.Ссылка);
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаСборку") Тогда
		ТаблицаПревышенийОформления = 
			Документы.ЗаказНаСборку.ПревышенияОформленияПоЗаказу(ЗаказОбъект.Ссылка);
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
		ТаблицаПревышенийОформления = 
			Документы.ЗаказНаПеремещение.ПревышенияОформленияПоЗаказу(ЗаказОбъект.Ссылка);
	КонецЕсли;
	
	Если ТаблицаПревышенийОформления.Количество() > 0 Тогда
			
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия,КодСтроки");
			
			Для Каждого СтрокаОтклонения Из ТаблицаПревышенийОформления Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаОтклонения);
				СтрокиТоваров = ТаблицаДокумента.НайтиСтроки(СтруктураПоиска);
				Если СтрокиТоваров.Количество() > 0 Тогда
					
					СтрокаТоваров = СтрокиТоваров[0];
					СтрокаТоваров.Количество = СтрокаТоваров.Количество + СтрокаОтклонения.Количество;
					КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТаблицаДокумента, СтруктураДействий, Неопределено);
			
	КонецЕсли;
	
КонецПроцедуры

//В зависимости от типа заказа вызывает процедуру корректировки строк и процедуры постобработки заказа.
//
// Параметры:
//  ЗаказОбъект                       - ДокументОбъект - Корректируемый заказ.
//  СтруктураДополнительныхПараметров - Структура - Структура корректировки строк заказа.
//
Функция СкорректироватьСтрокиЗаказа(ЗаказОбъект, СтруктураДополнительныхПараметров) Экспорт
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	ЗаполнитьЗначенияСвойств(СтруктураКорректировкиСтрокЗаказа, СтруктураДополнительныхПараметров);
	
	ЗаказИзменен = Ложь;
	
	Если ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ДокументОбъект   = ЗаказОбъект;
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
			Не (ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
		
		СтруктураРезультата = ПродажиСервер.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок <> 0 ИЛИ СтруктураРезультата.СуммаКорректировки > 0 Тогда
			
			ЗаказИзменен = Истина;
			ЗаказОбъект.ЗаполнитьЭтапыГрафикаОплаты( СтруктураРезультата.СуммаКорректировки, Истина);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
			Не (ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован);
		
		СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок <> 0 Тогда
			
			ЗаказИзменен = Истина;
			ЗаказОбъект.ЗаполнитьЭтапыГрафикаОплаты(Истина);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ДокументОбъект   = ЗаказОбъект;
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = Истина;
		
		//Возвращаемые товары
		СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "ВозвращаемыеТовары";
		СтруктураРезультатаВТ = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		//Заменяющие товары
		СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "ЗаменяющиеТовары";
		СтруктураРезультатаЗТ = ПродажиСервер.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультатаЗТ.КоличествоСтрок > 0 ИЛИ СтруктураРезультатаЗТ.СуммаКорректировки > 0 Тогда
			ЗаказИзменен = Истина;
			ЗаказОбъект.ЗаполнитьЭтапыГрафикаОплаты(СтруктураРезультатаЗТ.СуммаКорректировки, Истина);
		КонецЕсли;
		
		Если СтруктураРезультатаВТ.КоличествоСтрок > 0 ИЛИ СтруктураРезультатаВТ.КоличествоСтрок > 0 Тогда
			ЗаказИзменен = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
			ЗаказОбъект.Статус <> Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
		
		СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок > 0 Тогда
			ЗаказИзменен = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаСборку") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
			ЗаказОбъект.Статус <> Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
		
		СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок > 0 Тогда
			ЗаказИзменен = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
			ЗаказОбъект.Статус <> Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
		
		СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок > 0 Тогда
			ЗаказИзменен = Истина;
		КонецЕсли;
	
	
	КонецЕсли;
	
	Возврат ЗаказИзменен;
	
КонецФункции


Процедура ПеренестиИзмененияВТаблицуПоИндексу(ТаблицаИсточник, ТаблицаПриемник, СписокСвойств, ДобавлятьНовыеСтроки = Ложь) Экспорт
	
	ИндексовТаблицыИсточника = ТаблицаИсточник.Количество() - 1;
	ИндексовТаблицыПриемника = ТаблицаПриемник.Количество() - 1;
	
	СкорректироватьИндексов = Мин(ИндексовТаблицыИсточника, ИндексовТаблицыПриемника);
	
	Для Индекс = 0 По СкорректироватьИндексов Цикл
		СтрокаИсточника = ТаблицаИсточник[Индекс];
		СтрокаПриемника = ТаблицаПриемник[Индекс];
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника, СписокСвойств);
	КонецЦикла;
	
	Если ДобавлятьНовыеСтроки И ИндексовТаблицыИсточника > ИндексовТаблицыПриемника Тогда
		Для Индекс = ИндексовТаблицыПриемника + 1 По ИндексовТаблицыИсточника Цикл
			СтрокаИсточника = ТаблицаИсточник[Индекс];
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентноеЗадание

// Корректирует строки мерных товаров заказов, попавших в регистр ОчередьЗаказовККорректировкеСтрокМерныхТоваров.
// Метод регламентного задания КорректировкаСтрокЗаказовМерныхТоваров.
//
Процедура АвтоматическаяКорректировкаСтрокЗаказовМерныхТоваров() Экспорт
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.КорректировкаСтрокЗаказовМерныхТоваров;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКорректировкиСтрокЗаказа = Новый Структура();
	СтруктураКорректировкиСтрокЗаказа.Вставить("СкорректироватьМерныеТовары", Истина);
	СтруктураКорректировкиСтрокЗаказа.Вставить("СкорректироватьМерныеТоварыПоПриемке", Истина);
	
	УровеньИнформация = УровеньЖурналаРегистрации.Информация;
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОчередьЗаказовККорректировкеСтрокМерныхТоваров.Заказ КАК Заказ,
	|	ОчередьЗаказовККорректировкеСтрокМерныхТоваров.Заказ.Проведен КАК Проведен
	|ИЗ
	|	РегистрСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров КАК ОчередьЗаказовККорректировкеСтрокМерныхТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЗаказовККорректировкеСтрокМерныхТоваров.ДатаДобавления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Заказ", Выборка.Заказ);
		Блокировка.Заблокировать();
		
		Если НЕ Выборка.Проведен Тогда
			
			НаборЗаписей = РегистрыСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Заказ);
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось заблокировать объект при автоматической корректировке строк мерных товаров.'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				Выборка.Заказ);
			
			Продолжить;
			
		КонецПопытки;
		
		ЗаказОбъект = Выборка.Заказ.ПолучитьОбъект();
		
		ЗаказИзменен = ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЗаказОбъект, СтруктураКорректировкиСтрокЗаказа);
		
		Если ЗаказИзменен Тогда
			Попытка
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);

				НаборЗаписей = РегистрыСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
				НаборЗаписей.Записать();
				
				ТекстСообщения = НСтр("ru = 'Выполнена корректировка строк мерных товаров по заказу %Заказ%'", КодОсновногоЯзыка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", Выборка.Заказ);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Окончание корректировки строк мерных товаров.'", КодОсновногоЯзыка),
					УровеньИнформация,
					,
					Выборка.Заказ,
					ТекстСообщения);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить корректировку строк
				                            | мерных товаров по заказу %Заказ% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", Выборка.Заказ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновая корректировка строк заказов мерных товаров'", КодОсновногоЯзыка),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
				ВызватьИсключение;
				
			КонецПопытки
			
		Иначе
			
			Попытка
				
				НаборЗаписей = РегистрыСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
				ТекстСообщения = НСтр("ru = 'Не удалось удалить %Заказ% из очереди на корректировку строк
				                            | мерных товаров по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", Выборка.Заказ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновая корректировка строк заказов мерных товаров'", КодОсновногоЯзыка),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
				ВызватьИсключение;
				
			КонецПопытки
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
