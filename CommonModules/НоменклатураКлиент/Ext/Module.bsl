////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры работы с номенклатурой и связанными справочниками
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует наименование элемента справочника по заданному для вида номенклатуры шаблону.
//
//Параметры:
//		ДанныеДляФормированияНаименования - Структура - структура, возвращаемая фукнцией НоменклатураСервер.ФормулаНаименования
//		ВидНоменклатуры - СправочникСслыка.ВидыНоменклатуры	- вид номенклатуры, в котором задан шаблон наименования
//		ЗначениеНаименования - Строка - в формулу полного наименования может входить наименование. Наименование может быть не
//								заполнено на момент формирования массива ДанныеДляФормированияНаименования.МассивЗначенийРеквизитов,
//								поэтому перед расчетом полного наименования значение наименования нужно обновить.
// Возвращаемое значение:
// Строка - Наименование полученное по алгоритму расчета
// Пустая строка - если не удалось сформировать наименование или не заполнены операнды алгоритма.
//
Функция НаименованиеПоФормуле(ДанныеДляФормированияНаименования, ВидНоменклатуры, ЗначениеНаименования = "") Экспорт
	
	Наименование = "";
	Если ЗначениеЗаполнено(ДанныеДляФормированияНаименования.ФормулаНаименования) Тогда
		
		МассивЗначенийРеквизитов = ДанныеДляФормированияНаименования.МассивЗначенийРеквизитов;
		
		Для Каждого Индекс из ДанныеДляФормированияНаименования.ИндексыНаименованияВМассивеЗначенийРеквизитов Цикл
			МассивЗначенийРеквизитов[Индекс] = ЗначениеНаименования;
		КонецЦикла;
		
		Попытка
			
			Выполнить("Наименование = """" + " + ДанныеДляФормированияНаименования.ФормулаНаименования);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно рассчитать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.'");
			
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Возвращает фильтр, используемый для выбора файлов-изображений.
// Возвращаемое значение:
// Строка - строка, содержащая фильтр для файлов-изображений.
//
Функция ФильтрФайловИзображений() Экспорт
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
КонецФункции

// Выполняет оповещение пользователя о выполненном подборе единиц измерений из классификатора.
//
// Параметры:
//	КоличествоНовыхЭлементов - Число - количество подобранных единиц измерений из классификатора,
//	МассивЭлементов			 - Массив - массив ссылок на элементы справочника 'УпаковкиЕдиницыизмерения',
//		подобранных из классификатора единиц измерений.
//
Процедура ОповеститьОбИзмененииСпискаВыбораЕдиницИзмерения(КоличествоНовыхЭлементов, МассивЭлементов) Экспорт
	
	Если КоличествоНовыхЭлементов = 1 Тогда
		ДобавляемыйЭлемент = МассивЭлементов[0];
		
		ТекстЗаголовка = НСтр("ru='Добавление:'");
		СсылкаЕдиницыИзмерения = ДобавляемыйЭлемент;
		ТекстСообщения = Строка(ДобавляемыйЭлемент);
	Иначе
		ТекстЗаголовка = НСтр("ru='Добавление (%КоличествоНовыхЭлементов%):'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%КоличествоНовыхЭлементов%", КоличествоНовыхЭлементов);
		СсылкаЕдиницыИзмерения = НСтр("ru='Единицы измерения'");
		ТекстСообщения = НСтр("ru='Единицы измерения'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ПолучитьНавигационнуюСсылку(СсылкаЕдиницыИзмерения), ТекстСообщения,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#Область ИнтерактивныеДействия

// Функция является обработчиком события "НачалоВыбора" для тех элементов форм, в которых может быть
//  выбрана как группа справочника, так и элемент.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - контекст действия.
//  Элемент				 - ПолеФормы		 - элемент, в котором осуществляется выбор.
//  СтандартнаяОбработка - Булево			 - признак стандартной обработки выбора в поле.
//
Процедура ВыбратьЭлементГруппуНоменклатуры(Форма, Элемент, СтандартнаяОбработка) Экспорт
	Если Элемент.ВыборГруппИЭлементов <> ГруппыИЭлементы.Группы
		И Элемент.ВыборГруппИЭлементов <> ГруппыИЭлементы.Элементы Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		СписокГруппаЭлемент = Новый СписокЗначений;
		СписокГруппаЭлемент.Добавить(ИспользованиеГруппИЭлементов.Группы, НСтр("ru = 'Выбрать группу номенклатуры'"));
		СписокГруппаЭлемент.Добавить(ИспользованиеГруппИЭлементов.Элементы, НСтр("ru = 'Выбрать позицию номенклатуры'"));
		
		ЭлементСписка = Форма.ВыбратьИзСписка(СписокГруппаЭлемент,Элемент);
		
		Если ЭлементСписка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормыВыбораНоменклатуры = Новый Структура;
		ПараметрыФормыВыбораНоменклатуры.Вставить("ВыборГруппИЭлементов", ЭлементСписка.Значение);
	
		Если ПараметрыФормыВыбораНоменклатуры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыФормыВыбораНоменклатуры, Элемент);
		Иначе
			ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",ПараметрыФормыВыбораНоменклатуры, Элемент);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыССериями

// Функция проверяет необходимость указания серий в строке, если возможно, открывает форму указания,
//  если форма указания не требует контекстного вызова сервера.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма документа, в которой инициировано указание серий;
//  ПараметрыУказанияСерий	 - Структура		 - параметры указания серий, возвращаемые соотвествующей
//  		процедурой модуля менеджера документа;
//  Текст					 - Строка			 - текст, введеный в поле ввода (параметр событий ОкончаниеВводаТекста и АвтоПодборВводаТекста);
//  ТекущиеДанные			 - 					 - Структура или ДанныеФормыЭлементКоллекции	 - данные строки, в которой указывается серия,
//  					если значение не передано, то используются текущие данные табличного поля с
//  					именем ПараметрыУказанияСерий.ИмяТЧТовары;
//  ОпределятьРаспоряжение	 - Булево			 - признак необходимости определения распоряжения по значениям полей;
//  ВыдаватьСообщения		 - Булево			 - признак необходимости вывода пользователю информационного сообщения.
// 
// Возвращаемое значение:
//  Булево - нужен контекстный вызов.
//
Функция ДляУказанияСерийНуженСерверныйВызов(Форма, ПараметрыУказанияСерий, Текст, ТекущиеДанные = Неопределено, ОпределятьРаспоряжение = Истина, ВыдаватьСообщения = Истина) Экспорт
	
	ТекстПоляДляПодбораСерий = "";
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляДляПодбораСерий = ТекстПоляДляПодбораСерий + "," + СтрМас  ;
	КонецЦикла;
	Для Каждого СтрМас из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
		ТекстПоляДляПодбораСерий = ТекстПоляДляПодбораСерий + "," + СтрМас  ;
	КонецЦикла;
	ПараметрыПодбораСерий = Новый Структура("Номенклатура,Характеристика" + ТекстПоляДляПодбораСерий);
	Если ПараметрыПодбораСерий.Свойство("Назначение") Тогда
		ПараметрыПодбораСерий.Удалить("Назначение");
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		Если Форма.Объект.СтатусУказанияСерий = 0 Тогда
			Если ВыдаватьСообщения Тогда
				ТекстСообщения = НСтр("ru='Для этого комплекта серии указывать не нужно.'");
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;
		ИначеЕсли Форма.Объект.СтатусУказанияСерий = 13
			Или Форма.Объект.СтатусУказанияСерий = 14
			Или Форма.Объект.СтатусУказанияСерий = 15 Тогда
			
			Если ПараметрыУказанияСерий.ТолькоПросмотр
				Или Форма.ТолькоПросмотр Тогда
				ПараметрыПодбораСерий.Вставить("ТолькоПросмотр", Истина);
			Иначе
				Форма.ЗаблокироватьДанныеФормыДляРедактирования();
				Форма.Модифицированность = Истина;
				
				ПараметрыПодбораСерий.Вставить("ТолькоПросмотр", Ложь);
			КонецЕсли;
			
			ПараметрыПодбораСерий.Вставить("Номенклатура", Форма.Объект.Номенклатура);
			ПараметрыПодбораСерий.Вставить("Характеристика", Форма.Объект.Характеристика);
			
			Если ПараметрыУказанияСерий.ИмяПоляКоличество <> Неопределено Тогда
				ПараметрыПодбораСерий.Вставить("Количество", Форма.Объект[ПараметрыУказанияСерий.ИмяПоляКоличество]);
			КонецЕсли;
			
			//Заполнение назначения в заказе на сборку
			Если Форма.Объект.Свойство("НазначениеТовары") 
				И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) <> Неопределено Тогда
				Если Форма.Объект.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно") Тогда
					Если ЗначениеЗаполнено(Форма.Объект.Назначение) Тогда
						ПараметрыПодбораСерий.Вставить("Назначение", Форма.Объект.Назначение);
					Иначе
						ПараметрыПодбораСерий.Вставить("Назначение", Форма.Объект.НазначениеТовары);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Форма.Объект.Свойство("Назначение") Тогда
				ПараметрыПодбораСерий.Вставить("Назначение", Форма.Объект.Назначение);
			КонецЕсли;
			
			ПараметрыПодбораСерий.Вставить("Серия", Форма.Объект.Серия);
			
			Если Форма.Объект.Свойство("Ссылка") Тогда
				ПараметрыПодбораСерий.Вставить("Регистратор", Форма.Объект.Ссылка);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
				ПараметрыПодбораСерий.Вставить("Склад", Форма.Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
			КонецЕсли;
			
			ПараметрыПодбораСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
			
			ЗначенияПолейДляОпределенияРаспоряжения = НоменклатураКлиентСервер.ЗначенияПолейДляОпределенияРаспоряжения(Форма.Объект,
																							  Форма.Объект,
																							  ПараметрыУказанияСерий);

			ПараметрыПодбораСерий.Вставить("ЗначенияПолейДляОпределенияРаспоряжения", ЗначенияПолейДляОпределенияРаспоряжения);
			ПараметрыПодбораСерий.Вставить("Текст", Текст);
			
			ОткрытьФорму("Обработка.ПодборСерийВДокументы.Форма.УказаниеСерииВСтрокеТоваров",ПараметрыПодбораСерий, Форма);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные = Форма.Элементы[ПараметрыУказанияСерий.ИмяТЧТовары].ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Если ВыдаватьСообщения Тогда
					ТекстСообщения = НСтр("ru='Выберите строку товаров, для которой необходимо указать серии.'");
					ПоказатьПредупреждение(,ТекстСообщения);
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ИдентификаторТекущейСтроки = Неопределено;
		
		Если Не ТекущиеДанные.Свойство("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки) Тогда
			ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ЭтоМаркировкаТоваровГИСМ = ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.МаркировкаПродукцииДляГИСМ")) <> Неопределено;
		ЭтоОперацияИдентификации = ПараметрыУказанияСерий.ОперацияДокумента = ПредопределенноеЗначение("Перечисление.ОперацииМаркировкиГИСМ.ИдентификацияРанееМаркированнойНаПроизводствеПродукции")
			ИЛИ ПараметрыУказанияСерий.ОперацияДокумента = ПредопределенноеЗначение("Перечисление.ОперацииМаркировкиГИСМ.ИдентификацияРанееМаркированныхПриИмпортеТоваров");
		
		Если ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Если ВыдаватьСообщения Тогда
				Если Не ЭтоМаркировкаТоваровГИСМ Тогда
					ТекстСообщения = НСтр("ru='Для этого товара серии указывать не нужно. На возможность указания серий могут влиять: вид номенклатуры, склад, политика указания серий, статус документа.'");
				Иначе
					ТекстСообщения = НСтр("ru='Для этого товара не настроено указание серий на складе %Склад%.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Форма.Объект.Склад);
				КонецЕсли;
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;
		ИначеЕсли ТекущиеДанные.ХарактеристикиИспользуются
			И Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
			Если ВыдаватьСообщения Тогда
				
				ТекстСообщения = НСтр("ru='Перед указанием серий нужно заполнить характеристику.'");
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;
		ИначеЕсли ЭтоМаркировкаТоваровГИСМ
			И Не ЭтоОперацияИдентификации
			И (Не ЗначениеЗаполнено(ТекущиеДанные.НоменклатураКиЗ)
					Или ТекущиеДанные.ХарактеристикиКиЗИспользуются
						И Не ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаКиЗ)) Тогда
				Если ВыдаватьСообщения Тогда

					ТекстСообщения = НСтр("ru='Перед указанием серий нужно выбрать КиЗ.'");
					ПоказатьПредупреждение(,ТекстСообщения);
				КонецЕсли;
			Возврат Ложь;
		ИначеЕсли ЭтоМаркировкаТоваровГИСМ
			И Не ЭтоОперацияИдентификации
			И Не ЗначениеЗаполнено(ТекущиеДанные.GTIN) Тогда
			Если ВыдаватьСообщения Тогда
				
				ТекстСообщения = НСтр("ru='Перед указанием серий нужно указать GTIN.'");
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;
		ИначеЕсли НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(ТекущиеДанные.СтатусУказанияСерий, ПараметрыУказанияСерий)
			И ТекущиеДанные.Свойство("Серия")
			И (Не ПараметрыУказанияСерий.ЭтоОрдер
				Или (ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтражениеИзлишков")) <> Неопределено
					И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтражениеНедостач")) <> Неопределено)) Тогда
			
			Если ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные" Тогда
				ИсточникДанныхФормы = ТекущиеДанные;
			Иначе 
				ИсточникДанныхФормы = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта];
			КонецЕсли; 
			
			Если ПараметрыУказанияСерий.ТолькоПросмотр
				Или Форма.ТолькоПросмотр Тогда
				ПараметрыПодбораСерий.Вставить("ТолькоПросмотр", Истина);
			Иначе
				Форма.ЗаблокироватьДанныеФормыДляРедактирования();
				Форма.Модифицированность = Истина;
				
				ПараметрыПодбораСерий.Вставить("ТолькоПросмотр", Ложь);
			КонецЕсли;
				
			ЗаполнитьЗначенияСвойств(ПараметрыПодбораСерий,ТекущиеДанные);
			
			Если ПараметрыУказанияСерий.ИмяПоляКоличество <> Неопределено Тогда
				ПараметрыПодбораСерий.Вставить("Количество", ТекущиеДанные[ПараметрыУказанияСерий.ИмяПоляКоличество]);
			КонецЕсли;
			
			Если ТекущиеДанные.Свойство("ЭтоВводНовойСерии") Тогда
				ПараметрыПодбораСерий.Вставить("ЭтоВводНовойСерии", ТекущиеДанные.ЭтоВводНовойСерии);
			КонецЕсли;
			
			Если ТекущиеДанные.Свойство("НазначениеОтправителя") Тогда
				ПараметрыПодбораСерий.Вставить("НазначениеОтправителя", ТекущиеДанные.НазначениеОтправителя);	
			ИначеЕсли ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению")) <> Неопределено 
				И ТекущиеДанные.Свойство("ВариантОбеспечения") Тогда
				Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно") Тогда
					Если ЗначениеЗаполнено(ТекущиеДанные.Назначение) Тогда
						ПараметрыПодбораСерий.Вставить("НазначениеОтправителя", ТекущиеДанные.Назначение);
					Иначе
						ПараметрыПодбораСерий.Вставить("НазначениеОтправителя", ИсточникДанныхФормы.Назначение);
					КонецЕсли;
				Иначе
					ПараметрыПодбораСерий.Вставить("НазначениеОтправителя", ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"));	
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущиеДанные.Свойство("Назначение") Тогда
				ПараметрыПодбораСерий.Вставить("Назначение", ТекущиеДанные.Назначение);
			ИначеЕсли ТипЗнч(ИсточникДанныхФормы) <> Тип("УправляемаяФорма") 
				И ИсточникДанныхФормы.Свойство("Назначение") Тогда
				
				Если ТекущиеДанные.Свойство("ВариантОбеспечения") Тогда 
					Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно") Тогда
						ПараметрыПодбораСерий.Вставить("Назначение", Форма.Объект.Назначение);
					КонецЕсли; 
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполнение назначения в заказе на сборку
			Если ТипЗнч(ИсточникДанныхФормы) <> Тип("УправляемаяФорма") 
				И ИсточникДанныхФормы.Свойство("НазначениеТовары")
				И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) <> Неопределено Тогда
				Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно") Тогда
					Если ЗначениеЗаполнено(ИсточникДанныхФормы.Назначение) Тогда
						ПараметрыПодбораСерий.Вставить("Назначение", Форма.Объект.Назначение);
					Иначе
						ПараметрыПодбораСерий.Вставить("Назначение", Форма.Объект.НазначениеТовары);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			
			ПараметрыПодбораСерий.Вставить("Серия", ТекущиеДанные.Серия);
			ПараметрыПодбораСерий.Вставить("Регистратор", ИсточникДанныхФормы.Ссылка);
			
			Если ПараметрыУказанияСерий.ИмяПоляПомещение <> Неопределено Тогда
				ПараметрыПодбораСерий.Вставить("Помещение", ИсточникДанныхФормы[ПараметрыУказанияСерий.ИмяПоляПомещение]);
			ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти("Помещение") <> Неопределено Тогда
				ПараметрыПодбораСерий.Вставить("Помещение", ТекущиеДанные.Помещение);
			КонецЕсли;
			
			Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Склад") <> Неопределено
				Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти("Склад") <> Неопределено Тогда
				ПараметрыПодбораСерий.Вставить("Склад", ТекущиеДанные.Склад);
			ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено Тогда
				ПараметрыПодбораСерий.Вставить("Склад", ТекущиеДанные[ПараметрыУказанияСерий.ИмяПоляСклад]);
			ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти("Подразделение") <> Неопределено Тогда
				ПараметрыПодбораСерий.Вставить("Склад", ТекущиеДанные.Подразделение);
			ИначеЕсли ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
				ПараметрыПодбораСерий.Вставить("Склад", ИсточникДанныхФормы[ПараметрыУказанияСерий.ИмяПоляСклад]);
			КонецЕсли;
			
			ПараметрыПодбораСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
			
			Если ОпределятьРаспоряжение Тогда
				ЗначенияПолейДляОпределенияРаспоряжения = НоменклатураКлиентСервер.ЗначенияПолейДляОпределенияРаспоряжения(ИсточникДанныхФормы,
																									ТекущиеДанные,
																									ПараметрыУказанияСерий);
			Иначе
				ЗначенияПолейДляОпределенияРаспоряжения = Новый Структура;
			КонецЕсли;
			ПараметрыПодбораСерий.Вставить("ЗначенияПолейДляОпределенияРаспоряжения", ЗначенияПолейДляОпределенияРаспоряжения);
			ПараметрыПодбораСерий.Вставить("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
			ПараметрыПодбораСерий.Вставить("Текст", Текст);
			
			ОткрытьФорму("Обработка.ПодборСерийВДокументы.Форма.УказаниеСерииВСтрокеТоваров",ПараметрыПодбораСерий, Форма);
			
			Возврат Ложь;
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет возможность отмены указания серий в строке.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа, в которой инициировано указание серий;
//	ПараметрыУказанияСерий Структура - параметры указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа;
//	ИмяТабличногоПоля - Строка - имя табличной части документа.
//
// Возвращаемое значение:
//	Булево - Истина, если серверный вызов нужен.
//
Функция ДляОтменыУказанияСерийНуженСерверныйВызов(Форма,ПараметрыУказанияСерий, ИмяТабличногоПоля = "") Экспорт
	
	Если ИмяТабличногоПоля = "" Тогда
		ИмяТабличногоПоля = ПараметрыУказанияСерий.ИмяТЧТовары;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		Если Не Форма.Объект.УказыватьСерии Тогда
			
			ТекстСообщения = НСтр("ru='Для комплекта серии не указаны.'");
			ПоказатьПредупреждение(,ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные = Форма.Элементы[ИмяТабличногоПоля].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='Необходимо выбрать строку товаров, для которой необходимо отменить указание серий.'");
			ПоказатьПредупреждение(,ТекстСообщения);
			Возврат Ложь;
			
		ИначеЕсли Не ТекущиеДанные.УказыватьСерии Тогда
			
			ТекстСообщения = НСтр("ru='Для выбранной строки серии не указаны.'");
			ПоказатьПредупреждение(,ТекстСообщения);
			Возврат Ложь;
			
		ИначеЕсли ТекущиеДанные.СтатусУказанияСерий = 14 Тогда
			
			Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада") Тогда
				ТекущиеДанные.СтатусУказанияСерий = 15;
			Иначе
				ТекущиеДанные.СтатусУказанияСерий = 13;
			КонецЕсли;
			
			ТекущиеДанные.Серия               = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			ТекущиеДанные.УказыватьСерии      = Ложь;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Форма.Модифицированность = Истина;
	
	Возврат Истина;
	
КонецФункции

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
//  между ТЧ серий и ТЧ товаров.
//
// Параметры:
//  ТаблицаФормы			 - ТаблицаФормы	 - таблица, в которой отображается ТЧ с товарами.
//  КэшированныеЗначения	 - Структура	 - переменная модуля формы, в которой храняться кешируемые значения.
//  ПараметрыУказанияСерий	 - Структура	 - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа.
//  Копирование				 - Булево		 - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования).
//
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(ТаблицаФормы,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование = Ложь) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(ТекущиеДанные,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);
	
КонецПроцедуры

// Процедура обновляет кеш ключевых реквизитов товара в шапке документа. По ключевым реквизитам осуществляется связь
//  между ТЧ серий товаром
//
// Параметры:
//  Объект					 - ДанныеФормыСтуктура	 - основной реквизит формы
//  КэшированныеЗначения	 - Структура			 - переменная модуля формы, в которой храняться кешируемые значения
//  ПараметрыУказанияСерий	 - Структура			 - параметры указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//
Процедура ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("НоменклатураШапка",Объект.Номенклатура);
	КэшированныеЗначения.Вставить("ХарактеристикаШапка",Объект.Характеристика);
	КэшированныеЗначения.Вставить("НазначениеШапка",Объект.Назначение);
	КэшированныеЗначения.Вставить("КоличествоШапка",Объект.Количество);
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		КэшированныеЗначения.Вставить(СтрМас+"Шапка",Объект[СтрМас]);
	КонецЦикла;
		
КонецПроцедуры

// Фукнция проверяет необходимость обновления статусов указания серий при окончании редактирования строки товаров.
//
// Параметры:
//  ТаблицаФормы			 - ТаблицаФормы	 - таблица формы, отображающая ТЧ товаров;
//  КэшированныеЗначения	 - Структура	 - переменная модуля формы, в которой храняться кешируемые значения;
//  ПараметрыУказанияСерий	 - Структура	 - параметры указания серий, возвращаемые соотвествующей процедурой
//  	модуля менеджера документа;
//  Удаление				 - Булево, Истина	 - признак, что проверка вызвается при удалении строки ТЧ.
// 
// Возвращаемое значение:
//  Булево - нужно ли обновить статусы указания серий.
//
Функция НеобходимоОбновитьСтатусыСерий(ТаблицаФормы,КэшированныеЗначения,ПараметрыУказанияСерий, Удаление = Ложь) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Удаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас;
	КонецЦикла;
	
	Если ТекущиеДанные.Свойство("Отменено") Тогда
		ТекстПоляСвязи = ТекстПоляСвязи + ",Отменено";
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения,ТекущиеДанные,
		ПараметрыУказанияСерий.ИмяПоляКоличество + ",Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Фукнция проверяет необходимость обновления статуса указания серий для товара в шапке документа.
//
// Параметры:
//  Объект					 - ДанныеФормыСтуктура	 - основной реквизит формы;
//  КэшированныеЗначения	 - Структура			 - переменная модуля формы, в которой храняться кешируемые значения;
//  ПараметрыУказанияСерий	 - Структура			 - параметры указания серий, возвращаемые соотвествующей процедурой
//  			модуля менеджера документа.
// 
// Возвращаемое значение:
//  Булево - нужно ли обновить статус указания серий.
//
Функция НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,Знач ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика
		Или КэшированныеЗначения.КоличествоШапка <> Объект.Количество
		Или КэшированныеЗначения.НазначениеШапка <> Объект.Назначение Тогда
		Возврат Истина;
	Иначе	
		Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если КэшированныеЗначения[СтрМас+"Шапка"] <> Объект[СтрМас] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Запрашивает у пользователя подтверждение перезаполнения серий по FEFO.
//
// Параметры:
//  ОповещениеПослеОтвета	 - ОписаниеОповещения - действие после ответа.
//
Процедура ЗадатьВопросОПерезаполненииСерийПоFEFO(ОповещениеПослеОтвета) Экспорт 
	
	ТекстВопроса = НСтр("ru = 'Есть строки, в которых серии по FEFO уже заполнены. При выполнении операции
		|серии в этих строках будут перезаполнены. Продолжить?'");
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ЗадатьВопросОПерезаполненииСерийПоFEFOЗавершение", 
			ЭтотОбъект, 
			Новый Структура("ОповещениеПослеОтвета", ОповещениеПослеОтвета)), 
		ТекстВопроса, 
		РежимДиалогаВопрос.ОКОтмена,
		,
		КодВозвратаДиалога.ОК);
		
КонецПроцедуры

// Процедура выполняет обработку оповещания после вопроса о перезаполнении серий по FEFO.
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога - ответ на вопрос.
//  ДополнительныеПараметры	 - Структура - передается ОповещениеПослеОтвета.
//
Процедура ЗадатьВопросОПерезаполненииСерийПоFEFOЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеОтвета = ДополнительныеПараметры.ОповещениеПослеОтвета;
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОтвета, Ложь);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеОтвета, Истина);
	КонецЕсли;

КонецПроцедуры

// Фукнция выводит предпреждение, что в ТЧ нет строк, серии по которым можно заполнить по FEFO.
Процедура ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO() Экспорт
	ТекстПредупреждения = НСтр("ru = 'В табличной части нет товаров, по которым серии можно заполнить по FEFO.'");	
	
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
КонецПроцедуры

// Обрабатывает указание серии в ТЧ "Товары".
//	Параметры:
//		Форма - УправляемаяФорма - форма документа, в которой инициировано указание серии
//		ПараметрыУказанияСерий - Структура - параметры указания серий, возвращаемые соотвествующей процедурой модуля менеджера документа
//		ВыбраннаяСерия - Структура - формат которой описан в фукнции НоменклатураКлиентСервер.ВыбраннаяСерия
//		ТекущиеДанные - Структура,ДанныеФормыЭлементКоллекции  - данные строки, в которой указывается серия, если значение не передано,
//									то используются текущие данные табличного поля с именем ПараметрыУказанияСерий.ИмяТЧТовары.
//
Процедура ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий, ВыбраннаяСерия, ТекущиеДанные = Неопределено) Экспорт
	
	ЕстьПризнакУказанияСерий = ПараметрыУказанияСерий.ПоляСвязи.Найти("УказыватьСерии") <> Неопределено;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Если Не ПараметрыУказанияСерий.ТоварВШапке Тогда		
			ТекущиеДанные = Форма.Элементы[ПараметрыУказанияСерий.ИмяТЧТовары].ДанныеСтроки(ВыбраннаяСерия.ИдентификаторТекущейСтроки);
			
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ТекущиеДанные = Форма.Объект;
		КонецЕсли;
	КонецЕсли;
	
	//Можно пересчитать на клиенте статус указания серий после указания серии,
	//если не нужно для этого анализировать ТЧ Серии, т.е. когда ее нет, или когда серии указываются в ТЧ Товары
	Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(ТекущиеДанные.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
		
		Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																				ТекущиеДанные.СтатусУказанияСерий,
																				ЗначениеЗаполнено(ВыбраннаяСерия.Значение),
																				Неопределено,
																				?(ПараметрыУказанияСерий.ЭтоЗаказ, ТекущиеДанные.ВариантОбеспечения, Неопределено),
																				ТекущиеДанные);
		Иначе
			
			Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Если ТекущиеДанные.Свойство(ИмяПоляСтатус) Тогда
					НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																						ТекущиеДанные[ИмяПоляСтатус],
																						ЗначениеЗаполнено(ВыбраннаяСерия.Значение),
																						Неопределено,
																						?(ПараметрыУказанияСерий.ЭтоЗаказ, ТекущиеДанные.ВариантОбеспечения, Неопределено),
																						ТекущиеДанные);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущиеДанные.Серия = ВыбраннаяСерия.Значение;
		
		Если ЕстьПризнакУказанияСерий Тогда
			ТекущиеДанные.УказыватьСерии = Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(ТекущиеДанные.СтатусУказанияСерий,
																										ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры необходимые для расшифровки отчета ВедомостьПоСериямНоменклатуры.
//
// Возвращаемое значение:
//   Структура   - параметры необходимые для расшифровки отчета.
//
Функция ПараметрыРасшифровкиОтчетВедомостьПоСериямНоменклатуры() Экспорт

	МенюОтчетов  = Новый Массив;
	МенюДействий = Новый Массив;
	
	// Расшифровать отчетом -> Движение серии номенклатуры
	#Область ДвижениеСерииНоменклатурыКонтекст
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Имя", "ДвижениеСерииНоменклатурыКонтекст");
	ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Движение серии номенклатуры'"));
	ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.ДвижениеСерииНоменклатуры");
	
	ПоляРасшифровки  = Новый Массив;
	ПоляРасшифровки.Добавить("Серия");
	ПоляРасшифровки.Добавить("Характеристика");
	ПоляРасшифровки.Добавить("Получатель");
	ПоляРасшифровки.Добавить("Помещение");
	ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
	
	НеобходимыеПараметры = Новый Структура;
	НеобходимыеПараметры.Вставить("Серия");
	НеобходимыеПараметры.Вставить("Характеристика");
	ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
	
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить("Номенклатура");
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	
	ЗаменаПараметров = Новый Структура;
	ЗаменаПараметров.Вставить("Получатель", "ОтправительИлиПолучатель");
	ЗаменаПараметров.Вставить("Помещение", "ОтправительИлиПолучательПомещение");
	ПараметрыОтчета.Вставить("ЗаменаПараметров", ЗаменаПараметров);
	
	ФиксированныеПараметры = Новый Структура;
	ФиксированныеПараметры.Вставить("ИспользоватьОтправительИлиПолучательПомещение", Истина);
	ПараметрыОтчета.Вставить("ФиксированныеПараметры", ФиксированныеПараметры);
	
	МенюОтчетов.Добавить(ПараметрыОтчета);
	#КонецОбласти
		
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
	ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);

	Возврат ПараметрыРасшифровки;
	
КонецФункции

// Функция вызывается в обработчике ОбработкаВыбора в форме, в которой указываются серии
// и проверяет, что источник выбора - это форма указания серий.
//
// Параметры:
//  ИсточникВыбора	 - Произвольный - форма, где осуществлен выбор. Параметр события ОбработкаВыбора формы.
// 
// Возвращаемое значение:
//   Булево - истина, если это указание серий.
//
Функция ЭтоУказаниеСерий(ИсточникВыбора) Экспорт
	
	Возврат ИсточникВыбора.ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.УказаниеСерииВСтрокеТоваров";
	
КонецФункции

// Выполняет оповещение пользователя о выполненном перезаполнении серий
//
// Параметры:
//  ЕстьИзменения				 - Булево	 - было ли выполнение перезаполнение
//  КоличествоИзначальноВерное	 - Булево	 - признак обозначающий что изначальные данные соответствуют перезаполненным
//
Процедура ОповеститьОПерезаполненииСерий(ЕстьИзменения, КоличествоИзначальноВерное) Экспорт
	
	Если ЕстьИзменения Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Серии перезаполнены'"),
				,
				НСтр("ru='В строках перезаполнены данные по сериям.'"),
				БиблиотекаКартинок.Информация32);
	
	ИначеЕсли КоличествоИзначальноВерное Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. во всех строках количество серий указано верно, либо поступление серий еще не выполнено.'"),
				БиблиотекаКартинок.Информация32);
	
	Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. поступление серий еще не выполнено.'"),
				БиблиотекаКартинок.Информация32);
	
	КонецЕсли;
	
КонецПроцедуры

// Выполняет переопределение платформенного обработчика события начала выбора реквизита "ДатаПроизводства" справочника "СерииНоменклатуры".
//
// Параметры:
//	Объект					 - ДанныеФормыСтуктура, ДанныеФормыЭлементКоллекции	 - структура данных, содержащая обрабатываемые сведения
//	ОповещениеОЗавершении	 - ОписаниеОповещения, Неопределено					 - описание оповещения, выполняемое после закрытия формы 
//																					указания даты
//	СтандартнаяОбработка	 - Булево											 - признак выполнения стандартной обработки события.
//
Процедура ДатаПроизводстваНачалоВыбора(Объект, ОповещениеОЗавершении, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы      = Новый Структура("ДатаПроизводства, УказаниеДатыПроизводства", Объект.ДатаПроизводства, Истина);
	ПараметрыОповещения = Новый Структура("Объект, ОповещениеОЗавершении", Объект, ОповещениеОЗавершении);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ДатаПроизводстваНачалоВыбораЗавершение", ЭтотОбъект,
									ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.ПодборСерийВДокументы.Форма.УказаниеДаты", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выполняет переопределение платформенного обработчика события начала выбора реквизита "ГоденДо" справочника "СерииНоменклатуры".
//
// Параметры:
//	Объект					 - ДанныеФормыСтуктура, ДанныеФормыЭлементКоллекции	 - структура данных, содержащая обрабатываемые сведения
//	ПараметрыФормы			 - Структура										 - параметры, используемые при открытии формы указания даты
//	ОповещениеОЗавершении	 - ОписаниеОповещения, Неопределено					 - описание оповещения, выполняемое после закрытия формы 
//																					указания даты
//	СтандартнаяОбработка	 - Булево											 - признак выполнения стандартной обработки события.
//
Процедура ДатаИстеченияСрокаГодностиНачалоВыбора(Объект, ПараметрыФормы, ОповещениеОЗавершении, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Объект",                       Объект);
	ПараметрыОповещения.Вставить("ИспользоватьДатуПроизводства", ПараметрыФормы.ИспользоватьДатуПроизводства);
	ПараметрыОповещения.Вставить("ОповещениеОЗавершении",        ОповещениеОЗавершении);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДатаИстеченияСрокаГодностиНачалоВыбораЗавершение", ЭтотОбъект,
									ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.ПодборСерийВДокументы.Форма.УказаниеДаты", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыРаботыССериями

Процедура ДатаПроизводстваНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Объект, Результат);
	КонецЕсли;
	
	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаИстеченияСрокаГодностиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
	
	Если Результат <> Неопределено Тогда
		
		Объект = ДополнительныеПараметры.Объект;
		
		Объект.ГоденДо = Результат.ГоденДо;
		
		Если ЗначениеЗаполнено(Результат.ДатаПроизводства)
			И ДополнительныеПараметры.ИспользоватьДатуПроизводства Тогда
			
			Объект.ДатаПроизводства = Результат.ДатаПроизводства;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
