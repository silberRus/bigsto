////////////////////////////////////////////////////////////////////////////////
// ИнтеграцияСЯндексКассойПереопределяемый: механизм интеграции с сервисом Яндекс.Касса.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыОбменаССервисом

// Запускает процедуру получения операций по Яндекс.Кассе в фоне.
//
// Параметры:
//  ПараметрыЗадания - Структура - параметры процедуры:
//   * НастройкаЯндексКассы - СправочникСсылка.НастройкиЯндексКассы - ссылка на настройку для которой нужно загружать.
//   * ТолькоСДоговором - Булево, Неопределено - указывает настройки с каким вариантом использования сервиса следует использовать, неопределено - все.
//
Функция ЗагрузитьОперацииПоЯндексКассеВФоне(ПараметрыЗадания) Экспорт 
	   
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение уведомлений от Яндекс.Кассы'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияСЯндексКассойСлужебныйВызовСервера.ЗагрузитьОперацииПоЯндексКассе", 
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

// Отправляет запрос получения операций по Яндекс.Кассе на сервер 1С, а после получения ответа возвращает массив структур вида:
//  * ДатаНачала - Дата начала периода выборки данных из сервиса (служебная информация)
//  * ДатаОкончания - Дата окончания периода выборки данных из сервиса (служебная информация)
//  * Организация - Организация для которой производилось получение операций (служебная информация)
//  * НастройкаЯндексКассы - Настройка по которой производилось получение операций (служебная информация)
//  * СДоговором - Признак вида настройки (служебная информация)
//  * ОперацииМассивСтруктур - Массив операций в формате полученном из сервиса(состав см. ИнтеграцияСЯндексКассойСлужебныйВызовСервера.ПрочитатьОперацию)
//  * ОперацииТекстовыйФормат - Данные операций в текстовом формате (см. http://v8.1c.ru/edi/edi_stnd/100/)
//
Процедура ЗагрузитьОперацииПоЯндексКассе(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// &ЗамерПроизводительности
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ИнтеграцияСЯндексКассой.ЗагрузкаОперацийПоЯндексКассе");
	КоличествоПовторяющихсяДанных = 0;
	
	ДанныеОпераций = Новый Массив;
	ОперацииВТекстовомФормате = "";
	МассивОпераций = Новый Массив;
	ПараметрыКоманды = Новый Структура();
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьИнтеграциюСЯндексКассой") Тогда 
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ЗагрузитьОперацииПоЯндексКассе");
		ОбработатьОшибку("НеВключенаФункциональнаяОпция", ПараметрыСообщения);
		
		// &ЗамерПроизводительности
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда 
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ЗагрузитьОперацииПоЯндексКассе");
		ОбработатьОшибку("НеВключенаИПП", ПараметрыСообщения);
		
		// &ЗамерПроизводительности
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды.Вставить("ДанныеАутентификации", 
		"Basic " + ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(
			ДанныеАутентификации.Логин + ":" + ДанныеАутентификации.Пароль));
		
	ПараметрыДляЗагрузкиОпераций = ПараметрыДляЗагрузкиОпераций(ПараметрыПроцедуры);
	
	КоличествоПараметров = ПараметрыДляЗагрузкиОпераций.Количество();
	СчетчикПрогресса = -1;
	// &ЗамерПроизводительности
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "Инициализация_ПараметрыДляЗагрузкиОпераций");
	Для Каждого Параметры из ПараметрыДляЗагрузкиОпераций Цикл 
		
		// &ЗамерПроизводительности
		КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
		
		ПараметрыКоманды.Вставить("ДатаНачала", Параметры.ДатаПоследнегоУспешногоОбмена);
		Если ЗначениеЗаполнено(ПараметрыПроцедуры.ДатаНачала) Тогда 
			ПараметрыКоманды.ДатаНачала = ПараметрыПроцедуры.ДатаНачала;
		КонецЕсли;
		
		ПараметрыКоманды.Вставить("ДатаОкончания", Дата('00010101'));
		Если ЗначениеЗаполнено(ПараметрыПроцедуры.ДатаОкончания) Тогда
			ПараметрыКоманды.ДатаОкончания = ПараметрыПроцедуры.ДатаОкончания;
			Если ПараметрыКоманды.ДатаНачала > ПараметрыКоманды.ДатаОкончания Тогда
				ПараметрыКоманды.ДатаОкончания = КонецДня(ПараметрыКоманды.ДатаНачала);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыКоманды.Вставить("ИНН", Параметры.ИНН);
		ПараметрыКоманды.Вставить("КПП", Параметры.КПП);
		ПараметрыКоманды.Вставить("Организация", Параметры.Организация);
		ПараметрыКоманды.Вставить("ИдентификаторМагазина",	Параметры.ИдентификаторМагазина);
		ПараметрыКоманды.Вставить("НастройкаЯндексКассы",	Параметры.НастройкаЯндексКассы);
		ПараметрыКоманды.Вставить("СДоговором", Параметры.СДоговором);
		
		Отказ = Ложь;
		ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе";
		РезультатКоманды = Неопределено;
		ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, РезультатКоманды, Отказ);
		
		РезультатРазбора = Неопределено;
		РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ);
		
		Если Не Отказ Тогда 
			
			
			Если РезультатРазбора.Свойство("Настройки")
				И РезультатРазбора.Настройки.Количество() Тогда 
				
				Если Не Параметры.ИдентификаторМагазина = РезультатРазбора.Настройки.ИдентификаторМагазина
					Или Параметры.ИдентификаторВитрины = РезультатРазбора.Настройки.ИдентификаторВитрины Тогда 
					
					ОбновитьНастройкуЯндексКассы(ПараметрыКоманды.НастройкаЯндексКассы, РезультатРазбора.Настройки, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не Отказ Тогда 
				
				ОперацииТекстовыйФормат = ОперацииВТекстовомФормате(РезультатРазбора.МассивОпераций, ПараметрыКоманды);
				
				Операции = Новый Структура();
				Операции.Вставить("ДатаОтвета",              РезультатРазбора.ДатаОтвета);
				Операции.Вставить("ДатаНачала",              ПараметрыКоманды.ДатаНачала);
				Операции.Вставить("ДатаОкончания",           ПараметрыКоманды.ДатаОкончания);
				Операции.Вставить("Организация",             ПараметрыКоманды.Организация);
				Операции.Вставить("НастройкаЯндексКассы",    ПараметрыКоманды.НастройкаЯндексКассы);
				Операции.Вставить("СДоговором",              Параметры.СДоговором);
				Операции.Вставить("ОперацииМассивСтруктур",  РезультатРазбора.МассивОпераций);
				Операции.Вставить("ОперацииТекстовыйФормат", ОперацииТекстовыйФормат);
				
				ДанныеОпераций.Добавить(Операции);
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЦикла;
	// &ЗамерПроизводительности
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных, "Обработка_ПараметрыДляЗагрузкиОпераций");

	ПоместитьВоВременноеХранилище(ДанныеОпераций, АдресРезультата);
	
	ВывестиОшибкиПользователю();
	
	// &ЗамерПроизводительности
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Получает актуальные настройки для выставления счетов по схеме без договора.
//
Процедура ПолучитьНастройкиИзСервиса(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт 
	
	Настройки = Новый Структура("ИдентификаторМагазина, ИдентификаторВитрины, ЕстьОшибки");
	
	Отказ = Ложь;
	ИмяКоманды = "ПолучитьНастройки";
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, Неопределено, РезультатКоманды, Отказ);
	
	РезультатаРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатаРазбора, Отказ);
	
	Если Не Отказ Тогда 
		
		ЗаполнитьЗначенияСвойств(Настройки, РезультатаРазбора);
		
	КонецЕсли;
	Настройки.ЕстьОшибки = Отказ;
	
	ПоместитьВоВременноеХранилище(Настройки, АдресРезультата);
	
	ВывестиОшибкиПользователю();
	
КонецПроцедуры

#Область РегламентныеЗадания

// Выполняет регламентное задание по получению уведомлений от Яндекс.Кассы.
//
Процедура ПолучениеУведомленийОтЯндексКассыОбработчикЗадания() Экспорт  
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтЯндексКассы);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;  // В модели сервиса работа не разрешена
	КонецЕсли;
	
	ПолучениеУведомленийОтЯндексКассы();
	
КонецПроцедуры

// Для внутреннего использования
Процедура ПолучениеУведомленийОтЯндексКассы()
	
	Если Константы.АвтоматическиПолучатьУведомленияОтЯндексКассы.Получить() Тогда 
		
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("НастройкаЯндексКассы");
		ПараметрыПроцедуры.Вставить("ДатаНачала");
		ПараметрыПроцедуры.Вставить("ДатаОкончания");
		ПараметрыПроцедуры.Вставить("ТолькоСДоговором");
		
		// Получение данных из сервиса
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		ЗагрузитьОперацииПоЯндексКассе(ПараметрыПроцедуры, АдресРезультата);
		
		ДанныеОпераций = Новый Массив;
		Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
			Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
			Если ЗначениеЗаполнено(Результат) Тогда 
				ДанныеОпераций = Результат;
			КонецЕсли;
		КонецЕсли;
		УдалитьИзВременногоХранилища(АдресРезультата);
		
		
		// Создание документов
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("ДанныеОпераций", ДанныеОпераций);
		ИнтеграцияСЯндексКассойПереопределяемый.ОбработатьПолучениеОперацийПоЯндексКассе(ПараметрыПроцедуры,
			АдресРезультата);
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Получает данные существующего счета
//
Функция ПолучитьДанныеСчетаИзСервисаПоДокументу(ИдентификаторМагазина, ИдентификаторПлатежа, ДанныеАутентификации = Неопределено) Экспорт
	
	ДанныеСчета = Новый Структура;
	
	ДанныеСчета.Вставить("КонтактныеДанныеЭлектронногоЧека");
	ДанныеСчета.Вставить("ПлатежнаяСсылка");
	ДанныеСчета.Вставить("ХешСумма");
	ДанныеСчета.Вставить("СтатусСчета", "Новый");
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыКоманды = Новый Структура;
	
	ПараметрыКоманды.Вставить("shopId", Формат(ИдентификаторМагазина,"ЧГ="));
	ПараметрыКоманды.Вставить("orderNumber", Строка(ИдентификаторПлатежа));
	
	Если ДанныеАутентификации = Неопределено Тогда
		ПараметрыКоманды.Вставить("ДанныеАутентификации", ПолучитьДанныеАутентификации());	
	Иначе 
		ПараметрыКоманды.Вставить("ДанныеАутентификации", ДанныеАутентификации);		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.ДанныеАутентификации) Тогда
		Возврат ДанныеСчета;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	Отказ = Ложь;
	ИмяКоманды = "ПолучитьДанныеПоЗаказу";
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, РезультатКоманды, Отказ);
	
	РезультатаРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатаРазбора, Отказ);
	
	ВывестиОшибкиПользователю();
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если Отказ Тогда
		Возврат ДанныеСчета;
	КонецЕсли; 
	
	ДанныеСчета.КонтактныеДанныеЭлектронногоЧека 	= РезультатаРазбора.ДанныеXDTO.customerContact;
	ДанныеСчета.ПлатежнаяСсылка 					= РезультатаРазбора.ДанныеXDTO.OrderURL;
	ДанныеСчета.ХешСумма 							= РезультатаРазбора.ДанныеXDTO.checksum;
	
	Если РезультатаРазбора.ДанныеXDTO.Status = 1 Тогда
		ДанныеСчета.СтатусСчета = "Новый"; 
	ИначеЕсли РезультатаРазбора.ДанныеXDTO.Status = 0 И РезультатаРазбора.ДанныеXDTO.OrderState <> 2 Тогда			
		ДанныеСчета.СтатусСчета = "НеОплачен"; 
	ИначеЕсли РезультатаРазбора.ДанныеXDTO.Status = 0 И РезультатаРазбора.ДанныеXDTO.OrderState = 2 Тогда	
		ДанныеСчета.СтатусСчета = "Оплачен"; 
	КонецЕсли; 
	
	Возврат ДанныеСчета;
	
КонецФункции

// Получает данные существующего счета асинхронно
Процедура ПолучитьДанныеСчетаИзСервиса(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ДанныеИзСервиса = ПолучитьДанныеСчетаИзСервисаПоДокументу(
		ПараметрыПроцедуры.ИдентификаторМагазина, ПараметрыПроцедуры.ИдентификаторПлатежа);
	
	ПоместитьВоВременноеХранилище(ДанныеИзСервиса, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСсылкиНаСтраницуОплаты

Процедура ПлатежнаяСсылка(ПараметрыПроцедуры, АдресРезультата) Экспорт 
	
	ТекстСсылки = ПлатежнаяСсылкаПоДокументу(ПараметрыПроцедуры.ДокументСсылка, ПараметрыПроцедуры.КонтактныеДанныеЭлектронногоЧека);
	
	ПоместитьВоВременноеХранилище(ТекстСсылки, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
// Вызывается из процедуры ИнтеграцияСЯндексКассой.ПриПодготовкеШаблонаСообщения
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  НазначениеШаблона       - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт 
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;

	Если Не ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьИнтеграциюСЯндексКассой") Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НазначениеШаблона);
	Если МенеджерОбъекта = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияСЯндексКассой.ЭтоОснованиеПлатежаЧерезЯндексКассу(ТипЗнч(МенеджерОбъекта.ПустаяСсылка())) Тогда
		Если ДополнительныеПараметры.ТипШаблона = "Письмо" Тогда
			НовыйРеквизит = Реквизиты.Добавить();
			НовыйРеквизит.Имя = "КнопкаОплатитьЧерезЯндексКассу";
			НовыйРеквизит.Представление = НСтр("ru = 'Кнопка ""Оплатить через Яндекс.Кассу""'");
			
			Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
				КартинкаКнопки = Вложения.Добавить();
				КартинкаКнопки.Идентификатор = "КартинкаКнопкиДляОплатыЯндексКасса";
				КартинкаКнопки.Имя = "КартинкаКнопкиДляОплатыЯндексКасса";
				КартинкаКнопки.Представление = НСтр("ru = 'Кнопка ""Оплатить через Яндекс.Кассу""'");
				КартинкаКнопки.ТипФайла = "jpg";
				КартинкаКнопки.Реквизит = "КнопкаОплатитьЧерезЯндексКассу";
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.ТипШаблона = "SMS" Тогда
			НовыйРеквизит = Реквизиты.Добавить();
			НовыйРеквизит.Имя = "КнопкаОплатитьЧерезЯндексКассу";
			НовыйРеквизит.Представление = НСтр("ru = 'Кнопка ""Оплатить через Яндекс.Кассу""'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
// Вызывается из процедуры ИнтеграцияСЯндексКассой.ПриФормированииСообщения
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  НазначениеШаблона - Строка -  полное имя назначения шаблон сообщения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьИнтеграциюСЯндексКассой") Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НазначениеШаблона);
	Если МенеджерОбъекта = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо"
		И Сообщение.ЗначенияРеквизитов.Получить("КнопкаОплатитьЧерезЯндексКассу") <> Неопределено
		И ИнтеграцияСЯндексКассой.ЭтоОснованиеПлатежаЧерезЯндексКассу(ТипЗнч(МенеджерОбъекта.ПустаяСсылка())) Тогда
		
			Если Сообщение.ДополнительныеПараметры.Свойство("ПлатежнаяСсылка") 
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПлатежнаяСсылка) Тогда
				
				ПлатежнаяСсылка = Сообщение.ДополнительныеПараметры.ПлатежнаяСсылка;
			Иначе 
				
				// &ЗамерПроизводительности
				Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ОбщийМодуль.ИнтеграцияСЯндексКассойСлужебныйВызовСервера.ПриФормированииСообщения");
				
				ПлатежнаяСсылка = ПлатежнаяСсылкаПоДокументу(ПредметСообщения);
				
				// &ЗамерПроизводительности
				ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);

			КонецЕсли; 
			
			Если ПустаяСтрока(ПлатежнаяСсылка) Тогда 
				Возврат;
			КонецЕсли;
			
			Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
				Если Сообщение.ЗначенияРеквизитов["КнопкаОплатитьЧерезЯндексКассу"] <> Неопределено Тогда 
					HTMLТекстКнопки = "<a href='" + ПлатежнаяСсылка + "'><img src=""cid:КнопкаОплатитьЧерезЯндексКассу""></a>";
					Если Сообщение.Вложения["КнопкаОплатитьЧерезЯндексКассу"] = Неопределено Тогда
						АдресКартинки = ПоместитьВоВременноеХранилище(
							БиблиотекаКартинок.ИзображениеКнопкаОплатить.ПолучитьДвоичныеДанные());
						Сообщение.Вложения["КнопкаОплатитьЧерезЯндексКассу"] = АдресКартинки;
					КонецЕсли;
					Сообщение.ЗначенияРеквизитов["КнопкаОплатитьЧерезЯндексКассу"] = HTMLТекстКнопки;
				КонецЕсли;
			Иначе
				Сообщение.ЗначенияРеквизитов["КнопкаОплатитьЧерезЯндексКассу"] = НСтр("ru = 'Оплатить счет:'") + Символы.ПС + ПлатежнаяСсылка;
			КонецЕсли;
			
	ИначеЕсли ДополнительныеПараметры.ТипШаблона = "SMS"
		И Сообщение.ЗначенияРеквизитов.Получить("КнопкаОплатитьЧерезЯндексКассу") <> Неопределено
		И ИнтеграцияСЯндексКассой.ЭтоОснованиеПлатежаЧерезЯндексКассу(ТипЗнч(МенеджерОбъекта.ПустаяСсылка())) Тогда 
		
		Если Сообщение.ДополнительныеПараметры.Свойство("ПлатежнаяСсылка") 
			И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПлатежнаяСсылка) Тогда
			
			Сообщение.ЗначенияРеквизитов["КнопкаОплатитьЧерезЯндексКассу"] = Сообщение.ДополнительныеПараметры.ПлатежнаяСсылка;
		Иначе 
			
			// &ЗамерПроизводительности
			Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ОбщийМодуль.ИнтеграцияСЯндексКассойСлужебныйВызовСервера.ПриФормированииСообщения");
			
			Сообщение.ЗначенияРеквизитов["КнопкаОплатитьЧерезЯндексКассу"] = ПлатежнаяСсылкаПоДокументу(ПредметСообщения);	
			
			// &ЗамерПроизводительности
			ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);
			
		КонецЕсли; 
			
	КонецЕсли;
	
КонецПроцедуры

#Область ПредопределенныеШаблоныСообщений

Функция ПроверитьСоответствиеШаблоновОснованиямПлатежа() Экспорт 
	
	СоответствиеШаблонов = ПолучитьСоответствиеШаблоновОснованиямПлатежа();
	ТипыОснованияПлатежа = ИнтеграцияСЯндексКассой.ТипыОснованияПлатежаЧерезЯндексКассу();
	
	Если Не СоответствиеШаблонов.Количество() = ТипыОснованияПлатежа.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТипОснованияПлатежа из ТипыОснованияПлатежа Цикл 
		
		МетаданныеОснованияПлатежа = Метаданные.НайтиПоТипу(ТипОснованияПлатежа);
		Если МетаданныеОснованияПлатежа = Неопределено Тогда 
			Возврат Ложь;
		КонецЕсли;
		ПолноеИмяТипаОснованияПлатежа = МетаданныеОснованияПлатежа.ПолноеИмя();
		
		ДанныеШаблона = Новый Структура("ПолноеИмяТипаНазначения", ПолноеИмяТипаОснованияПлатежа);
		
		Если НайтиПредопределенныйШаблонСообщений(ДанныеШаблона, СоответствиеШаблонов).Пустая() Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьПредопределенныеШаблоныСообщений(Отказ) Экспорт
	
	МассивСозданныхШаблонов = Новый Массив;
	ПредопределенныеШаблоныСообщений =  Новый Массив;
	ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений);
	
	Если Не ПредопределенныеШаблоныСообщений.Количество() Тогда 
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	СоответствиеШаблоновОснованиямПлатежа = ПолучитьСоответствиеШаблоновОснованиямПлатежа();
	
	
	Для Каждого Шаблон из ПредопределенныеШаблоныСообщений Цикл 
		
		ШаблонСообщенийСсылка = НайтиПредопределенныйШаблонСообщений(Шаблон,
			СоответствиеШаблоновОснованиямПлатежа);
		
		Если ШаблонСообщенийСсылка.Пустая() Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
			Если ОбъектМетаданных = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, Шаблон, Истина);
			
			ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
			ПараметрыШаблона.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
			ПараметрыШаблона.Вставить("ФорматПисьма",
				ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML"));
			
			ШаблонСообщенийСсылка = ШаблоныСообщений.СоздатьШаблон(Шаблон.Наименование, ПараметрыШаблона);
			
			МассивСозданныхШаблонов.Добавить(ШаблонСообщенийСсылка);
			
		КонецЕсли;
		
		СоответствиеШаблоновОснованиямПлатежа.Вставить(Шаблон.ПолноеИмяТипаНазначения,
			ШаблонСообщенийСсылка.УникальныйИдентификатор());
		
		
	КонецЦикла;
	
	УстановитьСоответствиеШаблоновОснованиямПлатежа(СоответствиеШаблоновОснованиямПлатежа);
	
	Возврат МассивСозданныхШаблонов;
	
КонецФункции

Процедура ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений) Экспорт
	
	ИнтеграцияСЯндексКассойПереопределяемый.ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСБиблиотекойИнтернетПоддержкиПользователей

//Функция проверяет, что введены логин и пароль интернет поддержки 
//
// Возвращаемое значение:
//  Булево - признак того, что интернет поддержка пользователя подключена
//
Функция ДанныеИнтернетПоддержкиУказаны() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьДанныеАутентификации = Не ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки() = Неопределено;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЕстьДанныеАутентификации;
	
КонецФункции

#КонецОбласти

#Область СобытияЭлементовФормыНастройкиЯндексКассы

// Процедура вызывается при необходимости выполнения переопределяемых серверных вызовов из процедуры
// ИнтеграцияСЯндексКассойКлиентПереопределяемый.ПриСмененСтраницыФормыНастройкиЯндексКассы(Форма, НоваяСтраница)
// и вызывает серверную процедуру  ИнтеграцияСЯндексКассойПереопределяемый.ПриСмененСтраницыФормыНастройкиЯндексКассы(Форма, НоваяСтраница).
//
// Параметры:
//  НоваяСтраница -  Строка - Имя страницы формы.
//  ДополнительныеПараметры - Произвольные - Данные необходимые для выполнения обработчика.
//
Процедура ПриСмененСтраницыФормыНастройкиЯндексКассы(НоваяСтраница, ДополнительныеПараметры) Экспорт 
	
	ИнтеграцияСЯндексКассойПереопределяемый.ПриСмененСтраницыФормыНастройкиЯндексКассы(НоваяСтраница,
		ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбщиеНастройки()

	ОбщиеНастройки = Новый Структура();
	
	//Сервис который дает информацию об операциях по Яндекс.Кассе
	СервисУведомлений = Новый Структура("Адрес, Протокол, ИмяСервера, Порт, Таймаут, ВерсияФормата, ЗащищенноеСоединение");
	
	СервисУведомлений.Адрес = "https://kassa-yandex.1c.ru";
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СервисУведомлений.Адрес);
	СервисУведомлений.Протокол		= СтруктураURI.Схема;
	СервисУведомлений.ИмяСервера	= СтруктураURI.Хост;
	СервисУведомлений.Порт			= СтруктураURI.Порт;
	СервисУведомлений.Таймаут		= 20;
	СервисУведомлений.ВерсияФормата = "1.0.0";
	СервисУведомлений.ЗащищенноеСоединение = СервисУведомлений.Протокол = "https";
	ОбщиеНастройки.Вставить("СервисУведомлений", СервисУведомлений);
	
	//Сервис который отвечает за отображение страницы оплаты через Яндекс.Кассу в браузере
	СервисОплаты = Новый Структура("Адрес, Протокол, ИмяСервера, Порт, ПутьНаСервере, Таймаут");
	
	СервисОплаты.Адрес = "https://money.yandex.ru/eshop.xml";
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СервисОплаты.Адрес);
	СервисОплаты.Протокол			= СтруктураURI.Схема;	
	СервисОплаты.ИмяСервера 		= СтруктураURI.Хост; 
	СервисОплаты.Порт 				= СтруктураURI.Порт;
	СервисОплаты.ПутьНаСервере		= СтруктураURI.ПутьНаСервере;
	СервисОплаты.Таймаут			= 20;
	ОбщиеНастройки.Вставить("СервисОплаты", СервисОплаты);
	
	//Настройки для схемы "Без договора"
	СтраницыДляРедиректа = Новый Структура();
	СтраницыДляРедиректа.Вставить("shopFailURL", ОбщиеНастройки.СервисУведомлений.Адрес + "/cashdesk/v1/shopFailURL");
	СтраницыДляРедиректа.Вставить("shopSuccessURL", ОбщиеНастройки.СервисУведомлений.Адрес + "/cashdesk/v1/shopSuccessURL");
	ОбщиеНастройки.Вставить("СтраницыДляРедиректа", СтраницыДляРедиректа);

	
	Возврат ОбщиеНастройки;

КонецФункции

#Область ПроцедурыОбменаССервисом

#Область ОбменССервисом

Функция НастройкиСервиса()

	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, Порт, Прокси,
                                          |ЗащищенноеСоединение, Таймаут, ВерсияФормата");
	ЗаполнитьЗначенияСвойств(ПараметрыСоединения, ОбщиеНастройки().СервисУведомлений);
	ПараметрыСоединения.Прокси = ЭлектронноеВзаимодействиеСлужебный.СформироватьПрокси(ПараметрыСоединения.Протокол);
	
	Возврат ПараметрыСоединения;

КонецФункции

Процедура ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ)
	Перем ЗащищенноеСоединение;
	
	Результат = Новый Структура("КодСостояния, Данные, СообщениеОбОшибке, ПараметрыКоманды, ПараметрыВызова");

	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды = Новый Структура;
	КонецЕсли;
	
	// Получение и инициализация общих параметров соединения в сервисе.
	СохранятьПараметрыСеанса = Ложь;
	Соединение = Неопределено;
	ПараметрыСоединения = НастройкиСервиса();
	
	ПараметрыВызова = Новый Структура("АдресРесурса, Метод, Данные, Заголовки");
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, ПараметрыСоединения, Отказ);
	
	Результат.ПараметрыКоманды = ПараметрыКоманды;
	Результат.ПараметрыВызова = ПараметрыВызова;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбщегоНазначения.ЭтоLinuxСервер() И Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьОшибку("ОтсутствуетСоединениеССервером", ПараметрыСообщения, Отказ);
		Возврат;
	КонецПопытки;
	
	// Выполнение запроса HTTP к сервису.
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыВызова.АдресРесурса, ПараметрыВызова.Заголовки);
	
	Если ЗначениеЗаполнено(ПараметрыВызова.Данные) Тогда
		Если ТипЗнч(ПараметрыВызова.Данные) = Тип("ДвоичныеДанные") Тогда 
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыВызова.Данные);
		ИначеЕсли ТипЗнч(ПараметрыВызова.Данные) = Тип("Строка") Тогда 
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыВызова.Данные);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Если ПараметрыВызова.Метод = "get" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "post" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "put" Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "delete" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Length", СтрДлина(HTTPЗапрос.ПолучитьТелоКакСтроку()));
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка выполнения команды сервиса!'");
		КонецЕсли; 
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ОписаниеОшибки", ИнформацияОбОшибке().Описание);
		ПараметрыСообщения.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьОшибку("ОшибкаВыполненияКомандыСервиса", ПараметрыСообщения, Отказ);
		Возврат;
	КонецПопытки;
	
	// Обработка полученных данных.
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	НовыйРезультат = Новый Структура();
	НовыйРезультат.Вставить("ТелоОтвета", ТелоОтвета);
	Результат.Данные = НовыйРезультат;
	
	Если Результат.КодСостояния >= 400 Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса (%1).'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяКоманды);
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ТекстСообщения", ТекстСообщения);
		ПараметрыСообщения.Вставить("ТекстОшибкиСервиса",
			СтрШаблон(НСтр("ru = 'Код ошибки: %1
							|Подробно: %2'"),
							Результат.КодСостояния,
							ТелоОтвета));
		
		ОбработатьОшибку("СервисВернулОшибку", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды,
													ПараметрыКоманды,
													ПараметрыВызова,
													ПараметрыСоединения,
													Отказ)
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
	
	Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
		
		ПараметрыВызова.АдресРесурса	= "cashdesk/v1/listOperations";
		ПараметрыВызова.Метод 			= "post";
		
		Заголовки.Вставить("Authorization",	ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыТелаЗапроса = Новый Структура();
		ПараметрыТелаЗапроса.Вставить("inn",			Формат(ПараметрыКоманды.ИНН, "ЧГ="));
		ПараметрыТелаЗапроса.Вставить("kpp",			Формат(ПараметрыКоманды.КПП, "ЧГ="));
		Если ПараметрыКоманды.СДоговором Тогда
			ПараметрыТелаЗапроса.Вставить("shopId",			Формат(ПараметрыКоманды.ИдентификаторМагазина, "ЧГ="));
		КонецЕсли;
		ПараметрыТелаЗапроса.Вставить("formatVersion",	ПараметрыСоединения.ВерсияФормата);
		Если Не ПараметрыКоманды.ДатаНачала = Дата('00010101') Тогда 
			ПараметрыТелаЗапроса.Вставить("operationCreatedDatetimeGreaterOrEqual",
				Формат(ПараметрыКоманды.ДатаНачала, "ДФ=dd-MM-yyyy-HH-mm-ss"));
		КонецЕсли;
		Если Не ПараметрыКоманды.ДатаОкончания = Дата('00010101') Тогда 
			ПараметрыТелаЗапроса.Вставить("operationCreatedDatetimeLessOrEqual",
				Формат(ПараметрыКоманды.ДатаОкончания, "ДФ=dd-MM-yyyy-HH-mm-ss"));
		КонецЕсли;
			
		ПараметрыВызова.Вставить("Данные" , СформироватьТелоЗапроса(ПараметрыТелаЗапроса));
		
	ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
		
		ПараметрыВызова.АдресРесурса	= "cashdesk/v1/getSettings";
		ПараметрыВызова.Метод 			= "post";
		
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа" Тогда
		
		Заголовки.Вставить("Authorization",	ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		ПараметрыВызова.АдресРесурса	= "cashdesk/v1/createOrder";
		ПараметрыВызова.Метод 			= "post";
		ПараметрыВызова.Данные   		= СформироватьТелоЗапроса(ПараметрыКоманды);
		
	ИначеЕсли ИмяКоманды = "ПолучитьДанныеПоЗаказу" Тогда
		
		Заголовки.Вставить("Authorization",	ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		ПараметрыВызова.АдресРесурса	= "cashdesk/v1/getOrder";
		ПараметрыВызова.Метод 			= "post";
		ПараметрыВызова.Данные   		= СформироватьТелоЗапроса(ПараметрыКоманды);		
				
	Иначе
		
		ОбработатьОшибку("ОшибкаИнициализацииСервиса", , Отказ);
		
	КонецЕсли;
	
	ПараметрыВызова.Заголовки = Заголовки;
	
КонецПроцедуры

Функция СформироватьТелоЗапроса(ПараметрыТелаЗапроса)
	ТелоЗапроса = "";
	
	Для Каждого Параметр из ПараметрыТелаЗапроса Цикл 
		ТелоЗапроса =  ТелоЗапроса + ?(ПустаяСтрока(ТелоЗапроса), "", "&") + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	
	Возврат ТелоЗапроса;
КонецФункции

Процедура РазобратьДанныеСервиса(ИмяКоманды, Знач РезультатКоманды, РезультатРазбора, Отказ, БлокироватьСообщенияОбОшибках = Ложь)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатРазбора = Новый Структура();
	ОжидаемыеТипыXDTO = Новый Соответствие();
	ОжидаемыеТипыXDTO.Вставить("ЗагрузитьОперацииПоЯндексКассе", "ListOperationsResponce");
	ОжидаемыеТипыXDTO.Вставить("ПолучитьНастройки", "GetSettingsResponce");
	ОжидаемыеТипыXDTO.Вставить("ОбновитьДанныеЗаказа", "CreateOrderResponce");
	ОжидаемыеТипыXDTO.Вставить("ПолучитьДанныеПоЗаказу", "CreateOrderResponce");
	
	ОбъектXDTO = Неопределено;
	
	Если ЗначениеЗаполнено(РезультатКоманды.Данные.ТелоОтвета) Тогда
		ПрочитатьТелоОтветаИПреобразоватьВОбъектXDTO(РезультатКоманды.Данные.ТелоОтвета,
			ОжидаемыеТипыXDTO.Получить(ИмяКоманды), ОбъектXDTO, ИмяКоманды,Отказ);
		РезультатРазбора.Вставить("ДанныеXDTO", ОбъектXDTO);
		ПрочитатьЗаголовокОтвета(ИмяКоманды, РезультатРазбора);
	Иначе
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ОбработатьОшибку("ПустоеТелоОтвета", ПараметрыСообщения, Отказ); 
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Обработка ошибок сервиса.
	ОбработатьОшибкиСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ, БлокироватьСообщенияОбОшибках);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Непосредственный разбор данных которые вернул сервис
	Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
		
		НастройкаЯндексКассы = РезультатКоманды.ПараметрыКоманды.НастройкаЯндексКассы;
		
		МассивОпераций = Новый Массив;
		ПрочитатьОперацииПоЯндексКассе(МассивОпераций, ОбъектXDTO, АналитикиУчетаОпераций(НастройкаЯндексКассы), Отказ);
		РезультатРазбора.Вставить("МассивОпераций", МассивОпераций);
		
		Если Не ОбъектXDTO.Settings = Неопределено Тогда 
			РезультатРазбора.Вставить("Настройки", Новый Структура());
			ПрочитатьНастройкиИзДанныхСервиса(РезультатРазбора.Настройки, ОбъектXDTO)
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
		
		ПрочитатьНастройкиИзДанныхСервиса(РезультатРазбора, ОбъектXDTO);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗаголовокОтвета(ИмяКоманды, НовыйРезультат)
	
	Если НовыйРезультат.ДанныеXDTO = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
		ПрочитатьСвойство(НовыйРезультат, "Количество",        "Count");
		ПрочитатьСвойство(НовыйРезультат, "КодСостояния",      "status");
		ПрочитатьСвойство(НовыйРезультат, "ОписаниеСостояния", "techMessage");
		ПрочитатьСвойство(НовыйРезультат, "ДатаОтвета",        "requestDatetime");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСвойство(Результат, ИмяСвойстваРезультата, ИмяСвойстваXDTO)
	
	Значение = "";
	Если СвойствоXDTO(Результат.ДанныеXDTO, ИмяСвойстваXDTO, Значение) Тогда 
		Если ТипЗнч(Значение) = Тип("Строка") Тогда 
			Значение = РаскодироватьСтроку(Значение, СпособКодированияСтроки.URLВКодировкеURL);
		КонецЕсли;
		Результат.Вставить(ИмяСвойстваРезультата, Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция СвойствоXDTO(Знач ОбъектXDTO, Знач Свойство, Значение)
	
	Если Не ОбъектXDTO.Свойства().Получить(Свойство) = Неопределено Тогда 
		Если ТипЗнч(ОбъектXDTO[Свойство]) = Тип("СписокXDTO") Тогда 
			Значение = ОбъектXDTO.ПолучитьСписок(Свойство);
		Иначе
			Значение = ОбъектXDTO.Получить(Свойство);
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Процедура ПрочитатьТелоОтветаИПреобразоватьВОбъектXDTO(ТелоОтвета, ИмяОжидаемогоТипаXDTO, ОбъектXDTО, ИмяКоманды, Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ВерсияФорматаДанных = "";
		
	Если Не СтрЧислоВхождений(ТелоОтвета, ИмяОжидаемогоТипаXDTO) Тогда 
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ИмяОжидаемогоТипа", ИмяОжидаемогоТипаXDTO);
		ОбработатьОшибку("НеНайденыОжидаемыеДанныеВТелеОтвета", ПараметрыСообщения, Отказ); 
		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(ТелоОтвета, Новый ПараметрыЧтенияXML());
		ТипФабрики = ФабрикаXDTO.Тип("http://yamoney.1c.ru/XMLSchema", ИмяОжидаемогоТипаXDTO);
		ОбъектXDTО = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипФабрики);
		ЧтениеXML.Закрыть();
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ИнформацияОбОшибке", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбработатьОшибку("НеУдалосьПреобразоватьТелоОтветВОбъектXDTO", ПараметрыСообщения, Отказ);
		Возврат;
	КонецПопытки;
	
	
	Попытка
		ОбъектXDTО.Проверить();
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыСообщения.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбработатьОшибку("СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой", ПараметрыСообщения, Отказ); 
	КонецПопытки;
	
КонецПроцедуры

Функция ВерсияФорматаДанныхПоддерживается(ТелоОтвета, ВерсияФорматаДанных)
	
	СимволКавычка = Символ(34);
	АдресНачалаПоиска = СтрНайти(ТелоОтвета, "formatVersion");
	ПерваяКавычка = СтрНайти(ТелоОтвета, СимволКавычка,,АдресНачалаПоиска, 1) + 1;
	ВтораяКавычка = СтрНайти(ТелоОтвета, СимволКавычка,,АдресНачалаПоиска, 2);
	ВерсияФорматаДанных = Сред(ТелоОтвета, ПерваяКавычка, ВтораяКавычка - ПерваяКавычка);
	
	Возврат ВерсияФорматаДанных = ОбщиеНастройки().СервисУведомлений.ВерсияФормата;
	
КонецФункции

Процедура ОбработатьОшибкиСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ, БлокироватьСообщенияОбОшибках)
	
	Если Не БлокироватьСообщенияОбОшибках Тогда
		
		ТекстСообщения = "";
		
		Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
			ТекстСообщения = НСтр("ru='Ошибка выполнения загрузки операций по Яндекс.Кассе'");
		ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
			ТекстСообщения = НСтр("ru='Ошибка получения настроек'");
		КонецЕсли;
		
		ПодробныйТекстОшибки = "";
		Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
			Если ТипЗнч(РезультатРазбора) = Тип("Структура") Тогда
				Если Не РезультатРазбора.КодСостояния = 0 Тогда // ошибка
					ТекстОшибкиСервиса = РезультатРазбора.ОписаниеСостояния;
				КонецЕсли;
				Если Не ПустаяСтрока(ТекстОшибкиСервиса) Тогда
					ПодробныйТекстОшибки = СтрШаблон(НСтр("ru='Ошибка выполнения для организации %1. Подробности: %2.'"),
						РезультатКоманды.ПараметрыКоманды.Организация, ТекстОшибкиСервиса);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		ВидОперации = СтрШаблон(НСтр("ru = 'Команда ""%1"".'"), ИмяКоманды);

		СообщениеОбОшибке = СтрШаблон("%1 %2", ВидОперации, ПодробныйТекстОшибки);
		
		Если Не ПустаяСтрока(ПодробныйТекстОшибки) Тогда 
			ПараметрыСообщения = Новый Структура();
			ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
			ПараметрыСообщения.Вставить("ТекстСообщения", ТекстСообщения);
			ПараметрыСообщения.Вставить("ТекстОшибкиСервиса", СообщениеОбОшибке);
		
			ОбработатьОшибку("СервисВернулОшибку", ПараметрыСообщения, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗагрузкиОперацииПоЯндексКассе

Функция ПараметрыДляЗагрузкиОпераций(Знач Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата",           Дата('00010101'));
	Запрос.УстановитьПараметр("НастройкаЯндексКассы", Параметры.НастройкаЯндексКассы);
	Запрос.УстановитьПараметр("ТолькоСДоговором",     Параметры.ТолькоСДоговором);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЯндексКассы.Ссылка КАК             НастройкаЯндексКассы,
		|	ЕСТЬNULL(СтатусОбменовСЯндексКассой.ДатаПоследнегоУспешногоОбмена, &ПустаяДата) КАК ДатаПоследнегоУспешногоОбмена,
		|	НастройкиЯндексКассы.Организация.ИНН        КАК ИНН,
		|	НастройкиЯндексКассы.Организация.КПП        КАК КПП,
		|	НастройкиЯндексКассы.Организация            КАК Организация,
		|	НастройкиЯндексКассы.ИдентификаторМагазина  КАК ИдентификаторМагазина,
		|	НастройкиЯндексКассы.ИдентификаторВитрины   КАК ИдентификаторВитрины,
		|	НастройкиЯндексКассы.СДоговором             КАК СДоговором
		|ИЗ
		|	Справочник.НастройкиЯндексКассы КАК НастройкиЯндексКассы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусОбменовСЯндексКассой КАК СтатусОбменовСЯндексКассой
		|		ПО НастройкиЯндексКассы.Ссылка = СтатусОбменовСЯндексКассой.НастройкаЯндексКассы
		|ГДЕ
		|	НЕ НастройкиЯндексКассы.Недействительна
		|	И НЕ НастройкиЯндексКассы.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &НастройкаЯндексКассы <> НЕОПРЕДЕЛЕНО
		|				ТОГДА НастройкиЯндексКассы.Ссылка = &НастройкаЯндексКассы
		|			КОГДА &ТолькоСДоговором <> НЕОПРЕДЕЛЕНО
		|				ТОГДА НастройкиЯндексКассы.СДоговором = &ТолькоСДоговором
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
	Параметры = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры);
	
КонецФункции

Процедура ПрочитатьОперацииПоЯндексКассе(МассивОпераций, ДанныеXDTO, АналитикиУчетаОпераций, Отказ)
	
	Если ДанныеXDTO.Count > 0 Тогда 
		СписокОпераций = ДанныеXDTO.ПолучитьСписок("OperationInfo");
		Для Каждого Операция из СписокОпераций Цикл 
			Если Не Операция.PaymentData = Неопределено Тогда		// Оплаты
				ПрочитатьОперацию(МассивОпераций, Операция, "PaymentData", АналитикиУчетаОпераций, Отказ);
			ИначеЕсли Не Операция.RefundData = Неопределено Тогда	// Возвраты
				ПрочитатьОперацию(МассивОпераций, Операция, "RefundData", АналитикиУчетаОпераций, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОперацию(МассивОпераций, ДанныеXDTO, ТипОперации, АналитикиУчетаОпераций, Отказ)
	
	Операция = Новый Структура();

	Операция.Вставить("ДанныеXDTO", ДанныеXDTO[ТипОперации]);

	ПрочитатьСвойство(Операция, "ИдентификаторТранзакции", "invoiceId");
	ПрочитатьСвойство(Операция, "ИдентификаторПлатежа",    "orderNumber");
	ПрочитатьСвойство(Операция, "ИдентификаторМагазина",   "shopid");
	
	Операция.Вставить("СДоговором", Операция.ИдентификаторМагазина > 0);
	
	АналитикиОперации = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(АналитикиУчетаОпераций);
	Если Не Операция.СДоговором Тогда 
		СписокСвойств = "НастройкаЯндексКассы, Организация";
	Иначе
		СписокСвойств = Неопределено; // Все
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(АналитикиОперации, АналитикиУчетаОпераций, СписокСвойств);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Операция, АналитикиОперации);
	
	Если ТипОперации = "PaymentData" Тогда	// Оплаты
		
		Операция.Вставить("ВидОперации", "Оплата");
		
		// Получение простых типов
		ПрочитатьСвойство(Операция, "ДатаОплаты",                              "paymentDatetime");
		ПрочитатьСвойство(Операция, "СуммаДокумента",                          "orderSumAmount");
		ПрочитатьСвойство(Операция, "ВалютаДокумента",                         "orderSumCurrencyPaycash");
		ПрочитатьСвойство(Операция, "СуммаКЗачислениюНаСчетОрганизации",       "shopSumAmount");
		ПрочитатьСвойство(Операция, "ВалютаСуммыКЗачислениюНаСчетОрганизации", "shopSumCurrencyPaycash");
		ПрочитатьСвойство(Операция, "СпособОплаты",                            "paymentType");
		ПрочитатьСвойство(Операция, "ИННОрганизации",                          "Inn");
		ПрочитатьСвойство(Операция, "НаименованиеБанкаОрганизации",            "supplierBankName");
		ПрочитатьСвойство(Операция, "НаименованиеПолноеОрганизации",           "supplierName");
		ПрочитатьСвойство(Операция, "НаименованиеБанкаОрганизации",            "supplierBankName");
		ПрочитатьСвойство(Операция, "БикБанкаОрганизации",                     "BankBIK");
		ПрочитатьСвойство(Операция, "КоррСчетБанкаОрганизации",                "BankCorAccount");
		ПрочитатьСвойство(Операция, "НомерРасчетногоСчетаОрганизации",         "CustAccount");
		ПрочитатьСвойство(Операция, "НазначениеПлатежа",                       "paymentName");
		
		// Данные о чеке
		
		ПрочитатьСвойство(Операция, "ДатаФормированияЧека",       			   	"penReceiptDateTime");
		ПрочитатьСвойство(Операция, "СуммаЧека",								"penReceiptTotal");
		ПрочитатьСвойство(Операция, "НомерФискальногоНакопителя",              	"penFnNumber");
		ПрочитатьСвойство(Операция, "ФискальныйНомерДокумента",         		"penFiscalDocumentNumber");
		ПрочитатьСвойство(Операция, "ФискальныйПризнакДокумента",				"penFiscalDocumentAttribute");
		ПрочитатьСвойство(Операция, "КонтактныеДанныеЭлектронногоЧека",			"customerContact");
		
		// Получение ссылочных значений
		Операция.Вставить("ВалютаДокумента", НайтиВалюту(Операция.ВалютаДокумента));
		Операция.Вставить("ВалютаСуммыКЗачислениюНаСчетОрганизации",
			НайтиВалюту(Операция.ВалютаСуммыКЗачислениюНаСчетОрганизации));
		Операция.Вставить("СпособОплаты", СпособОплаты(Операция.СпособОплаты));
		
	ИначеЕсли ТипОперации = "RefundData" Тогда	// Возвраты
		
		Операция.Вставить("ВидОперации", "Возврат");
		
		// Получение простых типов
		ПрочитатьСвойство(Операция, "ИдентификаторВозврата",           "returnId");
		ПрочитатьСвойство(Операция, "СуммаДокумента",                  "amount");
		ПрочитатьСвойство(Операция, "ВалютаДокумента",                 "currency");
		ПрочитатьСвойство(Операция, "ОписаниеПричиныВозврата",         "cause");
		ПрочитатьСвойство(Операция, "ДатаРегистрацииЗапросаНаВозврат", "createdDatetime");
		ПрочитатьСвойство(Операция, "ДатаИсполненияЗапросаНаВозврат",  "processedDatetime");
		ПрочитатьСвойство(Операция, "ОтправительЗапросаНаВозврат",     "sender");
		
		// Получение ссылочных значений
		Операция.Вставить("ВалютаДокумента", НайтиВалюту(Операция.ВалютаДокумента));
		
	КонецЕсли;
	
	Операция.Удалить("ДанныеXDTO");
	
	МассивОпераций.Добавить(Операция);
	
КонецПроцедуры

Функция ОперацииВТекстовомФормате(МассивОпераций, Параметры)
	
	
	Секции = Новый Массив;
	Получатель = "";
	РасчетныйСчет = "";
	СуммаПоступило = 0;
	Для Каждого Операция из МассивОпераций Цикл 
		
		Если Операция.СДоговором Тогда 
			Продолжить;
		КонецЕсли;
		
		Секции.Добавить(ДанныеОперацииВТекстовомФормате(Операция));
		
		Если ПустаяСтрока(Получатель) Тогда 
			Получатель = Операция.НаименованиеПолноеОрганизации;
		КонецЕсли;
		Если ПустаяСтрока(РасчетныйСчет) Тогда 
			РасчетныйСчет = Операция.НомерРасчетногоСчетаОрганизации;
		КонецЕсли;
		
		СуммаПоступило = СуммаПоступило + Операция.СуммаДокумента;
		
	КонецЦикла;
	
	Заголовок = СтрШаблон(
		"1CClientBankExchange
		|ВерсияФормата=1.02
		|Кодировка=Windows
		|Отправитель=
		|Получатель=%1
		|ДатаНачала=%2
		|ДатаКонца=%3
		|РасчСчет=%4
		|СекцияРасчСчет
		|ДатаНачала=%2
		|ДатаКонца=%2
		|РасчСчет=%4
		|ВсегоПоступило=%5
		|ВсегоСписано=
		|КонечныйОстаток=
		|КонецРасчСчет",
		Получатель,                                       // Получатель
		Формат(Параметры.ДатаНачала,"ДЛФ=D"),             // ДатаНачала, ДатаКонца
		Формат(Параметры.ДатаОкончания,"ДЛФ=D"),          // ДатаКонца
		РасчетныйСчет,                                    // РасчСчет
		СуммаПоступило);                                  // ВсегоПоступило
		
	СекцииСтрокой = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Секции, Символы.ПС);
	
	Возврат Заголовок + Символы.ПС + СекцииСтрокой + ?(ПустаяСтрока(СекцииСтрокой), "", Символы.ПС) + "КонецФайла";
	
КонецФункции

Функция ДанныеОперацииВТекстовомФормате(Операция)
	
	ОперацияТекстом =
		"СекцияДокумент=Операция по Яндекс.Кассе
		|Номер=%1
		|Дата=%2
		|Сумма=%3
		|ПлательщикСчет=
		|Плательщик=
		|ПлательщикИНН=
		|ПлательщикБанк1=
		|ПлательщикБИК=
		|ПолучательСчет=%4
		|ДатаПоступило=%2
		|Получатель=
		|ПолучательИНН=%5
		|ПолучательРасчСчет=%4
		|ПолучательБанк1=
		|ПолучательБИК=%6
		|ВидОплаты=01
		|Код=%7
		|НазначениеПлатежа=
		|НазначениеПлатежа1=
		|Очередность=5
		|КонецДокумента";
						
	Возврат СтрШаблон(ОперацияТекстом,
						НСтр("ru = 'б/н'"),                             // Номер
						Формат(Операция.ДатаОплаты,"ДЛФ=D"),            // Дата, ДатаПоступило
						Операция.СуммаДокумента,                        // Сумма
						Операция.НомерРасчетногоСчетаОрганизации,       // ПолучательСчет, ПолучательРасчСчет
						Операция.ИННОрганизации,                        // ПолучательИНН
						Операция.БикБанкаОрганизации,                   // ПолучательБИК
						Операция.ИдентификаторПлатежа);                 // Код
КонецФункции

Функция НайтиВалюту(КодВалютыЯндекса)
	
	Если КодВалютыЯндекса = 10643 или КодВалютыЯндекса = Неопределено Тогда // тестовая валюта (демо-рубли в демо-сервисе Яндекс.Денег).
		Возврат Справочники.Валюты.НайтиПоКоду("643"); //Рубль.
	Иначе
		Возврат Справочники.Валюты.НайтиПоКоду(КодВалютыЯндекса);
	КонецЕсли;

КонецФункции

Функция СпособОплаты(Значение)

	Если Значение = Неопределено 
		ИЛИ Метаданные.Перечисления.СпособыОплатыЧерезЯндексКассу.ЗначенияПеречисления.Найти(Значение) = Неопределено Тогда 
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Перечисления.СпособыОплатыЧерезЯндексКассу[Значение];
	
КонецФункции

Функция АналитикиУчетаОпераций(НастройкаЯндексКассы)
	
	АналитикиУчетаОпераций = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаЯндексКассы", НастройкаЯндексКассы);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиЯндексКассы.Ссылка КАК НастройкаЯндексКассы,
	               |	НастройкиЯндексКассы.Организация,
	               |	НастройкиЯндексКассы.БанковскийСчет,
	               |	НастройкиЯндексКассы.СтатьяДвиженияДенежныхСредствОплаты,
	               |	НастройкиЯндексКассы.СтатьяДвиженияДенежныхСредствВозвраты,
	               |	НастройкиЯндексКассы.СтатьяРасходов,
	               |	НастройкиЯндексКассы.АналитикаРасходов,
	               |	НастройкиЯндексКассы.Подразделение,
	               |	НастройкиЯндексКассы.Эквайер,
	               |	НастройкиЯндексКассы.ОтправкаЧековЧерезЯндекс
	               |ИЗ
	               |	Справочник.НастройкиЯндексКассы КАК НастройкиЯндексКассы
	               |ГДЕ
	               |	НастройкиЯндексКассы.Ссылка = &НастройкаЯндексКассы";
	РезультатЗапроса = Запрос.Выполнить();
	КолонкиЗапроса = РезультатЗапроса.Колонки;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда 
		Для Каждого Колонка из КолонкиЗапроса Цикл 
			Если ЗначениеЗаполнено(Выборка[Колонка.Имя]) Тогда 
				АналитикиУчетаОпераций.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат АналитикиУчетаОпераций;
	
КонецФункции

Процедура ОбновитьНастройкуЯндексКассы(НастройкаСсылка, Параметры, Отказ)
	
	Попытка
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НастройкаОбъект, Параметры);
		НастройкаОбъект.Записать();
	Исключение
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ЗагрузитьОперацииПоЯндексКассе");
		ПараметрыСообщения.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьОшибку("ОшибкаОбновленияНастройкиПриЗагрузкеОпераций", ПараметрыСообщения, Отказ); 
	КонецПопытки;
	
КонецПроцедуры


#КонецОбласти

#Область ПроцедурыПолученияНастроек

Процедура ПрочитатьНастройкиИзДанныхСервиса(Результат, ДанныеXDTO)
	
	ДанныеНастроек = Неопределено;
	Если СвойствоXDTO(ДанныеXDTO, "Settings", ДанныеНастроек) 
		И Не ДанныеНастроек = Неопределено Тогда
		
		Результат.Вставить("ДанныеXDTO", ДанныеНастроек);
		ПрочитатьСвойство(Результат, "ИдентификаторМагазина", "shopid");
		ПрочитатьСвойство(Результат, "ИдентификаторВитрины",  "scid");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область ФормированиеСсылкиНаСтраницуОплаты

Функция ПлатежнаяСсылкаПоДокументу(ДокументСсылка, КонтактныеДанныеЭлектронногоЧека = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	ТекстСсылки = "";
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьИнтеграциюСЯндексКассой") Тогда 
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ПолучениеПлатежнойСсылки");
		ОбработатьОшибку("НеВключенаФункциональнаяОпция", ПараметрыСообщения, Отказ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ПолучениеПлатежнойСсылки");
		ОбработатьОшибку("НеВключенаИПП", ПараметрыСообщения, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВывестиОшибкиПользователю();
		Возврат ТекстСсылки;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыКоманды = Новый Структура();
	
	ПараметрыКоманды.Вставить("ДанныеАутентификации",
		"Basic " + ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(
		ДанныеАутентификации.Логин + ":" + ДанныеАутентификации.Пароль));
		
	Отказ = Ложь;	
	
	ПараметрыКоманды.Вставить("ДокументСсылка", ДокументСсылка);

	ЗаполнитьПараметрыПлатежнойСсылки(ПараметрыКоманды, Отказ);
					
	////////////////////////////////////////////////////////////////////////////////
	
	Если НЕ ЗначениеЗаполнено(КонтактныеДанныеЭлектронногоЧека) 
		И ПараметрыКоманды.ОтправкаЧековЧерезЯндекс Тогда
		
		КонтактныеДанныеЭлектронногоЧека = ИнтеграцияСЯндексКассойПереопределяемый.ПолучитьПредопределенныеКонтакты(ДокументСсылка);
	КонецЕсли; 
	
	ЗаполнитьJSONПараметры(ПараметрыКоманды, КонтактныеДанныеЭлектронногоЧека, Отказ);
		
	////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыТелаСсылки = Новый Структура;
	
	Если НЕ Отказ Тогда
		ПараметрыТелаСсылки = ЗаполнитьПараметрыТелаСсылки(ПараметрыКоманды);	
	КонецЕсли; 
	
	ПараметрыТелаСсылки.Вставить("ДанныеАутентификации", ПараметрыКоманды.ДанныеАутентификации);
	
	ИмяКоманды = "ОбновитьДанныеЗаказа";
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыТелаСсылки, РезультатКоманды, Отказ);
	
	РезультатаРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатаРазбора, Отказ);
	
	ВывестиОшибкиПользователю();
	
	Если НЕ Отказ Тогда
		ТекстСсылки = РезультатаРазбора.ДанныеXDTO.OrderURL;	
	КонецЕсли;
	
	Возврат ТекстСсылки; 
	
КонецФункции

#Область ФормированиеСсылки

Процедура ПолучитьПараметрыДляФормированияПлатежнойСсылки(ПараметрыПлатежнойСсылки, Отказ)
	
	ЗаполнитьПараметрыПлатежнойСсылки(ПараметрыПлатежнойСсылки, Отказ);
	
	// Переопределение и дополнение параметров
	ИнтеграцияСЯндексКассойПереопределяемый.ПриФормированииПлатежнойСсылки(ПараметрыПлатежнойСсылки, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПлатежнойСсылки(ПараметрыПлатежнойСсылки, Отказ)
	
	Если Не ЭтоСсылкаНаОснованиеПлатежаДляОплатыЧерезЯндексКассу(ПараметрыПлатежнойСсылки.ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЗаполнитьЗначениямиРеквизитовДокументаОснования(ПараметрыПлатежнойСсылки.ДокументСсылка,
		ПараметрыПлатежнойСсылки, Отказ);
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначениямиРеквизитовНастройкиЯндексКассыПоОрганизации(ПараметрыПлатежнойСсылки, Отказ);
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступныеВалюты = Новый Массив;
	ДоступныеВалюты.Добавить(Справочники.Валюты.НайтиПоКоду("643")); //Рубль;
	ПараметрыПлатежнойСсылки.Вставить("ДоступнаяВалютаДокумента", ДоступныеВалюты);
	
	ПараметрыПлатежнойСсылки.Вставить("МаксимальнаяСуммаСчета", 15000);
	
	ПараметрыПлатежнойСсылки.Вставить("ИдентификаторПлатежа",
		ПолучитьУникальныйИдентификаторПлатежа(ПараметрыПлатежнойСсылки.ДокументСсылка));
		
	ПараметрыПлатежнойСсылки.Вставить("НаименованиеПлательщика",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПлатежнойСсылки.Контрагент, "Наименование"));
		
	НомераНаПечать = ПараметрыПлатежнойСсылки.Номер;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрефиксацияОбъектов") Тогда 
		МодульПрефиксацияОбъектовКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		НомераНаПечать = МодульПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомераНаПечать, Ложь, Истина);
	КонецЕсли;
	ПараметрыПлатежнойСсылки.Вставить("НомерСчета", НомераНаПечать);
	
	ПараметрыПлатежнойСсылки.Вставить("ИдентификаторПлательщика", 
		ИдентификаторПлательщика(ПараметрыПлатежнойСсылки.Контрагент));

	Если ПараметрыПлатежнойСсылки.СДоговором Тогда  // схема "С договором"
					
		ПараметрыПлатежнойСсылки.Вставить("НазначениеПлатежа",
			СтрШаблон(НСтр("ru = 'По счету № %1 от %2'"),
				ПараметрыПлатежнойСсылки.НомерСчета,
				Формат(ПараметрыПлатежнойСсылки.Дата, "ДЛФ=DD")));
			
	
	Иначе											// схема "Без договора"
		
		ПараметрыПлатежнойСсылки.Вставить("НаименованиеПолноеОрганизации");
		ПараметрыПлатежнойСсылки.Вставить("ИННОрганизации");
		ПараметрыПлатежнойСсылки.Вставить("КППОрганизации"); 
		ПараметрыПлатежнойСсылки.Вставить("НаименованиеБанкаОрганизации");
		ПараметрыПлатежнойСсылки.Вставить("БикБанкаОрганизации");
		ПараметрыПлатежнойСсылки.Вставить("КоррСчетБанкаОрганизации");
		ПараметрыПлатежнойСсылки.Вставить("НомерРасчетногоСчетаОрганизации");
												
		ИмяСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
		ИмяСправочникаБанковскиеСчетаОрганизаций = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("БанковскиеСчетаОрганизаций");
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОрганизацияСсылка",    ПараметрыПлатежнойСсылки.Организация);
		Запрос.УстановитьПараметр("БанковскийСчетСсылка", ПараметрыПлатежнойСсылки.БанковскийСчет);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	Организации.ИНН 								КАК ИННОрганизации,
						|	Организации.КПП 								КАК КППОрганизации,
						|	Организации.НаименованиеПолное 					КАК НаименованиеПолноеОрганизации,
						|	БанковскиеСчетаОрганизаций.НомерСчета 			КАК НомерРасчетногоСчетаОрганизации,
						|	БанковскиеСчетаОрганизаций.Банк.Наименование 	КАК НаименованиеБанкаОрганизации,
						|	БанковскиеСчетаОрганизаций.Банк.Код 			КАК БикБанкаОрганизации,
						|	БанковскиеСчетаОрганизаций.Банк.КоррСчет 		КАК КоррСчетБанкаОрганизации
						|ИЗ
						|	&Организации КАК Организации
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
						|		ПО Организации.Ссылка = БанковскиеСчетаОрганизаций.Владелец
						|			И (БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчетСсылка)
						|ГДЕ
						|	Организации.Ссылка = &ОрганизацияСсылка";
						
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Организации",                "Справочник." + ИмяСправочникаОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&БанковскиеСчетаОрганизаций", "Справочник." + ИмяСправочникаБанковскиеСчетаОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежнойСсылки, Выборка);
	КонецЕсли;

	ПараметрыПлатежнойСсылки.Вставить("НазначениеПлатежа",
		СтрШаблон(НСтр("ru = 'По счету № %1 от %2 %3 %4'"),
			ПараметрыПлатежнойСсылки.НомерСчета,
			Формат(ПараметрыПлатежнойСсылки.Дата, "ДЛФ=DD"),
			ПараметрыПлатежнойСсылки.ИННОрганизации,
			ПараметрыПлатежнойСсылки.НаименованиеПолноеОрганизации));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениямиРеквизитовДокументаОснования(Знач ДокументСсылка, ПараметрыПлатежнойСсылки, Отказ)
	
	ПараметрыСообщения = Новый Структура("СсылкаНаОбъект", ДокументСсылка);
	
	// Получение соответствия реквизитов документов
	Реквизиты = РеквизитыДокументаОснования(ДокументСсылка);
	Если Не Реквизиты.Количество() Тогда 
		ОбработатьОшибку("ФормированиеСсылкиПолучениеРеквизитовДокумента", ПараметрыСообщения, Отказ); 
		Возврат;
	КонецЕсли;
	
	// Получение значения реквизитов
	ЗначенияРеквизитовДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, Реквизиты);
	
	// Проверки 
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовДокумента.Организация) Тогда
		ПараметрыСообщения.Вставить("ПредставлениеРеквизита", НСтр("ru = 'организация'"));
		ОбработатьОшибку("ФормированиеСсылкиПроверкаЗаполненияРеквизитов", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовДокумента.Контрагент) Тогда 
		ПараметрыСообщения.Вставить("ПредставлениеРеквизита", НСтр("ru = 'контрагент'"));
		ОбработатьОшибку("ФормированиеСсылкиПроверкаЗаполненияРеквизитов", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовДокумента.БанковскийСчет) Тогда
		ПараметрыСообщения.Вставить("ПредставлениеРеквизита", НСтр("ru = 'банковский счет'"));
		ОбработатьОшибку("ФормированиеСсылкиПроверкаЗаполненияРеквизитов", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовДокумента.СуммаДокумента) Тогда
		ПараметрыСообщения.Вставить("ПредставлениеРеквизита", НСтр("ru = 'сумма документа'"));
		ОбработатьОшибку("ФормированиеСсылкиПроверкаЗаполненияРеквизитов", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовДокумента.ВалютаДокумента) Тогда
		ПараметрыСообщения.Вставить("ПредставлениеРеквизита", НСтр("ru = 'валюта документа'"));
		ОбработатьОшибку("ФормированиеСсылкиПроверкаЗаполненияРеквизитов", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовДокумента.Номер) Тогда
		ПараметрыСообщения.Вставить("ПредставлениеРеквизита", НСтр("ru = 'номер документа'"));
		ОбработатьОшибку("ФормированиеСсылкиПроверкаЗаполненияРеквизитов", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовДокумента.Дата) Тогда
		ПараметрыСообщения.Вставить("ПредставлениеРеквизита", НСтр("ru = 'дата документа'"));
		ОбработатьОшибку("ФормированиеСсылкиПроверкаЗаполненияРеквизитов", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	// Заполнение параметров
	Для Каждого Реквизит из ЗначенияРеквизитовДокумента Цикл 
		ПараметрыПлатежнойСсылки.Вставить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	ПараметрыПлатежнойСсылки.Вставить("УникальныйИдентификаторДокументаОснования",
		Строка(ДокументСсылка.УникальныйИдентификатор()))
	
КонецПроцедуры

Процедура ЗаполнитьЗначениямиРеквизитовНастройкиЯндексКассыПоОрганизации(ПараметрыПлатежнойСсылки, Отказ)
	
	// Получение настройки Яндекс.Кассы
	КлючиПоиска = Новый Структура();
	КлючиПоиска.Вставить("Организация", ПараметрыПлатежнойСсылки.Организация);
	НастройкаЯндексКассы = Справочники.НастройкиЯндексКассы.НайтиНастройку(КлючиПоиска);
	
	// Проверка 
	Если НастройкаЯндексКассы.Пустая() Тогда 
		ОбработатьОшибку("ФормированиеСсылкиНеНайденаДействительнаяНастройка", ПараметрыПлатежнойСсылки.Организация, Отказ); 
		Возврат;
	КонецЕсли;
	
	// Получение значений реквизитов настройки
	Реквизиты = "БанковскийСчет, ИдентификаторМагазина, ИдентификаторВитрины, СДоговором, ОтправкаЧековЧерезЯндекс";
	ЗначенияРеквизитовНастройкиЯндекс = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЯндексКассы, Реквизиты);
	
	// Заполнение параметров
	Для Каждого Реквизит из ЗначенияРеквизитовНастройкиЯндекс Цикл
		Если Реквизит.Ключ = "БанковскийСчет" Тогда
			Если Не ЗначенияРеквизитовНастройкиЯндекс.СДоговором Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПлатежнойСсылки.Вставить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	ПараметрыПлатежнойСсылки.Вставить("НастройкаЯндексКассы", НастройкаЯндексКассы);
	
КонецПроцедуры

Функция РеквизитыДокументаОснования(Знач ДокументСсылка)
	
	Реквизиты = Новый Структура;
	
	СоответствиеИменОбщепринятыхРеквизитов = Новый Соответствие;
	СоответствиеИменОбщепринятыхРеквизитов.Вставить("Организация",     "Организация");
	СоответствиеИменОбщепринятыхРеквизитов.Вставить("Контрагент",      "Контрагент");
	СоответствиеИменОбщепринятыхРеквизитов.Вставить("БанковскийСчет",  "БанковскийСчет");
	СоответствиеИменОбщепринятыхРеквизитов.Вставить("СуммаДокумента",  "СуммаДокумента");
	СоответствиеИменОбщепринятыхРеквизитов.Вставить("ВалютаДокумента", "ВалютаДокумента");
	СоответствиеИменОбщепринятыхРеквизитов.Вставить("Номер",           "Номер");
	СоответствиеИменОбщепринятыхРеквизитов.Вставить("Дата",            "Дата");
	
	ТипыОснованияПлатежа = ИнтеграцияСЯндексКассой.ТипыОснованияПлатежаЧерезЯндексКассу();
	СоответствиеРеквизитов = Новый Соответствие;
	Для Каждого ТипОснованияПлатежа из ТипыОснованияПлатежа Цикл 
		
		МетаданныеОснованияПлатежа = Метаданные.НайтиПоТипу(ТипОснованияПлатежа);
		Если МетаданныеОснованияПлатежа = Неопределено Тогда 
			Возврат "";
		КонецЕсли;
		ПолноеИмяТипаОснованияПлатежа = МетаданныеОснованияПлатежа.ПолноеИмя();
		
		Для Каждого ЭлементСоответствия из СоответствиеИменОбщепринятыхРеквизитов Цикл 
			СоответствиеРеквизитов.Вставить(ПолноеИмяТипаОснованияПлатежа + "." + ЭлементСоответствия.Ключ,
											ПолноеИмяТипаОснованияПлатежа + "." + ЭлементСоответствия.Значение);
		КонецЦикла;
		
	КонецЦикла;	
	ИнтеграцияСЯндексКассойПереопределяемый.СоответствиеРеквизитовДокументовОснованийПлатежа(СоответствиеРеквизитов);
	
	МетаданныеДокумента 	= Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
	ПолноеИмяДокумента 		= МетаданныеДокумента.ПолноеИмя();
	ДлинаУдаляемогоТекста 	= СтрДлина(ПолноеИмяДокумента) + 1;  // "ПолноеИмяДокумента" + "."
	
	Для Каждого ЭлементСоответствия из СоответствиеРеквизитов Цикл 
		Если СтрНачинаетсяС(ЭлементСоответствия.Ключ, ПолноеИмяДокумента) Тогда 
			
			Псевдоним = Прав(ЭлементСоответствия.Ключ, 	СтрДлина(ЭлементСоответствия.Ключ) - ДлинаУдаляемогоТекста);
			ИмяПоля   = Прав(ЭлементСоответствия.Значение, СтрДлина(ЭлементСоответствия.Значение) - ДлинаУдаляемогоТекста);
			
			Реквизиты.Вставить(Псевдоним, ИмяПоля);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Реквизиты);
	
КонецФункции

Функция ИдентификаторПлательщика(Знач Контрагент)
	
    Реквизиты = "ИНН, КПП, Наименование";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, Реквизиты);
	
	ИдентификаторПлательщика = СтрШаблон("%1 %2%3%4", 
		СокрЛП(ЗначенияРеквизитов.Наименование),
		СокрЛП(ЗначенияРеквизитов.ИНН),
		СокрЛП(?(Не ПустаяСтрока(ЗначенияРеквизитов.ИНН), "/", "")),
		СокрЛП(?(Не ПустаяСтрока(ЗначенияРеквизитов.ИНН), ЗначенияРеквизитов.КПП, "")));
	
	Возврат СокрЛП(ИдентификаторПлательщика);	
	
КонецФункции

#КонецОбласти

#Область СборкаТелаСсылки

Функция ЗаполнитьПараметрыТелаСсылки(Параметры)

	ИдентификаторПлатежа = КодироватьСтроку(Строка(Параметры.ИдентификаторПлатежа), СпособКодированияСтроки.КодировкаURL);
	
	ПараметрыТелаСсылки = Новый Структура();
	
	ПараметрыТелаСсылки.Вставить("cms_name", 		"1c"); // Необходимо для сбора статистики на стороне Яндекса
	ПараметрыТелаСсылки.Вставить("shopId", 			Формат(Параметры.ИдентификаторМагазина,"ЧГ="));
	ПараметрыТелаСсылки.Вставить("scid",   			Формат(Параметры.ИдентификаторВитрины,"ЧГ="));
	ПараметрыТелаСсылки.Вставить("sum",    			Формат(Параметры.СуммаДокумента,"ЧРД=.; ЧГ="));
	ПараметрыТелаСсылки.Вставить("customerNumber",	КодироватьСтроку(Параметры.ИдентификаторПлательщика, СпособКодированияСтроки.КодировкаURL));
	ПараметрыТелаСсылки.Вставить("orderNumber",     ИдентификаторПлатежа);
	ПараметрыТелаСсылки.Вставить("custName",        КодироватьСтроку(Параметры.НаименованиеПлательщика, СпособКодированияСтроки.КодировкаURL));
	ПараметрыТелаСсылки.Вставить("paymentType",     "");
	ПараметрыТелаСсылки.Вставить("orderDetails",    КодироватьСтроку(Параметры.НазначениеПлатежа, СпособКодированияСтроки.КодировкаURL)); // Вернется в параметре paymentName
		
	// JSON параметры
	
	ПараметрыТелаСсылки.Вставить("ym_merchant_receipt",	КодироватьСтроку(Параметры.ym_merchant_receipt, СпособКодированияСтроки.КодировкаURL));
	ПараметрыТелаСсылки.Вставить("checksum",			КодироватьСтроку(Параметры.checksum, СпособКодированияСтроки.КодировкаURL));
	ПараметрыТелаСсылки.Вставить("items",    			КодироватьСтроку(Параметры.items, СпособКодированияСтроки.КодировкаURL));
	ПараметрыТелаСсылки.Вставить("supplierInfo",		КодироватьСтроку(Параметры.supplierInfo, СпособКодированияСтроки.КодировкаURL));
	
	Если НЕ Параметры.СДоговором Тогда 
		
		ПараметрыТелаСсылки.Вставить("CustINN",          Строка(Параметры.ИННОрганизации));
		ПараметрыТелаСсылки.Вставить("CustKPP",          Строка(Параметры.КППОрганизации));
		ПараметрыТелаСсылки.Вставить("supplierName",     КодироватьСтроку(Параметры.НаименованиеПолноеОрганизации, СпособКодированияСтроки.КодировкаURL));		
		ПараметрыТелаСсылки.Вставить("BankBIK",          Строка(Параметры.БикБанкаОрганизации));
		ПараметрыТелаСсылки.Вставить("BankCorAccount",   Строка(Параметры.КоррСчетБанкаОрганизации));
		ПараметрыТелаСсылки.Вставить("supplierBankName", КодироватьСтроку(Параметры.НаименованиеБанкаОрганизации, СпособКодированияСтроки.КодировкаURL));
		ПараметрыТелаСсылки.Вставить("CustAccount",      Строка(Параметры.НомерРасчетногоСчетаОрганизации));
		ПараметрыТелаСсылки.Вставить("uin",              ИдентификаторПлатежа);
		ПараметрыТелаСсылки.Вставить("orderNumber",      КодироватьСтроку(Строка(Параметры.УникальныйИдентификаторДокументаОснования), СпособКодированияСтроки.КодировкаURL));
		ПараметрыТелаСсылки.Вставить("customerNumber",   Строка(Параметры.НомерСчета));
				
	КонецЕсли;
	
	Возврат ПараметрыТелаСсылки;
	
КонецФункции

Функция ТелоСсылкиУспеха(Параметры)
	
	ПараметрыТелаСсылкиУспеха = Новый Структура();
	ПараметрыТелаСсылкиУспеха.Вставить("uip",	Строка(Параметры.ИдентификаторПлатежа));
	ПараметрыТелаСсылкиУспеха.Вставить("sum",	Формат(Параметры.СуммаДокумента,"ЧРД=.; ЧГ="));
	ПараметрыТелаСсылкиУспеха.Вставить("inn",	Строка(Параметры.ИННОрганизации));
	ПараметрыТелаСсылкиУспеха.Вставить("kpp",	Строка(Параметры.КППОрганизации));
	ПараметрыТелаСсылкиУспеха.Вставить("bik",	Строка(Параметры.БикБанкаОрганизации));
	ПараметрыТелаСсылкиУспеха.Вставить("acc",	Строка(Параметры.НомерРасчетногоСчетаОрганизации));
	ПараметрыТелаСсылкиУспеха.Вставить("ippid",	ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(Параметры.Логин));
	ПараметрыТелаСсылкиУспеха.Вставить("id",	Строка(Параметры.УникальныйИдентификаторДокументаОснования));
	
	ТелоСсылки = "";
	Для Каждого Параметр из ПараметрыТелаСсылкиУспеха Цикл 
		ТелоСсылки =  ТелоСсылки + ?(ПустаяСтрока(ТелоСсылки), "", "&") + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	
	ТелоСсылки = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(ТелоСсылки);
	
	Возврат СтрЗаменить(СтрЗаменить(ТелоСсылки, "+", "-"), "/", "_"); // Приведение Base64 к формату для веб-приложений (https://ru.wikipedia.org/wiki/Base64).
	
КонецФункции

Функция СформироватьТелоСсылки(ПараметрыПлатежнойСсылки)
	
	ПараметрыТелаСсылки = ЗаполнитьПараметрыТелаСсылки(ПараметрыПлатежнойСсылки);
	
	ТелоСсылки = "";
	Для Каждого Параметр из ПараметрыТелаСсылки Цикл 
		ТелоСсылки =  ТелоСсылки + ?(ПустаяСтрока(ТелоСсылки), "", "&") + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	
	Возврат ТелоСсылки;
	
КонецФункции

#КонецОбласти

#Область Проверки

Функция ЭтоСсылкаНаОснованиеПлатежаДляОплатыЧерезЯндексКассу(Ссылка)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Ссылка)) Тогда
		ОбработатьОшибку("ФормированиеСсылкиПроверкаТипаСсылки", Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоСсылкаНаОснованиеПлатежа = ИнтеграцияСЯндексКассой.ЭтоОснованиеПлатежаЧерезЯндексКассу(ТипЗнч(Ссылка));
	Если Не ЭтоСсылкаНаОснованиеПлатежа Тогда 
		ОбработатьОшибку("ФормированиеСсылкиПроверкаТипаСсылки", Ссылка);
	КонецЕсли;
	
	Возврат ЭтоСсылкаНаОснованиеПлатежа;
	
КонецФункции

Функция МожноФормироватьСсылку(ПараметрыПлатежнойСсылки)
	
	Отказ = Ложь;
	
	// Контроль формирования платежной ссылки на прикладном уровне
	ИнтеграцияСЯндексКассойПереопределяемый.ПроверкаЗаполненияПараметровПлатежнойСсылки(ПараметрыПлатежнойСсылки, Отказ);
	
	Если Не Отказ Тогда 
		// Контроль формирования платежной ссылки на уровне библиотеки
		ПроверкаЗаполненияПараметровПлатежнойСсылки(ПараметрыПлатежнойСсылки, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыФормированияСсылкиЗаполнены(ПараметрыПлатежнойСсылки) 
	
	
	ОбязательныеПоля = Новый СписокЗначений;
	ОбязательныеПоля.Добавить("ИдентификаторМагазина", НСтр("ru = 'Идентификатор магазина (SHOP ID)'"));	
	ОбязательныеПоля.Добавить("ИдентификаторВитрины",  НСтр("ru = 'Идентификатор витрины (SC ID)'"));
	ОбязательныеПоля.Добавить("СуммаДокумента",        НСтр("ru = 'Сумма документа'"));
	ОбязательныеПоля.Добавить("ИдентификаторПлатежа",  НСтр("ru = 'Идентификатор платежа (Поле 22 Код)'"));
	
	Если ПараметрыПлатежнойСсылки.СДоговором Тогда  // схема "С договором"
		ОбязательныеПоля.Добавить("ИдентификаторПлательщика", НСтр("ru = 'Идентификатор плательщика'"));
	Иначе                                           // схема "Без договора"
		ОбязательныеПоля.Добавить("ИННОрганизации", НСтр("ru = 'ИНН организации'"));
		Если Не СтрДлина(ПараметрыПлатежнойСсылки.ИННОрганизации) = 12 Тогда // У ИП нет КПП
			ОбязательныеПоля.Добавить("КППОрганизации", НСтр("ru = 'КПП организации'"));
		КонецЕсли;
		ОбязательныеПоля.Добавить("БикБанкаОрганизации",             НСтр("ru = 'БИК банка организации'"));
		ОбязательныеПоля.Добавить("НомерРасчетногоСчетаОрганизации", НСтр("ru = 'Номер расчетного счета организации'"));
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура("СсылкаНаОбъект", ПараметрыПлатежнойСсылки.ДокументСсылка);
	Отказ = Ложь;
	Для каждого Параметр Из ПараметрыПлатежнойСсылки Цикл
		ОбязательныйРеквизит = ОбязательныеПоля.НайтиПоЗначению(Параметр.Ключ);
		Если ОбязательныйРеквизит = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда
			ПараметрыСообщения.Вставить("ПредставлениеРеквизита",ОбязательныйРеквизит.Представление);
			ОбработатьОшибку("ФормированиеСсылкиПроверкаЗаполненияРеквизитов", ПараметрыСообщения, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПроверкаЗаполненияПараметровПлатежнойСсылки(Знач ПараметрыПлатежнойСсылки, Отказ)
	
	Если Не ПараметрыФормированияСсылкиЗаполнены(ПараметрыПлатежнойСсылки) Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПлатежнойСсылки.ДоступнаяВалютаДокумента.Найти(ПараметрыПлатежнойСсылки.ВалютаДокумента) = Неопределено Тогда 
		
		// По умолчанию доступны только счета в рублях, но есть возможность переопределить состав доступных валют 
		// в процедуре ИнтеграцияСЯндексКассойПереопределяемый.ПроверкаЗаполненияПараметровПлатежнойСсылки
		ПараметрыСообщения = Новый Структура("ВалютаДокумента, ТекстВВалюте, ТекстДоступнаяВалюта",
				ПараметрыПлатежнойСсылки.ВалютаДокумента,
				?(ПараметрыПлатежнойСсылки.ДоступнаяВалютаДокумента.Количество() >1,
					НСтр("ru = 'в валютах'"), НСтр("ru = 'в валюте'")),
				СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ПараметрыПлатежнойСсылки.ДоступнаяВалютаДокумента, ","));
		ОбработатьОшибку("ФормированиеСсылкиВалютаДокументаНеРазрешена", ПараметрыСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПлатежнойСсылки.СДоговором Тогда 
		
		// Если схема "Без договора", тогда сумма счета не должна превышать максимально доступную
		// проверим и если превышает предложим перейти на схему "с договором"
		Если ПараметрыПлатежнойСсылки.СуммаДокумента > ПараметрыПлатежнойСсылки.МаксимальнаяСуммаСчета Тогда 
			ПараметрыСообщения = Новый Структура("МаксимальнаяСуммаСчета, СсылкаНаОбъект",
				ПараметрыПлатежнойСсылки.МаксимальнаяСуммаСчета,
				ПараметрыПлатежнойСсылки.НастройкаЯндексКассы);
			ОбработатьОшибку("ФормированиеСсылкиСуммаСчетаПревышаетМаксимальноДопустимую", ПараметрыСообщения, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область УИП

// Заполняет уникальный идентификатор платежа
Функция ПолучитьУникальныйИдентификаторПлатежа(Объект) Экспорт
	
	Префикс = ПолучитьПрефиксДляУИП(Объект.Ссылка);
	Дата = Формат(Объект.Дата, "ДФ=yyMM");
	Номер = СтрЗаменить(Объект.Номер, "-", "");
	Код = Строка(Префикс) + Строка(Дата) + Строка(Номер);
	УИН = ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код);
	
	Возврат УИН;
	
КонецФункции

Функция ПолучитьПрефиксДляУИП(Ссылка) Экспорт

	Соответствие = Новый Соответствие();
	//УПП
	Соответствие.Вставить("ЗаказКлиента",           "ЗК");
	Соответствие.Вставить("СчетНаОплатуКлиенту",    "СЧ");
	//УНФ
	Соответствие.Вставить("ЗаказПокупателя",        "ЗК");
	Соответствие.Вставить("СчетНаОплату",           "СЧ");
	//БП
	Соответствие.Вставить("СчетНаОплатуПокупателю", "СЧ");
	
	ИнтеграцияСЯндексКассойПереопределяемый.ПрефиксыДляИдентификатораПлатежа(Соответствие);
	
	Возврат Соответствие[Ссылка.Метаданные().Имя];
	
КонецФункции

Функция ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код,Сдвиг = Неопределено)
	
	Если Сдвиг = Неопределено Тогда
		Сдвиг = 0;
	КонецЕсли;
	
	СтруктураСоответствий = СтруктураСоответствийБуквИЦифр();
	
	СтрокаЦифр = "0123456789";	
	ВесРазряда = 1+Сдвиг;
	Результат = 0;
	//Замена служебных символов в коде
	СтрокаБукв = "АБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЭЮЯЪЫЬABCDEFGHIJKLMNOPQRSTUVWXYZ";
	НовКод = "";
	Для Инд = 1 По СтрДлина(Код) Цикл
		СимволКода = Сред(Код,Инд,1);
		СимволКода = ВРЕГ(СимволКода);
		Если СтрНайти(СтрокаЦифр,СимволКода)=0 И СтрНайти(СтрокаБукв,СимволКода)=0 Тогда
			НовКод = НовКод + "0";
		Иначе
			НовКод = НовКод + СимволКода;
		КонецЕсли;
	КонецЦикла;
	Код = НовКод;
	//Конец замены
	Если СтрДлина(Код)<19 Тогда
		СтрокаКода = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Код,19,"0","Справа");
	Иначе
		СтрокаКода = Лев(Код,19);
	КонецЕсли;
	
	Для Инд = 1 По 19 Цикл 
		СимволКода = Сред(СтрокаКода,Инд,1);
		Если СтрНайти(СтрокаЦифр,СимволКода)>0 Тогда
			Значение = Число(СимволКода);
		ИначеЕсли СтруктураСоответствий.Свойство(ВРег(СимволКода)) Тогда
			Значение = СтруктураСоответствий[СимволКода]%10;
		КонецЕсли;		
		Результат = Результат + ВесРазряда*Значение;
		
		ВесРазряда = ВесРазряда + 1;
		Если ВесРазряда = 11 Тогда
			ВесРазряда = 1;
		КонецЕсли;
	КонецЦикла;
	
	КонтрольныйРазряд = Результат % 11;
	
	Если КонтрольныйРазряд = 10 Тогда
		Если Сдвиг = 0 Тогда
			Возврат ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код,2);
		Иначе
			КонтрольныйРазряд = 0;
		КонецЕсли;
	КонецЕсли;
	
	ПолныйКод = СтрокаКода+Строка(КонтрольныйРазряд);
	
	Возврат ПолныйКод;
	
КонецФункции

Функция СтруктураСоответствийБуквИЦифр()
	
	СтруктураСоответствий = Новый Структура();
	
	СтруктураСоответствий.Вставить("А", 1);
	СтруктураСоответствий.Вставить("Б", 2);
	СтруктураСоответствий.Вставить("В", 3);
	СтруктураСоответствий.Вставить("Г", 4);
	СтруктураСоответствий.Вставить("Д", 5);
	СтруктураСоответствий.Вставить("Е", 6);
	СтруктураСоответствий.Вставить("Ж", 7);
	СтруктураСоответствий.Вставить("З", 8);
	СтруктураСоответствий.Вставить("И", 9);
	СтруктураСоответствий.Вставить("К", 10);
	СтруктураСоответствий.Вставить("Л", 11);
	СтруктураСоответствий.Вставить("М", 12);
	СтруктураСоответствий.Вставить("Н", 13);
	СтруктураСоответствий.Вставить("О", 14);
	СтруктураСоответствий.Вставить("П", 15);
	СтруктураСоответствий.Вставить("Р", 16);
	СтруктураСоответствий.Вставить("С", 17);
	СтруктураСоответствий.Вставить("Т", 18);
	СтруктураСоответствий.Вставить("У", 19);
	СтруктураСоответствий.Вставить("Ф", 20);
	СтруктураСоответствий.Вставить("Х", 21);
	СтруктураСоответствий.Вставить("Ц", 22);
	СтруктураСоответствий.Вставить("Ч", 23);
	СтруктураСоответствий.Вставить("Ш", 24);
	СтруктураСоответствий.Вставить("Щ", 25);
	СтруктураСоответствий.Вставить("Э", 26);
	СтруктураСоответствий.Вставить("Ю", 27);
	СтруктураСоответствий.Вставить("Я", 28);
	СтруктураСоответствий.Вставить("Ъ", 33);
	СтруктураСоответствий.Вставить("Ы", 36);
	СтруктураСоответствий.Вставить("Ь", 46);
	СтруктураСоответствий.Вставить("A", 1);
	СтруктураСоответствий.Вставить("B", 3);
	СтруктураСоответствий.Вставить("C", 17);
	СтруктураСоответствий.Вставить("D", 29);
	СтруктураСоответствий.Вставить("E", 6);
	СтруктураСоответствий.Вставить("F", 30);
	СтруктураСоответствий.Вставить("G", 31);
	СтруктураСоответствий.Вставить("H", 13);
	СтруктураСоответствий.Вставить("I", 32);
	СтруктураСоответствий.Вставить("J", 33);
	СтруктураСоответствий.Вставить("K", 10);
	СтруктураСоответствий.Вставить("L", 34);
	СтруктураСоответствий.Вставить("M", 12);
	СтруктураСоответствий.Вставить("N", 35);
	СтруктураСоответствий.Вставить("O", 14);
	СтруктураСоответствий.Вставить("P", 16);
	СтруктураСоответствий.Вставить("Q", 36);
	СтруктураСоответствий.Вставить("R", 37);
	СтруктураСоответствий.Вставить("S", 38);
	СтруктураСоответствий.Вставить("T", 18);
	СтруктураСоответствий.Вставить("U", 39);
	СтруктураСоответствий.Вставить("V", 40);
	СтруктураСоответствий.Вставить("W", 41);
	СтруктураСоответствий.Вставить("X", 21);
	СтруктураСоответствий.Вставить("Y", 19);
	СтруктураСоответствий.Вставить("Z", 42);
	
	Возврат СтруктураСоответствий;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ШаблоныСообщений

#Область ПредопределенныеШаблоныСообщений

Функция ПолучитьСоответствиеШаблоновОснованиямПлатежа()
	
	СоответствиеШаблонов = Константы.ПредопределенныеШаблоныСообщений.Получить().Получить();
	
	Если СоответствиеШаблонов = Неопределено Тогда 
		Возврат Новый Соответствие;
	КонецЕсли;	
	
	Возврат СоответствиеШаблонов;
	
КонецФункции

Процедура УстановитьСоответствиеШаблоновОснованиямПлатежа(Соответствие)
	
	Константы.ПредопределенныеШаблоныСообщений.Установить(Новый ХранилищеЗначения(Соответствие));
	
КонецПроцедуры

Функция НайтиПредопределенныйШаблонСообщений(Шаблон, СоответствиеШаблоновОснованиямПлатежа)
	
	ШаблонСсылка = Справочники.ШаблоныСообщений.ПустаяСсылка();
	
	ИдентификаторШаблона = СоответствиеШаблоновОснованиямПлатежа.Получить(Шаблон.ПолноеИмяТипаНазначения);
	Если Не ТипЗнч(ИдентификаторШаблона) = Тип("УникальныйИдентификатор") Тогда 
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	НайденныйШаблон = Справочники.ШаблоныСообщений.ПолучитьСсылку(ИдентификаторШаблона);
	Если НайденныйШаблон.Пустая() Тогда 
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденныйШаблон, 
		"ПометкаУдаления, ПолноеИмяТипаПараметраВводаНаОсновании, ПредназначенДляЭлектронныхПисем");
	
	Если ДанныеШаблона.ПометкаУдаления = Неопределено Тогда
		Возврат ШаблонСсылка;
	ИначеЕсли ДанныеШаблона.ПометкаУдаления Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПолноеИмяТипаПараметраВводаНаОсновании = Шаблон.ПолноеИмяТипаНазначения Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПредназначенДляЭлектронныхПисем Тогда 
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ШаблонСсылка = НайденныйШаблон;
	
	Возврат ШаблонСсылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Универсальные


// Выдает сообщение пользователю и производит запись в журнал регистрации.
//
// Параметры:
//  ИдентификаторОшибки - Строка - Текстовый идентификатор ошибки, доступные идентификаторы
//   * "ФормированиеСсылкиПроверкаТипаСсылки"
//   * "ФормированиеСсылкиПолучениеРеквизитовДокумент"
//   * "ФормированиеСсылкиПроверкаЗаполненияРеквизитов"
//   * "ФормированиеСсылкиНеНайденаДействительнаяНастройка"
//   * "ФормированиеСсылкиВалютаДокументаНеРазрешена"
//   * "ФормированиеСсылкиСуммаСчетаПревышаетМаксимальноДопустимую"
//   * "НеУдалосьОпределитьВерсиюФорматаДанныхТелаОтвета"
//   * "ВерсияФорматаДанныхТелаОтветаНеПоддерживается"
//   * "НеНайденыОжидаемыеДанныеВТелеОтвета"
//   * "НеУдалосьПреобразоватьТелоОтветВОбъектXDTO"
//   * "СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой"
//   * "ПустоеТелоОтвета"
//   * "СервисВернулОшибку"
//   * "ОтсутствуетСоединениеССервером"
//   * "ОшибкаВыполненияКомандыСервиса"
//   * "ОшибкаИнициализацииСервиса"
//   * "ОшибкаОбновленияНастройкиПриЗагрузкеОпераций"
//   * "НеВключенаФункциональнаяОпция"
//   * "НеВключенаИПП"
//
//  ДополнительныеПараметры - Произвольный - дополнительные параметры обрабатываемые в тексте сообщений
//  Отказ - булево
//
Процедура ОбработатьОшибку(ИдентификаторОшибки, ДополнительныеПараметры = Неопределено, Отказ = Ложь)
	
	СсылкаНаОбъект = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		ДополнительныеПараметры.Свойство("СсылкаНаОбъект", СсылкаНаОбъект);
	КонецЕсли;
	
	Сообщение = ТекстыСообщенийОбОшибках(ИдентификаторОшибки, ДополнительныеПараметры);
	
	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Сообщение.ВидОперации, Сообщение.ПодробныйТекстОшибки, , 6, СсылкаНаОбъект);
			
			
	Источник = "СообщенияПользователюМодуляИнтеграцияСЯндексКассойСлужебныйВызовСервера";
	АдресЗначения = Неопределено;
	
	БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Если ТипЗнч(БуферОбмена.Данные) = Тип("Соответствие") Тогда
		СообщенияПользователю = БуферОбмена.Данные;
	Иначе
		СообщенияПользователю = Новый Соответствие;
	КонецЕсли;
	
	ТекстСообщения = Сообщение.ТекстСообщения;
	Если ЗначениеЗаполнено(Сообщение.ПодробныйТекстОшибки) 
		И НЕ ПустаяСтрока(Сообщение.ТекстСообщения) И Сообщение.ПодробныйТекстОшибки <> Сообщение.ТекстСообщения Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ НСтр("ru ='Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	СообщенияПользователю.Вставить(ИдентификаторОшибки, ТекстСообщения);
	ОбщегоНазначения.СкопироватьВБуферОбмена(СообщенияПользователю, Источник);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ВывестиОшибкиПользователю()
	
	Источник = "СообщенияПользователюМодуляИнтеграцияСЯндексКассойСлужебныйВызовСервера";
	БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Если ТипЗнч(БуферОбмена.Данные) = Тип("Соответствие") Тогда 
		СообщенияПользователю = БуферОбмена.Данные;
		
		ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
		
		Для Каждого Сообщение из СообщенияПользователю Цикл 
			ТекстСообщения = Сообщение.Значение;
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				Если Не ЭтоПолноправныйПользователь Тогда
					ТекстСообщения = СтрЗаменить(ТекстСообщения, Символы.ПС + 
						НСтр("ru ='Подробности см. в журнале регистрации.'"), "");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначения.СкопироватьВБуферОбмена(Неопределено, Источник);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстыСообщенийОбОшибках(ИдентификаторОшибки, ДополнительныеПараметры = Неопределено)
	
	Сообщение = Новый Структура("ВидОперации, ПодробныйТекстОшибки, ТекстСообщения");
	
	
	Если ИдентификаторОшибки = "ФормированиеСсылкиПроверкаТипаСсылки" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'На основании %1 ссылка на страницу оплаты через Яндекс.Кассу формироваться не может'"),
				ДополнительныеПараметры.СсылкаНаОбъект), 
				НСтр("ru = 'Ошибка при проверке типов оснований формирования платежа через Яндекс.Кассу'")); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиПолучениеРеквизитовДокумент" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'Не удалось определить реквизиты документа %1'"),
				ДополнительныеПараметры.СсылкаНаОбъект),
				НСтр("ru = 'Не удалось сформировать соответствие общепринятых реквизитов к реквизитам документа, см. процедуру ИнтеграцияСЯндексКассойПереопределяемый.СоответствиеРеквизитовДокументовОснованийПлатежа'")); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиПроверкаЗаполненияРеквизитов" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'Не заполнен реквизит %1, формирование ссылки на страницу оплаты через Яндекс.Кассу не возможно'"),
				ДополнительныеПараметры.ПредставлениеРеквизита));
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиНеНайденаДействительнаяНастройка" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			НСтр("ru = 'Не найдена действующая настройка Яндекс.Кассы для этой организации, формирование ссылки на страницу оплаты через Яндекс.Кассу не возможно'"),
			СтрШаблон(НСтр("ru = 'Не удалось найти ни одной действительной настройки для организации %1'"),
				ДополнительныеПараметры)); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиВалютаДокументаНеРазрешена" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'Счет в валюте %1 не может быть выставлен для оплаты через Яндекс.Кассу.'"),
				ДополнительныеПараметры.ВалютаДокумента),
			Символы.ПС + СтрШаблон(НСтр("ru = 'Счета можно выставлять только %1: %2'"),
				ДополнительныеПараметры.ТекстВВалюте,
				ДополнительныеПараметры.ТекстДоступнаяВалюта));
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиСуммаСчетаПревышаетМаксимальноДопустимую" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'Максимально допустимая сумма счета для оплаты через Яндекс.Кассу без заключения договора с сервисом составляет %1 руб. 
							|Для снятия ограничения заключите договор с сервисом Яндекс.Касса или разбейте счет на несколько счетов с меньшими суммами.'"),
				Формат(ДополнительныеПараметры.МаксимальнаяСуммаСчета, "ЧДЦ=2; ЧРГ=' '")));
			
	ИначеЕсли ИдентификаторОшибки = "НеУдалосьОпределитьВерсиюФорматаДанныхТелаОтвета" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			НСтр("ru = 'Не удалось определить версию формата данных'"));
				
	ИначеЕсли ИдентификаторОшибки = "ВерсияФорматаДанныхТелаОтветаНеПоддерживается" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтрШаблон(НСтр("ru = 'Версия формата данных не поддерживается. Получена версия формата %1, поддерживается версия формата %2'"),
				ДополнительныеПараметры.ВерсияФормата,
				ДополнительныеПараметры.ТекущаяВерсияФормата));
				
	ИначеЕсли ИдентификаторОшибки = "НеНайденыОжидаемыеДанныеВТелеОтвета" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтрШаблон(НСтр("ru = 'Не обнаружены данные типа %1'"), ДополнительныеПараметры.ИмяОжидаемогоТипа));
			
	ИначеЕсли ИдентификаторОшибки = "НеУдалосьПреобразоватьТелоОтветВОбъектXDTO" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтрШаблон(НСтр("ru = 'Не удалось построить объектную модель данных ответа. 
							|Подробно: %1'"), ДополнительныеПараметры.ИнформацияОбОшибке));
			
	ИначеЕсли ИдентификаторОшибки = "СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтрШаблон(НСтр("ru = '%1. 
							|Подробно: %2'"),
							ДополнительныеПараметры.КраткоеПредставлениеОшибки,
							ДополнительныеПараметры.ПодробноеПредставлениеОшибки));
							
	ИначеЕсли ИдентификаторОшибки = "ПустоеТелоОтвета" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			НСтр("ru = 'Получен пустой ответ от сервиса'"));
			
	ИначеЕсли ИдентификаторОшибки = "СервисВернулОшибку" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			ДополнительныеПараметры.ТекстСообщения,
			ДополнительныеПараметры.ТекстОшибкиСервиса);
				
	ИначеЕсли ИдентификаторОшибки = "ОтсутствуетСоединениеССервером" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			нСтр("ru='Отсутствует соединение с сервером'"),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
			
	ИначеЕсли ИдентификаторОшибки = "ОшибкаВыполненияКомандыСервиса" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			СтрШаблон(НСтр("ru = 'Ошибка выполнения команды сервиса: %1'"), ДополнительныеПараметры.ОписаниеОшибки),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
			
	ИначеЕсли ИдентификаторОшибки = "ОшибкаИнициализацииСервиса" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Взаимодействие с сервисом уведомлений по операциям Яндекс.Кассы'"),,
			НСтр("ru = 'Ошибка инициализации сервиса'"));
		
	ИначеЕсли ИдентификаторОшибки = "ОшибкаОбновленияНастройкиПриЗагрузкеОпераций" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При обновлении настроек сервиса произошла ошибка'"),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
	ИначеЕсли ИдентификаторОшибки = "НеВключенаФункциональнаяОпция" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не включена функциональная опция ""Интеграция с Яндекс.Кассой"", использование функций взаимодействия с сервисом Яндекс.Касса недоступно.'"));
	ИначеЕсли ИдентификаторОшибки = "НеВключенаИПП" Тогда
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Интернет-поддержка пользователей не подключена, использование функций взаимодействия с сервисом Яндекс.Касса недоступно.'"));
	
	КонецЕсли;
	
	Возврат Сообщение;

КонецФункции

Функция СообщениеОбОшибке(Знач ВидОперации, Знач ТекстСообщения, Знач ПодробныйТекстОшибки = "")
	
	Сообщение = Новый Структура("ВидОперации, ТекстСообщения, ПодробныйТекстОшибки",
		ВидОперации, ТекстСообщения, ТекстСообщения +?(Не ПустаяСтрока(ПодробныйТекстОшибки), " " + ПодробныйТекстОшибки, ""));
		
	Возврат Сообщение;
	
КонецФункции

Функция ВидОперацииПоКоманде(Знач ИмяКоманды)
	
	ВидыОпераций = Новый Соответствие();
	ВидыОпераций.Вставить("ЗагрузитьОперацииПоЯндексКассе", НСтр("ru = 'Загрузка операций по Яндекс.Кассе'"));
	ВидыОпераций.Вставить("ПолучитьНастройки", НСтр("ru = 'Получение настроек по Яндекс.Кассе'"));
	ВидыОпераций.Вставить("ПолучениеПлатежнойСсылки", НСтр("ru = 'Получение платежной ссылки для оплаты через Яндекс.Кассу'"));
	ВидыОпераций.Вставить("ПолучитьДанныеПоЗаказу", НСтр("ru = 'Получение данных от сервера'"));
	ВидыОпераций.Вставить("ОбновитьДанныеЗаказа", НСтр("ru = 'Обновление данных заказа на сервере'"));
	
	Возврат ВидыОпераций.Получить(ИмяКоманды);
	
КонецФункции

Функция ПолучитьХешСуммуПоДокументу(ДокументСсылка) Экспорт
	
	ДанныеДокумента = ИнтеграцияСЯндексКассойПереопределяемый.
		ДанныеДокументаДляПолученияПлатежнойСсылки(ДокументСсылка, Истина);
	
	////////////////////////////////////////////////////////////////////////////////
			
	Возврат ХешСумма(
		ЗаписатьДанныевJSON(
			СформироватьПереченьТоваровДляЧека(ДанныеДокумента.ДанныеЧека)));
	
КонецФункции

Функция ПолучитьДанныеАутентификации()
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации = Неопределено Тогда 
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ПолучениеПлатежнойСсылки");
		ОбработатьОшибку("НеВключенаИПП", ПараметрыСообщения);
		Возврат "";
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Возврат 
	
	"Basic " + ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(
		ДанныеАутентификации.Логин + ":" + ДанныеАутентификации.Пароль);

КонецФункции

#КонецОбласти

#Область ПодготовкаJSONДанных

Процедура ЗаполнитьJSONПараметры(ПараметрыКоманды, КонтактныеДанныеЭлектронногоЧека, Отказ)
	
	ПараметрыКоманды.Вставить("items", 					"");
	ПараметрыКоманды.Вставить("ym_merchant_receipt", 	"");
	ПараметрыКоманды.Вставить("checksum", 				"");
	ПараметрыКоманды.Вставить("supplierInfo", 			"");
	
	////////////////////////////////////////////////////////////////////////////////
	
	ДанныеДокумента = ИнтеграцияСЯндексКассойПереопределяемый.
		ДанныеДокументаДляПолученияПлатежнойСсылки(ПараметрыКоманды.ДокументСсылка);
		
	Если ДанныеДокумента.ДанныеЧека.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 	
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПодготовитьРасширенноеОписаниеТоваров(ПараметрыКоманды, ДанныеДокумента.РасширенноеОписаниеТоваров, ДанныеДокумента.ШтрихКоды);
	
	ПодготовитьДанныеЧека(ПараметрыКоманды, ДанныеДокумента.ДанныеЧека, ДанныеДокумента.УчетнаяПолитика, КонтактныеДанныеЭлектронногоЧека);
	
	ПодготовитьИнформациюОПродавце(ПараметрыКоманды, ДанныеДокумента.ИнформацияОПродавце);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЧека(ПараметрыКоманды, ТаблицаТоваров, УчетнаяПолитика, КонтактныеДанныеЭлектронногоЧека)
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	СтруктураJSON = Новый Структура;
	
	СтруктураJSON.Вставить("customerContact", ?(КонтактныеДанныеЭлектронногоЧека = Неопределено, "NULL", КонтактныеДанныеЭлектронногоЧека));
	СтруктураJSON.Вставить("taxSystem", ПараметрыУчетнойПолитики(УчетнаяПолитика[0]));
	СтруктураJSON.Вставить("items", СформироватьПереченьТоваровДляЧека(ТаблицаТоваров));

	ТекстJSON = ЗаписатьДанныевJSON(СтруктураJSON);
	
	////////////////////////////////////////////////////////////////////////////////
		      
	ПараметрыКоманды.ym_merchant_receipt = ТекстJSON;
	ПараметрыКоманды.checksum = ХешСумма(ЗаписатьДанныевJSON(СтруктураJSON.items));

КонецПроцедуры

Функция СформироватьПереченьТоваровДляЧека(ТаблицаТоваров)
	
	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("СтавкаНДС", 	"tax");
	СоответствиеПолей.Вставить("Номенклатура", 	"text");
	СоответствиеПолей.Вставить("Количество", 	"quantity");
	СоответствиеПолей.Вставить("Цена", 			"amount");
	
	////////////////////////////////////////////////////////////////////////////////
	
	МассивСтруктур = Новый Массив;

	Для каждого ТекущаяСтрокаНоменклатуры ИЗ ТаблицаТоваров Цикл 
		
		СтрокаДанных = Новый Структура;
		
		Для каждого ТекущаяКолонка Из  ТаблицаТоваров.Колонки Цикл
			
			Если НЕ СоответствиеПолей.Свойство(ТекущаяКолонка.Имя) Тогда
				Продолжить;
			КонецЕсли; 
			
			КлючСтруктуры = СоответствиеПолей[ТекущаяКолонка.Имя];
			ЗначениеСтруктуры = ТекущаяСтрокаНоменклатуры[ТекущаяКолонка.Имя];
			
			Если КлючСтруктуры = "text" Тогда
				НаименованиеДляПечати = ИнтеграцияСЯндексКассойПереопределяемый.ПредставлениеНоменклатурыДляПечати(
					ТекущаяСтрокаНоменклатуры.Номенклатура,
					ТекущаяСтрокаНоменклатуры.Характеристика,
					ТекущаяСтрокаНоменклатуры.Упаковка);
				
				СтрокаДанных.Вставить(КлючСтруктуры, НаименованиеДляПечати);
			ИначеЕсли КлючСтруктуры = "amount" Тогда
				СтрокаДанных.Вставить("price", Новый Структура(КлючСтруктуры, ЗначениеСтруктуры));
			ИначеЕсли КлючСтруктуры = "tax" Тогда
				СтрокаДанных.Вставить(КлючСтруктуры, ПреобразоватьСтавкуНДС(ЗначениеСтруктуры));	
			Иначе 
				СтрокаДанных.Вставить(КлючСтруктуры, ЗначениеСтруктуры);
			КонецЕсли; 			
			
		КонецЦикла;		
		
		МассивСтруктур.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

Процедура ПодготовитьРасширенноеОписаниеТоваров(ПараметрыКоманды, ТаблицаТоваров, ТаблицаШтрихКодов)
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("Номенклатура",			"name");
	СоответствиеПолей.Вставить("НаименованиеПолное",	"fullName");
	СоответствиеПолей.Вставить("Характеристика",		"feature");
	СоответствиеПолей.Вставить("Количество",		 	"quantity");
	СоответствиеПолей.Вставить("Цена", 					"price");
	СоответствиеПолей.Вставить("СтавкаНДС", 			"nds");
	СоответствиеПолей.Вставить("Валюта", 				"currency");
	СоответствиеПолей.Вставить("Артикул", 				"article");
	СоответствиеПолей.Вставить("ЕдиницаИзмерения", 		"unit");
	СоответствиеПолей.Вставить("ВидНоменклатуры", 		"category");
	СоответствиеПолей.Вставить("Родитель",				"parent");
	СоответствиеПолей.Вставить("Сумма",					"sum");
	СоответствиеПолей.Вставить("НомерСтроки",	 		"number");
	
	////////////////////////////////////////////////////////////////////////////////
	// Подготовка массива штрих кодов
	
	ШтрихКоды = Новый Соответствие();
	
	Для каждого ЭлементКоллекции Из ТаблицаШтрихКодов Цикл
		Если ШтрихКоды.Получить(ЭлементКоллекции.НомерСтроки) = Неопределено Тогда
			ШтрихКоды.Вставить(ЭлементКоллекции.НомерСтроки, Новый Массив);
			ШтрихКоды[ЭлементКоллекции.НомерСтроки].Добавить(ЭлементКоллекции.ШтрихКод);
		Иначе 
			ШтрихКоды[ЭлементКоллекции.НомерСтроки].Добавить(ЭлементКоллекции.ШтрихКод);
		КонецЕсли; 
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
					
	МассивЭлементов = Новый Массив;
	
	Для каждого ТекущаяСтрокаНоменклатуры ИЗ ТаблицаТоваров Цикл 
		
		СтрокаДанных = Новый Структура;
		
		Для каждого ТекущаяКолонка Из  ТаблицаТоваров.Колонки Цикл
			
			КлючСтруктуры = СоответствиеПолей[ТекущаяКолонка.Имя];
			ЗначениеСтруктуры = ТекущаяСтрокаНоменклатуры[ТекущаяКолонка.Имя];
			
			Если КлючСтруктуры = "number" Тогда
				МассивШтрихКодов = ШтрихКоды.Получить(ЗначениеСтруктуры);
				СтрокаДанных.Вставить("barcodes", ?(МассивШтрихКодов = Неопределено, Новый Массив, МассивШтрихКодов));	
			Иначе 
				СтрокаДанных.Вставить(КлючСтруктуры, ЗначениеСтруктуры);
			КонецЕсли; 			
			
		КонецЦикла;		
		
		МассивЭлементов.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	ТекстJSON = ЗаписатьДанныевJSON(МассивЭлементов);
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыКоманды.items = ТекстJSON;
		
КонецПроцедуры

Процедура ПодготовитьИнформациюОПродавце(ПараметрыКоманды, ТаблицаИнформацииОПродавце)
	
	Если ТаблицаИнформацииОПродавце.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("ИНН",					"inn");
	СоответствиеПолей.Вставить("КПП",					"kpp");
	СоответствиеПолей.Вставить("НаименованиеПолное",	"fullName");
	
	СоответсвиеВидовКИ = Новый Соответствие;
	
	СоответсвиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, 	"physicalAddress");
	СоответсвиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,	"legalAddress");
	СоответсвиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, 	"phone");
	СоответсвиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, 		"email");
	
	СтруктураДанных = Новый Структура;
	
	Для каждого ЭлементКоллекции Из СоответствиеПолей Цикл
		СтруктураДанных.Вставить(ЭлементКоллекции.Значение, "");
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СоответсвиеВидовКИ Цикл
		СтруктураДанных.Вставить(ЭлементКоллекции.Значение, "");
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
		
	Для каждого ЭлементКоллекции Из СоответствиеПолей Цикл
		СтруктураДанных[ЭлементКоллекции.Значение] = ТаблицаИнформацииОПродавце[0][ЭлементКоллекции.Ключ];	
	КонецЦикла;
	
	Для каждого СтрокаКонтактов Из ТаблицаИнформацииОПродавце Цикл
		
		КлючСтруктуры = СоответсвиеВидовКИ.Получить(СтрокаКонтактов.Вид);
		
		Если КлючСтруктуры = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураДанных[КлючСтруктуры] = СтрокаКонтактов.Представление;
		
	КонецЦикла;
	
	ТекстJSON = ЗаписатьДанныевJSON(СтруктураДанных);
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыКоманды.supplierInfo = ТекстJSON;
		
КонецПроцедуры

Функция ЗаписатьДанныевJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ХешСумма(ВходящаяСтрока)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	
	ХешированиеДанных.Добавить(ВходящаяСтрока);
	
	ХешСумма = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");

	Возврат ХешСумма;
	
КонецФункции

Функция ПараметрыУчетнойПолитики(СтрокаУчетнойПолитики)
	
	Если СтрокаУчетнойПолитики.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		Возврат 4;     // ЕНВД
	Иначе 
		Если СтрокаУчетнойПолитики.ПрименяетсяУСН И СтрокаУчетнойПолитики.ПрименяетсяУСНДоходыМинусРасходы Тогда
			Возврат 3; // УСН
		ИначеЕсли СтрокаУчетнойПолитики.ПрименяетсяУСН И НЕ СтрокаУчетнойПолитики.ПрименяетсяУСНДоходыМинусРасходы Тогда	
			Возврат 2; // УСН
		ИначеЕсли НЕ СтрокаУчетнойПолитики.ПрименяетсяУСН Тогда
			Возврат 1; // ОСН 	
		Иначе 
			Возврат 0;	
		КонецЕсли;	
	КонецЕсли; 
		
КонецФункции

Функция ПреобразоватьСтавкуНДС(СтавкаНДС)
	
	СтавкаНДСЧислом = 1;
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		СтавкаНДСЧислом = 1;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда	
		СтавкаНДСЧислом = 2;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда	
		СтавкаНДСЧислом = 3;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда	
		СтавкаНДСЧислом = 4;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда	
		СтавкаНДСЧислом = 5;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда	
		СтавкаНДСЧислом = 6;
	КонецЕсли; 
	
	Возврат СтавкаНДСЧислом;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
