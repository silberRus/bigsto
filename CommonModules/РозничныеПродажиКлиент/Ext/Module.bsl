
#Область ПрограммныйИнтерфейс

// Открывает кассовую смену
//
// Параметры:
//  ПараметрыКассыККМ - Структура - Параметры кассы ККМ (ИдентификаторУстройства, ИспользоватьБезПодключенияОборудования, КассаККМ)
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции
//
Процедура ОткрытьКассовуюСмену(ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Если (ТипЗнч(ПараметрыКассыККМ) = Тип("фиксированнаяСтруктура")
		Или ТипЗнч(ПараметрыКассыККМ) = Тип("Структура"))
		И ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ОписаниеОшибки = "";
		Результат = РозничныеПродажиВызовСервера.ОткрытьКассовуюСмену(ПараметрыКассыККМ.КассаККМ, ОписаниеОшибки);
		Если Не Результат Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'При открытии смены произошла ошибка.
				           |Смена не открыта.
				           |Дополнительное описание:
				           |%1'"),
				ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Результат);
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ПараметрыКассыККМ) = Тип("фиксированнаяСтруктура")
			Или ТипЗнч(ПараметрыКассыККМ) = Тип("Структура") Тогда
			ФискальноеУстройство = ПараметрыКассыККМ.ИдентификаторУстройства;
		Иначе
			ФискальноеУстройство = ПараметрыКассыККМ;
		КонецЕсли;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ФискальноеУстройство",         ФискальноеУстройство);
		Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ПараметрыОперации.Кассир = РозничныеПродажиВызовСервера.РеквизитыКассира().Наименование;
		
		МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(
			Новый ОписаниеОповещения("ПослеВыполненияКомандыОткрытияСмены", ЭтотОбъект, Контекст),
			Новый УникальныйИдентификатор,
			ПараметрыОперации,
			ФискальноеУстройство);
		
	КонецЕсли;
	
КонецПроцедуры

// Закрывает кассовую смену
//
// Параметры:
//  ПараметрыКассыККМ - Структура - Параметры кассы ККМ (ИдентификаторУстройства, ИспользоватьБезПодключенияОборудования, КассаККМ)
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции
//
Процедура ЗакрытьКассовуюСмену(ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Если (ТипЗнч(ПараметрыКассыККМ) = Тип("фиксированнаяСтруктура")
		Или ТипЗнч(ПараметрыКассыККМ) = Тип("Структура"))
		И ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		СформироватьОтчетОРозничныхПродажах(ПараметрыКассыККМ.КассаККМ);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Истина);
		
	Иначе
		
		Если ТипЗнч(ПараметрыКассыККМ) = Тип("фиксированнаяСтруктура")
			Или ТипЗнч(ПараметрыКассыККМ) = Тип("Структура") Тогда
			ФискальноеУстройство = ПараметрыКассыККМ.ИдентификаторУстройства;
			ОборудованиеПодключено = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ФискальноеУстройство);
		Иначе
			ФискальноеУстройство   = ПараметрыКассыККМ;
			ОборудованиеПодключено = Истина;
		КонецЕсли;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ФискальноеУстройство",         ФискальноеУстройство);
		Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ПараметрыОперации.Кассир = РозничныеПродажиВызовСервера.РеквизитыКассира().Наименование;
		
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Новый ОписаниеОповещения("ПослеВыполненияКомандыЗакрытияСмены", ЭтотОбъект, Контекст),
			Новый УникальныйИдентификатор,
			ПараметрыОперации,
			ФискальноеУстройство);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнесениеДенежныхСредств(Форма, ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                        Форма);
	Контекст.Вставить("ПараметрыКассыККМ",            ПараметрыКассыККМ);
	Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КассаККМ", ПараметрыКассыККМ.КассаККМ);
	
	ОткрытьФорму(
		"Документ.ВнесениеДенежныхСредствВКассуККМ.Форма.ФормаВыбораРасходногоКассовогоОрдера",
		ПараметрыОткрытия,,,,,
		Новый ОписаниеОповещения("ВнесениеДенегЗавершение", ЭтотОбъект, Контекст),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВыемкаДенежныхСредств(Форма, ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                        Форма);
	Контекст.Вставить("ПараметрыКассыККМ",            ПараметрыКассыККМ);
	Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	
	ОткрытьФорму(
		"Документ.ВыемкаДенежныхСредствИзКассыККМ.Форма.ВводСуммы",
		Новый Структура("Валюта", ПараметрыКассыККМ.Валюта),,,,,
		Новый ОписаниеОповещения("ВыемкаДенегЗавершение", ЭтотОбъект, Контекст),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВывестиТекстНаДисплейПокупателя(Форма, ИдентификаторУстройства, Текст) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                             Форма);
	ДополнительныеПараметры.Вставить("ИдентификаторУстройства",           ИдентификаторУстройства);
	ДополнительныеПараметры.Вставить("ТекстДляВыводаНаДисплейПокупателя", Текст);
	
	МенеджерОборудованияКлиент.НачатьОчисткуДисплеяПокупателя(
		Новый ОписаниеОповещения("ПослеЗавершенияОчисткиДисплеяПокупателя", ЭтотОбъект, ДополнительныеПараметры),
		Форма.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура ВывестиТекстНаДисплеиПокупателя(Форма, Дисплеи, Текст) Экспорт
	
	Для каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		
		Если Не МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(Дисплей.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		РозничныеПродажиКлиент.ВывестиТекстНаДисплейПокупателя(
			Форма,
			Дисплей.Ссылка,
			Текст);
		
	КонецЦикла;
	
КонецПроцедуры


// Подготовливает данные для вывода на дисплей покупателя.
//
// Параметры:
//  Заголовок - Строка - Заголовок выводимого на дисплей покупателя значения.
//  Значение - Число, Строка - Выводимое значение (Сумма).
//
// Возвращаемое значение:
//  Строка - Подготовленная строка.
//
Функция ПодготовитьСтрокуКВыводуНаДисплейПокупателя(Заголовок = "", Значение = "") Экспорт
	
	Результат = "";
	
	ДлинаТекста     = 20;
	Пробелы20       = "                    ";
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	
	ЗначениеИтог = Формат(Значение, ФорматнаяСтрока);
	
	ДлинаЗначения = СтрДлина(ЗначениеИтог);
	ДлинаЗаголовка = СтрДлина(Заголовок);
	Если ДлинаЗначения + ДлинаЗаголовка > ДлинаТекста Тогда
		Результат = Лев(ЗначениеИтог, ДлинаТекста);
	ИначеЕсли ДлинаЗначения + ДлинаЗаголовка = ДлинаТекста Тогда
		Результат = Заголовок + ЗначениеИтог;
	Иначе
		Результат = Заголовок + Лев(Пробелы20, ДлинаТекста - ДлинаЗаголовка - ДлинаЗначения) + ЗначениеИтог;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область УправлениеСостояниемСмены

// Контролирует параметры текущей кассовой смены, при необходимости открывает и закрывает кассовую смену.
//
// Параметры:
//  Форма - Форма - Форма документа в которой выполняется контроль кассовой смены
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции
//
Процедура ОбработатьСостояниеСмены(Форма, ОписаниеОповещенияЗавершение) Экспорт
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПараметрыККТ") Тогда
		ПараметрыКассыККМ = Форма.ПараметрыККТ.ИдентификаторУстройства;
		Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Форма.ПараметрыККТ.ИдентификаторУстройства);
	Иначе
		ПараметрыКассыККМ = Форма.ПараметрыКассыККМ;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект")
			И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "КассаККМ") Тогда
			КассаККМ = Форма.Объект.КассаККМ;
		Иначе
			КассаККМ = Форма.КассаККМ;
		КонецЕсли;
		Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Кассир") Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, Форма.СтруктураСостояниеКассовойСмены);
	КонецЕсли;
	
	Если Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И Форма.ПраваДоступа.ОткрытьСмену Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ОткрытьКассовуюСмену", НСтр("ru = 'Открыть смену'"));
		Кнопки.Добавить("Отмена",               НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УправлениеСостояниемСменыОбработкаКоманды", РозничныеПродажиКлиент, ДополнительныеПараметры),
			НСтр("ru = 'Перед выполнением операции требуется открыть новую кассовую смену.'"), Кнопки);
		Возврат;
		
	ИначеЕсли Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И Не Форма.ПраваДоступа.ОткрытьСмену Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Кассовая смена не открыта.'"));
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Ложь);
		Возврат;
		
	КонецЕсли;
	
	Если Форма.СтруктураСостояниеКассовойСмены.Ошибка24Часа
		И Форма.ПраваДоступа.ОткрытьСмену
		И Форма.ПраваДоступа.ЗакрытьСмену Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ЗакрытьИОткрытьКассовуюСмену", НСтр("ru = 'Открыть смену'"));
		Кнопки.Добавить("Отмена",                       НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УправлениеСостояниемСменыОбработкаКоманды", РозничныеПродажиКлиент, ДополнительныеПараметры),
			НСтр("ru = 'С момента открытия смены прошло более 24 часов. Перед выполнением операции требуется открыть новую кассовую смену.'"), Кнопки);
		Возврат;
		
	ИначеЕсли Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И (Не Форма.ПраваДоступа.ОткрытьСмену ИЛИ Не Форма.ПраваДоступа.ЗакрытьСмену) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'С момента открытия смены прошло более 24 часов. Перед выполнением операции требуется открыть новую кассовую смену.'"));
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Ложь);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаПлатежнымиКартами

// Вызывает процедуры оплаты платежной картой
//
// Параметры:
//  РезультатПроведения - Булево - Признак успешного проведения оплачиваемого чека ККМ
//  ДополнительныеПараметры - Структура
//
Процедура ДобавитьОплатуКартой(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатПроведения Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭквайринговыеТерминалы.Количество() = 1 Тогда
		
		ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала(
			ДополнительныеПараметры.ЭквайринговыеТерминалы[0].Значение,
			ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ЭквайринговыеТерминалы.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
		
		Для каждого Терминал Из ДополнительныеПараметры.ЭквайринговыеТерминалы Цикл
			ПараметрыФормы.СписокВыбора.Добавить(Терминал.Значение, Терминал.Значение.Ссылка);
		КонецЦикла;
		
		ОткрытьФорму(
			"Документ.ЧекККМ.Форма.ВыборЭквайринговогоТерминала",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения(
				"ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала",
				РозничныеПродажиКлиент, ДополнительныеПараметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаОплатыПлатежнымиКартами

// Вызывает процедуры отмены оплаты платежной картой
//
// Параметры:
//  РезультатПроведения - Булево - Признак успешного проведения оплачиваемого чека ККМ
//  ДополнительныеПараметры - Структура
//
Процедура ОтменитьОплатуКартой(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не РезультатПроведения Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
		Возврат;
	КонецЕсли;
	
	РезультатОтменыОплатыКартой = СтруктураРезультатаОтменыОплатыКартой();
	РезультатОтменыОплатыКартой.СуммаОперации  = ТекущиеДанные.Сумма;
	РезультатОтменыОплатыКартой.СсылочныйНомер = ТекущиеДанные.СсылочныйНомер;
	РезультатОтменыОплатыКартой.НомерЧека      = ТекущиеДанные.НомерЧекаЭТ;
	РезультатОтменыОплатыКартой.СтрокаОплаты   = ТекущиеДанные;
	
	РезультатОтменыОплатыКартой.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	РезультатОтменыОплатыКартой.Форма                   = ДополнительныеПараметры.Форма;
	
	ИдентификаторУстройстваЭТ = Неопределено;
	Для каждого Терминал Из ДополнительныеПараметры.Форма.ЭквайринговыеТерминалы Цикл
		Если Терминал.Значение.Ссылка = ТекущиеДанные.ЭквайринговыйТерминал Тогда
			СтруктураЭквайринговыйТерминал = Терминал.Значение;
			ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ)
		Или (СтруктураЭквайринговыйТерминал <> Неопределено
		   И СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
		
		Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
			РезультатЭТ = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваЭТ);
		Иначе
			РезультатЭТ = Истина;
		КонецЕсли;
		
		Если РезультатЭТ Тогда
			
			Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
				
				ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
				ПараметрыОперации.ТипТранзакции  = ДополнительныеПараметры.ТипТранзакции;
				ПараметрыОперации.СуммаОперации  = ТекущиеДанные.Сумма;
				ПараметрыОперации.НомерКарты     = ТекущиеДанные.НомерПлатежнойКарты;
				ПараметрыОперации.НомерЧека      = ТекущиеДанные.НомерЧекаЭТ;
				ПараметрыОперации.СсылочныйНомер = ТекущиеДанные.СсылочныйНомер;
				ПараметрыОперации.КодАвторизации = ТекущиеДанные.КодАвторизации;
				
				Оповещение = Новый ОписаниеОповещения(
					"ПослеВыполненияОперацииОтменыОплатыКартойНаЭквайринговомТерминале",
					ЭтотОбъект,
					РезультатОтменыОплатыКартой);
				
				МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
					Оповещение, ДополнительныеПараметры.Форма.УникальныйИдентификатор,
					ИдентификаторУстройстваЭТ,
					ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства,
					ПараметрыОперации);
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")  + " "+ ТекущиеДанные.Сумма               + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")     + " "+ ТекущиеДанные.НомерПлатежнойКарты + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'") + " "+ ТекущиеДанные.СсылочныйНомер      + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")      + " "+ ТекущиеДанные.НомерЧекаЭТ         + Символы.ПС;
				ТекстВопроса = ТекстВопроса + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
				
				ПоказатьВопрос(
					Новый ОписаниеОповещения(
						"ОтменаОплатыКартойПослеВопросаОЗавершенииАвторизации",
						РозничныеПродажиКлиент,
						РезультатОтменыОплатыКартой),
					ТекстВопроса,
					РежимДиалогаВопрос.ДаНет);
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Эквайринговый терминал не подключен. Операция по карте не выполнена.'"));
			
			ВыполнитьОбработкуОповещения(
				ОповещениеПриЗавершении,
				Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьОтчетОРозничныхПродажах(Объект)
	
	ОписаниеОшибки = "";
	МассивДокументов = РозничныеПродажиВызовСервера.ЗакрытьКассовуюСмену(Объект, Ложь, ОписаниеОшибки);
	
	// Все результирующие документы выводим пользователю.
	Для Каждого Документ Из МассивДокументов Цикл
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ, ПровестиПриОткрытии", Документ, Истина));
		
	КонецЦикла;
	
	// Текст ошибки должен появиться в окне открытого документа.
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Смена закрыта на фискальном регистраторе.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Оповестить("Запись_ОтчетОРозничныхПродажах", Новый Структура, МассивДокументов);
	
КонецПроцедуры

#Область УправлениеСостояниемСмены

Процедура УправлениеСостояниемСменыОбработкаКоманды(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "ОткрытьКассовуюСмену" Тогда
		ОткрытьКассовуюСмену(
			ДополнительныеПараметры.ПараметрыКассыККМ,
			Новый ОписаниеОповещения("УправлениеСостояниемСменыПослеОткрытияКассовойСмены", РозничныеПродажиКлиент, ДополнительныеПараметры));
	КонецЕсли;
	
	Если Результат = "ЗакрытьИОткрытьКассовуюСмену" Тогда
		ЗакрытьКассовуюСмену(
			ДополнительныеПараметры.ПараметрыКассыККМ,
			Новый ОписаниеОповещения("УправлениеСостояниемСменыПослеЗакрытияКассовойСмены", РозничныеПродажиКлиент, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСостояниемСменыПослеЗакрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("Структура")
			Или ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("ФиксированнаяСтруктура") Тогда
			КассаККМФискальноеУстройство = ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ;
		Иначе
			КассаККМФискальноеУстройство = ДополнительныеПараметры.ПараметрыКассыККМ;
		КонецЕсли;
		
		ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМФискальноеУстройство);
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "Объект")
			И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма.Объект, "Кассир") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
		ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "Объект") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены);
		КонецЕсли;
		
		Если Не ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
			РозничныеПродажиКлиент.ОткрытьКассовуюСмену(ДополнительныеПараметры.ПараметрыКассыККМ, ДополнительныеПараметры.ОбработкаОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСостояниемСменыПослеОткрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("Структура")
			Или ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("ФиксированнаяСтруктура") Тогда
			КассаККМФискальноеУстройство = ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ;
		Иначе
			КассаККМФискальноеУстройство = ДополнительныеПараметры.ПараметрыКассыККМ;
		КонецЕсли;
		
		ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМФискальноеУстройство);
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "Объект")
			И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма.Объект, "Кассир") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
		ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "Объект") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Истина);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаПлатежнымиКартами

Функция СтруктураРезультатаОплатыКартой()
	
	РезультатОплатыКартой = Новый Структура;
	РезультатОплатыКартой.Вставить("ЭквайринговыйТерминал");
	РезультатОплатыКартой.Вставить("НомерКарты");
	РезультатОплатыКартой.Вставить("СуммаОперации");
	РезультатОплатыКартой.Вставить("СсылочныйНомер");
	РезультатОплатыКартой.Вставить("НомерЧека");
	РезультатОплатыКартой.Вставить("КодАвторизации");
	
	РезультатОплатыКартой.Вставить("ОповещениеОЗавершении");
	
	Возврат РезультатОплатыКартой;
	
КонецФункции

Процедура ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала(СтруктураЭквайринговыйТерминал, ДополнительныеПараметры) Экспорт
	
	Если СтруктураЭквайринговыйТерминал <> Неопределено Тогда
		ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	Иначе
		ИдентификаторУстройстваЭТ = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры.ИдентификаторУстройстваЭТ      = ИдентификаторУстройстваЭТ;
	ДополнительныеПараметры.СтруктураЭквайринговыйТерминал = СтруктураЭквайринговыйТерминал;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ)
		Или (СтруктураЭквайринговыйТерминал <> Неопределено
		   И СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
		
		Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
			РезультатЭТ = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваЭТ);
		Иначе
			РезультатЭТ = Истина;
		КонецЕсли;
		
		Если РезультатЭТ Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Сумма",       ДополнительныеПараметры.ФормаАвторизации_Сумма);
			ПараметрыФормы.Вставить("ПределСуммы", ДополнительныеПараметры.ФормаАвторизации_ПределСуммы);
			ПараметрыФормы.Вставить("Валюта",      ДополнительныеПараметры.Валюта);
			
			Если СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
				ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
			КонецЕсли;
			
			ОткрытьФорму(
				"Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,,
				Новый ОписаниеОповещения(
					"ДобавитьОплатуКартойЗавершение",
					РозничныеПродажиКлиент,
					ДополнительныеПараметры),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Эквайринговый терминал не подключен. Операция по карте не выполнена.'"));
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
			
		КонецЕсли;
		
	Иначе
		
		// Не выбран эквайринговый терминал
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.СуммаОперации  = Результат.Сумма;
		ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
		ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияОперацииОплатыКартойНаЭквайринговомТерминале", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение, ДополнительныеПараметры.Форма.УникальныйИдентификатор,
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ,
			ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства,
			ПараметрыОперации);
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ Результат.Сумма + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
		
		РезультатОплатыКартой = СтруктураРезультатаОплатыКартой();
		РезультатОплатыКартой.ЭквайринговыйТерминал = ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.Ссылка;
		РезультатОплатыКартой.НомерКарты            = Результат.НомерКарты;
		РезультатОплатыКартой.СуммаОперации         = Результат.Сумма;
		РезультатОплатыКартой.НомерЧека             = Результат.НомерЧека;
		РезультатОплатыКартой.СсылочныйНомер        = Результат.СсылочныйНомер;
		РезультатОплатыКартой.КодАвторизации        = Неопределено;
		
		РезультатОплатыКартой.ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ОплатаКартойПослеВопросаОЗавершенииАвторизации",
				РозничныеПродажиКлиент,
				РезультатОплатыКартой),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияОперацииОплатыКартойНаЭквайринговомТерминале(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При выполнении операции возникла ошибка:
			           |""%1"".
			           |Оплата по карте не была произведена.'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		
	Иначе
		
		РезультатОплатыКартой = СтруктураРезультатаОплатыКартой();
		РезультатОплатыКартой.ЭквайринговыйТерминал = ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.Ссылка;
		РезультатОплатыКартой.НомерКарты            = РезультатВыполнения.НомерКарты;
		РезультатОплатыКартой.СуммаОперации         = РезультатВыполнения.СуммаОперации;
		РезультатОплатыКартой.СсылочныйНомер        = РезультатВыполнения.СсылочныйНомер;
		РезультатОплатыКартой.НомерЧека             = РезультатВыполнения.НомерЧека;
		РезультатОплатыКартой.КодАвторизации        = РезультатВыполнения.КодАвторизации;
		
		РезультатОплатыКартой.ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатОплатыКартой);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОплатаКартойПослеВопросаОЗавершенииАвторизации(РезультатВопроса, РезультатОплатыКартой) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбработкуОповещения(РезультатОплатыКартой.ОповещениеОЗавершении, РезультатОплатыКартой);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(РезультатОплатыКартой.ОповещениеОЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаОплатыПлатежнымиКартами

Функция СтруктураРезультатаОтменыОплатыКартой()
	
	РезультатОтменыОплатыКартой = Новый Структура;
	РезультатОтменыОплатыКартой.Вставить("СуммаОперации");
	РезультатОтменыОплатыКартой.Вставить("СсылочныйНомер");
	РезультатОтменыОплатыКартой.Вставить("НомерЧека");
	
	РезультатОтменыОплатыКартой.Вставить("СтрокаОплаты");
	РезультатОтменыОплатыКартой.Вставить("ОповещениеПриЗавершении");
	РезультатОтменыОплатыКартой.Вставить("Форма");
	
	Возврат РезультатОтменыОплатыКартой;
	
КонецФункции

Процедура ОтменаОплатыКартойПослеВопросаОЗавершенииАвторизации(РезультатВопроса, РезультатОтменыОплатыКартой) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартойЗавершение", РезультатОтменыОплатыКартой.Форма, РезультатОтменыОплатыКартой));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			РезультатОтменыОплатыКартой.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Ложь, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияОперацииОтменыОплатыКартойНаЭквайринговомТерминале(РезультатВыполнения, РезультатОтменыОплатыКартой) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При выполнении операции возникла ошибка:
			           |""%1"".
			           |Отмена оплаты по карте не была произведена.'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(
			РезультатОтменыОплатыКартой.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Ложь, Ложь));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартойЗавершение", РезультатОтменыОплатыКартой.Форма, РезультатОтменыОплатыКартой));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтменитьОплатуПлатежнымиКартамиПоследовательно(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() > 0 Тогда
		
		СтрокаОплаты = ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами[ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() - 1];
		ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Удалить(ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Найти(СтрокаОплаты));
		
		ПараметрыОтмены = Новый Структура;
		ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиПоследовательно", РозничныеПродажиКлиент, ДополнительныеПараметры));
		ПараметрыОтмены.Вставить("ТекущиеДанные",           СтрокаОплаты);
		ПараметрыОтмены.Вставить("Форма",                   ДополнительныеПараметры.Форма);
		ПараметрыОтмены.Вставить("Валюта",                  ДополнительныеПараметры.Валюта);
		ПараметрыОтмены.Вставить("ПараметрыКассыККМ",       ДополнительныеПараметры.ПараметрыКассыККМ);
		ПараметрыОтмены.Вставить("ТипТранзакции",           ДополнительныеПараметры.ТипТранзакции);
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартой", ДополнительныеПараметры.Форма, ПараметрыОтмены));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Процедура ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено 
		И РезультатВыбора.Действие = "ОтменитьОплату" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КодАвторизации");
		ПараметрыОтбора.Вставить("НомерПлатежнойКарты");
		ПараметрыОтбора.Вставить("НомерСтроки");
		ПараметрыОтбора.Вставить("НомерЧекаЭТ");
		ПараметрыОтбора.Вставить("СсылочныйНомер");
		ПараметрыОтбора.Вставить("Сумма");
		ПараметрыОтбора.Вставить("ЭквайринговыйТерминал");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, РезультатВыбора.ВыбраннаяСтрока);
		
		НайденныеСтроки = ДополнительныеПараметры.Форма.Объект.ОплатаПлатежнымиКартами.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ПараметрыОтмены = Новый Структура;
			ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиЗавершение", ДополнительныеПараметры.Форма, ДополнительныеПараметры));
			ПараметрыОтмены.Вставить("ТекущиеДанные",           НайденныеСтроки[0]);
			ПараметрыОтмены.Вставить("Форма",                   ДополнительныеПараметры.Форма);
			ПараметрыОтмены.Вставить("Валюта",                  ДополнительныеПараметры.Валюта);
			ПараметрыОтмены.Вставить("ПараметрыКассыККМ",       ДополнительныеПараметры.ПараметрыКассыККМ);
			ПараметрыОтмены.Вставить("ТипТранзакции",           ДополнительныеПараметры.ТипТранзакции);
			
			ВыполнитьОбработкуОповещения(
				Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартой", ДополнительныеПараметры.Форма, ПараметрыОтмены));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

Процедура ПослеЗавершенияОчисткиДисплеяПокупателя(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(
			Новый ОписаниеОповещения("ПослеВыводаТекстаНаДисплейПокупателя", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.Форма.УникальныйИдентификатор,
			ДополнительныеПараметры.ИдентификаторУстройства,
			ДополнительныеПараметры.ТекстДляВыводаНаДисплейПокупателя);
		
	Иначе
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.
			           |Дополнительное описание:
			           |%1'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаТекстаНаДисплейПокупателя(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.
			           |Дополнительное описание:
			           |%1'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КассовыеСмены

Процедура ПослеВыполненияКомандыОткрытияСмены(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СменаОткрытаНаУстройстве = РезультатВыполнения.Результат;
	Если Не СменаОткрытаНаУстройстве Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При открытии смены произошла ошибка.
			           |Смена не открыта на фискальном устройстве.
			           |Дополнительное описание:
			           |%1'"),
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, СменаОткрытаНаУстройстве);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияКомандыЗакрытияСмены(РезультатВыполнения, Контекст) Экспорт
	
	СнятZОтчетНаУстройстве = РезультатВыполнения.Результат;
	Если СнятZОтчетНаУстройстве Тогда
		
		СформироватьОтчетОРозничныхПродажах(Контекст.ФискальноеУстройство);
		
		Если Контекст.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, Истина);
		КонецЕсли;
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'При снятии отчета на фискальном устройстве произошла ошибка.
		                    |""%ОписаниеОшибки%""
		                    |
		                    |Если смена на фискальном устройстве закрыта, то
		                    |нажмите ""Да"" для формирования отчета о розничных продажах.
		                    |
		                    |Закрыть смену?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОшибки",               РезультатВыполнения.ОписаниеОшибки);
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияЗавершение", Контекст.ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("ФискальноеУстройство",         Контекст.ФискальноеУстройство);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ПослеОтветаНаВопросОПринудительномФормированииОтчетаОРозничныхПродажах",
				РозничныеПродажиКлиент,
				ДополнительныеПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтветаНаВопросОПринудительномФормированииОтчетаОРозничныхПродажах(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СформироватьОтчетОРозничныхПродажах(Контекст.ФискальноеУстройство);
		
		Если Контекст.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, Истина);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном устройстве произошла ошибка.
		                     |""%ОписаниеОшибки%""
		                     |Отчет на фискальном устройстве не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Контекст.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Контекст.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВнесениеИВыемкаДенег

Процедура ВыемкаДенегЗавершение(ИзымаемаяСумма, ДополнительныеПараметры) Экспорт
	
	Если ИзымаемаяСумма <> Неопределено И ТипЗнч(ИзымаемаяСумма) = Тип("Число") Тогда
		
		РеквизитыВыемкаДенежныхСредствИзКассыККМ = Новый Структура;
		РеквизитыВыемкаДенежныхСредствИзКассыККМ.Вставить("Организация",    ДополнительныеПараметры.ПараметрыКассыККМ.Организация);
		РеквизитыВыемкаДенежныхСредствИзКассыККМ.Вставить("КассаККМ",       ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ);
		РеквизитыВыемкаДенежныхСредствИзКассыККМ.Вставить("СуммаДокумента", ИзымаемаяСумма);
		РеквизитыВыемкаДенежныхСредствИзКассыККМ.Вставить("Валюта",         ДополнительныеПараметры.ПараметрыКассыККМ.Валюта);
		
		Если ДополнительныеПараметры.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибки = "";
			Результат = РозничныеПродажиВызовСервера.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(
				РеквизитыВыемкаДенежныхСредствИзКассыККМ,
				ОписаниеОшибки);
			
			Если Не Результат Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'При выемке денежных средств из кассы ККМ произошла ошибка.
					           |Дополнительное описание:
					           |%1'"), ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Результат);
			КонецЕсли;
			
		Иначе
			
			ПараметрыОперации = Новый Структура;
			ПараметрыОперации.Вставить("Сумма",                           ИзымаемаяСумма);
			ПараметрыОперации.Вставить("ДокументСсылка",                  Неопределено);
			ПараметрыОперации.Вставить("Организация",                     ДополнительныеПараметры.ПараметрыКассыККМ.Организация);
			ПараметрыОперации.Вставить("ТорговыйОбъект",                  ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ);
			ПараметрыОперации.Вставить("ПодключенноеОборудование",        ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства);
			ПараметрыОперации.Вставить("ВыемкаДенежныхСредствИзКассыККМ", РеквизитыВыемкаДенежныхСредствИзКассыККМ);
			
			ПодключаемоеОборудованиеУТКлиент.ПробитьЧекВыемкаДенежныхСредств(
				ДополнительныеПараметры.Форма,
				ПараметрыОперации,
				Неопределено,
				ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнесениеДенегЗавершение(СтруктураВыбранныеДанные, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВыбранныеДанные = Неопределено Тогда
		Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыВнесениеДенежныхСредствВКассуККМ = Новый Структура;
	РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("Организация",       СтруктураВыбранныеДанные.Организация);
	РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("Касса",             СтруктураВыбранныеДанные.Касса);
	РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("КассаККМ",          СтруктураВыбранныеДанные.КассаККМ);
	РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("СуммаДокумента",    СтруктураВыбранныеДанные.СуммаВнесения);
	РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("Валюта",            СтруктураВыбранныеДанные.Валюта);
	РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("ДокументОснование", СтруктураВыбранныеДанные.РасходныйКассовыйОрдер);
	
	Если ДополнительныеПараметры.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ОписаниеОшибки = "";
		Результат = РозничныеПродажиВызовСервера.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(
			РеквизитыВнесениеДенежныхСредствВКассуККМ,
			ОписаниеОшибки);
			
		Если Не Результат Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'При внесении денежных средств в кассу ККМ произошла ошибка.
				           |Дополнительное описание:
				           |%1'"),
				ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Результат);
		КонецЕсли;
		
	Иначе
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("Сумма",                            СтруктураВыбранныеДанные.СуммаВнесения);
		ПараметрыОперации.Вставить("Валюта",                           СтруктураВыбранныеДанные.Валюта);
		ПараметрыОперации.Вставить("ДокументСсылка",                   Неопределено);
		ПараметрыОперации.Вставить("Организация",                      СтруктураВыбранныеДанные.Организация);
		ПараметрыОперации.Вставить("ТорговыйОбъект",                   СтруктураВыбранныеДанные.КассаККМ);
		ПараметрыОперации.Вставить("ПодключенноеОборудование",         ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства);
		ПараметрыОперации.Вставить("ВнесениеДенежныхСредствВКассуККМ", РеквизитыВнесениеДенежныхСредствВКассуККМ);
		
		ПодключаемоеОборудованиеУТКлиент.ПробитьЧекВнесениеДенежныхСредств(
			ДополнительныеПараметры.Форма,
			ПараметрыОперации,
			Неопределено,
			ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
