
#Область ПрограмныйИнтерфейс

// Для заданной даты формирует строковое представление заданного интервала
//
// Параметры:
//  ДатаПериода  - Дата - дата для которой необходимо сформировать строковое представление интервала
//  Периодичность  - Перечисления.Периодичность, Число - интервал передставление которого необходимо сформировать
//
// Возвращаемое значение:
//  Строка - строковое представление интервала
//
Функция ПредставлениеИнтервала(ДатаПериода, Знач Периодичность) Экспорт
	
	Если ТипЗнч(ДатаПериода) <> Тип("Дата") Тогда
		Возврат ДатаПериода;
	КонецЕсли;
	
	Если Периодичность = 6 Тогда
		Периодичность = Перечисления.Периодичность.День;
	ИначеЕсли Периодичность = 7 Тогда
		Периодичность = Перечисления.Периодичность.Неделя;
	ИначеЕсли Периодичность = 8 Тогда
		Периодичность = Перечисления.Периодичность.Декада;
	ИначеЕсли Периодичность = 9 Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	ИначеЕсли Периодичность = 10 Тогда
		Периодичность = Перечисления.Периодичность.Квартал;
	ИначеЕсли Периодичность = 11 Тогда
		Периодичность = Перечисления.Периодичность.Полугодие;
	ИначеЕсли Периодичность = 12 Тогда
		Периодичность = Перечисления.Периодичность.Год;
	КонецЕсли;
	
	ДатаНачала = НачалоПериода(ДатаПериода, Периодичность);
	ДатаОкончания = КонецПериода(ДатаПериода, Периодичность);
	Если Периодичность = Перечисления.Периодичность.Полугодие И Месяц(ДатаНачала) = 7 Тогда
		Возврат "2 " + НСтр("ru = 'полугодие'") + " " + Формат(Год(ДатаНачала), "ЧГ=0") + " г.";
	КонецЕсли;
	
	Возврат ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина");
	
КонецФункции

// Возвращает начальную дату интервала
//
// Параметры:
//  ДатаПериода  - <Дата> - дата входящая в интервал
//  Периодичность  - <Перечисления.Периодичность> - интервал передставление которого необходимо сформировать
//
// Возвращаемое значение:
//   <Дата> - начальная дата переданного интервала
//
Функция НачалоПериода(Знач ДатаПериода, Периодичность) Экспорт
	
	НачалоПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.День Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(НачалоПериода) <= 6 Тогда
			НачалоПериода = Дата(Год(ДатаПериода),1,1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода),7,1);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
		
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции // НачалоПериода()

// Возвращает конечную дату интервала
//
// Параметры:
//  ДатаПериода  - <Дата> - дата входящая в интервал
//  Периодичность  - <Перечисления.Периодичность> - интервал передставление которого необходимо сформировать
//
// Возвращаемое значение:
//   <Дата> - конечная дата переданного интервала
//
Функция КонецПериода(Знач ДатаПериода, Периодичность) Экспорт
	
	КонецПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.День Тогда
		КонецПериода = КонецДня(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		КонецПериода = КонецНедели(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(КонецПериода) <= 6 Тогда
			КонецПериода = Дата(Год(ДатаПериода),6,30,23,59,59);
		Иначе
			КонецПериода = Дата(Год(ДатаПериода),12,31,23,59,59);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		КонецПериода = КонецГода(ДатаПериода);
		
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции // КонецПериода()

#Область ПроцедурыИФункции_РаботыССКД

// Возвращает ссылку на новое поле в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в котором необходмио созадть новое поле
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  ТипЗначения  - ОписаниеТипов - тип данных нового поля схемы компоновки данных (необязательное по умолчанию Неопределено)
//
// Возвращаемое значение:
//  ПолеНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения
//
Функция НовоеПолеНабора(НаборДанных, Поле, ПутьКДанным = "", Заголовок = "", ТипЗначения = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = Поле;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле = Поле;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок = Заголовок;
	Если ТипЗначения <> Неопределено Тогда
		НовоеПоле.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Возвращает ссылку на новый ресурс в переданной схеме компоновки данных
//
// Параметры:
//  СхемаКД  - <СхемаКомпоновкиДанных> - схема компоновки данных в которой неоходимо создать новый ресурс
//  ПутькДанным  - <Строка> - путь к данным нового ресурса схемы компоновки данных
//  Агрегат  - <Строка> - агрегатная функция нового ресурса (необязательное по умолчанию "Сумма")
//  ВыражениеРесурса  - <Строка> - выражение вычисления нового ресурса (необязательное)
//
// Возвращаемое значение:
//   <ПолеИтогаСхемыКомпоновкиДанных> - ссылка на новый ресурс схемы компоновки данных
//
Функция НовыйРесурс(СхемаКД, ПутькДанным, Агрегат = "Сумма", ВыражениеРесурса = "") Экспорт
	
	НовыйРесурс = СхемаКД.ПоляИтога.Добавить();
	НовыйРесурс.ПутькДанным = ПутькДанным;
	НовыйРесурс.Выражение = Агрегат + "("+ НовыйРесурс.ПутькДанным +")";
	Если НЕ ПустаяСтрока(ВыражениеРесурса) Тогда
		НовыйРесурс.Выражение = ВыражениеРесурса;
	КонецЕсли;
	
	Возврат НовыйРесурс;
	
КонецФункции

// Возвращает ссылку на новое вычисляемое поле в переданной схеме компоновки данных
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема компоновки данных в которой неоходимо создать новое вычисляемое поле
//  ПутьКДанным           - Строка - путь к данным вычисляемого поля схемы компоновки данных
//  ВыражениеРесурса      - Строка - выражение вычисления нового вычисляемого поля
//  Заголовок             - Строка - заголовок нового вычисляемого поля (необязательное)
//  ИскатьИПерезаполнять  - Булево - Истина - добавить новое и заполнить или перезаполнить найденное поле, 
//                                   Ложь - добавить новое и заполнить без поиска дублей, 
//                                   Неопределено - добавить новое и заполнить или оставить найденное поле без изменений. 
//                                   Значение по умолчанию - Ложь
//  ТипЗначения           - ОписаниеТипов - Описание типов вычисляемого поля
//                        - Неопределено - Тип значения установлен не будет, по умолчанию Неопределено
//
// Возвращаемое значение:
//  ВычисляемоеПолеСхемыКомпоновкиДанных - ссылка на новое вычисляемое поле схемы компоновки данных
//
Функция НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, ВыражениеПоля, Заголовок = "", ИскатьИПерезаполнять = Ложь, ТипЗначения = Неопределено) Экспорт
	
	// Поиск или создание
	ПолеДобавлено = Ложь;
	Если ИскатьИПерезаполнять = Ложь Тогда
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		ПолеДобавлено = Истина;
	Иначе
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ПутьКДанным);
		ПолеСуществует = ВычисляемоеПоле <> Неопределено;
		
		Если Не ПолеСуществует Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ПолеДобавлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение
	Если ПолеДобавлено Или Не ИскатьИПерезаполнять = Неопределено Тогда
		ВычисляемоеПоле.ПутьКДанным = ПутьКДанным;
		ВычисляемоеПоле.Выражение = ВыражениеПоля;
		Если НЕ ПустаяСтрока(Заголовок) Тогда
			ВычисляемоеПоле.Заголовок = Заголовок;
		КонецЕсли;
		
		Если НЕ ТипЗначения = Неопределено Тогда
			ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВычисляемоеПоле;
	
КонецФункции

// Возвращает ссылку на новый ресурс по новому вычисляемому полю в переданной схеме компоновки данных
//
// Параметры:
//  СхемаКД  - <СхемаКомпоновкиДанных> - схема компоновки данных в которой неоходимо создать новый ресурс
//  ПутькДанным  - <Строка> - путь к данным нового вычисляемого поля и ресурса схемы компоновки данных
//  ВыражениеПоля  - <Строка> - выражение вычисления нового вычисляемого поля (необязательное по умолчанию "Неопределено")
//  Агрегат  - <Строка> - агрегатная функция нового ресурса (необязательное по умолчанию "Максимум")
//  ВыражениеРесурса  - <Строка> - выражение вычисления нового ресурса (необязательное)
//
// Возвращаемое значение:
//   <ПолеИтогаСхемыКомпоновкиДанных> - ссылка на новый ресурс схемы компоновки данных
//
Функция НовыйВычисляемыйРесурс(Схема, ПутьКДанным, ВыражениеПоля = "Неопределено", Агрегат = "Максимум", ВыражениеРесурса = "") Экспорт
	
	НовоеВычисляемоеПоле = НовоеВычисляемоеПоле(Схема, ПутьКДанным, ВыражениеПоля);
	Ресурс = НовыйРесурс(Схема, ПутьКДанным, Агрегат, ВыражениеРесурса);
	
	Возврат Ресурс;
	
КонецФункции

// Проверяет на равенство два переданных отбора схемы компоновки данных
//
// Параметры:
//  ИсточникОтбор - <ОтборКомпоновкиДанных> - первый элемент сравения
//  ЭлементСравненияОтбор - <ОтборКомпоновкиДанных> - второй элемент сравнения 
//
// Возвращаемое значение:
//   Истина если переданные отборы равны, в противном случае ложь
//
Функция ИспользуемыеОтборыРавны(ИсточникОтбор, ЭлементСравненияОтбор) Экспорт
	
	Если ИсточникОтбор = Неопределено
		И ЭлементСравненияОтбор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИсточникОтбор = Неопределено Тогда
		Возврат Не ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтбор.Отбор);
	КонецЕсли;
	
	Если ЭлементСравненияОтбор = Неопределено Тогда
		Возврат Не ЕстьЗначимыеЭлементыОтбора(ИсточникОтбор.Отбор);
	КонецЕсли;
	
	Для Каждого ЭлементОтбора из ИсточникОтбор.Отбор.Элементы Цикл
		НайденныйЭлемент = Неопределено;
		Если Не НайтиОтбор(ЭлементОтбора, ЭлементСравненияОтбор.Отбор.Элементы, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не ИспользуемыеОтборыРавны(ЭлементОтбора.Элементы, НайденныйЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора из ЭлементСравненияОтбор.Отбор.Элементы Цикл
		НайденныйЭлемент = Неопределено;
		Если Не НайтиОтбор(ЭлементОтбора, ИсточникОтбор.Отбор.Элементы, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не ИспользуемыеОтборыРавны(ЭлементОтбора.Элементы, НайденныйЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает ссылку на новое поле выбора в переданной структуре схемы компоновки данных
//
// Параметры:
//  СтруктураКД  - <ГруппировкаКомпоновкиДанных>,
//                   <ТаблицаКомпоновкиДанных>,
//                   <ГруппировкаТаблицыКомпоновкиДанных> - структура схемы компоновки в которую необходимо добавить новое поле выбора
//  Поле  - <Строка> - путь к данным нового поля выбора
//  Заголовок  - <Строка> - заголовок нового поля выбора (необязательное по умолчанию "Поле")
//
// Возвращаемое значение:
//   <ВыбранноеПолеКомпоновкиДанных> - ссылка на новое поле выбора схемы компоновки данных
//
Функция НовоеПолеВыбора(СтруктураКД, Поле, Заголовок = "") Экспорт
	
	НовоеПолеВыбора = СтруктураКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Поле);
	НовоеПолеВыбора.Заголовок = ?(ПустаяСтрока(Заголовок),Поле,Заголовок);
	
	Возврат НовоеПолеВыбора;
	
КонецФункции

// Возвращает ссылку на новую группировку в переданной структуре схемы компоновки данных
//
// Параметры:
//  СтруктураКД  - <ГруппировкаКомпоновкиДанных>,
//                   <ГруппировкаТаблицыКомпоновкиДанных>,
//                   <КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных>,
//                   <КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных> - структура схемы компоновки в которую необходимо добавить новую группировку
//  ИмяПоляГруппировки  - <Строка> - имя поля группировки
//  ТипГруппировки  - <ТипГруппировкиКомпоновкиДанных> - тип группировки Элементы (БезИерархии), Иерархия, ТолькоИерархия
//
// Возвращаемое значение:
//   <ГруппировкаКомпоновкиДанных> - ссылка на новую группировку схемы компоновки данных
//
Функция НоваяГруппировка(СтруктураКД, ИмяПоляГруппировки = "", ТипГруппировки = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Добавить();
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Структура.Добавить();
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	НовоеПолеГруппировки(Группировка, ИмяПоляГруппировки, ТипГруппировки);
	Группировка.Использование = Истина;
	Группировка.Имя = ИмяПоляГруппировки;
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат Группировка;
	
КонецФункции

// Возвращает ссылку на новое поле группировки в переданной группировке схемы компоновки данных
//
// Параметры:
//  Группировка  - <ГруппировкаКомпоновкиДанных> - структура схемы компоновки в которую необходимо добавить новую группировку
//  ИмяПоляГруппировки  - <Строка> - имя поля группировки
//  ТипГруппировки  - <ТипГруппировкиКомпоновкиДанных> - тип группировки (необязательное по умолчанию Неопределено)
//
// Возвращаемое значение:
//   <ПолеГруппировкиКомпоновкиДанных > - ссылка на новое поле группировки схемы компоновки данных
//
Функция НовоеПолеГруппировки(Группировка, ИмяПоляГруппировки = "", ТипГруппировки = Неопределено) Экспорт
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	Если НЕ ПустаяСтрока(ИмяПоляГруппировки) Тогда
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипГруппировки) Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировки;
	КонецЕсли;
	
	Возврат ПолеГруппировки;
	
КонецФункции

// Возвращает ссылку на новый элемент порядка в переданной настройке схемы компоновки данных
//
// Параметры:
//  НастройкиКомпоновщика - <КомпоновщикНастроекКомпоновкиДанных>,<НастройкиКомпоновкиДанных> - настройки схемы компоновки в которые необходимо добавить новый порядок
//  ИмяПоля - <Строка>, <ПолеКомпоновкиДанных> - поля компоновки по которому необходимо установить сортировку (необязательное)
//  Сортировка  - <Строка> - направление сортировки "ВОЗР", "УБЫВ" (необязательное по умолчанию "ВОЗР")
//
// Возвращаемое значение:
//   <ЭлементПорядкаКомпоновкиДанных> - ссылка на новый элемент порядка настроек схемы компоновки данных
//
Функция НовыйПорядок(НастройкиКомпоновщика, ИмяПоля = "", Сортировка = "ВОЗР") Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	
	НовыйПорядок = НастройкиКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйПорядок.Использование = Истина;
	Если НЕ ПустаяСтрока(ИмяПоля) Тогда
		НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЕсли;
	НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных[Сортировка];
	
	Возврат НовыйПорядок;
	
КонецФункции

// Устанавливает параметр вывода в переданных настройках схемы компоновки данных
//
// Параметры:
//  НастройкиКомпоновщика - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки схемы компоновки
//  ИмяПараметра - <Строка> - имя параметра
//  Значение  - <Произвольный> - значение параметра вывода (необязательное)
//  Использование  - <Булево> - использование параметра вывода (необязательное по умолчанию Истина)
//
Процедура УстановитьПараметрВывода(НастройкиКомпоновщика, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	УстановитьПараметр(НастройкиКД.ПараметрыВывода, ИмяПараметра, Значение, Использование);
	
КонецПроцедуры

// Устанавливает ограничения полей набора данных схемы компоновки данных
//
// Параметры:
//  СхемаКД - <СхемаКомпоновкиДанных> - схема компоновки данных
//  ИменаПолей - <Строка> - имена полей перечисленные через запятую для которых необходимо установить ограничения
//  ОграничениеПоля  - <Строка> - ограничение поля "Группировка", "Поле", "Порядок", "Условие"
//
Процедура УстановитьОграничениеПолей(СхемаКД, ИменаПолей, ОграничениеПоля) Экспорт
	
	ЗначениеОграниченияПоля = Истина;
	ЗначениеОграниченияРеквизита = Неопределено;
	ОграничениеРеквизита = Неопределено;
	Если ОграничениеРеквизита = Неопределено Тогда
		ОграничениеРеквизита = ОграничениеПоля;
	КонецЕсли;
	
	Если ЗначениеОграниченияРеквизита = Неопределено Тогда
		ЗначениеОграниченияРеквизита = ЗначениеОграниченияПоля;
	КонецЕсли;
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолей);
	Для Каждого НаборДанных Из СхемаКД.НаборыДанных Цикл
		Для Каждого ПутьКДанным Из МассивПолей Цикл
			Поле = НаборДанных.Поля.Найти(ПутьКДанным);
			Если Поле <> Неопределено Тогда
				Поле.ОграничениеИспользования[ОграничениеПоля] = ЗначениеОграниченияПоля;
				Поле.ОграничениеИспользованияРеквизитов[ОграничениеРеквизита] = ЗначениеОграниченияРеквизита;
			КонецЕсли;
		КонецЦикла;// по полям набора данных
	КонецЦикла;// по наборам данных СКД
	
КонецПроцедуры

// Устанавливает роль поля набора данных схемы компоновки данных
//
// Параметры:
//  НаборДанных - <НаборДанныхЗапросСхемыКомпоновкиДанных>, <НаборДанныхОбъектСхемыКомпоновкиДанных> - набор данных схемы компоновки данных
//  ПутьКДанным - <Строка> - имя поля для которого необходимо установить роль схемы компоновки
//  РольПоля  - <Структура> - ключи - значение ключа структуры:
//		ВыражениеВидаСчета - ""
//		ГруппаОстатка - ""
//		ИгнорироватьЗначенияNULL - Ложь
//		Измерение - Ложь
//		НомерПериода - 0
//		Обязательное - Ложь
//		Остаток - Ложь
//		ПолеСчета - ""
//		РеквизитИзмерения - Ложь
//		РодительскоеИзмерение - ""
//		Счет - Ложь
//		ТипБухгалтерскогоОстатка - ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет
//		ТипОстатка - ТипОстаткаКомпоновкиДанных.Нет
//		ТипПериода - ТипПериодаКомпоновкиДанных.Основной
//
Процедура УстановитьРольПоляНабора(НаборДанных, ПутьКДанным, РольПоля = Неопределено) Экспорт
	
	Если РольПоля = Неопределено Тогда
		РольПоля = НоваяРольПоляНабораДанных();
	КонецЕсли;
	
	ПолеНабора = НаборДанных.Поля.Найти(ПутьКДанным);
	ЗаполнитьЗначенияСвойств(ПолеНабора.Роль, РольПоля);
	
КонецПроцедуры

// Возвращает структуру роли поля набора данных схемы компоновки данных
// с заполненными пустыми значениями по умолчанию.
//
// Возвращаемое значение: 
//	Структура, ключи - значение ключа структуры:
//		ВыражениеВидаСчета - ""
//		ГруппаОстатка - ""
//		ИгнорироватьЗначенияNULL - Ложь
//		Измерение - Ложь
//		НомерПериода - 0
//		Обязательное - Ложь
//		Остаток - Ложь
//		ПолеСчета - ""
//		РеквизитИзмерения - Ложь
//		РодительскоеИзмерение - ""
//		Счет - Ложь
//		ТипБухгалтерскогоОстатка - ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет
//		ТипОстатка - ТипОстаткаКомпоновкиДанных.Нет
//		ТипПериода - ТипПериодаКомпоновкиДанных.Основной
//
Функция НоваяРольПоляНабораДанных() Экспорт
	
	НоваяРоль = Новый Структура;
	НоваяРоль.Вставить("ВыражениеВидаСчета"      , "");
	НоваяРоль.Вставить("ГруппаОстатка"           , "");
	НоваяРоль.Вставить("ИгнорироватьЗначенияNULL", Ложь);
	НоваяРоль.Вставить("Измерение"               , Ложь);
	НоваяРоль.Вставить("НомерПериода"            , 0);
	НоваяРоль.Вставить("Обязательное"            , Ложь);
	НоваяРоль.Вставить("Остаток"                 , Ложь);
	НоваяРоль.Вставить("ПолеСчета"               , "");
	НоваяРоль.Вставить("РеквизитИзмерения"       , Ложь);
	НоваяРоль.Вставить("РодительскоеИзмерение"   , "");
	НоваяРоль.Вставить("Счет"                    , Ложь);
	НоваяРоль.Вставить("ТипБухгалтерскогоОстатка", ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет);
	НоваяРоль.Вставить("ТипОстатка"              , ТипОстаткаКомпоновкиДанных.Нет);
	НоваяРоль.Вставить("ТипПериода"              , ТипПериодаКомпоновкиДанных.Основной);
	Возврат НоваяРоль;
	
КонецФункции

// Возвращает ссылку на новый макет области
//
// Параметры:
//  СхемаКД - <СхемаКомпоновкиДанных> - схема компоновки данных
//  МакетОбласти  - <ОписанияМакетовСхемыКомпоновкиДанных> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <ОписаниеМакетаСхемыКомпоновкиДанных> - описание макета схемы компоновки данных
//
Функция ДобавитьМакетСхемы(Схема, МакетОбласти, ИмяМакета) Экспорт
	
	ОписаниеМакета = Схема.Макеты.Добавить();
	ОписаниеМакета.Макет = МакетОбласти;
	ОписаниеМакета.Имя = ИмяМакета;
	Возврат ОписаниеМакета;
	
КонецФункции

// Возвращает ссылку на новую связь наборов данных схемы компоновки данных
//
// Параметры:
//  СКД  - <СхемаКомпоновкиДанных> - схема компоновки данных в которой необходимо добавить связь наборов
//  НаборДанныхИсточник  - <НаборДанныхЗапросСхемыКомпоновкиДанных>, <НаборДанныхОбъектСхемыКомпоновкиДанных> - набор данных источник связи
//  НаборДанныхПриемник  - <НаборДанныхЗапросСхемыКомпоновкиДанных>, <НаборДанныхОбъектСхемыКомпоновкиДанных> - набор данных приемник связи
//  ВыражениеИсточник  - <Строка> - Выражение, по которому будет определяться значение связи источника
//  ВыражениеПриемник  - <Строка> - Выражение, по которому будет определяться значение связи приемника (необязательное)
//
// Возвращаемое значение:
//   <СвязьНаборовДанныхСхемыКомпоновкиДанных> - ссылка на новую связь наборов данных
//
Функция НоваяСвязьНаборов(СКД, НаборДанныхИсточник, НаборДанныхПриемник, ВыражениеИсточник, ВыражениеПриемник = "") Экспорт
	
	Связь = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = 	НаборДанныхИсточник;
	Связь.НаборДанныхПриемник = 	НаборДанныхПриемник;
	Связь.ВыражениеИсточник = 		ВыражениеИсточник;
	Если ВыражениеПриемник = "" Тогда
		Связь.ВыражениеПриемник = 		ВыражениеИсточник;
	Иначе
		Связь.ВыражениеПриемник = 		ВыражениеПриемник;
	КонецЕсли;
	
	Возврат Связь;
	
КонецФункции

// Копирует элементы отбора из одной коллекции отбора в другую
//
// Параметры:
//  Источник - ОтборКомпоновкиДанных - откуда копировать
//  Приемник - ОтборКомпоновкиДанных - куда копировать
//  ТолькоИспользуемые - Булево - копировать только используемые
//  ПоляИсключения - Структура - в ключах структуры перечислены поля которые не должны попасть в отбор приемник
//  Постфикс - Строка - произвольная строка которая будет добавлена к имени левого поля
//
Процедура СкопироватьОтбор(ОтборИсточник, ОтборПриемник, ТолькоИспользуемые = Ложь, ПоляИсключения = Неопределено, Постфикс = "") Экспорт
	
	Для Каждого Элемент Из ОтборИсточник.Элементы Цикл
		
		Если НЕ (ТолькоИспользуемые И Элемент.Использование ИЛИ НЕ ТолькоИспользуемые) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлемент = НовыйОтбор(ОтборПриемник,,,Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			СкопироватьОтбор(Элемент, НовыйЭлемент, ТолькоИспользуемые, ПоляИсключения, Постфикс);
		Иначе
			
			Если ЗначениеЗаполнено(ПоляИсключения) Тогда
				Поле = РазделитьИмяПоляИРеквизита(Строка(Элемент.ЛевоеЗначение));
				Если ПоляИсключения.Свойство(Поле.Имя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НовыйЭлемент = НовыйОтбор(ОтборПриемник,,,Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			
			Если Постфикс <> "" Тогда
				Поле = РазделитьИмяПоляИРеквизита(Строка(НовыйЭлемент.ЛевоеЗначение));
				НовоеИмяПоля = Поле.Имя + Постфикс + "." + Поле.Реквизит;
				Если СтрНайти(Поле.Имя, "Субконто") И СтрНайти("ДТКТ", ВРег(Постфикс))Тогда
					Номер = Прав(Поле.Имя, 1);
					Если СтрНайти("12345", Номер) Тогда
						Шаблон = СтрЗаменить(Поле.Имя, Номер, "%1");
						НовоеИмяПоля = СтрШаблон(Шаблон, Постфикс + Номер) + "." + Поле.Реквизит;
					КонецЕсли;
				КонецЕсли;
				НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НовоеИмяПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на группировку компоновки в переданной структуре схемы компоновки данных
//
// Параметры:
//  СтруктураКД - <КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных> - отбор схемы компоновки в который необходимо добавить новый элемент
//  ИмяЭлемента - <Строка> - имя поля компоновки по которому необходимо найти группировка
//
// Возвращаемое значение:
//   <ГруппировкаКомпоновкиДанных> - ссылка на найденный элемент группировки схемы компоновки данных
//
Функция НайтиГруппировку(СтруктураКД, ИмяЭлемента) Экспорт
	
	Результат = Неопределено;
	Для Каждого Элемент Из СтруктураКД Цикл
		Если Элемент.Имя = ИмяЭлемента Тогда
			Результат = Элемент;
			Прервать;
		Иначе
			Результат = НайтиГруппировку(Элемент.Структура, ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на элемент отбора в переданном отборе схемы компоновки данных
//
// Параметры:
//  ОтборКД - <ОтборКомпоновкиДанных> - отбор схемы компоновки в который необходимо добавить новый элемент
//  ИмяЭлемента - <Строка> - имя поля компоновки по которому необходимо найти элемент отбора
//  ЗначениеОтбора - <ПроизвольноеЗначение> - установленное значение отбора по которому необходимо найти элемент отбора
//  ВидСравнения - <ВидСравненияКомпоновкиДанных> - установленный вид сравнения по которому необходимо найти элемент отбора
//
// Возвращаемое значение:
//   <ЭлементОтбораКомпоновкиДанных> - ссылка на найденный элемент отбора схемы компоновки данных
//
Функция НайтиЭлементОтбора(ОтборКД, ИмяЭлемента, ЗначениеОтбора = "НеЗадано", ВидСравнения = Неопределено) Экспорт
	
	Результат = Неопределено;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = НайтиЭлементОтбора(ЭлементОтбора, ИмяЭлемента);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента) Тогда
			Если ЗначениеОтбора <> "НеЗадано" И ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора ИЛИ ЗначениеОтбора = "НеЗадано" Тогда
				Если ВидСравнения <> Неопределено И ЭлементОтбора.ВидСравнения = ВидСравнения ИЛИ ВидСравнения = Неопределено Тогда
					Результат = ЭлементОтбора;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Добавляет новый параметр в переданную коллекцию параметров настроек схемы компоновки данных
//
// Параметры:
//  Параметры - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки схемы компоновки
//  ИмяПараметра - <ПараметрыДанных>, <ПараметрыВывода> - колллекция параметров компоновки данных
//  Значение  - <Произвольный> - значение параметра компоновки (необязательное)
//  Использование  - <Булево> - использование параметра данных (необязательное по умолчанию Истина)
//
Процедура УстановитьПараметр(Параметры, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	Параметр = Параметры.Элементы.Найти(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.Использование = Использование;
	Если Использование Тогда
		Параметр.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет схему компоновки данных и возвращает таблицу результата
//
// Параметры:
//  СхемаКомпоновкиДанных  - <СхемаКомпоновкиДанных> - исполняемая схема компоновки данных
//  НастройкиКомпоновщика  - <КомпоновщикНастроекКомпоновкиДанных> - компоновщик настроек исполняемой схемы компоновки данных
//  ВнешниеНаборыДанных  - <Структура> - внешние наборы компоновки данных - ключ - наименование внешнего набора, значение - таблица значений внешнего набора
//  ВыводВДерево - <Булево> - если Истина выводить в дерево значений
//
// Возвращаемое значение:
//   <ТаблицаЗначений>, <ДеревоЗначений> - результат выполнения схемы компоновки данных
//
Функция ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ВнешниеНаборыДанных = Неопределено, ВыводВДерево = Ложь) Экспорт
	
	МакетКомпоновщика = ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика);
	Возврат ВыгрузитьРезультатСКДПоМакету(МакетКомпоновщика, ВнешниеНаборыДанных, ВыводВДерево);
	
КонецФункции

// Возвращает ссылку на новый элемент отбора в переданном отборе схемы компоновки данных
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор схемы компоновки, в который необходимо добавить новый элемент
//  ЛевоеЗначение - Строка, ПолеКомпоновкиДанных - поле компоновки, по которому необходимо установить отбор (необязательное)
//  ПравоеЗначение  - Произвольный, Строка, ПолеКомпоновкиДанных - значение отбора (необязательное) или поле компоновки
//  ТипОтбора  - ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - тип нового элемента отбора (необязательное)
//  ВидСравнения  - ВидСравненияКомпоновкиДанных - вид сравнения левого и правого значения
//  ПравоеЗначениеПоле  - Булево - указывает использовать ли в качестве правого значения поле компоновки данных
//
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - ссылка на новый элемент отбора схемы компоновки данных
//
Функция НовыйОтбор(Отбор, ЛевоеЗначение, ПравоеЗначение = Неопределено, ТипОтбора = Неопределено, ВидСравнения = Неопределено, ПравоеЗначениеПоле = Ложь) Экспорт
	
	Если ТипОтбора = Неопределено Тогда
		ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
	КонецЕсли;
	
	НовыйОтбор = Отбор.Элементы.Добавить(ТипОтбора);
	Если ЛевоеЗначение <> Неопределено Тогда
		Если ТипЗнч(ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			НовыйОтбор.ЛевоеЗначение = ЛевоеЗначение;
		Иначе
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Если ПравоеЗначениеПоле Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
				НовыйОтбор.ПравоеЗначение = ПравоеЗначение;
			Иначе
				НовыйОтбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПравоеЗначение);
			КонецЕсли;
		Иначе
			НовыйОтбор.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Если ВидСравнения = Неопределено Тогда
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			КонецЕсли;
		Иначе
			НовыйОтбор.ВидСравнения = ВидСравнения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйОтбор;
	
КонецФункции

// Устанавливает новый отбор в переданном отборе схемы компоновки данных
//
// Параметры:
//  ОтборКД - <ОтборКомпоновкиДанных> - отбор схемы компоновки в который необходимо добавить новый элемент
//  ЛевоеЗначение - <Строка>, <ПолеКомпоновкиДанных> - поле компоновки по которому необходимо установить отбор
//  ПравоеЗначение  - <Произвольный> - значение отбора (необязательное)
//  ВидСравнения  - <ВидСравненияКомпоновки> - вид сравнение компоновки данных (необязательное)
//  Использование  - <Булево> - использование нового элемента отбора (необязательное по умолчанию Истина)
//
Процедура УстановитьОтбор(ОтборКД, ЛевоеЗначение, ПравоеЗначение = Неопределено, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	ЭлементОтбора = НайтиЭлементОтбора(ОтборКД, ЛевоеЗначение);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = НовыйОтбор(ОтборКД, ЛевоеЗначение, ПравоеЗначение);
	КонецЕсли;
	ЭлементОтбора.Использование = Использование;
	Если ВидСравнения <> Неопределено Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения;
	КонецЕсли;
	Если Использование Тогда
		ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметр данных в переданных настройках схемы компоновки данных
//
// Параметры:
//  НастройкиКомпоновщика - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки схемы компоновки
//  ИмяПараметра - <Строка> - имя параметра компоновки данных
//  Значение  - <Произвольный> - значение параметра компоновки (необязательное)
//  Использование  - <Булево> - использование параметра данных (необязательное по умолчанию Истина)
//
Процедура УстановитьПараметрКомпоновки(НастройкиКомпоновщика, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	УстановитьПараметр(НастройкиКД.ПараметрыДанных, ИмяПараметра, Значение, Использование);
	
КонецПроцедуры

// Возвращает компоновщик настроек для переданной схемы компоновки данных
//
// Параметры:
//  Схема                    - СхемаКомпоновкиДанных - схема компоновки данных для которой необходимо создать компоновщик настроек
//  ВосстанавливатьНастройки - Булево - признак необходимости восстанавливать настройки 
//
// Возвращаемое значение:
//   КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек для варианта по умолчанию
//
Функция КомпоновщикСхемы(Схема, ВосстанавливатьНастройки = Истина) Экспорт
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(ИсточникДоступныхНастроек);
	Компоновщик.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	Если ВосстанавливатьНастройки Тогда
		Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КонецЕсли;
	
	Возврат Компоновщик;
	
КонецФункции

// Возвращает макет компоновки данных
//
// Параметры:
//  СхемаКомпоновкиДанных  - <СхемаКомпоновкиДанных> - исполняемая схема компоновки данных
//  НастройкиКомпоновщика  - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки исполняемой схемы компоновки данных
//
// Возвращаемое значение:
//   <МакетКомпоновкиДанных> - макет компоновки данных
//
Функция ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.ПолучитьНастройки();
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Возврат МакетКомпоновки;
	
КонецФункции

// Выполняет схему компоновки данных и возвращает таблицу результата
//
// Параметры:
//  МакетКомпоновки  - <МакетКомпоновкиДанных> - макет компоновки данных
//  ВнешниеНаборыДанных  - <Структура> - внешние наборы компоновки данных - ключ - наименование внешнего набора, значение - таблица значений внешнего набора
//  ВыводВДерево - <Булево> - если Истина выводить в дерево значений
//
// Возвращаемое значение:
//   <ТаблицаЗначений>, <ДеревоЗначений> - результат выполнения схемы компоновки данных
//
Функция ВыгрузитьРезультатСКДПоМакету(МакетКомпоновки, ВнешниеНаборыДанных = Неопределено, ВыводВДерево = Ложь) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Если ВыводВДерево Тогда
		Результат = Новый ДеревоЗначений;
	КонецЕсли;
	
	//Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
	КонецЕсли;
	
	//Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на новую группу полей в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных,НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в котором необходмио созадть новое поле
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//
// Возвращаемое значение:
//  ПапкаПолейНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения
//
Функция НоваяГруппаНабора(НаборДанных, ПутьКДанным, Заголовок = "") Экспорт
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = ПутьКДанным;
	КонецЕсли;
	
	НоваяГруппа = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	НоваяГруппа.ПутьКДанным = ПутьКДанным;
	НоваяГруппа.Заголовок = Заголовок;
	
	Возврат НоваяГруппа;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазделитьИмяПоляИРеквизита(ИмяПоля)
	
	Результат = Новый Структура("Имя,Реквизит", "", "");
	МассивИмен = СтрРазделить(ИмяПоля, ".");
	Если МассивИмен.Количество() > 0 Тогда
		Результат.Имя = МассивИмен[0];
	КонецЕсли;
	
	Если МассивИмен.Количество() > 1 Тогда
		МассивИмен.Удалить(0);
		Результат.Реквизит = СтрСоединить(МассивИмен,".");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура возвращает отбор по имени 
// процедура не рекурсивная, т.к. вызывается из ИспользуемыеОтборыРавны,
// в которой уже обработан обход групп
//
// Параметры:
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - искомый отбор
//  ЭлементыОтбора - ОтбораКомпоновкиДанных - отбор, где ищем
//  НайденныйЭлемент - ЭлементОтбораКомпоновкиДанных - найденный элемент отбора
//
Функция НайтиОтбор(ЭлементОтбора, ЭлементыОтбора, НайденныйЭлемент)
	
	Для Каждого ЭлементОтбораСравнения из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбораСравнения) <> Тип(ЭлементОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбораСравнения) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение
				И ЭлементОтбораСравнения.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение
				И ЭлементОтбораСравнения.ВидСравнения = ЭлементОтбора.ВидСравнения
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение
				Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		Иначе
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ТипГруппы = ЭлементОтбора.ТипГруппы
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение
				Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтбор)
	
	Для Каждого ЭлементОтбора из ЭлементСравненияОтбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Возврат Истина;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЕстьЗначимыеЭлементыОтбора(ЭлементОтбора.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
