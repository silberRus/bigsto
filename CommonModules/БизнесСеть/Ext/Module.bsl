#Область ПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. процедуру ТарификацияПереопределяемый.ПриФормированииСпискаУслуг
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ПоставщикПортал1СИТС = Неопределено;
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ЭлектронноеВзаимодействиеКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для Каждого ТекПоставщик Из ПоставщикиУслуг Цикл
		Если ТекПоставщик.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			ПоставщикПортал1СИТС = ТекПоставщик;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоставщикПортал1СИТС = Неопределено Тогда
		ПоставщикПортал1СИТС = Новый Структура;
		ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
		ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
		ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
		ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	КонецЕсли;
	
	Услуги = ПоставщикПортал1СИТС.Услуги;
	
	// Оператор [] используется для исключения ошибки компиляции,
	// если не внедрена Библиотека "Технология сервиса".
	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", "1c-bn-access");
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'ЭДО без электронной подписи для участников 1С:Бизнес-сеть'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполнение команды сервиса.
//
// Параметры:
//   ИмяКоманды - Строка - имя метода.
//   ПараметрыКоманды - Структура - параметры вызова.
//   Результат - Структура - возвращаемые данные, см. ОписаниеРезультатаКомандыСервиса().
//   Отказ - Булево - признак ошибки выполнения.
//
Процедура ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ) Экспорт
	
	// Инициализация переменных.
	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды = Новый Структура;
	КонецЕсли;
	
	// Получение и инициализация общих параметров соединения в сервисе.
	СохранятьПараметрыСеанса = Ложь;
	ПараметрыСоединения = Новый Структура(
		СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить("БизнесСетьПараметрыСоединения"));
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения) Тогда
		ПараметрыСоединения = ОбщиеНастройкиСервиса();
		ПараметрыСоединения.Вставить("СписокКлючей", Неопределено);
	КонецЕсли;
	
	ПараметрыВызова = Неопределено;
	Если Не ПараметрыКоманды.Свойство("ПараметрыВызова", ПараметрыВызова) Тогда
		ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
		СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, ПараметрыСоединения.Идентификатор, Отказ);
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка формирования запроса в сервис'");
		КонецЕсли;
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Если ПараметрыВызова.Свойство("Таймаут") Тогда
		Таймаут = ПараметрыВызова.Таймаут;
	Иначе
		Таймаут = 30;
	КонецЕсли;
		
	Попытка
		Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(
			?(ПараметрыСоединения.ЗащищенноеСоединение, "https", "http"));
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера, ПараметрыСоединения.Порт,,, Прокси, Таймаут,
			ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Бизнес-сеть'")
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		Возврат;
	КонецПопытки;

	ПолучитьКлюч(Соединение, ПараметрыСоединения, ПараметрыКоманды, ПараметрыВызова, СохранятьПараметрыСеанса, Отказ);
	Если Отказ ИЛИ ПустаяСтрока(ПараметрыВызова.Адрес) ИЛИ ПараметрыСоединения.СписокКлючей = Неопределено
		ИЛИ ПараметрыСоединения.СписокКлючей.Получить(ПараметрыВызова.Права) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КлючСоединения = ПараметрыСоединения.СписокКлючей.Получить(ПараметрыВызова.Права).Ключ;
	
	Если ИмяКоманды = "Инициализация" Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнение запроса HTTP к сервису.
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыВызова.Адрес);
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + КлючСоединения);
	
	Если ПараметрыВызова.Свойство("Заголовки") Тогда
		Для Каждого ПараметрЗаголовка Из ПараметрыВызова.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВызова.Данные) Тогда
		Если ТипЗнч(ПараметрыВызова.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыВызова.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыВызова.Данные);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Если ПараметрыВызова.Метод = "get" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "post" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "put" Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "delete" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Length", СтрДлина(HTTPЗапрос.ПолучитьТелоКакСтроку()));
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка обращения к сервису 1С:Бизнес-сеть:'") + " " + ИнформацияОбОшибке().Описание
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		Возврат;
	КонецПопытки;
	
	// Обработка полученных данных.
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	ОбъектJSON = Неопределено;
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		ОбъектJSON = ЗначениеИзСтрокиJSON(ТелоОтвета);
		Если ПараметрыВызова.Свойство("СтруктураРезультата") Тогда
			// Ожидается, что возвращается структура, которую необходимо привести к определенному составу.
			НовыйРезультат = Новый Структура();
			Для Каждого СоставДанных Из ПараметрыВызова.СтруктураРезультата Цикл
				Если ОбъектJSON.Свойство(СоставДанных.Значение) Тогда
					НовыйРезультат.Вставить(СоставДанных.Ключ, ОбъектJSON[СоставДанных.Значение]);
				КонецЕсли;
			КонецЦикла;
			ОбъектJSON = НовыйРезультат;
		КонецЕсли;
		Результат.Данные = ОбъектJSON;
	КонецЕсли;
	
	// Обработка ошибок сервиса.
	ТекстСообщения = "";
	Если Результат.КодСостояния = 403
		ИЛИ Результат.КодСостояния = 400
		ИЛИ Результат.КодСостояния = 500 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка обращения к сервису (%1, код %2).'"),
			ИмяКоманды, Результат.КодСостояния);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ И Не ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках") Тогда
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = НСтр("ru='Ошибка обращения к сервису 1С:Бизнес-сеть.'");
		КонецЕсли;
		ПодробныйТекстОшибки = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru='Адрес: %1.'"), ПараметрыВызова.Адрес);
		Если ТипЗнч(ОбъектJSON) = Тип("Структура") Тогда
			Если ОбъектJSON.Свойство("message") Тогда
				ТекстОшибкиСервиса = ОбъектJSON.message;
			ИначеЕсли ОбъектJSON.Свойство("error_description") Тогда
				ТекстОшибкиСервиса = ОбъектJSON.error_description;
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстОшибкиСервиса) Тогда
				ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Подробности: %1.'"),
					ТекстОшибкиСервиса);
			КонецЕсли;
		КонецЕсли;
		ВидОперации = СтрШаблон(НСтр("ru = 'Команда ""%1""'"), ИмяКоманды);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
			ПодробныйТекстОшибки, ТекстСообщения, "БизнесСеть");
		Результат.ТекстОшибки = ТекстСообщения;
		Результат.ПодробныйТекстОшибки = ПодробныйТекстОшибки;
		Возврат;
	КонецЕсли;
	
	// Сохранение данных параметров соединения в параметрах сеанса.
	Если Не Отказ И СохранятьПараметрыСеанса Тогда
		СохранитьПараметрыСоединенияВСеансе(ПараметрыСоединения);
	КонецЕсли;
	
КонецПроцедуры

// Возврат списка доступных для обмена видов документов со строковым представлением.
//
// Возвращаемое значение:
//   СписокЗначений - список с видами электронных документов.
//
Функция ВидыДокументовСервиса() Экспорт
	
	СписокВидовЭД = Новый СписокЗначений;
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель,    НСтр("ru = 'Акт выполненных работ'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав, НСтр("ru = 'Акт передачи прав'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ,      НСтр("ru = 'Заказ покупателя'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ЗаказТовара,       НСтр("ru = 'Заказ поставщику'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель,
		НСтр("ru = 'Корректировка стоимости'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец,    НСтр("ru = 'Товарная накладная'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара,
		НСтр("ru = 'Отчет о продажах комиссионного товара'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара,
		НСтр("ru = 'Отчет о списании комиссионного товара'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ПрайсЛист,         НСтр("ru = 'Прайс-лист'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.СчетНаОплату,      НСтр("ru = 'Счет на оплату'"));
		
	Возврат СписокВидовЭД;
	
КонецФункции

// Статус регистрации организации в информационной базе.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
//                Если ссылка не указана, то проверятся, есть ли регистрация любой организации
//                в информационной базе.
//
// Возвращаемое значение:
//   Булево - признак регистрации организации.
//
Функция ОрганизацияЗарегистрирована(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации1СБизнесСеть.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.Организации1СБизнесСеть КАК Организации1СБизнесСеть
		|ГДЕ
		|	Организации1СБизнесСеть.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации1СБизнесСеть.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.Организации1СБизнесСеть КАК Организации1СБизнесСеть";
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Регистрация организаций в сервисе.
//
Процедура ЗарегистрироватьОрганизации(МассивОрганизаций, Отказ, ТребуетсяОбновитьИнтерфейс = Неопределено) Экспорт
	
	ПараметрыКоманды = Новый Структура;
	
	// Проверка регистрации Абонента сервиса 1С:Бизнес-сеть.
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	ВыполнитьКомандуСервиса("ПроверкаРегистрацииАбонента", ПараметрыКоманды, Результат, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСервиса = Результат.Данные;
	ТекущийАбонент = Неопределено;
	
	ТекущаяИБПодключена = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи1СБизнесСеть.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.Пользователи1СБизнесСеть КАК Пользователи1СБизнесСеть";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ТекущаяИБПодключена = Ложь;
	КонецЕсли;
	
	ПараметрыОбновления = Новый Структура;
	
	// Если абонент уже существует, то новый абонент не регистрируется.
	Если ДанныеСервиса = Неопределено
		ИЛИ ДанныеСервиса = Ложь
		ИЛИ (ТекущаяИБПодключена = Ложь И ДанныеСервиса = Истина) Тогда
		
		// Регистрация абонента и получение его идентификатора.
		Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
		ВыполнитьКомандуСервиса("РегистрацияАбонента", ПараметрыКоманды, Результат, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийАбонент = Результат.Данные;
		ПараметрыОбновления.Вставить("АдминистраторАбонента", ПараметрыКоманды.АдминистраторАбонента);
		ПараметрыОбновления.Вставить("Идентификатор", ПараметрыКоманды.Идентификатор);
		ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления);
		
	Иначе
		
		// Получение списка подключенных абонентов, по-умолчанию берем первого абонента из списка.
		Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
		ВыполнитьКомандуСервиса("ПолучитьСписокАбонентов", ПараметрыКоманды, Результат, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеСервиса = Результат.Данные;
		
		Если ТипЗнч(ДанныеСервиса) = Тип("Массив") Тогда
			Если ДанныеСервиса.Количество() = 0 Тогда
				Отказ = Истина;
				ВызватьИсключение НСтр("ru = 'Абонент сервиса 1С:Бизнес-сеть не найден.'");
			Иначе
				ТекущийАбонент = ДанныеСервиса[0].id;
			КонецЕсли;
		КонецЕсли;
		
		// При успешном выполнении методов, текущий пользователь имеет права администратора.
		СтруктураИдентификации = ПараметрыАутентификацииПользователя();
		Если СтруктураИдентификации <> Неопределено Тогда
			ПараметрыКоманды.Вставить("АдминистраторАбонента", СтруктураИдентификации);
		КонецЕсли; 
		
	КонецЕсли;
	ПараметрыКоманды.Вставить("Абонент", ТекущийАбонент);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийАбонент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка получения администратора абонента.'"),,,,Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверка организаций для регистрации.
	Для Каждого ОрганизацияМассива Из МассивОрганизаций Цикл
		
		ПараметрыКоманды.Вставить("Организация", ОрганизацияМассива);
		Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
		ВыполнитьКомандуСервиса("ПроверкаОрганизации", ПараметрыКоманды, Результат, Отказ);
		ДанныеСервиса = Результат.Данные;
		ОрганизацияЗарегистрированаВСервисе = Ложь;
		
		// Если организация уже зарегистрирована, проверим доступ сервису запросом списка входящих документов.
		Если Результат.КодСостояния = 200 И ТипЗнч(ДанныеСервиса) = Тип("Массив") И ДанныеСервиса[0] = Истина Тогда
			ОрганизацияЗарегистрированаВСервисе = Истина;
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("Организация", ОрганизацияМассива);
			ПараметрыПроверки.Вставить("ДатаСинхронизации", КонецГода(ТекущаяДатаСеанса()));
			ПараметрыПроверки.Вставить("ОтборТолькоНовые", Истина);
			ПараметрыПроверки.Вставить("БлокироватьСообщенияОбОшибках", Истина);
			// Команда возвращает ошибку, если недостаточно прав доступа.
			Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
			ВыполнитьКомандуСервиса("СписокВходящихДокументов", ПараметрыПроверки, Результат, Отказ);
			ПараметрыПроверки.Удалить("БлокироватьСообщенияОбОшибках");
			
			Если Результат.КодСостояния <> 200 Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Ошибка регистрации организации ""%1"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ОрганизацияМассива);
				ПодробныйТекстОшибки = ТекстСообщения + Символы.ПС
					+ НСтр("ru = 'Возможно, организация уже зарегистрирована под другой учетной записью интернет-поддержки.
					|Для регистрации организации необходимо обратиться в службу технической поддержки.'");
				ВидОперации = НСтр("ru = 'Регистрация организации'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
					ПодробныйТекстОшибки, ТекстСообщения, "БизнесСеть", ОрганизацияМассива);
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			// Очистка идентификаторов.
			СохранитьПараметрыСоединенияВСеансе(Неопределено);
			Возврат;
		КонецЕсли;
		
		Если Не ОрганизацияЗарегистрированаВСервисе Тогда
			// Регистрация организации.
			Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
			ВыполнитьКомандуСервиса("РегистрацияОрганизации", ПараметрыКоманды, Результат, Отказ);
			
			Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		// Успешная регистрация организации. Запись статуса в информационную базу.
		МассивЗарегистрированныхОрганизаций = Новый Массив;
		МассивЗарегистрированныхОрганизаций.Добавить(ОрганизацияМассива);
		ПараметрыОбновления.Вставить("МассивОрганизаций", МассивЗарегистрированныхОрганизаций);
		ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление пользователей в сервисе и информационной базе.
	ОбновитьПользователейВСервисе(ТекущийАбонент, Ложь, Результат, Отказ);
	
	// Проверка и установка функциональной опции.
	КонстантаМенеджер = Константы.ИспользоватьОбменБизнесСеть;
	Если Не КонстантаМенеджер.Получить() Тогда
		КонстантаМенеджер.Установить(Истина);
		ТребуетсяОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Отключение организаций от сервиса.
//
// Параметры:
//  МассивОрганизаций			 - Массив - отключаемые организации.
//  РежимОтключенияВСервисе		 - Булево - Истина - отключение в сервисе, Ложь - только локально.
//  Отказ						 - Булево - Возвращает результат исполнения.
//  ТребуетсяОбновитьИнтерфейс	 - Булево - Возвращает Истина, если после исполнения требуется обновления интерфейса.
//
Процедура ОтключитьОрганизации(МассивОрганизаций, РежимОтключенияВСервисе, Отказ, ТребуетсяОбновитьИнтерфейс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации1СБизнесСеть.Организация КАК Ссылка
	|ИЗ
	|	РегистрСведений.Организации1СБизнесСеть КАК Организации1СБизнесСеть";
	
	Если МассивОрганизаций <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ Организации1СБизнесСеть.Организация В(&МассивОрганизаций)";
		Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	УстановитьПривилегированныйРежим(Ложь);
	
	РежимУдаления = Истина;
	
	Если РежимОтключенияВСервисе Тогда
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("МассивОрганизаций", МассивОрганизаций);
		Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
		ВыполнитьКомандуСервиса("ОтключениеОрганизации", ПараметрыМетода, Результат, Отказ);
		
		Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОчисткиДанных = Новый Структура("МассивОрганизаций", МассивОрганизаций);
	ОбновитьИдентификаторыБизнесСети(ПараметрыОчисткиДанных, РежимУдаления);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации1СБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.Организации1СБизнесСеть КАК Организации1СБизнесСеть";
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		// Не осталось ни одной подключенной организации, требуется удалить пользователей и идентификатор клиента.
		ПараметрыОчисткиДанных.Вставить("МассивПользователей");
		ПараметрыОчисткиДанных.Вставить("Клиент");
		ОбновитьИдентификаторыБизнесСети(ПараметрыОчисткиДанных, РежимУдаления);
		
		// Очистка параметров соединения.
		СохранитьПараметрыСоединенияВСеансе(Неопределено);
		ТребуетсяОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обновление пользователей в сервисе по данным информационной базы.
//
// Параметры:
//   ТекущийАбонент - Строка - идентификатор абонента в сервисе.
//   ОбновлятьИдентификаторыДоступа - Булево.
//   Результат - Структура - результат выполнения, см БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса().
//   Отказ - Булево - признак ошибки выполнения.
//
Процедура ОбновитьПользователейВСервисе(ТекущийАбонент, ОбновлятьИдентификаторыДоступа, Результат, Отказ) Экспорт
	
	// Получение списка подключенных абонентов, по-умолчанию берем первого абонента из списка.
	Если ТекущийАбонент = Неопределено Тогда
		
		ВыполнитьКомандуСервиса("ПолучитьСписокАбонентов", Неопределено, Результат, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура;
	
	Если ОбновлятьИдентификаторыДоступа Тогда
		
		// Обновление идентификатора информационной базы в сервисе.
		ИдентификаторИБ = Строка(Новый УникальныйИдентификатор);
		
		ПараметрыКоманды.Вставить("Идентификатор", ИдентификаторИБ);
		ВыполнитьКомандуСервиса("ОбновитьИдентификаторИБ", ПараметрыКоманды, Результат, Отказ);
		
		Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ПараметрыОбновления = Новый Структура("Клиент");
		ПараметрыОбновления.Вставить("Клиент", Новый Структура("Идентификатор", ИдентификаторИБ));
		ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления);
		
	КонецЕсли;
	
	ПараметрыКоманды.Вставить("МассивПользователей");
	ПараметрыКоманды.Вставить("ДанныеПользователей");
	СформироватьДанныеСинхронизацииПользователя(ПараметрыКоманды, ОбновлятьИдентификаторыДоступа);
	Если ПараметрыКоманды.МассивПользователей.Количество() Тогда
		ВыполнитьКомандуСервиса("СинхронизацияПользователей", ПараметрыКоманды, Результат, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// Обновление данных в кэше информационной базы.
	ПараметрыОбновления = Новый Структура("МассивПользователей", ПараметрыКоманды.МассивПользователей);
	ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления);
	
	Если ОбновлятьИдентификаторыДоступа Тогда
		СохранитьПараметрыСоединенияВСеансе(Неопределено);
	КонецЕсли;

КонецПроцедуры

// Возвращает признак установки функциональной опции 1С:Бизнес-сеть.
//
Функция ИспользоватьОбменБизнесСеть() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть");
	
КонецФункции

// Общие настройки для подключения к сервису 1С:Бизнес-сеть.
//
Функция ОбщиеНастройкиСервиса() Экспорт

	ПараметрыСоединения = Новый Структура("ИмяСервера, Порт, ЗащищенноеСоединение, Идентификатор");
	
	// Сервис 1С:Бизнес-сеть.
	ПараметрыСоединения.ИмяСервера = "1cbn.ru";
	ПараметрыСоединения.Порт = 443;
	ПараметрыСоединения.ЗащищенноеСоединение = Истина;
	
	// Сервис 1С:Рубрикатор.
	ПараметрыСоединения.Вставить("ИмяСервераРубрикатора", "1cbn.ru");
	ПараметрыСоединения.Вставить("ПортРубрикатора", 443);
	ПараметрыСоединения.Вставить("ЗащищенноеСоединениеРубрикатора", Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	СсылкаИдентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.Пользователи1СБизнесСеть");
	ИдентификаторИБ = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СсылкаИдентификатор, "ПарольБизнесСеть");
	
	// При инициализации проверка, если нет ни одной записи в регистре, то очищается идентификатор клиента.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи1СБизнесСеть.СсылкаНаОбъект КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.Пользователи1СБизнесСеть КАК Пользователи1СБизнесСеть";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(СсылкаИдентификатор, Неопределено, "ПарольБизнесСеть");
		ИдентификаторИБ = Строка(Новый УникальныйИдентификатор);
		
		// Очистка регистра, могут быть устаревшие записи по пользователям.
		НаборЗаписей = РегистрыСведений.Пользователи1СБизнесСеть.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		// Очистка регистра, могут быть устаревшие записи по пользователям.
		НаборЗаписей = РегистрыСведений.Организации1СБизнесСеть.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	ПараметрыСоединения.Идентификатор = ИдентификаторИБ;
	
	Возврат ПараметрыСоединения;

КонецФункции

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Строка) Экспорт
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Описание контактной информации пользователя.
//
Функция ОписаниеКонтактнойИнформацииПользователя() Экспорт
	
	СтруктураКонтактов = Новый Структура;
	СтруктураКонтактов.Вставить("ФИО", "");
	СтруктураКонтактов.Вставить("ЭлектроннаяПочта", "");
	СтруктураКонтактов.Вставить("Телефон", "");
	
	Возврат СтруктураКонтактов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Установка параметров вызова команды сервиса 1С:Бизнес-сеть.
//
// Параметры:
//   Метод - Строка - наименование метода.
//   ПараметрыКоманды - Структура - дополнительные произвольные параметры.
//   ПараметрыВызова - Структура - возвращаемые параметры вызова команды.
//     * Адрес - Строка - адрес метода в сервисе.
//     * Метод - Строка - метод взаимодействия get, post, put, update.
//     * Данные - Произвольный - тело запроса.
//     * Права - Строка - права доступа bn_its (логин Интернет-поддержки), bn_user (пользователь ИБ).
//   Отказ - Булево - признак отказа выполнения.
//
Процедура СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды,
													ПараметрыКоманды,
													ПараметрыВызова,
													ИдентификаторПрограммы,
													Отказ)
	
	Если ИмяКоманды = "ПолучениеКлюча" Тогда
		
		// Запрос нового временного ключа.
		ПараметрыВызова = Новый Структура("Логин, Пароль, Права");
		ПараметрыВызова.Права = ПараметрыКоманды.Права;
		
		Если ПараметрыКоманды.Права = "bn_its" Тогда
			
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				УстановитьПривилегированныйРежим(Истина);
				ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-bn-access");
				УстановитьПривилегированныйРежим(Ложь);
				Если ЗначениеЗаполнено(ДанныеАутентификации.КодОшибки) Тогда
					Если ДанныеАутентификации.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
						ИнтернетПоддержкаПользователейПодключена = Ложь;
					КонецЕсли;
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
						           |%1'"),
						ДанныеАутентификации.СообщениеОбОшибке);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,, Отказ);
					Возврат;
				КонецЕсли;
				ПараметрыВызова.Логин  = "AUTH_TOKEN";
				ПараметрыВызова.Пароль = ДанныеАутентификации.Тикет;
				
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				ПараметрыАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
				УстановитьПривилегированныйРежим(Ложь);
				Если ТипЗнч(ПараметрыАутентификации) = Тип("Структура") Тогда
					ПараметрыВызова.Логин  = ПараметрыАутентификации.Логин;
					ПараметрыВызова.Пароль = ПараметрыАутентификации.Пароль;
				Иначе
					ТекстОшибки = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
					ТекстСообщения = ТекстОшибки + Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
						ТекстОшибки, "БизнесСеть");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыКоманды.Свойство("АдминистраторАбонента") Тогда
			
			ПараметрыВызова.Логин  = ПараметрыКоманды.АдминистраторАбонента.Логин;
			ПараметрыВызова.Пароль = ПараметрыКоманды.АдминистраторАбонента.Пароль;
			
		ИначеЕсли ПараметрыКоманды.Права = "bn_user" Тогда
			
			СтруктураИдентификации = ПараметрыАутентификацииПользователя();
			Если СтруктураИдентификации <> Неопределено Тогда
				ПараметрыВызова.Логин  = СтруктураИдентификации.Логин;
				ПараметрыВызова.Пароль = СтруктураИдентификации.Пароль;
			Иначе
				Если БизнесСеть.ОрганизацияЗарегистрирована() Тогда
					ТекстОшибки = НСтр("ru = 'Недостаточно прав для работы с сервисом 1С:Бизнес-сеть.
											 |Обратитесь к администратору.'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Требуется регистрация организации в сервисе 1С:Бизнес-сеть.'");
				КонецЕсли;
				ТекстСообщения = ТекстОшибки + Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
				ТекстОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе.'") + Символы.ПС + ТекстОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
					ТекстОшибки, "БизнесСеть");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПроверкаРегистрацииАбонента" Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/subscribers/existence";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_its";
		
	ИначеЕсли ИмяКоманды = "РегистрацияАбонента" Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/subscribers";
		ПараметрыВызова.Метод = "post";
		ДанныеРегистрацииАбонента = СформироватьДанныеРегистрацииАбонента(ПараметрыКоманды, ИдентификаторПрограммы, Отказ);
		ПараметрыВызова.Данные = ДанныеРегистрацииАбонента;
		ПараметрыВызова.Права = "bn_its";
		ПараметрыКоманды.Вставить("Идентификатор", ИдентификаторПрограммы);
		
	ИначеЕсли ИмяКоманды = "ПолучитьРеквизитыУчастника" Тогда
		
		Если ПараметрыКоманды.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыКоманды.Ссылка) Тогда
			ПараметрыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Ссылка);
			ПараметрыКоманды.ИНН = ПараметрыОрганизации.ИНН;
			ПараметрыКоманды.КПП = ПараметрыОрганизации.КПП;
		Иначе
			ПараметрыОрганизации = Новый Структура("ИНН, КПП", ПараметрыКоманды.ИНН, ПараметрыКоманды.КПП);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыОрганизации.ИНН) Тогда
			Если ПараметрыКоманды.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыКоманды.Ссылка) Тогда
				ТестСообщения = НСтр("ru = 'Не заполнено свойство ""ИНН"" для ""%1"".'");
				ТестСообщения = СтрШаблон(ТестСообщения, ПараметрыКоманды.Ссылка);
			Иначе
				ТестСообщения = НСтр("ru = 'Не заполнено свойство ""ИНН"".'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТестСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		ПараметрыВызова.Адрес = "api/core/v1/organizations/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыОрганизации.ИНН) + "/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыОрганизации.КПП);
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
		СтруктураРезультата = Новый Структура();
		СтруктураРезультата.Вставить("Наименование",     "title");
		СтруктураРезультата.Вставить("НаименованиеЕГРН", "titleFromFns");
		СтруктураРезультата.Вставить("ИНН",              "inn");
		СтруктураРезультата.Вставить("КПП",              "kpp");
		СтруктураРезультата.Вставить("ДатаРегистрации",  "registrationDate");
		СтруктураРезультата.Вставить("Адрес",            "address");
		СтруктураРезультата.Вставить("Описание",         "description");
		СтруктураРезультата.Вставить("ЭлектроннаяПочта", "email");
		СтруктураРезультата.Вставить("Факс",             "fax");
		СтруктураРезультата.Вставить("ОГРН",             "ogrn");
		СтруктураРезультата.Вставить("Телефон",          "phone");
		СтруктураРезультата.Вставить("Сайт",             "site");
		
		ПараметрыВызова.Вставить("СтруктураРезультата", СтруктураРезультата);
		
	ИначеЕсли ИмяКоманды = "ПолучитьКлюч:bn_its" Тогда
		
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_its";
		
	ИначеЕсли ИмяКоманды = "ПолучитьКлюч:bn_user" Тогда
		
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьСписокАбонентов:bn_its" Тогда
		
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Адрес = "api/core/v1/subscribers?withAdministrativePermissionsOnly=true";
		ПараметрыВызова.Права = "bn_its";
		
	ИначеЕсли СтрНайти(ИмяКоманды,"ПолучитьСписокАбонентов") Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/subscribers?withAdministrativePermissionsOnly=true";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьАбонентаПоОрганизации" Тогда
		
		ПараметрыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Организация);
		ПараметрыВызова.Адрес = "api/core/v1/subscribers/organizations/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыОрганизации.ИНН) + "/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыОрганизации.КПП);
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "СписокПользователейАбонента" Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/subscribers/" 
			+ Формат(ПараметрыКоманды.Абонент, "ЧГ=") + "/subscriberMembers/";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "РегистрацияОрганизации" Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/subscribers/" 
			+ Формат(ПараметрыКоманды.Абонент, "ЧГ=") + "/organizations";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Данные = СформироватьДанныеРегистрацииОрганизации(ПараметрыКоманды);
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ОтключениеОрганизации" Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/organizations/delete";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Данные = СформироватьДанныеОтключенияСпискаОрганизаций(ПараметрыКоманды);
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "РегистрацияПользователей" Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/persons";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "СинхронизацияПользователей" Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/subscribers/subscriberMembers/sync?endpointGuid="
			+ ПараметрыКоманды.ИдентификаторКлиента;
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Данные = ПараметрыКоманды.ДанныеПользователей;
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПривязкаПользователяАбоненту" Тогда
		
		ПараметрыВызова.Адрес = "api/core/v1/subscribers/" + Формат(ПараметрыКоманды.Абонент, "ЧГ=")
			+ "/subscriberMembers/" + ПараметрыКоманды.Идентификатор;
		ПараметрыВызова.Метод = "post";
		
		ПараметрыПривязки = Новый Структура();
		ПараметрыПривязки.Вставить("isSubscriberAdministrator", ПараметрыКоманды.ЭтоАдминистратор);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ПараметрыПривязки);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		ПараметрыВызова.Данные = СтрокаJSON;
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПроверкаОрганизации" Тогда
		
		ПараметрыАбонента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Организация);
		
		МассивСтруктуры = Новый Массив;
		СтруктураТела = Новый Структура("inn, kpp", 
			БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.ИНН),
			БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.КПП));
		МассивСтруктуры.Добавить(СтруктураТела);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, МассивСтруктуры);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		ПараметрыВызова.Адрес = "api/core/v1/organizations/existence";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "ПроверкаКонтрагента" Тогда
		
		ПараметрыАбонента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Контрагент);
		
		МассивСтруктуры = Новый Массив;
		СтруктураТела = Новый Структура("inn, kpp", 
			БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.ИНН),
			БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.КПП));
		МассивСтруктуры.Добавить(СтруктураТела);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, МассивСтруктуры);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		ПараметрыВызова.Адрес = "api/core/v1/organizations/existence";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "ПроверкаМассиваДанныхОрганизаций" Тогда 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ПараметрыКоманды.МассивПоиска);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		ПараметрыВызова.Адрес = "api/core/v1/organizations/existence";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "СписокПользователейОрганизации" Тогда
		
		ПараметрыАбонента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Организация);
		ПараметрыВызова.Адрес = "api/core/v1/organizations/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.ИНН) + "/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.КПП) + "/organizationMembers";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ОтправкаПриглашения" Тогда
		
		ПараметрыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Организация);
		ПараметрыКонтрагента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Контрагент);
		
		Если Не ЗначениеЗаполнено(ПараметрыКоманды.ЭлектроннаяПочта) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан адрес электронной почты контрагента'")
				+ " " + ПараметрыКоманды.Контрагент,,,, Отказ);
			Возврат;
		КонецЕсли;
		ПараметрыВызова.Адрес = "api/core/v1/organizations/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыКонтрагента.ИНН) + "/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыКонтрагента.КПП) + "/invitation"
			+ "?dstEmail=" + ПараметрыКоманды.ЭлектроннаяПочта
			+ "&dstTitle=" + КодироватьСтроку(ПараметрыКонтрагента.ОфициальноеНаименование, 
								СпособКодированияСтроки.КодировкаURL)
			+ "&srcInn="   + БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыОрганизации.ИНН)
			+ "&srcKpp="   + БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыОрганизации.КПП);
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ОтправитьДокумент" Тогда
		
		ДанныеОтправки = СформироватьДанныеОтправляемогоДокумента(ПараметрыКоманды);
		ПараметрыВызова.Данные = ДанныеОтправки;
		ПараметрыВызова.Адрес = "api/edi/v1/documents";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПроверкаСтатусаДокумента" Тогда
		
		ПараметрыВызова.Адрес = "api/edi/v1/documents/" + Формат(ПараметрыКоманды.Номер, "ЧГ=") + "/status";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "СписокВходящихДокументов" Тогда
		
		Если ПараметрыКоманды.Свойство("МассивОрганизаций") Тогда
			
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				ПараметрыКоманды.МассивОрганизаций, "ИНН, КПП");
			МассивСтруктурыДанных = Новый Массив;
			Для Каждого ЭлементМассива Из ПараметрыКоманды.МассивОрганизаций Цикл
				ИНН = БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыОрганизации.Получить(ЭлементМассива).ИНН);
				КПП = БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыОрганизации.Получить(ЭлементМассива).КПП);
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("inn", ИНН);
				СтруктураДанных.Вставить("kpp", КПП);
				МассивСтруктурыДанных.Добавить(СтруктураДанных);
			КонецЦикла;
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, МассивСтруктурыДанных);
			СтрокаJSON = ЗаписьJSON.Закрыть();
			ПараметрыВызова.Данные = СтрокаJSON;
			
			ПараметрыЗапроса = Новый Структура();
			Если ПараметрыКоманды.Свойство("ОтборКонтрагент") Тогда
				РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ПараметрыКоманды.ОтборКонтрагент, "ИНН, КПП");
				ПараметрыЗапроса.Вставить("senderInn", БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыКонтрагента.ИНН));
				ПараметрыЗапроса.Вставить("senderKpp", БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыКонтрагента.КПП));
			КонецЕсли;
			
			Если ПараметрыКоманды.Свойство("ОтборВидДокумента") Тогда
				ВидДокумента = КодироватьСтроку(XMLСтрока(ПараметрыКоманды.ОтборВидДокумента),
					СпособКодированияСтроки.КодировкаURL);
				ПараметрыЗапроса.Вставить("docType", "v8." + ВидДокумента);
			КонецЕсли;
			
			// Получение документов без данных.
			ПараметрыЗапроса.Вставить("withData", "false");

			Если ПараметрыКоманды.Свойство("РежимИсходящихДокументов") Тогда
				ПараметрыЗапроса.Вставить("inbound", ?(ПараметрыКоманды.РежимИсходящихДокументов,"false", "true"));
				Если ПараметрыКоманды.Свойство("ОтборТолькоНовые") Тогда
					ПараметрыЗапроса.Вставить("deliveryStatus", "SENT");
				КонецЕсли;
			Иначе
				Если ПараметрыКоманды.Свойство("ОтборТолькоНовые") Тогда
					ПараметрыЗапроса.Вставить("deliveryStatus", "SENT");
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПараметровЗапроса = ПреобразоватьВСтрокуПараметровHTML(ПараметрыЗапроса);
			
			ПараметрыВызова.Адрес = "api/edi/v1/organizations/documents" + СтрокаПараметровЗапроса;
			ПараметрыВызова.Метод = "post";
			
		Иначе
			
			ПараметрыАбонента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Организация);
			ПараметрыВызова.Адрес = "api/edi/v1/organizations/"
				+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.ИНН) + "/"
				+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.КПП) + "/documents?fromTime="
				+ Формат(ПараметрыКоманды.ДатаСинхронизации, "ДФ=dd-MM-yyyy-HH-mm-ss");
			ПараметрыВызова.Метод = "get";
			
		КонецЕсли;
		
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьДокументы" Тогда
		
		ИдентификаторыДокументов = Новый Соответствие();
		Если ПараметрыКоманды.Свойство("МассивСсылокНаОбъект") Тогда
			МассивДокументов = Новый Массив;
			
			Для Каждого ЭлементМассива Из ПараметрыКоманды.МассивСсылокНаОбъект Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Число") ИЛИ ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда // ТорговыеПредложения.
					УИД = ЭлементМассива;
				Иначе
					УИД = Строка(ЭлементМассива.УникальныйИдентификатор());
				КонецЕсли;
				МассивДокументов.Добавить(УИД);
				ИдентификаторыДокументов.Вставить(УИД, ЭлементМассива);
			КонецЦикла; 
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, МассивДокументов);
			СтрокаJSON = ЗаписьJSON.Закрыть();
		КонецЕсли;
		
		ПараметрыКоманды.Вставить("ИдентификаторыДокументов", ИдентификаторыДокументов);
		
		Адрес = "api/edi/v1/documents/byIdOrGuid?direction="
			+ ?(ПараметрыКоманды.РежимВходящихДокументов = Истина, "INBOUND", "OUTBOUND");
		
		ПередаватьДанные = Ложь;
		Если ПараметрыКоманды.Свойство("withData", ПередаватьДанные) Тогда
			Адрес = Адрес + "&withData=" + Формат(ПередаватьДанные, "БЛ=false; БИ=true");
		КонецЕсли;
		
		ПараметрыВызова.Адрес = Адрес; 
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "ОбновитьСтатус" Тогда
		
		ИдентификаторыДокументов = Новый Соответствие();
		Если ПараметрыКоманды.Свойство("МассивДанных") Тогда
			МассивДокументов = Новый Массив;
			Для Каждого ЭлементМассива Из ПараметрыКоманды.МассивДанных Цикл
				СтруктураСтатуса = Новый Структура();
				СтруктураСтатуса.Вставить("id", ЭлементМассива.Идентификатор);
				СтруктураСтатуса.Вставить("documentGuid", Строка(ЭлементМассива.Ссылка.УникальныйИдентификатор()));
				СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата загрузки:'") + ТекущаяДатаСеанса());
				МассивДокументов.Добавить(СтруктураСтатуса);
			КонецЦикла;
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, МассивДокументов);
			СтрокаJSON = ЗаписьJSON.Закрыть();
		КонецЕсли;
		
		ПараметрыВызова.Адрес = "api/edi/v1/documents/statusDelivered"; 
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "УдалитьДокументы" Тогда
		
		ПараметрыАбонента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Организация);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ПараметрыКоманды.МассивИдентификаторов);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		Шаблон = "api/edi/v1/organizations/%1/%2/documents?direction="
			+ ?(ПараметрыКоманды.РежимИсходящихДокументов, "OUTBOUND", "INBOUND");
		ПараметрыВызова.Адрес = СтрШаблон(Шаблон, 
			БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.ИНН),
			БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыАбонента.КПП));
			
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "ОтправитьУведомлениеОбОтправке" Тогда
		
		ПараметрыАбонента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Получатель);
		ЭлектроннаяПочта = ПараметрыКоманды.ЭлектроннаяПочта;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ПараметрыКоманды.МассивИдентификаторов);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		ПараметрыВызова.Данные = СтрокаJSON;
		
		ПараметрыВызова.Адрес = "api/core/v1/organization/invitation/?dstEmail=" + ЭлектроннаяПочта
			+ "&dstTitle=" + КодироватьСтроку(ПараметрыАбонента.ОфициальноеНаименование, СпособКодированияСтроки.КодировкаURL)
			+ "&attachDoc=true";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ОбновитьИдентификаторИБ" Тогда
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("title", Метаданные.Синоним);
		СтруктураДанных.Вставить("endpointGUID", ПараметрыКоманды.Идентификатор);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		ПараметрыВызова.Данные = СтрокаJSON;
		
		ПараметрыВызова.Адрес = "api/core/v1/endpoint";
		ПараметрыВызова.Метод = "put";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ИзменитьСтатусыДокументов" Тогда
		
		ИдентификаторыДокументов = Новый Соответствие();
		Если ПараметрыКоманды.Свойство("МассивДанных") Тогда
			МассивДокументов = Новый Массив;
			Для Каждого ЭлементМассива Из ПараметрыКоманды.МассивДанных Цикл
				СтруктураСтатуса = Новый Структура();
				СтруктураСтатуса.Вставить("id", ЭлементМассива.Идентификатор);
				Если ВРег(ПараметрыКоманды.Статус) = ВРег("Отклонен") Тогда
					Если ЗначениеЗаполнено(ЭлементМассива.Ссылка) Тогда
						СтруктураСтатуса.Вставить("documentGuid", Строка(ЭлементМассива.Ссылка.УникальныйИдентификатор()));
					КонецЕсли;
					СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата отклонения:'") + ТекущаяДатаСеанса());
					СтруктураСтатуса.Вставить("deliveryStatus", "REJECTED");
				Иначе // По умолчанию статус "Загружен".
					СтруктураСтатуса.Вставить("documentGuid", Строка(ЭлементМассива.Ссылка.УникальныйИдентификатор()));
					СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата загрузки:'") + ТекущаяДатаСеанса());
					СтруктураСтатуса.Вставить("deliveryStatus", "DELIVERED");
				КонецЕсли;
				МассивДокументов.Добавить(СтруктураСтатуса);
			КонецЦикла;
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, МассивДокументов);
			СтрокаJSON = ЗаписьJSON.Закрыть();
		КонецЕсли;
		
		ПараметрыВызова.Адрес = "api/edi/v1/documents/status"; 
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка инициализации сервиса'"),,,, Отказ);
		
	КонецЕсли;

КонецПроцедуры

// Получение ключа в сервисе, в том числе из кэша.
//
Процедура ПолучитьКлюч(Соединение, ПараметрыСоединения, ПараметрыКоманды, ПараметрыВызова, СохранятьПараметрыСеанса, Отказ)
	
	СтруктураКлюча = Неопределено;
	СписокКлючей = ПараметрыСоединения.СписокКлючей;
	Если ЗначениеЗаполнено(СписокКлючей) Тогда
		СтруктураКлюча = СписокКлючей.Получить(ПараметрыВызова.Права);
	КонецЕсли;
	
	// Проверка ключа в кэше и его срока действия.
	Если СтруктураКлюча = Неопределено ИЛИ ТекущаяДатаСеанса() > СтруктураКлюча.СрокЖизни Тогда
		
		// Подготовка и получение нового ключа.
		Аутентификация = Новый Структура();
		ПараметрыКоманды.Вставить("Права", ПараметрыВызова.Права);
		
		СформироватьПараметрыВызоваКомандыСервиса("ПолучениеКлюча",
			ПараметрыКоманды, Аутентификация, ПараметрыСоединения.Идентификатор, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьНовыйКлюч(Соединение, ПараметрыСоединения, Аутентификация, Отказ);
		СохранятьПараметрыСеанса = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение нового временного ключа в сервисе.
//
Процедура ПолучитьНовыйКлюч(Соединение, ПараметрыСоединения, Аутентификация, Отказ)

	КлючКлиента = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(ПараметрыСоединения.Идентификатор + ":"));
	ТребуетсяПолноеОбновлениеКлюча = Истина;
	
	// Проверка и обновление ключа по ключу регенерации refresh_token.
	СписокКлючей = ПараметрыСоединения.СписокКлючей;
	СтруктураКлюча = Неопределено;
	Если ЗначениеЗаполнено(СписокКлючей) Тогда
		СтруктураКлюча = СписокКлючей.Получить(Аутентификация.Права);
	КонецЕсли;
	
	Если СтруктураКлюча <> Неопределено Тогда
		РесурсНаСервере = "oauth/token?grant_type=refresh_token&refresh_token=" + СтруктураКлюча.КлючРегенерации;
		
		Попытка
			HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
			HTTPЗапрос.Заголовки.Вставить("Authorization", "Basic " + КлючКлиента);
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка регистрации в сервисе 1С:Бизнес-сеть:'") 
				+ " " + ИнформацияОбОшибке().Описание
				+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		КонецПопытки;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			// Еще не истек срок жизни refresh-token.
			ТребуетсяПолноеОбновлениеКлюча = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяПолноеОбновлениеКлюча Тогда
		РесурсНаСервере = "oauth/token?grant_type=password&username=" + Аутентификация.Логин
			+ "&password=" + КодироватьСтроку(Аутентификация.Пароль, СпособКодированияСтроки.КодировкаURL);
		
		Попытка
			HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
			HTTPЗапрос.Заголовки.Вставить("Authorization", "Basic " + КлючКлиента);
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка регистрации в сервисе 1С:Бизнес-сеть: %1'"),
				ИнформацияОбОшибке().Описание)
				+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		КонецПопытки;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектJSON = ЗначениеИзСтрокиJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Отказ = Истина;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка аутентификации в сервисе 1С:Бизнес-сеть. Код ошибки %1.'"),
			HTTPОтвет.КодСостояния);
		ПодробныйТекстОшибки = ТекстСообщения;
		Если ТипЗнч(ОбъектJSON) = Тип("Структура") И ОбъектJSON.Свойство("error_description") Тогда
			ПодробныйТекстОшибки = СтрШаблон(НСтр("ru = '%1
				|Подробности: %2'"), ПодробныйТекстОшибки, ОбъектJSON.error_description);
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Аутентификация'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения, "БизнесСеть");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыСоединения.СписокКлючей) = Тип("ФиксированноеСоответствие") Тогда
		СписокКлючей = Новый Соответствие(ПараметрыСоединения.СписокКлючей);
	Иначе
		СписокКлючей = Новый Соответствие;
	КонецЕсли;
	
	СтруктураКлюча = СписокКлючей[Аутентификация.Права];
	СтруктураКлюча = Новый Структура();
	СтруктураКлюча.Вставить("Логин", Аутентификация.Логин);
	СтруктураКлюча.Вставить("Ключ", ОбъектJSON.access_token);
	СтруктураКлюча.Вставить("СрокЖизни", ТекущаяДатаСеанса() + ОбъектJSON.expires_in);
	СтруктураКлюча.Вставить("КлючРегенерации", ОбъектJSON.refresh_token);
	СписокКлючей[Аутентификация.Права] = Новый ФиксированнаяСтруктура(СтруктураКлюча);
	ПараметрыСоединения.СписокКлючей = Новый ФиксированноеСоответствие(СписокКлючей);
	
КонецПроцедуры

// Формирует строку параметров для HTTP запроса в формате "?Параметр1=Значение1&Параметр2...".
//
// Параметры:
//   ПараметрыЗапроса - Структура - данные для строки, ключ - имя параметра, значение - устанавливаемое значение,
//                                  кириллические символы необходимо закодировать по алгоритму Base64.
//
Функция ПреобразоватьВСтрокуПараметровHTML(ПараметрыЗапроса)
	
	Результат = "";
	Для Каждого Элемент Из ПараметрыЗапроса Цикл
		Результат = Результат + ?(Результат = "", "?", "&") + Элемент.Ключ + "=" + Элемент.Значение;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные JSON для регистрации организации в сервисе.
//
// Параметры:
//   ПараметрыКоманды - Структура - данные заполнения.
//
// Возвращаемое значение:
//   Строка - данные из JSON.
//
Функция СформироватьДанныеРегистрацииОрганизации(ПараметрыКоманды)
	
	РеквизитыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Организация);
	
	ДанныеОрганизации = Новый Структура();
	ДанныеОрганизации.Вставить("inn", БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыОрганизации.ИНН));
	ДанныеОрганизации.Вставить("kpp", БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыОрганизации.КПП));
	
	Если РеквизитыОрганизации.Свойство("СокращенноеНаименование") Тогда
		НаименованиеОрганизации = РеквизитыОрганизации.СокращенноеНаименование;
	Иначе
		НаименованиеОрганизации = РеквизитыОрганизации.ПолноеНаименование;
	КонецЕсли;
	ДанныеОрганизации.Вставить("title", НаименованиеОрганизации);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ДанныеОрганизации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции

// Формирует данные JSON для удаления организации в сервисе.
//
// Параметры:
//   ПараметрыКоманды - Структура - данные заполнения.
//
// Возвращаемое значение:
//   Строка - данные из JSON.
//
Функция СформироватьДанныеОтключенияСпискаОрганизаций(ПараметрыКоманды)
	
	МассивДанных = Новый Массив;
	Для Каждого ОрганизацияСсылка Из ПараметрыКоманды.МассивОрганизаций Цикл
		РеквизитыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ОрганизацияСсылка);
		ИНН = БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыОрганизации.ИНН);
		КПП = БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыОрганизации.КПП);
		МассивДанных.Добавить(Новый Структура("inn, kpp", ИНН, КПП));
	КонецЦикла;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, МассивДанных);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции

// Формирует данные JSON для регистрации абонента в сервисе.
//
// Параметры:
//   ПараметрыКоманды - Структура - данные заполнения.
//   Отказ - Булево - признак отказа выполнения.
//
// Возвращаемое значение:
//   Строка - данные из JSON.
//
Функция СформироватьДанныеРегистрацииАбонента(ПараметрыКоманды, ИдентификаторПрограммы, Отказ)
	
	Если Не Пользователи.РолиДоступны("АдминистрированиеАбонентаБизнесСеть") Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав доступа для выполнения операции в сервисе 1С:Бизнес-сеть'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		Возврат "";
	КонецЕсли;
	
	ПараметрыАбонента = Новый Структура();
	ПараметрыАбонента.Вставить("title", Метаданные.Синоним);
		
	ПараметрыАбонента.Вставить("restrictAccessByOrganization", Ложь); // Контроль по организациям.
	ПараметрыАбонента.Вставить("restrictAccessByEndpoint", Ложь);     // Контроль по клиентам.
	
	УчетныеДанные = Новый Структура();
	
	// Получение пользователя или создание нового.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка                    КАК Ссылка,
	|	Пользователи.Наименование              КАК НаименованиеПользователя,
	|	Пользователи1СБизнесСеть.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.Пользователи1СБизнесСеть КАК Пользователи1СБизнесСеть
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Пользователи1СБизнесСеть.СсылкаНаОбъект = Пользователи.Ссылка
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() И Выборка.Идентификатор <> Null Тогда
		ЛогинПользователя = Выборка.Идентификатор;
	Иначе
		ЛогинПользователя = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	КлючПользователя = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыКоманды.Вставить("АдминистраторАбонента", Новый Структура("Пользователь, Логин, Пароль",
		Пользователи.ТекущийПользователь(), ЛогинПользователя, КлючПользователя));
	
	УчетныеДанные.Вставить("firstName", Строка(Пользователи.ТекущийПользователь()));
	
	// Заполнение пользователя администратор абонента.
	ПользовательСистемы = Новый Структура();
	ПользовательСистемы.Вставить("type", "AUTOGENERATED");
	ПользовательСистемы.Вставить("login", ЛогинПользователя);
	ПользовательСистемы.Вставить("password", КлючПользователя);
	
	Клиент = Новый Структура();
	Клиент.Вставить("endpointGUID", ИдентификаторПрограммы);
	Клиент.Вставить("title", Метаданные.Синоним);
	
	МассивКлиентов = Новый Массив;
	МассивКлиентов.Добавить(Клиент);
	ПользовательСистемы.Вставить("endpoints", МассивКлиентов);
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(ПользовательСистемы);
	УчетныеДанные.Вставить("personAccounts", МассивПользователей);
	
	МассивУчетныхДанных = Новый Массив;
	МассивУчетныхДанных.Добавить(УчетныеДанные);
	
	// Заполнение абонента.
	ПараметрыАбонента.Вставить("members", МассивУчетныхДанных);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ПараметрыАбонента);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции

// Формирует данные JSON для отправки документа в сервисе.
//
// Параметры:
//   ПараметрыКоманды - Структура - данные заполнения.
//
// Возвращаемое значение:
//   Строка - данные из JSON.
//
Функция СформироватьДанныеОтправляемогоДокумента(ПараметрыКоманды)
	
	Если ТипЗнч(ПараметрыКоманды.Получатель) = Тип("Структура") Тогда
		ПараметрыПолучатель = ПараметрыКоманды.Получатель;
	Иначе
		ПараметрыПолучатель = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Получатель);
	КонецЕсли;
	ПараметрыОтправитель = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыКоманды.Отправитель);
	
	ДанныеОрганизации = Новый Структура();
	СтруктураПолучателя = Новый Структура("inn, kpp", 
		БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыПолучатель.ИНН),
		БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыПолучатель.КПП));
	СтруктураОтправителя = Новый Структура("inn, kpp", 
		БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыОтправитель.ИНН),
		БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыОтправитель.КПП));
		
	СтрокаДвоичныхДанных = Base64Строка(ПолучитьИзВременногоХранилища(ПараметрыКоманды.АдресХранилища));	
	ДанныеОрганизации.Вставить("destinationOrganization", СтруктураПолучателя);
	ДанныеОрганизации.Вставить("sourceOrganization", СтруктураОтправителя);
	ДанныеОрганизации.Вставить("documentDataType", "v8." + XMLСтрока(ПараметрыКоманды.ВидЭД));
	ДанныеОрганизации.Вставить("documentData",  СтрокаДвоичныхДанных);
	ДанныеОрганизации.Вставить("documentTitle", ПараметрыКоманды.Заголовок);
	ДанныеОрганизации.Вставить("documentGuid",  Строка(ПараметрыКоманды.Ссылка.УникальныйИдентификатор()));
	ДанныеОрганизации.Вставить("info",          ПараметрыКоманды.СопроводительнаяИнформация);
	ДанныеОрганизации.Вставить("moneyAmount",   ПараметрыКоманды.Сумма * 100); // Сумма документа в копейках.
	ДанныеОрганизации.Вставить("metaData",      ПараметрыКоманды.Ссылка.Метаданные().Имя); // Доп. информация.
	
	Если ПараметрыКоманды.Свойство("АдресХранилищаПредставления") 
		И ЗначениеЗаполнено(ПараметрыКоманды.АдресХранилищаПредставления) Тогда
		ДвоичныеДанные = Base64Строка(ПолучитьИзВременногоХранилища(ПараметрыКоманды.АдресХранилищаПредставления));
		Если ДвоичныеДанные <> Неопределено Тогда
			ДанныеОрганизации.Вставить("documentPresentationData", ДвоичныеДанные);
			ДанныеОрганизации.Вставить("documentPresentationDataType", "pdf");
		КонецЕсли;
	КонецЕсли;
	
	ПерсональныеДанные = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыКоманды.КонтактноеЛицо) Тогда
		ПерсональныеДанные.Вставить("name", ПараметрыКоманды.КонтактноеЛицо);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыКоманды.Телефон) Тогда
		ПерсональныеДанные.Вставить("phone", ПараметрыКоманды.Телефон);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыКоманды.ЭлектроннаяПочта) Тогда
		ПерсональныеДанные.Вставить("email", ПараметрыКоманды.ЭлектроннаяПочта);
	КонецЕсли;
	Если ПараметрыКоманды.Свойство("УведомлятьПоПочте") Тогда
		ПерсональныеДанные.Вставить("notifyByEmail", ПараметрыКоманды.УведомлятьПоПочте);
	КонецЕсли;
	ДанныеОрганизации.Вставить("person", ПерсональныеДанные);
	
	Если ПараметрыКоманды.Свойство("ИдентификаторыПредложений") Тогда
		ДанныеОрганизации.Вставить("contextName", "CAMPAIGN"); // Служебное наименование типа.
		ДанныеОрганизации.Вставить("contextIds", ПараметрыКоманды.ИдентификаторыПредложений);
	КонецЕсли;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ДанныеОрганизации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции

// Получение таблицы пользователей сервиса в информационной базе.
//
// Возвращаемое значение:
//   ТаблицаЗначений - пользователи информационной базы, подключенные к сервису.
//
Функция ПользователиСервисаВИнформационнойБазе()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение списка пользователей информационной базы.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.Ссылка                      КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Пользователи1СБизнесСеть.СсылкаНаОбъект ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                    КАК Подключен,
	|	Пользователи1СБизнесСеть.Идентификатор   КАК Идентификатор,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Пользователи1СБизнесСеть КАК Пользователи1СБизнесСеть
	|		ПО Пользователи.Ссылка = Пользователи1СБизнесСеть.СсылкаНаОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	ТаблицаПользователей.Колонки.Добавить("Пароль");
	ТаблицаПользователей.Колонки.Добавить("Телефон");
	ТаблицаПользователей.Колонки.Добавить("ЭлектроннаяПочта");
	ТаблицаПользователей.Колонки.Добавить("ЭтоАдминистратор");
	
	// Анализ ролей пользователей.
	СтрокиУдаления = Новый Массив;
	СтруктураКонтактовПользователя = БизнесСеть.ОписаниеКонтактнойИнформацииПользователя();
	Для Каждого СтрокаТаблицы Из ТаблицаПользователей Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			СтрокаТаблицы.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ = Неопределено Тогда
			СтрокиУдаления.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		Если Пользователи.РолиДоступны("ПолныеПрава, АдминистраторСистемы, АдминистрированиеАбонентаБизнесСеть",
			СтрокаТаблицы.Ссылка) Тогда
			
			СтрокаТаблицы.ЭтоАдминистратор = Истина;
		ИначеЕсли Пользователи.РолиДоступны("ВыполнениеОбменаБизнесСеть", СтрокаТаблицы.Ссылка) Тогда
			СтрокаТаблицы.ЭтоАдминистратор = Ложь;
		Иначе
			СтрокиУдаления.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		// Получение наименования роли пользователя и адреса эл.почты.
		БизнесСетьПереопределяемый.ПолучитьКонтактнуюИнформациюПользователя(СтрокаТаблицы.Ссылка, СтруктураКонтактовПользователя);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураКонтактовПользователя);
		
	КонецЦикла;
	
	// Удаление незарегистрированных пользователей.
	Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
		ТаблицаПользователей.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ТаблицаПользователей;
	
КонецФункции

// Установка статус загрузки документа в информационную базы в сервисе.
//
Процедура УстановитьСтатусЗагружен(Идентификатор, Ссылка, Отказ)
	
	МассивДанных = Новый Массив;
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Ссылка", Ссылка);
	СтруктураДанных.Вставить("Идентификатор", Идентификатор);
	МассивДанных.Добавить(СтруктураДанных);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("МассивДанных", МассивДанных);
	ДопПараметры.Вставить("Статус", "Загружен");
	
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	ВыполнитьКомандуСервиса("ОбновитьСтатус", ДопПараметры, Результат, Отказ);
	
КонецПроцедуры

// Формирование данных JSON для регистрации и синхронизации пользователей в сервисе.
//
// Параметры:
//   ПараметрыСинхронизации - Структура
//     * Клиент - Структура - Идентификатор - ключ ИБ, Наименование - наименование ИБ
//     * АдминистраторАбонента - Структура - 
//         ** Пользователь - Справочник.Пользователи - пользователь, являющийся администратором в сервисе.
//         ** Логин - Строка
//         ** Пароль - Строка
//     * АдресМассиваПользователей - Строка - адрес временного хранилища для массива пользователей.
//
Процедура СформироватьДанныеСинхронизацииПользователя(ПараметрыСинхронизации, ОбновлятьИдентификаторыДоступа)
	
	УстановитьПривилегированныйРежим(Истина);
	Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.Пользователи1СБизнесСеть");
	ИдентификаторКлиента = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Ссылка, "ПарольБизнесСеть");
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получение текущего администратора.
	АдминистраторАбонента = Неопределено;
	Если ПараметрыСинхронизации.Свойство("АдминистраторАбонента") Тогда
		АдминистраторАбонента = ПараметрыСинхронизации.АдминистраторАбонента.Пользователь;
	КонецЕсли;
	
	// Получение списка пользователей в информационной базе.
	ТаблицаПользователейИБ = ПользователиСервисаВИнформационнойБазе();
		
	// Обработка данных.
	МассивУчетныхДанных = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаПользователейИБ Цикл
		
		// Если пользователь не подключен, присваивается новый идентификатор.
		Если ОбновлятьИдентификаторыДоступа ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.Идентификатор) Тогда
			СтрокаТаблицы.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		// Добавление в JSON пользователя.
		ПользовательСистемы = Новый Структура();
		ПользовательСистемы.Вставить("type", "AUTOGENERATED");
		ПользовательСистемы.Вставить("login", СтрокаТаблицы.Идентификатор);
		
		// Пароль при каждом обращении генерируется новый.
		СтрокаТаблицы.Пароль = Строка(Новый УникальныйИдентификатор);
		ПользовательСистемы.Вставить("password", СтрокаТаблицы.Пароль);
		
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(ПользовательСистемы);
		
		// Добавление в JSON учетных данных.
		УчетныеДанные = Новый Структура();
		УчетныеДанные.Вставить("firstName", Строка(СтрокаТаблицы.Ссылка));
		УчетныеДанные.Вставить("personAccounts", МассивПользователей);
		
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(ПользовательСистемы);
		
		ПользовательАбонента = Новый Структура;
		ПользовательАбонента.Вставить("roleTitle", "user");
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлектроннаяПочта) Тогда
			ПользовательАбонента.Вставить("corporationEmail", СтрокаТаблицы.ЭлектроннаяПочта);	
		КонецЕсли;
		
		ПользовательАбонента.Вставить("isSubscriberAdministrator", ?(СтрокаТаблицы.ЭтоАдминистратор, "true", "false"));
		ПользовательАбонента.Вставить("person", УчетныеДанные);
		
		МассивУчетныхДанных.Добавить(ПользовательАбонента);
		
	КонецЦикла;
	
	ПараметрыСинхронизации.МассивПользователей = ТаблицаПользователейИБ;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивУчетныхДанных);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	ПараметрыСинхронизации.ДанныеПользователей = СтрокаJSON;
	ПараметрыСинхронизации.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
КонецПроцедуры

// Формирование документа ИБ по электронному документу.
//
// Параметры:
//   ПараметрыФормирования - Структура - структура данных формирования.
//   ДанныеФормы - ДанныеФормыКоллекция - форма получатель.
//   ТекстСообщения - Строка - текст при возникновении ошибки.
//   Записывать - Булево - записывать документ.
//   Отказ - Булево - результат выполнения.
//
Процедура СформироватьДокументИБ(ПараметрыФормирования, ДокументСсылка, ТекстСообщения, Записывать,
	ОбновитьСтруктуруРазбора, Отказ) Экспорт
	
	Перем СтрокаОбъекта, ДеревоРазбора;
	
	// В том случае если номенклатура уже была сопоставлена - используется временное хранилище,
	// если сопоставляли вручную - формируется структура разбора еще раз.
	
	Если Не ОбновитьСтруктуруРазбора
		И ЗначениеЗаполнено(ПараметрыФормирования.АдресСтруктурыРазбораЭД)
		И ЭтоАдресВременногоХранилища(ПараметрыФормирования.АдресСтруктурыРазбораЭД) Тогда
		СтруктураРазбора = ПолучитьИзВременногоХранилища(ПараметрыФормирования.АдресСтруктурыРазбораЭД);
	Иначе
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыФормирования.ДанныеФайлаРазбора);
		ДвоичныеДанныеФайла.Записать(ИмяФайла);
		
		ИмяФайлаДопДанных = Неопределено;
		Если ЭтоАдресВременногоХранилища(ПараметрыФормирования.ДанныеФайлаДопДанных) Тогда
			ИмяФайлаДопДанных = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыФормирования.ДанныеФайлаДопДанных);
			ДвоичныеДанныеФайла.Записать(ИмяФайлаДопДанных);
		КонецЕсли;
		
		СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяФайла,
			Перечисления.НаправленияЭД.Входящий, ИмяФайлаДопДанных);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаДопДанных);
	КонецЕсли;
	
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
		И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
			ОбменСКонтрагентамиСлужебный.СформироватьДокумент(ДеревоРазбора, СтрокаОбъекта, ДокументСсылка,
				ПараметрыФормирования.Контрагент, Записывать, ТекстСообщения, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		УстановитьСтатусЗагружен(ПараметрыФормирования.Идентификатор, ДокументСсылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Возврат данных идентификации пользователя информационной базы из кэша.
//
// Параметры:
//   Пользователь - Справочник.Пользователи - проверяемый пользователь, если не указан, то текущий.
//
// Возвращаемое значение:
//   Структура - структура данных идентификации.
//
Функция ПараметрыАутентификацииПользователя(Пользователь = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Пользователь = Пользователи.СсылкаНеуказанногоПользователя(Истина) Тогда
		// Получение первого пользователя по ролям.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи1СБизнесСеть.СсылкаНаОбъект КАК Ссылка
		|ИЗ
		|	РегистрСведений.Пользователи1СБизнесСеть КАК Пользователи1СБизнесСеть";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Пользователи.РолиДоступны("ВыполнениеОбменаБизнесСеть", Выборка.Ссылка) Тогда
				Пользователь = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи1СБизнесСеть.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.Пользователи1СБизнесСеть КАК Пользователи1СБизнесСеть
	|ГДЕ
	|	Пользователи1СБизнесСеть.СсылкаНаОбъект = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураИдентификации = Неопределено;
	Если Выборка.Следующий() Тогда
		СтруктураИдентификации = Новый Структура;
		СтруктураИдентификации.Вставить("Пользователь", Пользователь);
		СтруктураИдентификации.Вставить("Логин", Выборка.Идентификатор);
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователь, "ПарольБизнесСеть");
		СтруктураИдентификации.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураИдентификации;
	
КонецФункции

// Сохранение настроек подключения во временном параметре сеанса.
//
// Параметры:
//  ПараметрыСоединения - Структура - сохраняемые параметры.
//
Процедура СохранитьПараметрыСоединенияВСеансе(ПараметрыСоединения)
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	Если ПараметрыСоединения = Неопределено Тогда
		// Если нет задан параметр, удаляется настройка в параметрах сеанса.
		Если ПараметрыКлиентаНаСервере.Получить("БизнесСетьПараметрыСоединения") <> Неопределено Тогда
			ПараметрыКлиентаНаСервере.Удалить("БизнесСетьПараметрыСоединения")
		КонецЕсли;
	Иначе
		ПараметрыКлиентаНаСервере["БизнесСетьПараметрыСоединения"] = Новый ФиксированнаяСтруктура(ПараметрыСоединения);
	КонецЕсли;
	
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

// Обновляет значения идентификаторов Бизнес-сети.
//
// Параметры:
//   ПараметрыОбновления - Структура
//     * МассивОрганизаций - Массив - организации для регистрации.
//     * АдресХранилищаПользователей - Строка - адрес во временном хранилище для хранения таблицы пользователей.
//     * АдминистраторАбонента - Структура - данные об администраторе абонента (Пользователь, Логин, Пароль).
//     * Клиент - Структура - данные о клиенте (Идентификатор, Ключ).
//   РежимУдаления - Булево - если Истина, удаление идентификаторов, Ложь - сохранение.
//
Процедура ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления, РежимУдаления = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	МенеджерЗаписи = РегистрыСведений.Пользователи1СБизнесСеть.СоздатьМенеджерЗаписи();
	
	// Обновление сведений об зарегистрированных организациях.
	Если ПараметрыОбновления.Свойство("МассивОрганизаций") И ЗначениеЗаполнено(ПараметрыОбновления.МассивОрганизаций) Тогда
		МенеджерЗаписиОрганизации = РегистрыСведений.Организации1СБизнесСеть.СоздатьМенеджерЗаписи();
		Для Каждого ЭлементМассива Из ПараметрыОбновления.МассивОрганизаций Цикл
			МенеджерЗаписиОрганизации.Организация = ЭлементМассива;
			МенеджерЗаписиОрганизации.Прочитать();
			Если РежимУдаления Тогда
				МенеджерЗаписиОрганизации.Удалить();
			Иначе
				МенеджерЗаписиОрганизации.Организация = ЭлементМассива;
				МенеджерЗаписиОрганизации.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	// Обновление сведений о зарегистрированных пользователях.
	Если ПараметрыОбновления.Свойство("МассивПользователей") Тогда
	
		МассивПользователей = ПараметрыОбновления.МассивПользователей;
		
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(МассивПользователей) Тогда
			// Выборка пользователей, переданных в массиве.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи1СБизнесСеть.СсылкаНаОбъект КАК СсылкаНаОбъект
			|ИЗ
			|	РегистрСведений.Пользователи1СБизнесСеть КАК Пользователи1СБизнесСеть
			|ГДЕ
			|	Пользователи1СБизнесСеть.СсылкаНаОбъект ССЫЛКА Справочник.Пользователи
			|	И НЕ Пользователи1СБизнесСеть.СсылкаНаОбъект В (&МассивСсылок)";
			Запрос.УстановитьПараметр("МассивСсылок", МассивПользователей.ВыгрузитьКолонку("Ссылка"));
		Иначе
			// Если не передан массив пользователей, то выберем всех.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи1СБизнесСеть.СсылкаНаОбъект КАК СсылкаНаОбъект
			|ИЗ
			|	РегистрСведений.Пользователи1СБизнесСеть КАК Пользователи1СБизнесСеть";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Если список пользователей пустой, и значение ссылки это пустой пользователь, то такую запись не удаляем,
			// так как эта запись является администратором абонента в сервисе.
			ЭтоПустойАдминистратор = НЕ ЗначениеЗаполнено(МассивПользователей)
				И (НЕ ЗначениеЗаполнено(Выборка.СсылкаНаОбъект)
				ИЛИ Выборка.СсылкаНаОбъект = Пользователи.СсылкаНеуказанногоПользователя());
			
			Если НЕ ЭтоПустойАдминистратор ИЛИ (ЭтоПустойАдминистратор И РежимУдаления) Тогда
				МенеджерЗаписи.СсылкаНаОбъект = Выборка.СсылкаНаОбъект;
				МенеджерЗаписи.Удалить();
				// Очистка пароля в хранилище.
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Выборка.СсылкаНаОбъект, Неопределено, "ПарольБизнесСеть");
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не РежимУдаления Тогда
			Если ЗначениеЗаполнено(МассивПользователей) Тогда
				Для Каждого ЭлементМассива Из МассивПользователей Цикл
					МенеджерЗаписи.СсылкаНаОбъект = Справочники[ИмяСправочникаОрганизации].ПустаяСсылка();
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.СсылкаНаОбъект = ЭлементМассива.Ссылка;
					МенеджерЗаписи.Идентификатор  = ЭлементМассива.Идентификатор;
					МенеджерЗаписи.Записать(Истина);
					ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ЭлементМассива.Ссылка, 
						ЭлементМассива.Пароль, "ПарольБизнесСеть");
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Обновление сведений об администраторе абонента.
	Если ПараметрыОбновления.Свойство("АдминистраторАбонента") Тогда

		АдминистраторАбонента = ПараметрыОбновления.АдминистраторАбонента;
		МенеджерЗаписи.СсылкаНаОбъект = Справочники[ИмяСправочникаОрганизации].ПустаяСсылка();
		МенеджерЗаписи.СсылкаНаОбъект = АдминистраторАбонента.Пользователь;
		МенеджерЗаписи.Прочитать();
		Если РежимУдаления Тогда
			МенеджерЗаписи.Удалить();
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдминистраторАбонента.Пользователь, 
				Неопределено, "ПарольБизнесСеть");
		Иначе
			МенеджерЗаписи.СсылкаНаОбъект = АдминистраторАбонента.Пользователь;
			МенеджерЗаписи.Идентификатор  = АдминистраторАбонента.Логин;
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдминистраторАбонента.Пользователь, 
				АдминистраторАбонента.Пароль, "ПарольБизнесСеть");
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Обновление сведений об идентификаторе информационной базы.
	Если ПараметрыОбновления.Свойство("Идентификатор") Тогда
		Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.Пользователи1СБизнесСеть");
		Если РежимУдаления Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Ссылка, Неопределено, "ПарольБизнесСеть");
		Иначе
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Ссылка,
				ПараметрыОбновления.Идентификатор, "ПарольБизнесСеть");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти
