
// Общие функции и процедуры

Функция СтрокаПоМаске(Стр,Маска="",Симв="") Экспорт
	Ст=""; Если ПустаяСтрока(Маска) Тогда Возврат Ст; КонецЕсли;
	Для Сч=1 По СтрДлина(Стр) Цикл
		Сим=Сред(Стр,Сч,1);
		Если Найти(Маска,Сим)>0 Тогда Ст=Ст+Сим; Иначе Ст=Ст+Симв; КонецЕсли; 
	КонецЦикла;
	Возврат Ст;
КонецФункции

Процедура ЗаменитьРусскиеБуквыВАртикуле(Артикул,Вариант="Раскладка") Экспорт
	Если Вариант = "Раскладка" Тогда
		Артикул=СтрЗаменить(Артикул,"А","F");
		Артикул=СтрЗаменить(Артикул,"Б","<");
		Артикул=СтрЗаменить(Артикул,"В","D");
		Артикул=СтрЗаменить(Артикул,"Г","U");
		Артикул=СтрЗаменить(Артикул,"Д","L");
		Артикул=СтрЗаменить(Артикул,"Е","T");
		Артикул=СтрЗаменить(Артикул,"Ё","~");
		Артикул=СтрЗаменить(Артикул,"Ж",":");
		Артикул=СтрЗаменить(Артикул,"З","P");
		Артикул=СтрЗаменить(Артикул,"И","B");
		Артикул=СтрЗаменить(Артикул,"Й","Q");
		Артикул=СтрЗаменить(Артикул,"К","R");
		Артикул=СтрЗаменить(Артикул,"Л","K");
		Артикул=СтрЗаменить(Артикул,"М","V");
		Артикул=СтрЗаменить(Артикул,"Н","Y");
		Артикул=СтрЗаменить(Артикул,"О","J");
		Артикул=СтрЗаменить(Артикул,"П","G");
		Артикул=СтрЗаменить(Артикул,"Р","H");
		Артикул=СтрЗаменить(Артикул,"С","C");
		Артикул=СтрЗаменить(Артикул,"Т","N");
		Артикул=СтрЗаменить(Артикул,"У","E");
		Артикул=СтрЗаменить(Артикул,"Ф","A");
		Артикул=СтрЗаменить(Артикул,"Х","{");
		Артикул=СтрЗаменить(Артикул,"Ц","W");
		Артикул=СтрЗаменить(Артикул,"Ч","X");
		Артикул=СтрЗаменить(Артикул,"Ш","I");
		Артикул=СтрЗаменить(Артикул,"Щ","O");
		Артикул=СтрЗаменить(Артикул,"Ы","S");
		Артикул=СтрЗаменить(Артикул,"Ъ","}");
		Артикул=СтрЗаменить(Артикул,"Ь","M");
		Артикул=СтрЗаменить(Артикул,"Э","""");
		Артикул=СтрЗаменить(Артикул,"Ю",">");
		Артикул=СтрЗаменить(Артикул,"Я","Z");
	ИначеЕсли Вариант = "Опечатка" Тогда
		Артикул=СтрЗаменить(Артикул,"А","A");
		Артикул=СтрЗаменить(Артикул,"В","B");
		Артикул=СтрЗаменить(Артикул,"С","C");
		Артикул=СтрЗаменить(Артикул,"Е","E");
		Артикул=СтрЗаменить(Артикул,"О","O");
		Артикул=СтрЗаменить(Артикул,"Т","T");
		Артикул=СтрЗаменить(Артикул,"Р","P");
		Артикул=СтрЗаменить(Артикул,"К","K");
		Артикул=СтрЗаменить(Артикул,"Х","X");
		Артикул=СтрЗаменить(Артикул,"Н","H");
		Артикул=СтрЗаменить(Артикул,"М","M");
	КонецЕсли;
КонецПроцедуры

Функция ОчиститьАртикул(Знач Артикул) Экспорт
	
	ДопустимыеСимволыАртикула="ABCDEFGHIJKLMNOPQRSTUVWXYZБГДЖЗИЙЛПУФЦЧШЩЭЮЯ";
	
	Если Найти(Артикул,"[")>0 Тогда
		ДопустимыеСимволыАртикула=ДопустимыеСимволыАртикула+"-";
	КонецЕсли;
	Артикул=ВРег(Артикул);
	ЗаменитьРусскиеБуквыВАртикуле(Артикул);
	НовыйКод=СтрокаПоМаске(ВРег(СокрЛП(Артикул)),"%[]0123456789"+ДопустимыеСимволыАртикула,"");
	
	Возврат НовыйКод;
	
КонецФункции

Функция РазобратьСтрокуTXT(Знач СтрокаДляРазбора,Разделитель=";",МаксПоле=0) Экспорт
	МассивСтрокиФайлаПрайсЛиста=Новый Массив();
	Пока СтрДлина(СтрокаДляРазбора)>0 Цикл
		ПозицияРазделителя=Найти(СтрокаДляРазбора,Разделитель);
		Если ПозицияРазделителя=0 Тогда
			ПозицияРазделителя=СтрДлина(СтрокаДляРазбора)+1;
		КонецЕсли; 	
		СтрокаПараметр=Лев(СтрокаДляРазбора,ПозицияРазделителя-1);
		СтрокаДляРазбора=Сред(СтрокаДляРазбора,ПозицияРазделителя+1);
		МассивСтрокиФайлаПрайсЛиста.Добавить(СокрЛП(СтрокаПараметр));
	КонецЦикла; 
	Если МаксПоле>0 Тогда
		Пока МаксПоле>МассивСтрокиФайлаПрайсЛиста.ВГраница() Цикл
			МассивСтрокиФайлаПрайсЛиста.Добавить("");
		КонецЦикла; 
	КонецЕсли; 
	Возврат МассивСтрокиФайлаПрайсЛиста;
КонецФункции

Функция ПреобразоватьСтрокуВДату(ДатаСтрока) Экспорт
	ДатаДата = ?(ЗначениеЗаполнено(ДатаСтрока),Дата(СтрЗаменить(ДатаСтрока,"-","")),Дата('00010101'));
	Возврат ДатаДата;
КонецФункции

Функция ПроверкаЗапроленияЛогинаПароляLaximo() Экспорт
мОтказ= Ложь;
//Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.Пользователь.ЛогинLaximo) ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСеанса.Пользователь.ПарольLaximo) Тогда
//	мОтказ = Истина;
//КонецЕсли;
Возврат мОтказ;
КонецФункции

Функция ПолучитьСсылкуТекущегоПользователя() Экспорт
	//Возврат ПараметрыСеанса.Пользователь.Ссылка;
	Возврат ПараметрыСеанса.ТекущийПользователь.Ссылка;
КонецФункции

// Только для внутреннего использования.
Процедура СоздатьПервогоАдминистратораСистемы() Экспорт
	
	
	
	ТекстОшибки =
		НСтр("ru = 'Запуск с пустым списком пользователей информационной базы невозможен.
		           |Будет создан новый пользователь ""Администратор""
				   |с ролью ""Полные права Laximo"" 
		           |Необходимо повторить запуск программы от его имени.
		           |Для управления пользователями информационной базы необходимо открыть
		           |Конфигуратор и воспользоваться пунктом меню ""Администрирование - Пользователи"".'");

				   
		УстановитьПривилегированныйРежим(Истина);
		
		Администратор = ПользователиИнформационнойБазы.СоздатьПользователя();
		Администратор.Имя = НСтр("ru = 'Администратор'");
		Администратор.ПолноеИмя = Администратор.Имя;
		Администратор.АутентификацияСтандартная = Истина;
		Администратор.ПоказыватьВСпискеВыбора   = Истина;
		Администратор.Роли.Добавить(Метаданные.Роли.ПолныеПрава_Laximo);
		Администратор.Записать();

		ВызватьИсключение ТекстОшибки;
	
				
			
	
	
	КонецПроцедуры



// Обработка ответа сервисов

Функция ПолучитьТаблицуДляЗаписи(НаименованиеФункции, ОбъектXDTO, ИмяСвойства) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
		
		Доки = ОбъектXDTO.ПолучитьСписок(ИмяСвойства);
		Док = Неопределено;
		Для Каждого Док Из Доки Цикл
			Для Каждого Свойство Из Док.Свойства() Цикл
				Если ТаблицаЗначений.Колонки.Найти(Свойство.Имя) = Неопределено Тогда
					ТаблицаЗначений.Колонки.Добавить(Свойство.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("ОбъектXDTO") Тогда
		
		Док = ОбъектXDTO[ИмяСвойства];
		Для Каждого Свойство Из Док.Свойства() Цикл
			Если ТаблицаЗначений.Колонки.Найти(Свойство.Имя) = Неопределено Тогда
				ТаблицаЗначений.Колонки.Добавить(Свойство.Имя);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ПрочитатьЭлементXDTO_ВТаблицу(ЭлементXDTO, ТаблицаДанных, СоответствиеТаблиц, СоответствиеСтруктур, СтрокаОшибки, ИмяСтрокСДанными, СоответствиеТаблицИменаСтрок)
	
	Если ТипЗнч(ЭлементXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из ЭлементXDTO Цикл
			Если ТипЗнч(Элемент) = Тип("ОбъектXDTO") Тогда
				Если Элемент.Свойства().Получить(ИмяСтрокСДанными) = Неопределено Тогда
					// У нас может быть другое свойство для AM, например, property, image, replacement
					Если ТипЗнч(ТаблицаДанных) = Тип("ДеревоЗначений") Тогда
						СтрокаТаблицы = ТаблицаДанных.Строки.Добавить();
					Иначе
						СтрокаТаблицы = ТаблицаДанных.Добавить();
					КонецЕсли;
					Если Не ПрочитатьОбъектXDTO_ВСтруктуру(Элемент,СтрокаТаблицы,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки, СоответствиеТаблицИменаСтрок) Тогда
						Возврат Ложь;
					КонецЕсли;
				Иначе
					row = СоответствиеТаблиц[ВРег(ИмяСтрокСДанными)];
					Если row <> Неопределено Тогда
						// Все ок, у нас описано что будет находиться в row
						СтрокаТаблицы = ТаблицаДанных.Добавить();
						Если Не ПрочитатьОбъектXDTO_ВСтруктуру(Элемент,СтрокаТаблицы,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки, СоответствиеТаблицИменаСтрок) Тогда
							Возврат Ложь;
						КонецЕсли;
					Иначе
						Если ТипЗнч(Элемент[ИмяСтрокСДанными]) = Тип("ОбъектXDTO") Тогда
							СтрокаТаблицы = ТаблицаДанных.Добавить();
							Если Не ПрочитатьОбъектXDTO_ВСтруктуру(Элемент[ИмяСтрокСДанными],СтрокаТаблицы,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки,СоответствиеТаблицИменаСтрок) Тогда
								Возврат Ложь;
							КонецЕсли;
						ИначеЕсли ТипЗнч(Элемент[ИмяСтрокСДанными]) = Тип("СписокXDTO") Тогда
							Если Не ПрочитатьЭлементXDTO_ВТаблицу(Элемент.row,ТаблицаДанных,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки,ИмяСтрокСДанными,СоответствиеТаблицИменаСтрок) Тогда
								Возврат Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ТаблицаДанных) = Тип("ДеревоЗначений") Тогда
					СтрокаТаблицы = ТаблицаДанных.Строки.Добавить();
				Иначе
					Возврат Ложь;
				КонецЕсли;
				Если Не ПрочитатьОбъектXDTO_ВСтруктуру(Элемент,СтрокаТаблицы,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки, СоответствиеТаблицИменаСтрок) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЭлементXDTO) = Тип("ОбъектXDTO") Тогда
		Если ЭлементXDTO.Свойства().Получить(ИмяСтрокСДанными) = Неопределено Тогда
			Если ТипЗнч(ТаблицаДанных) = Тип("ДеревоЗначений") Тогда
				СтрокаТаблицы = ТаблицаДанных.Строки.Добавить();
			Иначе
				СтрокаТаблицы = ТаблицаДанных.Добавить();
			КонецЕсли;
			Если Не ПрочитатьОбъектXDTO_ВСтруктуру(ЭлементXDTO,СтрокаТаблицы,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки, СоответствиеТаблицИменаСтрок) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			row = СоответствиеТаблиц[ВРег(ИмяСтрокСДанными)];
			Если row <> Неопределено Тогда
				// Все ок, у нас описано что будет находиться в row
				СтрокаТаблицы = ТаблицаДанных.Добавить();
				Если Не ПрочитатьОбъектXDTO_ВСтруктуру(ЭлементXDTO,СтрокаТаблицы,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки,СоответствиеТаблицИменаСтрок) Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементXDTO[ИмяСтрокСДанными]) = Тип("ОбъектXDTO") Тогда
					СтрокаТаблицы = ТаблицаДанных.Добавить();
					Если Не ПрочитатьОбъектXDTO_ВСтруктуру(ЭлементXDTO[ИмяСтрокСДанными],СтрокаТаблицы,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки, СоответствиеТаблицИменаСтрок) Тогда
						Возврат Ложь;
					КонецЕсли;
				ИначеЕсли ТипЗнч(ЭлементXDTO[ИмяСтрокСДанными]) = Тип("СписокXDTO") Тогда
					Если Не ПрочитатьЭлементXDTO_ВТаблицу(ЭлементXDTO[ИмяСтрокСДанными],ТаблицаДанных,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки, ИмяСтрокСДанными,СоответствиеТаблицИменаСтрок) Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьОбъектXDTO_ВСтруктуру(ОбъектXDTO,СтрокаДанных,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки,СоответствиеТаблицИменаСтрок=Неопределено) Экспорт
	
	СтруктураОстальныхПолей = Неопределено;
	ОстальныеПоля = СоответствиеСтруктур[ВРег("ОстальныеПоля")];
	Если ОстальныеПоля <> Неопределено Тогда
		СтруктураОстальныхПолей = Новый Структура;
		Для каждого КлючСтруктуры Из ОстальныеПоля Цикл
			СтруктураОстальныхПолей.Вставить(КлючСтруктуры.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектXDTO.Свойства() Цикл
		ТаблицаДанныхРеквизита = СоответствиеТаблиц[ВРег(Реквизит.Имя)];
		//Если СоответствиеТаблицИменаСтрок = Неопределено Тогда
			ИмяСтрокСДанными = "row";
		//Иначе
		//	ИмяСтрокСДанными = СоответствиеТаблицИменаСтрок[ВРег(Реквизит.Имя)];
		//КонецЕсли;
		СтруктураДанныхРеквизита = СоответствиеСтруктур[ВРег(Реквизит.Имя)];
		Если ТаблицаДанныхРеквизита <> Неопределено Тогда
			Если ТипЗнч(ТаблицаДанныхРеквизита) = Тип("ДеревоЗначений") Тогда
				ТаблицаРеквизита = ТаблицаДанныхРеквизита.Скопировать();
				ТаблицаРеквизита.Строки.Очистить();
			Иначе
				ТаблицаРеквизита = ТаблицаДанныхРеквизита.СкопироватьКолонки();
			КонецЕсли;
			Если (ТипЗнч(ОбъектXDTO[Реквизит.Имя]) = Тип("СписокXDTO") ИЛИ ТипЗнч(ОбъектXDTO[Реквизит.Имя]) = Тип("ОбъектXDTO")) Тогда
				Если Не ПрочитатьЭлементXDTO_ВТаблицу(ОбъектXDTO[Реквизит.Имя],ТаблицаРеквизита,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки,ИмяСтрокСДанными,СоответствиеТаблицИменаСтрок) Тогда
					Возврат Ложь;
				КонецЕсли;
				СтрокаДанных[Реквизит.Имя] = ТаблицаРеквизита;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли СтруктураДанныхРеквизита <> Неопределено Тогда
			СтруктураРеквизита = Новый Структура;
			Для каждого КлючСтруктуры Из СтруктураДанныхРеквизита Цикл
				СтруктураРеквизита.Вставить(КлючСтруктуры.Ключ);
			КонецЦикла; 
			Если ТипЗнч(ОбъектXDTO[Реквизит.Имя]) = Тип("ОбъектXDTO") Тогда
				Если Не ПрочитатьОбъектXDTO_ВСтруктуру(ОбъектXDTO[Реквизит.Имя],СтруктураРеквизита,СоответствиеТаблиц,СоответствиеСтруктур,СтрокаОшибки,СоответствиеТаблицИменаСтрок) Тогда
					Возврат Ложь;
				КонецЕсли;
				СтрокаДанных[Реквизит.Имя] = СтруктураРеквизита;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если ТипЗнч(ОбъектXDTO[Реквизит.Имя]) = Тип("ОбъектXDTO") ИЛИ ТипЗнч(ОбъектXDTO[Реквизит.Имя]) = Тип("СписокXDTO") Тогда
				// Ошибка сообщения, так как ожидаем Строку или Число
				Попытка
					Если ТипЗнч(СтрокаДанных[Реквизит.Имя]) = Тип("Число") Тогда
						СтрокаДанных[Реквизит.Имя] = 0;
					Иначе
						СтрокаДанных[Реквизит.Имя] = "";
					КонецЕсли;
				Исключение
					// Если не указали принудительно реквизит, который загружается
					// Или ошибка преобразования типа значения
					Если СтруктураОстальныхПолей <> Неопределено Тогда
						СтруктураОстальныхПолей.Вставить(Реквизит.Имя,"");
					КонецЕсли;
				КонецПопытки;
			Иначе
				Значение = ?(ОбъектXDTO[Реквизит.Имя]="t","true",ОбъектXDTO[Реквизит.Имя]);
				Пока Найти(Значение,"  ")>0 Цикл
					Значение = СтрЗаменить(Значение,"  "," ");
				КонецЦикла;
				Попытка
					Если ТипЗнч(СтрокаДанных[Реквизит.Имя]) = Тип("Число") Тогда
						СтрокаДанных[Реквизит.Имя] = Число(Значение);
					Иначе
						СтрокаДанных[Реквизит.Имя] = Значение;
					КонецЕсли;
				Исключение
					// Если не указали принудительно реквизит, который загружается
					// Или ошибка преобразования типа значения
					Если СтруктураОстальныхПолей <> Неопределено Тогда
						СтруктураОстальныхПолей.Вставить(Реквизит.Имя,Значение);
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураОстальныхПолей <> Неопределено Тогда
		Попытка
			СтрокаДанных.ОстальныеПоля = СтруктураОстальныхПолей;
		Исключение КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьКартинкуПоURL(UrlКартинки) Экспорт
	// http://img.laximo.net/BMW0712/%size%/2635.gif		
	Если Не ЗначениеЗаполнено(UrlКартинки) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяВремФайла = ПолучитьИмяВременногоФайла("gif");
	

	
	
	WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Open("GET", UrlКартинки, Ложь);
	WinHttp.SetRequestHeader("Accept", "*/*");
	WinHttp.setRequestHeader("Content-Type","image/gif");
	
	WinHttp.Send();
	
	СтрокаОтвета = WinHttp.ResponseText;
	СтатусОтправки = WinHttp.status;
	
	Если СтатусОтправки = 200 Тогда
		Stream = Новый COMОбъект("ADODB.Stream");
		Stream.Mode = 3;
		Stream.Type = 1;
		Stream.Open();
		Stream.Write(WinHttp.responseBody);
		Stream.SaveToFile(ИмяВремФайла, 2);
		Stream.Close();
		
				
		ДанныеКартинки = Новый ДвоичныеДанные(ИмяВремФайла);
		УдалитьФайлы(ИмяВремФайла);
		Возврат ДанныеКартинки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция РазобратьОшибку500(СтрокаОшибки) Экспорт
//E_INVALIDREQUEST		 
//E_INVALIDPARAMETER	 Название параметра.	 
//E_CATALOGNOTEXISTS	 Код каталога.	 
//E_UNKNOWNCOMMAND	 Наименование переданной команды.	 
//E_ACCESSDENIED	 Код каталога или имя функции.	 
//E_NOTSUPPORTED	 Код каталога и имя функции.	 
	СоотвествиеОшибок = Новый Соответствие;
	СоотвествиеОшибок.Вставить("E_INVALIDREQUEST","Не верно сформирован запрос к Веб-сервису.");
	СоотвествиеОшибок.Вставить("E_INVALIDPARAMETER","Неверное значение параметра в запросе к Веб-сервису.");
	СоотвествиеОшибок.Вставить("E_CATALOGNOTEXISTS","Каталог не зарегистрирован в системе.");
	СоотвествиеОшибок.Вставить("E_UNKNOWNCOMMAND","Команда не известна.");
	СоотвествиеОшибок.Вставить("E_ACCESSDENIED","Доступ запрещен.");
	СоотвествиеОшибок.Вставить("E_NOTSUPPORTED","Функция не поддерживается каталогом.");
	СоотвествиеОшибок.Вставить("E_ACCESSLIMITREACHED","Превышен лимит запросов к сервису в сутки");
	Поз_ = Найти(СтрокаОшибки,":");
	Если Поз_ > 0 Тогда
		Возврат СоотвествиеОшибок[ЛЕВ(СтрокаОшибки,Поз_-1)];
	Иначе
		Возврат СтрокаОшибки;
	КонецЕсли;
КонецФункции


	
		
