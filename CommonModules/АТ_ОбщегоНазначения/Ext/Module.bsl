////////////////////////////////////////////////////////////////////////////////
// <АТ_ОбщегоНазначения: Процедуры и функции общего назначения разработанные в рамках
//  реализации проектов ООО "Автотехника".>
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
Функция ПолучитьНастройку(ИмяПредопределенногоЭлемента) Экспорт
	
	Возврат Справочники.АТ_ХранилищеНастроек[ИмяПредопределенногоЭлемента].Хранилище.Получить();
	
КонецФункции

Функция ПолучитьЭлементНастройки(ИмяПредопределенногоЭлемента, Ключ) Экспорт
	
	СтруктураНастроек = Справочники.АТ_ХранилищеНастроек[ИмяПредопределенногоЭлемента].Хранилище.Получить();
	Значение = Неопределено;
	СвойствоЕсть = СтруктураНастроек.Свойство(Ключ, Значение);
	
	Возврат Значение;
	
КонецФункции

Функция ЭтоГуид(Значение) Экспорт
	
	Возврат ТипЗнч(Значение) = Тип("Строка") И СтрДлина(Значение) = 36 И СтрЧислоВхождений(Значение, "-") = 4;
	
КонецФункции

Функция ПолучитьТекст(ИмяФайла, ОшибкаЧтения = Ложь) Экспорт
	
	// Читает текстовый документ на сервере и возвращает текст
	
	Текст 	= Новый ТекстовыйДокумент;
	Файл 	= Новый Файл(ИмяФайла);
	
	Если Файл.Существует() Тогда
		
		Попытка
			Текст.Прочитать(ИмяФайла);
		Исключение
			ОшибкаЧтения = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Текст.ПолучитьТекст();
	
КонецФункции
Функция ЗаписатьТекст(ИмяФайла, Стр) Экспорт
	
	// Записывает строку в текстовый файл и возвращает ИСТИНА если запись удалась
	
	Текст 	= Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Стр);
	
	Попытка
		Текст.Записать(ИмяФайла);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОбъектПодключеннойВнешнейОбработки(СсылкаНаОбработку, Параметры = Неопределено, стрОшибки = "") Экспорт
	
	// Возвращает внешнею обработку объект, загруженую в дополнительные обработки, в случаи ошибки неопределено.
	//	Параметры:
	// 		ОбъектСсылка - ссылка на справочник или оюъект который надо распечатьать.
	//		СсылкаНаОбработку - ссылка на справочник "ДополнительныеОтчетыИОбработки" которая будет печатать
	//ИмяМакета
	//		стрОшибки - сюда возвращается ошибка если чтото пойдет не так
	
	ОбработкаОбъект = СсылкаНаОбработку.ПолучитьОбъект();
		
	Если ОбработкаОбъект = Неопределено Тогда
		стрОшибки = "Не найдена внещняя печатная форма";
		Возврат Неопределено;
	КонецЕсли;
		
    ДанныеОбработки = ОбработкаОбъект.ХранилищеОбработки.Получить();
    АдресХранилищаОбработки = ПоместитьВоВременноеХранилище(ДанныеОбработки);
    ИмяОбработки = Строка(СсылкаНаОбработку.Ссылка.УникальныйИдентификатор());
	Подключение = ВнешниеОбработки.Подключить(АдресХранилищаОбработки, ИмяОбработки , Параметр(Параметры, "БезопасныйРежим", Истина));
    Возврат ВнешниеОбработки.Создать(Подключение);
		
	//Макеты = Новый ТаблицаЗначений;
	//Макеты.Колонки.Добавить("ИмяВРЕГ");
	//Макеты.Колонки.Добавить("ТабличныйДокумент");
	//Макеты.Колонки.Добавить("СинонимМакета");
	//Макеты.Колонки.Добавить("Картинка");
	//Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	//Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	//
	//Макеты.Добавить().ИмяВРЕГ = ИмяМакета;
	//
	//Ссылки = Новый Массив;
	//Ссылки.Добавить(ОбъектСсылка);
	//    
	//Отчет.Печать(Ссылки, Макеты, Неопределено, Неопределено);
	//
	////Возврат Макеты[0]
	//
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция Параметр(Структура, Ключ, ЗначениеЕслиНеОпределено = Неопределено) Экспорт
	
	// Возвращает значение из структуры по ключу,
	// если такого згначения не будет найдено тогда вернет "ЗначениеЕслиНеОпределено"
	
	Перем Значение;
	
	Если Структура <> Неопределено Тогда
		Структура.Свойство(Ключ, Значение);
	КонецЕсли;
	
	Возврат ?(Значение = Неопределено, ЗначениеЕслиНеОпределено, Значение);
		
КонецФункции

Процедура АТ_ЗапретНаИзменениеРеализацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") И Источник.ДополнительныеСвойства.ГрупповоеПерепроведение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(Новый Массив(), Источник.Дата, Источник.Склад) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Если РегистрТоварыКОтгрузкеЗакрыт(
				?(ЗначениеЗаполнено(Источник.ЗаказКлиента), Источник.ЗаказКлиента, Источник.Ссылка)) Тогда
			
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Склад уже начал работу по текущей реализации! Для отмены проведения реализации требуется распровести расходный ордер.";
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли Источник.Проведен Тогда
		
		ТабличнаяЧастьТовары = Источник.Товары.Выгрузить( ,"Номенклатура, Количество");
		Если СоставТабличнойЧастиИзменен(Источник.Ссылка, ТабличнаяЧастьТовары) Тогда
			
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Склад уже начал работу по текущей реализации! Для изменения реализации требуется распровести расходный ордер.";
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура АТ_ПриЗаписиМаршрутногоЛистаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	СтатусДо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Статус");
	
	Если СтатусДо = Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.Выполняется И СтатусДо <> Источник.Статус Тогда
		Если РольДоступна("АТ_МегалогистЗакрытиеРейсов") Или РольДоступна("ПолныеПрава") Тогда
			Возврат;
		Иначе
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Изменять статус маршрутного листа во время его выполнения может только администратор!";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РегистрТоварыКОтгрузкеЗакрыт(Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
	|	ТоварыКОтгрузкеОстатки.СобраноОстаток КАК СобраноОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
	|ГДЕ
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки = &Распоряжение
	|	И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток <> ТоварыКОтгрузкеОстатки.КОформлениюОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
	|	ТоварыКОтгрузкеОстатки.СобраноОстаток КАК СобраноОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
	|ГДЕ
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки = &Распоряжение
	|	И (ТоварыКОтгрузкеОстатки.СобраноОстаток > 0
	|			ИЛИ ТоварыКОтгрузкеОстатки.КСборкеОстаток > 0
	|			ИЛИ ТоварыКОтгрузкеОстатки.СобираетсяОстаток > 0)";
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[1].Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Результат[0].Пустой();
	
КонецФункции

Функция СоставТабличнойЧастиИзменен(Ссылка, ТабличнаяЧастьТовары)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧастьТовары.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧастьТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТабличнаяЧастьТовары
	|ИЗ
	|	&ТабличнаяЧастьТовары КАК ТабличнаяЧастьТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧастьТовары.Номенклатура КАК Номенклатура,
	|		СУММА(ТабличнаяЧастьТовары.Количество) КАК Количество
	|	ИЗ
	|		ТабличнаяЧастьТовары КАК ТабличнаяЧастьТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧастьТовары.Номенклатура) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|			СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
	|		ИЗ
	|			Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ГДЕ
	|			РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РеализацияТоваровУслугТовары.Номенклатура) КАК ВложенныйЗапросСсылка
	|		ПО ВложенныйЗапрос.Номенклатура = ВложенныйЗапросСсылка.Номенклатура
	|ГДЕ
	|	ВложенныйЗапрос.Количество <> ЕСТЬNULL(ВложенныйЗапросСсылка.Количество, 0)";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТабличнаяЧастьТовары", ТабличнаяЧастьТовары);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции


#КонецОбласти