
Функция Суффикс() Экспорт
	
	Возврат "АТ_Доставка";
	
КонецФункции
Функция Включено() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("АТ_Мультидоставка");
	
КонецФункции

Функция ВидимыеСпсобыПеревозчика() Экспорт
	
	// Возвращает массив способов доставки при которых видны реквизиты перевозчика
	
	Способы = Новый Массив;
	Способы.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	Способы.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	Способы.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчика);
	Способы.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
	Способы.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	Способы.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	
	Возврат Способы;
	
КонецФункции

Функция ПредставлениеВарианта(Строка)
	
	// Возвращает представление варианта для пользователя
	
	Возврат СтрШаблон("%1: %2 -> %3", Строка.СпособДоставки, Строка.Отправитель, Строка.Получатель);
	
КонецФункции
Процедура ОбновитьПредставленияТаблицы(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		
		Представление = ПредставлениеВарианта(Строка);
		
		Если Строка.Значение <> Представление Тогда
			Строка.Значение = Представление;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ОбновитьОтображениеСписка(Форма) Экспорт
	
	ОбновитьПредставленияТаблицы(Форма[Суффикс() + "Таблица"]);
	
КонецПроцедуры


Процедура ЗапомнитьЗначениеДоставки(Форма, текИнд) Экспорт

	// Записывает реквизиты формы в таблицу
	
	Суффикс = Суффикс();
	Таб		= Форма[Суффикс + "Таблица"];
	
	Если текИнд >= 0 Тогда
		
		Строка 		= Таб[текИнд];
		Реквизиты 	= ПолучитьРеквизиты();
		
		Для Каждого Реквизит Из Реквизиты Цикл
			Строка[Реквизит.Имя] = Форма[Суффикс + Реквизит.Имя];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ОбновитьЗначениеДоставки(Форма, текИнд) Экспорт
	
	// Считывает настройки из таблицы в реквизиты формы
	
	Суффикс = Суффикс();
	Таб		= Форма[Суффикс + "Таблица"];
	ЕстьСтр = текИнд >= 0;
	
	Если ЕстьСтр Тогда
		Строка = Таб[текИнд];
	КонецЕсли;
	
	Реквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл
		Форма[Суффикс + Реквизит.Имя] = ?(ЕстьСтр, Строка[Реквизит.Имя], Неопределено);
	КонецЦикла;
	
	ОбновитьПредставленияТаблицы(Таб);
	
КонецПроцедуры

Функция ПолучитьСписокАдресовДоставок(Объект) Экспорт
	
	Список = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.БП_АдресаДоставкиКонтрагентов ГДЕ (Партнер = &Объект ИЛИ Склад = &Объект) И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Список;
	
КонецФункции

Функция ПолучитьВозможныйСписокДоставок(Форма) Экспорт
	
	Список		= Новый СписокЗначений;
	Отправители = Форма.ПолучитьСписокОтправителей();
	Получатели 	= Форма.ПолучитьСписокПолучателей();
	
	Для Каждого Отправитель Из Отправители Цикл
		Для Каждого Получатель Из Получатели Цикл
			
			Если ЗначениеЗаполнено(Отправитель) И ЗначениеЗаполнено(Получатель) И Отправитель <> Получатель Тогда
				
				Список.Добавить(Новый Структура("Отправитель, Получатель", Отправитель, Получатель),
					СтрШаблон("%1 -> %2", Отправитель, Получатель));
					
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции


#Область БД

Функция ПриСозданииНаОснование(Объект, ОбъектОснованиеСсылка) Экспорт
	
	// Формирует запись в регистр (копируются нужные из основания в текущий если нужно)
	// Объект считается не записанным в базу поэтому устанавливается ссылка нового
	// для объекта после чего присходит запись, удаление битых ссылко в этом механизме не предусмотрено
	
	МетаДокОснования = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектОснованиеСсылка));
	Если МетаДокОснования <> Неопределено И Метаданные.Документы.Содержит(МетаДокОснования) Тогда
		
		МетаДокОбъекта 	= Объект.Метаданные();
		ИмяДока 		= МетаДокОбъекта.Имя;
		Таб 			= ПолучитьТаблицуДоставкиОбъекта(ОбъектОснованиеСсылка);
		
		Если МетаДокОбъекта.Реквизиты.Найти("СкладОтправитель") <> Неопределено Тогда   // Перемещения забираем только данные, по доставке между складами.
			НовТаб = Таб.СкопироватьКолонки();
			Для Каждого Строка ИЗ Таб Цикл
				Если 	Строка.Отправитель = Объект.СкладОтправитель И
						Строка.Получатель = Объект.СкладПолучатель Тогда
					ЗаполнитьЗначенияСвойств(НовТаб.Добавить(), Строка);
				КонецЕсли;
			КонецЦикла;
			Таб = НовТаб;
		КонецЕсли;
		
		Если Таб.Количество() Тогда
			
			Менеджер = Вычислить("Документы." + ИмяДока);
			Объект.УстановитьСсылкуНового(Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор));
			СсылкаНового = Объект.ПолучитьСсылкуНового();
			Таб.ЗаполнитьЗначения(СсылкаНового, "Объект");
			СохранитьТаблицуВБазе(СсылкаНового, Таб);
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуДоставкиОбъекта(Объект)
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.АТ_МаршрутДоставки ГДЕ Объект = &Объект");
	Запрос.УстановитьПараметр("Объект", Объект);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Процедура ПрочитатьНастройкиВТаблицу(ТаблицаДоставки, Объект) Экспорт
	
	// Считывает настройки из базы в таблицу памяти и список для пользователя
	
	ТаблицаДоставки.Загрузить(ПолучитьТаблицуДоставкиОбъекта(Объект));
	
КонецПроцедуры
Процедура СохранитьТаблицуВБазе(ОбъектСсылка, Табл) Экспорт
	
	Набор = РегистрыСведений.АТ_МаршрутДоставки.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(ОбъектСсылка);
	
	Инд = -1;
	Для Каждого Строка Из Табл Цикл Инд = Инд + 1;
		
		НовСтрока = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		НовСтрока.Объект = ОбъектСсылка;
		НовСтрока.Индекс = Инд;
		
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	
	СохранитьТаблицуВБазе(ТекущийОбъект.Ссылка, Форма[Суффикс() + "Таблица"]);
		
КонецПроцедуры

Функция ПолучитьСпособИАдресДоставкиПоРасходномуОрдеру(РасхОрдер) Экспорт
	
	Структура = Новый Структура("СпособДоставки, АдресДоставки", Перечисления.СпособыДоставки.Самовывоз, "");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособДоставки, АдресДоставки
	|ИЗ
	|	РегистрСведений.АТ_МаршрутДоставки
	|ГДЕ
	|	Отправитель = &Склад И
	|	Объект В(&Объекты)
	|");
	
	Запрос.УстановитьПараметр("Объекты", 	РасхОрдер.ТоварыПоРаспоряжениям.Выгрузить(,"Распоряжение").ВыгрузитьКолонку("Распоряжение"));
	Запрос.УстановитьПараметр("Склад",		РасхОрдер.Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции
Процедура УстановитьСпособДоставкиОрдера(ДокРасходныйОрдерОбъект) Экспорт
	
	// Определяет самовывоз или нет и устанавливает признок в документе
	
	ДокРасходныйОрдерОбъект.ОтгрузкаПоЗаданиюНаПеревозку = 
			ПолучитьСпособИАдресДоставкиПоРасходномуОрдеру(ДокРасходныйОрдерОбъект).СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз;
	
КонецПроцедуры

#КонецОбласти

#Область формирование

Функция ПолучитьРеквизиты() Экспорт
	
	// Возвращает реквизиты которые хранят инфу в базе

	Рекв = Новый Массив;
	Для Каждого Реквизит ИЗ Метаданные.РегистрыСведений.АТ_МаршрутДоставки.Измерения Цикл
		Рекв.Добавить(Новый Структура("Имя, Тип, Заголовок", 
			Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним));
	КонецЦикла;
		
	Для Каждого Реквизит ИЗ Метаданные.РегистрыСведений.АТ_МаршрутДоставки.Ресурсы Цикл
		Рекв.Добавить(Новый Структура("Имя, Тип, Путь, Заголовок", 
			Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним));
	КонецЦикла;
	
	Возврат Рекв;

КонецФункции

Процедура ЗаполнитьЭлементыПоШаблону(Форма, ЭлементРодитель, АдресНастроек, ДоступныеСпособыДоставки = Неопределено, ОбновитьЗначения = Истина) Экспорт

	// Иницилизирует объекты на форме объекта
	
	Суффикс = Суффикс();
	
	Настройки = ПолучитьИзВременногоХранилища(АдресНастроек);
	
	СоздатьРеквизиты(Форма, Настройки);
	СоздатьКоманды(Форма, Настройки);
	СоздатьЭлементы(Настройки.Элементы, Форма.Элементы, ЭлементРодитель);
	
	Если ДоступныеСпособыДоставки <> Неопределено Тогда
		ЭлементСпособДоставки = Форма.Элементы.Найти(Суффикс + "СпособДоставки");
		//ЭлементСпособДоставки.РежимВыбораИзСписка = Истина;
		ЭлементСпособДоставки.СписокВыбора.ЗагрузитьЗначения(ДоступныеСпособыДоставки);
	КонецЕсли;
	
	ЭлементСписокДоставок = Форма.Элементы.Найти(Суффикс + "Таблица");
	ЭлементСписокДоставок.УстановитьДействие("ПриАктивизацииСтроки", "ПриАктивизацииСтрокиДоставки");
	
	Форма.Элементы[Суффикс + "Отправитель"].СписокВыбора.ЗагрузитьЗначения(Форма.ПолучитьСписокОтправителей());
	Форма.Элементы[Суффикс + "Получатель"].СписокВыбора.ЗагрузитьЗначения(Форма.ПолучитьСписокПолучателей());
	Форма.Элементы[Суффикс + "ГруппаОтКудаКуда"].Видимость = Ложь; // отключаем откуда куда
	
	Если ОбновитьЗначения Тогда
		ПрочитатьНастройкиВТаблицу(Форма[Суффикс + "Таблица"], Форма.Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьПредставленияТаблицы(Форма[Суффикс + "Таблица"]);
		
КонецПроцедуры

Процедура СоздатьЭлементы(ЭлементыШаблона, ЭлементыФормы, ЭлементРодитель)
	
	Суффикс = Суффикс();
	
	ТипПолеФормы 	= Тип("ПолеФормы");
	ТипГруппаФормы 	= Тип("ГруппаФормы");
	ТипДекорация 	= Тип("ДекорацияФормы");
	ТипКнопка 		= Тип("КнопкаФормы");
	ТипТаблица		= Тип("ТаблицаФормы");
	
	Для Каждого Элемент Из ЭлементыШаблона Цикл
		
		РодительИмя = Элемент.Родитель;
		Если ПустаяСтрока(РодительИмя) Тогда
			Родитель = ЭлементРодитель;
		Иначе
			Родитель = ЭлементыФормы.Найти(Суффикс + РодительИмя);
		КонецЕсли;
		
		НовЭлемент = ЭлементыФормы.Добавить(Суффикс + Элемент.Имя, Элемент.Тип, Родитель);
		Если ТипЗнч(НовЭлемент) <> ТипТаблица Тогда
			НовЭлемент.Вид = Элемент.Вид;
		КонецЕсли;
		
		НовЭлемент.Заголовок 		= Элемент.Заголовок;
		
		Если Элемент.Тип = ТипТаблица Тогда
			
			НовЭлемент.ИзменятьПорядокСтрок 	= Элемент.ИзменятьПорядокСтрок;
			НовЭлемент.ИзменятьСоставСтрок 		= Элемент.ИзменятьСоставСтрок;
			НовЭлемент.Шапка 					= Элемент.Шапка;
			НовЭлемент.Отображение 				= Элемент.Отображение;
			НовЭлемент.ПутьКДанным 				= Суффикс + Элемент.ПутьКДанным;
			НовЭлемент.ВысотаВСтрокахТаблицы 	= Элемент.ВысотаВСтрокахТаблицы;
			НовЭлемент.ПоложениеКоманднойПанели = Элемент.ПоложениеКоманднойПанели;
			НовЭлемент.ЦветРамки 				= Элемент.ЦветРамки;
			НовЭлемент.РастягиватьПоВертикали	= Элемент.РастягиватьПоВертикали;
			НовЭлемент.ТолькоПросмотр 			= Элемент.ТолькоПросмотр;
			
		ИначеЕсли Элемент.Тип = ТипПолеФормы Тогда
			
			Если Элемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
				НовЭлемент.ВидПереключателя = Элемент.ВидПереключателя;
			ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
				
			Иначе
				НовЭлемент.Высота 					= Элемент.Высота;
				НовЭлемент.Ширина 					= Элемент.Ширина;
		
				НовЭлемент.МногострочныйРежим 		= Элемент.МногострочныйРежим;
				НовЭлемент.АвтоМаксимальнаяШирина 	= Элемент.АвтоМаксимальнаяШирина;
				
				НовЭлемент.КнопкаВыпадающегоСписка	= Элемент.КнопкаВыпадающегоСписка;
				НовЭлемент.КнопкаВыбора 			= Элемент.КнопкаВыбора;
				НовЭлемент.КнопкаОткрытия 			= Элемент.КнопкаОткрытия;
				НовЭлемент.КнопкаОткрытия 			= Элемент.КнопкаОткрытия;
				НовЭлемент.ОтображениеКнопкиВыбора 	= Элемент.ОтображениеКнопкиВыбора;
				НовЭлемент.РежимВыбораИзСписка		= Элемент.РежимВыбораИзСписка;
				
				НовЭлемент.УстановитьДействие("НачалоВыбора", 			"НачалоВыбораРеквизитаДоставки");
				НовЭлемент.УстановитьДействие("НачалоВыбораИзСписка", 	"НачалоВыбораИзСпискаРеквизитаДоставки");
				НовЭлемент.УстановитьДействие("Открытие", 				"ОткрытиеРеквизитаДоставки");
				НовЭлемент.УстановитьДействие("АвтоПодбор", 			"АвтоПодборРеквизитаДоставки");
				
			КонецЕсли;
			
			НовЭлемент.ПоложениеЗаголовка 		= Элемент.ПоложениеЗаголовка;
			НовЭлемент.ПутьКДанным 				= Суффикс + Элемент.ПутьКДанным;
			НовЭлемент.ТолькоПросмотр 			= Элемент.ТолькоПросмотр;
			
			НовЭлемент.УстановитьДействие("ПриИзменении", 			"ПриИзмененииРеквизитаДоставки");
			
		ИначеЕсли Элемент.Тип = ТипГруппаФормы Тогда
			
			НовЭлемент.ЦветФона 			= Элемент.ЦветФона;
			НовЭлемент.Объединенная 		= Элемент.Объединенная;
			НовЭлемент.Группировка 			= Элемент.Группировка;
			НовЭлемент.ОтображатьЗаголовок 	= Элемент.ОтображатьЗаголовок;
			
		ИначеЕсли Элемент.Тип = ТипДекорация Тогда
			
			НовЭлемент.Высота 					= Элемент.Высота;
			НовЭлемент.Ширина 					= Элемент.Ширина;
		 
			НовЭлемент.Гиперссылка 	= Элемент.Гиперссылка;
			НовЭлемент.АвтоМаксимальнаяШирина 	= Элемент.АвтоМаксимальнаяШирина;
			НовЭлемент.РастягиватьПоГоризонтали = Элемент.РастягиватьПоГоризонтали;
			НовЭлемент.Шрифт 					= Элемент.Шрифт;
		
			Если Элемент.Вид = ВидДекорацииФормы.Картинка Тогда
				НовЭлемент.Картинка 		= Элемент.Картинка;
				НовЭлемент.РазмерКартинки 	= Элемент.РазмерКартинки;
				НовЭлемент.ГоризонтальноеПоложениеВГруппе 	= Элемент.ГоризонтальноеПоложениеВГруппе;
			Иначе
				НовЭлемент.ГоризонтальноеПоложение 	= Элемент.ГоризонтальноеПоложение;
			КонецЕсли;
			
			Если НовЭлемент.Гиперссылка Тогда
				НовЭлемент.УстановитьДействие("Нажатие", "ПриНажатииНаДекорациюДоставки");
			КонецЕсли;
			
		ИначеЕсли Элемент.Тип = ТипКнопка Тогда
			
			НовЭлемент.Высота 				= Элемент.Высота;
			НовЭлемент.Ширина 				= Элемент.Ширина;
			
		 	НовЭлемент.ЦветФона 			= Элемент.ЦветФона;
			НовЭлемент.Фигура 				= Элемент.Фигура;
			НовЭлемент.ОтображениеФигуры 	= Элемент.ОтображениеФигуры;
			НовЭлемент.ИмяКоманды = Суффикс + Элемент.ИмяКоманды;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Процедура СоздатьРеквизиты(Форма, Настройки)
	
	Суффикс = Суффикс();
	
	НовРеквизиты = Новый Массив;
	Для Каждого Реквизит Из Настройки.Реквизиты Цикл
		НовРеквизиты.Добавить(Новый РеквизитФормы(Суффикс + Реквизит.Имя, Реквизит.Тип,,Реквизит.Заголовок));
	КонецЦикла;
	
	НовРеквизиты.Добавить(Новый РеквизитФормы(Суффикс + "ТекущийИндекс", 	Новый ОписаниеТипов("Число")));
	НовРеквизиты.Добавить(Новый РеквизитФормы(Суффикс + "Таблица", 			Новый ОписаниеТипов("ТаблицаЗначений")));
	Для Каждого Реквизит Из Настройки.Реквизиты Цикл
		НовРеквизиты.Добавить(Новый РеквизитФормы(Реквизит.Имя, Реквизит.Тип, Суффикс + "Таблица"));
	КонецЦикла;
	НовРеквизиты.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), Суффикс + "Таблица")); // это видимый курсор
	
	НовРеквизиты.Добавить(Новый РеквизитФормы(Суффикс + "стИндекс",			Новый ОписаниеТипов("Число")));
	
	Форма.ИзменитьРеквизиты(НовРеквизиты);
	Форма[Суффикс + "стИндекс"] = -1;
	
КонецПроцедуры
Процедура СоздатьКоманды(Форма, Настройки)
	
	Суффикс = Суффикс(); 
	
	Для Каждого Команда Из Настройки.Команды Цикл
		НовКоманда = Форма.Команды.Добавить(Суффикс + Команда.Имя);
		ЗаполнитьЗначенияСвойств(НовКоманда, Команда);
		НовКоманда.Действие = "НажатиеНаКнопкуДоставки";
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначенияПоУмолчаниюДляНовойСтроки() Экспорт
	
	Возврат Новый Структура("СпособДоставки", Перечисления.СпособыДоставки.ДоКлиента);
	
КонецФункции

#КонецОбласти

Функция ПолучитьВремяРаботыВЭтотДень(Объект, Дата) Экспорт
	
	Возврат РегистрыСведений.АТ_ГрафикРаботы.ПолучитьВремяРаботыДня(Объект, Дата);
	
КонецФункции

Функция ПолучитьТекстДоставкиПоСкладуИФормыОплаты(Склад, ФормаОплаты) Экспорт
	
	стр = "<<Наличный расчёт -> 309-91-91 (доб. 104), Людмила Шевчук>>";
	
	Если 	ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
			Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("092ec94e-15f4-11e5-80cc-00155dfa1a02")) Тогда // Это склад Краснодар
			
		стр = "<<Наличный расчёт -> 309-91-91 (доб. 603), Вадим Новак>>";
		
	КонецЕсли;
		
	Возврат стр;
	
КонецФункции

Функция ОпределитьРеквизитыФормы(ОбъектСсылка, ИмяРеквизита) Экспорт
	
	Возврат ОбъектСсылка[ИмяРеквизита];
	
КонецФункции


Процедура АТ_ХранительБазы() Экспорт // Времено процедура тут потом перенести надо будет в АТ_Сервер когда освободится
	
	Справочники.АТ_ЗаданияХранителя.ВыполнитьВсеЗадания();
	
КонецПроцедуры
