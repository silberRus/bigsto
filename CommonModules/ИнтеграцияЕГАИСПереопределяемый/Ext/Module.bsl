
#Область ПрограммныйИнтерфейс

// Процедура вызывается перед записью организации в базу.
//
// Параметры:
//  Организация - СправочникОбъект.КлассификаторОрганизацийЕГАИС - загружаемая организация.
//
Процедура ПриЗагрузкеОрганизации(Организация) Экспорт
	
	//++ НЕ ЕГАИС
	Если ЗначениеЗаполнено(Организация.ИНН) И Не Организация.Сопоставлено Тогда
		РезультатПоиска = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(Организация.ИНН, Организация.КПП);
		
		Если ЗначениеЗаполнено(РезультатПоиска) Тогда
			
			Организация.Контрагент     = РезультатПоиска.Ссылка;
			Организация.ТорговыйОбъект = РезультатПоиска.Партнер;
			Организация.Сопоставлено   = Истина;
			
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке ТТН (перед записью).
//
// Параметры:
//  ТТН_Объект - ДокументОбъект.ТТНВходящаяЕГАИС - загружаемая ТТН.
//
Процедура ПриЗагрузкеТТНВходящаяЕГАИС(ТТНВходящаяОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	// Заполнение склада и организации
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНВходящаяОбъект.Грузополучатель, "Контрагент, ТорговыйОбъект");
	
	ТТНВходящаяОбъект.Организация = РеквизитыОрганизацииЕГАИС.Контрагент;
	ТТНВходящаяОбъект.ТорговыйОбъект = РеквизитыОрганизацииЕГАИС.ТорговыйОбъект;
	
	// Заполнение документа основания
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИС.Ссылка            КАК Ссылка,
	|	ТТНИсходящаяЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Идентификатор = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", ТТНВходящаяОбъект.Идентификатор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТТНИсходящая = Неопределено;
	
	Если Выборка.Следующий() Тогда
		ТТНИсходящая = Выборка.Ссылка;
		Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			ТТНВходящаяОбъект.ДокументОснование = Выборка.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение серий
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(ТТНВходящаяОбъект, Документы.ТТНВходящаяЕГАИС);;
	
	Если ЗначениеЗаполнено(ТТНВходящаяОбъект.ДокументОснование) Тогда // скопировать ТЧ из ТТНИсходящая
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки                   КАК НомерСтроки,
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция          КАК АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура                  КАК Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Характеристика                КАК Характеристика,
		|	ТТНИсходящаяЕГАИСТовары.Серия                         КАК Серия,
		|	ТТНИсходящаяЕГАИСТовары.ИдентификаторУпаковки         КАК ИдентификаторУпаковки,
		|	ТТНИсходящаяЕГАИСТовары.Количество                    КАК Количество,
		|	ТТНИсходящаяЕГАИСТовары.Сумма                         КАК Сумма,
		|	ТТНИсходящаяЕГАИСТовары.Цена                          КАК Цена,
		|	ТТНИсходящаяЕГАИСТовары.НомерПартии                   КАК НомерПартии,
		|	ТТНИсходящаяЕГАИСТовары.Справка2.РегистрационныйНомер КАК НомерСправки2Поставщика
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
		|ГДЕ
		|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка
		|";
		Запрос.УстановитьПараметр("Ссылка", ТТНИсходящая);
		Результат = Запрос.Выполнить();
		
		ТаблицаТТН = ТТНВходящаяОбъект.Товары.Выгрузить(, "НомерСправки2Поставщика,ИдентификаторСтроки,Справка2");
		
		ТТНВходящаяОбъект.Товары.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаТТН Из ТаблицаТТН Цикл
			СтруктураПоиска = Новый Структура("НомерСправки2Поставщика", СтрокаТТН.НомерСправки2Поставщика);
			СтрокиТовары = ТТНВходящаяОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				СтрокаТовары.ИдентификаторСтроки = СтрокаТТН.ИдентификаторСтроки;
				СтрокаТовары.Справка2            = СтрокаТТН.Справка2;
			КонецЦикла;
		КонецЦикла;
		
	Иначе // сгенерировать новые серии
		
		ПараметрыЗаполнения = ПараметрыЗаполненияСерий();
		ПараметрыЗаполнения.ОрганизацияЕГАИС = ТТНВходящаяОбъект.Грузополучатель;
		ПараметрыЗаполнения.ЗаполнятьБезЗапросаСправок = Истина;
		ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
		
		СобственныйТорговыйОбъектЗначениеПоУмолчанию = "";
		ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(, СобственныйТорговыйОбъектЗначениеПоУмолчанию);
		
		Если ТипЗнч(ТТНВходящаяОбъект.ТорговыйОбъект) = ТипЗнч(СобственныйТорговыйОбъектЗначениеПоУмолчанию) Тогда
			ЗаполнитьПараметрЗаполненияСклад(ТТНВходящаяОбъект, ПараметрыЗаполнения);
		КонецЕсли;
		
		Результат = ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьСгенерироватьСерии(
			ТТНВходящаяОбъект.Товары,
			Неопределено,
			ПараметрыЗаполнения);
			
	КонецЕсли;
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ТТНВходящаяОбъект, ПараметрыУказанияСерий);
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке акта подтверждения ТТН.
//
// Параметры:
//  ТТН_Объект - ДокументОбъект.ТТНИсходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтТТН - Булево - признак загрузки акта отказа от ТТН,
//  ЕстьРасхождения - Булево - признак загрузки акта расхождений.
//
Процедура ПриЗагрузкеАктаПодтвержденияТТН(ТТН_Объект, ОтказОтТТН, ЕстьРасхождения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке подтверждения акта расхождений ТТН.
//
// Параметры:
//  ТТН - ДокументСсылка.ТТНВходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтАкта - Булево - признак загрузки отказа от акта расхождений ТТН,
//
Процедура ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(ТТН, ОтказОтАкта) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при определении настроек обмена с УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные транспортного модуля.
//
Процедура ПриПолученииНастроекУТМ(ТранспортныйМодуль) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при отказе от входящей ТТН. Нужно реализовать алгоритм отмены проведения связанных поступлений.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
Процедура ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ДокументСсылка) Экспорт
	
	//++ НЕ ЕГАИС
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументПоступления");
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		ДокументПоступленияОбъект = ДокументПоступления.ПолучитьОбъект();
		
		Если ДокументПоступленияОбъект.Проведен Тогда
			ДокументПоступленияОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокументПоступленияОбъект.Записать();
		КонецЕсли;
		
		ДокументПоступленияОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Возвращает таблицу расхождений между входящей ТТН и документом поступления товаров.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица расхождений с колонками:
//   * АлкогольнаяПродукция,
//   * Справка2,
//   * Количество,
//   * КоличествоФакт,
//   * Расхождение,
//   * ИдентификаторСтроки.
//
Функция ТаблицаРасхожденийТТН_ЕГАИС(ДокументСсылка) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АлкогольнаяПродукция");
	Результат.Колонки.Добавить("Справка2");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("КоличествоФакт");
	Результат.Колонки.Добавить("Расхождение");
	Результат.Колонки.Добавить("ИдентификаторСтроки");
	
	//++ НЕ ЕГАИС
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕГАИСТовары.Ссылка,
	|	ЕГАИСТовары.ИдентификаторСтроки,
	|	ЕГАИСТовары.АлкогольнаяПродукция,
	|	ЕГАИСТовары.Номенклатура,
	|	ЕГАИСТовары.Характеристика,
	|	ЕГАИСТовары.Серия,
	|	ЕГАИСТовары.Количество,
	|	ЕГАИСТовары.Справка2
	|ПОМЕСТИТЬ ТаблицаТоварыТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ЕГАИСТовары
	|ГДЕ
	|	ЕГАИСТовары.Ссылка = &СсылкаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ЕСТЬNULL(ТабличнаяЧасть.Количество,ЕСТЬNULL(ТабличнаяЧастьСерии.Количество,0))
	|	* ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ЕСТЬNULL(ТабличнаяЧасть.Номенклатура.ОбъемДАЛ, ЕСТЬNULL(ТабличнаяЧастьСерии.Номенклатура.ОбъемДАЛ,0))
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыПоступления
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТабличнаяЧасть
	|		ПО ТабличнаяЧасть.Ссылка = ТТНВходящаяЕГАИС.Ссылка.ДокументОснование
	|			И ТабличнаяЧасть.Номенклатура = ТТНВходящаяЕГАИС.Номенклатура
	|			И ТабличнаяЧасть.Характеристика = ТТНВходящаяЕГАИС.Характеристика
	|			И ТабличнаяЧасть.Серия = ТТНВходящаяЕГАИС.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Серии КАК ТабличнаяЧастьСерии
	|		ПО ТабличнаяЧастьСерии.Ссылка = ТТНВходящаяЕГАИС.Ссылка.ДокументОснование
	|			И ТабличнаяЧастьСерии.Номенклатура = ТТНВходящаяЕГАИС.Номенклатура
	|			И ТабличнаяЧастьСерии.Характеристика = ТТНВходящаяЕГАИС.Характеристика
	|			И ТабличнаяЧастьСерии.Серия = ТТНВходящаяЕГАИС.Серия
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ЕСТЬNULL(ТабличнаяЧасть.Ссылка.Проведен, ТабличнаяЧастьСерии.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ЕСТЬNULL(ТабличнаяЧасть.Количество,ЕСТЬNULL(ТабличнаяЧастьСерии.Количество,0))
	|	* ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ЕСТЬNULL(ТабличнаяЧасть.Номенклатура.ОбъемДАЛ, ЕСТЬNULL(ТабличнаяЧастьСерии.Номенклатура.ОбъемДАЛ,0))
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТабличнаяЧасть
	|		ПО ТабличнаяЧасть.Ссылка = ТТНВходящаяЕГАИС.Ссылка.ДокументОснование
	|			И ТабличнаяЧасть.Номенклатура = ТТНВходящаяЕГАИС.Номенклатура
	|			И ТабличнаяЧасть.Характеристика = ТТНВходящаяЕГАИС.Характеристика
	|			И ТабличнаяЧасть.Серия = ТТНВходящаяЕГАИС.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Серии КАК ТабличнаяЧастьСерии
	|		ПО ТабличнаяЧастьСерии.Ссылка = ТТНВходящаяЕГАИС.Ссылка.ДокументОснование
	|			И ТабличнаяЧастьСерии.Номенклатура = ТТНВходящаяЕГАИС.Номенклатура
	|			И ТабличнаяЧастьСерии.Характеристика = ТТНВходящаяЕГАИС.Характеристика
	|			И ТабличнаяЧастьСерии.Серия = ТТНВходящаяЕГАИС.Серия
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ЕСТЬNULL(ТабличнаяЧасть.Ссылка.Проведен, ТабличнаяЧастьСерии.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ЕСТЬNULL(ТабличнаяЧасть.Количество,0)
	|	* ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ЕСТЬNULL(ТабличнаяЧасть.Номенклатура.ОбъемДАЛ, 0)
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТабличнаяЧасть
	|		ПО ТабличнаяЧасть.Ссылка = ТТНВходящаяЕГАИС.Ссылка.ДокументОснование
	|			И ТабличнаяЧасть.Номенклатура = ТТНВходящаяЕГАИС.Номенклатура
	|			И ТабличнаяЧасть.Характеристика = ТТНВходящаяЕГАИС.Характеристика
	|			И ТабличнаяЧасть.Серия = ТТНВходящаяЕГАИС.Серия
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ЕСТЬNULL(ТабличнаяЧасть.Ссылка.Проведен, ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ЕСТЬNULL(ТабличнаяЧасть.Количество,0)
	|	* ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ЕСТЬNULL(ТабличнаяЧасть.Номенклатура.ОбъемДАЛ, 0)
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТабличнаяЧасть
	|		ПО ТабличнаяЧасть.Ссылка = ТТНВходящаяЕГАИС.Ссылка.ДокументОснование
	|			И ТабличнаяЧасть.Номенклатура = ТТНВходящаяЕГАИС.Номенклатура
	|			И ТабличнаяЧасть.Характеристика = ТТНВходящаяЕГАИС.Характеристика
	|			И ТабличнаяЧасть.Серия = ТТНВходящаяЕГАИС.Серия
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ЕСТЬNULL(ТабличнаяЧасть.Ссылка.Проведен, ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
	|ПОМЕСТИТЬ ВтТоварыТТН
	|ИЗ
	|	ТаблицаТоварыТТН КАК ТабличнаяЧасть
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ВтТоварыТТН.АлкогольнаяПродукция,
	|	ВтТоварыТТН.Количество - ЕСТЬNULL(ВтТоварыПоступления.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ ВТРасхождения
	|ИЗ
	|	ВтТоварыТТН КАК ВтТоварыТТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыПоступления КАК ВтТоварыПоступления
	|		ПО (ВтТоварыПоступления.АлкогольнаяПродукция = ВтТоварыТТН.АлкогольнаяПродукция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ТаблицаТоварыТТН.Ссылка               КАК Ссылка,
	|	ТаблицаТоварыТТН.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ТаблицаТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТоварыТТН.Количество           КАК Количество,
	|	0                                     КАК КоличествоФакт,
	|	ЕСТЬNULL(ВТРасхождения.Количество,0)  КАК Расхождение,
	|	ТаблицаТоварыТТН.Справка2             КАК Справка2
	|ИЗ
	|	ТаблицаТоварыТТН КАК ТаблицаТоварыТТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасхождения КАК ВТРасхождения
	|		ПО (ТаблицаТоварыТТН.АлкогольнаяПродукция = ВТРасхождения.АлкогольнаяПродукция)
	|УПОРЯДОЧИТЬ ПО
	|	Расхождение,
	|	АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	ВТРасхождения.АлкогольнаяПродукция,
	|	ВТРасхождения.Количество
	|ИЗ
	|	ВТРасхождения КАК ВТРасхождения";
	
	Запрос.УстановитьПараметр("СсылкаТТН", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураПоиска = Новый Структура("АлкогольнаяПродукция");
	
	ТаблицаРасхождения = Результат[5].Выгрузить();
	ТаблицаТоварыТТН = Результат[4].Выгрузить();
	
	Для каждого СтрокаТоварыТТН Из ТаблицаТоварыТТН Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоварыТТН);
		
		НайденныеСтроки = ТаблицаРасхождения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТоварыТТН.КоличествоФакт = СтрокаТоварыТТН.Количество;
			Продолжить;
		КонецЕсли;
		
		СтрокаРасхождения = НайденныеСтроки.Получить(0);
		КоличествоФакт = 0;
		
		Если СтрокаТоварыТТН.Количество >= СтрокаРасхождения.Количество Тогда
			КоличествоФакт = СтрокаТоварыТТН.Количество - СтрокаРасхождения.Количество;
		КонецЕсли;
		
		СтрокаТоварыТТН.КоличествоФакт = КоличествоФакт;
		
		СтрокаРасхождения.Количество = СтрокаРасхождения.Количество - СтрокаТоварыТТН.Количество;
		
		Если СтрокаРасхождения.Количество <= 0 Тогда
			ТаблицаРасхождения.Удалить(СтрокаРасхождения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаТоварыТТН;
	//-- НЕ ЕГАИС
	
	Возврат Результат;
	
КонецФункции

// Заполняет таблицу штрихкодов алкогольной продукции входящей ТТН.
//
// Параметры:
//  ДокументСсылка     - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//  ЗаполняемаяТаблица - ДанныеФормыКоллеция - заполняемая таблица.
//
Процедура ЗаполнитьТаблицуШтрихкодовНеМаркируемойПродукцииТТН_ЕГАИС(ДокументСсылка, ЗаполняемаяТаблица) Экспорт

	//++ НЕ ЕГАИС
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатуры.Штрихкод              КАК Штрихкод,
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТТНВходящаяЕГАИСТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ТТНВходящаяЕГАИСТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И (ТТНВходящаяЕГАИСТовары.Номенклатура.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.Упаковка
	|				ИЛИ ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	|	И НЕ ВидыАлкогольнойПродукции.Маркируемый";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ЗаполняемаяТаблица.Загрузить(Запрос.Выполнить().Выгрузить());
	//-- НЕ ЕГАИС
	
КонецПроцедуры

// Заполняет таблицу сопоставленных справок 2 документа документа ТТН входящая.
//
// Параметры:
//  ДокументСсылка     - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//  ЗаполняемаяТаблица - ДанныеФормыКоллеция - заполняемая таблица.
//
Процедура ЗаполнитьТаблицуСопоставленныхСправок2ТТН_ЕГАИС(ДокументСсылка, ЗаполняемаяТаблица) Экспорт
	
	//++ НЕ ЕГАИС
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИСТовары.Справка2 КАК Справка2,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	|	И ТТНВходящаяЕГАИСТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТТНВходящаяЕГАИСТовары.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ЗаполняемаяТаблица.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//-- НЕ ЕГАИС
	
КонецПроцедуры

// Получить представление валюты регламентированного учета.
// 
// Возвращаемое значение:
//  Строка - Представление валюты.
//
Функция ПредставлениеВалютыРегламентированногоУчета() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Получить представление документа поступления.
//
// Параметры:
//  Номер - Строка - номер документа поступления,
//  Дата - Дата - дата документа поступления.
// 
// Возвращаемое значение:
//  Строка - представление документа поступления.
//
Функция ПредставлениеДокументаПоступления(Номер, Дата) Экспорт
	
	//++ НЕ ЕГАИС
	СтруктураШапки = Новый Структура;
	СтруктураШапки.Вставить("Дата", Дата);
	СтруктураШапки.Вставить("Номер", Номер);
	
	Возврат СтрШаблон(
		НСтр("ru='Приобретение товаров %1'"),
		ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(СтруктураШапки));
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// В функции нужно реализовать алгоритм получения данных документа поступления.
//
// Параметры:
//  ДокументПоступления - ДокументСсылка - ссылка на документ поступления товаров.
// 
// Возвращаемое значение:
//  Структура - данные поступления. Структура со свойствами:
//   * ТекстПоступлениеТоваров - Строка - представление документа поступления товаров и услуг,
//   * ПоступлениеТоваровУслуг - ДокументСсылка - ссылка на документ поступления товаров и услуг.
//
Функция ДанныеДокументаПоступления(ДокументПоступления) Экспорт
	
	//++ НЕ ЕГАИС
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления, "Ссылка, Номер, Дата", Истина);
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		ТекстПоступлениеТоваров = ИнтеграцияЕГАИСПереопределяемый.ПредставлениеДокументаПоступления(Реквизиты.Номер, Реквизиты.Дата);
		ПоступлениеТоваровУслуг = Реквизиты.Ссылка;
	Иначе
		ТекстПоступлениеТоваров = "";
		ПоступлениеТоваровУслуг = Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстПоступлениеТоваров", ТекстПоступлениеТоваров);
	ВозвращаемоеЗначение.Вставить("ПоступлениеТоваровУслуг", ПоступлениеТоваровУслуг);
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет наличие расхождений между ТТН и товарами накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН,
//  ДокументПоступления - ДокументСсылка - проверяемое поступление товаров.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияМеждуДокументомПоступленияИТТНЕГАИС(ДокументСсылка, ДокументПоступления) Экспорт
	
	//++ НЕ ЕГАИС
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Возврат ИнтеграцияЕГАИСУТ.ЕстьРасхожденияМеждуДокументомПеремещениеТоваровИТТНЕГАИС(ДокументСсылка, ДокументПоступления);
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Возврат ИнтеграцияЕГАИСУТ.ЕстьРасхожденияМеждуДокументомПриобретениеТоваровУслугИТТНЕГАИС(ДокументСсылка, ДокументПоступления);
	КонецЕсли;
	//-- НЕ ЕГАИС
	
КонецФункции

// Получить представление номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на номенклатуру,
//  ХарактеристикаНоменклатуры - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка - ОпределяемыйТип.Упаковка - ссылка на упаковку.
// 
// Возвращаемое значение:
//  Строка - представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Упаковка) Экспорт
	
	//++ НЕ ЕГАИС
	Возврат НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		Строка(Номенклатура),
		Строка(ХарактеристикаНоменклатуры),
		Упаковка);
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает текст запроса списка распоряжений на оформление документа передача в регистр №2 ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСпискаРаспоряженийНаОформлениеДокументаПередачаВРегистр2ЕГАИС() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 КАК Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток КАК КПередаче
	|ПОМЕСТИТЬ
	|	ВТОстатки
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(,
	|		ОрганизацияЕГАИС.ТорговыйОбъект.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|	) КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток > 0;
	|	
	|ВЫБРАТЬ
	|	АкцизныеМарки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМарки.Справка2 КАК Справка2,
	|	КОЛИЧЕСТВО(АкцизныеМарки.АкцизнаяМарка) КАК Количество
	|ПОМЕСТИТЬ
	|	АкцизныеМарки
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстатки КАК втОстатки
	|		ПО	ВтОстатки.Справка2 = АкцизныеМарки.Справка2
	|			И ВтОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС
	|ГДЕ
	|	АкцизныеМарки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии),ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс))
	|СГРУППИРОВАТЬ ПО
	|	АкцизныеМарки.ОрганизацияЕГАИС,
	|	АкцизныеМарки.Справка2;
	|	
	|ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция                              КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2                                          КАК Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС                                  КАК ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.КПередаче - ЕСТЬNULL(АкцизныеМарки.Количество, 0) КАК КПередаче
	|ИЗ
	|	ВТОстатки КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ АкцизныеМарки КАК АкцизныеМарки
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 = АкцизныеМарки.Справка2
	|			И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС
	|ГДЕ
	|	(ОстаткиАлкогольнойПродукцииЕГАИСОстатки.КПередаче - ЕСТЬNULL(АкцизныеМарки.Количество, 0)) > 0
	|";

	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для движений по регистру Серии номенклатуры.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДвижениеСерийТоваров(ИмяТаблицы) Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура                                     КАК Номенклатура,
	|	ТаблицаСерии.Характеристика                                   КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                  КАК Назначение,
	|	ТаблицаСерии.Серия                                            КАК Серия,
	|	ТаблицаСерии.Количество                                       КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСЕГАИС) КАК СкладскаяОперация,
	|	&Ссылка                                                       КАК Документ,
	|	&Период                                                       КАК Период,
	|	&Ссылка                                                       КАК Регистратор,
	|	ЛОЖЬ                                                          КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.%ИмяТаблицы%.Товары КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает имя формы рабочего места по оформлению входящих ТТН.
// 
// Возвращаемое значение:
//  Строка - имя формы.
//
Функция ИмяФормыРабочегоМестаПоОформлениюДокументаТТНВходящаяЕГАИС() Экспорт
	
	ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСписка";
	
	//++ НЕ ЕГАИС
	ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.РабочееМесто";
	//-- НЕ ЕГАИС
	
	Возврат ИмяФормы;
	
КонецФункции

// Получить количество возможных документов поступления товаров для сопоставления.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект,
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - поставщик.
// 
// Возвращаемое значение:
//  Число - количество документов.
//
Функция ПолучитьКоличествоВозможныхДокументовПоступленияТоваров(Организация, ТорговыйОбъект, Контрагент) Экспорт
	
	КоличествоНакладных = 0;
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ТТНВходящаяЕГАИС.ДокументОснование = ПриобретениеТоваровУслуг.Ссылка
	|ГДЕ
	|	НЕ ПриобретениеТоваровУслуг.ПометкаУдаления
	|	И ПриобретениеТоваровУслуг.ЕстьАлкогольнаяПродукция
	|	И ПриобретениеТоваровУслуг.Организация = &Организация
	|	И ПриобретениеТоваровУслуг.Склад = &Склад
	|	И ПриобретениеТоваровУслуг.Контрагент = &ПоставщикКонтрагент
	|	И ТТНВходящаяЕГАИС.Ссылка ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Склад",               ТорговыйОбъект);
	Запрос.УстановитьПараметр("ПоставщикКонтрагент", Контрагент);
	
	КоличествоНакладных = Запрос.Выполнить().Выгрузить().Количество();
	//-- НЕ ЕГАИС
	
	Возврат КоличествоНакладных;
	
КонецФункции

// Возвращает признак разрешения розничной продажи без сопоставления с классификатором ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - если Истина, продажа разрешена, иначе - Ложь.
//
Функция РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС() Экспорт
	
	//++ НЕ ЕГАИС
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС.Получить();
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ЕГАИС
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктПостановкиНаБалансЕГАИС") Тогда
		ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
		ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Если ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1 Тогда
			Документы.АктСписанияЕГАИС.ПодобратьСправки2(ДокументОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") Тогда
		ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Документы.ТТНИсходящаяЕГАИС.ПодобратьСправки2(ДокументОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("ЗаполнитьТоварыКОформлению") Тогда
			
			ДокументОбъект.ОрганизацияЕГАИС = ДанныеЗаполнения.ОрганизацияЕГАИС;
			
			ТаблицаТовары = Новый ТаблицаЗначений;
			ТаблицаТовары.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
			ТаблицаТовары.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
			ТаблицаТовары.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
			
			Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Товары Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), СтрокаТЧ);
			КонецЦикла;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
			|	Т.Справка2 КАК Справка2,
			|	Т.Количество КАК Количество
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	&Товары КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
			|	Т.Справка2 КАК Справка2,
			|	СУММА(Т.Количество) КАК Количество
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	втТовары КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.АлкогольнаяПродукция,
			|	Т.Справка2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
			|	ТабличнаяЧасть.Справка2 КАК Справка2,
			|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура,
			|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Характеристика) КАК Характеристика
			|ПОМЕСТИТЬ СопоставленыеПозиции
			|ИЗ
			|	Товары КАК ТабличнаяЧасть
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
			|		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ТабличнаяЧасть.АлкогольнаяПродукция)
			|			И (СоответствиеНоменклатурыЕГАИС.Справка2 = ТабличнаяЧасть.Справка2)
			|ГДЕ
			|	НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ТабличнаяЧасть.АлкогольнаяПродукция,
			|	ТабличнаяЧасть.Справка2
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Номенклатура) = 1 И
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Характеристика) < 2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СопоставленыеПозиции.Номенклатура КАК Номенклатура,
			|	СопоставленыеПозиции.Характеристика КАК Характеристика,
			|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
			|	ТабличнаяЧасть.Справка2 КАК Справка2,
			|	ВЫБОР
			|		КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(СопоставленыеПозиции.Номенклатура.ОбъемДАЛ, 1) <> 0
			|						ТОГДА ТабличнаяЧасть.Количество / ЕСТЬNULL(СопоставленыеПозиции.Номенклатура.ОбъемДАЛ, 1)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ ТабличнаяЧасть.Количество
			|	КОНЕЦ КАК Количество,
			|	ВЫБОР
			|		КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(СопоставленыеПозиции.Номенклатура.ОбъемДАЛ, 1) <> 0
			|						ТОГДА ТабличнаяЧасть.Количество / ЕСТЬNULL(СопоставленыеПозиции.Номенклатура.ОбъемДАЛ, 1)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ ТабличнаяЧасть.Количество
			|	КОНЕЦ КАК КоличествоУпаковок
			|ИЗ
			|	Товары КАК ТабличнаяЧасть
			|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
			|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = СопоставленыеПозиции.АлкогольнаяПродукция
			|			И ТабличнаяЧасть.Справка2 = СопоставленыеПозиции.Справка2
			|			И (НЕ СопоставленыеПозиции.АлкогольнаяПродукция ЕСТЬ NULL)");
			Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Товары.Добавить(), Выборка);
			КонецЦикла;
			
		Иначе
			
			ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
			Документы.ПередачаВРегистр2ЕГАИС.ПодобратьСправки2(ДокументОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратИзРегистра2ЕГАИС") Тогда
		ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Документы.ВозвратИзРегистра2ЕГАИС.ПодобратьСправки2(ДокументОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИС") Тогда
		ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИСВозврат") Тогда
		ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтатусПроверкиИПодбора", ДокументОбъект.Метаданные()) Тогда
		ДокументОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.НеВыполнялось;
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	//++ НЕ ЕГАИС
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктПостановкиНаБалансЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратИзРегистра2ЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗапросАкцизныхМарокЕГАИС") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТТНВходящаяЕГАИС") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект,
													НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ТТНВходящаяЕГАИС),
													Отказ,
													МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") Тогда
		
		СтатусЕГАИС = Неопределено;
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтатусыДокументовЕГАИС.Статус КАК Статус
			|ИЗ
			|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
			|ГДЕ
			|	СтатусыДокументовЕГАИС.Документ = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтатусЕГАИС = Выборка.Статус;
			КонецЕсли;
			
		КонецЕсли;
		
		РедактированиеФормыДоступно = СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик
		                            Или СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи
		                            Или СтатусЕГАИС = Неопределено;
		
		Если РедактированиеФормыДоступно Тогда
			
			КлючевыеРеквизитыТабличнойЧасти = Новый Массив;
			КлючевыеРеквизитыТабличнойЧасти.Добавить("АлкогольнаяПродукция");
			КлючевыеРеквизитыТабличнойЧасти.Добавить("Справка2");
			ОбщегоНазначенияУТ.ПроверитьНаличиеДублейСтрокТЧ(
				ДокументОбъект,
				"Товары",
				КлючевыеРеквизитыТабличнойЧасти,
				Отказ,,
				Ложь);
			
			ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
			
			НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковок");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИСВозврат") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("СправочникОбъект.ШтрихкодыУпаковокТоваров") Тогда
		
		ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		Если Не ИспользоватьХарактеристики Или Не Справочники.Номенклатура.ХарактеристикиИспользуются(ДокументОбъект.Номенклатура) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	//++ НЕ ЕГАИС
	ДокументОбъект.ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Новый Массив);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ДокументОбъект, Отказ);
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ НЕ ЕГАИС
	Если ДокументОбъект.ЭтоНовый() Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтатусПроверкиИПодбора", ДокументОбъект.Метаданные())
			И НЕ ЗначениеЗаполнено(ДокументОбъект.СтатусПроверкиИПодбора) Тогда
			ДокументОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.НеВыполнялось;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТТНВходящаяЕГАИС") Тогда
		Если ДокументОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Завершено Тогда
			
			ЕстьРасхождения    = Ложь;
			ТоварыКоличество   = ДокументОбъект.Товары.Количество();
			ИндексСтрокиТовары = 0;
			
			Пока НЕ ЕстьРасхождения И (ИндексСтрокиТовары < ТоварыКоличество) Цикл
				СтрокаТовары = ДокументОбъект.Товары[ИндексСтрокиТовары];
				ЕстьРасхождения = (СтрокаТовары.Количество <> СтрокаТовары.КоличествоФакт);
				ИндексСтрокиТовары = ИндексСтрокиТовары + 1;
			КонецЦикла;
			
			ДокументОбъект.ЕстьРасхождения = ЕстьРасхождения;
			
		Иначе
			
			ДокументОбъект.ЕстьРасхождения = Ложь;
			
		КонецЕсли;
		
		НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект, 
							НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ТТНВходящаяЕГАИС));
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Проверяет возможность использования регистр №2 для организации.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - ссылка на организацию в классификаторе ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - Истина, если для организации можно использовать регистр №2.
//
Функция ИспользоватьРегистр2(ОрганизацияЕГАИС) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОрганизацииЕГАИС.ТорговыйОбъект.ТипСклада КАК ТипСклада
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК ОрганизацииЕГАИС
	|		ПО ОрганизацииЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	ОрганизацииЕГАИС.Ссылка = &ОрганизацияЕГАИС
	|");
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин");
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Записывает соответствие между номенклатурой и классификатором ЕГАИС из табличной части документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, содержащий табличную часть Товары.
//  ИменаДопКолонок - Строка - Дополнительные колонки для сопоставления.
//  ЗаписыватьСправку2 - Булево - признак сопоставления по справке 2.
//  СопоставлятьПоИдентификаторуУпаковки - Булево - признак сопоставления по идентификатору.
//
Процедура ЗаписатьСоответствиеНоменклатуры(ДокументОбъект, ЗаписыватьСправку2 = Ложь, СопоставлятьПоИдентификаторуУпаковки = Ложь, СопоставлятьПоСерии = Истина) Экспорт
	
	//++ НЕ ЕГАИС
	РозничныеПродажи.СопоставитьАлкогольнуюПродукциюСНоменклатурой(ДокументОбъект,
		"АлкогольнаяПродукция",
		ЗаписыватьСправку2,
		СопоставлятьПоИдентификаторуУпаковки,
		СопоставлятьПоСерии);
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет таблицу данными о действующих лицензиях на продажу алкогольной продукции.
//
// Параметры:
//  ТаблицаЛицензий - ТаблицаЗначений - таблица для заполнения. Колонки:
//   * Лицензиат     - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - контрагент, для которого нужно получить лицензию,
//   * ДатаТТН       - Дата - дата документа, на которую нужно получить действующую лицензию,
//   * Наименование  - Строка - представление лицензии,
//   * ДатаНачала    - Дата - дата начала действия лицензии,
//   * ДатаОкончания - Дата - дата окончания действия лицензии,
//   * КемВыдана     - Строка - наименование организации, выдавшей лицензию.
//
Процедура ЗаполнитьТаблицуЛицензийНаАлкоголь(ТаблицаЛицензий) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЛицензий", ТаблицаЛицензий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицензий.Лицензиат КАК Лицензиат,
	|	ТаблицаЛицензий.ДатаТТН КАК ДатаТТН
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ТаблицаЛицензий КАК ТаблицаЛицензий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.Лицензиат КАК Лицензиат,
	|	ИсходныеДанные.ДатаТТН КАК ДатаТТН,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ ДатыОкончанияЛицензий
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ИсходныеДанные.Лицензиат = ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|			И (ИсходныеДанные.ДатаТТН МЕЖДУ ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала И ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Лицензиат,
	|	ИсходныеДанные.ДатаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыОкончанияЛицензий.Лицензиат КАК Лицензиат,
	|	ДатыОкончанияЛицензий.ДатаТТН КАК ДатаТТН,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Ссылка) КАК Лицензия
	|ПОМЕСТИТЬ ЛицензииНаАлкоголь
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыОкончанияЛицензий КАК ДатыОкончанияЛицензий
	|		ПО ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания = ДатыОкончанияЛицензий.ДатаОкончания
	|			И ЛицензииПоставщиковАлкогольнойПродукции.Владелец = ДатыОкончанияЛицензий.Лицензиат
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыОкончанияЛицензий.Лицензиат,
	|	ДатыОкончанияЛицензий.ДатаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛицензииНаАлкоголь.Лицензиат КАК Лицензиат,
	|	ЛицензииНаАлкоголь.ДатаТТН КАК ДатаТТН,
	|	ЛицензииНаАлкоголь.Лицензия.Наименование КАК Наименование,
	|	ЛицензииНаАлкоголь.Лицензия.ДатаНачала КАК ДатаНачала,
	|	ЛицензииНаАлкоголь.Лицензия.ДатаОкончания КАК ДатаОкончания,
	|	ЛицензииНаАлкоголь.Лицензия.КемВыдана КАК КемВыдана
	|ИЗ
	|	ЛицензииНаАлкоголь КАК ЛицензииНаАлкоголь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Лицензиат", Выборка.Лицензиат);
		ПараметрыОтбора.Вставить("ДатаТТН", Выборка.ДатаТТН);
		
		МассивСтрок = ТаблицаЛицензий.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЦикла;
	КонецЦикла;
	//-- НЕ ЕГАИС
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ЕГАИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Ложь);
	КонецЦикла;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// В функции нужно определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - значение по умолчанию для собственной организации,
//  СобственныйТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для собственного торгового объекта,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - значение по умолчанию для сторонней организации,
//  СтороннийТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для стороннего торгового объекта.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		СобственнаяОрганизация = Неопределено,
		СобственныйТорговыйОбъект = Неопределено,
		СторонняяОрганизация = Неопределено,
		СтороннийТорговыйОбъект = Неопределено) Экспорт
	
	//++ НЕ ЕГАИС
	СобственнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	СобственныйТорговыйОбъект = Справочники.Склады.ПустаяСсылка();
	СторонняяОрганизация = Справочники.Контрагенты.ПустаяСсылка();
	СтороннийТорговыйОбъект = Справочники.Партнеры.ПустаяСсылка();
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры


// Данные сопоставления организации ЕГАИС с объектами предприятия.
//
// Параметры:
//  КодВФСРАР - Строка - код организации в ФСРАР.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС, Неопределено - ссылка на организацию в классификаторе ЕГАИС,
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - сопоставленная организация предприятия,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - сопоставленный торговый объект предприятия,
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ДанныеСопоставленияОрганизацииЕГАИС(КодВФСРАР) Экспорт
	
	//++ НЕ ЕГАИС
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Подразделение                         КАК Подразделение,
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	КлассификаторОрганизацийЕГАИС.Контрагент     КАК Организация,
	|	КлассификаторОрганизацийЕГАИС.Код            КАК КодВФСРАР
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Склады.Ссылка = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код = &КодВФСРАР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка                                        КАК ОрганизацияЕГАИС,
	|	ЕСТЬNULL(Данные.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(Данные.Организация.ИНН, """")                                      КАК ИНН,
	|	ЕСТЬNULL(Данные.ТорговыйОбъект, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))   КАК ТорговыйОбъект,
	|	ВЫБОР КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(Данные.Организация.КПП, """")
	|	ИНАЧЕ
	|		ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
	|	КОНЕЦ КАК КПП
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
	|			И Данные.Организация = РегистрацииВНалоговомОргане.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|			ПО КлассификаторОрганизацийЕГАИС.Код = Данные.КодВФСРАР");
	
	Запрос.УстановитьПараметр("КодВФСРАР", КодВФСРАР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", Выборка.ОрганизацияЕГАИС);
		ВозвращаемоеЗначение.Вставить("ТорговыйОбъект",   Выборка.ТорговыйОбъект);
		ВозвращаемоеЗначение.Вставить("Организация",      Выборка.Организация);
		ВозвращаемоеЗначение.Вставить("ИНН",              Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП",              Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ИНН и КПП переданной организации и торгового объекта.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на организацию, реквизиты которой нужно определить,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ИННКППСопоставленнойОрганизации(Организация, ТорговыйОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	ВозвращаемоеЗначение = Неопределено;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Организация,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Организация");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Подразделение КАК Подразделение,
		|	&ТорговыйОбъект      КАК ТорговыйОбъект,
		|	&Организация         КАК Организация
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL ТОГДА
		|		ЕСТЬNULL(Данные.Организация.КПП, """")
		|	ИНАЧЕ
		|		ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|			И Данные.Организация = РегистрацииВНалоговомОргане.Организация");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация"   , Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ИНН", Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП", Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// В функции нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - найденная организация,
//  Неопределено - организация не найдена.
//
Функция ОрганизацияПоИННКПП(ИНН, КПП) Экспорт
	
	//++ НЕ ЕГАИС
	Возврат ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП);
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции


// Проверяет наличие права создания котрагента у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияКонтрагента() Экспорт
	
	//++ НЕ ЕГАИС
	Результат = Ложь;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.КонтрагентГИСМ.Тип;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОписаниеТипов.Типы()[0]);
		Если МетаданныеТипа <> Неопределено Тогда
			Результат = ПравоДоступа("Добавление", МетаданныеТипа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// В функции нужно реализовать поиск контрагента и торгового объекта контрагента (партнера) по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - найденный контрагент,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - найденный торговый объект контрагента (партнер).
//  Неопределено - контрагент не найден.
//
Функция КонтрагентТорговыйОбъектПоИННКПП(ИНН, КПП) Экспорт
	
	//++ НЕ ЕГАИС
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатПоиска = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Контрагент", РезультатПоиска.Ссылка);
		ВозвращаемоеЗначение.Вставить("ТорговыйОбъект", РезультатПоиска.Партнер);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Получает контрагента торгового объекта.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект, для которого необходимо получить контрагента.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - контрагент торгового объекта.
//
Функция КонтрагентТорговогоОбъекта(ТорговыйОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	Возврат ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ТорговыйОбъект);
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Получает торгового объект контрагента.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - Контрагент.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект.
//
Функция ТорговыйОбъектКонтрагента(Контрагент) Экспорт
	
	//++ НЕ ЕГАИС
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает фактический адрес торгового объекта для чека ЕГАИС.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения адреса.
//
// Возвращаемое значение:
//  Строка - адрес торгового объекта.
//
Функция АдресТорговогоОбъекта(ТорговыйОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТорговыйОбъект, Справочники.ВидыКонтактнойИнформации.АдресСклада);
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает признак использования торговых объектов для контрагентов.
//
// Возвращаемое значение:
//  Булево - признак использования торговых объектов.
//
Функция ИспользоватьТорговыеОбъектыКонтрагентов() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие права создания поступления товаров у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания поступления товаров, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияПоступления() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеТоваровУслуг);
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие права изменения поступления товаров у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право изменения поступления товаров, Ложь в обратном случае.
//
Функция ЕстьПравоИзмененияПоступления() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ПриобретениеТоваровУслуг);
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Возвращает имя документа поступления товаров, который создается на основании входящей ТТН.
//
Функция ИмяДокументаПоступлениеТоваров() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат "ПриобретениеТоваровУслуг";
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает имя документа перемещения товаров, который создается на основании входящей ТТН.
//
Функция ИмяДокументаПеремещениеТоваров() Экспорт
	
	//++ НЕ ЕГАИС
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров") Тогда
		Возврат "ПеремещениеТоваров";
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Проверить сопоставление классификаторов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, для которого необходимо проверить соответствие классификаторов.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы открытого документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   *ЕстьНеСопоставленныеТовары - Булево - Признак наличия несопоставленных товаров.
//   *НеСопоставленныеТовары - Строка - Адрес по временном хранилище.
//
Функция ПроверитьСопоставлениеКлассификаторовПрикладногоДокумента(ДокументСсылка, УникальныйИдентификатор) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНеСопоставленныеТовары", Ложь);
	Результат.Вставить("НеСопоставленныеТовары", "");
	
	//++ НЕ ЕГАИС
	Результат = ИнтеграцияЕГАИСВызовСервераУТ.ПроверитьСопоставлениеКлассификаторов(
		ДокументСсылка,
		УникальныйИдентификатор);
	//-- НЕ ЕГАИС
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса ТТН динамического списка, отображаемого в форме списка документов.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - организация, по которой нужно отобрать документы,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - торговый объект, по которому нужно отобрать документы,
//  ОжидаетсяОформление- Булево - если Истина, будут отобраны только документы, ожидающие оформления.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТТН(Организация = Неопределено, ТорговыйОбъект = Неопределено, ОжидаетсяОформление = Ложь) Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТТНВходящаяЕГАИС.Ссылка,
	|	ДокументТТНВходящаяЕГАИС.ПометкаУдаления,
	|	ДокументТТНВходящаяЕГАИС.Номер,
	|	ДокументТТНВходящаяЕГАИС.Дата,
	|	ДокументТТНВходящаяЕГАИС.Проведен,
	|	ДокументТТНВходящаяЕГАИС.ТорговыйОбъект,
	|	ДокументТТНВходящаяЕГАИС.Организация,
	|	ДокументТТНВходящаяЕГАИС.Идентификатор,
	|	ДокументТТНВходящаяЕГАИС.ИдентификаторЕГАИС,
	|	ДокументТТНВходящаяЕГАИС.Упакована,
	|	ДокументТТНВходящаяЕГАИС.НомерТТН,
	|	ДокументТТНВходящаяЕГАИС.ДатаТТН,
	|	ДокументТТНВходящаяЕГАИС.ДатаОтгрузки,
	|	ДокументТТНВходящаяЕГАИС.Грузоотправитель,
	|	ДокументТТНВходящаяЕГАИС.Грузополучатель,
	|	ДокументТТНВходящаяЕГАИС.Поставщик,
	|	ЕСТЬNULL(ДокументТТНВходящаяЕГАИС.Поставщик.Контрагент, ДокументТТНВходящаяЕГАИС.Грузоотправитель.Контрагент) КАК ПоставщикКонтрагент,
	|	ДокументТТНВходящаяЕГАИС.Основание,
	|	ДокументТТНВходящаяЕГАИС.Комментарий,
	|	ДокументТТНВходящаяЕГАИС.ТипДоставки,
	|	ДокументТТНВходящаяЕГАИС.Перевозчик,
	|	ДокументТТНВходящаяЕГАИС.Автомобиль,
	|	ДокументТТНВходящаяЕГАИС.Прицеп,
	|	ДокументТТНВходящаяЕГАИС.Заказчик,
	|	ДокументТТНВходящаяЕГАИС.Водитель,
	|	ДокументТТНВходящаяЕГАИС.ПунктПогрузки,
	|	ДокументТТНВходящаяЕГАИС.ПунктРазгрузки,
	|	ДокументТТНВходящаяЕГАИС.Перенаправление,
	|	ДокументТТНВходящаяЕГАИС.Экспедитор,
	|	ДокументТТНВходящаяЕГАИС.СуммаДокумента,
	|	ДокументТТНВходящаяЕГАИС.МоментВремени,
	|	ДокументТТНВходящаяЕГАИС.ЕстьРасхождения,
	|	ВЫБОР
	|		КОГДА ДокументТТНВходящаяЕГАИС.ДокументОснование В(&ПустыеЗначенияДокументаОснования) ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК ВведеноПоступление,
	|	ДокументТТНВходящаяЕГАИС.ДокументОснование КАК ПоступлениеТоваров,
	|	ВЫБОР
	|		КОГДА ДокументТТНВходящаяЕГАИС.ДокументОснование В(&ПустыеЗначенияДокументаОснования) ТОГДА
	|			""""
	|		ИНАЧЕ
	|			ДокументТТНВходящаяЕГАИС.ДокументОснование.Номер
	|	КОНЕЦ КАК ПоступлениеТоваровПредставление,
	|	ВЫБОР
	|		КОГДА НЕ ДокументТТНВходящаяЕГАИС.ДокументОснование В(&ПустыеЗначенияДокументаОснования)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.Оформлено)
	|		КОГДА СтатусыДокументовЕГАИС.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.Отменен),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияКПередаче),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеТребуется)
	|	КОНЕЦ КАК ОформлениеПоступления,
	|	ВЫБОР
	|		КОГДА СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустойСтатус,
	|	
	|	СтатусыДокументовЕГАИС.Статус              КАК СтатусЕГАИС,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействиеЕГАИС1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействиеЕГАИС2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействиеЕГАИС3
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ДокументТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (СтатусыДокументовЕГАИС.Документ = ДокументТТНВходящаяЕГАИС.Ссылка)
	|	
	|ГДЕ
	|	&УсловиеОтбора";
	
	УсловиеОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.Организация = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.ТорговыйОбъект = &ТорговыйОбъект";
	КонецЕсли;
	
	Если ОжидаетсяОформление Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора +
		"(СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ТребующиеДействия))";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования временной таблицы коэффициентов пересчета базовых единиц измерения
// номенклатуры в единицы ЕГАИС:
//   - для упакованного товара: коэффициент пересчета в штуки (бутылки)
//   - для неупакованного товара: коэффициент пересчета в декалитры.
// Временная таблица используется при проведении документов по регистру ОстаткиЕГАИС и при передаче данных в УТМ.
//
// Параметры:
//  ИмяТаблицыТовары - Строка - Имя таблицы с колонками: АлкогольнаяПродукция, Номенклатура, Характеристика.
//  ИмяВременнойТаблицы - Строка - Имя результирующей временной таблицы.
//  ДобавлятьРазделитель - Булево - Признак добавления разделителя запросов.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(ИмяТаблицыТовары = "ВТТовары", ИмяВременнойТаблицы = "ВТКоэффициентыПересчетаВЕдиницыЕГАИС") Экспорт
	
	//++ НЕ ЕГАИС
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура          КАК Номенклатура,
	|	Таблица.Характеристика        КАК Характеристика,
	|	Таблица.Серия                 КАК Серия,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Таблица.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ПроверятьОбъемДАЛ,
	|	МАКСИМУМ(ЕСТЬNULL(Таблица.Номенклатура.ОбъемДАЛ, 0)) КАК ОбъемДАЛ,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Таблица.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ЕСТЬNULL(Таблица.Номенклатура.ОбъемДАЛ, 0)
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ) КАК Коэффициент
	|ПОМЕСТИТЬ ШаблонИмяВременнойТаблицы
	|ИЗ
	|	ШаблонТаблицаТовары КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ШаблонТаблицаТовары",       ИмяТаблицыТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ШаблонИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВТТН_ЕГАИС(КомандыОтчетов) Экспорт
	
	//++ НЕ ЕГАИС
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВТТН_ЕГАИС(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Заполняет в переданной таблице значений реквизиты: Крепость, ВидПродукции и Объем.
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - таблица номенклатуры с колонками: НомерСтроки, Номенклатура.
//
Процедура ЗаполнитьРеквизитыАлкогольнойПродукции(ТаблицаНоменклатуры) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|ВЫБРАТь
	|	Товары.НомерСтроки                                          КАК НомерСтроки,
	|	Товары.Номенклатура.Крепость                                КАК Крепость,
	|	Товары.Номенклатура.ВидАлкогольнойПродукции                 КАК ВидПродукции,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.ОбъемДАЛ * 10 КАК Число(10,3)) КАК Объем
	|ИЗ
	|	Товары КАК Товары
	|");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаНоменклатуры.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, "Крепость, ВидПродукции, Объем");
		КонецЕсли;
	КонецЦикла;
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ТекстЗапросаСопоставлениеОрганизацийЕГАИСПоТТН() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОрганизацияЕГАИС                                     КАК ОрганизацияЕГАИС,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ИНН                                 КАК ИНН,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.КПП                                 КАК КПП,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Наименование                        КАК Наименование,
	|	ПОДСТРОКА(ВложенныйЗапрос.ОрганизацияЕГАИС.НаименованиеПолное,1,255) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ТорговыйОбъект                      КАК ТорговыйОбъект,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Контрагент                          КАК Контрагент,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Сопоставлено                        КАК Сопоставлено
	|ПОМЕСТИТЬ ВтОрганизацииЕГАИС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Грузоотправитель КАК ОрганизацияЕГАИС
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Грузополучатель
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Поставщик
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Производитель
	|			ИНАЧЕ ТабличнаяЧасть.АлкогольнаяПродукция.Импортер
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС.Товары КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В(&СписокТТН)) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка))
	|	И НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС.СоответствуетОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВтОрганизацииЕГАИС.Наименование     КАК НаименованиеЕГАИС,
	|	Контрагенты1.Ссылка                 КАК Контрагент1,
	|	Контрагенты1.Партнер                КАК ТорговыйОбъект1,
	|	Контрагенты2.Ссылка                 КАК Контрагент2,
	|	Контрагенты2.Партнер                КАК ТорговыйОбъект2
	|ПОМЕСТИТЬ ВтСопоставления
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ВтОрганизацииЕГАИС
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты1.ИНН
	|			И ВтОрганизацииЕГАИС.КПП = Контрагенты1.КПП
	|			И (НЕ Контрагенты1.ИНН = """")
	|			И (НЕ Контрагенты1.ПометкаУдаления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты2
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты2.ИНН
	|			И (НЕ Контрагенты2.ИНН = """")
	|			И (НЕ Контрагенты2.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС   КАК ОрганизацияЕГАИС,
	|	ОрганизацииЕГАИС.Наименование       КАК Наименование,
	|	ОрганизацииЕГАИС.ТорговыйОбъект     КАК ТорговыйОбъект,
	|	ОрганизацииЕГАИС.Контрагент         КАК Контрагент,
	|	ОрганизацииЕГАИС.Сопоставлено       КАК Сопоставлено,
	|	ОрганизацииЕГАИС.ИНН                КАК ИНН,
	|	ОрганизацииЕГАИС.КПП                КАК КПП,
	|	ОрганизацииЕГАИС.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС                                         КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(Сопоставления.Контрагент1,     Сопоставления.Контрагент2)     КАК Контрагент,
	|	ЕстьNULL(Сопоставления.ТорговыйОбъект1, Сопоставления.ТорговыйОбъект2) КАК ТорговыйОбъект
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ НЕ NULL
	|	ИЛИ Сопоставления.Контрагент2 ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС  КАК ОрганизацияЕГАИС,
	|	Сопоставления.НаименованиеЕГАИС КАК НаименованиеЕГАИС
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ NULL
	|	И Сопоставления.Контрагент2 ЕСТЬ NULL
	|";
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеНоменклатурыПоТТН() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&СписокТТН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ втАлкогольнаяПродукция
	|ИЗ
	|	втТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Количество
	|ПОМЕСТИТЬ СопоставленоПозиций
	|ИЗ
	|	втАлкогольнаяПродукция КАК втАлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = втАлкогольнаяПродукция.АлкогольнаяПродукция)
	|ГДЕ
	|	НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ИдентификаторУпаковки                                      КАК ИдентификаторУпаковки,
	|	Товары.АлкогольнаяПродукция                                       КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Объем                                 КАК Объем,
	|	ЕСТЬNULL(СопоставленоПозиций.Количество, 0)                       КАК Количество,
	|	Товары.АлкогольнаяПродукция.Крепость                              КАК Крепость,
	|	Товары.АлкогольнаяПродукция.Наименование                          КАК Наименование,
	|	ПОДСТРОКА(Товары.АлкогольнаяПродукция.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Товары.АлкогольнаяПродукция.ВидПродукции                          КАК ВидПродукции,
	|	Товары.АлкогольнаяПродукция.Производитель.Контрагент              КАК ПроизводительИБ,
	|	Товары.АлкогольнаяПродукция.Импортер.Контрагент                   КАК ИмпортерИБ,
	|	Товары.АлкогольнаяПродукция.Производитель                         КАК Производитель,
	|	Товары.АлкогольнаяПродукция.Импортер                              КАК Импортер,
	|	Товары.Номенклатура                                               КАК Номенклатура,
	|	Товары.Характеристика                                             КАК Характеристика,
	|	Товары.Серия                                                      КАК Серия
	|ПОМЕСТИТЬ втДанныеТТН
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленоПозиций КАК СопоставленоПозиций
	|		ПО (СопоставленоПозиций.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция)
	|		
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка                                 КАК Номенклатура,
	|	СправочникНоменклатура.Наименование                           КАК Наименование,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции                КАК ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ПроизводительИмпортерДляДекларацийАлко КАК ПроизводительИмпортер,
	|	СправочникНоменклатура.ОбъемДАЛ                               КАК ОбъемДАЛ,
	|	СправочникНоменклатура.Крепость                               КАК Крепость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.АлкогольнаяПродукция
	|	И НЕ СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втДанныеТТН.Наименование         КАК Наименование
	|ИЗ
	|	втДанныеТТН КАК втДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|";
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеОрганизацийЕГАИСПоВходящимДанным() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ПОМЕСТИТЬ втТаблицаОрганизацииЕГАИС
	|ИЗ
	|	&ОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОрганизацияЕГАИС                                     КАК ОрганизацияЕГАИС,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ИНН                                 КАК ИНН,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.КПП                                 КАК КПП,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Наименование                        КАК Наименование,
	|	ПОДСТРОКА(ВложенныйЗапрос.ОрганизацияЕГАИС.НаименованиеПолное,1,255) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ТорговыйОбъект                      КАК ТорговыйОбъект,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Контрагент                          КАК Контрагент,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Сопоставлено                        КАК Сопоставлено
	|ПОМЕСТИТЬ ВтОрганизацииЕГАИС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|	ИЗ
	|		втТаблицаОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Производитель
	|			ИНАЧЕ ТабличнаяЧасть.АлкогольнаяПродукция.Импортер
	|		КОНЕЦ
	|	ИЗ
	|		втТаблицаТовары КАК ТабличнаяЧасть) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка))
	|	И НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС.СоответствуетОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВтОрганизацииЕГАИС.Наименование     КАК НаименованиеЕГАИС,
	|	Контрагенты1.Ссылка                 КАК Контрагент1,
	|	Контрагенты1.Партнер                КАК ТорговыйОбъект1,
	|	Контрагенты2.Ссылка                 КАК Контрагент2,
	|	Контрагенты2.Партнер                КАК ТорговыйОбъект2
	|ПОМЕСТИТЬ ВтСопоставления
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ВтОрганизацииЕГАИС
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты1.ИНН
	|			И ВтОрганизацииЕГАИС.КПП = Контрагенты1.КПП
	|			И (НЕ Контрагенты1.ИНН = """")
	|			И (НЕ Контрагенты1.ПометкаУдаления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты2
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты2.ИНН
	|			И (НЕ Контрагенты2.ИНН = """")
	|			И (НЕ Контрагенты2.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС   КАК ОрганизацияЕГАИС,
	|	ОрганизацииЕГАИС.Наименование       КАК Наименование,
	|	ОрганизацииЕГАИС.ТорговыйОбъект     КАК ТорговыйОбъект,
	|	ОрганизацииЕГАИС.Контрагент         КАК Контрагент,
	|	ОрганизацииЕГАИС.Сопоставлено       КАК Сопоставлено,
	|	ОрганизацииЕГАИС.ИНН                КАК ИНН,
	|	ОрганизацииЕГАИС.КПП                КАК КПП,
	|	ОрганизацииЕГАИС.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС                                         КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(Сопоставления.Контрагент1,     Сопоставления.Контрагент2)     КАК Контрагент,
	|	ЕстьNULL(Сопоставления.ТорговыйОбъект1, Сопоставления.ТорговыйОбъект2) КАК ТорговыйОбъект
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ НЕ NULL
	|	ИЛИ Сопоставления.Контрагент2 ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС  КАК ОрганизацияЕГАИС,
	|	Сопоставления.НаименованиеЕГАИС КАК НаименованиеЕГАИС
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ NULL
	|	И Сопоставления.Контрагент2 ЕСТЬ NULL
	|";
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеНоменклатурыПоВходящимДанным() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция                                      КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Количество
	|ПОМЕСТИТЬ КоличествоСопоставлено
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (Товары.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция)
	|СГРУППИРОВАТЬ ПО
	|	Товары.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки                                      КАК ИдентификаторУпаковки,
	|	Товары.АлкогольнаяПродукция                                       КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Объем                                 КАК Объем,
	|	Товары.АлкогольнаяПродукция.Крепость                              КАК Крепость,
	|	Товары.АлкогольнаяПродукция.Наименование                          КАК Наименование,
	|	ПОДСТРОКА(Товары.АлкогольнаяПродукция.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Товары.АлкогольнаяПродукция.ВидПродукции                          КАК ВидПродукции,
	|	Товары.АлкогольнаяПродукция.Производитель.Контрагент              КАК ПроизводительИБ,
	|	Товары.АлкогольнаяПродукция.Импортер.Контрагент                   КАК ИмпортерИБ,
	|	Товары.АлкогольнаяПродукция.Производитель                         КАК Производитель,
	|	Товары.АлкогольнаяПродукция.Импортер                              КАК Импортер,
	|	ЕСТЬNULL(КоличествоСопоставлено.Количество, 0)                    КАК Количество,
	|	Товары.Номенклатура                                               КАК Номенклатура,
	|	Товары.Характеристика                                             КАК Характеристика,
	|	Товары.Серия                                                      КАК Серия
	|ПОМЕСТИТЬ втДанныеТТН
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСопоставлено КАК КоличествоСопоставлено
	|		ПО (Товары.АлкогольнаяПродукция = КоличествоСопоставлено.АлкогольнаяПродукция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка                                 КАК Номенклатура,
	|	СправочникНоменклатура.Наименование                           КАК Наименование,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции                КАК ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ПроизводительИмпортерДляДекларацийАлко КАК ПроизводительИмпортер,
	|	СправочникНоменклатура.ОбъемДАЛ                               КАК ОбъемДАЛ,
	|	СправочникНоменклатура.Крепость                               КАК Крепость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.АлкогольнаяПродукция
	|	И НЕ СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втДанныеТТН.Наименование         КАК Наименование
	|ИЗ
	|	втДанныеТТН КАК втДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|";
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

Функция ТекстЗапросаАктПостановкиНаБалансЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ПОМЕСТИТЬ
	|	ВремТаблВРегистры1И2
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.АктПостановкиНаБалансЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаПересортицаТоваров           = ПравоДоступа("Чтение", Метаданные.Документы.ПересортицаТоваров);
	ПравоДоступаОприходованиеИзлишковТоваров = ПравоДоступа("Чтение", Метаданные.Документы.ОприходованиеИзлишковТоваров);
	
	ЛевоеСоединение = "";
	Если ПравоДоступаПересортицаТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ПересортицаТоваров КАК ПересортицаТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ПересортицаТоваров.Ссылка
		|";
	КонецЕсли;
	
	Если ПравоДоступаОприходованиеИзлишковТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ОприходованиеИзлишковТоваров.Ссылка
		|";
	КонецЕсли;
	
	Если ПравоДоступаПересортицаТоваров
		Или ПравоДоступаОприходованиеИзлишковТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	УсловиеСсылка = "";
	УсловиеОрганизация = "";
	
	Если ПравоДоступаПересортицаТоваров
		И ПравоДоступаОприходованиеИзлишковТоваров Тогда

		УсловиеСсылка = "(ПересортицаТоваров.Ссылка ЕСТЬ НЕ NULL ИЛИ ОприходованиеИзлишковТоваров.Ссылка ЕСТЬ НЕ NULL)";
		УсловиеОрганизация = "ПересортицаТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент ИЛИ ОприходованиеИзлишковТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент";
		
	ИначеЕсли ПравоДоступаПересортицаТоваров Тогда
		
		УсловиеСсылка = "ПересортицаТоваров.Ссылка ЕСТЬ НЕ NULL";
		УсловиеОрганизация = "ПересортицаТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент";
		
	ИначеЕсли ПравоДоступаОприходованиеИзлишковТоваров Тогда
		
		УсловиеСсылка = "ОприходованиеИзлишковТоваров.Ссылка ЕСТЬ НЕ NULL";
		УсловиеОрганизация = "ОприходованиеИзлишковТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеСсылка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", УсловиеСсылка));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОрганизация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", УсловиеОрганизация));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РАЗЛИЧНЫЕ 0.5 КАК КоличествоДокументов
	|ПОМЕСТИТЬ
	|	ВремТаблВРегистр3
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс)
	|	И (АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС) ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И НЕ АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВРегистры1И2.КоличествоДокументов, 0) + ЕСТЬNULL(ВРегистр3.КоличествоДокументов, 0) КАК КоличествоДокументов
	|ИЗ
	|	ВремТаблВРегистры1И2 КАК ВРегистры1И2
	|	ПОЛНОЕ СОЕДИНЕНИЕ ВремТаблВРегистр3 КАК ВРегистр3
	|	ПО ИСТИНА
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАктСписанияЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.АктСписанияЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаВнутреннееПотреблениеТоваров = ПравоДоступа("Чтение", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	ПравоДоступаСписаниеНедостачТоваров      = ПравоДоступа("Чтение", Метаданные.Документы.СписаниеНедостачТоваров);
	ПравоДоступаПересортицаТоваров           = ПравоДоступа("Чтение", Метаданные.Документы.ПересортицаТоваров);
	ПравоДоступаОтчетОРозничныхПродажах      = ПравоДоступа("Чтение", Метаданные.Документы.ОтчетОРозничныхПродажах);
	ПравоДоступаСборкаТоваров                = ПравоДоступа("Чтение", Метаданные.Документы.СборкаТоваров);
	
	УсловияСсылка = Новый Массив;
	УсловияОрганизация = Новый Массив;
	
	ЛевоеСоединение = "";
	Если ПравоДоступаВнутреннееПотреблениеТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ВнутреннееПотреблениеТоваров.Ссылка
		|";
		УсловияСсылка.Добавить("ВнутреннееПотреблениеТоваров.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ВнутреннееПотреблениеТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаСписаниеНедостачТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = СписаниеНедостачТоваров.Ссылка
		|";
		УсловияСсылка.Добавить("СписаниеНедостачТоваров.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("СписаниеНедостачТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаПересортицаТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ПересортицаТоваров КАК ПересортицаТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ПересортицаТоваров.Ссылка
		|";
		УсловияСсылка.Добавить("ПересортицаТоваров.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ПересортицаТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаОтчетОРозничныхПродажах Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ОтчетОРозничныхПродажах.Ссылка
		|";
		УсловияСсылка.Добавить("ОтчетОРозничныхПродажах.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ОтчетОРозничныхПродажах.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаСборкаТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.СборкаТоваров КАК СборкаТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = СборкаТоваров.Ссылка
		|";
		УсловияСсылка.Добавить("СборкаТоваров.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("СборкаТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛевоеСоединение) Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если УсловияОрганизация.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", СтрСоединить(УсловияОрганизация, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратИзРегистра2ЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	(%УсловиеСсылка%)
	|	И СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ВозвратИзРегистра2ЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	И (%УсловиеОрганизация% ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаТТНИсходящаяЕГАИС = ПравоДоступа("Чтение", Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	ЛевоеСоединение = "";
	Если ПравоДоступаТТНИсходящаяЕГАИС Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ТТНИсходящаяЕГАИС.Ссылка
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	УсловиеСсылка = "";
	УсловиеОрганизация = "";
	
	Если ПравоДоступаТТНИсходящаяЕГАИС Тогда
		
		УсловиеСсылка = "ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL";
		УсловиеОрганизация = "ТТНИсходящаяЕГАИС.Грузоотправитель = КлассификаторОрганизацийЕГАИС.Контрагент";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеСсылка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", УсловиеСсылка));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОрганизация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", УсловиеОрганизация));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПередачаВРегистр2ЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ПередачаВРегистр2ЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаТТНВходящаяЕГАИС = ПравоДоступа("Чтение", Метаданные.Документы.ТТНВходящаяЕГАИС);
	
	УсловияСсылка = Новый Массив;
	УсловияОрганизация = Новый Массив;
	
	ЛевоеСоединение = "";
	Если ПравоДоступаТТНВходящаяЕГАИС Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ТТНВходящаяЕГАИС.Ссылка
		|";
		УсловияСсылка.Добавить("ТТНВходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ТТНВходящаяЕГАИС.Грузополучатель В(&ОрганизацияЕГАИС)");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если УсловияОрганизация.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", СтрСоединить(УсловияОрганизация, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТТНИсходящаяЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаВозвратТоваровПоставщику          = ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику);
	ПравоДоступаПеремещениеТоваров                = ПравоДоступа("Чтение", Метаданные.Документы.ПеремещениеТоваров);
	ПравоДоступаВозвратТоваровМеждуОрганизациями  = ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровМеждуОрганизациями);
	ПравоДоступаПередачаТоваровМеждуОрганизациями = ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
	
	УсловияСсылка = Новый Массив;
	УсловияОрганизация = Новый Массив;
	
	ЛевоеСоединение = "";
	Если ПравоДоступаВозвратТоваровПоставщику Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ВозвратТоваровПоставщику.Ссылка
		|";
		УсловияСсылка.Добавить("ВозвратТоваровПоставщику.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ВозвратТоваровПоставщику.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаПеремещениеТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ПеремещениеТоваров.Ссылка
		|";
		УсловияСсылка.Добавить("ПеремещениеТоваров.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ПеремещениеТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаВозвратТоваровМеждуОрганизациями Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратТоваровМеждуОрганизациями
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ВозвратТоваровМеждуОрганизациями.Ссылка
		|";
		УсловияСсылка.Добавить("ВозвратТоваровМеждуОрганизациями.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ВозвратТоваровМеждуОрганизациями.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаПередачаТоваровМеждуОрганизациями Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ПередачаТоваровМеждуОрганизациями.Ссылка
		|";
		УсловияСсылка.Добавить("ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ПередачаТоваровМеждуОрганизациями.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛевоеСоединение) Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если УсловияОрганизация.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", СтрСоединить(УсловияОрганизация, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЧекЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ЧекЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаРеализацияТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг);
	ПравоДоступаСборкаТоваров          = ПравоДоступа("Чтение", Метаданные.Документы.СборкаТоваров);
	
	УсловияСсылка = Новый Массив;
	УсловияОрганизация = Новый Массив;
	
	ЛевоеСоединение = "";
	Если ПравоДоступаРеализацияТоваровУслуг Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = РеализацияТоваровУслуг.Ссылка
		|";
		УсловияСсылка.Добавить("РеализацияТоваровУслуг.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("РеализацияТоваровУслуг.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаСборкаТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.СборкаТоваров КАК СборкаТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = СборкаТоваров.Ссылка
		|";
		УсловияСсылка.Добавить("СборкаТоваров.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("СборкаТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛевоеСоединение) Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если УсловияОрганизация.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", СтрСоединить(УсловияОрганизация, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЧекЕГАИСВозвратОформите() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ЧекЕГАИСВозврат.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаВозвратТоваровОтКлиента = ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента);
	
	ЛевоеСоединение = "";
	Если ПравоДоступаВозвратТоваровОтКлиента Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ВозвратТоваровОтКлиента.Ссылка
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	УсловиеСсылка = "";
	УсловиеОрганизация = "";
	
	Если ПравоДоступаВозвратТоваровОтКлиента Тогда
		
		УсловиеСсылка = "ВозвратТоваровОтКлиента.Ссылка ЕСТЬ НЕ NULL";
		УсловиеОрганизация = "ВозвратТоваровОтКлиента.Организация = КлассификаторОрганизацийЕГАИС.Контрагент";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеСсылка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", УсловиеСсылка));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОрганизация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", УсловиеОрганизация));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Статусы

Процедура РассчитатьСтатусОформленияАктПостановкиНаБалансЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияАктПостановкиНаБалансЕГАИС(Источник, Отказ);
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияАктПостановкиНаБалансЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияАктПостановкиНаБалансЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияАктСписанияЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияАктСписанияЕГАИС(Источник, Отказ);
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияАктСписанияЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияАктСписанияЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияВозвратИзРегистра2ЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияВозвратИзРегистра2ЕГАИС(Источник, Отказ);
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияВозвратИзРегистра2ЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияВозвратИзРегистра2ЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияПередачаВРегистр2ЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияПередачаВРегистр2ЕГАИС(Источник, Отказ);
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияПередачаВРегистр2ЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияПередачаВРегистр2ЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияТТНИсходящаяЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияТТНИсходящаяЕГАИС(Источник, Отказ);
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияТТНИсходящаяЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияТТНИсходящаяЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияТТНВходящаяЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияТТНВходящаяЕГАИС(Источник, Отказ);
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияТТНВходящаяЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияТТНВходящаяЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияЧекЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияЧекЕГАИС(Источник, Отказ);
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияЧекЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияЧекЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияЧекЕГАИСВозврат(Источник, Отказ) Экспорт
	
	//++ НЕ ЕГАИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияЧекЕГАИСВозврат(Источник, Отказ);
	//-- НЕ ЕГАИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияЧекЕГАИСВозврат(ДокументОснование) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияЧекЕГАИСВозврат(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
КонецФункции

Функция ЭтоНеиспользуемыйСтатусДокумента(Статус) Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Серии

// Создает структуру для передачи параметров заполнения серий в функцию ЗаполнитьСгенерироватьСерии
//
// Возвращаемое значение:
//   Структура - Структура с необходимыми свойствами
//
Функция ПараметрыЗаполненияСерий() Экспорт

	//++ НЕ ЕГАИС
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ОрганизацияЕГАИС",			Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнятьБезЗапросаСправок",	Ложь);
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий",		Неопределено);
	ПараметрыЗаполнения.Вставить("Склад",						Неопределено);
	
	Возврат ПараметрыЗаполнения;
	//-- НЕ ЕГАИС

КонецФункции // ПараметрыЗаполненияСерий()

// Заполняет свойство "Склад" в структуре параметров заполнения серий
//
// Параметры:
// 	Объект - ДокументОбъект, ДанныеФормыКоллекция - объект, содержащий значение склада
//  ПараметрыЗаполнения - Структура - Структура параметров заполнения серий
//
Процедура ЗаполнитьПараметрЗаполненияСклад(Объект, ПараметрыЗаполнения) Экспорт

	//++ НЕ ЕГАИС
	ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
		ПараметрыЗаполнения.Склад = Объект[ПараметрыУказанияСерий.ИмяПоляСклад];
	КонецЕсли;
	//-- НЕ ЕГАИС
	
КонецПроцедуры // ЗаполнитьПараметрЗаполненияСклад()


// Заполняет реквизит "Серия" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"ОрганизацияЕГАИС" - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация
// 				"ЗаполнятьБезЗапросаСправок" - Булево - Принудительное заполнение серий без запроса справок 1
// 				"ПараметрыУказанияСерий" - Структура - Параметры указания серий, формируется в модулях менеджеров документов
// 				"Склад" - СправочникСсылка.Склады - склад
// 			Необязательные поля:
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по умолчанию: "Серия".
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		
// Возвращаемое значение:
//   Структура - Структура с результатом выполнения функции.
//
Функция ЗаполнитьСгенерироватьСерии(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения = Неопределено, СтруктураДействий = Неопределено) Экспорт
	
	//++ НЕ ЕГАИС
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура();
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыУказанияСерий = Неопределено;
		Склад = Неопределено;
	Иначе
		ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
		Склад = ПараметрыЗаполнения.Склад;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад));
	
	Результат = ИнтеграцияЕГАИСУТ.ЗаполнитьСгенерироватьСерии(ТабличнаяЧасть, ВыделенныеСтроки, ПараметрыЗаполнения, СтруктураДействий);
	
	Возврат Результат;
	//-- НЕ ЕГАИС
	
КонецФункции

#КонецОбласти

//++ НЕ ЕГАИС
#Область ЗаполнениеНаОсновании

// Вызывается при вводе акта постановки на баланс на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе акта списания на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе исходящей ТТН на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе чека на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе возвратного чека на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе возврата из регистра №2 на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе передачи в регистр №2 на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ ЕГАИС