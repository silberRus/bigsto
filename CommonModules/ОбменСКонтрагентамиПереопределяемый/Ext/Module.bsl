
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	Массив.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - Структура - параметры источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	Перем ВидЭД, НаправлениеЭД, Организация, Контрагент;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если ФорматCML Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		ИначеЕсли Источник.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
		Иначе			
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриобретениеУслугПрочихАктивов") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями;
		НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.ОрганизацияПолучатель;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями;
		НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.ОрганизацияПолучатель;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДокументОснование");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
			ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Контрагент;
			ДокументОснование = Источник.ДокументОснование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", ДокументОснование.Метаданные()) Тогда
			
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Договор");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураКомиссионеру")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураКомиссионеру") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Комиссионер, ДокументОснование");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Комиссионер;
			ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Комиссионер;
			ДокументОснование = Источник.ДокументОснование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", ДокументОснование.Метаданные()) Тогда
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Договор");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданныйАванс") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Контрагент;
		КонецЕсли;

	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		Если ЭтоСсылка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Организация КАК Организация
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник);
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Реквизиты = РезультатыЗапроса[0].Выбрать();
			Реквизиты.Следующий();
			
			Организация = Реквизиты.Организация;
			ДокументыОснования = РезультатыЗапроса[1].Выгрузить();
		Иначе
			Организация = Источник.Организация;
			ДокументыОснования = Источник.ДокументыОснования;
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
				
				РеквизитыОснования = Новый Структура("Контрагент");
				Если Строка.ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					РеквизитыОснования.Вставить("Договор");
				КонецЕсли;
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
				Контрагент = ЗначенияРеквизитов.Контрагент;
				Если ЗначенияРеквизитов.Свойство("Договор") Тогда
					Договор = ЗначенияРеквизитов.Договор;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученныйНалоговыйАгент") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		Если ЭтоСсылка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Организация КАК Организация
			|ИЗ
			|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник);
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Реквизиты = РезультатыЗапроса[0].Выбрать();
			Реквизиты.Следующий();
			
			Организация = Реквизиты.Организация;
			ДокументыОснования = РезультатыЗапроса[1].Выгрузить();
		Иначе
			Организация = Источник.Организация;
			ДокументыОснования = Источник.ДокументыОснования;
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
				
				РеквизитыОснования = Новый Структура("Контрагент");
				Если Строка.ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					РеквизитыОснования.Вставить("Договор");
				КонецЕсли;
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
				Контрагент = ЗначенияРеквизитов.Контрагент;
				Если ЗначенияРеквизитов.Свойство("Договор") Тогда
					Договор = ЗначенияРеквизитов.Договор;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураКомитента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураКомитента") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Комитент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Комитент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Комитент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученныйАванс")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученныйАванс") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказКлиента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент; 
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РегистрацияЦенНоменклатурыПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			Реквизиты = Новый Структура("Организация, Контрагент", "Организация", "Соглашение.Контрагент");
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Соглашение, "Контрагент");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионера")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
				"ВидКорректировки, Организация, Контрагент, Договор");
			ХозяйственнаяОперация = ЗначенияРеквизитов.ВидКорректировки;
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			ХозяйственнаяОперация = Источник.ВидКорректировки;
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					И Источник.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПриобретения")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПриобретения") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли; 		
	КонецЕсли;
	
	ПараметрыЭД.ВидЭД = ВидЭД;
	ПараметрыЭД.НаправлениеЭД = НаправлениеЭД;
	ПараметрыЭД.Организация = Организация;
	ПараметрыЭД.Контрагент = Контрагент;
	ПараметрыЭД.ДоговорКонтрагента = Договор;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения.

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	Владелец = Справочники.НоменклатураПоставщиков.ПустаяСсылка().Владелец;
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяРеквизитаВладельца = "Контрагент";
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ИмяРеквизитаВладельца = "Партнер";
	КонецЕсли;
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - Соответствие - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом", "ВариантыОплатыКлиентом");
	СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "ВариантыОплатыПоставщику");
	СоответствиеПеречислений.Вставить("ФормыОплаты", "ФормыОплаты");
	СоответствиеПеречислений.Вставить("СпособРасчета", "СпособыРасчетаКомиссионногоВознаграждения");
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом");
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьСоответствиеСтавокНДС.
// Необходимо заполнить соответствие ставок и сумм НДС.
//
// Параметры:
//   СоответствиеСтавокНДС - Соответствие - заполняемое соответствие ставок НДС.
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена ЭД.

// Определяет, является ли объект корректировочным документом.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка._ДемоСчетФактураВыданный.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, объект является ли корректировочным документом.
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если СсылкаНаОбъект <> Документы.СчетФактураВыданный.ПустаяСсылка() Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Корректировочный");
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партнеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Истина;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = Истина;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = Истина;
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов.

// Работа с деревом данных ФНС

#Область ЗаполнитьДанные_УПД_УКД

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураКомиссионеру") 
			или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СсылкаНаОбъект);		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
		МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
		Если МассивСчетовФактур.Количество() = 0 Тогда
			НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяСчетФактура, СсылкаНаОбъект);
			СтрокаОснований = НоваяСчетфактура.ДокументыОснования.Добавить();
			
			НоваяСчетФактура.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
			СтрокаОснований.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
			НоваяСчетФактура.КодВидаОперации 	= НоваяСчетФактура.КодВидаОперации(СсылкаНаОбъект.Ссылка);
			НоваяСчетФактура.Дата 				= ТекущаяДатаСеанса();
			НоваяСчетФактура.ДатаВыставления 	= ТекущаяДатаСеанса();
			НоваяСчетФактура.УстановитьНовыйНомер();
			
			НоваяСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			МассивСчетовФактур.Добавить(НоваяСчетФактура.Ссылка);
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(НоваяСчетФактура.Ссылка, ДополнительныеСвойства, Ложь);
		КонецЕсли;
		СчетФактура = МассивСчетовФактур[0];
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СчетФактура);
	ПараметрыПечати = Новый Структура();
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
		СтруктураДанных = Документы.СчетФактураВыданныйАванс.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов);
	Иначе
		СтруктураДанных = Документы[СчетФактура.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;	
	
	ЗаполнитьДанныеСчетаФактурыУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных);		
	ЗаполнитьДанныеПервичногоДокументаУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных);				

КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура();
	
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		СтруктураДанных = Документы.АктВыполненныхРабот.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
	Иначе
		СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;
	
	ЗаполнитьДанныеПервичногоДокументаУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных)

КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ВТОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Дата,
	|	ПриобретениеТоваровУслуг.Организация.НаименованиеПолное
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО СчетФактураПолученный.Ссылка = ВТОснование.ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СодержаниеОперации =			 "-";
	ДатаПолученияТоваров =			 ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	Если Не РезультатЗапроса[1].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли Не РезультатЗапроса[2].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[2].Выбрать();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(СтруктураЭД.Организация);
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", ОрганизацияНаименованиеПолное);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'Товары принял без претензий.'"));
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных)
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СсылкаНаОбъект);		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
		МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
		Если МассивСчетовФактур.Количество() = 0 Тогда
			НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяСчетФактура, СсылкаНаОбъект);
			СтрокаОснований = НоваяСчетфактура.ДокументыОснования.Добавить();
			
			НоваяСчетФактура.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
			СтрокаОснований.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
			НоваяСчетФактура.КодВидаОперации 	= НоваяСчетФактура.КодВидаОперации(СсылкаНаОбъект.Ссылка);
			НоваяСчетФактура.КодВидаОперацииНаУменьшение 	= "18";
			НоваяСчетФактура.Дата 				= ТекущаяДатаСеанса();
			НоваяСчетФактура.ДатаВыставления 	= ТекущаяДатаСеанса();
			НоваяСчетФактура.ЗаполнитьПараметрыСчетаФактурыПоОснованию(СсылкаНаОбъект.Ссылка);
			
			НоваяСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			МассивСчетовФактур.Добавить(НоваяСчетФактура.Ссылка);
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(НоваяСчетФактура.Ссылка, ДополнительныеСвойства, Ложь);
		КонецЕсли;
		СчетФактура = МассивСчетовФактур[0];
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СчетФактура);
	ПараметрыПечати = Новый Структура();
	
	СтруктураДанных = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, МассивОбъектов);
	
	ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных);		
	ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных);				
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура();
	
	РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
	МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
	СтруктураДанных = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, МассивСчетовФактур);
	
	ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.КорректировкаПриобретения)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ВТОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПриобретения.Дата,
	|	КорректировкаПриобретения.Организация.НаименованиеПолное
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО КорректировкаПриобретения.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО СчетФактураПолученный.Ссылка = ВТОснование.ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СодержаниеОперации =			 "-";
	ДатаПолученияТоваров =			 ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	Если Не РезультатЗапроса[1].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияКорректировки 	  =	 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли Не РезультатЗапроса[2].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[2].Выбрать();
		ДатаПолученияКорректировки 	  =	 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(СтруктураЭД.Организация);
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", ОрганизацияНаименованиеПолное);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", ДатаПолученияКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласен.'"));
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных)	
	
КонецПроцедуры

#КонецОбласти

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	
	ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, МассивОбъектов);
	
	ВыборкаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаТоваров.Сбросить();
	
	НайденСледующий = ВыборкаТоваров.НайтиСледующий(СтруктураПоиска);
	
	Если НайденСледующий Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерТоварнойНакладной", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаТоварнойНакладной", 
			РеквизитыШапки.Дата);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.Основание) 
			И ЗначениеЗаполнено(РеквизитыШапки.ОснованиеДата) Тогда
			ДокументыОснования = Новый ТаблицаЗначений;
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНаименование");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНомер");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеДата");
		
			СтрокаДокументыОснования = ДокументыОснования.Добавить();
			
			Если СтрНайти(РеквизитыШапки.Основание, "№") Тогда
				СтрокаНаименование = Лев(РеквизитыШапки.Основание, СтрНайти(РеквизитыШапки.Основание, "№") - 2);
			Иначе
				СтрокаНаименование = РеквизитыШапки.Основание;
			КонецЕсли;
			СтрокаДокументыОснования.ДокОснованиеНаименование 	= СтрокаНаименование;
			СтрокаДокументыОснования.ДокОснованиеНомер 			= РеквизитыШапки.ОснованиеНомер;
			СтрокаДокументыОснования.ДокОснованиеДата 			= РеквизитыШапки.ОснованиеДата;
			
			Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыОснования, "Основание");
			КонецЕсли;
		КонецЕсли;
			
		СведенияОПоставщике       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчетОрганизации);
		СведенияОПокупателе       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Поставщик",  "Юр", , РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Плательщик", "Юр", , РеквизитыШапки.Дата);
		
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя);
		Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
			ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт", , РеквизитыШапки.Дата);
		Иначе
			ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Грузоотправитель", "Факт", , РеквизитыШапки.Дата);
		КонецЕсли;
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе, "Грузополучатель",  "Факт", , РеквизитыШапки.Дата);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование", "Российский рубль");
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
		ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
		ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
		ТаблицаТоваров.Колонки.Добавить("Сорт");
		ТаблицаТоваров.Колонки.Добавить("Артикул");
		ТаблицаТоваров.Колонки.Добавить("КодТовара");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
		ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
		ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
		ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
		ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
		ТаблицаТоваров.Колонки.Добавить("МассаНетто");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
		ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("Характеристика");
		ТаблицаТоваров.Колонки.Добавить("Упаковка");
		ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
		ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
		
		ИтоговыеСуммы = СтруктураИтоговыеСуммы(СтруктураЭД.ВидЭД);
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаТоваров, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
		КонецЕсли;
	
		СтрокаТовары = ВыборкаТоваров.Выбрать();
		Пока СтрокаТовары.Следующий() Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
			НоваяСтрока.Артикул = СтрокаТовары.НоменклатураКод;
			
			ЕстьХарактеристика = ЗначениеЗаполнено(СтрокаТовары.Характеристика);
			ЕстьУпаковка       = ЗначениеЗаполнено(СтрокаТовары.Упаковка);
			
			НоваяСтрока.МассаНетто = СтрокаТовары.Количество;
			НоваяСтрока.Цена  = Окр(СтрокаТовары.Цена, 2);
			ОкруглитьМассыТовара(НоваяСтрока);
			
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоМест) Тогда
				Если НоваяСтрока.КоличествоМест <> Цел(НоваяСтрока.КоличествоМест) Тогда
					НоваяСтрока.КоличествоМест = Цел(НоваяСтрока.КоличествоМест) + 1;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоВОдномМесте) Тогда
				Если НоваяСтрока.КоличествоВОдномМесте <> Цел(НоваяСтрока.КоличествоВОдномМесте) Тогда
					НоваяСтрока.КоличествоВОдномМесте = Цел(НоваяСтрока.КоличествоВОдномМесте) + 1;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
			НоваяСтрока.КодТовара         = СтрокаТовары.НоменклатураКод;
			НоваяСтрока.НаименованиеНоменклатуры = СтрокаТовары.НоменклатураНаименование;
			НоваяСтрока.НаименованиеХарактеристики 	= СтрокаТовары.ХарактеристикаНаименование;
		
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				НоваяСтрока.Цена  = 0;			
				НоваяСтрока.СуммаСНДС = 0;			
				НоваяСтрока.СуммаНДС  = 0;			
				НоваяСтрока.СуммаБезНДС = 0;			
				Продолжить;	
			КонецЕсли;			
			
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, НоваяСтрока, СтруктураЭД.ВидЭД);
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
		
		ЗаполнитьРеквизитыПодвала(РеквизитыШапки, ИтоговыеСуммы, ДеревоДанных);
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.Исправление);
			ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект);
		Иначе		
			ЗаполнитьУИП(ДеревоДанных, СсылкаНаОбъект.ИдентификаторПлатежа);			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 не содержит данных для формирования ЭД.'"), 
			РеквизитыШапки.Ссылка);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаПолученияГруза", 
			ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ПараметрыПечати = Новый Структура;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ДанныеДляПечати = Документы["АктВыполненныхРабот"].ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	Иначе
		ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;
	
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаПоДокументам.Сбросить();
	
	Если ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерАкта", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер, Ложь, Ложь));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаАкта", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"СведенияПоВыполнениюУслуг.ДатаИсполнения",
			РеквизитыШапки.Дата);
			
		ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой стороны,
						| стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
		
		СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.СчетОрганизации);
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.СчетКонтрагента);
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Исполнитель", "Юр", , РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Заказчик",    "Юр", , РеквизитыШапки.Дата);
		
		ВалютаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Валюта, "Код");
		ВалютаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Валюта, "НаименованиеПолное");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ВалютаКод);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование", ВалютаНаименование);
		
		ТаблицаУслуг = Новый ТаблицаЗначений();
		ТаблицаУслуг.Колонки.Добавить("ИдТовараУКонтрагента");
		ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
		ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
		ТаблицаУслуг.Колонки.Добавить("Количество");
		ТаблицаУслуг.Колонки.Добавить("Цена");
		ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
		ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
		ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
		ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
		ТаблицаУслуг.Колонки.Добавить("Описание");
		ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
		ТаблицаУслуг.Колонки.Добавить("Номенклатура");
		ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
		ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
		
		// Выводим строки таблицы Услуги
		Выборка = ВыборкаПоДокументам.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.НаименованиеНоменклатуры = Выборка.УслугаНаименованиеПолное;
			ЕстьХарактеристика = ЗначениеЗаполнено(Выборка.Характеристика);
			
			НоваяСтрока.Описание = 
				Выборка.УслугаНаименованиеПолное + ?(ЕстьХарактеристика, " (" + Выборка.ХарактеристикаНаименованиеПолное + ")", "");
			
			НоваяСтрока.СуммаБезНДС = Выборка.Сумма - ?(РеквизитыШапки.ЦенаВключаетНДС И Выборка.СуммаНДС > 0, Выборка.СуммаНДС, 0);
			НоваяСтрока.СуммаСНДС   = НоваяСтрока.СуммаБезНДС + Выборка.СуммаНДС;
			
			Если РеквизитыШапки.ЦенаВключаетНДС Тогда
				НоваяСтрока.Цена = ?(Выборка.Количество = 0, 0, Окр(НоваяСтрока.СуммаБезНДС / НоваяСтрока.Количество, 2));
			КонецЕсли;
			
			НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Выборка.ЕдиницаИзмеренияКод);
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОписаниеУслуги.НачалоРабот", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"ОписаниеУслуги.КонецРабот", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОписаниеУслуги.СуммаБезНДСИтого",
			ТаблицаУслуг.Итог("СуммаБезНДС"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОписаниеУслуги.СуммаНДСИтого",
			ТаблицаУслуг.Итог("СуммаНДС"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОписаниеУслуги.СуммаСНДСИтого",
			ТаблицаУслуг.Итог("СуммаСНДС"));
			
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.Исправление);
			ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект);
		Иначе
			ЗаполнитьУИП(ДеревоДанных, СсылкаНаОбъект.ИдентификаторПлатежа); 			
		КонецЕсли; 		

	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"СведенияПоВыполнениюУслуг.ДатаЗаказа",
			ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура("ПечатьВВалюте", Ложь);
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыСчетФактура(
							ПараметрыПечати,
							МассивОбъектов);
	
	Если СтруктураДанных.Свойство("СчетФактураНаАванс") И СтруктураДанных.СчетФактураНаАванс Тогда
		ВидСчетаФактуры = "Авансовый";
	Иначе
		ВидСчетаФактуры = "Реализация";
	КонецЕсли;
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" Тогда
		ЭтоКомиссия = Истина;
		ВыборкаДанныхКонтрагента = СтруктураДанных.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДанныхКонтрагента.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаОбъект));
		ДанныеКонтрагента = ВыборкаДанныхКонтрагента.Выбрать();
		ДанныеКонтрагента.Следующий();
	Иначе
		ЭтоКомиссия = Ложь
	КонецЕсли;
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если Не ЭтоКомиссия Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
			НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерСчетаФактуры", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеШапки.Номер, Ложь, Ложь));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаСчетаФактуры", 
			ДанныеШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерИсправления", 
			ДанныеШапки.НомерИсправления);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаИсправления", 
			ДанныеШапки.ДатаИсправления);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВалютаКод", 
			Константы.ВалютаРегламентированногоУчета.Получить().Код);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ТолькоУслуги", 
			ДанныеШапки.ТолькоУслуги);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВидСчетаФактуры", 
			ВидСчетаФактуры);
			
	// Заполним данные грузоотправителя, грузополучателя.
	Постановление1137 = (УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДанныеШапки.Дата) > 0);
	
	Если НЕ ДанныеШапки.ТолькоУслуги И НЕ (Постановление1137 И ДанныеШапки.Свойство("СчетФактураНаАванс")) Тогда
		
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель);
		СведенияОГрузоотправителе.Вставить("ДатаКИ", ДанныеШапки.Дата);
		ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель");
		
		Если НЕ ЭтоКомиссия Тогда 
			СведенияОГрузополучателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузополучатель);
		Иначе
			СведенияОГрузополучателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Грузополучатель);
		КонецЕсли;	
		СведенияОГрузополучателе.Вставить("ДатаКИ", ДанныеШапки.Дата);
		ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, СведенияОГрузополучателе, "Грузополучатель");
		
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"СведенияОГрузоотправителе.ОнЖе", 
				Истина);
	
	КонецЕсли;
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация);
	СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец", "Юр", , ДанныеШапки.Дата);
	
	Если НЕ ЭтоКомиссия Тогда 
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, , ДанныеШапки.Дата);
		Если Не ПустаяСтрока(ДанныеШапки.КППКонтрагента) Тогда
			СведенияОПокупателе.КПП = ДанныеШапки.КППКонтрагента;
		КонецЕсли;
	Иначе
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Контрагент, , ДанныеШапки.Дата);
		Если Не ПустаяСтрока(ДанныеКонтрагента.КПППокупателя) Тогда
			СведенияОПокупателе.КПП = ДанныеКонтрагента.КПППокупателя;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр", , ДанныеШапки.Дата);
	
	Если ЭтоКомиссия Тогда
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, ,ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОКомиссионере, "Комиссионер", "Юр", , ДанныеШапки.Дата);
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаОбъект));
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	Пока СтрокаТовары.Следующий() Цикл
		Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
			 ИЛИ ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			Если СтрокаТовары.Покупатель <> ДанныеШапки.Покупатель
				 ИЛИ (ДанныеШапки.Покупатель <> Неопределено 
					  И НачалоДня(СтрокаТовары.Дата) <> НачалоДня(ДанныеШапки.Дата) 
					  И СтрокаТовары.Дата <> '00010101') Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС, 2);
		СуммаНДС    = Окр(СтрокаТовары.СуммаНДС, 2);
		СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС, 2);
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		
		ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;
		
		НовСтрока.НаименованиеНоменклатуры  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование,
			,
			,
			ДополнительныеПараметрыПолученияНаименованияДляПечати);
			
		НовСтрока.Цена                      = Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СуммаБезНДС               = СуммаБезНДС;
		НовСтрока.Акциза                    = "без акциза";
		НовСтрока.СтавкаНДСТип              = ТипСтавкиНДС(СтрокаТовары.СтавкаНДС);
		НовСтрока.СуммаНДС                  = СуммаНДС;
		НовСтрока.СуммаСНДС                 = СуммаСНДС;
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.СтавкаНДС             = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНДС              = 0;
			НовСтрока.СуммаСНДС             = 0;
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);

		//Заполнение Таможенной декларации
		ТаможеннаяДекларация = Новый ТаблицаЗначений;
		ТаможеннаяДекларация.Колонки.Добавить("КодСтраныПроисхождения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
		ТаможеннаяДекларация.Колонки.Добавить("НомерТаможеннойДекларации", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
		СтрокаТД = ТаможеннаяДекларация.Добавить();
		Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД.СтранаПроисхождения) Тогда
			СтрокаТД.КодСтраныПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.НомерГТД.СтранаПроисхождения, "Код");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
			СтрокаТД.НомерТаможеннойДекларации = СокрЛП(Строка(СтрокаТовары.НомерГТД));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТД.КодСтраныПроисхождения) и ЗначениеЗаполнено(СтрокаТД.НомерТаможеннойДекларации) Тогда
			НовСтрока.ТаможеннаяДекларация = ТаможеннаяДекларация;
		КонецЕсли;
		//Конец заполнения Таможенной декларации
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоКОплате.СуммаБезНДСВсего", 
			ТаблицаТоваров.Итог("СуммаБезНДС"));

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоКОплате.СуммаСНДСВсего", 
			ТаблицаТоваров.Итог("СуммаСНДС"));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоКОплате.СуммаНДСВсего", 
			ТаблицаТоваров.Итог("СуммаНДС"));
	
	ПлатежныеДокументы = Новый ТаблицаЗначений;
	Если ВидСчетаФактуры = "Реализация" Тогда
		// Заполним платежные документы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента КАК НомерПРД,
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента КАК ДатаПРД
		|ИЗ
		|	Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
		|ГДЕ
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		ПлатежныеДокументы = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	//Заполним документы основания.
	МассивДокументовОснований = Новый Массив;
	Если ВидСчетаФактуры = "Реализация" И НЕ ЭтоКомиссия Тогда
		ВыборкаОснований = СтруктураДанных.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаОснований.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаОбъект));
		СтрокиОснований = ВыборкаОснований.Выбрать();
		Пока СтрокиОснований.Следующий() Цикл
			МассивДокументовОснований.Добавить(СтрокиОснований.ДокументОснование);
		КонецЦикла;
	Иначе
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
		МассивДокументовОснований.Добавить(ДокументОснование);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", МассивДокументовОснований);
	
	Если ВидСчетаФактуры = "Реализация" И НЕ ЭтоКомиссия Тогда
		ЗаполнитьУИП(ДеревоДанных, СсылкаНаОбъект.ИдентификаторПлатежа);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Корректировочный Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура("ПечатьВВалюте", Ложь);
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыСчетФактура(
		ПараметрыПечати, 
		МассивОбъектов);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаОбъект));
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерКорСчетаФактуры", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеШапки.Номер, Ложь, Ложь));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаКорСчетаФактуры", 
			ДанныеШапки.Дата);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерИсправленияКорСчетаФактуры", 
			ДанныеШапки.НомерИсправления);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаИсправленияКорСчетаФактуры", 
			ДанныеШапки.ДатаИсправления);
	
	МассивДокументовОснований = Новый Массив;
	ВыборкаОснований = СтруктураДанных.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОснований.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаОбъект));
	СтрокиОснований = ВыборкаОснований.Выбрать();
	Пока СтрокиОснований.Следующий() Цикл
		
		МассивДокументовОснований.Добавить(СтрокиОснований.ДокументОснование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"НомерСчетаФактуры", 
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокиОснований.НомерСчетаФактуры, Ложь, Ложь));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ДатаСчетаФактуры", 
				СтрокиОснований.ДатаСчетаФактуры);
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"НомерИсправления", 
				СтрокиОснований.НомерИсправленияСчетаФактуры);
		 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ДатаИсправления", 
				СтрокиОснований.ДатаИсправленияСчетаФактуры);
				
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", МассивДокументовОснований);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВалютаКод", 
			Константы.ВалютаРегламентированногоУчета.Получить().Код);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ТолькоУслуги", 
			ДанныеШапки.ТолькоУслуги);

	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация);
	СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец", "Юр", , ДанныеШапки.Дата);

	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент);
	СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр", , ДанныеШапки.Дата);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДо");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДо");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЦенаДо");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДо");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТипДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСДо");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДо");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("АкцизаДо");
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаОбъект));
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	Пока СтрокаТовары.Следующий() Цикл
		
		СуммаСНДС     = Окр(СтрокаТовары.СуммаСНДС, 2);
		СуммаНДС      = Окр(СтрокаТовары.СуммаНДС, 2);
		СуммаБезНДС   = Окр(СтрокаТовары.СуммаБезНДС, 2);
		
		СуммаСНДСДо   = Окр(СтрокаТовары.СуммаСНДСДо, 2);
		СуммаНДСДо    = Окр(СтрокаТовары.СуммаНДСДо, 2);
		СуммаБезНДСДо = Окр(СтрокаТовары.СуммаБезНДСДо, 2);
		
		НовСтрока = ТаблицаТоваров.Добавить();
		
		НовСтрока.Номенклатура = СтрокаТовары.Номенклатура;
		
		ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;		
		
		НовСтрока.НаименованиеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование,
			,
			,
			ДополнительныеПараметрыПолученияНаименованияДляПечати);
			
		НовСтрока.ЕдиницаИзмеренияКодДо = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.ЕдиницаИзмеренияКод   = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.КоличествоДо          = СтрокаТовары.КоличествоДо;
		НовСтрока.Количество            = СтрокаТовары.Количество;
		НовСтрока.ЦенаДо                = Окр(СтрокаТовары.ЦенаДо, 2);
		НовСтрока.Цена                  = Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СуммаБезНДСДо         = СуммаБезНДСДо;
		НовСтрока.СуммаБезНДС           = СуммаБезНДС;
		НовСтрока.АкцизаДо              = "без акциза";
		НовСтрока.Акциза                = "без акциза";
		НовСтрока.СтавкаНДСДо           = СтрокаТовары.СтавкаНДС;
		НовСтрока.СтавкаНДСТипДо        = ТипСтавкиНДС(СтрокаТовары.СтавкаНДС);
		НовСтрока.СтавкаНДС             = СтрокаТовары.СтавкаНДС;
		НовСтрока.СтавкаНДСТип          = ТипСтавкиНДС(СтрокаТовары.СтавкаНДС);
		НовСтрока.СуммаНДСДо            = СуммаНДСДо;
		НовСтрока.СуммаНДС              = СуммаНДС;
		НовСтрока.СуммаСНДСДо           = СтрокаТовары.СуммаСНДСДо;
		НовСтрока.СуммаСНДС             = СтрокаТовары.СуммаСНДС;
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.СтавкаНДСДо       = "НДС исчисляется налоговым агентом";
			НовСтрока.СтавкаНДС         = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНДС          = 0;
			НовСтрока.СуммаСНДС         = 0;
			НовСтрока.СуммаНДСДо        = 0;
			НовСтрока.СуммаСНДСДо       = 0;
		КонецЕсли;
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоКОплате.СуммаСНДСВсего", 
			ТаблицаТоваров.Итог("СуммаСНДС"));
	
КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ИмяДокумента = СсылкаНаОбъект.Метаданные().Имя;
	ДанныеДляПечати = Документы[ИмяДокумента].ПолучитьДанныеДляПечатнойФормыСоглашениеОбИзмененииСтоимости(
						Новый Структура("ВыводитьУслуги", Истина), 
						МассивОбъектов);
	
	ВыборкаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаТоваров.Сбросить();
	
	Если ВыборкаТоваров.НайтиСледующий(СтруктураПоиска) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерТоварнойНакладной", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер, Ложь, Ложь));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаТоварнойНакладной",  
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
		
		СведенияОПоставщике       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчетОрганизации);
		СведенияОПокупателе       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента);
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя);
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике,       "Поставщик", "Юр", , РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт", , РеквизитыШапки.Дата);
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик", "Юр", ,РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель", "Факт", ,РеквизитыШапки.Дата);
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
		ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
		ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
		ТаблицаТоваров.Колонки.Добавить("Сорт");
		ТаблицаТоваров.Колонки.Добавить("Артикул");
		ТаблицаТоваров.Колонки.Добавить("КодТовара");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
		ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
		ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
		ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
		ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
		ТаблицаТоваров.Колонки.Добавить("МассаНеттоДоКорректировки");
		ТаблицаТоваров.Колонки.Добавить("МассаНетто");
		ТаблицаТоваров.Колонки.Добавить("ЦенаДоКорректировки");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДоКорректировки");
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСДоКорректировки");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДоКорректировки");
		ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
		ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("Характеристика");
		ТаблицаТоваров.Колонки.Добавить("Упаковка");
		ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
		ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
		
		ИтоговыеСуммы = СтруктураИтоговыеСуммы(СтруктураЭД.ВидЭД);
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаТоваров, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
		КонецЕсли;
	
		СтрокаТовары = ВыборкаТоваров.Выбрать();
		Пока СтрокаТовары.Следующий() Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			ЗаполнитьДопДанныеВСтроке(НоваяСтрока);
			НоваяСтрока.Цена = Окр(НоваяСтрока.Цена, 2);
			НоваяСтрока.ЦенаДоКорректировки = Окр(НоваяСтрока.ЦенаДоКорректировки, 2);
			НоваяСтрока.МассаНетто = СтрокаТовары.Количество;
			НоваяСтрока.МассаНеттоДоКорректировки = Окр(СтрокаТовары.КоличествоДоКорректировки, 3);
			ОкруглитьМассыТовара(НоваяСтрока);
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоМест) Тогда
				Если НоваяСтрока.КоличествоМест <> Цел(НоваяСтрока.КоличествоМест) Тогда
					НоваяСтрока.КоличествоМест = Цел(НоваяСтрока.КоличествоМест) + 1;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоВОдномМесте) Тогда				
				Если НоваяСтрока.КоличествоВОдномМесте <> Цел(НоваяСтрока.КоличествоВОдномМесте) Тогда
					НоваяСтрока.КоличествоВОдномМесте = Цел(НоваяСтрока.КоличествоВОдномМесте) + 1;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);			
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				НоваяСтрока.Цена  = 0;			
				НоваяСтрока.СуммаСНДС = 0;			
				НоваяСтрока.СуммаНДС  = 0;			
				НоваяСтрока.СуммаБезНДС = 0;			
				НоваяСтрока.ЦенаДоКорректировки  = 0;			
				НоваяСтрока.СуммаСНДСДоКорректировки = 0;			
				НоваяСтрока.СуммаНДСДоКорректировки  = 0;			
				НоваяСтрока.СуммаБезНДСДоКорректировки = 0;			
				Продолжить;	
			КонецЕсли;			
			
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, НоваяСтрока, СтруктураЭД.ВидЭД);
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму", ИтоговыеСуммы.СуммаСНДС);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест", ИтоговыеСуммы.КоличествоМест);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто", ИтоговыеСуммы.МассаНетто);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто", ИтоговыеСуммы.МассаБрутто);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.КоличествоМест", ИтоговыеСуммы.КоличествоМест);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.МассаБрутто", ИтоговыеСуммы.МассаБрутто);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.МассаНетто", ИтоговыеСуммы.МассаНетто);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС", ИтоговыеСуммы.СуммаБезНДС);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.СуммаНДС", ИтоговыеСуммы.СуммаНДС);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС", ИтоговыеСуммы.СуммаСНДС);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.МассаНеттоДоКорректировки", ИтоговыеСуммы.МассаНеттоДоКорректировки);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДСДоКорректировки", ИтоговыеСуммы.СуммаБезНДСДоКорректировки);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.СуммаНДСДоКорректировки", ИтоговыеСуммы.СуммаНДСДоКорректировки);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВсегоПоНакладной.СуммаСНДСДоКорректировки", ИтоговыеСуммы.СуммаСНДСДоКорректировки);
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 не содержит данных для формирования ЭД.'"), 
			РеквизитыШапки.Ссылка);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, 
		"ДатаПолученияГруза", 
		ТекущаяДатаСеанса()); 
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровПродавец.
//
// Параметры:
//  СсылкаНаОбъект   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных)
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаРаботИсполнитель.
//
// Параметры:
//  СсылкаНаОбъект   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Работа со деревом данных CML

// Заполняет данные для электронного документа типа Акт на передачу прав формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	
	ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыАктНаПередачуПрав(ПараметрыПечати, МассивОбъектов);
	
	ВыборкаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаТоваров.Сбросить();
	
	НайденСледующий = ВыборкаТоваров.НайтиСледующий(СтруктураПоиска);
	
	Если НайденСледующий Тогда
	
		ТаблицаТоваров = Новый ТаблицаЗначений();	
		ТаблицаТоваров.Колонки.Добавить("Артикул");   
		ТаблицаТоваров.Колонки.Добавить("Наименование");
		ТаблицаТоваров.Колонки.Добавить("Описание");
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("Характеристика");
		ТаблицаТоваров.Колонки.Добавить("Упаковка");
		ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
		ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("Сумма");
		ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		
		ИтоговыеСуммы = СтруктураИтоговыеСуммы(СтруктураЭД.ВидЭД);
	
		ДанныеСтроки = ВыборкаТоваров.Выбрать();
		Пока ДанныеСтроки.Следующий() Цикл
			
			СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыТоваров, ДанныеСтроки);
			
			СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.НоменклатураКод;
			СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Номенклатура;
			СтрокаТаблицыТоваров.Наименование				= ДанныеСтроки.НоменклатураНаименованиеКраткое;
			СтрокаТаблицыТоваров.Описание					= ДанныеСтроки.НоменклатураНаименование;
			СтрокаТаблицыТоваров.Упаковка 					= ДанныеСтроки.ЕдиницаИзмерения;
			СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
			СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
			СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное = "-";
			СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение = "-";
			
			СтрокаТаблицыТоваров.Количество 		= ДанныеСтроки.Количество;
			СтрокаТаблицыТоваров.НДСУчтеноВСумме 	= Ложь;
			
			СтрокаТаблицыТоваров.Сумма = ДанныеСтроки.СуммаБезНДС;
			СтрокаТаблицыТоваров.Цена = Окр(ДанныеСтроки.Цена, 2);
			
			СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
			СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
			
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТаблицыТоваров, СтруктураЭД.ВидЭД);
		
		КонецЦикла;
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Номер", РеквизитыШапки.Номер);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Дата", РеквизитыШапки.Дата);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта", ВалютаРегламентированногоУчета.Код);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Курс", "1");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма", ИтоговыеСуммы.СуммаСНДС);
		
		СведенияОЛицензиаре = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчетОрганизации);
		СведенияОЛицензиате = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя);
		СведенияОПлательщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента);
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиаре, "Лицензиар",  "Факт", , РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиате, "Лицензиат",  "Факт", , РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПлательщике, "Плательщик", "Юр", , РеквизитыШапки.Дата);
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "Товары");
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.Исправление);
			ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект);
		Иначе
			ЗаполнитьДокументыОснованияПоЗаказам(ДеревоДанных, СсылкаНаОбъект);
			ЗаполнитьУИП(ДеревоДанных, СсылкаНаОбъект.ИдентификаторПлатежа);			
		КонецЕсли;		
		
		//Заполнение документов сделки
		ТаблицаДокументовСделки = Новый ТаблицаЗначений();
		ТаблицаДокументовСделки.Колонки.Добавить("Представление");
		
		Если ЗначениеЗаполнено(РеквизитыШапки.Основание) Тогда
			СтрокаТаблицаДокументовСделки = ТаблицаДокументовСделки.Добавить();
			СтрокаТаблицаДокументовСделки.Представление = РеквизитыШапки.Основание;
		КонецЕсли;
		
		Если ТаблицаДокументовСделки.Количество() > 0 Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаДокументовСделки, "ДокументыСделки");
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 не содержит данных для формирования ЭД.'"), 
			РеквизитыШапки.Ссылка);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	СведенияОбОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", "Юр", , ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты " + СсылкаНаОбъект.Наименование);

КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                   создать электронный документ.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт

КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - Дерево значений, соответствующее макету ПрайсЛист обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Номер,
	|	КоммерческоеПредложениеКлиенту.Организация,
	|	КоммерческоеПредложениеКлиенту.Дата,
	|	КоммерческоеПредложениеКлиенту.Валюта,
	|	КоммерческоеПредложениеКлиенту.Валюта.Код КАК ВалютаКод,
	|	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Цена,
	|	Товары.Количество,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка,
	|	Товары.Ссылка.Валюта.Код КАК ВалютаЦены
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ВидЦены КАК ТипЦены,
	|	Товары.ВидЦены.Наименование КАК Наименование,
	|	Товары.Ссылка.Валюта.Код КАК Валюта,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК ВключаетНДС
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность
	|";
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура." + ИмяДопКолонки, """"""));
					
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДействительноС", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДействительноДо", 
			РеквизитыШапки.СрокДействия);
			
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Цены по комм. предложению %1 от %2'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер, Ложь, Ложь),
				РеквизитыШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Описание", 
			Описание);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Владелец", "Юр", , РеквизитыШапки.Дата);
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ТаблицаТипыЦен = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТипыЦен, "ТипыЦен");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету СчетНаОплату обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	ДопустимыеВидыДокументов = Новый Массив;
	ДопустимыеВидыДокументов.Добавить("ЗаказКлиента");
	ДопустимыеВидыДокументов.Добавить("РеализацияТоваровУслуг");
	ДопустимыеВидыДокументов.Добавить("АктВыполненныхРабот");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомиссионера");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомиссионераОСписании");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомитенту");
	ДопустимыеВидыДокументов.Добавить("ЗаявкаНаВозвратТоваровОтКлиента");
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование"); 
	ВидДокумента = ДокументОснование.Метаданные().Имя;
	
	Если ДопустимыеВидыДокументов.Найти(ВидДокумента) = Неопределено Тогда
		ВызватьИсключение 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ЭД ""Счет на оплату"" не может быть сформирована, т.к. не определено получение данных для основания вида %1'"),
				ВидДокумента);
	КонецЕсли;
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, 
							"ЦенаВключаетНДС, НалогообложениеНДС, Дата, Номер, СуммаДокумента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Валюта КАК Валюта,
	|	СчетНаОплатуКлиенту.Валюта.Код КАК ВалютаКод,
	|	СчетНаОплатуКлиенту.Дата,
	|	СчетНаОплатуКлиенту.СуммаДокумента,
	|	СчетНаОплатуКлиенту.БанковскийСчет,
	|	СчетНаОплатуКлиенту.НазначениеПлатежа,
	|	СчетНаОплатуКлиенту.ЧастичнаяОплата,
	|	СчетНаОплатуКлиенту.Организация,
	|	СчетНаОплатуКлиенту.Контрагент,
	|	СчетНаОплатуКлиенту.ИдентификаторПлатежа,
	|	СчетНаОплатуКлиенту.ДокументОснование
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СчетЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК СчетЭтапыГрафикаОплаты
	|ГДЕ
	|	СчетЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Запрос.УстановитьПараметр("ДокОснование", СсылкаНаОбъект.ДокументОснование);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияККоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли  ВидДокумента = "АктВыполненныхРабот"  Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
			|	Товары.Количество КАК Количество,
			|	1 КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание КАК Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионера" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ОтчетКомиссионера.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионераОСписании" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомитенту" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ОтчетКомитенту.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары	КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		КонецЕсли;
		
		ИмяДопКолонки = ИмяДополнительнойКолонки();
		ТекстЗапросаТовары = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗапросаТовары, 
				?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура." + ИмяДопКолонки, """"""));
		
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаКодЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Код",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
				
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Наименование",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
			
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Товары.Упаковка",
				"Товары.Номенклатура"));
	КонецЕсли;   
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТовары;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки= РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НазначениеПлатежа", 
			РеквизитыШапки.НазначениеПлатежа);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ЧастичнаяОплата", 
			РеквизитыШапки.ЧастичнаяОплата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НалогообложениеНДС", 
			Строка(РеквизитыОснования.НалогообложениеНДС));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.НомерДокументаОснования", 
			РеквизитыОснования.Номер);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.ДатаДокументаОснования", 
			РеквизитыОснования.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.НаименованиеДокументаОснования", 
			Строка(ДокументОснование));
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец", "Юр", , РеквизитыШапки.Дата);
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", , РеквизитыШапки.Дата);
	
	// Заполняем документ основание
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ВыборкаСрокПлатежа = РезультатЗапроса[1].Выбрать();
	ВыборкаСрокПлатежа.Следующий();
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"СрокПлатежа", 
			ВыборкаСрокПлатежа.ДатаПлатежа);
	
	ЭтапыГрафикаОплаты = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ЭтапыГрафикаОплаты, "ГрафикОплаты");
	
	ТаблицаТоваров = РезультатЗапроса[3].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.Сумма", 
			ТаблицаТоваров.Итог("Сумма"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНДС", 
			ТаблицаТоваров.Итог("СуммаНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыОснования.ЦенаВключаетНДС);
	
	СуммаБезСкидки = ТаблицаТоваров.Итог("Сумма");
	СуммаСкидки = 0;
	Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
		СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
	КонецЕсли;
	СуммаБезСкидки = СуммаБезСкидки + СуммаСкидки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаСкидки", 
			СуммаСкидки);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаБезСкидки", 
			СуммаБезСкидки);
	
	// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	Если РеквизитыШапки.ЧастичнаяОплата Тогда
		ИтоговаяСтрока = НСтр("ru='Всего на сумму %СуммаПрописью%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаПрописью%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	Иначе
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТОваров.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	КонецЕсли;
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ЗаказТовара обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказПоставщику.Валюта.Код КАК ВалютаКод,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаказПоставщику.Номер КАК Номер,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика КАК НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика КАК ДатаПоДаннымПоставщика,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчика
	|		ИНАЧЕ ЗаказПоставщику.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА """"
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчикаЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ ЗаказПоставщику.АдресДоставкиЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА ""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ""Доставка""
	|		ИНАЧЕ ""Самовывоз""
	|	КОНЕЦ КАК СпособДоставки,
	|	ЗаказПоставщику.ДокументОснование КАК ДокументОснование,
	|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПоставщику.Договор.Дата КАК ДоговорДата,
	|	ЗаказПоставщику.Договор.Номер КАК ДоговорНомер
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК ИдТовараУКонтрагента,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ""НДС исчисляется налоговым агентом""
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.СуммаРучнойСкидки КАК СуммаСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентСкидки,
	|	Товары.Цена КАК Цена,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки             = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", , РеквизитыШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта",	РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.ДополнительнаяИнформация);
	
	// заполнение полей дерева данных Доставка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",	РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// Номер и дата договора.
	Если ЗначениеЗаполнено(РеквизитыШапки.ДоговорНомер) И ЗначениеЗаполнено(РеквизитыШапки.ДоговорДата) Тогда
		РеквизитыДоговора = Новый ТаблицаЗначений;
		РеквизитыДоговора.Колонки.Добавить("Идентификатор");
		РеквизитыДоговора.Колонки.Добавить("Наименование");
		РеквизитыДоговора.Колонки.Добавить("Номер");
		РеквизитыДоговора.Колонки.Добавить("Дата");
		
		СтрокаРеквизитыДоговора = РеквизитыДоговора.Добавить();
		СтрокаРеквизитыДоговора.Идентификатор = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Наименование = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Номер = РеквизитыШапки.ДоговорНомер;
		СтрокаРеквизитыДоговора.Дата = РеквизитыШапки.ДоговорДата;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, РеквизитыДоговора, "ДокументыСделки");
	КонецЕсли;
			
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.ЦенаВключаетНДС);
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Всего наименований %1, на сумму %2'"),
						ТаблицаТоваров.Количество(), 
						ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Валюта.Код КАК ВалютаКод,
	|	ЗаказКлиента.Валюта КАК Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.Организация,
	|	ЗаказКлиента.Контрагент,
	|	ЗаказКлиента.СуммаДокумента,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымКлиента,
	|	ЗаказКлиента.БанковскийСчет,	
	|	ЗаказКлиента.ДополнительнаяИнформация,		
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			ЗаказКлиента.АдресДоставкиПеревозчика
	|	КОНЕЦ	КАК АдресДоставки,
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки) ТОГДА
	|			""Доставка""
	|	КОНЕЦ	КАК СпособДоставки,
	|	ЗаказКлиента.ИдентификаторПлатежа,
	|	ЗаказКлиента.ДокументОснование,
	|	ЗаказКлиента.Договор.Номер КАК ДоговорНомер,
	|	ЗаказКлиента.Договор.Дата КАК ДоговорДата
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Упаковка КАК ЕдиницаИзмерения,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ""НДС исчисляется налоговым агентом""
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстЗапроса, 
						?(ЗначениеЗаполнено(ИмяДопКолонки), "Товары.Номенклатура." + ИмяДопКолонки, """"""));
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", , РеквизитыШапки.Дата);
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.НомерСчета", 
			БанковскийСчет.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.НаимБанк", 
			БанковскийСчет.Банк.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.БИК", 
			БанковскийСчет.Банк.Код);
			
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", , РеквизитыШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Комментарий", 
			РеквизитыШапки.ДополнительнаяИнформация);
	
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаИтог", 
			ТаблицаТоваров.Итог("Сумма"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНалогаИтог", 
			ТаблицаТоваров.Итог("СуммаНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.ЦенаВключаетНДС);
			
	// заполнение полей дерева данных Доставка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",	РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// Номер и дата договора.
	Если ЗначениеЗаполнено(РеквизитыШапки.ДоговорНомер) И ЗначениеЗаполнено(РеквизитыШапки.ДоговорДата) Тогда
		РеквизитыДоговора = Новый ТаблицаЗначений;
		РеквизитыДоговора.Колонки.Добавить("Идентификатор");
		РеквизитыДоговора.Колонки.Добавить("Наименование");
		РеквизитыДоговора.Колонки.Добавить("Номер");
		РеквизитыДоговора.Колонки.Добавить("Дата");
		
		СтрокаРеквизитыДоговора = РеквизитыДоговора.Добавить();
		СтрокаРеквизитыДоговора.Идентификатор = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Наименование = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Номер = РеквизитыШапки.ДоговорНомер;
		СтрокаРеквизитыДоговора.Дата = РеквизитыШапки.ДоговорДата;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, РеквизитыДоговора, "ДокументыСделки");
	КонецЕсли;
	
	// Документ основание.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//    Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//    колонки ДополнительныеРеквизиты в таблице товаров.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата,
	|	ОтчетКомитенту.Валюта,
	|	ОтчетКомитенту.Валюта.Код КАК ВалютаКод,	
	|	ОтчетКомитенту.СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	ОтчетКомитенту.НалогообложениеНДС,
	|	ОтчетКомитенту.НачалоПериода,
	|	ОтчетКомитенту.КонецПериода,
	|	ОтчетКомитенту.ФормаОплаты,
	|	ОтчетКомитенту.СпособРасчетаВознаграждения,
	|	ОтчетКомитенту.ПроцентВознаграждения,
	|	ОтчетКомитенту.ДатаПлатежа,
	|	ОтчетКомитенту.ИдентификаторПлатежа,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения,
	|	ОтчетКомитенту.СуммаНДСВознаграждения,
	|	ОтчетКомитенту.Контрагент,
	|	ОтчетКомитенту.Организация,
	|	ОтчетКомитенту.Организация КАК Организация1,
	|	ОтчетКомитенту.Контрагент КАК Контрагент1
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК ИдТовараУКонтрагента,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаПродажи КАК СуммаПродажи,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Упаковка КАК ЕдиницаИзмерения,
	|	Товары.ДатаСчетаФактуры КАК ДатаПродажи,
	|	Товары.Покупатель КАК Контрагент,
	|	Товары.ЦенаПродажи КАК ЦенаПродажи,
	|	Товары.Цена
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетКомитенту.ЭтапыГрафикаОплаты КАК ОтчетКомитентуЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Услуга.Код КАК ИД,
	|	ОтчетКомитенту.Услуга.Артикул КАК Артикул,
	|	ОтчетКомитенту.Услуга.Наименование КАК Наименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.НачалоПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.КонецПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ФормаОплаты", 
			Строка(РеквизитыШапки.ФормаОплаты));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"СпособРасчета", 
			Строка(РеквизитыШапки.СпособРасчетаВознаграждения));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаОплаты", 
			РеквизитыШапки.ДатаПлатежа);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр", , РеквизитыШапки.Дата);
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр", , РеквизитыШапки.Дата);
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");

	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Покупатель = ТаблицаТоваров[Число(Товар.Значение) - 1].Контрагент;
		
		Если ЗначениеЗаполнено(Покупатель) Тогда
			СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Покупатель);
			ЗаполнитьДанныеУчастника(Товар, СведенияОПокупателе, "Товары.НомерСтроки.Покупатель", "Юр", "Товары.НомерСтроки", РеквизитыШапки.Дата);
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаЭтаповГрафикаОплаты = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	// Информация по услуге вознаграждения
	
	Услуга = РезультатЗапроса[3].Выбрать();
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.Артикул", 
			Услуга.Артикул);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.Наименование", 
			Услуга.Наименование);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаКод", 
			Услуга.БазоваяЕдиницаКод);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаНаименование", 
			Услуга.БазоваяЕдиницаНаименование);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаНаименованиеПолное", 
			Услуга.БазоваяЕдиницаНаименованиеПолное);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаМеждународноеСокращение", 
			Услуга.БазоваяЕдиницаМеждународноеСокращение);
	
	// Итоги документа
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаДокумента", 
			ТаблицаТоваров.Итог("СуммаПродажи"));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.ЦенаВключаетНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СтавкаНДСВознаграждения", 
			?(РеквизитыШапки.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.ПустаяСсылка(), 
													Перечисления.СтавкиНДС.БезНДС, РеквизитыШапки.СтавкаНДСВознаграждения));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНДСВознаграждения", 
			РеквизитыШапки.СуммаНДСВознаграждения);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаВознаграждения", 
			ТаблицаТоваров.Итог("СуммаВознаграждения"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.Процент", 
			РеквизитыШапки.ПроцентВознаграждения);
	 
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ Нстр("ru = ', на сумму'")
		+ " "
		+ ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = Нстр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, Нстр("ru = 'минус'") + " ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.Валюта);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОСписании.Валюта,
	|	ОтчетКомитентуОСписании.Дата,
	|	ОтчетКомитентуОСписании.СуммаДокумента,
	|	ОтчетКомитентуОСписании.НачалоПериода,
	|	ОтчетКомитентуОСписании.КонецПериода,
	|	ОтчетКомитентуОСписании.Организация,
	|	ОтчетКомитентуОСписании.Контрагент
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|ГДЕ
	|	ОтчетКомитентуОСписании.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК Ид,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.СуммаСНДС,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК ЕдиниицаЗмерения,
	|	Товары.Цена
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.Валюта);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.НачалоПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.КонецПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр", , РеквизитыШапки.Дата);
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр", , РеквизитыШапки.Дата);

	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ИтоговаяСтрока = НСтр("ru = 'Всего списано наименований'")
		+ " "+
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru = ', на сумму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта), "");
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
	 
КонецПроцедуры

// Устаревшие: Работа со структурой данных ФНС

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоТорг12ПродавецФНС).
// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы,
//                                    по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоТОРГ12ПокупательФНС.
// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоАкт501ИсполнительФНС.
// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура. Следует следует использовать ЗаполнитьДанныеПоАкт501ЗаказчикФНС.
// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа КорректировочныйСчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшие: Работа со структурой данных CML

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоКаталогуТоваровCML.
// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  ТоварыКаталога - Массив, список товаров для заполнения каталога.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыКаталога.Номенклатура,
	|	ТоварыКаталога.Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыКаталога КАК ТоварыКаталога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	1 Как Коэффициент,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка
	|ИЗ
	|	Товары КАК Товары";
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварыКаталога", ТоварыКаталога);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 	ТекущаяДата());
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, ДатаФормирования, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоПрайсЛисту.
// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Номер,
	|	КоммерческоеПредложениеКлиенту.Дата,
	|	КоммерческоеПредложениеКлиенту.Валюта
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Валюта", 				РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 	ТекущаяДата());
	СтруктураПараметров.Вставить("Дата", 				СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Цены по комм.предложению №%1 от %2'"), РеквизитыШапки.Номер, РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("Описание", 			Описание);
	СтруктураПараметров.Вставить("Курс", 				РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, Валюта, ДатаФормирования, Дата, ВидЭД,
		|НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоСчету.
// Подготавливает данные для электронного документа типа Счет формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ВидДокумента = "";
	РезультатЗапроса = Неопределено;
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ВидДокумента = "ЗаказКлиента";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидДокумента = "РеализацияТоваровУслуг";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ВидДокумента = "АктВыполненныхРабот";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			ВидДокумента = "ОтчетКомиссионера";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДокумента = "ОтчетКомиссионераОСписании";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			ВидДокумента = "ОтчетКомитенту";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента";
		КонецЕсли;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(СсылкаНаОбъект, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = "";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Запрос.УстановитьПараметр("ДокОснование", СсылкаНаОбъект.ДокументОснование);
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли  ВидДокумента = "АктВыполненныхРабот"  Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
			|	Товары.Количество КАК Количество,
			|	1 КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	НЕОПРЕДЕЛЕНО КАК Упаковка
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание КАК Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионера" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионера.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
 	 	ИначеЕсли ВидДокумента = "ОтчетКомиссионераОСписании" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомитенту" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомитенту.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары	КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Товары.Упаковка",
				"Товары.Номенклатура"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Наименование",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКодЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Код",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
		
		ИмяДопКолонки = ИмяДополнительнойКолонки();
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
		
	КонецЕсли;   
	
	ТекстЗапроса = ТекстЗапроса 
		+ "ВЫБРАТЬ
		  |	МАКСИМУМ(СчетЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК СчетЭтапыГрафикаОплаты
		  |ГДЕ
		  |	СчетЭтапыГрафикаОплаты.Ссылка = &Ссылка
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
		  |	ЭтапыГрафикаОплаты.ПроцентПлатежа,
		  |	ЭтапыГрафикаОплаты.СуммаПлатежа
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
		  |ГДЕ
		  |	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
		  |
		  |УПОРЯДОЧИТЬ ПО
		  |	ДатаПлатежа
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	СчетНаОплатуКлиенту.Валюта,
		  |	СчетНаОплатуКлиенту.Дата,
		  |	СчетНаОплатуКлиенту.СуммаДокумента,
		  |	СчетНаОплатуКлиенту.ДокументОснование.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		  |	СчетНаОплатуКлиенту.ДокументОснование.НалогообложениеНДС КАК НалогообложениеНДС,
		  |	СчетНаОплатуКлиенту.БанковскийСчет.НомерСчета КАК НомерСчета,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.НаименованиеБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.Наименование
		  |	КОНЕЦ КАК Банк,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.БИКБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.Код
		  |	КОНЕЦ КАК БИК,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.КоррСчетБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.КоррСчет
		  |	КОНЕЦ КАК КоррСчет,
		  |	СчетНаОплатуКлиенту.БанковскийСчет.БанкДляРасчетов КАК БанкДляРасчетов,
		  |	СчетНаОплатуКлиенту.НазначениеПлатежа,
		  |	СчетНаОплатуКлиенту.ЧастичнаяОплата,
		  |	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
		  |	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК Бухгалтер,
		  |	СчетНаОплатуКлиенту.ДокументОснование.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
		  |	СчетНаОплатуКлиенту.ДокументОснование.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
		  |	ПРЕДСТАВЛЕНИЕ(СчетНаОплатуКлиенту.ДокументОснование) КАК ДокументОснование,
		  |	СчетНаОплатуКлиенту.СуммаДокумента / СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента КАК ПроцентОплаты
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
		  |		ЛЕВОЕ СОЕДИНЕНИЕ 
		  |			ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
		  |		ПО 
		  |			СчетНаОплатуКлиенту.Ссылка = ТаблицаОтветственныеЛица.Ссылка
		  |
		  |ГДЕ
		  |	СчетНаОплатуКлиенту.Ссылка = &Ссылка";
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КолЭлем = РезультатЗапроса.Количество();
	ТаблицаТоваров = Новый ТаблицаЗначений();
	Если КолЭлем = 4 Тогда
		ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	КонецЕсли;
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	ТаблицаЭтаповГрафикаОплаты = РезультатЗапроса[КолЭлем-2].Выгрузить();
	РеквизитыШапки= РезультатЗапроса[КолЭлем-1].Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 				ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",	ТаблицаЭтаповГрафикаОплаты); 
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("НалогообложениеНДС",			Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("НазначениеПлатежа",			РеквизитыШапки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("НазначениеПлатежа",			РеквизитыШапки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("Руководитель",				РеквизитыШапки.Руководитель);
    СтруктураПараметров.Вставить("Бухгалтер",					РеквизитыШапки.Бухгалтер);
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента",		РеквизитыШапки.НомерПоДаннымКлиента);
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента",			РеквизитыШапки.ДатаПоДаннымКлиента);
	СтруктураПараметров.Вставить("ДокументОснование",			РеквизитыШапки.ДокументОснование);
	СтруктураПараметров.Вставить("ЧастичнаяОплата",				РеквизитыШапки.ЧастичнаяОплата);
	Если ТаблицаТоваров.Количество()>0 Тогда
		СтруктураПараметров.Вставить("СуммаНДС", 				ОКР(ТаблицаТоваров.Итог("СуммаНДС")*РеквизитыШапки.ПроцентОплаты,2));
	Иначе	
		СтруктураПараметров.Вставить("СуммаНДС", 0);
	КонецЕсли;
	
	Если РеквизитыШапки.ЧастичнаяОплата Тогда
		ИтоговаяСтрока = НСтр("ru='Всего на сумму %СуммаПрописью%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаПрописью%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	Иначе
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТОваров.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	КонецЕсли;
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	Если РезультатЗапроса <> Неопределено Тогда
		СтруктураПараметров.Вставить("СрокПлатежа", РезультатЗапроса[1].Выгрузить()[0].ДатаПлатежа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		РасчетныйСчет = Новый Структура();
		РасчетныйСчет.Вставить("НомерСчета", РеквизитыШапки.НомерСчета);
		РасчетныйСчет.Вставить("Банк",       РеквизитыШапки.Банк);
		РасчетныйСчет.Вставить("КоррСчет",   РеквизитыШапки.КоррСчет);
		РасчетныйСчет.Вставить("БИК",        РеквизитыШапки.БИК);
		СтруктураПараметров.Вставить("РасчетныйСчет", РасчетныйСчет);
	Иначе
		СтруктураПараметров.Вставить("РасчетныйСчет", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		РеквизитыБанкаКорреспондента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование, КоррСчет, Код");
		БанкКорреспондент = Новый Структура();
		БанкКорреспондент.Вставить("Банк",     РеквизитыБанкаКорреспондента.Наименование);
		БанкКорреспондент.Вставить("КоррСчет", РеквизитыБанкаКорреспондента.КоррСчет);
		БанкКорреспондент.Вставить("БИК",      РеквизитыБанкаКорреспондента.Код);
		СтруктураПараметров.Вставить("БанкКорреспондент", БанкКорреспондент);
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, РасчетныйСчет");
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоЗаказуТоваров.
// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК Ид,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.СуммаСНДС,
	|	Товары.СуммаРучнойСкидки КАК СуммаСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентСкидки,
	|	Товары.Цена,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Валюта,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.ЦенаВключаетНДС,
	|	ЗаказПоставщику.ДополнительнаяИнформация,
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика,
	|	ЗаказПоставщику.АдресДоставки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров             = МассивРезультатовЗапроса[0].Выгрузить();
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[1].Выгрузить();
	РеквизитыШапки             = МассивРезультатовЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 			СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 			"4.02");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", РеквизитыШапки.НомерПоДаннымПоставщика);
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	РеквизитыШапки.ДатаПоДаннымПоставщика);
	СтруктураПараметров.Вставить("ТаблицаТоваров", 			ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",ТаблицаЭтаповГрафикаОплаты);
	СтруктураПараметров.Вставить("Организация", 			СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 				СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 						СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 		ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 					СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 					СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 					РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 					РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 					РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 	  	РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 				ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 					СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 			СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Роль",					"Покупатель");
	СтруктураПараметров.Вставить("Комментарий",				РеквизитыШапки.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента",	РеквизитыШапки.Номер);
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента",	  	РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("АдресДоставки",			РеквизитыШапки.АдресДоставки);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерПоДаннымПоставщика) Тогда
		СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", РеквизитыШапки.НомерПоДаннымПоставщика);
		СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	РеквизитыШапки.ДатаПоДаннымПоставщика);
	КонецЕсли;
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "ИД, Наименование, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Устарела. Следует следует использовать ЗаполнитьДанныеПоОтветуНаЗаказ.
// 
// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.СуммаДокумента,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымКлиента,
	|	ЗаказКлиента.БанковскийСчет,
	|	ЗаказКлиента.ДополнительнаяИнформация,
	|	ЗаказКлиента.АдресДоставки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
    Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = МассивРезультатовЗапроса[0].Выгрузить();
	ТаблицаЭтаповГрафикаОплаты= МассивРезультатовЗапроса[1].Выгрузить();
	РеквизитыШапки= МассивРезультатовЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 				ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",	ТаблицаЭтаповГрафикаОплаты);
	СтруктураПараметров.Вставить("Роль", 						"Продавец");
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 					ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Комментарий", 				РеквизитыШапки.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика",	    РеквизитыШапки.Номер);
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 		РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("АдресДоставки",		 		РеквизитыШапки.АдресДоставки);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерПоДаннымКлиента) Тогда
		СтруктураПараметров.Вставить("НомерПоДаннымКлиента", РеквизитыШапки.НомерПоДаннымКлиента);
		СтруктураПараметров.Вставить("ДатаПоДаннымКлиента", РеквизитыШапки.ДатаПоДаннымКлиента);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
		
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара.
// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата,
	|	ОтчетКомитенту.Валюта,
	|	ОтчетКомитенту.СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	ОтчетКомитенту.НалогообложениеНДС,
	|	ОтчетКомитенту.НачалоПериода,
	|	ОтчетКомитенту.КонецПериода,
	|	ОтчетКомитенту.ФормаОплаты,
	|	ОтчетКомитенту.СпособРасчетаВознаграждения,
	|	ОтчетКомитенту.ПроцентВознаграждения,
	|	ОтчетКомитенту.ДатаПлатежа,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения,
	|	ОтчетКомитенту.СуммаНДСВознаграждения
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК ИД,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаПродажи КАК СуммаПродажи,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.ДатаСчетаФактуры КАК ДатаПродажи,
	|	Товары.Покупатель КАК Контрагент,
	|	Товары.Ссылка.Дата КАК ДатаКИ
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетКомитенту.ЭтапыГрафикаОплаты КАК ОтчетКомитентуЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Услуга КАК Номенклатура,
	|	ОтчетКомитенту.Услуга.Код КАК ИД,
	|	ОтчетКомитенту.Услуга.Артикул КАК Артикул,
	|	ОтчетКомитенту.Услуга.Наименование КАК Наименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ВыборкаПоТоварам = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		
		НоваяСтрока.БазоваяЕдиницаКод = СокрЛП(ВыборкаПоТоварам.БазоваяЕдиницаКод);
		НоваяСтрока.УпаковкаКод = СокрЛП(ВыборкаПоТоварам.УпаковкаКод);
		
		// Заполним сведения, необходимые для выставления счета-фактуры комитентом
		СтруктураДополнительныхДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
			СтруктураПараметров.ДополнительныеРеквизитыДляТаблицыТоваров);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.ДатаПродажи);
		СтруктураДополнительныхДанных.Вставить("ДатаПродажи", МассивЗначений);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС));
		СтруктураДополнительныхДанных.Вставить("СтавкаНДС", МассивЗначений);
		
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаПоТоварам.Контрагент);
		
		Если ЗначениеЗаполнено(СведенияОПокупателе.ПолноеНаименование) 
			И ЗначениеЗаполнено(СведенияОПокупателе.ИНН) Тогда
			 
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СведенияОПокупателе.ПолноеНаименование);
			СтруктураДополнительныхДанных.Вставить("ПокупательНаименование", МассивЗначений);
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СведенияОПокупателе.ИНН);
			СтруктураДополнительныхДанных.Вставить("ПокупательИНН", МассивЗначений);
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(?(ЗначениеЗаполнено(СведенияОПокупателе.КПП), СведенияОПокупателе.КПП, ""));
			СтруктураДополнительныхДанных.Вставить("ПокупательКПП", МассивЗначений);
			
			// Заполним адреса: юридический и фактический
			ТекстОшибки = "";
			ЮрАдресУчастника = Новый Структура();
			ПолучитьАдресСтруктурой(ЮрАдресУчастника, ВыборкаПоТоварам, 
				"Контрагент", 
				"Юр", 
				ТекстОшибки);
				
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЮрАдресУчастника.АдресРФ Тогда
					ЗаполнитьАдресВСпискеТиповАдресов(СтруктураДополнительныхДанных.ПокупательЮрАдрес, ЮрАдресУчастника, "Структурированный");
				КонецЕсли;
			КонецЕсли;
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СтруктураДополнительныхДанных.ПокупательЮрАдрес);
			СтруктураДополнительныхДанных.Вставить("ПокупательЮрАдрес", МассивЗначений);
			
			ТекстОшибки = "";
			ФактАдресУчастника = Новый Структура();			
			ПолучитьАдресСтруктурой(ФактАдресУчастника, ВыборкаПоТоварам, 
				"Контрагент", 
				"Факт", 
				ТекстОшибки);
				
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ФактАдресУчастника.АдресРФ Тогда 
					ЗаполнитьАдресВСпискеТиповАдресов(СтруктураДополнительныхДанных.ПокупательФактАдрес, ФактАдресУчастника, "Структурированный");
				КонецЕсли;
			КонецЕсли;
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СтруктураДополнительныхДанных.ПокупательФактАдрес);
			СтруктураДополнительныхДанных.Вставить("ПокупательФактАдрес", МассивЗначений);
			
		КонецЕсли;
		
		НоваяСтрока.ДополнительныеРеквизиты = СтруктураДополнительныхДанных;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты", РезультатЗапроса[2].Выгрузить());
	
	Услуга = РезультатЗапроса[3].Выбрать();
	Если Услуга.Следующий() И ЗначениеЗаполнено(Услуга.Номенклатура) Тогда
		СтруктураПараметров.Вставить("Услуга",Услуга);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 					СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("СуммаВознаграждения", 		РеквизитыШапки.СуммаВознаграждения);
	СтруктураПараметров.Вставить("НалогообложениеНДС",			Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("НачалоПериода",				РеквизитыШапки.НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",				РеквизитыШапки.КонецПериода);
	СтруктураПараметров.Вставить("ФормаОплаты",					Строка(РеквизитыШапки.ФормаОплаты));
	СтруктураПараметров.Вставить("СпособРасчета",				Строка(РеквизитыШапки.СпособРасчетаВознаграждения));
	СтруктураПараметров.Вставить("Процент",						РеквизитыШапки.ПроцентВознаграждения);
	СтруктураПараметров.Вставить("ДатаОплаты",					РеквизитыШапки.ДатаПлатежа);
	
	СтруктураПараметров.Вставить("СтавкаНДСВознаграждения",		РеквизитыШапки.СтавкаНДСВознаграждения);
	СтруктураПараметров.Вставить("СуммаНДСВознаграждения",		РеквизитыШапки.СуммаНДСВознаграждения);
 	
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ СтруктураПараметров.ТаблицаТоваров.Количество()
		+ ", " + Нстр("ru = 'на сумму'") + " "
		+ ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = НСтр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, НСтр("ru = 'минус'") + " ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.Валюта);
	КонецЕсли;

	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	СтруктураПараметров.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	
КонецПроцедуры

// Устаревшая процедура. Следует использовать ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара.
// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК Ид,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.СуммаСНДС,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуОСписании.Валюта,
	|	ОтчетКомитентуОСписании.Дата,
	|	ОтчетКомитентуОСписании.СуммаДокумента
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|ГДЕ
	|	ОтчетКомитентуОСписании.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 	  СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	  ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	  СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 		  СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			  РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма",			  РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ВидЭД", 			  СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  СтруктураЭД.НаправлениеЭД);
	ИтоговаяСтрока = НСтр("ru = 'Всего списано наименований'") + " "
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, ", " + НСтр("ru = 'на сумму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта), "");
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
    ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование");
	
КонецПроцедуры

// Устаревшая процедура. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка- ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - Строка - параметры для загрузки.
//  ДеревоРазбора     - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - ДокументСсылка - владелец электронного документа.
//  Записывать - Булево - если Истина, то объект будет записан.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка на объект.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора,
			СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда		
		НайденныйОбъект = НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда		
		НайденныйОбъект = НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		НайденныйОбъект = НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		И СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		НайденныйОбъект = НайтиСоздатьВозвратТоваровОтПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		ВидСчетаФактуры = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидСчетаФактуры");
		Комиссионер = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Комиссионер");
		Если ВидСчетаФактуры = "Авансовый" Тогда
			НайденныйОбъект = НайтиСоздатьСчетФактуруАванс(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		ИначеЕсли ЗначениеЗаполнено(Комиссионер) Тогда
			НайденныйОбъект = НайтиСоздатьСчетФактуруКомитента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		НайденныйОбъект = НайтиСоглашениеОбИспользованииЭД(СтрокаДляЗагрузки, ДеревоРазбора);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель 
		И СпособОбработки = "ПриобретениеТоваровУслуг" Тогда
		НайденныйОбъект = НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);			
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеТоваров(ДеревоДанных);
	
	Если СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);		
	Иначе
		Если ДанныеДляЗагрузки.Шапка.Исправление Тогда
			ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать)
		Иначе
			ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Поиск и создание документа передачи результатов работ.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СпособОбработки = "ПриобретениеТоваровУслуг" Тогда
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеРабот(ДеревоДанных);
		ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	Иначе
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслугПоПередачеРабот(ДеревоДанных);		
		Если ДанныеДляЗагрузки.Шапка.Исправление Тогда
			ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать)
		Иначе
			ЗаполнитьДокументПоступленияУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область НайтиСоздать_УПД_УКД

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки = Неопределено) Экспорт
	
	Текст = "";
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьПриобретениеТоваровУслугУПД(ДеревоДанных, ПервичныйДокумент, Записывать, СпособОбработки);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ.
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьСчетФактуруУПД(ДеревоДанных, СчетФактура, Записывать);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НайтиСоздатьПриобретениеТоваровУслугУПД(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НайтиСоздатьСчетФактуруУПД(ДеревоДанных, СсылкаНаВладельца, Записывать);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки  = Неопределено) Экспорт
	
	Текст = "";
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, ПервичныйДокумент, Записывать);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ.
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СчетФактура, Записывать);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, СсылкаНаВладельца, Записывать);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СсылкаНаВладельца, Записывать);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
// СтрокаОбъекта - Структура параметров записываемого объекта,
// ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
// Возвращаемое значение:
//  НовЭл - ссылка на новый элемент справочника "НоменклатураПоставщиков" или "БанковскиеСчетаКонтрагентов".
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовЭл = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовЭл = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	ИначеЕсли СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчетаКонтрагентов" Тогда
		НовЭл = СоздатьРасчетныйСчет(СтрокаОбъекта,"БанковскийСчетКонтрагента", ДеревоРазбора);
	КонецЕсли;
	
	Возврат НовЭл;
	
КонецФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - СправочникСсылка - ссылка на элемент справочника организации.
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ИмяМетаданных = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ТипОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник." + ИмяМетаданных + " КАК Выборка
	|ГДЕ
	|	Выборка.ИНН = &ИНН И
	|	Выборка.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов.
//
// Возвращаемое значение:
//  Результат - Контрагент.Ссылка - ссылка на справочник контрагентов.
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	Партнер   = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
		Попытка 
			Контрагент.Заблокировать();
		Исключение
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить контрагента ""%1"".
			|Возможно, контрагент редактируется другим пользователем'"),
			Контрагент.Наименование);			
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;	
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, Найти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, Найти(ИНН_КПП, "/") + 1);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		// Заполним реквизиты партнера
		
		Если Контрагент.ЭтоНовый() Тогда
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
			Партнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
			Контрагент.Партнер = СсылкаНовогоПартнера;
		Иначе
			Партнер = Контрагент.Партнер.ПолучитьОбъект();
			Попытка 
				Партнер.Заблокировать();
			Исключение
				ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить партнера ""%1"".
				|Возможно, партнер редактируется другим пользователем'"),
				Партнер.Наименование);			
				ВызватьИсключение ТекстИсключенияЗаписи;
			КонецПопытки;			
		КонецЕсли;
		
		Партнер.Наименование = Контрагент.Наименование;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Контрагент.Записать();
		Контрагент.Разблокировать();
		Если Партнер <> Неопределено Тогда
			Партнер.Записать();
			Партнер.Разблокировать();			
		КонецЕсли;
		Результат = Контрагент.Ссылка;		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " (" + НСтр("ru = 'подробности см. в Журнале регистрации'") + ").";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Загрузка реквизитов контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру реквизитов товара
//
// Параметры:
//  РеквизитыНоменклатуры - Структура, содержащая параметры поиска.
//  СтруктураВозврата -Структура содержащая ссылки на номенклатуру, характеристику, упаковку.
//  ИД - идентификатор обмена ЭД.
//
Процедура ПолучитьРеквизитыТовара (РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика",НоменклатураПоставщика)Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
		СтруктураВозврата.Характеристика = НоменклатураПоставщика.Характеристика;
		СтруктураВозврата.Упаковка = НоменклатураПоставщика.Упаковка;
	КонецЕсли;
		
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры:
//  Контрагент - ссылка на контрагента (Организация или Контрагент).
//  ВидКонтрагента - строка, определяющая вид контрагента.
//
// Возвращаемое значение:
//  ИдКонтрагента - строка - значение ИдКонтрагента.
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента)	Экспорт
	
	ИдКонтрагента = "";
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ИдКонтрагента;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	КонецЕсли;
	Возврат ИдКонтрагента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Результат  - Структура - Структура, содержащая следующие свойства:
//		* ИмяФормы 					- Строка - Имя формы.
//      * ПараметрыОткрытияФормы	- Структура - адрес во временном хранилище.
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	Результат = Неопределено;
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("Структура") 
		И СсылкаНаЭД.Свойство("СпособОбменаЭД") 
		И СсылкаНаЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если (ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
			И (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель))
		ИЛИ (ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
			И (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)) Тогда
				
		АдресТоваровВХранилище = Неопределено;		
		Для Каждого ДокументОснование Из СсылкаНаЭД.ДокументыОснования Цикл
			Если ТипЗнч(ДокументОснование.ДокументОснование) <> Тип("ДокументСсылка.СчетФактураПолученный")
				И ТипЗнч(ДокументОснование.ДокументОснование) <> Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
				И ТипЗнч(ДокументОснование.ДокументОснование) <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда				
				АдресТоваровВХранилище = ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(ДокументОснование.ДокументОснование.Товары);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(АдресТоваровВХранилище) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОткрытияФормы = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		
		Результат = Новый Структура;
		Результат.Вставить("ИмяФормы", "ОбщаяФорма.ЗаполнениеНоменклатурыПоНоменклатуреПоставщика");
		Результат.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	Если ЗначениеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеЗаполнения);
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		МассивСтрокКоллекции = ДанныеФормы.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов.

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения католога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	АдресВоВременномХранилище = Неопределено;
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Найти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
			ИЛИ Найти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Особенности ERP
	Если ИмяПеречисления = "ВариантыОплатыПоставщику" Тогда
		Если ПредставлениеПеречисления = НСтр("ru = 'Кредит (после поступления)'") Тогда
			НайденноеЗначение = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
		ИначеЕсли ПредставлениеПеречисления = НСтр("ru = 'Предоплата (до поступления)'") Тогда
			НайденноеЗначение = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	РеквизитыСвидетельства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИП, "СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
	ШаблонДанныхСвидетельства = НСтр("ru = 'Свидетельство %1 от %2'");
	
	Сведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДанныхСвидетельства, 
		РеквизитыСвидетельства.СвидетельствоСерияНомер,
		Формат(РеквизитыСвидетельства.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	
КонецПроцедуры

// Получает контактную информацию организации по ссылке
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
// Возвращаемое значение:
//  ТаблицаЗначений - контактная информация организации.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	//В запросе реквизит Представление присваивается полю Значение, т.к в схеме XDTO поле Значение обязательно к заполнению,
	//а для адреса электронной почты реквизит Значение пустой
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Значение,			
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Ссылка
	|	И (ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает название региона по коду.
//
// Параметры:
//  КодРегиона - Строка, содержащая двухсимвольный код региона.
//
// Возвращаемое значение:
//  НазваниеРегиона - Строка - название региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона);
	Если Результат <> Неопределено Тогда
		Возврат Результат
	Иначе
		Возврат ""
	КонецЕсли;

КонецФункции

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почты.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	Возврат ПолучитьАдресЭПИзКонтактнойИнформации(Контрагент);
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками.
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
	|	//ОтборПоБанку И БанковскиеСчетаОрганизаций.Банк = &Банк";
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоБанку", "");
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;

	Запрос.УстановитьПараметр("Владелец", Организация);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК РасчетныйСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.КоррСчет
	|	КОНЕЦ КАК КорреспондентскийСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Код
	|	КОНЕЦ КАК БанкДляРасчетовБИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	ЭСФ = Неопределено;
	ИменаРеквизитов = Новый Массив();
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		// Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ЭСФ.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ЭСФ.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		ЭСФ.ДатаВыставления = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
		ИменаРеквизитов.Добавить("ДатыВыставления");
		ЭСФ.ВыставленВЭлектронномВиде = Истина;
		ИменаРеквизитов.Добавить("ВыставленВЭлектронномВиде");
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		// Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ЭСФ.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ЭСФ.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		ЭСФ.Дата = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
		ИменаРеквизитов.Добавить("Дата");
		ЭСФ.ПолученВЭлектронномВиде = Истина;
		ИменаРеквизитов.Добавить("ПолученВЭлектронномВиде");
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ВыставленВЭлектронномВиде = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ВыставленВЭлектронномВиде");
		Если Не ВыставленВЭлектронномВиде Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ЭСФ.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ЭСФ.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ			
			ЭСФ.ВыставленВЭлектронномВиде = Истина;
			ИменаРеквизитов.Добавить("ВыставленВЭлектронномВиде");
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ПолученВЭлектронномВиде = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ПолученВЭлектронномВиде");
		Если Не ПолученВЭлектронномВиде Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ЭСФ.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ЭСФ.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			ЭСФ.ПолученВЭлектронномВиде = Истина;
			ИменаРеквизитов.Добавить("ПолученВЭлектронномВиде");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РежимЗаписи = ?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ЭСФ.Записать(РежимЗаписи);
	Исключение
		
		Если ИменаРеквизитов.Количество() > 1 Тогда
			ШаблонОшибки = НСтр("ru = 'При установке реквизитов %1 документа %2 возникла ошибка. Описание ошибки: ""%3""'");
		Иначе
			ШаблонОшибки = НСтр("ru = 'При установке реквизита %1 документа %2 возникла ошибка. Описание ошибки: ""%3""'")
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, 
			СтрСоединить(ИменаРеквизитов),
			ЭСФ.Ссылка,
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка установки реквизитов счета-фактуры при получении служебного ЭД от оператора'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ЭСФ.Метаданные(),
			ЭСФ.Ссылка,
			ТекстОшибки);
		
	КонецПопытки;

КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта,
//  Организация - ссылка - ссылка на элемент справочника организации,
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - ТаблицаЗначений - содержит колонки: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//                                        НаименованиеДляСообщенияПользователю, Наименование - передается Оператору ЭДО,
//                                        НаименованиеДляСообщенияПользователю.
//  МассивКонтрагентов - Массив - ссылки на участников-контрагентов.
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка обмена с контрагентом.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	
КонецПроцедуры

// Заполняет структуру, содержащую информацию об адресе участника ЭДО.
//
// Параметры:
//  СтруктураАдреса     - структура - информация об адресе;
//	** Поля структуры для адреса РФ.
//	* АдресРФ - Булево - признак, что адрес РФ;
//	* Индекс - Строка - почтовый индекс организации;
//	* Регион - Строка - код региона организации;
//	* Район - Строка;
//	* Город - Строка;
//	* НаселенныйПункт - Строка - населенный пункт расположения организации;
//	* Улица - Строка;
//	* Дом - Строка;
//	* Корпус - Строка;
//	* Квартира - Строка;
//	** Поля структуры для иностранного адреса или адреса РФ строкой.
//	* КодСтраны - Строка - код страны;
//	* АдресТекст - Строка - представление адреса;
//  СсылкаНаОбъектУчастника - структура - содержит ссылки на элементы справочника;
//  ВидУчастника        - строка - имя метаданных справочника;
//  ВидАдреса           - строка - "Факт" или "Юр";
//  ТекстОшибки         - строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента = "Контрагент", ВидАдреса = "Юр", ТекстОшибки = "") Экспорт
	
	Адрес = ПолучитьАдресИзКонтактнойИнформации(СтруктураПараметров[ВидКонтрагента], ВидАдреса, СтруктураПараметров.ДатаКИ);
	
	Параметр1 = СтруктураПараметров[ВидКонтрагента];
	Параметр2 = ?(ВидАдреса="Юр", НСтр("ru = 'юридический'"), НСтр("ru = 'фактический'"));
	
	Если НЕ ЗначениеЗаполнено(Адрес.Представление) Тогда
		
		Ошибка = НСтр("ru = 'Для %1 необходимо указать %2 адрес.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Адрес.ЗначенияПолей) Тогда
		Ошибка =  НСтр("ru = 'Для %1 необходимо заполнить %2 адрес по классификатору.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура("КодСтраны, Индекс, Регион, КодРегиона, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(Адрес.ЗначенияПолей));
	
	Если СтрСравнить(СтруктураРезультата.КодСтраны, Справочники.СтраныМира.Россия.Код) = 0 Тогда
		АдресРФ = Истина;
	Иначе
		АдресРФ = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРезультата.КодСтраны) Тогда
		СтруктураАдреса.Вставить("ПроизвольныйАдрес", Ложь);		
	Иначе
		СтруктураАдреса.Вставить("ПроизвольныйАдрес", Истина);		
	КонецЕсли;	
	СтруктураАдреса.Вставить("АдресРФ",     	АдресРФ);
	СтруктураАдреса.Вставить("Индекс",      	СтруктураРезультата.Индекс);
	СтруктураАдреса.Вставить("КодРегион",   	СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("КодРегиона",  	СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("Район",       	СтруктураРезультата.Район);
	СтруктураАдреса.Вставить("Город",       	СтруктураРезультата.Город);
	СтруктураАдреса.Вставить("НаселПункт",  	СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("НаселенныйПункт", СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица",       	СтруктураРезультата.Улица);
	СтруктураАдреса.Вставить("Дом",         	СтруктураРезультата.Дом);
	СтруктураАдреса.Вставить("Корпус",      	СтруктураРезультата.Корпус);
	СтруктураАдреса.Вставить("Кварт",       	СтруктураРезультата.Квартира);
	СтруктураАдреса.Вставить("Квартира",    	СтруктураРезультата.Квартира);
	Если НЕ АдресРФ Тогда
		СтруктураАдреса.Вставить("КодСтр",   	СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("КодСтраны",	СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("АдрТекст", 	Адрес.Представление);
		СтруктураАдреса.Вставить("АдресТекст", 	Адрес.Представление);
	КонецЕсли;
	СтруктураАдреса.Вставить("КодГАР", 		"");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Формирует текст НДС по этапу оплаты.
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС().
//  ПроцентПлатежа       - Число - Процент платежа по этапу.
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС.
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В т.ч. %1'"), ТекстНДС);
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции // СформироватьТекстНДСЭтапаОплаты()

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Строка - отформатированное должным образом строковое представление суммы.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты",КодВалюты);
 	Возврат ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
// Возвращаемое значение:
//  СтрокаСумма - Строка - сумма прописью.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Если ЗначениеЗаполнено(КодВалюты) Тогда 
		Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты",КодВалюты);
		СтрокаСумма = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	Иначе
		СтрокаСумма = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	КонецЕсли;
	Возврат СтрокаСумма;
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа.
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст.
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//
// Возвращаемое значение:
//  Результат - Строка - текстовое представление ставки НДС.
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	Возврат ФормированиеПечатныхФорм.ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС);
	
КонецФункции // ТекстНДСПоСтавке()

// Используется для простановки ответственного при создании электронного документа.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
// Возвращаемое значение:
//  ОтветственныйПоЭД - СправочникСсылка.Пользователи - ответственный за электронный документооборот по данному соглашению.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент.Партнер) Тогда
		Если Контрагент.Партнер.Метаданные().Реквизиты.Найти("ОсновнойМенеджер")<> Неопределено 
			И ЗначениеЗаполнено(Контрагент.Партнер.ОсновнойМенеджер) Тогда 
			ОтветственныйПоЭД = Контрагент.Партнер.ОсновнойМенеджер;
		КонецЕсли;
	КонецЕсли;
	Возврат ОтветственныйПоЭД;
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
// Возвращаемое значение:
//  ЭтоФизЛицо - Булево - истина, если контрагент физическое лицо.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЭтоФизЛицо = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
		ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа.
// 
// Параметры:
//  Товары 	- Таблица значений - Табличная часть документа 
//  ИспользоватьСкидки 	- Булево - Признак использования скидки
//
// Возвращаемое значение:
//   Булево - признак необходимости вывода данных о скидках.
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	Если ИспользоватьСкидки Тогда
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			Пока Товары.Следующий() Цикл
				Если ЗначениеЗаполнено(Товары.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НужноВыводитьСкидки()

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Возврат ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	
КонецФункции // ИмяДополнительнойКолонки()

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Возвращает числовое значение ставки НДС по значению перечисления.
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС.
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом.
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Результат = Неопределено;
	
	Если СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
		Результат = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтавкуНДСЧислом()

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление;
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Возврат ЗначениеНДС;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов.

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы.
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа.
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект.
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов.
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
	Попытка
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.Изменил = ПользователиКлиентСервер.ТекущийПользователь();
		ФайлОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " (" + НСтр("ru = 'подробности см. в Журнале регистрации'") + ").";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
	
КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
// Возвращаемое значение:
//  Булево - результат проверки.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  Источник - ДокументОбъект - проверяемый объект.
//  РедактированиеРазрешено - Булево - возвращает разрешено или нет редактирование.
//
Процедура ПроверитьВозможностьРедактированияОбъекта(Источник, РедактированиеРазрешено) Экспорт

	СсылкаНаОбъект = Источник.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СостояниеВерсииЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()
		И НЕ (Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен) Тогда
		РедактированиеРазрешено = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - Булево, Неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//                                                       (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки.
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Результат = Истина;
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист И НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик события "ОбработкаЗаполнения" электронных документов.
// 
// Параметры:
//  Источник		 		- Объект 	   - Электронный документ;
//	ДанныеЗаполнения 		- Произвольный - Значение, которое используется как основание для заполнения;
//  СтандартнаяОбработка    - Булево       - Признак выполнения стандартной (системной) обработки события.
//
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчетеОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчете(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю.

// Устарела.Следует использовать ЭлектронноеВзаимодействиеПереопределяемый.СоответствиеКодовРеквизитовИПредставлений.
// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - ТаблицаЗначений - соответствие параметров для типов метаданных их пользовательским
//                          представлениям содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
	Макет                   = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ПользовательскоеПредставлениеОбязательныхПолей");
	ОбластьДокументов       = Макет.ПолучитьОбласть("ОбязательныеПоля");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ТипИсточника  = Тип(СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст));
		НоваяСтрока.Параметр      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		НоваяСтрока.Представление = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	// БанковскиеСчетаКонтрагентов
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "БанковскиеСчетаКонтрагентов";
	НовСтрока.Порядок 		= 1;
	// Номенклатура поставщиков
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "НоменклатураПоставщиков";
	НовСтрока.Порядок 		= 2;
	
	Возврат Таблица;
	
КонецФункции

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных.
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	// Переопределим структуру возврата
	СтруктураВозврата = Новый Структура();
	
	ОбъектXML = Новый ЧтениеXML;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
	ВремФайл = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ВремФайл);
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		ОбъектXML.Закрыть();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " (" + НСтр("ru = 'подробности см. в Журнале регистрации'") + ").";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Разбор файла с реквизитами контрагента'"), ТекстОшибки, ТекстСообщения);
		
		РезультатРазбора = Ложь;
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		СвойствоЭД = ЭД.Свойства().Получить("Контакты");
		Если НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено Тогда
			Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
				Если ТекКонтакт.Тип = "Телефон рабочий" Тогда
					СтруктураВозврата.Вставить("ТелефонПартнера", ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("ТелефонКЛ",       ТекКонтакт.Значение);
				ИначеЕсли ТекКонтакт.Тип = "Почта" Тогда
					СтруктураВозврата.Вставить("АдресЭППартнера", ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("АдресЭПКЛ",       ТекКонтакт.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");
		Если СвойствоЭД <> Неопределено Тогда
			
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				Для Каждого ТекСв Из ЗнДанных.РасчетныйСчет Цикл
					
					СтруктураВозврата.Вставить("НомерСчета",         ТекСв.НомерСчета);
					СтруктураВозврата.Вставить("БИКБанка",           ТекСв.Банк.БИК);
					СтруктураВозврата.Вставить("КоррСчетБанка",      ТекСв.Банк.СчетКорреспондентский);
					СтруктураВозврата.Вставить("ПредставлениеБанка", ТекСв.Банк.Наименование);
					СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента", Истина);
					
					Если НЕ ТекСв.БанкКорреспондент = Неопределено Тогда
						СтруктураВозврата.Вставить("БИКБанкаДляРасчетов",           ТекСв.БанкКорреспондент.БИК);
						СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов",      ТекСв.БанкКорреспондент.СчетКорреспондентский);
						СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов", ТекСв.БанкКорреспондент.Наименование);
						СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов",   Истина);
					КонецЕсли;
					Прервать;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты", Истина);
		ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
		
		СвойствоЭД = ЭД.Свойства().Получить("ОфициальноеНаименование");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда			
				ЭтоЮрЛицо = Истина
			Иначе
				ЭтоЮрЛицо = Ложь
			КонецЕсли;
		КонецЕсли;
	
		Если ЭтоЮрЛицо Тогда
			СтруктураВозврата.Вставить("ВидКомпании", 0);
			СвойствоИНН = ЭД.Свойства().Получить("ИНН");
			Если СвойствоИНН <> Неопределено Тогда
				СтруктураВозврата.Вставить("ИНН", ЭД.Получить(СвойствоИНН));
			КонецЕсли;
			СвойствоКПП = ЭД.Свойства().Получить("КПП");
			Если СвойствоКПП <> Неопределено Тогда
				СтруктураВозврата.Вставить("КПП", ЭД.Получить(СвойствоКПП));
			КонецЕсли;
			СвойствоОКПО = ЭД.Свойства().Получить("ОКПО");
			Если СвойствоОКПО <> Неопределено Тогда
				СтруктураВозврата.Вставить("КодПоОКПО", ЭД.Получить(СвойствоОКПО));
			КонецЕсли;
			СвойствоОФНаим = ЭД.Свойства().Получить("ОфициальноеНаименование");
			Если СвойствоОФНаим <> Неопределено Тогда
				СтруктураВозврата.Вставить("ПолноеНаименование", ЭД.Получить(СвойствоОфНаим));
				СтруктураВозврата.Вставить("ПолноеЮридическоеНаименование", ЭД.Получить(СвойствоОфНаим));
			КонецЕсли;
			
			СвойствоЮрАдрес = ЭД.Свойства().Получить("ЮридическийАдрес");
			Если СвойствоЮрАдрес <> Неопределено Тогда
				ЗнЮрАдрес = ЭД.Получить(СвойствоЮрАдрес);
				Если ЗнЮрАдрес <> Неопределено Тогда
					СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
					ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
					Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
						Если ТекСв.Тип = "Почтовый индекс" Тогда
							ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
							ЮрАдресЗначения.Представление =  "Индекс";
							ЮрАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
							ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
							ЮрАдресЗначения.Представление = "НаселенныйПункт";
							ЮрАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 ТОгда
							ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
							ЮрАдресЗначения.Представление = ТекСв.Тип;
							ЮрАдресЗначения.Значение = ТекСв.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
				КонецЕсли
			КонецЕсли;
			
			СвойствоРуководитель = ЭД.Свойства().Получить("Руководитель");
			Если СвойствоРуководитель <> Неопределено Тогда
				ЗнРуководитель = ЭД.Получить(СвойствоРуководитель);
				Если ЗнРуководитель <> Неопределено Тогда
					СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");
					Если СвойствоФизЛицо <> Неопределено Тогда
						ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);
						Если ФизЛицо <> Неопределено Тогда
							СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица", Истина);
							ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизЛицо.ПолноеНаименование);
							СтруктураВозврата.Вставить("ФамилияКЛ",  ФИО.Фамилия);
							СтруктураВозврата.Вставить("ИмяКЛ",      ФИО.Имя);
							СтруктураВозврата.Вставить("ОтчествоКЛ", ФИО.Отчество);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтруктураВозврата.Вставить("ВидКомпании", 2);
			СвойствоИНН = ЭД.Свойства().Получить("ИНН");
			Если СвойствоИНН <> Неопределено Тогда
				СтруктураВозврата.Вставить("ИНН", ЭД.Получить(СвойствоИНН));
			КонецЕсли;
			
			СвойствоОКПО = ЭД.Свойства().Получить("ОКПО");
			Если СвойствоОКПО <> Неопределено Тогда
				КодПоОКПО = ЭД.Получить(СвойствоОКПО);
				СтруктураВозврата.Вставить("КодПоОКПО", ЭД.Получить(СвойствоОКПО));
			КонецЕсли;
			
			СвойствоОФНаим = ЭД.Свойства().Получить("ПолноеНаименование");
			Если СвойствоОФНаим <> Неопределено Тогда
				СтруктураВозврата.Вставить("ПолноеНаименование", ЭД.Получить(СвойствоОфНаим));
				СтруктураВозврата.Вставить("ПолноеЮридическоеНаименование", ЭД.Получить(СвойствоОфНаим));
			КонецЕсли;
			
			СвойствоЮрАдрес = ЭД.Свойства().Получить("АдресРегистрации");
			Если СвойствоЮрАдрес <> Неопределено Тогда
				
				ЗнЮрАдрес = ЭД.Получить(СвойствоЮрАдрес);
				Если ЗнЮрАдрес <> Неопределено Тогда
					
					СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
					ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
					Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
						Если ТекСв.Тип = "Почтовый индекс" Тогда
							ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
							ЮрАдресЗначения.Представление = "Индекс";
							ЮрАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
							ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
							ЮрАдресЗначения.Представление = "НаселенныйПункт";
							ЮрАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
							ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
							ЮрАдресЗначения.Представление = ТекСв.Тип;
							ЮрАдресЗначения.Значение = ТекСв.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;			
		
		СвойствоЭД = ЭД.Свойства().Получить("Наименование");
		Если СвойствоЭД <> Неопределено Тогда
			СтруктураВозврата.Вставить("Название", ЭД.Получить(СвойствоЭД));
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("Адрес");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				
				СтруктураВозврата.Вставить("ФактическийАдрес", ЗнДанных.Представление);
				ФактическийАдресЗначенияПолей = Новый СписокЗначений;
				Для Каждого ТекСв Из ЗнДанных.АдресноеПоле Цикл
					Если ТекСв.Тип = "Почтовый индекс" Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление = "Индекс";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление = "НаселенныйПункт";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 ТОгда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Значение = ТекСв.Значение;
						ФактАдресЗначения.Представление = ТекСв.Тип;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей", ФактическийАдресЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Разбор файла с реквизитами контрагента'"), ТекстОшибки, ТекстСообщения);
		
		РезультатРазбора = Ложь;
		Возврат;
		
	КонецПопытки;
	
	РезультатРазбора = Истина;
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект. Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста),
// то используется функция БСП: ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка - Ссылка - произвольная ссылка.
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - Структура - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки.

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокВозврата.Добавить(
			Документы.ПриобретениеТоваровУслуг.ПустаяСсылка(), 
			Метаданные.Документы.ПриобретениеТоваровУслуг.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот 
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокВозврата.Добавить(
			Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка(), 
			Метаданные.Документы.ПриобретениеУслугПрочихАктивов.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ОтчетКомиссионера.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионера.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ОтчетКомиссионераОСписании.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионераОСписании.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		СписокВозврата.Добавить(
			Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка(), 
			 Метаданные.Документы.РегистрацияЦенНоменклатурыПоставщика.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка(), 
			Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказКлиента.ПустаяСсылка(),
			Метаданные.Документы.ЗаказКлиента.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
	КонецЕсли;

	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемента справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, ЮрФизЛицо, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, РеквизитыОрганизации);
	СтруктураВозврата.ОКПО = РеквизитыОрганизации.КодПоОКПО;
	
	ЮрАдресОрганизации = ПолучитьАдресИзКонтактнойИнформации(Организация, "Юр");
	СтруктураВозврата.ЮридическийАдрес     = ЮрАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейЮрАдрес = ЮрАдресОрганизации.ЗначенияПолей;
	
	ФактАдресОрганизации = ПолучитьАдресИзКонтактнойИнформации(Организация, "Факт");
	СтруктураВозврата.ФактическийАдрес       = ФактАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейФактАдрес = ФактАдресОрганизации.ЗначенияПолей;
	
	СтруктураВозврата.Телефон = ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	Если СтруктураВозврата.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация);
		СтруктураВозврата.Руководитель          = СтруктураОтветственных.Руководитель;
		СтруктураВозврата.ДолжностьРуководителя = СтруктураОтветственных.РуководительДолжность;
	Иначе
		СтруктураВозврата.СвидетельствоНомер = РеквизитыОрганизации.СвидетельствоСерияНомер;
		СтруктураВозврата.СвидетельствоДата  = РеквизитыОрганизации.СвидетельствоДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность.

// Метод заполняет соответствие выгружаемым документам дату и номер основания (договора).
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок на документы ИБ (в качестве возможных значений следует принимать те типы 
//                          документов, на основании которых в данном прикладном решении формируется электронный
//                          документ вида «Акт приемки-сдачи работ (услуг).
//  ВозвращаемоеСоответствие - Соответствие - в случае, если требуемые реквизиты у договора не заполнены
//                             или при невозможности получения данных реквизитов, то помещать пустые 
//                             значения указанных типов.
//                             Соответствие со следующими свойствами:
//                             * ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра;
//                             * значение соответствия - Структура:
//                               ** НомерДоговора - Строка;
//                               ** ДатаДоговора - Дата.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - данные для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
 Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Ид КАК Ид
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|		КОНЕЦ КАК Коэффициент,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТовары.Упаковка КАК Упаковка,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие),
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	ОбработатьТаблицуТоваров(ТаблицаТоваров);

	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПараметров.Вставить("Исполнитель", 	  	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	 	РеквизитыШапки.Организация);
	СтруктураПараметров.Вставить("Контрагент",			РеквизитыШапки.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  	СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  	ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  	СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  	СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  	РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("ИдентификаторПлатежа",РеквизитыШапки.ИдентификаторПлатежа);
	СтруктураПараметров.Вставить("Курс", 			  	РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 			  	РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("СуммаНДС", 		  	ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			  	СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  	СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("АдресДоставки",	  	РеквизитыШапки.АдресДоставки);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("Грузоотправитель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  РеквизитыШапки.Грузоотправитель, СтруктураЭД.Организация));
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	СтруктураПараметров.Вставить("Грузополучатель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  РеквизитыШапки.Грузополучатель, СтруктураЭД.Контрагент));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",					РеквизитыШапки.ЦенаВключаетНДС);
 	// данные по расч.счетам
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетКонтрагента);
		СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетОрганизации) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетОрганизации);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузоотправителя", БанковскийСчет);
	КонецЕсли;
 	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетГрузополучателя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузополучателя", БанковскийСчет);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, БазоваяЕдиницаКод, УпаковкаКод");
	                                                      
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Ид КАК Ид,
	|	ВложенныйЗапрос.Упаковка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|		КОНЕЦ КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.КоличествоУпаковок = 0
	|				ТОГДА ТаблицаТовары.Цена
	|			ИНАЧЕ ТаблицаТовары.Сумма / ТаблицаТовары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|		ТаблицаТовары.Упаковка КАК Упаковка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 	  	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	 	РеквизитыШапки.Организация);
	СтруктураПараметров.Вставить("Контрагент",			РеквизитыШапки.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  	СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  	ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  	СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  	СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  	РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			  	РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 			  	РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("СуммаНДС", 		  	ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			  	СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  	СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("АдресДоставки",	  	РеквизитыШапки.АдресДоставки);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("Грузоотправитель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  РеквизитыШапки.Грузоотправитель, СтруктураЭД.Организация));
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	СтруктураПараметров.Вставить("Грузополучатель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  РеквизитыШапки.Грузополучатель, 
														  СтруктураЭД.Контрагент));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",					РеквизитыШапки.ЦенаВключаетНДС);
 	// данные по расч.счетам
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетКонтрагента);
		СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетОрганизации) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетОрганизации);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузоотправителя", БанковскийСчет);
	КонецЕсли;
 	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетГрузополучателя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузополучателя", БанковскийСчет);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, БазоваяЕдиницаКод, УпаковкаКод");                                               
	
КонецПроцедуры

// Заполнение состояния ЭДО.
//
// Параметры:
//  Форма - Форма - текущая форма.
//
Процедура ЗаполнитьСостояниеЭДО(Форма) Экспорт
	
	
	
КонецПроцедуры

// Возвращает список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭД			 - Перечисление.ВидыЭД - вид электронного документа
//  СписокСпособовОбработки - Строка - список для добавления операций по отражению электронного документа.
//
Процедура СписокОперацийВидаЭД(ВидЭД,СписокСпособовОбработки) Экспорт 
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеУслугПрочихАктивов", НСтр("ru = 'Приобретение услуг и прочих активов'"), Истина);
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"));
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"), Истина);
		СписокСпособовОбработки.Добавить("ВозвратТоваровОтКлиента", НСтр("ru = 'Возврат товаров от клиента'"));
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		СписокСпособовОбработки.Добавить("КорректировкаПриобретения", НСтр("ru = 'Корректировка поступления'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Акт на передачу прав'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		СписокСпособовОбработки.Добавить("РегистрацияЦенНоменклатурыПоставщика", НСтр("ru = 'Регистрация цен номенклатуры поставщика'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		СписокСпособовОбработки.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда	
		СписокСпособовОбработки.Добавить("ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передача товаров между организациями'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		СписокСпособовОбработки.Добавить("ЗаказКлиента", НСтр("ru = 'Заказ клиента'"),Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"),Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"), Истина);
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"));
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		СписокСпособовОбработки.Добавить("ЗаявкаНаРасходованиеДенежныхСредств", НСтр("ru = 'Заявка на расходование денежных средств'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		СписокСпособовОбработки.Добавить("ОтчетКомиссионера", НСтр("ru = 'Отчет комиссионера (агента) о продажах'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		СписокСпособовОбработки.Добавить("ОтчетКомиссионераОСписании", НСтр("ru = 'Отчет комиссионера о списании'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"), Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - переопределяет имя объекта метаданных для способа обработки входящего электронного документа,
//			   по-умолчанию совпадает с именем способа обработки.
//
// Параметры:
//  СпособОбработки - Строка - один из доступных способов обработки входящего документа
//  ИмяДокумента - Строка - переменная в которую будет помещено имя объекта метаданных, соответствующее переданному способу обработки.
//
Процедура ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента) Экспорт 
	
	
	
КонецПроцедуры

// Процедура - Переопределяет заполнение таблицы соответствия видов ЭД и способов обработки по имени профиля,
//			   который используется в форме настройки ЭДО на закладке "Входящие электронные документы".
//
// Параметры:
//  ТаблицаПрофиля	 - ТаблицаЗначений - таблица, содержащая соответствие видов электронных документов и способов обработки
//  Профиль			 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
//
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль) Экспорт 
	
КонецПроцедуры 

// Ищет документ владелец электронного документа, который мог быть получен через ЕГАИС.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ, полученный через ЕГАИС.
//  ИдентификаторДокумента - Строка - Идентификатор документа отправителя.
//
Процедура НайтиРанееПолученныйДокумент(Документ, ИдентификаторДокумента) Экспорт
	
	
	
КонецПроцедуры

// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хоз. операции).
//
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец,         					НСтр("ru = 'Реализация товаров и услуг'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктИсполнитель,        					НСтр("ru = 'Акт выполненных работ для клиента'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав,     					НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетФактура,            					НСтр("ru = 'Счет-фактура выданный'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель, НСтр("ru = 'Корректировка реализации'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КорректировочныйСчетФактура, 				НСтр("ru = 'Счет-фактура выданный (корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтветНаЗаказ,           					НСтр("ru = 'Заказ клиента'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ЗаказТовара,            					НСтр("ru = 'Заказ поставщику'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ПрайсЛист,              					НСтр("ru = 'Коммерческое предложение клиенту'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетНаОплату,           					НСтр("ru = 'Счет на оплату клиенту'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара, 		НСтр("ru = 'Отчет комитенту о списании'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, 		НСтр("ru = 'Отчет комитенту о продажах'"));
	
КонецПроцедуры

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКоманд - Структура - структура состава команд ЭДО.
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданныйАванс");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураКомиссионеру");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплатуКлиенту");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КоммерческоеПредложениеКлиенту");
	СоставКомандЭДО.Исходящие.Добавить("ЖурналДокументов.ОтчетыКомитентам");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитенту");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОСписании");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовПродажи");
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовНДС");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриобретениеТоваровУслуг");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
	СоставКомандЭДО.Входящие.Добавить("Документ.ВозвратТоваровОтКлиента");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученныйАванс");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураКомитента");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	СоставКомандЭДО.Входящие.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
	СоставКомандЭДО.Входящие.Добавить("ЖурналДокументов.ОтчетыКомиссионеров");
	СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионера");
	СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионераОСписании");
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПриобретения");
	СоставКомандЭДО.Входящие.Добавить("Обработка.ЖурналДокументовЗакупки");
 	СоставКомандЭДО.Входящие.Добавить("Обработка.ЖурналДокументовНДС");
   		
	СоставКомандЭДО.Интеркампани.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
	СоставКомандЭДО.Интеркампани.Добавить("Документ.ВозвратТоваровМеждуОрганизациями");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуКлиенту");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КоммерческоеПредложениеКлиенту");
	СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ОтчетыКомитентам");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитенту");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитентуОСписании");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.БезПодписи.Добавить("Обработка.ЖурналДокументовПродажи");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриобретениеТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
	СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ОтчетыКомиссионеров");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионера");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионераОСписании");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаПриобретения");
	СоставКомандЭДО.БезПодписи.Добавить("Обработка.ЖурналДокументовЗакупки");
	
КонецПроцедуры

// Определяет является ли документ информационной базы счет-фактурой.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ информационной базы.
//  Результат - Булево - является ли документ счет-фактурой.
//
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученныйАванс")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураКомиссионеру")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураКомитента")
		Тогда
		
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет Счета-Фактуры по документам основаниям.
// 
// Параметры:
//  МассивОснований - Массив - массив ссылок на документы основания.
//  МассивСФ - Массив - массив для заполнения ссылками на счета-фактуры.
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа.
// 
Процедура ЗаполнитьСчетаФактурыПоДокументамОснования(МассивОснований, МассивСФ, НаправлениеЭД) Экспорт
	
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ИмяДокумента = "СчетФактураПолученный";
	Иначе
		ИмяДокумента = "СчетФактураВыданный";
	КонецЕсли;
	
	Для Каждого Основание Из МассивОснований Цикл
		РезультатАнализа = Документы[ИмяДокумента].СчетаФактурыПоОснованию(Основание);
		Для Каждого НайденныйСФ Из РезультатАнализа Цикл
			МассивСФ.Добавить(НайденныйСФ.Ссылка);
		КонецЦикла;
	КонецЦикла
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями.

// Переопределяет разрешение использовать механизм прямого обмена между организациями.
//
// Параметры:
//  Отказ - Булево - Истина, если использование обмена между организациями запрещено;
//    Ложь - в противном случае;
//    Значение по умолчанию - Ложь;
//
// Пример:
//	Если <Выражение> Тогда
//		Отказ = Истина;
//	КонецЕсли;
//
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
КонецПроцедуры

// Описывает действия, которые нужно выполнить после формирования электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент	 - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Процедура ЭлектронныйДокументСформирован(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом

Процедура ЗаполнитьДопДанныеВСтроке(СтрокаТовары)
	
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("КодХарактеристики");
	СтруктураДопДанных.Вставить("Характеристика");
	СтруктураДопДанных.Вставить("СрокГодности");
	СтруктураДопДанных.Вставить("Коэффициент");
	СтруктураДопДанных.Вставить("Штрихкод");
	СтруктураДопДанных.Вставить("УпаковкаНаименование");
	СтруктураДопДанных.Вставить("УпаковкаКод");
	ЗаполнитьЗначенияСвойств(СтруктураДопДанных, СтрокаТовары);
	СтрокаТовары.ДопДанныеНеПодписанные = СтруктураДопДанных;
	
	СтруктураДопДанныхПодписанные = Новый Структура;
	СтруктураДопДанныхПодписанные.Вставить("СтавкаНДС", Строка(СтрокаТовары.СтавкаНДС));
	
	СтрокаТовары.ДопДанныеПодписанные = СтруктураДопДанныхПодписанные;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", КорневойЭлементДерева = "", ДатаКИ = Неопределено)
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		Или СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП, КорневойЭлементДерева);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
	
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН", СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
			
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ПолноеНаименование)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		КонецЕсли;
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия", СведенияОбУчастнике.Фамилия, КорневойЭлементДерева);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя", СведенияОбУчастнике.Имя, КорневойЭлементДерева);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество", СведенияОбУчастнике.Отчество, КорневойЭлементДерева);
		
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура();
	ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			Если АдресУчастника.ПроизвольныйАдрес Тогда
				ТипАдреса = "Произвольный";
			Иначе
				ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");				
			КонецЕсли;			
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Контакт.Телефон",
									СведенияОбУчастнике.Телефоны, КорневойЭлементДерева);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) 
		 И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета", НомерСчета, КорневойЭлементДерева);
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.НаимБанк", БанкНаименование, КорневойЭлементДерева);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.БИК", БИК, КорневойЭлементДерева);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) 
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Структурированный")
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		ИЛИ СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Наименование.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Наименование.ФИОИП.Фамилия",
									ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Наименование.ФИОИП.Имя",
									ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Наименование.ФИОИП.Отчество",
									ФИО.Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура();
	ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", "Факт");
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	АдресУчастника.Удалить("ПроизвольныйАдрес");		
	
	Если ТипАдреса = "Произвольный" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст, КорневойЭлементДерева);
	ИначеЕсли ТипАдреса = "Структурированный" ИЛИ ТипАдреса = "Иностранный" Тогда
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("КодГАР");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
			ПолныйПуть = ВидУчастника + ".Адрес.Иностранный.КодСтраны";
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
				АдресУчастника.Удалить("КодСтр");
				АдресУчастника.Удалить("АдрТекст");				
			Иначе
				АдресУчастника.Удалить("КодСтраны");
				АдресУчастника.Удалить("АдресТекст");				
			КонецЕсли;			
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресРФ" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
	
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.КодГАР",
									Элемент.Значение, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // Передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		
		Если ИмяРеквизита = "СтавкаНДС" ИЛИ ИмяРеквизита = "НалСтВел" Тогда
			Результат = НайтиПеречисление("НДС", Результат);
		ИначеЕсли ИмяРеквизита = "ВариантОплаты" Тогда
			Если Результат = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения
			ИначеЕсли Результат = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления 
			ИначеЕсли Результат = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки
			КонецЕсли
		Иначе
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// Работа с контактной информацией

Функция ПолучитьАдресИзКонтактнойИнформации(Владелец, ТипАдреса = "Юр", ДатаКИ = Неопределено)
	
	Результат = Новый Структура;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресКонтрагента"].Ссылка;
	Иначе
		ВидыКИ = Неопределено;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Владелец);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, , ВидыКИ, ДатаКИ);
	
	Для Каждого Колонка Из КонтактнаяИнформация.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформация[0]);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТелефонИзКонтактнойИнформации(Владелец)
	
	Результат = ФормированиеПечатныхФорм.ПолучитьТелефонИзКонтактнойИнформации(Владелец);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресЭПИзКонтактнойИнформации(Владелец)
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидEmail";
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailПартнера"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Партнеры");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Тип",      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидEmail", ВидEmail);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.АдресЭП;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьАдресПоСтруктуреАдресаФНС(Объект, ВидАдреса, СтруктураАдресаФНС)
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	НоваяСтрока.Вид = ВидАдреса;
	
	// Сформируем адрес в виде списка значений
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("Индекс",           СтруктураАдресаФНС.Индекс);
	СтруктураАдреса.Вставить("КодРегиона",       СтруктураАдресаФНС.КодРегион);
	СтруктураАдреса.Вставить("Регион",           НазваниеРегиона(СтруктураАдресаФНС.КодРегион));
	СтруктураАдреса.Вставить("Район",            СтруктураАдресаФНС.Район);
	СтруктураАдреса.Вставить("Город",            СтруктураАдресаФНС.Город);
	СтруктураАдреса.Вставить("НаселенныйПункт",  СтруктураАдресаФНС.НаселПункт);
	СтруктураАдреса.Вставить("Дом",              СтруктураАдресаФНС.Дом);
	СтруктураАдреса.Вставить("Корпус",           СтруктураАдресаФНС.Корпус);
	СтруктураАдреса.Вставить("Квартира",         СтруктураАдресаФНС.Кварт);
	СтруктураАдреса.Вставить("Страна",           "РОССИЯ"); 
	СтруктураАдреса.Вставить("КодСтраны",        "643");
	СтруктураАдреса.Вставить("ТипДома",          "дом");
	СтруктураАдреса.Вставить("ТипКорпуса",       "корпус");
	СтруктураАдреса.Вставить("ТипКвартиры",      "кв.");
	УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, НоваяСтрока.Представление);
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураАдреса);
	
	ЗначенияПолей = Новый СписокЗначений();
	Для каждого Элемент Из СтруктураАдреса Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ЗначенияПолей.Добавить(Элемент.Значение, Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	НоваяСтрока.ЗначенияПолей = РаботаСАдресамиКлиентСервер.ПреобразоватьСписокПолейВСтроку(ЗначенияПолей);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйДок = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе	
    				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;	
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПоставщику КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда	
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора, ЭтоЗаказ = Ложь)
	
	НовСтрока = ТЗ.Добавить();
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ИмяРеквизитаВБД = "Описание" Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли ИмяРеквизитаВБД = "СумНДС" Тогда
			ИмяРеквизитаВБД = "СуммаНДС";
		ИначеЕсли ИмяРеквизитаВБД = "СтТовУчНал" Тогда
			ИмяРеквизитаВБД = "Сумма";
		ИначеЕсли ИмяРеквизитаВБД = "НалСтВел" Тогда
			ИмяРеквизитаВБД = "СтавкаНДС";
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "СуммаСНДС" Тогда
			Если ЭтоЗаказ Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение характеристики номенклатуры и упаковки.
		Если ИмяРеквизитаВБД = "НоменклатураПоставщика" Тогда
			Если ТЗ.Колонки.Найти("Характеристика") <> Неопределено Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;	
				КонецЕсли;
			КонецЕсли;
			Если ТЗ.Колонки.Найти("Упаковка") <> Неопределено Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Упаковка = НайденноеЗначение.Упаковка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				НовСтрока.Упаковка = НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НомерПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("ДатаПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("НомерПоДаннымКлиента");
	ТЗ.Колонки.Добавить("ДатаПоДаннымКлиента");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// реквизиты для связки "заказ - поступление"
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымКлиента", 		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымКлиента",  		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымПоставщика", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымПоставщика"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымПоставщика",  	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымПоставщика"));
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из ТЗ Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора, Аванс = Ложь)
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаСоставления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	НомерСчетаФактуры = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры");
	Если ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
		ДанныеЗаполненияШапки.Вставить("Корректировочный", Истина);
		НомерИсправления = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления");
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", НомерИсправления);
		ДатаИсправления = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправления");
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ДатаИсправления);
		Если ЗначениеЗаполнено(НомерИсправления) 
			 И ЗначениеЗаполнено(ДатаИсправления) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", НомерСчетаФактуры);
		ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Дата", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
		ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки,  "ДатаИсправления"));
	КонецЕсли;
	
	ВалКод = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВалКод");
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалКод);
	ДанныеЗаполненияШапки.Вставить("Валюта", Валюта);
	
	// Получим данные по комиссионеру
	Комиссионер = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Комиссионер");
	Если ЗначениеЗаполнено(Комиссионер) Тогда
		// Cчет-фактура выставлена комитентом
		ИндексОрганизация = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация");
		СтрокаОрганизация = ДеревоРазбора.Строки.Найти(ИндексОрганизация, "ИндексСтроки", Истина);
		ДанныеЗаполненияШапки.Вставить("Покупатель", СсылкаНаОбъектПоИННКПП("Контрагенты", 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОрганизация, "ИНН", Истина, ДеревоРазбора), 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОрганизация, "КПП", Истина, ДеревоРазбора)));
		ДанныеЗаполненияШапки.Вставить("Организация", Комиссионер);
	Иначе
		// Cчет-фактура на поступление
		ДанныеЗаполненияШапки.Вставить("Организация", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора));
		
	КонецЕсли;
	
	// Данные по контрагенту
	ДанныеЗаполненияШапки.Вставить("Контрагент", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("Партнер",    ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Партнер", Истина, ДеревоРазбора));

	ИндексКотрагент = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Контрагент");
	СтрокаКонтрагент = ДеревоРазбора.Строки.Найти(ИндексКотрагент, "ИндексСтроки", Истина);
	ДанныеЗаполненияШапки.Вставить("ИННКонтрагента", ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагент, "ИНН", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("КППКонтрагента", ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагент, "КПП", Истина, ДеревоРазбора));
	
	ДанныеЗаполненияШапки.Вставить("Сумма",       ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СуммаДокумента", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",    ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СумНДС", Истина, ДеревоРазбора));
	
	// Получим документы-основания
	СтрокаДокументыОснования = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования");
	Если СтрокаДокументыОснования <> Неопределено Тогда
		МассивДокументовОснований = Новый Массив;
		Для Каждого Строка Из СтрокаДокументыОснования.Строки Цикл
			Если ЗначениеЗаполнено(Строка.СсылкаНаОбъект) Тогда
				МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
			КонецЕсли;
		КонецЦикла;
		ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ПолученВЭлектронномВиде", Истина);
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	
	Если Аванс Тогда
		Авансы = Документы.СчетФактураПолученныйАванс.ПустаяСсылка().Авансы.Выгрузить();
		Отбор = Новый Структура("Реквизит", "СтрокаТЧ");
		СтрокиТЧ = СтрокаДляЗагрузки.Строки.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ЗаполнитьСтрокуТЧ(Авансы, СтрокаТЧ.Строки, ДеревоРазбора);
		КонецЦикла;
		ДанныеДляОбъекта.Вставить("Авансы", Авансы);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НоменклатураПоставщика");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	// а также НомерСтрокиДокументаПоставщика
	НомерСтрокиДокумента = 0;
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
			ТекСтрока.Содержание = ТекСтрока.НоменклатураПоставщика;
		КонецЕсли;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ЧастичнаяОплата = истина;
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
		
	СтрокаСрокПлатежа = СтрокаДляЗагрузки.Строки.Найти("ДатаОкончанияДействияСчета", "Реквизит");
	ДанныеЗаполненияШапки.Вставить("СрокПлатежа", СтрокаСрокПлатежа.ЗначениеРеквизита);
	
	СтрокаСуммаДокумента = СтрокаДляЗагрузки.Строки.Найти("СуммаИтог", 		"Реквизит");
	СтрокаСуммаНДС 		 = СтрокаДляЗагрузки.Строки.Найти("СуммаНалогаИтог","Реквизит");
	
	Если ЧастичнаяОплата И ЗначениеЗаполнено(СтрокаСуммаДокумента.ЗначениеРеквизита) Тогда
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита + СтрокаСуммаНДС.ЗначениеРеквизита);
	Иначе
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерДокументаОснования"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаДокументаОснования"));
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения 
	
	// найдем ВидЦеныПоставщика или создадим новый
	ВидЦеныПоставщика = ОпределитьВидЦеныПоставщика(ДанныеЗаполненияШапки.Партнер, СтрокаДляЗагрузки.Строки.Найти("ТипыЦен").ЗначениеРеквизита);
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика, а также обязательный реквизит ВидЦеныПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПоставщика.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПоставщика.Упаковка;
			КонецЕсли;
		КонецЕсли;
		ТекСтрока.ВидЦеныПоставщика = ВидЦеныПоставщика;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказКлиента.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказКлиента.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		КонецЕсли;
    КонецЦикла;
		
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	
	//Заполним значения по умолчанию в ТЧ
	ТЗ.ЗаполнитьЗначения(Перечисления.ВариантыОбеспечения.НеТребуется, "ВариантОбеспечения");
	ТЗ.ЗаполнитьЗначения(ТекущаяДата(), "ДатаОтгрузки");
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказПоставщику.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		КонецЕсли;
	КонецЦикла;
	
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПоставщика.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПоставщика.Упаковка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 			   ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",			   ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионера.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ОтчетКомиссионера.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();  	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			
			НоваяСтрока = ТЗ.Добавить();
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;
				
				Если ИмяРеквизитаВБД = "ДополнительныеРеквизиты" Тогда
					
					СтруктураДополнительныхРеквизитов = ТекСтрока.ЗначениеРеквизита;
					Если СтруктураДополнительныхРеквизитов.Свойство("ДатаПродажи") Тогда
						НоваяСтрока["ДатаСчетаФактурыКомиссионера"] = СтруктураДополнительныхРеквизитов.ДатаПродажи;
					КонецЕсли;
					
					// Заполним информацию о покупателе
					ДанныеПокупателя = Новый Структура("Наименование, ИНН, КПП, ЮрАдрес, ФактАдрес");
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательНаименование") Тогда
						ДанныеПокупателя.Наименование = СтруктураДополнительныхРеквизитов.ПокупательНаименование;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательИНН") Тогда
						ДанныеПокупателя.ИНН = СтруктураДополнительныхРеквизитов.ПокупательИНН;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательКПП") Тогда
						ДанныеПокупателя.КПП = СтруктураДополнительныхРеквизитов.ПокупательКПП;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательЮрАдрес") Тогда
						ДанныеПокупателя.ЮрАдрес = СтруктураДополнительныхРеквизитов.ПокупательЮрАдрес;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательФактАдрес") Тогда
						ДанныеПокупателя.ФактАдрес = СтруктураДополнительныхРеквизитов.ПокупательФактАдрес;
					КонецЕсли;
					
					// Попробуем найти среди существующих
					Покупатель = СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеПокупателя.ИНН, ДанныеПокупателя.КПП);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
						Покупатель = СоздатьКонтрагентаВБД(ДанныеПокупателя)
					КонецЕсли;
					
					НоваяСтрока.Покупатель = Покупатель;
					
				КонецЕсли;
				
				Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
		
		ТекущийПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаПродажиНДС = Окр(ТекСтрока.СуммаПродажи * ТекущийПроцентНДС / (1 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЦикла;
	
	Если ТЗ.Итог("СуммаПродажиНДС") > 0 Тогда
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	Иначе
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	КонецЕсли;
	
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("Сумма"), "СуммаСНДС");
	ТЗ.Колонки.Удалить("Сумма");
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионераОСписании.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
   	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура();
	ДанныеЗаполнения = Новый Структура();
	Товары = Документы.КорректировкаПриобретения.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполнения.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Если СтрокаРеквизита.Реквизит = "Основание" Тогда
						ИмяРеквизита = "ДокументОснование";
					Иначе
						ИмяРеквизита = СтрокаРеквизита.Реквизит;
					КонецЕсли;
					ДанныеЗаполнения.Вставить(ИмяРеквизита, Реквизит);
				КонецЕсли;
				
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// Дополним ДанныеЗаполнения реквизитами основания
	ДокументОснование = Неопределено;
	Если ДанныеЗаполнения.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование; 
		
		ТекстЗапроса = "";
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда 
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Склад				 КАК Склад,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.Сделка				 КАК Сделка,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	ДанныеДокумента.ПоступлениеПоЗаказам КАК ПоступлениеПоЗаказам
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда 
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка				 КАК ДокументОснование,
			|	ДанныеДокумента.Партнер				 КАК Партнер,
			|	ДанныеДокумента.Контрагент			 КАК Контрагент,
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Организация			 КАК Организация,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	Ложь								 КАК ПоступлениеПоЗаказам
			|
			|ИЗ
			|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ДанныеЗаполнения.Вставить(Колонка.Имя);
			КонецЦикла;
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Товары.Итог("СуммаНДС") > 0 Тогда
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		Иначе	
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ЦенаВключаетНДС", Ложь);
		
	КонецЕсли;
	
	// Вид операции ЭД определяет хоз. операцию документа
	ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ИсправлениеОшибок);
	Иначе
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон);
	КонецЕсли;
	
	ЭтоКорректировкаПриобретенияУслуг = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// Заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
		
		Если ЭтоКорректировкаПриобретенияУслуг Тогда
			ТекСтрока.Содержание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.НоменклатураПоставщика, "Наименование");
			ТекСтрока.НоменклатураПоставщика = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполнения);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеТоваров(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("Курс", 1);
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Поставщик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Плательщик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Упаковка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод"));
	
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		МассаНетто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
		
		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ИдТовараУКонтрагента");
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
		НоменклатураПоставщика = НайтиСоздатьНоменклатуруПоставщика(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		НоваяСтрока.НоменклатураПоставщика = НоменклатураПоставщика;
		НоваяСтрока.Номенклатура = НоменклатураПоставщика.Номенклатура;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеРабот(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("Курс", 1);
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Заказчик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Исполнитель";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Упаковка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияКод"));
	
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаСНДС");
		
		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.ИдТовараУКонтрагента");
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
				"ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
		НоменклатураПоставщика = НайтиСоздатьНоменклатуруПоставщика(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		НоваяСтрока.НоменклатураПоставщика = НоменклатураПоставщика;
		НоваяСтрока.Номенклатура = НоменклатураПоставщика.Номенклатура;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслугПоПередачеРабот(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("Курс", 1);
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Заказчик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Исполнитель";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Описание");
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументПриобретенияТоваровУслуг(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьВозвратТоваровОтПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументВозвратаТоваровОтПокупателя(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументСчетФактура(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;

КонецФункции

Функция НайтиСоздатьСчетФактуруАванс(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора, Истина);
	ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	Авансы = ДанныеДляЗагрузки.Авансы;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		ДокументОбъект = Документы.СчетФактураПолученныйАванс.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
		ДокументОбъект.Заполнить(ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	ДокументОбъект.НомерВходящегоДокумента = ДанныеШапки.Номер;
	ДокументОбъект.ДатаВходящегоДокумента = ДанныеШапки.Дата;
	
	ДокументОбъект.Авансы.Загрузить(Авансы);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(ВозвращаемоеЗначение, ДополнительныеСвойства, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументПоступленияУслуг(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
	Иначе  // создаем новый
		ДокументОбъект = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("СрокПлатежа") Тогда 
		ДокументОбъект.ЖелательнаяДатаПлатежа = ДанныеЗаполнения.СрокПлатежа;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НомерДокументаОснования") 
	   И ДанныеЗаполнения.Свойство("ДатаДокументаОснования") 
	   И ЗначениеЗаполнено(ДанныеЗаполнения.НомерДокументаОснования)
	   И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаДокументаОснования) Тогда
	   	РеквизитыИБ = Новый Структура;
		РеквизитыИБ.Вставить("Номер", 	ДанныеЗаполнения.НомерДокументаОснования);
		Если ТипЗнч(ДанныеЗаполнения.ДатаДокументаОснования) = Тип("Строка") Тогда
        	РеквизитыИБ.Вставить("Дата", 	ПолучитьДатуВремяИзСтроки(ДанныеЗаполнения.ДатаДокументаОснования));
		Иначе
        	РеквизитыИБ.Вставить("Дата", 	ДанныеЗаполнения.ДатаДокументаОснования);
		КонецЕсли;	
		НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ);
		Если ЗначениеЗаполнено(НайденныйДок) Тогда
			ДокументОбъект.ДокументОснование = НайденныйДок;
		КонецЕсли;	
	КонецЕсли;   
	 	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ДанныеЗаполнения.Сумма;
	
	// табл.часть расшифровка
	НовСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	НовСтрока.ВалютаВзаиморасчетов 	= ДокументОбъект.Валюта;
	НовСтрока.Сумма 				= ДокументОбъект.СуммаДокумента;
	НовСтрока.СуммаВзаиморасчетов 	= ДокументОбъект.СуммаДокумента;
	НовСтрока.СуммаНДС				= ДанныеЗаполнения.СуммаНалогаИтог;
	
    Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		НовСтрока.Партнер = ДанныеЗаполнения.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		НовСтрока.Заказ = НайденныйДок;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(ТекущаяДата(), ДокументОбъект.Ссылка);
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";   
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
			
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымКлиента", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымКлиента", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
				РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ЗаказТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ДокументОбъект.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		Если ДанныеЗаполнения.Свойство("ДополнительнаяИнформация") Тогда
			ДанныеЗаполнения.Вставить("ДопИнф", ДанныеЗаполнения.ДополнительнаяИнформация);
			ДанныеЗаполнения.Удалить("ДополнительнаяИнформация");
		КонецЕсли;
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("ДопИнф") Тогда
			ДокументОбъект.ДополнительнаяИнформация = ДанныеЗаполнения.ДопИнф;
		КонецЕсли;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
		
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// заполнение способа доставки
	Если ДанныеЗаполнения.Свойство("СпособДоставки") Тогда
	     СпособДоставки = ДанныеЗаполнения.СпособДоставки;
	     Если СпособДоставки = "Доставка" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
	     ИначеЕсли СпособДоставки = "Самовывоз" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	     КонецЕсли;
	КонецЕсли;
	
	// заполнение договора
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДокументОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда
		Для Каждого Строка из ДокументОбъект.Товары Цикл
			Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
		КонецЦикла	
	КонецЕсли;	
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ДанныеДляЗагрузки.Шапка.Сумма;
	
	Если ДанныеДляЗагрузки.Товары.Итог("СуммаСНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДанныеДляЗагрузки.Товары.Итог("СуммаНДС") = 0 Тогда 
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(ВозвращаемоеЗначение, ДополнительныеСвойства, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ДокументОбъект.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// заполнение способа доставки
	Если ДанныеЗаполнения.Свойство("СпособДоставки") Тогда
	     СпособДоставки = ДанныеЗаполнения.СпособДоставки;
	     Если СпособДоставки = "Доставка" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	     ИначеЕсли СпособДоставки = "Самовывоз" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя;
	     КонецЕсли;
	КонецЕсли;
	
	// заполнение договора
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДокументОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда
		Для Каждого Строка из ДокументОбъект.Товары Цикл
			Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Товары.Итог("СуммаСНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДанныеДляЗагрузки.Товары.Итог("СуммаНДС") = 0 Тогда 
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(ВозвращаемоеЗначение, ДополнительныеСвойства, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионера.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Для Каждого Строка ИЗ ДокументОбъект.Товары Цикл
		Строка.Сумма = Строка.СуммаСНДС - Строка.СуммаНДС;
	КонецЦикла;	
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионераОСписании.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Процедура ЗаполнитьДокументПриобретенияТоваровУслуг(Документ, ДанныеДляЗагрузки, Записывать)
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	РеквизитыИБКонтрагента = Новый Структура;
	
	// попробуем найти заказ поставщику
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение партнера, если контрагент создается новый.
	ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "Партнер"); 
	Если Не ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
		ДокументОбъект.Партнер = ПартнерКонтрагента;
	КонецЕсли;
	
	ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		ДокументОбъект.ПоступлениеПоЗаказам = Истина;
	КонецЕсли;

	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ЕстьЗаказВТЧ = Ложь;
	Для Каждого Строка Из ДанныеДляЗагрузки.Товары Цикл
		РеквизитыИБ = Новый Структура;
		Если ЗначениеЗаполнено(Строка.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", Строка.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", Строка.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			Строка.ЗаказПоставщику = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДокументОбъект.Контрагент, РеквизитыИБ);
			ЕстьЗаказВТЧ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Отказ = Ложь;
	
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(ДокументОбъект.Товары, Отказ);
	
	Если ЕстьЗаказВТЧ Тогда
		ДанныеДляЗагрузки.Товары.Свернуть("ЗаказПоставщику");
		Если ДанныеДляЗагрузки.Товары.Количество()>1 Тогда
			ДокументОбъект.ПоступлениеПоЗаказам=Истина;
			ДанныеПривязки = ПолучитьДанныеПривязкиСтрокЗаказов(ДокументОбъект.Товары.Выгрузить(,"Номенклатура, Количество, ЗаказПоставщику"));
			индекс = 0;
			Для Каждого Строка ИЗ ДанныеПривязки Цикл
				ДокСтрокаТовары = документОбъект.Товары.Получить(Индекс);
				ЗаполнитьЗначенияСвойств(ДокСтрокаТовары, Строка);
				Если НЕ ЗначениеЗаполнено(ДокСтрокаТовары.КодСтроки) ИЛИ ДокСтрокаТовары.КодСтроки = 0 Тогда
					ДокСтрокаТовары.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
				КонецЕсли;
				Индекс = индекс + 1;
			КонецЦикла
		ИначеЕсли ДанныеДляЗагрузки.Товары.Количество()=1 Тогда
			ДокументОбъект.ЗаказПоставщику = ДанныеДляЗагрузки.Товары[0].ЗаказПоставщику;
		КонецЕсли
	КонецЕсли;
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	Если ДанныеЗаполнения.Свойство("Сумма") И ДанныеЗаполнения.Сумма = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	// пересчет цен и сумм в зависимости от включения НДС в цену
	НДСпоСтавкам4и2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "НДСпоСтавкам4и2");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", НДСпоСтавкам4и2);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда 		
		СтруктураДействий.Вставить("ПересчитатьЦенуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
		
		// Проверка заполнения партнера в номенклатуре поставщика 
		Если ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(Строка.НоменклатураПоставщика)
			И НЕ ЗначениеЗаполнено(Строка.НоменклатураПоставщика.Владелец) Тогда
				НоменклатураПоставшикаОбъект = Строка.НоменклатураПоставщика.ПолучитьОбъект();
				Попытка 
					НоменклатураПоставшикаОбъект.Заблокировать();
				Исключение
					ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные номенклатуры поставщика ""%1"".
					|Возможно, номенклатура поставщика редактируется другим пользователем'"),
					НоменклатураПоставшикаОбъект.Наименование);			
					ВызватьИсключение ТекстИсключенияЗаписи;
				КонецПопытки;
				НоменклатураПоставшикаОбъект.Владелец = ДокументОбъект.Партнер;
				НоменклатураПоставшикаОбъект.Записать();
				НоменклатураПоставшикаОбъект.Разблокировать();
		КонецЕсли;		
	КонецЦикла;

	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Отказ);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияУслуг(Документ, ДанныеДляЗагрузки, Записывать)
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПриобретениеУслугПрочихАктивов.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// попробуем найти заказ поставщику
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		РеквизитыИБКонтрагента = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	Если Значениезаполнено(НайденныйДок) ТОгда
		ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	КонецЕсли;

	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Расходы.Загрузить(ДанныеДляЗагрузки.Расходы);
	
	Если ДокументОбъект.Расходы.Итог("СуммаНДС") > 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Конецесли;
	ДокументОбъект.ЦенаВключаетНДС = Ложь;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Расходы, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументСчетФактура(Документ, ДанныеДляЗагрузки, Записывать)
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		Если ДанныеШапки.КодВидаОперации = "02" Тогда
			ДокументОбъект = Документы.СчетФактураПолученныйАванс.СоздатьДокумент();
		ИначеЕсли ДанныеШапки.Свойство("Сумма") И ДанныеШапки.Сумма = 0 Тогда
			ДокументОбъект = Документы.СчетФактураПолученныйНалоговыйАгент.СоздатьДокумент();
			ДанныеШапки.КодВидаОперации = "42";
		Иначе
			ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		КонецЕсли;
		ДокументОбъект.Заполнить(ДанныеШапки);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	Если Не ДанныеШапки.КодВидаОперации = "02" Тогда
		// Заполним ТЧ ДокументыОснования
		Если ДанныеШапки.Свойство("ДокументыОснования") Тогда
			ДокументОбъект.ДокументыОснования.Очистить();
			Для Каждого ДокументОснование Из ДанныеШапки.ДокументыОснования Цикл
				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = ДокументОснование;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// Заполним ТЧ Авансы
		ДокументОбъект.Авансы.Загрузить(ДанныеДляЗагрузки.Авансы);
		Если ДанныеШапки.Свойство("Сумма") И ДанныеШапки.Сумма = 0 Тогда
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
			ДокументОбъект.КодВидаОперации = "41";
			Для Каждого СтрокаАванса Из ДокументОбъект.Авансы Цикл
				СтрокаАванса.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
				СтрокаАванса.СуммаНДС = СтрокаАванса.Сумма * 18 / 118;
			КонецЦикла;
			ДокументОбъект.Сумма = ДокументОбъект.Авансы.Итог("Сумма");
			ДокументОбъект.СуммаНДС = ДокументОбъект.Авансы.Итог("СуммаНДС");
		Иначе
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки, Записывать)
	
	Текст = "";
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе // создаем новый
		ДокументОбъект = Документы.КорректировкаПриобретения.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Отказ = Ложь;
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(ДокументОбъект.Товары, Отказ);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// Склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// Пересчет цен и сумм в зависимости от включения НДС в цену
	НДСпоСтавкам4и2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "НДСпоСтавкам4и2");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", НДСпоСтавкам4и2);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда 		
		СтруктураДействий.Вставить("ПересчитатьЦенуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	// Заполним расхождения
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		ИспользуетсяДокументПоступлениеТоваров = Ложь;
		Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
			ВариантОформленияЗакупок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "ВариантОформленияЗакупок");
			ИспользуетсяДокументПоступлениеТоваров = ВариантОформленияЗакупок <> Перечисления.ВариантыОформленияЗакупок.НеРазделять;
		КонецЕсли;
		Документы.КорректировкаПриобретения.ЗаполнитьРасхождения(ДокументОбъект, ИспользуетсяДокументПоступлениеТоваров);
	КонецЕсли;
	
	// Сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Отказ);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументВозвратаТоваровОтПокупателя(Документ, ДанныеДляЗагрузки, Записывать)
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	РеквизитыИБКонтрагента = Новый Структура;
	
	// попробуем найти документ реализации
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ТОРГ12Продавец, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение партнера, если контрагент создается новый.
	ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "Партнер"); 
	Если Не ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
		ДокументОбъект.Партнер = ПартнерКонтрагента;
	КонецЕсли;
	
	ДокументОбъект.ДокументРеализации = НайденныйДок;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ЕстьРеализацияВТЧ = Ложь;
	Для Каждого Строка Из ДанныеДляЗагрузки.Товары Цикл
		РеквизитыИБ = Новый Структура;
		Если ЗначениеЗаполнено(Строка.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", Строка.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", Строка.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			Строка.ДокументРеализации = НайтиДокумент(Перечисления.ВидыЭД.ТОРГ12Продавец, ДокументОбъект.Контрагент, РеквизитыИБ);
			ЕстьРеализацияВТЧ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ЕстьРеализацияВТЧ Тогда
		ДанныеДляЗагрузки.Товары.Свернуть("ДокументРеализации");
		Если ДанныеДляЗагрузки.Товары.Количество() = 1 Тогда
			ДокументОбъект.ЗаказПоставщику = ДанныеДляЗагрузки.Товары[0].ДокументРеализации;
		КонецЕсли
	КонецЕсли;
	
	Если ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	// пересчет цен и сумм в зависимости от включения НДС в цену
	НДСпоСтавкам4и2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "НДСпоСтавкам4и2");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", НДСпоСтавкам4и2);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда 		
		СтруктураДействий.Вставить("ПересчитатьЦенуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;

	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция НайтиСоздатьНоменклатуруПоставщика(Контрагент, Идентификатор, Наименование)
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		// Заполним номенклатуру поставщика
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", Контрагент.Партнер);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", Идентификатор);
		НоменклатураПоставщикаСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
			РеквизитыНоменклатурыПоставщика);
		Если ЗначениеЗаполнено(НоменклатураПоставщикаСсылка) Тогда
			НоменклатураПоставщика = НоменклатураПоставщикаСсылка;
		Иначе
			НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
			НоменклатураПоставщика.Идентификатор = Идентификатор;
			НоменклатураПоставщика.Владелец     = Контрагент.Партнер;
			НоменклатураПоставщика.Наименование = Наименование;
			
			НоменклатураПоставщика.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоменклатураПоставщика;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Процедура ЗаполнитьАдресВСпискеТиповАдресов(СписокТиповАдресов, АдресУчастника, ТипАдреса = "Структурированный")
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	СписокТиповАдресов.ЗаполнитьПометки(Ложь);
	ВыбранныйТипАдреса = Неопределено;
	Для Каждого Элемент Из СписокТиповАдресов Цикл
		Если Элемент.Представление = ТипАдреса Тогда
			ВыбранныйТипАдреса = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранныйТипАдреса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВыбранныйТипАдреса.Значение, АдресУчастника);
		ВыбранныйТипАдреса.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвала(ДанныеПечати, ИтоговыеСуммы, ДеревоДанных)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КоэффициентПересчетаВТонны     = НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"СведенияПоОтпускуГруза.ОтпущеноНаСумму", 
			ИтоговыеСуммы.СуммаСНДС);
			
	Если ЗначениеЗаполнено(ВалютаРегламентированногоУчета) И ИтоговыеСуммы.СуммаСНДС <> 0 Тогда
		СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.СуммаСНДС, ВалютаРегламентированногоУчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью", 
			СуммаПрописью);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"СведенияПоОтпускуГруза.ДатаОтпуска", 
			ДанныеПечати.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей", 
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью", 
			ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей, ,",,,,,,,,0"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.ВсегоМест", 
			ИтоговыеСуммы.КоличествоМест);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто", 
			ИтоговыеСуммы.МассаНетто);
	
	Если ИтоговыеСуммы.КоличествоМест > 0 Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью", 
			ЧислоПрописью(ИтоговыеСуммы.КоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	Если ИтоговыеСуммы.МассаНетто > 0 Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(ИтоговыеСуммы.МассаНетто, КоэффициентПересчетаВТонны);
		МассаГрузаНеттоПрописью = 
			ЧислоПрописью(ИтоговыеСуммы.МассаНетто * ПараметрыМассыПрописью.Коэффициент, "ДП=Истина", ПараметрыМассыПрописью.Формат);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНеттоПрописью", 
			МассаГрузаНеттоПрописью);
		
	КонецЕсли;
	
	Если ИтоговыеСуммы.МассаБрутто > 0 Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(ИтоговыеСуммы.МассаНетто, КоэффициентПересчетаВТонны);
		МассаГрузаБруттоПрописью = 
			ЧислоПрописью(ИтоговыеСуммы.МассаБрутто * ПараметрыМассыПрописью.Коэффициент, "ДП=Истина", ПараметрыМассыПрописью.Формат);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБруттоПрописью", 
			МассаГрузаБруттоПрописью);
			
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто", 
			ИтоговыеСуммы.МассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.КоличествоМест", 
			ИтоговыеСуммы.КоличествоМест);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.МассаБрутто", 
			ИтоговыеСуммы.МассаБрутто);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.МассаНетто", 
			ИтоговыеСуммы.МассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаБезНДС", 
			ИтоговыеСуммы.СуммаБезНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаНДС", 
			ИтоговыеСуммы.СуммаНДС);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаСНДС", 
			ИтоговыеСуммы.СуммаСНДС);
	
КонецПроцедуры

Функция ПараметрыМассыПрописью(Масса, КоэффициентПересчетаВТонны)
	
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент * КоэффициентПересчетаВТонны);
	
КонецФункции

Функция СтруктураИтоговыеСуммы(ВидЭД)
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Если ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		Структура.Вставить("Количество", 0);
		Структура.Вставить("СуммаНДС", 0);
		Структура.Вставить("СуммаБезНДС", 0);
		Структура.Вставить("СуммаСНДС", 0);
	Иначе
		Структура.Вставить("КоличествоМест", 0);
		Структура.Вставить("МассаНетто", 0);
		Структура.Вставить("МассаБрутто", 0);
		Структура.Вставить("СуммаБезНДС", 0);
		Структура.Вставить("СуммаНДС", 0);
		Структура.Вставить("СуммаСНДС", 0);
		
		Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Структура.Вставить("МассаНеттоДоКорректировки", 0);
			Структура.Вставить("СуммаБезНДСДоКорректировки", 0);
			Структура.Вставить("СуммаНДСДоКорректировки", 0);
			Структура.Вставить("СуммаСНДСДоКорректировки", 0);
		КонецЕсли;
		
		Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
		Структура.Вставить("СуммаПрописью", "");
	КонецЕсли;	
		
	Возврат Структура;
	
КонецФункции

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки, ВидЭД)
	
	Если ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ИтоговыеСуммы.Количество	 = ИтоговыеСуммы.Количество + ДанныеСтроки.Количество;
		ИтоговыеСуммы.СуммаНДС       = ИтоговыеСуммы.СуммаНДС + ДанныеСтроки.СуммаНДС;
		ИтоговыеСуммы.СуммаБезНДС    = ИтоговыеСуммы.СуммаБезНДС + ДанныеСтроки.Сумма;
		ИтоговыеСуммы.СуммаСНДС      = ИтоговыеСуммы.СуммаСНДС + ДанныеСтроки.Сумма + ДанныеСтроки.СуммаНДС;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.КоличествоМест) Тогда
			КоличествоМест = ДанныеСтроки.КоличествоМест;
			Если КоличествоМест <> Цел(КоличествоМест) Тогда
				КоличествоМест = Цел(КоличествоМест) + 1;
			КонецЕсли;
		Иначе
			КоличествоМест = 0;
		КонецЕсли;
		
		ИтоговыеСуммы.КоличествоМест = ИтоговыеСуммы.КоличествоМест + КоличествоМест;
		ИтоговыеСуммы.СуммаБезНДС    = ИтоговыеСуммы.СуммаБезНДС + ДанныеСтроки.СуммаБезНДС;
		ИтоговыеСуммы.СуммаНДС       = ИтоговыеСуммы.СуммаНДС + ДанныеСтроки.СуммаНДС;
		ИтоговыеСуммы.СуммаСНДС      = ИтоговыеСуммы.СуммаСНДС + ДанныеСтроки.СуммаСНДС;
		ИтоговыеСуммы.МассаБрутто    = ИтоговыеСуммы.МассаБрутто + ДанныеСтроки.МассаБрутто;
		ИтоговыеСуммы.МассаНетто     = ИтоговыеСуммы.МассаНетто + ДанныеСтроки.МассаНетто;
		ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей + 1;
		
		Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ИтоговыеСуммы.МассаНеттоДоКорректировки  = ИтоговыеСуммы.МассаНеттоДоКорректировки + ДанныеСтроки.МассаНеттоДоКорректировки;
			ИтоговыеСуммы.СуммаБезНДСДоКорректировки = ИтоговыеСуммы.СуммаБезНДСДоКорректировки + ДанныеСтроки.СуммаБезНДСДоКорректировки;
			ИтоговыеСуммы.СуммаНДСДоКорректировки    = ИтоговыеСуммы.СуммаНДСДоКорректировки + ДанныеСтроки.СуммаНДСДоКорректировки;
			ИтоговыеСуммы.СуммаСНДСДоКорректировки   = ИтоговыеСуммы.СуммаСНДСДоКорректировки 
				+ ДанныеСтроки.СуммаБезНДСДоКорректировки 
				+ ДанныеСтроки.СуммаНДСДоКорректировки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглитьМассыТовара(ДанныеСтроки)
	
	ДанныеСтроки.МассаБрутто = Окр(ДанныеСтроки.МассаБрутто, 3);
	ДанныеСтроки.МассаНетто = Окр(ДанныеСтроки.МассаНетто, 3);

КонецПроцедуры

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров)
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ИД) Тогда
			ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
			Если ТипЗнч(Строка.Характеристика) = Тип("Строка") Тогда
				СсылкаНаХарактеристику = Строка.ХарактеристикаСсылка;
			Иначе
				СсылкаНаХарактеристику = Строка.Характеристика;
			КонецЕсли;
			ИДХарактеристики = ?(ЗначениеЗаполнено(СсылкаНаХарактеристику),СсылкаНаХарактеристику.УникальныйИдентификатор(),"");
			Если ТипЗнч(Строка.Упаковка) = Тип("Строка") Тогда
				СсылкаНаУпаковку = Строка.УпаковкаСсылка;
			Иначе
				СсылкаНаУпаковку = Строка.Упаковка;
			КонецЕсли;
			ИДУпаковки = ?(ЗначениеЗаполнено(СсылкаНаУпаковку),СсылкаНаУпаковку.УникальныйИдентификатор(),"");
			Строка.ИД = Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
			Строка.Наименование = ?(ЗначениеЗаполнено(Строка.Наименование),Строка.Наименование,"")  //номенклатура
			+ ?(ЗначениеЗаполнено(Строка.Характеристика)," (","") //Открывающаяся скобка
			+ ?(ЗначениеЗаполнено(Строка.Характеристика),Строка.Характеристика,"") //характеристика
			+ ?(ЗначениеЗаполнено(Строка.Характеристика),")",""); //Закрывающаяся скобка
		КонецЕсли;
		//Коды единиц измерения для CML 4.02
		Строка.БазоваяЕдиницаКод = СокрЛП(Строка.БазоваяЕдиницаКод);
		Строка.УпаковкаКод = СокрЛП(Строка.УпаковкаКод);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДокументыОснования", 
			МассивДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		Попытка 
			НовЭл.Заблокировать();
		Исключение
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить данные номенклатуры поставщика ""%1"".
			|Возможно, номенклатура поставщика редактируется другим пользователем'"),
			НовЭл.Наименование);			
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	//
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
		// Заполняем идентификатор номенклатуры поставщика, если он получен в реквизите Ид
		СтрокаИд = СтрокаОбъекта.Строки.Найти("Ид", "Реквизит", Истина);
		Если НЕ ЗначениеЗаполнено(НовЭл.Идентификатор) И ЗначениеЗаполнено(СтрокаИд) Тогда
			НовЭл.Идентификатор = СтрокаИд.ЗначениеРеквизита;
		КонецЕсли;
		// Заполнение найденного поставщика (владельца, тип Справочник.Партнеры)
		СтрокиПартнеры = ДеревоРазбора.Строки.Найти("Партнеры", "ТипОбъекта", Истина);
		Если СтрокиПартнеры <> Неопределено и СтрокиПартнеры.Строки.Количество() = 1 Тогда
			НовЭл.Владелец = СтрокиПартнеры.Строки[0].СсылкаНаОбъект;
		Иначе
			СтрокиКонтрагент = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта", Истина);
			Если СтрокиКонтрагент <> Неопределено И СтрокиКонтрагент.Строки.Количество() = 1 Тогда
				НовЭл.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокиКонтрагент.Строки[0].СсылкаНаОбъект, "Партнер");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	//
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
		НовЭл.Разблокировать();
	Исключение
		Текст = НСтр("ru = 'Создание элемента справочника ""Номенклатура поставщиков"".'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция СоздатьКонтрагентаВБД(ДанныеКонтрагента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	НовыйПартнер        = Неопределено;
	СсылкаНаКонтрагента = Неопределено;
	
	Если СтрДлина(ДанныеКонтрагента.ИНН) = 10 Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Иначе
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Наименование", ДанныеКонтрагента.Наименование);
	ДанныеКонтрагента.Вставить("НаименованиеПолное", ДанныеКонтрагента.Наименование);
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	Если ДанныеКонтрагента.Свойство("ЮрАдрес") Тогда
		ДобавитьАдресПоСтруктуреАдресаФНС(НовыйКонтрагент, 
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			ДанныеКонтрагента.ЮрАдрес);
	КонецЕсли; 
		
	Если ДанныеКонтрагента.Свойство("ФактАдрес") Тогда
		ДобавитьАдресПоСтруктуреАдресаФНС(НовыйКонтрагент, 
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, 
			ДанныеКонтрагента.ФактАдрес);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
			
		СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
		НовыйПартнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
		
		ЗаполнитьЗначенияСвойств(НовыйПартнер, ДанныеКонтрагента);
		
		НовыйПартнер.ДатаРегистрации = ТекущаяДатаСеанса();
		НовыйПартнер.Клиент 		 = Истина;
		НовыйПартнер.Поставщик 		 = Истина;
		НовыйПартнер.ПрочиеОтношения = Истина;
		
		Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		
		ИспользуютсяГруппыДоступаПартнеров = Справочники.ГруппыДоступаПартнеров.ИспользуютсяГруппыДоступа();
		Если ИспользуютсяГруппыДоступаПартнеров
			И НЕ ЗначениеЗаполнено(НовыйПартнер.ГруппаДоступа) Тогда
			НовыйПартнер.ГруппаДоступа = ГруппаДоступаПартнера();
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ФактАдрес") Тогда
			ДобавитьАдресПоСтруктуреАдресаФНС(НовыйПартнер, 
				Справочники.ВидыКонтактнойИнформации.АдресПартнера,
				ДанныеКонтрагента.ФактАдрес);
		КонецЕсли;
		
	Иначе
		НовыйКонтрагент.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
	КонецЕсли;
	
	НачатьТранзакцию();	
	Попытка		
		//Записываем нового партнера
		Если НовыйПартнер <> Неопределено Тогда
			НовыйПартнер.Записать();
			НовыйКонтрагент.Партнер = НовыйПартнер.Ссылка;
		КонецЕсли;
		
		//Записываем нового контрагента
		НовыйКонтрагент.Записать();
		СсылкаНаКонтрагента = НовыйКонтрагент.Ссылка;		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + НСтр("ru = '(подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Создание нового контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат СсылкаНаКонтрагента; 
	
КонецФункции

Функция НайтиПеречисление(Наименование, ПредставлениеПеречисления) Экспорт
	
	НайденноеЗначение = Неопределено;
	Если Наименование = "НДС" Тогда
		ИмяПеречисления = "СтавкиНДС";
		Если НЕ ТипЗнч(ПредставлениеПеречисления)=Тип("ПеречислениеСсылка.СтавкиНДС") Тогда // определяем по числу
			Возврат ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(ПредставлениеПеречисления); 
		КонецЕсли;
	ИначеЕсли Наименование = "ТипНоменклатуры" Тогда
		ИмяПеречисления = "ТипыНоменклатуры";
	ИначеЕсли Наименование = "ТипыНалогообложенияНДС" Тогда
		ИмяПеречисления = "ТипыНалогообложенияНДС";	
	ИначеЕсли Наименование = "СпособыРасчетаКомиссионногоВознаграждения" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
	ИначеЕсли Наименование = "ВариантыОплатыКлиентом" Тогда
		ИмяПеречисления = "ВариантыОплатыКлиентом";	
	ИначеЕсли Наименование = "ВариантыОплатыПоставщику" Тогда
		ИмяПеречисления = "ВариантыОплатыПоставщику";			
	ИначеЕсли Наименование = "ФормыОплаты" Тогда
		ИмяПеречисления = "ФормыОплаты";	
	ИначеЕсли Наименование = "СпособРасчета" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
		Если ПредставлениеПеречисления = "От суммы" Тогда
			ПредставлениеПеречисления = НСтр("ru = 'Процент от суммы продажи'");
		ИначеЕсли ПредставлениеПеречисления = "От разницы" Тогда
			ПредставлениеПеречисления = НСтр("ru = 'Процент от разности суммы продажи и суммы комитента'");
		КонецЕсли;	
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Функция РеквизитыБанковскогоСчета(ИмяСправочника, СсылкаНаБанковскийСчет)
	
	БанковскийСчет = Новый Структура;
	ЗапросРасчСчет = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
					|	БанковскиеСчета.НомерСчета,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.НаименованиеБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Наименование
					|	КОНЕЦ КАК НаименованиеБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.БИКБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Код
					|	КОНЕЦ КАК БИКБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.КоррСчетБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.НаименованиеБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Наименование
					|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.БИКБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Код
					|	КОНЕЦ КАК БИКБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.КоррСчетБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов
					|ИЗ
					|	Справочник."+ИмяСправочника+" КАК БанковскиеСчета
					|ГДЕ
					|	БанковскиеСчета.Ссылка = &Ссылка";
					ЗапросРасчСчет.Текст = ТекстЗапроса;
	ЗапросРасчСчет.УстановитьПараметр("Ссылка", СсылкаНаБанковскийСчет);
	Выборка = ЗапросРасчСчет.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		БанковскийСчет.Вставить("НомерСчета", Выборка.НомерСчета);
		Банк = Новый Структура;
		Банк.Вставить("Наименование", Выборка.НаименованиеБанка);
		Банк.Вставить("Код", Выборка.БИКБанка);
		Банк.Вставить("КоррСчет", Выборка.КоррСчетБанка);
		БанковскийСчет.Вставить("Банк", Банк);
		БанкДляРасчетов = Неопределено; // заполнение анализируется в модуле формирования
		Если ЗначениеЗаполнено(Выборка.БИКБанкаДляРасчетов) Тогда // используется банк для расчетов
			БанкДляРасчетов = Новый Структура;
			БанкДляРасчетов.Вставить("Наименование", Выборка.НаименованиеБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("Код", Выборка.БИКБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("КоррСчет", Выборка.КоррСчетБанкаДляРасчетов);
		КонецЕсли;
		БанковскийСчет.Вставить("БанкДляРасчетов", БанкДляРасчетов);
	КонецЕсли;
	Возврат БанковскийСчет;
	
КонецФункции

Функция ТипСтавкиНДС(Ставка)
	Возврат "процент";
КонецФункции

Функция ПолучитьДанныеПривязкиСтрокЗаказов(Товары)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
	|	ТаблицаЗаказы.Склад КАК Склад,
	|	ТаблицаЗаказы.КОформлению КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				(Номенклатура, ЗаказПоставщику) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура КАК Номенклатура,
	|						Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|					ИЗ
	|						Товары КАК Товары)) КАК ЗаказыОстатки
	|	ГДЕ
	|		ЗаказыОстатки.КОформлениюОстаток > 0) КАК ТаблицаЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.ЗаказПоставщику,
	|	ЗаказыПоставщикам.КодСтроки,
	|	ЗаказыПоставщикам.Склад,
	|	ЗаказыПоставщикам.Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|		ПО Товары.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|			И Товары.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
	|			И Товары.Количество <= ЗаказыПоставщикам.КОформлениюОстаток";
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	
  
Функция НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки)
	
	СсылкаНаОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
			СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция СоздатьРасчетныйСчет(СтрокаОбъекта, ВидРС, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Неопределено;
	НайденнаяСтрока = СтрокаОбъекта;
	
	Если ВидРС = "БанковскийСчетКонтрагента" Тогда
		НовЭл = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		Если (НЕ ДеревоРазбора.Строки.Найти("Контрагенты")=Неопределено) 
		   И ДеревоРазбора.Строки.Найти("Контрагенты").Строки.Количество()>0 Тогда
			СсылкаНаВладельца = ДеревоРазбора.Строки.Найти("Контрагенты").Строки[0].СсылкаНаОбъект;
		КонецЕсли;	
	ИначеЕсли ВидРС = "БанковскийСчетОрганизации" Тогда
		НовЭл = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
		НовЭл.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	НовЭл.НомерСчета 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "НомерСчета");
		
	НовЭл.ВалютаДенежныхСредств = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(НовЭл.НомерСчета);
	//
	ИндексИскомойСтроки = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Банк");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.Банк 			= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	ИндексИскомойСтроки 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "БанкКорреспондент");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.БанкДляРасчетов 	= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		СсылкаНаВладельца = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Владелец");	
	КонецЕсли;
	НовЭл.Владелец 		= СсылкаНаВладельца;
	НовЭл.Наименование 	= Прав(СокрЛП(НовЭл.НомерСчета), 4)+" в "+НовЭл.Банк.Наименование; // наименование расч.счета
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Создание элемента справочника %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					ВидРС); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект; // запишем в дерево
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСоглашениеОбИспользованииЭД(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоглашениеОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеОбИспользованииЭД
		|ГДЕ
		|	СоглашениеОбИспользованииЭД.Контрагент = &Контрагент
		|	И СоглашениеОбИспользованииЭД.Партнер = &Партнер");
	  
	Запрос.УстановитьПараметр("Контрагент",	ОбменСКонтрагентамиВнутренний.ПолучитьРеквизитШапкиЭД(СтрокаОбъекта, "Контрагент", ДеревоРазбора));					  
	Запрос.УстановитьПараметр("Партнер",	ОбменСКонтрагентамиВнутренний.ПолучитьРеквизитШапкиЭД(СтрокаОбъекта, "Партнер", ДеревоРазбора));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) 
			 И МетаданныеОбъекта.Реквизиты.Найти(Строка.Ключ) <> Неопределено
			 И ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
			ТекущийОбъект[Строка.Ключ] = Строка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
		
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВДеревоДанныеСчета(ДеревоДокумента, ДанныеСчета);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", ДанныеСчета.НомерСчета);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", ДанныеСчета.Банк.Наименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", ДанныеСчета.Банк.Код);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", ДанныеСчета.Банк.КоррСчет);
	
	Если ЗначениеЗаполнено(ДанныеСчета.БанкДляРасчетов) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", ДанныеСчета.БанкДляРасчетов.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", ДанныеСчета.БанкДляРасчетов.КоррСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", ДанныеСчета.БанкДляРасчетов.Код);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснованияПоЗаказам(ДеревоДанных, СсылкаНаОбъект)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ЗаказКлиента");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДокументыОснования", 
			МассивДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьВидЦеныПоставщика(Партнер, ТипыЦен)
	
	ПараметрыЦены = ТипыЦен[0];
	ИспользоватьНесколькоВалют = Константы.ИспользоватьНесколькоВалют.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦенПоставщиков.Ссылка
	               |ИЗ
	               |	Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	               |ГДЕ
	               |	ВидыЦенПоставщиков.Владелец = &Владелец
	               |	И ВидыЦенПоставщиков.ЦенаВключаетНДС = &ЦенаВключаетНДС";
				   
	Запрос.УстановитьПараметр("Владелец", 		 Партнер);	
	Запрос.УстановитьПараметр("Валюта", 		 ПараметрыЦены.Валюта);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ПараметрыЦены.ВключаетНДС);
	
	Если ИспользоватьНесколькоВалют Тогда
		Запрос.Текст = Запрос.Текст + " И ВидыЦенПоставщиков.Валюта.Код = &Валюта";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ТипЦенДляТЧ = Результат.Ссылка;
	Иначе
		ТипЦенДляТЧ = Справочники.ВидыЦенПоставщиков.СоздатьЭлемент();
		ТипЦенДляТЧ.Наименование =    "Основной";
		ТипЦенДляТЧ.Владелец = 		  Партнер;
		ТипЦенДляТЧ.ЦенаВключаетНДС = ПараметрыЦены.ВключаетНДС;
		Если ИспользоватьНесколькоВалют Тогда
			ТипЦенДляТЧ.Валюта =  	  Справочники.Валюты.НайтиПоКоду(ПараметрыЦены.Валюта);
		КонецЕсли;
		
		Попытка
			ТипЦенДляТЧ.Записать();
		Исключение
			Текст = НСтр("ru = 'Создание элемента справочника ""Виды цен поставщиков"".'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТипЦенДляТЧ.Ссылка
	
КонецФункции

Процедура ЗаполнитьСоглашениеПоСтатистике(Объект)
	
	ЗаполняемыеРеквизиты = Новый Структура("Соглашение");
		
	РеквизитыДляОтбора = Новый Структура;
	РеквизитыДляОтбора.Вставить("Партнер", Объект.Партнер);
	РеквизитыДляОтбора.Вставить("Валюта", Объект.Валюта);
	РеквизитыДляОтбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);

	ЗаполнениеСвойствПоСтатистикеСервер.ПолучитьЗначенияСвойств(
			Объект.Ссылка, ЗаполняемыеРеквизиты, РеквизитыДляОтбора);
				
	Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.Соглашение) Тогда
		Объект.Соглашение = ЗаполняемыеРеквизиты.Соглашение;
	КонецЕсли;

КонецПроцедуры

Функция НайтиСоздатьСчетФактуруКомитента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		ДокументОбъект = Документы.СчетФактураКомитента.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеШапки);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	// Заполним ТЧ Покупатели
	Если ДанныеШапки.Свойство("Покупатель") Тогда
		ДокументОбъект.Покупатели.Очистить();
		НоваяСтрока = ДокументОбъект.Покупатели.Добавить();
		НоваяСтрока.Покупатель = ДанныеШапки.Покупатель;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчете(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	ОбщегоНазначенияУТ.ОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЗаполнитьУИП(ДеревоДокумента, УИП)
	
	СтруктураДопДанных = Новый Структура("ИдентификаторПлатежа", УИП);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, СтруктураДопДанных, Истина);
	
КонецПроцедуры

Функция ПолучитьДатуВремяИзСтроки(ДатаВремяСтрокой)
	
	Результат = Неопределено;
	ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, "-", "");
	ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, ":", "");
	Если СтрДлина(ДатаВремяСтрокой) - Найти(ДатаВремяСтрокой, " ") = 5 Тогда // время в формате Ч:ММ:СС
		ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, " ", "0");
	ИначеЕсли Найти(ДатаВремяСтрокой, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, " ", "");
	КонецЕсли;
	
	Попытка
		Результат = Дата(ДатаВремяСтрокой); // дата и время в виде "ГГГГММДДЧЧММСС"
	Исключение
		Попытка
			Результат = Дата(Лев(ДатаВремяСтрокой, 8)); // только дата "ГГГГММДД"
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ГруппаДоступаПартнера()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Партнеры.Ссылка,
	|	Партнеры.ГруппаДоступа
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступаПартнеров.ПустаяСсылка)");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ГруппаДоступа;
	
КонецФункции

Функция ОпределитьПризнакТовара(Товар, ДокументОтгрузки) Экспорт
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДокументОтгрузки.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			Возврат "4"; // Имущественные права;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Товар) Тогда
		Если Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			Возврат "1"; // Имущество
		ИначеЕсли Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			Возврат "2"; // Работа			
		ИначеЕсли Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Возврат "3"; // Услуга
		Иначе
			Возврат "5"; // Иное
		КонецЕсли;
	Иначе
		Возврат "5"; // Иное
	КонецЕсли;
	
КонецФункции

#Область ВспомогательныеМетоды_УПД_УКД

Процедура ЗаполнитьДанныеСчетаФактурыУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	Если СтруктураДанных.Свойство("СчетФактураНаАванс") И СтруктураДанных.СчетФактураНаАванс Тогда
		ВидСчетаФактуры = "Авансовый";
	Иначе
		ВидСчетаФактуры = "Реализация";
	КонецЕсли;
	
	СчетФактура = ДанныеШапки.Ссылка;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры",	СчетФактура);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
	ДокументыОснования = Новый Массив;
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" или ВидСчетаФактуры = "Авансовый" Тогда
		ДокументыОснования.Добавить(СчетФактура.ДокументОснование);		
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
		Для Каждого СтрокаТЧ Из СчетФактура.ДокументыОснования Цикл
			ДокументыОснования.Добавить(СтрокаТЧ.ДокументОснование);
		КонецЦикла;	
		Если ДанныеШапки.Исправление И ЗначениеЗаполнено(СчетФактура.СчетФактураОснование) Тогда
			ДокументыОснования.Добавить(СчетФактура.СчетФактураОснование);
		КонецЕсли;		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	ПлатежныеДокументы = Новый ТаблицаЗначений;
	Если ВидСчетаФактуры = "Реализация" Тогда
		// Заполним платежные документы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента КАК НомерПРД,
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента КАК ДатаПРД
		|ИЗ
		|	Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
		|ГДЕ
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", СчетФактура);
		ПлатежныеДокументы = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	КонецЕсли;
	
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" Тогда
		ЭтоКомиссия = Истина;
		ВыборкаДанныхКонтрагента = СтруктураДанных.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДанныхКонтрагента.НайтиСледующий(Новый Структура("Ссылка", ДанныеШапки.Ссылка));
		ДанныеКонтрагента = ВыборкаДанныхКонтрагента.Выбрать();
		ДанныеКонтрагента.Следующий();
	Иначе
		ЭтоКомиссия = Ложь
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументОтгрузки = ДанныеШапки.Ссылка.ДокументОснование;
	Иначе
		ДокументОтгрузки = ДанныеШапки.Ссылка;
	КонецЕсли;
	
	СтрокаДереваВидСчетаФактуры = ЭлектронноеВзаимодействие.СтрокаДерева(ДеревоДанных, "ВидСчетаФактуры");
	ВидСчетаФактуры = СтрокаДереваВидСчетаФактуры.Значение;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"НомерДокумента",  НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);			
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, , ДанныеШапки.Дата);
	СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", , ДанныеШапки.Дата);
	
	// Выводим данные грузоотправителя.
	Если ДанныеШапки.ТолькоУслуги ИЛИ ДанныеШапки.Грузоотправитель = Неопределено 
			ИЛИ ДанныеШапки.Организация = ДанныеШапки.Грузоотправитель Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе",	Истина);	
	Иначе
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель", "Факт", , ДанныеШапки.Дата);
	КонецЕсли;
	
	// Выводим данные грузополучателя.
	Если Не ДанныеШапки.ТолькоУслуги Тогда
		СведенияОГрузополучателе = "";
		Если НЕ ЭтоКомиссия Тогда
			Если ДанныеШапки.Грузополучатель <> Неопределено Тогда
				СведенияОГрузополучателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузополучатель, , ДанныеШапки.Дата);
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.Грузополучатель) Тогда
			СведенияОГрузополучателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Грузополучатель, , ДанныеШапки.Дата);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОГрузополучателе) Тогда
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "СведенияОГрузополучателе", "Факт", , ДанныеШапки.Дата);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = "";
	Если НЕ ЭтоКомиссия Тогда 
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, , ДанныеШапки.Дата);
		Если Не ПустаяСтрока(ДанныеШапки.КПППокупателя) Тогда
			СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда		
			СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Контрагент, , ДанныеШапки.Дата);
			Если Не ПустаяСтрока(ДанныеКонтрагента.КПППокупателя) Тогда
				СведенияОПокупателе.КПП = ДанныеКонтрагента.КПППокупателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", , ДанныеШапки.Дата);
	КонецЕсли;	
		
	Если ЭтоКомиссия Тогда
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, ,ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр", , ДанныеШапки.Дата);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога");
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Признак");
	ТаблицаТоваров.Колонки.Добавить("ТоварКод");
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор");
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	ЕстьРаботы = Ложь;
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	Пока СтрокаТовары.Следующий() Цикл
		
		Если СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			ЕстьТовары = Истина;
		ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ЕстьУслуги = Истина;
		ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ЕстьРаботы = Истина;
		КонецЕсли;
		
		СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС, 2);
		СуммаНДС    = Окр(СтрокаТовары.СуммаНДС, 2);
		СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС, 2);
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
			
		НовСтрока.ТоварИдентификатор = СтрокаТовары.Номенклатура.УникальныйИдентификатор();
		НовСтрока.НалоговаяСтавка    = СтрокаТовары.СтавкаНДС;
			
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			НовСтрока.СтоимостьТоваровСНалогом  = 0;
			НовСтрока.СуммаНалога  = 0;
			Продолжить;
		КонецЕсли;
			
		НовСтрока.ЦенаЗаЕдиницуИзмерения    = Окр(СтрокаТовары.Цена, 2);
		Если ВидСчетаФактуры = "Авансовый" Тогда
			НовСтрока.СтоимостьТоваровБезНалога = СуммаСНДС;
		Иначе
			НовСтрока.СтоимостьТоваровБезНалога = СуммаБезНДС;
		КонецЕсли;
		НовСтрока.СуммаНалога               = СуммаНДС;
		НовСтрока.СтоимостьТоваровСНалогом  = СуммаСНДС;
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога              = 0;
			НовСтрока.СтоимостьТоваровСНалогом = 0;
		КонецЕсли;
		
		Если Не ВидСчетаФактуры = "Авансовый" Тогда
			НовСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
			НовСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияНаименование);
			НовСтрока.ТоварКод = СтрокаТовары.НоменклатураКод;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения) Тогда
			НовСтрока.СтранаПроисхожденияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СтранаПроисхождения, "Наименование");
		КонецЕсли;
		
		НовСтрока.Признак = ОпределитьПризнакТовара(СтрокаТовары.Номенклатура, ДокументОтгрузки);
		
		//Заполнение Таможенной декларации
		Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
			СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
			СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(СтрокаТовары.НомерГТД));
			Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхожденияКод) Тогда
				СтрокаТД.СтранаПроисхожденияКод = СтрокаТовары.СтранаПроисхожденияКод;
			КонецЕсли;
			НовСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
		КонецЕсли;
		//Конец заполнения Таможенной декларации
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	СоставСодержания = Новый Массив;
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		Если ЕстьТовары Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
		КонецЕсли;
		Если ЕстьУслуги Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
		КонецЕсли;
		Если ЕстьРаботы Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Работы выполнены в полном объеме.'"));
		КонецЕсли;
		СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	Иначе
		СоставСодержания.Добавить(НСтр("ru = 'Регистрация счет-фактуры на аванс.'"));
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	//Заполним документы основания.
	Если ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.КорректировкаРеализации") 
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомиссионера") 
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
			и Не ВидСчетаФактуры = "Авансовый" Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "ЗаказКлиента");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", МассивДокументовОснований);
	КонецЕсли;	
		
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		Если ЗначениеЗаполнено(ДанныеШапки.Основание)
			И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
				СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
			Иначе
				СтрокаНаименование = ДанныеШапки.Основание;
			КонецЕсли;
			НоваяСтрока.ДокументНаименование = СтрокаНаименование;
			НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
			
			Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
		    КонецЕсли;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеШапки.Кладовщик);
			Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика)
				И ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ФИО.Отчество);
			ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик не работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	СчетФактура = ДанныеШапки.Ссылка;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры",	СчетФактура);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументИсправления = ДанныеШапки.Ссылка.ДокументОснование;
	Иначе
		ДокументИсправления = ДанныеШапки.Ссылка;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"НомерДокумента", НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'Предлагаю изменить стоимость'"));
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	СчетФактура = ДанныеШапки.Ссылка;	
	
	ДокументыОснования = Новый Массив;
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		
		Для Каждого СтрокаТЧ Из СчетФактура.ДокументыОснования Цикл
			ИсправляемыйСчетФактура = СтрокаТЧ.ИсходныйДокумент;
			ОснованиеСчетаФактуры = СтрокаТЧ.ДокументОснование;
			Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
				ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
				ДокументыОснования.Добавить(ОснованиеСчетаФактуры);
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсправления, "ДокументОснование");
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			ДокументыОснования.Добавить(ДокументРеализации);
		КонецЕсли;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);

	Если СчетФактура.ДокументыОснования.Количество() > 0 Тогда
		Основание = СчетФактура.ДокументыОснования[0];
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", Основание.НомерИсходногоДокумента);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.ДатаИсходногоДокумента);

		ПредставлениеИсходногоДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
					НомерСчетаФактурыНаПечать(Основание.НомерИсходногоДокумента, ДанныеШапки.ИндексПодразделения, Истина),
					Формат(Основание.ДатаИсходногоДокумента, "ДЛФ=D; ДП=--"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ПредставлениеИсходногоДокумента", ПредставлениеИсходногоДокумента);

		Если ЗначениеЗаполнено(Основание.НомерИсправленияИсходногоДокумента) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
				Основание.НомерИсправленияИсходногоДокумента);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
				Основание.ДатаИсправленияИсходногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	ОснованиеКорректировки = Новый ТаблицаЗначений;
	ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
	ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Основание)
		И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
			СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
		Иначе
			СтрокаНаименование = ДанныеШапки.Основание;
		КонецЕсли;
		НоваяСтрока.ДокументНаименование = СтрокаНаименование;
		НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
		НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
		
		Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация);
	СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", , ДанныеШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент);
	СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", , ДанныеШапки.Дата);
		
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	Пока СтрокаТовары.Следующий() Цикл
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
			
		НовСтрока.ТоварИдентификатор 						= СтрокаТовары.Номенклатура.УникальныйИдентификатор();
		НовСтрока.НалоговаяСтавкаДоКорректировки 			= СтрокаТовары.СтавкаНДС;
		НовСтрока.НалоговаяСтавка                			= СтрокаТовары.СтавкаНДС;		
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			НовСтрока.СтоимостьТоваровСНалогом  = 0;			
			НовСтрока.СуммаНалога  = 0;			
			НовСтрока.СтоимостьТоваровСНалогомДоКорректировки  = 0;			
			НовСтрока.СуммаНалогаДоКорректировки  = 0;			
			Продолжить;	
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмеренияКодДоКорректировки		= СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.ЕдиницаИзмеренияКод               		= СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);		
		НовСтрока.КоличествоДоКорректировки					= СтрокаТовары.КоличествоДо;
		НовСтрока.Количество                				= СтрокаТовары.Количество;		
		НовСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки 	= Окр(СтрокаТовары.ЦенаДо, 2);
		НовСтрока.ЦенаЗаЕдиницуИзмерения                	= Окр(СтрокаТовары.Цена, 2);		
		НовСтрока.СтоимостьТоваровБезНалогаДоКорректировки 	= Окр(СтрокаТовары.СуммаБезНДСДо, 2);
		НовСтрока.СтоимостьТоваровБезНалога                	= Окр(СтрокаТовары.СуммаБезНДС, 2);		
		НовСтрока.СтоимостьТоваровБезНалогаУвеличение      	= Окр(СтрокаТовары.РазницаБезНДСУвеличение, 2);
		НовСтрока.СтоимостьТоваровБезНалогаУменьшение      	= Окр(СтрокаТовары.РазницаБезНДСУменьшение, 2);
		НовСтрока.СуммаНалогаДоКорректировки 				= Окр(СтрокаТовары.СуммаНДСДо, 2);
		НовСтрока.СуммаНалога                				= Окр(СтрокаТовары.СуммаНДС, 2);
		НовСтрока.СуммаНалогаУвеличение      				= Окр(СтрокаТовары.РазницаНДСУвеличение, 2);
		НовСтрока.СуммаНалогаУменьшение      				= Окр(СтрокаТовары.РазницаНДСУменьшение, 2);		
		НовСтрока.СтоимостьТоваровСНалогомДоКорректировки 	= Окр(СтрокаТовары.СуммаСНДСДо, 2);
		НовСтрока.СтоимостьТоваровСНалогом                	= Окр(СтрокаТовары.СуммаСНДС, 2);
		НовСтрока.СтоимостьТоваровСНалогомУвеличение      	= Окр(СтрокаТовары.РазницаСНДСУвеличение, 2);
		НовСтрока.СтоимостьТоваровСНалогомУменьшение      	= Окр(СтрокаТовары.РазницаСНДСУменьшение, 2);
	
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка                         = "НДС исчисляется налоговым агентом";
			НовСтрока.НалоговаяСтавкаДоКорректировки          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога                             = 0;
			НовСтрока.СуммаНалогаДоКорректировки              = 0;
			НовСтрока.СуммаНалогаУвеличение                   = 0;
			НовСтрока.СуммаНалогаУменьшение                   = 0;
			НовСтрока.СтоимостьТоваровСНалогом                = 0;
			НовСтрока.СтоимостьТоваровСНалогомДоКорректировки = 0;
			НовСтрока.СтоимостьТоваровСНалогомУвеличение      = 0;
			НовСтрока.СтоимостьТоваровСНалогомУменьшение      = 0;
		КонецЕсли;
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение", ТаблицаТоваров.Итог("СуммаНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение", ТаблицаТоваров.Итог("СуммаНалогаУменьшение"));
	
КонецПроцедуры

Процедура НайтиСоздатьПриобретениеТоваровУслугУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СпособОбработки) = Тип("Строка") Тогда
		СпособОбработкиСтрокой = СпособОбработки;
	Иначе
		СпособОбработкиСтрокой = СпособОбработки.ПервичныйДокумент;
	КонецЕсли;
	
	Если СпособОбработкиСтрокой = "ПриобретениеУслугПрочихАктивов" Тогда
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслугУПД(ДеревоДанных);		
		ЗаполнитьДокументПоступленияУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	Иначе
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД(ДеревоДанных);
		Если СпособОбработкиСтрокой = "ВозвратТоваровОтКлиента" Тогда
			ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);		
		Иначе
			ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьСчетФактуруУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных);
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных);
	ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных);
	ДанныеДляЗагрузки.Шапка.Вставить("Корректировочный", Истина);
	
	МассивОбъектов = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляЗагрузки.Шапка.ДокументыОснования Цикл
		Корректировка = ДокументОснование.Ссылка;
		ДокументОснование = Корректировка.ДокументОснование;		
	КонецЦикла;	
	СчетФактураОснование = ЗакупкиВызовСервера.СчетФактураДокумента(ДокументОснование, ДанныеДляЗагрузки.Шапка.Организация, Ложь);
	ДанныеДляЗагрузки.Шапка.Вставить("СчетФактураОснование", СчетФактураОснование);
	
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных)
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Номер", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаСоставления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	ДанныеОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Контрагент",  СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика));
	ДанныеОбъекта.Вставить("ИННКонтрагента", ИННПоставщика);
	ДанныеОбъекта.Вставить("КППКонтрагента", КПППоставщика);
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	// Если счет-фактура на аванс.
	ВидСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		КодВидаОперации = "02";
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	ДанныеОбъекта.Вставить("ПолученВЭлектронномВиде", Истина);
	
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;	
	
	// Получим документы-основания
	СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если СтрокаДокументыОснования <> Неопределено Тогда
		Если ТипЗнч(СтрокаДокументыОснования.Значение) <> Тип("Строка") Тогда 
			МассивДокументовОснований = Новый Массив;
			Для Каждого Строка Из СтрокаДокументыОснования.Значение Цикл
				МассивДокументовОснований.Добавить(Строка.Ссылка);
			КонецЦикла;
			ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);
		КонецЕсли;
	КонецЕсли;
	
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("Валюта", ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	ДанныеОбъекта.Вставить("СуммаНДС", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога"));
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеОбъекта);
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		Авансы = Документы.СчетФактураПолученныйАванс.ПустаяСсылка().Авансы.Выгрузить();
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
			НоваяСтрока = Авансы.Добавить();
			Если ДанныеОбъекта.Сумма = 0 Тогда
				НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
			Иначе
				НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЦикла;
		ДанныеДляОбъекта.Вставить("Авансы", Авансы);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных)
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Номер", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаСоставления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	ДанныеОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Контрагент",  СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика));
	ДанныеОбъекта.Вставить("ИННКонтрагента", ИННПоставщика);
	ДанныеОбъекта.Вставить("КППКонтрагента", КПППоставщика);
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	КодВидаОперации = "01";
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	ДанныеОбъекта.Вставить("ПолученВЭлектронномВиде", Истина);
	
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;	
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение")
									+ ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
	
	// Получим документы-основания
	СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если СтрокаДокументыОснования <> Неопределено Тогда
		Если ТипЗнч(СтрокаДокументыОснования.Значение) <> Тип("Строка") Тогда 
			МассивДокументовОснований = Новый Массив;
			Для Каждого Строка Из СтрокаДокументыОснования.Значение Цикл
				МассивДокументовОснований.Добавить(Строка.Ссылка);
			КонецЦикла;
			ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);
		КонецЕсли;
	КонецЕсли;
	
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("Валюта", ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеОбъекта);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("Курс", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Упаковка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
	
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		НоменклатураПоставщика = НайтиСоздатьНоменклатуруПоставщика(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		НоваяСтрока.НоменклатураПоставщика = НоменклатураПоставщика;
		НоваяСтрока.Номенклатура = НоменклатураПоставщика.Номенклатура;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслугУПД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("Курс", 1);
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Заказчик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Исполнитель";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Описание");
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("Курс", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДокументыОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Для Каждого Основание Из ДокументыОснования Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			ДанныеОбъекта.Вставить("ДокументОснование", Основание);
		КонецЕсли;
	КонецЦикла;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Упаковка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
	
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		НоменклатураПоставщика = НайтиСоздатьНоменклатуруПоставщика(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		НоваяСтрока.НоменклатураПоставщика = НоменклатураПоставщика;
		НоваяСтрока.Номенклатура = НоменклатураПоставщика.Номенклатура;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", КорневойЭлементДерева = "", ДатаКИ = Неопределено)
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, КорневойЭлементДерева);

	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
									СведенияОбУчастнике.Свидетельство, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									СведенияОбУчастнике.Фамилия, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									СведенияОбУчастнике.Имя, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									СведенияОбУчастнике.Отчество, КорневойЭлементДерева);
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура;
	ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ТипАдреса = ?(АдресУчастника.АдресРФ, "АдресРФ", "АдресИнформация");
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Телефоны, КорневойЭлементДерева);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				НомерСчета, КорневойЭлементДерева);
				
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										БанкНаименование, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										БИК, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										КоррСчет, КорневойЭлементДерева);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.КодПоОКПО, КорневойЭлементДерева);
	КонецЕсли;
		
КонецПроцедуры

Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Ложь)
	
	НомерНаПечать = "";
	
	Если Номер <> Неопределено Тогда
	
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);
		
		ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
		Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
		НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);
		
		Если Лев(НомерБезПрефикса, 1) = "И" Тогда
			НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
			НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерНаПечать;
	
КонецФункции

// Вызывается при изменении состояния документооборота на ОбменЗавершен, ОбменЗавершенСИсправлением.
//
// Параметры:
//  ОснованияЭлектронногоДокумента - ДокументСсылка - ссылка на документ основания электронного документа.
//
Процедура УстановленоСостояниеОбменЗавершен(ОснованияЭлектронногоДокумента) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
