
#Область ПрограммныйИнтерфейс

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Параметры:
//	ПрименениеПриказа107н - Булево - Применяется ли приказ Минфина России от 12.11.2013 №107н
//
// Возвращаемое значение:
//	СписокЗначений - список статусов
//
Функция СтатусыПлательщика(ПрименениеПриказа107н, Период = Неопределено) Экспорт
	
	Статусы = Новый Соответствие;
	
	// Старые правила
	
	Статусы.Вставить("01", НСтр("ru='01 - налогоплательщик (плательщик сборов) - юридическое лицо'"));
	Статусы.Вставить("02", НСтр("ru='02 - налоговый агент'"));
	Статусы.Вставить("03", НСтр("ru='03 - организация федеральной почтовой связи'"));
	Статусы.Вставить("04", НСтр("ru='04 - налоговый орган'"));
	Статусы.Вставить("05", НСтр("ru='05 - территориальные органы Федеральной службы судебных приставов'"));
	Статусы.Вставить("06", НСтр("ru='06 - участник внешнеэкономической деятельности - юридическое лицо'"));
	Статусы.Вставить("07", НСтр("ru='07 - таможенный орган'"));
	Статусы.Вставить("08", НСтр("ru='08 - плательщик иных обязательных платежей'")); 
	Статусы.Вставить("09", НСтр("ru='09 - налогоплательщик (плательщик сборов) - ИП'"));
	Статусы.Вставить("10", НСтр("ru='10 - налогоплательщик (плательщик сборов) - нотариус, занимающегося частной практикой'")); 
	Статусы.Вставить("11", НСтр("ru='11 - налогоплательщик (плательщик сборов) - адвокат'")); 
	Статусы.Вставить("12", НСтр("ru='12 - налогоплательщик (плательщик сборов) - глава КФХ'")); 
	Статусы.Вставить("13", НСтр("ru='13 - налогоплательщик (плательщик сборов) - иное физическое лицо'")); 
	Если Не ДействуетПриказ2017_58н(Период) Тогда
		Статусы.Вставить("14", "14 - налогоплательщик, производящий выплаты физическим лицам");
	КонецЕсли;
	Статусы.Вставить("15", НСтр("ru='15 - кредитная организация - документ на общую сумму без открытия банковского счета физическому лицу'")); 		
	Статусы.Вставить("16", НСтр("ru='16 - участник внешнеэкономической деятельности - физическое лицо'")); 
	Статусы.Вставить("17", НСтр("ru='17 - участник внешнеэкономической деятельности - ИП'")); 
	Статусы.Вставить("18", НСтр("ru='18 - плательщик таможенных платежей, не являющийся декларантом'")); 
	Статусы.Вставить("19", НСтр("ru='19 - организации, оформившие перечисление средств, удержанных из заработка физического лица в счет погашения задолженности по таможенным платежам'")); 
	Статусы.Вставить("20", НСтр("ru='20 - кредитная организация - документ по каждому платежу физического лица без открытия банковского счета'")); 
	
	Если ПрименениеПриказа107н Тогда
		
		Статусы.Вставить("03", НСтр("ru='03 - организация федеральной почтовой связи, составившая распоряжение по каждому платежу физического лица'"));
		Статусы.Вставить("08", НСтр("ru='08 - юридическое лицо (индивидуальный предприниматель), уплачивающее страховые взносы и иные платежи'"));
		Статусы.Вставить("10", НСтр("ru='10 - налогоплательщик (плательщик сборов) – нотариус, занимающийся частной практикой'"));
		Если Не ДействуетПриказ2017_58н(Период) Тогда
			Статусы.Вставить("14", "14 - налогоплательщик, производящий выплаты физическим лицам");
		КонецЕсли;
		Статусы.Вставить("15", НСтр("ru='15 - кредитная организация (филиал кредитной организации), платежный агент, организация федеральной почтовой связи, составившие платежное поручение на общую сумму с реестром'"));
		Статусы.Вставить("19", НСтр("ru='19 - организации, переводящие средства, удержанные из заработной платы на основании исполнительного документа'"));
		Статусы.Вставить("20", НСтр("ru='20 - кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение по каждому платежу физического лица'"));
		Статусы.Вставить("21", НСтр("ru='21 - ответственный участник консолидированной группы налогоплательщиков'"));
		Статусы.Вставить("22", НСтр("ru='22 - участник консолидированной группы налогоплательщиков'"));
		Статусы.Вставить("23", НСтр("ru='23 - органы контроля за уплатой страховых взносов'"));
		Статусы.Вставить("24", НСтр("ru='24 - физическое лицо, уплачивающее страховые взносы и иные платежи'"));
		Статусы.Вставить("25", НСтр("ru='25 - банки – гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации за плательщика суммы налога на добавленную стоимость, излишне полученной им (зачтенной ему) в результате возмещения налога на добавленную стоимость в заявительном порядке, а также по уплате акцизов, исчисленных по операциям реализации подакцизных товаров за пределы территории Российской Федерации, и акцизов в размере авансового платежа акцизов по алкогольной и (или) подакцизной спиртосодержащей продукции'"));
		Статусы.Вставить("26", НСтр("ru='26 - учредители (участники) должника, собственники имущества должника – унитарного предприятия или третьи лица, составившие распоряжение на погашение задолженности по обязательным платежам, включенным в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве'"));
		
		Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
			Статусы.Вставить("27", "27 - кредитные организации составившие распоряжение о переводе денежных средств, перечисленных из бюджетной системы РФ, не зачисленных получателю и подлежащих возврату в бюджетную систему РФ");
		КонецЕсли;
		
		Если ДействуетПриказ2017_58н(Период) Тогда
			Статусы.Вставить("28", "28 - участник внешнеэкономической деятельности - получатель международного почтового отправления");
		КонецЕсли;
		
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Для Каждого КлючИЗначение Из Статусы Цикл
		Список.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	
	Возврат Список;
	
КонецФункции

// Возвращает список оснований платежа на перечисление в бюджет
//
// Параметры:
//	ВидПеречисления - ПеречислениеСсылка.ВидыПеречисленийВБюджет - вид перечисления в бюджет
//	ПрименениеПриказа107н - Булево - Применяется ли приказ Минфина России от 12.11.2013 №107н
//
// Возвращаемое значение:
//	СписокЗначений - Список оснований
//
Функция ОснованияПлатежа(ВидПеречисления, ПрименениеПриказа107н, Период = Неопределено) Экспорт
	
	ОснованияПлатежа = Новый СписокЗначений;
	
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ОснованияПлатежа = ОснованияНалоговогоПлатежа(ПрименениеПриказа107н);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ОснованияПлатежа = ОснованияТаможенногоПлатежа(ПрименениеПриказа107н, Период);
	КонецЕсли;
	
	ОснованияПлатежа.Добавить("0", НСтр("ru = '0 - значение не заполняется'"));
	
	Возврат ОснованияПлатежа;
	
КонецФункции

// Возвращает список типов платежа на перечисление в бюджет
//
// Параметры:
//	ВидПеречисления - ПеречислениеСсылка.ВидыПеречисленийВБюджет - вид перечисления в бюджет
//	ПрименениеПриказа107н - Булево - Применяется ли приказ Минфина России от 12.11.2013 №107н
//
// Возвращаемое значение:
//	СписокЗначений - Список типов
//
Функция ТипыПлатежа(ВидПеречисления, ПрименениеПриказа107н) Экспорт
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ТипыПлатежа = ТипыНалоговогоПлатежа(ПрименениеПриказа107н);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ТипыПлатежа = ТипыТаможенногоПлатежа(ПрименениеПриказа107н);
	Иначе
		ТипыПлатежа.Добавить("0", НСтр("ru = '0 - значение не заполняется'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

// Возвращает результат проверки ОКТМО
//
// Параметры:
//	КодТерритории - Строка - код ОКТМО
//
// Возвращаемое значение:
//	Булево - Признак корректности
//
Функция КорректныйОКТМО(КодТерритории) Экспорт
	РезультатПроверки = Истина;
	
	Если СтрДлина(КодТерритории) = 11 И Сред(КодТерритории, 9, 3) = "000" Тогда
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Возврат РезультатПроверки;
КонецФункции

#Область УникальныйИдентификаторНачисления

// Возвращает дату начала действия указания 3844У
//
// Возвращаемое значение:
//	Строка - строковое представление даты
//
Функция НачалоДействияУказания3844У() Экспорт
	
	// Указание ЦБ РФ от 6 ноября 2015 г. № 3844-У
	// "О внесении изменений в Положение Банка России от 19 июня 2012 года № 383-П".
	
	// Совпадает с датой вступления в силу Приказа Минфина России от 23 сентября 2015 г. № 148н
	// "О внесении изменений в приказ Министерства финансов Российской Федерации от 12 ноября 2013 г. № 107н".
	
	Возврат '2016-03-28'; // Дата вступления явно прописана в тексте Указания.
	
КонецФункции

// Возвращает дату начала действия приказа 107н
//
// Возвращаемое значение:
//	Строка - строковое представление даты
//
Функция НачалоДействияПриказа107н() Экспорт
	
	// Приказ Минфина №107н от 12.11.2013.
	// Опубликован 24.01.2014 и вступает в силу по истечении 10 дней с даты публикации.
	
	Возврат '2014-02-04';
	
КонецФункции

// Возвращает признак действия приказа 107н на указанную дату
//
// Параметры:
//	Период - Дата - проверяемая дата
//
// Возвращаемое значение:
//	Булево - Признак действия
//
Функция ДействуетПриказ107н(Период) Экспорт
	
	Возврат Период = Неопределено
		Или Период >= НачалоДействияПриказа107н();
	
КонецФункции

Функция НачалоДействияПриказа2017_58н() Экспорт
	
	// Приказ Минфина №58н от 05.04.2017.
	
	Возврат '2017-04-25';
	
КонецФункции

Функция НачалоОтложенногоДействияПриказа2017_58н() Экспорт
	
	// Приказ Минфина №58н от 05.04.2017.
	// Настоящий приказ вступает в силу в установленном порядке, за исключением
	//  абзаца одиннадцатого подпункта "г" пункта 3,
	//  абзаца пятого подпункта "а", подпункта "в",
	//  абзацев второго, четвертого - пятого, десятого подпункта "г",
	//  абзацев второго - пятого, девятого подпункта "д" пункта 4,
	//  абзацев третьего - шестого подпункта "е",
	//  абзацев третьего - четвертого подпункта "ж" пункта 5,
	//  подпунктов "б" - "в",
	//  абзацев второго - третьего подпункта "л" пункта 6
	// Изменений, вступающих в силу со 2 октября 2017 года.
	
	Возврат '2017-10-02';
	
КонецФункции

Функция ДействуетПриказ2017_58н(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоДействияПриказа2017_58н();
	
КонецФункции

Функция ДействуетПриказ2017_58н_Отложенный(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоОтложенногоДействияПриказа2017_58н();
	
КонецФункции

// Возвращает дату начала применения УИП/УИН
//
// Возвращаемое значение:
//	Строка - строковое представление даты
//
Функция НачалоПримененияИдентификатораПлатежа() Экспорт
	
	// Указание ЦБ РФ N 3025-У от 15 июля 2013 г.
	
	Возврат '20140331';
	
КонецФункции

// Возвращает минимальную длину кода УИН
//
// Возвращаемое значение:
//	Число - количество символов УИН
//
Функция МинимальнаяДлинаУИН() Экспорт
	
	Возврат 20;
	
КонецФункции

// Возвращает максимальную длину кода УИН
//
// Возвращаемое значение:
//	Число - количество символов УИН
//
Функция МаксимальнаяДлинаУИН() Экспорт
	
	Возврат 25;
	
КонецФункции

// Проверяет корректность переданного идентификатора платежа
//
// Параметры:
//	ИдентификаторПлатежа    - Строка - проверяемый идентификатор платежа
//	ПлатежВФедеральныйОрган - Булево - признак платежа в федеральный орган государственной власти
//
// Возвращаемое значение:
//	Строка - описание обнаруженных ошибок в идентификторе
//
Функция ПроверитьУИН(ИдентификаторПлатежа, ПлатежВФедеральныйОрган = Ложь) Экспорт
	
	УИН = СокрЛП(ИдентификаторПлатежа);
	
	Если НЕ РеквизитЗаполнен(УИН) Тогда
		Возврат "";
	КонецЕсли;
	
	ДлинаИдентификатора = СтрДлина(УИН);
	Если ДлинаИдентификатора <> МинимальнаяДлинаУИН() Тогда
		
		Если ПлатежВФедеральныйОрган Тогда
			ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 символов, а не из %2.'");
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, МинимальнаяДлинаУИН(), СтрДлина(УИН));
		КонецЕсли;
		
		Если ДлинаИдентификатора <> МаксимальнаяДлинаУИН() Тогда
			ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 или %2 символов, а не из %3.'");
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста, МинимальнаяДлинаУИН(), МаксимальнаяДлинаУИН(), ДлинаИдентификатора);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(УИН, "0") > 0 И ПустаяСтрока(СтрЗаменить(УИН, "0", "")) Тогда
		Возврат НСтр("ru = 'Все знаки уникального идентификатора начисления не могут одновременно принимать значение ""0""'");
	КонецЕсли;
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(УИН) Тогда
		РезультатПроверки = ПроверитьУИНПоФормату1_16_1(УИН);
	ИначеЕсли ДлинаИдентификатора = МинимальнаяДлинаУИН() Тогда
		РезультатПроверки = ПроверитьУИНПоФормату1_15(УИН);
	Иначе
		РезультатПроверки = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из цифр'");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверяет что получателем по указанному номеру счета является федеральным органом государственной власти
//
// Параметры:
//	НомерСчета    - Строка - номер банковского счета
//
// Возвращаемое значение:
//	Булево - Истина: является, Ложь:  не является
//
Функция АдминистраторНачисленияФедеральныйОрганГосударственнойВласти(Знач НомерСчета) Экспорт
	
	Если СтрДлина(СокрП(НомерСчета)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Лев(НомерСчета, 3) = "401";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УникальныйИдентификаторНачисления

Функция ПроверитьУИНПоФормату1_15(ИдентификаторПлатежа)
	
	Если СтрДлина(ИдентификаторПлатежа) <> МинимальнаяДлинаУИН() Тогда
		
		ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 символов, а не из %2'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, МинимальнаяДлинаУИН(), СтрДлина(ИдентификаторПлатежа));
		
	КонецЕсли;
	
	Если Лев(ИдентификаторПлатежа, 1) = "Ъ" Тогда
		// Применяем правила для администратора начислений
		// 1 разряд       - значение «Ъ» – признак администратора начислений
		// 2 – 7 разряды  - уникальный регистрационный код Участника, присваиваемый оператором ГИС ГМП;
		// 8 – 19 разряды - уникальный код, формируемый администратором начислений
		// 20 разряд      – контрольный
		КодУчастника  = Сред(ИдентификаторПлатежа, 2, 6);
		КодНачисления = Сред(ИдентификаторПлатежа, 8, 12);
		
		АлфавитноЦифроваяЧасть = КодУчастника + КодНачисления;
		
	Иначе
		// Применяем правила для главного администратора доходов
		// 1-3  разряды - код главы бюджетной классификации (идентификатор главного администратора) - число
		// 4-19 разряды - уникальный код в рамках главного администратора - буквы и цифры
		// 20 разряд    - контрольный
		КодАдминистратора  = Лев(ИдентификаторПлатежа, 3);
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодАдминистратора) Тогда
			Возврат НСтр("ru = 'Уникальный идентификатор начисления должен начинаться с трех цифр или с символа ""Ъ""'");
		КонецЕсли;
		
		АлфавитноЦифроваяЧасть = Сред(ИдентификаторПлатежа, 4, 16);
		
	КонецЕсли;
	
	// Проверим допустимость символов в алфавитно-цифровой части
	НедопустимыеСимволы = НедопустимыеАлфавитноЦифровыеСимволыУИН(АлфавитноЦифроваяЧасть);
	
	Если НедопустимыеСимволы.Количество() > 0 Тогда
		
		Для Индекс = 0 По НедопустимыеСимволы.ВГраница() Цикл
			НедопустимыеСимволы[Индекс] = "" + НедопустимыеСимволы[Индекс] + "";
		КонецЦикла;
		
		НедопустимыеСимволы = СтрСоединить(НедопустимыеСимволы, ",");
		
		ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления не должен содержать символы: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, НедопустимыеСимволы);
		
	КонецЕсли;
	
	// Проверим контрольный разряд
	
	КонтрольныйРазряд = Сред(ИдентификаторПлатежа, 20, 1);
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КонтрольныйРазряд) Тогда
		Возврат НСтр("ru = 'В последнем (20-м) знаке уникального идентификатора должно быть число - контрольный разряд'");
	КонецЕсли;
	
	Попытка 
		КонтрольныйРазряд = Число(КонтрольныйРазряд);
	Исключение
		Возврат НСтр("ru = 'В последнем (20-м) знаке уникального идентификатора должно быть число - контрольный разряд'");
	КонецПопытки;
	
	РассчитанныйКонтрольныйРазряд = КонтрольныйРазрядУИН(ИдентификаторПлатежа);
	Если КонтрольныйРазряд <> РассчитанныйКонтрольныйРазряд Тогда
		Возврат НСтр("ru = 'Контрольный разряд уникального идентификатора начисления не совпадает с рассчитанным.'");
	КонецЕсли;
	
	Возврат ""; // Ошибок не выявлено
	
КонецФункции

Функция ПроверитьУИНПоФормату1_16_1(ИдентификаторПлатежа)
	
	// Проверим контрольный разряд
	
	КонтрольныйРазряд = Прав(ИдентификаторПлатежа, 1);
	
	РассчитанныйКонтрольныйРазряд = КонтрольныйРазрядУИН(ИдентификаторПлатежа);
	Если КонтрольныйРазряд <> Формат(РассчитанныйКонтрольныйРазряд, "ЧН=0") Тогда
		Возврат НСтр("ru = 'Контрольный разряд уникального идентификатора начисления не совпадает с рассчитанным.'");
	КонецЕсли;
	
	Возврат ""; // Ошибок не выявлено
	
КонецФункции

Функция НедопустимыеАлфавитноЦифровыеСимволыУИН(ПроверяемаяСтрока)
	
	НедопустимыеСимволы = Новый Массив;
	
	ДопустимыеСимволы = НомераСимволовДляРасчетаКонтрольногоРазрядаУИН();
	
	Для НомерСимвола = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
		Символ = Сред(ПроверяемаяСтрока, НомерСимвола, 1);
		Если ДопустимыеСимволы[Символ] = Неопределено 
			И НедопустимыеСимволы.Найти(Символ) = Неопределено Тогда
			НедопустимыеСимволы.Добавить(Символ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НедопустимыеСимволы;
	
КонецФункции

Функция НомераСимволовДляРасчетаКонтрольногоРазрядаУИН()
	
	НомераСимволов = Новый Соответствие;
	
	НомераСимволов.Вставить("А", 1);  // Кириллица
	НомераСимволов.Вставить("A", 1);  // Латиница
	НомераСимволов.Вставить("Б", 2);  // Кириллица
	НомераСимволов.Вставить("В", 3);  // Кириллица
	НомераСимволов.Вставить("B", 3);  // Латиница
	НомераСимволов.Вставить("Г", 4);  // Кириллица
	НомераСимволов.Вставить("Д", 5);  // Кириллица
	НомераСимволов.Вставить("Е", 6);  // Кириллица
	НомераСимволов.Вставить("E", 6);  // Латиница
	НомераСимволов.Вставить("Ж", 7);  // Кириллица
	НомераСимволов.Вставить("З", 8);  // Кириллица
	НомераСимволов.Вставить("И", 9);  // Кириллица
	НомераСимволов.Вставить("К", 10); // Кириллица
	НомераСимволов.Вставить("K", 10); // Латиница
	НомераСимволов.Вставить("Л", 11); // Кириллица
	НомераСимволов.Вставить("М", 12); // Кириллица
	НомераСимволов.Вставить("M", 12); // Латиница
	НомераСимволов.Вставить("Н", 13); // Кириллица
	НомераСимволов.Вставить("H", 13); // Латиница
	НомераСимволов.Вставить("О", 14); // Кириллица
	НомераСимволов.Вставить("O", 14); // Латиница
	НомераСимволов.Вставить("П", 15); // Кириллица
	НомераСимволов.Вставить("Р", 16); // Кириллица
	НомераСимволов.Вставить("P", 16); // Латиница
	НомераСимволов.Вставить("С", 17); // Кириллица
	НомераСимволов.Вставить("C", 17); // Латиница
	НомераСимволов.Вставить("Т", 18); // Кириллица
	НомераСимволов.Вставить("T", 18); // Латиница
	НомераСимволов.Вставить("У", 19); // Кириллица
	НомераСимволов.Вставить("Y", 19); // Латиница
	НомераСимволов.Вставить("Ф", 20); // Кириллица
	НомераСимволов.Вставить("Х", 21); // Кириллица
	НомераСимволов.Вставить("X", 21); // Латиница
	НомераСимволов.Вставить("Ц", 22); // Кириллица
	НомераСимволов.Вставить("Ч", 23); // Кириллица
	НомераСимволов.Вставить("Ш", 24); // Кириллица
	НомераСимволов.Вставить("Щ", 25); // Кириллица
	НомераСимволов.Вставить("Э", 26); // Кириллица
	НомераСимволов.Вставить("Ю", 27); // Кириллица
	НомераСимволов.Вставить("Я", 28); // Кириллица
	НомераСимволов.Вставить("D", 29); // Латиница
	НомераСимволов.Вставить("F", 30); // Латиница
	НомераСимволов.Вставить("G", 31); // Латиница
	НомераСимволов.Вставить("I", 32); // Латиница
	НомераСимволов.Вставить("Ъ", 33); // Кириллица
	НомераСимволов.Вставить("J", 33); // Латиница
	НомераСимволов.Вставить("L", 34); // Латиница
	НомераСимволов.Вставить("N", 35); // Латиница
	НомераСимволов.Вставить("Ы", 36); // Кириллица
	НомераСимволов.Вставить("Q", 36); // Латиница
	НомераСимволов.Вставить("R", 37); // Латиница
	НомераСимволов.Вставить("S", 38); // Латиница
	НомераСимволов.Вставить("U", 39); // Латиница
	НомераСимволов.Вставить("V", 40); // Латиница
	НомераСимволов.Вставить("W", 41); // Латиница
	НомераСимволов.Вставить("Ь", 42); // Кириллица
	НомераСимволов.Вставить("Z", 42); // Латиница
	
	Для Цифра = 0 По 9 Цикл
		НомераСимволов.Вставить(Формат(Цифра, "ЧН=0"), Цифра);
	КонецЦикла;
	
	Возврат НомераСимволов;
	
КонецФункции

Функция КонтрольныйРазрядУИН(ИдентификаторПлатежа, СдвигПоследовательностиВесов = 0)
	
	ПроверяемаяСтрока = Лев(ИдентификаторПлатежа, СтрДлина(ИдентификаторПлатежа) - 1);
	
	НомераСимволов = НомераСимволовДляРасчетаКонтрольногоРазрядаУИН();
	
	СуммаВзвешенныхЗначений = 0;
	
	Для НомерСимвола = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
		
		Символ = Сред(ПроверяемаяСтрока, НомерСимвола, 1);
		
		// каждому разряду кода, начиная со старшего разряда, присваивается набор весов, соответствующий натуральному ряду чисел от 1 до 10. 
		// Если разрядность кода больше 10, то набор весов повторяется;
		Вес = (НомерСимвола + СдвигПоследовательностиВесов) % 10;
		Если Вес = 0 Тогда Вес = 10 КонецЕсли;
		
		// если вместо цифры в коде присутствует буква, то значение данного разряда принимается равным остатку от деления 
		// порядкового номера буквы в алфавите на 10 (например, для буквы ‘Л’ значение разряда равно 11 mod 10 = 1,
		// а для буквы ‘N’ – равно 35 mod 10 = 5);
		Значение = НомераСимволов[Символ];
		Если Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Значение = Значение % 10;
		
		// каждая цифра кода умножается на вес разряда и вычисляется сумма полученных произведений;
		СуммаВзвешенныхЗначений = СуммаВзвешенныхЗначений + Значение * Вес;
		
	КонецЦикла;
	
	// контрольное число для кода представляет собой остаток от деления полученной суммы на модуль «11». 
	КонтрольноеЧисло = СуммаВзвешенныхЗначений % 11;
	
	// Контрольное число должно иметь один разряд, значение которого находится в пределах от 0 до 9;
	// если получается остаток, равный 10, то для обеспечения одноразрядного контрольного числа необходимо провести повторный расчет, 
	// применяя вторую последовательность весов, сдвинутую на два разряда влево (3, 4, 5,...). 
	// Если в случае повторного расчета остаток от деления вновь сохраняется равным 10, 
	// то значение контрольного числа проставляется равным «0».
	Если КонтрольноеЧисло < 10 Тогда
		Возврат КонтрольноеЧисло;
	ИначеЕсли СдвигПоследовательностиВесов > 0 Тогда
		Возврат 0;
	Иначе
		Возврат КонтрольныйРазрядУИН(ИдентификаторПлатежа, 2);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КодыБюджетнойКлассификации

// Приказ Минфина от 01.07.13 г. N 65н

//┌──────────────────────────────────────────────────────────────────────────────────────┐
//│                     Структура кода классификации доходов бюджетов                    │
//├──────────────┬─────────────────────────────────────────┬───────────┬─────────────────┤
//│ Код главного │        Код вида доходов бюджетов        │Код подвида│Код классификации│
//│администратора├───────┬───────┬───────┬─────────┬───────┤  доходов  │ операций сектора│
//│   доходов    │группа │под-   │статья │подстатья│элемент│ бюджетов  │ государственного│
//│   бюджета    │доходов│группа │доходов│ доходов │доходов│           │   управления,   │
//│              │       │доходов│       │         │       │           │  относящихся к  │
//│              │       │       │       │         │       │           │ доходам бюджетов│
//├────┬────┬────┼───────┼───┬───┼───┬───┼──┬──┬───┼───┬───┼──┬──┬──┬──┼─────┬─────┬─────┤
//│ 1  │ 2  │ 3  │   4   │ 5 │ 6 │ 7 │ 8 │9 │10│11 │12 │13 │14│15│16│17│ 18  │ 19  │  20 │
//└────┴────┴────┴───────┴───┴───┴───┴───┴──┴──┴───┴───┴───┴──┴──┴──┴──┴─────┴─────┴─────┘

Функция РасположениеЭлементаКБК(ИмяЭлементаКБК) Экспорт
	
	Результат = Новый Структура("Начало, Длина", 0, 0);
	Если ИмяЭлементаКБК = "КодГлавногоАдминистратора" Тогда
		Результат.Начало = 1;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодГруппыДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 1;
	ИначеЕсли ИмяЭлементаКБК = "КодПодгруппыДоходов" Тогда
		Результат.Начало = 5;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "ПодгруппаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодСтатьиДоходов" Тогда
		Результат.Начало = 7;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодВидаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 10;
	ИначеЕсли ИмяЭлементаКБК = "КодЭлементаДоходов" Тогда
		Результат.Начало = 12;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодПодвидаДоходов" Тогда
		Результат.Начало = 14;
		Результат.Длина  = 4;
	ИначеЕсли ИмяЭлементаКБК = "КодОперацииСектораУправления" Тогда
		Результат.Начало = 18;
		Результат.Длина  = 3;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КодПодвидаДоходов(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодПодвидаДоходов");
	
КонецФункции

Функция ЭлементКБК(КБК, ИмяЭлементаКБК) Экспорт
	
	РасположениеЭлемента = РасположениеЭлементаКБК(ИмяЭлементаКБК);
	
	Возврат Сред(КБК, РасположениеЭлемента.Начало, РасположениеЭлемента.Длина);
	
КонецФункции

Функция КодГлавногоАдминистратора(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодГлавногоАдминистратора");
	
КонецФункции

Функция ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "182";
	
КонецФункции

#КонецОбласти

#Область НалоговыйПериод
// Налоговый период - реквизит 107
// Период, к которому относится платеж (за который уплачивается)

// Возвращает список вариантов налоговых периодов
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с вариантами налоговых периодов
//
Функция ВидыНалоговыхПериодов() Экспорт
	
	// Первые два знака налогового периода предназначены для определения периодичности уплаты
	
	Периоды = Новый СписокЗначений;
	Периоды.Добавить(ПериодичностьМесяц(),     "МС - месячный платеж");
	Периоды.Добавить(ПериодичностьКвартал(),   "КВ - квартальный платеж");
	Периоды.Добавить(ПериодичностьПолугодие(), "ПЛ - полугодовой платеж");
	Периоды.Добавить(ПериодичностьГод(),       "ГД - годовой платеж"); 
	Периоды.Добавить(ПлатежПоКонкретнойДате(), "Платеж по конкретной дате");
	Периоды.Добавить(НезаполненноеЗначение(),  "0 - значение не указывается");
	
	Возврат Периоды;
	
КонецФункции

Функция ПериодичностьГод() Экспорт
	
	Возврат "ГД";
	
КонецФункции

Функция ПериодичностьПолугодие() Экспорт
	
	Возврат "ПЛ";
	
КонецФункции

Функция ПериодичностьКвартал() Экспорт
	
	Возврат "КВ";
	
КонецФункции

Функция ПериодичностьМесяц() Экспорт
	
	Возврат "МС";
	
КонецФункции

Функция ПлатежПоКонкретнойДате() Экспорт
	
	Возврат "-"; // Важно, чтобы отличалось от незаполненного значения
	
КонецФункции

Функция НалоговыйПериод(Период, Знач Периодичность, Знач Год = Неопределено, Знач НомерПериода = Неопределено) Экспорт
	
	Если Периодичность = НезаполненноеЗначение()
		ИЛИ ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		
		Возврат НезаполненноеЗначение();
		
	ИначеЕсли Периодичность = ПлатежПоКонкретнойДате() Тогда
		
		Возврат ПреобразоватьДатуКСтроке(Период);
		
	КонецЕсли;
	
	// Для остальных нужен Год и НомерПериода
	Если (НомерПериода = Неопределено ИЛИ Год = Неопределено)
		И НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
	Если Год = Неопределено Тогда
		Год          = Год(Период);
	КонецЕсли;
	
	Если НомерПериода = Неопределено Тогда
		НомерПериода = 0;
		
		Если Периодичность = ПериодичностьКвартал() Тогда
			НомерПериода = (2 + Месяц(НачалоКвартала(Период))) / 3;
		ИначеЕсли Периодичность = ПериодичностьМесяц() Тогда
			НомерПериода = Месяц(Период);
		ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
			Если Месяц(Период) <= 6 Тогда
				НомерПериода = 1;
			Иначе
				НомерПериода = 2;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Периодичность
		+ "." + Формат(НомерПериода, "ЧЦ=2; ЧН=; ЧВН=")
		+ "." + Формат(Год, "ЧЦ=4; ЧГ=");
	
КонецФункции

Функция ПредставлениеНалоговогоПериода(НалоговыйПериод) Экспорт
	
	ОписаниеПериода = РазобратьНалоговыйПериод(НалоговыйПериод);
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Год",          Формат(ОписаниеПериода.Год,  "ЧГ=0"));
	ПараметрыТекста.Вставить("НомерПериода", ОписаниеПериода.НомерПериода);
	
	Если ОписаниеПериода.Периодичность = ПлатежПоКонкретнойДате() Тогда
		Шаблон = НСтр("ru = 'по сроку уплаты [Дата]'");
		ПараметрыТекста.Вставить("Дата", Формат(ОписаниеПериода.Дата, "ДЛФ=D"));
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьГод() Тогда
		Шаблон = НСтр("ru = 'за [Год] год'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьПолугодие() Тогда
		Шаблон = НСтр("ru = 'за [НомерПериода] полугодие [Год] года'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьКвартал() Тогда
		Шаблон = НСтр("ru = 'за [НомерПериода] квартал [Год] года'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьМесяц() Тогда
		Шаблон = НСтр("ru = 'за [ИмяМесяца] [Год] года'");
		ПараметрыТекста.Вставить("ИмяМесяца", Нрег(Формат(ОписаниеПериода.Дата, "ДФ=MMMM")));
	Иначе
		Шаблон = "";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыТекста);
	
КонецФункции

Процедура ПривестиЭлементыНалоговогоПериода(Периодичность, Год, НомерПериода, Дата, ТекущаяДата) Экспорт
	
	Если НЕ РеквизитЗаполнен(Периодичность)
		ИЛИ ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		Периодичность = НезаполненноеЗначение();
		ГодПлатежа    = 0;
		НомерПериода  = 0;
		Дата          = '0001-01-01';
		Возврат;
	КонецЕсли;
	
	Если Периодичность = ПлатежПоКонкретнойДате() Тогда
		
		Если НЕ ЗначениеЗаполнено(Дата) Тогда
			Дата = ТекущаяДата;
		КонецЕсли;
		
		ГодПлатежа = Год(Дата);
		
		Возврат;
		
	КонецЕсли;
	
	Если Год = 0 Тогда
		Год = Год(ТекущаяДата);
	КонецЕсли;
	
	Если Периодичность = ПериодичностьГод() Тогда
		НомерПериода = 0;
		Дата = Дата(Год, 1, 1);
		Возврат;
	КонецЕсли;
	
	НомерПериода = Макс(1, НомерПериода);
	Если Периодичность = ПериодичностьМесяц() Тогда
		НомерПериода = Мин(НомерПериода, 12);
	ИначеЕсли Периодичность = ПериодичностьКвартал() Тогда
		НомерПериода = Мин(НомерПериода, 4);
	ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
		НомерПериода = Мин(НомерПериода, 2);
	Иначе
		Возврат;
	КонецЕсли;
	
	Дата = ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода);
	
КонецПроцедуры

Функция ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода)
	
	Если Год = 0 Тогда
		Возврат Дата(1, 1, 1);
	ИначеЕсли НомерПериода = 0 Тогда
		Возврат Дата(Год, 1, 1);
	ИначеЕсли Периодичность = ПериодичностьМесяц() Тогда
		Возврат Дата(Год, НомерПериода, 1);
	ИначеЕсли Периодичность = ПериодичностьКвартал() Тогда
		Возврат Дата(Год, НомерПериода * 3 - 2, 1);
	ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
		Возврат Дата(Год, НомерПериода * 6 - 5, 1);
	Иначе
		Возврат Дата(Год, 1, 1);
	КонецЕсли;
	
КонецФункции

Функция РазобратьНалоговыйПериод(Знач НалоговыйПериод) Экспорт
	
	ОписаниеПериода = Новый Структура;
	ОписаниеПериода.Вставить("Периодичность", НезаполненноеЗначение());
	ОписаниеПериода.Вставить("Год",           0);
	ОписаниеПериода.Вставить("НомерПериода",  0);
	ОписаниеПериода.Вставить("Дата",          '0001-01-01');
	
	// Реквизит 107 заполняется налоговым периодом, который имеет 10 знаков, 
	// восемь из которых имеют смысловое значение, а два являются разделительными знаками и заполняются точками (".")
	
	Если СтрДлина(НалоговыйПериод) <> 10 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	ЧастиПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НалоговыйПериод, ".", Ложь);
	Если ЧастиПериода.Количество() <> 3 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	// Предусмотрены два варианта:
	// 1. Первые два знака налогового периода предназначены для определения периодичности уплаты
	// 2. Форматом "день.месяц.год" указывается конкретная дата (например: "05.09.2003")
	
	Если СтрДлина(ЧастиПериода[0]) <> 2 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПериода[1])
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПериода[2]) Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Периодичность = ЧастиПериода[0];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Периодичность) Тогда
		Периодичность = ПлатежПоКонкретнойДате();
	ИначеЕсли ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Если Периодичность = ПлатежПоКонкретнойДате() Тогда
		Попытка
			Значение = Дата(ЧастиПериода[2], ЧастиПериода[1], ЧастиПериода[0]);
		Исключение
			Значение = Неопределено;
		КонецПопытки;
		Если Значение = Неопределено Тогда
			Возврат ОписаниеПериода;
		Иначе
			ОписаниеПериода.Дата = Значение;
			ОписаниеПериода.Год  = Год(Значение);
		КонецЕсли;
	Иначе
		Попытка
			НомерПериода = Число(ЧастиПериода[1]);
			Год          = Число(ЧастиПериода[2]);
		Исключение
			НомерПериода = 0;
			Год          = 0;
		КонецПопытки;
		Если Год = 0 Тогда
			Возврат ОписаниеПериода;
		Иначе
			ОписаниеПериода.НомерПериода = НомерПериода;
			ОписаниеПериода.Год          = Год;
			ОписаниеПериода.Дата         = ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПериода.Периодичность = Периодичность;
	Возврат ОписаниеПериода;
	
КонецФункции

Функция ПреобразоватьДатуКСтроке(Дата) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Дата") И ЗначениеЗаполнено(Дата) Тогда
		Возврат Формат(Дата, "ДЛФ=D");
	Иначе
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция НезаполненноеЗначение()
	
	// При невозможности указать конкретное значение, указывается ноль "0".
	// Наличие незаполненных реквизитов не допускается.
	
	Возврат "0";
	
КонецФункции

Функция РеквизитЗаполнен(Значение) Экспорт
	
	Возврат ЗначениеЗаполнено(Значение) И СокрП(Значение) <> НезаполненноеЗначение();
	
КонецФункции

Функция ОснованияНалоговогоПлатежа(ПрименениеПриказа107н)
	
	ОснованияПлатежа = Новый СписокЗначений;
	
	ОснованияПлатежа.Добавить("ТП", НСтр("ru='ТП - платежи текущего года'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("ЗД", НСтр("ru='ЗД - добровольное погашение задолженности по истекшим налоговым периодам, расчетным (отчетным) периодам при отсутствии требования налогового органа об уплате налогов (сборов)'"));
		ОснованияПлатежа.Добавить("БФ", НСтр("ru='БФ - текущий платеж физического лица – клиента банка (владельца счета), уплачиваемые со своего банковского счета'"));
	Иначе
		ОснованияПлатежа.Добавить("ЗД", НСтр("ru='ЗД - добровольное погашение задолженности по истекшим налоговым периодам'"));
		ОснованияПлатежа.Добавить("БФ", НСтр("ru='БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ТР", НСтр("ru='ТР - погашение задолженности по требованию налогового органа об уплате налогов (сборов)'"));
	ОснованияПлатежа.Добавить("РС", НСтр("ru='РС - погашение рассроченной задолженности'"));
	ОснованияПлатежа.Добавить("ОТ", НСтр("ru='ОТ - погашение отсроченной задолженности'"));
	ОснованияПлатежа.Добавить("РТ", НСтр("ru='РТ - погашение реструктурируемой задолженности'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("ПБ", НСтр("ru='ПБ - погашение должником задолженности в ходе процедур, применяемых в деле о банкротстве'"));
	Иначе
		ОснованияПлатежа.Добавить("ВУ", НСтр("ru='ВУ - погашение отсроченной задолженности в связи с введением внешнего управления'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ПР", НСтр("ru='ПР - погашение задолженности, приостановленной к взысканию'"));
	ОснованияПлатежа.Добавить("АП", НСтр("ru='АП - погашение задолженности по акту проверки'"));
	ОснованияПлатежа.Добавить("АР", НСтр("ru='АР - погашение задолженности по исполнительному документу'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("ИН", НСтр("ru='ИН – погашение инвестиционного налогового кредита'"));
		ОснованияПлатежа.Добавить("ТЛ", НСтр("ru='ТЛ – погашение учредителем (участником) должника, собственником имущества должника – унитарного предприятия или третьим лицом задолженности в ходе процедур, применяемых в деле о банкротстве'"));
		ОснованияПлатежа.Добавить("ЗТ", НСтр("ru='ЗТ – погашение текущей задолженности в ходе процедур, применяемых в деле о банкротстве'"));
	КонецЕсли;
	
	Возврат ОснованияПлатежа;
	
КонецФункции

Функция ОснованияТаможенногоПлатежа(ПрименениеПриказа107н, Период = Неопределено)
	
	ОснованияПлатежа = Новый СписокЗначений;
	
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("ДЕ", НСтр("ru='ДЕ - декларация на товары'"));
	Иначе
		ОснованияПлатежа.Добавить("ДЕ", НСтр("ru='ДЕ - таможенная декларация'"));
	КонецЕсли;
	Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
		ОснованияПлатежа.Добавить("ПД", НСтр("ru='ПД - пассажирская таможенная декларация'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ПО", НСтр("ru='ПО - таможенный приходный ордер'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("КТ", НСтр("ru='КТ - корректировка таможенной стоимости и таможенных платежей или корректировка декларации на товары'"));
	Иначе
		ОснованияПлатежа.Добавить("КВ", НСтр("ru='КВ - постановление-квитанция (при уплате штрафа)'"));
		ОснованияПлатежа.Добавить("КТ", НСтр("ru='КТ - форма корректировки таможенной стоимости и таможенных платежей'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ИД", НСтр("ru='ИД - исполнительный документ'"));
	ОснованияПлатежа.Добавить("ИП", НСтр("ru='ИП - инкассовое поручение'"));
	ОснованияПлатежа.Добавить("ТУ", НСтр("ru='ТУ - требование об уплате таможенных платежей'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("БД", НСтр("ru='БД - документы финансово-хозяйственной деятельности таможенных органов'"));
	Иначе
		ОснованияПлатежа.Добавить("БД", НСтр("ru='БД - документы бухгалтерских служб таможенных органов'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ИН", НСтр("ru='ИН - документ инкассации'"));
	ОснованияПлатежа.Добавить("КП", НСтр("ru='КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке'"));
	
	Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
		ОснованияПлатежа.Добавить("КВ", НСтр("ru='КВ - квитанция получателя международного почтового отправления'"));
	КонецЕсли;
	
	ОснованияПлатежа.Добавить("00", НСтр("ru='00 - иные случаи'"));
	
	Возврат ОснованияПлатежа;
	
КонецФункции 

Функция ТипыНалоговогоПлатежа(ПрименениеПриказа107н)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ПрименениеПриказа107н Тогда
		ТипыПлатежа.Добавить("0", НСтр("ru = '0 - все, кроме пени и процентов'"));
		ТипыПлатежа.Добавить("ПЕ", НСтр("ru = 'ПЕ - уплата пени'"));
		ТипыПлатежа.Добавить("ПЦ", НСтр("ru = 'ПЦ - уплата процентов'"));
	Иначе
		ТипыПлатежа.Добавить("НС", НСтр("ru='НС - уплата налога или сбора'"));
		ТипыПлатежа.Добавить("ПЛ", НСтр("ru='ПЛ - уплата платежа'"));
		ТипыПлатежа.Добавить("ГП", НСтр("ru='ГП - уплата пошлины'"));
		ТипыПлатежа.Добавить("ВЗ", НСтр("ru='ВЗ - уплата взноса'"));
		ТипыПлатежа.Добавить("АВ", НСтр("ru='АВ - уплата аванса или предоплата (в том числе декадные платежи)'"));
		ТипыПлатежа.Добавить("ПЕ", НСтр("ru='ПЕ - уплата пени'"));
		ТипыПлатежа.Добавить("ПЦ", НСтр("ru='ПЦ - уплата процентов'"));
		ТипыПлатежа.Добавить("СА", НСтр("ru='СА - налоговые санкции, установленные Налоговым кодексом РФ'"));
		ТипыПлатежа.Добавить("АШ", НСтр("ru='АШ - административные штрафы'"));
		ТипыПлатежа.Добавить("ИШ", НСтр("ru='ИШ - иные штрафы, установленные соответствующими нормативными актами'"));
		ТипыПлатежа.Добавить("0", НСтр("ru='0 - невозможно указать конкретное значение показателя'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипыТаможенногоПлатежа(ПрименениеПриказа107н)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ПрименениеПриказа107н Тогда
		ТипыПлатежа.Добавить("0", НСтр("ru='0 - текущий платеж'"));
	Иначе
		ТипыПлатежа.Добавить("ТП", НСтр("ru='ТП - текущий платеж'"));
	КонецЕсли;
	ТипыПлатежа.Добавить("ШТ", НСтр("ru='ШТ - уплата штрафа'"));
	ТипыПлатежа.Добавить("ЗД", НСтр("ru='ЗД - уплата в счет погашения задолженности'"));
	ТипыПлатежа.Добавить("ПЕ", НСтр("ru='ПЕ - уплата пени'"));
	Если Не ПрименениеПриказа107н Тогда
		ТипыПлатежа.Добавить("0", НСтр("ru='0 - невозможно указать конкретное значение показателя'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

#КонецОбласти
