////////////////////////////////////////////////////////////////////////////////
// Переопределяемые процедуры, вызываемые из обработчиков форм, таких как:
// "ПриСозданииНаСервере", "ПриЧтенииНаСервере", "ПередЗаписьюНаСервере", 
// "ПослеЗаписи", а также при изменении некоторых реквизитов табличной части,
// таких как "Номенклатура", "Характеристика".
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеОбработчиковФормы

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Если Форма.Параметры.Свойство("ДекомпиляцияЭлементов") Тогда
        ВнешниеОбработки.Создать(Форма.Параметры.ДекомпиляцияЭлементов.ИмяПодключеннойОбработки,Ложь).ОпределитьВнутренниеСвойстваЭлементов(Форма);
    КонецЕсли;                                             
	
	Если Форма.ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаДокумента" ИЛИ Форма.ИмяФормы = "Документ.ЗаказКлиента.Форма.БП_ФормаДокумента" // Тогда
		// silber {
			ИЛИ Форма.ИмяФормы = "Документ.КП.Форма.ФормаДокумента" Тогда
		// } silber
			
		ПриСозданииНаСервере_ЦенаСоСкидкой(Форма, Отказ, СтандартнаяОбработка);		
		
		СТ_ДоставкаТоваров.ПриСозданииНаСервере_Комментарии(Форма, Отказ, СтандартнаяОбработка); 
		
		//СТОК Бойков
		Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) И
			// silber {
			Форма.ИмяФормы <> "Документ.КП.Форма.ФормаДокумента" Тогда
			// } silber
			
			// + АВТ_Новосельцев 09.03.2017 - 1
			//Форма.Объект.Руководитель = СТ_Общий.ПолучитьРуководителя();
			//Форма.Объект.ГлавныйБухгалтер = СТ_Общий.ПолучитьГБ();
			// - АВТ_Новосельцев 09.03.2017 - 1
			
			ДатаОтгрузки = ТекущаяДата();
			Форма.Объект.ЖелаемаяДатаОтгрузки	 = ДатаОтгрузки;
			Форма.Объект.ДатаОтгрузки			 = ДатаОтгрузки;
			ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Форма.Объект.Товары, 				"ДатаОтгрузки",	 Форма.Объект.ДатаОтгрузки);
			ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Форма.Объект.ЭтапыГрафикаОплаты, 	"ДатаПлатежа",	 Форма.Объект.ДатаОтгрузки);
			
		КонецЕсли;
		//СТОК Бойков
		
	ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента" Тогда 
		
		СТ_ДоставкаТоваров.ПриСозданииНаСервере_Комментарии(Форма, Отказ, СтандартнаяОбработка); 
		
		//СТОК Бойков
		ЗаказКлиента = Форма.Объект.ЗаказКлиента;
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
			ТекстОснования = "Заказ №"+ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "Номер");
			Если СокрЛП(Форма.Объект.Основание) <> ТекстОснования Тогда
				Форма.Объект.Основание = ТекстОснования;			
			КонецЕсли; 
		КонецЕсли; 	
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			
			// + АВТ_Новосельцев 09.03.2017 - 1
			//Форма.Объект.Руководитель = СТ_Общий.ПолучитьРуководителя();
			//Форма.Объект.ГлавныйБухгалтер = СТ_Общий.ПолучитьГБ();
			// - АВТ_Новосельцев 09.03.2017 - 1
			Форма.Объект.Отпустил = СТ_Общий.ПолучитьОтпустил();
			Форма.Объект.ОтпустилДолжность = "менеджер по продажам";
			
			//Вытащим манагера из заказа
			Если ЗначениеЗаполнено(Форма.Объект.ЗаказКлиента) Тогда
				Форма.Объект.Менеджер = Форма.Объект.ЗаказКлиента.Менеджер;
			КонецЕсли;	
		
		КонецЕсли; 		
		//СТОК Бойков
	
	ИначеЕсли Форма.ИмяФормы = "Справочник.СоглашенияСКлиентами.Форма.ФормаЭлемента" Тогда
		//ПриСозданииНаСервере_СкидкиВСоглашении(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПересчетТоваров.Форма.ФормаДокумента" Тогда	
		ПриСозданииНаСервере_МестаВПересчетТоваров(Форма);

		// ******   Поле формы "ст_Основание"    ***********
		
		НовыйЭлемент = Форма.Элементы.Вставить("ст_Основание",
			Тип("ПолеФормы"),
			Неопределено,
			Форма.Элементы.СтраницыФормы);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = "Основание";
		НовыйЭлемент.ПутьКДанным = "Объект.ст_Основание";
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.Партнеры.Форма.ФормаЭлемента" ИЛИ Форма.ИмяФормы = "Справочник.Партнеры.Форма.АТ_ФормаЭлемента" Тогда
		// Добавление реквизита УН_Партнера
		НовыйЭлемент = Форма.Элементы.Вставить("УН_Партнера",
			Тип("ПолеФормы"),
			Форма.Элементы.ГруппаОбщаяИнформация,
			Форма.Элементы.ГруппаПрочиеСведения);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Объект.УН_Партнера";
		//Богушевич добавляем кнопку вывода карточки клиента
		
		НовыйЭлемент = Форма.Элементы.Вставить("АТ_РегиональныйМенеджер",
			Тип("ПолеФормы"),
			Форма.Элементы.ГруппаОбщаяИнформация,
			Форма.Элементы.ГруппаПрочиеСведения);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Объект.АТ_РегиональныйМенеджер";
		
		Команда = Форма.Команды.Добавить("ПоказатьКарточкуКлиента");
		Команда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		Кнопка = Форма.Элементы.Добавить("Кнопка", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
		Кнопка.Заголовок = "Карточка клиента";
		Кнопка.ИмяКоманды = "ПоказатьКарточкуКлиента";
		Кнопка.Картинка = БиблиотекаКартинок.АктивныеПользователи;
		Кнопка.Отображение = ОтображениеКнопки.Картинка;
		
		//конец
		
	//+ АТ Терентьев
	ИначеЕсли Форма.ИмяФормы = "ЖурналДокументов.БезналичныеПлатежи.Форма.ФормаСписка" Тогда
		
		Команда = Форма.Команды.Добавить("РазнестиПлатежи");
		Команда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		Кнопка = Форма.Элементы.Добавить("Кнопка", Тип("КнопкаФормы"), Форма.Элементы.ПлатежиОтборы);
		Кнопка.Заголовок = "Разнести платежи";
		Кнопка.ИмяКоманды = "РазнестиПлатежи";
		Кнопка.Картинка = БиблиотекаКартинок.ЗначокФинансы32;
		Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	//-АТ Терентьев
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда			
		// Добавление реквизита УН_Контрагента
		НовыйЭлемент = Форма.Элементы.Добавить("УН_Контрагента",
			Тип("ПолеФормы"),
			Неопределено);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Объект.УН_Контрагента";
		
		// Добавление реквизита ЭтоРозничный
		НовыйЭлемент = Форма.Элементы.Добавить("ЭтоРозничный",
			Тип("ПолеФормы"),
			Неопределено);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПутьКДанным = "Объект.ЭтоРозничный";
		
		// Добавление реквизита ЭтоРозничный
		НовыйЭлемент = Форма.Элементы.Добавить("АТ_НеАктивный",
			Тип("ПолеФормы"),
			Неопределено);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПутьКДанным = "Объект.АТ_НеАктивный";
	
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента" Тогда	
		// Добавление кнопки "Сверить по файлу поставщика"
		Команда = Форма.Команды.Добавить("СверитьПоФайлуПоставщика");
		Команда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		Кнопка = Форма.Элементы.Добавить("Кнопка", Тип("КнопкаФормы"), Форма.Элементы.Товары.КоманднаяПанель);
		Кнопка.Заголовок = "Сверить по файлу поставщика";
		Кнопка.ИмяКоманды = "СверитьПоФайлуПоставщика";
		Кнопка.Картинка = БиблиотекаКартинок.ЗагрузитьДополнительныйОтчетИлиОбработку;
		Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;

	ИначеЕсли Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента" Тогда	
		// Добавление кнопки "Сверить по файлу поставщика"
		Команда = Форма.Команды.Добавить("СверитьПоФайлуПоставщика");
		Команда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		Кнопка = Форма.Элементы.Добавить("Кнопка", Тип("КнопкаФормы"), Форма.Элементы.Товары.КоманднаяПанель);
		Кнопка.Заголовок = "Сверить по файлу поставщика";
		Кнопка.ИмяКоманды = "СверитьПоФайлуПоставщика";
		Кнопка.Картинка = БиблиотекаКартинок.ЗагрузитьДополнительныйОтчетИлиОбработку;
		Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;		
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ОрдерНаОтражениеИзлишковТоваров.Форма.ФормаДокумента" Тогда
		//	Добавление реквизита "ВидОперацииСУС".
		//	Используется для обмен с "Ярус"
		ЭлементФормы = Форма.Элементы.Добавить("ВидОперацииСУС", Тип("ПолеФормы"), Форма.Элементы.Шапка);
		ЭлементФормы.ПутьКДанным = "Объект.ВидОперацииСУС";
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ОрдерНаОтражениеНедостачТоваров.Форма.ФормаДокумента" Тогда
		//	Добавление реквизита "ВидОперацииСУС".
		//	Используется для обмен с "Ярус"
		ЭлементФормы = Форма.Элементы.Вставить("ВидОперацииСУС", Тип("ПолеФормы"), Форма.Элементы.ГруппаИнформация, Форма.Элементы.ГруппаКомментарий);
		ЭлементФормы.ПутьКДанным = "Объект.ВидОперацииСУС";
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.РастягиватьПоГоризонтали = Ложь;	
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.РабочееМестоМенеджераПоДоставке.Форма.Форма" 
		Или Форма.ИмяФормы = "Документ.ЗаданиеНаПеревозку.Форма.ФормаПодбораРаспоряжений" Тогда
		
		// Необходимо выделять заказы, по которым есть реализации в распоряжениях
		СТ_ДоставкаТоваров.ПриСозданииНаСервере_РаспоряженияНаДоставку(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеБезналичныхДенежныхСредств.Форма.ФормаСписка" Тогда	
		
		НовыйЭлемент = Форма.Элементы.Вставить("Контрагент",Тип("ПолеФормы"),Форма.Элементы.Список,Неопределено);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "Список.Контрагент";
		
	// silber {
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.БизнесРегионы.Форма.ФормаСписка" Тогда
		
		АТ_МинЗаказ.ИницилизироватьСписокБизнесРегионов(Форма);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.БизнесРегионы.Форма.ФормаЭлемента" Тогда
		
		АТ_МинЗаказ.ИницилизироватьФормуБизнесРегиона(Форма);
		
	// } silber
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.АвансовыйОтчет.Форма.ФормаДокумента"
		Или (Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента"
				И Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
		Или (Форма.ИмяФормы = "Документ.ПоступлениеУслугПрочихАктивов.Форма.ФормаДокумента"
				И Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо) Тогда	
				
		Если ПустаяСтрока(Форма.Объект.НазначениеАванса) Тогда
		    Форма.Объект.НазначениеАванса = "Выдача под авансовый отчет";
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	//Storverk Тюняков
	//Мопед не мой. Перенес из ПриСозданииНаСервере
	//Если Форма.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента" Тогда
	//	ОснованиеСФ = Форма.Объект.ДокументОснование;
	//	Если ЗначениеЗаполнено(ОснованиеСФ) Тогда
	//		Форма.Объект.Номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеСФ, "Номер");	
	//	КонецЕсли; 	
	//КонецЕсли;
	//Storverk Тюняков
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	//Storverk Тюняков
	Если Форма.ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаДокумента" Тогда
		Для каждого ТекущаяСтрока Из Форма.Объект.Товары Цикл
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСоСкидкой(ТекущаяСтрока);			
		КонецЦикла; 	
	КонецЕсли;
	//Storverk Тюняков
	
	/// Сток Бойков Начало
	// при проведение реализации создаем с/ф
	//Попытка 
	//	лСсылка = Форма.Объект.Ссылка;
	//Исключение
	//	лСсылка = "";
	//КонецПопытки;
	//Если ТипЗнч(лСсылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг")  Тогда
	//	Попытка
	//		СчетФактураДокумента = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(лСсылка);
	//		
	//		Если (СчетФактураДокумента.количество() = 0)и(ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
	//			НДок = Документы.СчетФактураВыданный.СоздатьДокумент();
	//			НДок.ДокументОснование 		= лСсылка;
	//			НДок.Номер					= лСсылка.Номер;
	//			НДок.Организация			= лСсылка.Организация;
	//			НДок.Валюта					= лСсылка.Валюта;
	//			НДок.ТипСчетаФактуры		= Перечисления.ТипыВыданныхСчетовФактур.НаРеализацию;
	//			НДок.ДатаВыставления = НДок.Дата;
	//			//НДок.Заполнить(лСсылка);
	//			НДок.Записать(РежимЗаписиДокумента.Проведение);
	//		КонецЕсли;
	//	Исключение
	//	КонецПопытки;    
	//КонецЕсли;
	//Если ТипЗнч(лСсылка)=Тип("ДокументСсылка.ЗаказПоставщику")  Тогда
	//	Если 1 = 2 Тогда лСсылка = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(); КонецЕсли;		
	//	//Проверим что в заказе стоит
	//	дПоставщик = лСсылка.Партнер;
	//	Для Каждого Стр из лСсылка.Товары Цикл
	//		лНоменклатура = Стр.Номенклатура;
	//		лЦена = Стр.Цена;      			
	//		лПрайс = СТ_Общий.ПолучитьПрайсовуюЦену(лНоменклатура,дПоставщик,лСсылка);
	//		Если ЗначениеЗаполнено(лПрайс) Тогда
	//			Если (лЦена > лПрайс) тогда
	//				Сообщить("В строке "+
	//							Стр.НомерСтроки +
	//						" цена превыщает текущий прайс "+лНоменклатура +" (" + лЦена + ") цена по прайсу " + лПрайс
	//				);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//Если ТипЗнч(лСсылка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  Тогда
	//	//Проверяем корректность цен
	//	Если 1 = 2 Тогда лСсылка = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(); КонецЕсли;
	//	лЗаказ = лСсылка.ЗаказПоставщику;
	//	//Проверим что в заказе стоит
	//	дПоставщик = лСсылка.Партнер;
	//	Для Каждого Стр из лСсылка.Товары Цикл
	//		лНоменклатура = Стр.Номенклатура;
	//		лЦена = Стр.Цена;
	//		
	//		лПрайс = СТ_Общий.ПолучитьПрайсовуюЦену(лНоменклатура,дПоставщик,лСсылка);
	//		Если ЗначениеЗаполнено(лПрайс) Тогда
	//			Если (лЦена > лПрайс) тогда
	//				Сообщить("В строке "+
	//							Стр.НомерСтроки +
	//						" цена превыщает текущий прайс "+лНоменклатура +" (" + лЦена + ") цена по прайсу " + лПрайс
	//				);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЗначениеЗаполнено(лЗаказ) Тогда
	//			НайдСтр = лЗаказ.Товары.Найти(лНоменклатура,"Номенклатура");
	//			Если (НайдСтр <> неопределено) Тогда
	//				лЦенаЗаказа = НайдСтр.Цена;
	//				Если лЦенаЗаказа <> лЦена Тогда
	//					Сообщить("В строке "+
	//							Стр.НомерСтроки +
	//						" цена отличается от цены в заказе "+лНоменклатура +" (" + лЦена + ") цена по заказу " + лЦенаЗаказа
	//					);
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	//
	//КонецЕсли;
	//Если ТипЗнч(лСсылка)=Тип("СправочникСсылка.Номенклатура")  Тогда
	//	СТ_Общий.ОбновитьХЭШПоискаНоменклатура(лСсылка);
	//КонецЕсли;
	//
	/// Сток Бойков Окончание

	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНоменклатуры

// Переопределяемая процедура, вызываемая из обработчика реквизита "Номенклатура" табличной части.
//
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка табличной части.
// 	ПараметрыДействия - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - Структура - Кэшированные значения табличной части.
Процедура НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока, ПараметрыДействия, КэшированныеЗначения)Экспорт

	//Storverk Тюняков
	Если ПараметрыДействия.ИмяФормы = "Документ.ПересчетТоваров.Форма.ФормаДокумента" Тогда
		
		МестоХранения = СТ_ОбщегоНазначения.ПолучитьМестоХранения(ТекущаяСтрока.Номенклатура, ПараметрыДействия.Склад);
			
		Если МестоХранения = Неопределено Тогда
			МестоХранения = "";		
		КонецЕсли;	
		
		ТекущаяСтрока.Вставить("МестоХранения", МестоХранения);
		
	КонецЕсли; 
	//Storverk Тюняков

КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеХарактеристики

// Переопределяемая процедура, вызываемая из обработчика реквизита "Характеристика" табличной части.
//
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка табличной части.
// 	ПараметрыДействия - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - Структура - Кэшированные значения табличной части.
Процедура ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока, ПараметрыДействия, КэшированныеЗначения)Экспорт


КонецПроцедуры
	
#КонецОбласти 

#Область РассылкиИОповещенияКлиентам

// Переопределяемая процедура, возвращающая признак необходимости настройки для типа события регламентного задания.
//
// Параметры:
//  ТипСобытия  - ПеречислениеСсылка.ТипыСобытийОповещений - тип события оповещения, для которого указывается признак.
//
// Возвращаемое значение:
//   Булево   - Истина, если настройка регламентного задания необходима, Ложь в обратном случае.
//
Функция ДляТипаСобытияТребуетсяНастройкаРегламентногоЗадания(ТипСобытия) Экспорт

	Возврат Ложь;

КонецФункции

// Переопределяемая процедура, в которой можно настроить параметры обработки очереди оповещений по типу события.
//
// Параметры:
//  ТипСобытия         - ПеречислениеСсылка.ТипыСобытийОповещений - тип события оповещения для которого указываются настройки.
//  СтруктураНастроек  - Структура - Настройки, подробное описание см. в модуле менеджера перечисления ТипыСобытийОповещений.
//
Процедура НастройкиТипаСобытияДляОбработкиОчередиОповещений(ТипСобытия, СтруктураНастроек) Экспорт

	

КонецПроцедуры

// Переопределяемая процедура, в которой можно настроить анализ данных для оповещений клиентам и запись в очередь оповещений.
// Примеры реализации см. в общем модуле РассылкиИОповещенияКлиентам
//
// Параметры:
//  ВидОповещения  - Справочник.ВидыОповещенийКлиентам - вид оповещения, для которого выполняется анализ данных.
//
Процедура АнализДанныхДляВидаОповещения(ВидОповещения) Экспорт

	

КонецПроцедуры 

// Переопределяемая процедура, в которой можно получить состояние объетка до записи.
//
// Параметры:
//  Источник  - Произвольный - объект или набор записей регистра, который вызвал событие "перед записью".
//  Отказ  - Булево - признак отказа от записи объекта.
//  РежимЗаписи  - РежимЗаписиДокумента - действительно, только в случае записи документа, в остальных случаях Неопределено.
//  РежимПроведения  - РежимПроведения - действительно, только в случае проведения документа, в остальных случаях Неопределено.
//
Процедура ИсточникОповещенияПередЗаписью(Источник, Отказ, РежимЗаписи , РежимПроведения) Экспорт
	
	
	
КонецПроцедуры

// Переопределяемая процедура, в которой можно получить новое состояние объетка и при необходимости выполнить запись
// в очередь оповещений.
//
// Параметры:
//  Источник  - Произвольный - объект или набор записей регистра, который вызвал событие "при записи".
//  Отказ  - Булево - признак отказа от записи объекта.
//
Процедура ИсточникОповещенияПриЗаписи(Источник, Отказ) Экспорт
	
	
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Storverk

Процедура ПриСозданииНаСервере_СкидкиВСоглашении(Форма, Отказ, СтандартнаяОбработка)
	
		/////   РЕКВИЗИТЫ   //////////
		
		МассивДобавляемыхРеквизитов = Новый Массив;
		
		// ******   Реквизит формы "СТ_СкидкиНаПроизводителя"    ***********
		НовыйРеквизит = Новый РеквизитФормы("СТ_СкидкиНаПроизводителя",
			Новый ОписаниеТипов("ДинамическийСписок"));
		НовыйРеквизит.Заголовок = "СТ Скидки на производителя";
		НовыйРеквизит.СохраняемыеДанные = Ложь;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
				
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		Форма.СТ_СкидкиНаПроизводителя.ОсновнаяТаблица = "РегистрСведений.СТ_ДополнительныеСкидки";
		
		/////   КОМАНДЫ   //////////
		
		//// ******   Команда формы "СТ_ДобвитьСкидку"    ***********	
		//НоваяКоманда = Форма.Команды.Добавить("СТ_ДобавитьСкидку");
		//НоваяКоманда.Действие = "СТ_ДобавитьСкидку";
		//НоваяКоманда.Заголовок = "Добавить скидку";
		//НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
		//НоваяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		//НоваяКоманда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		//НоваяКоманда.Подсказка = "Добавить скидку";
		
		/////   ЭЛЕМЕНТЫ   //////////
				
		// ******   Группа формы "СТ_СкидкиНаПроизводителя"    ***********		
		НовыйЭлемент = Форма.Элементы.Вставить("ГруппаСТ_СкидкиНаПроизводителя",
			Тип("ГруппаФормы"),
			Форма.Элементы.ГруппаСкидкиНаценки,
			Неопределено);
		НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НовыйЭлемент.Заголовок = "Скидки по производителю и группе";
		НовыйЭлемент.Подсказка = "Скидки по производителю и группе";
		
		// ******   Таблица формы "СТ_СкидкиНаПроизводителя"    ***********		
		НовыйЭлемент = Форма.Элементы.Вставить("СТ_СкидкиНаПроизводителя",
			Тип("ТаблицаФормы"),
			Форма.Элементы.ГруппаСТ_СкидкиНаПроизводителя,
			Неопределено);
		НовыйЭлемент.ПутьКДанным = "СТ_СкидкиНаПроизводителя";
		НовыйЭлемент.АвтоВводНовойСтроки = Ложь;
		НовыйЭлемент.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.РежимВыделения = РежимВыделенияТаблицы.Множественный;
		НовыйЭлемент.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
		// ******   Поле формы "СТ_СкидкиНаПроизводителяСкидка"    ***********	
		НовыйЭлемент = Форма.Элементы.Вставить("СТ_СкидкиНаПроизводителяСкидка",
			Тип("ПолеФормы"),
			Форма.Элементы.СТ_СкидкиНаПроизводителя,
			Неопределено);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "СТ_СкидкиНаПроизводителя.Скидка";
		
		// ******   Поле формы "СТ_СкидкиНаПроизводителяПроизводитель"    ***********	
		НовыйЭлемент = Форма.Элементы.Вставить("СТ_СкидкиНаПроизводителяПроизводитель",
			Тип("ПолеФормы"),
			Форма.Элементы.СТ_СкидкиНаПроизводителя,
			Форма.Элементы.СТ_СкидкиНаПроизводителяСкидка);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "СТ_СкидкиНаПроизводителя.Производитель";
		
		// ******   Поле формы "СТ_СкидкиНаПроизводителяГруппа"    ***********	
		НовыйЭлемент = Форма.Элементы.Вставить("СТ_СкидкиНаПроизводителяГруппа",
			Тип("ПолеФормы"),
			Форма.Элементы.СТ_СкидкиНаПроизводителя,
			Форма.Элементы.СТ_СкидкиНаПроизводителяПроизводитель);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "СТ_СкидкиНаПроизводителя.Группа";
		
		// ******   Поле формы "СТ_СкидкиНаПроизводителяСоглашение"    ***********	
		НовыйЭлемент = Форма.Элементы.Вставить("СТ_СкидкиНаПроизводителяСоглашение",
			Тип("ПолеФормы"),
			Форма.Элементы.СТ_СкидкиНаПроизводителя,
			Форма.Элементы.СТ_СкидкиНаПроизводителяГруппа);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "СТ_СкидкиНаПроизводителя.Соглашение";
		НовыйЭлемент.Видимость = Ложь;
		
		// ******   Поле формы "СТ_СкидкиНаПроизводителяПериод"    ***********		
		НовыйЭлемент = Форма.Элементы.Вставить("СТ_СкидкиНаПроизводителяПериод",
			Тип("ПолеФормы"),
			Форма.Элементы.СТ_СкидкиНаПроизводителя,
			Форма.Элементы.СТ_СкидкиНаПроизводителяСоглашение);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "СТ_СкидкиНаПроизводителя.Период";	
		
		//// ******   Кнопка формы "СТ_ДобавитьСкидку"    ***********
		//
		//НовыйЭлемент = Форма.Элементы.Вставить("СТ_ДобавитьСкидку",
		//	Тип("КнопкаФормы"),
		//	Форма.Элементы.ГруппаСТ_СкидкиНаПроизводителя,
		//	Форма.Элементы.СТ_СкидкиНаПроизводителя);
		//НовыйЭлемент.ИмяКоманды = "СТ_ДобавитьСкидку";

КонецПроцедуры

Процедура ПриСозданииНаСервере_МестаВПересчетТоваров(Форма) Экспорт
	
	ИмяРеквизита = "МестоХранения";
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Элементы, "ТоварыМестоХранения") Тогда
		Возврат;
	КонецЕсли; 
	
	/////   РЕКВИЗИТЫ   //////////
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	// ******   Реквизит формы "МестоХранения"    ***********
	
	НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"));
	НовыйРеквизит.Путь = "Объект.Товары";
	НовыйРеквизит.Заголовок = "Место хранения";
	НовыйРеквизит.СохраняемыеДанные = Ложь;
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	
	/////   ЭЛЕМЕНТЫ   //////////
	
	// ******   Поле формы "ТоварыМестоХранения"    ***********
	
	НовыйЭлемент = Форма.Элементы.Вставить("ТоварыМестоХранения",
		Тип("ПолеФормы"),
		Форма.Элементы.Товары,
		Неопределено);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.Товары.МестоХранения";	

КонецПроцедуры

Процедура ПриСозданииНаСервере_ЦенаСоСкидкой(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	// ******   Реквизит формы "ЦенаСоСкидкой"    ***********		
	НовыйРеквизит = Новый РеквизитФормы("ЦенаСоСкидкой",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	НовыйРеквизит.Путь = "Объект.Товары";
	НовыйРеквизит.Заголовок = "Цена со скидкой";
	НовыйРеквизит.СохраняемыеДанные = Ложь;		
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Для каждого ТекущаяСтрока Из Форма.Объект.Товары Цикл
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСоСкидкой(ТекущаяСтрока);			
	КонецЦикла;
	
	/////   ЭЛЕМЕНТЫ   //////////		
	НовыйЭлемент = Форма.Элементы.Вставить("ТоварыЦенаСоСкидкой",
		Тип("ПолеФормы"),
		Форма.Элементы.Товары,
		Форма.Элементы.ТоварыПроцентАвтоматическойСкидки);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.Товары.ЦенаСоСкидкой";	
	НовыйЭлемент.Подсказка = "Цена с учетом всех скидок";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ТоварыЦенаСоСкидкойПриИзменении");
	
КонецПроцедуры

#КонецОбласти
