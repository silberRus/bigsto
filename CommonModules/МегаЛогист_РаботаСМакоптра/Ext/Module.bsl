
// Функция производит аторизацию с сервисом и возвращает ИД сессии
//
// Параметры
// Возвращаемое значение:
//	Строка - ИД сессии
//
&НаСервере
Функция Авторазация(ТекстСообщения = "Выгрузка в") Экспорт 

	СтруктураАвторизации = МегаЛогист_РаботаСМакоптра.ПолучитьСтруктуруДляАвторизации();
	
	Если СтруктураАвторизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не СтруктураАвторизации.МегаЛогист_Максоптра_АвтоматическоеПланирование Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения + " Maxoptra запрещена. Проверьте настройки подключения к сервису Maxoptra и попробуйте еще раз";
		СообщениеПользователю.Сообщить();
		Возврат Неопределено;
	
	КонецЕсли;
	Попытка
	
		Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
		Запрос = Новый HTTPЗапрос("/rest/2/authentication/createSession?accountID=" + СтруктураАвторизации.МегаЛогист_Максоптра_URLАккаунта + "&user=" + СтруктураАвторизации.МегаЛогист_Максоптра_ИмяПользователя + "&password=" + СтруктураАвторизации.МегаЛогист_Максоптра_Пароль);
		Запрос.УстановитьТелоИзСтроки("", КодировкаТекста.UTF8);
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(СтрокаОтвета);
		
		СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
		
		ПроверитьНаОшибку(СтруктураОтвета, Ложь);
		Возврат СтруктураОтвета.authResponse.sessionID;
	
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Аутентификация в сервисе Maxoptra не выполнена. Проверьте настройки подключения и попробуйте еще раз";
		СообщениеПользователю.Сообщить();
	КонецПопытки;

КонецФункции // Авторазация()

// Возвращает структуру для авторизации
//
// Возвращаемое значение:
//   Структура   - структура содержащая значения для подключения
//
&НаСервере
Функция ПолучитьСтруктуруДляАвторизации() Экспорт
	
	Если НЕ Константы.МегаЛогист_Максоптра_АвтоматическоеПланирование.Получить() тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВходящаяСтрока = Константы.МегаЛогист_Максоптра_URLСервиса.Получить();
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "http://", "");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "https://", "");
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВходящаяСтрока, "/", Истина, Истина);
	Если МассивПодстрок.Количество() <> 2 Тогда
	
		Сообщить("Некорректно задан URL сервиса. Проверьте настройки подключения");
		Возврат Неопределено;
	
	КонецЕсли;
	
	Возврат Новый Структура("МегаЛогист_Максоптра_URLСервиса, 
							|МегаЛогист_Максоптра_ПортСервиса, 
							|МегаЛогист_Максоптра_URLАккаунта, 
							|МегаЛогист_Максоптра_ИмяПользователя, 
							|МегаЛогист_Максоптра_Пароль,
							|МегаЛогист_Максоптра_АвтоматическоеПланирование",
							МассивПодстрок[0], 
							Константы.МегаЛогист_Максоптра_ПортСервиса.Получить(), 
							МассивПодстрок[1], 
							Константы.МегаЛогист_Максоптра_ИмяПользователя.Получить(), 
							Константы.МегаЛогист_Максоптра_Пароль.Получить(),
							Константы.МегаЛогист_Максоптра_АвтоматическоеПланирование.Получить());

КонецФункции // ПолучитьСтруктуруДляАвторизации()

// Процедура загружает зоны контоля
//
// Параметры
//  Ид  - Строка - ИД сессии 
//
&НаСервере
Процедура getAreaOfControls(Ид) Экспорт

	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/objects/getAreaOfControls?sessionID="+Ид);
	Запрос.УстановитьТелоИзСтроки("", КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаОтвета);
	
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Попытка
		Для каждого ЗонаКонтроля Из СтруктураОтвета.areaOfControlResponse.aocs.aoc Цикл
			НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоКоду(ЗонаКонтроля.id);
			Если Не ЗначениеЗаполнено(НайденныйЭлемент) Тогда
				НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.СоздатьЭлемент();
				НайденныйЭлемент.Код = ЗонаКонтроля.id;
			Иначе
				НайденныйЭлемент = НайденныйЭлемент.ПолучитьОбъект()
			КонецЕсли;
			НайденныйЭлемент.Наименование = ЗонаКонтроля.name;
			НайденныйЭлемент.Записать();
		КонецЦикла;
	Исключение
		Попытка
			ЗонаКонтроля = СтруктураОтвета.areaOfControlResponse.aocs.aoc;
			НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоКоду(ЗонаКонтроля.id);
			Если Не ЗначениеЗаполнено(НайденныйЭлемент) Тогда
				НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.СоздатьЭлемент();
				НайденныйЭлемент.Код = ЗонаКонтроля.id;
			Иначе
				НайденныйЭлемент = НайденныйЭлемент.ПолучитьОбъект()
			КонецЕсли;
			НайденныйЭлемент.Наименование = ЗонаКонтроля.name;
			НайденныйЭлемент.Записать();
		Исключение
		КонецПопытки;
	КонецПопытки;

КонецПроцедуры // getAreaOfControls()

// Процедура загружает геозоны
//
// Параметры
//  Ид  - Строка - ИД сессии
//
&НаСервере
Процедура getSchedulingZones(Ид) Экспорт

	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	Выборка = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
		Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/objects/getSchedulingZones?sessionID=" + Ид + "&aocID=" + Выборка.Код);
		Запрос.УстановитьТелоИзСтроки("", КодировкаТекста.UTF8);
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(СтрокаОтвета);
		
		СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
		
		//ВывестиОшибку(СтруктураОтвета.error);
		Отказ = Ложь;
		ПроверитьНаОшибку(СтруктураОтвета, Отказ, "Для склада с кодом: " + Выборка.Код);	
		Если Отказ Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ТипЗнч(СтруктураОтвета.SchedulingZonesResponse.zones.zone) = Тип("СписокXDTO") Тогда
		
			Для каждого Геозона Из СтруктураОтвета.SchedulingZonesResponse.zones.zone Цикл
				
				ОбработатьГеозону(Геозона);
				
				
			КонецЦикла;
		
		Иначе
			ОбработатьГеозону(СтруктураОтвета.SchedulingZonesResponse.zones.zone); 
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьГеозону(Геозона)

	НайденныйЭлемент = Справочники.МегаЛогист_ГеоЗоныДляПланирования.НайтиПоКоду(Геозона.id);
	
	Если Не ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		
		НайденныйЭлемент = Справочники.МегаЛогист_ГеоЗоныДляПланирования.СоздатьЭлемент();
		НайденныйЭлемент.Код = Геозона.id;
		НайденныйЭлемент.Склад = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоКоду(Геозона.aocId).Склад;
		
	Иначе
		НайденныйЭлемент = НайденныйЭлемент.ПолучитьОбъект()
	КонецЕсли;
	
	НайденныйЭлемент.Наименование = Геозона.name;
	//Разбор координат
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Геозона.area, "|", Истина, Истина);
	Для каждого Подстрока Из МассивПодстрок Цикл
		
		Координаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Подстрока, ",", Истина, Истина);
		Если Координаты.Количество() = 2 Тогда
			
			НоваяСтрока = НайденныйЭлемент.Координаты.Добавить();
			НоваяСтрока.Широта 	= Координаты[0];
			НоваяСтрока.Долгота = Координаты[1];
			
		КонецЕсли;
		
	КонецЦикла;
	НайденныйЭлемент.Записать();

КонецПроцедуры

&НаСервере
Процедура importVehicles(Ид, ТаблицаТранспорта,Отказ = Ложь) Экспорт

	Если ТаблицаТранспорта.Количество() = 0  Тогда
		Отказ = Истина;
		Сообщить("Данные для загрузки транспорта не отобраны. Заполните таблицу ""Курьеры"" или проверьте доп. характеристики");
		Возврат;
	КонецЕсли;

	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Отказ = Истина;
		Возврат;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/objects/importVehicles");
	Запрос.Заголовки.Вставить("Content-type", "application/xml");
	//формирование тела запроса
	ЗапросКАПИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "apiRequest")); 
	ЗапросКАПИ.sessionID = Ид;
	ДанныеПоТранспорту = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "vehiclesDetails"));
	Транспорты = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "vehicles"));
	Транспорт = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "vehicle"));
	Зоны = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "zones"));
	//ГосНомер 		= Неопределено;
	//ПервыйПроход	= Истина;
	// обход сотрудников для выгрузки
	Для Каждого СтрокаТЗ Из ТаблицаТранспорта Цикл
		
		Транспорт = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "vehicle"));
		ЗаполнитьЗначенияСвойств(Транспорт, СтрокаТЗ);
		
		//vehicleRequirements
		///////////////////////////////////////////
		//Мироненко Д.С 27.11.2017 10:48:15 НАЧАЛО
		//Комментарий: Секция ограничений
		
		ТаблицаОграничений = СтрокаТЗ.ТребованияКТС;
		Если ТаблицаОграничений.Количество() > 0 Тогда
		
			Ограничения = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "vehicleRequirements"));
			Для каждого СтрокаОграничений Из ТаблицаОграничений Цикл
			
				Ограничение = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "vehicleRequirement"));
				Ограничение.name = XMLСтрока(СтрокаОграничений.Требование);
				
				Ограничения.vehicleRequirement.Добавить(Ограничение);
			
			КонецЦикла;
		    Транспорт.vehicleRequirements = Ограничения;
		КонецЕсли;
		
		//Мироненко Д.С 27.11.2017 10:48:25 КОНЕЦ
		///////////////////////////////////////////
		
		//zone
		Зоны = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "zones"));
		Для каждого СтроркаЗон Из СтрокаТЗ.ГеоЗоныДляПланирования Цикл
		
			Зона = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "zone"));
			Зона.name = СтроркаЗон.ЗонаПредставление;
			Зоны.zone.Добавить(Зона);
		
		КонецЦикла;
		
		Транспорт.zones = Зоны;
		Транспорты.vehicle.Добавить(Транспорт);
		
	КонецЦикла;
	
	ДанныеПоТранспорту.vehicles = Транспорты;
	ЗапросКАПИ.vehiclesDetails = ДанныеПоТранспорту;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ЗапросКАПИ);
	ПараметрыЗапроса = Запись.Закрыть();
	
	ПараметрыЗапроса = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>" + Символы.ПС + ПараметрыЗапроса;
	Запрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТелоОтвета);
	
	//СтруктураОтвета.objects.updatedObject.errors.error.errorMessage
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	ПроверитьНаОшибку(СтруктураОтвета, Отказ);
		
КонецПроцедуры

&НаСервере
Процедура ВывестиОшибку(Ошибка)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Ошибка.errorMessage;
	Сообщение.Сообщить();

КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеПоТранспорту(МассивОграничений = Неопределено, Архивная = Истина) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Архивная", Архивная);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.ТранспортноеСредство.Наименование КАК name,
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.ТранспортноеСредство.Код КАК externalId,
	               |	НЕ МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.ИспользоватьВПоследнююОчередь КАК active,
	               |	ЛОЖЬ КАК suspended,
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.СтоимостьЗаКилометр КАК costByDistance,
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.ТранспортноеСредство.ГрузоподъемностьВТоннах * 1000 КАК maxWeight,
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.ТранспортноеСредство.ВместимостьВКубическихМетрах КАК maxVolume,
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.МаксимальнаяСкорость КАК averageSpeed,
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.МаксимальнаяПротяженностьРейса КАК runDistanceLimit,

	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.КорректирующийКоэффициентВремениВождения КАК speedCorrectionFactor,
	               |	ВЫБОР
	               |		КОГДА МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.КорректирующийКоэффициентВремениВождения = 0
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК allowSpeedCorrectionFactor,
	               |	ПРЕДСТАВЛЕНИЕ(МегаЛогист_ХарактеристикиТранспортныхСредств.Ссылка.Склад) КАК areaOfControl,
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.ГеоЗоныДляПланирования.(
	               |		ПРЕДСТАВЛЕНИЕ(МегаЛогист_ХарактеристикиТранспортныхСредств.ГеоЗоныДляПланирования.Зона)
	               |	),
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.ТребованияКТС.(
	               |		ПРЕДСТАВЛЕНИЕ(МегаЛогист_ХарактеристикиТранспортныхСредств.ТребованияКТС.Требование) КАК Требование
	               |	)
	               |ИЗ
	               |	Справочник.МегаЛогист_ХарактеристикиТранспортныхСредств КАК МегаЛогист_ХарактеристикиТранспортныхСредств";
	
	Если МассивОграничений <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + " ГДЕ
	               |	МегаЛогист_ХарактеристикиТранспортныхСредств.ТранспортноеСредство.Код В(&Коды)";
		Запрос.УстановитьПараметр("Коды", МассивОграничений);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();

КонецФункции

&НаСервере
Процедура importPerformers(Ид, ТаблицаТранспорта,Отказ = Ложь) Экспорт

	Если ТаблицаТранспорта.Количество() = 0  Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Отказ = Истина;
		Возврат;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/objects/importPerformers");
	Запрос.Заголовки.Вставить("Content-type", "application/xml");
	//формирование тела запроса
	ЗапросКАПИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "apiRequestPerf")); 
	ЗапросКАПИ.sessionID = Ид;
	ДанныеПоВодителям = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "performersDetails"));
	Водители =			 ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "performers"));
	// обход сотрудников для выгрузки
	Для Каждого СтрокаТЗ Из ТаблицаТранспорта Цикл
		
		Водитель = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "performer"));
		ЗаполнитьЗначенияСвойств(Водитель, СтрокаТЗ,,"startLocation, homeLocation");
		
		Если ЗначениеЗаполнено(СтрокаТЗ.dailyDrivingLimit) Тогда
			Водитель.allowDailyDrivingLimit = "true";
		Иначе 
			Водитель.allowDailyDrivingLimit = "false";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЗ.dailyWorkingLimit) Тогда
			Водитель.allowDailyWorkingLimit = "true";
		Иначе 
			Водитель.allowDailyWorkingLimit = "false";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЗ.runTimeLimit) Тогда
			Водитель.allowRunTimeLimit = "true";
		Иначе 
			Водитель.allowRunTimeLimit = "false";
		КонецЕсли;
		
		
		
		
		
		Локация = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "location"));
		Локация.address = СтрокаТЗ.startLocation;
		Водитель.startLocation = Локация;
		
		Локация = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "location"));
		Локация.address = СтрокаТЗ.homeLocation;
		Водитель.homeLocation = Локация;
		
		Доступности = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availabilities"));
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
			Если СтрокаТЗ.ГрафикРаботы.Понедельник Тогда
				Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
				Доступность.weekDay = "monday";
				Доступность.from 	= Формат(СтрокаТЗ.ГрафикРаботы.ПнС, "ДФ=ЧЧ:мм:сс");
				Доступность.to 		= Формат(СтрокаТЗ.ГрафикРаботы.ПнПо, "ДФ=ЧЧ:мм:сс");
				Доступности.availability.Добавить(Доступность);
			КонецЕсли;
			Если СтрокаТЗ.ГрафикРаботы.Понедельник Тогда
				Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
				Доступность.weekDay = "monday";
				Доступность.from 	= Формат(СтрокаТЗ.ГрафикРаботы.ПнС, "ДФ=ЧЧ:мм:сс");
				Доступность.to 		= Формат(СтрокаТЗ.ГрафикРаботы.ПнПо, "ДФ=ЧЧ:мм:сс");
				Доступности.availability.Добавить(Доступность);
			КонецЕсли;
			Если СтрокаТЗ.ГрафикРаботы.Вторник Тогда
				Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
				Доступность.weekDay = "tuesday";
				Доступность.from 	= Формат(СтрокаТЗ.ГрафикРаботы.ВтС, "ДФ=ЧЧ:мм:сс");
				Доступность.to 		= Формат(СтрокаТЗ.ГрафикРаботы.ВтПо, "ДФ=ЧЧ:мм:сс");
				Доступности.availability.Добавить(Доступность);
			КонецЕсли;
			Если СтрокаТЗ.ГрафикРаботы.Среда Тогда
				Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
				Доступность.weekDay = "wednesday";
				Доступность.from 	= Формат(СтрокаТЗ.ГрафикРаботы.СрС, "ДФ=ЧЧ:мм:сс");
				Доступность.to 		= Формат(СтрокаТЗ.ГрафикРаботы.СрП, "ДФ=ЧЧ:мм:сс");
				Доступности.availability.Добавить(Доступность);
			КонецЕсли;
			Если СтрокаТЗ.ГрафикРаботы.Четверг Тогда
				Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
				Доступность.weekDay = "thursday";
				Доступность.from 	= Формат(СтрокаТЗ.ГрафикРаботы.ЧтС, "ДФ=ЧЧ:мм:сс");
				Доступность.to 		= Формат(СтрокаТЗ.ГрафикРаботы.ЧтПо, "ДФ=ЧЧ:мм:сс");
				Доступности.availability.Добавить(Доступность);
			КонецЕсли;
			Если СтрокаТЗ.ГрафикРаботы.Пятница Тогда
				Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
				Доступность.weekDay = "friday";
				Доступность.from 	= Формат(СтрокаТЗ.ГрафикРаботы.ПтС, "ДФ=ЧЧ:мм:сс");
				Доступность.to 		= Формат(СтрокаТЗ.ГрафикРаботы.ПтПо, "ДФ=ЧЧ:мм:сс");
				Доступности.availability.Добавить(Доступность);
			КонецЕсли;
			Если СтрокаТЗ.ГрафикРаботы.Суббота Тогда
				Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
				Доступность.weekDay = "saturday";
				Доступность.from 	= Формат(СтрокаТЗ.ГрафикРаботы.СбС, "ДФ=ЧЧ:мм:сс");
				Доступность.to 		= Формат(СтрокаТЗ.ГрафикРаботы.СбПо, "ДФ=ЧЧ:мм:сс");
				Доступности.availability.Добавить(Доступность);
			КонецЕсли;
			Если СтрокаТЗ.ГрафикРаботы.Воскресенье Тогда
				Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
				Доступность.weekDay = "sunday";
				Доступность.from 	= Формат(СтрокаТЗ.ГрафикРаботы.ВсС, "ДФ=ЧЧ:мм:сс");
				Доступность.to 		= Формат(СтрокаТЗ.ГрафикРаботы.ВсПо, "ДФ=ЧЧ:мм:сс");
				Доступности.availability.Добавить(Доступность);
			КонецЕсли;
		Иначе
			Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
			Доступность.weekDay = "monday";
			Доступность.from 	= "08:00:00";
			Доступность.to 		= "22:00:00";
			Доступности.availability.Добавить(Доступность);
			
			Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
			Доступность.weekDay = "tuesday";
			Доступность.from 	= "08:00:00";
			Доступность.to 		= "22:00:00";
			Доступности.availability.Добавить(Доступность);
			
			Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
			Доступность.weekDay = "wednesday";
			Доступность.from 	= "08:00:00";
			Доступность.to 		= "22:00:00";
			Доступности.availability.Добавить(Доступность);
			
			Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
			Доступность.weekDay = "thursday";
			Доступность.from 	= "08:00:00";
			Доступность.to 		= "22:00:00";
			Доступности.availability.Добавить(Доступность);
			
			Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
			Доступность.weekDay = "friday";
			Доступность.from 	= "08:00:00";
			Доступность.to 		= "22:00:00";
			Доступности.availability.Добавить(Доступность);
			
			Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
			Доступность.weekDay = "saturday";
			Доступность.from 	= "08:00:00";
			Доступность.to 		= "22:00:00";
			Доступности.availability.Добавить(Доступность);
			
			Доступность = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "availability"));
			Доступность.weekDay = "sunday";
			Доступность.from 	= "08:00:00";
			Доступность.to 		= "22:00:00";
			Доступности.availability.Добавить(Доступность);
		КонецЕсли;

		Водитель.availabilities = Доступности;
		
		Водители.performer.Добавить(Водитель);
	КонецЦикла;
	
	ДанныеПоВодителям.performers = Водители;
	ЗапросКАПИ.performersDetails = ДанныеПоВодителям;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ЗапросКАПИ);
	ПараметрыЗапроса = Запись.Закрыть();
	
	ПараметрыЗапроса = СтрЗаменить(ПараметрыЗапроса, "apiRequestPerf", "apiRequest");
	ПараметрыЗапроса = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>" + Символы.ПС + ПараметрыЗапроса;
	Запрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТелоОтвета);
	
	
	//СтруктураОтвета.objects.updatedObject.errors.error.errorMessage
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	ПроверитьНаОшибку(СтруктураОтвета, Отказ);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеПоВодителям(МассивОграничений = Неопределено, ТаблицаВодителей = Неопределено) Экспорт

	Если ТаблицаВодителей = Неопределено Тогда
	
		ТаблицаВодителей = Новый ТаблицаЗначений;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		ТаблицаВодителей.Колонки.Добавить("Курьер", Новый ОписаниеТипов(МассивТипов));
	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВодителей", ТаблицаВодителей);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВодителиИзТЧ.Курьер
	               |ПОМЕСТИТЬ ВТВодителиИзТЧ
	               |ИЗ
	               |	&ТаблицаВодителей КАК ВодителиИзТЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МегаЛогист_ХарактеристикиВодителей.Водитель.Наименование КАК externalId,
	               |	30 КАК breakShift,
	               |	МегаЛогист_ХарактеристикиВодителей.Водитель.Наименование КАК login,
	               |	""123"" КАК password,
	               |	МегаЛогист_ХарактеристикиВодителей.Водитель.Наименование КАК name,
	               |	""test@test.mail.ru"" КАК email,
	               |	МегаЛогист_ХарактеристикиВодителей.СтоимостьЧасаРаботы КАК priceForOneHour,
	               |	ПРЕДСТАВЛЕНИЕ(МегаЛогист_ХарактеристикиВодителей.Склад) КАК areaOfControl,
	               |	ВЫБОР
	               |		КОГДА ВТВодителиИзТЧ.Курьер ЕСТЬ NULL 
	               |			ТОГДА 1
	               |		ИНАЧЕ МегаЛогист_ХарактеристикиВодителей.МаксимальноДопустимаяДлительностьВождения
	               |	КОНЕЦ КАК dailyDrivingLimit,
	               |	МегаЛогист_ХарактеристикиВодителей.АдресНачалаРабочегоДня КАК startLocation,
	               |	МегаЛогист_ХарактеристикиВодителей.АдресВозвратаВКонцеДня КАК homeLocation,
	               |	МегаЛогист_ХарактеристикиВодителей.ПродолжительностьРаботы КАК dailyWorkingLimit,
				   |	МегаЛогист_ХарактеристикиВодителей.ГрафикРаботы КАК ГрафикРаботы,
	               |	МегаЛогист_ХарактеристикиВодителей.ПродолжительностьРейса КАК runTimeLimit
	               |ИЗ
	               |	Справочник.МегаЛогист_ХарактеристикиВодителей КАК МегаЛогист_ХарактеристикиВодителей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВодителиИзТЧ КАК ВТВодителиИзТЧ
	               |		ПО МегаЛогист_ХарактеристикиВодителей.Водитель = ВТВодителиИзТЧ.Курьер";
	
	Если МассивОграничений <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + " ГДЕ
		|	МегаЛогист_ХарактеристикиВодителей.Водитель.Код В (&Коды) ";
		Запрос.УстановитьПараметр("Коды", МассивОграничений);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();

КонецФункции

&НаСервере
Процедура assignPerformersToVehicles(Ид, ТаблицаТранспорта,Отказ = Ложь) Экспорт

	Если ТаблицаТранспорта.Количество() = 0  Тогда
		Отказ = Истина;
		Сообщить("Данные для загрузки не отобраны");
		Возврат;
	КонецЕсли;

	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Отказ = Истина;
		Возврат;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/objects/assignPerformersToVehicles");
	Запрос.Заголовки.Вставить("Content-type", "application/xml");
	//формирование тела запроса
	ЗапросКАПИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "apiRequestAlloc")); 
	ЗапросКАПИ.sessionID = Ид;
	ДанныеПоНазначениям = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "allocationsDetails"));
	Назнчачения = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "allocations"));
	Для Каждого СтрокаТЗ Из ТаблицаТранспорта Цикл
		
		Назнчачение = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "allocation"));
		ЗаполнитьЗначенияСвойств(Назнчачение, СтрокаТЗ);
		Назнчачения.allocation.Добавить(Назнчачение);
	КонецЦикла;
	
	ДанныеПоНазначениям.allocations = Назнчачения;
	ЗапросКАПИ.allocationsDetails = ДанныеПоНазначениям;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ЗапросКАПИ);
	ПараметрыЗапроса = Запись.Закрыть();
	
	ПараметрыЗапроса = СтрЗаменить(ПараметрыЗапроса, "apiRequestAlloc", "apiRequest");
	ПараметрыЗапроса = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>" + Символы.ПС + ПараметрыЗапроса;
	Запрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТелоОтвета);
	
	//СтруктураОтвета.objects.updatedObject.errors.error.errorMessage
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	ПроверитьНаОшибку(СтруктураОтвета, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура importSchedules(Ид, ТаблицаТранспорта, Дата ,Отказ = Ложь) Экспорт

	Если ТаблицаТранспорта.Количество() = 0  Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Отказ = Истина;
		Возврат;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/schedules/import");
	Запрос.Заголовки.Вставить("Content-type", "application/xml");
	//формирование тела запроса
	ЗапросКАПИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "apiRequestSche")); 
	ЗапросКАПИ.sessionID = Ид;
	Runs = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "runs"));
	Для Каждого СтрокаТЗ Из ТаблицаТранспорта Цикл
		
		run = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "run"));
		run.vehicleName 	= СтрокаТЗ.vehicleName;
		run.driverName 		= СтрокаТЗ.performerName;
		run.allocationDate 	= XMLСтрока(Формат(Дата, "ДФ=дд.ММ.гггг"));
		run.number 			= 1;
		Runs.run.Добавить(run);
	КонецЦикла;
	
	ЗапросКАПИ.Runs = Runs;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ЗапросКАПИ);
	ПараметрыЗапроса = Запись.Закрыть();
	
	ПараметрыЗапроса = СтрЗаменить(ПараметрыЗапроса, "apiRequestSche", "apiRequest");
	ПараметрыЗапроса = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>" + Символы.ПС + ПараметрыЗапроса;
	Запрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТелоОтвета);
	
	//СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	//ПроверитьНаОшибку(СтруктураОтвета, Отказ);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеПоНазначениям(МассивОграничений = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(МегаЛогист_ТранспортныеСредстваКурьеров.Курьер) КАК performerName,
	               |	ПРЕДСТАВЛЕНИЕ(МегаЛогист_ТранспортныеСредстваКурьеров.ТранспортноеСредство) КАК vehicleName
	               |ИЗ
	               |	Справочник.МегаЛогист_ТранспортныеСредстваКурьеров КАК МегаЛогист_ТранспортныеСредстваКурьеров
	               |ГДЕ
	               |	НЕ МегаЛогист_ТранспортныеСредстваКурьеров.Пеший
	               |	И МегаЛогист_ТранспортныеСредстваКурьеров.Курьер В
	               |			(ВЫБРАТЬ
	               |				МегаЛогист_ХарактеристикиВодителей.Водитель
	               |			ИЗ
	               |				Справочник.МегаЛогист_ХарактеристикиВодителей КАК МегаЛогист_ХарактеристикиВодителей)
	               |	И МегаЛогист_ТранспортныеСредстваКурьеров.ТранспортноеСредство В
	               |			(ВЫБРАТЬ
	               |				МегаЛогист_ХарактеристикиТранспортныхСредств.ТранспортноеСредство
	               |			ИЗ
	               |				Справочник.МегаЛогист_ХарактеристикиТранспортныхСредств КАК МегаЛогист_ХарактеристикиТранспортныхСредств)";
	
	Если МассивОграничений <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + " ГДЕ
		|	МегаЛогист_ХарактеристикиТранспортныхСредствГеоЗоныДляПланирования.Ссылка.ТранспортноеСредство.Код В (&Коды) ";
		Запрос.УстановитьПараметр("Коды", МассивОграничений);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();

КонецФункции

&НаСервере
Функция ВыгрузитьДанныеЗаказам(МассивОграничений = Неопределено, Склад = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(Склад) Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен склад. Планирование не возможно";
		Сообщение.Сообщить();
		ТаблицаЗначений = Новый ТаблицаЗначений;
		Возврат ТаблицаЗначений;
	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_СоответствиеСкладов1СИMaxoptra.Представление
	               |ПОМЕСТИТЬ ВТСклад
	               |ИЗ
	               |	Справочник.МегаЛогист_СоответствиеСкладов1СИMaxoptra КАК МегаЛогист_СоответствиеСкладов1СИMaxoptra
	               |ГДЕ
	               |	МегаЛогист_СоответствиеСкладов1СИMaxoptra.Ссылка = &Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МегаЛогист_МаршрутноеЗадание.Номер КАК orderReference,
	               |	ВТСклад.Представление КАК areaOfControl,
	               |	МегаЛогист_МаршрутноеЗадание.ДатаДоставки КАК date,
	               |	ПРЕДСТАВЛЕНИЕ(МегаЛогист_МаршрутноеЗадание.Контрагент) КАК name,
	               |	МегаЛогист_МаршрутноеЗадание.КонтактноеЛицо КАК contactPerson,
	               |	МегаЛогист_МаршрутноеЗадание.АдресДоставки КАК locationName,
	               |	МегаЛогист_МаршрутноеЗадание.АдресДоставки КАК address,
	               |	МегаЛогист_МаршрутноеЗадание.Широта КАК latitude,
	               |	МегаЛогист_МаршрутноеЗадание.Долгота КАК longitude,
	               |	ВЫБОР
	               |		КОГДА МегаЛогист_МаршрутноеЗадание.ВремяДоставкиС = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ОкноРазгрузкиПоУмолчаниюС
	               |		ИНАЧЕ МегаЛогист_МаршрутноеЗадание.ВремяДоставкиС
	               |	КОНЕЦ КАК start,
	               |	ВЫБОР
	               |		КОГДА МегаЛогист_МаршрутноеЗадание.ВремяДоставкиПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ОкноРазгрузкиПоУмолчаниюПо
	               |		ИНАЧЕ МегаЛогист_МаршрутноеЗадание.ВремяДоставкиПо
	               |	КОНЕЦ КАК end,
	               |	ЕСТЬNULL(МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ВремяРазгрузкиПогрузки, 20) КАК durationDrop,
	               |	МегаЛогист_МаршрутноеЗадание.Вес КАК capacity,
	               |	МегаЛогист_МаршрутноеЗадание.Объем КАК volume,
	               |	ЕСТЬNULL(МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ЗаборТовара, ЛОЖЬ) КАК collection,
	               |	МегаЛогист_МаршрутноеЗадание.Ссылка
	               |ИЗ
	               |	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МегаЛогист_ПродолжительностьРазгрузкиПогрузки КАК МегаЛогист_ПродолжительностьРазгрузкиПогрузки
	               |		ПО МегаЛогист_МаршрутноеЗадание.ТипЗадания = МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ТипМаршрутногоЗадания,
	               |	ВТСклад КАК ВТСклад";
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Если МассивОграничений <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + " ГДЕ
		|	МегаЛогист_МаршрутноеЗадание.Ссылка В (&МассивОграничений) ";
		Запрос.УстановитьПараметр("МассивОграничений", МассивОграничений);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();

КонецФункции

&НаСервере
Процедура save(Ид, ТаблицаТранспорта,Отказ = Ложь) Экспорт

	Если ТаблицаТранспорта.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/orders/save");
	Запрос.Заголовки.Вставить("Content-type", "application/xml");
	//формирование тела запроса
	ЗапросКАПИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "apiRequestOrders")); 
	ЗапросКАПИ.sessionID = Ид;
	Заказы =			 ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "orders"));
	// обход сотрудников для выгрузки
	Для Каждого СтрокаТЗ Из ТаблицаТранспорта Цикл
		
		Заказ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "order"));
		ЗаполнитьЗначенияСвойств(Заказ, СтрокаТЗ, ,"durationDrop");
		Клиент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "client"));
		ЗаполнитьЗначенияСвойств(Клиент, СтрокаТЗ);
		Заказ.client = Клиент;
		//Заказ.date		= Формат(СтрокаТЗ.date, "ДФ=yy-MM-dd");
		Заказ.date		= XMLСтрока(Формат(СтрокаТЗ.date, "ДФ=дд.ММ.гггг"));
		
		//Продолжительность операций
		СтрокаТЗ.durationDrop = Мин(СтрокаТЗ.durationDrop, 10 * 60);
		Заказ.durationDrop = XMLСтрока("" + ?(СтрокаТЗ.durationDrop<60, "00", Формат(Цел(СтрокаТЗ.durationDrop/60), "ЧЦ=2; ЧВН=")) + ":" + ?(СтрокаТЗ.durationDrop=60, "00", Формат(СтрокаТЗ.durationDrop%60, "ЧЦ=2; ЧН=; ЧВН=")));
		
		Локация = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "orderLocation"));
		ЗаполнитьЗначенияСвойств(Локация, СтрокаТЗ);
		Локация.name = СтрокаТЗ.locationName;
		Заказ.location = Локация;
		
		///////////////////////////////////////////
		//Мироненко Д.С 27.11.2017 10:48:15 НАЧАЛО
		//Комментарий: Секция ограничений
		
		ТаблицаОграничений = ПолучитьОграничения(СтрокаТЗ.ДокументОснование);
		Если ТаблицаОграничений.Количество() > 0 Тогда
		
			Ограничения = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "vehicleRequirements"));
			Для каждого СтрокаОграничений Из ТаблицаОграничений Цикл
			
				Ограничение = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "vehicleRequirement"));
				Ограничение.name = XMLСтрока(СтрокаОграничений.Требование.Наименование);
				
				Ограничения.vehicleRequirement.Добавить(Ограничение);
			
			КонецЦикла;
		    Заказ.vehicleRequirements = Ограничения;
		КонецЕсли;
		
		//Мироненко Д.С 27.11.2017 10:48:25 КОНЕЦ
		///////////////////////////////////////////
		
		Окна = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "dropWindows"));
		Окно = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "dropWindow"));
		Окно.start 	= XMLСтрока(Формат(СтрокаТЗ.date, "ДФ=дд.ММ.гггг")+ " " + Формат(СтрокаТЗ.start, 	"ДФ=ЧЧ:мм"));
		Окно.end 	= XMLСтрока(Формат(СтрокаТЗ.date, "ДФ=дд.ММ.гггг")+ " " + Формат(СтрокаТЗ.end, 	"ДФ=ЧЧ:мм"));
		Окна.dropWindow.Добавить(Окно);
		Заказ.dropWindows = Окна;
		
		Заказ.collection		= СтрокаТЗ.collection;
		
		Заказы.order.Добавить(Заказ);
	КонецЦикла;
	
	ЗапросКАПИ.orders = Заказы;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ЗапросКАПИ);
	ПараметрыЗапроса = Запись.Закрыть();
	
	ПараметрыЗапроса = СтрЗаменить(ПараметрыЗапроса, "apiRequestOrders", "apiRequest");
	ПараметрыЗапроса = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>" + Символы.ПС + ПараметрыЗапроса;
	Запрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТелоОтвета);
	
	//СтруктураОтвета.objects.updatedObject.errors.error.errorMessage
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	ПроверитьНаОшибку(СтруктураОтвета, Отказ);
	
КонецПроцедуры

///////////////////////////////////////////
//Мироненко Д.С 27.11.2017 10:45:47 НАЧАЛО
//Комментарий: 
&НаСервере
Функция ПолучитьОграничения(Заказ)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Мегалогист_ТребованияКЗаказам.Требование
	|ИЗ
	|	РегистрСведений.Мегалогист_ТребованияКЗаказам КАК Мегалогист_ТребованияКЗаказам
	|ГДЕ
	|	Мегалогист_ТребованияКЗаказам.Заказ = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();

КонецФункции


//Мироненко Д.С 27.11.2017 10:45:48 КОНЕЦ
///////////////////////////////////////////

&НаСервере
Процедура start(Ид, Отказ, Склад, Дата) Экспорт

	НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоРеквизиту("Склад", Склад);
	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Отказ = Истина;
		Возврат;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/schedules/start?sessionID="+Ид + "&aocID=" + НайденныйЭлемент.Код + "&startDate=" + Формат(Дата, "ДФ=dd.MM.yyyy"));
	Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//Запрос.УстановитьТелоИзСтроки("", КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаОтвета);
	
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	ПроверитьНаОшибку(СтруктураОтвета, Отказ);

КонецПроцедуры

// Процедура загружает зоны контоля
//
// Параметры
//  Ид  - Строка - ИД сессии 
//
&НаСервере
Функция mx_status(Ид, Отказ) Экспорт

	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Отказ = Истина;
		Возврат Новый Структура;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/schedules/status?sessionID="+Ид);
	Запрос.УстановитьТелоИзСтроки("", КодировкаТекста.UTF8);
	//Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Ответ = Соединение.Получить(Запрос);
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТелоОтвета);
	
	//СтруктураОтвета.objects.updatedObject.errors.error.errorMessage
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	ПроверитьНаОшибку(СтруктураОтвета, Отказ);
	//СтруктураВозврата = Новый Структура("Статус, Прогресс, Сообщение", СтруктураОтвета.scheduling.operationNumber, СтруктураОтвета.scheduling.progress, );
	Возврат СтруктураОтвета;

КонецФункции // getAreaOfControls()

&НаСервере
Функция getScheduleByAOCOnDate(Ид, Склад, Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МегаЛогист_СоответствиеСкладов1СИMaxoptra.Код
	|ИЗ
	|	Справочник.МегаЛогист_СоответствиеСкладов1СИMaxoptra КАК МегаЛогист_СоответствиеСкладов1СИMaxoptra
	|ГДЕ
	|	МегаЛогист_СоответствиеСкладов1СИMaxoptra.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		КодСклада = Выборка.Код;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Возврат Новый Структура;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + Ид + "&date="+Формат(Дата, "ДФ=дд.ММ.гггг")+"&aocID=" + КодСклада);
	Запрос.УстановитьТелоИзСтроки("", КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТелоОтвета);
	
	//СтруктураОтвета.objects.updatedObject.errors.error.errorMessage
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	ПроверитьНаОшибку(СтруктураОтвета, Ложь);
	Возврат СтруктураОтвета;

КонецФункции // getAreaOfControls()

&НаСервере
Процедура delete(Ид, Склад, Дата) Экспорт

	НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоРеквизиту("Склад", Склад);
	СтруктураАвторизации = ПолучитьСтруктуруДляАвторизации();
	Если СтруктураАвторизации = Неопределено Тогда
		Отказ = Истина;
		Возврат;		
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/orders/getOrdersWithZone?sessionID="+Ид  + "&date=" + Формат(Дата, "ДФ=dd.MM.yyyy") + "&aocID=" + НайденныйЭлемент.Код);
	Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//Запрос.УстановитьТелоИзСтроки("", КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаОтвета);
	
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Отказ = Ложь;
	ПроверитьНаОшибку(СтруктураОтвета, Отказ,, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	
	Соединение = Новый HTTPСоединение(СтруктураАвторизации.МегаЛогист_Максоптра_URLСервиса, СтруктураАвторизации.МегаЛогист_Максоптра_ПортСервиса);
	Запрос = Новый HTTPЗапрос("/rest/2/distribution-api/orders/delete");
	Запрос.Заголовки.Вставить("Content-type", "application/xml");
	//формирование тела запроса
	ЗапросКАПИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "apiRequestOrders")); 
	orders = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "orders")); 
	ЗапросКАПИ.sessionID = Ид;
	
	Попытка
	
		Для каждого ЗапросИзОбхода Из СтруктураОтвета.OrdersWithZoneResponse.orders.order Цикл
			
			order = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://megalogist.ru/maxoptra", "order")); 
			order.orderReference = ЗапросИзОбхода.referenceNumber;
			
			orders.order.Добавить(order);
		КонецЦикла;
	
	Исключение
		Возврат;
	КонецПопытки;
	
	ЗапросКАПИ.orders = orders;
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ЗапросКАПИ);
	ПараметрыЗапроса = Запись.Закрыть();
	
	ПараметрыЗапроса = СтрЗаменить(ПараметрыЗапроса, "apiRequestOrders", "apiRequest");
	ПараметрыЗапроса = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>" + Символы.ПС + ПараметрыЗапроса;
	Запрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТелоОтвета);
	
	//СтруктураОтвета.objects.updatedObject.errors.error.errorMessage
	СтруктураОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	//ПроверитьНаОшибку(СтруктураОтвета, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаОшибку(Объект, Отказ, ДопСтрока = "", безВывода = Ложь)

	//СтруктураОшибок = ЗаполнитьСтруктуруОшибок();
	РазобратьОбъект(Объект, Отказ, ДопСтрока, безВывода);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьОбъект(Объект, Отказ, ДопСтрока, безВывода)

	ЗаполнитьСтруктуруОшибок();
	Если ТипЗнч(Объект) = Тип("СписокXDTO") Тогда
		Для каждого Элем Из Объект Цикл
			РазобратьОбъект(Элем, Отказ, ДопСтрока, безВывода);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	Для каждого Свойство Из Объект.Свойства() Цикл
	
		Если Свойство.name = "errorCode" И Не безВывода Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ДопСтрока + " " +  ЗаполнитьСтруктуруОшибок()["п" + Объект.ПолучитьXDTO(Свойство).Значение];
			Сообщение.Сообщить();
			Отказ = Истина;
		
		КонецЕсли;
		
		Попытка
			
			Если ТипЗнч(Объект.ПолучитьXDTO(Свойство)) = Тип("ЗначениеXDTO") Тогда
				Продолжить;
			КонецЕсли;
			
			РазобратьОбъект(Объект.ПолучитьXDTO(Свойство), Отказ, ДопСтрока, безВывода);
		
		Исключение
		    РазобратьОбъект(Объект.ПолучитьСписок(Свойство), Отказ, ДопСтрока, безВывода);
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Функция ЗаполнитьСтруктуруОшибок()

	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("п1001", "Неправильный формат файла");
	СтруктураОшибок.Вставить("п1002", "Невозможно прочитать файл");
	СтруктураОшибок.Вставить("п1003", "Невозможно прочитать файл");
	СтруктураОшибок.Вставить("п1004", "API Key пустой");
	СтруктураОшибок.Вставить("п1005", "API Key не зарегистрирован");
	СтруктураОшибок.Вставить("п1006", "Key не принадлежит этому API");
	СтруктураОшибок.Вставить("п1007", "Неизвестный элемент");
	СтруктураОшибок.Вставить("п1008", "Провайдер геокодинга недоступен");
	//СтруктураОшибок.Вставить("п1009", "Предоставляемые учетные данные некорректны");
	СтруктураОшибок.Вставить("п1009", "Неверно указано имя пользователя или пароль");
	СтруктураОшибок.Вставить("п1010", "Указанный пользователь не имеет API доступа");
	СтруктураОшибок.Вставить("п1001", "Некорректный идентификатор аккаунта");
	СтруктураОшибок.Вставить("п1012", "Работа аккаунта приостановлена");
	СтруктураОшибок.Вставить("п1013", "Некорректный тип данных");
	СтруктураОшибок.Вставить("п1014", "Ожидаемый параметр");
	СтруктураОшибок.Вставить("п1015", "Внутренняя ошибка");
	СтруктураОшибок.Вставить("п1016", "Превышен предел обращений");
	СтруктураОшибок.Вставить("п1017", "Сессия просрочена");
	СтруктураОшибок.Вставить("п1019", "Пользователь не имеет прав доступа для работы с данным распределительным центром или распределительны центр не существует");
	СтруктураОшибок.Вставить("п1100", "Поле является обязательным");
	СтруктураОшибок.Вставить("п1101", "Слишком большое значение в поле");
	СтруктураОшибок.Вставить("п1102", "Заказ с таким идентификатором уже существует");
	СтруктураОшибок.Вставить("п1103", "Заказ с таким идентификатором уже запланирован");
	СтруктураОшибок.Вставить("п1104", "Заданная область контроля не найдена");
	СтруктураОшибок.Вставить("п1105", "Местоположение не найдено");
	СтруктураОшибок.Вставить("п1106", "Некорректное окно разгрузки");
	СтруктураОшибок.Вставить("п1107", "Некорректный тип поля");
	СтруктураОшибок.Вставить("п1108", "Работа с указанным идентификатором не обнаружена");
	СтруктураОшибок.Вставить("п1109", "Список заказов пустой");
	СтруктураОшибок.Вставить("п1110", "Некорректный формат даты");
	СтруктураОшибок.Вставить("п1111", "Значение в поле слишком маленькое");
	СтруктураОшибок.Вставить("п1112", "Время окончания меньше чем время начала");
	СтруктураОшибок.Вставить("п1113", "Некорректный формат продолжительности разгрузки. Ожидаемый формат hh:mm");
	СтруктураОшибок.Вставить("п1114", "Некорректное значение приоритета. Ожидаемые значения: 1, 2, 3");
	СтруктураОшибок.Вставить("п1115", "Не найдено окно погрузки");
	СтруктураОшибок.Вставить("п1117", "Не указан штрих-код для товара");
	СтруктураОшибок.Вставить("п1001", "Нет записей в журнале заказа");	
	СтруктураОшибок.Вставить("п1201", "Не найдены машины");
	СтруктураОшибок.Вставить("п1202", "Не найдены распределительные центры");
	СтруктураОшибок.Вставить("п1203", "Распределительный центр не найден");
	СтруктураОшибок.Вставить("п1204", "Тип не найден");
	СтруктураОшибок.Вставить("п1205", "Атрибут не найден");
	СтруктураОшибок.Вставить("п1206", "Водитель не найден");
	СтруктураОшибок.Вставить("п1207", "Водитель не уникален");
	СтруктураОшибок.Вставить("п1208", "Указано неверное значение для параметра разрешенное время переработки");
	СтруктураОшибок.Вставить("п1209", "Указана неверная продолжительности");
	СтруктураОшибок.Вставить("п1210", "Территория планирования не найдена");
	СтруктураОшибок.Вставить("п1211", "Заказы не найдены");
	СтруктураОшибок.Вставить("п1212", "Водители не найдены");
	СтруктураОшибок.Вставить("п1213", "Функционал территорий планирования не активен для данного аккаунта");
	СтруктураОшибок.Вставить("п1214", "Недопустимое значение для данного параметра");
	СтруктураОшибок.Вставить("п1216", "Недопустимое значение для параметра день недели. Значение дожно быть: sunday, monday, tuesday, wednesday, thursday, friday, saturday.");
	СтруктураОшибок.Вставить("п1217", "Недопустимое значение идентификатора зоны планирования");
	СтруктураОшибок.Вставить("п1230", "При отсутствии обязательного параметра");
	СтруктураОшибок.Вставить("п1231", "Недопустимое значение для перерыва. Оба параметра должны быть указаны: breakFrom и breakTo.");
	СтруктураОшибок.Вставить("п1232", "При некорректном вводе email");
	СтруктураОшибок.Вставить("п1233", "Не задан пароль");
	СтруктураОшибок.Вставить("п1234", "Водитель и транспортное средство имеют различные распределительные центры");
	СтруктураОшибок.Вставить("п1301", "Не найдено расписание");
	СтруктураОшибок.Вставить("п1302", "Нашлось более одного водителя с данным именем");
	СтруктураОшибок.Вставить("п1304", "Транспортное средство не найдено");
	СтруктураОшибок.Вставить("п1309", "Ошибка геокодирования адресов выезда и окончания рейса для ТС");
	СтруктураОшибок.Вставить("п2000", "Не указаны ни водитель, ни автомобиль");
	СтруктураОшибок.Вставить("п2001", "Водитель не найден");
	СтруктураОшибок.Вставить("п2002", "Автомобиль не найден");
	СтруктураОшибок.Вставить("п2003", "Водитель и автомобиль не соответствуют друг другу");
	СтруктураОшибок.Вставить("п2004", "Некорректно указана дата планирования");
	СтруктураОшибок.Вставить("п2005", "Рейс не может быть перепланирован, так как он уже зафиксирован");
	СтруктураОшибок.Вставить("п2006", "Заказ не найден. При планировании рейса данный заказ был пропущен");
	СтруктураОшибок.Вставить("п2007", "Требуется указать дату планирования");
	СтруктураОшибок.Вставить("п2008", "Заказ не может быть запланирован, так как он уже запланирован на другой рейс");
	СтруктураОшибок.Вставить("п2009", "Рейс был автоматически перепланирован, так как не у всех заказов есть порядковый номер в рейсе");
	СтруктураОшибок.Вставить("п2010", "Все заказы в рейсе некорректны");
	СтруктураОшибок.Вставить("п2011", "Автомобиль не задействован");
	СтруктураОшибок.Вставить("п2012", "Автомобиль временно отключен");
	СтруктураОшибок.Вставить("п2013", "Водитель недоступен");
	СтруктураОшибок.Вставить("п2014", "Заказ не может быть запланирован из-за ошибки планирования: у заказа отсутствуют временные окна.");
	СтруктураОшибок.Вставить("п2015", "Рейс не может быть запланирован из-за ошибки планирования");
	СтруктураОшибок.Вставить("п2016", "Заказ не может быть запланирован, так как он уже запланирован на другой день");
	СтруктураОшибок.Вставить("п2017", "Заказ и автомобиль относятся к разным распределительным центрам");
	СтруктураОшибок.Вставить("п2018", "Заказ уже существует в данном расписании");
	СтруктураОшибок.Вставить("п2019", "Рейс уже существует в данном расписании");
	СтруктураОшибок.Вставить("п2020", "Автомобиль не имеет водителя");
	СтруктураОшибок.Вставить("п2021", "У водителя нет автомобиля");

	Возврат СтруктураОшибок;
КонецФункции

&НаСервере
Функция РасчитатьПродолжительностьПогрузки(Таблица, ИмяКонтрагента = "name", Объем = "volume", ВремяПогрузки = "durationDrop") Экспорт
		
	Для каждого СтрокаТЧ ИЗ Таблица Цикл
		
		//Поиск контрагента
		Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЧ["name"]);
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Продолжить;			
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.Мегалогист_ПовышающийКоэффициентПогрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Контрагент = Контрагент;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			Коэф = 1;
		Иначе
			Коэф = МенеджерЗаписи.Коэффициент;
		КонецЕсли;
		
		РасчетноеВремя = СтрокаТЧ["volume"] * Коэф;  
		Если РасчетноеВремя > СтрокаТЧ["durationDrop"] Тогда
			СтрокаТЧ["durationDrop"] = РасчетноеВремя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции
