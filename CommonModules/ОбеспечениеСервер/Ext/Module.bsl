////////////////////////////////////////////////////////////////////////////////
// Модуль "ОбеспечениеСервер", содержит процедуры и функции для
// работы с обеспечением потребностей и обновления соответствующих данных
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет даты обеспечения обособленных потребностей, зафиксированных заказом исходя из обеспечения наличием, ожидаемыми поступлениями и плановых дат поставок
// Параметры:
//  МассивЗаказов - Массив - содержит ссылки на заказы, для которых нужно рассчитать даты обеспечения.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с полями:
//                     Номенклатура - номенклатура, указанная в строке заказа
//                     Характеристика - характеристика, указанная в строке заказа
//                     Склад - склад, указанный в строке заказа
//                     Назначение - назначение обособленных потребностей заказа
//                     Заказ - заказ
//                     ДатаОбеспечения - дата обеспечения
//
Функция ДатаОбеспеченияОбособленныхПотребностей(МассивЗаказов) Экспорт
	
	ИменаПараметров = Новый Структура();
	ИменаПараметров.Вставить("ВтТовары", "ВтТоварыОбособленные");
	ИменаПараметров.Вставить("МассивЗаказов", "МассивЗаказов");
	
	ТекстЗапросаОбособленныхПотребностей = РегистрыНакопления.ГрафикОтгрузкиТоваров.ТекстЗапросаОбособленныхПотребностей(ИменаПараметров);
	ТекстЗапросаОбособленныхОстатков = РегистрыНакопления.ОбеспечениеЗаказов.ТекстЗапросаОстатков(Ложь); // Формируется таблица остатков "ВтОбеспечениеЗаказов".
	
	ТекстЗапроса =
		ТекстЗапросаОбособленныхПотребностей
		+ ТекстЗапросаОбособленныхОстатков
		+ "ВЫБРАТЬ
		|	Таблица.Номенклатура        КАК Номенклатура,
		|	Таблица.Характеристика      КАК Характеристика,
		|	Таблица.Склад               КАК Склад,
		|	Таблица.Назначение          КАК Назначение,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Таблица.ДатаСобытия <= &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Таблица.ДатаСобытия
		|		КОНЕЦ)                        КАК ДатаПоступления,
		|
		|	СУММА(Таблица.КоличествоПодЗаказОстаток) КАК Количество
		|ПОМЕСТИТЬ ВтГрафикПоступления
		|ИЗ
		|	РегистрНакопления.ГрафикПоступленияТоваров.Остатки(,
		|		(Номенклатура, Характеристика, Склад, Назначение) В(
		|			ВЫБРАТЬ
		|				Таблица.Номенклатура КАК Номенклатура,
		|				Таблица.Характеристика КАК Характеристика,
		|				Таблица.Склад          КАК Склад,
		|				Таблица.Назначение     КАК Назначение
		|			ИЗ
		|				ВтТоварыОбособленные КАК Таблица)) КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ВтТоварыОбособленные КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказов КАК ТаблицаОстатков
		|		ПО ТаблицаОстатков.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаОстатков.Характеристика = Таблица.Характеристика
		|		 И ТаблицаОстатков.Склад          = Таблица.Склад
		|		 И ТаблицаОстатков.Назначение     = Таблица.Назначение
		|
		|ГДЕ
		|	ЕСТЬNULL(ТаблицаОстатков.Количество, 0) < Таблица.Количество
		|;
		|
		|////////////////////////////////////////////////
		|"
		+ РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
		+ Справочники.СпособыОбеспеченияПотребностей.ТекстЗапросаДатПлановойПоставки()
		+"ВЫБРАТЬ
		|	Таблица.Номенклатура     КАК Номенклатура,
		|	Таблица.Характеристика   КАК Характеристика,
		|	Таблица.Склад            КАК Склад,
		|	Таблица.Назначение       КАК Назначение,
		|	Таблица.Назначение.Заказ КАК Заказ,
		|	
		|	ВЫБОР КОГДА Таблица.Количество - ЕСТЬNULL(ТаблицаОстатков.Количество, 0) <= 0 ТОГДА
		|				&НачалоТекущегоДня
		|			КОГДА Таблица.Количество - ЕСТЬNULL(ТаблицаОстатков.Количество, 0) - ЕСТЬNULL(ТаблицаГрафикПоступления.Количество, 0) <= 0 ТОГДА
		|					ТаблицаГрафикПоступления.ДатаПоступления
		|			ИНАЧЕ
		|				ЕСТЬNULL(ПлановыеПоставки.Дата, &НачалоТекущегоДня)
		|		КОНЕЦ                      КАК ДатаОбеспечения
		|	
		|ИЗ
		|	ВтТоварыОбособленные КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказов КАК ТаблицаОстатков
		|		ПО ТаблицаОстатков.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаОстатков.Характеристика = Таблица.Характеристика
		|		 И ТаблицаОстатков.Склад          = Таблица.Склад
		|		 И ТаблицаОстатков.Назначение     = Таблица.Назначение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК Настройка
		|		ПО Настройка.Номенклатура   = Таблица.Номенклатура
		|		 И Настройка.Характеристика = Таблица.Характеристика
		|		 И Настройка.Склад          = Таблица.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыПлановойПоставки КАК ПлановыеПоставки
		|		ПО ПлановыеПоставки.СпособОбеспечения = Настройка.СпособОбеспеченияПотребностей
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтГрафикПоступления КАК ТаблицаГрафикПоступления
		|		ПО ТаблицаГрафикПоступления.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаГрафикПоступления.Характеристика = Таблица.Характеристика
		|		 И ТаблицаГрафикПоступления.Склад          = Таблица.Склад
		|		 И ТаблицаГрафикПоступления.Назначение     = Таблица.Назначение";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоТекущегоДня);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Получает состояние обеспечения наличием для таблицы ранее принятых заказов.
//
// Параметры:
//   ТаблицаПотребностей - ТаблицаЗначений - таблица с обязательными полями:
//    * Идентификатор           - Число                                       - число, идентификатор строки таблицы
//                                                                              для отображения состояния обеспечения наличием в таблице формы.
//    * Номенклатура            - СправочникСсылка.Номенклатура               - аналитика потребности.
//    * Характеристика          - СправочникСсылка.ХарактеристикаНоменклатуры - аналитика потребности.
//    * Склад                   - СправочникСсылка.Склады                     - аналитика потребности.
//    * Назначение              - СправочникСсылка.Назначения                 - аналитика потребности.
//    * ЗарезервированоНаСкладе - Булево                                      - истина, если текущий вариант обеспечения,
//                                                                              установленный в проведенном заказе
//                                                                              предполагает резервирование на складе.
//    * ЗарезервированоКДате    - Булево                                      - истина, если текущий вариант обеспечения,
//                                                                              установленный в проведенном заказе
//                                                                              предполагает резервирование к дате.
//    * ДатаОтгрузки            - Дата                                        - дата отгрузки для строк с установленным
//                                                                              признаком "ЗарезервированоКДате".
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с полями:
//    * Идентификатор - Число - идентификатор строки таблицы потребностей.
//    * Количество    - Число - количество товара на складе, доступное для обеспечения строки таблицы потребностей.
//
Функция СостояниеОбеспеченияНаличием(ТаблицаПотребностей) Экспорт
	
	// Получение таблицы остатков и оборотов графика.
	Отбор = СтруктураОтбораОстатков();
	Если ТаблицаПотребностей.Колонки.Найти("ТипНоменклатуры") = Неопределено Тогда
		ТаблицаПотребностей.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	КонецЕсли;
	ТипТовар = Перечисления.ТипыНоменклатуры.Товар;
	Для Каждого СтрокаТовары Из ТаблицаПотребностей Цикл
		
		СтрокаТовары.ТипНоменклатуры = ТипТовар;
		ДобавитьАналитику(Отбор, СтрокаТовары);
		
	КонецЦикла;
	
	ОстаткиИОбороты = ОстаткиИОбороты(Отбор, Неопределено);
	ТаблицаОстатков = Новый ТаблицаЗначений();
	ТаблицаОстатков.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОстатков.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОстатков.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаОстатков.Колонки.Добавить("Назначение",     Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаОстатков.Колонки.Добавить("Остаток",        ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаОстатков.Колонки.Добавить("Оборот",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаОстатков.Колонки.Добавить("Период",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстаткиИОбороты.Товары.Выгрузить(), ТаблицаОстатков);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстаткиИОбороты.ТоварыОбособленные.Выгрузить(), ТаблицаОстатков);
	ПоляТовара = "Номенклатура, Характеристика, Склад, Назначение";
	ТаблицаОстатков.Индексы.Добавить(ПоляТовара);
	ПараметрыОтбора = Новый Структура(ПоляТовара);
	
	// Формирование результата.
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ТаблицаРезультат.Колонки.Добавить("Идентификатор", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0));
	ТаблицаРезультат.Колонки.Добавить("Количество",    ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	КорректировкаГрафика = Новый ТаблицаЗначений();
	КорректировкаГрафика.Колонки.Добавить("ДатаОтгрузки", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	КорректировкаГрафика.Колонки.Добавить("Количество",   ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	ВсегоЗаписей = ТаблицаПотребностей.Количество();
	Индекс = 0;
	ЕстьЗаписи = ВсегоЗаписей > Индекс;
	ИзмениласьЗапись = Ложь;
	
	Результат = 0;
	НарастающийИтог = 0;
	Пока ЕстьЗаписи Цикл
		
		Пока Не ИзмениласьЗапись Цикл
			
			СтрокаПотребности = ТаблицаПотребностей[Индекс];
			Если СтрокаПотребности.ЗарезервированоНаСкладе Тогда
				
				Результат = Результат + СтрокаПотребности.Количество;
				
			ИначеЕсли СтрокаПотребности.ЗарезервированоКДате Тогда
				
				ЗаполнитьЗначенияСвойств(КорректировкаГрафика.Добавить(), СтрокаПотребности);
				НарастающийИтог = НарастающийИтог + СтрокаПотребности.Количество;
				
			КонецЕсли;
			
			Идентификатор = ТаблицаПотребностей[Индекс].Идентификатор;
			Индекс = Индекс + 1;
			ЕстьЗаписи = ВсегоЗаписей > Индекс;
			ИзмениласьЗапись = Не ЕстьЗаписи Или ТаблицаПотребностей[Индекс].Идентификатор <> Идентификатор;
			
		КонецЦикла;
		ИзмениласьЗапись = Ложь;
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаПотребности);
		ОстаткиТовара = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбора);
		ВсегоДвижений = ОстаткиТовара.Количество();
		Если ВсегоДвижений > 0 Тогда
			НарастающийИтог = НарастающийИтог + ОстаткиТовара[0].Остаток;
		КонецЕсли;
		МинимальноеЗначение = НарастающийИтог;
		
		КорректировкаГрафика.Сортировать("ДатаОтгрузки УБЫВ");
		
		Для Счетчик = 0 По ВсегоДвижений - 1 Цикл
			
			СтрокаОстатка = ОстаткиТовара[Счетчик];
			
			Пока СкорректироватьНарастающийИтог(НарастающийИтог, СтрокаОстатка.Период + 1, КорректировкаГрафика) Цикл
				Если МинимальноеЗначение > НарастающийИтог Тогда
					МинимальноеЗначение = НарастающийИтог;
				КонецЕсли;
			КонецЦикла;
			СкорректироватьНарастающийИтог(НарастающийИтог, СтрокаОстатка.Период, КорректировкаГрафика);
			НарастающийИтог = НарастающийИтог - СтрокаОстатка.Оборот;
			Если МинимальноеЗначение > НарастающийИтог Тогда
				МинимальноеЗначение = НарастающийИтог;
			КонецЕсли;
			
		КонецЦикла;
		
		Пока СкорректироватьНарастающийИтог(НарастающийИтог, Неопределено, КорректировкаГрафика) Цикл
			Если МинимальноеЗначение > НарастающийИтог Тогда
				МинимальноеЗначение = НарастающийИтог;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаРезультат = ТаблицаРезультат.Добавить();
		СтрокаРезультат.Идентификатор = Идентификатор;
		СтрокаРезультат.Количество = Результат + МинимальноеЗначение;
		
		КорректировкаГрафика.Очистить();
		НарастающийИтог = 0;
		Результат       = 0;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Выбор обеспечения в строке заказа.
//
// Параметры:
//  ТекущаяСтрока - Число - Идентификатор строки,
//  Объект - ДанныеФормыСтруктура - Реквизит формы редактируемого документа,
//  ТабЧасть - ДанныеФормыКоллекция - Табличная часть, реквизит формы редактируемого документа.
//  ПутиКДанным - Структура - Содержит имена полей обеспечения с учетом специфики документа,
//  Параметры - Структура - Содержит параметры, специфичные для документа.
//
// Возвращаемое значение:
//  Структура - параметры для передачи в форму выбора обеспечения.
//
Функция ПараметрыВыбораОбеспечения(ТекущаяСтрока, Объект, ТабЧасть, ПутиКДанным, Параметры = Неопределено) Экспорт

	Перем СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения;
	ПрименитьПараметрыДокумента(Параметры, СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения);

	ИдентификаторыСтрок = Новый Массив();
	ИдентификаторыСтрок.Добавить(ТекущаяСтрока);

	//Таблица выделенных строк табличной части.
	Таблица = ВыделенныеСтрокиВТаблицу(ТабЧасть, ИдентификаторыСтрок, Объект, ПутиКДанным);
	ВыделеннаяСтрока = Таблица[0];

	Строка = ТабЧасть.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
	Строка.Количество = 0;

	// Таблица невыделенных строк табличной части с такой же аналитикой как у текущей строки.
	Если ЗначениеЗаполнено(ГруппаСкладов) Тогда
		Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Подразделение");
	Иначе
		Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Подразделение, Склад");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отбор, ВыделеннаяСтрока);

	ТаблицаНевыделенныеСтроки = СтрокиВТаблицу(ТабЧасть, Объект, ПутиКДанным, Отбор);

	// Дополнительные сторно записи, если необходимы.
	Если ТаблицаДляПроведения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДляПроведения, ТаблицаНевыделенныеСтроки);
	КонецЕсли;

	Строка = ТабЧасть.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
	Строка.Количество = ВыделеннаяСтрока.Количество;

	ОтборОформлено = ТаблицаПоОписаниюПолей(Новый Структура("Ссылка, КодСтроки",
		ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению(), ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0)));
	ЗаполнитьЗначенияСвойств(ОтборОформлено.Добавить(), ВыделеннаяСтрока);

	ОформитьПоНакладным = МенеджерРегистра.ТаблицаОформлено(ОтборОформлено);

	Результат = ПараметрыВыбораОбеспеченияУниверсальный(Таблица, ОформитьПоНакладным, ТаблицаНевыделенныеСтроки, Объект.Ссылка);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.Вставить("ГруппаСкладов", ГруппаСкладов);
		Результат.Вставить("СписокВыбора", Неопределено);
		Результат.Вставить("ТаблицаНевыделенныеСтроки", ТаблицаНевыделенныеСтроки);
	КонецЕсли;
	Возврат Результат;

КонецФункции

// Предназначена для получения параметров выбора обеспечения в строке заказа.
// 
// Параметры:
//   ТаблицаВыделенныеСтроки   - ТаблицаЗначений - таблица содержащая данные выбранных строк редактируемого документа.
//   ОформитьПоНакладным       - ТаблицаЗначений - таблица содержащая количество, на которое уже оформлена накладная по строкам дкоумента.
//   ТаблицаНевыделенныеСтроки - ТаблицаЗначений - используется если необходимо предварительно учитывать данные редактируемого документа.
//   Ссылка                    - ДокументСсылка  - используется если необходимо предварительно сторнировать движения редактируемого документа.
// 
// Возвращаемое значение:
//   Структура - Структура следующего состава:
//    * АдресКорректировки  - Строка - адрес во временном хранилище. содержит данные корректировки (см. ОбеспечениеСервер.СтруктураКорректировкиОбеспечения).
//    * ТекущийВариант      - ПеречисленияСсылка.ВариантыОбеспечения - текущий вариант обеспечения, указанный в строке.
//    * Отбор               - Структура следующего состава:
//      ** Номенклатура    - СправочникСсылка.Номенклатура               - номенклатура в текущей строке заказа.
//      ** Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика в текущей строке заказа.
//      ** Склад           - СправочникСсылка.Склады                     - склад в текущей строке заказа.
//      ** Назначение      - СправочникСсылка.Назначения                 - назначение для текущей строки заказа.
//      ** Подразделение   - СправочникСсылка.СтруктураПредприятия       - подразделения для текущей строки заказа.
//      ** ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры        - тип номенклатуры для текущей строки заказа.
//    * КоличествоОформлено - Число - количество оформленное накладными и ордерами по строке заказа.
//    * СписокВыбора        - Неопределено - Неопределено.
// 
Функция ПараметрыВыбораОбеспеченияУниверсальный(ТаблицаВыделенныеСтроки, ОформитьПоНакладным, ТаблицаНевыделенныеСтроки, Ссылка) Экспорт

	ВыделеннаяСтрока = ТаблицаВыделенныеСтроки[0];

	//Группировка невыделенных строк (строки-конкуренты для списания доступных остатков) по вариантам обеспечения.
	НевыделенныеСтроки = ТаблицыПотребностейПоВариантамОбеспечения();
	РазложитьПоВариантамОбеспечения(НевыделенныеСтроки, ТаблицаНевыделенныеСтроки);

	//Таблица Корректировок регистров обеспечения, для имитации проведения редактируемого документа.
	Корректировка = СтруктураКорректировкиОбеспечения();

	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.Отгрузить);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.ОтгрузитьОбособленно);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.Резервировать);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.РезервироватьКСроку);

	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.Отгрузить);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.Резервировать);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.РезервироватьКСроку);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.ОтгрузитьОбособленно);

	//Количество, которое считается отгруженным для обрабатываемых строк.
	ОтборТоварыКОтгрузке = ОтборТоварыКОтгрузке(ТаблицаВыделенныеСтроки);
	ОформитьПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(ОтборТоварыКОтгрузке, Корректировка.ТоварыКОтгрузке);

	ТаблицыОформлено = ТаблицыОформлено(ТаблицаВыделенныеСтроки, ОформитьПоНакладным, ОформитьПоОрдерам);
	
	ДобавитьВКорректировку(Корректировка, ТаблицыОформлено.ПоНакладным);
	ДобавитьВКорректировкуУчестьПриИнвентаризации(
		Корректировка, НевыделенныеСтроки.Товары.ОтгрузитьОбособленно, ТаблицыОформлено.ПоНакладным);
	ДобавитьВКорректировку(Корректировка, ТаблицыОформлено.ПоОрдерам);

	//Сторно движений документа.
	Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Подразделение, Склад, ТипНоменклатуры");
	ЗаполнитьЗначенияСвойств(Отбор, ВыделеннаяСтрока);
	СторноДвиженийДокумента(Корректировка, Новый Структура("Ссылка", Ссылка), , Отбор);

	//Корректировка по обособленным потребностям.
	Таблица = НевыделенныеСтроки.Товары.Обособленно.СкопироватьКолонки();
	НомерТекущейСтроки = ВыделеннаяСтрока.НомерСтроки;

	Для Каждого Строка Из НевыделенныеСтроки.Товары.Обособленно Цикл
		Если Строка.НомерСтроки < НомерТекущейСтроки Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Строка Из НевыделенныеСтроки.Тара.Обособленно Цикл
		Если Строка.НомерСтроки < НомерТекущейСтроки Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Строка Из НевыделенныеСтроки.Работы.ОтгрузитьОбособленно Цикл
		Если Строка.НомерСтроки < НомерТекущейСтроки Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Строка Из НевыделенныеСтроки.Работы.Обособленно Цикл
		Если Строка.НомерСтроки < НомерТекущейСтроки Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;

	ДобавитьВКорректировку(Корректировка, Таблица);

	//Формирование структуры результата.
	ТекущийВариант = Новый Структура("ВариантОбеспечения, Склад, Количество, ДатаДоступности");
	ЗаполнитьЗначенияСвойств(ТекущийВариант, ВыделеннаяСтрока);
	ТекущийВариант.ДатаДоступности = ВыделеннаяСтрока.ДатаОтгрузки;

	КоличествоОформлено = ?(ТаблицыОформлено.ПоНакладным.Количество() > 0, ТаблицыОформлено.ПоНакладным[0].Количество, 0)
		+ ?(ТаблицыОформлено.ПоОрдерам.Количество() > 0, ТаблицыОформлено.ПоОрдерам[0].Количество, 0);
	
	Результат = Новый Структура();
	Результат.Вставить("АдресКорректировки",  ПоместитьВоВременноеХранилище(Корректировка));
	Результат.Вставить("ТекущийВариант",      ТекущийВариант);
	Результат.Вставить("Отбор",               Отбор);
	Результат.Вставить("КоличествоОформлено", КоличествоОформлено);
	Результат.Вставить("СписокВыбора",        Неопределено);

	Возврат Результат;

КонецФункции

// Предназначена для получения складов, принадлежащих группе складов.
//
// Параметры:
//  Ссылка - СправочникСсылка.Склады - группа складов, для которой необходимо получить подчиненные склады
// 
// Возвращаемое значение:
//  Массив, Неопределено - массив подчиненных группе складов, если в параметре Ссылка передана группа складов, неопределено в противном случае
// 
Функция СкладыГруппы(Ссылка) Экспорт

	Если Справочники.Склады.ЭтоГруппа(Ссылка) Тогда

		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Склады.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ втВыборкаДоступныхГрупп
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	НЕ Склады.ПометкаУдаления
			|	И Склады.ЭтоГруппа
			|	И Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
			|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Склады.Ссылка
			|ИЗ
			|	втВыборкаДоступныхГрупп КАК втВыборкаДоступныхГрупп
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО втВыборкаДоступныхГрупп.Ссылка = Склады.Родитель
			|ГДЕ
			|	Склады.ЭтоГруппа = ЛОЖЬ
			|	И Склады.ПометкаУдаления = ЛОЖЬ";

		Запрос.УстановитьПараметр("ГруппаСкладов", Ссылка);
		МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Иначе

		МассивСкладов = Неопределено;

	КонецЕсли;

	Возврат МассивСкладов;

КонецФункции

// Заполнение обеспечения для выделенных строк заказа
//
// Параметры:
// 		ИдентификаторыСтрок - Массив - Содержит идентификаторы выделенных строк,
// 		Объект - ДанныеФормыСтруктура - Реквизит формы редактируемого документа,
// 		ТабЧасть - ДанныеФормыКоллекция - Табличная часть, реквизит формы редактируемого документа.
// 		ПараметрыЗаполнения - Структура параметров заполнения таблицы
// 			* ПереченьВариантов - Массив - Массив действий обеспечения
// 			* ИзменятьОбособление - Булево - Признак возможности изменения обеспечения
// 			* ЗаполнятьЦелымиУпаковками - Булево - Признак необходимости контроля целостности упаковок
// 		ПараметрыДокумента - Структура - Содержит параметры, специфичные для документа.
// 			* СтатусКВыполнению - ПеречислениеСсылка.СтатусыЗаказовКлиента - Значение статуса заказа в состоянии "к выполнению".
// 			* ГруппаСкладов - СправочникСсылка.Склады - Группа складов, которые будут использоваться при получении вариантов обеспечения
// 			* МенеджерРегистра - РегистрНакопленияМенеджер - Менеджер регистра накопления
// 			* ИмяМенеджераРегистра - Строка - Имя регистра сведений для получения менеджера регистра
// 			* ТаблицаДляПроведения - ТаблицаЗначений - Таблица, содержащая количество, для которого будет сымитировано отражение в учете для получения верных данных
// 			* ПутиКДанным - Структура - Содержит имена полей обеспечения с учетом специфики документа,
//
// Возвращаемое значение:
// 		ТаблицаЗначений - таблица для заполнения обеспечения в документе
//
Функция ТаблицаЗаполнениеОбеспечения(ИдентификаторыСтрок, Объект, ТабЧасть, ПараметрыЗаполнения, ПараметрыДокумента = Неопределено) Экспорт
	
	Перем СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения, ДробитьУпаковки;
	ПрименитьПараметрыДокумента(ПараметрыДокумента, СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения);
	
	//Таблица выделенных строк табличной части.
	ТаблицаВыделенныеСтроки = ВыделенныеСтрокиВТаблицу(ТабЧасть, ИдентификаторыСтрок, Объект, ПараметрыДокумента.ПутиКДанным);
	
	ОтборОформлено = ТаблицаПоОписаниюПолей(
		Новый Структура(
			"Ссылка, КодСтроки",
			ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению(), ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0)));
	
	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = ТабЧасть.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = 0;
		ЗаполнитьЗначенияСвойств(ОтборОформлено.Добавить(), ВыделеннаяСтрока);
	КонецЦикла;
	
	ОформитьПоНакладным = МенеджерРегистра.ТаблицаОформлено(ОтборОформлено);
	
	//Таблица невыделенных строк табличной части.
	ТаблицаНевыделенныеСтроки = СтрокиВТаблицу(ТабЧасть, Объект, ПараметрыДокумента.ПутиКДанным);
	
	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = ТабЧасть.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = ВыделеннаяСтрока.Количество;
	КонецЦикла;
	
	Результат = ТаблицаЗаполнениеОбеспеченияУниверсальный(
		ТаблицаВыделенныеСтроки,
		ОформитьПоНакладным,
		ТаблицаНевыделенныеСтроки,
		Объект.Ссылка,
		ГруппаСкладов,
		ТаблицаДляПроведения,
		ПараметрыЗаполнения);
	
	Возврат Результат;
	
КонецФункции

// Инициализирует параметры документа, используемые для правильного заполнения дат отгрузки в строках обеспечения.
// 
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ОтгружатьОднойДатой    - Булево - все позиции заказа планируется отгружать одной датой.
//   * ЖелаемаяДатаОтгрузки   - Дата   - может быть указана, если есть пожелания по отгрузке заказа не ранее какой-то даты.
//   * ДатаОтгрузкиВДокументе - Дата   - дата отгрузки, должна быть указана, если все позиции заказа планируется отгружать одной датой.

Функция ПараметрыОбновленияДатыОтгрузкиВДокументе() Экспорт
	
	ПараметрыОбновленияДатыОтгрузки = Новый Структура();
	ПараметрыОбновленияДатыОтгрузки.Вставить("ОтгружатьОднойДатой",    Неопределено);
	ПараметрыОбновленияДатыОтгрузки.Вставить("ЖелаемаяДатаОтгрузки",   '00010101');
	ПараметрыОбновленияДатыОтгрузки.Вставить("ДатаОтгрузкиВДокументе", '00010101');
	Возврат ПараметрыОбновленияДатыОтгрузки;
	
КонецФункции

// Обрабатывает данные обеспечения, полученные механизмами обеспечения, в зависимости от операции их получения и параметров документа, который эти данные получает.
//  Параметры:
//   ДанныеЗаполнения - ДанныеФормыКоллекция, ТаблицаЗначений - данные поставляемые механизмом обеспечения (обычно коллекция или таблица с вариантами обеспечения количеством и датой отгрузки).
//   Операция         - Строка - условное обозначение выполняемой команды, поставщика данных обеспечения. Возможные значения:
//    * Заказ - данные поступили из обработки состояния обеспечения вызванной из формы документа.
//    * ИндексыСтрок - данные поступили из обработки состояния обеспечения вызванной из раздела.
//    * СтрокаТовары - данные поступили по результатам выбора обеспечения в строке документа.
//    * СтрокиТовары - данные поступили при заполнении обеспечения для выделенных строк.
//   ПараметрыОбъекта - Структура - параметры обновления даты отгрузки в документе (см. ПараметрыОбновленияДатыОтгрузкиВДокументе()).
Процедура СдвинутьДатыИСвернутьДублиСтрок(ДанныеЗаполнения, Операция, ПараметрыОбъекта) Экспорт
	
	ЭтоСостояниеОбеспечения = Операция = "Заказ" Или Операция = "ИндексыСтрок";
	ЕстьСерия = Операция = "СтрокаТовары";
	
	СдвигатьКДатеОтгрузкиДокумента = ПараметрыОбъекта.ОтгружатьОднойДатой И Не ЭтоСостояниеОбеспечения;
	МинимальнаяДата = ?(СдвигатьКДатеОтгрузкиДокумента, ПараметрыОбъекта.ДатаОтгрузкиВДокументе, '00010101');
	МинимальнаяДата = Макс(МинимальнаяДата, ПараметрыОбъекта.ЖелаемаяДатаОтгрузки);
	
	ДатыСдвинуты = СдвинутьДатуОтгрузки(ДанныеЗаполнения, МинимальнаяДата, ПараметрыОбъекта.ОтгружатьОднойДатой);
	
	ТребуетсяСвертка = ДатыСдвинуты Или ЭтоСостояниеОбеспечения;
	
	Если ТребуетсяСвертка Тогда
		
		СвернутьСтрокиДляОтгрузкиОднойДатой(ДанныеЗаполнения, Не ПараметрыОбъекта.ОтгружатьОднойДатой, ЕстьСерия);
		
	КонецЕсли
	
КонецПроцедуры

// Заполнение обеспечения для произвольной таблицы.
//  Параметры:
//   ТаблицаВыделенныеСтроки - ТаблицаЗначений - таблица, содержащая строки, для которых необходимо получить варианты обеспечения.
//   ОформитьПоНакладным - ТаблицаЗначений - таблица, содержащая количество, оформленное накладными, по строкам из таблицы выделенных строк.
//                                           для этого количества будет оставлен прежний вариант обеспечения. Соотвествие производится по коду строки.
//   ТаблицаНевыделенныеСтроки - таблица, содержащая количество, оформленное накладными, по строкам из таблицы выделенных строк.
//   Ссылка - ДокументСсылка, Массив - ссылки на документы, распроведение которых будет сымитировано, для получения верных данных, по обеспечению.
//   ГруппаСкладов - СправочникСсылка.Склады - группа складов, которые будут использоваться при получении вариантов обеспечения, этот параметр нужно установить,
//                                             если предполагается изменять склад, указанный в строках таблицы "ТаблицаВыделенныеСтроки".
//   ТаблицаДляПроведения - ТаблицаЗначений - таблица, содержащая количество, для которого будет сымитировано отражение в учете для получения верных данных, по обеспечению.
//                                            Этот параметр предполагается использовать, если ТаблицаНевыделенныеСтроки не содержит всех данных.
//                                            В общем случае в учете "ТаблицаВыделенныеСтроки" + "ТаблицаНевыделенныеСтроки" + "ТаблицаДляПроведения" = Отражение в учете документов,
//                                            указанных в параметре "Ссылка"
//   ПараметрыЗаполнения - Структура - структура с полями:
//                                      ПереченьВариантов - перечень допустимых значений перечисления "Варианты обеспечения", которые можно использовать при заполнении.
//                                      ИзменятьОбособление - признак доступности изменения обособленных вариантов обеспечения на необособленные и наоборот.
//                                      ЗаполнятьЦелымиУпаковками - признак необходимости заполнять обеспечение только в количестве кратном целой упаковке
//  Возвращаемое значение:
//   ТаблицаЗначений - таблица, с полями Идентификатор, ВариантОбеспечения, ДатаОтгрузки, Количество, Склад. Содержит варианты обеспечения для заполнения.
//
Функция ТаблицаЗаполнениеОбеспеченияУниверсальный(ТаблицаВыделенныеСтроки,
                                                  ОформитьПоНакладным,
                                                  ТаблицаНевыделенныеСтроки,
                                                  Ссылка,
                                                  ГруппаСкладов,
                                                  ТаблицаДляПроведения,
                                                  ПараметрыЗаполнения) Экспорт
	
	ЗначенияПараметровЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Новый Массив, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ЗначенияПараметровЗаполнения, ПараметрыЗаполнения);
	
	//Группировка потребностей по вариантам обеспечения (строки с одинаковой логикой обеспечения).
	Потребности = ТаблицыПотребностейПоВариантамОбеспечения();
	РазложитьПоВариантамОбеспечения(Потребности, ТаблицаВыделенныеСтроки, ЗначенияПараметровЗаполнения.ЗаполнятьЦелымиУпаковками);
	
	//Группировка невыделенных строк (строки-конкуренты для списания доступных остатков) по вариантам обеспечения.
	НевыделенныеСтроки = ТаблицыПотребностейПоВариантамОбеспечения();
	РазложитьПоВариантамОбеспечения(НевыделенныеСтроки, ТаблицаНевыделенныеСтроки);
	
	//Таблица Корректировок регистров обеспечения, для имитации проведения редактируемого документа.
	Корректировка = СтруктураКорректировкиОбеспечения();
	
	// Дополнительные сторно записи, если необходимы.
	Если ТаблицаДляПроведения <> Неопределено Тогда
		ДобавитьВКорректировку(Корректировка, ТаблицаДляПроведения);
	КонецЕсли;
	
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.Отгрузить);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.Резервировать);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.РезервироватьКСроку);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.ОтгрузитьОбособленно);
	
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.Отгрузить);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.Резервировать);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.РезервироватьКСроку);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.ОтгрузитьОбособленно);
	
	//Количество, которое считается отгруженным для обрабатываемых строк.
	ОтборТоварыКОтгрузке = ОтборТоварыКОтгрузке(ТаблицаВыделенныеСтроки);
	ОформитьПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(ОтборТоварыКОтгрузке, Корректировка.ТоварыКОтгрузке);
	
	ТаблицыОформлено = ТаблицыОформлено(ТаблицаВыделенныеСтроки, ОформитьПоНакладным, ОформитьПоОрдерам);
	
	ДобавитьВКорректировку(Корректировка, ТаблицыОформлено.ПоНакладным);
	ДобавитьВКорректировкуУчестьПриИнвентаризации(
		Корректировка, НевыделенныеСтроки.Товары.ОтгрузитьОбособленно, ТаблицыОформлено.ПоНакладным);
	ДобавитьВКорректировку(Корректировка, ТаблицыОформлено.ПоОрдерам);
	
	//Сторно движений документа.
	СторноДвиженийДокумента(Корректировка, Новый Структура("Ссылка", Ссылка),);
	
	//Получение структуры доступных остатков и плановых поставок товаров и работ с учетом корректировок.
	Отбор = СтруктураОтбораОстатков();
	МассивСкладов = СкладыГруппы(ГруппаСкладов);
	ДобавитьАналитики(Отбор, ТаблицаВыделенныеСтроки, МассивСкладов);
	
	ВариантыОбеспечения = ВариантыОбеспечения(Отбор, Корректировка);
	ВариантыОбеспечения.Вставить("ОформитьПоНакладным", ОформитьПоНакладным);
	ВариантыОбеспечения.Вставить("ОформитьПоОрдерам", ТаблицыОформлено.ПоОрдерам);
	
	Если МассивСкладов <> Неопределено И МассивСкладов.Количество() <> 0 Тогда
		
		Приоритеты = Новый Соответствие;
		ЗаполнитьПриоритетыВыбораСкладовВТаблице(ВариантыОбеспечения.ПлановыеПоставки, ВариантыОбеспечения.ВНаличииПодНазначение, Приоритеты);
		ЗаполнитьПриоритетыВыбораСкладовВТаблице(ВариантыОбеспечения.ПлановыеПоставки, ВариантыОбеспечения.ОжидаетсяПодНазначение, Приоритеты);
		ЗаполнитьПриоритетыВыбораСкладовВТаблице(ВариантыОбеспечения.ПлановыеПоставки, ВариантыОбеспечения.ВНаличии, Приоритеты);
		ЗаполнитьПриоритетыВыбораСкладовВТаблице(ВариантыОбеспечения.ПлановыеПоставки, ВариантыОбеспечения.Ожидается, Приоритеты);
		
	КонецЕсли;
	
	//Таблица с полями: Склад, ВариантОбеспечения, ДатаОтгрузки, Количество и Идентификатор (идентификатор строки таблицы формы)
	Результат = ТаблицаОбеспечения(Потребности, ВариантыОбеспечения, НевыделенныеСтроки, ЗначенияПараметровЗаполнения);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПриоритетыВыбораСкладовВТаблице(ТаблицаИсточник, ТаблицаНазначение, КэшированныеЗначения)
	
	ПоляПриоритетовВыбора = "ПриоритетТипаОбеспечения, СкладНаименование";
	
	ПриоритетыПоУмолчанию = Новый Структура(ПоляПриоритетовВыбора);
	ПриоритетыПоУмолчанию.ПриоритетТипаОбеспечения = 9999;
	
	Для Каждого КлючИЗначение Из ПриоритетыПоУмолчанию Цикл
		Если ТаблицаНазначение.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ТаблицаНазначение.Колонки.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	КлючПоиска = Новый Структура("Номенклатура, Характеристика, Склад");
	
	Для Каждого СтрокаНазначение Из ТаблицаНазначение Цикл
		
		ЗаполнитьЗначенияСвойств(КлючПоиска, СтрокаНазначение);
		КлючКэша = XMLСтрока(КлючПоиска.Номенклатура) + XMLСтрока(КлючПоиска.Характеристика) + XMLСтрока(КлючПоиска.Склад);
		
		ПриоритетыВыбора = КэшированныеЗначения.Получить(КлючКэша);
		Если ПриоритетыВыбора = Неопределено Тогда
			ПриоритетыВыбора = ПриоритетыПоУмолчанию;
			НайденныеСтрокиИсточника = ТаблицаИсточник.НайтиСтроки(КлючПоиска);
			Если НайденныеСтрокиИсточника.Количество() > 0 Тогда
				ПриоритетыВыбора = Новый Структура(ПоляПриоритетовВыбора);
				ЗаполнитьЗначенияСвойств(ПриоритетыВыбора, НайденныеСтрокиИсточника[0]);
			КонецЕсли;
			КэшированныеЗначения.Вставить(КлючКэша, ПриоритетыВыбора);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаНазначение, ПриоритетыВыбора);
		
	КонецЦикла;
	
КонецПроцедуры

//Заполнение обеспечения для выделенных строк заказа
//
// Параметры:
//  Объект - ДокументОбъект - Реквизит формы редактируемого документа,
//  Перечень вариантов - Массив - Содержит перечень доступных для заполнения вариантов обеспечения.
//  Параметры - Структура - Содержит параметры, специфичные для документа.
//  ИндексыСтрок - Массив - Содержит индексы строк табличной части для выборочного заполнения обеспечения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица для заполнения обеспечения в документе.
//
Функция ТаблицаЗаполнениеОбеспеченияДокумента(Объект, ПереченьВариантов, Параметры, ИндексыСтрок) Экспорт

	Перем СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения;
	ПрименитьПараметрыДокумента(Параметры, СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения);

	ТабЧасть = Объект[Параметры.ИмяТабличнойЧасти];
	ПутиКДанным = Параметры.ПутиКДанным;

	//Таблица выделенных строк табличной части.
	ТаблицаВыделенныеСтроки = ТабличнуюЧастьВТаблицу(ТабЧасть, Объект, ПутиКДанным, ИндексыСтрок);
	ЗаполнитьТипНоменклатурыВтаблице(ТаблицаВыделенныеСтроки);

	ОтборОформлено = ТаблицаПоОписаниюПолей(Новый Структура("Ссылка, КодСтроки",
		ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению(), ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0)));
	Для Каждого Индекс Из ИндексыСтрок Цикл
		
		Строка = ТабЧасть[Индекс];
		Строка.Количество = 0;
		
		СтрокаОтбора = ОтборОформлено.Добавить();
		СтрокаОтбора.Ссылка = Объект.Ссылка;
		ЗаполнитьЗначенияСвойств(СтрокаОтбора, Строка);
		
	КонецЦикла;
	ОформитьПоНакладным = МенеджерРегистра.ТаблицаОформлено(ОтборОформлено);

	//Таблица невыделенных строк табличной части.
	ТаблицаНевыделенныеСтроки = ТабличнуюЧастьВТаблицу(ТабЧасть, Объект, ПутиКДанным);
	ЗаполнитьТипНоменклатурыВтаблице(ТаблицаНевыделенныеСтроки);

	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = ТабЧасть[ВыделеннаяСтрока.Идентификатор];
		Строка.Количество = ВыделеннаяСтрока.Количество;
	КонецЦикла;

	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление", ПереченьВариантов, Ложь);
	
	Результат = ТаблицаЗаполнениеОбеспеченияУниверсальный(
		ТаблицаВыделенныеСтроки,
		ОформитьПоНакладным,
		ТаблицаНевыделенныеСтроки,
		Объект.Ссылка,
		ГруппаСкладов,
		ТаблицаДляПроведения,
		ПараметрыЗаполнения);

	Возврат Результат;

КонецФункции

// Предназначена для получения доступных остатков.
// 
// Параметры:
//   Отбор         - Структура - см. ОбеспечениеСервер.СтруктураОтбораОстатков.
//   Корректировка - Структура - см. ОбеспечениеСервер.СтруктураКорректировкиОбеспечения.
//
// Возвращаемое значение:
//   Структура - Структура следующего состава:
//    * Товары             - ТаблицаЗначений - таблица доступных остатков товаров. Состав колонок:
//     ** Номенклатура    - СправочникСсылка.Номенклатура                - номенклатура.
//      ** Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//      ** Склад           - СправочникСсылка.Склады                     - склад.
//      ** ДатаДоступности - Дата                                        - дата с которой количество товара доступно.
//      ** Количество      - Число                                       - количество доступного товара.
//    * ТоварыОбособленные - ТаблицаЗначений - таблица доступных остатков обособленных товаров. Состав колонок:
//      ** Номенклатура    - СправочникСсылка.Номенклатура               - номенклатура.
//      ** Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//      ** Склад           - СправочникСсылка.Склады                     - склад.
//      ** Назначение      - СправочникСсылка.Назначения                 - назначение.
//      ** ДатаДоступности - Дата                                        - дата с которой количество товара доступно.
//      ** Количество      - Число                                       - количество доступного товара.
//    * Работы             - ТаблицаЗначений - таблица доступных остатков обеспечения работ. Состав колонок:
//      ** Номенклатура    - СправочникСсылка.Номенклатура               - номенклатура работы.
//      ** Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика работы.
//      ** Подразделение   - СправочникСсылка.СтруктураПредприятия       - подразделение работы.
//      ** Назначение      - СправочникСсылка.Назначения                 - назначение работы.
//      ** ДатаДоступности - Дата                                        - дата с которой количество работы доступно.
//      ** Количество      - Число                                       - количество доступной работы.
//
Функция ДоступныеОстатки(Отбор, Корректировка) Экспорт

	ОстаткиИОбороты = ОстаткиИОбороты(Отбор, Корректировка);
	Результат = Новый Структура();

	Выборка = ОстаткиИОбороты.Товары.Выбрать();
	Результат.Вставить("Товары", РегистрыНакопления.ГрафикПоступленияТоваров.ТаблицаДоступныеОстатки(Выборка, Истина));

	Выборка = ОстаткиИОбороты.ТоварыОбособленные.Выбрать();
	Результат.Вставить("ТоварыОбособленные", РегистрыНакопления.ГрафикПоступленияТоваров.ТаблицаДоступныеОстатки(Выборка, Истина, "Товар"));

	Выборка = ОстаткиИОбороты.Работы.Выбрать();
	Результат.Вставить("Работы", РегистрыНакопления.ГрафикПоступленияТоваров.ТаблицаДоступныеОстатки(Выборка, Истина, "Работа"));

	Возврат Результат;

КонецФункции

// Позволяет получить таблицу с датами плановых поставок согласно настроенных схем обеспечения номенклатурой.
// Используется в форме выбора обеспечения.
// 
// Параметры:
//   Отбор - Структура - Структура следующего состава:
//    * Товары - ТаблицаЗначений - Таблица содержащая товарные позиции и склады, для которых необходимо получить даты поставки. Состав колонок:
//      ** Номенклатура   - СправочникСсылка.Номенклатура               - номенклатура.
//      ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//      ** Склад          - СправочникСсылка.Склады                     - склад.
//    * Работы - ТаблицаЗначений - Таблица содержащая товарные позиции, для которых необходимо получить даты поставки. Состав колонок:
//      ** Номенклатура   - СправочникСсылка.Номенклатура               - номенклатура.
//      ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая даты плановых поставок номенклатуры. Состав колонок:
//   * Номенклатура    - СправочникСсылка.Номенклатура               - номенклатура.
//   * Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//   * Склад           - СправочникСсылка.Склады                     - склад (не заполнен для работ).
//   * ДатаДоступности - Дата - дата плановой поставки, пустая дата, если схемы обеспечения и/или способы обеспечения не настроены.
//
Функция ПлановыеПоставки(Отбор) Экспорт

	ВсяНоменклатура = Отбор.Товары;
	Для Каждого Строка Из Отбор.Работы Цикл
		НоваяСтрока = ВсяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоТекущегоДня",   НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
	                          ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	Запрос.УстановитьПараметр("Товары", ВсяНоменклатура);

	Запрос.Текст = ВременнаяТаблицаИзТаблицыЗначений(ВсяНоменклатура, "Товары", "Номенклатура, Характеристика, Склад")
		+ РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
		+ Справочники.СпособыОбеспеченияПотребностей.ТекстЗапросаДатПлановойПоставки()
		+ "ВЫБРАТЬ
		|	Т.Номенклатура                 КАК Номенклатура,
		|	Т.Характеристика               КАК Характеристика,
		|	Т.Склад                        КАК Склад,
		|	Т.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	
		|	ЕСТЬNULL(ПлановыеПоставки.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоступности,
		|	
		|	ЕСТЬNULL(Настройка.ПриоритетТипаОбеспечения, 9999) КАК ПриоритетТипаОбеспечения,
		|	Т.Склад.Наименование КАК СкладНаименование
		|ИЗ
		|	ВтТовары КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК Настройка
		|		ПО Т.Номенклатура   = Настройка.Номенклатура
		|			И Т.Характеристика = Настройка.Характеристика
		|			И Т.Склад          = Настройка.Склад //для работ в обоих таблицах склад пуст.
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыПлановойПоставки КАК ПлановыеПоставки
		|		ПО Настройка.СпособОбеспеченияПотребностей = ПлановыеПоставки.СпособОбеспечения
		|";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру, сходную со структурой регистров накопления, состояния которых изменяются при проведении заказа.
// Используется, например для выбор обеспечения комплекта в заказе на разборку для передачи данных о движениях, которые
// поменяются если заказ распровести.
// 
// Возращаемое значение:
//   Структура - Структура следующего состава:
//    * ГрафикПоступленияТоваров  - ТаблицаЗначений - Таблица соотвествующая РН "График поступления товаров". Состав колонок:
//       ** Номенклатура        - СправочникСсылка.Номенклатура               - соответствует измерению "Номенклатура".
//       ** Характеристика      - СправочникСсылка.ХарактеристикиНоменклатуры - соответствует измерению "Характеристика".
//       ** Склад               - СправочникСсылка.Склады                     - соответствует измерению "Склад".
//       ** Назначение          - СправочникСсылка.Назначения                 - соответствует измерению "Назначение".
//       ** ДатаСобытия         - Дата                                        - соответствует измерению "ДатаСобытия".
//       ** КоличествоИзЗаказов - Число                                       - соответствует ресурсу "КоличествоИзЗаказов".
//       ** КоличествоПодЗаказ  - Число                                       - соответствует ресурсу "КоличествоПодЗаказ".
//    * ОбеспечениеЗаказов        - ТаблицаЗначений - Таблица соотвествующая РН "Обеспечение заказов". Состав колонок:
//       ** Номенклатура    - СправочникСсылка.Номенклатура               - соответствует измерению "Номенклатура".
//       ** Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - соответствует измерению "Характеристика".
//       ** Склад           - СправочникСсылка.Склады                     - соответствует измерению "Склад".
//       ** Назначение      - СправочникСсылка.Назначения                 - соответствует измерению "Назначение".
//       ** Период          - Дата                                        - соответствует стандартному реквизиту "Период".
//       ** Потребность     - Число                                       - соответствует ресурсу "Потребность".
//       ** КЗаказу         - Число                                       - соответствует ресурсу "КЗаказу".
//       ** НаличиеПодЗаказ - Число                                       - соответствует ресурсу "НаличиеПодЗаказ".
//    * ОбеспечениеЗаказовРаботами - ТаблицаЗначений - Таблица соотвествующая РН "Обеспечение заказов". Состав колонок:
//       ** Номенклатура    - СправочникСсылка.Номенклатура               - соответствует измерению "Номенклатура".
//       ** Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - соответствует измерению "Характеристика".
//       ** Подразделение   - СправочникСсылка.СтруктураПредприятия       - соответствует измерению "Подразделение".
//       ** Назначение      - СправочникСсылка.Назначения                 - соответствует измерению "Назначение".
//       ** Период          - Дата                                        - соответствует стандартному реквизиту "Период".
//       ** КОбеспечению    - Число                                       - соответствует ресурсу "КОбеспечению".
//    * ТоварыКОтгрузке           - ТаблицаЗначений - 
//       ** Номенклатура    - СправочникСсылка.Номенклатура               - соответствует измерению "Номенклатура".
//       ** Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - соответствует измерению "Характеристика".
//       ** Склад           - СправочникСсылка.Склады                     - соответствует измерению "Склад".
//       ** Назначение      - СправочникСсылка.Назначения                 - соответствует измерению "Назначение".
//       ** Серия           - СправочникСсылка.СерииНоменклатуры          - соответствует измерению "Серия".
//       ** ВРезерве        - Число                                       - соответствует ресурсу "ВРезерве".
//       ** КОтгрузке       - Число                                       - соответствует ресурсу "КОтгрузке".
//    * ТоварыКПоступлению        - ТаблицаЗначений - 
//       ** Номенклатура    - СправочникСсылка.Номенклатура               - соответствует измерению "Номенклатура".
//       ** Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - соответствует измерению "Характеристика".
//       ** Склад           - СправочникСсылка.Склады                     - соответствует измерению "Склад".
//       ** Назначение      - СправочникСсылка.Назначения                 - соответствует измерению "Назначение".
//       ** КПоступлению    - Число                                       - соответствует ресурсу "КПоступлению".
//
Функция СтруктураКорректировкиОбеспечения() Экспорт

	ТаблицаГрафикПоступленияТоваров = РегистрыНакопления.ГрафикПоступленияТоваров.СоздатьНаборЗаписей().ВыгрузитьКолонки(
		"Номенклатура, Характеристика, Склад, Назначение, ДатаСобытия, КоличествоИзЗаказов, КоличествоПодЗаказ");
	
	ТаблицаОбеспечениеЗаказов    = РегистрыНакопления.ОбеспечениеЗаказов.СоздатьНаборЗаписей().ВыгрузитьКолонки(
		"Номенклатура, Характеристика, Склад, Назначение, Период, Потребность, КЗаказу, НаличиеПодЗаказ");

	ТаблицаОбеспечениеЗаказовРаботами = РегистрыНакопления.ОбеспечениеЗаказовРаботами.СоздатьНаборЗаписей().ВыгрузитьКолонки(
		"Номенклатура, Характеристика, Подразделение, Назначение, Период, КОбеспечению");

	ТаблицаТоварыКОтгрузке = РегистрыНакопления.ТоварыКОтгрузке.СоздатьНаборЗаписей().ВыгрузитьКолонки(
		"Номенклатура, Характеристика, Склад, Назначение, Серия, ВРезерве, КОтгрузке");

	ТаблицаТоварыКПоступлению = РегистрыНакопления.ТоварыКПоступлению.СоздатьНаборЗаписей().ВыгрузитьКолонки(
		"Номенклатура, Характеристика, Склад, Назначение, КПоступлению");
		
	Корректировка = Новый Структура();
	Корректировка.Вставить("ГрафикПоступленияТоваров",   ТаблицаГрафикПоступленияТоваров);
	Корректировка.Вставить("ОбеспечениеЗаказов",         ТаблицаОбеспечениеЗаказов);
	Корректировка.Вставить("ОбеспечениеЗаказовРаботами", ТаблицаОбеспечениеЗаказовРаботами);
	Корректировка.Вставить("ТоварыКОтгрузке",            ТаблицаТоварыКОтгрузке);
	Корректировка.Вставить("ТоварыКПоступлению",         ТаблицаТоварыКПоступлению);
	
	Возврат Корректировка;

КонецФункции

// Заполняет структуру движений документа по регистрам.
// Используется для реализации механизма выбора обеспечения комплекта в заказе на сборку.
// 
// Параметры:
//   Корректировка - Структура - см. ОбеспечениеСервер.СтруктураКорректировкиОбеспечения.
//   Объект        - ДанныеФормыСтруктура - реквизит формы документа, содержащий данные редактируемого документа.
//   ПутиКДанным   - Структура - соотвествие стандартного наименования поля и поля в документе (см. ОбеспечениеСервер.ПутиКДаннымПоУмлочанию).
//   Отбор         - Структура - используется если необходимо получить данные по отдельной позиции заказа. Состав:
//    * Номенклатура   - СправочникСсылка.Номенклатура               - номенклатура, по которой необходимо получить сторнирующие движения.
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика, по которой необходимо получить сторнирующие движения.
//
Процедура СторноДвиженийДокумента(Корректировка, Объект, ПутиКДанным, Отбор = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = РегистрыНакопления.ГрафикОтгрузкиТоваров.ТекстЗапросаСторноЗаписейЗаказа()
	      + РегистрыНакопления.ОбеспечениеЗаказов.ТекстЗапросаСторноЗаписейЗаказа()
	      + РегистрыНакопления.ОбеспечениеЗаказовРаботами.ТекстЗапросаСторноЗаписейЗаказа()
	      + РегистрыНакопления.ТоварыКОтгрузке.ТекстЗапросаСторноЗаписейЗаказа();

	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	Если Отбор = Неопределено Тогда

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Отбор", "");

	Иначе

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Отбор",
			"И Таблица.Номенклатура = &Номенклатура И Таблица.Характеристика = &Характеристика");

		Запрос.УстановитьПараметр("Номенклатура",   Отбор.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Отбор.Характеристика);

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);

	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[0].Выгрузить(), Корректировка.ГрафикПоступленияТоваров);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[1].Выгрузить(), Корректировка.ОбеспечениеЗаказов);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[2].Выгрузить(), Корректировка.ОбеспечениеЗаказовРаботами);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[3].Выгрузить(), Корректировка.ТоварыКОтгрузке);

КонецПроцедуры

//Подготавливает данные для получения состояния обеспечения из формы заказа
//Создает таблицу и копирует в нее данные, необходимые механизмам обеспечения из таблицы формы согласно отбору.
//
//Параметры:
// ТаблицаТовары - ДанныеФормыКоллекция - таблица формы для копирования.
// Объект - ДанныеФормыСтруктура - необходим для заполнения данных, отсутствующих в строках таблицы.
// ПутиКДанным - Соотвествие - ключ - имя по умолчанию, значение - имя реквизита в объекте или таблице,
//                                    отличное от имени по умолчанию.
// Отбор - Массив - содержит отбор по вариантам обеспечения для копирования.
//
//Возвращаемое значение:
// Таблица значений - таблица содержащая данные из таблицы формы с именами колонок по умолчанию.
//
Функция СтрокиВТаблицу(ТаблицаТовары, Объект, ПутиКДанным, Отбор = Неопределено) Экспорт
	
	Хранилище = СоздатьХранилищеЗаполнитьИзОбъекта(Объект, ПутиКДанным);
	Таблица = ТаблицаПоОписаниюПолей(ПутиКДаннымПоУмолчанию());
	ДанныеСтроки = Новый Структура(ПутиКДаннымПоУмолчанию());
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		ЗаполнитьЗначенияСвойств(Хранилище, СтрокаТовары);
		ОбеспечениеКлиентСервер.ЗаполнитьЗначенияСвойствСРазличемИмен(ДанныеСтроки, Хранилище, ПутиКДанным);
		
		Если Не СтрокаУдовлетворяетОтбору(ДанныеСтроки, Отбор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.Отменено = Истина Или ДанныеСтроки.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		НоваяСтрока.Идентификатор = СтрокаТовары.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Получает данные по состоянию обеспечения заказов
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//  Объект - Структура - Структура, описывающая реквизиты обеспечиваемого заказа и его таблицу "Товары".
//  Фильтры - Структура - структура содержащая фильтр по номенклатуре (см. функция ОбеспечениеСервер.ФильтрыСостоянияОбеспечения())
//  Режим - Строка - Режим группировки материалов.
// Возвращаемое значение:
//  Структура - Содержит поля "Потребности" и "ОстаткиИОбороты".
//
Функция СостояниеОбеспеченияЗаказов(МенеджерВременныхТаблиц, Объект, Фильтры, Режим) Экспорт

	////////////////////////////////////////////////////////////////////////////////
	//Получение и группировка доступных вариантов обеспечения

	Корректировка = СтруктураКорректировкиОбеспечения();
	ПутиКДанным = Новый Соответствие();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДанныеДляСторно = Новый Структура("Ссылка");
		ДанныеДляСторно.Ссылка = ?(Объект.СторнируемыеДокументы.Количество() > 0,
			Объект.СторнируемыеДокументы, Объект.Ссылка);
		СторноДвиженийДокумента(Корректировка, ДанныеДляСторно, ПутиКДанным);
		
	КонецЕсли;

	Отбор = СтруктураОтбораОстатков();
	Для Каждого СтрокаТовары Из Объект.ТаблицаЗаказа Цикл

		ДобавитьАналитику(Отбор, СтрокаТовары);
		ДобавитьСтрокуКорректировки(Корректировка, СтрокаТовары.Количество, СтрокаТовары);

	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Номенклатура    КАК Номенклатура,
		|	Т.Характеристика  КАК Характеристика,
		|	Т.Склад           КАК Склад,
		|	Т.Подразделение   КАК Подразделение,
		|	Т.Назначение      КАК Назначение,
		|	Т.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	ВтЗаказы КАК Т";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьАналитику(Отбор, Выборка);
	КонецЦикла;

	ОстаткиИОбороты = ОстаткиИОбороты(Отбор, Корректировка);
	ОстаткиИОбороты.Товары             = ОстаткиИОбороты.Товары.Выгрузить();
	ОстаткиИОбороты.Работы             = ОстаткиИОбороты.Работы.Выгрузить();
	ОстаткиИОбороты.ТоварыОбособленные = ОстаткиИОбороты.ТоварыОбособленные.Выгрузить();
	
	КлючТовары =             "Номенклатура, Характеристика, Склад";
	КлючТоварыОбособленные = "Номенклатура, Характеристика, Назначение, Склад";
	КлючРаботы =             "Номенклатура, Характеристика, Назначение, Подразделение";
	
	ОстаткиИОбороты.Товары.Индексы.Добавить(КлючТовары);
	ОстаткиИОбороты.Работы.Индексы.Добавить(КлючРаботы);
	ОстаткиИОбороты.ТоварыОбособленные.Индексы.Добавить(КлючТоварыОбособленные);

	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	Запрос.УстановитьПараметр("СгруппироватьПоЗаказам", Режим = "СгруппироватьПоЗаказам");

	Если Фильтры.Номенклатура Тогда
		Запрос.УстановитьПараметр("Фильтр", Истина);
	Иначе
		Запрос.УстановитьПараметр("Фильтр", Ложь);
	КонецЕсли;

	Для каждого Свойство Из Объект Цикл
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;

	Запрос.Текст = ВременнаяТаблицаИзТаблицыЗначений(Объект.ТаблицаЗаказа, "ТаблицаЗаказа", "Номенклатура, Упаковка", Ложь);
	Запрос.Текст = Запрос.Текст
		+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Набор.Номенклатура   КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад          КАК Склад
		|
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ(
		|	ВЫБРАТЬ
		|		Т.Номенклатура   КАК Номенклатура,
		|		Т.Характеристика КАК Характеристика,
		|		Т.Склад          КАК Склад
		|
		|	ИЗ
		|		ВтЗаказы КАК Т
		|	ГДЕ
		|		Т.Заказ <> &Ссылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Т.Номенклатура   КАК Номенклатура,
		|		Т.Характеристика КАК Характеристика,
		|		Т.Склад          КАК Склад
		|
		|	ИЗ
		|		ВтТаблицаЗаказа КАК Т
		|	ГДЕ
		|		НЕ Т.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	) КАК Набор
		|;
		|
		|////////////////////////////////////////////////
		|"
		+ РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
		+ Справочники.СпособыОбеспеченияПотребностей.ТекстЗапросаДатПлановойПоставки()
		+ "ВЫБРАТЬ
		|	Т.Заказ                              КАК Заказ,
		|	Т.КодСтроки                          КАК КодСтроки,
		|	Т.Заказ.Номер                        КАК НомерДокумента,
		|	Т.Дата                               КАК Дата,
		|
		|	ВЫБОР КОГДА Т.ЖелаемаяДатаОтгрузки < &НачалоТекущегоДня
		|			ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Т.ЖелаемаяДатаОтгрузки
		|		КОНЕЦ                            КАК СгруппироватьПоЗаказам,
		|
		|	ВЫБОР КОГДА Т.ЖелаемаяДатаОтгрузки >= &НачалоТекущегоДня ТОГДА
		|				Т.ЖелаемаяДатаОтгрузки
		|			ИНАЧЕ
		|				&НачалоТекущегоДня
		|		КОНЕЦ                            КАК ЖелаемаяДатаОтгрузки,
		|	Т.НеОтгружатьЧастями                 КАК НеОтгружатьЧастями,
		|	Т.Партнер                            КАК Партнер,
		|	Т.Статус                             КАК Статус,
		|	Т.СтатусИспользуется                 КАК СтатусИспользуется,
		|	Т.НомерСтроки                        КАК НомерСтроки,
		|	Т.НомерСтрокиПродукция               КАК НомерСтрокиПродукция,
		|	Т.Продукция                          КАК Продукция,
		|		Т.Этап
		|	КАК Этап,
		|	Т.ЭтапПорядок                        КАК ЭтапПорядок,
		|
		|	Т.Упаковка                           КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)  КАК УпаковкаКоэффициент,
		|
		|	Т.Номенклатура                       КАК Номенклатура,
		|	Т.Характеристика                     КАК Характеристика,
		|	Т.Склад                              КАК Склад,
		|	Т.Назначение                         КАК Назначение,
		|	Т.Подразделение                      КАК Подразделение,
		|
		|	ЕСТЬNULL(ПлановыеПоставки.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК БлижайшаяДатаПоставки,
		|
		|	СпрНоменклатура.ТипНоменклатуры       КАК ТипНоменклатуры,
		|	СпрНоменклатура.ЕдиницаИзмерения      КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Артикул               КАК Артикул,
		|	СпрНоменклатура.Код                   КАК Код,
		|
		|	Т.Количество                         КАК Количество,
		|	Т.ВариантОбеспечения                 КАК ВариантОбеспечения,
		|	ВЫБОР КОГДА Т.ДатаОтгрузки < &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ Т.ДатаОтгрузки
		|		КОНЕЦ                            КАК ДатаОтгрузки,
		|
		|	ВЫБОР КОГДА Фильтр.Номенклатура ЕСТЬ NULL ТОГДА
		|				&Фильтр
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                            КАК Фильтр
		|
		|ИЗ
		|	ВтЗаказы КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО Т.Номенклатура = СпрНоменклатура.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтФильтрНоменклатуры КАК Фильтр
		|		ПО Т.Номенклатура = Фильтр.Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК Настройка
		|		ПО Т.Номенклатура   = Настройка.Номенклатура
		|		 И Т.Характеристика = Настройка.Характеристика
		|		 И Т.Склад          = Настройка.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыПлановойПоставки КАК ПлановыеПоставки
		|		ПО Настройка.СпособОбеспеченияПотребностей = ПлановыеПоставки.СпособОбеспечения
		|
		|
		|ГДЕ
		|	Т.Заказ <> &Ссылка
		|	И НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И НЕ (СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			И Т.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Ссылка                              КАК Заказ,
		|	Т.КодСтроки                          КАК КодСтроки,
		|	&НомерДокумента                      КАК НомерДокумента,
		|	&Дата                                КАК Дата,
		|
		|	ВЫБОР КОГДА Т.ЖелаемаяДатаОтгрузки < &НачалоТекущегоДня
		|			ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Т.ЖелаемаяДатаОтгрузки
		|		КОНЕЦ                            КАК СгруппироватьПоЗаказам,
		|
		|	ВЫБОР КОГДА Т.ЖелаемаяДатаОтгрузки < &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Т.ЖелаемаяДатаОтгрузки
		|		КОНЕЦ                            КАК ЖелаемаяДатаОтгрузки,
		|	&НеОтгружатьЧастями                  КАК НеОтгружатьЧастями,
		|	&Партнер                             КАК Партнер,
		|	&Статус                              КАК Статус,
		|	&СтатусИспользуется                  КАК СтатусИспользуется,
		|	Т.НомерСтроки                        КАК НомерСтроки,
		|	Т.НомерСтрокиПродукция               КАК НомерСтрокиПродукция,
		|	Т.Продукция                          КАК Продукция,
		|		Т.Этап
		|	КАК Этап,
		|	Т.ЭтапПорядок                        КАК ЭтапПорядок,
		|
		|	Т.Упаковка                           КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)  КАК УпаковкаКоэффициент,
		|
		|	Т.Номенклатура                       КАК Номенклатура,
		|	Т.Характеристика                     КАК Характеристика,
		|	Т.Склад                              КАК Склад,
		|	Т.Назначение                         КАК Назначение,
		|	Т.Подразделение                      КАК Подразделение,
		|
		|	ЕСТЬNULL(ПлановыеПоставки.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК БлижайшаяДатаПоставки,
		|
		|	СпрНоменклатура.ТипНоменклатуры      КАК ТипНоменклатуры,
		|	СпрНоменклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Артикул              КАК Артикул,
		|	СпрНоменклатура.Код                  КАК Код,
		|
		|	Т.Количество                         КАК Количество,
		|
		|	Т.ВариантОбеспечения                 КАК ВариантОбеспечения,
		|	ВЫБОР КОГДА Т.ДатаОтгрузки < &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Т.ДатаОтгрузки
		|		КОНЕЦ                            КАК ДатаОтгрузки,
		|
		|	ВЫБОР КОГДА Фильтр.Номенклатура ЕСТЬ NULL ТОГДА
		|				&Фильтр
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                            КАК Фильтр
		|
		|ИЗ
		|	ВтТаблицаЗаказа КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО Т.Номенклатура = СпрНоменклатура.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтФильтрНоменклатуры КАК Фильтр
		|		ПО Т.Номенклатура = Фильтр.Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК Настройка
		|		ПО Т.Номенклатура   = Настройка.Номенклатура
		|		 И Т.Характеристика = Настройка.Характеристика
		|		 И Т.Склад          = Настройка.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыПлановойПоставки КАК ПлановыеПоставки
		|		ПО Настройка.СпособОбеспеченияПотребностей = ПлановыеПоставки.СпособОбеспечения
		|
		|
		|	ГДЕ
		|		НЕ Т.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	
		|УПОРЯДОЧИТЬ ПО
		|	СгруппироватьПоЗаказам, Дата, Заказ, НомерСтрокиПродукция, ЭтапПорядок, НомерСтроки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Т.Упаковка",
		"Т.Номенклатура"));
		
	Если Режим = "СгруппироватьПоЗаказам" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.НомерСтрокиПродукция", "0");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.ЭтапПорядок", "0");
		
	ИначеЕсли Режим = "СгруппироватьПоИзделиям" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.ЭтапПорядок", "0");
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
		Потребности = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Новый Структура("Потребности, ОстаткиИОбороты", Потребности, ОстаткиИОбороты);

КонецФункции

//Расчет графика производства и автозаказ
// Получает таблицу потребностей с аналитикой и необходимыми колонками.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица потребностей с аналитикой.
//
Функция ТаблицаПотребностей() Экспорт
	
	Таблица = ТаблицаПотребностейБезАналитики();
	
	Таблица.Колонки.Добавить("НомерСтроки",        ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));
	Таблица.Колонки.Добавить("КодСтроки",          ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));
	Таблица.Колонки.Добавить("Ссылка"); // Требуется для заполнения обеспечения в списке, где есть несколько ссылок-заказов.
	Таблица.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ТипНоменклатуры",    Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	Таблица.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Таблица.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Таблица.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Таблица.Колонки.Добавить("КоэффициентУпаковки", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Возврат Таблица;
	
КонецФункции

// Заполняет реквизит "ДатаОтгрузки" в табличной части (если не заполнено) на основании способов обеспечения.
//
// Параметры:
//  ТабЧасть - ТабличнаяЧасть, ДанныеФормыКоллекция - Табличная часть, в которой нужно заполнить дату отгрузки.
//														Обязательные поля НомерСтроки, Номенклатура, Характеристика, Склад.
//
Процедура ЗаполнитьДатыОтгрузкиПоСпособуОбеспечения(ТабЧасть) Экспорт

	Если ТабЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
		|	Т.НомерСтроки    КАК НомерСтроки,
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад КАК Склад
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Товары КАК Т
		|ГДЕ
		|	Т.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, 
		|	Характеристика,
		|	Склад 
		|;
		|
		|/////////////////////////////////////////
		|"
		+ РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
		+ Справочники.СпособыОбеспеченияПотребностей.ТекстЗапросаДатПлановойПоставки()
		+ "ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ПлановыеПоставки.Дата, &НачалоТекущегоДня) КАК ДатаОтгрузки
		|ИЗ
		|	ВтТовары КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК Настройка
		|		ПО Т.Номенклатура   = Настройка.Номенклатура
		|		 И Т.Характеристика = Настройка.Характеристика
		|		 И Т.Склад          = Настройка.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыПлановойПоставки КАК ПлановыеПоставки
		|		ПО Настройка.СпособОбеспеченияПотребностей = ПлановыеПоставки.СпособОбеспечения";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	Запрос.УстановитьПараметр("Товары", ТабЧасть.Выгрузить(,"НомерСтроки,Номенклатура,Характеристика,Склад,ДатаОтгрузки"));

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Результат.Выбрать();
	ПолученныеДаты = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПолученныеДаты.Вставить(Выборка.НомерСтроки, Выборка.ДатаОтгрузки);
	КонецЦикла;
	
	Для каждого ДанныеСтроки Из ТабЧасть Цикл
		ДатаОтгрузки = ПолученныеДаты.Получить(ДанныеСтроки.НомерСтроки);
		Если ДатаОтгрузки <> Неопределено Тогда
			ДанныеСтроки.ДатаОтгрузки = ДатаОтгрузки;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

#Область ТекстыЗапросовОбщегоНазначения

// Возвращает текст запроса по датам графика
//
// Параметры:
//  Разделы      - Массив, Неопределено - разделы запроса.
//  ИскатьВперед - Булево               - если истина, то поиск вперед, иначе поиск назад.
//
// Возвращаемое значение:
//	Строка - текст запроса дат по календарю работы предприятия.
//
Функция ТекстЗапросаДатГрафика(Разделы = Неопределено, ИскатьВперед = Истина) Экспорт

	Если ИскатьВперед Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.Календарь   КАК Календарь,
			|	Т.ЧислоДней   КАК ЧислоДней,
			|	Т.ДатаОтсчета КАК ДатаОтсчета,
			|	ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВСледующемГоду.ДатаГрафика) КАК Дата
			|ПОМЕСТИТЬ ВтДатыГрафика
			|ИЗ
			|	ВтПараметрыПоиска КАК Т //шаблон
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
			|		ПО Т.Календарь = ТекущаяДата.Календарь
			|		 И ТекущаяДата.Год         = ГОД(Т.ДатаОтсчета)
			|		 И ТекущаяДата.ДатаГрафика = Т.ДатаОтсчета
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВТекущемГоду
			|		ПО Т.Календарь = ПоставкаВТекущемГоду.Календарь
			|		 И ПоставкаВТекущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВТекущемГоду.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоставкаВТекущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
			|			+ Т.ЧислоДней
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследняяДатаГода
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоследняяДатаГода.Календарь
			|		 И ПоследняяДатаГода.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоследняяДатаГода.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Т.ДатаОтсчета, ГОД), ДЕНЬ)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВСледующемГоду
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоставкаВСледующемГоду.Календарь
			|		 И ПоставкаВСледующемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВСледующемГоду.Год = ГОД(Т.ДатаОтсчета) + 1
			|		 И ПоставкаВСледующемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= Т.ЧислоДней
			|			- (ПоследняяДатаГода.КоличествоДнейВГрафикеСНачалаГода
			|				- ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
			|
			|ГДЕ
			|	НЕ ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВСледующемГоду.ДатаГрафика) ЕСТЬ NULL
			|ИНДЕКСИРОВАТЬ ПО
			|	Календарь, ЧислоДней, ДатаОтсчета
			|;
			|
			|////////////////////////////////////////////////////////////
			|";
			
	Иначе
			
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.ЧислоДней   КАК ЧислоДней,
			|	Т.ДатаОтсчета КАК ДатаОтсчета,
			|	ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВПредыдущемГоду.ДатаГрафика) КАК Дата
			|ПОМЕСТИТЬ ВтДатыГрафика
			|ИЗ
			|	ВтПараметрыПоиска КАК Т //шаблон
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
			|		ПО Т.Календарь = ТекущаяДата.Календарь
			|		 И ТекущаяДата.Год         = ГОД(Т.ДатаОтсчета)
			|		 И ТекущаяДата.ДатаГрафика = Т.ДатаОтсчета
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВТекущемГоду
			|		ПО Т.Календарь = ПоставкаВТекущемГоду.Календарь
			|		 И ПоставкаВТекущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВТекущемГоду.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоставкаВТекущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
			|			- Т.ЧислоДней
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследняяДатаГода
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоследняяДатаГода.Календарь
			|		 И ПоследняяДатаГода.Год = ГОД(Т.ДатаОтсчета) - 1
			|		 И ПоследняяДатаГода.ДатаГрафика = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Т.ДатаОтсчета, ГОД), СЕКУНДА, -1), ДЕНЬ)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВПредыдущемГоду
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоставкаВПредыдущемГоду.Календарь
			|		 И ПоставкаВПредыдущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВПредыдущемГоду.Год = ГОД(Т.ДатаОтсчета) - 1
			|		 И ПоставкаВПредыдущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ПоследняяДатаГода.КоличествоДнейВГрафикеСНачалаГода
			|				- (Т.ЧислоДней - ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
			|
			|ГДЕ
			|	НЕ ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВПредыдущемГоду.ДатаГрафика) ЕСТЬ NULL
			|ИНДЕКСИРОВАТЬ ПО
			|	ЧислоДней, ДатаОтсчета
			|;
			|
			|////////////////////////////////////////////////////////////
			|";
			
	КонецЕсли;
	
	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаДатыГрафика");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Возвращает текст запроса о доступных остатках в разрезе дат для выввода информации в подбор
// 
// Параметры:
//   ЕстьХарактеристика         - Булево               - признак наличия характеристик.
//   ХарактеристикиИспользуются - Булево               - признак использования характеристик.
//   СоставРазделовЗапроса      - Массив, Неопределено - разделы запроса.
//
// Возвращаемое значение:
//   Строка - текст запроса доступных остатков.
//
Функция ТекстЗапросаДоступныхОстатковПоДатамДляПодбора(ЕстьХарактеристика, ХарактеристикиИспользуются, СоставРазделовЗапроса) Экспорт

	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив();
	КонецЕсли;

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Склад                             КАК Склад,
		|	Т.Номенклатура                      КАК Номенклатура,
		|	Т.Характеристика                    КАК Характеристика,
		|	Т.ВНаличииОстаток                   КАК ВНаличии,
		|	Т.ВРезервеСоСкладаОстаток           КАК ВРезервеСоСклада,
		|	Т.ВРезервеПодЗаказОстаток           КАК ВРезервеПодЗаказ
		|ПОМЕСТИТЬ ВтСвободныеОстатки
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|		Склад В (&Склады) И Номенклатура = &Номенклатура) КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|/////////////////////////////////////////////////////////////
		|";

	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Т.Склад               КАК Склад,
		|	Т.СкладНаименование   КАК СкладНаименование,
		|	СУММА(Т.ВНаличии)     КАК ВНаличии,
		|	СУММА(Свободно)       КАК Свободно
		|ИЗ(
		|	ВЫБРАТЬ
		|		Т.Склад               КАК Склад,
		|		Т.Склад.Наименование  КАК СкладНаименование,
		|		Т.ВНаличии            КАК ВНаличии,
		|		Т.ВНаличии
		|			- Т.ВРезервеСоСклада
		|			- Т.ВРезервеПодЗаказ КАК Свободно
		|	ИЗ
		|		ВтСвободныеОстатки КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Т.Склад               КАК Склад,
		|		Т.Склад.Наименование  КАК СкладНаименование,
		|		0                     КАК ВНаличии,
		|		Т.Количество          КАК Свободно
		|	ИЗ
		|		РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
		|	ГДЕ
		|		Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
		|		И Т.Количество < 0
		|		И Т.Склад В (&Склады)
		|		И Т.Номенклатура = &Номенклатура) КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.Склад, Т.СкладНаименование
		|УПОРЯДОЧИТЬ ПО
		|	СкладНаименование
		|;
		|
		|/////////////////////////////////////////////////////////////
		|";

	СоставРазделовЗапроса.Добавить("ВтСвободныеОстатки");
	СоставРазделовЗапроса.Добавить("ДоступныеТовары");

	Если Не ЕстьХарактеристика И ХарактеристикиИспользуются Тогда

		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Т.Склад                                  КАК Склад,
			|	Т.Характеристика                         КАК Характеристика,
			|	Т.ДатаДоступности                        КАК Дата,
			|	МАКСИМУМ(Т.Количество)
			|		- МАКСИМУМ(ЕСТЬNULL(ПредыдущиеДни.Количество, 0))    КАК Количество
			|ПОМЕСТИТЬ ВтПриростДоступностиПоХарактеристике
			|ИЗ
			|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ПредыдущиеДни
			|		ПО Т.Склад          = ПредыдущиеДни.Склад
			|		 И Т.Номенклатура    = ПредыдущиеДни.Номенклатура
			|		 И Т.Характеристика  = ПредыдущиеДни.Характеристика
			|		 И Т.ДатаДоступности > ПредыдущиеДни.ДатаДоступности
			|ГДЕ
			|	Т.Склад В (&Склады) И Т.Номенклатура = &Номенклатура
			|	И Т.Количество <> 0
			|СГРУППИРОВАТЬ ПО
			|	Т.Склад, Т.Характеристика,
			|	Т.ДатаДоступности
			|ИНДЕКСИРОВАТЬ ПО
			|	Дата
			|;
			|
			|/////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.Склад                         КАК Склад,
			|	Т.Дата                          КАК Период,
			|	СУММА(ЕСТЬNULL(ПредыдущиеДни.Количество, 0))
			|		+ МАКСИМУМ(ЕСТЬNULL(
			|			ОстаткиСклада.ВНаличии
			|				- ОстаткиСклада.ВРезервеСоСклада
			|				- ОстаткиСклада.ВРезервеПодЗаказ, 0)) КАК Доступно
			|ИЗ
			|	ВтПриростДоступностиПоХарактеристике КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПриростДоступностиПоХарактеристике КАК ПредыдущиеДни
			|		ПО Т.Склад = ПредыдущиеДни.Склад
			|		 И Т.Дата >= ПредыдущиеДни.Дата
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК ОстаткиСклада
			|		ПО Т.Склад          = ОстаткиСклада.Склад
			|		 И Т.Характеристика = ОстаткиСклада.Характеристика
			|ГДЕ
			|	Т.Дата > ДАТАВРЕМЯ(1, 1, 1)
			|СГРУППИРОВАТЬ ПО
			|	Т.Склад, Т.Склад.Наименование, Т.Дата
			|УПОРЯДОЧИТЬ ПО
			|	Т.Склад.Наименование, Период";

		СоставРазделовЗапроса.Добавить("ВтПриростДоступностиПоХарактеристике");

	Иначе

		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Т.Склад                         КАК Склад,
			|	Т.ДатаДоступности               КАК Период,
			|	Т.Количество
			|		+ ЕСТЬNULL(ОстаткиСклада.ВНаличии
			|				- ОстаткиСклада.ВРезервеСоСклада
			|				- ОстаткиСклада.ВРезервеПодЗаказ, 0) КАК Доступно
			|ИЗ
			|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК ОстаткиСклада
			|		ПО Т.Склад          = ОстаткиСклада.Склад
			|		 И Т.Характеристика = ОстаткиСклада.Характеристика
			|ГДЕ
			|	Т.Склад В (&Склады) И Т.Номенклатура = &Номенклатура
			|	И Т.Количество <> 0
			|	И Т.ДатаДоступности > ДАТАВРЕМЯ(1, 1, 1)
			|УПОРЯДОЧИТЬ ПО
			|	Т.Склад.Наименование, Период";

	КонецЕсли;

	СоставРазделовЗапроса.Добавить("ПланируемыеОстатки");

	Если ЕстьХарактеристика Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Номенклатура = &Номенклатура",
			"И Номенклатура = &Номенклатура И Характеристика = &Характеристика");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Т.Номенклатура = &Номенклатура",
			"И Т.Номенклатура = &Номенклатура И Т.Характеристика = &Характеристика");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ЗаполнениеКопирование

// Инициализация значения во всех заказах
// Заполняет вариант обеспечения в таблице значением по умлочанию.
// Ипользуется, например, при копировании заказов, заполнении заказов на основании других документов.
// 
// Параметры:
//   Таблица              - ТаблицаЗначений               - таблица в которой необходимо заполнить вариант обеспечения.
//                        - ДокументСсылка.ТабличнаяЧасть - табличная часть в которой необходимо заполнить вариант обеспечения.
//                        - ДанныеФормыКоллекция          - коллекция в которой необходимо заполнить вариант обеспечения.
//   ЗаполнитьОбособленно - Булево                        - признак, что предпочтительно использовать обособленное обеспечение,
//   СтатусЗаказаКлиента  - ПеречислениеСсылка.СтатусыЗаказовКлиентов - используется для расчета варианта обеспечения при включенной ФО ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
// 
// Возвращаемое значение:
//   Булево - Ложь, если перезаполнение не потребовалось, иначе Истина.
//
Функция ЗаполнитьВариантОбеспеченияПоУмолчанию(Таблица, ЗаполнитьОбособленно = Ложь, СтатусЗаказаКлиента = Неопределено) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗаполненияВариантаОбеспечения = ОбеспечениеКлиентСервер.ПараметрыЗаполненияВариантаОбеспеченияПоУмолчанию();
	ПараметрыЗаполненияВариантаОбеспечения.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если СтатусЗаказаКлиента = Неопределено
		Или ПараметрыЗаполненияВариантаОбеспечения.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		
		ТаблицаНоменклатуры = Новый ТаблицаЗначений();
		ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаНоменклатуры.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));

		ВГраница = Таблица.Количество() - 1;
		Для Индекс = 0 По ВГраница Цикл

			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Индекс       = Индекс;
			НоваяСтрока.Номенклатура = Таблица[Индекс].Номенклатура;

		КонецЦикла;

		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Таблица.Номенклатура КАК Номенклатура,
			|	Таблица.Индекс       КАК Индекс
			|
			|ПОМЕСТИТЬ ВтНоменклатура
			|ИЗ
			|	&ТаблицаНоменклатуры КАК Таблица
			|;
			|
			|////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(СпрНоменклатура.ОбособленнаяЗакупкаПродажа, ЛОЖЬ) КАК ОбособленнаяЗакупкаПродажа,
			|	ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТипНоменклатуры,
			|	Таблица.Индекс КАК Индекс
			|ИЗ
			|	ВтНоменклатура КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		По Таблица.Номенклатура = СпрНоменклатура.Ссылка";
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		Результат = Ложь;
		Пока Выборка.Следующий() Цикл
		
			ПараметрыЗаполненияВариантаОбеспечения.ТипНоменклатуры = Выборка.ТипНоменклатуры;
			ПараметрыЗаполненияВариантаОбеспечения.ЗаполнитьОбособленно = (ЗаполнитьОбособленно = Истина Или Выборка.ОбособленнаяЗакупкаПродажа);
			ВариантОбеспечения = ОбеспечениеКлиентСервер.ВариантОбеспеченияПоУмолчанию(ПараметрыЗаполненияВариантаОбеспечения);
			
			Таблица[Выборка.Индекс].ВариантОбеспечения = ВариантОбеспечения;
			Результат = Истина;
		КонецЦикла;
		
	Иначе
		
		ПараметрыЗаполненияВариантаОбеспечения.СтатусЗаказаКлиента = СтатусЗаказаКлиента;
		ВариантОбеспечения = ОбеспечениеКлиентСервер.ВариантОбеспеченияПоУмолчанию(ПараметрыЗаполненияВариантаОбеспечения);
		Если Таблица[0].ВариантОбеспечения <> ВариантОбеспечения Тогда
			Для Каждого Стр Из Таблица Цикл
				Стр.ВариантОбеспечения = ВариантОбеспечения;
			КонецЦикла;
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Заполняет дату отгрузки в параметре Таблица в колонке ИмяПоля для неотмененных строк
//
// Параметры:
//  Значение - Дата - Значение даты отгрузки.
//  Таблица - ТаблицаЗнчений - Таблица, в которой необходимо заполнить дату отгрузки.
//  ИмяПоля - Строка - Имя поля, в котором дата отгрузки.
//
Процедура ЗаполнитьДатыОтгрузкиВТаблице(Значение, Таблица, ИмяПоля, ЕстьОтменено = Истина) Экспорт

	Если ЗначениеЗаполнено(Значение) Тогда

		Для Каждого Строка Из Таблица Цикл
			Если НЕ ЕстьОтменено ИЛИ Не Строка.Отменено Тогда
				Строка[ИмяПоля] = Значение;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//Заполнение даты отгрузки в табличной части заказа
// Определяет максимальное значение поля в колонке коллекции значений
//
// Параметры:
//  Коллекция - КоллекцияЗначений - Коллекция, в которой необходимо найти макс. значение поля.
//  ИмяПоля - Строка - имя колонки для поиска.
//  НачальноеЗначение - Число - начальное значение, относительно которого искать макс. значение.
//
// Возвращаемое значение:
//  Число - Максимальное значение поля.
//
Функция МаксимальноеЗначениеВКоллекции(Коллекция, ИмяПоля, НачальноеЗначение) Экспорт

	МаксимальноеЗначение = НачальноеЗначение;
	Для Каждого Строка Из Коллекция Цикл

		Если Строка[ИмяПоля] > МаксимальноеЗначение Тогда
			МаксимальноеЗначение = Строка[ИмяПоля];
		КонецЕсли;

	КонецЦикла;

	Возврат МаксимальноеЗначение;

КонецФункции

//Заполнение даты отгрузки в табличной части заказа
// Заполняет значение поля в строках коллекции значений
//
// Параметры:
//  Коллекция - КоллекцияЗначений - Коллекция, в которой необходимо заполнить поле.
//  ИмяПоля - Строка - имя колонки, которую необходимо заполнить.
//  ЗначениеЗаполнения - Значение для заполнения.
//  ВыделенныеСтроки - Массив - строки, в которых необходимо заполнить значение.
//
Процедура ЗаполнитьРеквизитВКоллекции(Коллекция, ИмяПоля, ЗначениеЗаполнения, ВыделенныеСтроки = Неопределено) Экспорт

	Если ВыделенныеСтроки = Неопределено Тогда

		Для Каждого СтрокаТаблицы Из Коллекция Цикл
			СтрокаТаблицы[ИмяПоля] = ЗначениеЗаполнения;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = Коллекция.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы[ИмяПоля] = ЗначениеЗаполнения;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Возвращает текст ошибки при создании накладных на основании заказов, если в заказах не указано Отгрузить или Отгрузить обособленно.
//
// Возвращаемое значение:
//  Строка - Текст сообщения об ошибке.
//
Функция ТекстОшибкиНетТоваровДоступныхДляОтгрузки() Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда

		ТекстОшибки = НСтр("ru='Нет товаров, доступных для отгрузки. Для начала процесса отгрузки необходимо указать действие
		                       |""Отгрузить"" или ""Отгрузить обособленно"" для одной или нескольких позиций номенклатуры заказа.'");

	Иначе

		ТекстОшибки = НСтр("ru='Нет товаров, доступных для отгрузки. Для начала процесса отгрузки необходимо
		                       |указать действие ""Отгрузить"" для одной или нескольких позиций номенклатуры заказа.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Переносит серии указанные в отдельной таблице в строки другой таблицы.
// 
// Параметры:
//   Таблица      - ТаблицаЗначений - содержит строки без указания серий.
//   ИндексыСтрок - Массив           - массив индексов строк в таблице для обработки. Индексы должны быть по убыванию.
//   ТаблицаСерий - ТаблицаЗначений - таблица содержащая серии и количества этих серий.
//   КлючСерии    - Строка           - ключевые поля в таблице серий через запятую.
//
Процедура ПеренестиСерииИзТаблицыВСтроки(Таблица, ИндексыСтрок, ТаблицаСерий, КлючСерии) Экспорт
	
	ТаблицаСерий.Индексы.Добавить(КлючСерии);
	ПараметрыОтбораСерий = Новый Структура(КлючСерии);
	Для Каждого Индекс Из ИндексыСтрок Цикл
		
		СтрокаТовары = Таблица[Индекс];
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораСерий, СтрокаТовары);
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(ПараметрыОтбораСерий);
		Для Каждого СтрокаСерии Из НайденныеСтроки Цикл
			
			КоличествоСписать = Мин(СтрокаСерии.Количество, СтрокаТовары.Количество);
			СтрокаСерии.Количество = СтрокаСерии.Количество - КоличествоСписать;
			
			Если КоличествоСписать > 0 Тогда
				
				СтрокаТовары.Серия = СтрокаСерии.Серия;
				
				Если КоличествоСписать < СтрокаТовары.Количество Тогда
					
					НоваяСтрока = Таблица.Вставить(Индекс);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
					
					Доля = КоличествоСписать / СтрокаТовары.Количество;
					
					НоваяСтрока.Количество = КоличествоСписать;
					НоваяСтрока.КоличествоУпаковок = Доля * СтрокаТовары.КоличествоУпаковок;
					
					СтрокаТовары.Количество = СтрокаТовары.Количество - НоваяСтрока.Количество;
					СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
					
				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(СтрокиТабличнойЧасти, Объект, ТабличнаяЧасть) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("ЖелаемаяДатаОтгрузки", Новый ОписаниеТипов("Дата"));
	
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	ВариантОбеспеченияТребуется = Перечисления.ВариантыОбеспечения.Требуется;
	ВариантОбеспеченияОбособленно = Перечисления.ВариантыОбеспечения.Обособленно;
	Для Каждого Идентификатор Из СтрокиТабличнойЧасти Цикл
		
		СтрокаТовары = ТабличнаяЧасть.НайтиПоИдентификатору(Идентификатор);
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДатаОтгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТовары.ВариантОбеспечения <> ВариантОбеспеченияТребуется
				И СтрокаТовары.ВариантОбеспечения <> ВариантОбеспеченияОбособленно Тогда
			
			// В этом случае дату отгрузки заполнять следует исходя из желаемой даты отгрузки, не опираясь на плановую дату обеспечения.
			СтрокаТовары.ДатаОтгрузки = Макс(НачалоТекущегоДня, Объект.ЖелаемаяДатаОтгрузки);
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		НоваяСтрока.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		
	КонецЦикла;
	
	Таблица = РассчитатьДатуОтгрузкиВТаблице(Таблица);
	Для Каждого Строка Из Таблица Цикл
		ТабличнаяЧасть[Строка.НомерСтроки - 1].ДатаОтгрузки = Строка.ДатаОтгрузки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область Автозаказ

// Заполняет и проводит документ созданный обработкой.
// 
// Параметры:
//   МенеджерДокументов - ДокументМенеджер - программный объект, менеджер документа,
//   ДанныеЗаполнения - Структура - Структура содержащая значения реквизитов и табличные части для заполнения документа,
//   Статус - ПеречислениеСсылка.СтатусыВнутреннмихЗаказов, ПеречислениеСсылка.СтатусыЗаказовНаПеремещение,
//            ПеречислениеСсылка.СтатусыЗаказовПоставщикам - статус, в котором необходимо провести документ
//   СообщенияОбОшибках - Структура - содержит возникшие сообщенияоб ошибка записи документа.
//
// Возвращаемое значение:
//   ДокументОбъект - Проведенный заказ, созданный обработкой.
//
Функция ЗаполнитьИПровестиДокумент(МенеджерДокументов, ДанныеЗаполнения, Статус, СообщенияОбОшибках) Экспорт

	ДокументОбъект = МенеджерДокументов.СоздатьДокумент();
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());

	ДокументОбъект.Заполнить(ДанныеЗаполнения);

	Если Не ЗначениеЗаполнено(ДокументОбъект.Статус) Тогда
		ДокументОбъект.Статус = Статус;
	КонецЕсли;

	ЗаписатьДокумент(ДокументОбъект, СообщенияОбОшибках);

	Возврат ДокументОбъект;

КонецФункции

// Добъединяет данные из коллекции и таблицы и помещает их в коллекцию.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция - Коллекция с данными отсортированная по полям ключа,
//  Таблица - ТаблицаЗначений - Содержит данные для дополнения коллекции, отсортированнаяпо полям ключа,
//  СтрокаКлюча - Поля, по которым осуществляется поиск строки в коллекции,
//              для принятия решения об обновлении имеющейся строки коллекции либо добавлении новой,
//  Параметры - Структура - содержит параметры объединения
//
Процедура ОбновитьКоллекциюДаннымиИзТаблицы(Коллекция, Таблица, СтрокаКлюча, Параметры = Неопределено) Экспорт

	Если Параметры = Неопределено Тогда
		Параметры = ОбеспечениеКлиентСервер.ПараметрыОбъединенияТаблиц();
	КонецЕсли;

	Если Параметры.ДобавлятьСтроки Тогда
		Параметры.НовыеСтроки      = Коллекция.СкопироватьКолонки();
		Параметры.ИзмененныеСтроки = Коллекция.СкопироватьКолонки();
	КонецЕсли;

	ПоляКлюча = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаКлюча);
	ИндексПриемник = 0;
	Индекс = 0;
	СравнениеЗначений = Новый СравнениеЗначений();
	Пока Индекс < Таблица.Количество() Цикл

		Строка = Таблица[Индекс];

		Если ИндексПриемник < Коллекция.Количество() Тогда

			СтрокаПриемник = Коллекция[ИндексПриемник];

			РезультатСравненияКлюча = 0;
			Для Каждого Поле Из ПоляКлюча Цикл

				РезультатСравненияПоля = СравнениеЗначений.Сравнить(Строка[Поле], СтрокаПриемник[Поле]);
				Если РезультатСравненияПоля < 0 Тогда
					РезультатСравненияКлюча = -1;
					Прервать;
				ИначеЕсли РезультатСравненияПоля > 0 Тогда
					РезультатСравненияКлюча = 1;
					Прервать;
				КонецЕсли;

			КонецЦикла;

		Иначе
			РезультатСравненияКлюча = 1;
		КонецЕсли;

		Если РезультатСравненияКлюча < 0 Тогда

			Если Параметры.ДобавлятьСтроки Тогда
				НоваяСтрока = Параметры.НовыеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;

			Индекс = Индекс + 1;

		ИначеЕсли РезультатСравненияКлюча = 0 Тогда

			Если Параметры.ДобавлятьСтроки Тогда
				НоваяСтрока = Параметры.ИзмененныеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриемник);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ИначеЕсли Параметры.ОбновлятьСтроки Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, Строка);
				ИндексПриемник = ИндексПриемник + 1;
			КонецЕсли;

			Индекс = Индекс + 1;

		// РезультатСравненияКлюча > 0
		ИначеЕсли ИндексПриемник < Коллекция.Количество() Тогда

			Если Параметры.Умолчания <> Неопределено Тогда

				ЗаполнитьЗначенияСвойств(СтрокаПриемник, Параметры.Умолчания);

				Если Параметры.ДобавлятьСтроки Тогда
					НоваяСтрока = Параметры.ИзмененныеСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;

			КонецЕсли;

			ИндексПриемник = ИндексПриемник + 1;

		Иначе

			Если Параметры.ДобавлятьСтроки Тогда
				НоваяСтрока = Параметры.НовыеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;

			Индекс = Индекс + 1;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

// Добавляет на форму условное оформление элемента (отметку незаполненного), исходя из значения статуса документа
// по следующему правилу: если реквизит не заполнен и статус не входит в некоторый перечень статусов,то пометка выставляется иначе снимается.
//  Параметры:
//   УсловноеОформление - УсловноеОформление - условное офрмление формы.
//   ИмяЭлемента - Строка - имя элемента для условного оформления.
//   ИмяРеквизита - Произвольный - Реквизит формы, связанный с элементом формы.
//   ИмяТЧ - Строка - имя табличной части, если требуется оформлять поле таблицы формы.
//   СтатусЧерновик - Массив - перечень статусов.
//
Процедура УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление, ИмяЭлемента, ИмяРеквизита, ИмяТЧ, СтатусЧерновик) Экспорт
	
	ПутьКСтатусу  = "Объект.Статус";
	ПутьКРеквизиту = "Объект.Товары.ИмяРеквизита";
	ПутьКРеквизиту = СтрЗаменить(ПутьКРеквизиту, "Товары", ИмяТЧ + ".");
	
	Подстановка = ?(ИмяТЧ = "", "", ИмяТЧ + ".");
	ПутьКРеквизиту = "Объект.Товары.ИмяРеквизита";
	ПутьКРеквизиту = СтрЗаменить(ПутьКРеквизиту, "Товары.", Подстановка);
	ПутьКРеквизиту = СтрЗаменить(ПутьКРеквизиту, "ИмяРеквизита", ИмяРеквизита);
	
	// Установка отметки.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	Отбор.ПравоеЗначение = СтатусЧерновик;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Снятие отметки.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение = СтатусЧерновик;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Снятие отметки.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Заполняет служебные реквизиты "ДатаОтгрузкиОбязательна" и "СкладОбязателен" в табличной части документа и в шапке.
//
//  Параметры:
//   Товары - ДанныеФормыКоллекция - таблица формы.
//   Параметры - Структура - структура с полями "ЕстьРаботы" и "ЕстьОтменено" описывающая специфику обрабатываемой таблицы.
//   ДатаОтгрузкиОбязательна - РеквизитФормы - служебный реквизит формы, заполняемый по итогам обработки таблицы формы.
//   СкладОбязателен - РеквизитФормы - служебный реквизит формы, заполняемый по итогам обработки таблицы формы.
//
Процедура ЗаполнитьСлужебныеРеквизиты(Товары, Параметры, ДатаОтгрузкиОбязательна = Неопределено, СкладОбязателен = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения", Параметры);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, Неопределено);
	
	ДатаОтгрузкиОбязательна  = ?(Товары.Итог("ДатаОтгрузкиОбязательна") = 0, 0, 1);
	СкладОбязателен          = ?(Товары.Итог("СкладОбязателен") = 0, 0, 1);
	
КонецПроцедуры

#КонецОбласти

#Область Самообслуживание

// Предназначена для получения текст запроса доступного остатка товаров для отображения в подсистеме самообслуживания партнеров.
// 
// Параметры:
//   ИмяТаблицыТоваров - Строка - Имя временной таблицы с товарами для которых необходимо рассчитать доступный остаток. Временная таблица
//                                имеет следующие поля: "Номенклатура", "Характеристика", "Склад" - товар.
//   ИмяТаблицыРезультата - Строка - Имя временной таблицы, для помещения результата расчета. Временная таблица имеет следующие поля:
//                                   "Номенклатура", "Характеристика", "Склад" - товар, "Период", "Количество" - количество доступного
//                                   товара и дата, в которую это количество будет доступно.
//   ИмяПараметраНачалоДня - Строка - Имя параметра, содержащего начало текущего дня для расчетов.
//
// Возвращаемое значение:
//   Строка - Текст запроса доступного остатка товаров для отображения в подсистеме самообслуживания партнеров.
//
Функция ДоступныеОстаткиСамообслуживание(ИмяТаблицыТоваров, ИмяТаблицыРезультата, ИмяПараметраНачалоДня = "НачалоТекущегоДня") Экспорт
	
	// Доступные остатки вычисляются для товаров по следующей схеме:
	// Суммируется свободный остаток товара на складе и свободное количество в ожидаемых поступлениях на сегодня.
	// Полученное количество доступно сегодня.
	// Если нет свободного остатка товара на складе и нет свободного количества в ожидаемых поступлениях на сегодня,
	// то берется свободное количество ожидаемое на ближайшую будущую дату.
	// Если для товара нет свободного количества на складе и нет свободного количества в ожидаемых поступлениях, то доступно ноль.
	
	ТекстЗапроса =
		"///////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Номенклатура           КАК Номенклатура,
		|	Остатки.Характеристика         КАК Характеристика,
		|	Остатки.Склад                  КАК Склад,
		|
		|	Остатки.ВНаличииОстаток - Остатки.ВРезервеСоСкладаОстаток - Остатки.ВРезервеПодЗаказОстаток КАК Количество
		|
		|ПОМЕСТИТЬ ВтОстаткиНаСкладе
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|		(Номенклатура, Характеристика, Склад) В(
		|			ВЫБРАТЬ
		|				Таблица.Номенклатура   КАК Номенклатура,
		|				Таблица.Характеристика КАК Характеристика,
		|				Таблица.Склад          КАК Склад
		|			ИЗ
		|				ВтТаблицаТоваров КАК Таблица)) КАК Остатки
		|	
		|ГДЕ
		|	Остатки.ВНаличииОстаток - Остатки.ВРезервеСоСкладаОстаток - Остатки.ВРезервеПодЗаказОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|///////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикПоступления.Номенклатура           КАК Номенклатура,
		|	ГрафикПоступления.Характеристика         КАК Характеристика,
		|	ГрафикПоступления.Склад                  КАК Склад,
		|	
		|	МИНИМУМ(ГрафикПоступления.ДатаДоступности) КАК ДатаДоступности
		|	
		|ПОМЕСТИТЬ ВтТаблицаДатыДоступностиТоваров
		|ИЗ
		|	ВтТаблицаТоваров КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ГрафикПоступления
		|		ПО ГрафикПоступления.Склад          = Таблица.Склад
		|		 И ГрафикПоступления.Номенклатура   = Таблица.Номенклатура
		|		 И ГрафикПоступления.Характеристика = Таблица.Характеристика
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиНаСкладе КАК Остатки
		|		ПО ГрафикПоступления.Склад          = Таблица.Склад
		|		 И ГрафикПоступления.Номенклатура   = Таблица.Номенклатура
		|		 И ГрафикПоступления.Характеристика = Таблица.Характеристика
		|	
		|ГДЕ
		|	ГрафикПоступления.ДатаДоступности <= &НачалоТекущегоДня
		|	ИЛИ ГрафикПоступления.ДатаДоступности > &НачалоТекущегоДня
		|		И Остатки.Склад ЕСТЬ NULL
		|	
		|СГРУППИРОВАТЬ ПО
		|	ГрафикПоступления.Номенклатура, ГрафикПоступления.Характеристика, ГрафикПоступления.Склад
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, ДатаДоступности
		|;
		|
		|/////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Номенклатура   КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад          КАК Склад,
		|	
		|	Набор.Период            КАК Период,
		|	СУММА(Набор.Количество) КАК Количество
		|	
		|ПОМЕСТИТЬ ВтДоступныеОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура   КАК Номенклатура,
		|		Таблица.Характеристика КАК Характеристика,
		|		Таблица.Склад          КАК Склад,
		|		
		|		Таблица.ДатаДоступности КАК Период,
		|		Доступно.Количество     КАК Количество
		|		
		|	ИЗ
		|		ВтТаблицаДатыДоступностиТоваров КАК Таблица
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Доступно
		|			ПО Доступно.Склад           = Таблица.Склад
		|			 И Доступно.Номенклатура    = Таблица.Номенклатура
		|			 И Доступно.Характеристика  = Таблица.Характеристика
		|			 И Доступно.ДатаДоступности = Таблица.ДатаДоступности
		|		
		|	ГДЕ
		|		НЕ Доступно.Склад ЕСТЬ NULL
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		Остатки.Номенклатура   КАК Номенклатура,
		|		Остатки.Характеристика КАК Характеристика,
		|		Остатки.Склад          КАК Склад,
		|		
		|		&НачалоТекущегоДня      КАК Период,
		|		Остатки.Количество      КАК Количество
		|		
		|	ИЗ
		|		ВтОстаткиНаСкладе КАК Остатки) КАК Набор
		|	
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад, Набор.Период
		|	
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтДоступныеОстатки", ИмяТаблицыРезультата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтТаблицаТоваров",   ИмяТаблицыТоваров);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачалоТекущегоДня",  ИмяПараметраНачалоДня);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Предназначена для разбиения таблицы значений на несколько таблиц по комбинациям значений в ключевых полях таблицы.
//
// Параметры:
//   Таблица            - ТаблицаЗначений      - таблица, которю необходимо разбить на несколько таблиц.
//   ПоляКлюча          - Строка               - имена колонок таблицы, образующие ключ строки таблицы.
//   ПоляКлючаУдаляемые - Строка, Неопределено - имена колокнок из состава ключа, которые необходимо удалить
//                                               из полученных в результате разбиения таблиц.
//
// Возвращаемое значение:
//   Массив - Массив, содержащий данные сформированных таблиц. Элементом массива является структура с полями:
//    * Ключ    - Структура       - структура, с полями, имена которых переданы в параметре "ПоляКлюча".
//                                  Содержит комбинацию значений полей, таблицы переданной параметром "Таблица".
//    * Таблица - ТаблицаЗначений - таблица, с полями совпадающими с полями таблицы переданной в параметре "Таблица",
//                                  не содержит полей, имена которых переданны в параметре "ПоляКлючаУдаляемые".
//                                  Содержит копию строк таблицы переданной параметром "Таблица", отобранных по значениям полей,
//                                  перечисленным в структуре "Ключ".
//
Функция РазбитьТаблицуПоЗначениюКлюча(Таблица, ПоляКлюча, ПоляКлючаУдаляемые = Неопределено) Экспорт

	Ключ = Новый Структура(ПоляКлюча);
	ПоляДляУдаления = Новый Структура(?(ПоляКлючаУдаляемые = Неопределено, ПоляКлюча, ПоляКлючаУдаляемые));

	ТаблицаБезКлюча = Таблица.СкопироватьКолонки();
	Для Каждого Свойство Из ПоляДляУдаления Цикл
		ТаблицаБезКлюча.Колонки.Удалить(Свойство.Ключ);
	КонецЦикла;

	МассивТаблиц = Новый Массив();

	Для Счетчик = 0 По Таблица.Количество() - 1 Цикл

		ДанныеЗаполнения = Таблица[Счетчик];
		Если ОбеспечениеКлиентСервер.ИзменилсяКлюч(Ключ, ДанныеЗаполнения) Тогда

			Ключ = Новый Структура(ПоляКлюча);
			ТаблицаБезКлюча = ТаблицаБезКлюча.СкопироватьКолонки();
			МассивТаблиц.Добавить(Новый Структура("Ключ, Таблица", Ключ, ТаблицаБезКлюча));
			ЗаполнитьЗначенияСвойств(Ключ, ДанныеЗаполнения);

		КонецЕсли;

		НоваяСтрока = ТаблицаБезКлюча.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

	КонецЦикла;

	Возврат МассивТаблиц;

КонецФункции

// Формирует пустую таблицу с заданными колонками.
// 
// Параметры:
//   Поля - Строка    - строка, содержащая имена колонок.
//        - Структура - структура, ключ которой содержит имя колонки, значение - тип колонки.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с колонками описание которых получено из параметра "Поля".
//
Функция ТаблицаПоОписаниюПолей(Поля) Экспорт

	Таблица = Новый ТаблицаЗначений();

	Структура = Поля;
	Если ТипЗнч(Поля) = Тип("Строка") Тогда

		Структура = Новый Структура(Поля);

	КонецЕсли;

	Для Каждого Поле Из Структура Цикл

		Таблица.Колонки.Добавить(Поле.Ключ, Поле.Значение);

	КонецЦикла;

	Возврат Таблица;

КонецФункции

// Переносит данные из структуры в таблицу значений.
// 
// Параметры:
//  Структура - Структура - структура, содержащая данные для переноса.
//        - Структура - структура, ключ которой содержит имя колонки, значение - тип колонки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица колонки которой соотвествуют ключам структуры. Таблица содержит одну строку, заполненную по данным структуры.
//
Функция ТаблицаЗначенийИзСтруктуры(Структура) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	Для Каждого Свойство Из Структура Цикл
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(Свойство.Значение));
		ТаблицаЗначений.Колонки.Добавить(Свойство.Ключ, Новый ОписаниеТипов(МассивТипов));
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), Структура);
	Возврат ТаблицаЗначений;
	
КонецФункции

// Рассчитывает дату отгрузки для таблицы позиций.
// 
// Параметры:
//  Таблица - ТаблицаЗначений - Таблица позиций, для которых нужно рассчитать даты отгрузки. Перечень колонок:
//   * Номенклатура         - СправочникСсылка.Номенклатура               - номенклатурная позиция.
//   * Характеристика       - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатурной позиции.
//   * Склад                - СправочникСсылка.Склады                     - склад, обязателен для товаров и тары, так как плановые даты отгрузи настраиваются по складам.
//   * ЖелаемаяДатаОтгрузки - Дата                                        - желаемая дата отгрузки, используется в расчетах, если плановая дата отгрузки раньше желаемой.
//   * НомерСтроки          - Число - Номер сроки в таблице. Если таблица из единственной строки, то поле не обязательное.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица рассчитанных дат отгрузки. Перечень колонок:
//   * НомерСтроки  - Число - Номер сроки в исходной таблице.
//   * ДатаОтгрузки - Дата  - Дата отгрузки, рассчитанная.
//
Функция РассчитатьДатуОтгрузкиВТаблице(Таблица) Экспорт
	
	ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ");
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&НомерСтроки           КАК НомерСтроки,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	ВЫБОР КОГДА Таблица.ЖелаемаяДатаОтгрузки > &НачалоТекущегоДня ТОГДА
		|				Таблица.ЖелаемаяДатаОтгрузки
		|			ИНАЧЕ
		|				&НачалоТекущегоДня
		|		КОНЕЦ              КАК ЖелаемаяДатаОтгрузки
		|	
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|/////////////////////////
		|"
		+ СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "")
		+ Справочники.СпособыОбеспеченияПотребностей.ТекстЗапросаДатПлановойПоставки()
		+ "ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	
		|	ВЫБОР КОГДА ЕСТЬNULL(ДатыПлановойПоставки.Дата, ДАТАВРЕМЯ(1,1,1)) > Товары.ЖелаемаяДатаОтгрузки ТОГДА
		|				ДатыПлановойПоставки.Дата
		|			ИНАЧЕ
		|				Товары.ЖелаемаяДатаОтгрузки
		|		КОНЕЦ          КАК ДатаОтгрузки
		|ИЗ
		|	ВтТовары КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК СпособыОбеспечения
		|		ПО СпособыОбеспечения.Номенклатура   = Товары.Номенклатура
		|		 И СпособыОбеспечения.Характеристика = Товары.Характеристика
		|		 И СпособыОбеспечения.Склад          = Товары.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыПлановойПоставки КАК ДатыПлановойПоставки
		|		ПО ДатыПлановойПоставки.СпособОбеспечения  = СпособыОбеспечения.СпособОбеспеченияПотребностей";
	
	Подстановка = "1";
	Если Таблица.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
		Подстановка = "Таблица.НомерСтроки";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НомерСтроки", Подстановка);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

// Структура параметров для вызова метода ОбеспечениеСервер.ТаблицаОстатковКЗаказу.
// 
// Возвращаемое значение:
//   - Структура -
//    * ПолучатьТовары - Булево - признак получения товаров.
//    * ПолучатьУслуги - Булево - признак получения услуг.
//    * ПолучатьРаботы - Булево - признак получения работ.
//    * Отбор          - Произвольный - отбор, реализованный в методе
//                                      ВременныеТаблицыТоваровЗаказа конкретного документа.
//
Функция ПараметрыТаблицыОстатковПоЗаказу() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ПолучатьТовары", Истина);
	Структура.Вставить("ПолучатьУслуги", Истина);
	Структура.Вставить("ПолучатьРаботы", Истина);
	Структура.Вставить("Отбор",          Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Получает таблицу остатков к заказу с учетом введенных на основании документов и состояния обеспечения потребности.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаПроизводство, ДокументСсылка.ЗаказНаПеремещение,
//		ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаРемонт, ДокументСсылка.ЗаказНаСборкуРазборку,
//		ДокументСсылка.ВозвратТоваровОтКлиента - документ-основание
//	Параметры - Структура - Параметры функции, получаемые методом ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица остатков
//
Функция ТаблицаОстатковКЗаказу(ДокументСсылка, Параметры) Экспорт
	
	ПолучатьТовары = Параметры.ПолучатьТовары;
	ПолучатьУслуги = Параметры.ПолучатьУслуги;
	ПолучатьРаботы = Параметры.ПолучатьРаботы;
	Отбор          = Параметры.Отбор;
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		Документы[ИмяДокумента].ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, ДокументСсылка, Отбор);
	Иначе
		Документы[ИмяДокумента].ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, ДокументСсылка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбеспечениеТоварами.Номенклатура КАК Номенклатура,
	|	ОбеспечениеТоварами.Характеристика КАК Характеристика,
	|	ОбеспечениеТоварами.Склад КАК Склад,
	|	ОбеспечениеТоварами.Назначение КАК Назначение,
	|	ОбеспечениеТоварами.КЗаказуОстаток КАК КЗаказу
	|ПОМЕСТИТЬ Потребность
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад, Назначение) В
	|				(ВЫБРАТЬ
	|					Т.Номенклатура,
	|					Т.Характеристика,
	|					Т.Склад,
	|					Т.Назначение
	|				ИЗ
	|					НоменклатураЗаказаОбособленная КАК Т)) КАК ОбеспечениеТоварами
	|ГДЕ
	|	ОбеспечениеТоварами.КЗаказуОстаток > 0
	|	И &ПолучатьТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбеспечениеРаботами.Номенклатура,
	|	ОбеспечениеРаботами.Характеристика,
	|	ОбеспечениеРаботами.Подразделение,
	|	ОбеспечениеРаботами.Назначение,
	|	ОбеспечениеРаботами.КОбеспечениюОстаток
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Подразделение, Назначение) В
	|				(ВЫБРАТЬ
	|					Т.Номенклатура,
	|					Т.Характеристика,
	|					Т.Подразделение,
	|					Т.Назначение
	|				ИЗ
	|					НоменклатураЗаказаОбособленная КАК Т)) КАК ОбеспечениеРаботами
	|ГДЕ
	|	ОбеспечениеРаботами.КОбеспечениюОстаток > 0
	|	И &ПолучатьРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение,
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.НомерСтроки КАК НомерСтроки,
	|	Таб.Номенклатура КАК Номенклатура,
	|	Таб.Характеристика КАК Характеристика,
	|	Таб.Склад КАК Склад,
	|	Таб.Подразделение КАК Подразделение,
	|	Таб.Назначение КАК Назначение,
	|	Таб.Упаковка КАК Упаковка,
	|	Таб.Количество КАК Количество
	|ПОМЕСТИТЬ ВТОбособленные
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика,
	|		Т.Склад КАК Склад,
	|		Т.Подразделение КАК Подразделение,
	|		Т.Назначение КАК Назначение,
	|		ВЫБОР
	|			КОГДА Т.Заказано > ВтКЗаказу.КЗаказу
	|				ТОГДА ВтКЗаказу.КЗаказу
	|			ИНАЧЕ Т.Заказано
	|		КОНЕЦ КАК Количество,
	|		Т.Упаковка КАК Упаковка,
	|		Т.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		НоменклатураЗаказаОбособленная КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность КАК ВтКЗаказу
	|			ПО Т.Номенклатура = ВтКЗаказу.Номенклатура
	|				И Т.Характеристика = ВтКЗаказу.Характеристика
	|				И Т.Склад = ВтКЗаказу.Склад
	|				И Т.Назначение = ВтКЗаказу.Назначение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		НЕОПРЕДЕЛЕНО,
	|		Т.Подразделение,
	|		Т.Назначение,
	|		ВЫБОР
	|			КОГДА Т.Заказано > ВтКЗаказу.КЗаказу
	|				ТОГДА ВтКЗаказу.КЗаказу
	|			ИНАЧЕ Т.Заказано
	|		КОНЕЦ,
	|		Т.Упаковка,
	|		Т.НомерСтроки
	|	ИЗ
	|		НоменклатураЗаказаОбособленная КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность КАК ВтКЗаказу
	|			ПО Т.Номенклатура = ВтКЗаказу.Номенклатура
	|				И Т.Характеристика = ВтКЗаказу.Характеристика
	|				И Т.Подразделение = ВтКЗаказу.Склад
	|				И Т.Назначение = ВтКЗаказу.Назначение) КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураЗаказаНеОбособленная.Номенклатура,
	|	НоменклатураЗаказаНеОбособленная.Характеристика,
	|	НоменклатураЗаказаНеОбособленная.Заказано КАК Количество,
	|	НоменклатураЗаказаНеОбособленная.Упаковка,
	|	НоменклатураЗаказаНеОбособленная.Склад,
	|	НоменклатураЗаказаНеОбособленная.Подразделение,
	|	НоменклатураЗаказаНеОбособленная.НомерСтроки
	|ПОМЕСТИТЬ ВТНеОбособленные
	|ИЗ
	|	НоменклатураЗаказаНеОбособленная КАК НоменклатураЗаказаНеОбособленная
	|ГДЕ
	|	(НоменклатураЗаказаНеОбособленная.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				И &ПолучатьТовары
	|			ИЛИ НоменклатураЗаказаНеОбособленная.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				И &ПолучатьУслуги
	|			ИЛИ НоменклатураЗаказаНеОбособленная.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|				И &ПолучатьРаботы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбособленные.НомерСтроки КАК НомерСтроки,
	|	ВТОбособленные.Номенклатура КАК Номенклатура,
	|	ВТОбособленные.Характеристика КАК Характеристика,
	|	ВТОбособленные.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВТОбособленные.Назначение КАК Назначение,
	|	ВТОбособленные.Упаковка КАК Упаковка,
	|	ВТОбособленные.Количество КАК Количество,
	|	ВТОбособленные.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК КоличествоУпаковок,
	|	ВТОбособленные.Склад КАК Склад,
	|	ВТОбособленные.Подразделение КАК Подразделение,
	|	ВЫБОР КОГДА ВТОбособленные.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК СписатьНаРасходы
	|ИЗ
	|	ВТОбособленные КАК ВТОбособленные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТНеОбособленные.НомерСтроки,
	|	ВТНеОбособленные.Номенклатура,
	|	ВТНеОбособленные.Характеристика,
	|	ВТНеОбособленные.Номенклатура.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ВТНеОбособленные.Упаковка,
	|	ВТНеОбособленные.Количество,
	|	ВТНеОбособленные.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ВТНеОбособленные.Склад,
	|	ВТНеОбособленные.Подразделение,
	|	ВЫБОР КОГДА ВТНеОбособленные.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ВТНеОбособленные КАК ВТНеОбособленные
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВТОбособленные.Упаковка",
		"ВТОбособленные.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВТНеОбособленные.Упаковка",
		"ВТНеОбособленные.Номенклатура"));
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПолучатьТовары", ПолучатьТовары);
	Запрос.УстановитьПараметр("ПолучатьУслуги", ПолучатьУслуги);
	Запрос.УстановитьПараметр("ПолучатьРаботы", ПолучатьРаботы);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПреобразованиеСтруктурДанных

//Создает таблицу и копирует в нее данные, необходимые механизмам обеспечения из выделенных строк таблицы формы.
//
//Параметры:
// ТаблицаТовары - ДанныеФормыКоллекция - таблица формы для копирования.
// ВыделенныеСтроки - Массив - идентификаторы выделенных строк.
// Объект - ДанныеФормыСтруктура - необходим для заполнения данных, отсутствующих в строках таблицы.
// ПутиКДанным - Соотвествие - ключ - имя по умолчанию, значение - имя реквизита в объекте или таблице,
//                                    отличное от имени по умолчанию.
//
//Возвращаемое значение:
// Таблица значений - таблица содержащая данные из выделенных строк с именами колонок по умолчанию.
//
Функция ВыделенныеСтрокиВТаблицу(ТаблицаТовары, ВыделенныеСтроки, Объект, ПутиКДанным)
	
	Хранилище = СоздатьХранилищеЗаполнитьИзОбъекта(Объект, ПутиКДанным);
	Хранилище.Вставить("Упаковка");
	Таблица = ТаблицаПоОписаниюПолей(ПутиКДаннымПоУмолчанию());
	Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаТовары = ТаблицаТовары.НайтиПоИдентификатору(Идентификатор);
		ЗаполнитьЗначенияСвойств(Хранилище, СтрокаТовары);
		
		Если Хранилище.Отменено = Истина Или Хранилище.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ОбеспечениеКлиентСервер.ЗаполнитьЗначенияСвойствСРазличемИмен(НоваяСтрока, Хранилище, ПутиКДанным);
		
		НоваяСтрока.Идентификатор = СтрокаТовары.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция СтрокаУдовлетворяетОтбору(Строка, Отбор)

	Если Отбор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого Свойство Из Отбор Цикл

		Если Строка[Свойство.Ключ] <> Свойство.Значение Тогда
			СтрокаУдовлетворяетОтбору = Ложь;
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

Процедура ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		АдресТаблицыПодобраноРанее = ПоместитьВоВременноеХранилище(Результат.ТаблицаНевыделенныеСтроки, УникальныйИдентификатор);
		Результат.Вставить("АдресТаблицыПодобраноРанее", АдресТаблицыПодобраноРанее);
		Результат.Удалить("ТаблицаНевыделенныеСтроки");
	КонецЕсли;
	
КонецПроцедуры

// Копирует данные из таблицы в несколько таблиц, группируя данные по типам номенклатуры и вариантам обеспечения.
// 
// Параметры:
//   Источник - ТаблицаЗначений - таблица для копирования.
//   Приемник - Структура - структура, в которую помещены скопированные данные.
//
Процедура РазложитьПоВариантамОбеспечения(Приемник, Источник, ЗапонятьКоэффициентУпаковки = Ложь)
	
	Если ЗапонятьКоэффициентУпаковки Тогда
		КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(Источник);
	КонецЕсли;
	
	ИменаСвойств = Новый Соответствие();
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно, "ОтгрузитьОбособленно");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.Обособленно,          "Обособленно");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.Отгрузить,            "Отгрузить");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.СоСклада,             "Резервировать");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.ИзЗаказов,            "РезервироватьКСроку");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.Требуется,            "Обеспечить");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.НеТребуется,          "НеОбеспечивать");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.ПустаяСсылка(),       "НеОбеспечивать");
	
	Для Каждого Строка Из Источник Цикл
		
		Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			Таблица = Приемник.Услуги.ВсеВариантыОбеспечения;
			
		ИначеЕсли Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			
			Таблица = Приемник.Работы[ИменаСвойств.Получить(Строка.ВариантОбеспечения)];
			
		ИначеЕсли Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			
			КлючТаблицы = ИменаСвойств.Получить(Строка.ВариантОбеспечения);
			
			// Вариант обеспечения отсутствует для поступления товаров
			КлючТаблицы = ?(КлючТаблицы = Неопределено, "Отгрузить", КлючТаблицы);
			
			Таблица = Приемник.Товары[КлючТаблицы];
			
		Иначе
			
			Таблица = Приемник.Тара[ИменаСвойств.Получить(Строка.ВариантОбеспечения)];
			
		КонецЕсли;
		
		СтрокаПриемника = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, Строка);
		
		СтрокаПриемника.КоэффициентУпаковки = 0;
		
		Если ЗапонятьКоэффициентУпаковки Тогда
			Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
				СтрокаПриемника.КоэффициентУпаковки = КоэффициентыУпаковок[Строка.Номенклатура][Строка.Упаковка];
			Иначе
				СтрокаПриемника.КоэффициентУпаковки = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмыОбеспечения

Функция ТаблицаОбеспечения(Потребности, ВариантыОбеспечения, НевыделенныеСтроки = Неопределено, ПараметрыЗаполнения)
	
	ДопустимыеВарианты = ПараметрыЗаполнения.ПереченьВариантов;
	ИзменятьОбособление = ПараметрыЗаполнения.ИзменятьОбособление;
	
	Если НевыделенныеСтроки = Неопределено Тогда
		НевыделенныеСтроки = ТаблицыПотребностейПоВариантамОбеспечения();
	КонецЕсли;
	
	Результат = ТаблицаПотребностейБезАналитики();
	
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Результат.Колонки.Добавить("Отгружено", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0));
	Результат.Колонки.Добавить("Приоритет", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0));
	
	Результат.Колонки.Добавить("ПриоритетТипаОбеспечения", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Результат.Колонки.Добавить("СкладНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Шаги = ВыполнитьСписание(Потребности.ПереченьТаблиц, ВариантыОбеспечения.ОформитьПоНакладным, "КодСтроки");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	
	Для Каждого Таблица Из Потребности.ПереченьТаблиц Цикл
		Таблица.Сортировать("ДатаОтгрузки УБЫВ, НомерСтроки УБЫВ");
	КонецЦикла;
	
	Шаги = ШагиСписанияОформитьПоОрдерам(Потребности.Товары, ВариантыОбеспечения.ОформитьПоОрдерам);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	
	Результат.ЗаполнитьЗначения(1, "Отгружено");
	
	Шаги = ШагиСписанияОбособленныхТоваров(Потребности.Товары, ВариантыОбеспечения, ДопустимыеВарианты, НевыделенныеСтроки.Товары.Обособленно);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	Шаги.Колонки.Добавить("Приоритет", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0));
	Шаги.ЗаполнитьЗначения(1, "Приоритет");
	
	Если ЭтоСписаниеСУчетомОстатков(ДопустимыеВарианты) Тогда
		
		Шаги = ШагиСписанияОстатковТоваров(Потребности.Товары, ВариантыОбеспечения, ДопустимыеВарианты, ИзменятьОбособление);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
		
		Шаги = ШагиЗаполненияДатыПлановойПоставкиТоваров(Потребности.Товары, ВариантыОбеспечения.ПлановыеПоставки, ДопустимыеВарианты);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
		
	КонецЕсли;
	
	Шаги = ШагиЗаполненияБезУчетаОстатковТоваров(Потребности.Товары, ДопустимыеВарианты);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	
	Шаги = ШагиСписанияОбособленныхТоваров(Потребности.Тара, ВариантыОбеспечения, ДопустимыеВарианты, НевыделенныеСтроки.Товары.Обособленно);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	Шаги.Колонки.Добавить("Приоритет", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0));
	Шаги.ЗаполнитьЗначения(1, "Приоритет");
	
	Если ЭтоСписаниеСУчетомОстатков(ДопустимыеВарианты) Тогда
		
		Шаги = ШагиСписанияОстатковТоваров(Потребности.Тара, ВариантыОбеспечения, ДопустимыеВарианты);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
		
	КонецЕсли;
	
	ДопустимыеВариантыДляТары = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеВариантыДляТары, ДопустимыеВарианты);
	
	//Подмена варианта "Обособленно" для тары на "Требуется".
	Индекс = ДопустимыеВариантыДляТары.Найти(Перечисления.ВариантыОбеспечения.Обособленно);
	Если Индекс <> Неопределено Тогда
		ДопустимыеВариантыДляТары.Удалить(Индекс);
		Индекс = ДопустимыеВариантыДляТары.Найти(Перечисления.ВариантыОбеспечения.Требуется);
		Если Индекс = Неопределено Тогда
			ДопустимыеВариантыДляТары.Добавить(Перечисления.ВариантыОбеспечения.Требуется);
		КонецЕсли;
	КонецЕсли;
	//Удаление варианта "Отгрузить обособленно" для тары.
	Индекс = ДопустимыеВариантыДляТары.Найти(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
	Если Индекс <> Неопределено Тогда
		ДопустимыеВариантыДляТары.Удалить(Индекс);
	КонецЕсли;
	
	Если ЭтоСписаниеСУчетомОстатков(ДопустимыеВариантыДляТары) Тогда
		
		Шаги = ШагиЗаполненияДатыПлановойПоставкиТоваров(Потребности.Тара, ВариантыОбеспечения.ПлановыеПоставки, ДопустимыеВариантыДляТары);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
		
	КонецЕсли;
	
	Шаги = ШагиЗаполненияБезУчетаОстатковТоваров(Потребности.Тара, ДопустимыеВариантыДляТары);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	
	Шаги = ШагиСписанияОбособленныхРабот(Потребности.Работы, ВариантыОбеспечения, ДопустимыеВарианты, НевыделенныеСтроки.Работы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	Шаги.Колонки.Добавить("Приоритет", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0));
	Шаги.ЗаполнитьЗначения(1, "Приоритет");
	
	Шаги = ШагиЗаполненияДатыПлановойПоставкиРабот(Потребности.Работы, ВариантыОбеспечения.ПлановыеПоставки, ДопустимыеВарианты);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	
	Шаги = ШагиЗаполненияБезУчетаОстатковРабот(Потребности.Работы, ДопустимыеВарианты);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	
	Шаги = ШагиЗаполненияБезУчетаОстатковУслуг(Потребности.Услуги.ВсеВариантыОбеспечения, ДопустимыеВарианты);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаги, Результат);
	
	Массив = Результат.НайтиСтроки(Новый Структура("СтрокаНеВыделена", Истина));
	Для Каждого Строка Из Массив Цикл
		Результат.Удалить(Строка);
	КонецЦикла;
	
	Результат.Свернуть("Идентификатор, Склад, ВариантОбеспечения, Приоритет, ДатаОтгрузки, ПриоритетТипаОбеспечения, СкладНаименование", "Количество, Отгружено");
	Результат.Сортировать("Идентификатор, Отгружено УБЫВ, Приоритет УБЫВ, ВариантОбеспечения, ДатаОтгрузки, ПриоритетТипаОбеспечения, СкладНаименование, Склад", Новый СравнениеЗначений());
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицыПотребностейПоВариантамОбеспечения() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ПереченьТаблиц", Новый Массив());

	Товары = Новый Структура();
	Товары.Вставить("ОтгрузитьОбособленно", ТаблицаПотребностей());
	Товары.Вставить("Обособленно",          ТаблицаПотребностей());
	Товары.Вставить("Отгрузить",            ТаблицаПотребностей());
	Товары.Вставить("Резервировать",        ТаблицаПотребностей());
	Товары.Вставить("РезервироватьКСроку",  ТаблицаПотребностей());
	Товары.Вставить("Обеспечить",           ТаблицаПотребностей());
	Товары.Вставить("НеОбеспечивать",       ТаблицаПотребностей());

	Для Каждого ВариантОбеспечения Из Товары Цикл
		Результат.ПереченьТаблиц.Добавить(Товары[ВариантОбеспечения.Ключ]);
	КонецЦикла;

	Тара = Новый Структура();
	Тара.Вставить("ОтгрузитьОбособленно", ТаблицаПотребностей()); //для назначений до УП 2.0.9
	Тара.Вставить("Обособленно",          ТаблицаПотребностей()); //для назначений до УП 2.0.9
	Тара.Вставить("Отгрузить",            ТаблицаПотребностей());
	Тара.Вставить("Резервировать",        ТаблицаПотребностей());
	Тара.Вставить("РезервироватьКСроку",  ТаблицаПотребностей());
	Тара.Вставить("Обеспечить",           ТаблицаПотребностей());
	Тара.Вставить("НеОбеспечивать",       ТаблицаПотребностей());

	Для Каждого ВариантОбеспечения Из Тара Цикл
		Результат.ПереченьТаблиц.Добавить(Тара[ВариантОбеспечения.Ключ]);
	КонецЦикла;

	Работы = Новый Структура();
	Работы.Вставить("ОтгрузитьОбособленно", ТаблицаПотребностей());
	Работы.Вставить("Обособленно",          ТаблицаПотребностей());
	Работы.Вставить("Отгрузить",            ТаблицаПотребностей());
	Работы.Вставить("НеОбеспечивать",       ТаблицаПотребностей());

	Для Каждого ВариантОбеспечения Из Работы Цикл
		Результат.ПереченьТаблиц.Добавить(Работы[ВариантОбеспечения.Ключ]);
	КонецЦикла;

	Услуги = Новый Структура("ВсеВариантыОбеспечения", ТаблицаПотребностей());

	Результат.ПереченьТаблиц.Добавить(Услуги.ВсеВариантыОбеспечения);

	Результат.Вставить("Товары", Товары);
	Результат.Вставить("Тара",   Тара);
	Результат.Вставить("Работы", Работы);
	Результат.Вставить("Услуги", Услуги);

	Возврат Результат;

КонецФункции

Процедура ПрименитьПараметрыДокумента(Параметры, СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения)
	
	СтатусКВыполнению    = Истина;
	ГруппаСкладов        = Неопределено;
	МенеджерРегистра     = Неопределено;
	ТаблицаДляПроведения = Неопределено;
	
	Если Параметры <> Неопределено Тогда

		Если Параметры.Свойство("СтатусКВыполнению") Тогда
			СтатусКВыполнению = Параметры.СтатусКВыполнению;
		КонецЕсли;

		Если Параметры.Свойство("ГруппаСкладов") Тогда
			ГруппаСкладов = Параметры.ГруппаСкладов;
		КонецЕсли;

		Если Параметры.Свойство("МенеджерРегистра") Тогда
			МенеджерРегистра = Параметры.МенеджерРегистра;
		КонецЕсли;

		Если Параметры.Свойство("ТаблицаДляПроведения") Тогда
			ТаблицаДляПроведения = Параметры.ТаблицаДляПроведения;
		КонецЕсли;

		Если Параметры.Свойство("ИмяМенеджераРегистра") Тогда
			МенеджерРегистра = РегистрыНакопления[Параметры.ИмяМенеджераРегистра];
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Получает таблицу потребностей с нужными колонками без аналитики.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица потребностей без аналитики.
//
Функция ТаблицаПотребностейБезАналитики()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Идентификатор",      ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0));
	
	Таблица.Колонки.Добавить("Склад",               Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("ВариантОбеспечения",  Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Таблица.Колонки.Добавить("ДатаОтгрузки",        ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	Таблица.Колонки.Добавить("ДатаОтгрузкиРабот",   ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	Таблица.Колонки.Добавить("Количество",          ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Таблица.Колонки.Добавить("СтрокаНеВыделена",    Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

// Структура для получения остатков и оборотов регистров обеспечения.
// Используется для получения доступных остатков по ограниченным позициям номенклатуры.
// 
// Возвращаемое значение:
//   Структура - структура с полями:
//    * Товары             - ТаблицаЗначений - таблица с колонками см. ОбеспечениеКлиентСервер.КлючиПотребностей.
//    * Работы             - ТаблицаЗначений - таблица с колонками см. ОбеспечениеКлиентСервер.КлючиПотребностей.
//    * ТоварыОбособленные - ТаблицаЗначений - таблица с колонками см. ОбеспечениеКлиентСервер.КлючиПотребностей.
//
Функция СтруктураОтбораОстатков()

	Отбор = Новый Структура();
	Таблица = ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("Товар"));
	Отбор.Вставить("Товары", Таблица);
	Таблица = ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("Работа"));
	Отбор.Вставить("Работы", Таблица);
	Таблица = ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("ТоварОбособленный"));
	Отбор.Вставить("ТоварыОбособленные", Таблица);

	Возврат Отбор;

КонецФункции

Процедура ДобавитьАналитики(Приемник, Источник, МассивСкладов = Неопределено)

	Для Каждого Строка Из Источник Цикл

		ДобавитьАналитику(Приемник, Строка, МассивСкладов);

	КонецЦикла;

КонецПроцедуры

Функция ВариантыОбеспечения(Отбор, Корректировка)

	ДоступныеОстатки = ДоступныеОстатки(Отбор, Корректировка);
	РассчитатьПриращенияДоступныхОстатков(ДоступныеОстатки);

	ТаблицаВНаличииПодНазначение  = ДоступныеОстатки.ТоварыОбособленные.СкопироватьКолонки();
	ТаблицаОжидаетсяПодНазначение = ДоступныеОстатки.ТоварыОбособленные.СкопироватьКолонки();

	Для Каждого Строка Из ДоступныеОстатки.ТоварыОбособленные Цикл

		Таблица = ?(ЗначениеЗаполнено(Строка.ДатаДоступности),
			ТаблицаОжидаетсяПодНазначение, ТаблицаВНаличииПодНазначение);
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

	КонецЦикла;

	ТаблицаВНаличииПодНазначение.Индексы.Добавить("Номенклатура, Характеристика, Склад, Назначение");
	ТаблицаОжидаетсяПодНазначение.Индексы.Добавить("Номенклатура, Характеристика, Склад, Назначение");

	ТаблицаВНаличии  = ДоступныеОстатки.Товары.СкопироватьКолонки();
	ТаблицаОжидается = ДоступныеОстатки.Товары.СкопироватьКолонки();

	Для Каждого Строка Из ДоступныеОстатки.Товары Цикл

		Таблица = ?(ЗначениеЗаполнено(Строка.ДатаДоступности), ТаблицаОжидается, ТаблицаВНаличии);
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

	КонецЦикла;

	ТаблицаВНаличии.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	ТаблицаОжидается.Индексы.Добавить("Номенклатура, Характеристика, Склад");

	ПлановыеПоставки = ПлановыеПоставки(Отбор);
	ПлановыеПоставки.Индексы.Добавить("Номенклатура, Характеристика, Склад");

	ВариантыОбеспечения = Новый Структура();
	ВариантыОбеспечения.Вставить("ВНаличииПодНазначение",  ТаблицаВНаличииПодНазначение);
	ВариантыОбеспечения.Вставить("ОжидаетсяПодНазначение", ТаблицаОжидаетсяПодНазначение);
	ВариантыОбеспечения.Вставить("ОжидаетсяРаботы",        ДоступныеОстатки.Работы);
	ВариантыОбеспечения.Вставить("ВНаличии",               ТаблицаВНаличии);
	ВариантыОбеспечения.Вставить("Ожидается",              ТаблицаОжидается);
	ВариантыОбеспечения.Вставить("ПлановыеПоставки",       ПлановыеПоставки);

	Возврат ВариантыОбеспечения;

КонецФункции

Функция ОстаткиИОбороты(Отбор, Корректировка)

	//Загрузка временных таблиц отборов и корректировки регистров обеспечения.
	Запрос = Новый Запрос();

	КлючТовары =             "Номенклатура, Характеристика, Склад";
	КлючТоварыОбособленные = "Номенклатура, Характеристика, Назначение, Склад";
	КлючРаботы =             "Номенклатура, Характеристика, Назначение, Подразделение";
	
	Текст = ВременнаяТаблицаИзТаблицыЗначений(Отбор.Товары,               "Товары",             КлючТовары)
	        + ВременнаяТаблицаИзТаблицыЗначений(Отбор.ТоварыОбособленные, "ТоварыОбособленные", КлючТоварыОбособленные)
	        + ВременнаяТаблицаИзТаблицыЗначений(Отбор.Работы,             "Работы",             КлючРаботы);

	Для Каждого Свойство Из Отбор Цикл
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;

	Если Корректировка <> Неопределено Тогда

		Для Каждого Свойство Из Корректировка Цикл

			ИмяПараметраЗапроса = Свойство.Ключ + "Корректировка";
			Таблица = Свойство.Значение;
			Запрос.УстановитьПараметр(ИмяПараметраЗапроса, Таблица);
			Текст = Текст + ВременнаяТаблицаИзТаблицыЗначений(Таблица, ИмяПараметраЗапроса, "", Ложь);

		КонецЦикла;

	КонецЕсли;

	Запрос.Текст = Текст;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();

	//Получение остатков и движений для расчета доступных остатков товаров, остатков обособленных товаров и работ.
	Запрос.УстановитьПараметр("НачалоТекущегоДня",   НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
	                          ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));

	Разделы = Новый Массив();
	Запрос.Текст = РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОстатковИОборотов(
	                 Корректировка <> Неопределено, Разделы)
	               + РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОстатковИОборотовОбособленных(
	                 Корректировка <> Неопределено, Разделы, Ложь)
	               + РегистрыНакопления.ОбеспечениеЗаказовРаботами.ТекстЗапросаОстатковИОборотов(
	                 Корректировка <> Неопределено, Разделы);

	УстановитьПривилегированныйРежим(Истина);
	ПакетРезультатов = Запрос.ВыполнитьПакет();

	Результат = Новый Структура();
	Результат.Вставить("Товары", ПакетРезультатов[Разделы.Найти("ТаблицаОстаткиИОборотыГрафика")]);
	Результат.Вставить("ТоварыОбособленные", ПакетРезультатов[Разделы.Найти("ТаблицаОстаткиИОборотыГрафикаОбособленные")]);
	Результат.Вставить("Работы", ПакетРезультатов[Разделы.Найти("ТаблицаОстаткиИОборотыРабот")]);

	Возврат Результат;

КонецФункции

Функция СкорректироватьНарастающийИтог(НарастающийИтог, Период, Таблица)
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли Период = Неопределено Или Таблица[0].ДатаОтгрузки >= Период Тогда
		НарастающийИтог = НарастающийИтог - Таблица[0].Количество;
		Таблица.Удалить(0);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ВременнаяТаблицаИзТаблицыЗначений(Таблица, ИмяТаблицы, Индекс = "", Различные = Истина)

	ШаблонПоле   = "Т.Поле КАК Поле";
	ТекстВсеПоля = "";
	Разделитель  = "";
	Для Каждого Колонка Из Таблица.Колонки Цикл
		ТекстВсеПоля = ТекстВсеПоля + Разделитель + СтрЗаменить(ШаблонПоле, "Поле", Колонка.Имя);
		Разделитель = "," + Символы.ПС + Символы.Таб;
	КонецЦикла;

	Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Поле КАК Поле
		|ПОМЕСТИТЬ ВтТаблица
		|ИЗ
		|	&Таблица КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поле
		|;
		|
		|/////////////////////////////////////////
		|";

	Если Не Различные Тогда
		Текст = СтрЗаменить(Текст, "РАЗЛИЧНЫЕ", "");
	КонецЕсли;

	Если Индекс = "" Тогда
		Текст = СтрЗаменить(Текст, "ИНДЕКСИРОВАТЬ ПО", "");
	КонецЕсли;

	Текст = СтрЗаменить(Текст, "Т.Поле КАК Поле", ТекстВсеПоля);
	Текст = СтрЗаменить(Текст, "Таблица", ИмяТаблицы);
	Текст = СтрЗаменить(Текст, "Поле", Индекс);

	Возврат Текст;

КонецФункции

Процедура РассчитатьПриращенияДоступныхОстатков(ДоступныеОстатки)

	СтруктураКлюча = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСклад();
	РассчитатьПриращенияКоличестваВТаблице(ДоступныеОстатки.Товары, СтруктураКлюча);

	СтруктураКлюча = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСкладНазначение();
	РассчитатьПриращенияКоличестваВТаблице(ДоступныеОстатки.ТоварыОбособленные, СтруктураКлюча);

	СтруктураКлюча = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаПодразделениеНазначение();
	РассчитатьПриращенияКоличестваВТаблице(ДоступныеОстатки.Работы, СтруктураКлюча);

КонецПроцедуры

Процедура РассчитатьПриращенияКоличестваВТаблице(Таблица, КлючСтроки)

	МаксИндекс = Таблица.Количество() - 1;
	Индекс = МаксИндекс;
	ЕстьЗаписи = Индекс >= 0;

	Пока ЕстьЗаписи Цикл

		Строка = Таблица[Индекс];
		ЗаполнитьЗначенияСвойств(КлючСтроки, Строка);

		ИзмениласьЗапись = Ложь;

		НарастающийИтог = 0;
		// Цикл по сочетанию номенклатура\характеристика\склад.
		Пока Не ИзмениласьЗапись Цикл

			Строка = Таблица[Индекс];
			Строка.Количество = Строка.Количество - НарастающийИтог;
			НарастающийИтог = НарастающийИтог + Строка.Количество;

			// Переход к предыдущей записи.
			Индекс = Индекс - 1;
			ЕстьЗаписи = Индекс >= 0;

			ИзмениласьЗапись = Не ЕстьЗаписи Или ОбеспечениеКлиентСервер.ИзменилсяКлюч(КлючСтроки, Таблица[Индекс]);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокуКорректировки(Корректировка, Количество, Реквизиты)

	Работа = Реквизиты.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа;
	Товар  = Реквизиты.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	Тара   = Реквизиты.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	Обособленно = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
	СоСклада    = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Отгрузить   = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	ОтгрузитьОбособленно = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ИзЗаказов   = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов;
	Пустой      = Реквизиты.ВариантОбеспечения.Пустая();

	Если Работа Тогда

		//Обеспечение заказов работами.
		Если Обособленно Или ОтгрузитьОбособленно Тогда

			НоваяСтрока = Корректировка.ОбеспечениеЗаказовРаботами.Добавить();

			НоваяСтрока.Период = Реквизиты.ДатаОтгрузкиРабот;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты, "Назначение, Подразделение, Номенклатура, Характеристика");

			НоваяСтрока.КОбеспечению = Количество;

		КонецЕсли;

	ИначеЕсли Товар Или Тара Тогда

		//Товары к отгрузке.
		Если СоСклада Или Отгрузить Или ОтгрузитьОбособленно Тогда

			НоваяСтрока = Корректировка.ТоварыКОтгрузке.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты, "Склад, Номенклатура, Характеристика, Серия");

			Если СоСклада Тогда
				НоваяСтрока.ВРезерве = Количество;
			Иначе
				НоваяСтрока.КОтгрузке = Количество;
			КонецЕсли;

			Если ОтгрузитьОбособленно Тогда
				НоваяСтрока.Назначение = Реквизиты.Назначение;
			КонецЕсли;

		КонецЕсли;

		//График движения товаров.
		Если ИзЗаказов Или Пустой Тогда

			НоваяСтрока = Корректировка.ГрафикПоступленияТоваров.Добавить();

			НоваяСтрока.ДатаСобытия = Реквизиты.ДатаОтгрузки;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты, "Склад, Номенклатура, Характеристика");

			Если ИзЗаказов Или Пустой Тогда

				НоваяСтрока.КоличествоИзЗаказов = - Количество;

			ИначеЕсли Обособленно Тогда

				НоваяСтрока.Назначение = Реквизиты.Назначение;
				НоваяСтрока.КоличествоПодЗаказ  = - Количество;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьВКорректировку(Корректировка, Таблица)

	Для Каждого СтрокаТовары Из Таблица Цикл

		ДобавитьСтрокуКорректировки(Корректировка, СтрокаТовары.Количество, СтрокаТовары);

	КонецЦикла;

КонецПроцедуры

Функция ОтборТоварыКОтгрузке(ТаблицаВыделенныеСтроки)
	
	ОтборТоварыКОтгрузке = ТаблицаВыделенныеСтроки.СкопироватьКолонки("Номенклатура,Характеристика,Склад,Назначение,Серия,Ссылка");
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Для Каждого СтрокаТаблицы Из ТаблицаВыделенныеСтроки Цикл
		НоваяСтрока = ОтборТоварыКОтгрузке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если СтрокаТаблицы.ВариантОбеспечения <> ВариантОтгрузитьОбособленно Тогда
			НоваяСтрока.Назначение = ПустоеНазначение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборТоварыКОтгрузке;
	
КонецФункции

Функция ТаблицыОформлено(Таблица, ОформитьПоНакладным, ОформитьПоОрдерам)

	ОформитьПоОрдерам.Колонки.Добавить("Списано",  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	ОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	Отгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();

	НоваяТаблица = Новый ТаблицаЗначений();
	НоваяТаблица.Колонки.Добавить("НомерСтроки",     ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));
	НоваяТаблица.Колонки.Добавить("Номенклатура",    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	НоваяТаблица.Колонки.Добавить("Характеристика",  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	НоваяТаблица.Колонки.Добавить("Склад",           Новый ОписаниеТипов("СправочникСсылка.Склады"));
	НоваяТаблица.Колонки.Добавить("Назначение",      Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	НоваяТаблица.Колонки.Добавить("Серия",           Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	НоваяТаблица.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));

	НоваяТаблица.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	НоваяТаблица.Колонки.Добавить("ДатаОтгрузки",       ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	НоваяТаблица.Колонки.Добавить("ДатаОтгрузкиРабот",  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	НоваяТаблица.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	НоваяТаблица.Колонки.Добавить("Количество",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	НоваяТаблица.Колонки.Добавить("КоличествоВЗаказе", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	НоваяТаблица.Колонки.Добавить("КодСтроки",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));
	
	ПоНакладным = НоваяТаблица;
	ПоОрдерам   = НоваяТаблица.СкопироватьКолонки();
	
	ОтборПоНакладным = Новый Структура("КодСтроки");
	ОтборПоОрдерам = Новый Структура("Номенклатура, Характеристика, Склад, Назначение, Серия");
	Для каждого СтрокаТовары Из Таблица Цикл

		
		//Оформленное по накладным.
		ОтборПоНакладным.КодСтроки = СтрокаТовары.КодСтроки;
		НайденныеСтроки = ОформитьПоНакладным.НайтиСтроки(ОтборПоНакладным);
		Если НайденныеСтроки.Количество() > 0 Тогда

			Количество = НайденныеСтроки[0].Количество;
			
			ЭтоСтрокаКОформлению = СтрокаТовары.Отменено <> Истина
									И (СтрокаТовары.ВариантОбеспечения = Отгрузить Или СтрокаТовары.ВариантОбеспечения = ОтгрузитьОбособленно);
			
			АналитикаСовпадает = СтрокаТовары.Номенклатура = НайденныеСтроки[0].Номенклатура
			                     И СтрокаТовары.Характеристика = НайденныеСтроки[0].Характеристика
			                     И СтрокаТовары.Склад = НайденныеСтроки[0].Склад
			                     И СтрокаТовары.Серия = НайденныеСтроки[0].Серия;
			
			КоличествоПоДокументу = ?(ЭтоСтрокаКОформлению И АналитикаСовпадает, СтрокаТовары.Количество, 0);
			
			НоваяСтрока = ПоНакладным.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.КоличествоВЗаказе = СтрокаТовары.Количество;
			
		КонецЕсли;
		
	КонецЦикла;

	//Списание оформленного по накладным.
	Для каждого СтрокаТовары Из ПоНакладным Цикл

		ЗаполнитьЗначенияСвойств(ОтборПоОрдерам, СтрокаТовары);
		Если СтрокаТовары.ВариантОбеспечения <> ОтгрузитьОбособленно Тогда
			ОтборПоОрдерам.Назначение = ПустоеНазначение;
		КонецЕсли;

		НайденныеСтроки = ОформитьПоОрдерам.НайтиСтроки(ОтборПоОрдерам);
		Если НайденныеСтроки.Количество() > 0 Тогда

			НайденныеСтроки[0].Списано = НайденныеСтроки[0].Списано + СтрокаТовары.Количество;

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТовары Из ОформитьПоОрдерам Цикл

		Если СтрокаТовары.Количество > СтрокаТовары.Списано Тогда //Несписанные по накладным остатки.

			НоваяСтрока = ПоОрдерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);

			НоваяСтрока.ВариантОбеспечения = ?(СтрокаТовары.Назначение <> ПустоеНазначение, ОтгрузитьОбособленно, Отгрузить);
			НоваяСтрока.Количество = СтрокаТовары.Количество - СтрокаТовары.Списано;

		КонецЕсли;

	КонецЦикла;
	
	// Если по накладным в строке отгружено меньше чем заказе, необходимо переместить в данные по накладным количество из ордеров.
	// Пример:
	// В заказе 10 штук
	// ПоНакладным 5 штук
	// ПоОрдерам 4 штуки
	// Перемещаем 4 штуки в таблицу ПоНакладным. В итоге ПоНакладным 9 штук, ПоОрдерам 0 штук.
	// Данное перемещение позволяет привязать остатки полученные из таблицы ПоОрдерам к кодам строк.
	
	Для каждого СтрокаТовары Из ПоНакладным Цикл
		
		Если СтрокаТовары.КоличествоВЗаказе > СтрокаТовары.Количество Тогда
			ЗаполнитьЗначенияСвойств(ОтборПоОрдерам, СтрокаТовары);
			НайденныеСтроки = ПоОрдерам.НайтиСтроки(ОтборПоОрдерам);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтборПоОрдерамБезСерий = Новый Структура("Номенклатура, Характеристика, Склад, Назначение");
				ЗаполнитьЗначенияСвойств(ОтборПоОрдерамБезСерий, СтрокаТовары);
				НайденныеСтроки = ПоОрдерам.НайтиСтроки(ОтборПоОрдерамБезСерий);
			КонецЕсли;
			
			Для каждого СтрокаОрдера Из НайденныеСтроки Цикл
				
				ОсталосьСписать = СтрокаТовары.КоличествоВЗаказе - СтрокаТовары.Количество;
				ДляСписания = ?(ОсталосьСписать > СтрокаОрдера.Количество, СтрокаОрдера.Количество, ОсталосьСписать);
				СтрокаТовары.Количество = СтрокаТовары.Количество + ДляСписания;
				СтрокаОрдера.Количество = СтрокаОрдера.Количество - ДляСписания;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	Ссылки = Новый Массив();
	Единицы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ссылки, "ЕдиницаИзмерения");

	Результат = Новый Структура("ПоНакладным, ПоОрдерам", ПоНакладным, ПоОрдерам);
	Возврат Результат;

КонецФункции

Функция ВыполнитьСписание(ТаблицыСписания, ТаблицаОстатков, ПоляСоединения, КоличествоНеограничено = Ложь)
	
	Результат = ТаблицаПоОписаниюПолей(ПутиКДаннымПоУмолчанию());
	Результат.Колонки.Добавить("СтрокаНеВыделена", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПриоритетТипаОбеспечения");
	Результат.Колонки.Добавить("СкладНаименование");
	
	Если ТаблицаОстатков.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	//Обход таблиц потребностей.
	Если ТипЗнч(ТаблицыСписания) = Тип("Массив") Тогда
		
		Для ИндексТаблицы = 0 По ТаблицыСписания.ВГраница() Цикл
			
			Таблица = ТаблицыСписания[ИндексТаблицы];
			ВыполнитьСписаниеВТаблице(Результат, Таблица, ТаблицаОстатков, ПоляСоединения, КоличествоНеограничено);
			
		КонецЦикла;
		
	Иначе
		
		ВыполнитьСписаниеВТаблице(Результат, ТаблицыСписания, ТаблицаОстатков, ПоляСоединения, КоличествоНеограничено);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьСписаниеВТаблице(Результат, Таблица, ТаблицаОстатков, ПоляСоединения, КоличествоНеограничено)
	
	Упорядочение = Новый ТаблицаЗначений();
	Упорядочение.Колонки.Добавить("ДатаДоступности");
	Упорядочение.Колонки.Добавить("ПриоритетТипаОбеспечения");
	Упорядочение.Колонки.Добавить("СкладНаименование");
	Упорядочение.Колонки.Добавить("Ссылка");
	
	ВГраница = Таблица.Количество() - 1;
	
	Для ИндексСтроки = 0 По ВГраница Цикл
		
		СтрокаПотребности = Таблица[ВГраница - ИндексСтроки];
		
		Отбор = Новый Структура(ПоляСоединения);
		
		Если Отбор.Свойство("Склад") И Не ЗначениеЗаполнено(СтрокаПотребности.Склад) Тогда
			Отбор.Удалить("Склад");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПотребности);
		НайденныеВариантыОбеспечения = ТаблицаОстатков.НайтиСтроки(Отбор);
		
		//Упорядочивание найденных вариантов обеспечения.
		
		Упорядочение.Очистить();
		Для Каждого Строка Из НайденныеВариантыОбеспечения Цикл
		
			Если КоличествоНеограничено Или Строка.Количество > 0 Тогда
				НоваяСтрока = Упорядочение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Ссылка = Строка;
			КонецЕсли;
		
		КонецЦикла;
		
		Упорядочение.Сортировать("ПриоритетТипаОбеспечения, ДатаДоступности, СкладНаименование");
		
		НайденныеВариантыОбеспечения = Упорядочение;
		
		//Обход вариантов обеспечения, списание потребностей.
		Для Каждого НайденныйВариант Из НайденныеВариантыОбеспечения Цикл
			
			Доступно = ?(КоличествоНеограничено, СтрокаПотребности.Количество, НайденныйВариант.Ссылка.Количество);
			
			КСписанию = Мин(СтрокаПотребности.Количество, Доступно);
			
			Если Не КоличествоНеограничено И СтрокаПотребности.КоэффициентУпаковки <> 0 Тогда
				КСписанию = Цел(КСписанию/СтрокаПотребности.КоэффициентУпаковки) * СтрокаПотребности.КоэффициентУпаковки;
			КонецЕсли;
			
			Если КСписанию > 0 Тогда
				
				СтрокаСписано = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСписано, СтрокаПотребности);
				ЗаполнитьЗначенияСвойств(СтрокаСписано, НайденныйВариант.Ссылка);
				Если НайденныйВариант.ДатаДоступности <> Неопределено Тогда // строка еще не отгружена - актуализируется дата отгрузки
					СтрокаСписано.ДатаОтгрузки = НайденныйВариант.ДатаДоступности;
				КонецЕсли;
				СтрокаСписано.Количество = КСписанию;
				
				Если Не КоличествоНеограничено Тогда
					НайденныйВариант.Ссылка.Количество = НайденныйВариант.Ссылка.Количество - КСписанию;
				КонецЕсли;
				
				СтрокаПотребности.Количество = СтрокаПотребности.Количество - КСписанию;
				
				Если СтрокаПотребности.Количество = 0 Тогда
					Таблица.Удалить(СтрокаПотребности);
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПутиКДаннымПоУмолчанию() Экспорт

	Пути = "Ссылка,
	       |Идентификатор,
	       |НомерСтроки, КодСтроки,
	       |Отменено,
	       |Номенклатура, Характеристика, Склад, Подразделение, Назначение, Серия,
	       |ТипНоменклатуры,
	       |ВариантОбеспечения, ДатаОтгрузки, ДатаОтгрузкиРабот,
	       |Количество";

	Возврат Пути;

КонецФункции

Функция СоздатьХранилищеЗаполнитьИзОбъекта(Объект, ПутиКДанным)
	
	Пути = ПутиКДаннымПоУмолчанию();
	Хранилище = Новый Структура(Пути);
	
	Для Каждого Свойство Из ПутиКДанным Цикл
		Хранилище.Вставить(Свойство.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Хранилище, Объект);
	
	
	Хранилище.Вставить("НазначениеШапки", Хранилище.Назначение);
	Возврат Хранилище;
	
КонецФункции

Процедура ДобавитьАналитику(Приемник, ДанныеЗаполнения, МассивСкладов = Неопределено)

	Если ДанныеЗаполнения.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда

		//Необходимо получать остатки обеспечения работой для данного подразделения.
		НоваяСтрока = Приемник.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

	ИначеЕсли МассивСкладов = Неопределено Тогда

		//Необходимо получать остатки обеспечения обособленным товаром/тарой для данного склада.
		НоваяСтрока = Приемник.ТоварыОбособленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

		//Необходимо получать остатки обеспечения для выбранной позиции номенклатуры для данного склада.
		НоваяСтрока = Приемник.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

	Иначе

		//Аналитики по всем складам.
		Для Каждого Склад Из МассивСкладов Цикл

			НоваяСтрока = Приемник.ТоварыОбособленные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
			НоваяСтрока.Склад = Склад;

			НоваяСтрока = Приемник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
			НоваяСтрока.Склад = Склад;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ШагиСписанияОбособленныхТоваров(Товары, ВариантыОбеспечения, ДопустимыеВарианты, НевыделенныеСтроки)

	ВариантОтгрузитьОбособленно  = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ВариантОбособленно           = Перечисления.ВариантыОбеспечения.Обособленно;

	ОтгрузитьОбособленноДоступен = ДопустимыеВарианты.Найти(ВариантОтгрузитьОбособленно) <> Неопределено;
	ОбособленноДоступен          = ДопустимыеВарианты.Найти(ВариантОбособленно)          <> Неопределено;

	ПоляСоединения     = "Номенклатура, Характеристика, Назначение, Склад";

	ВариантОбеспечения = ?(ОтгрузитьОбособленноДоступен, ВариантОтгрузитьОбособленно, ВариантОбособленно);
	ТаблицаОстатков    = ВариантыОбеспечения.ВНаличииПодНазначение;

	Если НевыделенныеСтроки <> Неопределено Тогда
		НевыделенныеСтроки.ЗаполнитьЗначения(Истина, "СтрокаНеВыделена");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НевыделенныеСтроки, Товары.Обособленно);
		Товары.Обособленно.Сортировать("ДатаОтгрузки УБЫВ, НомерСтроки УБЫВ");
	КонецЕсли;

	ШагиСписания = Новый Массив();
	ШагиСписания.Добавить(ВыполнитьСписание(Товары.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обособленно,          ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обеспечить,           ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Товары.РезервироватьКСроку,  ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Товары.Резервировать,        ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Товары.Отгрузить,            ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Товары.НеОбеспечивать,       ТаблицаОстатков, ПоляСоединения));

	Результат = ТаблицаПотребностейБезАналитики();
	Результат.Колонки.Добавить("ПриоритетТипаОбеспечения");
	Результат.Колонки.Добавить("СкладНаименование");
	Для Каждого Шаг Из ШагиСписания Цикл

		Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

	КонецЦикла;

	Если ЭтоСписаниеСУчетомОстатков(ДопустимыеВарианты) Тогда
		
		ВариантОбеспечения = ВариантОбособленно;
		ТаблицаОстатков    = ВариантыОбеспечения.ОжидаетсяПодНазначение;

		ШагиСписания = Новый Массив();
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обособленно,          ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обеспечить,           ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.РезервироватьКСроку,  ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Резервировать,        ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Отгрузить,            ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.НеОбеспечивать,       ТаблицаОстатков, ПоляСоединения));

		Для Каждого Шаг Из ШагиСписания Цикл

			Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

		КонецЦикла;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ШагиСписанияОформитьПоОрдерам(Товары, ТаблицаОстатков)

	ПоляСоединения = "Номенклатура, Характеристика, Склад, Назначение";

	ШагиСписания = Новый Массив();
	ШагиСписания.Добавить(ВыполнитьСписание(Товары.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения));

	ПоляСоединения = "Номенклатура, Характеристика, Склад";

	ШагиСписания.Добавить(ВыполнитьСписание(Товары.Отгрузить, ТаблицаОстатков, ПоляСоединения));

	Результат = ТаблицаПотребностейБезАналитики();
	Результат.Колонки.Добавить("ПриоритетТипаОбеспечения");
	Результат.Колонки.Добавить("СкладНаименование");
	Для Каждого Шаг Из ШагиСписания Цикл

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ШагиСписанияОстатковТоваров(Товары, ВариантыОбеспечения, ДопустимыеВарианты, ИзменятьОбособление = Истина)

	ВариантОтгрузить           = Перечисления.ВариантыОбеспечения.Отгрузить;
	ВариантРезервировать       = Перечисления.ВариантыОбеспечения.СоСклада;
	ВариантРезервироватьКСроку = Перечисления.ВариантыОбеспечения.ИзЗаказов;

	ВариантОбеспечить           = Перечисления.ВариантыОбеспечения.Требуется;
	ВариантНеОбеспечивать       = Перечисления.ВариантыОбеспечения.НеТребуется;
	ВариантОбособленно           = Перечисления.ВариантыОбеспечения.Обособленно;

	ОтгрузитьДоступен           = ДопустимыеВарианты.Найти(ВариантОтгрузить)           <> Неопределено;
	РезервироватьДоступен       = ДопустимыеВарианты.Найти(ВариантРезервировать)       <> Неопределено;
	РезервироватьКСрокуДоступен = ДопустимыеВарианты.Найти(ВариантРезервироватьКСроку) <> Неопределено;

	ОбособленноДоступен          = ДопустимыеВарианты.Найти(ВариантОбособленно)          <> Неопределено;
	ОбеспечитьДоступен           = ДопустимыеВарианты.Найти(ВариантОбеспечить)           <> Неопределено;
	НеОбеспечиватьДоступен       = ДопустимыеВарианты.Найти(ВариантНеОбеспечивать)       <> Неопределено;

	ПоляСоединения     = "Номенклатура, Характеристика, Склад";

	Результат = ТаблицаПотребностейБезАналитики();
	Результат.Колонки.Добавить("ПриоритетТипаОбеспечения");
	Результат.Колонки.Добавить("СкладНаименование");
	Если ОтгрузитьДоступен Или РезервироватьДоступен Тогда

		ВариантОбеспечения = ?(ОтгрузитьДоступен, ВариантОтгрузить, ВариантРезервировать);
		ТаблицаОстатков    = ВариантыОбеспечения.ВНаличии;

		ШагиСписания = Новый Массив();
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Отгрузить,            ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Резервировать,        ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.РезервироватьКСроку,  ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обеспечить,           ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.НеОбеспечивать,       ТаблицаОстатков, ПоляСоединения));

		Если ИзменятьОбособление Тогда
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения));
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обособленно,          ТаблицаОстатков, ПоляСоединения));
		КонецЕсли;

		Для Каждого Шаг Из ШагиСписания Цикл

			Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

		КонецЦикла;

	КонецЕсли;

	Если РезервироватьКСрокуДоступен Тогда

		ВариантОбеспечения = ВариантРезервироватьКСроку;
		ТаблицаОстатков    = ВариантыОбеспечения.ВНаличии;

		ШагиСписания = Новый Массив();
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Отгрузить,            ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Резервировать,        ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.РезервироватьКСроку,  ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обеспечить,           ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.НеОбеспечивать,       ТаблицаОстатков, ПоляСоединения));

		Если ИзменятьОбособление Тогда
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения));
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обособленно,          ТаблицаОстатков, ПоляСоединения));
		КонецЕсли;

		Для Каждого Шаг Из ШагиСписания Цикл

			Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

		КонецЦикла;

		ТаблицаОстатков    = ВариантыОбеспечения.Ожидается;

		ШагиСписания = Новый Массив();
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Отгрузить,            ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Резервировать,        ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.РезервироватьКСроку,  ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обеспечить,           ТаблицаОстатков, ПоляСоединения));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.НеОбеспечивать,       ТаблицаОстатков, ПоляСоединения));

		Если ИзменятьОбособление Тогда
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения));
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обособленно,          ТаблицаОстатков, ПоляСоединения));
		КонецЕсли;

		Для Каждого Шаг Из ШагиСписания Цикл

			Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ШагиЗаполненияДатыПлановойПоставкиТоваров(Товары, ТаблицаОстатков, ДопустимыеВарианты)

	ВариантОбеспечить           = Перечисления.ВариантыОбеспечения.Требуется;
	ВариантНеОбеспечивать       = Перечисления.ВариантыОбеспечения.НеТребуется;
	ВариантОбособленно          = Перечисления.ВариантыОбеспечения.Обособленно;

	ОбеспечитьДоступен           = ДопустимыеВарианты.Найти(ВариантОбеспечить)           <> Неопределено;
	НеОбеспечиватьДоступен       = ДопустимыеВарианты.Найти(ВариантНеОбеспечивать)       <> Неопределено;
	ОбособленноДоступен          = ДопустимыеВарианты.Найти(ВариантОбособленно)          <> Неопределено;

	ИзменятьОбособление = Не (ОбособленноДоступен И (ОбеспечитьДоступен Или НеОбеспечиватьДоступен));

	ПоляСоединения = "Номенклатура, Характеристика, Склад";

	Результат = ТаблицаПотребностейБезАналитики();
	Результат.Колонки.Добавить("ПриоритетТипаОбеспечения");
	Результат.Колонки.Добавить("СкладНаименование");
	Если ОбособленноДоступен Тогда

		ВариантОбеспечения = ВариантОбособленно;

		ШагиСписания = Новый Массив();
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения, Истина));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обособленно,          ТаблицаОстатков, ПоляСоединения, Истина));

		Если ИзменятьОбособление Тогда

			ШагиСписания.Добавить(ВыполнитьСписание(Товары.Отгрузить,           ТаблицаОстатков, ПоляСоединения, Истина));
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.Резервировать,       ТаблицаОстатков, ПоляСоединения, Истина));
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.РезервироватьКСроку, ТаблицаОстатков, ПоляСоединения, Истина));
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обеспечить,          ТаблицаОстатков, ПоляСоединения, Истина));
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.НеОбеспечивать,      ТаблицаОстатков, ПоляСоединения, Истина));

		КонецЕсли;

		Для Каждого Шаг Из ШагиСписания Цикл

			Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

		КонецЦикла;

	КонецЕсли;

	Если ОбеспечитьДоступен Тогда

		ВариантОбеспечения = ВариантОбеспечить;

		ШагиСписания = Новый Массив();
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Отгрузить,           ТаблицаОстатков, ПоляСоединения, Истина));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Резервировать,       ТаблицаОстатков, ПоляСоединения, Истина));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.РезервироватьКСроку, ТаблицаОстатков, ПоляСоединения, Истина));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обеспечить,          ТаблицаОстатков, ПоляСоединения, Истина));
		ШагиСписания.Добавить(ВыполнитьСписание(Товары.НеОбеспечивать,      ТаблицаОстатков, ПоляСоединения, Истина));

		Если ИзменятьОбособление Тогда

			ШагиСписания.Добавить(ВыполнитьСписание(Товары.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения, Истина));
			ШагиСписания.Добавить(ВыполнитьСписание(Товары.Обособленно,          ТаблицаОстатков, ПоляСоединения, Истина));

		КонецЕсли;

		Для Каждого Шаг Из ШагиСписания Цикл

			Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ШагиЗаполненияБезУчетаОстатковТоваров(Товары, ДопустимыеВарианты)

	ВариантОтгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	ВариантРезервировать        = Перечисления.ВариантыОбеспечения.СоСклада;
	ВариантРезервироватьКСроку  = Перечисления.ВариантыОбеспечения.ИзЗаказов;
	ВариантОбеспечить           = Перечисления.ВариантыОбеспечения.Требуется;
	ВариантНеОбеспечивать       = Перечисления.ВариантыОбеспечения.НеТребуется;
	ВариантОбособленно          = Перечисления.ВариантыОбеспечения.Обособленно;
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;

	ОтгрузитьДоступен            = ДопустимыеВарианты.Найти(ВариантОтгрузить)            <> Неопределено;
	РезервироватьДоступен        = ДопустимыеВарианты.Найти(ВариантРезервировать)        <> Неопределено;
	РезервироватьКСрокуДоступен  = ДопустимыеВарианты.Найти(ВариантРезервироватьКСроку)  <> Неопределено;
	ОбеспечитьДоступен           = ДопустимыеВарианты.Найти(ВариантОбеспечить)           <> Неопределено;
	НеОбеспечиватьДоступен       = ДопустимыеВарианты.Найти(ВариантНеОбеспечивать)       <> Неопределено;
	ОбособленноДоступен          = ДопустимыеВарианты.Найти(ВариантОбособленно)          <> Неопределено;
	ОтгрузитьОбособленноДоступен = ДопустимыеВарианты.Найти(ВариантОтгрузитьОбособленно) <> Неопределено;

	ВариантОбеспечения = ?(НеОбеспечиватьДоступен,       ВариантНеОбеспечивать,
	                     ?(РезервироватьКСрокуДоступен,  ВариантРезервироватьКСроку,
	                     ?(РезервироватьДоступен,        ВариантРезервировать,
	                     ?(ОтгрузитьДоступен,            ВариантОтгрузить,
	                     ?(ОтгрузитьОбособленноДоступен, ВариантОтгрузитьОбособленно, Неопределено)))));

	Результат = ТаблицаПотребностейБезАналитики();
	Результат.Колонки.Добавить("ПриоритетТипаОбеспечения");
	Результат.Колонки.Добавить("СкладНаименование");
	Для Каждого Шаг Из Товары Цикл

		Если ВариантОбеспечения <> Неопределено Тогда
			Шаг.Значение.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			Шаг.Значение.ЗаполнитьЗначения('00010101', "ДатаОтгрузки");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг.Значение, Результат);
		Шаг.Значение.Очистить();

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ШагиСписанияОбособленныхРабот(Работы, ВариантыОбеспечения, ДопустимыеВарианты, НевыделенныеСтроки)

	ВариантОтгрузитьОбособленно  = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ВариантОбособленно           = Перечисления.ВариантыОбеспечения.Обособленно;

	ОтгрузитьОбособленноДоступен = ДопустимыеВарианты.Найти(ВариантОтгрузитьОбособленно) <> Неопределено;
	ОбособленноДоступен          = ДопустимыеВарианты.Найти(ВариантОбособленно)          <> Неопределено;

	ПоляСоединения     = "Номенклатура, Характеристика, Назначение, Подразделение";
	ВариантОбеспечения = ?(ОтгрузитьОбособленноДоступен, ВариантОтгрузитьОбособленно, ВариантОбособленно);
	ТаблицаОстатков    = ВариантыОбеспечения.ОжидаетсяРаботы;

	Если НевыделенныеСтроки <> Неопределено Тогда
		НевыделенныеСтроки.Обособленно.ЗаполнитьЗначения(Истина, "СтрокаНеВыделена");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НевыделенныеСтроки.Обособленно, Работы.Обособленно);
		НевыделенныеСтроки.ОтгрузитьОбособленно.ЗаполнитьЗначения(Истина, "СтрокаНеВыделена");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НевыделенныеСтроки.ОтгрузитьОбособленно, Работы.Обособленно);
		Работы.Обособленно.Сортировать("ДатаОтгрузкиРабот УБЫВ, НомерСтроки УБЫВ");
	КонецЕсли;

	ШагиСписания = Новый Массив();
	ШагиСписания.Добавить(ВыполнитьСписание(Работы.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Работы.Обособленно,          ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Работы.Отгрузить,            ТаблицаОстатков, ПоляСоединения));
	ШагиСписания.Добавить(ВыполнитьСписание(Работы.НеОбеспечивать,       ТаблицаОстатков, ПоляСоединения));

	Результат = ТаблицаПотребностейБезАналитики();
	Для Каждого Шаг Из ШагиСписания Цикл

		Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
		Если ОтгрузитьОбособленноДоступен Тогда
			Шаг.ЗаполнитьЗначения('00010101', "ДатаОтгрузки");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ШагиЗаполненияДатыПлановойПоставкиРабот(Работы, ТаблицаОстатков, ДопустимыеВарианты)

	ВариантОбеспечить       = Перечисления.ВариантыОбеспечения.НеТребуется;
	ВариантОбособленно      = Перечисления.ВариантыОбеспечения.Обособленно;
	ВариантОтгрузить        = Перечисления.ВариантыОбеспечения.Отгрузить;
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;

	ОбеспечитьДоступен      = ДопустимыеВарианты.Найти(ВариантОбеспечить)       <> Неопределено;
	ОбособленноДоступен     = ДопустимыеВарианты.Найти(ВариантОбособленно)      <> Неопределено;
	ОтгрузитьДоступен       = ДопустимыеВарианты.Найти(ВариантОтгрузить)        <> Неопределено;
	ОтгрузитьОбособленноДоступен = ДопустимыеВарианты.Найти(ВариантОтгрузитьОбособленно)   <> Неопределено;

	ИзменятьОбособление = Не (ОбособленноДоступен И ОбеспечитьДоступен);

	ПоляСоединения     = "Номенклатура, Характеристика";

	Результат = ТаблицаПотребностейБезАналитики();
	Если ОбособленноДоступен И Не ОтгрузитьОбособленноДоступен Тогда

		ВариантОбеспечения = ВариантОбособленно;

		ШагиСписания = Новый Массив();
		ШагиСписания.Добавить(ВыполнитьСписание(Работы.ОтгрузитьОбособленно, ТаблицаОстатков, ПоляСоединения, Истина));
		ШагиСписания.Добавить(ВыполнитьСписание(Работы.Обособленно,          ТаблицаОстатков, ПоляСоединения, Истина));

		Если ИзменятьОбособление И Не ОтгрузитьДоступен Тогда

			ШагиСписания.Добавить(ВыполнитьСписание(Работы.Отгрузить,           ТаблицаОстатков, ПоляСоединения, Истина));
			ШагиСписания.Добавить(ВыполнитьСписание(Работы.НеОбеспечивать,      ТаблицаОстатков, ПоляСоединения, Истина));

		КонецЕсли;

		Для Каждого Шаг Из ШагиСписания Цикл

			Шаг.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг, Результат);

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ШагиЗаполненияБезУчетаОстатковРабот(Работы, ДопустимыеВарианты)

	ВариантНеОбеспечивать       = Перечисления.ВариантыОбеспечения.НеТребуется;
	ВариантОтгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;

	НеОбеспечиватьДоступен       = ДопустимыеВарианты.Найти(ВариантНеОбеспечивать)       <> Неопределено;
	ОтгрузитьОбособленноДоступен = ДопустимыеВарианты.Найти(ВариантОтгрузитьОбособленно) <> Неопределено;
	ОтгрузитьДоступен            = ДопустимыеВарианты.Найти(ВариантОтгрузить)            <> Неопределено;

	Результат = ТаблицаПотребностейБезАналитики();
	Если ОтгрузитьОбособленноДоступен Тогда
		ВариантОбеспечения = ВариантОтгрузитьОбособленно;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Работы.ОтгрузитьОбособленно, Результат);
		Работы.ОтгрузитьОбособленно.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Работы.Обособленно, Результат);
		Работы.Обособленно.Очистить();

		Результат.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
		Результат.ЗаполнитьЗначения('00010101', "ДатаОтгрузки");
	КонецЕсли;

	ВариантОбеспечения = ?(ОтгрузитьДоступен,            ВариантОтгрузить,
	                     ?(НеОбеспечиватьДоступен,       ВариантНеОбеспечивать,
	                     ?(ОтгрузитьОбособленноДоступен, ВариантОтгрузитьОбособленно, Неопределено)));

	Для Каждого Шаг Из Работы Цикл

		Если ВариантОбеспечения <> Неопределено Тогда
			Шаг.Значение.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
			Шаг.Значение.ЗаполнитьЗначения('00010101', "ДатаОтгрузки");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Шаг.Значение, Результат);
		Шаг.Значение.Очистить();

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ШагиЗаполненияБезУчетаОстатковУслуг(ТаблицаДляСписания, ДопустимыеВарианты)

	ВариантНеОбеспечивать       = Перечисления.ВариантыОбеспечения.НеТребуется;
	ВариантОтгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;

	НеОбеспечиватьДоступен       = ДопустимыеВарианты.Найти(ВариантНеОбеспечивать)       <> Неопределено;
	ОтгрузитьДоступен            = ДопустимыеВарианты.Найти(ВариантОтгрузить)            <> Неопределено;

	ШагиСписания = ТаблицаПоОписаниюПолей("ТаблицаДляСписания, ТаблицаОстатков, ПоляСоединения, ВариантОбеспечения");

	ВариантОбеспечения = ?(ОтгрузитьДоступен, ВариантОтгрузить,
	                     ?(НеОбеспечиватьДоступен, ВариантНеОбеспечивать, Неопределено));

	Если ВариантОбеспечения <> Неопределено Тогда
		ТаблицаДляСписания.ЗаполнитьЗначения(ВариантОбеспечения, "ВариантОбеспечения");
		ТаблицаДляСписания.ЗаполнитьЗначения('00010101', "ДатаОтгрузки");
	КонецЕсли;

	Возврат ТаблицаДляСписания;

КонецФункции

Функция ТабличнуюЧастьВТаблицу(ТаблицаТовары, Объект, ПутиКДанным, ИндексыСтрок = Неопределено)

	Хранилище = СоздатьХранилищеЗаполнитьИзОбъекта(Объект, ПутиКДанным);
	Таблица = ТаблицаПоОписаниюПолей(ПутиКДаннымПоУмолчанию());

	Если ИндексыСтрок = Неопределено Тогда

		ВГраница = ТаблицаТовары.Количество() - 1;
		Для Индекс = 0 По ВГраница Цикл

			СтрокаТовары = ТаблицаТовары[Индекс];
			ЗаполнитьЗначенияСвойств(Хранилище, СтрокаТовары);

			Если Хранилище.Отменено = Истина Или Хранилище.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Таблица.Добавить();
			ОбеспечениеКлиентСервер.ЗаполнитьЗначенияСвойствСРазличемИмен(НоваяСтрока, Хранилище, ПутиКДанным);

			НоваяСтрока.Идентификатор = Индекс;

		КонецЦикла;

	Иначе

		Для Каждого Индекс Из ИндексыСтрок Цикл

			СтрокаТовары = ТаблицаТовары[Индекс];
			ЗаполнитьЗначенияСвойств(Хранилище, СтрокаТовары);

			Если Хранилище.Отменено = Истина Или Хранилище.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Таблица.Добавить();
			ОбеспечениеКлиентСервер.ЗаполнитьЗначенияСвойствСРазличемИмен(НоваяСтрока, Хранилище, ПутиКДанным);

			НоваяСтрока.Идентификатор = Индекс;

		КонецЦикла;

	КонецЕсли;

	Возврат Таблица;

КонецФункции

Процедура ЗаполнитьТипНоменклатурыВтаблице(Таблица)

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Индекс       КАК Индекс,
		|	Т.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВтНоменклатура
		|ИЗ
		|	&Таблица КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Индекс                        КАК Индекс,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	ВтНоменклатура КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО Т.Номенклатура = СпрНоменклатура.Ссылка";

	ТаблицаНоменклатуры = Новый ТаблицаЗначений();
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНоменклатуры.Колонки.Добавить("Индекс", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));
	Для Каждого Строка Из Таблица Цикл
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.Индекс = Таблица.Индекс(Строка);
	КонецЦикла;

	Запрос.УстановитьПараметр("Таблица", ТаблицаНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Таблица[Выборка.Индекс].ТипНоменклатуры = Выборка.ТипНоменклатуры;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьВКорректировкуУчестьПриИнвентаризации(Корректировка, Таблица, ТаблицаОформлено)
	
	Если Не ТаблицаОформлено.Колонки.Найти("КоличествоКорректировка") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("КодСтроки");
	Для Каждого СтрокаТовары Из Таблица Цикл
		
		Если СтрокаТовары.КодСтроки > 0 Тогда
			
			Отбор.КодСтроки = СтрокаТовары.КодСтроки;
			НайденныеСтроки = ТаблицаОформлено.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				КоличествоИзменение = НайденныеСтроки[0].Количество + НайденныеСтроки[0].КоличествоКорректировка
					- СтрокаТовары.Количество;
				Количество = 0;
				Если КоличествоИзменение > 0 Тогда
					Количество = Мин(НайденныеСтроки[0].КоличествоКорректировка, КоличествоИзменение);
				КонецЕсли;
				Если Количество > 0 Тогда
					ДобавитьСтрокуКорректировки(Корректировка, Количество, СтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСписаниеСУчетомОстатков(ДопустимыеВарианты)
	
	ВариантРезервировать       = Перечисления.ВариантыОбеспечения.СоСклада;
	ВариантРезервироватьКСроку = Перечисления.ВариантыОбеспечения.ИзЗаказов;
	
	ВариантОбеспечить          = Перечисления.ВариантыОбеспечения.Требуется;
	ВариантНеОбеспечивать      = Перечисления.ВариантыОбеспечения.НеТребуется;
	ВариантОбособленно         = Перечисления.ВариантыОбеспечения.Обособленно;
	
	РезервироватьДоступен       = ДопустимыеВарианты.Найти(ВариантРезервировать)       <> Неопределено;
	РезервироватьКСрокуДоступен = ДопустимыеВарианты.Найти(ВариантРезервироватьКСроку) <> Неопределено;
	
	ОбособленноДоступен          = ДопустимыеВарианты.Найти(ВариантОбособленно)          <> Неопределено;
	ОбеспечитьДоступен           = ДопустимыеВарианты.Найти(ВариантОбеспечить)           <> Неопределено;
	НеОбеспечиватьДоступен       = ДопустимыеВарианты.Найти(ВариантНеОбеспечивать)       <> Неопределено;
	
	ЭтоСписаниеСУчетомОстатков = РезервироватьДоступен Или РезервироватьКСрокуДоступен
		Или ОбособленноДоступен Или ОбеспечитьДоступен Или НеОбеспечиватьДоступен;
	
	Возврат ЭтоСписаниеСУчетомОстатков;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИспользоватьУправлениеПеремещениемОбособленныхТоваровВычислитьИЗаписать() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.УчетЗатрат
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Константа.РазрешитьОбособлениеТоваровСверхПотребности КАК РазрешитьОбособлениеТоваровСверхПотребности
		|ГДЕ
		|	РазрешитьОбособлениеТоваровСверхПотребности.Значение";
		
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьУправлениеПеремещениемОбособленныхТоваров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	УстанавливаемоеЗначение = Не Запрос.Выполнить().Пустой();
	МенеджерКонстанты = Константы.ИспользоватьУправлениеПеремещениемОбособленныхТоваров.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Прочитать();
	Если МенеджерКонстанты.Значение <> УстанавливаемоеЗначение Тогда
		МенеджерКонстанты.Значение = УстанавливаемоеЗначение;
		МенеджерКонстанты.ДополнительныеСвойства.Вставить("КонстантаВычисленаПослеБлокировки", Истина);
		МенеджерКонстанты.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаКоличестваДнейМеждуДатамиГрафика() Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Календарь    КАК Календарь,
		|	Т.Дата1        КАК Дата1,
		|	Т.Дата2        КАК Дата2,
		|
		|	График2.КоличествоДнейВГрафикеСНачалаГода
		|		- График1.КоличествоДнейВГрафикеСНачалаГода
		|		+ ЕСТЬNULL(КонецГода.КоличествоДнейВГрафикеСНачалаГода, 0) КАК КоличествоДней
		|
		|ПОМЕСТИТЬ ВтИнтервалКалендарногоГрафика
		|ИЗ
		|	ВтПараметрыПоиска КАК Т
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК График1
		|		ПО Т.Календарь = График1.Календарь
		|			И График1.ДатаГрафика = Т.Дата1
		|			И График1.Год = ГОД(Т.Дата1)
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК График2
		|		ПО Т.Календарь = График2.Календарь
		|			И График2.ДатаГрафика = Т.Дата2
		|			И График2.Год = ГОД(Т.Дата2)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КонецГода //на случай, если даты в разных годах
		|		ПО Т.Календарь = КонецГода.Календарь
		|			И КонецГода.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Т.Дата1, ГОД), ДЕНЬ)
		|			И КонецГода.Год = ГОД(Т.Дата1)
		|			И ГОД(Т.Дата1) + 1 = ГОД(Т.Дата2)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Календарь, Дата1, Дата2
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтПараметрыПоиска;
		|
		|/////////////////////////////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

Процедура СообщитьОбОшибкахЗаписиПараметровОбеспеченияПотребностей(Таблица, ОбработанныеСтроки, ТекстДанныеНеЗаписаны, ТекстДанныеЗаписаныЧастично) Экспорт
	
	ВсегоСтрокВТаблице = Таблица.Количество();
	ВсегоСтрокЗаписано = ОбработанныеСтроки.Количество();
	Если ВсегоСтрокВТаблице > 0 И ВсегоСтрокЗаписано = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстДанныеНеЗаписаны;
		Сообщение.Сообщить();
	ИначеЕсли ВсегоСтрокВТаблице > ВсегоСтрокЗаписано Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстДанныеЗаписаныЧастично;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

Функция УсловияЗакупокПартнера(Партнер, Цена = 0) Экспорт

	Результат = Новый Структура();
	
	ВалютаУпрУчет = Константы.ВалютаУправленческогоУчета.Получить();
	Результат.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	Результат.Вставить("Валюта",     ВалютаУпрУчет);
	Результат.Вставить("Цена",       Цена);
	Результат.Вставить("ВидЦеныПоставщика", Справочники.ВидыЦенПоставщиков.ПустаяСсылка());
	
	УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер);
	Если УсловияЗакупок <> Неопределено И ЗначениеЗаполнено(УсловияЗакупок.Соглашение) Тогда
		
		Результат.Соглашение        = УсловияЗакупок.Соглашение;
		Результат.Валюта            = УсловияЗакупок.Валюта;
		Результат.ВидЦеныПоставщика = УсловияЗакупок.ВидЦеныПоставщика;
		
		Если Цена <> 0 Тогда
			
			Коэффициент = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
				ВалютаУпрУчет, УсловияЗакупок.Валюта, ТекущаяДатаСеанса());
			Результат.Цена = Результат.Цена * Коэффициент;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

//Функция ПраваДоступаНаЗаписьСпособаИлиМетода. Получает право на изменение/добавление в логистические регистры.
//В частности используется при настройке форм работы с логистическими параметрами.
//Возвращаемое значение - структура со следующими полями:
//	ВариантыОбеспечения - Булево, истина, если есть необходимые права на регистры "ВариантыОбеспеченияТоварами",
//		"ВариантыОбеспеченияРаботами".
//	ТоварныеОграничения - Булево, истина, если есть необходимые права на регистр "ТоварныеОграничения".
//
Функция ПраваДоступаНаЗаписьСпособаИлиМетода() Экспорт
	
	Результат = Новый Структура("ВариантыОбеспечения, ТоварныеОграничения");
	Результат.ВариантыОбеспечения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыОбеспеченияТоварами)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыОбеспеченияРаботами);
	Результат.ТоварныеОграничения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ТоварныеОграничения);
	Возврат Результат;
	
КонецФункции

// Метод регламентного задания РасчетРекомендацийПоддержанияЗапасов.
// Производит расчет статистики потребления и рекомендаций по изменению поддержания запасов товаров на складах.
//
Процедура РасчетРекомендацийПоддержанияЗапасов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетРекомендацийПоддержанияЗапасов);
	
	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		ТекущаяДатаСеанса(), ПериодКлассификации, - КоличествоПериодовКлассификации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеОграничения.Номенклатура КАК Номенклатура,
		|	ТоварныеОграничения.Характеристика КАК Характеристика,
		|	ТоварныеОграничения.Склад КАК Склад
		|ПОМЕСТИТЬ ТоварыСреднедневногоПотребления
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|ГДЕ
		|	ТоварныеОграничения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (ТоварныеОграничения.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ИЛИ ТоварныеОграничения.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.Склад
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ТоварыНаСкладахОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	УстановитьПривилегированныйРежим(Истина);
	ТоварыНаСкладах = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РегистрыСведений.ТоварныеОграничения.РассчитатьСтатистикуПотребленияТоваров(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура РасчетРекомендацийПоддержанияЗапасовНаСкладе(Параметры, АдресХранилища) Экспорт
	
	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		ТекущаяДатаСеанса(), ПериодКлассификации, - КоличествоПериодовКлассификации);
		
	ДатаАктуальности = ?(Параметры.Свойство("ДатаАктуальности"), Параметры.ДатаАктуальности, Период.ДатаОкончания);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыДляРекомендаций.Номенклатура КАК Номенклатура,
		|	ТоварыДляРекомендаций.Характеристика КАК Характеристика,
		|	ТоварыДляРекомендаций.Склад КАК Склад
		|ПОМЕСТИТЬ ТоварыСреднедневногоПотребления
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныеОграничения.Номенклатура КАК Номенклатура,
		|		ТоварныеОграничения.Характеристика КАК Характеристика,
		|		ТоварныеОграничения.Склад КАК Склад,
		|		ТоварныеОграничения.ДатаРасчетаРекомендаций КАК ДатаРасчетаРекомендаций
		|	ИЗ
		|		РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|	ГДЕ
		|		ТоварныеОграничения.Склад = &Склад
		|		И ТоварныеОграничения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И (ТоварныеОграничения.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ТоварныеОграничения.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыНаСкладахОбороты.Номенклатура,
		|		ТоварыНаСкладахОбороты.Характеристика,
		|		ТоварыНаСкладахОбороты.Склад,
		|		ДАТАВРЕМЯ(1, 1, 1)
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНачала, &ДатаОкончания, , Склад = &Склад) КАК ТоварыНаСкладахОбороты) КАК ТоварыДляРекомендаций
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыДляРекомендаций.Номенклатура,
		|	ТоварыДляРекомендаций.Склад,
		|	ТоварыДляРекомендаций.Характеристика
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ТоварыДляРекомендаций.ДатаРасчетаРекомендаций) < &ДатаАктуальности";
	
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);	
	Запрос.УстановитьПараметр("ДатаНачала",    Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	УстановитьПривилегированныйРежим(Истина);
	ТоварыНаСкладах = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РегистрыСведений.ТоварныеОграничения.РассчитатьСтатистикуПотребленияТоваров(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

// Возвращает текст запроса параметров обеспечения с рассчитанными минимальным и максимальным количествами запаса
//   для всех методов обеспечения.
//
// Возвращаемое значение:
//   Строка - Текст запроса.
//
Функция СформироватьВтПараметровОбеспеченияТоваров(МенеджерВременныхТаблиц) Экспорт
	
	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		ТекущаяДатаСеанса(), ПериодКлассификации, - КоличествоПериодовКлассификации);
	ПериодКлассификацииДатаНачала    = Период.ДатаНачала;
	ПериодКлассификацииДатаОкончания = Период.ДатаОкончания;
	
	АдресГрафикаБезКалендаря = Обработки.ОбеспечениеПотребностей.СоздатьГрафикВХранилище(
		ПериодКлассификацииДатаНачала, ПериодКлассификацииДатаОкончания);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов() +
		"ВЫБРАТЬ
		|	Т.Склад          КАК Склад,
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	
		|	ЕСТЬNULL(ТоварныеОграничения.МинимальноеКоличествоЗапаса, 0)            КАК МинимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(ТоварныеОграничения.МаксимальноеКоличествоЗапаса, 0)           КАК МаксимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(ТоварныеОграничения.СтраховоеКоличествоЗапаса, 0)              КАК СтраховоеКоличествоЗапаса,
		|	ЕСТЬNULL(ТоварныеОграничения.НормаПотребления, 0)                       КАК НормаПотребления,
		|	ЕСТЬNULL(ТоварныеОграничения.МетодОбеспеченияПотребностей,
		|		ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)) КАК МетодОбеспеченияПотребностей,
		|	
		|	ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)) КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ФормироватьПлановыеЗаказы, ЛОЖЬ)                   КАК ФормироватьПлановыеЗаказы
		|
		|ПОМЕСТИТЬ ВтТоварыПараметры
		|ИЗ
		|	ВтТовары КАК Т
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|		ПО &ПодстановкаТоварногоОграничения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтФорматыСкладов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.СпособОбеспечения КАК Ссылка
		|ПОМЕСТИТЬ ВтСпособыОбеспечения
		|ИЗ
		|	ВтТоварыПараметры КАК Т
		|;
		|/////////////////////////////////
		|" + Справочники.СпособыОбеспеченияПотребностей.ВременнаяТаблицаДатПоставок() +
		"////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтСпособыОбеспечения
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Склад              КАК Склад,
		|	Т.СпособОбеспечения  КАК СпособОбеспечения
		|ПОМЕСТИТЬ ВтСкладыИСпособыОбеспечения
		|ИЗ
		|	ВтТоварыПараметры КАК Т
		|;
		|/////////////////////////////////
		|" + Справочники.СпособыОбеспеченияПотребностей.ВременнаяТаблицаИнтерваловРаботыСкладов() +
		"////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтСкладыИСпособыОбеспечения
		|;
		|ВЫБРАТЬ
		|	Т.Склад          КАК Склад,
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТоварыСреднедневногоПотребления
		|ИЗ
		|	ВтТоварыПараметры КАК Т
		|ГДЕ
		|	Т.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике)
		|;
		|/////////////////////////////////
		|" + Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаСтатистикиПотребления() +
		"////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыСреднедневногоПотребления
		|;
		|ВЫБРАТЬ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	
		|	Т.СпособОбеспечения                              КАК СпособОбеспеченияПотребностей,
		|	Т.МетодОбеспеченияПотребностей                   КАК МетодОбеспеченияПотребностей,
		|	Т.НормаПотребления                               КАК НормаПотребления,
		|	ЕСТЬNULL(Статистика.СреднедневноеПотребление, 0) КАК СреднедневноеПотребление,
		|	Т.СтраховоеКоличествоЗапаса                      КАК СтраховоеКоличествоЗапаса,
		|	ЕСТЬNULL(ВЫБОР Т.МетодОбеспеченияПотребностей
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс) ТОГДА Т.МаксимальноеКоличествоЗапаса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме) ТОГДА Т.НормаПотребления * 
		|			ВЫБОР КОГДА НЕ Т.ФормироватьПлановыеЗаказы ТОГДА
		|					ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод
		|				ИНАЧЕ
		|					ИнтервалМеждуПоставками.КоличествоДней
		|			КОНЕЦ
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике) ТОГДА Статистика.СреднедневноеПотребление *
		|			ВЫБОР КОГДА НЕ Т.ФормироватьПлановыеЗаказы ТОГДА
		|					ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод
		|				ИНАЧЕ
		|					ИнтервалМеждуПоставками.КоличествоДней
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ, 0)                                        КАК МаксимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(ВЫБОР Т.МетодОбеспеченияПотребностей
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс) ТОГДА Т.МинимальноеКоличествоЗапаса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме) ТОГДА Т.НормаПотребления *
		|			ВЫБОР КОГДА ВозможнаяПоставка.КоличествоДней > ПлановаяПоставка.КоличествоДней ТОГДА
		|					ПлановаяПоставка.КоличествоДней
		|				ИНАЧЕ
		|					ВозможнаяПоставка.КоличествоДней
		|			КОНЕЦ
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике) ТОГДА ЕСТЬNULL(Статистика.СреднедневноеПотребление, 0) *
		|			ВЫБОР КОГДА ВозможнаяПоставка.КоличествоДней > ПлановаяПоставка.КоличествоДней ТОГДА
		|					ПлановаяПоставка.КоличествоДней
		|				ИНАЧЕ
		|					ВозможнаяПоставка.КоличествоДней
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ, 0)                                        КАК МинимальноеКоличествоЗапаса
		|ПОМЕСТИТЬ ВтПараметрыОбеспеченияТоваров
		|ИЗ
		|	ВтТоварыПараметры КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаПотребления КАК Статистика
		|		ПО Т.Номенклатура = Статистика.Номенклатура
		|			И Т.Характеристика = Статистика.Характеристика
		|			И Т.Склад = Статистика.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари КАК СпрКалендарьСклада
		|		ПО ВЫБОР КОГДА Т.Склад.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|					Т.Склад.Календарь
		|				ИНАЧЕ
		|					ОсновнойКалендарь.Значение
		|			КОНЕЦ = СпрКалендарьСклада.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияДатыПоставок КАК ТаблицаСпособовОбеспечения
		|		ПО Т.СпособОбеспечения = ТаблицаСпособовОбеспечения.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнтервалКалендарногоГрафика КАК ВозможнаяПоставка
		|		ПО СпрКалендарьСклада.Ссылка = ВозможнаяПоставка.Календарь
		|		 И &НачалоТекущегоДня = ВозможнаяПоставка.Дата1
		|		 И ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки = ВозможнаяПоставка.Дата2
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнтервалКалендарногоГрафика КАК ПлановаяПоставка
		|		ПО СпрКалендарьСклада.Ссылка = ПлановаяПоставка.Календарь
		|		 И &НачалоТекущегоДня = ПлановаяПоставка.Дата1
		|		 И ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки = ПлановаяПоставка.Дата2
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнтервалКалендарногоГрафика КАК ИнтервалМеждуПоставками
		|		ПО СпрКалендарьСклада.Ссылка = ИнтервалМеждуПоставками.Календарь
		|		 И ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки = ИнтервалМеждуПоставками.Дата1
		|		 И ТаблицаСпособовОбеспечения.ДатаСледующейПоставки = ИнтервалМеждуПоставками.Дата2
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтТоварыПараметры
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтСпособыОбеспеченияДатыПоставок
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтИнтервалКалендарногоГрафика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СтатистикаПотребления";
	
	Запрос.Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Запрос.Текст,
		"ПодстановкаТоварногоОграничения");
	Запрос.Текст = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(Запрос.Текст,
		"ПодстановкаОсновногоСпособаОбеспечения");
	
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ГрафикБезКалендаря",  ПолучитьИзВременногоХранилища(АдресГрафикаБезКалендаря));
	Запрос.УстановитьПараметр("ПериодКлассификацииДатаНачала",    ПериодКлассификацииДатаНачала);
	Запрос.УстановитьПараметр("ПериодКлассификацииДатаОкончания", КонецДня(ПериодКлассификацииДатаОкончания));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область Автозаказ

Процедура ЗаписатьДокумент(ДокументОбъект, СообщенияОбОшибках)

	ОшибокНеОбнаружено = ДокументОбъект.ПроверитьЗаполнение();

	Если Не ОшибокНеОбнаружено Тогда

		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);

	Иначе //нет ошибок, проводим документ

		Попытка

			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

		Исключение

			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ИмяСобытияЖурнала = НСтр("ru = 'Обеспечение потребностей.Создание заказов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		КонецПопытки;

	КонецЕсли;

	Ошибки = ПолучитьСообщенияПользователю(Истина);
	Для Каждого Ошибка Из Ошибки Цикл

		Ошибка.КлючДанных = ДокументОбъект.Ссылка;
		СообщенияОбОшибках.Добавить(Ошибка);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеФормыПодбораСерий

Функция ПараметрыПолученияТаблицыДоступныхДействий() Экспорт
	
	ПараметрыПолученияТаблицыДоступныхДействий = Новый Структура();
	ПараметрыПолученияТаблицыДоступныхДействий.Вставить("ИсключаемыеВарианты", Новый Массив);
	Возврат ПараметрыПолученияТаблицыДоступныхДействий;
	
КонецФункции

Функция ТаблицаДоступныхДействийВызовИзФормыПодбора(Отбор, АдресаВХранилище, НадписьОбеспечено, Параметры) Экспорт
	
	ТаблицаПодобраноРанее = ПолучитьИзВременногоХранилища(АдресаВХранилище.АдресТаблицыПодобраноРанее);
	
	// Фиктивная таблица, нужна для вызова "ОбеспечениеСервер.ПараметрыВыбораОбеспеченияУниверсальный".
	ТаблицаОформитьПоНакладным = Новый ТаблицаЗначений();
	ТаблицаОформитьПоНакладным.Колонки.Добавить("КодСтроки");
	ТаблицаОформитьПоНакладным.Колонки.Добавить("Ссылка");
	ТаблицаОформитьПоНакладным.Колонки.Добавить("Номенклатура");
	ТаблицаОформитьПоНакладным.Колонки.Добавить("Характеристика");
	ТаблицаОформитьПоНакладным.Колонки.Добавить("Склад");
	ТаблицаОформитьПоНакладным.Колонки.Добавить("Серия");
	ТаблицаОформитьПоНакладным.Колонки.Добавить("Количество");
	ТаблицаОформитьПоНакладным.Колонки.Добавить("КоличествоПриход");
	ТаблицаОформитьПоНакладным.Колонки.Добавить("КоличествоКорректировка");
	
	// Фиктивная таблица, нужна для вызова "ОбеспечениеСервер.ПараметрыВыбораОбеспеченияУниверсальный".
	ТаблицаИзРедактируемойСтроки = ОбеспечениеСервер.ТаблицаПотребностей();
	ТаблицаИзРедактируемойСтроки.Добавить();
	
	ПараметрыВыбораОбеспеченияУниверсальный = ПараметрыВыбораОбеспеченияУниверсальный(
		ТаблицаИзРедактируемойСтроки,
		ТаблицаОформитьПоНакладным,
		ТаблицаПодобраноРанее,
		Неопределено);
	
	ТаблицаКорректировки = ПолучитьИзВременногоХранилища(ПараметрыВыбораОбеспеченияУниверсальный.АдресКорректировки);
	
	ТаблицыАналитики = ТаблицыАналитики(Отбор);
	ДоступныеОстатки = ОбеспечениеСервер.ДоступныеОстатки(ТаблицыАналитики, ТаблицаКорректировки);
	ПлановыеПоставки = ОбеспечениеСервер.ПлановыеПоставки(ТаблицыАналитики);
	НадписьОбеспечено = НадписьОбеспечено(ДоступныеОстатки);
	
	Результат = ТаблицаДействийИзТаблицыОстатковИПлановыхПоставок(
		ДоступныеОстатки,
		ПлановыеПоставки,
		Параметры,
		Отбор);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаДоступныхДействийВызовИзФормыЗаказа(Отбор, АдресаВХранилище, НадписьОбеспечено, Параметры) Экспорт
	
	ТаблицаКорректировки = ПолучитьИзВременногоХранилища(АдресаВХранилище.АдресКорректировки);
	ТаблицыАналитики = ТаблицыАналитики(Отбор);
	ДоступныеОстатки = ОбеспечениеСервер.ДоступныеОстатки(ТаблицыАналитики, ТаблицаКорректировки);
	ПлановыеПоставки = ОбеспечениеСервер.ПлановыеПоставки(ТаблицыАналитики);
	НадписьОбеспечено = НадписьОбеспечено(ДоступныеОстатки);
	
	Результат = ТаблицаДействийИзТаблицыОстатковИПлановыхПоставок(
		ДоступныеОстатки,
		ПлановыеПоставки,
		Параметры,
		Отбор);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаДействийИзТаблицыОстатковИПлановыхПоставок(ДоступныеОстатки, ПлановыеПоставки, Параметры, Отбор)
	
	ПриращенияДоступностиИзНакопительногоИтога(ДоступныеОстатки);
	
	ВариантОтгрузить               = Перечисления.ВариантыОбеспечения.Отгрузить;
	ВариантОтгрузитьОбособленно    = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ВариантРезервировать           = Перечисления.ВариантыОбеспечения.СоСклада;
	ВариантИзЗаказов               = Перечисления.ВариантыОбеспечения.ИзЗаказов;
	ВариантКОбеспечению            = Перечисления.ВариантыОбеспечения.Требуется;
	ВариантНеОбеспечивать          = Перечисления.ВариантыОбеспечения.НеТребуется;
	ВариантОбеспечиватьОбособленно = Перечисления.ВариантыОбеспечения.Обособленно;
	
	СкрыватьВариантОбеспеченияОтгрузить = Параметры.ИсключаемыеВарианты.Найти(ВариантОтгрузить) <> Неопределено;
	СкрыватьВариантОбеспеченияОтгрузитьОбособленно = Параметры.ИсключаемыеВарианты.Найти(ВариантОтгрузитьОбособленно) <> Неопределено;
	СкрыватьВариантОбеспеченияРезервировать = Параметры.ИсключаемыеВарианты.Найти(ВариантРезервировать) <> Неопределено;
	СкрыватьВариантОбеспеченияИзЗаказов = Параметры.ИсключаемыеВарианты.Найти(ВариантИзЗаказов) <> Неопределено;
	СкрыватьВариантОбеспеченияКОбеспечению = Параметры.ИсключаемыеВарианты.Найти(ВариантКОбеспечению) <> Неопределено;
	СкрыватьВариантОбеспеченияНеОбеспечивать = Параметры.ИсключаемыеВарианты.Найти(ВариантНеОбеспечивать) <> Неопределено;
	СкрыватьВариантОбеспеченияОбеспечиватьОбособленно = Параметры.ИсключаемыеВарианты.Найти(ВариантОбеспечиватьОбособленно) <> Неопределено;

	ТекущаяДата = ТекущаяДатаСеанса();
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ВариантОбеспечения");
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Склад");
	Результат.Колонки.Добавить("Доступно");
	Результат.Колонки.Добавить("ДатаОтгрузки");
	
	ИспользоватьОбособленноеОбеспечение = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	
	ТипНоменклатуры = Отбор.ТипНоменклатуры;
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Если Не СкрыватьВариантОбеспеченияОтгрузить Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Доступно = 0;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор, "Номенклатура, Характеристика, Склад");
			НоваяСтрока.ВариантОбеспечения = ВариантОтгрузить;
			НоваяСтрока.ДатаОтгрузки = ТекущаяДата;
		КонецЕсли;
		
		Если Не СкрыватьВариантОбеспеченияНеОбеспечивать Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Доступно = 0;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор, "Номенклатура, Характеристика, Склад");
			НоваяСтрока.ВариантОбеспечения = ВариантНеОбеспечивать;
			НоваяСтрока.ДатаОтгрузки = ТекущаяДата;
		КонецЕсли;
		
		Возврат Результат;

	КонецЕсли;
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
		Если Не СкрыватьВариантОбеспеченияОтгрузитьОбособленно Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Доступно = 0;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор, "Номенклатура, Характеристика, Склад");
			НоваяСтрока.ВариантОбеспечения = ВариантОтгрузитьОбособленно;
			НоваяСтрока.ДатаОтгрузки = ТекущаяДата;
		КонецЕсли;
		
		Если Не СкрыватьВариантОбеспеченияОтгрузить Тогда
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор, "Номенклатура, Характеристика, Склад");
			НоваяСтрока.Доступно = 0;
			НоваяСтрока.ВариантОбеспечения = ВариантОтгрузить;
			НоваяСтрока.ДатаОтгрузки = ТекущаяДата;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДоступныеОстатки.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаДоступности)
			И Не СкрыватьВариантОбеспеченияИзЗаказов Тогда // добавляется действие "Резервировать к дате"
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Доступно = СтрокаТаблицы.Количество;
			
			НоваяСтрока.ВариантОбеспечения = ВариантИзЗаказов;
			НоваяСтрока.ДатаОтгрузки       = СтрокаТаблицы.ДатаДоступности;
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаДоступности) Тогда
			
			Если Не СкрыватьВариантОбеспеченияОтгрузить Тогда
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Доступно = СтрокаТаблицы.Количество;
				НоваяСтрока.ВариантОбеспечения = ВариантОтгрузить;
				НоваяСтрока.ДатаОтгрузки       = ТекущаяДата;	
			КонецЕсли;
			
			Если Не СкрыватьВариантОбеспеченияРезервировать Тогда
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Доступно = ?(СкрыватьВариантОбеспеченияОтгрузить, СтрокаТаблицы.Количество, 0);
				НоваяСтрока.ВариантОбеспечения = ВариантРезервировать;
				НоваяСтрока.ДатаОтгрузки       = ТекущаяДата;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СкрыватьВариантОбеспеченияОтгрузитьОбособленно Тогда
		ОбеспеченоПодНазначение = 0;
		Для Каждого СтрокаТаблицы Из ДоступныеОстатки.ТоварыОбособленные Цикл
			
			ОбеспеченоПодНазначение = Макс(СтрокаТаблицы.Количество, ОбеспеченоПодНазначение);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаДоступности) Тогда // добавляется действие "Отгрузить обособленно"
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Доступно = СтрокаТаблицы.Количество;
				НоваяСтрока.ВариантОбеспечения = ВариантОтгрузитьОбособленно;
				НоваяСтрока.ДатаОтгрузки = ТекущаяДата;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ПлановыеПоставки Цикл
		
		Если (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
			И Не СкрыватьВариантОбеспеченияКОбеспечению Тогда
		
			НоваяСтрока = Результат.Добавить(); // добавляется действие "К обеспечению"
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Доступно = 0;
			НоваяСтрока.ДатаОтгрузки = СтрокаТаблицы.ДатаДоступности;
			НоваяСтрока.ВариантОбеспечения = ВариантКОбеспечению;
			
		КонецЕсли;
		
		Если ИспользоватьОбособленноеОбеспечение И ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
			И Не СкрыватьВариантОбеспеченияОбеспечиватьОбособленно Тогда
			
			НоваяСтрока = Результат.Добавить(); // добавляется действие "Обеспечивать обособленно"
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Доступно = 0;
			НоваяСтрока.ДатаОтгрузки = СтрокаТаблицы.ДатаДоступности;
			НоваяСтрока.ВариантОбеспечения = ВариантОбеспечиватьОбособленно;
			
		КонецЕсли;
		
		Если Не СкрыватьВариантОбеспеченияНеОбеспечивать Тогда
			НоваяСтрока = Результат.Добавить(); // добавляется действие "Не обеспечивать"
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Доступно = 0;
			НоваяСтрока.ДатаОтгрузки = СтрокаТаблицы.ДатаДоступности;
			НоваяСтрока.ВариантОбеспечения = ВариантНеОбеспечивать;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ПриращенияДоступностиИзНакопительногоИтога(ДоступныеОстатки)
	
	ДоступныеОстатки.Товары.Сортировать("Номенклатура,Характеристика,Склад,ДатаДоступности", Новый СравнениеЗначений);
	ДоступныеОстатки.ТоварыОбособленные.Сортировать("Номенклатура,Характеристика,Назначение,Склад,ДатаДоступности", Новый СравнениеЗначений);
	ДоступныеОстатки.Работы.Сортировать("Номенклатура,Характеристика,Назначение,Подразделение,ДатаДоступности", Новый СравнениеЗначений);
	
	КлючСтроки = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСклад();
	ПриращенияДоступностиИзНакопительногоИтогаТаблицы(ДоступныеОстатки.Товары, КлючСтроки);
	
	КлючСтроки = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСкладНазначение();
	ПриращенияДоступностиИзНакопительногоИтогаТаблицы(ДоступныеОстатки.ТоварыОбособленные, КлючСтроки);
	
	КлючСтроки = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаПодразделениеНазначение();
	ПриращенияДоступностиИзНакопительногоИтогаТаблицы(ДоступныеОстатки.Работы, КлючСтроки);
	
КонецПроцедуры

Процедура ПриращенияДоступностиИзНакопительногоИтогаТаблицы(Таблица, КлючСтроки)

	ВсегоСтрок = Таблица.Количество();
	
	Если ВсегоСтрок < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Для Счетчик = 1 По ВсегоСтрок -1 Цикл
		
		СтрокаТаблицы = Таблица[ВсегоСтрок - Счетчик];
		ЗаполнитьЗначенияСвойств(КлючСтроки, СтрокаТаблицы);
		ПредыдущаяСтрокаТаблицы = Таблица[ВсегоСтрок - Счетчик - 1];
		
		ИзмениласьЗапись = ОбеспечениеКлиентСервер.ИзменилсяКлюч(КлючСтроки, ПредыдущаяСтрокаТаблицы);
		Если Не ИзмениласьЗапись Тогда
			
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - ПредыдущаяСтрокаТаблицы.Количество;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция НадписьОбеспечено(ДоступныеОстатки)
	
	ВНаличииВсего = 0;
	ДоступноВсего = 0;
	ВНаличииПодЗаказ = 0;
	ДоступноПодЗаказ = 0;
	
	Склад = Неопределено;
	ВНаличии = 0;
	Доступно = 0;
	Для Каждого СтрокаТаблицы Из ДоступныеОстатки.Товары Цикл
		
		Если СтрокаТаблицы.Склад <> Склад Тогда
			
			ВНаличииВсего = ВНаличииВсего + ВНаличии;
			ДоступноВсего = ДоступноВсего + Доступно;
			
			Склад = СтрокаТаблицы.Склад;
			ВНаличии = 0;
			Доступно = 0;
			
		КонецЕсли;
		
		Доступно = Макс(Доступно, СтрокаТаблицы.Количество);
		ВНаличии = Макс(ВНаличии, ?(СтрокаТаблицы.ДатаДоступности = '00010101', СтрокаТаблицы.Количество, 0));
		
	КонецЦикла;
	ВНаличииВсего = ВНаличииВсего + ВНаличии;
	ДоступноВсего = ДоступноВсего + Доступно;
	
	Склад = Неопределено;
	ВНаличии = 0;
	Доступно = 0;
	Для Каждого СтрокаТаблицы Из ДоступныеОстатки.ТоварыОбособленные Цикл
		
		Если СтрокаТаблицы.Склад <> Склад Тогда
			
			ВНаличииПодЗаказ = ВНаличииПодЗаказ + ВНаличии;
			ДоступноПодЗаказ = ДоступноПодЗаказ + Доступно;
			
			Склад = СтрокаТаблицы.Склад;
			ВНаличии = 0;
			Доступно = 0;
			
		КонецЕсли;
		
		Доступно = Макс(Доступно, СтрокаТаблицы.Количество);
		ВНаличии = Макс(ВНаличии, ?(СтрокаТаблицы.ДатаДоступности = '00010101', СтрокаТаблицы.Количество, 0));
		
	КонецЦикла;
	ВНаличииПодЗаказ = ВНаличииПодЗаказ + ВНаличии;
	ДоступноПодЗаказ = ДоступноПодЗаказ + Доступно;
	
	Подразделение = Неопределено;
	Доступно = 0;
	Для Каждого СтрокаТаблицы Из ДоступныеОстатки.Работы Цикл
		
		Если СтрокаТаблицы.Склад <> Склад Тогда
			
			ДоступноПодЗаказ = ДоступноПодЗаказ + Доступно;
			
			Подразделение = СтрокаТаблицы.Подразделение;
			Доступно = 0;
			
		КонецЕсли;
		
		Доступно = Макс(Доступно, СтрокаТаблицы.Количество);
		
	КонецЦикла;
	ДоступноПодЗаказ = ДоступноПодЗаказ + Доступно;
	
	ВНаличииВсего = ВНаличииВсего + ВНаличииПодЗаказ;
	ДоступноВсего = ДоступноВсего + ДоступноПодЗаказ;
	
	НадписьОбеспечено = "";
	
	Если ДоступноПодЗаказ = 0 Тогда
		
		НадписьОбеспечено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В наличии - %1 ЕдиницаИзмерения. Ожидается - %2 ЕдиницаИзмерения.'"),
			ВНаличииВсего,
			ДоступноВсего - ВНаличииВсего);
		
	Иначе
		
		НадписьОбеспечено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В наличии - %1 ЕдиницаИзмерения. Ожидается - %2 ЕдиницаИзмерения. Из них под заказ поступило - %3 ЕдиницаИзмерения. Ожидается - %4 ЕдиницаИзмерения.'"),
			ВНаличииВсего,
			ДоступноВсего - ВНаличииВсего,
			ВНаличииПодЗаказ,
			ДоступноПодЗаказ - ВНаличииПодЗаказ);
		
	КонецЕсли;
	
	Возврат НадписьОбеспечено;
	
КонецФункции

Функция ТаблицыАналитики(Отбор)
	
	Склад            = Отбор.Склад;
	Подразделение    = Отбор.Подразделение;
	Назначение       = Отбор.Назначение;
	ТипНоменклатуры  = Отбор.ТипНоменклатуры;
	ПараметрыОтбораНоменклатуры = Новый Структура("Номенклатура, Характеристика", Отбор.Номенклатура, Отбор.Характеристика);
	Аналитики = Новый Структура();
	
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("Товар"));
	Аналитики.Вставить("Товары", Таблица);
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("Работа"));
	Аналитики.Вставить("Работы", Таблица);
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("ТоварОбособленный"));
	Аналитики.Вставить("ТоварыОбособленные", Таблица);
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
		НоваяСтрока = Аналитики.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыОтбораНоменклатуры);
		
	Иначе
		
		Если ЗначениеЗаполнено(Склад) Тогда
			
			Если Справочники.Склады.ЭтоГруппа(Склад) Тогда
				
				МассивСкладов = СкладыГруппы(Склад);
				
			Иначе
				
				МассивСкладов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Склад);
				
			КонецЕсли;
			
			Для Каждого Склад Из МассивСкладов Цикл
				
				Если ЗначениеЗаполнено(Назначение) Тогда
					
					НоваяСтрока = Аналитики.ТоварыОбособленные.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыОтбораНоменклатуры);
					НоваяСтрока.Склад = Склад;
					НоваяСтрока.Назначение = Назначение;
					
				КонецЕсли;
				
				НоваяСтрока = Аналитики.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыОтбораНоменклатуры);
				НоваяСтрока.Склад = Склад;
				
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СпрСклады.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Склады КАК СпрСклады
				|ГДЕ
				|	НЕ СпрСклады.ПометкаУдаления
				|	И НЕ СпрСклады.ЭтоГруппа";
				
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Назначение) Тогда
					
					НоваяСтрока = Аналитики.ТоварыОбособленные.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыОтбораНоменклатуры);
					НоваяСтрока.Склад = Выборка.Ссылка;
					НоваяСтрока.Назначение = Назначение;
					
				КонецЕсли;
				
				НоваяСтрока = Аналитики.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыОтбораНоменклатуры);
				НоваяСтрока.Склад = Выборка.Ссылка;
				
			КонецЦИкла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Аналитики;
	
КонецФункции

// Устанавливает статус для документов.
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок.
//                          Элементы массива - ссылки на документы, которым необхоимо установить требуемый статус.
//                          В модуле объекта документа должна быть определена процедура УстановитьСтатус().
//  Статус       - ПеречислениеСсылка - статус, который необходимо установить.
//
Процедура УстановитьСтатус(МассивСсылок, Статус) Экспорт
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");

	Для Каждого Ссылка Из МассивСсылок Цикл
		
		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
			Продолжить;
		КонецПопытки;
		
		// Получение объекта документа
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		// Установка статуса документа
		Если Не ДокументОбъект.УстановитьСтатус(Статус, Неопределено) Тогда
			Продолжить;
		КонецЕсли;
			
		// Запись документа
		Попытка
			
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция СдвинутьДатуОтгрузки(ДанныеЗаполнения, МинимальноДопустимаяДата, ОтгружатьОднойДатой)
	
	ТребуетсяСвертка = Ложь;
	
	МаксимальнаяДата = '00010101';
	Если ОтгружатьОднойДатой Тогда // необходимо определить максимальную дату отгрузки в данных заполнения.
		
		Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
			
			МаксимальнаяДата = Макс(МаксимальнаяДата, СтрокаОбеспечения.ДатаОтгрузки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МинимальнаяДата = Макс(МинимальноДопустимаяДата, МаксимальнаяДата, НачалоДня(ТекущаяДатаСеанса()));
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		
		Если СтрокаОбеспечения.Отгружено = 0 И СтрокаОбеспечения.ДатаОтгрузки < МинимальнаяДата Тогда
			
			СтрокаОбеспечения.ДатаОтгрузки = МинимальнаяДата;
			ТребуетсяСвертка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТребуетсяСвертка;
	
КонецФункции

Процедура СвернутьСтрокиДляОтгрузкиОднойДатой(ТаблицаОбеспечения, ЕстьДатаОтгрузки, ЕстьСерия)
	
	ВсегоСтрок = ТаблицаОбеспечения.Количество();
	
	Для Счетчик = 1 По ВсегоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаОбеспечения[ВсегоСтрок - Счетчик];
		
		Если Счетчик < ВсегоСтрок Тогда
			
			ПредыдущаяСтрока = ТаблицаОбеспечения[ВсегоСтрок - Счетчик - 1];
			
			СерииРавны = ?(ЕстьСерия, ПредыдущаяСтрока.Серия = СтрокаТаблицы.Серия, Истина);
			ДатыОтгрузкиРавны = ?(ЕстьДатаОтгрузки, ПредыдущаяСтрока.ДатаОтгрузки = СтрокаТаблицы.ДатаОтгрузки, Истина);
			Если ПредыдущаяСтрока.Идентификатор = СтрокаТаблицы.Идентификатор
				И ПредыдущаяСтрока.ВариантОбеспечения = СтрокаТаблицы.ВариантОбеспечения
				И СтрокаТаблицы.Склад = ПредыдущаяСтрока.Склад
				И СерииРавны
				И ДатыОтгрузкиРавны Тогда
				
				ПредыдущаяСтрока.Количество = ПредыдущаяСтрока.Количество + СтрокаТаблицы.Количество;
				ПредыдущаяСтрока.Отгружено  = ПредыдущаяСтрока.Отгружено  + СтрокаТаблицы.Отгружено;
				ПредыдущаяСтрока.ДатаОтгрузки = Макс(ПредыдущаяСтрока.ДатаОтгрузки, СтрокаТаблицы.ДатаОтгрузки);
				
				Если ТипЗнч(ТаблицаОбеспечения) = Тип("Массив") Тогда
					ТаблицаОбеспечения.Удалить(ВсегоСтрок - Счетчик);
				Иначе
					ТаблицаОбеспечения.Удалить(СтрокаТаблицы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
