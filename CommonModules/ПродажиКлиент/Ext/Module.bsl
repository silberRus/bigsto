////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для обработки действий пользователя
// в процессе работы с документами продажи.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает наибольшую из дат аванса в строке тч ЭтапыОплаты
//
// Параметры:
//   ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - этапы оплаты, в которых необходимо рассчитать дату аванса.
//
// Возвращаемое значение:
//   Дата - максимальная дата аванса, если дат аванса нет, то пустая дата.
//
Функция МаксимальнаяДатаАванса(ЭтапыГрафикаОплаты) Экспорт
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки") Или
			ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения") Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МаксДатаАванса;
	
КонецФункции

// Процедура обработки события "ПриНачалеРедактирования" табличной части документа продажи
//
// Параметры:
//	Объект        - Форма - форма документа, в котором возникло событие
//	ИмяТаблицы    - Строка - имя таблицы, из которой произошло событие
//	СтрокаТаблицы - ДанныеФормыЭлементКоллекции - обрабатываемая строка табличной части документа
//	НоваяСтрока   - Булево - флаг редактирования новой строки
//	Копирование   - Булево - флаг редактирования путем копирования строки
//
Процедура СтрокаНоменклатурыПриНачалеРедактирования(Форма, ИмяТаблицы, СтрокаТаблицы, НоваяСтрока, Копирование) Экспорт

	Если НоваяСтрока И НЕ Копирование Тогда

		Если Не Форма.ИспользоватьСоглашенияСКлиентами И СтрокаТаблицы.Свойство("ВидЦены") Тогда
			
			Таблица = Форма.Объект[ИмяТаблицы];
			
			Если Таблица.Количество() > 1 Тогда
				СтрокаТаблицы.ВидЦены = Таблица[СтрокаТаблицы.НомерСтроки - 2].ВидЦены;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦены) Тогда
				СтрокаТаблицы.ВидЦены = Форма.ВидЦеныПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя о перезаполнении желаемой даты отгрузки.
//
Процедура ОповеститьОПерезаполненииЖелаемойДатыОтгрузки() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Желаемая дата отгрузки перезаполнена'"),
		,
		НСтр("ru='Желаемая дата отгрузки перезаполнена с учетом максимальной даты аванса.'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

#Область ПроцедурыИФункцииРаботыССчетамиФактурами

// Создает документ "Счет-фактура выданный".
//
// Параметры:
//  Форма - Форма - Форма, из которой вызвана команда. Устанавливается владелецем открываемой формы счета-фактуры;
//  ДанныеЗаполнения - Структура - Данные заполнения нового счета-фактуры.
//
Процедура ВвестиСчетФактуру(Форма, ДанныеЗаполнения) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ДанныеЗаполнения, Форма", ДанныеЗаполнения, Форма);
	
	Оповещение = Новый ОписаниеОповещения(
		"ВвестиСчетФактуруЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПроверитьВозможностьСозданияСчетФактуры(Форма, Оповещение);
	
КонецПроцедуры

// Обработчик завершения ввода счета-фактуры, открывает форму нового счета-фактуры в случае утвердительного ответа.
//
// Параметры:
//  Результат               - КодВозвратаДиалога - вариант ответа на вопрос, выбранный пользователем.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ВвестиСчетФактуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Или Результат = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ЗначениеЗаполнено(ДополнительныеПараметры.ДанныеЗаполнения.ДокументОснование) Тогда
			ДополнительныеПараметры.ДанныеЗаполнения.ДокументОснование = ДополнительныеПараметры.Форма.Объект.Ссылка;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Основание", ДополнительныеПараметры.ДанныеЗаполнения);
		ОткрытьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", ПараметрыФормы, ДополнительныеПараметры.Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет проведен ли документ, из которого создается счет-фактура.
// Предлагает провести его, если нужно, и вызывает создание счета-фактуры.
//
// Параметры:
//  Форма      - УправляемаяФорма - Форма, из которой вызвана команда создания.
//  Оповещение - ОписаниеОповещения - Процедура, которая вызовет создание счета-фактуры при успешной проверке.
//
Процедура ПроверитьВозможностьСозданияСчетФактуры(Форма, Оповещение) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
		Или Не Форма.Объект.Проведен
		Или Форма.Модифицированность Тогда
		
		ДополнительныеПараметры = Новый Структура("Оповещение, Форма", Оповещение, Форма);
		ОповещениеВопроса = Новый ОписаниеОповещения(
			"ПроверитьВозможностьСозданияСчетФактурыЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Ввод счета-фактуры возможен только после проведения документа, провести документ?'");
		ПоказатьВопрос(ОповещениеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
	
КонецПроцедуры

// Обработчик проверки возможности создания счет-фактуры.
//
// Параметры:
//  РезультатВопроса        - КодВозвратаДиалога - вариант ответа на вопрос, выбранный пользователем.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПроверитьВозможностьСозданияСчетФактурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ВводитьСчетФактуру = Ложь;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Форма = ДополнительныеПараметры.Форма;
			ВводитьСчетФактуру = Форма.Записать(
				Новый Структура(
					"РежимЗаписи, ДействиеПослеЗаписи",
					РежимЗаписиДокумента.Проведение, ДополнительныеПараметры.Оповещение));
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ВводитьСчетФактуру);
	
КонецПроцедуры

// Общая процедура обработки навигационной ссылки текста счета-фактуры в документах продажи.
// В завимости от выбранной ссылки вызывает создание/открытие счетов-фактуры документа.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой располагается элемент.
//  НавигационнаяСсылка - Строка - Значение гиперссылки форматированной строки.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылкиТекстСчетФактура(Форма, НавигационнаяСсылка, СтандартнаяОбработка,
	Организация, ХозяйственнаяОперация = Неопределено) Экспорт
	
	Если НавигационнаяСсылка = "ОткрытьСписокСчетовФактурВыданных" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураОтбор = Новый Структура(
			"ДокументОснование, Организация, ПометкаУдаления",
			Форма.Объект.Ссылка, Организация, Ложь);
		
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбор);
		
		ОткрытьФорму("Документ.СчетФактураВыданный.ФормаСписка", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "СоздатьКорректировочныйСчетФактуру" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("ДокументОснование", Форма.Объект.Ссылка);
		ДанныеСчетаФактуры.Вставить("Организация",       Организация);
		ДанныеСчетаФактуры.Вставить("Корректировочный",  Истина);
		
		ВвестиСчетФактуру(Форма, ДанныеСчетаФактуры);
		
	ИначеЕсли НавигационнаяСсылка = "ВвестиНовыйСчетФактуру" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("ДокументОснование", Форма.Объект.Ссылка);
		ДанныеСчетаФактуры.Вставить("Организация",       Организация);
		
		Если ХозяйственнаяОперация <> Неопределено Тогда
			Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон") Тогда
				ДанныеСчетаФактуры.Вставить("Корректировочный", Истина);
			ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИсправлениеОшибок")
				  ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИсправлениеПрочегоНачисленияНДС") Тогда
				ДанныеСчетаФактуры.Вставить("Исправление", Истина);
			КонецЕсли;
		КонецЕсли;
		
		ВвестиСчетФактуру(Форма, ДанныеСчетаФактуры);
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьСписокТранспортныхНакладных" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьСписокТранспортныхНакладных(Форма);
		
	ИначеЕсли НавигационнаяСсылка = "СоздатьТранспортнуюНакладную" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоздатьТранспортнуюНакладную(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСГТД

// Проверяет возможность создания транспортной накладной.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура ПолучитьОбновитьИнформациюТранспортныхНакладных(Форма) Экспорт
	
	ПараметрыТТН = ПродажиВызовСервера.ПроверитьИспользованиеИДоступТТН();
	
	Если ПараметрыТТН.ИспользоватьТТН И ПараметрыТТН.Просмотр Тогда 
		ДанныеТранспортныхНакладных = ПродажиВызовСервера.ПолучитьДанныеТранспортныхНакладныхНаСервере(Форма.Объект.Ссылка);
		ПродажиКлиентСервер.ОбновитьИнформациюТранспортныхНакладных(Форма, ДанныеТранспортныхНакладных, ПараметрыТТН);
	Иначе
		ТекстТТН = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик проверки возможности создания транспортной накладной.
//
// Параметры:
//  Результат               - Булево - Истина, если можно создавать транспортную накладную.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершениеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(ДополнительныеПараметры.Форма, Результат);
	
КонецПроцедуры

// Обработчик ответа после проверки возможности создания транспортной накладной.
//
// Параметры:
//  КодОтвета               - КодВозвратаДиалога - вариант ответа на вопрос, выбранный пользователем.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт 
	
	Результат = Истина;
	
	Если КодОтвета = КодВозвратаДиалога.ОК И ДополнительныеПараметры.Форма.ПроверитьЗаполнение() Тогда
		Попытка
			ДействиеПослеЗаписи = Новый ОписаниеОповещения(
				"ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершениеОповещение",
				ПродажиКлиент,
				ДополнительныеПараметры);
			Результат = ДополнительныеПараметры.Форма.Записать(
				Новый Структура(
					"РежимЗаписи, ДействиеПослеЗаписи",
					РежимЗаписиДокумента.Проведение, ДействиеПослеЗаписи));
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(ДополнительныеПараметры.Форма, Результат);
	
КонецПроцедуры

// Создает транспортную накладную в случае утвердительного ответа пользователя.
//
// Параметры:
//  РезультатВопроса        - КодВозвратаДиалога - вариант ответа на вопрос, выбранный пользователем.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура СоздатьТранспортнуюНакладнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОформитьТранспортнуюНакладную(ДополнительныеПараметры.Форма);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВыбратьТранспортнуюНакладную(ДополнительныеПараметры.Форма);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыИФункцииРаботыСВыборомЗначений

// Функция-конструктор параметров начала выбора соглашения с клиентом на форме.
//
// Возвращаемое значение:
// 	Струкутура - Структура параметров.
//      *Элемент                      - ПолеФормы - Поле выбора соглашения.
//      *Партнер                      - СправочникСсылка.Партнеры - ссылка на партнера, для которого выберите соглашение
//      *Документ                     - СправочникСсылка.СоглашенияСКлиентами - ссылка на ранее выбранное соглашение для  начального позиционирования в списке
//      *ДатаДокумента                - Дата - Дата для определения действующего соглашения.
//      *ТолькоТиповые                - Булево - флаг, позволяющий включать в список выбора только типовые соглашения
//      *ТолькоИспользуемыеВРаботеТП  - Булево - флаг, позволяющий включать в список выбора только соглашения, используемые в работе торговых представителей
//      *ХозяйственнаяОперация        - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция объекта.
//      *ДанныеФормыСтруктура         - ДанныеФормыСтруктура - Данные формы инициатора.
//
Функция ПараметрыНачалаВыбораСоглашенияСКлиентом() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Элемент");
	СтруктураПараметров.Вставить("Партнер");
	СтруктураПараметров.Вставить("Документ");
	СтруктураПараметров.Вставить("ДатаДокумента", Дата(1,1,1));
	СтруктураПараметров.Вставить("ТолькоТиповые", Ложь);
	СтруктураПараметров.Вставить("ТолькоИспользуемыеВРаботеТП", Ложь);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Неопределено);
	СтруктураПараметров.Вставить("ДанныеФормыСтруктура", Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура - обработчик события "НачалоВыбора" элемента формы "Соглашение"
//
// Параметры:
//	СтруктураПараметров  - Структура - Структура параметров, конструктор ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом
//	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура НачалоВыбораСоглашенияСКлиентом(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	Элемент                     = СтруктураПараметров.Элемент;
	Партнер                     = СтруктураПараметров.Партнер;
	Документ                    = СтруктураПараметров.Документ;
	ДатаДокумента               = СтруктураПараметров.ДатаДокумента;
	ТолькоТиповые               = СтруктураПараметров.ТолькоТиповые;
	ТолькоИспользуемыеВРаботеТП = СтруктураПараметров.ТолькоИспользуемыеВРаботеТП;
	ХозяйственнаяОперация       = СтруктураПараметров.ХозяйственнаяОперация;
	ДанныеФормыСтруктура        = СтруктураПараметров.ДанныеФормыСтруктура;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ОтборКлиент = Новый Структура("Клиент", Истина);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", Новый Структура("Отбор", ОтборКлиент),,,,, 
			Новый ОписаниеОповещения("НачалоВыбораСоглашенияСКлиентомЗавершение", ЭтотОбъект, Новый Структура("ДатаДокумента, Документ, ТолькоИспользуемыеВРаботеТП, ТолькоТиповые, ХозяйственнаяОперация, Элемент, ДанныеФормыСтруктура", 
			ДатаДокумента, Документ, ТолькоИспользуемыеВРаботеТП, ТолькоТиповые, ХозяйственнаяОперация, Элемент, ДанныеФормыСтруктура)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	НачалоВыбораСоглашенияСКлиентомФрагмент(ДатаДокумента, Документ, Партнер, ТолькоИспользуемыеВРаботеТП, ТолькоТиповые, ХозяйственнаяОперация, Элемент);
КонецПроцедуры

// Создает транспортную накладную в случае утвердительного ответа пользователя.
//
// Параметры:
//  Результат               - СправочникСсылка.Партнеры - партнер, для которого выбираются соглашения.
//  ДополнительныеПараметры - Структура - дополнительные параметры, необходимые для отбора соглашений.
//
Процедура НачалоВыбораСоглашенияСКлиентомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДатаДокумента = ДополнительныеПараметры.ДатаДокумента;
	Документ = ДополнительныеПараметры.Документ;
	ТолькоИспользуемыеВРаботеТП = ДополнительныеПараметры.ТолькоИспользуемыеВРаботеТП;
	ТолькоТиповые = ДополнительныеПараметры.ТолькоТиповые;
	ХозяйственнаяОперация = ДополнительныеПараметры.ХозяйственнаяОперация;
	Элемент = ДополнительныеПараметры.Элемент;
	ДанныеФормыСтруктура = ДополнительныеПараметры.ДанныеФормыСтруктура;
	
	Партнер = Результат;
	
	Если ДанныеФормыСтруктура<>Неопределено Тогда
		ДанныеФормыСтруктура.Партнер = Партнер;
		Если ДанныеФормыСтруктура.Свойство("Контрагент") Тогда
			ПартнерыИКонтрагентыВызовСервера.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, ДанныеФормыСтруктура.Контрагент, Истина);
		КонецЕсли;
	КонецЕсли;
	
	НачалоВыбораСоглашенияСКлиентомФрагмент(ДатаДокумента, Документ, Партнер, ТолькоИспользуемыеВРаботеТП, ТолькоТиповые, ХозяйственнаяОперация, Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы "Аналитика расходов"
//
// Параметры:
//	Элемент  - ПолеФормы - Поле выбора аналитики расходов
//	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ПродажиКлиент.НачалоВыбораАналитикиРасходов");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиВозможностиВыполненияДействий

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по соглашению с клиентом
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево - Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеЦенПоСоглашению(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Соглашение) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указано соглашение с клиентом. Цены не могут быть заполнены.'"));
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены.'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по виду цен
//
// Параметры:
//   Документ                    - ДокументОбъект, для которого выполняются проверки.
//   ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку.
//   ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеЦенПоВидуЦен(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены.'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены строк в таблице
//
// Параметры:
//   Документ                    - ДокументОбъект, для которого выполняются проверки.
//   ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//   ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти, ВыделенныеСтроки) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для отмены.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены непоставленных строк
//
// Параметры:
//   ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//   ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеПричиныОтменыНепоставленныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
		ЕстьНеотмененныеСтроки = Ложь;
		Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
			Если Не ТекСтрока.Отменено Тогда
				ЕстьНеотмененныеСтроки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьНеотмененныеСтроки Тогда
			ПоказатьПредупреждение(,НСтр("ru='Все строки отменены.'"));
			Возврат Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке.
//
// Параметры:
//   ДокументПроведен - Булево - признак проведенности документа.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеТоваровПоОтгрузке(ДокументПроведен) Экспорт
	
	Если Не ДокументПроведен Тогда
		ПоказатьПредупреждение(,НСтр("ru='Документ не проведен, заполнение невозможно.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет является ли оповещение в форме событием изменения документов оплаты.
//
// Параметры:
//   ИмяСобытия - Строка - имя события из процедуры формы "ОбработкаОповещения".
//
// Возвращаемое значение:
//   Булево - Истина, если оповещение является оплатой.
//
Функция ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОповещенияПользователяОВыполненныхДействиях

//Показывает оповещение пользователя об окончании заполнения условий продаж по умолчанию
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия продаж заполнены'"),
		,
		НСтр("ru='Условия продаж по умолчанию заполнены'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения условий продаж
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродаж() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия продаж заполнены'"),
		,НСтр("ru='Условия продаж по соглашению с клиентом заполнены'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения цен по соглашению с клиентом
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны = Истина) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru='Цены по соглашению с клиентом заполнены'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			НСтр("ru='Ни в одной строке цены по соглашению с клиентом не заполнены'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения цен по виду цен.
//
// Параметры:
//  ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке.
//  ВидЦен - СправочникСсылка.ВидыЦен - Вид цен, по которому осуществлялось заполнение цен.
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Цены по виду цен ""%ВидЦен%"" заполнены'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Ни в одной строке цены по виду цен ""%ВидЦен%"" не заполнены'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк
//
Процедура ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные строки отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

//Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк
//
Процедура ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоОтмененныхСтрок, ПроверятьОстатки) Экспорт

	Если КоличествоОтмененныхСтрок = 0 Тогда
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам оформлена отгрузка. Строки не могут быть отменены.'"),
			БиблиотекаКартинок.Информация32);
			
		Иначе
			
			Если ПроверятьОстатки Тогда

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Строки отменены'"),
					,
					СтрЗаменить(НСтр("ru='Все непоставленные строки отменены по причине ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32);
			
			Иначе
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Строки отменены'"),
					,
					СтрЗаменить(НСтр("ru='Все строки отменены по причине ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32);
				
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения дат отгрузки всех строк тч
//
// Параметры:
//	ДатаОтгрузки - Дата - дата отгрузки, по которой заполнялась дата в табличной части
//	ВыделенныеСтроки - Массив - влияет на текст сообщения
//
Процедура ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, ЗаполнениеВыделенныхСтрок) Экспорт

	Если ЗаполнениеВыделенныхСтрок Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата отгрузки заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для выделенных строк установлена дата отгрузки %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата отгрузки заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для всех строк установлена дата отгрузки %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании перезаполнения товаров по фактической отгрузке
//
// Параметры:
//	ЕстьИзменения           - Булево - Если Истина - есть изменения в табличной части
//	КоличествоПерезаполнено - Булево - Если Истина - количество было перезаполнено по фактической отгрузке
//
Процедура ОповеститьОбОкончанииПерезаполненияТоваровПоОтгрузке(ЕстьИзменения, КоличествоПерезаполнено, ЕстьНесобранные = Ложь) Экспорт
	
	Если ЕстьИзменения Тогда
		Если ЕстьНесобранные Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Количество перезаполнено'"),
				,
				НСтр("ru='В строках перезаполнено количество с учетом собирающихся на складе товаров.'"),
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Количество перезаполнено'"),
				,
				НСтр("ru='В строках перезаполнено количество.'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	Иначе
		
		Если КоличествоПерезаполнено Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. во всех строках количество совпадает с указанным.'"),
				БиблиотекаКартинок.Информация32);
			
		Иначе
		
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Ни по одной строке не начата отгрузка.'"),
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиКомандПользователя

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке
//
// Параметры:
//   ЕстьОтгруженныеТовары - Булево             - признак наличия отгруженных товаров.
//   ОписаниеОповещения    - ОписаниеОповещения - обработка пользовательского выбора.
//
Процедура ВопросОПерезаполненииОтгруженнымиТоварами(ОписаниеОповещения, ЕстьОтгруженныеТовары) Экспорт
	
	СписокКнопок = Новый СписокЗначений();
	
	Если ЕстьОтгруженныеТовары Тогда
		
		ТекстВопроса = НСтр("ru='Не все товары собраны/отгружены. Учитывать при заполнении товары, которые находятся в процессе сборки?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		СписокКнопок.Добавить("НеУчитывать", НСтр("ru = 'Не учитывать'"));
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Отсутствуют собранные/отгруженные товары. Учитывать при заполнении товары, которые находятся в процессе сборки?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		
	КонецЕсли;
	
	СписокКнопок.Добавить("НеПерезаполнять", НСтр("ru = 'Не перезаполнять'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросОПерезаполненииОтгруженнымиТоварамиЗавершение", ПродажиКлиент, ДополнительныеПараметры),
		ТекстВопроса,
		СписокКнопок);
	
КонецПроцедуры

// Обработчик вопроса о перезаполнении отгруженными товарами.
//
// Параметры:
//  ОтветНаВопрос           - Строка - вариант ответа на вопрос, выбранный пользователем.
//  ДополнительныеПараметры - Структура - дополнительные параметры, необходимые для заполнения.
//
Процедура ВопросОПерезаполненииОтгруженнымиТоварамиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаполнятьНесобраннымиТоварами", (ОтветНаВопрос = "Учитывать"));
	Результат.Вставить("Перезаполнить", Не (ОтветНаВопрос = "НеПерезаполнять"));
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
	
КонецПроцедуры

// Процедура для выбора вида цен из формы выбора.
//
// Параметры:
//	Форма                                     - УправляемаяФорма - форма, в которой необходимо заполнить цены
//	ИспользоватьПриПродаже                    - Булево - Выбор вида цены для продажи
//	ИспользоватьПриПередачеМеждуОрганизациями - Булево - Выбор вида цены для передачи между организациями
//
Процедура ВыбратьВидЦен(
	ОписаниеОповещения,
	ЦенаВключаетНДС = Неопределено,
	ИспользоватьПриПродаже = Неопределено,
	ИспользоватьПриПередачеМеждуОрганизациями = Неопределено
	) Экспорт
	
	ВидЦеныПрайсЛист = ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
	Если ВидЦеныПрайсЛист <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВидЦеныПрайсЛист);
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыДействияВидовЦен.Действует"));
	Если ЦенаВключаетНДС <> Неопределено Тогда
		СтруктураОтбор.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	Если ИспользоватьПриПродаже <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПродаже", ИспользоватьПриПродаже);
	КонецЕсли;
	Если ИспользоватьПриПередачеМеждуОрганизациями <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", ИспользоватьПриПередачеМеждуОрганизациями);
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.ВидыЦен.ФормаВыбора",
		Новый Структура("Отбор", СтруктураОтбор),,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "НеСогласовано".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Не согласовано"". По действующим соглашениям могут быть оформлены документы. После изменения статуса действующие соглашения перестанут действовать. Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиНеСогласованоЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласованоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Не согласовано'"));

КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Действует".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений
//
Процедура УстановитьСтатусСоглашенийСКлиентамиДействует(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Действует"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиДействуетЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиДействуетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиДействует(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Действует'"));

КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Закрыто".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений
//
Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Закрыто"". После изменения статуса действующие соглашения перестанут действовать. Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиЗакрытоЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрытоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Закрыто'"));

КонецПроцедуры

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками
//
Процедура ОтменитьВыделенныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками=Неопределено) Экспорт
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл

		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает Акт выполненных работ по одному или нескольким заказам клиентов
//
// Параметры:
//	Список - ТаблицаФормы - список заказов клиентов, по выделенным заказам которого будет создано Акт выполненных работ
//	ИспользоватьРеализациюПоНесколькимЗаказам - Булево - значение ф.о. ИспользоватьРеализациюПоНесколькимЗаказам
//
Процедура СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(Список, ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура();
	
	Если Список.ВыделенныеСтроки.Количество() = 1 Или Не ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
	
		ПараметрыОснования.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
			Новый Структура("Основание", ПараметрыОснования));
	
	Иначе
		
		МассивСсылок = Новый Массив();
		
		Для Каждого ЗаказКлиента Из Список.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(Список.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		РеквизитыШапки = Новый Структура();
		ОчиститьСообщения();
		
		Если ПродажиВызовСервера.СформироватьДанныеЗаполненияАктовВыполненныхРабот(МассивСсылок, РеквизитыШапки) Тогда
		
			ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
			ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
			
			ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
				Новый Структура("Основание", ПараметрыОснования));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие информационной гиперссылки о состоянии документа и выводит отчет "Состояние выполнения"
//
// Параметры:
//  СтандартнаяОбработка  - Булево - признак стандартной обработки события.
//  Форма                 - УправляемаяФорма - Форма, в которой было выполнено нажатие.
//
Процедура СостояниеВФормеДокументаНажатие(СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Ссылка = Форма.Объект.Ссылка;
	
	Если НЕ Ссылка.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Ссылка);
		
		ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", 
		             Новый Структура("ВходящиеДокументы", СписокДокументов), 
		             Форма,
		             Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

// Открывает список транспортных накладных.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура ОткрытьСписокТранспортныхНакладных(Форма)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументОснование", Форма.Объект.Ссылка));
	ОткрытьФорму("Документ.ТранспортнаяНакладная.ФормаСписка",
				ПараметрыФормы,
				Форма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Создает транспортную накладную.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура СоздатьТранспортнуюНакладную(Форма)
	
	ОчиститьСообщения();
	
	ПроверитьВозможностьСозданияТранспортнойНакладной(Форма);
	
КонецПроцедуры

// Проверяет возможность создания транспортной накладной.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура ПроверитьВозможностьСозданияТранспортнойНакладной(Форма)
	
	МожноСоздатьТТН = Истина;
		
	Если Форма.Объект.РеализацияПоЗаказам Тогда
		
		ПродажиВызовСервера.ПроверитьСпособыДоставкиЗаказов(Форма.Объект.Ссылка, МожноСоздатьТТН);
		
	Иначе
		
		СпособыДоставкиСНашимУчастием = ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(Форма.ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками);
		
		Если СпособыДоставкиСНашимУчастием.Найти(Форма.Объект.СпособДоставки) <> Неопределено Тогда	
			ТекстСообщения = НСтр("ru = 'Невозможно создать транспортную накладную, т.к. используется способ доставки ""%СпособДоставки%"". Транспортные накладные в этом случае создаются при оформлении задания на перевозку.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособДоставки%", Форма.Объект.СпособДоставки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Форма.Объект.СпособДоставки");	
			МожноСоздатьТТН = Ложь;	
		КонецЕсли;
		
	КонецЕсли;	
		
	Если МожноСоздатьТТН И
		(НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка)
			ИЛИ НЕ Форма.Объект.Проведен
			ИЛИ Форма.Модифицированность) Тогда 
		
		ТекстВопроса = НСтр("ru = 'Ввод транспортных накладных возможен только после проведения документа.'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьВозможностьСозданияТранспортнойНакладнойОбработкаОтвета", ЭтотОбъект, Новый Структура("Форма", Форма)), 
						ТекстВопроса, СписокКнопок);
		Возврат;
	КонецЕсли;
		
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(Форма, МожноСоздатьТТН);
	
КонецПроцедуры

Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(Форма, МожноСоздатьТТН)
	
	Если Не МожноСоздатьТТН Тогда
		Возврат; // Проверки не были пройдены, продолжать создание ТТН не нужно
	КонецЕсли;
	
	Если ПродажиВызовСервера.ПроверитьНаличиеТранспортныхНакладных(Форма.Объект.Ссылка) Тогда
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Оформить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru = 'Дополнить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТранспортнуюНакладнуюЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
				НСтр("ru = 'Оформить новую ТТН или дополнить существующую?'"), СписокКнопок);
	Иначе
		ОформитьТранспортнуюНакладную(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьТранспортнуюНакладную(Форма)
	
	СозданныеТТН = ПродажиВызовСервера.ОформитьТранспортныеНакладныеНаСервере(Форма.Объект.Ссылка);
	
	Если СозданныеТТН.Количество() <> 0 Тогда 
		ПолучитьОбновитьИнформациюТранспортныхНакладных(Форма);
	КонецЕсли;
	
	Если СозданныеТТН.Количество() = 1 Тогда 
		ПоказатьЗначение(, СозданныеТТН[0]);
	ИначеЕсли СозданныеТТН.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТранспортныеНакладные", СозданныеТТН);
		ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.СозданныеТранспортныеНакладные", ПараметрыФормы, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьТранспортнуюНакладную(Форма)
	
	АдресХранилища = ПродажиВызовСервера.ПолучитьАдресХранилищаСПараметрамиОтбораТТН(Форма.Объект.Ссылка);
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ДокументОснование", Форма.Объект.Ссылка);
	ПараметрыОтбора.Вставить("ДатаНачала", Форма.Объект.Дата - 14 * 24 * 60 * 60);
	ПараметрыОтбора.Вставить("АдресХранилища", АдресХранилища);
		
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.ФормаВыбора", 
				ПараметрыФормы, 
				Форма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
				
КонецПроцедуры

Процедура НачалоВыбораСоглашенияСКлиентомФрагмент(Знач ДатаДокумента, Знач Документ, Знач Партнер, Знач ТолькоИспользуемыеВРаботеТП, Знач ТолькоТиповые, Знач ХозяйственнаяОперация, Знач Элемент)
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаДокумента", ДатаДокумента);
		ПараметрыФормы.Вставить("Партнер", Партнер);
		ПараметрыФормы.Вставить("ТолькоТиповые",ТолькоТиповые);
		ПараметрыФормы.Вставить("ТолькоИспользуемыеВРаботеТП",ТолькоИспользуемыеВРаботеТП);
		ПараметрыФормы.Вставить("ТекущаяСтрока",Документ);
		ПараметрыФормы.Вставить("ХозяйственнаяОперация",ХозяйственнаяОперация);
		ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора",
			ПараметрыФормы,
			Элемент);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти


