////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложения.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий форм.

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Для формы настройки выгрузки торгового предложения программно формирует элементы
// настройки торговых предложений (гиперссылки, статус).
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  ЭлементИнтерфейса - ЭлементФормы - элемент формы.
//
Процедура ИнициализацияЭлементовФормы(Знач Форма, ЭлементИнтерфейса) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	ТипТорговоеПредложение = Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип;
	Если ТипТорговоеПредложение.СодержитТип(ТипЗнч(Форма.Объект.Ссылка)) Тогда
		
		ЕстьПравоПубликацииТорговыхПредложений = Пользователи.ЭтоПолноправныйПользователь()
			ИЛИ Пользователи.РолиДоступны("ВыполнениеОбменаБизнесСеть");
			
		Если Не ЕстьПравоПубликацииТорговыхПредложений Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ЭлементИнтерфейса);
		ДекорацияФормы = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		
		ОбновитьДекорациюСостоянияПубликации(Форма.Объект.Ссылка, ДекорацияФормы, Форма.ТорговыеПредложенияПубликовать);
		Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации.Видимость = Форма.ТорговыеПредложенияПубликовать;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновления элемента формы состояния обмена.
// Изменяет заголовок, цвет, гиперссылку для декорации формы.
//
// Параметры:
//  Ссылка - СправочникСсылка - ссылка на определяемый тип ТорговыеПредложения.
//  ДекорацияФормы - ДекорацияФормы - элемент формы Декорация.
//  РежимПубликации - Булево - признак публикации торгового предложения.
//
Процедура ОбновитьДекорациюСостоянияПубликации(Ссылка, ДекорацияФормы, РежимПубликации = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговоеПредложение", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияСинхронизацииТорговыеПредложения.ДатаСинхронизации     КАК ДатаСинхронизации,
	|	СостоянияСинхронизацииТорговыеПредложения.Состояние             КАК Состояние,
	|	СостоянияСинхронизацииТорговыеПредложения.ОписаниеОшибки        КАК ОписаниеОшибки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДействиеСинхронизации КАК ДействиеСинхронизации
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &ТорговоеПредложение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РежимПубликации = Ложь;
	Если Выборка.Следующий() Тогда
		РежимПубликации = Истина;
		Если Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
			ДекорацияФормы.Заголовок = СтрШаблон("%1 (%2)",
				НСтр("ru = 'Опубликовано'"),
				Формат(Выборка.ДатаСинхронизации, "ДЛФ=DT"));
			ДекорацияФормы.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
			ДекорацияФормы.Гиперссылка = Ложь;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация Тогда
			Если Выборка.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
				ДекорацияФормы.Заголовок = НСтр("ru = 'Отмена публикации. Требуется синхронизация'");
				РежимПубликации = Ложь;
			Иначе
				ДекорацияФормы.Заголовок = НСтр("ru = 'Требуется синхронизация'");
			КонецЕсли;
			ДекорацияФормы.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
			ДекорацияФормы.Гиперссылка = Истина;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСопоставление Тогда
			ТекстЗаголовка = Строка(Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСопоставление);
			ДекорацияФормы.Заголовок = ТекстЗаголовка;
			ДекорацияФормы.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			ДекорацияФормы.Гиперссылка = Истина;
		Иначе
			ДекорацияФормы.Заголовок = НСтр("ru = 'Ошибка синхронизации'");
			ДекорацияФормы.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			ДекорацияФормы.Гиперссылка = Истина;
		КонецЕсли;
	Иначе
		ДекорацияФормы.Заголовок = "";
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Источник - СправочникОбъект - источник события.
//  Организация - СправочникСсылка - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//  Отказ - Булево - признак отказа от выполнения действия.
//
Процедура ПередЗаписьюНаСервере(Знач Форма, Знач Источник, Знач Организация, Знач ЭлементИнтерфейса, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
		ГруппаТорговыеПредложения = ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
		Если ГруппаТорговыеПредложения = Неопределено
			ИЛИ ГруппаТорговыеПредложения.ПодчиненныеЭлементы.Найти("ТорговыеПредложенияПубликовать") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Форма.ТорговыеПредложенияПубликовать Тогда
			ТекстСообщения = "";
			Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
				ТекстСообщения = НСтр("ru = 'Организация не указана. Публикация торговых предложений невозможна.'");
			ИначеЕсли Не БизнесСеть.ОрганизацияЗарегистрирована(Источник.Организация) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Организация %1 не зарегистрирована в сервисе 1С:Бизнес-сеть. Публикация торговых предложений отменена.'"),
					Источник.Организация);
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
					Источник.Ссылка, "Организация", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - СправочникОбъект - торговое предложений.
//  Организация - СправочникСсылка - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//
Процедура ПослеЗаписиНаСервере(Знач Форма, Знач ТекущийОбъект, Знач Организация, Знач ЭлементИнтерфейса = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;

	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(ТекущийОбъект.Ссылка)) Тогда
		
		Если ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Источник = ТекущийОбъект.Ссылка;
		ЭлементСостояниеОбмена     = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		ЭлементНастройкиПубликации = Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации;
		Публиковать                = Форма.ТорговыеПредложенияПубликовать;
		
		СостоянияСинхронизации = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения;
		Выборка = СостоянияСинхронизации.Выбрать(Новый Структура("ТорговоеПредложение", Источник));
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = Источник;
		ЕстьЗапись = Ложь;
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи.Организация = Выборка.Организация;
			МенеджерЗаписи.Прочитать();
			ЕстьЗапись = Истина;
		Иначе
			МенеджерЗаписи.Организация = Организация;
		КонецЕсли;
		
		Если Публиковать Тогда
			Статус = НСтр("ru = 'Требуется синхронизация'");
		ИначеЕсли ЕстьЗапись Тогда
			Статус = НСтр("ru = 'Отмена публикации. Требуется синхронизация'");
		Иначе
			Статус = "";
		КонецЕсли;
		
		// Проверка сопоставления номенклатуры.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеВидовНоменклатуры1СБизнесСеть.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть КАК СоответствиеВидовНоменклатуры1СБизнесСеть";
		ОшибкаСопоставления = Ложь;
		
		Если Запрос.Выполнить().Выбрать().Количество() = 0 Тогда
			ОшибкаСопоставления = Истина;
			Статус = Строка(Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСопоставление);
		КонецЕсли;
		
		Если Не Публиковать И ЕстьЗапись Тогда
			Если МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление Тогда // отменяем синхронизацию
				МенеджерЗаписи.Удалить();
				Статус = "";
			Иначе
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
				МенеджерЗаписи.Состояние             = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
				МенеджерЗаписи.ДатаСинхронизации     = '00010101';
				МенеджерЗаписи.Записать();
			КонецЕсли;
		ИначеЕсли Публиковать Тогда
			МенеджерЗаписи.ТорговоеПредложение = Источник;
			МенеджерЗаписи.Организация         = Организация;
			Если ОшибкаСопоставления Тогда
				МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСопоставление;
			Иначе
				МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
			КонецЕсли;
			
			МенеджерЗаписи.ДействиеСинхронизации = ?(ЕстьЗапись,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Изменение,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление);
			МенеджерЗаписи.Записать(ЕстьЗапись);
		КонецЕсли;
		
		Если ЭлементСостояниеОбмена <> Неопределено Тогда
			ЭлементСостояниеОбмена.Заголовок = Строка(МенеджерЗаписи.Состояние);
			Если ОшибкаСопоставления Тогда
				ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			Иначе
				ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
			КонецЕсли;
			ЭлементСостояниеОбмена.Гиперссылка       = Истина;
			ЭлементНастройкиПубликации.Видимость     = Не ПустаяСтрока(Статус) И Публиковать;
			ЭлементСостояниеОбмена.Доступность       = Истина;
			ЭлементНастройкиПубликации.Доступность   = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Методы работы с рубрикатором.

Функция ТипXDTO(ИмяТипа) Экспорт
	
	Возврат ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", ИмяТипа)
	
КонецФункции


// Получение категорий рубрикатора.
//
// Параметры:
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значения для заполнения.
//  Идентификатор	 - Строка - идентификатор категории.
//
Процедура ПолучитьКатегорииРубрикатора(СтрокаДерева, Знач Идентификатор) Экспорт
	
	Отказ = Ложь;
	ПараметрыКоманды = Новый Структура;
	
	Если Идентификатор = Неопределено Тогда
		// Получение корневого дерева.
		Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
		ВыполнитьКомандуРубрикатора("ПолучитьСписокКатегорийПервогоУровня", Неопределено, Результат, Отказ);
	Иначе
		// Получение вложенных объектов.
		ПараметрыКоманды.Вставить("ИдентификаторКатегории", Идентификатор);
		Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
		ВыполнитьКомандуРубрикатора("ПолучитьСписокДочернихКатегорий", ПараметрыКоманды, Результат, Отказ);
	КонецЕсли;
	
	ВозвращаемоеЗначение = "";
	Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Результат.Данные Цикл
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.Идентификатор = Формат(ЭлементСтруктуры.Id, "ЧГ=");
		НоваяСтрока.Представление = ЭлементСтруктуры.title;
		НоваяСтрока.КоличествоПодчиненных = ЭлементСтруктуры.childrenCount;
		Если НоваяСтрока.КоличествоПодчиненных > 0 Тогда
			НоваяСтрока.ИндексКартинки = 0; // Картинка группы.
		Иначе
			НоваяСтрока.ИндексКартинки = 3; // Картинка элемента.
		КонецЕсли;
	КонецЦикла;
	
	СтрокаДерева.Строки.Сортировать("Представление", Истина); // Сортировка строк дерева.
	
КонецПроцедуры

// Выполнение команды рубрикатора.
//
// Параметры:
//   ИмяКоманды - Строка - имя метода.
//   ПараметрыКоманды - Структура - параметры вызова.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак ошибки выполнения.
//
Процедура ВыполнитьКомандуРубрикатора(Знач ИмяКоманды, ПараметрыКоманды, Результат, Отказ) Экспорт
	
	// Инициализация переменных.
	Результат = Новый Структура("КодСостояния, Данные, ТекстОшибки, ПодробныйТекстОшибки");
	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды = Новый Структура;
	КонецЕсли;
	
	ПараметрыСоединения = Новый Структура(
		СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить("БизнесСетьПараметрыСоединения"));
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения) Тогда
		ПараметрыСоединения = БизнесСеть.ОбщиеНастройкиСервиса();
	КонецЕсли;
	
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыРубрикатора(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединениеРубрикатора Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Попытка
		Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(
			?(ПараметрыСоединения.ЗащищенноеСоединение, "https", "http"));
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервераРубрикатора,
			ПараметрыСоединения.ПортРубрикатора,,, Прокси, 30, ЗащищенноеСоединение);
	Исключение
		ТекстОшибки = НСтр("ru='Отсутствует соединение с сервером'")
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		Возврат;
	КонецПопытки;
	
	// Выполнение запроса HTTP к сервису.
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыВызова.Адрес);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	Если ЗначениеЗаполнено(ПараметрыВызова.Данные) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыВызова.Данные);
	КонецЕсли;
	
	Попытка
		Если ПараметрыВызова.Метод = "get" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "post" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "put" Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "delete" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Length", СтрДлина(HTTPЗапрос.ПолучитьТелоКакСтроку()));
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса:'") + " " + ИнформацияОбОшибке().Описание
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		Возврат;
	КонецПопытки;
	
	// Обработка полученных данных.
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	ОбъектJSON = Неопределено;
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		Если Результат.КодСостояния = 200 Тогда
			Результат.Данные = БизнесСеть.ЗначениеИзСтрокиJSON(ТелоОтвета);
		Иначе
			Результат.Данные = ТелоОтвета;
		КонецЕсли;
	КонецЕсли;
	
	// Обработка ошибок сервиса.
	ТекстСообщения = "";
	Если Результат.КодСостояния >= 400 И Не Результат.КодСостояния = 404 Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса (%1).'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяКоманды);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ И Не ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках") Тогда
		
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = НСтр("ru='Ошибка выполнения команды в сервисе 1С:Бизнес-сеть.'");
		КонецЕсли;
		
		ПодробныйТекстОшибки = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru='Адрес: %1.'"), ПараметрыВызова.Адрес);
		Если ТипЗнч(ОбъектJSON) = Тип("Структура") Тогда
			Если ОбъектJSON.Свойство("message") Тогда
				ТекстОшибкиСервиса = ОбъектJSON.message;
			ИначеЕсли ОбъектJSON.Свойство("error_description") Тогда
				ТекстОшибкиСервиса = ОбъектJSON.error_description;
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстОшибкиСервиса) Тогда
				ПодробныйТекстОшибки = ПодробныйТекстОшибки
					+ Символы.ПС + СтрШаблон(НСтр("ru='Подробности: %1.'"), ТекстОшибкиСервиса);
			КонецЕсли;
		КонецЕсли;
		
		ВидОперации = СтрШаблон(НСтр("ru = 'Команда ""%1""'"), ИмяКоманды);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
			ПодробныйТекстОшибки, , "БизнесСеть");
		Результат.ТекстОшибки = ТекстСообщения;
		Результат.ПодробныйТекстОшибки = ПодробныйТекстОшибки;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение реквизитов рубрикатора по условиям.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры для выполнения:
//   * ВидНоменклатуры        - СправочникСсылка.ВидыНоменклатуры, Строка - владелец для отбора реквизитов.
//   * ИдентификаторКатегории - Строка - идентификатор категории рубрикатора 1С:Бизнес-сеть.
//  АдресРезультата    - Строка - адрес временного хранилища с результатом.
//
Процедура ПолучитьРеквизитыРубрикатора(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// Получить данные из сервиса.
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ИдентификаторКатегории", ПараметрыПроцедуры.ИдентификаторКатегории);
	
	Отказ = Ложь;
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();	
	ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПолучитьСписокХарактеристикКатегории", ПараметрыКоманды, Результат, Отказ);
	
	Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
		Возврат;
	КонецЕсли;
	
	// Сопоставленные значения реквизитов информационной базы и сервиса.
	СопоставленныеРеквизиты = Новый ТаблицаЗначений;
	СопоставленныеРеквизиты.Колонки.Добавить("РеквизитОбъекта");
	СопоставленныеРеквизиты.Колонки.Добавить("ИдентификаторРеквизитаКатегории");
	СопоставленныеРеквизиты.Индексы.Добавить("ИдентификаторРеквизитаКатегории"); // Индекс.
	
	// Дополнительные реквизиты номенклатуры в информационной базе.
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	ДополнительныеРеквизиты.Колонки.Добавить("РеквизитОбъекта", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДополнительныеРеквизиты.Колонки.Добавить("ТипЗначения");
	
	// Таблица расчета сопоставленных значений реквизитов в информационной базе со значениями сервиса.
	РасчетСоответствий = Новый ТаблицаЗначений;
	РасчетСоответствий.Колонки.Добавить("РеквизитОбъекта");
	РасчетСоответствий.Колонки.Добавить("КоличествоЗначенийРеквизита");
	РасчетСоответствий.Колонки.Добавить("КоличествоСопоставленныхРеквизитов");
	РасчетСоответствий.Индексы.Добавить("РеквизитОбъекта");	// Индекс.
	
	ТорговыеПредложенияПереопределяемый.ПолучитьДанныеСопоставленияРеквизитов(ПараметрыПроцедуры.ВидНоменклатуры,
		СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий);
	
	РеквизитыРубрикатора = ОписаниеРеквизитовСопоставленияРубрикатора();
	
	Для Каждого РеквизитРубрикатора Из Результат.Данные Цикл
		
		ЭтоДополнительныеЗначенияРеквизита = Ложь;
		ЭтоДополнительныеЗначенияСервиса = Ложь;
		
		// Заполнение данных рубрикатора сервера.
		Если СтрНайти(РеквизитРубрикатора.sourceId, "-") ИЛИ СтрНайти(РеквизитРубрикатора.sourceId, "shipping")
			ИЛИ РеквизитРубрикатора.title = "Минимальная цена" ИЛИ РеквизитРубрикатора.title = "Максимальная цена" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизит = РеквизитыРубрикатора.Добавить();
		НовыйРеквизит.ПредставлениеРеквизитаКатегории = РеквизитРубрикатора.title
			+ ?(ЗначениеЗаполнено(РеквизитРубрикатора.unitCode), ", " + РеквизитРубрикатора.unitCode, "");
		НовыйРеквизит.ИдентификаторРеквизитаКатегории = Формат(РеквизитРубрикатора.id, "ЧГ=");
		Если РеквизитРубрикатора.type = "NUMBER" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Число";
		ИначеЕсли РеквизитРубрикатора.type = "STRING" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Строка";
		ИначеЕсли РеквизитРубрикатора.type = "BOOLEAN" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Да/Нет";
		ИначеЕсли РеквизитРубрикатора.type = "ENUMERATION" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Список";
			ЭтоДополнительныеЗначенияСервиса = Истина;
		КонецЕсли;
		
		// Установка типов данных.
		СтрокаПоиска = СопоставленныеРеквизиты.Найти(НовыйРеквизит.ИдентификаторРеквизитаКатегории, "ИдентификаторРеквизитаКатегории");
		Если СтрокаПоиска <> Неопределено Тогда
			
			НовыйРеквизит.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СтрокаПоиска.РеквизитОбъекта)) Тогда
				НовыйРеквизит.ТипЗначения = СтрокаПоиска.РеквизитОбъекта.ТипЗначения;
				Если ОбщегоНазначения.ЭтоСсылка(НовыйРеквизит.ТипЗначения.Типы()[0]) Тогда
					ЭтоДополнительныеЗначенияРеквизита = Истина;
				КонецЕсли;
			Иначе
				// Поиск в списке реквизитов номенклатуры.
				СтрокиРеквизитов = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("РеквизитОбъекта", СтрокаПоиска.РеквизитОбъекта));
				Если СтрокиРеквизитов.Количество() Тогда
					НовыйРеквизит.ТипЗначения = СтрокиРеквизитов[0].ТипЗначения;
					Если ОбщегоНазначения.ЭтоСсылка(СтрокиРеквизитов[0].ТипЗначения.Типы()[0]) Тогда
						ЭтоДополнительныеЗначенияРеквизита = Истина;
						Если РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта")= Неопределено Тогда
							НовоеСоответствие = РасчетСоответствий.Добавить();
							НовоеСоответствие.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
							НовоеСоответствие.КоличествоЗначенийРеквизита = 0;
							НовоеСоответствие.КоличествоСопоставленныхРеквизитов = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоДополнительныеЗначенияРеквизита И ЭтоДополнительныеЗначенияСервиса Тогда
				НовыйРеквизит.ВозможноСопоставление = Истина;
			КонецЕсли;
			
			СтрокаСоответствий = РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта");
			Если СтрокаСоответствий <> Неопределено Тогда
				НовыйРеквизит.Сопоставлено = СтрШаблон(НСтр("ru = 'Сопоставлено %1 из %2'"),
					СтрокаСоответствий.КоличествоСопоставленныхРеквизитов,
					СтрокаСоответствий.КоличествоЗначенийРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("РеквизитыРубрикатора",    РеквизитыРубрикатора);
	Реквизиты.Вставить("СопоставленныеРеквизиты", СопоставленныеРеквизиты);
	
	ПоместитьВоВременноеХранилище(Реквизиты, АдресРезультата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания.

// Выполняет регламентное задание по синхронизации торговых предложений с сервисом.
//
Процедура СинхронизацияТорговыхПредложенийОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений);
	
	СинхронизацияТорговыхПредложений(Неопределено, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Методы работы с торговыми предложениями.

// Синхронизация торговых предложений с сервисом.
// Экспортная процедура, запускается по регламентному заданию,
// см. ТорговыеПредложенияВызовСервера.СинхронизироватьТорговыеПредложенияВФоне().
//
// Параметры:
//   ПараметрыПроцедуры - Структура - параметры процедуры, не заполнять.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, не заполнять.
//
Процедура СинхронизацияТорговыхПредложений(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// &ЗамерПроизводительности
	ОписаниеЗамера = ТорговыеПредложения.НачатьЗамерВремени(
		"ОбщийМодуль.ТорговыеПредложения.СинхронизацияТорговыхПредложений");
	КоличествоПовторяющихсяДанных = 0;

	СинхронизироватьТорговыеПредложения(КоличествоПовторяющихсяДанных);

	// &ЗамерПроизводительности
	ТорговыеПредложения.ЗакончитьЗамерВремени(ОписаниеЗамера, Макс(1, КоличествоПовторяющихсяДанных /100)); // Пакет по 100 записей.
	
КонецПроцедуры

// Поиск торговых предложений в сервисе по отбору.
//
// Параметры:
//   ПараметрыПоиска - Структура - параметры получения торговых предложений из сервиса.
//    * КодВалюты - Число - код валюты для отбора. По умолчанию 643 (Рубль).
//    * ИдентификаторКатегории - Строка - идентификатор категории рубрикатора для отбора.
//    * НазваниеТовара - Строка - наименование товара для отбора.
//    * Артикул - Строка - артикул товара.
//    * ШтрихКоды - Массив - штрихкоды для отбора.
//    * Поставщик - ОпределяемыйТип.Контрагент - отбор по контрагенту.
//    * ПоставщикИдентификатор - Строка - значение ИНН/КПП контрагента для отбора.
//    * ПоставщикНаименование - Строка - наименование контрагента для отбора.
//    * ЦенаОт - Число - нижний порог цены для отбора.
//    * ЦенаДо - Число - верхний порог цены для отбора.
//    * РежимСортировки - Строка - название режима сортировки, можно использовать следующие названия:
//      ** СортировкаНаименованиеВозрастание - по названию товара, возрастание.
//      ** СортировкаНаименованиеУбывание - по названию товара, убывание.
//      ** СортировкаЦенаВозрастание - по цене, возрастание.
//      ** СортировкаЦенаУбывание - по цене, убывание.
//    * Атрибуты - Массив - значения атрибутов товара для отбора, элементы в структуре:
//      ** ИдентификаторАтрибута - Строка - идентификатор атрибута товара в рубрикаторе, обязательно заполнение.
//      ** ИдентификаторЗначения - Строка - идентификатор значения атрибута товара в рубрикаторе.
//      ** Значение - Строка - значение атрибута товара. Следует передавать, в случае если значения не сопоставлены или не могут
//                             быть сопоставлены, например числовое значение.
//   АдресРезультата - УникальныйИдентификатор - адрес результата в хранилище таблицы с торговыми предложениями.
//   Отказ - Булево - признак ошибки при выполнении.
//
Процедура НайтиТорговыеПредложенияПоОтбору(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	ОбъектПоиска = ФабрикаXDTO.Создать(ТипXDTO("ProductSearch"));
	
	Если ПараметрыПоиска.Свойство("ВалютаКод") Тогда
		ОбъектПоиска.currency = ПараметрыПоиска.ВалютаКод;
	ИначеЕсли ПараметрыПоиска.Свойство("Валюта")
		И ЗначениеЗаполнено(ПараметрыПоиска.Валюта) Тогда
		ОбъектПоиска.currency = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПоиска.Валюта, "Код");
	Иначе
		ОбъектПоиска.currency = 643; // По умолчанию Рубли, код валюты 643.
	КонецЕсли;
	ОбъектПоиска.currencyConversion = Истина;

	Если ПараметрыПоиска.Свойство("ИдентификаторКатегории") И Не ПустаяСтрока(ПараметрыПоиска.ИдентификаторКатегории) Тогда
		ОбъектПоиска.categoryId	= ПараметрыПоиска.ИдентификаторКатегории;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("НазваниеТовара") И Не ПустаяСтрока(ПараметрыПоиска.НазваниеТовара) Тогда
		ОбъектПоиска.productName = ПараметрыПоиска.НазваниеТовара;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("Артикул") И Не ПустаяСтрока(ПараметрыПоиска.Артикул) Тогда
		ОбъектПоиска.vendorCode = Лев(ПараметрыПоиска.Артикул, 50); // Ограничение 50 символов.
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ШтрихКоды")
		И ЗначениеЗаполнено(ПараметрыПоиска.ШтрихКоды)
		И ТипЗнч(ПараметрыПоиска.ШтрихКоды) = Тип("Массив") Тогда
		
		Для Каждого ШтрихКод Из ПараметрыПоиска.ШтрихКоды Цикл
			ОбъектПоиска.barcodes.Добавить(ШтрихКод);
		КонецЦикла;
	КонецЕсли;
	
	ОбъектКонтрагент = ФабрикаXDTO.Создать(ТипXDTO("Vendor"));
	ОтборПоПоставщику = Ложь;
	Если ПараметрыПоиска.Свойство("Поставщик") И ЗначениеЗаполнено(ПараметрыПоиска.Поставщик) Тогда
		РеквизитыПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыПоиска.Поставщик, "ИНН, КПП");
		Если СтрДлина(РеквизитыПоставщика.ИНН) < 10 Тогда
			Возврат;
		КонецЕсли;
		ОбъектКонтрагент.inn = БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыПоставщика.ИНН);
		ОбъектКонтрагент.kpp = БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыПоставщика.КПП);
		ОтборПоПоставщику = Истина;
	ИначеЕсли ПараметрыПоиска.Свойство("ПоставщикИдентификатор") И СтрДлина(ПараметрыПоиска.ПоставщикИдентификатор) >= 10 Тогда
		МассивИдентификаторов = СтрРазделить(ПараметрыПоиска.ПоставщикИдентификатор, "/");
		ОбъектКонтрагент.inn = МассивИдентификаторов[0];
		Если МассивИдентификаторов.Количество() > 1 Тогда
			ОбъектКонтрагент.kpp = МассивИдентификаторов[1];	
		КонецЕсли;
		ОтборПоПоставщику = Истина;
	ИначеЕсли ПараметрыПоиска.Свойство("ПоставщикНаименование") И СтрДлина(ПараметрыПоиска.ПоставщикНаименование) >= 3 Тогда
		// Если в наименовании число, то ищем поставщика по ИНН.
		ПоставщикНаименование = ПараметрыПоиска.ПоставщикНаименование;
		ТипЧисло = Новый ОписаниеТипов("Число");
		ЗначениеЧисло = ТипЧисло.ПривестиЗначение(ПоставщикНаименование);
		Если ЗначениеЧисло <> 0 И СтрДлина(ПоставщикНаименование) >= 10 И СтрДлина(ПоставщикНаименование) <= 12 Тогда
			ОбъектКонтрагент.inn = XMLСтрока(ЗначениеЧисло);
		Иначе
			ОбъектКонтрагент.title = ПоставщикНаименование;
		КонецЕсли;
		ОтборПоПоставщику = Истина;
	КонецЕсли;
	
	Если ОтборПоПоставщику Тогда
		ОбъектПоиска.vendors.Добавить(ОбъектКонтрагент);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ЦенаОт") И ПараметрыПоиска.ЦенаОт <> 0 Тогда
		ТипЦена = ТипXDTO("MoneyType");
		ОбъектЦена = ФабрикаXDTO.Создать(ТипXDTO("MoneyType"),
			ПараметрыПоиска.ЦенаОт);
		ОбъектПоиска.Установить("minPrice", ПараметрыПоиска.ЦенаОт);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ЦенаДо") И ПараметрыПоиска.ЦенаДо <> 0 Тогда
		ОбъектЦена = ФабрикаXDTO.Создать(ТипXDTO("MoneyType"),
			ПараметрыПоиска.ЦенаДо);
		ОбъектПоиска.Установить("maxPrice", ПараметрыПоиска.ЦенаДо);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("РежимСортировки") Тогда
		ОбъектСортировка = ФабрикаXDTO.Создать(ТипXDTO("Sort"));
		Если ПараметрыПоиска.РежимСортировки = "СортировкаНаименованиеВозрастание" Тогда
			ОбъектСортировка.Установить("name",     "name");
			ОбъектСортировка.Установить("ascending", Истина);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаНаименованиеУбывание" Тогда
			ОбъектСортировка.Установить("name",      "name");
			ОбъектСортировка.Установить("ascending", Ложь);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаЦенаВозрастание" Тогда
			ОбъектСортировка.Установить("name",      "price");
			ОбъектСортировка.Установить("ascending", Истина);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаЦенаУбывание" Тогда
			ОбъектСортировка.Установить("name",      "price");
			ОбъектСортировка.Установить("ascending", Ложь);
		КонецЕсли;
		ОбъектПоиска.sortings.Добавить(ОбъектСортировка);
	КонецЕсли;
	
	// Поиск по региону.
	ОбъектРегион = ФабрикаXDTO.Создать(ТипXDTO("RegionFilter"));
	Если ПараметрыПоиска.Свойство("РегионРежимОтбора") И ТипЗнч(ПараметрыПоиска.РегионРежимОтбора) = Тип("Число") Тогда
		ОбъектРегион.regionMode = ПараметрыПоиска.РегионРежимОтбора;
		Если ПараметрыПоиска.РегионРежимОтбора = 2 И ПараметрыПоиска.Свойство("РегионЗначенияПолей") Тогда // Отбор по указанному региону
			ОбъектРегион.regions.Добавить(ПоляXDTOРегионаКонтактнойИнформацииСервиса(ПараметрыПоиска.РегионЗначенияПолей));
		КонецЕсли;
	КонецЕсли;
	
	// Поиск по способу доставки.
	Если ПараметрыПоиска.Свойство("ВозможенСамовывоз") Тогда
		ОбъектРегион.pickup = ПараметрыПоиска.ВозможенСамовывоз;
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ВозможнаДоставка") Тогда
		ОбъектРегион.delivery = ПараметрыПоиска.ВозможнаДоставка;
	КонецЕсли;
	ОбъектПоиска.regionFilter = ОбъектРегион;
	
	Если ПараметрыПоиска.Свойство("Атрибуты") Тогда
		Для Каждого Атрибут Из ПараметрыПоиска.Атрибуты Цикл
			ОбъектАтрибуты = ФабрикаXDTO.Создать(ТипXDTO("Attribute"));
			ОбъектАтрибуты.attributeId = Атрибут.ИдентификаторАтрибута;
			Если Атрибут.Свойство("ИдентификаторЗначения") Тогда
				ОбъектАтрибуты.valueId = Атрибут.ИдентификаторЗначения;
			ИначеЕсли Атрибут.Свойство("Значение") Тогда
				ОбъектАтрибуты.value = Атрибут.Значение;
			КонецЕсли;
			ОбъектПоиска.attributeFilters.Добавить(ОбъектАтрибуты);
		КонецЦикла;
	КонецЕсли;

	СтрокаJSON = ОбъектXDTOВСтрокуJSON(ОбъектПоиска);
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("СтрокаJSON", СтрокаJSON);
	Отказ = Ложь;
	
	ИмяКоманды = "ПоискТорговыхПредложенийПоСтроке";
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВалют = Новый Соответствие;
	
	РезультатПоиска = ОписаниеРезультатаПоискаТорговыхПредложений();
	Для Каждого ДанныеСервиса Из Результат.Данные Цикл
		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.ПредложениеИдентификатор = ДанныеСервиса.id;
		НоваяСтрока.ТоварНаименование        = ДанныеСервиса.name;
		НоваяСтрока.Описание                 = ДанныеСервиса.description;
		НоваяСтрока.Артикул                  = ДанныеСервиса.vendorCode;
		НоваяСтрока.ЕдиницаИзмерения         = ДанныеСервиса.unit;
		НоваяСтрока.Характеристика           = ДанныеСервиса.feature;
		НоваяСтрока.ПоставщикНаименование    = ДанныеСервиса.vendor.title;
		НоваяСтрока.ПоставщикИдентификатор   = ДанныеСервиса.vendor.inn + "/" + ДанныеСервиса.vendor.kpp;
		НоваяСтрока.ПоставщикИНН             = ДанныеСервиса.vendor.inn;
		НоваяСтрока.ПоставщикКПП             = ДанныеСервиса.vendor.kpp;
		КодВалюты                            = ДанныеСервиса.currency;
		Если СписокВалют[КодВалюты] = Неопределено Тогда
			СписокВалют.Вставить(КодВалюты, Справочники.Валюты.НайтиПоКоду(ДанныеСервиса.currency));
		КонецЕсли;
		НоваяСтрока.Валюта              = СписокВалют[КодВалюты];
		НоваяСтрока.ЕдиницаИзмеренияКод = ДанныеСервиса.basicUnit;
		
		Если Не ДанныеСервиса.Свойство("priceConverted")
			ИЛИ Не ЗначениеЗаполнено(ДанныеСервиса.priceConverted) Тогда
			НоваяСтрока.Цена = 0; // Режим запроса цены.
		Иначе
			НоваяСтрока.Цена  = ДанныеСервиса.priceConverted / 100; // Данные в сервисе хранятся в копейках.
		КонецЕсли;
		
		
		Если ДанныеСервиса.Свойство("deliveryTime") Тогда
			НоваяСтрока.СрокПоставки = ДанныеСервиса.deliveryTime;
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(РезультатПоиска, АдресРезультата);
	
КонецПроцедуры

// Поиск торговых предложений в сервисе по списку товаров.
//
// Параметры:
//   ПараметрыПоиска - Структура - параметры по которым надо получить торговые предложения из сервиса.
//    * Товары - Массив, ТаблицаЗначений - товары которые надо найти в сервисе, состав свойств структур/колонок:
//      ** Наименование - Строка - наименование искомого товара.
//      ** Характеристика - Строка - наименование характеристики товара.
//      ** Артикул - Строка - артикул товара.
//      ** ШтрихКоды - Массив - массив штрихкодов по которым надо искать товар.
//      ** ИдентификаторКатегории - Строка - идентификатор категории (в сервисе 1С:Рубрикатор) в которой надо искать.
//      ** ЕдиницаИзмеренияКод - Строка - код ОКЕИ базовой единицы измерения товара.
//      ** Числитель - Число - количество в базовой единице измерения.
//      ** Знаменатель - Число - количество в текущей единице измерения.
//      ** ИдентификаторКатегории - Строка - идентификатор категории (в сервисе 1С:Рубрикатор) в которой надо искать.
//    * МаксимальныйСрокПоставки - Число - срок доставки в днях при превышении которого предложение не будет считаться оптимальным.
//    * ПревышениеМинимальнойЦены - Число - максимальное отклонение в процентах от минимальной цены при котором предложение не будет считаться оптимальным.
//    * ОграничениеТорговыхПредложений - Число - максимальное количество поставщиков по которым вернуть предложения.
//    * КодВалюты - Число - код валюты в которой ищутся цены. По умолчанию 643 (Рубль).
//    * ПоискПоНаименованию - Булево - признак того, что поиск будет осуществляться по наименованию.
//    * ПоискПоХарактеристике - Булево - признак того, что поиск будет осуществляться по характеристике.
//    * ПоискПоАртикулу - Булево - признак того, что поиск будет осуществляться по артикулу.
//    * ПоискПоШтрихКоду - Булево - признак того, что поиск будет осуществляться по штрихкоду.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, кода будут помещены таблицы:
//    * ТаблицаПоставщиков - ТаблицаЗначений - таблица поставщиков отсортированная по мере убывания оптимальности предложений
//    * ТаблицаРезультата - ТаблицаЗначений - таблица с найденными торговыми предложениями.
//   Отказ - Булево - признак ошибки в процедуре.
//
Процедура НайтиТорговыеПредложенияПоСпискуТоваров(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	Если ПараметрыПоиска.Свойство("Товары") = Ложь Или ПараметрыПоиска.Товары.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПоиска = ФабрикаXDTO.Создать(ТипXDTO("ProductListSearch"));
	
	Если ПараметрыПоиска.Свойство("МаксимальныйСрокПоставки") Тогда
		ОбъектПоиска.maxDeliveryTime = ПараметрыПоиска.МаксимальныйСрокПоставки;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ПревышениеМинимальнойЦены") Тогда
		ОбъектПоиска.maxOptimalPriceExcess = ПараметрыПоиска.ПревышениеМинимальнойЦены;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ОграничениеТорговыхПредложений") Тогда
		ОбъектПоиска.maxCount = ПараметрыПоиска.ОграничениеТорговыхПредложений;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ВалютаКод") Тогда
		ОбъектПоиска.currency = ПараметрыПоиска.ВалютаКод;
	Иначе
		ОбъектПоиска.currency = 643; // По умолчанию рубли.
	КонецЕсли;
	ОбъектПоиска.currencyConversion = Истина;
	
	// Поиск по региону.
	Если ПараметрыПоиска.Свойство("РегионРежимОтбора") И ТипЗнч(ПараметрыПоиска.РегионРежимОтбора) = Тип("Число") Тогда
		ОбъектРегион = ФабрикаXDTO.Создать(ТипXDTO("RegionFilter"));
		ОбъектРегион.regionMode = ПараметрыПоиска.РегионРежимОтбора;
		Если ПараметрыПоиска.РегионРежимОтбора = 2 И ПараметрыПоиска.Свойство("РегионЗначенияПолей") Тогда // Отбор по указанному региону
			ОбъектРегион.regions.Добавить(ПоляXDTOРегионаКонтактнойИнформацииСервиса(ПараметрыПоиска.РегионЗначенияПолей));
		КонецЕсли;
		Если ПараметрыПоиска.Свойство("ВозможенСамовывоз") Тогда
			ОбъектРегион.pickup = ПараметрыПоиска.ВозможенСамовывоз;
		КонецЕсли; 
		Если ПараметрыПоиска.Свойство("ВозможнаДоставка") Тогда
			ОбъектРегион.delivery = ПараметрыПоиска.ВозможнаДоставка;
		КонецЕсли;
		ОбъектПоиска.regionFilter = ОбъектРегион;
	КонецЕсли;
	
	ПоискПоНаименованию = ПараметрыПоиска.Свойство("ПоискПоНаименованию") И ПараметрыПоиска.ПоискПоНаименованию;
	ПоискПоАртикулу = ПараметрыПоиска.Свойство("ПоискПоАртикулу") И ПараметрыПоиска.ПоискПоАртикулу;
	ПоискПоХарактеристике = ПараметрыПоиска.Свойство("ПоискПоХарактеристике") И ПараметрыПоиска.ПоискПоХарактеристике;
	ПоискПоШтрихКоду = ПараметрыПоиска.Свойство("ПоискПоШтрихКоду") И ПараметрыПоиска.ПоискПоШтрихКоду;
	
	Для Каждого СтрокаТовары Из ПараметрыПоиска.Товары Цикл
		
		Если Не (ПараметрыПоиска.ПоискПоНаименованию И ЗначениеЗаполнено(СтрокаТовары.Наименование))
			И Не (ПараметрыПоиска.ПоискПоХарактеристике И ЗначениеЗаполнено(СтрокаТовары.Характеристика))
			И Не (ПараметрыПоиска.ПоискПоАртикулу И ЗначениеЗаполнено(СтрокаТовары.Артикул))
			И Не (ПараметрыПоиска.ПоискПоШтрихКоду 
			И ТипЗнч(СтрокаТовары.ШтрихКоды) = Тип("Массив") И СтрокаТовары.ШтрихКоды.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПоиска = ФабрикаXDTO.Создать(ТипXDTO("ListSearch"));
		
		ЭлементПоиска.index = ПараметрыПоиска.Товары.Индекс(СтрокаТовары);
		
		Если ПоискПоНаименованию И ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
			ЭлементПоиска.Установить("productName", СтрокаТовары.Наименование);
		КонецЕсли;
		
		Если ПоискПоХарактеристике И ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
			ЭлементПоиска.Установить("productFeature", Строка(СтрокаТовары.Характеристика));
		КонецЕсли;
		
		Если ПоискПоАртикулу И ЗначениеЗаполнено(СтрокаТовары.Артикул) Тогда
			ЭлементПоиска.Установить("vendorCode", СтрокаТовары.Артикул);
		КонецЕсли;
		
		Если ПоискПоШтрихКоду И ТипЗнч(СтрокаТовары.ШтрихКоды) = Тип("Массив") И СтрокаТовары.ШтрихКоды.Количество() Тогда
			Для Каждого ЭлементМассива Из СтрокаТовары.ШтрихКоды Цикл
				ЭлементПоиска.barcodes.Добавить(ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
		
		ОбъектЕдиницаИзмерения = ФабрикаXDTO.Создать(ТипXDTO("UnitFilter"));
		Если ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмеренияКод) Тогда
			ОбъектЕдиницаИзмерения.basicUnit = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.УпаковкаКод) Тогда
			ОбъектЕдиницаИзмерения.basicUnit = СокрЛП(СтрокаТовары.УпаковкаКод);
		Иначе
			ОбъектЕдиницаИзмерения.basicUnit = "NULL";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЧислитель) Тогда
			ОбъектЕдиницаИзмерения.unitCount = СтрокаТовары.УпаковкаЧислитель;
		Иначе
			ОбъектЕдиницаИзмерения.unitCount = 1;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЗнаменатель) Тогда
			ОбъектЕдиницаИзмерения.basicUnitCount = СтрокаТовары.УпаковкаЗнаменатель;
		Иначе
			ОбъектЕдиницаИзмерения.basicUnitCount = 1;
		КонецЕсли;
		ЭлементПоиска.units.Добавить(ОбъектЕдиницаИзмерения);
		
		ОбъектПоиска.listSearch.Добавить(ЭлементПоиска);
		
	КонецЦикла;

	Если ОбъектПоиска.listSearch.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбъектПоиска.Проверить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка формирования запроса.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Формирование запроса'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, "БизнесСеть");
		Возврат;
	КонецПопытки;
	
	СтрокаJSON = ОбъектXDTOВСтрокуJSON(ОбъектПоиска);
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("СтрокаJSON", СтрокаJSON);
	Отказ = Ложь;
	
	ИмяКоманды = "ПоискТорговыхПредложенийПоСписку";
	
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);

	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();	
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоставщиков = Новый ТаблицаЗначений;
	ТаблицаПоставщиков.Колонки.Добавить("Наименование");
	ТаблицаПоставщиков.Колонки.Добавить("ИНН");
	ТаблицаПоставщиков.Колонки.Добавить("КПП");
	ТаблицаПоставщиков.Колонки.Добавить("Идентификатор");
	
	Для Каждого ДанныеСервиса Из Результат.Данные.vendors Цикл
		НовыйПоставщик = ТаблицаПоставщиков.Добавить();
		НовыйПоставщик.ИНН           = ДанныеСервиса.inn;
		НовыйПоставщик.КПП           = ДанныеСервиса.kpp;
		НовыйПоставщик.Наименование  = ДанныеСервиса.title;
		НовыйПоставщик.Идентификатор = НовыйПоставщик.ИНН
			+ ?(ПустаяСтрока(НовыйПоставщик.КПП),"", "_" + НовыйПоставщик.КПП);
	КонецЦикла;
	
	ТаблицаРезультата = ОписаниеРезультатаПоискаТорговыхПредложенийПоСписку();
	Для Каждого ДанныеСервиса Из Результат.Данные.offers Цикл
		НоваяСтрока = ТаблицаРезультата.Добавить();
		НоваяСтрока.ИндексСтроки             = ДанныеСервиса.index;
		НоваяСтрока.ПредложениеИдентификатор = ДанныеСервиса.product.id;
		НоваяСтрока.Упаковка                 = ДанныеСервиса.product.unit;
		НоваяСтрока.ЦенаВключаетНДС          = ДанныеСервиса.product.campaign.saleWithNds;
		НоваяСтрока.Поставщик                = ДанныеСервиса.product.vendor.title;
		НоваяСтрока.ПоставщикИНН             = ДанныеСервиса.product.vendor.inn;
		НоваяСтрока.ПоставщикКПП             = ДанныеСервиса.product.vendor.kpp;
		НоваяСтрока.ЛучшаяЦена               = ДанныеСервиса.bestPrice;
		НоваяСтрока.ЛучшийСрок               = ДанныеСервиса.bestDelivery;
		НоваяСтрока.МинимальнаяЦена          = ДанныеСервиса.minPrice;
		НоваяСтрока.МаксимальнаяЦена         = ДанныеСервиса.maxPrice;
		НоваяСтрока.МинимальныйСрокПоставки  = ДанныеСервиса.minDeliveryTime;
		НоваяСтрока.МаксимальныйСрокПоставки = ДанныеСервиса.maxDeliveryTime;
		НоваяСтрока.КоличествоПредложений    = ДанныеСервиса.amountProducts;
		ТорговыеПредложенияПереопределяемый.ПолучитьЗначениеСтавкиНДС(ДанныеСервиса.product.nds, НоваяСтрока.СтавкаНДС);
		НоваяСтрока.ПоставщикИдентификатор   = НоваяСтрока.ПоставщикИНН
			+ ?(ПустаяСтрока(НоваяСтрока.ПоставщикКПП),"","_" + НоваяСтрока.ПоставщикКПП);
			
		// Получение цены.
		Если Не ДанныеСервиса.product.Свойство("priceConverted")
			ИЛИ Не ЗначениеЗаполнено(ДанныеСервиса.product.priceConverted) Тогда
			НоваяСтрока.Цена = 0; // Цена по запросу.
		Иначе
			НоваяСтрока.Цена = ДанныеСервиса.product.priceConverted / 100;
		КонецЕсли;
		
		
		Если ДанныеСервиса.product.Свойство("deliveryTime") Тогда
			НоваяСтрока.СрокПоставки = ДанныеСервиса.product.deliveryTime;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("ТаблицаПоставщиков", ТаблицаПоставщиков);
	Результат.Вставить("ТаблицаРезультата", ТаблицаРезультата);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор торгового предложения.
//   НаборДанных - Структура - Структура определяющая список свойств которые будут получены.
//   Отказ - Булево - Признак того, что в процедуре возникли ошибки.
//
// Возвращаемое значение:
//   Структура - структура данных торгового предложения.
//
Функция ПрочитатьТорговоеПредложение(Идентификатор, Валюта = Неопределено, НаборДанных = Неопределено, Отказ = Ложь) Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Идентификатор", Идентификатор);
	ПараметрыКоманды.Вставить("КодВалюты",     КодВалюты(Валюта));
	
	ИмяКоманды = "ПрочитатьТорговоеПредложение";
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	Если Отказ ИЛИ Результат.Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Результат.Данные;
	
	Если НаборДанных = Неопределено Тогда
		НаборДанных = Новый Структура;
	КонецЕсли;
	
	Если Данные.Свойство("categoryId") И Данные.categoryId <> Неопределено Тогда
		
		ИдентификаторКатегории =  Данные.categoryId;
		
		Если НаборДанных.Свойство("Характеристики") Тогда
			Если Данные.Свойство("attributes") И Данные.attributes <> Неопределено Тогда
				
				ОтказПриПолученииСпискаХарактеристикКатегории = Ложь;
				
				СписокХарактеристикКатегории = Новый Структура;
				
				ПараметрыКоманды = Новый Структура;
				ПараметрыКоманды.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
				ВыполнитьКомандуРубрикатора("ПолучитьСписокХарактеристикКатегории",
					ПараметрыКоманды, СписокХарактеристикКатегории, ОтказПриПолученииСпискаХарактеристикКатегории);
				
				Если Не ОтказПриПолученииСпискаХарактеристикКатегории
					И СписокХарактеристикКатегории.Данные <> Неопределено
					И ТипЗнч(СписокХарактеристикКатегории.Данные) = Тип("Массив") Тогда
					
					ИменаХарактеристикКатегории = Новый Соответствие;
					ТипыХарактеристикКатегории = Новый Соответствие;
					
					Для Каждого ХарактеристикаКатегории Из СписокХарактеристикКатегории.Данные Цикл
						ПредставлениеХарактеристики = ХарактеристикаКатегории.title
							+ ?(Не ПустаяСтрока(ХарактеристикаКатегории.unitCode), ", "
							+ ХарактеристикаКатегории.unitCode, "");
						ИдентификаторХарактеристики = ?(ТипЗнч(ХарактеристикаКатегории.id) = Тип("Строка"), ХарактеристикаКатегории.id,
							Формат(ХарактеристикаКатегории.id, "ЧГ="));
						ИменаХарактеристикКатегории.Вставить(ИдентификаторХарактеристики, ПредставлениеХарактеристики);
						ТипыХарактеристикКатегории.Вставить(ИдентификаторХарактеристики, ХарактеристикаКатегории.type);
					КонецЦикла;
					
					Характеристики = Новый ТаблицаЗначений;
					Характеристики.Колонки.Добавить("Название");
					Характеристики.Колонки.Добавить("Значение");
					
					Для Каждого Атрибут Из Данные.attributes Цикл
						
						ИдентификаторХарактеристики = Атрибут.attributeId;
						
						НаименованиеХарактеристики = ИменаХарактеристикКатегории.Получить(ИдентификаторХарактеристики);
						Если НаименованиеХарактеристики = Неопределено Тогда
							// Неактуальный идентификатор характеристики позиции торгового предложения.
							Продолжить;
						КонецЕсли;
						
						ТипХарактеристикКатегории = ТипыХарактеристикКатегории.Получить(ИдентификаторХарактеристики);
						
						Если Атрибут.Свойство("valueId")
							И Атрибут.valueId <> Неопределено Тогда
							
							ОтказПриПолученииЗначенияХарактеристики = Ложь;
							
							ЗначениеХарактеристики = Новый Структура;

							ПараметрыКоманды = Новый Структура;
							ПараметрыКоманды.Вставить("ИдентификаторЗначенияХарактеристики", Атрибут.valueId);
							ВыполнитьКомандуРубрикатора("ПолучитьЗначениеХарактеристики",
								ПараметрыКоманды, ЗначениеХарактеристики, ОтказПриПолученииЗначенияХарактеристики);
							
							Если Не ОтказПриПолученииЗначенияХарактеристики
								И ЗначениеХарактеристики.Данные <> Неопределено Тогда
								
								Значение = ЗначениеХарактеристики.Данные.value
							Иначе
								Продолжить;
							КонецЕсли;
							
						ИначеЕсли Атрибут.Свойство("value")
							И Атрибут.value <> Неопределено
							И ТипХарактеристикКатегории <> "ENUMERATION" Тогда
							Значение = Атрибут.value;
						Иначе
							Продолжить;
						КонецЕсли;
						
						НоваяХарактеристика = Характеристики.Добавить();
						
						НоваяХарактеристика.Название = НаименованиеХарактеристики;
						НоваяХарактеристика.Значение = ПривестиКТипуЗначениеРубрикатора(Значение, ТипХарактеристикКатегории);
						
					КонецЦикла;
					
					Если Характеристики.Количество() Тогда
						Данные.Вставить("Характеристики", Характеристики);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество торговых предложений участника.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова.
//     * ИНН - Строка - ИНН участника.
//     * КПП - Строка - КПП участника.
//   Отказ - Булево - признак ошибки выполнения.
//
// Возвращаемое значение:
//   Число - количество торговых предложений.
//
Функция ПолучитьКоличествоТорговыхПредложений(ПараметрыКоманды, Отказ) Экспорт
	
	ИмяКоманды = "ПолучитьКоличествоТорговыхПредложений";
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	Если Отказ ИЛИ Результат.КодСостояния <> 200 ИЛИ Результат.Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат.Данные;
	
КонецФункции

// Получиние валюты по коду
//
// Параметры:
//  КодВалюты	 - Число - международный код валюты.
// 
// Возвращаемое значение:
//  Структура - данные валюты в сервисе:
//    * ПолноеНаименование - Строка - полное наименование валюты.
//    * Наименование - Строка - наименование валюты.
//    * Код - Строка - код валюты.
//    * Курс - Число - курс валюты.
//    * ДатаКурса - Дата - Дата установки курса валюты.
//
Функция ПолучитьВалютуПоКоду(КодВалюты) Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("КодВалюты",     КодВалюты);
	
	ИмяКоманды = "ПолучитьВалютуПоКоду";
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	Отказ = Ложь;
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	Если Отказ ИЛИ Результат.КодСостояния <> 200 ИЛИ Результат.Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат.Данные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Регионы

// Описание адресов абонента.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица для заполнения адресов.
//
Функция ОписаниеАдресовАбонента() Экспорт
	
	АдресаАбонента = Новый ТаблицаЗначений;
	АдресаАбонента.Колонки.Добавить("Представление");
	АдресаАбонента.Колонки.Добавить("ЗначенияПолей");
	АдресаАбонента.Колонки.Добавить("Описание");
	АдресаАбонента.Колонки.Добавить("Ссылка");
	АдресаАбонента.Колонки.Добавить("Вид");
	
	Возврат АдресаАбонента;
	
КонецФункции

// Получить адреса самовывоза организации
//
// Параметры:
//  ИдентификаторОрганизации - Строка - идентификатор в формате ИНН/КПП.
// 
// Возвращаемое значение:
//  СписокЗначений - список адресов организации, значение - адрес в XML, представление - строка адреса.
//
Функция ПолучитьАдресаСамовывозаОрганизации(Идентификатор, Отказ) Экспорт
	
	ИмяКоманды = "ПолучитьАдресаСамовывоза";
	ПараметрыВызова = Неопределено;
	ПараметрыКоманды = Новый Структура("Идентификатор", Идентификатор);
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	Если Отказ ИЛИ Результат.КодСостояния <> 200 ИЛИ Результат.Данные = Неопределено
		ИЛИ ТипЗнч(Результат.Данные) <> Тип("Массив") Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	Для Каждого СтрокаРезультата Из Результат.Данные Цикл
		Если ТипЗнч(СтрокаРезультата) <> Тип("Структура")
			ИЛИ СтрокаРезультата.Свойство("addressInfo1") = Ложь Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		СписокАдресов.Добавить(СтрокаРезультата.addressInfo2, СтрокаРезультата.addressInfo1);
	КонецЦикла;

	Возврат СписокАдресов;
	
КонецФункции

// Получить адресные настройки абонента.
//
// Параметры:
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Массив - адреса абонента.
//
Функция ПолучитьАдресныеНастройкиАбонента(Отказ) Экспорт
	
	ИмяКоманды = "ПолучитьАдресныеНастройкиАбонента";
	ПараметрыВызова = Неопределено;
	ПараметрыКоманды = Новый Структура;
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	Если Отказ ИЛИ Результат.КодСостояния <> 200 ИЛИ Результат.Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат.Данные;

КонецФункции

// Получить таблицы адресов абонента.
//
// Параметры:
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - адреса абонента:
//    РегионыПродажи - ТаблицаЗначений - регионы продаж абонента.
//    РегионыЗакупки - ТаблицаЗначений - регионы закупок абонента.
//    Адреса - ТаблицаЗначений - адреса магазинов/складов абонента.
//
Функция ПолучитьТаблицыАдресовАбонента(Отказ) Экспорт
	
	Данные = ПолучитьАдресныеНастройкиАбонента(Отказ);
	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоставКолонок = Новый Структура;
	СоставКолонок.Вставить("address",      "АдресСтруктурой");
	СоставКолонок.Вставить("addressInfo1", "Представление");
	СоставКолонок.Вставить("addressInfo2", "ЗначенияПолей");
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 1);
	Отбор.Вставить("shipment",    Истина);
	Отбор.Вставить("active",      Истина);
	РегионыПродажи = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 1);
	Отбор.Вставить("entrance",    Истина);
	Отбор.Вставить("active",      Истина);
	РегионыЗакупки = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 2);
	Отбор.Вставить("shipment",    Истина);
	Отбор.Вставить("active",      Истина);
	АдресаПродажи = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 2);
	Отбор.Вставить("entrance",    Истина);
	Отбор.Вставить("active",      Истина);
	АдресаЗакупки = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Результат = Новый Структура;
	Результат.Вставить("РегионыПродажи", РегионыПродажи);
	Результат.Вставить("АдресаПродажи",  АдресаПродажи);
	Результат.Вставить("РегионыЗакупки", РегионыЗакупки);
	Результат.Вставить("АдресаЗакупки",  АдресаЗакупки);
	
	Возврат Результат;
	
КонецФункции

// Синхронизация адресных настроек абонента.
//
// Параметры:
//  РегионаАдреса - ТаблицаЗначений - регионы и адреса абонента.
//   * Представление - Строка - представление адреса.
//   * ЗначенияПолей - Строка - контактная информация XML.
//   * ЭтоРегион - Булево - признак региона.
//   * ЭтоПродажи - Булево - признак продажи.
//   * ЭтоЗакупки - Булево - признак закупки.
//  Отказ - Булево - признак ошибки выполнения.
// 
Процедура СинхронизироватьАдресныеНастройкиАбонента(РегионыАдреса, Отказ) Экспорт
	
	РегионыАбонентаXDTO = ФабрикаXDTO.Создать(ТипXDTO("RegionsSubscriber"));
	СтраныПоиска = Новый Соответствие;
	
	Попытка

		Для Каждого СтрокаТаблицы Из РегионыАдреса Цикл
			Если ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
				Продолжить;
			КонецЕсли;
			АдресаРегионыXDTO = ФабрикаXDTO.Создать(ТипXDTO("CampaignAddress"));
			АдресаРегионыXDTO.address =      ПоляXDTOРегионаКонтактнойИнформацииСервиса(
				СтрокаТаблицы.ЗначенияПолей, СтраныПоиска);
			АдресаРегионыXDTO.addressType =  ?(СтрокаТаблицы.ЭтоРегион, 1, 2);
			АдресаРегионыXDTO.addressInfo1 = СтрокаТаблицы.Представление;
			АдресаРегионыXDTO.addressInfo2 = СтрокаТаблицы.ЗначенияПолей;
			АдресаРегионыXDTO.shipment =     СтрокаТаблицы.ЭтоПродажи;
			АдресаРегионыXDTO.entrance =     СтрокаТаблицы.ЭтоЗакупки;
			АдресаРегионыXDTO.active =       СтрокаТаблицы.Активный;
			РегионыАбонентаXDTO.CampaignAddress.Добавить(АдресаРегионыXDTO);
		КонецЦикла;
		
		РегионыАбонентаXDTO.Проверить();
		
	Исключение
		
		Отказ = Истина;
		Операция = НСтр("ru = 'Синхронизация адресных настроек абонента.'");
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, "БизнесСеть");
		Возврат;
		
	КонецПопытки;
	
	СтрокаJSON = ОбъектXDTOВСтрокуJSON(РегионыАбонентаXDTO, -1);
	
	ИмяКоманды = "СинхронизироватьАдресныеНастройкиАбонента";
	ПараметрыВызова = Неопределено;
	ПараметрыКоманды = Новый Структура("Данные", СтрокаJSON);
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	Если Отказ ИЛИ Результат.КодСостояния <> 200 ИЛИ Результат.Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Последний уровень региона контактной информации.
//
// Параметры:
//  ЗначенияПолей	 - Строка - контактная информация в XML.
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Строка - значение последнего заполненного уровня региона.
//
Функция ПоследнийУровеньКонтактнойИнформации(ЗначенияПолей, Ошибка) Экспорт
	
	ОбъектXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Ошибка = Истина;
		Возврат "";
	КонецЕсли;
	
	Если ОбъектXDTO.Состав.Свойства().Получить("Страна") = Неопределено
		ИЛИ ОбъектXDTO.Состав.Свойства().Получить("Состав") = Неопределено Тогда
		Ошибка = Истина;
		Возврат "";
	КонецЕсли;
	
	СоставАдреса = ОбъектXDTO.Состав.Состав;
	Если ТипЗнч(СоставАдреса) = Тип("ОбъектXDTO") Тогда
		Район = Неопределено;
		Если СоставАдреса.Свойства().Получить("СвРайМО") <> Неопределено
			И СоставАдреса.СвРайМО <> Неопределено
			И СоставАдреса.СвРайМО.Свойства().Получить("Район") <> Неопределено	Тогда
				Район = СоставАдреса.СвРайМО.Район;
		КонецЕсли;
		
		Если СоставАдреса.Свойства().Получить("СубъектРФ") = Неопределено
			ИЛИ СоставАдреса.Свойства().Получить("Город") = Неопределено
			ИЛИ СоставАдреса.Свойства().Получить("НаселПункт") = Неопределено
			ИЛИ СоставАдреса.Свойства().Получить("Город") = Неопределено Тогда
			Ошибка = Истина;
			Возврат "";
		КонецЕсли;
		
		Если СоставАдреса.НаселПункт <> Неопределено Тогда
			Возврат СоставАдреса.НаселПункт;
		ИначеЕсли СоставАдреса.Город <> Неопределено Тогда
			Возврат СоставАдреса.Город;
		ИначеЕсли Район <> Неопределено Тогда
			Возврат Район;
		ИначеЕсли СоставАдреса.СубъектРФ <> Неопределено Тогда
			Возврат СоставАдреса.СубъектРФ;
		ИначеЕсли ОбъектXDTO.Состав.Страна <> Неопределено Тогда
			Возврат ОбъектXDTO.Состав.Страна;
		Иначе
			Ошибка = Истина;
			Возврат "";
		КонецЕсли;
	ИначеЕсли ОбъектXDTO.Состав.Свойства().Получить("Страна") <> Неопределено Тогда
		Возврат ОбъектXDTO.Состав.Страна;
	КонецЕсли;
	
КонецФункции

// Получить регионы контактной информации
//
// Параметры:
//  ЗначенияПолей - Строка - контактная информация в XML.
//  Представление - Строка - представление адреса.
//
Процедура ПолучитьРегионыКонтактнойИнформации(ЗначенияПолей, Представление) Экспорт
	
	ОбъектXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
	НовоеПредставление = "";
	
	Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO")
		И ОбъектXDTO.Свойства().Получить("Состав") <> Неопределено
		И ОбъектXDTO.Состав.Свойства().Получить("Состав") <> Неопределено Тогда
		
		Если ТипЗнч(ОбъектXDTO.Состав.Состав) = Тип("ОбъектXDTO")
			И ОбъектXDTO.Состав.Состав.Свойства().Получить("ДопАдрЭл") <> Неопределено Тогда
		
			ОбъектXDTO.Состав.Состав.ДопАдрЭл.Очистить();
			ОбъектXDTO.Состав.Состав.Улица = "";
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTO);
			
			ОбъектXDTO.Представление = "";
			НовоеПредставление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ОбъектXDTO,
				Новый Структура("ВключатьСтрануВПредставление, ФорматАдреса", Истина, "ФИАС"));
		ИначеЕсли ОбъектXDTO.Состав.Свойства().Получить("Страна") <> Неопределено Тогда
			НовоеПредставление = ОбъектXDTO.Состав.Страна;
		КонецЕсли;
			
	КонецЕсли;
	Если Не ПустаяСтрока(НовоеПредставление) Тогда
		Представление = НовоеПредставление;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Описание пакета предложений для заполнения данных.
// 
// Возвращаемое значение:
//  Структура - описание пакета предложений.
//
Функция ОписаниеПакетаПредложений()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипДата   = Новый ОписаниеТипов("Дата");
	ТипЦена   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	ИмяСправочникаНоменклатура =   ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
	ИмяСправочникаХарактеристики = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("ХарактеристикиНоменклатуры");
	ИмяСправочникаУпаковки =       ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("УпаковкиНоменклатуры");
	
	ТипНоменклатура = 	Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаНоменклатура);
	ТипХарактеристики = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаХарактеристики);
	ТипУпаковки = 		Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаУпаковки);
	
	КонтактноеЛицо = Новый Структура;
	КонтактноеЛицо.Вставить("ФИО",              "");
	КонтактноеЛицо.Вставить("Телефон",          "");
	КонтактноеЛицо.Вставить("ЭлектроннаяПочта", "");
	
	КонтактыОрганизации = Новый Структура;
	КонтактыОрганизации.Вставить("ИНН",     "");
	КонтактыОрганизации.Вставить("КПП",     "");
	КонтактыОрганизации.Вставить("Телефон", "");
	КонтактыОрганизации.Вставить("Сайт",    "");
	КонтактыОрганизации.Вставить("ЭлектроннаяПочта", "");
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",               ТипНоменклатура);
	Товары.Колонки.Добавить("Наименование",               ТипСтрока);
	Товары.Колонки.Добавить("Цена",                       ТипЦена);
	Товары.Колонки.Добавить("ВалютаКод",                  ТипСтрока);
	Товары.Колонки.Добавить("Характеристика",             ТипХарактеристики);
	Товары.Колонки.Добавить("ХарактеристикаНаименование", ТипСтрока);
	Товары.Колонки.Добавить("Артикул",                    ТипСтрока);
	Товары.Колонки.Добавить("ИдентификаторКатегории",     ТипСтрока);
	Товары.Колонки.Добавить("СрокПоставки",               ТипЧисло);
	Товары.Колонки.Добавить("Упаковка",                   ТипУпаковки);
	Товары.Колонки.Добавить("УпаковкаКод",                ТипСтрока);
	Товары.Колонки.Добавить("УпаковкаНаименование",       ТипСтрока);
	Товары.Колонки.Добавить("УпаковкаЧислитель",          ТипЧисло);
	Товары.Колонки.Добавить("УпаковкаЗнаменатель",        ТипЧисло);
	Товары.Колонки.Добавить("ВидНоменклатуры");           // Ссылка.
	Товары.Колонки.Добавить("БазоваяЕдиницаИзмерения");   // Ссылка.
	Товары.Колонки.Добавить("СтавкаНДС");                 // Ссылка.
	Товары.Колонки.Добавить("ШтрихКоды",                  Новый ОписаниеТипов("ТаблицаЗначений"));
	Товары.Колонки.Добавить("Атрибуты",                   Новый ОписаниеТипов("ТаблицаЗначений"));
	Товары.Колонки.Добавить("Картинка");                  // Ссылка
	Товары.Колонки.Добавить("Расширение",                 ТипСтрока);
	Товары.Колонки.Добавить("ДатаИзмененияКартинки",      ТипДата);
	
	ШтрихКоды = Новый ТаблицаЗначений;
	ШтрихКоды.Колонки.Добавить("Номенклатура",   ТипНоменклатура);
	ШтрихКоды.Колонки.Добавить("Характеристика", ТипХарактеристики);
	ШтрихКоды.Колонки.Добавить("ЕдиницаИзмерения");
	ШтрихКоды.Колонки.Добавить("Значение");
	ШтрихКоды.Индексы.Добавить("Номенклатура, Характеристика, ЕдиницаИзмерения");
	
	Атрибуты = Новый ТаблицаЗначений;
	Атрибуты.Колонки.Добавить("ИдентификаторРеквизитаКатегории", ТипСтрока);
	Атрибуты.Колонки.Добавить("Наименование",                    ТипСтрока);
	Атрибуты.Колонки.Добавить("ИдентификаторЗначения",           ТипСтрока);
	Атрибуты.Колонки.Добавить("Значение");
	
	// Сегмент контрагентов для ограничения доступа к торговым предложениям.
	СписокКонтрагентов = Новый ТаблицаЗначений;
	СписокКонтрагентов.Колонки.Добавить("ИНН", ТипСтрока);
	СписокКонтрагентов.Колонки.Добавить("КПП", ТипСтрока);
	
	ПакетПредложений = Новый Структура;
	ПакетПредложений.Вставить("Статус",                Перечисления.СостоянияСинхронизацииТорговыеПредложения.ПустаяСсылка());
	ПакетПредложений.Вставить("ДатаНачалаДействия",    '00010101');
	ПакетПредложений.Вставить("ДатаОкончанияДействия", '00010101');
	ПакетПредложений.Вставить("Организация",           Неопределено); // Тип СправочникСсылка
	ПакетПредложений.Вставить("ВидЦен",                Неопределено); // Тип СправочникСсылка
	ПакетПредложений.Вставить("ЦенаВключаетНДС",       Ложь);
	ПакетПредложений.Вставить("Валюта",                Ложь);
	ПакетПредложений.Вставить("КонтактноеЛицо",        КонтактноеЛицо);
	ПакетПредложений.Вставить("КонтактыОрганизации",   КонтактыОрганизации);
	
	// Табличные части.
	ПакетПредложений.Вставить("СписокКонтрагентов", СписокКонтрагентов);
	ПакетПредложений.Вставить("Товары",    Товары);
	ПакетПредложений.Вставить("ШтрихКоды", ШтрихКоды);
	ПакетПредложений.Вставить("Атрибуты",  Атрибуты);
	
	Возврат ПакетПредложений;
	
КонецФункции

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения при поиске по списку.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица в которую будет помещен результат поиска.
//
Функция ОписаниеРезультатаПоискаТорговыхПредложенийПоСписку()
	
	ТипСтрока         = Новый ОписаниеТипов("Строка");
	ТипБулево         = Новый ОписаниеТипов("Булево");
	ТипЧислоДенежный  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ТипЧислоИзмерения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло          = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	СтавкаНДС = Неопределено;
	ТорговыеПредложенияПереопределяемый.ПолучитьЗначениеСтавкиНДС(Неопределено, СтавкаНДС);
	ТипСтавкаНДС      = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(СтавкаНДС)));
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ИндексСтроки",             ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("ПредложениеИдентификатор", ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Наименование",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Цена",                     ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("СтавкаНДС",                ТипСтавкаНДС);
	ТаблицаРезультата.Колонки.Добавить("СрокПоставки",             ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("Артикул",                  ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Упаковка",                 ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ЦенаВключаетНДС",          ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("Поставщик",                ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикИНН",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикКПП",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ЛучшаяЦена",               ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("ЛучшийСрок",               ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("МинимальнаяЦена",          ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("МаксимальнаяЦена",         ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("МинимальныйСрокПоставки",  ТипЧислоИзмерения);
	ТаблицаРезультата.Колонки.Добавить("МаксимальныйСрокПоставки", ТипЧислоИзмерения);
	ТаблицаРезультата.Колонки.Добавить("КоличествоПредложений",    ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикИдентификатор",   ТипСтрока);
	
	Возврат ТаблицаРезультата;

КонецФункции

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица в которую будет помещен результат поиска.
//
Функция ОписаниеРезультатаПоискаТорговыхПредложений()
	
	ТипСтрока          = Новый ОписаниеТипов("Строка");
	ТипБулево          = Новый ОписаниеТипов("Булево");
	ТипЧислоДенежный   = Новый ОписаниеТипов("Число",
						 Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ТипЧислоИзмерения  = Новый ОписаниеТипов("Число",
						 Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло           = Новый ОписаниеТипов("Число",
						 Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ТипВалюта          = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПредложениеИдентификатор", ТипСтрока);
	Таблица.Колонки.Добавить("ТоварНаименование",        ТипСтрока);
	Таблица.Колонки.Добавить("Описание",                 ТипСтрока);
	Таблица.Колонки.Добавить("Артикул",                  ТипСтрока);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",         ТипСтрока);
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",      ТипСтрока);
	Таблица.Колонки.Добавить("Характеристика",           ТипСтрока);
	Таблица.Колонки.Добавить("Цена",                     ТипЧислоДенежный);
	Таблица.Колонки.Добавить("ПоставщикНаименование",    ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикИдентификатор",   ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикИНН",             ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикКПП",             ТипСтрока);
	Таблица.Колонки.Добавить("Валюта",                   ТипВалюта);
	Таблица.Колонки.Добавить("СрокПоставки",             ТипЧисло);
	
	Возврат Таблица;
	
КонецФункции

// Возвращает структуру таблицы, в которой будут храниться картинки для выгрузки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с картинками и свойствами.
//
Функция ОписаниеТаблицыКартинок()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Картинка"); // Ссылка.
	Таблица.Колонки.Добавить("ИдентификаторКартинки", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаИзмененияКартинки", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Расширение",            Новый ОписаниеТипов("Строка"));
	Таблица.Индексы.Добавить("ИдентификаторКартинки");
	
	Возврат Таблица;
		
КонецФункции

// Получение значение JSON простого типа (строка, число, дата, булево).
//
// Параметры:
//  Значение - Произвольный - значение преобразования.
// 
// Возвращаемое значение:
//  Строка, Число, Дата, Булево - преобразованное значение.
//
Функция ЗначениеJSON(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Формат(Значение, "ДФ=yyyy-MM-dd; ДП=null");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Преобразование объекта XDTO в формат JSON.
//
// Параметры:
//  ОбъектXDTO	 - ОбъектXDTO - объект данных модели XDTO.
//  Уровень		 - Число - уровень вложенности.
// 
// Возвращаемое значение:
//  Строка - строка значения в формате JSON.
//
Функция ОбъектXDTOВСтрокуJSON(Знач ОбъектXDTO, Знач Уровень = 0) Экспорт
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	
	ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO, ЗаписьJSON, Уровень);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Чтение значения объекта XTDO в запись JSON.
//
// Параметры:
//  ОбъектXDTO	 - Произвольный - элемент XDTO.
//  ЗаписьJSON	 - ЗаписьJSON - запись JSON.
//  Уровень		 - Число - уровень вложенности.
//
Процедура ПрочитатьОбъектXDTOВЗаписьJSON(Знач ОбъектXDTO, ЗаписьJSON, Знач Уровень = 0)
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Если ОбъектXDTO.Количество() Тогда
			Если Уровень > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ОбъектXDTO.ВладеющееСвойство.Имя);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для Каждого ЭлементСпискаXDTO Из ОбъектXDTO Цикл
				ПрочитатьОбъектXDTOВЗаписьJSON(ЭлементСпискаXDTO, ЗаписьJSON, Уровень);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		Иначе
			ЗаписьJSON.ЗаписатьНачалоМассива();
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		КонецЕсли;
		Для Каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
			Если ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("СписокXDTO") Тогда
				Если СвойствоXDTO.НижняяГраница > 0 
					ИЛИ ОбъектXDTO[СвойствоXDTO.Имя].Количество() <> 0 
					ИЛИ Уровень = -1 Тогда
					ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.ПолучитьСписок(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);
				ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			Иначе	
				ЗначениеСвойства = ЗначениеJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя));
				Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) И СвойствоXDTO.НижняяГраница = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);	
				ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеJSON(ОбъектXDTO));
	КонецЕсли;
	
КонецПроцедуры

// Установка параметров вызова команды сервиса.
//
// Параметры:
//   Метод - Строка - наименование метода.
//   ПараметрыКоманды - Структура - дополнительные произвольные параметры.
//   ПараметрыВызова - Структура - возвращаемые параметры вызова команды.
//     * Адрес - Строка - адрес метода в сервисе.
//     * Метод - Строка - метод взаимодействия get, post, put, update.
//     * Данные - Произвольный - тело запроса.
//     * Права - Строка - права доступа bn_its (логин Интернет-поддержки), bn_user (пользователь ИБ).
//   Отказ - Булево - признак отказа выполнения.
//
Процедура СформироватьПараметрыВызоваКомандыСервиса(Знач ИмяКоманды, Знач ПараметрыКоманды, ПараметрыВызова, Отказ)
	
	Если ПараметрыВызова = Неопределено Тогда
		ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	КонецЕсли;
	
	Если ИмяКоманды = "ПоискТорговыхПредложенийПоСтроке" Тогда
	
		ПараметрыВызова.Адрес = "/api/offer/v1/product/search";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.СтрокаJSON;
		
		// Если нет регистрации, необходима аутентификация по логину интернет-поддержки.
		Если Не БизнесСеть.ОрганизацияЗарегистрирована() Тогда
			ПараметрыВызова.Права = "bn_its";
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПоискТорговыхПредложенийПоСписку" Тогда
	
		ПараметрыВызова.Адрес = "/api/offer/v1/product/listSearch";
		ПараметрыВызова.Метод = "post";

		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "ПрочитатьТорговоеПредложение" Тогда
	
		ПараметрыВызова.Адрес = "/api/offer/v1/product/"
			+ КодироватьСтроку(ПараметрыКоманды.Идентификатор, СпособКодированияСтроки.КодировкаURL)
			+ "?currency=" + ПараметрыКоманды.КодВалюты;
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолнаяСинхронизацияТорговыхПредложений" Тогда
		
		ПараметрыВызова.Адрес = "/api/offer/v1/organization/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыКоманды.ИНН) + "/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыКоманды.КПП) + "/campaigns/fullSync";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "СписокОтсутствующихКартинок" Тогда
		
		// Подготовка списка картинок.
		МассивКартинок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПараметрыКоманды.ТаблицаКартинок Цикл
			МассивКартинок.Добавить(Новый Структура("id, updateDate",
				СтрокаТаблицы.ИдентификаторКартинки, Формат(
					Формат(СтрокаТаблицы.ДатаИзмененияКартинки - Дата(1970, 1, 1, 1, 0, 0), "ЧГ=0"))));
		КонецЦикла;

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто));
		ЗаписатьJSON(ЗаписьJSON, МассивКартинок);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		ПараметрыВызова.Адрес = "/api/offer/v1/product/picture/missingOrOutdated";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "ВыгрузитьКартинку" Тогда
		
		ПараметрыВызова.Адрес = "/api/offer/v1/product/picture/"
			+ ПараметрыКоманды.ИдентификаторКартинки
			+ "/" + Формат(ПараметрыКоманды.ДатаИзмененияКартинки, "ДФ=dd-MM-yyyy-HH-mm-ss");
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		
		Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
		ИмяФайла = ПараметрыКоманды.ИдентификаторКартинки + "." + НРег(ПараметрыКоманды.Расширение);
		
		Текст = Новый ТекстовыйДокумент;
		Текст.РазделительСтрок = Символы.ВК + Символы.ПС;
		Текст.ДобавитьСтроку("--" + Разделитель);
		Текст.ДобавитьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + ИмяФайла + """");
		Текст.ДобавитьСтроку("Content-Type: image/" + НРег(ПараметрыКоманды.Расширение));
		Текст.ДобавитьСтроку("");
		
		МассивДвоичныхДанных = Новый Массив;
		МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Текст.ПолучитьТекст()));
		МассивДвоичныхДанных.Добавить(РаботаСФайлами.ДвоичныеДанныеФайла(ПараметрыКоманды.Картинка));
		
		Текст.Очистить();
		Текст.ДобавитьСтроку("");
		Текст.ДобавитьСтроку("--" + Разделитель + "--");
		
		МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Текст.ПолучитьТекст()));
		
		ДвоичныеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
		ПараметрыВызова.Данные = ДвоичныеДанные;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Length", XMLСтрока(ДвоичныеДанные.Размер()));
		Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
		ПараметрыВызова.Вставить("Заголовки", Заголовки);
		
		Если ДвоичныеДанные.Размер() > 1024 Тогда
			ПараметрыВызова.Вставить("Таймаут", ДвоичныеДанные.Размер() / 1024 * 128);
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПолучитьКоличествоТорговыхПредложений" Тогда
		
		КодВалюты = КодВалюты(ТорговыеПредложенияПереопределяемый.ВалютаРегламентированногоУчета());

		Если КодВалюты = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
			
		Поставщик = Новый Массив;
		Поставщик.Добавить(Новый Структура("inn, kpp", БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыКоманды.ИНН),
			БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыКоманды.КПП)));
		
		ПараметрыСтруктуры = Новый Структура("currency, vendors", КодВалюты, Поставщик);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ПараметрыСтруктуры);
		СтрокаJSON = ЗаписьJSON.Закрыть();		
		
		ПараметрыВызова.Адрес = "/api/offer/v1/product/count/";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "ПолучитьАдресныеНастройкиАбонента" Тогда
		
		ПараметрыВызова.Адрес = "/api/offer/v1/campaign/address";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "СинхронизироватьАдресныеНастройкиАбонента" Тогда
		
		ПараметрыВызова.Адрес = "/api/offer/v1/campaign/address/fullSync";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.Данные;
		
	ИначеЕсли ИмяКоманды = "ПолучитьАдресаСамовывоза" Тогда
		
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыКоманды.Идентификатор, "_");
		Если Реквизиты.Количество() = 0 Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			ИНН = Реквизиты[0];
			КПП = "";
			Если Реквизиты.Количество()>1 Тогда
				КПП = Реквизиты[1];
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВызова.Адрес = СтрШаблон("/api/offer/v1/organization/%1/%2/campaign/address",
			БизнесСетьКлиентСервер.ФорматИдентификатора(ИНН),
			БизнесСетьКлиентСервер.ФорматИдентификатора(КПП));
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьВалютуПоКоду" Тогда
		
		ПараметрыВызова.Адрес  = СтрШаблон("/api/offer/v1/currency/%1", Формат(ПараметрыКоманды.КодВалюты, "ЧГ="));
		ПараметрыВызова.Метод  = "get";
		ПараметрыВызова.Права  = "bn_user";
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка инициализации сервиса'"),,,, Отказ);
		
	КонецЕсли;

КонецПроцедуры

// Синхронизация торговых предложения с сервисом.
//
// Параметры:
//  КоличествоПовторяющихсяДанных	 - Число - количество выгруженных данных.
//
Процедура СинхронизироватьТорговыеПредложения(КоличествоПовторяющихсяДанных)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Организации1СБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.Организации1СБизнесСеть КАК Организации1СБизнесСеть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияСинхронизации.ТорговоеПредложение.Ссылка КАК ТорговоеПредложение,
	|	СостоянияСинхронизации.Организация КАК Организация,
	|	СостоянияСинхронизации.Организация.ИНН КАК ИНН,
	|	СостоянияСинхронизации.Организация.КПП КАК КПП,
	|	СостоянияСинхронизации.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	СостоянияСинхронизации.УведомлятьОЗаказах КАК УведомлятьОЗаказах,
	|	СостоянияСинхронизации.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	СостоянияСинхронизации.ДополнительноеОписание КАК ДополнительноеОписание,
	|	СостоянияСинхронизации.ВыгружатьКартинки КАК ВыгружатьКартинки
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизации
	|ГДЕ
	|	НЕ СостоянияСинхронизации.ТорговоеПредложение.ПометкаУдаления
	|ИТОГИ ПО
	|	Организация";
	
	ИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	КППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ИНН", "." + ИННОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".КПП", "." + КППОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ПодключенныеОрганизации = ПакетЗапроса[0].Выгрузить().ВыгрузитьКолонку("Организация");
	ТорговыеПредложенияПоОрганизациям = ПакетЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	ТаблицаОпераций.Колонки.Добавить("ТорговоеПредложение");
	ТаблицаОпераций.Колонки.Добавить("Организация");
	ТаблицаОпераций.Колонки.Добавить("Дата");
	ТаблицаОпераций.Колонки.Добавить("Статус");
	ТаблицаОпераций.Колонки.Добавить("ОписаниеОшибки");
	ТаблицаОпераций.Колонки.Добавить("ДействиеСинхронизации");
	
	ТаблицаКартинок = ОписаниеТаблицыКартинок();
	
	// Проверка сопоставления номенклатуры.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеВидовНоменклатуры1СБизнесСеть.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть КАК СоответствиеВидовНоменклатуры1СБизнесСеть";
	
	ТекстОшибкиСопоставления = "";
	
	Если Запрос.Выполнить().Выбрать().Количество() = 0 Тогда
		ТекстОшибкиСопоставления = Строка(Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСопоставление);
	КонецЕсли;
	
	Пока ТорговыеПредложенияПоОрганизациям.Следующий() Цикл
		
		ТекстОшибки = "";
		Если ПустаяСтрока(ТорговыеПредложенияПоОрганизациям.ИНН) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Для организации %1 не указан ИНН.'"),
				СокрЛП(ТорговыеПредложенияПоОрганизациям.Организация));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ИначеЕсли ПодключенныеОрганизации.Найти(ТорговыеПредложенияПоОрганизациям.Организация) = Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Организации %1 не зарегистрирована в сервисе.'"),
				СокрЛП(ТорговыеПредложенияПоОрганизациям.Организация));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ИначеЕсли Не ПустаяСтрока(ТекстОшибкиСопоставления) Тогда
			ТекстОшибки = ТекстОшибкиСопоставления;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ПакетыТорговыхПредложений = ТорговыеПредложенияПоОрганизациям.Выбрать();
			Пока ПакетыТорговыхПредложений.Следующий() Цикл
				СтрокаОперации = ТаблицаОпераций.Добавить();
				СтрокаОперации.ТорговоеПредложение   = ПакетыТорговыхПредложений.ТорговоеПредложение;
				СтрокаОперации.Организация           = ПакетыТорговыхПредложений.Организация;
				СтрокаОперации.Дата                  = ТекущаяДатаСеанса();
				СтрокаОперации.Статус                = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				СтрокаОперации.ОписаниеОшибки        = ТекстОшибки;
				СтрокаОперации.ДействиеСинхронизации = ПакетыТорговыхПредложений.ДействиеСинхронизации;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ProductList = ФабрикаXDTO.Создать(ТипXDTO("ProductList"));
		
		ТаблицаКартинок.Очистить();
		
		ПакетыТорговыхПредложений = ТорговыеПредложенияПоОрганизациям.Выбрать();
		Пока ПакетыТорговыхПредложений.Следующий() Цикл
			
			ПакетПредложенийXDTO = СформироватьПакетПредложенийXDTO(ПакетыТорговыхПредложений, ТаблицаКартинок);
			
			СтрокаОперации = ТаблицаОпераций.Добавить();
			СтрокаОперации.ТорговоеПредложение   = ПакетыТорговыхПредложений.ТорговоеПредложение;
			СтрокаОперации.Организация           = ПакетыТорговыхПредложений.Организация;
			СтрокаОперации.Дата                  = ТекущаяДатаСеанса();
			СтрокаОперации.ДействиеСинхронизации = ПакетыТорговыхПредложений.ДействиеСинхронизации;
			
			Если ПакетПредложенийXDTO = Неопределено Тогда
				ТекстОшибки                   = НСтр("ru = 'Отсутствует товар для публикации.'");
				СтрокаОперации.Статус         = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				СтрокаОперации.ОписаниеОшибки = ТекстОшибки;
			Иначе
				ProductList.offers.Добавить(ПакетПредложенийXDTO);
				
				// &ЗамерПроизводительности
				КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных
					+ ?(ПакетПредложенийXDTO.products = Неопределено, 0, ПакетПредложенийXDTO.products.Количество());
			КонецЕсли;
			
		КонецЦикла;
		
		Отказ = Ложь;
		
		// Выгрузка картинок.
		Если ТаблицаКартинок.Количество() Тогда
			
			ПараметрыКоманды = Новый Структура("ТаблицаКартинок", ТаблицаКартинок);
			ИмяКоманды = "СписокОтсутствующихКартинок";
			ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
			СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
			ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
			
			// Получение списка невыгруженных картинок.
			Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
			БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
			Если Отказ ИЛИ Результат.КодСостояния <> 200 И ТипЗнч(Результат.Данные) = Тип("Массив") Тогда
				Возврат;
			КонецЕсли;
			
			// Отправка картинок в сервис.
			Для Каждого ИдентификаторКартинки Из Результат.Данные Цикл
				
				СтрокаКартинки = ТаблицаКартинок.Найти(ИдентификаторКартинки, "ИдентификаторКартинки");
				Если СтрокаКартинки = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный идентификатор картинки %1'"), ИдентификаторКартинки);
				КонецЕсли;
				
				ИмяКоманды = "ВыгрузитьКартинку";
				ПараметрыКоманды = Новый Структура;
				ПараметрыКоманды.Вставить("Картинка", СтрокаКартинки.Картинка);
				ПараметрыКоманды.Вставить("ИдентификаторКартинки", СтрокаКартинки.ИдентификаторКартинки);
				ПараметрыКоманды.Вставить("ДатаИзмененияКартинки", СтрокаКартинки.ДатаИзмененияКартинки);
				ПараметрыКоманды.Вставить("Расширение", СтрокаКартинки.Расширение);
				
				ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
				СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
				ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
				
				Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
				БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
				Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		// Конец Выгрузка картинок.
		
		Если ProductList.offers.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаJSON = ОбъектXDTOВСтрокуJSON(ProductList, -1);
		
		ПараметрыКоманды = Новый Структура("ИНН, КПП, Данные");
		ЗаполнитьЗначенияСвойств(ПараметрыКоманды, ТорговыеПредложенияПоОрганизациям);
		ПараметрыКоманды.Вставить("СтрокаJSON", СтрокаJSON);
		
		
		ИмяКоманды = "ПолнаяСинхронизацияТорговыхПредложений";
		ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
		СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
		ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
		
		Результат = БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса();
		БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
		
		Если Результат.КодСостояния = 404 Тогда
			
			Отказ = Истина;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка обращения к сервису (%1, код %2).'"),
				ИмяКоманды, Результат.КодСостояния);
			ПодробныйТекстОшибки = "";
			
			Если ТипЗнч(Результат.Данные) = Тип("Структура") И
				Результат.Данные.Свойство("message") Тогда
				ТекстОшибкиСервиса = Результат.Данные.message;
				
				ПодробныйТекстОшибки = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru='Адрес: %1.'"), ПараметрыВызова.Адрес)
					+ Символы.ПС + СтрШаблон(НСтр("ru='Подробности: %1.'"), ТекстОшибкиСервиса);
				
			КонецЕсли;
			ВидОперации = СтрШаблон(НСтр("ru = 'Команда ""%1""'"), ИмяКоманды);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
				ПодробныйТекстОшибки, ТекстСообщения, "БизнесСеть");
			Результат.ТекстОшибки = ТекстСообщения;
			Результат.ПодробныйТекстОшибки = ПодробныйТекстОшибки;
			
		ИначеЕсли Результат.КодСостояния <> 200 Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПакетыТорговыхПредложений.Сбросить();
		Пока ПакетыТорговыхПредложений.Следующий() Цикл
			СтрокаОперации = ТаблицаОпераций.Найти(ПакетыТорговыхПредложений.ТорговоеПредложение, "ТорговоеПредложение");
			СтрокаОперации.Дата = ТекущаяДатаСеанса();
			СтрокаОперации.Статус = ?(Не Отказ,
				Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано,
				Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации);
			СтрокаОперации.ОписаниеОшибки = ?(Результат.Свойство("ТекстОшибки"), Результат.ТекстОшибки, "");
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаОперации Из ТаблицаОпераций Цикл
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = СтрокаОперации.ТорговоеПредложение;
		МенеджерЗаписи.Организация = СтрокаОперации.Организация;
		МенеджерЗаписи.Прочитать();
		Если СтрокаОперации.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		Иначе
			МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.ПустаяСсылка();
			МенеджерЗаписи.Состояние = СтрокаОперации.Статус;
			МенеджерЗаписи.ДатаСинхронизации = СтрокаОперации.Дата;
			МенеджерЗаписи.ОписаниеОшибки = СтрокаОперации.ОписаниеОшибки;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавление элементов управления для формы торговые предложения.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма объекта торговые предложения, например Справочник.Соглашения.
//  ГруппаЭлементов	 - ГруппаФормы - группа элементов формы для добавления новых элементов.
//
Процедура ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ГруппаЭлементов)

	// Создание реквизитов формы.
	
	НовыеРеквизитыФормы = Новый Массив;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Реквизиты = Новый Соответствие();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Реквизиты.Вставить(РеквизитФормы.Имя, РеквизитФормы);
	КонецЦикла;
	
	РеквизитТорговыеПредложенияПубликовать = Новый РеквизитФормы("ТорговыеПредложенияПубликовать",
		Новый ОписаниеТипов("Булево"),, НСтр("ru = 'Публиковать торговые предложения в сервисе'"),	Истина);
		
	Если Реквизиты.Получить(РеквизитТорговыеПредложенияПубликовать.Имя) = Неопределено Тогда
		НовыеРеквизитыФормы.Добавить(РеквизитТорговыеПредложенияПубликовать);
	КонецЕсли;
	Если НовыеРеквизитыФормы.Количество() Тогда
		Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	КонецЕсли;
	
	// Создание/настройка элементов управления.
	
	// Создание общей группы 1С:Бизнес-сеть.
	ЭлементГруппаТорговыеПредложения = ГруппаЭлементов.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
	Если ЭлементГруппаТорговыеПредложения = Неопределено Тогда
		ЭлементГруппаТорговыеПредложения = Форма.Элементы.Добавить("ГруппаТорговыеПредложения",
			Тип("ГруппаФормы"), ГруппаЭлементов);
		ЭлементГруппаТорговыеПредложения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаТорговыеПредложения.Заголовок = НСтр("ru = '1С:Бизнес-сеть'");
		ЭлементГруппаТорговыеПредложения.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаТорговыеПредложения.ОтображатьЗаголовок = Ложь;
		ЭлементГруппаТорговыеПредложения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	ЭлементыГруппы = ЭлементГруппаТорговыеПредложения.ПодчиненныеЭлементы;
	
	// Флаг Публиковать торговые предложения.
	ЭлементТорговыеПредложенияПубликовать = ЭлементыГруппы.Найти("ТорговыеПредложенияПубликовать");
	Если ЭлементТорговыеПредложенияПубликовать = Неопределено Тогда
		ЭлементТорговыеПредложенияПубликовать = Форма.Элементы.Добавить("ТорговыеПредложенияПубликовать",
			Тип("ПолеФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементТорговыеПредложенияПубликовать.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементТорговыеПредложенияПубликовать.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ЭлементТорговыеПредложенияПубликовать.ПутьКДанным = РеквизитТорговыеПредложенияПубликовать.Имя;
		ЭлементТорговыеПредложенияПубликовать.УстановитьДействие("ПриИзменении",
			"Подключаемый_ПриИзменении_ПубликоватьТорговыеПредложения");
	КонецЕсли;
	
	// Гиперссылка Торговые предложения.
	ЭлементТорговыеПредложенияСостояниеОбмена = ЭлементыГруппы.Найти("ТорговыеПредложенияСостояниеОбмена");
	Если ЭлементТорговыеПредложенияСостояниеОбмена = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияСостояниеОбмена",
			Тип("ДекорацияФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Торговые предложения состояние обмена'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;
	
	// Гиперссылка Дополнительные настройки.
	ЭлементГиперссылка = ЭлементыГруппы.Найти("ТорговыеПредложенияОткрытьНастройкиПубликации");
	Если ЭлементГиперссылка = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияОткрытьНастройкиПубликации",
			Тип("ДекорацияФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Дополнительные настройки публикации'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;

КонецПроцедуры

// Формирование пакет предложений XDTO для синхронизации.
//
// Параметры:
//  ПараметрыТорговогоПредложения	 - Структура - параметры для синхронизации.
// 
// Возвращаемое значение:
//  ОбъектXTDO - объект выгрузки торговых предложений.
//
Функция СформироватьПакетПредложенийXDTO(Знач ПараметрыТорговогоПредложения, ТаблицаКартинок)
	
	ТорговоеПредложение =    ПараметрыТорговогоПредложения.ТорговоеПредложение;
	ДействиеСинхронизации =  ПараметрыТорговогоПредложения.ДействиеСинхронизации;
	ДополнительноеОписание = ПараметрыТорговогоПредложения.ДополнительноеОписание;
	
	Campaign = ФабрикаXDTO.Создать(ТипXDTO("Campaign"));
	Campaign.id = Строка(ТорговоеПредложение.УникальныйИдентификатор());
	
	Если ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
		Campaign.active = Ложь;
		Возврат Campaign;
	КонецЕсли;
	
	// Формирование торгового предложения.
	ПакетПредложений = ОписаниеПакетаПредложений();
	ТорговыеПредложенияПереопределяемый.ЗаполнитьПакетПредложений(ТорговоеПредложение, ПакетПредложений);
	
	Если ПакетПредложений.Товары.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Campaign.active =      Истина;
	Campaign.validFrom =   ПакетПредложений.ДатаНачалаДействия;
	Campaign.validTo =     ПакетПредложений.ДатаОкончанияДействия;
	Campaign.saleWithNds = ПакетПредложений.ЦенаВключаетНДС;
	
	// Заполнение контактной информации.
	ContactInfo =  ФабрикаXDTO.Создать(ТипXDTO("ContactInfo"));
	Organization = ФабрикаXDTO.Создать(ТипXDTO("Organization"));
	Person =       ФабрикаXDTO.Создать(ТипXDTO("Person"));
	
	Organization.inn =   ПакетПредложений.КонтактыОрганизации.ИНН;
	Organization.kpp =   ?(ПустаяСтрока(ПакетПредложений.КонтактыОрганизации.КПП), "0", ПакетПредложений.КонтактыОрганизации.КПП);
	Organization.phone = ПакетПредложений.КонтактыОрганизации.Телефон;
	Organization.email = ПакетПредложений.КонтактыОрганизации.ЭлектроннаяПочта;
	Organization.site  = ПакетПредложений.КонтактыОрганизации.Сайт;
	
	Person.name =  ПакетПредложений.КонтактноеЛицо.ФИО;
	Person.phone = ПакетПредложений.КонтактноеЛицо.Телефон;
	Person.email = ПакетПредложений.КонтактноеЛицо.ЭлектроннаяПочта;
	
	ContactInfo.organization = Organization;
	ContactInfo.person = Person;
	
	Если ПараметрыТорговогоПредложения.УведомлятьОЗаказах И Не ПустаяСтрока(ПараметрыТорговогоПредложения.АдресЭлектроннойПочты) Тогда
		ContactInfo.notificationEmail = ПараметрыТорговогоПредложения.АдресЭлектроннойПочты;
	КонецЕсли;
	
	Campaign.contactInfo = ContactInfo;
	
	// Заполнение сегмента контрагентов.
	Для Каждого СтрокаКонтрагентов Из ПакетПредложений.СписокКонтрагентов Цикл
		Customer = ФабрикаXDTO.Создать(Campaign.customers.ВладеющееСвойство.Тип);
		Customer.inn = СтрокаКонтрагентов.ИНН;
		Customer.kpp = ?(ПустаяСтрока(СтрокаКонтрагентов.КПП), "0", СтрокаКонтрагентов.КПП);
		Campaign.customers.Добавить(Customer);
	КонецЦикла;
	
	// Заполнение позиций торговых предложений.
	Для Каждого СтрокаТовары Из ПакетПредложений.Товары Цикл
		
		Если СтрокаТовары.Цена = 0 Тогда
			Продолжить; // Пустые цены не выгружаются в сервис.
		КонецЕсли;
		
		Product = ФабрикаXDTO.Создать(ТипXDTO("Product"));
		Product.name =           СтрокаТовары.Наименование;
		Product.price =          СтрокаТовары.Цена * 100; // Цены в сервисе хранятся в копейках.
		Product.currency =       СтрокаТовары.ВалютаКод;
		Product.vendorCode =     СтрокаТовары.Артикул;
		Product.categoryId =     СтрокаТовары.ИдентификаторКатегории;
		Product.deliveryTime =   СтрокаТовары.СрокПоставки;
		Product.basicUnit =      СокрЛП(СтрокаТовары.УпаковкаКод);
		Product.unit =           СтрокаТовары.УпаковкаНаименование;
		Product.basicUnitCount = СтрокаТовары.УпаковкаЧислитель;
		Product.unitCount =      СтрокаТовары.УпаковкаЗнаменатель;
		Product.feature =        СтрокаТовары.ХарактеристикаНаименование;
		Product.description =    ДополнительноеОписание;
		Product.feature =        СтрокаТовары.ХарактеристикаНаименование;
		
		ЭтоУпаковка = ЗначениеЗаполнено(СтрокаТовары.Упаковка)
			И (СтрокаТовары.УпаковкаЧислитель <> 1 ИЛИ СтрокаТовары.УпаковкаЧислитель <> 1);
		Product.id = СтрШаблон("%1#%2#%3#%4",
			Строка(ПараметрыТорговогоПредложения.ТорговоеПредложение.УникальныйИдентификатор()),
			Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор()),
			?(ЗначениеЗаполнено(СтрокаТовары.Характеристика), Строка(СтрокаТовары.Характеристика.УникальныйИдентификатор()), ""),
			?(ЭтоУпаковка, Строка(СтрокаТовары.Упаковка.УникальныйИдентификатор()), ""));
			
		ТорговыеПредложенияПереопределяемый.ПолучитьИмяСтавкиНДС(СтрокаТовары.СтавкаНДС, Product.nds);
		
		Если ПараметрыТорговогоПредложения.ВыгружатьКартинки И ЗначениеЗаполнено(СтрокаТовары.Картинка) Тогда
			НоваяСтрокаКартинок = ТаблицаКартинок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКартинок, СтрокаТовары);
			НоваяСтрокаКартинок.ИдентификаторКартинки = СтрокаТовары.Картинка.УникальныйИдентификатор();
			Product.pictureId = НоваяСтрокаКартинок.ИдентификаторКартинки;
		КонецЕсли;
		
		// Заполнение атрибутов номенклатуры.
		Для Каждого СтрокаАтрибуты Из СтрокаТовары.Атрибуты Цикл
			Если ЗначениеЗаполнено(СтрокаАтрибуты.Значение)
				ИЛИ ЗначениеЗаполнено(СтрокаАтрибуты.ИдентификаторЗначения) Тогда
				Attribute = ФабрикаXDTO.Создать(ТипXDTO("Attribute"));
				Attribute.name =        СтрокаАтрибуты.Наименование;
				Attribute.attributeId = СтрокаАтрибуты.ИдентификаторРеквизитаКатегории;
				Attribute.valueId =     СтрокаАтрибуты.ИдентификаторЗначения;
				Attribute.value =       СтрокаАтрибуты.Значение;
				Product.attributes.Добавить(Attribute);
			КонецЕсли;
		КонецЦикла;
		
		// Заполнение штрих-кодов.
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",     СтрокаТовары.Номенклатура);
		Отбор.Вставить("Характеристика",   СтрокаТовары.Характеристика);
		Отбор.Вставить("ЕдиницаИзмерения", СтрокаТовары.Упаковка);
		ШтрихКодыНоменклатуры = СтрокаТовары.ШтрихКоды.НайтиСтроки(Отбор);
		Для Каждого СтрокаШтрихКодов Из ШтрихКодыНоменклатуры Цикл
			Product.barcodes.Добавить(СтрокаШтрихКодов.Значение);
		КонецЦикла;
		
		Campaign.products.Добавить(Product);
		
	КонецЦикла;
	
	Возврат Campaign;
	
КонецФункции

// Приведение к типу значения рубрикатора.
//
// Параметры:
//  Значение		 - Произвольный - значение рубрикатора.
//  ТипРубрикатора	 - Строка - тип значения рубрикатора (BOOLEAN, NUMBER).
// 
// Возвращаемое значение:
//  Булево, Число - возвращаемое значение по типу.
//
Функция ПривестиКТипуЗначениеРубрикатора(Знач Значение, Знач ТипРубрикатора)
	
 	Если ВРег(ТипРубрикатора) = "BOOLEAN" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Булево");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	ИначеЕсли ВРег(ТипРубрикатора) = "NUMBER" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	ИначеЕсли ВРег(ТипРубрикатора) = "ENUMERATION" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Строка");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Установка параметров вызова команды сервиса рубрикатора.
//
// Параметры:
//   Метод - Строка - наименование метода.
//   ПараметрыКоманды - Структура - дополнительные произвольные параметры.
//   ПараметрыВызова - Структура - возвращаемые параметры вызова команды.
//     * Адрес - Строка - адрес метода в сервисе.
//     * Метод - Строка - метод взаимодействия get, post, put, update.
//     * Данные - Произвольный - тело запроса.
//     * Права - Строка - права доступа bn_its (логин Интернет-поддержки), bn_user (пользователь ИБ).
//   Отказ - Булево - признак отказа выполнения.
//
Процедура СформироватьПараметрыВызоваКомандыРубрикатора(Знач ИмяКоманды, Знач ПараметрыКоманды, ПараметрыВызова, Отказ)
	
	Если ИмяКоманды = "ПолучитьСписокКатегорийПервогоУровня" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/categories";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьКатегорию" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/category/" + Формат(ПараметрыКоманды.ИдентификаторКатегории, "ЧГ=");
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьСписокДочернихКатегорий" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/category/" + Формат(ПараметрыКоманды.ИдентификаторКатегории, "ЧГ=")
			+ "/children";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьЦепочкуКатегорийДоКорневой" Тогда
		
		ПараметрыВызова.Адрес  = "api/classifier/v1/category/pathToRoot";
		ПараметрыВызова.Метод  = "post";
		ПараметрыВызова.Права  = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.ИдентификаторыКатегории;
		
	ИначеЕсли ИмяКоманды = "ПолучитьСписокХарактеристикКатегории" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/category/" + Формат(ПараметрыКоманды.ИдентификаторКатегории, "ЧГ=")
			+ "/attributes";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьХарактеристику" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/attribute/" + Формат(ПараметрыКоманды.ИдентификаторХарактеристики, "ЧГ=");
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьЗначенияХарактеристики" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/category/" + Формат(ПараметрыКоманды.ИдентификаторКатегории, "ЧГ=")
			+ "/attribute/" + Формат(ПараметрыКоманды.ИдентификаторХарактеристики, "ЧГ=") + "/values";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьЗначениеХарактеристики" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/value/"
			+ Формат(ПараметрыКоманды.ИдентификаторЗначенияХарактеристики,"ЧГ=");
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПоискКатегорий" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/categories/search?search="
			+ КодироватьСтроку(ПараметрыКоманды.СтрокаПоиска, СпособКодированияСтроки.КодировкаURL);
			
		Если ПараметрыКоманды.Свойство("ТолькоЭлементы") И ПараметрыКоманды.ТолькоЭлементы Тогда
			ПараметрыВызова.Адрес = ПараметрыВызова.Адрес + "&onlyLeaves="
				+ Формат(ПараметрыКоманды.ТолькоЭлементы, "БЛ=false; БИ=true");
		КонецЕсли;
		
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьЕдиницуИзмерения" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/unit/" + ПараметрыКоманды.ИдентификаторЕдиницыИзмерения;
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "СопоставитьЗначенияРеквизитов" Тогда
		
		ПараметрыВызова.Адрес  = "api/classifier/v1/findAttributeValueIdsByValues";
		ПараметрыВызова.Метод  = "post";
		ПараметрыВызова.Права  = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.ЗначенияДляСопоставления;

	ИначеЕсли ИмяКоманды = "ПолучитьСписокВсехКатегорий" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/categories/all?onlyId=false";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка инициализации сервиса'"),,,, Отказ);
		
	КонецЕсли;

КонецПроцедуры

// Получение структуры реквизитов сопоставления рубрикатора.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица реквизитов с указанными типами колонок.
//
Функция ОписаниеРеквизитовСопоставленияРубрикатора()
	
	ТипСтрока          = Новый ОписаниеТипов("Строка");
	ТипБулево          = Новый ОписаниеТипов("Булево");
	ТипОписаниеТипов   = Новый ОписаниеТипов("ОписаниеТипов");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("РеквизитОбъекта");
	Таблица.Колонки.Добавить("ИдентификаторРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("ПредставлениеРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("Сопоставлено",                    ТипСтрока);
	Таблица.Колонки.Добавить("ТипЗначения",                     ТипОписаниеТипов);
	Таблица.Колонки.Добавить("ТипРеквизитаРубрикатора",         ТипСтрока);
	Таблица.Колонки.Добавить("ВозможноСопоставление",           ТипБулево);
	
	Возврат Таблица;
	
КонецФункции

Функция ПоляXDTOРегионаКонтактнойИнформацииСервиса(ЗначенияПолей, СтраныПоиска = Неопределено)
	
	ПоляРегионаXDTO = ФабрикаXDTO.Создать(ТипXDTO("Address"));
	
	ОбъектXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Если ОбъектXDTO = Неопределено ИЛИ ОбъектXDTO.Свойства().Получить("Состав") = Неопределено Тогда
		Возврат ПоляРегионаXDTO;
	КонецЕсли;
	
	Если СтраныПоиска = Неопределено Тогда
		СтраныПоиска = Новый Соответствие;
	КонецЕсли;
	
	Если ОбъектXDTO.Состав.Свойства().Получить("Страна") <> Неопределено Тогда
		
		Страна = ОбъектXDTO.Состав.Страна;
		КодСтраны = СтраныПоиска.Получить(Страна);
		Если ПустаяСтрока(КодСтраны) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтраныМира.Код КАК Код
			|ИЗ
			|	Справочник.СтраныМира КАК СтраныМира
			|ГДЕ
			|	СтраныМира.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", Страна);
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			КодСтраны = "";
			Если Выборка.Следующий() Тогда
				КодСтраны = Выборка.Код;
			КонецЕсли;
			СтраныПоиска.Вставить("Страна", КодСтраны);
		КонецЕсли;
		ПоляРегионаXDTO.country = КодСтраны;
		
	КонецЕсли;
	
	СоставАдреса = ОбъектXDTO.Состав.Состав;
	Если ТипЗнч(СоставАдреса) = Тип("ОбъектXDTO") Тогда
		Если СоставАдреса.Свойства().Получить("СубъектРФ") <> Неопределено
			И СоставАдреса.СубъектРФ <> Неопределено Тогда
			ПоляРегионаXDTO.region = СоставАдреса.СубъектРФ;
		КонецЕсли;
		Если СоставАдреса.Свойства().Получить("СвРайМО") <> Неопределено
			И СоставАдреса.СвРайМО <> Неопределено Тогда
			Если ТипЗнч(СоставАдреса.СвРайМО) = Тип("ОбъектXDTO")
				И СоставАдреса.СвРайМО.Свойства().Получить("Район") <> Неопределено Тогда
				ПоляРегионаXDTO.area = СоставАдреса.СвРайМО.Район;
			Иначе
				ПоляРегионаXDTO.area = СоставАдреса.СвРайМО;
			КонецЕсли;
		КонецЕсли;
		Если СоставАдреса.Свойства().Получить("Город") <> Неопределено
			И СоставАдреса.Город <> Неопределено Тогда
			ПоляРегионаXDTO.city = СоставАдреса.Город;
		КонецЕсли;
		Если СоставАдреса.Свойства().Получить("НаселПункт") <> Неопределено
			И СоставАдреса.НаселПункт <> Неопределено Тогда
			ПоляРегионаXDTO.place = СоставАдреса.НаселПункт;
		КонецЕсли;
		
		Если СоставАдреса.Свойства().Получить("ДопАдрЭл") <> Неопределено
			И СоставАдреса.ДопАдрЭл.Количество() Тогда
			ПомещениеXDTO = Неопределено;
			Для Каждого ПомещениеАдрес Из СоставАдреса.ДопАдрЭл Цикл
				Если ЗначениеЗаполнено(ПомещениеАдрес.ТипАдрЭл) Тогда
					// Это индекса.
					ПоляРегионаXDTO.postalCode = ПомещениеАдрес.Значение;
				ИначеЕсли ПомещениеАдрес.Номер <> Неопределено Тогда
					// Это номер дома.
					ПомещениеXDTO = ФабрикаXDTO.Создать(ТипXDTO("HouseElement"));
					ПомещениеXDTO.Установить("type", ПомещениеАдрес.Номер.Тип);
					ПомещениеXDTO.Установить("number", ПомещениеАдрес.Номер.Значение);
				КонецЕсли;
			КонецЦикла;
			Если ПомещениеXDTO <> Неопределено Тогда
				ПоляРегионаXDTO.houseElements.Добавить(ПомещениеXDTO);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоляРегионаXDTO;
	
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(МассивЗначений, СоставКолонок, Отбор)
	
	Если МассивЗначений.Количество() = 0 ИЛИ ТипЗнч(МассивЗначений[0]) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Инициализация таблицы значений.
	Таблица = Новый ТаблицаЗначений;
	Для Каждого ЭлементМассива Из МассивЗначений[0] Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ЭлементМассива.Значение));
		Таблица.Колонки.Добавить(ЭлементМассива.Ключ, Новый ОписаниеТипов(МассивТипов), ЭлементМассива.Ключ);
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивЗначений Цикл
		Пропустить = Ложь;
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Если ЭлементМассива[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение Тогда
				Пропустить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ЭлементМассива);
	КонецЦикла;
	
	// Переименование колонок.
	Для Каждого ЭлементМассива Из МассивЗначений[0] Цикл
		ИмяКолонки = ЭлементМассива.Ключ;
		Если СоставКолонок.Свойство(ИмяКолонки) Тогда
			Таблица.Колонки[ИмяКолонки].Имя = СоставКолонок[ИмяКолонки]; // Переименование колонки
		Иначе
			Таблица.Колонки.Удалить(Таблица.Колонки[ИмяКолонки]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Получение кода валюты.
//
// Параметры:
//  Валюта	 - СправочникСсылка.Валюта - валюта.
// 
// Возвращаемое значение:
//  Строка - цифровой код валюты.
//
Функция КодВалюты(Валюта)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Производительность

////////////////////////////////////////////////////////////////////////////////
// Производительность - модуль контроля производительности конфигурации.
// Методы поддерживаются до момента переноса в 1С:Библиотека стандартных подсистем.
////////////////////////////////////////////////////////////////////////////////

#Область ПроизводительностьСлужебныйПрограммныйИнтерфейс

// Начать замер времени на сервере при помощи подсистемы "Оценка производительности".
// Упрощает замеры длительных операций, обрабатывающих массивы однотипных данных.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция;
//                     Строка - имя ключевой операции, которая будет создана, если таковая отсутствует в ИБ.
//
// Возвращаемое значение:
//  Структура - используется в дальнейших вызовах процедур и функций этого модуля.
//              Описание полей доступно в комментариях функции СтруктураОписанияЗамера().
//  Неопределено - возвращается, если механизм оценки производительности отключен.
//
Функция НачатьЗамерВремени(КлючеваяОперация) Экспорт
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		Возврат СтруктураОписанияЗамера(КлючеваяОперация, ВремяНачала);
	КонецЕсли;
	
КонецФункции

// Завершить замер начатый НачатьЗамерВремени() и сохранить его результат.
// Добавляет к длительности замера время обработки единицы данных и сохраняет замер.
//
// Может вызываться однократно с тем же значением параметра ОписаниеЗамера.
//
// Параметры:
//  ОписаниеЗамера - Структура - полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных, обработанных
//                     после вызова НачатьЗамерВремени() или ЗафиксироватьЗамерВремени().
//                     Если однотипных данных нет, то параметр не нужно указывать, он будет равен 1.
//
Процедура ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоДанных = 1) Экспорт
	
	Если ОписаниеЗамера <> Неопределено Тогда
		ЗафиксироватьЗамерВремени(ОписаниеЗамера, КоличествоДанных);
		ВремяНачала = ОписаниеЗамера.ВремяНачала - ОписаниеЗамера.СуммарноеВремя;
		ДополнительнаяИнформация = Новый Соответствие;
		ДополнительнаяИнформация["Длительная"] = Истина;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(ОписаниеЗамера.КлючеваяОперация,
			ВремяНачала,
			ОписаниеЗамера.Вес,
			ДополнительнаяИнформация);
		ОписаниеЗамера.ЗамерЗавершен = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводительностьСлужебныеПроцедурыИФункции

// Проверить, что указано допустимое количество данных и замер не завершен.
// Если проверка не выполняется успешно, вызывается исключение с описанием проблемы.
//
// Параметры:
//  ОписаниеЗамера - Структура, полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных.
//
Процедура ПроверитьВозможностьФиксацииЗамераВремени(ОписаниеЗамера, КоличествоДанных)
	
	Если КоличествоДанных < 0 Тогда
		ТекстОшибки = НСтр("ru = 'Параметр ""КоличествоДанных"" должен быть положительным (текущее значение ""%1"").'",
		                   ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВызватьИсключение СтрШаблон(ТекстОшибки, КоличествоДанных);
	ИначеЕсли ОписаниеЗамера.ЗамерЗавершен Тогда
		ТекстОшибки = НСтр("ru = 'Замер ключевой операции ""%1"" уже завершен. Повторное использование описания этого замера запрещено.'",
		                   ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВызватьИсключение СтрШаблон(ТекстОшибки, ОписаниеЗамера.КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

// Создать описание замера производительности.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция;
//                     Строка - имя ключевой операции, которая будет создана, если таковая отсутствует в ИБ.
//  ВремяНачала - Число - время начала замера с точностью до миллисекунд.
//
// Возвращаемое значение:
//  Структура:
//   КлючеваяОперация - СправочникСсылка.КлючевыеОперации или Строка, равно значению параметра КлючеваяОперация.
//   ВремяНачала      - Число - время начала замера с точностью до миллисекунд, равно значению параметра ВремяНачала.
//   СуммарноеВремя   - Число - время, накопленное при вызовах ЗафиксироватьЗамерВремени().
//   Вес              - Число - суммарное количество обработанных данных.
//   ЗамерЗавершен    - Булево - Ложь, означает, что замер только начат, а Истина (позже), что замер завершен.
//
Функция СтруктураОписанияЗамера(КлючеваяОперация, ВремяНачала)
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("КлючеваяОперация", КлючеваяОперация);
	СтруктураОписания.Вставить("ВремяНачала", ВремяНачала);
	СтруктураОписания.Вставить("СуммарноеВремя", 0.0);
	СтруктураОписания.Вставить("Вес", 0);
	СтруктураОписания.Вставить("ЗамерЗавершен", Ложь);
	
	Возврат СтруктураОписания;
	
КонецФункции

// Зафиксировать промежуточное время замера с учетом количества обработанных данных.
// Добавляет к длительности замера время обработки единицы данных.
//
// Может вызываться неограниченное количество раз после НачатьЗамерВремени(),
// но не после вызова ЗакончитьЗамерВремени() с тем же значением параметра ОписаниеЗамера.
//
// Параметры:
//  ОписаниеЗамера - Структура - полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных, обработанных
//                     после вызова НачатьЗамерВремени() или ЗафиксироватьЗамерВремени().
//                     Если однотипных данных нет, то параметр не нужно указывать, он будет равен 1.
//
Процедура ЗафиксироватьЗамерВремени(ОписаниеЗамера, КоличествоДанных = 1)
	
	Если ОписаниеЗамера <> Неопределено Тогда
		ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если КоличествоДанных = 0 Тогда
			КоличествоДанных = 1;
		КонецЕсли;
		
		ПроверитьВозможностьФиксацииЗамераВремени(ОписаниеЗамера, КоличествоДанных);
		Интервал = ТекущееВремя - ОписаниеЗамера.ВремяНачала;
		УдельноеВремя = Интервал / КоличествоДанных;
		ОписаниеЗамера.СуммарноеВремя = ОписаниеЗамера.СуммарноеВремя + УдельноеВремя;
		ОписаниеЗамера.Вес = ОписаниеЗамера.Вес + КоличествоДанных;
		ОписаниеЗамера.ВремяНачала = ТекущееВремя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
