
#Область ПрограммныйИнтерфейс

// Возвращает схему запроса по значению переданного индекса в пакете запросов
//
// Параметры:
//  СхемаЗапроса         - СхемаЗапроса - схема запроса
//  ИндексЗапросаВПакете - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете
//
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса, ЗапросУничтоженияТаблицыСхемыЗапроса - измененный текст запроса или запрос
//
Функция ЗапросПакетаЗапросов(Знач СхемаЗапроса, ИндексЗапросаВПакете = Неопределено) Экспорт
	Перем ЗапросПакетаЗапросов;
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
	
	Если ИндексЗапросаВПакете = Неопределено Тогда
		ИндексЗапросаВПакете = ПакетЗапросов.Количество() - 1;
	КонецЕсли;
	
	ЗапросПакетаЗапросов = ПакетЗапросов.Получить(ИндексЗапросаВПакете);
	
	Возврат ЗапросПакетаЗапросов;
КонецФункции 

// Добавляет новое поле в конец секции выборки переданного запроса
//
// Параметры:
//  Запрос                         - Строка, Запрос - текст запроса или запрос
//  ВыражениеПоля                  - Строка         - выражение поля для секции выборки
//  ПсевдонимПоля                  - Строка         - псевдоним поля для секции выборки
//  ИндексЗапросаВПакете           - Число          - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете
//  РасширениеЯзыкаЗапросовСКД     - Булево         - Истина, когда требуется дополнительно добавить поле в секцию ВЫБРАТЬ расширения языка запросов СКД
//  ЗаменятьСуществующееПоле       - Булево         - Истина, когда требуется дополнительно добавить поле в запрос даже если оно было добавлено ранее. Прежнее поле будет удалено.
//
// Возвращаемое значение:
//  Строка, Запрос - измененный текст запроса или запрос
//
Функция ДобавитьПолеВыборкиВЗапрос(Знач Запрос, ВыражениеПоля, ПсевдонимПоля = "", Знач ИндексЗапросаВПакете = Неопределено, РасширениеЯзыкаЗапросовСКД = Ложь, ЗаменятьСуществующееПоле = Ложь) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 1'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ИзменяемыйЗапрос = ЗапросПакетаЗапросов(СхемаЗапроса, ИндексЗапросаВПакете);
	
	Если ТипЗнч(ИзменяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru= 'Невозможно добавить поля в запрос уничтожения таблицы.'"); 
	КонецЕсли;
	
	Колонки = ИзменяемыйЗапрос.Колонки;
	// Проверка, что колонка была добавлена ранее
	КолонкаПоПсевдониму = Колонки.Найти(ПсевдонимПоля);
	КолонкаУжеДобавлена = (КолонкаПоПсевдониму <> Неопределено);
	
	Если КолонкаУжеДобавлена И ЗаменятьСуществующееПоле Тогда
		Колонки.Удалить(Колонки.Индекс(КолонкаПоПсевдониму));
	КонецЕсли;
	
	Для ИндексОператора = 0 По ИзменяемыйЗапрос.Операторы.Количество() - 1 Цикл
		ВыбираемыеПоля = ИзменяемыйЗапрос.Операторы[ИндексОператора].ВыбираемыеПоля;
		
		НовоеПоле = ВыбираемыеПоля.Добавить(ВыражениеПоля);
		
		НоваяКолонка = Колонки.Найти(НовоеПоле);
		Если ЗначениеЗаполнено(ПсевдонимПоля) Тогда
			НоваяКолонка.Псевдоним = ПсевдонимПоля;
		КонецЕсли;
		
		ТекстЗапроса = ИзменяемыйЗапрос.ПолучитьТекстЗапроса();
		
		// Только в первом запросе могуть быть поля для СКД
		Если ИндексОператора = 0 И РасширениеЯзыкаЗапросовСКД Тогда
			ВыражениеСодержитПараметр = СтрНайти(ВыражениеПоля, "&");
			
			ДобавитьРасширенноеПолеВОбластьЗапроса(ТекстЗапроса, "ВЫБРАТЬ", ВыражениеПоля, ПсевдонимПоля, Не ВыражениеСодержитПараметр);
		КонецЕсли;
		
		ИзменяемыйЗапрос.УстановитьТекстЗапроса(ТекстЗапроса);
		
	КонецЦикла;
	
	// Удалим "мусор" схемы запроса
	НомерПоля = 1;
	ИскомаяПодстрока = " КАК Поле" + НомерПоля;
	НайденоМусорноеПоле = СтрНайти(ТекстЗапроса, ИскомаяПодстрока) > 0;
	Пока НайденоМусорноеПоле Цикл 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИскомаяПодстрока, "");
		
		НомерПоля = НомерПоля + 1;
		ИскомаяПодстрока = " КАК Поле" + НомерПоля;
		НайденоМусорноеПоле = СтрНайти(ТекстЗапроса, ИскомаяПодстрока) > 0;
	КонецЦикла;
	
	НовыйТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = НовыйТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = НовыйТекстЗапроса;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Добавляет новое поле в конец области расширения языка запросов СКД
//
// Параметры:
//  Запрос        - Строка, Запрос - текст запроса или запрос
//  ТипОбласти    - Строка         - может принимать значения "ВЫБРАТЬ" или "ГДЕ". В противном случае будет выдано исключение.
//  ВыражениеПоля - Строка         - выражение поля для секции выборки
//  ПсевдонимПоля - Строка         - псевдоним поля для секции выборки
//  ДочерниеПоля  - Булево         - Истина, когда требуется сделать доступными для СКД дочерние поля
//
// Возвращаемое значение:
//  Булево - Истина, когда вставка поля произведена и запрос изменен
//
Функция ДобавитьРасширенноеПолеВОбластьЗапроса(Запрос, ТипОбласти, ВыражениеПоля, ПсевдонимПоля = "Поле1", ДочерниеПоля = Ложь) Экспорт
	ВставкаПроизведена = Ложь;
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 1'") ;
	КонецЕсли;
	
	Если Не (ТипОбласти = "ВЫБРАТЬ" ИЛИ ТипОбласти = "ГДЕ") Тогда
		ВызватьИсключение НСтр("ru= 'Некорректное значение параметра 2'") ;
	КонецЕсли;
	
	ЭтоОбластьВыбрать   = (ТипОбласти = "ВЫБРАТЬ");
	ЭтоОбластьГде       = (ТипОбласти = "ГДЕ");
	
	ТегОбласти = "{" + ТипОбласти;
	ТегЗакрытияОбласти = "}";
	РазделительПолей = "," + Символы.ПС;
	ТипОбластиВРег = ВРег(ТипОбласти);
	
	// На шаге 1 выделим текст после начала области вставки
	ЭлементыОбластиШаг1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапроса, ТегОбласти);
	КоличествоЭлементовЭтап1 = ЭлементыОбластиШаг1.Количество();
	
	Если Не (КоличествоЭлементовЭтап1 = 1 Или КоличествоЭлементовЭтап1 = 2) Тогда
		ТекстИсключения = НСтр("ru= 'Некорректная область %1 расширения языка запроса СКД'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, ТипОбластиВРег);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// На шаге 2 выделим текст до окончания области вставки
	Если КоличествоЭлементовЭтап1 = 2 Тогда
		СтрокиПослеОбласти = ЭлементыОбластиШаг1[1]; // Строки после тега области
		
		ЭлементыОбластиШаг2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокиПослеОбласти, ТегЗакрытияОбласти);
		КоличествоЭлементовЭтап2 = ЭлементыОбластиШаг2.Количество();
		
		Если КоличествоЭлементовЭтап2 = 1 Тогда
			ТекстИсключения = НСтр("ru= 'Некорректное закрытие области %1 расширения языка запроса СКД'");
			ТекстИсключения = СтрШаблон(ТекстИсключения, ТипОбластиВРег);
			
			ВызватьИсключение ТекстИсключения;
		Иначе
			ОбластьВставки = ЭлементыОбластиШаг2[0]; // Текст области - между фигурными скобками
			
			// Добавим новое расширенное поле
			ПоляОбласти = СтрРазделить(ОбластьВставки, РазделительПолей, Ложь);
			
			ВставляемоеВыражениеПоля = ?(Не ЭтоОбластьВыбрать, ВыражениеПоля + ?(ДочерниеПоля, ".*", "") +  " КАК ", "") + ?(ЗначениеЗаполнено(ПсевдонимПоля), ПсевдонимПоля, "");
			
			ПоляОбласти.Добавить(ВставляемоеВыражениеПоля);
			
			// Соберем текст области и текст запроса
			ОбластьВставки = СтрСоединить(ПоляОбласти, РазделительПолей);
		
		КонецЕсли;
		
		ЭлементыОбластиШаг2[0] = ОбластьВставки;
		ТекстЗапросаШаг2 = СтрСоединить(ЭлементыОбластиШаг2, ТегЗакрытияОбласти);
		
		ЭлементыОбластиШаг1[1] = ТекстЗапросаШаг2;
		ТекстЗапросаШаг1 = СтрСоединить(ЭлементыОбластиШаг1, ТегОбласти);
	Иначе
		ТекстЗапросаШаг1 = ТекстЗапроса;
	КонецЕсли;
		
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапросаШаг1;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапросаШаг1;
	КонецЕсли;
		
	Возврат ВставкаПроизведена;
КонецФункции

// Устанавливает в секцию ВЫБРАТЬ ключевые слова "ПЕРВЫЕ N"
//
// Параметры:
//  Запрос        - Строка, Запрос - текст запроса или запрос
//  КоличествоПолучаемыхЗаписей    - Число - количество первых записей, которые необходимо выбрать,
//                                 - Неопределено - ключевые слова "ПЕРВЫЕ N" будут исключены из секции ВЫБРАТЬ
//  ИндексЗапросаВПакете           - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете
//
// Возвращаемое значение:
//  Строка, Запрос - измененный текст запроса или запрос
//
Функция УстановитьКоличествоПолучаемыхЗаписей(Знач Запрос, Знач КоличествоПолучаемыхЗаписей, Знач ИндексЗапросаВПакете = Неопределено) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 1'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ИзменяемыйЗапрос = ЗапросПакетаЗапросов(СхемаЗапроса, ИндексЗапросаВПакете);
	
	Если ТипЗнч(ИзменяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru= 'Невозможно добавить количество выбираемых записей в запрос уничтожения таблицы.'"); 
	КонецЕсли;
	
	ОператорВыбрать = ИзменяемыйЗапрос.Операторы[0];
	
	ОператорВыбрать.КоличествоПолучаемыхЗаписей = КоличествоПолучаемыхЗаписей;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Устанавливает в секцию ВЫБРАТЬ ключевое слово "РАЗРЕШЕННЫЕ"
//
// Параметры:
//  Запрос        - Строка, Запрос - текст запроса или запрос
//  ВыбиратьРазрешенные    - Булево - признак, выбирать ли только разрешенные записи
//                                 - Истина - будет добавлено ключевое слово "РАЗРЕШЕННЫЕ" в секцию ВЫБРАТЬ
//                                 - Ложь   - будет исключено ключевое слово "РАЗРЕШЕННЫЕ" в секцию ВЫБРАТЬ
//  ИндексЗапросаВПакете           - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете
//
// Возвращаемое значение:
//  Строка, Запрос - измененный текст запроса или запрос
//
Функция УстановитьВыборкуРазрешенныхЗаписей(Знач Запрос, Знач ВыбиратьРазрешенные, Знач ИндексЗапросаВПакете = Неопределено) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 1'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ИзменяемыйЗапрос = ЗапросПакетаЗапросов(СхемаЗапроса, ИндексЗапросаВПакете);
	
	Если ТипЗнч(ИзменяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru= 'Невозможно добавить количество выбираемых записей в запрос уничтожения таблицы.'"); 
	КонецЕсли;
	
	ИзменяемыйЗапрос.ВыбиратьРазрешенные = ВыбиратьРазрешенные;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Устанавливает ключевое слово ПОМЕСТИТЬ и имя временной таблицы в текст запроса
//
// Параметры:
//  Запрос        - Строка, Запрос - текст запроса или запрос
//  ИмяВременнойТаблицы    - Строка - имя временной таблицы, соответствует ключевому слову ПОМЕСТИТЬ языка запросов,
//                                    если передана пустая строка, то секция ПОМЕСТИТЬ будет удалена из запроса
//  ИндексЗапросаВПакете   - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете
//
// Возвращаемое значение:
//  Строка, Запрос - измененный текст запроса или запрос
//
Функция УстановитьПомещениеВоВременнуюТаблицу(Знач Запрос, Знач ИмяВременнойТаблицы, Знач ИндексЗапросаВПакете = Неопределено) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 1'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ИзменяемыйЗапрос = ЗапросПакетаЗапросов(СхемаЗапроса, ИндексЗапросаВПакете);
	
	Если ТипЗнч(ИзменяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru= 'Невозможно добавить количество выбираемых записей в запрос уничтожения таблицы.'"); 
	КонецЕсли;
	
	ИзменяемыйЗапрос.ТаблицаДляПомещения = ИмяВременнойТаблицы;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

// Добавляет выражение условия в параметры виртуальных таблиц
//
// Параметры:
//  Запрос           - Строка, Запрос - текст запроса или запрос
//  ВыражениеУсловия - Строка         - выражение условия для секции параметров виртуальной таблицы
//  ИндексЗапросаВПакете           - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете
//
// Возвращаемое значение:
//  Строка, Запрос - измененный текст запроса или запрос
//
Функция ДобавитьУсловиеВЗапрос(Знач Запрос, ВыражениеУсловия, Знач ИндексЗапросаВПакете = Неопределено) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 1'") ;
	КонецЕсли;
	
	Если Не ТипЗнч(ВыражениеУсловия) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 2'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ИзменяемыйЗапрос = ЗапросПакетаЗапросов(СхемаЗапроса, ИндексЗапросаВПакете);
	
	Если ТипЗнч(ИзменяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru= 'Невозможно добавить параметр в запрос уничтожения таблицы.'"); 
	КонецЕсли;
	
	// Подстановка выражения во все источники с параметрами
	ЧастиВыражения = Новый Массив;
	Для Каждого ОператорЗапроса Из ИзменяемыйЗапрос.Операторы Цикл 
		Для Каждого ИсточникОператора Из ОператорЗапроса.Источники Цикл
			
			ЧастиВыражения.Очистить();
			
			Подзапрос = ИсточникОператора.Источник;
			
			Если ТипЗнч(Подзапрос) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				
				ТекстЗапросаИсточника = Подзапрос.Запрос.ПолучитьТекстЗапроса();
				ТекстЗапросаИсточника = ДобавитьУсловиеВЗапрос(ТекстЗапросаИсточника, ВыражениеУсловия);
				Подзапрос.Запрос.УстановитьТекстЗапроса(ТекстЗапросаИсточника);
				
			ИначеЕсли ТипЗнч(Подзапрос) = Тип("ТаблицаСхемыЗапроса") Тогда
				
				ПараметрыИсточника = Подзапрос.Параметры;
				КоличествоПараметров = ПараметрыИсточника.Количество();
				
				Если КоличествоПараметров = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// В виртуальных таблицах РБ 3 параметр с конца используется для условий по измерениям
				Если СтрНачинаетсяС(ИсточникОператора.Источник.ИмяТаблицы, "РегистрБухгалтерии") Тогда
					ПоследнийПараметрИсточника = ПараметрыИсточника[КоличествоПараметров - 3];
				Иначе
					ПоследнийПараметрИсточника = ПараметрыИсточника[КоличествоПараметров - 1];
				КонецЕсли;
				
				ИсходноеВыражение = Строка(ПоследнийПараметрИсточника.Выражение);
				Если ЗначениеЗаполнено(ИсходноеВыражение) Тогда
					ЧастиВыражения.Добавить(ИсходноеВыражение);
				КонецЕсли;
				ЧастиВыражения.Добавить(ВыражениеУсловия);
				
				ПоследнийПараметрИсточника.Выражение = Новый ВыражениеСхемыЗапроса(СтрСоединить(ЧастиВыражения, " И "));
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	// Удалим "мусор" схемы запроса
	Для НомерПоля = 1 По 9 Цикл 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " КАК Поле" + НомерПоля, "");
	КонецЦикла;
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти