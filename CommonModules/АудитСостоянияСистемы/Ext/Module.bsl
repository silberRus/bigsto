////////////////////////////////////////////////////////////////////////////////
// Подсистема «Аудит состояния системы».
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВыполнениеПроверки

// Выполнение указанной проверки состояния системы.
//
Функция ВыполнитьПроверкуСостоянияСистемы(Проверка, ЗначенияДопПараметров = Неопределено) Экспорт
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	// Выполнить проверку.
	РеквизитыПроверки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Проверка,
		"КонтекстВыполнения, Обработчик, Важность, ДетализацияДоОрганизации, ДетализацияДоПериода");
	
	// Определить структуру запрашиваемых результатов.
	ПараметрыПроверки = ИнициализироватьПараметрыПроверки(
		Проверка,
		РеквизитыПроверки.КонтекстВыполнения,
		ЗначенияДопПараметров);
	
	// Выполним проверку.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыПроверки); // ПараметрыПроверки будет изменен в обработчике
	
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(РеквизитыПроверки.Обработчик, МассивПараметров);
	
	// Обработаем результаты проверки.
	Если НЕ ПараметрыПроверки.ПроверкаНеВыполнена Тогда
		ПараметрыПроверки.ПричинаОтказаОтПроверки = "";
	Иначе
		ПараметрыПроверки.ВыявленныеПроблемы.Очистить();
	КонецЕсли;
	
	ПараметрыПроверки.ВыявленныеПроблемы.Колонки.Добавить("Проблема", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Для Каждого СтрокаПроблемы Из ПараметрыПроверки.ВыявленныеПроблемы Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПроблемы.Важность) Тогда
			СтрокаПроблемы.Важность = РеквизитыПроверки.Важность;
		КонецЕсли;
		
		СтрокаПроблемы.Проблема = Новый УникальныйИдентификатор;
		
	КонецЦикла;
	
	Если ПараметрыПроверки.Отборы.Количество() = 0 Тогда
		ПараметрыПроверки.Отборы.Добавить(); // проверка без отборов
	КонецЕсли;
	
	ПроблемыСгруппированные = Новый ТаблицаЗначений;
	ПроблемыСгруппированные.Колонки.Добавить("Проблема",      	   Новый ОписаниеТипов("УникальныйИдентификатор"));
	ПроблемыСгруппированные.Колонки.Добавить("Представление",      Новый ОписаниеТипов("Строка"));
	ПроблемыСгруппированные.Колонки.Добавить("Важность", 	 	   Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыВажностиПроблемыСостоянияСистемы")); // не обязательное
	ПроблемыСгруппированные.Колонки.Добавить("КоличествоПроблем",  Новый ОписаниеТипов("Число"));
	ПроблемыСгруппированные.Колонки.Добавить("КоличествоОбъектов", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекущийОтбор Из ПараметрыПроверки.Отборы Цикл
		
		// Соберем информацию о найденных проблемах.
		СтруктураПоиска = Новый Структура("Организация, ПроверяемыйПериод");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущийОтбор);
		
		СтрокиПроблем = ПараметрыПроверки.ВыявленныеПроблемы.НайтиСтроки(СтруктураПоиска);
		КоличествоОбъектов = 0;
		
		Для Каждого СтрокаПроблемы Из СтрокиПроблем Цикл
			
			КоличествоОбъектов = КоличествоОбъектов + Макс(СтрокаПроблемы.Объекты.Количество(), 1);
			
			СтрокаПроблемыСгруппированная = ПроблемыСгруппированные.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаПроблемыСгруппированная, СтрокаПроблемы);
			
			СтрокаПроблемыСгруппированная.КоличествоПроблем = 1;
			СтрокаПроблемыСгруппированная.КоличествоОбъектов = СтрокаПроблемы.Объекты.Количество();
			
		КонецЦикла;
		
		// Регистрируем факт выполнения проверки и очистим результаты прошлой проверки.
		НаборЗаписейПроверки = РегистрыСведений.ВыполнениеПроверокСостоянияСистемы.СоздатьНаборЗаписей();
		НаборЗаписейПроблемы = РегистрыСведений.ПроблемыСостоянияСистемы.СоздатьНаборЗаписей();
		НаборЗаписейОбъекты  = РегистрыСведений.ОбъектыПроблемСостоянияСистемы.СоздатьНаборЗаписей();
		
		НаборЗаписейПроверки.Отбор.Проверка.Установить(Проверка);
		НаборЗаписейПроблемы.Отбор.Проверка.Установить(Проверка);
		НаборЗаписейОбъекты.Отбор.Проверка.Установить(Проверка);
		
		Если РеквизитыПроверки.ДетализацияДоОрганизации И ЗначениеЗаполнено(ТекущийОтбор.Организация) Тогда
			НаборЗаписейПроверки.Отбор.Организация.Установить(ТекущийОтбор.Организация);
			НаборЗаписейПроблемы.Отбор.Организация.Установить(ТекущийОтбор.Организация);
			НаборЗаписейОбъекты.Отбор.Организация.Установить(ТекущийОтбор.Организация);
		КонецЕсли;
		
		Если РеквизитыПроверки.ДетализацияДоПериода И ЗначениеЗаполнено(ТекущийОтбор.ПроверяемыйПериод) Тогда
			НаборЗаписейПроверки.Отбор.ПроверяемыйПериод.Установить(ТекущийОтбор.ПроверяемыйПериод);
			НаборЗаписейПроблемы.Отбор.ПроверяемыйПериод.Установить(ТекущийОтбор.ПроверяемыйПериод);
			НаборЗаписейОбъекты.Отбор.ПроверяемыйПериод.Установить(ТекущийОтбор.ПроверяемыйПериод);
		КонецЕсли;
		
		ЗаписьПроверки = НаборЗаписейПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьПроверки, ТекущийОтбор);
		
		ЗаписьПроверки.Проверка 				= Проверка;
		ЗаписьПроверки.ДатаВыполнения   		= ДатаПроверки;
		ЗаписьПроверки.ВыявленыПроблемы 		= (КоличествоОбъектов > 0);
		ЗаписьПроверки.ПричинаОтказаОтПроверки 	= ПараметрыПроверки.ПричинаОтказаОтПроверки;
		
		НаборЗаписейПроверки.Записать(Истина);
		НаборЗаписейПроблемы.Записать(Истина); // очистка результатов прошлой проверки
		НаборЗаписейОбъекты.Записать(Истина);  // очистка результатов прошлой проверки
		
		// Добавим запись в журнал регистрации.
		ПредставлениеПроверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Проверка ""%1"" по организации ""%2"" за период %3'"),
			СокрЛП(Проверка),
			ТекущийОтбор.Организация,
			Формат(ТекущийОтбор.ПроверяемыйПериод, ""));
			
		Если ПараметрыПроверки.ПроверкаНеВыполнена Тогда
			КомментарийСобытия = НСтр("ru = '%1 не выполнена по причине: %2.'");
		ИначеЕсли КоличествоОбъектов > 0 Тогда
			КомментарийСобытия = НСтр("ru = '%1 завершена, выявлено проблем: %3.'");
		Иначе
			КомментарийСобытия = НСтр("ru = '%1 завершена успешно, проблем не выявлено.'");
		КонецЕсли;
		
		КомментарийСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийСобытия,
			ПредставлениеПроверки,
			ПараметрыПроверки.ПричинаОтказаОтПроверки,
			КоличествоОбъектов);
		
		ЗаписьЖурналаРегистрации(
			АудитСостоянияСистемыКлиентСервер.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация, 
			Метаданные.Справочники.ПроверкиСостоянияСистемы, 
			Проверка, 
			КомментарийСобытия);
		
	КонецЦикла;
	
	Если НЕ ПараметрыПроверки.ПроверкаНеВыполнена Тогда
		
		// Запишем детальную информацию по найденным проблемам и проблемным объектам.
		НаборЗаписейПроблемы = РегистрыСведений.ПроблемыСостоянияСистемы.СоздатьНаборЗаписей();
		НаборЗаписейОбъекты  = РегистрыСведений.ОбъектыПроблемСостоянияСистемы.СоздатьНаборЗаписей();
		
		Для Каждого ОписаниеПроблемы Из ПараметрыПроверки.ВыявленныеПроблемы Цикл
			
			ЗаписьПроблемы = НаборЗаписейПроблемы.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьПроблемы, ОписаниеПроблемы,,
				"ДополнительнаяИнформация"
				+ ?(НЕ РеквизитыПроверки.ДетализацияДоОрганизации, ", Организация", "")
				+ ?(НЕ РеквизитыПроверки.ДетализацияДоПериода, ", ПроверяемыйПериод", ""));
			
			ЗаписьПроблемы.Проверка 				= Проверка;
			ЗаписьПроблемы.ДополнительнаяИнформация = Новый ХранилищеЗначения(ОписаниеПроблемы.ДополнительнаяИнформация, Новый СжатиеДанных(9));
			
			Для Каждого ОписаниеОбъекта Из ОписаниеПроблемы.Объекты Цикл
				
				ЗаписьОбъекта = НаборЗаписейОбъекты.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьОбъекта, ЗаписьПроблемы);
				ЗаполнитьЗначенияСвойств(ЗаписьОбъекта, ОписаниеОбъекта);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НаборЗаписейПроблемы.Количество() > 0 Тогда
			НаборЗаписейПроблемы.Записать(Ложь);
		КонецЕсли;
		Если НаборЗаписейОбъекты.Количество() > 0 Тогда
			НаборЗаписейОбъекты.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("ПроблемыСгруппированные", ПроблемыСгруппированные);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Очистка предыдущих результатов указанных проверок.
//
Процедура ОчиститьРезультатыПроверок(МассивПроверок, МассивОрганизаций, НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(МассивПроверок) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ВыполнениеПроверокСостоянияСистемы"" КАК ИмяРегистра,
	|	1 КАК Порядок,
	|	РезультатыПроверок.Проверка КАК Проверка,
	|	РезультатыПроверок.Организация КАК Организация,
	|	РезультатыПроверок.ПроверяемыйПериод КАК ПроверяемыйПериод
	|ИЗ
	|	РегистрСведений.ВыполнениеПроверокСостоянияСистемы КАК РезультатыПроверок
	|ГДЕ
	|	РезультатыПроверок.Проверка В(&МассивПроверок)
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоОрганизации
	|			ИЛИ РезультатыПроверок.Организация В (&МассивОрганизаций))
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоПериода
	|			ИЛИ РезультатыПроверок.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ПроблемыСостоянияСистемы"",
	|	2,
	|	РезультатыПроверок.Проверка,
	|	РезультатыПроверок.Организация,
	|	РезультатыПроверок.ПроверяемыйПериод
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК РезультатыПроверок
	|ГДЕ
	|	РезультатыПроверок.Проверка В(&МассивПроверок)
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоОрганизации
	|			ИЛИ РезультатыПроверок.Организация В (&МассивОрганизаций))
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоПериода
	|			ИЛИ РезультатыПроверок.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ОбъектыПроблемСостоянияСистемы"",
	|	3,
	|	РезультатыПроверок.Проверка,
	|	РезультатыПроверок.Организация,
	|	РезультатыПроверок.ПроверяемыйПериод
	|ИЗ
	|	РегистрСведений.ОбъектыПроблемСостоянияСистемы КАК РезультатыПроверок
	|ГДЕ
	|	РезультатыПроверок.Проверка В(&МассивПроверок)
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоОрганизации
	|			ИЛИ РезультатыПроверок.Организация В (&МассивОрганизаций))
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоПериода
	|			ИЛИ РезультатыПроверок.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ,
	|	Проверка,
	|	Организация,
	|	ПроверяемыйПериод";
	
	Запрос.УстановитьПараметр("МассивПроверок",    МассивПроверок);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	   ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, НачалоПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Проверка.Установить(Выборка.Проверка);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.ПроверяемыйПериод.Установить(Выборка.ПроверяемыйПериод);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатыВыполненияПроверки

// Возвращает таблицу результатов выполнения указанных проверок.
//
Функция ТаблицаПроблемСостоянияСистемы(МассивПроверок, МассивОрганизаций, НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объекты.Проблема,
	|	СУММА(1) КАК КоличествоОбъектов
	|ПОМЕСТИТЬ ВТКоличествоОбъектов
	|ИЗ
	|	РегистрСведений.ОбъектыПроблемСостоянияСистемы КАК Объекты
	|ГДЕ
	|	Объекты.Проверка В(&МассивПроверок)
	|	И (НЕ Объекты.Проверка.ДетализацияДоОрганизации
	|			ИЛИ Объекты.Организация В (&МассивОрганизаций))
	|	И (НЕ Объекты.Проверка.ДетализацияДоПериода
	|			ИЛИ Объекты.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	Объекты.Проблема
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проблемы.Проверка,
	|	Проблемы.Организация,
	|	Проблемы.ПроверяемыйПериод,
	|	Проблемы.Проблема,
	|	ВЫРАЗИТЬ(Проблемы.Представление КАК СТРОКА(1024)) КАК Представление,
	|	Проблемы.Важность КАК Важность,
	|	ВЫБОР
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка)
	|			ТОГДА 1
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение)
	|			ТОГДА 2
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Информация)
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок,
	|	ЕСТЬNULL(Объекты.КоличествоОбъектов, 1) КАК КоличествоОбъектов
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоОбъектов КАК Объекты
	|		ПО Проблемы.Проблема = Объекты.Проблема
	|ГДЕ
	|	Проблемы.Проверка В(&МассивПроверок)
	|	И (НЕ Проблемы.Проверка.ДетализацияДоОрганизации
	|			ИЛИ Проблемы.Организация В (&МассивОрганизаций))
	|	И (НЕ Проблемы.Проверка.ДетализацияДоПериода
	|			ИЛИ Проблемы.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Проблемы.Проверка,
	|	Представление";
	
	Запрос.УстановитьПараметр("МассивПроверок",    МассивПроверок);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	   ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, НачалоПериода));
	
	ТаблицаПроблем = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПроблем;
	
КонецФункции

// Возвращает таблицу уточненных результатов выполнения указанных проверок.
//
Функция ТаблицаОбъектовПроблемСостоянияСистемы(МассивПроверок, МассивОрганизаций, НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проблемы.Проверка,
	|	Проблемы.Организация,
	|	Проблемы.ПроверяемыйПериод,
	|	Проблемы.Проблема,
	|	ВЫРАЗИТЬ(Проблемы.Представление КАК СТРОКА(1024)) КАК ПредставлениеПроблемы,
	|	Проблемы.Важность КАК Важность,
	|	ВЫБОР
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка)
	|			ТОГДА 1
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение)
	|			ТОГДА 2
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Информация)
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок,
	|	ВЫРАЗИТЬ(Объекты.Представление КАК СТРОКА(1024)) КАК ПредставлениеОбъекта
	|ИЗ
	|	РегистрСведений.ОбъектыПроблемСостоянияСистемы КАК Объекты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|		ПО Объекты.Проблема = Проблемы.Проблема
	|ГДЕ
	|	Объекты.Проверка В(&МассивПроверок)
	|	И (НЕ Объекты.Проверка.ДетализацияДоОрганизации
	|			ИЛИ Объекты.Организация В (&МассивОрганизаций))
	|	И (НЕ Объекты.Проверка.ДетализацияДоПериода
	|			ИЛИ Объекты.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Проблемы.Проверка,
	|	ПредставлениеПроблемы,
	|	ПредставлениеОбъекта";
	
	Запрос.УстановитьПараметр("МассивПроверок",    МассивПроверок);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	   ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, НачалоПериода));
	
	ТаблицаОбъектовПроблем = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОбъектовПроблем;
	
КонецФункции

#КонецОбласти

#Область ПоискПроверок

// Возвращает таблицу проверок по указанным отборам.
//
Функция ТаблицаПроверокПоКонтексту(КонтекстВыполнения, УточнениеКонтекстаВыполнения = Неопределено, ВыполняетсяТолькоВКонтексте = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Проверка,
	|	Т.Идентификатор КАК Идентификатор,
	|	Т.УточнениеКонтекстаВыполнения КАК УточнениеКонтекстаВыполнения
	|ИЗ
	|	Справочник.ПроверкиСостоянияСистемы КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления
	|	И НЕ Т.ЭтоГруппа
	|	И Т.КонтекстВыполнения = &КонтекстВыполнения
	|	И (&ВыполняетсяТолькоВКонтексте = НЕОПРЕДЕЛЕНО ИЛИ Т.ВыполняетсяТолькоВКонтексте = &ВыполняетсяТолькоВКонтексте)
	|	И (&БезУточненияКонтекстаВыполнения ИЛИ Т.УточнениеКонтекстаВыполнения В (&УточнениеКонтекстаВыполнения))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Запрос.УстановитьПараметр("КонтекстВыполнения", КонтекстВыполнения);
	Запрос.УстановитьПараметр("ВыполняетсяТолькоВКонтексте", ВыполняетсяТолькоВКонтексте);
	
	Если УточнениеКонтекстаВыполнения = Неопределено Тогда
		
		Запрос.УстановитьПараметр("УточнениеКонтекстаВыполнения", Новый Массив);
		Запрос.УстановитьПараметр("БезУточненияКонтекстаВыполнения", Истина);
		
	ИначеЕсли ТипЗнч(УточнениеКонтекстаВыполнения) = Тип("Массив") Тогда
		
		Запрос.УстановитьПараметр("УточнениеКонтекстаВыполнения", УточнениеКонтекстаВыполнения);
		Запрос.УстановитьПараметр("БезУточненияКонтекстаВыполнения", Ложь);
		
	Иначе
		
		МассивУточнений = Новый Массив;
		МассивУточнений.Добавить(УточнениеКонтекстаВыполнения);
		
		Запрос.УстановитьПараметр("УточнениеКонтекстаВыполнения", МассивУточнений);
		Запрос.УстановитьПараметр("БезУточненияКонтекстаВыполнения", Ложь);
		
	КонецЕсли;
	
	ТаблицаПроверок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПроверок;
	
КонецФункции

// Возвращает проверку по указанным отборам.
//
Функция НайтиПроверкуПоКлючевымПолям(КонтекстВыполнения, Идентификатор) Экспорт
	
	ПустойКонтекст = ?(ЗначениеЗаполнено(КонтекстВыполнения), Новый (ТипЗнч(КонтекстВыполнения)), КонтекстВыполнения);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроверкиСостоянияСистемы.Ссылка
	|ИЗ
	|	Справочник.ПроверкиСостоянияСистемы КАК ПроверкиСостоянияСистемы
	|ГДЕ
	|	ПроверкиСостоянияСистемы.Идентификатор = &Идентификатор
	|	И (ПроверкиСостоянияСистемы.КонтекстВыполнения = &КонтекстВыполнения
	|		ИЛИ (ПроверкиСостоянияСистемы.КонтекстВыполнения = &ПустойКонтекст
	|			И ПроверкиСостоянияСистемы.Родитель = ЗНАЧЕНИЕ(Справочник.ПроверкиСостоянияСистемы.ПустаяСсылка)))";
	
	Запрос.УстановитьПараметр("КонтекстВыполнения", КонтекстВыполнения);
	Запрос.УстановитьПараметр("ПустойКонтекст", 	ПустойКонтекст);
	Запрос.УстановитьПараметр("Идентификатор", 		Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПроблемПроизвольнойПроверки

// Формирует описание проблемы, выявленной при проверке.
//
Функция СформироватьОписаниеПроблемы(ТекстПроблемы, Важность = Неопределено, ТекстУточнения = "",
			Объект = Неопределено, ДополнительнаяИнформация = Неопределено) Экспорт
	
	ОписаниеПроблемы = Новый Структура;
	ОписаниеПроблемы.Вставить("Проблема", Новый Структура);
	ОписаниеПроблемы.Вставить("Объект",   Новый Структура);
	
	// Поля регистра ПроблемыСостоянияСистемы.
	ОписаниеПроблемы.Проблема.Вставить("Представление", ТекстПроблемы);
	ОписаниеПроблемы.Проблема.Вставить("Важность",
		?(ЗначениеЗаполнено(Важность), Важность, Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка));
	ОписаниеПроблемы.Проблема.Вставить("ДополнительнаяИнформация",
		Новый ХранилищеЗначения(ДополнительнаяИнформация, Новый СжатиеДанных(9)));
		
	// Поля регистра ОбъектыПроблемСостоянияСистемы.
	Если ЗначениеЗаполнено(ТекстУточнения) ИЛИ ЗначениеЗаполнено(Объект) Тогда
		
		ОписаниеПроблемы.Объект.Вставить("Представление", ТекстУточнения);
		ОписаниеПроблемы.Объект.Вставить("ЭтоСоставнойОбъект",
			(Объект = Неопределено ИЛИ ТипЗнч(Объект) = Тип("Структура")));
		ОписаниеПроблемы.Объект.Вставить("СоставнойОбъект", Новый УникальныйИдентификатор);
		
		Если ОписаниеПроблемы.Объект.ЭтоСоставнойОбъект Тогда
			ОписаниеПроблемы.Объект.Вставить("РасшифровкаСоставногоОбъекта",
				Новый ХранилищеЗначения(Объект, Новый СжатиеДанных(9)));
		Иначе
			ОписаниеПроблемы.Объект.Вставить("Объект", Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеПроблемы;
	
КонецФункции

// Регистрирует в ИБ информацию о выявленной проблеме по любой указанной проверке.
//
Процедура ЗарегистрироватьПроблему(Проверка, Организация, ПроверяемыйПериод, ОписаниеПроблемы) Экспорт
	
	Запрос = Новый Запрос;
	
	// Регистрация факта выполнения проверки.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыполнениеПроверок.Проверка
	|ИЗ
	|	РегистрСведений.ВыполнениеПроверокСостоянияСистемы КАК ВыполнениеПроверок
	|ГДЕ
	|	ВыполнениеПроверок.Проверка = &Проверка
	|	И ВыполнениеПроверок.Организация = &Организация
	|	И ВыполнениеПроверок.ПроверяемыйПериод = &ПроверяемыйПериод";
	
	Запрос.УстановитьПараметр("Проверка", 			Проверка);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ПроверяемыйПериод", 	ПроверяемыйПериод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.ВыполнениеПроверокСостоянияСистемы.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Проверка.Установить(Проверка);
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.ПроверяемыйПериод.Установить(ПроверяемыйПериод);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Проверка			 = Проверка;
		Запись.Организация		 = Организация;
		Запись.ПроверяемыйПериод = ПроверяемыйПериод;
		Запись.ДатаВыполнения	 = ТекущаяДатаСеанса();
		Запись.ВыявленыПроблемы	 = Истина;
		
		Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
		Иначе
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	// Регистрация выявленной проблемы.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проблемы.Проблема
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|ГДЕ
	|	Проблемы.Проверка = &Проверка
	|	И Проблемы.Организация = &Организация
	|	И Проблемы.ПроверяемыйПериод = &ПроверяемыйПериод
	|	И Проблемы.Важность = &Важность
	|	И ВЫРАЗИТЬ(Проблемы.Представление КАК СТРОКА(1024)) = ВЫРАЗИТЬ(&ПредставлениеПроблемы КАК СТРОКА(1024))";
	
	Запрос.УстановитьПараметр("ПредставлениеПроблемы", ОписаниеПроблемы.Проблема.Представление);
	Запрос.УстановитьПараметр("Важность", 			   ОписаниеПроблемы.Проблема.Важность);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Проблема = Выборка.Проблема;
		
	Иначе
		
		Проблема = Новый УникальныйИдентификатор;
		
		НаборЗаписей = РегистрыСведений.ПроблемыСостоянияСистемы.СоздатьНаборЗаписей();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ОписаниеПроблемы.Проблема);
		
		Запись.Проверка			 = Проверка;
		Запись.Организация		 = Организация;
		Запись.ПроверяемыйПериод = ПроверяемыйПериод;
		Запись.Проблема			 = Проблема;
		
		Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
		Иначе
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	// Регистрация проблемного объекта.
	Если НЕ ЗначениеЗаполнено(ОписаниеПроблемы.Объект) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОбъектыПроблемСостоянияСистемы.СоздатьНаборЗаписей();
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, ОписаниеПроблемы.Объект);
	
	Запись.Проверка			 = Проверка;
	Запись.Организация		 = Организация;
	Запись.ПроверяемыйПериод = ПроверяемыйПериод;
	Запись.Проблема			 = Проблема;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
	Иначе
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияПроблемИзВыполняемойПроверки

// Добавляет строку в таблицу выявленных проблем. Вызывается при выполнении проверки.
//
Процедура ДобавитьСтрокуВТаблицуВыявленныхПроблем(ПараметрыПроверки, Организация, ПроверяемыйПериод, Представление,
			Важность = Неопределено, ДополнительнаяИнформация = Неопределено) Экспорт
	
	НайденнаяПроблема = ПараметрыПроверки.ВыявленныеПроблемы.Добавить();
	
	НайденнаяПроблема.Организация				= Организация;
	НайденнаяПроблема.ПроверяемыйПериод			= ПроверяемыйПериод;
	НайденнаяПроблема.Представление				= Представление;
	
	НайденнаяПроблема.Важность					= Важность;
	НайденнаяПроблема.ДополнительнаяИнформация 	= Новый ХранилищеЗначения(ДополнительнаяИнформация, Новый СжатиеДанных(9));
	
КонецПроцедуры

// Добавляет ссылочный объект к последней строке таблицы выявленных проблем. Вызывается при выполнении проверки.
//
Процедура ДобавитьОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, Объект, Представление = "") Экспорт
	
	НайденнаяПроблема = ПараметрыПроверки.ВыявленныеПроблемы[ПараметрыПроверки.ВыявленныеПроблемы.Количество() - 1];
	
	ОбъектУжеДобавлен = Ложь;
	
	Для Каждого ТекущаяСтрока Из НайденнаяПроблема.Объекты Цикл
		
		Если НЕ ТекущаяСтрока.ЭтоСоставнойОбъект И ТекущаяСтрока.Объект = Объект Тогда
			ТекущаяСтрока.Представление = ТекущаяСтрока.Представление + Символы.ПС + Представление;
			ОбъектУжеДобавлен = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбъектУжеДобавлен Тогда
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("ЭтоСоставнойОбъект", Ложь);
		ОписаниеОбъекта.Вставить("Объект", 			   Объект);
		ОписаниеОбъекта.Вставить("Представление", 	   Представление);
	
		НайденнаяПроблема.Объекты.Добавить(ОписаниеОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет не ссылочный объект к последней строке таблицы выявленных проблем. Вызывается при выполнении проверки.
//
Процедура ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, Расшифровка, Представление = "") Экспорт
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("ЭтоСоставнойОбъект", 			 Истина);
	ОписаниеОбъекта.Вставить("СоставнойОбъект", 			 Новый УникальныйИдентификатор);
	ОписаниеОбъекта.Вставить("РасшифровкаСоставногоОбъекта", Новый ХранилищеЗначения(Расшифровка, Новый СжатиеДанных(9)));
	ОписаниеОбъекта.Вставить("Представление", 	   			 Представление);
	
	НайденнаяПроблема = ПараметрыПроверки.ВыявленныеПроблемы[ПараметрыПроверки.ВыявленныеПроблемы.Количество() - 1];
	НайденнаяПроблема.Объекты.Добавить(ОписаниеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеСправочникаПроверок

Функция ТаблицаГруппПроверокСостоянияСистемы()
	
	ТаблицаГруппПроверок = Новый ТаблицаЗначений;
	
	ТаблицаГруппПроверок.Колонки.Добавить("ИдентификаторРодителя", Новый ОписаниеТипов("Строка"));
	ТаблицаГруппПроверок.Колонки.Добавить("Наименование", 		   Новый ОписаниеТипов("Строка"));
	ТаблицаГруппПроверок.Колонки.Добавить("КонтекстВыполнения",    Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.КонтекстПроверкиСостоянияСистемы.Тип));
	ТаблицаГруппПроверок.Колонки.Добавить("Идентификатор", 		   Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаГруппПроверок;
	
КонецФункции

Функция ТаблицаПроверокСостоянияСистемы()
	
	ТаблицаПроверок = Новый ТаблицаЗначений;
	
	СтруктураСлужебныхПараметров = Новый Структура("
		|РегламентноеЗаданиеGUID, РегламентноеЗаданиеПредставление,
		|Расписание, ДополнительныеПараметрыАвтопроверки, ОписаниеДополнительныхПараметров");
	
	ТаблицаПроверок.Колонки.Добавить("ИдентификаторРодителя", Новый ОписаниеТипов("Строка"));
	ТаблицаПроверок.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаПроверок.Колонки.Добавить("РасписаниеВыполнения");
	ТаблицаПроверок.Колонки.Добавить("ОписаниеДополнительныхПараметров");
	
	Для Каждого МетаРеквизит Из Метаданные.Справочники.ПроверкиСостоянияСистемы.Реквизиты Цикл
		Если НЕ СтруктураСлужебныхПараметров.Свойство(МетаРеквизит.Имя) Тогда
			ТаблицаПроверок.Колонки.Добавить(МетаРеквизит.Имя, МетаРеквизит.Тип);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПроверок;
	
КонецФункции

Функция ЗаполнитьСправочникПроверокСостоянияСистемы(ТипКонтекстаВыполнения = Неопределено, РежимОбновленияПроверок = Ложь) Экспорт
	
	БылиОшибки = Ложь;
	
	// Запомним все существующие элементы справочника проверок.
	ВсеПроверки = Новый Соответствие;
	БезОтбора = (ТипКонтекстаВыполнения = Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроверкиСостоянияСистемы.Ссылка КАК Ссылка,
	|	ПроверкиСостоянияСистемы.ЭтоГруппа КАК ЭтоГруппа,
	|	ПроверкиСостоянияСистемы.ПометкаУдаления КАК ПометкаУдаления,
	|	ПроверкиСостоянияСистемы.Наименование КАК Наименование,
	|	ПроверкиСостоянияСистемы.Комментарий КАК Комментарий,
	|	ПроверкиСостоянияСистемы.УточнениеКонтекстаВыполнения КАК УточнениеКонтекстаВыполнения,
	|	ПроверкиСостоянияСистемы.ВыполняетсяТолькоВКонтексте КАК ВыполняетсяТолькоВКонтексте,
	|	ПроверкиСостоянияСистемы.СпособВыполнения КАК СпособВыполнения,
	|	ПроверкиСостоянияСистемы.Обработчик КАК Обработчик,
	|	ПроверкиСостоянияСистемы.Важность КАК Важность,
	|	ПроверкиСостоянияСистемы.ВозможноИзменениеВажности КАК ВозможноИзменениеВажности
	|ИЗ
	|	Справочник.ПроверкиСостоянияСистемы КАК ПроверкиСостоянияСистемы
	|ГДЕ
	|	&БезОтбора
	|	ИЛИ ТИПЗНАЧЕНИЯ(ПроверкиСостоянияСистемы.КонтекстВыполнения) = &ТипКонтекстаВыполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа УБЫВ,
	|	Наименование";
	
	Запрос.УстановитьПараметр("БезОтбора", БезОтбора);
	Запрос.УстановитьПараметр("ТипКонтекстаВыполнения", ?(БезОтбора, Тип("Неопределено"), ТипКонтекстаВыполнения));
	
	СуществующиеПроверки = Запрос.Выполнить().Выгрузить();
	СуществующиеПроверки.Индексы.Добавить("Ссылка");
	
	Для Каждого ТекСтр Из СуществующиеПроверки Цикл
		Если НЕ ТекСтр.ПометкаУдаления Тогда
			ВсеПроверки.Вставить(ТекСтр.Ссылка, ТекСтр.ЭтоГруппа);
		КонецЕсли;
	КонецЦикла;
	
	// Зарегистрируем новые и обновим существующие элементы.
	ТаблицаГруппПроверок = ТаблицаГруппПроверокСостоянияСистемы();
	ТаблицаПроверок = ТаблицаПроверокСостоянияСистемы();
	
	АудитСостоянияСистемыПереопределяемый.ЗаполнитьГруппыПроверокДляРегистрации(ТаблицаГруппПроверок);
	АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок);
	
	// Создадим группы проверок.
	Для Каждого ТекущаяСтрока Из ТаблицаГруппПроверок Цикл
		
		Если ТипКонтекстаВыполнения <> Неопределено И ТипЗнч(ТекущаяСтрока.КонтекстВыполнения) <> ТипКонтекстаВыполнения Тогда
			Продолжить;
		КонецЕсли;
			
		ЗаписанныйЭлемент = ЗарегистрироватьГруппуПроверокСостоянияСистемы(ТекущаяСтрока, СуществующиеПроверки, РежимОбновленияПроверок);
		
		Если НЕ ЗначениеЗаполнено(ЗаписанныйЭлемент) Тогда
			БылиОшибки = Истина;
		Иначе
			ВсеПроверки.Удалить(ЗаписанныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ БылиОшибки Тогда
		
		// Создадим сами проверки.
		Для Каждого ТекущаяСтрока Из ТаблицаПроверок Цикл
			
			Если ТипКонтекстаВыполнения <> Неопределено И ТипЗнч(ТекущаяСтрока.КонтекстВыполнения) <> ТипКонтекстаВыполнения Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписанныйЭлемент = ЗарегистрироватьПроверкуСостоянияСистемы(ТекущаяСтрока, СуществующиеПроверки, РежимОбновленияПроверок);
			
			Если НЕ ЗначениеЗаполнено(ЗаписанныйЭлемент) Тогда
				БылиОшибки = Истина;
			Иначе
				ВсеПроверки.Удалить(ЗаписанныйЭлемент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ БылиОшибки И ВсеПроверки.Количество() > 0 Тогда
		
		// Удалим устаревшие проверки.
		Для Каждого КлючИЗначение Из ВсеПроверки Цикл
			УдалитьУстаревшуюПроверку(КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НЕ БылиОшибки;
	
КонецФункции

Функция ЗарегистрироватьГруппуПроверокСостоянияСистемы(Описание, СуществующиеПроверки, РежимОбновленияПроверок = Ложь)
	
	ГруппаПроверок = Неопределено;
	
	НачатьТранзакцию();

	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПроверкиСостоянияСистемы");
		ЭлементБлокировкиДанных.УстановитьЗначение("КонтекстВыполнения", Описание.КонтекстВыполнения);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ГруппаПроверок = НайтиПроверкуПоКлючевымПолям(Описание.КонтекстВыполнения, Описание.Идентификатор);
		
		Если РежимОбновленияПроверок И ЗначениеЗаполнено(ГруппаПроверок) Тогда
			// Группа уже есть, ничего делать не надо.
		Иначе
			
			Если ЗначениеЗаполнено(ГруппаПроверок) Тогда
				
				ГруппаОбъект = ГруппаПроверок.ПолучитьОбъект();
				
				Если ГруппаОбъект.КонтекстВыполнения <> Описание.КонтекстВыполнения
				 ИЛИ ГруппаОбъект.Идентификатор <> Описание.Идентификатор Тогда
					ВызватьИсключение НСтр("ru='Ошибка поиска группы проверок по ключевым полям'");
			 	КонецЕсли;
			 
			Иначе
				ГруппаОбъект = Справочники.ПроверкиСостоянияСистемы.СоздатьГруппу();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ГруппаОбъект, Описание);
			
			ГруппаОбъект.Родитель = НайтиПроверкуПоКлючевымПолям(Описание.КонтекстВыполнения, Описание.ИдентификаторРодителя);
		
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ГруппаОбъект,, Истина);
			
			ГруппаПроверок = ГруппаОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось создать группу проверок ""%1"" по причине:
			|%2'"),
			Описание.Наименование,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			АудитСостоянияСистемыКлиентСервер.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Справочники.ПроверкиСостоянияСистемы, 
			,
			ТекстОшибки);
			
		ГруппаПроверок = Неопределено;
		
	КонецПопытки;
	
	Возврат ГруппаПроверок;
	
КонецФункции

Функция ЗарегистрироватьПроверкуСостоянияСистемы(Описание, СуществующиеПроверки, РежимОбновленияПроверок = Ложь)
	
	Проверка = Неопределено;
	
	НачатьТранзакцию();

	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПроверкиСостоянияСистемы");
		ЭлементБлокировкиДанных.УстановитьЗначение("КонтекстВыполнения", Описание.КонтекстВыполнения);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Проверка = НайтиПроверкуПоКлючевымПолям(Описание.КонтекстВыполнения, Описание.Идентификатор);
		
		Если РежимОбновленияПроверок И ЗначениеЗаполнено(Проверка) И ПоляПроверкиНеИзменились(Проверка, Описание, СуществующиеПроверки) Тогда
			// Проверка уже есть, ничего делать не надо.
		Иначе
			
			Если ЗначениеЗаполнено(Проверка) Тогда
				
				ПроверкаОбъект = Проверка.ПолучитьОбъект();
				
				Если ПроверкаОбъект.КонтекстВыполнения <> Описание.КонтекстВыполнения
				 ИЛИ ПроверкаОбъект.Идентификатор <> Описание.Идентификатор Тогда
					ВызватьИсключение НСтр("ru='Ошибка поиска проверки по ключевым полям'");
			 	КонецЕсли;
				
			Иначе
				ПроверкаОбъект = Справочники.ПроверкиСостоянияСистемы.СоздатьЭлемент(); 
			КонецЕсли;
		
			ЗаполнитьЗначенияСвойств(ПроверкаОбъект, Описание,, "ОписаниеДополнительныхПараметров");
			ПроверкаОбъект.Родитель = НайтиПроверкуПоКлючевымПолям(Описание.КонтекстВыполнения, Описание.ИдентификаторРодителя);
		
			ОписаниеДополнительныхПараметров = ?(ЗначениеЗаполнено(Описание.ОписаниеДополнительныхПараметров),
				Описание.ОписаниеДополнительныхПараметров,
				Неопределено);
			
			ДополнительныеПараметрыАвтопроверки = Неопределено;
			
			ПроверкаОбъект.ОписаниеДополнительныхПараметров    = Новый ХранилищеЗначения(ОписаниеДополнительныхПараметров, 	  Новый СжатиеДанных(9));
			ПроверкаОбъект.ДополнительныеПараметрыАвтопроверки = Новый ХранилищеЗначения(ДополнительныеПараметрыАвтопроверки, Новый СжатиеДанных(9));
		 	
			ПроверкаОбъект.ДополнительныеСвойства.Вставить("РасписаниеВыполнения", Описание.РасписаниеВыполнения);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПроверкаОбъект,, Истина);
			
			Проверка = ПроверкаОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось создать проверку ""%1"" по причине:
			|%2'"),
			Описание.Наименование,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			АудитСостоянияСистемыКлиентСервер.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Справочники.ПроверкиСостоянияСистемы, 
			,
			ТекстОшибки);
			
		Проверка = Неопределено;
		
	КонецПопытки;
	
	Возврат Проверка;
	
КонецФункции

Функция ПоляПроверкиНеИзменились(Проверка, Описание, СуществующиеПроверки)
	
	ПоляПроверки = СуществующиеПроверки.Найти(Проверка, "Ссылка");
	Если ПоляПроверки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПоляПроверки.Наименование = Описание.Наименование
	 И ПоляПроверки.Комментарий = Описание.Комментарий
	 И ПоляПроверки.УточнениеКонтекстаВыполнения = Описание.УточнениеКонтекстаВыполнения
	 И ПоляПроверки.ВыполняетсяТолькоВКонтексте = Описание.ВыполняетсяТолькоВКонтексте
	 И (ПоляПроверки.СпособВыполнения = Описание.СпособВыполнения ИЛИ НЕ ЗначениеЗаполнено(Описание.СпособВыполнения))
	 И ПоляПроверки.Обработчик = Описание.Обработчик
	 И ПоляПроверки.ВозможноИзменениеВажности = Описание.ВозможноИзменениеВажности
	 И (ПоляПроверки.Важность = Описание.Важность ИЛИ Описание.ВозможноИзменениеВажности) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УдалитьУстаревшуюПроверку(Проверка)
	
	НачатьТранзакцию();

	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПроверкиСостоянияСистемы");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Проверка);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ПроверкаОбъект = Проверка.ПолучитьОбъект();
		
		ПроверкаОбъект.ПометкаУдаления = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПроверкаОбъект,, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось записать проверку ""%1"" по причине:
			|%2'"),
			СокрЛП(Проверка),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			АудитСостоянияСистемыКлиентСервер.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Справочники.ПроверкиСостоянияСистемы, 
			,
			ТекстОшибки);
			
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиВФоне

// Выполнение проверки состояния системы общим регламентным заданием "ПроверкаСостоянияСистемы".
// Метод выполняет проверки из справочника "ПроверкиСостоянияСистемы" с установленным признаком "Используется"
// и с незаданным отдельным расписанием.
//
Процедура ВыполнитьПроверкиСостоянияСистемы(ИзРегламентногоЗадания = Истина) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСистемы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проверки.Ссылка КАК Проверка,
	|	ВЫБОР
	|		КОГДА &ИзРегламентногоЗадания
	|			ТОГДА Проверки.ДополнительныеПараметрыАвтопроверки
	|		ИНАЧЕ Проверки.ОписаниеДополнительныхПараметров
	|	КОНЕЦ КАК ПараметрыПроверки
	|ИЗ
	|	Справочник.ПроверкиСостоянияСистемы КАК Проверки
	|ГДЕ
	|	Проверки.Используется
	|	И НЕ Проверки.ПоОтдельномуРасписанию
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверки.КонтекстВыполнения,
	|	Проверки.Идентификатор";
	
	Запрос.УстановитьПараметр("ИзРегламентногоЗадания", ИзРегламентногоЗадания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыполнитьПроверкуСостоянияСистемы(Выборка.Проверка, Выборка.ПараметрыПроверки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьВыполнениеПроверокВФоне(Параметры, АдресХранилища) Экспорт
	
	ЗначенияДопПараметров = Неопределено;
	Параметры.Свойство("ЗначенияДопПараметров", ЗначенияДопПараметров);
	ЗначенияДопПараметровСоответствие = ЗначенияДопПараметров;
	
	Для Каждого Проверка Из Параметры.МассивПроверок Цикл
		
		Если ТипЗнч(ЗначенияДопПараметровСоответствие) = Тип("Соответствие") Тогда
			ЗначенияДопПараметров = ЗначенияДопПараметровСоответствие.Получить(Проверка);
		КонецЕсли;
		
		ВыполнитьПроверкуСостоянияСистемы(Проверка, ЗначенияДопПараметров);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатПроверкиВДлительнойОперации(Форма, МассивПроверок, ЗначенияДопПараметров = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура("МассивПроверок, ЗначенияДопПараметров", МассивПроверок, ЗначенияДопПараметров);
	
	НаименованиеЗадания = НСтр("ru = 'Проверка состояния системы'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"АудитСостоянияСистемы.ЗапуститьВыполнениеПроверокВФоне",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	Форма.АдресХранилища = Результат.АдресХранилища;
		
	Возврат Результат;
	
КонецФункции

Функция ВозможнаНастройкаРасписания() Экспорт
	
	Возврат НЕ ОбщегоНазначения.РазделениеВключено() И Пользователи.ЭтоПолноправныйПользователь(, Истина);
	
КонецФункции

#КонецОбласти

#Область ОписаниеПроверок

// Возвращает пустую таблицу отборов для проверки.
//
Функция ТаблицаОтборовДляПроверки() Экспорт
	
	ОтборыДляПроверки = Новый ТаблицаЗначений;
	ОтборыДляПроверки.Колонки.Добавить("Организация", 	 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОтборыДляПроверки.Колонки.Добавить("ПроверяемыйПериод", Новый ОписаниеТипов("Дата"));
	
	Возврат ОтборыДляПроверки;
	
КонецФункции	

// Возвращает пустую таблицу описания выявленных проблем при проверке.
//
Функция ТаблицаВыявленныхПроблемПриПроверке() Экспорт
	
	ВыявленныеПроблемы = Новый ТаблицаЗначений;
	
	ВыявленныеПроблемы.Колонки.Добавить("Организация", 	 	 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ВыявленныеПроблемы.Колонки.Добавить("ПроверяемыйПериод", Новый ОписаниеТипов("Дата"));
	ВыявленныеПроблемы.Колонки.Добавить("Представление", 	 Новый ОписаниеТипов("Строка")); // для поля Проблема
	ВыявленныеПроблемы.Колонки.Добавить("Важность", 	 	 Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыВажностиПроблемыСостоянияСистемы")); // не обязательное
	ВыявленныеПроблемы.Колонки.Добавить("ДополнительнаяИнформация");
	
	ВыявленныеПроблемы.Колонки.Добавить("Объекты", 		 	 Новый ОписаниеТипов("Массив"));
	
	ВыявленныеПроблемы.Индексы.Добавить("Организация, ПроверяемыйПериод");
	
	Возврат ВыявленныеПроблемы;
	
КонецФункции	

// Метод предназначен для получения произвольных сведений, связанных с проблемой, 
//	указанных при выявлении проблемы в момент проверки.
//
// Параметры:
//	Проблема - уникальный идентификатор проблемы.
//
// Возвращаемое значение - значение произвольного типа 
//	или Неопределено, если проблема не найдена.
//
Функция ДополнительнаяИнформацияПоПроблеме(Проблема) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Проблемы.ДополнительнаяИнформация
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|ГДЕ
	|	Проблемы.Проблема = &Проблема";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проблема", Проблема);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДополнительнаяИнформация.Получить();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИнициализироватьПараметрыПроверки(Проверка, КонтекстВыполнения = NULL, ЗначенияДопПараметров = Неопределено) Экспорт
	
	Если КонтекстВыполнения = NULL Тогда
		КонтекстВыполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проверка, "КонтекстВыполнения");
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	
	ПараметрыПроверки.Вставить("Проверка", 				  Проверка);
	ПараметрыПроверки.Вставить("ДополнительныеПараметры", ЗначенияДопПараметров);
	ПараметрыПроверки.Вставить("КонтекстВыполнения", 	  КонтекстВыполнения);
	
	ПараметрыПроверки.Вставить("ПроверкаНеВыполнена",  	  Ложь);
	ПараметрыПроверки.Вставить("ПричинаОтказаОтПроверки", "");
	
	ПараметрыПроверки.Вставить("Отборы", 			 	  ТаблицаОтборовДляПроверки());
	ПараметрыПроверки.Вставить("ВыявленныеПроблемы", 	  ТаблицаВыявленныхПроблемПриПроверке());
	
	Возврат ПараметрыПроверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
