
#Область ПрограммныйИнтерфейс

// Формирует таблицу цен на форме
//
// Параметры:
//  Форма - Управляемая форма
//
Процедура ПостроитьДеревоЦен(Форма, ИмяТаблицы = "ДеревоЦен") Экспорт
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ДеревоЗначений = Новый ТаблицаЗначений;
	Иначе
		ДеревоЗначений = Новый ДеревоЗначений;
	КонецЕсли;
	
	ДеревоЗначений.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("ИндексКартинки",             Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ДеревоЗначений.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		
		ДеревоЗначений.Колонки.Добавить("НоменклатураПоставщика",     Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
		
		Если ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма) Тогда
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименование",              Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураСопоставленаАвтоматически", Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("СтрокаСопоставлена",                    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("КоличествоНоменклатурыДляВыбора",       Новый ОписаниеТипов("Число"));
			ДеревоЗначений.Колонки.Добавить("АртикулОтличается",                     Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименованиеОтличается",    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("ЦенаНеРаспознана",                      Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
	Иначе
		ДеревоЗначений.Колонки.Добавить("ЦеноваяГруппа",      Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ДеревоЗначений.Колонки.Добавить("РеквизитСортировки", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			
			ДеревоЗначений.Колонки.Добавить(                          ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СтараяЦена"              + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ПроцентИзменения"        + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СуммаИзменения"          + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаВручную"         + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаАвтоматически"   + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("КартинкаИзмененаВручную" + ИмяКолонки, Новый ОписаниеТипов("Число"),                                                                 ВидЦены.Наименование);
			// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
			Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
				ДеревоЗначений.Колонки.Добавить("СТ_Количество"         + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("СтароеСТ_Количество"   + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			КонецЕсли;	
			// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ДеревоЗначений.Колонки.Добавить("Упаковка" + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "Упаковка");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкаОтступ = ДеревоЗначений.Колонки.Добавить("Отступ", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Отступ'"));
	
	РеквизитыТаблицыЦен = Форма.ПолучитьРеквизиты(ИмяТаблицы);
	Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		Если СтрНайти(Реквизит.Имя, "ВидЦены") ИЛИ СтрНайти(Реквизит.Имя, "Отступ") Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить(ИмяТаблицы + "." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Если СтрНайти(Колонка.Имя, "ВидЦены") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти(ИмяТаблицы + "." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы, Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(КолонкаОтступ.Имя, КолонкаОтступ.ТипЗначения, ИмяТаблицы, КолонкаОтступ.Заголовок, Истина));
	
	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Форма.Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, "ВидЦены") ИЛИ СтрНайти(ТекЭлемент.Имя, "Отступ") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Оформление Из Форма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		Форма.УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;
	
	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		
		Если ВидЦены.Выбрана ИЛИ ?(Форма.ОтображатьВлияющиеЦены, ВидЦены.Влияет, Ложь) Тогда
			
			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную Тогда
				
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенЗаполнятьПоДаннымИБ.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенРассчитыватьПоФормуламОтДругихВидовЦен.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоФормуламОтДругихВидовЦен;
				
			КонецЕсли;
			
			НоваяГруппа = ДобавитьГруппуФормы(Форма, "ГруппаЦены" + ИмяКолонки, Строка(ВидЦены.Ссылка) + ", " + Строка(ВидЦены.Валюта), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная, Неопределено);
			
			Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Или
				ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
				
				Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
					ДатаДействующихЦен = КонецДня(Форма.ДатаДействующихЦен);
				Иначе
					ДатаДействующихЦен = НачалоДня(Форма.Дата)-1;
				КонецЕсли;
				ЗаголовокКолонкиСтараяЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Цена на %1'"), Формат(ДатаДействующихЦен, "ДЛФ=D"));
				
			Иначе
				
				ЗаголовокКолонкиСтараяЦена = ?(ВидЦены.Выбрана, НСтр("ru='Действующая цена'"), НСтр("ru='Цена'"));
				
			КонецЕсли;
			
			Если ВидЦены.Выбрана Тогда
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СтараяЦена" + ИмяКолонки, СтруктураПараметров);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Изменение'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СуммаИзменения" + ИмяКолонки, СтруктураПараметров);
				
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Изменение цены'");
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              "%");
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             6);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"ПроцентИзменения" + ИмяКолонки, СтруктураПараметров);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Процент изменения цены'");
				
				НоваяГруппаЦена = ДобавитьГруппуФормы(Форма, "ГруппаЦена" + ИмяКолонки, НСтр("ru='Цена'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
				
				НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + "Картинка" + ИмяКолонки, Тип("ПолеФормы"), НоваяГруппаЦена);
				НовоеПоле.ПутьКДанным         = "ДеревоЦен.ИзмененаВручную" + ИмяКолонки;
				НовоеПоле.Заголовок           = "";
				НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
				НовоеПоле.Вид                 = ВидПоляФормы.ПолеКартинки;
				НовоеПоле.ТолькоПросмотр      = Истина;
				НовоеПоле.Ширина              = 2;
				НовоеПоле.ОтображатьВШапке    = Ложь;
				НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.Изменить;
				НовоеПоле.КартинкаШапки = БиблиотекаКартинок.Изменить;
				НовоеПоле.Видимость  = Истина;
				НовоеПоле.РастягиватьПоГоризонтали = Ложь;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Цена'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма, ИмяКолонки, СтруктураПараметров);
				
				// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
				Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Количество'"));
					СтруктураПараметров.Вставить("ШиринаПоля",             12);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
					НовоеПоле = ДобавитьПолеФормы(Форма,"СТ_Количество" + ИмяКолонки, СтруктураПараметров);
					НовоеПоле.Подсказка = НСтр("ru = 'Количество доступно (в наличии)'");
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Старое количество'"));
					СтруктураПараметров.Вставить("ШиринаПоля",             12);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
					НовоеПоле = ДобавитьПолеФормы(Форма,"СтароеСТ_Количество" + ИмяКолонки, СтруктураПараметров);
					НовоеПоле.ЦветТекста = WebЦвета.Серый;
				КонецЕсли;	
				// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
				
			Иначе
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СтараяЦена" + ИмяКолонки, СтруктураПараметров);
				
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				
			КонецЕсли;
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяГруппаУпаковка = ДобавитьГруппуФормы(Форма, "ГруппаУпаковки" + ИмяКолонки, НСтр("ru='Ед. изм.'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
				
				НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы." + ИмяТаблицы + ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Упаковка'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенУпаковкаПриИзменении");
				СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "Подключаемый_ДеревоЦенУпаковкаНачалоВыбора");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
				СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
				СтруктураПараметров.Вставить("ОтображатьВШапке",       Ложь);
				
				ДобавитьПолеФормы(Форма,"Упаковка" + ИмяКолонки, СтруктураПараметров);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
				СтруктураПараметров.Вставить("ШиринаПоля",             8);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
				СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
				
			Иначе
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
				СтруктураПараметров.Вставить("ШиринаПоля",             8);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
			КонецЕсли;
			
			// Условное оформление увеличившихся цен
			НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".СтараяЦена" + ИмяКолонки);
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
			
			// Условное оформление уменьшившихся цен
			НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".СтараяЦена" + ИмяКолонки);
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноЗеленый);
			
			// Условное оформление единиц измерения
			НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, "ДеревоЦенЕдиницаИзмерения" + ИмяКолонки, "ДеревоЦен.Упаковка" + ИмяКолонки);
			
			Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
				
				// В регистрации цен поставщика - пустая цена не регистрируется при проведении
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ХарактеристикиИспользуются");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Ложь;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
				//
				
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".Характеристика");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
				// В регистрации цен поставщика - пустая цена не регистрируется при проведении
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПроцентИзменения" + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ШиринаПоля",             30);
	СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
	
	НовоеПоле = ДобавитьПолеФормы(Форма, "Отступ", СтруктураПараметров);
	НовоеПоле.ЦветТекста = WebЦвета.Серый;
	НовоеПоле.Видимость  = Истина;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.РастягиватьПоГоризонтали = Истина;

	ДеревоЦенЗначение = Форма.РеквизитФормыВЗначение(ИмяТаблицы);
	ДеревоЦенЗначение.Колонки.Очистить();
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ДеревоЦенЗначение.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЦенЗначение, ИмяТаблицы);
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ВыбранныеЦеныИзменены") Тогда
		Форма.ВыбранныеЦеныИзменены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет инициализацию структуры кэша данных
//
// Параметры:
//  КэшДанных - Структура, кэш данных
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров - ТаблицаЗначений, Неопределено - Соответствие номенклатуры.
//   * КурсыВалют - ТаблицаЗначений, Неопределено - Курсы валют.
//   * СоответствиеВидовЦенИменамКолонокТаблицыТоваров - Соответствие - Соответствие видов цен именам колонок.
//
Функция ИнициализироватьСтруктуруКэшаДанных(КэшДанных = Неопределено) Экспорт
	
	Если КэшДанных = Неопределено Тогда
		КэшДанных = Новый Структура;
		// Кэш, используемый для быстрого поиска строки дерева по номенклатуре
		КэшДанных.Вставить("ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров");
		// Кэш курсов валют
		КэшДанных.Вставить("КурсыВалют");
		// Кэш имен колонок видов цен
		КэшДанных.Вставить("СоответствиеВидовЦенИменамКолонокТаблицыТоваров", Новый Соответствие);
	КонецЕсли;
	
	Возврат КэшДанных;
	
КонецФункции

// Копирует в таблицу значений номенклатуру с характеристиками из дерева цен
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * НоменклатураПоставщика - СправочникСсылка.НоменклатураПоставщиков - Номенклатура поставщика.
//   * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//
Функция СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма) Экспорт
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
	
	ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементНоменклатура);
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Возвращает пустую таблицу для товаров (Без цен и упаковок).
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * НоменклатураПоставщика - СправочникСсылка.НоменклатураПоставщиков - Номенклатура поставщика.
//   * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//
Функция СоздатьТаблицуНоменклатуры() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("НоменклатураПоставщика", Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика",         Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Возвращает пустую таблицу для товаров (С ценами и упаковками).
//
// Параметры:
//  ЭтоРегистрацияЦенПоставщика - Булево - Признак, что таблица создается для регистрации цен поставщика.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * НоменклатураПоставщика - СправочникСсылка.НоменклатураПоставщиков - Номенклатура поставщика.
//   * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//   * ВидЦены - СправочникСсылка.ВидыЦенПоставщиков,СправочникСсылка.ВидыЦен - Вид цены.
//   * Цена - Число - Цена.
//   * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка.
//
Функция СоздатьТаблицуТовары(ЭтоРегистрацияЦенПоставщика) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("НоменклатураПоставщика", Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика",         Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Если ЭтоРегистрацияЦенПоставщика Тогда
		ТаблицаЗначений.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦенПоставщиков"));
	Иначе
		ТаблицаЗначений.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КонецЕсли;
	ТаблицаЗначений.Колонки.Добавить("Цена",                   Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Упаковка",               Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Инициализирует реквизит КомпоновщикНастроекОтбор, используемый в механизмах отбора товаров.
//
// Параметры:
//  Форма - УправляемаяФорма - Управляемая форма.
//
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию(Форма) Экспорт
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
		СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет("МакетНоменклатураПоставщика");
	Иначе
		СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет("Макет");
	КонецЕсли;
	
	Форма.КомпоновщикНастроекОтбор.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор)));
	Форма.КомпоновщикНастроекОтбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Форма.КомпоновщикНастроекОтбор.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Если ИспользоватьАссортимент Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.КомпоновщикНастроекОтбор.Настройки, "АссортиментНаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные о видах цен, правилах расчета и отборах, пользовательские настройки для расчета.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  НастройкиКомпоновкиДанных - ТаблицаЗначений - Таблица значений, пользовательские настройки компоновки данных, сохраненные в документе.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками:
//   * Уровень - Число - Уровень.
//   * ВлияющиеЦены - СписокЗначений - Влиящие цены.
//   * ЗависимыеЦены - СписокЗначений - Зависимые цены.
//   * ИмяКолонки - Строка - Имя колонки.
//   * АдресСхемыКомпоновкиДанных - Строка - Адрес схемы компоновки данных.
//   * АдресНастроекСхемыКомпоновкиДанных - Адрес настроек схемы компоновки данных.
//   * НайденыОбязательныеПараметры - Булево - Найдены обязательные параметры.
//   * Параметры - Строка - Описание параметров.
//
Функция ЗагрузитьСправочникВидовЦен(Форма, НастройкиКомпоновкиДанных, МассивВидовЦен = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
	
	ЗапросРазрешенныеВидыЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка                               КАК Ссылка,
	|	ВидыЦен.Наименование                         КАК Наименование,
	|	ВидыЦен.Статус                               КАК Статус,
	|	ВидыЦен.ПометкаУдаления                      КАК ПометкаУдаления,
	|	ВидыЦен.РеквизитДопУпорядочивания            КАК РеквизитДопУпорядочивания,
	|	ВидыЦен.УстанавливатьЦенуПриВводеНаОсновании КАК УстанавливатьЦенуПриВводеНаОсновании,
	|	ВидыЦен.СпособЗаданияЦены                    КАК СпособЗаданияЦены,
	|	ВидыЦен.Идентификатор                        КАК Идентификатор,
	|	ВидыЦен.ПорогСрабатывания                    КАК ПорогСрабатывания,
	|	ВидыЦен.ВалютаЦены                           КАК Валюта,
	|	ВидыЦен.Формула                              КАК Формула,
	|	ВидыЦен.БазовыйВидЦены.Идентификатор         КАК БазовыйВидЦены,
	|	ВидыЦен.Наценка                              КАК Наценка,
	|	ВидыЦен.СхемаКомпоновкиДанных                КАК СхемаКомпоновкиДанных,
	|	ВЫБОР
	|		КОГДА НЕ ВидыЦен.Ссылка В (&РазрешенныеВидыЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрещенныйВидЦены,
	|	ВидыЦен.ЦеновыеГруппы.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		Формула           КАК Формула,
	|		БазовыйВидЦены.Идентификатор  КАК БазовыйВидЦены,
	|		Наценка  КАК Наценка
	|	),
	|	
	|	ВидыЦен.ПорогиСрабатывания.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		ПорогСрабатывания             КАК ПорогСрабатывания
	|	),
	|	
	|	ВидыЦен.ВлияющиеВидыЦен.(
	|		ВлияющийВидЦен                КАК ВлияющийВидЦен
	|	),
	|	
	|	ВидыЦен.ПравилаОкругленияЦены.(
	|		НижняяГраницаДиапазонаЦен     КАК НижняяГраницаДиапазонаЦен,
	|		ТочностьОкругления            КАК ТочностьОкругления,
	|		ПсихологическоеОкругление     КАК ПсихологическоеОкругление
	|	),
	|	
	|	ВидыЦен.ВариантОкругления КАК ВариантОкругления
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	НЕ ВидыЦен.ЭтоГруппа
	|//ПереданМассивВидовЦен  И ВидыЦен.Ссылка В (&МассивВидовЦен)
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.РеквизитДопУпорядочивания,
	|	НижняяГраницаДиапазонаЦен ВОЗР");
	
	Если МассивВидовЦен <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПереданМассивВидовЦен", "");
		Запрос.Параметры.Вставить("МассивВидовЦен", МассивВидовЦен);
	КонецЕсли;
	
	Запрос.Параметры.Вставить("РазрешенныеВидыЦен", ЗапросРазрешенныеВидыЦен.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВидовЦен.Колонки.Добавить("Уровень",       Новый ОписаниеТипов("Число"));
	ТаблицаВидовЦен.Колонки.Добавить("ВлияющиеЦены",  Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ЗависимыеЦены", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ИмяКолонки",    Новый ОписаниеТипов("Строка"));
	// Служебные колонки для работы с настройками СКД
	ТаблицаВидовЦен.Колонки.Добавить("АдресСхемыКомпоновкиДанных",         Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("АдресНастроекСхемыКомпоновкиДанных", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("НайденыОбязательныеПараметры", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовЦен.Колонки.Добавить("Параметры",                    Новый ОписаниеТипов("Строка"));
	// Индексирование
	ТаблицаВидовЦен.Индексы.Добавить("Ссылка");
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = Новый ТаблицаЗначений;
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Использование");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ВидЦены");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Имя");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Заголовок");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Значение");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ДоступныеЗначения");
	
	МассивУдаляемыхВидовЦен = Новый Массив();
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		
		НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, СтрокаВидаЦен.Ссылка);
		
		СтрокаВидаЦен.ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаВидаЦен.Ссылка, КэшДанных);
		
		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(
			СтрокаВидаЦен.Ссылка,
			СтрокаВидаЦен.СхемаКомпоновкиДанных);
		
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		
		СтрокаВидаЦен.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
		Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
			СтрокаВидаЦен.АдресНастроекСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(
				СхемаИНастройки.НастройкиКомпоновкиДанных,
				Форма.УникальныйИдентификатор);
		КонецЕсли;
		
		// Параметры схема компоновки данных
		РазрешенныеИмена = УстановкаЦенВызовСервера.ИменаРазрешенныхПараметровСхемКомпоновкиДанных();
		Для Каждого ПараметрДанных Из СхемаКомпоновкиДанных.Параметры Цикл
			
			Если РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено Тогда
				Если СтрНайти(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,"&"+ПараметрДанных.Имя) Тогда
					СтрокаВидаЦен.НайденыОбязательныеПараметры = Истина;
				КонецЕсли;
			Иначе
				ПараметрДанных.ОграничениеИспользования = Истина;
				ПараметрДанных.ВключатьВДоступныеПоля   = Ложь;
			КонецЕсли;
			
			НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(
				Новый Структура("Имя, ВидЦены",ПараметрДанных.Имя, СтрокаВидаЦен.Ссылка));
			Если НайденныеСтроки.Количество() = 0
				И РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено
				И Не ПараметрДанных.ОграничениеИспользования Тогда
				
				НовыйПараметр = ПараметрыСхемКомпоновкиДанныхВидовЦен.Добавить();
				НовыйПараметр.ВидЦены           = СтрокаВидаЦен.Ссылка;
				НовыйПараметр.Имя               = ПараметрДанных.Имя;
				НовыйПараметр.Заголовок         = ПараметрДанных.Заголовок;
				НовыйПараметр.Значение          = ПараметрДанных.Значение;
				НовыйПараметр.ДоступныеЗначения = ПараметрДанных.ПолучитьДоступныеЗначения();
				НовыйПараметр.Использование     = ПараметрДанных.Использование;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Настройки компоновки данных
		ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Найти(СтрокаВидаЦен.Ссылка, "ВидЦены");
		Если ПользовательскаяНастройка = Неопределено
			И СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
			
			ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Добавить();
			ПользовательскаяНастройка.ВидЦены                   = СтрокаВидаЦен.Ссылка;
			
			Если Не ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				УстановитьПривилегированныйРежим(Истина);
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				УстановитьПривилегированныйРежим(Ложь);
				
				Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.НастройкиКомпоновкиДанных);
				Иначе
					КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
				КонецЕсли;
				
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
			Иначе
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанных;
			КонецЕсли;
			
			СтруктураДанных = УстановкаЦенВызовСервера.ОписаниеПараметровСхемыКомпоновкиДанных(
				СтрокаВидаЦен.Ссылка,
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных,
				ПараметрыСхемКомпоновкиДанныхВидовЦен);
			
		ИначеЕсли ПользовательскаяНастройка = Неопределено
			И Не СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
			
			Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
				СтруктураДанных = УстановкаЦенВызовСервера.ОписаниеПараметровСхемыКомпоновкиДанных(
					СтрокаВидаЦен.Ссылка,
					СхемаИНастройки.НастройкиКомпоновкиДанных,
					ПараметрыСхемКомпоновкиДанныхВидовЦен);
			Иначе
				СтруктураДанных = УстановкаЦенВызовСервера.ОписаниеПараметровСхемыКомпоновкиДанных(
					СтрокаВидаЦен.Ссылка,
					СхемаКомпоновкиДанных.НастройкиПоУмолчанию,
					ПараметрыСхемКомпоновкиДанныхВидовЦен);
			КонецЕсли;
			
		Иначе
			
			СтруктураДанных = УстановкаЦенВызовСервера.ОписаниеПараметровСхемыКомпоновкиДанных(СтрокаВидаЦен.Ссылка,
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных,
				ПараметрыСхемКомпоновкиДанныхВидовЦен);
			
		КонецЕсли;
		
		СтрокаВидаЦен.Параметры = СтруктураДанных.ОписаниеПараметров;
		
	КонецЦикла;
	
	Форма.АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен = ПоместитьВоВременноеХранилище(
		ПараметрыСхемКомпоновкиДанныхВидовЦен,
		Форма.УникальныйИдентификатор);
		
	Если МассивВидовЦен = Неопределено Тогда
		Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
			УдалитьВидЦен = Истина;
			Если СтрокаВидаЦен.ПометкаУдаления ИЛИ СтрокаВидаЦен.ЗапрещенныйВидЦены Тогда
				
				Если СтрокаВидаЦен.ЗависимыеЦены.Количество() <> 0 Тогда
					Для Каждого ВидЦены Из СтрокаВидаЦен.ЗависимыеЦены Цикл
						НайденноеЗначение = ТаблицаВидовЦен.Найти(ВидЦены.Значение, "Ссылка");
						Если НайденноеЗначение <> Неопределено Тогда
							Если Не НайденноеЗначение.ПометкаУдаления Тогда
								УдалитьВидЦен = Ложь;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если УдалитьВидЦен
					И МассивУдаляемыхВидовЦен.Найти(СтрокаВидаЦен) = Неопределено
					И ((ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен")
						И Форма.Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены" , СтрокаВидаЦен.Ссылка)).Количество() = 0)
						ИЛИ Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен")
					) Тогда
					МассивУдаляемыхВидовЦен.Добавить(СтрокаВидаЦен);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
			УдаляемыеСтроки = Новый Массив;
			Для Каждого ВидЦены Из СтрокаВидаЦен.ЗависимыеЦены Цикл
				Если МассивУдаляемыхВидовЦен.Найти(ТаблицаВидовЦен.Найти(ВидЦены.Значение, "Ссылка")) <> Неопределено Тогда
					УдаляемыеСтроки.Добавить(ВидЦены);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ЭлементМассива Из УдаляемыеСтроки Цикл
				СтрокаВидаЦен.ЗависимыеЦены.Удалить(ЭлементМассива);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ТекЭлемент Из МассивУдаляемыхВидовЦен Цикл
			ТаблицаВидовЦен.Удалить(ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаВидовЦен;
	
КонецФункции

// Возвращает данные о видах цен поставщика.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  МассивВидовЦен - Массив - Загружаемые виды цен.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица видов цен поставщика.
//
Функция ЗагрузитьСправочникВидовЦенПоставщика(Форма, МассивВидовЦен = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ЗапросРазрешенныеВидыЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦенПоставщиков КАК ВидыЦен");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК Ссылка,
	|	ВидыЦен.Наименование КАК Наименование,
	|	ВидыЦен.ПометкаУдаления КАК ПометкаУдаления,
	|	ВидыЦен.Валюта КАК Валюта,
	|	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА НЕ ВидыЦен.Ссылка В (&РазрешенныеВидыЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрещенныйВидЦены
	|ИЗ
	|	Справочник.ВидыЦенПоставщиков КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.РеквизитДопУпорядочивания");
	
	Если МассивВидовЦен <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПереданМассивВидовЦен", "");
		Запрос.Параметры.Вставить("МассивВидовЦен", МассивВидовЦен);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Партнер") Тогда
		Запрос.Параметры.Вставить("Владелец", Форма.Объект.Партнер);
	Иначе
		Запрос.Параметры.Вставить("Владелец", Форма.Партнер);
	КонецЕсли;
	
	Запрос.Параметры.Вставить("РазрешенныеВидыЦен", ЗапросРазрешенныеВидыЦен.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВидовЦен.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	// Индексирование
	ТаблицаВидовЦен.Индексы.Добавить("Ссылка");
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		СтрокаВидаЦен.ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаВидаЦен.Ссылка, КэшДанных);
	КонецЦикла;
	
	Возврат ТаблицаВидовЦен;
	
КонецФункции

// Возвращает таблицу настроек компоновки данных из документа.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки компоновки данных.
//
Функция ЗагрузитьТаблицуНастройкиКомпоновкиДанных(Форма) Экспорт
	
	ТаблицаНастройкиКомпоновкиДанных = Новый ТаблицаЗначений;
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("НастройкиКомпоновкиДанных");
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ПараметрыКомпоновкиДанных");
	
	// Для существующего документа - загрузить настройки схем компоновки.
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка")
		И ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатурыВидыЦен.ВидЦены                   КАК ВидЦены,
		|	УстановкаЦенНоменклатурыВидыЦен.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК УстановкаЦенНоменклатурыВидыЦен
		|ГДЕ
		|	УстановкаЦенНоменклатурыВидыЦен.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Форма.Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных.Получить();
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				НоваяСтрока = ТаблицаНастройкиКомпоновкиДанных.Добавить();
				НоваяСтрока.ВидЦены                   = Выборка.ВидЦены;
				НоваяСтрока.НастройкиКомпоновкиДанных = НастройкиКомпоновкиДанных;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНастройкиКомпоновкиДанных;
	
КонецФункции

// Инициализирует на форма таблицу "Выбранные цены"
//
// Параметры:
//  Форма - Управляемая форма
//  МассивВидовЦен - Виды цен для отображения
//
Процедура ИнициализироватьВыбранныеЦены(Форма, МассивВидовЦен = Неопределено) Экспорт
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		ИнициализироватьВыбранныеЦеныПоставщика(Форма, МассивВидовЦен);
	Иначе
		ИнициализироватьВыбранныеЦеныНоменклатуры(Форма, МассивВидовЦен);
	КонецЕсли;
	
КонецПроцедуры

// Перечитать выбранные цены
//
// Параметры:
//  Форма - Управляемая форма
Процедура ПеречитатьВыбранныеЦены(Форма) Экспорт
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма);
	
	ИнициализироватьВыбранныеЦены(Форма);
	
	Для Каждого СтрокаТЧ Из Форма.ВыбранныеЦены Цикл
		СтрокаТЧ.Выбрана = (ВидыЦен.Найти(СтрокаТЧ.Ссылка) <> Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТаблицаТовары - ТаблицаЗначений - Таблица с добавляемыми товарами.
//  КэшДанных - Структура - Структура кеша данных.
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствие номенклатуры и характеристки с добавленной строкой дерева цен
//
Функция ДобавитьТоварыПредприятия(Форма, Знач ТаблицаТовары, КэшДанных) Экспорт
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "Индекс");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Индекс         КАК Индекс,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура.Наименование     КАК Наименование,
	|	ТаблицаНоменклатура.Номенклатура                  КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатура.Номенклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
	|	ТаблицаНоменклатура.Характеристика                КАК Характеристика,
	|	ТаблицаНоменклатура.Номенклатура.Артикул          КАК Артикул,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатура.Индекс
	|ИТОГИ ПО
	|	Номенклатура";
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ТаблицаНоменклатура КАК Т) И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица",       ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма));
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(ДатаДокумента(Форма)));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = РезультатЗапроса[2].Выгрузить();
		Упаковки.Индексы.Добавить("Номенклатура, Характеристика");
	КонецЕсли;
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
	ТаблицаНоменклатуры.Колонки.Добавить("СтрокаДереваЦен");
	
	ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаНоменклатура.Номенклатура, ПустаяХарактеристика);
		НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементНоменклатура = НайденнаяСтрока;
		Иначе
			
			ЭлементНоменклатура = ЭлементыНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика", ЭлементНоменклатура.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				
				НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
					ЭлементНоменклатура["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаХарактеристики.Номенклатура, ВыборкаХарактеристики.Характеристика);
					НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных);
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ЭлементХарактеристика = НайденнаяСтрока;
					Иначе
						
						ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементХарактеристика);
						НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
						
						ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
						
						Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементХарактеристика.Номенклатура, ЭлементХарактеристика.Характеристика);
							
							НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
							Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
								ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - Управляемая форма
//  ТаблицаТовары - ТаблицаЗначений, таблица с добавляемыми товарами
//  КэшДанных - Структура
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствие номенклатуры и характеристки с добавленной строкой дерева цен
//
Функция ДобавитьТоварыПоставщика(Форма, Знач ТаблицаТовары, КэшДанных) Экспорт
	
	ИспользоватьТаблицуЗначенийВместоДереваЗначений = ИспользоватьТаблицуЗначенийВместоДереваЗначений(Форма);
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "Индекс");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Индекс                 КАК Индекс,
	|	Таблица.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Таблица.Номенклатура           КАК Номенклатура,
	|	Таблица.Характеристика         КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	&УсловиеПоНоменклатуре
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.НоменклатураПоставщика              КАК НоменклатураПоставщика,
	|	ТаблицаНоменклатура.НоменклатураПоставщика.Артикул      КАК Артикул,
	|	ТаблицаНоменклатура.НоменклатураПоставщика.Наименование КАК Наименование,
	|	ТаблицаНоменклатура.Номенклатура                        КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатура.Номенклатура.ЦеноваяГруппа          КАК ЦеноваяГруппа,
	|	ТаблицаНоменклатура.Характеристика                      КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатура.Индекс";
	
	Если Не ИспользоватьТаблицуЗначенийВместоДереваЗначений Тогда
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА МИНИМУМ(НоменклатураПоставщика) <> МАКСИМУМ(НоменклатураПоставщика)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ТОГДА NULL
		|		ИНАЧЕ МАКСИМУМ(НоменклатураПоставщика)
		|	КОНЕЦ КАК НоменклатураПоставщика,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
		|ПО
		|	Номенклатура
		|";
	КонецЕсли;
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура      КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика    КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка          КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦеныПоставщика КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ТаблицаНоменклатура КАК Т) И ВидЦеныПоставщика В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица", ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидыЦен", УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма));
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(ДатаДокумента(Форма)));
	
	Если ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуре", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуре", "Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = РезультатЗапроса[2].Выгрузить();
		Упаковки.Индексы.Добавить("Номенклатура, Характеристика");
	КонецЕсли;
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
	ТаблицаНоменклатуры.Колонки.Добавить("СтрокаДереваЦен");
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ЭлементыНоменклатура = Форма.ДеревоЦен;
	Иначе
		ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	КонецЕсли;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ЭлементНоменклатура = Неопределено;
		
		НоменклатураНеЗаполнена = Ложь;
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
		
			ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, НоменклатураПоставщика");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ВыборкаНоменклатура);
			
			НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				ЭлементНоменклатура = НайденнаяСтрока;
			Иначе
				
				ЭлементНоменклатура = ЭлементыНоменклатура.Добавить();
				ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
				УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
				
				НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
				НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
				
				ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					
					ПараметрыПоиска = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура", ВыборкаНоменклатура.Номенклатура);
					Если ИспользоватьТаблицуЗначенийВместоДереваЗначений Тогда
						ПараметрыПоиска.Вставить("Характеристика", ВыборкаНоменклатура.Характеристика);
					Иначе
						ПараметрыПоиска.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					КонецЕсли;
					
					НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
					Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
						ЭлементНоменклатура["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		
		Иначе
			НоменклатураНеЗаполнена = Истина;
		КонецЕсли;
		
		Если НоменклатураНеЗаполнена ИЛИ (Не ИспользоватьТаблицуЗначенийВместоДереваЗначений
		     И Форма.ИспользоватьХарактеристикиНоменклатуры) Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если Не НоменклатураНеЗаполнена Тогда
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			КонецЕсли;
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Или НоменклатураНеЗаполнена Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, НоменклатураПоставщика");
					ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ВыборкаХарактеристики);
					НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных);
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ЭлементХарактеристика = НайденнаяСтрока;
					Иначе
						
						Если Не НоменклатураНеЗаполнена Тогда
							ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
						Иначе
							ЭлементХарактеристика = ЭлементыНоменклатура.Добавить();
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементХарактеристика);
						НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
						
						ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
						
						Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура;
							ПараметрыОтбора.Вставить("Номенклатура", ЭлементХарактеристика.Номенклатура);
							ПараметрыПоиска.Вставить("Характеристика", ЭлементХарактеристика.Характеристика);
							
							НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
							Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
								ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - Управляемая форма
//  ТаблицаТовары - ТаблицаЗначений, таблица с добавляемыми товарами
//  КэшДанных - Структура
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствие номенклатуры и характеристки с добавленной строкой дерева цен
//
Функция ДобавитьТовары(Форма, Знач ТаблицаТовары, КэшДанных) Экспорт
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		Возврат ДобавитьТоварыПоставщика(Форма, ТаблицаТовары, КэшДанных);
	Иначе
		Возврат ДобавитьТоварыПредприятия(Форма, ТаблицаТовары, КэшДанных);
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - Управляемая форма
//  АдресВоВременномХранилище - Строка, адрес таблицы товаров во временном хранилище
//  ТаблицаТовары - ТаблицаЗначений - Добавляемые товары
//  ЗаполняемыйВидЦен - ВидЦены - К ценам по данному виду цен будет добавлен признак ручного изменения
//  КэшДанных - Структура
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция ДобавитьТоварыПоОтбору(Форма,
	                           АдресВоВременномХранилище,
	                           Знач ТаблицаТовары = Неопределено,
	                           ЗаполняемыйВидЦен = Неопределено,
	                           КэшДанных = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Форма);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	Если ТаблицаТовары = Неопределено Тогда
		ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	КонецЕсли;
	
	ТаблицаНоменклатуры = ДобавитьТовары(Форма, ТаблицаТовары, КэшДанных);
	
	ОбновитьСтарыеЦеныНоменклатуры(Форма, КэшДанных);
	
	//Заполним цены по выбранному виду цен
	Если ЗначениеЗаполнено(ЗаполняемыйВидЦен) Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			
			СтрокаДереваЦен = НайтиСтрокуДереваЦен(Форма, Новый Структура("Номенклатура, Характеристика", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика), КэшДанных);
			
			НоваяЦена = СтрокаТаблицы.Цена;
			ИмяКолонкиВидаЦены = ИмяКолонкиПоВидуЦены(ЗаполняемыйВидЦен, КэшДанных);
			
			Если СтрокаДереваЦен[ИмяКолонкиВидаЦены] <> НоваяЦена Тогда
				
				СтрокаДереваЦен[ИмяКолонкиВидаЦены] = НоваяЦена;
				СтрокаДереваЦен["ИзмененаВручную"       + ИмяКолонкиВидаЦены] = Истина;
				СтрокаДереваЦен["ИзмененаАвтоматически" + ИмяКолонкиВидаЦены] = Ложь;
				
				Если СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены] <> 0 Тогда
					СтрокаДереваЦен["ПроцентИзменения"+ИмяКолонкиВидаЦены] = Окр(100*(СтрокаДереваЦен[ИмяКолонкиВидаЦены] - СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены])/СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены],5,2);
				Иначе
					СтрокаДереваЦен["ПроцентИзменения"+ИмяКолонкиВидаЦены] = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Автоматический расчет цен
	Если НЕ ЭтоРегистрацияЦенПоставщика
		И Форма.РассчитыватьАвтоматически Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("МассивСтрокВидовЦен", УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма));
		
		ЗагрузитьЗначенияБазовыхЦен(
			Форма,
			ТаблицаНоменклатуры,
			КэшДанных,
			СтруктураПараметров);
			
		ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры,,,КэшДанных);
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
		Иначе
			РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим последнюю добавленную строку текущей
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		Форма.Элементы.ДеревоЦен.ТекущаяСтрока = ТаблицаНоменклатуры[ТаблицаНоменклатуры.Количество()-1].СтрокаДереваЦен.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции


// Осуществляет расчет цен в строке по идентификатору
//
// Параметры:
//  Форма - Управляемая форма
//  ИдентификаторСтроки - Число
//  ЗагружатьЦеныИзИБ - Булево - Указывает на необходимость загрузки цен из информационной базы
//  ИзмененноеПоле - Строка - поле, в котором изменена цена
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция РассчитатьЦеныПоИдентификаторуСтроки(Форма,
	                                         ИдентификаторСтроки,
	                                         ЗагружатьЦеныИзИБ = Ложь,
	                                         ИзмененноеПоле = Неопределено,
                                             КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
	ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), СтрокаТаблицыЦен, "Номенклатура, Характеристика");
	
	ЭлементыХарактеристики = СтрокаТаблицыЦен.ПолучитьЭлементы();
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры И ЭлементыХарактеристики.Количество() > 0 Тогда
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), ЭлементХарактеристика, "Номенклатура, Характеристика");
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("МассивСтрокВидовЦен", УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма));
			
			ЗагрузитьЗначенияБазовыхЦен(
				Форма,
				ТаблицаНоменклатуры,
				КэшДанных,
				СтруктураПараметров);
			ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры,,,КэшДанных);
			
		КонецЕсли;
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных,,,ИзмененноеПоле);
		Иначе
			РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных,,,ИзмененноеПоле);
		КонецЕсли;
		
	Иначе
		
		УстановитьПризнакРучногоИзмененияВычисляемыхЦен(Форма, ТаблицаНоменклатуры, ИзмененноеПоле, КэшДанных);
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Рассчитывает цены в таблице цен
//
// Параметры:
//  Форма - Управляемая форма
//  ПараметрыРасчета - Структура
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция РассчитатьЦены(Форма, ПараметрыРасчета, КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	МассивВидовЦен = Новый Массив;
	Для Каждого ВидЦены Из ПараметрыРасчета.ВидыЦен Цикл
		МассивВидовЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦены));
	КонецЦикла;
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
		Для Каждого ВыделеннаяСтрока Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			СтрокаТаблицыЦен           = Форма.ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаТаблицыЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТаблицыЦен.Характеристика;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыРасчета.ЗагрузкаСтарыхЦен Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("МассивСтрокВидовЦен",  МассивВидовЦен);
		СтруктураПараметров.Вставить("ДатаДокумента",        ПараметрыРасчета.ДатаСтарыхЦен);
		СтруктураПараметров.Вставить("ПроцентИзмененияЦены", ПараметрыРасчета.ПроцентИзмененияЦены);
		СтруктураПараметров.Вставить("ПрименятьОкругление",  ПараметрыРасчета.ПрименятьОкругление);
	
		ЗагрузитьЗначенияБазовыхЦен(
			Форма,
			ТаблицаНоменклатуры,
			КэшДанных,
			СтруктураПараметров);
			
	КонецЕсли;
	
	Если ПараметрыРасчета.ОкруглениеРучныхЦен Тогда
		ПрименитьОкруглениеКРучнымЦенам(Форма, ТаблицаНоменклатуры, МассивВидовЦен, КэшДанных);
	КонецЕсли;
	
	Если Не ПараметрыРасчета.ЗагрузкаСтарыхЦен И Не ПараметрыРасчета.ОкруглениеРучныхЦен Или Форма.РассчитыватьАвтоматически Тогда
		
		ЗагрузитьЗначенияБазовыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
		
		Если Не ПараметрыРасчета.ЗагрузкаСтарыхЦен И Не ПараметрыРасчета.ОкруглениеРучныхЦен Тогда 
			ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры, МассивВидовЦен, ПараметрыРасчета.ТолькоНезаполненные, КэшДанных);
		КонецЕсли;
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(
			    Форма,
				ТаблицаНоменклатуры,
				КэшДанных,
				?(Не ПараметрыРасчета.ЗагрузкаСтарыхЦен, МассивВидовЦен, Неопределено),
				ПараметрыРасчета.ТолькоНезаполненные);
		Иначе
			РассчитатьВычисляемыеЦены(
			    Форма,
				ТаблицаНоменклатуры,
				КэшДанных,
				?(Не ПараметрыРасчета.ЗагрузкаСтарыхЦен, МассивВидовЦен, Неопределено),
				ПараметрыРасчета.ТолькоНезаполненные);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Рассчитывает цены в таблице цен
//
// Параметры:
//  Форма - Управляемая форма
//  ПараметрыРасчета - Структура
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция ЗаполнитьЦеныИзДокументов(Форма, ПараметрыРасчета, КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	МассивВидовЦен = Новый Массив;
	Для Каждого ВидЦены Из ПараметрыРасчета.ВидыЦен Цикл
		МассивВидовЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦены));
	КонецЦикла;
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
	
	ЗагрузитьЗначенияЦенИзДокументов(
			Форма,
			ТаблицаНоменклатуры,
			МассивВидовЦен,
			ПараметрыРасчета.Документы,
			КэшДанных);
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Загружает значения базовых цен в таблицу
//
// Параметры:
// ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которую будут загружены значения цен
// ВидыЦен - Массив - виды цен, для которых необходимо загрузить значения цен
// Дата - Дата загрузки цен
// ПроцентИзмененияЦены - Число - Процент, на который необходимо изменить цену
// ПрименятьОкругление - Булево - Указывает на необходимость применения округления
//
Процедура ЗагрузитьЗначенияЦенИзДокументов(Форма,
	                                       ТаблицаНоменклатуры,
	                                       МассивСтрокВидовЦен = Неопределено,
	                                       ДокументыУстановкиЦен,
	                                       КэшДанных = Неопределено) Экспорт
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		МассивСтрокВидовЦен = Новый Массив();
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			Если ВидЦены.Влияет Тогда
				МассивСтрокВидовЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьЦены(Форма, ТаблицаНоменклатуры, МассивСтрокВидовЦен, КэшДанных);
	
	Если МассивСтрокВидовЦен.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика
			|;
			|ВЫБРАТЬ
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Упаковка       КАК Упаковка,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
			|	Товары.ВидЦены        КАК ВидЦены,
			|	МАКСИМУМ(Товары.Цена) КАК Цена
			|ИЗ
			|	Документ.УстановкаЦенНоменклатуры.Товары КАК Товары
			|ГДЕ
			|	(Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|					ИЗ
			|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
			|	И ВидЦены В (&ВидыЦен)
			|	И Товары.Ссылка В (&Документы)
			|СГРУППИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Упаковка,
			|	ВидЦены
			|");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры",  ТаблицаНоменклатуры);
		
		ВидыЦен = Новый Массив;
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыЦен",   ВидыЦен);
		Запрос.УстановитьПараметр("Документы", ДокументыУстановкиЦен);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			СоответствиеКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма);
		Иначе
			СоответствиеКоэффициентовУпаковокНоменклатуры = Неопределено;
		КонецЕсли;
		
		ЗагрузитьЦеныИзТаблицыЗначений(Форма, Выгрузка, СоответствиеКоэффициентовУпаковокНоменклатуры, КэшДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет расчет базовых, заполняемых по данным информационной базы и рассчитываемых цен
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция РассчитатьВсеЦены(Форма, КэшДанных) Экспорт
	
	Форма.Модифицированность = Истина;
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
	
	ЗагрузитьЗначенияБазовыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
	ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры,,,КэшДанных);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
	Иначе
		РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Осуществляет расчет вычисляемых цен
//
// Параметры:
//  ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен
//  ВидыЦен - Массив - Виды цен, которые необходимо рассчитать
//  ТолькоНезаполненные - Указывает на необходимость расчета ранее заполненных цен
//
Процедура РассчитатьВычисляемыеЦены(Форма,
	                                ТаблицаНоменклатуры,
	                                КэшДанных,
	                                ВидыЦен = Неопределено,
	                                ТолькоНезаполненные = Ложь,
	                                ИзмененноеПоле = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		ТаблицаКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма);
	Иначе
		ТаблицаКоэффициентовУпаковокНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если ВидыЦен = Неопределено Тогда
		Если ИзмененноеПоле = Неопределено Тогда
			ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
		Иначе
			СтрокаИзмененныйВидЦены = УстановкаЦенКлиентСервер.СтрокаВидаЦеныПоИмениПоля(Форма.ВыбранныеЦены, ИзмененноеПоле);
			Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
				ВидыЦен = ЗависимыеОтВидаЦеныВидыЦен(Форма, СтрокаИзмененныйВидЦены);
			Иначе
				ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КурсыВалют(Форма, КэшДанных);
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, ПозицияНоменклатуры, КэшДанных);
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				
				Если Не ТолькоНезаполненные Тогда
					СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = 0;
				КонецЕсли;
				
				ТекущаяЦена = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки];
				Если ТекущаяЦена = 0 Или Не ТолькоНезаполненные Тогда
					
					ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
						Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
							Формула = ЦеновыеГруппыАлгоритмов[0].Формула;
						Иначе
							Формула = "[" + ЦеновыеГруппыАлгоритмов[0].БазовыйВидЦены + "]*" + Формат(((ЦеновыеГруппыАлгоритмов[0].Наценка/100)+1),"ЧРД=.; ЧГ=0");
						КонецЕсли;
					Иначе
						Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
							Формула = ВидЦены.Формула;
						Иначе
							Формула = "[" + ВидЦены.БазовыйВидЦены + "]*" + Формат(((ВидЦены.Наценка/100)+1),"ЧРД=.; ЧГ=0");
						КонецЕсли;
					КонецЕсли;
					
					ЦеновыеГруппыПорогов = ВидЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
						ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
					Иначе
						ПорогСрабатывания = ВидЦены.ПорогСрабатывания;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Формула) Тогда
						
						Для Каждого БазоваяЦена Из ВидЦены.ВлияющиеЦены Цикл
							
							СтрокаБазовойЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, БазоваяЦена.Значение);
							
							СтрокаПересчетаВалюты   = УстановкаЦенКлиентСервер.СтрокаПересчетаВалюты(СтрокаБазовойЦены.Валюта, ВидЦены.Валюта, КэшДанных.КурсыВалют);
							Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
								СтрокаПересчетаУпаковок = УстановкаЦенКлиентСервер.СтрокаПересчетаУпаковок(СтрокаТаблицыЦен, СтрокаБазовойЦены, ВидЦены, ТаблицаКоэффициентовУпаковокНоменклатуры);
							Иначе
								СтрокаПересчетаУпаковок = "";
							КонецЕсли;
							СтрокаЗамены = " СтрокаТаблицыЦен." + СтрокаБазовойЦены.ИмяКолонки + " " + СтрокаПересчетаУпаковок + СтрокаПересчетаВалюты;
							Формула = СтрЗаменить(Формула, "[" + СтрокаБазовойЦены.Идентификатор + "]", СтрокаЗамены);
							
						КонецЦикла;
						
						Попытка
							
							УстановитьБезопасныйРежим(Истина);
							МассивРазделителей = РаботаВМоделиСервиса.РазделителиКонфигурации();
							Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
								УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
							КонецЦикла;
							
							ЗначениеЦены = УстановкаЦенКлиентСервер.ОкруглитьЦену(Вычислить(Формула), ВидЦены);
							УстановитьБезопасныйРежим(Ложь);
							
							Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
								ПроцентИзменения = Окр(100*(ЗначениеЦены - СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки])/СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки],5,2);
							Иначе
								ПроцентИзменения = 0;
							КонецЕсли;
							
							Если    ПорогСрабатывания = 0
								ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
								ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
								
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = ЗначениеЦены;
								Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = ПроцентИзменения;
								Иначе
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
								КонецЕсли;
								
							Иначе
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
								СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
							КонецЕсли;
							
							СтрокаТаблицыЦен["СуммаИзменения" + ВидЦены.ИмяКолонки] = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] - СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
							
							СтрокаТаблицыЦен["ИзмененаВручную"       + ВидЦены.ИмяКолонки] = Ложь;
							СтрокаТаблицыЦен["ИзмененаАвтоматически" + ВидЦены.ИмяКолонки] = Истина;
							
						Исключение
							
							Если ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							Иначе
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							КонецЕсли;
							
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦены%"       , ВидЦены.Ссылка);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%"  , СтрокаТаблицыЦен.Номенклатура);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристика%", СтрокаТаблицыЦен.Характеристика);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							
							Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
									ТекстСообщения,
									Форма.Объект.Ссылка,
									"ДеревоЦен");
							Иначе
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
									ТекстСообщения,
									,
									"ДеревоЦен");
							КонецЕсли;
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет цены, рассчитываемые по данным информационной базы
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой необходимо заполнить цены
//  ВидЦены - Массив - виды цен, для которых необходимо вычислить цены
//  ТолькоНезаполненные - Булево - указывает на необходимость вычисления только незаполненных цен
//
Процедура ВычислитьЦеныПоДаннымИБ(Форма,
	                              ТаблицаНоменклатуры,
	                              МассивСтрокВидовЦен = Неопределено,
	                              ТолькоНезаполненные = Ложь,
	                              КэшДанных) Экспорт
	
	Форма.Модифицированность = Истина;
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
			Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ СтрокаВидЦены.Выбрана И СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
				ИЛИ СтрокаВидЦены.Выбрана И СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
				ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			
			НайденнаяСтрока = Неопределено;
			Для Каждого ТекСтрока Из Форма.ВыбранныеЦены Цикл
				НайденнаяСтрока = ТекСтрока;
				Если ТекСтрока.Ссылка = СтрокаВидЦены.Ссылка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
					ИЛИ НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
					ИЛИ НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
					ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ТолькоНезаполненные Тогда
		ОчиститьЦены(Форма, ТаблицаНоменклатуры, ВидыЦенПоДаннымИБ, КэшДанных);
	КонецЕсли;
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаНастройкиКомпоновкиДанных);
	
	Для Каждого ВидЦеныПоДаннымИБ Из ВидыЦенПоДаннымИБ Цикл
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦеныПоДаннымИБ.Ссылка);
		ВычислитьЗначенияЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры, ВидЦеныПоДаннымИБ, ТолькоНезаполненные, ?(НайденнаяСтрока <> Неопределено,НайденнаяСтрока.НастройкиКомпоновкиДанных,Неопределено), КэшДанных);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет товары без измененных цен из дерева цен
//
// Параметры:
//  Форма - УправляемаяФорма
//
Процедура УдалитьТоварыБезИзмененныхЦен(Форма, ПоИзменениямЗаДень = Ложь) Экспорт
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	
	УдаляемыеЭлементыНоменклатура = Новый Массив;
	УдаляемыеЭлементыХарактеристики = Новый Массив;
	
	ВыборкаНоменклатуры = Форма.ДеревоЦен.ПолучитьЭлементы();
	Для Каждого ЭлементНоменклатура Из ВыборкаНоменклатуры Цикл
		
		УдаляемыеЭлементыХарактеристики.Очистить();
		
		ВыборкаХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ВыборкаХарактеристика Цикл
			
			ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ЭлементХарактеристика, ВидыЦен, ПоИзменениямЗаДень);
			Если НЕ ЦеныИзменены Тогда
				УдаляемыеЭлементыХарактеристики.Добавить(ЭлементХарактеристика);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементХарактеристика Из УдаляемыеЭлементыХарактеристики Цикл
			ВыборкаХарактеристика.Удалить(ЭлементХарактеристика);
		КонецЦикла;
		
		ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ЭлементНоменклатура, ВидыЦен, ПоИзменениямЗаДень);
		Если НЕ ЦеныИзменены И ВыборкаХарактеристика.Количество() = 0 Тогда
			УдаляемыеЭлементыНоменклатура.Добавить(ЭлементНоменклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементНоменклатура Из УдаляемыеЭлементыНоменклатура Цикл
		ВыборкаНоменклатуры.Удалить(ЭлементНоменклатура);
	КонецЦикла;
	
КонецПроцедуры

// Изменяет цены на процент
//
// Параметры:
// ПараметрыРасчета - Структура
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция ИзменитьЦеныНаПроцент(Форма, ПараметрыРасчета, КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
		ВидыЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаМассива.ВидЦены));
	КонецЦикла;
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
		
		Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаМассива.ВидЦены, КэшДанных);
			
			ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
			Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
				
				Если ЭлементНоменклатура["СтараяЦена"+ИмяКолонки] <> 0 Тогда
					
					Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = СтрокаМассива.ПроцентИзменения;
						ЭлементНоменклатура["СуммаИзменения"   + ИмяКолонки] = ЭлементНоменклатура[ИмяКолонки] - ЭлементНоменклатура["СтараяЦена"+ИмяКолонки];
						ЭлементНоменклатура[ИмяКолонки] = Окр(ЭлементНоменклатура["СтараяЦена"+ИмяКолонки]*((ЭлементНоменклатура["ПроцентИзменения"+ИмяКолонки]/100)+1), 2);
					Иначе
						ЭлементНоменклатура[ИмяКолонки] = Окр(ЭлементНоменклатура[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1), 2);
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = (ЭлементНоменклатура[ИмяКолонки] / ЭлементНоменклатура["СтараяЦена" + ИмяКолонки] - 1) * 100; 
						ЭлементНоменклатура["СуммаИзменения"   + ИмяКолонки] = ЭлементНоменклатура[ИмяКолонки] - ЭлементНоменклатура["СтараяЦена"+ИмяКолонки];
					КонецЕсли;
					
				Иначе
					
					ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = 0;
					ЭлементНоменклатура["СуммаИзменения" + ИмяКолонки] = 0;
					Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
						ЭлементНоменклатура[ИмяКолонки] = 0;
					Иначе
						ЭлементНоменклатура[ИмяКолонки] = Окр(ЭлементНоменклатура[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1), 2);
					КонецЕсли;
					
				КонецЕсли;
				
				ЭлементНоменклатура["ИзмененаВручную" + ИмяКолонки] = Истина;
				ЭлементНоменклатура["ИзмененаАвтоматически" + ИмяКолонки] = Ложь;
				
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					Если ЭлементХарактеристика["СтараяЦена"+ИмяКолонки] <> 0 Тогда
						
						Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
							ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = СтрокаМассива.ПроцентИзменения;
							ЭлементХарактеристика["СуммаИзменения"   + ИмяКолонки] = ЭлементХарактеристика[ИмяКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяКолонки];
							ЭлементХарактеристика[ИмяКолонки] = Окр(ЭлементХарактеристика["СтараяЦена"+ИмяКолонки]*((ЭлементХарактеристика["ПроцентИзменения"+ИмяКолонки]/100)+1), 2);
						Иначе
							ЭлементХарактеристика[ИмяКолонки] = Окр(ЭлементХарактеристика[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1), 2);
							ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = (ЭлементХарактеристика[ИмяКолонки] / ЭлементХарактеристика["СтараяЦена" + ИмяКолонки] - 1) * 100; 
							ЭлементХарактеристика["СуммаИзменения"   + ИмяКолонки] = ЭлементХарактеристика[ИмяКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяКолонки];
						КонецЕсли;
						
					Иначе
						
						ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = 0;
						ЭлементХарактеристика["СуммаИзменения" + ИмяКолонки] = 0;
						Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
							ЭлементХарактеристика[ИмяКолонки] = 0;
						Иначе
							ЭлементХарактеристика[ИмяКолонки] = Окр(ЭлементХарактеристика[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1), 2);
						КонецЕсли;
						
					КонецЕсли;
					
					ЭлементХарактеристика["ИзмененаВручную" + ИмяКолонки] = Истина;
					ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяКолонки] = Ложь;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
		Для Каждого ВыделеннаяСтрока Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			
			СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
				
				НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
				НоваяСтрока.Номенклатура   = СтрокаТаблицыЦен.Номенклатура;
				
				ЭлементыХарактеристики = СтрокаТаблицыЦен.ПолучитьЭлементы();
				
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					НоваяСтрока = ТаблицаНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаМассива.ВидЦены, КэшДанных);
			Для Каждого ВыделеннаяСтрока Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
				
				СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
				
				Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					
					Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
						СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = СтрокаМассива.ПроцентИзменения;
						СтрокаТаблицыЦен["СуммаИзменения"   + ИмяКолонки] = СтрокаТаблицыЦен[ИмяКолонки] - СтрокаТаблицыЦен["СтараяЦена"+ИмяКолонки];
						СтрокаТаблицыЦен[ИмяКолонки] = Окр(СтрокаТаблицыЦен["СтараяЦена"+ИмяКолонки]*((СтрокаТаблицыЦен["ПроцентИзменения"+ИмяКолонки]/100)+1), 2);
					Иначе
						СтрокаТаблицыЦен[ИмяКолонки] = Окр(СтрокаТаблицыЦен[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1), 2);
						СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = (СтрокаТаблицыЦен[ИмяКолонки] / СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] - 1) * 100; 
						СтрокаТаблицыЦен["СуммаИзменения"   + ИмяКолонки] = СтрокаТаблицыЦен[ИмяКолонки] - СтрокаТаблицыЦен["СтараяЦена"+ИмяКолонки];
					КонецЕсли;
					
				Иначе
					
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
					СтрокаТаблицыЦен["СуммаИзменения" + ИмяКолонки] = 0;
					Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
						СтрокаТаблицыЦен[ИмяКолонки] = 0;
					Иначе
						СтрокаТаблицыЦен[ИмяКолонки] = Окр(СтрокаТаблицыЦен[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1), 2);
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаТаблицыЦен["ИзмененаВручную" + ИмяКолонки] = Истина;
				СтрокаТаблицыЦен["ИзмененаАвтоматически" + ИмяКолонки] = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыРасчета.ПрименятьОкругление Тогда
		ПрименитьОкруглениеКРучнымЦенам(Форма, ТаблицаНоменклатуры, ВидыЦен, КэшДанных);
	КонецЕсли;
	
	// Список видов цен, которые, которые зависят от изменяемых
	ЗависимыеЦены = Новый Массив;
	Для Каждого ВидЦены Из ВидыЦен Цикл
		МассивСтрокЗависимыхЦен = ЗависимыеОтВидаЦеныВидыЦен(Форма, ВидЦены);
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхЦен Цикл
			Если ЗависимыеЦены.Найти(СтрокаВидЦены) = Неопределено
				И ВидыЦен.Найти(СтрокаВидЦены) = Неопределено Тогда
				ЗависимыеЦены.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Автоматически рассчитывать нужно только те цены, по которым процент изменения которых не изменяется
	// и которые зависят от изменяемых
	ВидыЦенДляРасчета = Новый Массив;
	ВыбранныеСтрокиВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	Для Каждого ВидЦены Из ВыбранныеСтрокиВидовЦен Цикл
		Если ЗависимыеЦены.Найти(ВидЦены) <> Неопределено Тогда
			ВидыЦенДляРасчета.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.РассчитыватьАвтоматически Тогда
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных, ВидыЦенДляРасчета, Ложь);
		Иначе
			РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных, ВидыЦенДляРасчета, Ложь);
		КонецЕсли;
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(Форма, ТаблицаНоменклатуры, ВидыЦенДляРасчета, КэшДанных);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Устанавливает для выделенных строк заданные цены 
//
// Параметры:
// ПараметрыРасчета - Структура
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция ИзменитьЦены(Форма, ПараметрыРасчета, КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
		ВидыЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаМассива.ВидЦены));
	КонецЦикла;
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
		
		Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаМассива.ВидЦены, КэшДанных);
			
			ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
			Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
				
				ЭлементНоменклатура[ИмяКолонки] = СтрокаМассива.Цена;
					
				Если ЭлементНоменклатура["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					ПроцентИзменения = Окр(100 * (СтрокаМассива.Цена - ЭлементНоменклатура["СтараяЦена" + ИмяКолонки]) / ЭлементНоменклатура["СтараяЦена" + ИмяКолонки], 10, 2);
				Иначе
					ПроцентИзменения = 0;
				КонецЕсли;
					
				ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
				ЭлементНоменклатура["СуммаИзменения"   + ИмяКолонки] = ЭлементНоменклатура[ИмяКолонки] - ЭлементНоменклатура["СтараяЦена"+ИмяКолонки];
				
				ЭлементНоменклатура["ИзмененаВручную" + ИмяКолонки] = Истина;
				ЭлементНоменклатура["ИзмененаАвтоматически" + ИмяКолонки] = Ложь;
				
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					ЭлементХарактеристика[ИмяКолонки] = СтрокаМассива.Цена;
					ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
					ЭлементХарактеристика["СуммаИзменения"   + ИмяКолонки] = ЭлементХарактеристика[ИмяКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяКолонки];
					
					ЭлементХарактеристика["ИзмененаВручную" + ИмяКолонки] = Истина;
					ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяКолонки] = Ложь;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
		Для Каждого ВыделеннаяСтрока Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			
			СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
				
				НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
				НоваяСтрока.Номенклатура   = СтрокаТаблицыЦен.Номенклатура;
				
				ЭлементыХарактеристики = СтрокаТаблицыЦен.ПолучитьЭлементы();
				
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					НоваяСтрока = ТаблицаНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаМассива.ВидЦены, КэшДанных);
			Для Каждого ВыделеннаяСтрока Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
				
				СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
				
				СтрокаТаблицыЦен[ИмяКолонки] = СтрокаМассива.Цена;
				
				Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					ПроцентИзменения = Окр(100 * (СтрокаМассива.Цена - СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки]) / СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки], 10, 2);
				Иначе
					ПроцентИзменения = 0;
				КонецЕсли;
				
				СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
				СтрокаТаблицыЦен["СуммаИзменения"   + ИмяКолонки] = СтрокаТаблицыЦен[ИмяКолонки] - СтрокаТаблицыЦен["СтараяЦена"+ИмяКолонки];
				
				СтрокаТаблицыЦен["ИзмененаВручную" + ИмяКолонки] = Истина;
				СтрокаТаблицыЦен["ИзмененаАвтоматически" + ИмяКолонки] = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// Список видов цен, которые зависят от изменяемых
	ЗависимыеЦены = Новый Массив;
	Для Каждого ВидЦены Из ВидыЦен Цикл
		МассивСтрокЗависимыхЦен = ЗависимыеОтВидаЦеныВидыЦен(Форма, ВидЦены);
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхЦен Цикл
			Если ЗависимыеЦены.Найти(СтрокаВидЦены) = Неопределено
				И ВидыЦен.Найти(СтрокаВидЦены) = Неопределено Тогда
				ЗависимыеЦены.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Автоматически рассчитывать нужно только те цены, по которым процент изменения не изменяется
	// и которые зависят от изменяемых
	ВидыЦенДляРасчета = Новый Массив;
	ВыбранныеСтрокиВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	Для Каждого ВидЦены Из ВыбранныеСтрокиВидовЦен Цикл
		Если ЗависимыеЦены.Найти(ВидЦены) <> Неопределено Тогда
			ВидыЦенДляРасчета.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.РассчитыватьАвтоматически Тогда
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных, ВидыЦенДляРасчета, Ложь);
		Иначе
			РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных, ВидыЦенДляРасчета, Ложь);
		КонецЕсли;
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(Форма, ТаблицаНоменклатуры, ВидыЦенДляРасчета, КэшДанных);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Осуществляет загрузку базовых цен в таблицу цен
//
Процедура ЗагрузитьБазовыеЦены(Форма, КэшДанных) Экспорт
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
	ЗагрузитьЗначенияБазовыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
	
КонецПроцедуры

// Осуществляет расчет вычисляемых цен
//
// Параметры:
// ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен
// ВидыЦен - Массив - Виды цен, которые необходимо рассчитать
// ТолькоНезаполненные - Указывает на необходимость расчета ранее заполненных цен
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция ПодготовитьДанныеДляРасчетаВычисляемыхЦен(Форма,
	                                              ТаблицаНоменклатуры,
	                                              КэшДанных,
	                                              ВидыЦен = Неопределено,
	                                              ТолькоНезаполненные = Ложь,
	                                              ИзмененноеПоле = Неопределено) Экспорт
	
	Если ВидыЦен = Неопределено Тогда
		Если ИзмененноеПоле = Неопределено Тогда
			ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
		Иначе
			СтрокаИзмененныйВидЦены = УстановкаЦенКлиентСервер.СтрокаВидаЦеныПоИмениПоля(Форма.ВыбранныеЦены, ИзмененноеПоле);
			Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
				ВидыЦен = ЗависимыеОтВидаЦеныВидыЦен(Форма, СтрокаИзмененныйВидЦены);
			Иначе
				ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрокВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из ВидыЦен Цикл
		Если СтрокаВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен")
			ИЛИ СтрокаВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен") Тогда
			МассивСтрокВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокВидыЦен.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		СоответствиеКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма);
	Иначе
		СоответствиеКоэффициентовУпаковокНоменклатуры = Неопределено;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		МассивСтрок.Добавить(Новый Структура("Номенклатура, Характеристика", ПозицияНоменклатуры.Номенклатура, ПозицияНоменклатуры.Характеристика));
	КонецЦикла;
	
	КурсыВалют(Форма, КэшДанных);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Новый Структура;
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("СтрокиТаблицыЦен", 								МассивСтрок);
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("ВидыЦен", 										МассивСтрокВидыЦен);
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("СоответствиеКоэффициентовУпаковокНоменклатуры", 	СоответствиеКоэффициентовУпаковокНоменклатуры);
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("КурсыВалют", 										КэшДанных.КурсыВалют);
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("ТолькоНезаполненные", 							ТолькоНезаполненные);
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Загружает значения базовых цен в таблицу
//
// Параметры:
// ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которую будут загружены значения цен
// ВидыЦен - Массив - виды цен, для которых необходимо загрузить значения цен
// Дата - Дата загрузки цен
// ПроцентИзмененияЦены - Число - Процент, на который необходимо изменить цену
// ПрименятьОкругление - Булево - Указывает на необходимость применения округления
//
Процедура ЗагрузитьЗначенияБазовыхЦен(Форма,
	                                  ТаблицаНоменклатуры,
	                                  КэшДанных,
	                                  ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МассивСтрокВидовЦен",  Неопределено);
	СтруктураПараметров.Вставить("ДатаДокумента",        Неопределено);
	СтруктураПараметров.Вставить("ПроцентИзмененияЦены", 0);
	СтруктураПараметров.Вставить("ПрименятьОкругление",  Ложь);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров , ДополнительныеПараметры);
	КонецЕсли;
	
	Если СтруктураПараметров.МассивСтрокВидовЦен = Неопределено Тогда
		
		СтруктураПараметров.МассивСтрокВидовЦен = Новый Массив();
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			Если ВидЦены.Влияет Тогда
				СтруктураПараметров.МассивСтрокВидовЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьЦены(Форма, ТаблицаНоменклатуры, СтруктураПараметров.МассивСтрокВидовЦен, КэшДанных);
	
	Если СтруктураПараметров.МассивСтрокВидовЦен.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура   КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			|	ЦеныНоменклатурыСрезПоследних.Упаковка                          КАК Упаковка,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
			|	ЦеныНоменклатурыСрезПоследних.ВидЦены                                                                    КАК ВидЦены,
			|	ЦеныНоменклатурыСрезПоследних.Цена + ЦеныНоменклатурыСрезПоследних.Цена * &ПроцентИзмененияЦены / 100.00 КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			&ДатаДокумента,
			|			(Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|					ИЗ
			|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
			|				И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры",  ТаблицаНоменклатуры);
		
		ВидыЦен = Новый Массив;
		Для Каждого СтрокаВидЦены Из СтруктураПараметров.МассивСтрокВидовЦен Цикл
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыЦен",              ВидыЦен);
		Запрос.УстановитьПараметр("ПроцентИзмененияЦены", СтруктураПараметров.ПроцентИзмененияЦены);
		Запрос.УстановитьПараметр("ДатаДокумента",        ?(СтруктураПараметров.ДатаДокумента = Неопределено, ДатаДляЗапросаЦенНоменклатуры(Форма), СтруктураПараметров.ДатаДокумента));
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			СоответствиеКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма);
		Иначе
			СоответствиеКоэффициентовУпаковокНоменклатуры = Неопределено;
		КонецЕсли;
		
		Параметры = Новый Структура();
		Параметры.Вставить("ПрименитьОкругление", СтруктураПараметров.ПрименятьОкругление);
		
		ЗагрузитьЦеныИзТаблицыЗначений(Форма, Выгрузка, СоответствиеКоэффициентовУпаковокНоменклатуры, КэшДанных,,,Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет старые цены номенклатуры в дереве цен
//
// Параметры:
//  Форма - УправляемаяФорма
//  КэшДанных - Структура
//
Процедура ОбновитьСтарыеЦеныНоменклатуры(Форма, КэшДанных = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	Если Форма.ВыбранныеЦеныИзменены Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Форма", Форма);
		Данные.Вставить("Документы", Новый Массив);
		Данные.Вставить("СохранятьБазовые", Ложь);
		Данные.Документы.Добавить(Форма.Объект);
		
		ПоместитьЦеныВТабличнуюЧасть(Данные);
		
		ПостроитьДеревоЦен(Форма);
		ЗагрузитьТабличнуюЧастьТовары(Форма, КэшДанных);
	КонецЕсли;
	
	ТаблицаЗначений = ТаблицаТовары(Форма, КэшДанных);
	
	ЗагрузитьСтарыеЦеныНоменклатуры(Форма, ТаблицаЗначений, КэшДанных);
	
КонецПроцедуры

// Получает таблицу товаров (Номенклатура, Характеристика, ВидЦены, Упаковка, Цена) из дерева цен
//
// Параметры:
//  Форма - УправляемаяФорма
//  КэшДанных - Структура
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ТаблицаТовары(Форма, КэшДанных = Неопределено, ТолькоИзмененные = Ложь, ПоИзменениямЗаДень = Ложь) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	Если КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствия(Форма, КэшДанных);
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = СоздатьТаблицуТовары(ЭтоРегистрацияЦенПоставщика(Форма));
	ТаблицаЗначений.Колонки.Добавить("ЦенаИзмененаВручную");
	
	// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		ТаблицаЗначений.Колонки.Добавить("СТ_Количество", Новый ОписаниеТипов("Число"));
	КонецЕсли; 
	// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
	
	ВыбранныеЦены = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	
	Для Каждого СтрокаТЗ Из КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров Цикл
		
		Если ТолькоИзмененные Тогда
			Если НЕ ЕстьИзмененияЦенВСтроке(СтрокаТЗ.СтрокаДереваЦен, ВыбранныеЦены, ПоИзменениямЗаДень) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
			
			Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
				
				ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
				ИмяКолонкиУпаковка = "Упаковка" + СтрокаВидЦены.ИмяКолонки;
				
				СтрокаДереваЦен = СтрокаТЗ.СтрокаДереваЦен;
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДереваЦен);
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = СтрокаДереваЦен[ИмяКолонки];
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = СтрокаДереваЦен[ИмяКолонкиУпаковка];
				КонецЕсли;
				НоваяСтрока.ЦенаИзмененаВручную = СтрокаДереваЦен["ИзмененаВручную" + ИмяКолонки];
				// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
				Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
					НоваяСтрока.СТ_Количество = СтрокаДереваЦен["СТ_Количество" + СтрокаВидЦены.ИмяКолонки];
				КонецЕсли; 
				// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Осуществляет загрузку старых цен для строк таблицы
//
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПредприятия(Форма, ТаблицаНоменклатуры, КэшДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	
	|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 Тогда 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	КОНЕЦ)/ 
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
	|	
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика, ВидЦены) В (Выбрать Т.Номенклатура, Т.Характеристика, Т.ВидЦены Из ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатуры
	|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
	|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
	|	
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары",        ТаблицаНоменклатуры);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Форма.Дата) - 1);
	Иначе
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
				
				ЭлементХарактеристика = НайтиСтрокуДереваЦен(Форма, ВыборкаХарактеристики, КэшДанных);
		
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
					
					ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаХарактеристики, КэшДанных);
				
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
					
					ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПоставщика(Форма, ТаблицаНоменклатуры, КэшДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                   КАК Цена,
	// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
	|	ВременнаяТаблицаТовары.СТ_Количество			КАК СТ_Количество,
	// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
	|	ВременнаяТаблицаТовары.Упаковка               КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО НоменклатураПоставщика, Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                   КАК Цена,
	// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
	|	ВременнаяТаблицаТовары.СТ_Количество					КАК СТ_Количество,
	|	ЕСТЬNULL(ЦеныНоменклатуры.СТ_Количество,0)				КАК СтароеСТ_Количество,
	// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЦеныНоменклатуры.Цена
	|		ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЦеныНоменклатуры.Цена <> 0
	|				ТОГДА 100 * (ВременнаяТаблицаТовары.Цена - ВЫБОР
	|						КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЦеныНоменклатуры.Цена
	|						ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ) / ВЫБОР
	|						КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЦеныНоменклатуры.Цена
	|						ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК Процент,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				&ДатаДокумента,
	|				(Номенклатура, Характеристика, ВидЦеныПоставщика) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (ЦеныНоменклатуры.ВидЦеныПоставщика = ВременнаяТаблицаТовары.ВидЦены)
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА МАКСИМУМ(ХарактеристикиИспользуются)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА NULL
	|		ИНАЧЕ МАКСИМУМ(НоменклатураПоставщика)
	|	КОНЕЦ КАК НоменклатураПоставщика
	|ПО
	|	Номенклатура");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары", ТаблицаНоменклатуры);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
		Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Форма.Дата) - 1);
	Иначе
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаВидыЦен = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидыЦен.Следующий() Цикл
			
			ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаВидыЦен, КэшДанных);
			
			Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
			
			Если Не ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма) Тогда
				ЭлементНоменклатура[ИмяКолонки] = ВыборкаВидыЦен.Цена;
				// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
				ЭлементНоменклатура["СТ_Количество"+ИмяКолонки] = ВыборкаВидыЦен.СТ_Количество;
				// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
			КонецЕсли;
			
			ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
			ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
			// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
			ЭлементНоменклатура["СтароеСТ_Количество"+ИмяКолонки] = ВыборкаВидыЦен.СтароеСТ_Количество;
			// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
Процедура ЗагрузитьСтарыеЦеныНоменклатуры(Форма, ТаблицаНоменклатуры, КэшДанных) Экспорт
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		ЗагрузитьСтарыеЦеныНоменклатурыПоставщика(Форма, ТаблицаНоменклатуры, КэшДанных);
	Иначе
		ЗагрузитьСтарыеЦеныНоменклатурыПредприятия(Форма, ТаблицаНоменклатуры, КэшДанных);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПрайсЛист(Форма, ТаблицаНоменклатуры, КэшДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|
	|	ВЫБОР КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЕСТЬNULL(ДействующиеЦены.Цена,0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДействующиеЦены.Цена,0)/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	КОНЕЦ КАК Цена,
	|	
	|	ВЫБОР КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЕСТЬNULL(СтарыеЦены.Цена,0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(СтарыеЦены.Цена,0)/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	
	|	ВЫРАЗИТЬ(ВЫБОР КОГДА СтарыеЦены.Цена <> 0 Тогда 100*(
	|
	|	ВЫБОР КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ДействующиеЦены.Цена
	|	ИНАЧЕ
	|		ДействующиеЦены.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	КОНЕЦ
	|
	| - ВЫБОР КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		СтарыеЦены.Цена
	|	ИНАЧЕ
	|		СтарыеЦены.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	КОНЕЦ)/ 
	|	
	|	ВЫБОР КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		СтарыеЦены.Цена
	|	ИНАЧЕ
	|		СтарыеЦены.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
	|	
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаВПрошлом, (Номенклатура, Характеристика, ВидЦены) В (Выбрать Т.Номенклатура, Т.Характеристика, Т.ВидЦены Из ВременнаяТаблицаТовары КАК Т)) КАК СтарыеЦены
	|			ПО СтарыеЦены.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
	|			 И СтарыеЦены.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|			 И СтарыеЦены.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, (Номенклатура, Характеристика, ВидЦены) В (Выбрать Т.Номенклатура, Т.Характеристика, Т.ВидЦены Из ВременнаяТаблицаТовары КАК Т)) КАК ДействующиеЦены
	|			ПО ДействующиеЦены.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
	|			 И ДействующиеЦены.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|			 И ДействующиеЦены.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
	|	
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ДействующиеЦены.Упаковка",
		"ДействующиеЦены.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СтарыеЦены.Упаковка",
		"СтарыеЦены.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары",       ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата",  КонецДня(Форма.Дата));
	Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
		Запрос.УстановитьПараметр("ДатаВПрошлом", КонецДня(Форма.ДатаДействующихЦен));
	Иначе
		Запрос.УстановитьПараметр("ДатаВПрошлом", НачалоДня(Форма.Дата) - 1);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
				
				ЭлементХарактеристика = НайтиСтрокуДереваЦен(Форма, ВыборкаХарактеристики, КэшДанных);
		
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
					ЭлементХарактеристика[ИмяКолонки]                      = ВыборкаВидыЦен.Цена;
					ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					ЭлементХарактеристика["СуммаИзменения"   + ИмяКолонки] = ВыборкаВидыЦен.Цена - ВыборкаВидыЦен.ДействующаяЦена;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаХарактеристики, КэшДанных);
				
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
					
					ЭлементНоменклатура[ИмяКолонки]                      = ВыборкаВидыЦен.Цена;
					ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					ЭлементНоменклатура["СуммаИзменения"   + ИмяКолонки] = ВыборкаВидыЦен.Цена - ВыборкаВидыЦен.ДействующаяЦена;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПоставщикаПрайсЛист(Форма, ТаблицаНоменклатуры, КэшДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Упаковка               КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ВЫБОР
	|		КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ДействующиеЦены.Цена
	|		ИНАЧЕ ДействующиеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК Цена,
	// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
	|	ЕСТЬNULL(ДействующиеЦены.СТ_Количество,0)КАК СтароеСТ_Количество,
	// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
	|	ВЫБОР
	|		КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА СтарыеЦены.Цена
	|		ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СтарыеЦены.Цена <> 0
	|				ТОГДА 100 * (ВЫБОР
	|						КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ДействующиеЦены.Цена
	|						ИНАЧЕ ДействующиеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ - ВЫБОР
	|						КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА СтарыеЦены.Цена
	|						ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ) / ВЫБОР
	|						КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА СтарыеЦены.Цена
	|						ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК Процент,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				&ДатаВПрошлом,
	|				(Номенклатура, Характеристика, ВидЦеныПоставщика) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)) КАК СтарыеЦены
	|		ПО (СтарыеЦены.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (СтарыеЦены.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (СтарыеЦены.ВидЦеныПоставщика = ВременнаяТаблицаТовары.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				&ТекущаяДата,
	|				(Номенклатура, Характеристика, ВидЦеныПоставщика) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)) КАК ДействующиеЦены
	|		ПО (ДействующиеЦены.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ДействующиеЦены.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (ДействующиеЦены.ВидЦеныПоставщика = ВременнаяТаблицаТовары.ВидЦены)
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА МАКСИМУМ(ХарактеристикиИспользуются)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА NULL
	|		ИНАЧЕ МАКСИМУМ(НоменклатураПоставщика)
	|	КОНЕЦ КАК НоменклатураПоставщика
	|ПО
	|	Номенклатура");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ДействующиеЦены.Упаковка",
		"ДействующиеЦены.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СтарыеЦены.Упаковка",
		"СтарыеЦены.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары",        ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаДляЗапросаЦенНоменклатуры(Форма));
	Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
		Запрос.УстановитьПараметр("ДатаВПрошлом", КонецДня(Форма.ДатаДействующихЦен));
	Иначе
		Запрос.УстановитьПараметр("ДатаВПрошлом", НачалоДня(Форма.Дата) - 1);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаВидыЦен = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидыЦен.Следующий() Цикл
			
			ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаВидыЦен, КэшДанных);
			
			Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
			
			ЭлементНоменклатура[ИмяКолонки]                      = ВыборкаВидыЦен.Цена;
			ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
			ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
			// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
			ЭлементНоменклатура["СтароеСТ_Количество" + ИмяКолонки] = ВыборкаВидыЦен.СтароеСТ_Количество;
			// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу цен на форме
//
// Параметры:
//  Форма - Форма, в которой необходимо сформировать таблицу цен
//  ПересчитатьЦены - Булево - Указывает на необходимость перерасчета цен
//
// Возвращаемое значение:
//  ДанныеДляРасчетаВычисляемыхЦенНаКлиенте - Структура
//
Функция ПереформироватьТаблицуЦен(Форма, ПересчитатьЦены = Ложь) Экспорт
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	Данные = Новый Структура;
	Данные.Вставить("Форма", Форма);
	Данные.Вставить("Документы", Новый Массив);
	Данные.Вставить("СохранятьБазовые", Истина);
	Данные.Документы.Добавить(Форма.Объект);
	
	ПоместитьЦеныВТабличнуюЧасть(Данные);
	ПостроитьДеревоЦен(Форма);
	ЗагрузитьТабличнуюЧастьТовары(Форма, КэшДанных);
	
	Если Не ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		Если ПересчитатьЦены Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьВсеЦены(Форма, КэшДанных);
		Иначе
			ЗагрузитьБазовыеЦены(Форма, КэшДанных);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Копирует цены по всем видам из таблицы формы ДеревоЦен в строку табличой части Товары объекта
//
// Параметры:
//  Параметры - Параметры помещения строки в табличную часть
//  СтрокаЦен - Строка дерева цен, которую необходимо поместить в табличную часть
//
Процедура ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, СтрокаЦен) Экспорт
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Параметры.Форма);
	
	Для Каждого ВидЦены Из Параметры.Форма.ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или Параметры.СохранятьБазовые И ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			ЕстьКолонкаЦены = СтрокаЦен.Свойство(ИмяКолонки);
			Если ЕстьКолонкаЦены Тогда
				Цена = СтрокаЦен[ИмяКолонки];
			КонецЕсли;
			
			Если ЭтоРегистрацияЦенПоставщика Тогда
				Если Цена = 0 ИЛИ Не ЕстьКолонкаЦены Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока                = Параметры.ТабличныеЧасти[0].Добавить();
			НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
			Если ЭтоРегистрацияЦенПоставщика Тогда
				НоваяСтрока.НоменклатураПоставщика = СтрокаЦен.НоменклатураПоставщика;
				НоваяСтрока.ВидЦеныПоставщика = ВидЦены.Ссылка;
			Иначе
				НоваяСтрока.ВидЦены = ВидЦены.Ссылка;
			КонецЕсли;
			
			Если ЕстьКолонкаЦены Тогда
				НоваяСтрока.Цена = Цена;
				Если Не ЭтоРегистрацияЦенПоставщика Тогда
					НоваяСтрока.ЦенаИзмененаВручную = СтрокаЦен["ИзмененаВручную" + ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			
			// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
			Если ЭтоРегистрацияЦенПоставщика Тогда
				ИмяКолонкиКоличество = "СТ_Количество" + ИмяКолонки;
				Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
					НоваяСтрока.СТ_Количество = СтрокаЦен[ИмяКолонкиКоличество];
				КонецЕсли;
			КонецЕсли;
			// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
			
			Если Параметры.Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ИмяКолонки = "Упаковка" + ИмяКолонки;
				Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
					НоваяСтрока.Упаковка = СтрокаЦен[ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует виды цен из таблицы формы ВыбранныеЦены в табличную часть ВидыЦен объекта
//
Процедура ПоместитьВидыЦенВТабличнуюЧасть(Форма,
	                                      ТабличнаяЧасть,
	                                      СохранятьНастройкиКомпоновкиДанных = Ложь) Экспорт
	
	ТабличнаяЧасть.Очистить();
	
	Если СохранятьНастройкиКомпоновкиДанных Тогда
		ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаНастройкиКомпоновкиДанных);
	КонецЕсли;
	
	МассивВыбранныхВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	Для Каждого СтрокаВидЦены Из МассивВыбранныхВидовЦен Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ВидЦены = СтрокаВидЦены.Ссылка;
		
		Если СохранятьНастройкиКомпоновкиДанных Тогда
			НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(СтрокаВидЦены.Ссылка, "ВидЦены");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(НайденнаяСтрока.НастройкиКомпоновкиДанных);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загрузить из excel
//
// Параметры:
//  Форма - УправляемаяФорма - Форма
//  МассивСтруктурВидыЦен	 - Массив - Виды цен
//  МассивСтруктурТовары	 - Массив - Товары
// 
// Возвращаемое значение:
//  Структура - Результат загрузки
//
Функция ЗагрузитьИзExcel(Форма, МассивСтруктурВидыЦен, МассивСтруктурТовары) Экспорт
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("Выполнено",      Истина);
	РезультатЗагрузки.Вставить("ОписаниеОшибки", "");
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// Определение видов цен
	ВидыЦен = Новый ТаблицаЗначений;
	ВидыЦен.Колонки.Добавить("ВидЦены");
	ВидыЦен.Колонки.Добавить("ИдентификаторВидЦены");
	ВидыЦен.Колонки.Добавить("ИмяКолонки");
	ВидыЦен.Колонки.Добавить("НомерКолонкиЦена");
	ВидыЦен.Колонки.Добавить("НомерКолонкиУпаковка");
	
	Для Каждого СтруктураВидЦены Из МассивСтруктурВидыЦен Цикл
		
		Попытка
			
			ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураВидЦены.ИдентификаторВидЦены));
			
			Если Не ЗначениеЗаполнено(ВидЦены) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦены);
			Если СтрокаВидЦены.Выбрана Тогда
				
				НоваяСтрока = ВидыЦен.Добавить();
				НоваяСтрока.ВидЦены              = ВидЦены;
				НоваяСтрока.ИдентификаторВидЦены = СтруктураВидЦены.ИдентификаторВидЦены;
				НоваяСтрока.НомерКолонкиЦена     = СтруктураВидЦены.НомерКолонкиЦена;
				НоваяСтрока.НомерКолонкиУпаковка = СтруктураВидЦены.НомерКолонкиУпаковка;
				НоваяСтрока.ИмяКолонки           = СтрокаВидЦены.ИмяКолонки;
				
			КонецЕсли;
			
		Исключение
			РезультатЗагрузки.Выполнено = Ложь;
			РезультатЗагрузки.ОписаниеОшибки =
				НСтр("ru = 'Файл не может быть загружен.
				            |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".'");
			Возврат РезультатЗагрузки;
		КонецПопытки;
		
	КонецЦикла;
	ВидыЦен.Индексы.Добавить("ИдентификаторВидЦены");
	
	Если ВидыЦен.Количество() = 0 Тогда
		РезультатЗагрузки.Выполнено = Ложь;
		РезультатЗагрузки.ОписаниеОшибки =
			НСтр("ru = 'Файл не может быть загружен.
			            |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".'");
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Для Каждого СтрокаТЧ Из Форма.ВыбранныеЦены Цикл
			СтрокаТЧ.Выбрана = Ложь;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ВидыЦен Цикл
			СтрокаВидаЦен = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаТЧ.ВидЦены);
			СтрокаВидаЦен.Выбрана = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Загрузка цен в ДеревоЦен
	Для Каждого СтруктураТовар Из МассивСтруктурТовары Цикл
		
		СтрокаВидЦены = ВидыЦен.Найти(СтруктураТовар.ИдентификаторВидЦены);
		Если СтрокаВидЦены = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Номенклатура   = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторНоменклатура));
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторХарактеристика));
			Упаковка       = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторУпаковка));
		Исключение
			РезультатЗагрузки.Выполнено = Ложь;
			РезультатЗагрузки.ОписаниеОшибки =
				НСтр("ru = 'Файл не может быть загружен.
				            |Возможно, что структура колонок файла была повреждена.'");
			Возврат РезультатЗагрузки;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДереваЦен = НайтиСтрокуДереваЦен(
			Форма,
			Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика),
			КэшДанных);
		Если СтрокаДереваЦен = Неопределено Тогда
			
			СтрокаДереваЦен = НайтиСтрокуДереваЦен(
				Форма,
				Новый Структура("Номенклатура, Характеристика", Номенклатура, ПустаяХарактеристика),
				КэшДанных);
			Если СтрокаДереваЦен = Неопределено Тогда
				
				СтрокаДереваЦен = Форма.ДеревоЦен.ПолучитьЭлементы().Добавить();
				СтрокаДереваЦен.Номенклатура = Номенклатура;
				
				НоваяСтрока = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.СтрокаДереваЦен = СтрокаДереваЦен;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Характеристика) Тогда
				
				СтрокаДереваЦен = СтрокаДереваЦен.ПолучитьЭлементы().Добавить();
				СтрокаДереваЦен.Номенклатура   = Номенклатура;
				СтрокаДереваЦен.Характеристика = Характеристика;
				
				НоваяСтрока = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
				НоваяСтрока.Номенклатура    = Номенклатура;
				НоваяСтрока.Характеристика  = Характеристика;
				НоваяСтрока.СтрокаДереваЦен = СтрокаДереваЦен;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДереваЦен[СтрокаВидЦены.ИмяКолонки] = СтруктураТовар.Цена;
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			СтрокаДереваЦен["Упаковка"+СтрокаВидЦены.ИмяКолонки] = Упаковка;
		КонецЕсли;
		СтрокаДереваЦен["ИзмененаВручную"+СтрокаВидЦены.ИмяКолонки] = Истина;
		
	КонецЦикла;
	
	ОбновитьСтарыеЦеныНоменклатуры(Форма, КэшДанных);
	
	// Список видов цен, которые, которые зависят от изменяемых
	ЗависимыеЦены = Новый Массив;
	Для Каждого СтрокаТЧ Из ВидыЦен Цикл
		МассивСтрокЗависимыхЦен = ЗависимыеОтВидаЦеныВидыЦен(
			Форма,
			УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаТЧ.ВидЦены));
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхЦен Цикл
			Если ЗависимыеЦены.Найти(СтрокаВидЦены) = Неопределено
				И ВидыЦен.Найти(СтрокаВидЦены.Ссылка) = Неопределено Тогда
				ЗависимыеЦены.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Автоматически рассчитывать нужно только те цены, по которым процент изменения которых
	// не изменяется и которые зависят от изменяемых
	ВидыЦенДляРасчета = Новый Массив;
	ВыбранныеСтрокиВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	Для Каждого ВидЦены Из ВыбранныеСтрокиВидовЦен Цикл
		Если ЗависимыеЦены.Найти(ВидЦены) <> Неопределено Тогда
			ВидыЦенДляРасчета.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.РассчитыватьАвтоматически Тогда
		РассчитатьВычисляемыеЦены(
			Форма,
			КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,
			КэшДанных,
			ВидыЦенДляРасчета,
			Ложь);
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(
			Форма,
			КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,
			ВидыЦенДляРасчета,
			КэшДанных);
	КонецЕсли;
	
	ПереформироватьТаблицуЦен(Форма, Ложь);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

// Установить признак ручного изменения вычисляемых цен
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма
//  ТаблицаНоменклатуры	 - ТаблицаЗначений - Номенлатура, по которой изменены цены
//  ИзмененноеПоле		 - Строка - Имя измененного поля
//  КэшДанных					 - Соответствие - Кэш данных
//
Процедура УстановитьПризнакРучногоИзмененияВычисляемыхЦен(Форма,
	                                                      ТаблицаНоменклатуры,
	                                                      ИзмененноеПоле = Неопределено,
	                                                      КэшДанных = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	СтрокаИзмененныйВидЦены = УстановкаЦенКлиентСервер.СтрокаВидаЦеныПоИмениПоля(Форма.ВыбранныеЦены, ИзмененноеПоле);
	Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
	
		МассивСтрокЗависимыхВидовЦен = ЗависимыеОтВидаЦеныВидыЦен(Форма, СтрокаИзмененныйВидЦены);
		УстановитьПризнакРучногоИзмененияДляВидовЦен(Форма, ТаблицаНоменклатуры, МассивСтрокЗависимыхВидовЦен, КэшДанных);
	
	КонецЕсли;
	
КонецПроцедуры

// Установить признак ручного изменения для видов цен
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма
//  ТаблицаНоменклатуры	 - ТаблицаЗначений - Номенлатура, по которой изменены цены
//  МассивСтрокЗависимыхВидовЦен - Массив - Зависимые виды цен
//  КэшДанных					 - Соответствие - Кэш данных
//
Процедура УстановитьПризнакРучногоИзмененияДляВидовЦен(Форма,
	                                                   ТаблицаНоменклатуры,
	                                                   МассивСтрокЗависимыхВидовЦен,
	                                                   КэшДанных = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, ПозицияНоменклатуры, КэшДанных);
		
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхВидовЦен Цикл
			
			Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				СтрокаТаблицыЦен["ИзмененаВручную" + СтрокаВидЦены.ИмяКолонки] = Истина;
				СтрокаТаблицыЦен["ИзмененаАвтоматически" + СтрокаВидЦены.ИмяКолонки] = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает последние курсы валют во временное хранилище.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  КэшДанных - Структура - Кэш данных.
//
Процедура КурсыВалют(Форма, КэшДанных) Экспорт
	
	Если КэшДанных.КурсыВалют = Неопределено Тогда
		СоответствиеКурсовВалют(Форма, КэшДанных);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу с колонками Упаковка и Коэффициент.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которой расположено дерево цен.
//
// Возвращаемое значение:
//  Соответствие - соответствие номенклатуры и коэффициентов упаковок.
//
Функция КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма) Экспорт
	
	МассивВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	
	ТаблицаУпаковокНоменклатуры = СоздатьТаблицуУпаковокНоменклатуры();
	
	ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(ЭлементНоменклатура, МассивВидовЦен, ТаблицаУпаковокНоменклатуры);
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(ЭлементХарактеристика, МассивВидовЦен, ТаблицаУпаковокНоменклатуры);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры);
	
КонецФункции

// Возвращает таблицу с колонками Номенклатура, Упаковка и Коэффициент.
//
// Параметры:
//  ТаблицаУпаковокНоменклатуры - ТаблицаЗначений - содержит номенклатуры и упаковки, для которых необходимо получить коэффициенты.
//
// Возвращаемое значение:
//  Соответствие - соответствие номенклатуры и коэффициентов упаковок
//
Функция КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаУпаковок
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковок.Упаковка КАК Упаковка,
	|	ТаблицаУпаковок.Номенклатура КАК Номенклатура,
	|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент
	|ИЗ
	|	ТаблицаУпаковок КАК ТаблицаУпаковок";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаКоэффициентУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ТаблицаУпаковок.Упаковка", "ТаблицаУпаковок.Номенклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаУпаковокНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеКоэффициентовУпаковокНоменклатуры = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеКоэффициентовУпаковокНоменклатуры.Вставить(Строка(Выборка.Номенклатура.УникальныйИдентификатор()) + Строка(Выборка.Упаковка.УникальныйИдентификатор()), Выборка.Коэффициент);
		
	КонецЦикла;
		
	Возврат СоответствиеКоэффициентовУпаковокНоменклатуры;	
	
КонецФункции

// Осуществляет загрузку цен для всех строк табличной части товары
//
Процедура ЗагрузитьТабличнуюЧастьТовары(Форма, КэшДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
		|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК ВременнаяТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
		|;
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
		|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную,
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ КАК ДействующаяЦена,
		|	
		|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 Тогда 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ)/ 
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
		|	
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, (Номенклатура, Характеристика) В (Выбрать Номенклатура, Характеристика Из ВременнаяТаблицаТовары)) КАК ЦеныНоменклатуры
		|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
		|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
		|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Индекс
		|");
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.НоменклатураПоставщика         КАК НоменклатураПоставщика,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦеныПоставщика              КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена
		// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
		|	,ВременнаяТаблицаТовары.СТ_Количество                  КАК СТ_Количество
		// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК ВременнаяТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
		|;
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.НоменклатураПоставщика         КАК НоменклатураПоставщика,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
		// /* Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
		|	ВременнаяТаблицаТовары.СТ_Количество					КАК СТ_Количество,
		|	ЕСТЬNULL(ЦеныНоменклатуры.СТ_Количество,0)				КАК СтароеСТ_Количество,
		// */ Storverk Тюняков 7227 Загрузка прайс-листов поставщиков
		|	Ложь                                                  КАК ЦенаИзмененаВручную,
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ КАК ДействующаяЦена,
		|	
		|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 Тогда 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ)/ 
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
		|	
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&Дата) КАК ЦеныНоменклатуры
		|			ПО ЦеныНоменклатуры.Номенклатура           = ВременнаяТаблицаТовары.Номенклатура
		|			 И ЦеныНоменклатуры.Характеристика         = ВременнаяТаблицаТовары.Характеристика
		|			 И ЦеныНоменклатуры.ВидЦеныПоставщика      = ВременнаяТаблицаТовары.ВидЦены
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Индекс
		|");
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТаблицаТоваров = Форма.Объект.Товары.Выгрузить();
	
	ДобавитьТоварыПоОтбору(Форма,,ТаблицаТоваров);

	Если ТаблицаТоваров.Колонки.Найти("Индекс") = Неопределено Тогда
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТоваров, "Индекс");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Запрос.УстановитьПараметр("Дата", НачалоДня(Форма.Дата) - 1);
	Иначе
		Запрос.УстановитьПараметр("Дата", ДатаДляЗапросаЦенНоменклатуры(Форма));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗагрузитьТоварыВДеревоЦен(Форма, ВыборкаНоменклатура, КэшДанных);
	
КонецПроцедуры

// Копирует цены из таблицы формы ДеревоЦен в табличную часть Товары объекта
//
// Параметры:
// ТекущийОбъект    - объект, в табличную часть которого необходимо поместить цены
// СохранятьБазовые - Булево -указывает на необходимость помещения в табличную часть базовых видов цен
//
Процедура ПоместитьЦеныВТабличнуюЧасть(Параметры) Экспорт
	
	ТабличныеЧасти = Новый Массив;
	
	ТолькоИзмененные = Ложь;
	Если Параметры.Свойство("ТолькоИзмененные") Тогда
		ТолькоИзмененные = Параметры.ТолькоИзмененные;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Документы) = Тип("Массив") Тогда
		Для Каждого Документ Из Параметры.Документы Цикл
			Если Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
				ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыНовыхДокументов);
				Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
					ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Документ.ВидыЦен, Истина);
				КонецЕсли;
			КонецЕсли;
			ТабличныеЧасти.Добавить(Документ.Товары);
		КонецЦикла;
	Иначе
		Если Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
			ЗаполнитьЗначенияСвойств(Параметры.Документы, Параметры.РеквизитыНовыхДокументов);
			Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
				ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Параметры.Документы.ВидыЦен, Истина);
			КонецЕсли;
		КонецЕсли;
		ТабличныеЧасти.Добавить(Параметры.Документы.Товары);
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	ВидыЦен = Новый Массив;
	Для Каждого ВидЦены Из Параметры.Форма.ВыбранныеЦены Цикл
		Если ВидЦены.Выбрана Или Параметры.СохранятьБазовые И ВидЦены.Влияет Тогда
			ВидыЦен.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("КоличествоВидовЦен", ВидыЦен.Количество());
	
	Если ТабличныеЧасти.Количество() = 0 И Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
		
		Если ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
			Документ = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		Иначе
			Документ = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыНовыхДокументов);
		
		Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
			ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Документ.ВидыЦен, Истина);
		КонецЕсли;
		
		Параметры.Документы.Добавить(Документ);
		ТабличныеЧасти.Добавить(Документ.Товары);
		
	КонецЕсли;
	Параметры.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	Параметры.Вставить("КоличествоСтрок", 0);
	
	ЭлементыНоменклатура = Параметры.Форма.ДеревоЦен.ПолучитьЭлементы();
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		Если ТолькоИзмененные Тогда
			ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ТекЭлементНоменклатура, ВидыЦен);
			Если ЦеныИзменены Тогда
				КонтрольКоличестваСтрок(Параметры);
				ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ТекЭлементНоменклатура);
			КонецЕсли;
		Иначе
			КонтрольКоличестваСтрок(Параметры);
			ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ТекЭлементНоменклатура);
		КонецЕсли;
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			Если ТолькоИзмененные Тогда
				ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ТекЭлементХарактеристика, ВидыЦен);
				Если ЦеныИзменены Тогда
					КонтрольКоличестваСтрок(Параметры);
					ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ТекЭлементХарактеристика);
				КонецЕсли;
			Иначе
				КонтрольКоличестваСтрок(Параметры);
				ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ТекЭлементХарактеристика);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает уникальное имя колонки дерева цен по ссылке на вид цены
//
// Параметры:
//  ВидЦены - Ссылка на вид цены
//  КэшДанных - Структура
//
// Возвращаемое значение:
//  Строка - Имя колонки вида цены
//
Функция ИмяКолонкиПоВидуЦены(ВидЦены, КэшДанных) Экспорт
	
	Значение = КэшДанных.СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Получить(ВидЦены);
	Если Значение = Неопределено Тогда
		Значение = "ВидЦены" + СтрЗаменить(ВидЦены.УникальныйИдентификатор(), "-", "");
		КэшДанных.СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Вставить(ВидЦены, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Осуществляет поиск строки дерева цен по полям (Номенклутура, Характеристика).
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ДанныеПоиска - Структура - Структура со свойствами:
//   * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристики номенклатуры.
//  КэшДанных - Структура - Структура кеша данных.
//
// Возвращаемое значение:
//  Массив - Найденные строки таблицы.
//
Функция НайтиСтрокуДереваЦен(Форма, ДанныеПоиска, КэшДанных) Экспорт
	
	Если КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствия(Форма, КэшДанных);
	КонецЕсли;
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ДанныеПоиска.Номенклатура);
		Отбор.Вставить("Характеристика", ДанныеПоиска.Характеристика);
		Если Форма.ИспользоватьНоменклатуруПоставщиков Тогда
			Отбор.Вставить("НоменклатураПоставщика", ДанныеПоиска.НоменклатураПоставщика);
		КонецЕсли;
		
	Иначе
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			Отбор = Новый Структура(
				"Номенклатура, Характеристика",
				ДанныеПоиска.Номенклатура, ДанныеПоиска.Характеристика);
		Иначе
			Отбор = Новый Структура(
				"Номенклатура, Характеристика",
				ДанныеПоиска.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрок = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат МассивСтрок[0].СтрокаДереваЦен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает виды цен, зависимые от заданного вида цены
//
// Параметры:
//  Форма - УправляемаяФорма
//  СтрокаВидЦены - Строка таблицы ВыбранныеЦены
//
// Возвращаемое значение:
//  Массив - Зависимые виды цен
//
Функция ЗависимыеОтВидаЦеныВидыЦен(Форма, СтрокаВидЦены) Экспорт
	
	ЗависимыеВидыЦен = Новый ТаблицаЗначений;
	ЗависимыеВидыЦен.Колонки.Добавить("ВидЦены");
	ЗависимыеВидыЦен.Колонки.Добавить("РеквизитДопУпорядочивания");
	
	Для Каждого ЗависимаяЦена Из СтрокаВидЦены.ЗависимыеЦены Цикл
		СтрокаЗависимойЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ЗависимаяЦена.Значение);
		Если СтрокаЗависимойЦены <> Неопределено И СтрокаЗависимойЦены.Выбрана Тогда
			НоваяСтрока = ЗависимыеВидыЦен.Добавить();
			НоваяСтрока.ВидЦены = СтрокаЗависимойЦены;
			НоваяСтрока.РеквизитДопУпорядочивания = Форма.ВыбранныеЦены.Индекс(СтрокаЗависимойЦены);
		КонецЕсли;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ЗависимыеВидыЦен Цикл
			
			Для Каждого ЗависимаяЦена Из ТекСтрока.ВидЦены.ЗависимыеЦены Цикл
				СтрокаЗависимойЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ЗависимаяЦена.Значение);
				Если СтрокаЗависимойЦены <> Неопределено И СтрокаЗависимойЦены.Выбрана И ЗависимыеВидыЦен.Найти(СтрокаЗависимойЦены, "ВидЦены") = Неопределено Тогда
					
					НоваяСтрока = ЗависимыеВидыЦен.Добавить();
					НоваяСтрока.ВидЦены = СтрокаЗависимойЦены;
					НоваяСтрока.РеквизитДопУпорядочивания = Форма.ВыбранныеЦены.Индекс(СтрокаЗависимойЦены);
					
					Заполнять = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗависимыеВидыЦен.Сортировать("РеквизитДопУпорядочивания Возр");
	
	Возврат ЗависимыеВидыЦен.ВыгрузитьКолонку("ВидЦены");
	
КонецФункции

// Обработчик ПриИзменении дерева цен
//
// Параметры:
//  Форма - УправляемаяФорма
//  ИдентификаторСтроки - Число
//  ИмяТекущейКолонки - Строка
//
// Возвращаемое значение:
//  Структура - ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
//
Функция ДеревоЦенУпаковкаПриИзменении(Форма, ИдентификаторСтроки, ИмяТекущейКолонки) Экспорт
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущаяСтрока = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаУпаковка = "Упаковка";
	Если СтрНайти(ИмяТекущейКолонки, СтрокаУпаковка) > 0 Тогда
		
		ИмяКолонкиВидЦены = СтрЗаменить(ИмяТекущейКолонки, СтрокаУпаковка, "");
		
		ТекущаяСтрока["ИзмененаВручную"       + ИмяКолонкиВидЦены] = Истина;
		ТекущаяСтрока["ИзмененаАвтоматически" + ИмяКолонкиВидЦены] = Ложь;
		
	КонецЕсли;
	
	Если ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПоставщика) Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
		Данные.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		Данные.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		Данные.Вставить("Упаковка", ТекущаяСтрока[ИмяТекущейКолонки]);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Форма.Объект.Партнер);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Данные, СтруктураДействий, Неопределено);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Данные, "НоменклатураПоставщика");
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = СоздатьТаблицуТовары(ЭтоРегистрацияЦенПоставщика(Форма));
	Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Если Не ИспользоватьТаблицуЗначенийВместоДереваЗначений(Форма) Тогда
				Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
					
					НоваяСтрока = ТаблицаЗначений.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
					НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
					НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
					Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
						НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ЗагрузитьСтарыеЦеныНоменклатуры(Форма, ТаблицаЗначений, КэшДанных);
	
	Если Не ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныПоИдентификаторуСтроки(Форма, ИдентификаторСтроки,, ИмяТекущейКолонки, КэшДанных);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Проверяет заполнение обязательных параметров схем компоновки данных для выбранных видов цен
//
// Параметры:
//  Форма - УправляемаяФорма
//  СообщатьПользователюОбОшибках - Булево - Выдавать сообщение пользователю о каждой найденной ошибке
//
// Возвращаемое значение:
//  Булево - Найдены ошибки заполнения обязательных параметров
//
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(Форма, СообщатьПользователюОбОшибках = Истина) Экспорт
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
		Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.НайденыОбязательныеПараметры Тогда
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Ошибки = УстановкаЦенВызовСервера.ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(
		ВидыЦен,
		Форма.АдресХранилищаНастройкиКомпоновкиДанных,
		Форма.АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	Если СообщатьПользователюОбОшибках Тогда
		Для Каждого СтруктураОшибки Из Ошибки Цикл
			СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтруктураОшибки.ВидЦены);
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтруктураОшибки.Описание,
					Форма.Объект.Ссылка,
					"ВыбранныеЦены[" + Форма.ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтруктураОшибки.Описание,
					,
					"ВыбранныеЦены[" + Форма.ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

// Проверяет корректность заполнения документа установки цен
//
// Параметры:
//  Форма - Булево - признак отказа от записи документа
//  Отказ - Булево - признак отказа от записи документа
//
Процедура ПроверитьКорректностьЗаполненияДокумента(Форма, Отказ) Экспорт
	
	// Для корректного построения таблицы цен по тч Товары не должно быть дублей товаров и пустых строк
	ДеревоЦенДляПроверки = СоздатьТаблицуНоменклатуры();
	ДеревоЦенДляПроверки.Колонки.Добавить("НомерСтроки",    Новый ОписаниеТипов("Число"));
	ДеревоЦенДляПроверки.Колонки.Добавить("ЭтоГруппа",      Новый ОписаниеТипов("Булево"));
	
	ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	НомерСтроки = 1;
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		СтрокаТаблицы = ДеревоЦенДляПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекЭлементНоменклатура);
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.ЭтоГруппа   = Истина;
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТекЭлементНоменклатура.ХарактеристикиИспользуются Тогда
			
			ДобавленыХарактеристики = Ложь;
			
			ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
			Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				СтрокаТаблицыХарактеристика = ДеревоЦенДляПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыХарактеристика, ТекЭлементХарактеристика);
				СтрокаТаблицыХарактеристика.НомерСтроки = НомерСтроки;
				СтрокаТаблицыХарактеристика.ЭтоГруппа   = Ложь;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДобавленыХарактеристики = Истина;
				
			КонецЦикла;
			
			Если Не ДобавленыХарактеристики Тогда
				ТекстОшибки = НСтр("ru='Для номенклатуры ""%1"" в строке ""%2"" списка ""Таблица цен"" включено использование характеристик,
				                       |Но ни одной характеристики не указано. Добавьте характеристики и укажите их цены или удалите данную номенклатуру из списка.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.НомерСтроки);
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						Форма.Объект.Ссылка,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", СтрокаТаблицы.НомерСтроки, "Номенклатура"),
						,
						Отказ);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", СтрокаТаблицы.НомерСтроки, "Номенклатура"),
						,
						Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДеревоЦенДляПроверки.Количество() > 0 Тогда
		Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
			
			КэшДанных = Неопределено;
			ТаблицаТовары = ТаблицаТовары(Форма, КэшДанных, Ложь);
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "НомерСтроки");
			
			Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика(
				Форма.Объект, ТаблицаТовары, Отказ);
			
		Иначе
			Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатуры(
				Форма.Объект, ДеревоЦенДляПроверки, УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма), Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет настройку порядка видов цен поставщика.
//
// Параметры:
//  Форма - УправляемаяФорма - Используемая форма.
//
Функция СохранитьНастройкуПорядкаВидовЦенПоставщика(Форма) Экспорт
	
	Индекс = 1;
	ЭлементыЗаблокированы = Истина;
	Для Каждого СтрокаТЧ Из Форма.ВыбранныеЦены Цикл
		Если СтрокаТЧ.РеквизитДопУпорядочивания <> Индекс Тогда
			Попытка
				ЗаблокироватьДанныеДляРедактирования(СтрокаТЧ.Ссылка,,Форма.УникальныйИдентификатор);
			Исключение
				ЭлементыЗаблокированы = Ложь;
				Прервать;
			КонецПопытки;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ЭлементыЗаблокированы Тогда
		Для Каждого СтрокаТЧ Из Форма.ВыбранныеЦены Цикл
			Если СтрокаТЧ.РеквизитДопУпорядочивания <> Индекс Тогда
				ВидЦеныОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
				ВидЦеныОбъект.РеквизитДопУпорядочивания = Индекс;
				ВидЦеныОбъект.Записать();
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЭлементыЗаблокированы;
	
КонецФункции

// Очистить массив сохраненные документы.
//
// Параметры:
//  СохраненныеДокументы - Массив - Сохраненные документы.
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
//  УдалитьДокументы - Булево - Если истина, то удалить документы. Если Ложь, то разблокировать для редактирования.
//
Процедура ОчиститьСохраненныеДокументы(СохраненныеДокументы, ИдентификаторФормы, УдалитьДокументы = Ложь) Экспорт
	
	Для Каждого СтрокаТЧ Из СохраненныеДокументы Цикл
		Если Не УдалитьДокументы Тогда
			РазблокироватьДанныеДляРедактирования(СтрокаТЧ.Ссылка, ИдентификаторФормы);
		Иначе
			ДокументОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	СохраненныеДокументы.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает дату для выполнения запроса по ценам номенклатуры
//
// Параметры:
//  Форма - УправляемаяФорма
//
// Возвращаемое значение:
//  Дата
//
Функция ДатаДляЗапросаЦенНоменклатуры(Форма)
	
	Возврат ДатаДокумента(Форма) - 1;
	
КонецФункции

// Возвращает дату установки цен
//
// Параметры:
//  Форма - УправляемаяФорма
//
// Возвращаемое значение:
//  Дата
//
Функция ДатаДокумента(Форма)
	
	Дата = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Дата") Тогда
		Дата = Форма.Объект.Дата;
	Иначе
		Дата = Форма.Дата;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
КонецФункции

Процедура ИнициализироватьВыбранныеЦеныНоменклатуры(Форма, МассивВидовЦен = Неопределено)
	
	// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
	НастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных(Форма);
	
	Форма.ВыбранныеЦены.Очистить();
	
	Таблица = ЗагрузитьСправочникВидовЦен(Форма, НастройкиКомпоновкиДанных, МассивВидовЦен);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.Статус = Перечисления.СтатусыДействияВидовЦен.Действует Или
			(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен") И
			Форма.Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", СтрокаТЧ.Ссылка)).Количество()>0) Тогда
		
			НоваяСтрока = Форма.ВыбранныеЦены.Добавить();
			
			НоваяСтрока.УстанавливатьЦенуПриВводеНаОсновании = СтрокаТЧ.УстанавливатьЦенуПриВводеНаОсновании;
			НоваяСтрока.Формула                              = СтрокаТЧ.Формула;
			НоваяСтрока.Валюта                               = СтрокаТЧ.Валюта;
			НоваяСтрока.Идентификатор                        = СтрокаТЧ.Идентификатор;
			НоваяСтрока.ИмяКолонки                           = СтрокаТЧ.ИмяКолонки;
			НоваяСтрока.Наименование                         = СтрокаТЧ.Наименование;
			НоваяСтрока.ВариантОкругления                    = СтрокаТЧ.ВариантОкругления;
			НоваяСтрока.ПорогСрабатывания                    = СтрокаТЧ.ПорогСрабатывания;
			НоваяСтрока.РеквизитДопУпорядочивания            = СтрокаТЧ.РеквизитДопУпорядочивания;
			НоваяСтрока.СпособЗаданияЦены                    = СтрокаТЧ.СпособЗаданияЦены;
			НоваяСтрока.Ссылка                               = СтрокаТЧ.Ссылка;
			НоваяСтрока.Уровень                              = СтрокаТЧ.Уровень;
			НоваяСтрока.ЗапрещенныйВидЦены                   = СтрокаТЧ.ЗапрещенныйВидЦены;
			НоваяСтрока.БазовыйВидЦены                       = СтрокаТЧ.БазовыйВидЦены;
			НоваяСтрока.Наценка                              = СтрокаТЧ.Наценка;
			НоваяСтрока.ПометкаУдаления                      = СтрокаТЧ.ПометкаУдаления;
			
			// Служебные поля для работы с настройками СКД
			НоваяСтрока.АдресСхемыКомпоновкиДанных         = СтрокаТЧ.АдресСхемыКомпоновкиДанных;
			НоваяСтрока.АдресНастроекСхемыКомпоновкиДанных = СтрокаТЧ.АдресНастроекСхемыКомпоновкиДанных;
			НоваяСтрока.НайденыОбязательныеПараметры = СтрокаТЧ.НайденыОбязательныеПараметры;
			НоваяСтрока.Параметры                    = СтрокаТЧ.Параметры;
			
			НоваяСтрока.ПорогиСрабатывания.Загрузить(СтрокаТЧ.ПорогиСрабатывания);
			НоваяСтрока.ПравилаОкругленияЦены.Загрузить(СтрокаТЧ.ПравилаОкругленияЦены);
			НоваяСтрока.ЦеновыеГруппы.Загрузить(СтрокаТЧ.ЦеновыеГруппы);
			НоваяСтрока.ВлияющиеВидыЦен.Загрузить(СтрокаТЧ.ВлияющиеВидыЦен);
			НоваяСтрока.ВлияющиеЦены.ЗагрузитьЗначения(СтрокаТЧ.ВлияющиеЦены.ВыгрузитьЗначения());
			НоваяСтрока.ЗависимыеЦены.ЗагрузитьЗначения(СтрокаТЧ.ЗависимыеЦены.ВыгрузитьЗначения());
			
		КонецЕсли;
		
	КонецЦикла;
	Форма.ВыбранныеЦены.Сортировать("Уровень");
	
	ЕстьВидыЦенСКД = Ложь;
	ЕстьВидыЦенФормулы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен") Тогда
		Для Каждого СтрокаТЧ Из Форма.Объект.ВидыЦен Цикл
			СтрокаВидаЦен = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаТЧ.ВидЦены);
			Если СтрокаВидаЦен <> Неопределено Тогда
				СтрокаВидаЦен.Выбрана = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаВидаЦен Из Форма.ВыбранныеЦены Цикл
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
			ЕстьВидыЦенСКД = Истина;
		КонецЕсли;
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен
			ИЛИ СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
			ЕстьВидыЦенФормулы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВидыЦенФормулы Тогда
		// Заполнить флаги "Влияет" и "Зависит"
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			ВидЦены.Зависит = Ложь;
			ВидЦены.Влияет  = Ложь;
		КонецЦикла;
		
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			
			Если ВидЦены.Выбрана Тогда
				
				Для Каждого ЗависимаяЦена Из ВидЦены.ЗависимыеЦены Цикл
					СтрокаЗависимойЦены         = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ЗависимаяЦена.Значение);
					Если СтрокаЗависимойЦены <> Неопределено Тогда
						СтрокаЗависимойЦены.Зависит = Не СтрокаЗависимойЦены.Выбрана;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ВлияющаяЦена Из ВидЦены.ВлияющиеЦены Цикл
					СтрокаВыбраннойЦены        = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВлияющаяЦена.Значение);
					Если СтрокаВыбраннойЦены <> Неопределено Тогда
						СтрокаВыбраннойЦены.Влияет = Не СтрокаВыбраннойЦены.Выбрана;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВыбратьВсеВлияющие",  "Видимость", ЕстьВидыЦенФормулы);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВыбратьВсеЗависимые", "Видимость", ЕстьВидыЦенФормулы);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныЗависимыеЦены",       "Видимость", ЕстьВидыЦенФормулы);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВлияющиеЦены",        "Видимость", ЕстьВидыЦенФормулы);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДеревоЦенПереключательОтображатьВлияющиеЦены", "Видимость", ЕстьВидыЦенФормулы);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныГруппаПараметры",                  "Видимость", ЕстьВидыЦенСКД);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВосстановитьНастройкиПоУмолчанию", "Видимость", ЕстьВидыЦенСКД);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныРедактироватьНастройки",           "Видимость", ЕстьВидыЦенСКД);
	
	Форма.АдресХранилищаНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ИнициализироватьВыбранныеЦеныПоставщика(Форма, МассивВидовЦен = Неопределено)
	
	Форма.ВыбранныеЦены.Очистить();
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ТЧ = Форма.Объект.Товары.Выгрузить();
	ТЧ.Свернуть("ВидЦеныПоставщика");
	
	Количество = ТЧ.Количество();
	
	Таблица = ЗагрузитьСправочникВидовЦенПоставщика(Форма, МассивВидовЦен);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		НоваяСтрока = Форма.ВыбранныеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Выбрана = НЕ ТЧ.Найти(СтрокаТЧ.Ссылка, "ВидЦеныПоставщика") = Неопределено ИЛИ Количество = 0;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения цен, рассчитываемым по данным информационной базы
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений
//  ВидЦены - СправочникСсылка.ВидыЦен
//  ТолькоНезаполненные - Указывает на необходимость вычисления только незаполненных цен
//
Процедура ВычислитьЗначенияЦеныПоДаннымИБ(Форма,
	                                      ТаблицаНоменклатуры,
	                                      СтрокаВидЦены,
	                                      ТолькоНезаполненные,
	                                      НастройкиКомпоновкиДанных,
	                                      КэшДанных)
	
	Форма.Модифицированность = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
			ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
			
			// Копирование схемы компоновки данных
			Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
			СхемаКомпоновкиДанных = Схема.Получить();
			
			Если Ценообразование.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка)) Тогда
				
				// Заполнение набора данных ТаблицаНоменклатуры
				РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
				ТекстЗапроса = РабочийНаборДанных.Запрос;
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки1", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", 
						"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
				
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки2", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыДокумента.Упаковка", 
						"ТоварыДокумента.Номенклатура"));
						
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки3", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыДокументаВводНаОсновании.Упаковка", 
						"ТоварыДокументаВводНаОсновании.Номенклатура"));
					
				РабочийНаборДанных.Запрос = ТекстЗапроса;
				
				НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
				НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
				
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Характеристика", "СправочникСсылка.ХарактеристикиНоменклатуры");
				КонецЕсли;
				
				СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Характеристика");
				КонецЕсли;
				
				// Подготовка компоновщика макета компоновки данных, загрузка настроек
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				
				Если НастройкиКомпоновкиДанных <> Неопределено Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
					КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных) Тогда
						НастройкиИзВидаЦены = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
						КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиИзВидаЦены);
						КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
					Иначе
						КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;
				
				// Заполнение структуры отчета и выбранных полей.
				КомпоновщикНастроек.Настройки.Структура.Очистить();
				
				ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ГруппировкаДетальныеЗаписи.Использование = Истина;
				
				КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Коэффициент");
				КонецЕсли;
				
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Валюта");
				
				// Компоновка макета и исполнение запроса.
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
				СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
				
				Если ЭтоУстановкаЦенНоменклатуры(Форма) Тогда
					Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Основание");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = Форма.Объект.ДокументОснование;
					КонецЕсли;
					Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЭтоВводНаОсновании");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = ЗначениеЗаполнено(Форма.Объект.ДокументОснование);
					КонецЕсли;
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДатаДокумента");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ДатаДокумента(Форма);
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Ссылка;
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Валюта");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Валюта;
				КонецЕсли;
				
				ВнешниеНаборыДанных = Новый Структура;
				ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры.Скопировать(, "Номенклатура, Характеристика"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

				ДанныеОтчета = Новый ТаблицаЗначений();
				ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
				ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ТаблицаКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма);
				Иначе
					ТаблицаКоэффициентовУпаковокНоменклатуры = Неопределено;
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("ТолькоНезаполненные",  ТолькоНезаполненные);
				СтруктураПараметров.Вставить("ПрименитьОкругление",  Истина);
				СтруктураПараметров.Вставить("ЗагружатьУпаковку",    Ложь);
				СтруктураПараметров.Вставить("АвтоматическийРасчет", Истина);

				Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
					
					СтруктураПараметров.Вставить("Наценивать", Истина);
					ЗагрузитьЦеныИзТаблицыЗначений(
						Форма,
						ДанныеОтчета,
						ТаблицаКоэффициентовУпаковокНоменклатуры,
						КэшДанных,
						СтрокаВидЦены,
						СтрокаВидЦены.Валюта,
						СтруктураПараметров);
					
				Иначе
					
					СтруктураПараметров.Вставить("Наценивать", Ложь);
					ЗагрузитьЦеныИзТаблицыЗначений(Форма,
						ДанныеОтчета,
						ТаблицаКоэффициентовУпаковокНоменклатуры,
						КэшДанных,
						СтрокаВидЦены,
						СтрокаВидЦены.Валюта,
						СтруктураПараметров);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Округляет ручные цены в таблице
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой применяется округление
//  ВидыЦен - Массив - виды цен, для которых необходимо применить округление
//
Процедура ПрименитьОкруглениеКРучнымЦенам(Форма, ТаблицаНоменклатуры, ВидыЦен, КэшДанных)
	
	Для Каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, СтрокаТаблицыНоменклатуры, КэшДанных);
		
		Для Каждого СтрокаВидЦены Из ВидыЦен Цикл
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			СтрокаТаблицыЦен[ИмяКолонки] = УстановкаЦенКлиентСервер.ОкруглитьЦену(СтрокаТаблицыЦен[ИмяКолонки], СтрокаВидЦены);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает цены в таблицу цен из переданной таблицы
//
// Параметры:
//  ДеревоЦенИсточник - ТаблицаЗначений - Таблица, из которой необходимо загрузить цены
//  ТаблицаКоэффициентовУпаковокНоменклатуры - ТаблицаЗначений - содержит номенклатуру, упаковки и их коэффициенты
//  ВидЦены - СправочникСсылка.ВидыЦен
//  ВалютаЦены - СправочникСсылка.Валюта
//  ДополнительныеПараметры - Структура
//  * ТолькоНезаполненные  - Булево - указывает на необходимость вычисления только незаполненных цен.
//  * ПрименитьОкругление  - Булево - указывает на необходимость применения округления к ценам.
//  * ЗагружатьУпаковку    - Булево - указывает на необходимость загрузки упаковки.
//  * Наценивать           - Булево - указывает на необходимость наценки.
//  * АвтоматическийРасчет - Булево - указывает на необходимость автоматического пересчета цен.
//
Процедура ЗагрузитьЦеныИзТаблицыЗначений(Форма,
	                                     Таблица,
	                                     СоответствиеКоэффициентовУпаковокНоменклатуры,
	                                     КэшДанных,
	                                     СтрокаЗагружаемыйВидЦены = Неопределено,
	                                     ВалютаЦены = Неопределено,
	                                     ДополнительныеПараметры  = Неопределено)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТолькоНезаполненные",  Ложь);
	СтруктураПараметров.Вставить("ПрименитьОкругление",  Ложь);
	СтруктураПараметров.Вставить("ЗагружатьУпаковку",    Ложь);
	СтруктураПараметров.Вставить("Наценивать",           Ложь);
	СтруктураПараметров.Вставить("АвтоматическийРасчет", Ложь);

	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	
	КурсыВалют(Форма, КэшДанных);
	
	Для Каждого СтрокаИсточник Из Таблица Цикл
	
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, СтрокаИсточник, КэшДанных);
		
		Если СтрокаЗагружаемыйВидЦены = Неопределено Тогда
			СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаИсточник.ВидЦены);
		Иначе
			СтрокаВидЦены = СтрокаЗагружаемыйВидЦены;
		КонецЕсли;
		
		ЦеновыеГруппыПорогов = СтрокаВидЦены.ПорогиСрабатывания.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
		Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
			ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
		Иначе
			ПорогСрабатывания = СтрокаВидЦены.ПорогСрабатывания;
		КонецЕсли;
		
		Если СтруктураПараметров.Наценивать Тогда
			ЦеновыеГруппыНаценок = СтрокаВидЦены.ЦеновыеГруппы.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
			Если ЦеновыеГруппыНаценок.Количество() > 0 Тогда
				Наценка = ЦеновыеГруппыНаценок[0].Наценка;
			Иначе
				Наценка = СтрокаВидЦены.Наценка;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
		
		Если (СтрокаТаблицыЦен[ИмяКолонки] = 0 Или Не СтруктураПараметров.ТолькоНезаполненные) И СтрокаИсточник.Цена <> Null Тогда
			
			Цена = СтрокаИсточник.Цена;
			Если СтруктураПараметров.Наценивать Тогда
				Цена = Цена * (Наценка/100+1);
			КонецЕсли;
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				
				Если СоответствиеКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
					
					ТекущаяУпаковка = СтрокаТаблицыЦен["Упаковка" + ИмяКолонки];
					ТекущийКоэффициент = 1;
					
					Если ЗначениеЗаполнено(СтрокаИсточник.Коэффициент)
						И (ЗначениеЗаполнено(СтрокаИсточник.Упаковка) Или ЗначениеЗаполнено(ТекущаяУпаковка)) Тогда
						
						Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
														
							РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(СоответствиеКоэффициентовУпаковокНоменклатуры, 
																												СтрокаИсточник.Номенклатура, 
																												ТекущаяУпаковка);
							
							Если РезультатПоиска <> Неопределено Тогда
								ТекущийКоэффициент = РезультатПоиска;
							КонецЕсли;
							
						КонецЕсли;
						
						Цена = Цена / СтрокаИсточник.Коэффициент * ТекущийКоэффициент;
						
					КонецЕсли;
					
				ИначеЕсли СтруктураПараметров.ЗагружатьУпаковку Тогда
					СтрокаТаблицыЦен["Упаковка" + ИмяКолонки] = СтрокаИсточник.Упаковка;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВалютаЦены <> Неопределено И СтрокаИсточник.Валюта <> Null Тогда
				Цена = ПересчитатьВалюту(СтрокаИсточник.Валюта, ВалютаЦены, Цена, КэшДанных.КурсыВалют);
			КонецЕсли;
			
			Если СтруктураПараметров.ПрименитьОкругление Тогда
				Цена = УстановкаЦенКлиентСервер.ОкруглитьЦену(Цена, СтрокаВидЦены);
			КонецЕсли;
			
			Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
				ПроцентИзменения = Окр(100 * (Цена - СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки]) / СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки], 10, 2);
			Иначе
				ПроцентИзменения = 0;
			КонецЕсли;
			
			Если    ПорогСрабатывания = 0
				ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] = 0
				ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
				
				СтрокаТаблицыЦен[ИмяКолонки] = Цена;
				Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
				Иначе
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
				КонецЕсли;
				
			Иначе
				СтрокаТаблицыЦен[ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки];
				СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
			КонецЕсли;
			
			СтрокаТаблицыЦен["СуммаИзменения"   + ИмяКолонки] = СтрокаТаблицыЦен[ИмяКолонки] - СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки];
			
			СтрокаТаблицыЦен["ИзмененаВручную" + ИмяКолонки] = Ложь;
			СтрокаТаблицыЦен["ИзмененаАвтоматически" + ИмяКолонки] = СтруктураПараметров.АвтоматическийРасчет;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет упаковки элемента дерева в массив упаковок
//
// Параметры:
//  ЭлементДерева       - ДанныеФормыКоллекцияЭлементовДерева - элемент дерева значений
//  ТаблицаНоменклатуры - ТаблицаЗначений - необходима для определения необходимости добавления упаковок
//  МассивВидовЦен      - Массив - массив видов цен для поиска колонок в дереве значений
//  МассивУпаковок      - Массив - массив, в который необходимо добавить упаковки
//
Процедура ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(Знач ЭлементДерева,
	                                              Знач МассивВидовЦен,
	                                              ТаблицаУпаковокНоменклатуры)
	
	Для Каждого ВидЦен Из МассивВидовЦен Цикл
		ИмяКолонки = "Упаковка" + ВидЦен.ИмяКолонки;
		Упаковка = ЭлементДерева[ИмяКолонки];
		
		ПараметрыПоиска = Новый Структура("Номенклатура, Упаковка", ЭлементДерева.Номенклатура, Упаковка);
		
		Если ЗначениеЗаполнено(Упаковка) И ТаблицаУпаковокНоменклатуры.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
			НоваяСтрока = ТаблицаУпаковокНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = ЭлементДерева.Номенклатура;
			НоваяСтрока.Упаковка = Упаковка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает последние курсы валют во временное хранилище
//
Процедура СоответствиеКурсовВалют(Форма, КэшДанных)
	
	КэшДанных.КурсыВалют = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних");
	
	Запрос.УстановитьПараметр("Дата", ДатаДокумента(Форма));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВалюты = Новый Структура;
		СтруктураВалюты.Вставить("Валюта", Выборка.Валюта);
		СтруктураВалюты.Вставить("Курс", Выборка.Курс);
		СтруктураВалюты.Вставить("Кратность", Выборка.Кратность);
		
		КэшДанных.КурсыВалют.Вставить(Выборка.Валюта, СтруктураВалюты);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает виды цен, зависимые от заданного вида цены
//
// Параметры:
//  ТаблицаВидовЦен - Таблица ВыбранныеЦены
//  ВидЦены - ВидЦены, от которого нужно найти зависимые и влияющие цены
//  Стек - Массив - Служебный массив для рекурсивного вызова
//
// Возвращаемое значение:
//  Массив - Зависимые виды цен
//
Функция НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, ВидЦены, Стек = Неопределено)
	
	СтрокаСправочника = ТаблицаВидовЦен.Найти(ВидЦены, "Ссылка");
	Уровень           = 0;
	
	Для Каждого БазоваяЦена Из СтрокаСправочника.ВлияющиеВидыЦен Цикл
		
		СтрокаБазовойЦены  = ТаблицаВидовЦен.Найти(БазоваяЦена.ВлияющийВидЦен, "Ссылка");
		УровеньБазовойЦены = СтрокаБазовойЦены.Уровень;
		
		Если Стек = Неопределено Тогда
			Стек = Новый Массив();
		КонецЕсли;
		
		Стек.Добавить(СтрокаСправочника);
		УровеньБазовойЦены = НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, БазоваяЦена.ВлияющийВидЦен, Стек);
		
		Если УровеньБазовойЦены > Уровень Тогда
			Уровень = УровеньБазовойЦены;
		КонецЕсли;
		
		Для Каждого ЭлементСтека Из Стек Цикл
			
			Если ЭлементСтека.ВлияющиеЦены.НайтиПоЗначению(СтрокаБазовойЦены.Ссылка) = Неопределено Тогда
				ЭлементСтека.ВлияющиеЦены.Добавить(СтрокаБазовойЦены.Ссылка);
			КонецЕсли;
			
			Если СтрокаБазовойЦены.ЗависимыеЦены.НайтиПоЗначению(ЭлементСтека.Ссылка) = Неопределено Тогда
				СтрокаБазовойЦены.ЗависимыеЦены.Добавить(ЭлементСтека.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Стек.Удалить(Стек.Количество() - 1);
		
	КонецЦикла;
	
	Уровень                   = Уровень + 1;
	СтрокаСправочника.Уровень = Уровень;
	
	Возврат Уровень;
	
КонецФункции

Процедура ЗагрузитьТоварыВДеревоЦен(Форма, ВыборкаНоменклатура, КэшДанных)
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ЭлементыДереваЦен = Форма.ДеревоЦен;
	Иначе
		ЭлементыДереваЦен = Форма.ДеревоЦен.ПолучитьЭлементы();
	КонецЕсли;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаНоменклатура, КэшДанных);
		
		Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.ВидЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНоменклатура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаНоменклатура.ВидЦены, КэшДанных);
		
		ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаНоменклатура.Цена;
		ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаНоменклатура.ДействующаяЦена;
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.ДействующаяЦена) Тогда
			ЭлементНоменклатура["СуммаИзменения"   + ИмяКолонки] = ВыборкаНоменклатура.Цена - ВыборкаНоменклатура.ДействующаяЦена;
		КонецЕсли;
		ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаНоменклатура.Процент;
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			ЭлементНоменклатура["Упаковка"         + ИмяКолонки] = ВыборкаНоменклатура.Упаковка;
		КонецЕсли;
		ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаНоменклатура.ЦенаИзмененаВручную;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонтрольКоличестваСтрок(Параметры)
	
	Параметры.КоличествоСтрок = Параметры.КоличествоСтрок + Параметры.КоличествоВидовЦен;
	Если Параметры.КоличествоСтрок > 99999 Тогда
		
		Параметры.ТабличныеЧасти.Удалить(Параметры.ТабличныеЧасти.Найти(Параметры.ТабличныеЧасти[0]));
		Если Параметры.ТабличныеЧасти.Количество() > 0 Тогда
			Параметры.КоличествоСтрок = Параметры.КоличествоВидовЦен;
		Иначе
			Если Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
				Документ = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыНовыхДокументов);
				ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Документ.ВидыЦен, Истина);
				Параметры.Документы.Добавить(Документ);
				Параметры.ТабличныеЧасти.Добавить(Документ.Товары);
			Иначе
				ВызватьИсключение НСтр("ru = 'В документ введено слишком много товаров.
				                             |Попробуйте разбить данный документ на несколько отдельных документов.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЦены(Форма, ТаблицаНоменклатуры, МассивСтрокВидовЦен, КэшДанных)
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаДереваЦен = НайтиСтрокуДереваЦен(Форма, СтрокаНоменклатуры, КэшДанных);
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			СтрокаДереваЦен[СтрокаВидЦены.ИмяКолонки] = 0;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПересчитатьВалюту(ВалютаИсточник, ВалютаНазначение, Цена, СоответствиеВалют)
	
	Если ВалютаИсточник <> ВалютаНазначение Тогда
		
		СтрокаВалютыИсточника  = УстановкаЦенКлиентСервер.НайтиСтрокуВалюты(СоответствиеВалют, ВалютаИсточник);
		СтрокаВалютыНазначения = УстановкаЦенКлиентСервер.НайтиСтрокуВалюты(СоответствиеВалют, ВалютаНазначение);
		
		Если СтрокаВалютыИсточника <> Неопределено И СтрокаВалютыНазначения <> Неопределено Тогда
			Возврат Окр((Цена * СтрокаВалютыИсточника.Курс * СтрокаВалютыНазначения.Кратность) / (СтрокаВалютыНазначения.Курс * СтрокаВалютыИсточника.Кратность), 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

Функция ДобавитьПолеФормы(Форма, Имя, ДополнительныеПараметры)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Заголовок",              Неопределено);
	СтруктураПараметров.Вставить("ОбработчикПриИзменении", "");
	СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "");
	СтруктураПараметров.Вставить("ШиринаПоля",             0);
	СтруктураПараметров.Вставить("ЦветФона",               Неопределено);
	СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      Неопределено);
	СтруктураПараметров.Вставить("Родитель",               Неопределено);
	СтруктураПараметров.Вставить("КартинкаШапки",          Неопределено);
	СтруктураПараметров.Вставить("ПутьКДанным",            Неопределено);
	СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Ложь);
	СтруктураПараметров.Вставить("СвязиПараметровВыбора",  Неопределено);
	СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДополнительныеПараметры);
	
	НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + Имя, Тип("ПолеФормы"), ?(СтруктураПараметров.Родитель = Неопределено, Форма.Элементы.ДеревоЦен, СтруктураПараметров.Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(СтруктураПараметров.ПутьКДанным), СтруктураПараметров.ПутьКДанным, "ДеревоЦен." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(СтруктураПараметров.Заголовок), СтруктураПараметров.Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = СтруктураПараметров.ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = СтруктураПараметров.ШиринаПоля;
	НовоеПоле.ОтображатьВШапке    = СтруктураПараметров.ОтображатьВШапке;
	
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	
	Если СтруктураПараметров.СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СтруктураПараметров.СвязиПараметровВыбора;
	КонецЕсли;
	
	Если СтруктураПараметров.ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = СтруктураПараметров.ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если СтруктураПараметров.ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = СтруктураПараметров.ЦветФона;
	КонецЕсли;
		
	Если СтруктураПараметров.КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = СтруктураПараметров.КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", СтруктураПараметров.ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", СтруктураПараметров.ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

Функция ДобавитьГруппуФормы(Форма,
	                        Имя,
	                        Заголовок,
	                        ОтображатьВШапке,
	                        КартинкаШапки,
	                        ГруппировкаКолонок,
	                        Родитель)
	
	НоваяГруппа                  = Форма.Элементы.Добавить("ДеревоЦен" + Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Форма.Элементы.ДеревоЦен, Родитель));
	НоваяГруппа.Заголовок        = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле) Экспорт
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

Процедура ДобавитьСвязьНаборовДанныхСКД(СКД, НаборДанныхНоменклатура, РабочийНаборДанных, Поле)
	
	Связь                     = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = НаборДанныхНоменклатура.Имя;
	Связь.НаборДанныхПриемник = РабочийНаборДанных.Имя;
	Связь.ВыражениеИсточник   = Поле;
	Связь.ВыражениеПриемник   = Поле;
	Связь.Обязательная        = Истина;
	
КонецПроцедуры

Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения)
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ИмяПоля;
	ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
	
КонецПроцедуры

Процедура ТаблицаСоответствия(Форма, КэшДанных)
	
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьТаблицуНоменклатуры();
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	
	ИерархическийСписок = Истина;
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ЭлементыНоменклатура = Форма.ДеревоЦен;
		ИерархическийСписок = Ложь;
	Иначе
		ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	КонецЕсли;
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			Если ИерархическийСписок Тогда
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементХарактеристика);
					НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
КонецПроцедуры

Функция ЕстьИзмененияЦенВСтроке(СтрокаДереваЦен, ВыбранныеЦены, ПоИзменениямЗаДень = Ложь)
	
	ЦеныИзменены = Ложь;
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		Если ПоИзменениямЗаДень Тогда
			Если (СтрокаДереваЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] <> 0
				И СтрокаДереваЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0)
				Или
				(СтрокаДереваЦен["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
				И СтрокаДереваЦен[ВидЦены.ИмяКолонки] <> 0) Тогда
				ЦеныИзменены = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Если (СтрокаДереваЦен["ИзмененаВручную" + ВидЦены.ИмяКолонки]
				ИЛИ СтрокаДереваЦен["ИзмененаАвтоматически" + ВидЦены.ИмяКолонки]) Тогда
				ЦеныИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЦеныИзменены;
	
КонецФункции

Функция ЭтоРегистрацияЦенПоставщика(Форма)
	
	Возврат (ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма)
		ИЛИ ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма));
	
КонецФункции

Функция ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма)
	
	Возврат (Форма.КодФормы = "РегистрацияЦенНоменклатурыПоставщика");
	
КонецФункции

Функция ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма)
	
	Возврат (Форма.КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов");
	
КонецФункции

Функция ЭтоУстановкаЦенНоменклатуры(Форма)
	
	Возврат (Форма.КодФормы = "УстановкаЦенНоменклатуры");
	
КонецФункции

Функция ИспользоватьТаблицуЗначенийВместоДереваЗначений(Форма)
	
	Возврат (Форма.КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов"
	     ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма));
	
КонецФункции

Функция ПоследниеУпаковкиЦен(Форма, Номенклатура, Характеристика, ВидыЦен)
	
	Запрос = Новый Запрос;
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.ВидЦеныПоставщика КАК ВидЦены,
		|	ЦеныНоменклатуры.Упаковка          КАК Упаковка
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|		&Дата, Номенклатура = &Номенклатура
		|			И Характеристика = &Характеристика И ВидЦеныПоставщика В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.ВидЦены  КАК ВидЦены,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|		&Дата, Номенклатура = &Номенклатура
		|			И Характеристика = &Характеристика И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидыЦен",        ВидыЦен);
	Запрос.УстановитьПараметр("Дата",           ТекущаяДатаСеанса());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДеревоЦенХарактеристикаПриИзменении(Форма, ИдентификаторСтроки, РассчитатьЦены = Истина) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущаяСтрока = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			
			ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма);
			ТаблицаУпаковок = ПоследниеУпаковкиЦен(Форма, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ВидыЦен);
			
			Для Каждого ТекСтрока Из ТаблицаУпаковок Цикл
				ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонкиПоВидуЦены(ТекСтрока.ВидЦены, КэшДанных);
				Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
					ТекущаяСтрока[ИмяКолонкиУпаковка] = ТекСтрока.Упаковка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = СоздатьТаблицуТовары(ЭтоРегистрацияЦенПоставщика(Форма));
	Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(Форма, ТаблицаЗначений, КэшДанных);
	
	Если Не ЭтоРегистрацияЦенПоставщика(Форма) И РассчитатьЦены Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныПоИдентификаторуСтроки(Форма, ИдентификаторСтроки, Истина,,КэшДанных);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Получает все характеристики номенклатуры
//
// Параметры:
// Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить характеристики
//
Процедура ЗаполнитьХарактеристикиНоменклатуры(Форма, ТекущаяСтрока, СкопироватьЦеныИзТекущейСтроки = Ложь) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
	|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры
	|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикиНоменклатуры.Ссылка";
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, Номенклатура = &Номенклатура И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
		Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма));
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = МассивРезультатов[1].Выгрузить();
		Упаковки.Индексы.Добавить("Характеристика");
	КонецЕсли;
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма);
	
	ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
	ВыборкаХарактеристики = МассивРезультатов[0].Выбрать();
	Пока ВыборкаХарактеристики.Следующий() Цикл
		
		ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
		УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			
			ПараметрыПоиска = Новый Структура("Характеристика", ЭлементХарактеристика.Характеристика);
			
			НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
				ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкопироватьЦеныИзТекущейСтроки Тогда
		
		ТаблицаУпаковокНоменклатуры = СоздатьТаблицуУпаковокНоменклатуры();
		ТаблицаКоэффициентовУпаковокНоменклатуры = Неопределено;
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			
			Для Каждого ВидЦены Из ВидыЦен Цикл
				ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены, КэшДанных);
				
				ПараметрыПоиска = Новый Структура("Номенклатура, Упаковка", ТекущаяСтрока.Номенклатура, ТекущаяСтрока["Упаковка" + ИмяКолонки]);
				
				Если ЗначениеЗаполнено(ТекущаяСтрока["Упаковка" + ИмяКолонки]) И ТаблицаУпаковокНоменклатуры.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
					НоваяСтрока = ТаблицаУпаковокНоменклатуры.Добавить();
					НоваяСтрока.Упаковка = ТекущаяСтрока["Упаковка" + ИмяКолонки];
					НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
				КонецЕсли;
				
				ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
					
					ПараметрыПоиска = Новый Структура("Номенклатура, Упаковка", ЭлементХарактеристика.Номенклатура, Упаковка);
					
					Если ЗначениеЗаполнено(Упаковка) И ТаблицаУпаковокНоменклатуры.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
						НоваяСтрока = ТаблицаУпаковокНоменклатуры.Добавить();
						НоваяСтрока.Упаковка = Упаковка;
						НоваяСтрока.Номенклатура = ЭлементХарактеристика.Номенклатура;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ТаблицаУпаковокНоменклатуры.Количество() > 0 Тогда
				ТаблицаКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены, КэшДанных);
			
			Если ТекущаяСтрока["ИзмененаВручную" + ИмяКолонки] Тогда
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					
					// Определим коэффициент упаковки текущей цены
					КоэффициентУпаковкиЦеныИсточника = 1;
					Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
						Упаковка = ТекущаяСтрока["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И ТаблицаКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
							ПараметрыПоиска = Новый Структура("Номенклатура, Упаковка", ТекущаяСтрока.Номенклатура, Упаковка);
							МассивНайденныхСтрок = ТаблицаКоэффициентовУпаковокНоменклатуры.НайтиСтроки(ПараметрыПоиска);
							Если МассивНайденныхСтрок.Количество() > 0 Тогда
								КоэффициентУпаковкиЦеныИсточника = МассивНайденныхСтрок[0].Коэффициент;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					ЭлементХарактеристика["ИзмененаВручную" + ИмяКолонки] = Истина;
					
					Если Не Форма.ИспользоватьУпаковкиНоменклатуры ИЛИ ТекущаяСтрока["Упаковка" + ИмяКолонки] = ЭлементХарактеристика["Упаковка" + ИмяКолонки] Тогда
						ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
					Иначе
						
						// Определим коэффициент упаковки влияющей цены
						КоэффициентУпаковкиЦеныНазначения = 1;
						
						Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И ТаблицаКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда

							ПараметрыПоиска = Новый Структура("Номенклатура, Упаковка", ЭлементХарактеристика.Номенклатура, Упаковка);
							МассивНайденныхСтрок = ТаблицаКоэффициентовУпаковокНоменклатуры.НайтиСтроки(ПараметрыПоиска);
							Если МассивНайденныхСтрок.Количество() > 0 Тогда
								КоэффициентУпаковкиЦеныНазначения = МассивНайденныхСтрок[0].Коэффициент;
							КонецЕсли;
							
						КонецЕсли;
						
						Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
						Иначе
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки] / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Отображение строки отбора в формах Цены номенклатуры (прайс-лист) и Цены поставщиков
Процедура НастроитьЗаголовокОтбора(Форма) Экспорт
	
	Если Форма.КомпоновщикНастроекОтбор.Настройки.Отбор.Элементы.Количество() > 0
		И СтрДлина(СокрЛП(Строка(Форма.КомпоновщикНастроекОтбор.Настройки.Отбор))) > 0 Тогда
		Форма.ГиперссылкаУстановленОтбор = НСтр("ru = 'Установлен отбор:'")
		                           + " " + Строка(Форма.КомпоновщикНастроекОтбор.Настройки.Отбор);
		Форма.Элементы.ГиперссылкаУстановленОтбор.Видимость = Истина;
	Иначе
		Форма.ГиперссылкаУстановленОтбор = "";
		Форма.Элементы.ГиперссылкаУстановленОтбор.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Создать таблицу упаковок номенклатуры
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками Номенклатура и Упаковка
//
Функция СоздатьТаблицуУпаковокНоменклатуры() 
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Упаковка", 		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Возврат Таблица;
	
КонецФункции

// Функция - Получить таблицу упаковок номенклатуры из массива структур
//
// Параметры:
//  Массив	 - 	Массив -  массив структур с ключами Номенклатура и Упаковка
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со строками из массива структур
//
Функция ПолучитьТаблицуУпаковокНоменклатурыИзМассиваСтруктур(Массив) Экспорт 
	
	Таблица = СоздатьТаблицуУпаковокНоменклатуры();	
	
	Для Каждого Структура Из Массив Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьСоответствиеКоэффициентовПоМассивуСтруктурУпаковокНоменклатуры(МассивСтруктурУпаковокНоменклатуры) Экспорт 
	
	ТаблицаУпаковокНоменклатуры = ПолучитьТаблицуУпаковокНоменклатурыИзМассиваСтруктур(МассивСтруктурУпаковокНоменклатуры); 
	Возврат КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры);
	
КонецФункции

#КонецОбласти