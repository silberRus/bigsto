
#Область ПрограммныйИнтерфейс

#Область Константы

// Возвращает структуру, описывающую "подчиненные" константы для указанной "родительской" константы.
//
//	Параметры:
//		ИмяРодительскойКонстанты 	  - Строка - имя константы как оно задано в конфигураторе
//		ЗначениеРодительскойКонстанты - Произвольный - значение константы
//
//	Возвращаемое значение:
//		Структура
//			Ключ 	 - имя подчиненной константы
//			Значение - значение подчиненной константы, соответствующее значению родительской константы
//
Функция ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты) Экспорт
	
	Результат 		= Новый Структура;
	ТаблицаКонстант = ОбщегоНазначенияУТПовтИсп.ПолучитьТаблицуЗависимостиКонстант();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Для Каждого СтрокаТаблицы Из ПодчиненныеКонстанты Цикл
		Результат.Вставить(СтрокаТаблицы.ИмяПодчиненнойКонстанты, СтрокаТаблицы.ЗначениеПодчиненнойКонстанты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак наличия у константы "подчиненных" констант.
//
//	Параметры:
//		ИмяРодительскойКонстанты 	  - Строка - имя константы как оно задано в конфигураторе
//		ЗначениеРодительскойКонстанты - Произвольный - значение константы
//
//	Возвращаемое значение:
//		Булево - если Истина, то у константы есть "подчиненные" ей константы.
//
Функция ЕстьПодчиненныеКонстанты(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты) Экспорт
	
	ТаблицаКонстант = ОбщегоНазначенияУТПовтИсп.ПолучитьТаблицуЗависимостиКонстант();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Возврат ПодчиненныеКонстанты.Количество() > 0;
	
КонецФункции

// Возвращает структуру, описывающую "родительские" константы для указанных "подчиненных" констант.
//
//	Параметры:
//		СтруктураПодчиненныхКонстант - Структура - имена подчиненных констант
//
//	Возвращаемое значение:
//		Структура
//			Ключ - имя родительской константы
//
Функция ПолучитьСтруктуруРодительскихКонстант(СтруктураПодчиненныхКонстант) Экспорт
	
	ТаблицаКонстант 	  = ОбщегоНазначенияУТПовтИсп.ПолучитьТаблицуЗависимостиКонстант();
	ОбработанныеКонстанты = Новый Структура;
	
	Результат = ПолучитьСтруктуруРодительскихКонстантРекурсивно(
		СтруктураПодчиненныхКонстант,
		ТаблицаКонстант,
		ОбработанныеКонстанты);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, описывающую "подчиненные" константы для указанной "родительской" константы.
//
//	Параметры:
//		ИмяРодительскойКонстанты - Структура - имя родительской константы
//
//	Возвращаемое значение:
//		Структура
//			Ключ - имя подчиненной константы
//
Функция ПолучитьСтруктуруПодчиненныхКонстант(ИмяРодительскойКонстанты) Экспорт
	
	ТаблицаКонстант = ОбщегоНазначенияУТПовтИсп.ПолучитьТаблицуЗависимостиКонстант();
	ОбработанныеКонстанты = Новый Структура;
	
	Результат = ПолучитьСтруктуруПодчиненныхКонстантРекурсивно(
		ИмяРодительскойКонстанты,
		ТаблицаКонстант,
		ОбработанныеКонстанты);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения констант в новой ИБ по умолчанию.
//
Функция ПолучитьЗначенияКонстантПоУмолчанию() Экспорт
	
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Результат = Новый Структура;
	
	// Служебные константы
	Результат.Вставить("БазоваяВерсия", 				 БазоваяВерсия);
	Результат.Вставить("НеБазоваяВерсия", 				 Не БазоваяВерсия);
	Результат.Вставить("ИспользоватьУправлениеДоступом", Не БазоваяВерсия);
	Результат.Вставить("ОтветственныйВДокументах",		 Не БазоваяВерсия);
	
	Результат.Вставить("ИспользоватьНачислениеЗарплаты", Ложь); // в УТ11
	
	Результат.Вставить("ИспользоватьПроизводство", Ложь); // в УТ11

	
	// Варианты обособления
	Результат.Вставить("ВариантОбособленияТоваровВПродажах",               Перечисления.ВариантыОбособленияТоваровВПродажах.ЗаказКлиента);
	Результат.Вставить("ВариантОбособленияТоваровВПеремещении",            Перечисления.ВариантыОбособленияТоваровВПеремещении.НазначениеПолучателя);
	Результат.Вставить("ВариантОбособленияТоваровВоВнутреннемПотреблении", Перечисления.ВариантыОбособленияТоваровВоВнутреннемПотреблении.ЗаказНаВнутреннееПотребление);
	Результат.Вставить("ВариантОбособленияТоваровВСборке",                 Перечисления.ВариантыОбособленияТоваровВСборке.НазначениеСобираемогоКомплекта);
	
	ТекущийРежим = Метаданные.РежимСовместимостиИнтерфейса;
	Такси = (ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.Такси
		ИЛИ ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.ТаксиРазрешитьВерсия8_2)
		ИЛИ БазоваяВерсия;
	Результат.Вставить("ИнтерфейсВерсии82", НЕ Такси);
	
	// Соглашения с клиентами
	Результат.Вставить("ИспользованиеСоглашенийСКлиентами", 					 Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать);
	Результат.Вставить("ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами", Ложь);
	Результат.Вставить("ИспользоватьТиповыеСоглашенияСКлиентами", 				 Ложь);
	Результат.Вставить("ИспользоватьИндивидуальныеСоглашенияСКлиентами", 		 Ложь);
	
	// Этапы оплаты
	Если БазоваяВерсия Тогда
		Результат.Вставить("ИспользованиеЭтаповОплатыВЗакупках", Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема);
		Результат.Вставить("ИспользованиеЭтаповОплатыВПродажах", Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема);
	Иначе
		Результат.Вставить("ИспользованиеЭтаповОплатыВЗакупках", Перечисления.ИспользованиеЭтаповОплаты.РасширеннаяНастройка);
		Результат.Вставить("ИспользованиеЭтаповОплатыВПродажах", Перечисления.ИспользованиеЭтаповОплаты.РасширеннаяНастройка);
	КонецЕсли;
	
	Если БазоваяВерсия Тогда
		Результат.Вставить("ИспользоватьНесколькоКасс", Ложь);
		Результат.Вставить("ИспользоватьДоверенностиНаПолучениеТМЦ", Истина);
		Результат.Вставить("ИспользоватьОтчетДвиженияЗаказов", Ложь);
	Иначе
		Результат.Вставить("ИспользоватьОтчетДвиженияЗаказов", Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Получить());
	КонецЕсли;
	
	// Оценка рентабельности продаж
	Результат.Вставить("СтоимостьТоваровПриОценкеРентабельностиПродажи", Перечисления.СтоимостьТоваровПриОценкеРентабельностиПродажи.ПоРасчетнойСебестоимости);
	
	// ABC/XYZ классификация номенклатуры
	Результат.Вставить("ПериодABCКлассификацииНоменклатуры", 			 Перечисления.Периодичность.Месяц);
	Результат.Вставить("ПериодXYZКлассификацииНоменклатуры", 			 Перечисления.Периодичность.Месяц);
	Результат.Вставить("ПодпериодXYZКлассификацииНоменклатуры", 		 Перечисления.Периодичность.Месяц);
	Результат.Вставить("КоличествоПериодовABCКлассификацииНоменклатуры", 1);
	Результат.Вставить("КоличествоПериодовXYZКлассификацииНоменклатуры", 2);
	
	// ABC/XYZ классификация партнеров
	Результат.Вставить("ПериодABCКлассификацииПартнеров", 			  Перечисления.Периодичность.Месяц);
	Результат.Вставить("ПериодXYZКлассификацииПартнеров", 			  Перечисления.Периодичность.Месяц);
	Результат.Вставить("ПодпериодXYZКлассификацииПартнеров", 		  Перечисления.Периодичность.Месяц);
	Результат.Вставить("КоличествоПериодовABCКлассификацииПартнеров", 1);
	Результат.Вставить("КоличествоПериодовXYZКлассификацииПартнеров", 2);
	
	// Расчет товарных ограничений
	Результат.Вставить("ПериодРасчетаТоварныхОграничений", 			   Перечисления.Периодичность.Месяц);
	Результат.Вставить("КоличествоПериодовРасчетаТоварныхОграничений", 2);
	
	// Номенклатура
	Результат.Вставить("ИспользоватьНесколькоВидовНоменклатуры", 			Не БазоваяВерсия);
	Результат.Вставить("КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов", Не БазоваяВерсия);
	Результат.Вставить("КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик", 			Истина);
	Результат.Вставить("МаксимальноеКоличествоЭлементовВДеревеОтборовНоменклатуры", 			50);
	Результат.Вставить("ДопустимоеОтклонениеПриОкругленииКоличества", 			                3);
	
	// Номенклатура, продаваемая совместно
	Результат.Вставить("ПериодичностьДляАнализаНоменклатурыПродаваемойСовместно", 		Перечисления.Периодичность.Год);
	Результат.Вставить("МинимальнаяДостоверностьНоменклатурыПродаваемойСовместно", 		60);
	Результат.Вставить("МинимальнаяЗначимостьНоменклатурыПродаваемойСовместно", 		0);
	Результат.Вставить("МинимальныйПроцентСлучаевНоменклатурыПродаваемойСовместно", 	10);
	Результат.Вставить("КоличествоПериодовДляАнализаНоменклатурыПродаваемойСовместно", 	1);
	
	// Дополнительная колонка печатных форм документов
	Результат.Вставить("ДополнительнаяКолонкаПечатныхФормДокументов", Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
	
	// Вывод скидок в печатные формы
	Результат.Вставить("ОтображениеСкидокВПечатныхФормахДокументовПродажи", Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	
	// Изменения законодательства
	Результат.Вставить("ДатаНачалаПримененияПриказа107н", '20140101');
	Результат.Вставить("ДатаНачалаПримененияПриказа126н", '20150101');
	
	// Партнеры и контрагенты
	// По умолчанию используются только партнеры, так как включение признака
	// "Использовать партнеров и контрагентов" не подлежит обратному изменению.
	Результат.Вставить("ИспользоватьПартнеровИКонтрагентов", Ложь);
	
	// Использование согласования продаж и возвратов
	// По умолчанию используем внутреннее согласование, не через 1С:Документооборот
	Результат.Вставить("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов", 				 Истина);
	Результат.Вставить("ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов", Истина);
	Результат.Вставить("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений", 		 Истина);
	Результат.Вставить("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами", 			 Истина);
	
	// Использование заданий торговым представителям
	Результат.Вставить("ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются);
	
	// Розница
	Результат.Вставить("ОперацияПриЗакрытииКассовойСмены", Перечисления.ОперацииПриЗакрытииКассовойСмены.Нет);
	
	Если БазоваяВерсия Тогда
		Результат.Вставить("ИспользоватьСинхронизациюДанных", Истина);
	КонецЕсли;
	// Финансы
	Результат.Вставить("ИспользоватьУчетПрочихДоходовРасходов", 	  НЕ БазоваяВерсия);
	Результат.Вставить("ФормироватьФинансовыйРезультат", 			  НЕ БазоваяВерсия);
	Результат.Вставить("ФормироватьУправленческийБаланс", 			  НЕ БазоваяВерсия);
	Результат.Вставить("ИспользоватьПодразделения",					  НЕ БазоваяВерсия);
	Результат.Вставить("ИспользоватьЖурналПлатежей",				  БазоваяВерсия);
	Результат.Вставить("НеИспользоватьЖурналПлатежей",				  НЕ БазоваяВерсия);
	Результат.Вставить("УчитыватьСебестоимостьТоваровПоВидамЗапасов", Истина);
	Результат.Вставить("РаспределениеДопРасходовПоВыбывшимТоварам",   НЕ БазоваяВерсия);
	
	
	// Формирование расходных ордеров
	Результат.Вставить("ПорядокОформленияНакладныхРасходныхОрдеров", Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера);
	Результат.Вставить("РежимФормированияРасходныхОрдеров", Перечисления.РежимыФормированияРасходныхОрдеров.Автоматически);
	Результат.Вставить("РасходныеОрдераФормируютсяМенеджером", Ложь);
	
	// Партионный учет
	Результат.Вставить("ИспользоватьПартионныйУчет", 		НЕ БазоваяВерсия);
	Результат.Вставить("ПартионныйУчетВерсии22", 			НЕ БазоваяВерсия);
	Результат.Вставить("НомерЗаданияКРасчетуСебестоимости", 1);

	// Взаиморачеты
	Результат.Вставить("НомерЗаданияКРаспределениюРасчетовСКлиентами", 1);
	Результат.Вставить("НомерЗаданияКРаспределениюРасчетовСПоставщиками", 1);
	
	// Обеспечение потребностей
	Результат.Вставить("ИспользоватьРасширенноеОбеспечениеПотребностей", НЕ БазоваяВерсия);
	Результат.Вставить("НеИспользоватьРасширенноеОбеспечениеПотребностей", БазоваяВерсия);
	
	Результат.Вставить("ФормироватьОтчетностьПоНДС", Истина);
	Результат.Вставить("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения", Истина);
	
	// Счета-фактуры
	Результат.Вставить("СрокВыставленияСчетаФактуры", 5);
	
	// Ордерный склад
	Результат.Вставить("ВариантПриемкиТоваров", Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным);
	
	Результат.Вставить("ИспользоватьВводОстатковВерсии24", Истина);
	
	// Дополним структуру константами, которые имеют подчиненные константы.
	ТаблицаКонстант = ПолучитьТаблицуЗависимостиКонстант();
	ТаблицаКонстант.Свернуть("ИмяРодительскойКонстанты", "");
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	МодельДанных = МодульРаботаВМоделиСервиса.ПолучитьМодельДанныхОбласти();
	
	Для Каждого Строка Из ТаблицаКонстант Цикл
		Если НЕ Результат.Свойство(Строка.ИмяРодительскойКонстанты) 
			И (НЕ ОбщегоНазначения.РазделениеВключено() 
			И НЕ Строка.ИмяРодительскойКонстанты = "НеИспользоватьРазделениеПоОбластямДанных"
			ИЛИ МодельДанных.Получить("Константа."+Строка.ИмяРодительскойКонстанты) <> Неопределено) Тогда
			Результат.Вставить(
				Строка.ИмяРодительскойКонстанты,
				Метаданные.Константы[Строка.ИмяРодительскойКонстанты].Тип.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения констант контролируемых в базовой версии.
//
Функция ЗначенияКонстантКонтролируемыхВБазовойВерсии() Экспорт 
	
	Результат = Новый Структура;
	
	Результат.Вставить(Метаданные.Константы.БазоваяВерсия.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.НеБазоваяВерсия.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ВедетсяРаботаЧерезТорговыхПредставителей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюПартнеровПоВыручке.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыНаПередачуПрав.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоОтгрузкамТоваровСХранения.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриемкамТоваровНаХранение.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАнкетирование.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАссортимент.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьБизнесПроцессыИЗадачи.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьБизнесРегионы.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьБюджетирование.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВерсионированиеОбъектов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВидыСвязейМеждуФизическимиЛицами.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВидыСвязейПартнеров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнешнихПользователей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыАналитическогоУчетаНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыДоступаНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыДоступаПартнеров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыПользователей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыФинансовогоУчета.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоговорыКредитовИДепозитов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЕжедневныеОтчеты1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЖурналПлатежей.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаданияДляУправленияТорговымиПредставителями.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаданияТорговымПредставителямДляПланирования.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаметки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗапретОтгрузки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаявкиНаРасходованиеДенежныхСредств.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИмпортныеЗакупкиНеотфактурованнойПоставки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИмпортныеЗакупкиТоваровВПути.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКачествоТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКоммерческиеПредложенияКлиентам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКонкурентнуюРазведку.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредств.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьМаркетинговыеМероприятия.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьМногооборотнуюТару.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьМониторингЦелевыхПоказателей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНаборы.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНапоминанияПользователя.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНачислениеЗарплаты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоОрганизаций.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНоменклатуруПродаваемуюСовместно.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНеотфактурованныеПоставки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбобщенныйУчетНекачественныхТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОрдерныеСклады.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтгрузкуБезПереходаПраваСобственности.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПервичныйСпрос.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПеремещениеПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПеренаправлениеЗадач.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеЗакупок.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеПродаж.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеПродажПоКатегориям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеСборкиРазборки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСбалансированностьПлановУТ.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодарочныеСертификаты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодразделения.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПоступлениеПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПочтовыйКлиент.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПризнакРассмотрено.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПродажуАгентскихУслуг.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроекты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроизводство.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроцессыИЗадачи1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПрочиеВзаимодействия.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРаздельныйУчетПоНалогообложению.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРеализациюПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРейтингиПродажНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРолиКонтактныхЛицПартнеров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРолиПартнеровИКонтактныхЛицВСделкахИПроектах.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСвязанныеДокументы1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСделкиСКлиентами.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСегментыНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСегментыПартнеров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСезонныеКоэффициенты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСертификатыНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеЗаказовКлиентов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеЗаказовПоставщикам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеКоммерческихПредложений.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеСоглашенийСКлиентами.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеЦенНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСписаниеПринятыхНаХранениеТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовНаВнутреннееПотребление.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовНаПеремещение.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовНаСборку.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовПоставщикам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыПеремещенийТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыРеализацийТоваровУслуг.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыСборокТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСчетаНаОплатуКлиентам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТоварныеКатегории.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТоварыВПутиОтПоставщиков.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУпаковочныеЛисты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеДоставкой.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеДоступом.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеКоллекциями.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеПеремещениемОбособленныхТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеСделками.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправленческуюОрганизацию.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУпрощеннуюСхемуОплатыВЗакупках.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУпрощеннуюСхемуОплатыВПродажах.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользоватьФайловоеХранилище1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьФорматыМагазинов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЦеновыеГруппы.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЭлектроннуюПочту1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.КонтролироватьПревышениеЛимитовРасходаДенежныхСредств.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НазначатьСкидкиПоКнопкеРасчетВЧекеККМ.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОплаты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьЖурналПлатежей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРасширенноеОбеспечениеПотребностей.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.РазрешитьОбособлениеТоваровСверхПотребности.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ОграничиватьДоступНаУровнеЗаписей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ПредлагатьДополнитьДокументыМногооборотнойТарой.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ПроверятьЭлектронныеПодписиНаСервере.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРазделениеПоОбластямДанных.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.РедактироватьАдресаДоставкиТолькоВДиалоге.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.СоздаватьЭлектронныеПодписиНаСервере.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ЭтоАвтономноеРабочееМесто.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанных.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.УправлениеТорговлей.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФиксироватьПервичныйИнтерес.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФиксироватьПретензииКлиентов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьВидыЗапасовПоГруппамФинансовогоУчета.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьВидыЗапасовПоПодразделениямМенеджерам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьВидыЗапасовПоПоставщикам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьВидыЗапасовПоСделкам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьОтчетностьПоНДС.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ФормироватьУправленческийБаланс.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьФинансовыйРезультат.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменЭДМеждуОрганизациями.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетПрочихДоходовРасходовРегл.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, Ложь);
	
	// Прочие начальные значения
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоверенностиНаПолучениеТМЦ.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользованиеЭтаповОплатыВЗакупках.Имя, Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема);
	Результат.Вставить(Метаданные.Константы.ИспользованиеЭтаповОплатыВПродажах.Имя, Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтчетДвиженияЗаказов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСинхронизациюДанных.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ФормироватьУправленческийБаланс.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПартионныйУчет.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь);
	
	
	Возврат Результат;
	
КонецФункции

// Возвращает список констант, которые доступны для изменения в базовой версии.
//
Функция КонстантыДоступныеВБазовойВерсии() Экспорт 

	Результат = Новый Структура;
	Результат.Вставить(Метаданные.Константы.ИспользоватьЭлектронныеПодписи.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьШифрование.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетПрочихДоходовРасходов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСерииНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ВестиОтдельнуюНумерациюСчетовФактурНаАвансы.Имя);
	Результат.Вставить(Метаданные.Константы.ВестиСведенияДляДекларацийАлкоВРознице.Имя);
	Результат.Вставить(Метаданные.Константы.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи.Имя);
	Результат.Вставить(Метаданные.Константы.ДатаОбновленияПовторноИспользуемыхЗначенийМРО.Имя);
	Результат.Вставить(Метаданные.Константы.ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД.Имя);
	Результат.Вставить(Метаданные.Константы.ЗапретитьПоступлениеТоваровБезНомеровГТД.Имя);
	Результат.Вставить(Метаданные.Константы.ПроверятьЗаполнениеНомеровГТДПриЗакупкеУПоставщикаПоСхемеТоварыВПути.Имя);
	Результат.Вставить(Метаданные.Константы.КонтролироватьОстаткиНомеровГТДПриЗакупкеУПоставщикаПоСхемеТоварыВПути.Имя);
	Результат.Вставить(Метаданные.Константы.КонтролироватьОстаткиНомеровГТДПриИмпортеПоСхемеТоварыВПути.Имя);
	Результат.Вставить(Метаданные.Константы.ИзменятьЗаданияЗаднимЧислом.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользованиеКлассификаторовНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАвтоматическоеЗакрытиеСтрокЗаказовМерныхТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПеремещения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьБонусныеПрограммыЛояльности.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВводОстатковВерсии24.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееПотребление.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееСогласованиеЗаказовКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееСогласованиеКоммерческихПредложений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГрафикиОплаты.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДатуИВремяВСрокахЗадач.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДатуНачалаЗадач.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДатыЗапретаЗагрузки.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДатыЗапретаИзменения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоговорыМеждуОрганизациями.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоговорыСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоговорыСПоставщиками.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДополнительныеОтчетыИОбработки.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДополнительныеРеквизитыИСведения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЕдиницыИзмеренияДляОтчетов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыНаВнутреннееПотребление.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыНаПеремещение.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыНаСборку.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыПоставщикам.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыПоставщикамИЗаявкиНаРасходованиеДС.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИмпортныеЗакупки.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИмпортныеТовары.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИндивидуальныеСоглашенияСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОнлайнПоддержку.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИнтеграциюСЯндексКассой.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКартыЛояльности.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриЗакупках.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриЗакупкахБазовая.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриЗакупкахНеБазовая.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриПродажах.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриПродажахБазовая.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриПродажахНеБазовая.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКорректировкиПриобретений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКорректировкиРеализаций.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьМобильноеПриложение1СЗаказыКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНДС0.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоВалют.Имя);
	Результат.Вставить(Метаданные.Константы.ВалютыУпрИРеглУчетаСовпадают.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоВидовНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоВидовЦен.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоКасс.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоКассККМ.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоПроизводственныхКалендарей.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоРасчетныхСчетов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоРасчетныхСчетовКасс.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоСкладов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНоменклатуруПоставщиков.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменБизнесСеть.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменСБанками.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменССайтом.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменЭД.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбщиеДополнительныеЗначения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОплатуПлатежнымиКартами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтветственноеХранение.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтправкуSMSВШаблонахСообщений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПартнеровИКонтрагентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПартнеровКакКонтрагентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПередачиТоваровМеждуОрганизациями.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПеремещениеТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодключаемоеОборудование.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодключаемоеОборудованиеИОплатуПлатежнымиКартами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодчиненныеБизнесПроцессы.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПолнотекстовыйПоиск.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПолнотекстовыйПоискПриПодбореТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПричиныОтменыЗаказовКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПричиныОтменыЗаказовПоставщикам.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроверкуКонтрагентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПродажиНаЭкспортНесырьевыхТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПрочееОприходованиеТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРеглУчет.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРозничныеПродажи.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРучныеСкидкиВЗакупках.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРучныеСкидкиВПродажах.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСборкуРазборку.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСервисСПАРКРиски.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСинхронизациюДанныхВЛокальномРежиме.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСинхронизациюДанныхВМоделиСервиса.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСоглашенияСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСоглашенияСПоставщиками.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыАвансовыхОтчетов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТиповыеСоглашенияСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТТН.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУпаковкиНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеПроизводством.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеПроизводством2_2.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетДрагоценныхМатериалов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетПрочихАктивовПассивов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьХарактеристикиНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьШаблоныСообщений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьШтрихкодированиеПечатныхФормОбъектов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЭлектроннуюПочтуВШаблонахСообщений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользуетсяОбменСБухгалтериейПредприятия.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользуетсяСборкаРазборкаИСерииНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользуютсяПрофилиБезопасности.Имя);
	Результат.Вставить(Метаданные.Константы.ИсточникДанныхАдресногоКлассификатора.Имя);
	Результат.Вставить(Метаданные.Константы.КомплекснаяАвтоматизация.Имя);
	Результат.Вставить(Метаданные.Константы.КонтролироватьВыдачуПодОтчетВРазрезеЦелей.Имя);
	Результат.Вставить(Метаданные.Константы.КонтролироватьОстаткиТоваровОрганизаций.Имя);
	Результат.Вставить(Метаданные.Константы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Имя);
	Результат.Вставить(Метаданные.Константы.НеВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи.Имя);
	Результат.Вставить(Метаданные.Константы.НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Имя);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки.Имя);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки.Имя);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьБизнесРегионы.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьВводОстатковВерсии24.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьЗаявкиНаРасходованиеДенежныхСредств.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоВалют.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоКасс.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоКассККМ.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоОрганизаций.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоРасчетныхСчетов.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоСкладов.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРозничныеПродажи.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьЦеновыеГруппы.Имя);
	Результат.Вставить(Метаданные.Константы.НеФормироватьФинансовыйРезультат.Имя);
	Результат.Вставить(Метаданные.Константы.ОтветственныйВДокументах.Имя);
	Результат.Вставить(Метаданные.Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Имя);
	Результат.Вставить(Метаданные.Константы.ОтложенноеОбновлениеЗавершеноУспешно.Имя);
	Результат.Вставить(Метаданные.Константы.ОтправлятьПисьмаВФорматеHTML.Имя);
	Результат.Вставить(Метаданные.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Имя);
	Результат.Вставить(Метаданные.Константы.РазрешенаРаботаСНовостями.Имя);
	Результат.Вставить(Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Имя);
	Результат.Вставить(Метаданные.Константы.РазрешенаРаботаСОблачнымАрхивом.Имя);
	Результат.Вставить(Метаданные.Константы.РаспределятьНДС.Имя);
	Результат.Вставить(Метаданные.Константы.РассчитыватьПредварительнуюСтоимостьРегламентнымЗаданием.Имя);
	Результат.Вставить(Метаданные.Константы.РасходныеОрдераФормируютсяМенеджером.Имя);
	Результат.Вставить(Метаданные.Константы.СайтСоздан.Имя);
	Результат.Вставить(Метаданные.Константы.СинхронизироватьФайлы.Имя);
	Результат.Вставить(Метаданные.Константы.УправлениеПредприятием.Имя);
	Результат.Вставить(Метаданные.Константы.ХранитьФайлыВТомахНаДиске.Имя);
	Результат.Вставить(Метаданные.Константы.АвтоматическиСоздаватьПартнеровПриОтправкеЭлектронногоЧекаПокупателю.Имя);
	Результат.Вставить(Метаданные.Константы.НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУдалениеПомеченныхОбъектов.Имя);
	Результат.Вставить(Метаданные.Константы.ПродажаТоваровОблагаемыхНДСУПокупателя.Имя);
	Результат.Вставить(Метаданные.Константы.ПокупкаТоваровОблагаемыхНДСУПокупателя.Имя);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения констант контролируемых в НЕ базовой версии.
//
Функция ЗначенияКонстантКонтролируемыхВНеБазовойВерсии() Экспорт 
	
	Результат = Новый Структура;
	
	Результат.Вставить(Метаданные.Константы.БазоваяВерсия.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеБазоваяВерсия.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеДоступом.Имя, Истина);
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Результат.Вставить(Метаданные.Константы.ИспользоватьОтчетДвиженияЗаказов.Имя, Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Получить());
	Иначе
		Результат.Вставить(Метаданные.Константы.ИспользоватьОтчетДвиженияЗаказов.Имя, Ложь);
	КонецЕсли; 
	
	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонстантыСлужебные

// Возвращает таблицу, описывающую зависимость констант в конфигурации.
// Каждая строка таблицы означает:
// для родительской константы со значением Х допустимо только значение Y для подчиненной константы.
//
// Возвращаемое значение:
//	ТаблицаЗначений с колонками
//		- ИмяРодительскойКонстанты
//		- ИмяПодчиненнойКонстанты
//		- ЗначениеРодительскойКонстанты
//		- ЗначениеПодчиненнойКонстанты
//
Функция ПолучитьТаблицуЗависимостиКонстант() Экспорт
	
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеРодительскойКонстанты");
	Результат.Колонки.Добавить("ЗначениеПодчиненнойКонстанты");
	
	Результат.Индексы.Добавить("ИмяРодительскойКонстанты");
	Результат.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	
	// Бизнес-процессы и задачи
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеЗаказовКлиентов", 					Истина, "ИспользоватьБизнесПроцессыИЗадачи", 	 Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеЗаказовПоставщикам", 				Истина, "ИспользоватьБизнесПроцессыИЗадачи", 	 Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов", Истина, "ИспользоватьБизнесПроцессыИЗадачи", 	 Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеКоммерческихПредложений", 			Истина, "ИспользоватьБизнесПроцессыИЗадачи", 	 Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеСоглашенийСКлиентами", 			Истина, "ИспользоватьБизнесПроцессыИЗадачи", 	 Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеЦенНоменклатуры", 					Истина, "ИспользоватьБизнесПроцессыИЗадачи", 	 Истина);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьБизнесПроцессыИЗадачи", 						Ложь, 	"ИспользоватьПодчиненныеБизнесПроцессы", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьБизнесПроцессыИЗадачи", 						Ложь, 	"ИзменятьЗаданияЗаднимЧислом", 			 Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьБизнесПроцессыИЗадачи", 						Ложь, 	"ИспользоватьДатуНачалаЗадач", 			 Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьБизнесПроцессыИЗадачи", 						Ложь, 	"ИспользоватьДатуИВремяВСрокахЗадач", 	 Ложь);
	
	// Почта
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПочтовыйКлиент", Ложь, "ИспользоватьПризнакРассмотрено", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПочтовыйКлиент", Ложь, "ИспользоватьПрочиеВзаимодействия", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПочтовыйКлиент", Ложь, "ОтправлятьПисьмаВФорматеHTML", 	Ложь);
	
	// Управление доступом
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ОграничиватьДоступНаУровнеЗаписей", Ложь, "ИспользоватьГруппыДоступаПартнеров", 			  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ОграничиватьДоступНаУровнеЗаписей", Ложь, "ИспользоватьГруппыДоступаНоменклатуры", 		  Ложь);
	
	// Полнотекстовый поиск
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПолнотекстовыйПоиск", Ложь, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров", Ложь);
	
	// Синхронизация данных
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьОбменССайтом", Истина, "ИспользоватьДополнительныеРеквизитыИСведения", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьФасовкуВесовогоТовара", Истина, "ПрефиксВесовогоШтрихкода", 2);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьФасовкуВесовогоТовара", Ложь, "ПрефиксВесовогоШтрихкода", 1);
	
	// ЭДО
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьОбменЭД", 						Ложь, "ИспользоватьОбменЭДМеждуОрганизациями", 				 Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьОбменЭД", 						Ложь, "ИспользоватьОбменСБанками", 				     		 Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьОбменЭД", 						Ложь, "ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЭлектронныеПодписи", 			Ложь, "ИспользоватьОбменЭДМеждуОрганизациями", 			   	 Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЭлектронныеПодписи", 			Ложь, "ИспользоватьОбменСБанками", 		    				 Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЭлектронныеПодписи", 			Ложь, "ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов", Ложь);
		
	//Технология сервиса
	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"НеИспользоватьРазделениеПоОбластямДанных", Истина, "НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА", ЭтоКА);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"НеИспользоватьРазделениеПоОбластямДанных", Ложь, "НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА", Ложь);
		
	ЭтоУТ = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"НеИспользоватьРазделениеПоОбластямДанных", Истина, "НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ", ЭтоУТ);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"НеИспользоватьРазделениеПоОбластямДанных", Ложь, "НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ", Ложь);
	
	// Организации и финансы
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПартионныйУчет",                 	 Ложь,   "ИспользоватьРаздельныйУчетПоНалогообложению", 			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПартионныйУчет",                 	 Ложь,   "ПартионныйУчетВерсии22", 									Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ПартионныйУчетВерсии22",                 	 	 Истина, "ИспользоватьПартионныйУчет", 								Истина);
	
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ПартионныйУчетВерсии22",                 	 	 Ложь,   "РаспределениеДопРасходовПоВыбывшимТоварам",				Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСделкиСКлиентами", 		   	   	 Ложь,   "ФормироватьВидыЗапасовПоСделкам",  				   		Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПодразделения", 	 				 Ложь,	 "ФормироватьВидыЗапасовПоПодразделениямМенеджерам", 		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПодразделения", 	 				 Ложь,	 "ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям",Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПодразделения", 	 				 Ложь,	 "ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс",	Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьУчетПрочихДоходовРасходов", 	   	 Ложь,   "ФормироватьФинансовыйРезультат", 				   			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьУчетПрочихДоходовРасходов", 	   	 Ложь,   "ИспользоватьУчетПрочихДоходовРасходовРегл",	   			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьУчетПрочихДоходовРасходов", 	   	 Истина, "ИспользоватьУчетПрочихДоходовРасходовРегл",	   			Истина);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоОрганизаций", 		   	 Истина, "ИспользоватьНесколькоКасс",  							   	Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоОрганизаций", 		   	 Истина, "ИспользоватьНесколькоКассККМ",  						   	Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоОрганизаций", 		   	 Истина, "ИспользоватьНесколькоРасчетныхСчетов",  				  	Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоОрганизаций", 		   	 Ложь,   "ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоОрганизаций", 		   	 Ложь,   "ИспользоватьПередачиТоваровМеждуОрганизациями",  		   	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоОрганизаций", 		   	 Ложь,   "ИспользоватьУправленческуюОрганизацию",  				   	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоОрганизаций", 		   	 Ложь,   "ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоОрганизаций", 		   	 Ложь,   "ИспользоватьДоговорыМеждуОрганизациями", 				   	Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПередачиТоваровМеждуОрганизациями", Ложь, 	 "ПеремещатьТоварыДругихОрганизаций", 						Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПередачиТоваровМеждуОрганизациями", Ложь,   "ИспользоватьДоговорыМеждуОрганизациями", 				   	Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаявкиНаРасходованиеДенежныхСредств",  Ложь,  "ИспользоватьЛимитыРасходаДенежныхСредств", 					Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаявкиНаРасходованиеДенежныхСредств",  Ложь,  "КонтролироватьПревышениеЛимитовРасходаДенежныхСредств", 	Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЛимитыРасходаДенежныхСредств", Истина, "КонтролироватьПревышениеЛимитовРасходаДенежныхСредств",	Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЛимитыРасходаДенежныхСредств", Ложь, "ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям",		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЛимитыРасходаДенежныхСредств", Ложь, "ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЛимитыРасходаДенежныхСредств", Ложь, "КонтролироватьПревышениеЛимитовРасходаДенежныхСредств",		Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаявкиНаРасходованиеДенежныхСредств", Истина, "ИспользоватьЖурналПлатежей",						Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"УчитыватьСебестоимостьТоваровПоВидамЗапасов", Ложь, "ИспользоватьТоварыВПутиОтПоставщиков", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ПартионныйУчетВерсии22", Ложь, "ИспользоватьТоварыВПутиОтПоставщиков", Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"УчитыватьСебестоимостьТоваровПоВидамЗапасов", Ложь, "ИспользоватьНеотфактурованныеПоставки", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ПартионныйУчетВерсии22", Ложь, "ИспользоватьНеотфактурованныеПоставки", Ложь);
		
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьДоговорыСКлиентами", Ложь, "АвтоПостановкаКлиентовНаМониторингСПАРК", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьДоговорыСПоставщиками", Ложь, "АвтоПостановкаПоставщиковНаМониторингСПАРК", Ложь);
	
	// Склад и доставка
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьОрдерныеСклады", 		Ложь,	"ИспользоватьУпаковочныеЛисты", 					  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоСкладов", 	Ложь, 	"ИспользоватьПеремещениеТоваров", 					  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоСкладов", 	Ложь, 	"ИспользоватьСкладыВТабличнойЧастиДокументовПродажи", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоСкладов", 	Ложь, 	"ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПеремещениеТоваров", 	Ложь, 	"ИспользоватьЗаказыНаПеремещение", 					  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПеремещениеТоваров", 	Ложь, 	"ИспользоватьСтатусыПеремещенийТоваров", 			  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПеремещениеТоваров", 	Ложь, 	"ПеремещатьТоварыДругихОрганизаций", 				  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПеремещениеТоваров", 	Ложь, 	"ИспользоватьАктыРасхожденийПослеПеремещения", 		  Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыНаПеремещение", 	Ложь, 	"ИспользоватьПеремещениеПоНесколькимЗаказам", 		  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыНаПеремещение", 	Ложь, 	"ИспользоватьСтатусыЗаказовНаПеремещение", 			  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыНаПеремещение", Ложь, "НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки",		  Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСтатусыЗаказовНаПеремещение", Ложь, "НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки",Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьУправлениеДоставкой", 	Ложь, 	"РедактироватьАдресаДоставкиТолькоВДиалоге",		  Ложь);
	
	// Настройки номенклатуры
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоВидовНоменклатуры", Ложь, "ИспользоватьНаборы", Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоВидовНоменклатуры", Ложь, "ИспользоватьМногооборотнуюТару", Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКачествоТоваров", 	  Ложь, "ИспользоватьОбобщенныйУчетНекачественныхТоваров", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьМногооборотнуюТару", Ложь, "ПредлагатьДополнитьДокументыМногооборотнойТарой", Ложь);
	
	// Маркетинг и CRM
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНесколькоВидовЦен", 			 Ложь, "СтоимостьТоваровПриОценкеРентабельностиПродажи", Перечисления.СтоимостьТоваровПриОценкеРентабельностиПродажи.ПоРасчетнойСебестоимости);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРучныеСкидкиВПродажах", 		 Ложь, "ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям",   Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРучныеСкидкиВПродажах", 		 Ложь, "ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьАвтоматическиеСкидкиВПродажах", Ложь, "НазначатьСкидкиПоКнопкеРасчетВЧекеККМ", 					  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьАвтоматическиеСкидкиВПродажах", Ложь, "ИспользоватьКартыЛояльности", 								  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьАвтоматическиеСкидкиВПродажах", Ложь, "ИспользоватьБонусныеПрограммыЛояльности",					  Ложь);
	
	// Продажи
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения,
			"ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения,
			"ИспользоватьТиповыеСоглашенияСКлиентами", 				  Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения,
			"ИспользоватьИндивидуальныеСоглашенияСКлиентами", 		  Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения,
			"ИспользоватьСоглашенияСКлиентами", 					  Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения,
			"ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения,
			"ИспользоватьТиповыеСоглашенияСКлиентами", 				  Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения,
			"ИспользоватьИндивидуальныеСоглашенияСКлиентами", 		  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения,
			"ИспользоватьСоглашенияСКлиентами", 					  Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения,
			"ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения,
			"ИспользоватьТиповыеСоглашенияСКлиентами", 				  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения,
			"ИспользоватьИндивидуальныеСоглашенияСКлиентами", 		  Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения,
			"ИспользоватьСоглашенияСКлиентами", 					  Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать,
			"ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать,
			"ИспользоватьТиповыеСоглашенияСКлиентами", 				  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать,
			"ИспользоватьИндивидуальныеСоглашенияСКлиентами", 		  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать,
			"ИспользоватьСоглашенияСКлиентами", 					  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать,
			"ИспользоватьСогласованиеСоглашенийСКлиентами", 		  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать,
			"ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеСоглашенийСКлиентами", Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать,
			"ИспользоватьКомиссиюПриПродажах", 						  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПродажуАгентскихУслуг", Истина,
			"ИспользоватьКомиссиюПриЗакупках", 						  Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВедетсяРаботаЧерезТорговыхПредставителей", Истина,
			"ИспользоватьЗаказыКлиентов", 						      Истина);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКомиссиюПриПродажах", Истина,
			"ИспользоватьКомиссиюПриПродажахБазовая", 				  Истина И БазоваяВерсия);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКомиссиюПриПродажах", Истина,
			"ИспользоватьКомиссиюПриПродажахНеБазовая", 			  Истина И НЕ БазоваяВерсия);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКомиссиюПриПродажах", Ложь,
			"ИспользоватьКомиссиюПриПродажахБазовая", 				  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКомиссиюПриПродажах", Ложь,
			"ИспользоватьКомиссиюПриПродажахНеБазовая", 			  Ложь);
			
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыКлиентов", 					Ложь, 	"ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам", 	  	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыКлиентов", 					Ложь, 	"ИспользоватьРеализациюПоНесколькимЗаказам", 				Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыКлиентов", 					Ложь, 	"ИспользоватьСогласованиеЗаказовКлиентов", 				  	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРасширенныеВозможностиЗаказаКлиента", Ложь, "ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента", 			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРасширенныеВозможностиЗаказаКлиента", Ложь, "ИспользоватьПричиныОтменыЗаказовКлиентов", 				Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов", Ложь, 	"ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"СтоимостьТоваровПриОценкеРентабельностиПродажи", Перечисления.СтоимостьТоваровПриОценкеРентабельностиПродажи.ПоРасчетнойСебестоимости, 
		"НормативныйВидЦен", Справочники.ВидыЦен.ПустаяСсылка());
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРасширенныеВозможностиЗаказаКлиента", 			Ложь, 	"ИспользоватьСогласованиеЗаказовКлиентов", 				  	Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРасширенныеВозможностиЗаказаКлиента", 			Ложь, 	"ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов", Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСтатусыРеализацийТоваровУслуг", 	Ложь, "ИспользоватьОтгрузкуБезПереходаПраваСобственности", 			Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьУправлениеСделками", 				Истина, "ИспользоватьКоммерческиеПредложенияКлиентам", 		  		Истина);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКоммерческиеПредложенияКлиентам", 	Ложь, 	"ИспользоватьСогласованиеКоммерческихПредложений", 		  	Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРозничныеПродажи", 				Ложь, "ОперацияПриЗакрытииКассовойСмены", Перечисления.ОперацииПриЗакрытииКассовойСмены.Нет);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРозничныеПродажи", 				Ложь, "КоличествоДнейХраненияОтложенныхЧеков", 0);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРозничныеПродажи", 				Ложь, "КоличествоДнейХраненияЗаархивированныхЧеков", 0);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРозничныеПродажи", 				Ложь, "ИспользоватьОбменСПодключаемымОборудованиемOffline", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРозничныеПродажи", 				Ложь, "НазначатьСкидкиПоКнопкеРасчетВЧекеККМ", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРозничныеПродажи", 				Ложь, "ИспользоватьПодарочныеСертификаты", Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЭтаповОплатыВПродажах", Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема,
			"ИспользоватьУпрощеннуюСхемуОплатыВПродажах", 	Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЭтаповОплатыВПродажах", Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема,
			"ИспользоватьГрафикиОплаты", 					Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЭтаповОплатыВПродажах", Перечисления.ИспользованиеЭтаповОплаты.РасширеннаяНастройка,
			"ИспользоватьУпрощеннуюСхемуОплатыВПродажах", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЭтаповОплатыВПродажах", Перечисления.ИспользованиеЭтаповОплаты.РасширеннаяНастройка,
			"ИспользоватьГрафикиОплаты", 					Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЭтаповОплатыВПродажах", Перечисления.ИспользованиеЭтаповОплаты.ГрафикиОплаты,
			"ИспользоватьУпрощеннуюСхемуОплатыВПродажах", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЭтаповОплатыВПродажах", Перечисления.ИспользованиеЭтаповОплаты.ГрафикиОплаты,
			"ИспользоватьГрафикиОплаты", 					Истина);
	
	// Экспорт
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПродажиНаЭкспортНесырьевыхТоваров", Истина, "ИспользованиеКлассификаторовНоменклатуры", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг", Истина, "ИспользованиеКлассификаторовНоменклатуры", Истина);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат, "ИспользоватьЗапретОтгрузки", Истина, "ИспользоватьСегментыПартнеров", Истина);
	
	// Алкоголь
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиСведенияДляДекларацийАлкоВРознице", Истина,
		"ВестиСведенияДляДекларацийПоАлкогольнойПродукции", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиСведенияДляДекларацийАлкоВРознице", Ложь,
		"ВестиСведенияДляДекларацийПоАлкогольнойПродукции", Ложь);
	
	// Настройки подключаемого оборудования
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПодключаемоеОборудование", Ложь, "ИспользоватьОбменСПодключаемымОборудованиемOffline", Ложь);
	
	// Торговые представители
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВедетсяРаботаЧерезТорговыхПредставителей", Ложь,
			"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются,
			"ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются,
			"НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями,
			"ИспользоватьЗаданияДляУправленияТорговымиПредставителями", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования,
			"ИспользоватьЗаданияДляУправленияТорговымиПредставителями", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются,
			"ИспользоватьЗаданияДляУправленияТорговымиПредставителями", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования,
			"ИспользоватьЗаданияТорговымПредставителямДляПланирования", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями,
			"ИспользоватьЗаданияТорговымПредставителямДляПланирования", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЗаданийТорговымПредставителям", Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются,
			"ИспользоватьЗаданияТорговымПредставителямДляПланирования", Ложь);
	
	// Запасы и закупки
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыПоставщикам", 			 Ложь, "ИспользоватьСогласованиеЗаказовПоставщикам", 			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыПоставщикам", 			 Ложь, "ИспользоватьПоступлениеПоНесколькимЗаказам", 			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыПоставщикам", 			 Ложь, "НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыПоставщикам", 			 Ложь, "НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты", 			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыПоставщикам", 			 Ложь, "ИспользоватьСтатусыЗаказовПоставщикам", 				Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыПоставщикам", 			 Ложь, "ИспользоватьПричиныОтменыЗаказовПоставщикам", 			Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыНаВнутреннееПотребление", Ложь, "ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыНаВнутреннееПотребление", Ложь, "ИспользоватьСтатусыЗаказовНаВнутреннееПотребление", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыНаВнутреннееПотребление", Ложь, "НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки",	Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНеотфактурованныеПоставки", Истина,
		"ИспользоватьДоговорыСПоставщиками", Истина);
	
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНеотфактурованныеПоставки", Ложь,
		"ИспользоватьИмпортныеЗакупкиНеотфактурованнойПоставки", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьНеотфактурованныеПоставки", Истина,
		"РаспределениеДопРасходовПоВыбывшимТоварам", Истина);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСтатусыЗаказовНаВнутреннееПотребление", Ложь, "НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки",	Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьТоварыВПутиОтПоставщиков", Истина,
		"ИспользоватьДоговорыСПоставщиками", Истина);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьТоварыВПутиОтПоставщиков", Ложь,
		"ИспользоватьИмпортныеЗакупкиТоваровВПути", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьВнутреннееПотребление", 		 Ложь, "ИспользоватьЗаказыНаВнутреннееПотребление", 			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьВнутреннееПотребление", 		 Ложь, "ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам", 	Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСборкуРазборку", 				 Ложь, "ИспользоватьЗаказыНаСборку", 							Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСборкуРазборку", 				 Ложь, "ИспользоватьСтатусыСборокТоваров", 						Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСборкуРазборку", 				 Ложь, "ИспользоватьПланированиеСборкиРазборки", 				Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыНаСборку", 				 Ложь, "ИспользоватьСтатусыЗаказовНаСборку",					Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьЗаказыНаСборку", 				 Ложь, "НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки",			Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСтатусыЗаказовНаСборку", Ложь, "НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки",					Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСтатусыЗаказовПоставщикам", 	 Ложь, "ИспользоватьСогласованиеЗаказовПоставщикам", 			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСтатусыЗаказовПоставщикам", 	 Ложь, "НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления", 	Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСтатусыЗаказовПоставщикам", 	 Ложь, "НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты", 			Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЭтаповОплатыВЗакупках", Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема,
			"ИспользоватьУпрощеннуюСхемуОплатыВЗакупках", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользованиеЭтаповОплатыВЗакупках", Перечисления.ИспользованиеЭтаповОплаты.РасширеннаяНастройка,
			"ИспользоватьУпрощеннуюСхемуОплатыВЗакупках", Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКомиссиюПриЗакупках", Истина,
			"ИспользоватьКомиссиюПриЗакупкахБазовая", 				  Истина И БазоваяВерсия);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКомиссиюПриЗакупках", Истина,
			"ИспользоватьКомиссиюПриЗакупкахНеБазовая", 			  Истина И НЕ БазоваяВерсия);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКомиссиюПриЗакупках", Ложь,
			"ИспользоватьКомиссиюПриЗакупкахБазовая", 				  Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьКомиссиюПриЗакупках", Ложь,
			"ИспользоватьКомиссиюПриЗакупкахНеБазовая", 			  Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьОбособленноеОбеспечениеЗаказов", Ложь, "РазрешитьОбособлениеТоваровСверхПотребности", Ложь);

	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьТоварыВПутиОтПоставщиков", Ложь, "ПроверятьЗаполнениеНомеровГТДПриЗакупкеУПоставщикаПоСхемеТоварыВПути", Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьТоварыВПутиОтПоставщиков", Ложь, "КонтролироватьОстаткиНомеровГТДПриЗакупкеУПоставщикаПоСхемеТоварыВПути", Ложь);
	
	// Импорт
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИмпортныеТовары", Ложь, "ИспользоватьИмпортныеЗакупки", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИмпортныеТовары", Ложь, "ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИмпортныеТовары", Ложь, "ЗапретитьПоступлениеТоваровБезНомеровГТД", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИмпортныеТовары", Ложь, "КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИмпортныеЗакупки", Ложь, "КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИмпортныеЗакупки", Ложь, "ИспользоватьИмпортныеЗакупкиНеотфактурованнойПоставки", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИмпортныеЗакупки", Ложь, "ИспользоватьИмпортныеЗакупкиТоваровВПути", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИмпортныеЗакупки", Истина, "ИспользованиеКлассификаторовНоменклатуры", Истина);
	
	// Интеграция с 1С:Документооборот
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот", 	  Ложь,   "ИспользоватьСогласованиеЧерез1СДокументооборот", 					Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот", 	  Ложь,   "ИспользоватьФайловоеХранилище1СДокументооборота", 					Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот", 	  Ложь,   "ИспользоватьПроцессыИЗадачи1СДокументооборота", 						Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот", 	  Ложь,   "ИспользоватьСвязанныеДокументы1СДокументооборота", 					Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот", 	  Ложь,   "ИспользоватьЕжедневныеОтчеты1СДокументооборота",						Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот", 	  Ложь,   "ИспользоватьЭлектроннуюПочту1СДокументооборота", 					Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьПроцессыИЗадачи1СДокументооборота",  Ложь,   "ИспользоватьСогласованиеЧерез1СДокументооборот", 					Ложь);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеЧерез1СДокументооборот", Истина, "ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеЧерез1СДокументооборот", Истина, "ИспользоватьВнутреннееСогласованиеЗаказовКлиентов", 					Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеЧерез1СДокументооборот", Истина, "ИспользоватьВнутреннееСогласованиеКоммерческихПредложений", 			Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьСогласованиеЧерез1СДокументооборот", Истина, "ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами", 			Ложь);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРасширенныеВозможностиЗаказаКлиента", Истина И НЕ БазоваяВерсия,"ИспользоватьОтчетДвиженияЗаказов", Истина);
		
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьРасширенныеВозможностиЗаказаКлиента", Ложь, "ИспользоватьОтчетДвиженияЗаказов", Ложь);
		
	// Печатные формы, отчеты и обработки
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ОтображениеСкидокВПечатныхФормахДокументовПродажи", Перечисления.ВариантыВыводаСкидокВПечатныхФормах.ВыводитьСкидки,
			"ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ОтображениеСкидокВПечатныхФормахДокументовПродажи", Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки,
			"ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи", Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ОтображениеСкидокВПечатныхФормахДокументовПродажи", Перечисления.ВариантыВыводаСкидокВПечатныхФормах.ВыбиратьПриПечати,
			"ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи", Истина);
	
	// Мобильное приложение 1С:Заказы
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ИспользоватьМобильноеПриложение1СЗаказыКлиентов", Истина, "ИспользоватьЗаказыКлиентов", Истина);
		
	// Производство
	
	
	
	
	
	// Начало ИнтеграцияГИСМ
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиУчетМаркировкиПродукцииВГИСМ", Истина, 	"ИспользованиеКлассификаторовНоменклатуры", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиУчетМаркировкиПродукцииВГИСМ", Истина, 	"ИспользоватьСерииНоменклатуры", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиУчетМаркировкиПродукцииВГИСМ", Истина, 	"ИспользоватьНесколькоВидовНоменклатуры", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиУчетМаркировкиПродукцииВГИСМ", Истина, 	"КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов", Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиУчетМаркировкиПродукцииВГИСМ", Истина, 	"ИспользоватьЭлектронныеПодписи", Истина);
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиУчетМаркировкиПродукцииВГИСМ", Ложь, 	"ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ", Ложь);
	
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"ВестиСведенияДляДекларацийАлкоВРознице", Истина, "ИспользоватьНесколькоВидовНоменклатуры", Истина);
	
	// Конец ИнтеграцияЕГАИС
	
	// Инвертируемые константы (имеющие "двойника" с противоположным значением)
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьБизнесРегионы");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьНесколькоВалют");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьНесколькоОрганизаций");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьНесколькоСкладов");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьПартнеровИКонтрагентов", "ИспользоватьПартнеровКакКонтрагентов");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьЦеновыеГруппы");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ФормироватьФинансовыйРезультат");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьРасширенноеОбеспечениеПотребностей");
	ДобавитьСтрокуИнвертируемыхКонстант(Результат, "ИспользоватьЖурналПлатежей");
	
	// Константы контролируемые в Базовой версии
	ЗначенияКонстант = ОбщегоНазначенияУТПовтИсп.ЗначенияКонстантКонтролируемыхВБазовойВерсии();
	Для каждого ЗначениеКонстанты Из ЗначенияКонстант Цикл
		
		Если ЗначениеКонстанты.Ключ = "БазоваяВерсия" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ИмяРодительскойКонстанты 	  = "БазоваяВерсия";
		НоваяСтрока.ЗначениеРодительскойКонстанты = Истина;
		НоваяСтрока.ИмяПодчиненнойКонстанты 	  = ЗначениеКонстанты.Ключ;
		НоваяСтрока.ЗначениеПодчиненнойКонстанты  = ЗначениеКонстанты.Значение;
	
	КонецЦикла; 
	
	// Константы контролируемые в НЕ Базовой версии
	ЗначенияКонстант = ОбщегоНазначенияУТПовтИсп.ЗначенияКонстантКонтролируемыхВНеБазовойВерсии();
	Для каждого ЗначениеКонстанты Из ЗначенияКонстант Цикл
		
		Если ЗначениеКонстанты.Ключ = "БазоваяВерсия" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ИмяРодительскойКонстанты 	  = "БазоваяВерсия";
		НоваяСтрока.ЗначениеРодительскойКонстанты = Ложь;
		НоваяСтрока.ИмяПодчиненнойКонстанты 	  = ЗначениеКонстанты.Ключ;
		НоваяСтрока.ЗначениеПодчиненнойКонстанты  = ЗначениеКонстанты.Значение;
	
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант,
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты)
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты 	  = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты 	  = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты  = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры

Процедура ДобавитьСтрокуИнвертируемыхКонстант(ТаблицаКонстант,
			ИмяРодительскойКонстанты, ИмяПодчиненнойКонстанты = "")
	
	Если ИмяПодчиненнойКонстанты = "" Тогда
		ИмяПодчиненнойКонстанты = "Не" + ИмяРодительскойКонстанты;
	КонецЕсли;
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант,
		ИмяРодительскойКонстанты, Ложь,   ИмяПодчиненнойКонстанты, Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант,
		ИмяРодительскойКонстанты, Истина, ИмяПодчиненнойКонстанты, Ложь);
	
КонецПроцедуры

Функция ПолучитьСтруктуруРодительскихКонстантРекурсивно(СтруктураПодчиненныхКонстант, ТаблицаКонстант, ОбработанныеКонстанты)
	
	Результат = Новый Структура;
	
	Для Каждого ИскомаяКонстанта Из СтруктураПодчиненныхКонстант Цикл
		
		РодительскиеКонстанты = ТаблицаКонстант.НайтиСтроки(
			Новый Структура("ИмяПодчиненнойКонстанты", ИскомаяКонстанта.Ключ));
		
		Для Каждого СтрокаРодителя Из РодительскиеКонстанты Цикл
			
			Если Результат.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты)
			 ИЛИ ОбработанныеКонстанты.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты)
			 ИЛИ СтруктураПодчиненныхКонстант.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(СтрокаРодителя.ИмяРодительскойКонстанты);
			ОбработанныеКонстанты.Вставить(СтрокаРодителя.ИмяРодительскойКонстанты);
			
			РодителиРодителя = ПолучитьСтруктуруРодительскихКонстантРекурсивно(
				Новый Структура(СтрокаРодителя.ИмяРодительскойКонстанты),
				ТаблицаКонстант,
				ОбработанныеКонстанты);
			
			Для Каждого РодительРодителя Из РодителиРодителя Цикл
				Результат.Вставить(РодительРодителя.Ключ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруПодчиненныхКонстантРекурсивно(ИмяРодительскойКонстанты, ТаблицаКонстант, ОбработанныеКонстанты)
	
	Результат = Новый Структура;
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура("ИмяРодительскойКонстанты", ИмяРодительскойКонстанты));
	
	Для Каждого СтрокаПодчиненного Из ПодчиненныеКонстанты Цикл
		
		Если Результат.Свойство(СтрокаПодчиненного.ИмяПодчиненнойКонстанты)
		 ИЛИ ОбработанныеКонстанты.Свойство(СтрокаПодчиненного.ИмяПодчиненнойКонстанты) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(СтрокаПодчиненного.ИмяПодчиненнойКонстанты);
		ОбработанныеКонстанты.Вставить(СтрокаПодчиненного.ИмяПодчиненнойКонстанты);
		
		ПодчиненныеПодчиненных = ПолучитьСтруктуруПодчиненныхКонстантРекурсивно(
			СтрокаПодчиненного.ИмяПодчиненнойКонстанты,
			ТаблицаКонстант,
			ОбработанныеКонстанты);
		
		Для Каждого ПодчиненныйПодчиненного Из ПодчиненныеПодчиненных Цикл
			Результат.Вставить(ПодчиненныйПодчиненного.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеРеквизитыИСведения

// Возвращает соответствие набора доп. реквизитов (сведений) и функциональных опций, влияющих на возможность его использования.
//
// Возвращаемое значение:
//	Соответствие
//		Ключ - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений
//		Значение - Строка - имена ФО конфигурации, с которыми связан этот набор
//
Функция СвязиДопРеквизитовИФункциональныхОпций() Экспорт
	
	ОписаниеОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный
	|	И НаборыДополнительныхРеквизитовИСведений.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Заменим первый символ "_" в имени объекта на "."
		ИмяОбъекта = Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		
		ПозицияРазделителя = СтрНайти(ИмяОбъекта, "_");
		Если ПозицияРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = Лев(ИмяОбъекта, ПозицияРазделителя - 1) + "." + Сред(ИмяОбъекта, ПозицияРазделителя + 1);
		
		// Объекты с префиксом "Удалить" пропускаем
		Если СтрНайти(НРег(ИмяОбъекта), ".удалить") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
		
		Если ОбъектМетаданных <> Неопределено Тогда
			
			ОписаниеОбъекта = Новый Структура;
			ОписаниеОбъекта.Вставить("Ссылка",              Выборка.Ссылка);
			ОписаниеОбъекта.Вставить("ФункциональныеОпции", "");
			ОписаниеОбъекта.Вставить("ОбъектМетаданных",    ОбъектМетаданных);
			
			ОписаниеОбъектов.Вставить(ИмяОбъекта, ОписаниеОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого МетаФО Из Метаданные.ФункциональныеОпции Цикл
		
		Если НЕ Метаданные.Константы.Содержит(МетаФО.Хранение) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеОбъекта Из ОписаниеОбъектов Цикл
			Если МетаФО.Состав.Содержит(ОписаниеОбъекта.Значение.ОбъектМетаданных) Тогда
				ОписаниеОбъекта.Значение.ФункциональныеОпции = ОписаниеОбъекта.Значение.ФункциональныеОпции
					+ ?(ОписаниеОбъекта.Значение.ФункциональныеОпции = "", "", ",") + МетаФО.Имя;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = Новый Соответствие;
	Для Каждого ОписаниеОбъекта Из ОписаниеОбъектов Цикл
		Результат.Вставить(ОписаниеОбъекта.Значение.Ссылка, ОписаниеОбъекта.Значение.ФункциональныеОпции);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СвойстваОбъектаМетаданных

// Позволяет определить, есть ли среди реквизитов или стандартных реквизитов объекта реквизит с переданным именем.
//
// Параметры:
//  ИмяОбъектаМетаданных - Строка - имя метаданных объекта, в котором требуется проверить наличие реквизита
//  ИмяРеквизита - Строка - имя реквизита
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьРеквизитОбъекта(ИмяОбъектаМетаданных, ИмяРеквизита) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СвойстваОбъекта = Новый Структура("СтандартныеРеквизиты");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, МетаданныеОбъекта);
	
	Если СвойстваОбъекта.СтандартныеРеквизиты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЭтоСтандартныйРеквизит(СвойстваОбъекта.СтандартныеРеквизиты, ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область ОчисткаРегистровСведений

// Возвращает информацию о регистрах сведений, в которых есть записи по указанным метаданным.
//
// Параметры:
//	ИменаОбъектовМетаданных - Строка - перечисленные через запятую полные имена метаданных,
//		записи по которым которые ищем в регистрах сведений.
//	ТолькоВедущиеИзмерения - Булево - выполнять поиск ссылок на метаданные только в ведущих измерениях.
//
// Возвращаемое значение:
//	Массив с элементами типа Структура с ключами
//		- Имя - Строка - имя регистра в метаданных
//		- Измерения - Массив - описание измерений регистра, в которых найдены ссылки, с элементами типа Структура с ключами
//			- Имя - Строка - Имя измерения в метаданных
//			- Типы - Массив - описание типов измерения, в которых найдены ссылки
//				- элемент массива - Строка - полное имя объекта метаданных, на которого найдена ссылка в регистре
//	
Функция РегистрыСведенийПоМетаданнымИзмерений(ИменаОбъектовМетаданных, ТолькоВедущиеИзмерения = Ложь) Экспорт
	
	МассивИменМетаданных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаОбъектовМетаданных, ",",, Истина);
	
	МассивРегистров = Новый Массив;
	
	Для Каждого Регистр Из Метаданные.РегистрыСведений Цикл
		
		Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИзмерений = Новый Массив;
		
		Для Каждого Измерение Из Регистр.Измерения Цикл
			
			Если ТолькоВедущиеИзмерения И НЕ Измерение.Ведущее Тогда
				Продолжить;
			КонецЕсли;
			
			МассивТипов = Новый Массив;
			
			Для Каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИзмерения);
				Если ОбъектМетаданных <> Неопределено
				 И МассивИменМетаданных.Найти(ОбъектМетаданных.ПолноеИмя()) <> Неопределено Тогда
					
					МассивТипов.Добавить(ОбъектМетаданных.ПолноеИмя());
					
			 	КонецЕсли;
				
			КонецЦикла; // типы
			
			Если МассивТипов.Количество() > 0 Тогда
				МассивИзмерений.Добавить(Новый Структура("Имя, Типы", Измерение.Имя, МассивТипов));
			КонецЕсли;
			
		КонецЦикла; // измерения
		
		Если МассивИзмерений.Количество() > 0 Тогда
			МассивРегистров.Добавить(Новый Структура("Имя, Измерения", Регистр.Имя, МассивИзмерений));
		КонецЕсли;
		
	КонецЦикла; // регистры
	
	Возврат МассивРегистров;
	
КонецФункции

// Возвращает текст запроса к регистрам сведений, в которых есть записи по указанным метаданным.
//
// Параметры:
//	ИменаОбъектовМетаданных - Строка - перечисленные через запятую полные имена метаданных,
//		записи по которым которые ищем в регистрах сведений.
//	РазмерПорцииВыборки - Число - количество записей в выборке, "ВЫБРАТЬ ПЕРВЫЕ ххх"
//
// Возвращаемое значение:
//	Строка - текст запроса, выбираются следующие поля
//		ИмяРегистра - Строка - имя регистра, в котором есть ссылки на искомые метаданные
//		ИмяИзмерения - Строка - имя измерения регистра, в которых есть ссылки на искомые метаданные
//		ЗначениеОтбора - Ссылка - ссылка на объект метаданных искомого типа, по которой можно выполнить отбор регистра
//
Функция ТекстЗапросаКРегистрамСведенийПоМетаданнымИзмерений(ИменаОбъектовМетаданных, РазмерПорцииВыборки = 0) Экспорт
	
	ШаблонЗапросаКРегистру =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""%1"" КАК ИмяРегистра,
	|	""%2"" КАК ИмяИзмерения,
	|	Регистр.%2 КАК ЗначениеОтбора
	|%4
	|ИЗ
	|	РегистрСведений.%1 КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %3 КАК ЗначенияОтбора
	|		ПО Регистр.%2 = ЗначенияОтбора.Ссылка";
	
	ШаблонЗапросаВТ =
	"ВЫБРАТЬ
	|	%1.ИмяРегистра КАК ИмяРегистра,
	|	%1.ИмяИзмерения КАК ИмяИзмерения,
	|	%1.ЗначениеОтбора КАК ЗначениеОтбора
	|%2
	|ИЗ
	|	%1 КАК %1";
	
	ТекстЗапроса = "";
	
	МассивРегистров = ОбщегоНазначенияУТПовтИсп.РегистрыСведенийПоМетаданнымИзмерений(ИменаОбъектовМетаданных);
	
	МассивТаблицЗапроса = Новый Массив;
	
	Для Каждого ТекущийРегистр Из МассивРегистров Цикл
		Для Каждого ТекущееИзмерение Из ТекущийРегистр.Измерения Цикл
			Для Каждого ТекущееИмяТипа Из ТекущееИзмерение.Типы Цикл
				
				МассивТаблицЗапроса.Добавить(
					Новый Структура(
						"ИмяРегистра, ИмяИзмерения, ИмяТипа",
						ТекущийРегистр.Имя, ТекущееИзмерение.Имя, ТекущееИмяТипа));
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Выборку будем делать порциями, чтобы не столкнуться с ограничением СУБД на 256 таблиц в запросе
	КоличествоПорций 		  = МассивТаблицЗапроса.Количество() / 255;
	КоличествоВременныхТаблиц = Цел(КоличествоПорций) + ?(Цел(КоличествоПорций) = КоличествоПорций, 0, 1);
	
	Для НомерВременнойТаблицы = 1 По КоличествоВременныхТаблиц Цикл
		
		Если НомерВременнойТаблицы = 1 Тогда
			ИмяПредыдущейВременнойТаблицы = "";
		Иначе
			ИмяПредыдущейВременнойТаблицы = "ВТ" + Формат(НомерВременнойТаблицы-1, "ЧГ=");
		КонецЕсли;
		
		// Очередная порция
		Для НомерТаблицыЗапроса = (НомерВременнойТаблицы-1)*255+1
		 По Мин(НомерВременнойТаблицы*255, МассивТаблицЗапроса.Количество()) Цикл
			
		 	Если НомерТаблицыЗапроса = (НомерВременнойТаблицы-1)*255+1 Тогда
				
				// Первый запрос в порции
				ИмяВременнойТаблицы = "ПОМЕСТИТЬ ВТ" + Формат(НомерВременнойТаблицы, "ЧГ=");
				
				Если ЗначениеЗаполнено(ИмяПредыдущейВременнойТаблицы) Тогда
					
					// Не первая порция - выберем сначала результат из предыдущей порции
					ТекстЗапроса = ТекстЗапроса
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонЗапросаВТ,
							ИмяПредыдущейВременнойТаблицы,
							ИмяВременнойТаблицы);
					
					ИмяВременнойТаблицы = "";
					
				КонецЕсли;
				
			Иначе
				
				ИмяВременнойТаблицы = "";
				
			КонецЕсли;
			
			// Выберем результат из очередного регистра
			ДанныеРегистра = МассивТаблицЗапроса[НомерТаблицыЗапроса-1];
			
			ТекстЗапроса = ТекстЗапроса
				+ ?(ЗначениеЗаполнено(ИмяВременнойТаблицы), "", "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонЗапросаКРегистру,
					ДанныеРегистра.ИмяРегистра,
					ДанныеРегистра.ИмяИзмерения,
					ДанныеРегистра.ИмяТипа,
					ИмяВременнойТаблицы);
				
		КонецЦикла;
		
		// Добавим разделитель пакетного запроса
		ТекстЗапроса = ТекстЗапроса + "
			|
			|;
			|
			|";
		
	КонецЦикла;
	
	Если ТекстЗапроса <> "" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ" + ?(РазмерПорцииВыборки = 0, "", " ПЕРВЫЕ " + Формат(РазмерПорцииВыборки, "ЧГ=")) + "
		|	Регистры.ИмяРегистра,
		|	Регистры.ИмяИзмерения,
		|	Регистры.ЗначениеОтбора
		|ИЗ
		|
		|	ВТ" + Формат(КоличествоВременныхТаблиц, "ЧГ=") + " КАК Регистры
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяРегистра,
		|	ИмяИзмерения";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроверкаКорректностиНумерации

// Проверяет наличие документов РеализацияУслугПрочихАктивов с префиксом "У"
// Используется в целях корректной нумерации документов с 6-ти значным номером
//
// Возвращаемое значение:
// 	Строка - "0" если есть документы, "" если нет
//
Функция ДополнительныйПрефиксНумератораДокументыРеализацииТоваров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	1 
	               |ИЗ
	               |	Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	               |ГДЕ
	               |	ПОДСТРОКА(РеализацияУслугПрочихАктивов.Номер, 6, 1) = ""У""";
				   
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Возврат "0";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Классификаторы

Функция МассивИсключаемыхВидовКИКонтрагентаДляВыводаВФормеПартнера() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)
	|	И НЕ ВидыКонтактнойИнформации.Ссылка В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксКонтрагенты)) ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СоответствиеКодовОКВЭД() Экспорт

	Возврат Справочники.Организации.СоотвествиеКодовКНаименованиюИзМакета("ОКВЭД2"); 

КонецФункции

// Позволяет определить, указанный документ является регистратором указанного регистра.
//
// Параметры:
//  ИмяДокумента - Строка - краткое имя документа который требуется поискать в регистраторах регистра.
//  ИмяРегистра - Строка - полное имя регистра (как в дереве метаданных). Для регистров накопления можно передавать краткие имена.
//                         Пример: "РегистрыСведений.БлокировкиСкладскихЯчеек" или "ТоварыОрганизаций"
//
// Возвращаемое значение:
//  Истина - документ является регистратором указанного регистра
//
Функция ЭтоРегистраторРегистра(ИмяДокумента, ИмяРегистра) Экспорт
	
	Если СтрНайти(ИмяРегистра, ".") > 0 Тогда
		МетаданыеРегистра = ОбщегоНазначенияУТ.МетаданныеПоИмени(ИмяРегистра);
	Иначе// передано краткое имя регистра - только регистры накопления
		МетаданыеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
	КонецЕсли;
	ТипДокумента = Тип("ДокументСсылка."+ИмяДокумента);
	Возврат МетаданыеРегистра.СтандартныеРеквизиты.Регистратор.Тип.Типы().Найти(ТипДокумента) <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
