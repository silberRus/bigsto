
#Область ПрограммныйИнтерфейс

// Формирует текст запроса для получения указанного реквизита объекта расчетов
//
// Параметры:
//	РеквизИсточника - Строка - Имя реквизита источника содержащего объект расчетов
//                             состоящее из имени таблицы и через точку имени реквизита.
//                             Например: ДанныеРегистра.Заказ
//	РеквизитОбъектаРасчетов - Строка - Имя реквизита объекта расчетов
//	ПолноеИмяМетаданныхРеквизита - Строка - Полный путь к метаданным реквизита как в дереве метаданных.
//                                          Например: "Документы.ПоступлениеБезналичныхДенежныхСредств.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Заказ"
//                                                или "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.Измерения.ОбъектРасчетов"
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитаОбъектаРасчетов(
			РеквизитИсточника = "Т.ОбъектРасчетов",
			РеквизитОбъектаРасчетов = "Договор",
			ПолноеИмяМетаданныхРеквизита = "ОпределяемыеТипы.ОбъектРасчетов") Экспорт
	
	ТекстПоля = "ВЫБОР" + Символы.ПС;
	ШаблонУсловия = "		КОГДА ТИПЗНАЧЕНИЯ(%1) = ТИП(%2)
					|			ТОГДА ВЫРАЗИТЬ(%1 КАК %2).%3";
	ШаблонДоговора = "		КОГДА ТИПЗНАЧЕНИЯ(%1) = ТИП(%2)
					 |			ТОГДА %1";
	УсловияВыбора = Новый Массив;
	ТипыДоговоров = Метаданные.Справочники.КлючиАналитикиУчетаПоПартнерам.Реквизиты.Договор.Тип.Типы();
	ТипыДоговоров.Добавить(Тип("СправочникСсылка.ПодарочныеСертификаты"));
	
	ТипыОбъектовРасчета = ОбщегоНазначенияУТ.МетаданныеПоИмени(ПолноеИмяМетаданныхРеквизита).Тип.Типы();
	Для Каждого ТипОбъектаРасчета Из ТипыОбъектовРасчета Цикл
		
		Если ТипОбъектаРасчета = Тип("NULL") ИЛИ ТипОбъектаРасчета = Тип("НЕОПРЕДЕЛЕНО") Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяТипа = Метаданные.НайтиПоТипу(ТипОбъектаРасчета).ПолноеИмя();
		
		Если СтрНайти(ПолноеИмяТипа, "Перечисление") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(РеквизитОбъектаРасчетов) = "ДОГОВОР" И ТипыДоговоров.Найти(ТипОбъектаРасчета) <> Неопределено Тогда
			ТекстУсловия = СтрШаблон(ШаблонДоговора, РеквизитИсточника, ПолноеИмяТипа);
		Иначе
			ТекстУсловия = СтрШаблон(ШаблонУсловия, РеквизитИсточника, ПолноеИмяТипа, РеквизитОбъектаРасчетов);
		КонецЕсли;
		УсловияВыбора.Добавить(ТекстУсловия);
		
	КонецЦикла;
	ТекстУсловия = СтрСоединить(УсловияВыбора, Символы.ПС);
	Возврат ТекстПоля + ТекстУсловия + Символы.ПС + "КОНЕЦ";
	
КонецФункции

// Считывает таблицу классификатора доходов в бюджет
//
// Возвращаемое значение:
//    Структура - Стркутура с таблицей данных классификатора
//
Функция КлассификаторДоходовБюджетов2015() Экспорт
	
	Макет = ПолучитьОбщийМакет("КлассификаторДоходовБюджетов2015");
	Возврат ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
КонецФункции

// Формирует назначение платежа по КБК
//
// Параметры:
//    КБК - Строка - КБК
//
// Возвращаемое значение:
//    Строка - Назначение платежа
//
Функция НазначениеПлатежаПоКБК(КБК) Экспорт
	
	НазначениеПлатежаПоКБК = "";
	
	КлассификаторДоходовБюджетов2015 = ДенежныеСредстваПовтИсп.КлассификаторДоходовБюджетов2015();
	
	Отбор = Новый Структура("Код", КБК);
	НайденныеСтроки = КлассификаторДоходовБюджетов2015.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		НазначениеПлатежаПоКБК = НайденныеСтроки[0].НазначениеПлатежа;
	КонецЕсли;
	
	Возврат НазначениеПлатежаПоКБК;
	
КонецФункции

// Возвращает назначение вид налога по КБК
//
// Параметры:
//    КБК - Строка - КБК
//
// Возвращаемое значение:
//    Строка - Вид налога
//
Функция ВидНалогаПоКБК(КБК) Экспорт
	
	ВидНалогаПоКБК = "";
	
	КлассификаторДоходовБюджетов2015 = ДенежныеСредстваПовтИсп.КлассификаторДоходовБюджетов2015();
	
	Отбор = Новый Структура("Код", КБК);
	НайденныеСтроки = КлассификаторДоходовБюджетов2015.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		ВидНалогаПоКБК = НайденныеСтроки[0].Идентификатор;
	КонецЕсли;
	
	Возврат ВидНалогаПоКБК;
	
КонецФункции

// Возвращает вид налогового обязательства по КБК
//
// Параметры:
//    КБК - Строка - КБК
//    Период - Дата - Налоговый период
//
// Возвращаемое значение:
//    Строка - Вид налогового обязательства
//
Функция ВидНалоговогоОбязательстваПоКБК(КБК, Знач Период = Неопределено) Экспорт
	
	Если ПустаяСтрока(КБК) Тогда
		Возврат "Налог";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	КодПодвидаДоходов = ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КБК);
	
	Если Лев(КодПодвидаДоходов, 1) = "3" Тогда
		
		ВидНалоговогоОбязательства = "Штраф";
		
	ИначеЕсли Лев(КодПодвидаДоходов, 2) = "22"
		И НачалоДня(Период) >= '20150101'
		И ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Тогда
		
		ВидНалоговогоОбязательства = "Проценты";
		
	ИначеЕсли Лев(КодПодвидаДоходов, 1) = "2" Тогда
		
		ВидНалоговогоОбязательства = "ПениСам";
		
	Иначе
		
		ВидНалоговогоОбязательства = "Налог";
		
	КонецЕсли;
	
	Возврат ВидНалоговогоОбязательства;
	
КонецФункции

// Возвращает вид государственного органа по КБК
//
// Параметры:
//    КБК - Строка - КБК
//
// Возвращаемое значение:
//    Строка - Вид государственного органа
//
Функция ВидГосударственногоОргана(КБК) Экспорт
	
	Если ПустаяСтрока(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	КодГлавногоАдминистратора = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КБК);
	
	Если ПустаяСтрока(КБК) ИЛИ КодГлавногоАдминистратора = "182" Тогда
		ВидГосударственногоОргана = "НалоговыйОрган";
	ИначеЕсли КодГлавногоАдминистратора = "392" Тогда
		ВидГосударственногоОргана = "ОрганПФР";
	ИначеЕсли КодГлавногоАдминистратора = "393" Тогда
		ВидГосударственногоОргана = "ОрганФСС";
	Иначе
		ВидГосударственногоОргана = "Прочий";
	КонецЕсли;
	
	Возврат ВидГосударственногоОргана;
	
КонецФункции

// Возвращает изнак прочией операции с точки зрения контролей 275-ФЗ
//
// Параметры:
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - анализируемая хозяйственная операция
//
// Возвращаемое значение:
//    Булево
//
Функция ПрочаяОперацияСписанияДСПо275ФЗ(ХозяйственнаяОперация) Экспорт
	ПрочаяОперацияСписанияДСПо275ФЗ = Истина;
	
	ХозяйственныеОперации = Перечисления.ХозяйственныеОперации;
	
	НеПрочиеОперации = Новый Массив;
	НеПрочиеОперации.Добавить(ХозяйственныеОперации.ОплатаПоставщику);
	НеПрочиеОперации.Добавить(ХозяйственныеОперации.ВозвратОплатыКлиенту);
	НеПрочиеОперации.Добавить(ХозяйственныеОперации.ПеречислениеВБюджет);
	НеПрочиеОперации.Добавить(ХозяйственныеОперации.ПеречислениеТаможне);
	НеПрочиеОперации.Добавить(ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	НеПрочиеОперации.Добавить(ХозяйственныеОперации.ОплатаПоКредитам);
	НеПрочиеОперации.Добавить(ХозяйственныеОперации.ПеречислениеНаДепозиты);
	
	Если НеПрочиеОперации.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		ПрочаяОперацияСписанияДСПо275ФЗ = Ложь;
	КонецЕсли;
	
	Возврат ПрочаяОперацияСписанияДСПо275ФЗ;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаКэшРеквизитовПлатежа(ИмяТаблицы, ПоляГрафика) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	Если Оператор.Источники.НайтиПоИмени(ИмяТаблицы) = Неопределено Тогда
		ИсточникСхемы = Оператор.Источники.Добавить(ИмяТаблицы);
		
		Для каждого Поле Из ПоляГрафика Цикл
			Если ИсточникСхемы.Источник.ДоступныеПоля.Найти(Поле.Ключ) <> Неопределено Тогда
				ВыражениеСхемы = Оператор.ВыбираемыеПоля.Добавить(Поле.Ключ);
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					КолонкаСхемы = ЗапросВыбора.Колонки.Найти(ВыражениеСхемы);
					Если КолонкаСхемы <> Неопределено И ЗапросВыбора.Колонки.Найти(Поле.Значение) = Неопределено Тогда
						КолонкаСхемы.Псевдоним = Поле.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИсточникСхемы.Источник.ДоступныеПоля.Найти("Договор") <> Неопределено Тогда
			Оператор.ВыбираемыеПоля.Добавить("Договор.СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		Если ИсточникСхемы.Источник.ДоступныеПоля.Найти("Соглашение") <> Неопределено Тогда
			Оператор.ВыбираемыеПоля.Добавить("Соглашение.СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
	КонецЕсли;
	
	Оператор.Отбор.Добавить("Ссылка В (&Ссылка)");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция КоэффициентКонвертации(ТекущаяВалюта, НоваяВалюта, Дата) Экспорт
	
	КоэффициентКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ТекущаяВалюта, НоваяВалюта, Дата);
	
	Возврат ?(КоэффициентКонвертации = 0, 1, КоэффициентКонвертации);
	
КонецФункции

#КонецОбласти
