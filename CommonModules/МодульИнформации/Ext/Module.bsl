
Процедура УстановитьПараметрыСеанса(ИменаПараметровСеанса) Экспорт
	
	Если ИменаПараметровСеанса <> Неопределено Тогда
	
		Если ИменаПараметровСеанса.Найти("НастройкиОперативнойИнфоОТоваре") <> Неопределено Тогда 
					
			ПараметрыСеанса.НастройкиОперативнойИнфоОТоваре = ЗначениеВСтрокуВнутр(МодульИнформации.ПолучитьНастройкиОперативнойИнфоОТоваре());
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьURLКартинкиВОблаке(Картинка)
	
	Возврат "";
	
КонецФункции

Функция Валюта()
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
КонецФункции

Функция ПолучитьВалюты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ МАКСИМУМ(Ссылка) КАК Ссылка, Наименование ИЗ Справочник.Валюты ГДЕ НЕ ПометкаУдаления СГРУППИРОВАТЬ ПО Наименование");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьНаименованиеТовара(Товар)
	
	// Отрежем арт. и артикул от названия товаров, чтобы текст названия был покороче
	
	стр = Товар.Наименование;
	начАртикула = СтрНайти(НРег(стр), "арт.");
	
	Если начАртикула И СтрНайти(стр, Товар.Артикул,, начАртикула) Тогда
		стр = Лев(стр, СтрДлина(стр) - начАртикула);
	КонецЕсли;
	
	
	Возврат стр;
	
КонецФункции

#Область HTML

Функция СформироватьШапкаКолонкиHTML(Заголовок = "", Подсказка = "", Цвет = "#333333", Выравнивание = "right")
	//Возврат "<th align=""" + Выравнивание + """" + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " style=""color: " + Цвет + ";padding:3px 5px;border-bottom:1px solid #CCC085; border-top:1px solid #CCC085;"">"+ Заголовок +"</th>"
	Возврат "<th align=""" + Выравнивание + """" + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " style=""padding:3px 5px;border-bottom:1px solid #CCC085; border-top:1px solid #CCC085;"">"+ Заголовок +"</th>"
КонецФункции
Функция СформироватьСтрокуТаблицыHTML(Значение, Выравнивание = "right", Цвет = "#333333", Подсказка = "", Выделить = Ложь, Размер = "12")
	
	//Возврат "<td align=""" + Выравнивание + """" + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " valign=""top"" style=""font-family: Verdana,Geneva,sans-serif;border-bottom:1px solid #CCC085;padding:3px 5px;font-size:"+ Размер +"px;color: " + Цвет + ";"">" +  ?(Выделить, "<b>", "") + Значение + ?(Выделить, "</b>", "") + "</td>";
	Возврат "<td align=""" + Выравнивание + """" + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " valign=""top"" style=""font-family: Verdana,Geneva,sans-serif;border-bottom:1px solid #CCC085;padding:3px 5px;font-size:"+ Размер +"px;"">" +  ?(Выделить, "<b>", "") + Значение + ?(Выделить, "</b>", "") + "</td>";
	
КонецФункции
Функция СформироватьПодвалКолонкиHTML(Значение = "", Цвет = "#333333", Размер = "12", Выделить = Ложь, допПараметр = "", Отступ = "3px 5px", Разделитель = Истина)    
	//Возврат "<td " + допПараметр +  " style=""color:" + Цвет + ";font-family: Verdana,Geneva,sans-serif;font-size:"+ Размер +"px;padding:" + Отступ +";" + ?(Выделить, "font-weight: bold;", "") + ?(Разделитель, "border-bottom:1px solid #CCC085;", "") + """>" + Значение + "</td>";
	Возврат "<td " + допПараметр +  " style=""font-family: Verdana,Geneva,sans-serif;font-size:"+ Размер +"px;padding:" + Отступ +";" + ?(Выделить, "font-weight: bold;", "") + ?(Разделитель, "border-bottom:1px solid #CCC085;", "") + """>" + Значение + "</td>";
КонецФункции    //line-height:15px;
Функция СформироватьСсылкаHTML(ID = Неопределено, Значение, Подсказка = "", Цвет = "#333333", href = "./0")
	//Возврат "<A style=""color:" + Цвет + ";"" id=" + Строка(ID) + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " href='" + href + "'>" + Строка(Значение) + "</A>";
	
	// silber {
	
	Возврат "<a style=""color:" + Цвет + ";"" " + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " href='" + href + "'>" + Строка(Значение) + "</a>";
	
	// } silber
	
КонецФункции

Функция Текст_ОткрытьОтчет(ИмяОтчета, КодПолученияТовара, КодПолученияСклада = "", ИмяОтбораСклада = "Склад")
	
	Возврат "V8:ВЫПОЛНИТЬ КОД:
			|ОткрытьФорму(""Отчет." + ИмяОтчета + ".ФормаОбъекта"",  
			|				Новый Структура(""Отбор, СформироватьПриОткрытии"", 
			|						Новый Структура(""Номенклатура" + ?(КодПолученияСклада = "","","," + ИмяОтбораСклада) + """, 
			|												" + КодПолученияТовара + ?(КодПолученияСклада = "","",", " + КодПолученияСклада) + "),Истина));
			|ЭтаФорма.ОбработатьОтображениеИнформацииОТоваре();";
					
КонецФункции

Функция СтруктураЗапроса(Ключ, Текст)
	
	Возврат Новый Структура("Ключ, Текст", Ключ, Текст);
	
КонецФункции
Функция СформироватьТекстИзСтруктуры(Запросы)
	
	Текст = "";
	Для Каждого Элемент Из Запросы Цикл
		Текст = Текст + Элемент.Текст + ";";
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции
Функция ПолучитьТекстHTMLОТоваре(МассивСсылок, Настройки, ТекстЗаголовка = "", ВыводитьПрикрепленныеФайлы = Истина, ТолькоТело = Ложь,Дополнительно = Ложь) Экспорт
		
	ПустойТекст = "<HTML></BODY></HTML>";
	
	НастройкиПользователя = ЗначениеИзСтрокиВнутр(ПараметрыСеанса.НастройкиОперативнойИнфоОТоваре); // выборка данных с индивидуальным фильтром
				
	ВыбСклады 			= НастройкиПользователя.Склады;
	ВыбТипыЦен			= НастройкиПользователя.ТипыЦен;
	ПоказыватьОстатки	= НастройкиПользователя.Остатки;
	ПоказыватьЦены		= НастройкиПользователя.Цены;
	ПоказыватьСоглашения= НастройкиПользователя.Соглашения;
	ПоказыватьКроссы	= НастройкиПользователя.Кроссы;
	ВнутренниеЗаказы 	= НастройкиПользователя.ВнутренниеЗаказы;
	ВыбВалюта 			= ?(ЗначениеЗаполнено(НастройкиПользователя.Валюта), НастройкиПользователя.Валюта, Валюта());
	ПоказыватьДополнительно = НастройкиПользователя.Дополнительно;
	
	#Область Запросы
	
	Запросы = Новый Массив;	
	
	// ИНФОРМАЦИЯ ПО КРОССАМ
	
	Если ПоказыватьКроссы Тогда
		
		Запросы.Добавить(СтруктураЗапроса("Кроссы", "
		|ВЫБРАТЬ 	Бренд, Артикул, Период
		|ИЗ 		РегистрСведений.АналогиТоваров.СрезПоследних(,Номенклатура В(&Ссылки))
		|ГДЕ 		НЕ Удалено
		|УПОРЯДОЧИТЬ ПО Бренд, Артикул
		|ИТОГИ ПО Бренд"));
	
	КонецЕсли;
	
	// ИНФОРМАЦИЯ ПО ОСТАТКАМ
	
	Если ПоказыватьОстатки Тогда
		
		Запросы.Добавить(СтруктураЗапроса("Остатки", СтрШаблон("
		
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	Ост.Номенклатура Номенклатура,
		//|	Ост.Склад Склад,
		//|	ВЫБОР КОГДА ПОДСТРОКА(Ост.Склад.Код, 1, 1) = "" "" ТОГДА Ост.Склад.Наименование ИНАЧЕ Ост.Склад.Код КОНЕЦ + "" "" + ЕСТЬNULL(Хран.МестоХранения, """") КодСклада,
		//|	Ост.ВНаличииОстаток 					Остаток,
		//|	ЕСТЬNULL(КОтгр.КОтгрузкеОстаток, 0) 	КОтгрузке,
		//|	ЕСТЬNULL(КОтгр.ВРезервеОстаток, 0) 		ВРезерве,
		//|	Ост.ВНаличииОстаток - ЕСТЬNULL(КОтгр.ВРезервеОстаток, 0) - ЕСТЬNULL(КОтгр.КОтгрузкеОстаток, 0) Доступно
		//|ИЗ 
		//|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(&Ссылки) %1) Ост
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ
		//|	РегистрНакопления.ТоварыКОтгрузке.Остатки(,Номенклатура В(&Ссылки) %1) КОтгр
		//|ПО
		//|	Ост.Склад 			= КОтгр.Склад И
		//|	Ост.Номенклатура 	= КОтгр.Номенклатура И
		//|	Ост.Характеристика 	= КОтгр.Характеристика И
		//|	Ост.Серия 			= КОтгр.Серия
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ
		//|	РегистрСведений.СТ_МестаХраненияНоменклатурыНаСкладах.СрезПоследних(,Номенклатура В(&Ссылки) %1) Хран
		//|ПО
		//|	Ост.Склад 			= Хран.Склад И
		//|	Ост.Номенклатура 	= Хран.Номенклатура
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ост.Номенклатура Номенклатура,
		|	Ост.Склад Склад,
		|	ВЫБОР КОГДА ПОДСТРОКА(Ост.Склад.Код, 1, 1) = "" "" ТОГДА Ост.Склад.Наименование ИНАЧЕ Ост.Склад.Код КОНЕЦ + "" "" + ЕСТЬNULL(Хран.МестоХранения, """") КодСклада,
		|	ВНаличииОстаток 									Остаток,
		|	ВРезервеСоСкладаОстаток + ВРезервеПодЗаказОстаток 	ВРезерве,
		|	ВНаличииОстаток - ВРезервеСоСкладаОстаток - ВРезервеПодЗаказОстаток Доступно
		|ИЗ 
		|	РегистрНакопления.СвободныеОстатки.Остатки(,Номенклатура В(&Ссылки) %1) Ост
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СТ_МестаХраненияНоменклатурыНаСкладах.СрезПоследних(,Номенклатура В(&Ссылки) %1) Хран
		|ПО
		|	Ост.Склад 			= Хран.Склад И
		|	Ост.Номенклатура 	= Хран.Номенклатура

		|", 
			?(ВыбСклады.Количество(),"И Склад В(&Склады)", ""))));
		
	КонецЕсли;
	
	 // ИНФОРМАЦИЯ ПО ВНУТРЕННИМ ЗАКАЗАМ
	 
	Если ВнутренниеЗаказы Тогда
			
		Запросы.Добавить(СтруктураЗапроса("ВнутренниеЗаказы", СтрШаблон("
		
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаПеремещение.СкладПолучатель 	Получатель,
		|	ЗаказНаПеремещение.СкладПолучатель 	СкладОтправитель,
		|	ЗаказаноОстаток  					Заказано,
		|	КОформлениюОстаток					КОформлению
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, Номенклатура В (&Ссылки) %1
		|)
		|", ?(ВыбСклады.Количество()," И ЗаказНаПеремещение.Склад В (&Склады)",""))));
		
	КонецЕсли;
	
	// ИНФОРМАЦИЯ ПО ЦЕНАМ
	Если ПоказыватьЦены Тогда
			
		Запросы.Добавить(СтруктураЗапроса("Цены", СтрШаблон("
		
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цен.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена,
		|	Цен.Валюта,
		|	Цен.Номенклатура 	 	Номенклатура,
		|	Цен.Упаковка		 	Упаковка,
		|	Цен.ВидЦены			 	ТипЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&текДата, Номенклатура В(&Ссылки) %1
		|) Цен
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.КурсыВалют.СрезПоследних(&текДата) ВалЦен
		|	ПО 
		|		Цен.Валюта = ВалЦен.Валюта
		|	
		|  	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.КурсыВалют.СрезПоследних(&текДата, Валюта = &Валюта) ВалТек
		|	ПО 
		|		ИСТИНА
		|", ?(ВыбТипыЦен.Количество(),"И ВидЦены В(&ТипыЦен)",""))));		
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СформироватьТекстИзСтруктуры(Запросы));
	
	Запрос.УстановитьПараметр("Ссылки", 	МассивСсылок);
	Запрос.УстановитьПараметр("Валюта", 	ВыбВалюта);
	Запрос.УстановитьПараметр("ТипыЦен",	ВыбТипыЦен);
	Запрос.УстановитьПараметр("Склады", 	ВыбСклады);
	Запрос.УстановитьПараметр("текДата", 	ТекущаяДата());
	
	Если Не ПустаяСтрока(Запрос.Текст) Тогда
		Результаты = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
#КонецОбласти
	
	// Вывод ЗАГОЛОВОК
	
	ТекстЗаголовка = СформироватьЗаголовокТовараHTML(МассивСсылок, ПоказыватьОстатки, ПоказыватьКроссы, ВнутренниеЗаказы, ПоказыватьЦены, ТолькоТело);
	
	// Вывод табличных данных
	
	Текст = "";
	ЦветФонаШапки = "#F5F2DD";
	
	Инд = -1;
	Для Каждого Вариант Из Запросы Цикл Инд = Инд + 1;
		
	#Область Кроссы

		Если Вариант.Ключ = "Кроссы" Тогда
			
			Результат = Результаты[Инд];
			ОтступТаблицы = ?(Инд = 1, "0", "20px");
			ТекстКросса = "";	
			
			Если Результат.Пустой() Тогда
						  
				ТекстКросса = "
				|Нет кроссов.";
						
			Иначе
				
				// шапка таблицы
					
				ТекстКросса = ТекстКросса + 
					"<thead> 
			         |<tr style=""background-color: " + ЦветФонаШапки + "; text-align:center;font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
			 		 |"  +	СформироватьШапкаКолонкиHTML("Бренд") + 
					 		СформироватьШапкаКолонкиHTML("Кроссы") + "
					 |	</tr>
					 |</thead>";
							
				ТекстКросса = ТекстКросса + "<tbody border=""1"" style=""background-color:#FFF;"">";
				
				ВыборкаБренд = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				Пока ВыборкаБренд.Следующий() Цикл									
					
					Артикулы = Новый Массив;
					Выборка = ВыборкаБренд.Выбрать();
					Пока Выборка.Следующий() Цикл
						Артикулы.Добавить(Выборка.Артикул);
					КонецЦикла;
					
					ТекстКросса = ТекстКросса + "<tr>";
							
					ТекстКросса = ТекстКросса + 
						СформироватьСтрокуТаблицыHTML(Строка(ВыборкаБренд.Бренд), "left",,, Истина,"10") + 
						СформироватьСтрокуТаблицыHTML(СтрСоединить(Артикулы, "; "));
						
					ТекстКросса = ТекстКросса + "</tr>";
					
				КонецЦикла;
				
				ТекстКросса = ТекстКросса + "</tbody>";
				
			КонецЕсли;
			
			Текст = Текст +  "
					|	<tr>
					|		<td colspan = ""4"" align=""center"" valign=""top"">
					|			<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:" + ОтступТаблицы + " 0 0;"">
					|" + ТекстКросса + "	
					|			</table>
					|		</td>
					|	</tr>
					|";
				
	#КонецОбласти
		
	#Область Остатки
		
		ИначеЕсли Вариант.Ключ = "Остатки" Тогда
			
			КодПолученияСсылки = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"",""" + XMLСтрока(МассивСсылок[0]) + """)";
			
			Всего = 0; Остаток = 0; КОтгрузке = 0; ВРезерве = 0; Доступно = 0;
			
			Результат = Результаты[Инд]; 
			
			ОтступТаблицы = ?(Инд = 1 , "5px", "10px");
	 		ТекстОстатки = "";
			
			Если Результат.Пустой() Тогда
				
				ТекстОстатки = "
				|<tr> " + НСтр("ru='Нет остатков на складах'; de='Waren fehlt';") + ". </tr>";
				
			Иначе
				
				// шапка таблицы              // ; text-align:center

				ТекстОстатки = ТекстОстатки + 
					"<thead>                                       	             
					 |	<tr style=""background-color: " + ЦветФонаШапки + ";font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
					 |" + 	СформироватьШапкаКолонкиHTML("Склад",,,"left") + 
							СформироватьШапкаКолонкиHTML("Ост", "Остаток",,"right") + 
							СформироватьШапкаКолонкиHTML("Рез", "В резерве",,"right") +
							//СформироватьШапкаКолонкиHTML("Отгр", "К отгрузке",,"right") +
							СформироватьШапкаКолонкиHTML("Дост", "Доступно",,"right") + "
					 |	</tr>
					 |</thead>";	
				 
				Выборка = Результат.Выбрать();
					
				ТекстОстатки = ТекстОстатки + "<tbody border=""1"" style=""background-color:#FFF;"">";

				Пока Выборка.Следующий() Цикл									
					
					//КодПолученияСклада = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Склады"",""" + XMLСтрока(Выборка.Склад) + """)";
					
					ТекстОстатки = ТекстОстатки + "<tr>";
						
					Остаток		= Остаток + Выборка.Остаток;
					//КОтгрузке	= КОтгрузке + Выборка.КОтгрузке;
					ВРезерве	= ВРезерве + Выборка.ВРезерве;
					Доступно	= Доступно + Выборка.Доступно;
					//Всего 		= Всего + Выборка.Остаток;
					
					Фонт 		= ПолучитьТекстЦветаСтрокиТовара(Выборка.Остаток, Выборка.ВРезерве);
					
					ТекстОстатки = ТекстОстатки + 
					СформироватьСтрокуТаблицыHTML(Выборка.КодСклада, "center", Фонт, Выборка.Склад, Истина) + 
					//СформироватьСтрокуТаблицыHTML(?(ПустаяСтрока(Выборка.МестоХранения), Выборка.КодСклада, СтрШаблон("%1 (%2)", Выборка.КодСклада, Выборка.МестоХранения)), "center", Фонт, Выборка.Склад, Истина) + 
					//СформироватьСтрокуТаблицыHTML(?(Выборка.ЭтоТаможня, "n/a", Выборка.СвободныйОстаток), , Фонт) + 
					
					// Остатки  
					
					//СформироватьСтрокуТаблицыHTML(?(Выборка.Ячеестый, СформироватьСсылкаHTML(,Выборка.Остаток, "Остатки в ячейках", Фонт,
					СформироватьСтрокуТаблицыHTML(Выборка.Остаток,,Фонт) +
					//СформироватьСтрокуТаблицыHTML(Выборка.КОтгрузке,,Фонт) +
					СформироватьСтрокуТаблицыHTML(Выборка.ВРезерве,,Фонт) +
					СформироватьСтрокуТаблицыHTML(Выборка.Доступно,,Фонт);
					// +
					
					// Резервы
					
					//СформироватьСтрокуТаблицыHTML(?(Выборка.Резерв <> 0 И Выборка.КодСклада <> "", СформироватьСсылкаHTML(,Выборка.Резерв, "Показать резерв", Фонт, 
					//			Текст_ОткрытьОтчет("ТоварыВРезерве", КодПолученияСсылки, КодПолученияСклада, "Размещение")), 
					//			?(Выборка.ЭтоТаможня, "n/a", Выборка.Резерв)),,Фонт);
					
					
					ТекстОстатки = ТекстОстатки + "</tr>"
			
				КонецЦикла;
					
				ТекстОстатки = ТекстОстатки + "</tbody>";
					
				Если Выборка.Количество() > 1 Тогда
					Фонт = ПолучитьТекстЦветаСтрокиТовара(Остаток, ВРезерве);
					ТекстОстатки = ТекстОстатки + 
					"<tfoot>
					|	<tr style=""border-bottom-style: none; font-weight: bold;background-color:" + ЦветФонаШапки + "; text-align:right;"">" +
							СформироватьПодвалКолонкиHTML("Всего", ЦветФонаШапки, 10) +
							СформироватьПодвалКолонкиHTML(Остаток, Фонт) + 
							//СформироватьПодвалКолонкиHTML(КОтгрузке, Фонт) +
							СформироватьПодвалКолонкиHTML(ВРезерве, Фонт) +
							СформироватьПодвалКолонкиHTML(Доступно, Фонт) + "
					|	</tr>
					|</tfoot>";
				КонецЕсли;
			КонецЕсли;
			
			Текст = Текст +  "	 <tr>
						|		<td colspan = ""4"" align=""center"" valign=""top"">
						|			<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:" + ОтступТаблицы + " 5px;"">
						|" + ТекстОстатки + "	
						|			</table>
						|		</td>
						|	</tr>
						|";
				
	#КонецОбласти
	
	#Область Внутреннии_заказы
		
		ИначеЕсли Вариант.Ключ = "ВнутренниеЗаказы" Тогда
			
			КодПолученияСсылки = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"",""" + XMLСтрока(МассивСсылок[0]) + """)";
			
			Заказано = 0; ВПути = 0;
			Результат = Результаты[Инд]; 
			
			ОтступТаблицы = ?(Инд = 1 , "5px", "10px");
	 		ТекстВнутренниеЗаказы = "";
			
			Если Результат.Пустой() Тогда
				
				ТекстВнутренниеЗаказы = "
				|<tr> " + НСтр("ru='Нет внутренних заказов'") + ". </tr>";
				
			Иначе
				ТекстВнутренниеЗаказы = "
				|<tr> " + НСтр("ru='Внутренние заказы:'") + " </tr>";
				
				// шапка таблицы     
				
				ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + 
					"<thead>                                       	             
					 |	<tr style=""background-color: " + ЦветФонаШапки + ";font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
					 |" + 	СформироватьШапкаКолонкиHTML("Заказчик", "Склад заказчик",,"center") + 
							СформироватьШапкаКолонкиHTML("Отправитель","Склад отправитель",,"center") +
							СформироватьШапкаКолонкиHTML("Заказано",,,"right") +
							СформироватьШапкаКолонкиHTML("В пути",,,"right") +
					 "	</tr>
					 |</thead>";	
				 
				Выборка = Результат.Выбрать();
					
				ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + "<tbody border=""1"" style=""background-color:#FFF;"">";

				Пока Выборка.Следующий() Цикл									
					
					КодПолученияСклада = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Склады"",""" + XMLСтрока(Выборка.Получатель) + """)";
					ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + "<tr>";
						
					ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + 
						СформироватьСтрокуТаблицыHTML(?(Выборка.Получатель = null,"",Выборка.Получатель.Код) , "center",, Выборка.Получатель, Истина) + 
						СформироватьСтрокуТаблицыHTML(?(Выборка.Отправитель = null,"",Выборка.Отправитель.Код), "center",, Выборка.Отправитель, Истина) +
						СформироватьСтрокуТаблицыHTML(?(Выборка.Заказано, СформироватьСсылкаHTML(,Выборка.Заказано, "Заказано", ,
									Текст_ОткрытьОтчет("ВнутренниеЗаказы", КодПолученияСсылки, КодПолученияСклада,)), Выборка.Заказано),,Ложь) +

					СформироватьСтрокуТаблицыHTML(Выборка.ВПути, "right","#333333", , Ложь); 
						
					ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + "</tr>";
			
				КонецЦикла;
					
				ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + "</tbody>";
					
			
			
				Текст = Текст +  "	 <tr>
							|		<td colspan = ""4"" align=""center"" valign=""top"">
							|			<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:" + ОтступТаблицы + " 5px;"">
							|" + ТекстВнутренниеЗаказы + "	
							|			</table>
							|		</td>
							|	</tr>
							|";

			КонецЕсли;
		
	#КонецОбласти

	#Область Цены
		
		ИначеЕсли Вариант.Ключ = "Цены" Тогда 
			
			Результат = Результаты[Инд];
			ОтступТаблицы = ?(Инд = 1, "0", "20px");
			ТекстЦены = "";	
			
			Если Результат.Пустой() Тогда
						  
				ТекстЦены = "
				|Нет информации о ценах.";
						
			Иначе
				
				// шапка таблицы
					
				Акция = 0;
				ТекстЦены = ТекстЦены + 
					"<thead> "+СформироватьЭлементВыбораВалюты(ВыбВалюта)+
			         "	<tr style=""background-color: " + ЦветФонаШапки + "; text-align:center;font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
			 		 |"  +	СформироватьШапкаКолонкиHTML("Тип цены") + 
					 		СформироватьШапкаКолонкиHTML("Цена", "Цена") + "
					 |	</tr>
					 |</thead>";	
							
				ТекстЦены = ТекстЦены + "<tbody border=""1"" style=""background-color:#FFF;"">";
							
				#Область Соглашения

				Если ПоказыватьСоглашения И Настройки.Свойство("Соглашение") Тогда
		
					ТабСоглашения = АТ_Сервер.ПолучитьЦеныСоСкидкамиПоСоглашению(Настройки.Соглашение, МассивСсылок);
					Для Каждого Строка Из ТабСоглашения Цикл
					
						ТекстЦены = ТекстЦены + "<tr>";
						
						ТекстЦены = ТекстЦены + 
							СформироватьСтрокуТаблицыHTML(Настройки.Соглашение, "left", , "выбранное соглашение", Истина, "10") + 
							СформироватьСтрокуТаблицыHTML(Формат(Строка.ЦенаСоСкидкой, "ЧЦ=10; ЧДЦ=2"), , );
						
						ТекстЦены = ТекстЦены + "</tr>";
					
					КонецЦикла;
				КонецЕсли;
	
				#КонецОбласти
							
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл									
							
					ТекстЦены = ТекстЦены + "<tr>";
							
					ТекстЦены = ТекстЦены + 
						СформироватьСтрокуТаблицыHTML(Строка(Выборка.ТипЦен), "left", , Выборка.ТипЦен, Истина,"10") + 
						СформироватьСтрокуТаблицыHTML(Формат(Выборка.Цена, "ЧЦ=10; ЧДЦ=2"), , );
						
					ТекстЦены = ТекстЦены + "</tr>";
					
				КонецЦикла;
						
				ТекстЦены = ТекстЦены + "</tbody>";
			КонецЕсли;
			
			Текст = Текст +  "
					|	<tr>
					|		<td colspan = ""4"" align=""center"" valign=""top"">
					|			<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:" + ОтступТаблицы + " 0 0;"">
					|" + ТекстЦены + "	
					|			</table>
					|		</td>
					|	</tr>
					|";
			
			КонецЕсли;
			
	#КонецОбласти

	КонецЦикла;
			
	Текст = Текст + "</ul>";
		
	Текст = "<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
				|" + Текст + "	
				|</table>";
		
	Возврат ?(ТолькоТело, Текст,
			"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
			|<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""ru"">
			|<head>
			|	<meta http-equiv=""Content-Type"" content=""text/html"" />
			|</head>
			|  
			|<body>
			|" + Текст + "	
			|</body>
			|</html>");
			
КонецФункции         
Функция СформироватьЗаголовокТовараHTML(МассивСсылок, Остатки, Кроссы, ВнутренниеЗаказы, Цены, ТолькоТело = Ложь) Экспорт
			
	Если МассивСсылок.Количество() = 1 Тогда
		
		Товар = МассивСсылок[0];
		Заголовок = "<b>" + СокрЛП(Товар.Артикул) + "</b> " + ПолучитьНаименованиеТовара(Товар);
		
	Иначе
		стр 		= ЧислоПрописью(МассивСсылок.Количество(),"ЧДЦ=0;НП-ложь;НД=ложь;","позиция, позиции, позиций, ж");
		Заголовок 	= СокрЛП(СтрЗаменить(стр,"00","")) + ":" КонецЕсли;

	Текст = "
	|<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"" >
	|	<tr style=""font-size:11px;"">
 	|		<td align=""right"" valign=""top"">
	|			<INPUT Type=""checkbox""" + ?(Кроссы, " checked=""checked""", "") + " id=""CheckCross"" VALUE=""2"" style="" width: 20px;height:20px;border: none;color:#fff;background-color:#FCFAEB;"">Кроссы</input>
	|			<INPUT Type=""checkbox""" + ?(Остатки, " checked=""checked""", "") + " id=""CheckStock"" VALUE=""1"" style=""width: 20px; height:20px; border:none; color:#fff; background-color:#FCFAEB;"">Остатки</input>
	|			<INPUT Type=""checkbox""" + ?(Цены, " checked=""checked""", "") + " id=""CheckPrice"" VALUE=""2"" style="" width: 20px;height:20px;border: none;color:#fff;background-color:#FCFAEB;"">Цены</input>
	|		</td>
	|	</tr>
	|</table>
	|	<p>" + Заголовок + "</p>
	|";
	
	Возврат ?(ТолькоТело, Текст, "<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 8.00.7601.17655""></HEAD>
	|<BODY>" + Текст + "</BODY></HTML>");
	
КонецФункции

Функция ОтрезатьСимволы(Строка, СимволовНеБолее)
	
	Возврат ?(СтрДлина(Строка) > СимволовНеБолее, Лев(Строка, СимволовНеБолее - 3) + " ..", Строка);
	
КонецФункции

Функция СформироватьЭлементВыбораВалюты(лВалюта)
	
	ТекстHTML = "<tr align=""right""><td colspan=""3"">Валюта <select id=""Сurrency""><option disabled>Выберите валюту</option>";

	ВсеВалюты = ПолучитьВалюты();	
	Для Каждого Валюта Из ВсеВалюты Цикл
		ТекстHTML = ТекстHTML + "<option "+?(лВалюта = Валюта,"selected ","") +"value="""+Валюта.УникальныйИдентификатор()+""">"+Валюта.Наименование+"</option>";
	КонецЦикла;
	ТекстHTML = ТекстHTML + "</td></tr>";
	
	Возврат ТекстHTML;
	
КонецФункции

#КонецОбласти

#Область Информация_о_товаре

// ПРЕДСТАВЛЕНИЕ ТОВАРА

Процедура УстановитьТекстЦветаСтрокиТовара(Фонт, КонФонта, Остаток, Резерв)
	
	СвободныйОстаток = Остаток - Резерв;
	
	Если СвободныйОстаток < 0 Тогда
		
		Фонт = "<font color=""red"">";
		КонФонта = "</font>";
		
	ИначеЕсли 	СвободныйОстаток = 0 И
				Остаток > 0 И
				Остаток = Резерв Тогда
				
		Фонт = "<font color=""gray"">";
		КонФонта = "</font>";
				
				
	Иначе
		
		Фонт 		= "";
		КонФонта 	= "";
		
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьТекстЦветаСтрокиТовара(Остаток, Резерв)
	
	СвободныйОстаток = Остаток - Резерв;
	
	Если СвободныйОстаток < 0 ИЛИ Резерв < 0 ИЛИ Остаток < 0 Тогда
		
		Возврат "#FF0000";
		
	ИначеЕсли 	СвободныйОстаток = 0 И
				Остаток > 0 И
				Остаток = Резерв Тогда
				
		Возврат "#C0C0C0";
				
				
	Иначе
		
		Возврат "#333333";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНастройкиОперативнойИнфоОТоваре() Экспорт
	
	//	если настройки не заданы, по-умолчанию выводятся как таблица остатков так и таблица цен,
	//	выборка производится для всех складов, всех типов цен
	
	ВыбСклады 	= Новый Массив;
	ВыбТипыЦен	= Новый Массив;
    ПоказыватьОстатки 	= Истина;
	ПоказыватьЦены 		= Истина;
	ПоказыватьСоглашения= Истина;
	ПоказыватьКроссы	= Ложь;
	ПоказыватьСборку 	= Ложь;
	ВнутренниеЗаказы 	= Ложь;
	ПоказыватьДополнительно	= Ложь;

	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ОбщиеФормы.НастройкаОперативнойИнформацииОТоваре", "НастройкиИнфТовара");
					
	Если Настройки <> Неопределено Тогда
		
		Склады = Настройки.Получить("Склады");
		Если Склады <> Неопределено Тогда
			Для Каждого Строка Из Склады Цикл Если Строка.Пометка Тогда ВыбСклады.Добавить(Строка.Значение); КонецЕсли; КонецЦикла; КонецЕсли;
		
		ТипыЦен = Настройки.Получить("ТипыЦен");
		Если ТипыЦен <> Неопределено Тогда
			Для Каждого Строка Из ТипыЦен Цикл Если Строка.Пометка Тогда ВыбТипыЦен.Добавить(Строка.Значение); КонецЕсли; КонецЦикла; КонецЕсли;
		
		Остатки	= Настройки.Получить("Остатки");
		Если Остатки <> Неопределено Тогда
			ПоказыватьОстатки = Остатки; КонецЕсли;
			
		Соглашения	= Настройки.Получить("Соглашения");
		Если Соглашения <> Неопределено Тогда
			ПоказыватьСоглашения = Соглашения; 
		КонецЕсли;	
		
		Кроссы	= Настройки.Получить("Кроссы");
		Если Кроссы <> Неопределено Тогда
			ПоказыватьКроссы = Кроссы; 
		КонецЕсли;	
		
		Цены	= Настройки.Получить("Цены");
		Если Цены <> Неопределено Тогда
			ПоказыватьЦены = Цены; КонецЕсли;

		НВалюта	= Настройки.Получить("Валюта");
		Если НВалюта <> Неопределено Тогда
			Валюта = НВалюта; КонецЕсли;
		
		НКонтрагент	= Настройки.Получить("Контрагент");
		Если НКонтрагент <> Неопределено Тогда
			Контрагент = НКонтрагент; КонецЕсли;
		
		НВнутренниеЗаказы	= Настройки.Получить("ВнутренниеЗаказы");
		Если НВнутренниеЗаказы <> Неопределено Тогда
			ВнутренниеЗаказы = НВнутренниеЗаказы; КонецЕсли; 
		
	   НВДополнительно	= Настройки.Получить("Дополнительно");
		Если НВДополнительно <> Неопределено Тогда
			ПоказыватьДополнительно = НВДополнительно; КонецЕсли; КонецЕсли;

	
	Возврат Новый Структура("Склады, ТипыЦен, Кроссы, Соглашения, Остатки, Цены, Сборка, Валюта, Контрагент, ВнутренниеЗаказы, Дополнительно", 
					ВыбСклады, ВыбТипыЦен, ПоказыватьКроссы, ПоказыватьСоглашения, ПоказыватьОстатки, ПоказыватьЦены, ПоказыватьСборку, Валюта, Контрагент, ВнутренниеЗаказы, ПоказыватьДополнительно);
	
КонецФункции

Функция ОбновитьНастройкиОперативнойИнфоОТоваре(НовыеНастройки) Экспорт
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ОбщиеФормы.НастройкаОперативнойИнформацииОТоваре", "НастройкиИнфТовара");
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый Соответствие;
	КонецЕсли;
	
	Цены = Истина;
	Если НовыеНастройки.Свойство("Цены", Цены) Тогда
		Настройки.Вставить("Цены", Цены);
	КонецЕсли;
	
	Остатки = Истина;
	Если НовыеНастройки.Свойство("Остатки", Остатки) Тогда
		Настройки.Вставить("Остатки", Остатки);
	КонецЕсли;
	
	Соглашения = Истина;
	Если НовыеНастройки.Свойство("Соглашения", Соглашения) Тогда
		Настройки.Вставить("Соглашения", Соглашения);
	КонецЕсли;
	
	Кроссы = Истина;
	Если НовыеНастройки.Свойство("Кроссы", Кроссы) Тогда
		Настройки.Вставить("Кроссы", Кроссы);
	КонецЕсли;
	
	Склады 	= Новый СписокЗначений;
	Если НовыеНастройки.Свойство("Склады", Склады) Тогда
		Настройки.Вставить("Склады", Склады);
	КонецЕсли;
	
	ТипыЦен = Новый СписокЗначений;
	Если НовыеНастройки.Свойство("ТипыЦен", ТипыЦен) Тогда
		Настройки.Вставить("ТипыЦен", ТипыЦен);
	КонецЕсли;
	
	Валюта = Неопределено;
	Если НовыеНастройки.Свойство("Валюта", Валюта) Тогда
		Настройки.Вставить("Валюта", Валюта);
	КонецЕсли;
	
	Контрагент = Неопределено;
	Если НовыеНастройки.Свойство("Контрагент", Контрагент) Тогда
		Настройки.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	ВнутренниеЗаказы = Истина;
	Если НовыеНастройки.Свойство("ВнутренниеЗаказы", ВнутренниеЗаказы) Тогда
		Настройки.Вставить("ВнутренниеЗаказы", ВнутренниеЗаказы);
	КонецЕсли;
	
	Дополнительно = Истина;
	Если НовыеНастройки.Свойство("Дополнительно", Дополнительно) Тогда
		Настройки.Вставить("Дополнительно", Дополнительно);
	КонецЕсли;

	ХранилищеНастроекДанныхФорм.Сохранить("ОбщиеФормы.НастройкаОперативнойИнформацииОТоваре", "НастройкиИнфТовара", Настройки);
	
	ПараметрыСеанса["НастройкиОперативнойИнфоОТоваре"] = ЗначениеВСтрокуВнутр(ПолучитьНастройкиОперативнойИнфоОТоваре());

КонецФункции

Функция ПолучитьИнформациюHTMLОТоваре(Массив, Валюта) Экспорт
	
	Структура = Новый Структура("Заголовок, АдресКартинки, ТекстHTML","","","");
	
	Если Массив.Количество() Тогда                                    
		Заголовок 	= "";
		Структура.ТекстHTML 	= ПолучитьТекстHTMLОТоваре(Массив, Валюта, Заголовок);
		//Структура.АдресКартинки	= Картинки.ПолучитьНавигационнуюСсылкуОсновногоИзображения(Массив[0]);
		Структура.Заголовок		= Заголовок;
	КонецЕсли;
	
	Возврат Структура;
			
КонецФункции
Функция ПолучитьИнформациюHTMLОТовареВсюВHTML(Массив, Настройки, УникальныйИдентификатор = Неопределено) Экспорт
	
	Заголовок 		= "";
	ТаблицаHTML 	= ПолучитьТекстHTMLОТоваре(Массив, Настройки, Заголовок,,Истина);
	
	КодПолученияСсылки = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"",""" + XMLСтрока(Массив[0]) + """)";
	
	Возврат "
	|<html>
	|<head>
	|	<meta http-equiv=""Content-Type"" content=""text/html"" />
	//|	<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
	|<style>
	|.image {
	
	// Это тень
	//|   filter: progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=125,strength=3);
	//|		box-shadow: 0px 0px 8px 1px rgba(119, 119, 119, 0.85);
	|filter: progid:DXImageTransform.Microsoft.Shadow(Color=#cccccc, Strength=5, Direction=0),
	|     progid:DXImageTransform.Microsoft.Shadow(Color=#cccccc, Strength=5, Direction=90),
	|     progid:DXImageTransform.Microsoft.Shadow(Color=#cccccc, Strength=5, Direction=180),
	|     progid:DXImageTransform.Microsoft.Shadow(Color=#cccccc, Strength=5, Direction=270);
	
	|	width: 130px; 
	|	height: 130px;
	|	float:left;
	|}
	|.image table tr td {
	|	padding: 0;
	|	margin: 0;
	|	border: 0;
	|	height: 100%;
	|	width: 100%;
	|}               
	|.image table {
	|	border-collapse: collapse;
	|	height: 100%;
	|	width: 100%;
	|}
	|.image td {
	|	 vertical-align: middle;
	|	 text-align: center;
	|}
	|.head {
	|	float:left;
	|	height:120px;
	|}
	|.table {
	|	position: relative;
	|}
	|</style>
	|</head>
	|<body>
	
	|<div class=""image""><table><tr><td>
	//<a href='
	//|V8:ВЫПОЛНИТЬ КОД: ОткрытьФорму(""Справочник.КартинкиНоменклатуры.ФормаСписка"", Новый Структура(""ТекущаяСтрока"", " + КодПолученияСсылки + "));
	//|'>
	|<img style=""border: none;"" width='120' src='" + ?(Массив[0].ФайлКартинки.Пустая(), "", НавигационнаяСсылкаКартинки(Массив[0].ФайлКартинки, УникальныйИдентификатор)) + "'></a></td></tr></table></div>
	
	|<div class=""head"">" + Заголовок + "</div>
	
	|<div class=""table"">
	|" + ТаблицаHTML + "
	|</div>
	
	|</body>
	|</html>
	|";
			
КонецФункции
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции


Функция ДобавитьПолеФормы(Элементы, Имя, ПутьКДанным, Родитель, ВидПоляФормы, Заголовок = Неопределено, ОбработчикПриНажатии = "", ТолькоПросмотр = Ложь)
      
	НовоеПоле = Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);
	НовоеПоле.Вид = ВидПоляФормы;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НовоеПоле.ТолькоПросмотр = ТолькоПросмотр;
	НовоеПоле.ПоложениеЗаголовка = ?(ЗначениеЗаполнено(Заголовок), ПоложениеЗаголовкаЭлементаФормы.Авто, ПоложениеЗаголовкаЭлементаФормы.Нет);
   	НовоеПоле.ЦветРамки = Новый Цвет(252, 250, 235);

	Если ЗначениеЗаполнено(ОбработчикПриНажатии) Тогда
		НовоеПоле.УстановитьДействие("ПриНажатии", ОбработчикПриНажатии);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции
Функция ДобавитьГруппуФормы(Элементы, Имя, Родитель, Заголовок = Неопределено)

	НоваяГруппа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);	
	НоваяГруппа.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	Возврат НоваяГруппа;
	
КонецФункции

Процедура ДобавитьОперативнуюИнформациюОТоваре(Форма, ОтображатьЦены = Истина) Экспорт
	
	// Реквизиты
	
	ТипСтрока 	= Новый ОписаниеТипов("Строка");
	РеквизитыИнфТовара = Новый Массив;
	
	РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("ИнфТовараТекстHTML", 		ТипСтрока));
	РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("ИнфТовраОтображать",		Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(РеквизитыИнфТовара);

	НоваяКоманда = Форма.Команды.Добавить("ПоказатьСкрытьИнфОТоваре");
	НоваяКоманда.Действие		= "ПоказатьСкрытьИнфОТоваре";
    НоваяКоманда.Подсказка		= "Показать, скрыть информацию о товарах в выделенных строках таблицы";
	НоваяКоманда.Картинка		= БиблиотекаКартинок.Информация16;
	НоваяКоманда.Отображение 	= ОтображениеКнопки.Картинка;
	
	НоваяКоманда = Форма.Команды.Добавить("НастройкаИнфОТоваре");
	НоваяКоманда.Действие		= "НастройкаИнфОТоваре";
    НоваяКоманда.Подсказка		= "Параметры отображения оперативной информации о товаре";
	НоваяКоманда.Картинка		= БиблиотекаКартинок.НастройкиОтчета;
	НоваяКоманда.Отображение 	= ОтображениеКнопки.Картинка;
	
	// Элементы
	
	Группа = Форма.Элементы.ГруппаОперативнойИнформацииТовара;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаКнопки = ДобавитьГруппуФормы(Форма.Элементы, "ГруппаИнфТовараКартинкаКнопки", Группа);
	
	Кнопка = Форма.Элементы.Добавить("ИнфТовараКнопка", Тип("КнопкаФормы"), ГруппаКнопки);
	Кнопка.Заголовок 	= "";
	Кнопка.ИмяКоманды 	= "ПоказатьСкрытьИнфОТоваре";
	
	Кнопка = Форма.Элементы.Добавить("ИнфТовараКнопкаНастройки", Тип("КнопкаФормы"), ГруппаКнопки);
	Кнопка.Заголовок 	= "";
	Кнопка.Вид			= ВидКнопкиФормы.Гиперссылка;
	Кнопка.ИмяКоманды 	= "НастройкаИнфОТоваре";
	
	//Кнопка = Форма.Элементы.Добавить("ИнфТовараКнопкаОтчетыТовара", Тип("КнопкаФормы"), ГруппаКнопки);
	//Кнопка.Заголовок 	= "";
	//Кнопка.Картинка		= БиблиотекаКартинок.Отчет;
	//Кнопка.Вид			= ВидКнопкиФормы.Гиперссылка;
	//Кнопка.ИмяКоманды 	= "НастройкаИнфОТоваре";

	//Кнопка = Форма.Элементы.Добавить("ОбновитьИнформациюОТоваре", Тип("КнопкаФормы"), ГруппаКнопки);
	//Кнопка.Заголовок 	= "";
	//Кнопка.Картинка		= БиблиотекаКартинок.Обновить;
	//Кнопка.Вид			= ВидКнопкиФормы.Гиперссылка;
	//Кнопка.ИмяКоманды 	= "ТоварыПриАктивизацииСтроки";
	
	ПолеТело = ДобавитьПолеФормы(Форма.Элементы, "ИнфТовараТекстHTML", "ИнфТовараТекстHTML", Группа, ВидПоляФормы.ПолеHTMLДокумента, ,"ИнфТовараТекстHTMLПриНажатии");
	ПолеТело.Ширина = 20;
	
	// раскрасим
	
	Форма.ИнфТовараТекстHTML = "<html><body bgcolor=""#FCFAEB""></body></html>";	
	
	ОбработатьОтображениеИнформацииОТоваре(Форма, Новый Структура) 
	
КонецПроцедуры


Функция СкладДляРасшифровки(Код, СкладСсылка) Экспорт
	
	СкладСсылка = Справочники.Склады.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(СкладСсылка) Тогда
		Возврат Истина;				
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьМассивВыделенныхТоваров(Форма, ТоварыЭлементы = "Товары", ТоварыФорма = "Товары", КолонкаТовара = "Номенклатура")
	
	Строки = Форма.Элементы[ТоварыЭлементы].ВыделенныеСтроки;
	Массив = Новый Массив;
	
	Если Строки.Количество() Тогда
					
		Для Каждого Идентификатор Из Строки Цикл                 
			
			//Если ТипЗнч(текТовар) = Тип("СправочникСсылка.Номенклатура") Тогда
			//	Если Не текТовар.Пустая() Тогда
			//		Массив.Добавить(текТовар); 
			//	КонецЕсли;
			//Иначе
			//	Список = Вычислить("Форма." + ТоварыФорма);
			//	Если ТипЗнч(Список) = Тип("ДинамическийСписок")
			//КонецЕсли; 
			//
			//Список = Вычислить("Форма." + ТоварыФорма).НайтиПоИдентификатору(14));
					
			//Строка = ?(ТоварыЭлементы = "Список", Идентификатор, Вычислить("Форма." + ТоварыФорма).НайтиПоИдентификатору(Идентификатор));
			ЭтоТовар = ТипЗнч(Идентификатор) = Тип("СправочникСсылка.Номенклатура");
			Строка = ?(ЭтоТовар, Идентификатор, Вычислить("Форма." + ТоварыФорма).НайтиПоИдентификатору(Идентификатор));
			Если Строка <> Неопределено Тогда
				//текТовар = ?(ТоварыЭлементы = "Список", Строка, Строка[КолонкаТовара]);
				текТовар = ?(ЭтоТовар, Строка, Строка[КолонкаТовара]);
				Если ТипЗнч(текТовар) = Тип("СправочникСсылка.Номенклатура") И Не текТовар.Пустая() Тогда
					Массив.Добавить(текТовар); 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции
Процедура ОбработатьОтображениеИнформацииОТоваре(Форма, Настройки) Экспорт
//Процедура ОбработатьОтображениеИнформацииОТоваре(Форма, ТоварыЭлементы = "Товары", ТоварыФорма = "Товары", Массив = Неопределено, КолонкаТовара = "Номенклатура", ПутьКСоглашению = Неопределено) Экспорт

	ТоварыЭлементы 	= ?(Настройки.Свойство("ТоварыЭлементы"), 	Настройки.ТоварыЭлементы, 	"Товары");
	ТоварыФорма 	= ?(Настройки.Свойство("ТоварыФорма"), 		Настройки.ТоварыФорма, 		"Товары");
	КолонкаТовара 	= ?(Настройки.Свойство("КолонкаТовара"), 	Настройки.ТоварыФорма, 		"Номенклатура");
	
	ЕстьСоглашение	= Настройки.Свойство("ПутьКСоглашению");
	ПутьКСоглашению	= ?(ЕстьСоглашение, Настройки.ПутьКСоглашению, Неопределено);

	ИнфТовраОтображать = Форма.ИнфТовраОтображать;
	
	Если ИнфТовраОтображать <> Форма.Элементы.ИнфТовараТекстHTML.Видимость Тогда // Только если изменилось то только тогда  есть смысл подавать сигнал на обновление
		
		Форма.Элементы.ИнфТовараТекстHTML.Видимость 		= ИнфТовраОтображать;
		Форма.Элементы.ИнфТовараКнопкаНастройки.Видимость	= ИнфТовраОтображать;
		//Форма.Элементы.ИнфТовараКнопкаОтчетыТовара.Видимость= ИнфТовраОтображать; 
		
	КонецЕсли;
			
	Если ИнфТовраОтображать Тогда
		
		Если Настройки.Свойство("текТовар") Тогда
			МассивТоваров = Новый Массив;
			МассивТоваров.Добавить(Настройки.текТовар);
		Иначе
			МассивТоваров = ?(Настройки.Свойство("СсылкиТоваров"), 
							Настройки.СсылкиТоваров, 
							ПолучитьМассивВыделенныхТоваров(Форма, ТоварыЭлементы, ТоварыФорма, КолонкаТовара));
		КонецЕсли;
		
		Если МассивТоваров.Количество() Тогда
			
			//ЭлементВалюта = Форма.Элементы.Найти("Валюта");
			//Если ЭлементВалюта <> Неопределено И Не Настройки.Свойство("Валюта") Тогда
			//	Настройки.Вставить("Валюта", Вычислить("Форма." + ЭлементВалюта.ПутьКДанным));
			//КонецЕсли;
			
			Если ЕстьСоглашение Тогда
				Настройки.Вставить("Соглашение", Вычислить("Форма." + ПутьКСоглашению));
			КонецЕсли;
			
			ИнфОТоваре = ПолучитьИнформациюHTMLОТовареВсюВHTML(МассивТоваров, Настройки, Форма.УникальныйИдентификатор);
			Форма.ИнфТовараТекстHTML = ИнфОТоваре;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ЗавернутьHTML(Параметры)

	Возврат СтрШаблон("
	|<html>
	|	<head>
	|		<meta http-equiv=""Content-Type"" content=""text/html"" />
	//|		<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
	|		<style>
	|			%1
	|		</style>
	|	</head>
	|
	|	<body>
	|		%2
	|	</body>
	|
	|</html>
	|",
		АТ_ОбщегоНазначения.Параметр(Параметры, "style"),
		АТ_ОбщегоНазначения.Параметр(Параметры, "body"));
	
КонецФункции
Функция ОбернутьСписокомHTML(Строки)
	
	новТекст = новый Массив;
	
	Для Каждого строка Из Строки Цикл		
		новТекст.Добавить(СтрШаблон("<li>%1</li>", Строка));		
	КонецЦикла;
	
	Возврат СтрШаблон("
	|<ul class=""border"">
	|	%1
	|</ul>", СтрСоединить(новТекст));
	
КонецФункции

#Область Информация_о_партнере

Функция ПараметрыОФормленияНадписиЭтапыОплаты()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЦветПредупреждение", WebЦвета.Кирпичный);
	СтруктураПараметров.Вставить("ЦветВыделение", Новый Цвет(22, 39, 121));
	СтруктураПараметров.Вставить("ФорматДаты", "ДЛФ=D");
	СтруктураПараметров.Вставить("ФорматДоли", "ЧЦ=3; ЧДЦ=; ЧН=0");
	
	Возврат СтруктураПараметров;
	
КонецФункции
// Возвращает сокращенное представление формы оплаты
//
// Параметры:
// 		ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыКлиентом
//                    - ПеречислениеСсылка.ВариантыОплатыПоставщику 
//                    - вариант оплаты. для которого нужно получить представление
//
// Возвращаемое значение:
// 		Строка - представление варианта оплаты
//
Функция ПредставлениеВариантаОплаты(ВариантОплаты)
	
	Представление = "";
	
	Если ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления") Тогда
		Представление = НСтр("ru='Предоплата'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления") Тогда
		Представление = НСтр("ru='Кредит'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
		Представление = НСтр("ru='Аванс'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции
// Возвращает информативное представление формы оплаты для соглашений
//
// Параметры:
// 		ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - форма оплаты. для которой нужно получить представление
//
// Возвращаемое значение:
// 		Строка - представление формы оплаты
//
Функция ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		Представление = НСтр("ru='Оплата: Любая'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
		Представление = НСтр("ru='Оплата платежной картой'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		Представление = НСтр("ru='Взаимозачет'");
	Иначе
		Представление = НСтр("ru='%ФормаОплаты% оплата'");
		Представление = СтрЗаменить(Представление, "%ФормаОплаты%", ФормаОплаты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции
Функция НадписьЭтапыОплатИзСоглашения(СоглашениеСсылка)
	
	// Эта функция скопирована из общего модуля ЭтапыОплатыКлиентСервер, сам ничего не изобретал
	
	// Возвращает форматированную строку информации по оплатам соглашениям
	
	МассивСтрок = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	ФормаОплаты, ЭтапыГрафикаОплаты.(ВариантОплаты, Сдвиг, ПроцентПлатежа, ПроцентЗалогаЗаТару)
	|ИЗ 		Справочник.СоглашенияСКлиентами
	|ГДЕ		Ссылка = &Ссылка;
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СоглашениеСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЭтапыГрафикаОплаты		= Выборка.ЭтапыГрафикаОплаты.Выгрузить();
		КоличествоЭтаповОплаты 	= ЭтапыГрафикаОплаты.Количество();
		Оформление 				= ПараметрыОФормленияНадписиЭтапыОплаты();
		
		МассивСтрок.Добавить(ПредставлениеФормыОплатыДляСоглашений(Выборка.ФормаОплаты));
		
		ТекстЭтаповОплаты = "";
		Если КоличествоЭтаповОплаты = 0 Тогда
			
			МассивСтрок.Добавить(", ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='этапы не указаны'"), , Оформление.ЦветПредупреждение));
			
		ИначеЕсли КоличествоЭтаповОплаты <= 2 Тогда
			
			МассивСтрок.Добавить(" ");
			Для Сч=1 По КоличествоЭтаповОплаты Цикл
				СтрокаОплаты = ЭтапыГрафикаОплаты[Сч-1];
				ТекстЭтаповОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 %2% %3 дн'"),
					ПредставлениеВариантаОплаты(СтрокаОплаты.ВариантОплаты),
					СтрокаОплаты.ПроцентПлатежа, СтрокаОплаты.Сдвиг);
				МассивСтрок.Добавить(ТекстЭтаповОплаты);
				МассивСтрок.Добавить(", ");
			КонецЦикла;
			МассивСтрок.Удалить(МассивСтрок.Количество()-1);
			
		Иначе
			
			ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
				КоличествоЭтаповОплаты,
				НСтр("ru='этапы'"), НСтр("ru='этапа'"), НСтр("ru='этапов'"), НСтр("ru='м'"));
				
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(НСтр("ru='в'") +" " + Формат(КоличествоЭтаповОплаты, "ЧН=0") +" " + ТекстЭтапа);
			
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции


Функция ПолучитьТаблицуСтилейПартнера()
	
	Возврат "
	|body { 
    |		margin: 0; /* Убираем отступы */
   	|}
	|
	|p {
	|		font-family: Verdana, Arial, Helvetica, sans-serif;
	//|		margin-top: 	0em; /* Отступ сверху */
	|		margin-bottom: -1em; /* Отступ снизу */
	|}
	
	|.border {
	|	list-style: none;
	|	padding: 0;
	|}
	|.border li {
	|	font-family: ""Trebuchet MS"", ""Lucida Sans"";
	|	margin-bottom: 10px;
	|	border-left: 3px solid #f05d22; 
	|	font-size: 15px;
	|}
	|";
	
КонецФункции
Функция ПолучитьИнформациюОПартнере(Партнер, Параметры = Неопределено) Экспорт

	// Возвращает структуру
	//		- ТекстHTML 		- текст HTML с информацией
	//		- КоличествоСтрок 	- число строк с информацией
	//		- НадписьОплаты 	- форматированная строка с описанием этапов оплат (если указано было соглашение)
	//
	// Параметры структура дополнительных необязательных параметров
	//	- Организация
	//	- Контрагент
	//	- Договор
	
	СтруктураВозврата = Новый Структура("КоличествоСтрок, ТекстHTML, НадписьОплаты", 1);
	
	Если ЗначениеЗаполнено(Партнер) Тогда
	
		Строки = Новый Массив;
		
		ОтгрузкаРазрешена = Не СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер);
		Строки.Добавить(?(ОтгрузкаРазрешена, 
						"<p>Отгрузка <span style=""color:green"">Разрешена.</span></p>", 
						"<p>Отгрузка <span style=""color:red""	>Запрещена!</span></p>"));
		
		Если ЗначениеЗаполнено(АТ_ОбщегоНазначения.Параметр(Параметры, "Соглашение")) Тогда
			СтруктураВозврата.НадписьОплаты = НадписьЭтапыОплатИзСоглашения(Параметры.Соглашение);
		КонецЕсли;
		
		НаполнитьСкидками(Строки, Партнер);
		НаполнитьПартнераДолгами(Строки, Партнер);
		НаполнитьПартнераДнямиПросрочки(Строки, Партнер);
		
		СтруктураВозврата.ТекстHTML = ЗавернутьHTML(Новый Структура("body, style", СтрСоединить(Строки, Символы.ПС), ПолучитьТаблицуСтилейпартнера()));
		СтруктураВозврата.КоличествоСтрок = Строки.Количество();
	Иначе
		СтруктураВозврата.ТекстHTML = ЗавернутьHTML(Новый Структура("body", "Клиент не выбран."));
	КонецЕсли;
				
	Возврат СтруктураВозврата;
					
КонецФункции
Процедура НаполнитьПартнераДнямиПросрочки(Строки, Партнер)
	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|
	//|	ПРЕДСТАВЛЕнИЕ(АналитикаУчетаПоПартнерам.Организация) 	Организация,
	//|	ПРЕДСТАВЛЕнИЕ(АналитикаУчетаПоПартнерам.Договор) 		Договор,
	//|	СуммаОстаток Долг
	//|ИЗ 
	//|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер) Ост
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрНакопления.РасчетыСКлиентамиПоДокументам Дет
	//|ПО
	//|	Ост.АналитикаУчетаПоПартнерам = Дет.АналитикаУчетаПоПартнерам И
	//|	Ост.ЗаказКлиента = Дет.ЗаказКлиента И
	//|	Ост.РасчетныйДокумент = Дет.РасчетныйДокумент И
	//|	Ост.Валюта = Дет.Валюта
	//|");
	//Запрос.УстановитьПараметр("Партнер", Партнер);
	//	
	//СписокДолгов = Новый Массив;
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	СписокДолгов.Добавить(СтрШаблон("[%1] %2 - %3 р.", 
	//					Выборка.Организация, 
	//					Выборка.Договор, 
	//					СтрШаблон("<span style=""color:%1"">%2</span>", ?(Выборка.Долг < 0, "green", "red"), ?(Выборка.Долг < 0, -Выборка.Долг, Выборка.Долг))));
	//КонецЦикла;
	//
	//Если Выборка.Количество() Тогда
	//	Строки.Добавить(СтрШаблон("<p>Долги: %1</p>",
	//					ОбернутьСписокомHTML(СписокДолгов)));
	//КонецЕсли;
		
КонецПроцедуры
Процедура НаполнитьПартнераДолгами(Строки, Партнер)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ПРЕДСТАВЛЕнИЕ(АналитикаУчетаПоПартнерам.Организация) 	Организация,
	|	ПРЕДСТАВЛЕнИЕ(АналитикаУчетаПоПартнерам.Договор) 		Договор,
	|	СуммаОстаток Долг
	|ИЗ 
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер);
	|");
	Запрос.УстановитьПараметр("Партнер", Партнер);
		
	СписокДолгов = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокДолгов.Добавить(СтрШаблон("[%1] %2 - %3 р.", 
						Выборка.Организация, 
						Выборка.Договор, 
						СтрШаблон("<span style=""color:%1"">%2</span>", ?(Выборка.Долг < 0, "green", "red"), ?(Выборка.Долг < 0, -Выборка.Долг, Выборка.Долг))));
	КонецЦикла;
	
	Если Выборка.Количество() Тогда
		Строки.Добавить(СтрШаблон("<p>Долги: %1</p>",
						ОбернутьСписокомHTML(СписокДолгов)));
	КонецЕсли;
		
КонецПроцедуры
Процедура НаполнитьПартнераДолгами_Ст(Строки, Партнер)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ПРЕДСТАВЛЕнИЕ(АналитикаУчетаПоПартнерам.Организация) 	Организация,
	|	ПРЕДСТАВЛЕнИЕ(АналитикаУчетаПоПартнерам.Договор) 		Договор,
	|	СуммаОстаток Долг
	|ИЗ 
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер);
	|");
	Запрос.УстановитьПараметр("Партнер", Партнер);
		
	СписокДолгов = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокДолгов.Добавить(СтрШаблон("[%1] %2 - %3 р.", 
						Выборка.Организация, 
						Выборка.Договор, 
						СтрШаблон("<span style=""color:%1"">%2</span>", ?(Выборка.Долг < 0, "green", "red"), ?(Выборка.Долг < 0, -Выборка.Долг, Выборка.Долг))));
	КонецЦикла;
	
	Если Выборка.Количество() Тогда
		Строки.Добавить(СтрШаблон("<p>Долги: %1</p>",
						ОбернутьСписокомHTML(СписокДолгов)));
	КонецЕсли;
		
КонецПроцедуры
Процедура НаполнитьСкидками(Строки, Партнер)
	
	СтрокиСкидок 	= Новый Массив;
	Запрос 			= Новый Запрос("
	|ВЫБРАТЬ РАЗРЕшЕННЫЕ ПЕРВЫЕ 1 
	|		Источник.Наименование + "" - "" + СкидкаНаценка.Наименование + ""% "" Скидка
	|ИЗ 	Регистрсведений.ДействиеСкидокНаценок.СрезПоследних(,Источник.Партнер = &Партнер)
	|ГДЕ 	Статус = &Действует
	|");
	Запрос.УстановитьПараметр("Действует", 	Перечисления.СтатусыДействияСкидок.Действует);
	Запрос.УстановитьПараметр("Партнер", 	Партнер);
			
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		Строки.Добавить(СтрШаблон("<p>Скидки: %1</p>", 
					ОбернутьСписокомHTML(Выполнение.Выгрузить().ВыгрузитьКолонку("Скидка"))));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти