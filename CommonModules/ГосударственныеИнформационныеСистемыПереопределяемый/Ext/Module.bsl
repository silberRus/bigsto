
#Область ПрограммныйИнтерфейс

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	//++ НЕ ГИСМ
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить параметры выбора,
//  ИмяПоляВвода - Строка - имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	//++ НЕ ГИСМ
	ПараметрыВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора);
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.АлкогольнаяПродукцияВоВскрытойТаре", Ложь));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОсобенностьУчета",                   Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры",                    Перечисления.ТипыНоменклатуры.Товар));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой нужно установить связь,
//   ИмяПоляВвода - Строка - имя поля, связываемого с номенклатурой,
//   ПутьКДаннымНоменклатуры - Строка - путь к текущей номенклатуре в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода, ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	//++ НЕ ГИСМ
	СвязиПараметровВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Единица измерения".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаЕдиницИзмерения - Строка - имя элемента формы "Единица измерения",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Упаковка".
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	                                                  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
	                                                  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ИмяПоляВводаЕдиницИзмерения, ПутьКПолюОтбора);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	                                                            ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики, ПутьКПолюОтбора);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
	                                                    ИмяПоляВводаСерии = "ТоварыСерия",
	                                                    ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
	                                                    ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(Форма, "СерииВсегдаВТЧТовары",ИмяПоляВводаСерии,ПутьКПолюОтбораСтатусУказанияСерий,ПутьКПолюОтбораТипНоменклатуры);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, , КэшированныеЗначения);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

Функция ПараметрыУказанияСерийФормыОбъекта(Объект, МенеджерОбъекта) Экспорт
	
	//++ НЕ ГИСМ
	Возврат НоменклатураСервер.ПараметрыУказанияСерий(Объект, МенеджерОбъекта);
	//-- НЕ ГИСМ

	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	//-- НЕ ГИСМ
	
	Возврат;

КонецПроцедуры

Функция  ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма) Экспорт
	
	//++ НЕ ГИСМ
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	//-- НЕ ГИСМ
	
	Возврат Неопределено;

КонецФункции

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ТипДокумента) Экспорт
	
	Если ТипДокумента = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ВидОперации,ТорговыйОбъект";
	Иначе
		ИменаРеквизитов = "";
	КонецЕсли;
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(ТипДокумента, Объект) Экспорт
	
	Если ТипДокумента = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНИсходящаяЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНВходящаяЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Документы.ЧекЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИСВозврат(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктПостановкиНаБалансЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктСписанияЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийПередачаВРегистр2ЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийВозвратИзРегистра2ЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСопоставлениеКлассификаторовЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийШтрихкодыУпаковокТоваров(Объект);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипДокумента = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		//++ НЕ ГИСМ
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыЕГАИС(Объект);
		//-- НЕ ГИСМ
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = "";
	
	Если ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		//++ НЕ ГИСМ
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийШтрихкодыУпаковокТоваров(ПараметрыУказанияСерий);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		//++ НЕ ГИСМ
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыЕГАИС(ПараметрыУказанияСерий);
		//-- НЕ ГИСМ
	
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		//++ НЕ ГИСМ
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийТТНВходящаяЕГАИС(ПараметрыУказанияСерий);
		//-- НЕ ГИСМ
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС
		ИЛИ  ТипОбъекта = Метаданные.Документы.ЧекЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат
		ИЛИ ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		//++ НЕ ГИСМ
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
		//-- НЕ ГИСМ
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	//++ НЕ ГИСМ
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	Если ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект")
		И ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
		ПараметрыЗаполненияРеквизитов.Вставить(
			"ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
		
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакЕдиницаИзмерения",
		Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
		
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
//
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	//++ НЕ ГИСМ
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	//-- НЕ ГИСМ
	
КонецПроцедуры

// В функции требуется определить признак использования характеристик для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   Булево - признак использования характеристик.
//
Функция ПризнакИспользованияХарактеристик(Номенклатура) Экспорт
	
	//++ НЕ ГИСМ
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	//-- НЕ ГИСМ
	
	Возврат Ложь;
	
КонецФункции

// В функции требуется определить признак использования серий для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   Булево - признак использования серий.
//
Функция ПризнакИспользованияСерий(Номенклатура) Экспорт
	
	//++ НЕ ГИСМ
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА
	|			Номенклатура.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|		ТОГДА
	|			Номенклатура.ВладелецСерий.ИспользоватьСерии
	|		КОГДА
	|			Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|		ТОГДА
	|			Номенклатура.ВидНоменклатуры.ИспользоватьСерии
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ПризнакИспользованияСерий
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПризнакИспользованияСерий = Ложь;
	Если Выборка.Следующий() Тогда
		ПризнакИспользованияСерий = Выборка.ПризнакИспользованияСерий;
	КонецЕсли;
	
	Возврат ПризнакИспользованияСерий;
	//-- НЕ ГИСМ
	
	Возврат Ложь;
	
КонецФункции

// В функции требуется определить признак использования упаковок для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   Булево - признак использования упаковок.
//
Функция ПризнакИспользованияУпаковок(Номенклатура) Экспорт
	
	//++ НЕ ГИСМ
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьУпаковки");
	//-- НЕ ГИСМ
	
	Возврат Ложь;
	
КонецФункции

// В функции нужно реализовать получение и возврат базовой единицы измерения номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   ОпределяемыйТип.Упаковка - базовая единица измерения.
//
Функция БазоваяЕдиницаИзмеренияНоменклатуры(Номенклатура) Экспорт
	
	//++ НЕ ГИСМ
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	//-- НЕ ГИСМ
	
	Возврат Неопределено;
	
КонецФункции

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	//++ НЕ ГИСМ
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ОфициальноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ОфициальноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	//-- НЕ ГИСМ
	
КонецПроцедуры

// Возвращает строковое представление руководителя организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
// Возвращаемое значение:
//  Структура - данные руководителя:
//   * Руководитель - Строка - ФИО руководителя,
//   * Должность - Строка - должность руководителя.
//
Функция ДанныеРуководителяОрганизации(Организация, ДатаСведений = Неопределено) Экспорт
	
	Результат = Новый Структура("Руководитель, Должность", "", "");
	
	//++ НЕ ГИСМ
	ДанныеРуководителя = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, ДатаСведений);
	
	Результат.Руководитель = Строка(ДанныеРуководителя.ФизическоеЛицо);
	Результат.Должность = Строка(ДанныеРуководителя.Должность);
	//-- НЕ ГИСМ
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти