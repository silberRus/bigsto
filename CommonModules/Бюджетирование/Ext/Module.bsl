
#Область Периоды

Функция ПолучитьСоставПериодвПоМесячно(Период, ПослДата = Неопределено, КолПредПериодов = 0)
	
	Состав = Новый Массив;
	
	текМесяц 	= НачалоМесяца(ДобавитьМесяц(Период.ДатаНачала, -КолПредПериодов));
	послМесяц 	= ?(ПослДата = Неопределено, НачалоМесяца(Период.ДатаОкончания), НачалоМесяца(ПослДата));
	
	Пока текМесяц <= послМесяц Цикл
		
		Состав.Добавить(Новый СтандартныйПериод(НачалоМесяца(текМесяц), КонецМесяца(текМесяц)));
		текМесяц = ДобавитьМесяц(текМесяц, 1);
		
	КонецЦикла;
	
	Возврат Состав;
	
КонецФункции
Функция ПолучитьСоставПериодов(Периодичность, Период, ПослДата = Неопределено, КолПредПериодов = 0) Экспорт
	
	// Возвращает массив внутри которого будут периоды от даты начала до даты окончания с указанием на началао периода
	
	Состав = Новый Массив;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Состав = ПолучитьСоставПериодвПоМесячно(Период, ПослДата, КолПредПериодов);
	Иначе
		ВызватьИсключение СтрШаблон("Для периодичности %1 не система не спроектирована.", Перечисления.Периодичность);
	КонецЕсли;
	
	Возврат Состав;
	
КонецФункции

Функция ОпределитьСтандартнуюДатуНачала(ДатаНачала, Периодичность) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Возврат НачалоГода(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Возврат НачалоМесяца(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
		Возврат НачалоГода(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		
		Возврат НачалоНедели(ДатаНачала);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Для периодичности %1 не создан обработчик определения начала переиода", Периодичность);
	
	КонецЕсли;
	
КонецФункции
Функция ОпределитьСтандартнуюДатуОкончания(ДатаНачала, Периодичность) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Возврат КонецГода(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Возврат КонецМесяца(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
		Возврат КонецГода(ДобавитьМесяц(ДатаНачала, 36));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		
		Возврат КонецНедели(ДатаНачала);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Для периодичности %1 не создан обработчик определения конца переиода", Периодичность);
	
	КонецЕсли;
	
КонецФункции
Функция ОпределитьМинимальнуюДатуОкончания(ДатаНачала, Периодичность) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Возврат КонецМесяца(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Возврат КонецНедели(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
		Возврат КонецГода(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		
		Возврат КонецДня(ДатаНачала);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Для периодичности %1 не создан обработчик определения конца переиода", Периодичность);
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Запросы

Функция ПолучитьНастройкиЗапросаПолностью(Статья, Сценарий) Экспорт
	
	Возврат ВернутьНастройкиЗапросаСтруктурой("
	|ВЫБРАТЬ
	|	Параметры,
	|	ТекстЗапроса,
	|	ТекстЗапросаСсылка,
	|	ТекстЗапросаРасшифровки			ТекстРасшифровки,
	|	ТекстЗапросаРасшифровкиСсылка	ТекстРасшифровкиСсылка
	|ИЗ 
	|	РегистрСведений.ЗапросыДДС 
	|ГДЕ
	|	Статья = &Статья И Сценарий = &Сценарий
	|",
	Новый Структура("ТекстЗапроса, ТекстРасшифровки, ТекстЗапросаСсылка, ТекстРасшифровкиСсылка"),
	Статья, Сценарий);
	
КонецФункции
Функция ПолучитьНастройкиЗапроса(Статья, Сценарий) Экспорт
	
	Возврат ВернутьНастройкиЗапросаСтруктурой("
	|ВЫБРАТЬ
	|	Параметры,
	|	ВЫБОР КОГДА ТекстЗапросаСсылка = &ПустойТекст ТОГДА ТекстЗапроса ИНАЧЕ ТекстЗапросаСсылка.Текст КОНЕЦ ТекстЗапроса,
	|	ВЫБОР КОГДА ТекстЗапросаРасшифровкиСсылка = &ПустойТекст ТОГДА 	ТекстЗапросаРасшифровки ИНАЧЕ ТекстЗапросаРасшифровкиСсылка.Текст КОНЕЦ ТекстРасшифровки
	|ИЗ 
	|	РегистрСведений.ЗапросыДДС 
	|ГДЕ
	|	Статья = &Статья И Сценарий = &Сценарий
	|",
	Новый Структура("ТекстЗапроса, ТекстРасшифровки"), 
	Статья, Сценарий);
	
КонецФункции
Функция ВернутьНастройкиЗапросаСтруктурой(ТекстЗапроса, СтруктураВозврата, Статья, Сценарий)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ПустойТекст", 	Справочники.ТекстыЗапросов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Статья", 		Статья);
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		
		Если ПустаяСтрока(Выборка.Параметры) Тогда
			Табл = Новый ТаблицаЗначений;
		Иначе
			Табл = ЗначениеИзСтрокиВнутр(Выборка.Параметры);
			Табл = ?(ТипЗнч(Табл) = Тип("ТаблицаЗначений"), Табл, Новый ТаблицаЗначений);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("Параметры", Табл);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции
Функция ПолучитьЗапрос(Статья, Сценарий) Экспорт

	Настройки = ПолучитьНастройкиЗапроса(Статья, Сценарий);
	
	Если Настройки <> Неопределено И Не ПустаяСтрока(Настройки.ТекстЗапроса) Тогда
		
		СвойЗапрос = Новый Запрос(Настройки.ТекстЗапроса);
		Для Каждого Строка Из Настройки.Параметры Цикл
			свойЗапрос.УстановитьПараметр(Строка.Ключ, Строка.Значение);
		КонецЦикла;
		
		Возврат СвойЗапрос;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРезультатВыполненияЗапроса(Параметры) Экспорт
	
	// Выполняет запрос по бюджету с указанными параметрами
	//	если результат пустой или ошибка тогда вернет неопределено
	// Параметры - структура
	//	 - СтатьяБюджета
	//	 - Период
	// 	 - 	Запрос Или 
	//		Сценарий (если указать сценарий, тогда будет запрос который вытащит из базы текст запроса (ЗапросыДДС) иначе будет взят ппереданный запрос)
	//	 - Подразделение (необязательно, если указать тогда будет фильтр по подразделению, после результата выполнения запроса)
	
	Перем Запрос, Подразделение;
	
	Если Не Параметры.Свойство("Запрос", Запрос) Тогда
		Запрос = ПолучитьЗапрос(Параметры.СтатьяБюджета, Параметры.Сценарий);
		Если Запрос = Неопределено Тогда
			Возврат Неопределено
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтатьяБюджета", 	Параметры.СтатьяБюджета);
	Запрос.УстановитьПараметр("ДатаНачала", 	Параметры.Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	Параметры.Период.ДатаОкончания);

	Попытка
		Результат = Запрос.Выполнить().Выгрузить();
	Исключение
		опОшибки = ОписаниеОшибки();
		Сообщить(СтрШаблон("Статья[%1] Подразделение[%2]%3%4", Параметры.СтатьяБюджета, Параметры.Подразделение, Символы.ПС, опОшибки));
		Возврат Неопределено;
	КонецПопытки;
	
	Если Параметры.Свойство("Подразделение", Подразделение) И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		Результат = КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Результат, Новый Структура("Подразделение", Подразделение));
		Возврат ?(Результат.Количество(), Результат, Неопределено);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ПолучитьДанныеДляРасчетаСистемныхДокументов(Период) Экспорт
	
	// Возвращает структуру
	// в которых таблицы для расчета, чтобы в дальнейшем можно было заполнить системный документ и провести его
	//
	// Новые - таблица значений (данные которых нет в системных документах)
	// 				- Сценарий, МодельБюджета, Подразделение, Период, СтатьяБюджета, 
	// 				- НомерСтроки, Документ
	// Старые - таблица значений (данные которые уже есть в системных документах)
	// 				- Сценарий, МодельБюджета, Подразделение, Период, СтатьяБюджета, 
	// 				- НомерСтроки, Документ
	
	Табл = Новый ТаблицаЗначений;
	Табл.Колонки.Добавить("МодельБюджета",	Новый ОписаниеТипов("СправочникСсылка.МоделиБюджетов"));
	Табл.Колонки.Добавить("Подразделение",	Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Табл.Колонки.Добавить("Сценарий", 		Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"));
	Табл.Колонки.Добавить("СтатьяБюджета", 	Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджета"));
	Табл.Колонки.Добавить("Период", 		Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Мод.Ссылка МодельБюджета, Мод.СтатьяБюджета, Подразделение, Сцен.Ссылка Сценарий, Период
	|ИЗ	РегистрСведений.Бюджетирование Рег
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Справочник.МоделиБюджетов.Показатели Мод
	|ПО						Рег.СтатьяБюджета = Мод.СтатьяБюджета
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 	Справочник.СценарииПланирования Сцен
	|ПО 				НЕ Сцен.ПометкаУдаления
	|
	|ГДЕ НЕ ЭтоАвтоРасчет И Период >= &ДатаНачала И Период <= &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО Период
	|
	|ИТОГИ ПО Период ПЕРИОДАМИ(МЕСЯЦ, &ДатаНачала, &ДатаОкончания)
	|");
	
	Запрос.УстановитьПараметр("ДатаНачала",		Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	Период.ДатаОкончания);
	
	ВыбПериоды = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыбПериоды.Следующий() Цикл
		
		Выборка = ВыбПериоды.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи()= ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
				ЗаполнитьЗначенияСвойств(Табл.Добавить(), Выборка);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Таб.МодельБюджета, Таб.СтатьяБюджета, Таб.Подразделение, Таб.Сценарий, Таб.Период
	|ПОМЕСТИТЬ Таблица
	|ИЗ &Таблица Таб
	|;
	|ВЫБРАТЬ 	Таб.МодельБюджета, Таб.СтатьяБюджета, Таб.Подразделение, Таб.Сценарий, Таб.Период, 
	|			ЕСТЬNULL(Рег.НомерСтроки, 0) НомерСтроки, ЕСТЬNULL(Рег.Регистратор, ЗНАЧЕНИЕ(Документ.Бюджет.ПустаяСсылка)) Документ
	|ПОМЕСТИТЬ ОбщаяТаблица
	|ИЗ Таблица Таб
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.Бюджетирование Рег
	|ПО					Рег.ЭтоАвтоРасчет И
	|					Таб.СтатьяБюджета 	= Рег.СтатьяБюджета И
	|					Таб.Подразделение 	= Рег.Подразделение И
	|					Таб.Сценарий 		= Рег.Сценарий И
	|					Таб.Период 			= Рег.Период
	|;
	|ВЫБРАТЬ 	МодельБюджета, СтатьяБюджета, Подразделение, Сценарий, Период, НомерСтроки, Документ
	|ИЗ 		ОбщаяТаблица
	|ГДЕ		НомерСтроки > 0
	|;
	|ВЫБРАТЬ 	МодельБюджета, СтатьяБюджета, Подразделение, Сценарий, Период
	|ИЗ 		ОбщаяТаблица
	|ГДЕ		НомерСтроки = 0
	|");
	
	Запрос.УстановитьПараметр("Таблица", Табл);
	Пакет = Запрос.ВыполнитьПакет();
	Возврат Новый Структура("Старые, Новые", Пакет[2].Выгрузить(), Пакет[3].Выгрузить());
	
КонецФункции
Процедура РаботаРобота() Экспорт
	
	текДата = ТекущаяДата();
	
	Расчет = ПолучитьДанныеДляРасчетаСистемныхДокументов(Новый СтандартныйПериод(Константы.ДатаЗапретаИзмененийБюджета.Получить(), КонецГода(ТекущаяДата())));
	
	СформироватьРасчетСтарыхДокументов(Расчет.Старые);
	СформироватьРасчетНовыхДокументов(Расчет.Новые);
	
	Константы.ЗатраченноеВремяПоследнегоОбновленияБюджета.Установить(ТекущаяДата() - текДата);
	
КонецПроцедуры

Функция СформироватьРасчетСтарыхДокументов(Табл) Экспорт
	
	// Табл - таблица значений с полями:
	// 			- Сценарий, МодельБюджета, Подразделение, Период, СтатьяБюджета, 
	// 			- НомерСтроки, Документ
	// Перезаписываед данные в документах результатами запросов
	
	ДокПроведения 	= Новый Соответствие;
	Измененные		= Новый Соответствие;
	
	Для Каждого Строка Из Табл Цикл
		
		Документ = ДокПроведения[Строка.Документ];
		Если Документ = Неопределено Тогда
			
			Документ = Строка.Документ.ПолучитьОбъект();
			ДокПроведения.Вставить(Строка.Документ, Документ);
			
		КонецЕсли;
		
		СтрокаДока 		= Документ.Показатели[Строка.НомерСтроки - 1];
		ТаблРезультат 	= ПолучитьРезультатВыполненияЗапроса(Новый Структура("СтатьяБюджета, Сценарий, Подразделение, Период",
										Строка.СтатьяБюджета, Документ.Сценарий, Документ.Подразделение,
										Новый СтандартныйПериод(Строка.Период, ОпределитьМинимальнуюДатуОкончания(Строка.Период, Документ.Сценарий.Периодичность))));
										
		Если ТаблРезультат <> Неопределено Тогда
			
			ТаблРезультат = КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(ТаблРезультат, Новый Структура("Подразделение", Документ.Подразделение));
			
			Сумма = ТаблРезультат.Итог("Сумма");
			Если СтрокаДока.Сумма <> Сумма Тогда
				СтрокаДока.Сумма = Сумма;
				Измененные.Вставить(Строка.Документ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Измененные Цикл
		ДокПроведения[Элемент.Ключ].Записать();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
Функция СформироватьРасчетНовыхДокументов(Табл) Экспорт
	
	// Табл - таблица значений с полями:
	// 			- Сценарий, МодельБюджета, Подразделение, Период, СтатьяБюджета, 
	// Создает новые документы по стандартным периодам и запичвает данные результатами запросов
	
	Отработанные = Новый Соответствие;
	
	Для Каждого Строка Из Табл Цикл
		
		Хеш = Строка(Строка.МодельБюджета) + Строка(Строка.Сценарий) + Строка(Строка.Подразделение);
		Если Отработанные[Хеш] <> Истина Тогда
			
			Отработанные.Вставить(Хеш, Истина);
			
			Док = Документы.Бюджет.СоздатьДокумент();
			Док.Дата 					= ТекущаяДата();
			Док.ЭтоСистемныйДокумент 	= Истина;
			Док.Комментарий 			= "Этот документ перезаписывает система, вручную его менять не нужно.";
			Док.Сценарий				= Строка.Сценарий;
			Док.МодельБюджета			= Строка.МодельБюджета;
			Док.Подразделение			= Строка.Подразделение;
			Док.ДатаНачала				= Бюджетирование.ОпределитьСтандартнуюДатуНачала(Строка.Период, Строка.Сценарий.Периодичность);
			Док.ДатаОкончания			= Бюджетирование.ОпределитьСтандартнуюДатуОкончания(Строка.Период, Строка.Сценарий.Периодичность);
			
			ТаблДока = КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Табл,
							Новый Структура("Сценарий, МодельБюджета, Подразделение", 
											Строка.Сценарий, Строка.МодельБюджета, Строка.Подразделение));
			ОтрСтатьи = Новый Соответствие;
			Для Каждого СтрокаДока Из ТаблДока Цикл
				
				Если ОтрСтатьи[СтрокаДока.СтатьяБюджета] <> Истина Тогда
					ОтрСтатьи.Вставить(СтрокаДока.СтатьяБюджета, Истина);
					
					id = Новый УникальныйИдентификатор;
					
					СтрокиПериодов = ТаблДока.НайтиСтроки(Новый Структура("СтатьяБюджета", СтрокаДока.СтатьяБюджета));
					Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
					
						Результат = ПолучитьРезультатВыполненияЗапроса(Новый Структура("СтатьяБюджета, Сценарий, Подразделение, Период",
										СтрокаДока.СтатьяБюджета, Строка.Сценарий, Строка.Подразделение,
										Новый СтандартныйПериод(СтрокаПериода.Период, ОпределитьМинимальнуюДатуОкончания(СтрокаПериода.Период, Строка.Сценарий.Периодичность))));
										
						НовСтрока = Док.Показатели.Добавить();
						НовСтрока.СтатьяБюджета 	= СтрокаДока.СтатьяБюджета;
						НовСтрока.Период 			= СтрокаПериода.Период;
						НовСтрока.Сумма 			= ?(Результат = Неопределено, 0, Результат.Итог("Сумма"));
						НовСтрока.id 				= id;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Док.Показатели.Итог("Сумма") Тогда
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;		
	КонецЦикла;
	
КонецФункции


#Область Права

Процедура ДобавитьВЗапросТекстПроверкиПользователя(Запрос, текПользователь = Неопределено, Поместить = Ложь)
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "// СписокПользователей", 
		СтрШаблон("
		|ВЫБРАТЬ &Пользователь Пользователь
		|%1
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ПустойПользователь
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ПустаяГруппа
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ Неопределено
		|ОБЪЕДИНИТЬ ВСЕ
		|			
		|ВЫБРАТЬ 	Ссылка
		|ИЗ 		Справочник.ГруппыДоступа.Пользователи
		|ГДЕ		Пользователь = &Пользователь
		|", ?(Поместить, "ПОМЕСТИТЬ СписокПользователей", "")));
	
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяГруппа", 		Справочники.ГруппыДоступа.ПустаяСсылка());
	Запрос.УстановитьПараметр("Пользователь", 		?(текПользователь = Неопределено, 
														ПараметрыСеанса.ТекущийПользователь, 
														текПользователь));
КонецПроцедуры

Функция ПолучитьДоступныеМодели_Ст(текПользователь = Неопределено) Экспорт
	
	//// Возвращет массив, модели к которым есть доступ у пользователя
	//
	//Модели 	= Новый Массив;
	//Матрица = ПолучитьМатрицуРолей(текПользователь);
	//Запрос 	= Новый Запрос("ВЫБРАТЬ СтатьяБюджета, Ссылка Модель ИЗ Справочник.МоделиБюджетов.Показатели ИТОГИ ПО Модель");
	//ВыборкаМодели = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//
	//ВсеЗапрещенные = КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Матрица, Новый Структура("СтатьяБюджета, Запрещено", Справочники.СтатьиБюджета.ПустаяСсылка(), Истина), 	"Сценарий,Подразделение");
	//ВсеРазрешенные = КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Матрица, Новый Структура("СтатьяБюджета, Запрещено", Справочники.СтатьиБюджета.ПустаяСсылка(), Ложь), 		"Сценарий,Подразделение");
	//
	//Пока ВыборкаМодели.Следующий() Цикл
	//	
	//	Может = Ложь;
	//	Выборка = ВыборкаМодели.Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//		
	//		Строки = Матрица.НайтиСтроки(Новый Структура("СтатьяБюджета", Выборка.СтатьяБюджета));
	//		Для Каждого Строка Из Строки Цикл
	//			
	//			ПоискВсех = Новый Структура("Сценарий, Подразделение", Строка.Сценарий, Строка.Подразделение);
	//			
	//			Если Строка.Запрещено Или ВсеЗапрещенные.НайтиСтроки(ПоискВсех).Количество() Тогда
	//				Может = Ложь;
	//				Прервать;
	//			ИначеЕсли Строка.Разрешено Или Строка.Утверждает Или ВсеРазрешенные.НайтиСтроки(ПоискВсех).Количество() Тогда
	//				Может = Истина;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//	КонецЦикла;
	//	
	//	Если Может Тогда
	//		Модели.Добавить(ВыборкаМодели.Модель);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Возврат Модели;
	
КонецФункции
Функция ПолучитьДоступныеМодели_УД(текПользователь = Неопределено) Экспорт
	
	// Возвращет массив, модели к которым есть доступ у пользователя
	
	Запрос = Новый Запрос("
	|// СписокПользователей
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Спр.Ссылка 
	|ИЗ Справочник.МоделиБюджетов Спр
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиДоступаБюджетирование Разр
	|ПО Спр.Ссылка = Разр.ОбъектУчета И
	|	Разр.Разрешено И
	|	Разр.Пользователь В(ВЫБРАТЬ Пользователь ИЗ СписокПользователей)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиДоступаБюджетирование Запр
	|ПО Спр.Ссылка = Запр.ОбъектУчета И
	|	Разр.Запрещено И
	|	Запр.Пользователь В(ВЫБРАТЬ Пользователь ИЗ СписокПользователей)
	|
	|ГДЕ 	Запр.Ссылка ЕСТЬ NULL И
	|		Разр.ОбъектУчета ССЫЛКА Справочник.МоделиБюджета И
	|		Запр.ОбъектУчета ССЫЛКА Справочник.МоделиБюджета И
	|");
	
	ДобавитьВЗапросТекстПроверкиПользователя(Запрос, текПользователь, Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолныеПрава() Экспорт
	
	Возврат РольДоступна("Бюджетирование_ПолныйКонтроль");
	
КонецФункции

Процедура ДобавитьОбъектУчета(Массив, Есть, Ссылка1, Ссылка2)
	
	Если Есть Тогда
		Массив.Добавить(Ссылка1);
		Массив.Добавить(Ссылка2);
	КонецЕсли;
	
КонецПроцедуры
Функция ЕстьРазрешение(Параметры, ПолеРазрешения)
	
	Перем Сценарий, Подразделение, СтатьяБюджета, текПользователь;
	
	Может = ПолныеПрава();
	
	Если Не Может Тогда // может быть
	
		ЕстьСценарий 		= Параметры.Свойство("Сценарий", 		Сценарий);
		ЕстьПодразделение 	= Параметры.Свойство("Подразделение", 	Подразделение);
		ЕстьСтатьяБюджета 	= Параметры.Свойство("СтатьяБюджета", 	СтатьяБюджета);
		ЕстьПользователь 	= Параметры.Свойство("Пользователь", 	текПользователь);
		
		Если Не ЕстьПользователь Тогда
			текПользователь = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		ОбъектыУчета = Новый Массив;
		ДобавитьОбъектУчета(ОбъектыУчета, ЕстьСценарий, Сценарий, Справочники.СценарииПланирования.ПустаяСсылка());
		ДобавитьОбъектУчета(ОбъектыУчета, ЕстьПодразделение, Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка());
		ДобавитьОбъектУчета(ОбъектыУчета, ЕстьСтатьяБюджета, СтатьяБюджета, Справочники.СтатьиБюджета.ПустаяСсылка());
		
	 	Запрос = Новый Запрос(СтрШаблон("
		|ВЫБРАТЬ 	МАКСИМУМ(%1) Разрешение, МАКСИМУМ(Запрещено) ЕстьЗапрет
		|ИЗ 		РегистрСведений.НастройкиДоступаБюджетирование
		|ГДЕ 	Пользователь В(// СписокПользователей) И 
		|		ОбъектУчета В(&ОбъектыУчета)
		|ИМЕЮЩИЕ МАКСИМУМ(%1) ИЛИ МАКСИМУМ(Запрещено)
		|", ПолеРазрешения));
		
		Запрос.УстановитьПараметр("ОбъектыУчета", ОбъектыУчета);
		ДобавитьВЗапросТекстПроверкиПользователя(Запрос, текПользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Может = Не Выборка.ЕстьЗапрет И Выборка.Разрешение;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Может;
	
КонецФункции
Функция МожетРедактировать(Параметры) Экспорт
	
	Если ПолныеПрава() Тогда
		
		Возврат Истина;
		
	ИначеЕсли Параметры.Свойство("Автор") Тогда
			
		текПользователь = ?(Параметры.Свойство("Пользователь"), Параметры.Пользователь, ПараметрыСеанса.ТекущийПользователь);
		Если текПользователь <> Параметры.Автор Тогда
				
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
			
	Возврат ЕстьРазрешение(Параметры, "Разрешено");
	
КонецФункции
Функция МожетУтверждать(Параметры) Экспорт
	
	Возврат ЕстьРазрешение(Параметры, "Утверждает");
	
КонецФункции

#КонецОбласти