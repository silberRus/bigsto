////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции планирования
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыЗаполненияОбъекта

// Функция возвращает Сценарий планирования по умолчанию для типа плана
//
// Параметры:
//  ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//
// Возвращаемое значение:
//   СправочникСсылка.СценарииТоварногоПланирования - ссылка на сценарий планирования по умолчанию
//
Функция ПолучитьСценарийПоУмолчанию(Знач ТипПлана) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	СценарииПланирования.Ссылка КАК Сценарий
	|ИЗ
	|	Справочник.СценарииТоварногоПланирования КАК СценарииПланирования
	|ГДЕ
	|	НЕ СценарииПланирования.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродаж)
	|					И СценарииПланирования.ИспользоватьВПланированииПродаж
	|				ТОГДА ИСТИНА
	|			КОГДА &ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродажПоКатегориям)
	|					И СценарииПланирования.ИспользоватьВПланированииПродажПоКатегориям
	|				ТОГДА ИСТИНА
	|			КОГДА &ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланЗакупок)
	|					И СценарииПланирования.ИспользоватьВПланированииЗакупок
	|				ТОГДА ИСТИНА
	|			КОГДА &ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланСборкиРазборки)
	|					И СценарииПланирования.ИспользоватьВПланированииСборкиРазборки
	|				ТОГДА ИСТИНА
	|			КОГДА &ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
	|					И СценарииПланирования.ИспользоватьВПланированииПроизводства
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТипПлана", ТипПлана);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 И ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Сценарий;
		
	Иначе
		
		Возврат Справочники.СценарииТоварногоПланирования.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции 

// Функция возвращает вид плана по умолчанию для сценария
//
// Параметры:
//  ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  Сценарий - СправочникСсылка.СценарииТоварногоПланирования - Сценарий, по которому получается вид плана по умолчанию
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыПланов - ссылка на вид плана по умолчанию
//
Функция ПолучитьВидПланаПоУмолчанию(Знач ТипПлана, Знач Сценарий) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ВидыПланов.Ссылка КАК ВидПлана
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	ВидыПланов.ТипПлана = &ТипПлана
	|	И ВидыПланов.Владелец = &Сценарий
	|	И НЕ ВидыПланов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ТипПлана", ТипПлана);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 И ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.ВидПлана;
		
	Иначе
		
		Возврат Справочники.ВидыПланов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции 

// Функция получает схему преобразования данных для заполнения в документ
//
// Параметры:
//  ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//
// Возвращаемое значение:
//   СхемаКомпановкиДанных - схема преобразования данных для заполнения в документ
//
Функция ПолучитьСхемуПреобразованияДанных(Знач ТипПлана, Знач ЗаполнятьПоФормуле = Ложь, ЗаполнятьНазначениеВТЧ = Ложь) Экспорт 
	
	СКД_Преобразование = Неопределено;
	
	ИсключатьХарактеристики = Ложь;
	ИсключатьСклады = Ложь;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
		СКД_Преобразование = Документы.ПланЗакупок.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли; 
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродаж Тогда
		СКД_Преобразование = Документы.ПланПродаж.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
		СКД_Преобразование = Документы.ПланПродажПоКатегориям.ПолучитьМакет("СКД_Преобразование");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
		СКД_Преобразование = Документы.ПланСборкиРазборки.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли; 
	
	
	ИсключатьНазначение = Не ЗаполнятьНазначениеВТЧ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	
	Если ЗаполнятьПоФормуле Тогда
		ИсключатьСклады = Истина;
	КонецЕсли; 
	
	Если ИсключатьХарактеристики ИЛИ ИсключатьСклады ИЛИ ИсключатьНазначение Тогда
		
		ПолеХарактеристика = Новый ПолеКомпоновкиДанных("Характеристика");
		ПолеСклад = Новый ПолеКомпоновкиДанных("Склад");
		ПолеНазначение = Новый ПолеКомпоновкиДанных("Назначение");
		
		Отборы = СКД_Преобразование.ВариантыНастроек[0].Настройки.Отбор.Элементы;
		Индекс = Отборы.Количество() - 1;
		Пока  Индекс >= 0 Цикл
			Отбор = Отборы[Индекс];
			Индекс = Индекс - 1;
			
			Если ИсключатьХарактеристики И Отбор.ЛевоеЗначение = ПолеХарактеристика Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Характеристика");
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли; 
			
			Если ИсключатьСклады И Отбор.ЛевоеЗначение = ПолеСклад Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Склад");
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли;
			
			Если ИсключатьНазначение И Отбор.ЛевоеЗначение = ПолеНазначение Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Назначение");
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
		Пока  Индекс >= 0 Цикл
			Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
			Индекс = Индекс - 1;
			
			Если ИсключатьХарактеристики 
				И (Связь.ВыражениеИсточник = "Характеристика" 
				ИЛИ Связь.ВыражениеПриемник = "Характеристика") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли; 
			
			Если ИсключатьСклады 
				И (Связь.ВыражениеИсточник = "Склад" 
				ИЛИ Связь.ВыражениеПриемник = "Склад") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли; 
			
			Если ИсключатьНазначение 
				И (Связь.ВыражениеИсточник = "Назначение" 
				ИЛИ Связь.ВыражениеПриемник = "Назначение") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 
	
	ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Индекс = ПоляГруппировки.Количество() - 1;
	
	Если ЗаполнятьПоФормуле Тогда
	
		ПолеПериод = Новый ПолеКомпоновкиДанных("Период");
		
		Пока  Индекс >= 0 Цикл
			ПолеГруппировки = ПоляГруппировки[Индекс];
		
			Если ПолеГруппировки.Поле = ПолеПериод Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	Иначе
		
		ПолеНомерСтроки = Новый ПолеКомпоновкиДанных("НомерСтроки");
		ПолеПериодСостава = Новый ПолеКомпоновкиДанных("ПериодСостава");
		
		Пока  Индекс >= 0 Цикл
			ПолеГруппировки = ПоляГруппировки[Индекс];
		
			Если ПолеГруппировки.Поле = ПолеНомерСтроки Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Если ПолеГруппировки.Поле = ПолеПериодСостава Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		ТаблицаСостава = СКД_Преобразование.НаборыДанных.Найти("ТаблицаСостава");
		Если ТаблицаСостава <> Неопределено Тогда
			
			Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
			
			Пока  Индекс >= 0 Цикл
				
				Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
				Если Связь.НаборДанныхИсточник = "ТаблицаСостава" Тогда
					СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
				КонецЕсли; 
				
				Индекс = Индекс - 1;
				
			КонецЦикла; 
			СКД_Преобразование.НаборыДанных.Удалить(ТаблицаСостава);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СКД_Преобразование;
	
КонецФункции

// Функция получает пользовательские настройки по умолчанию из вида плана
//
// Параметры:
//  ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ВидПлана - СправочникСсылка.ВидыПланов, СправочникОбъект.ВидыПланов - Вид плана из которого получаются настройки
//
// Возвращаемое значение:
//   Структура - настройки заполнения документа
//
Функция ПолучитьНастройкиПоУмолчанию(Знач ТипПлана, Знач ВидПлана) Экспорт 

	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ВидПлана) = Тип("СправочникОбъект.ВидыПланов") Тогда
		Если ТипПлана = ВидПлана.ТипПлана Тогда
			СтруктураНастроек = ВидПлана.СтруктураНастроек.Получить();
		Иначе
			СтруктураНастроек = Неопределено;
		КонецЕсли;
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "СтруктураНастроек, ТипПлана");
		Если ТипПлана = Реквизиты.ТипПлана Тогда
			СтруктураНастроекХранилище = Реквизиты.СтруктураНастроек;
			СтруктураНастроек = СтруктураНастроекХранилище.Получить();
		Иначе
			СтруктураНастроек = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек.Вставить("ПользовательскиеНастройки", Неопределено);
	Иначе
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураНастроек;

КонецФункции

// Функция получает правило по умолчанию для вида плана, помещает его во временное хранилище и возвращает адрес
//
// Параметры:
//  ТипПлана                - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ВидПлана                - СправочникСсылка.ВидыПланов, СправочникОбъект.ВидыПланов - Вид плана из которого получается правило заполнения
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор, в который возвращается адрес правила
//
// Возвращаемое значение:
//   Строка - адрес временного хранилища значений
//
Функция ПолучитьАдресПравилаЗаполненияПоУмолчанию(Знач ТипПлана, Знач ВидПлана, Знач УникальныйИдентификатор) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Если ЭтоАдресВременногоХранилища(УникальныйИдентификатор) Тогда
			Возврат УникальныйИдентификатор;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли; 
	
	Если ТипЗнч(ВидПлана) = Тип("СправочникОбъект.ВидыПланов") Тогда
		ПравилоЗаполнения = ВидПлана.ПравилоЗаполнения.Выгрузить();
		Если ТипПлана <> ВидПлана.ТипПлана Тогда
			ПравилоЗаполнения.Очистить();
		КонецЕсли;
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "ПравилоЗаполнения, ТипПлана");
		ВыборкаДанных = Реквизиты.ПравилоЗаполнения;
		ПравилоЗаполнения = ВыборкаДанных.Выгрузить();
		Если ТипПлана <> Реквизиты.ТипПлана Тогда
			ПравилоЗаполнения.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	АдресПравилаЗаполнения = ПоместитьВоВременноеХранилище(ПравилоЗаполнения, УникальныйИдентификатор);
	
	Возврат АдресПравилаЗаполнения;

КонецФункции 

// Функция получает пользовательские настройки по умолчанию из вида плана и возвращает адрес временного хранилища
//
// Параметры:
//  ТипПлана                - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ВидПлана                - СправочникСсылка.ВидыПланов, СправочникОбъект.ВидыПланов - Вид плана из которого получаются настройки
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор, в который возвращается адрес настроек
//
// Возвращаемое значение:
//   Строка - адрес временного хранилища значений
//
Функция ПолучитьАдресПользовательскихНастроекПоУмолчанию(Знач ТипПлана, Знач ВидПлана, Знач УникальныйИдентификатор) Экспорт 

	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Если ЭтоАдресВременногоХранилища(УникальныйИдентификатор) Тогда
			Возврат УникальныйИдентификатор;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВидПлана) = Тип("СправочникОбъект.ВидыПланов") Тогда
		Если ТипПлана = ВидПлана.ТипПлана Тогда
			СтруктураНастроек = ВидПлана.СтруктураНастроек.Получить();
		Иначе
			СтруктураНастроек = Неопределено;
		КонецЕсли;
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "СтруктураНастроек, ТипПлана");
		Если ТипПлана = Реквизиты.ТипПлана Тогда
			СтруктураНастроекХранилище = Реквизиты.СтруктураНастроек;
			СтруктураНастроек = СтруктураНастроекХранилище.Получить();
		Иначе
			СтруктураНастроек = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") И СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
		АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(СтруктураНастроек.ПользовательскиеНастройки, УникальныйИдентификатор);
	Иначе
		АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат АдресПользовательскихНастроек;

КонецФункции

#КонецОбласти

#Область ПроцедурыКроссТаблиц
 
// Процедура создает реквизит формы "Таблица значений" с колонками, необходимыми для обработки периодов
//
// Параметры:
//  Форма  				- УправляемаяФорма - форма в которой необходимо создать таблицу периодов
//  ИмяТаблицыПериодов  - Строка - Имя, с которым будет создан реквизит формы таблица
//
Процедура СоздатьТаблицуПериодов(Форма, Знач ИмяТаблицыПериодов) Экспорт 
	
	РеквизитыВерхнегоУровня = Форма.ПолучитьРеквизиты();
	
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	ОписаниеТиповЧ = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0); 
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповДата = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	
	// Создание реквизитов  таблицы
	ДобавляемыеРеквизиты = Новый Массив();
	РеквизитСуществует = Ложь;
	Для Каждого Реквизит Из РеквизитыВерхнегоУровня Цикл
		Если Реквизит.Имя = ИмяТаблицыПериодов Тогда
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ РеквизитСуществует Тогда
		Реквизит = Новый РеквизитФормы(ИмяТаблицыПериодов, ОписаниеТиповТЗ);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("НомерКолонки", ОписаниеТиповЧ, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ИмяКолонки", ОписаниеТиповСтрока, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Активная", ОписаниеТиповБулево, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ДатаНачала", ОписаниеТиповДата, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ДатаОкончания", ОписаниеТиповДата, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Заголовок", ОписаниеТиповСтрока, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Замещен", ОписаниеТиповБулево, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	КонецЕсли;;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет таблицу периодов, последовательно датам с заданной периодичностью, для получения полей и их заголовков
//
// Параметры:
//  ТаблицаПериоды - ТаблицаЗначений - Таблица, которую заполняем отрезками заданной периодичности
//  Периодичность  - ПеречислениеСсылка.Периодичность - Периодичность с которой нужно заполнить таблицу
//  ДатаНачала     - Дата - Дата начала периода
//  ДатаОкончания  - Дата - Дата окончания периода
//  ОтображатьНомерПериода  - Булево - Флаг отображения заголовка по номеру периода в пределах года
//
Процедура ЗаполнитьТаблицуПериодов(ТаблицаПериоды, Знач Периодичность, Знач ДатаНачала, Знач ДатаОкончания, Знач ОтображатьНомерПериода = Ложь, ЗамещенныеПериоды = Неопределено) Экспорт 

	Для каждого СтрокаПериода Из ТаблицаПериоды Цикл
		СтрокаПериода.Активная = Ложь;
		СтрокаПериода.НомерКолонки = -1;
	КонецЦикла; 
	
	Если НЕ ЗначениеЗаполнено(Периодичность)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаНачала) 
		И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавлениеДатаНачала = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(ДатаНачала, Периодичность);
	ДобавлениеДатаОкончания = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ДатаНачала, Периодичность);
	
	ТекущийПериод = 1;
	
	Пока ДобавлениеДатаНачала < КонецДня(ДатаОкончания) Цикл
		
		НайденныеСтроки = ТаблицаПериоды.НайтиСтроки(Новый Структура("ДатаНачала, ДатаОкончания", ДобавлениеДатаНачала, ДобавлениеДатаОкончания));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаПериоды.Добавить();
			НоваяСтрока.ИмяКолонки = СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","_");
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		НоваяСтрока.НомерКолонки = ТекущийПериод;
		НоваяСтрока.Активная = Истина;
		НоваяСтрока.ДатаНачала = ДобавлениеДатаНачала;
		НоваяСтрока.ДатаОкончания = ДобавлениеДатаОкончания;
		
		Если ЗамещенныеПериоды <> Неопределено 
			И ЗамещенныеПериоды.НайтиСтроки(Новый Структура("ЗамещенныйПериод", ДобавлениеДатаНачала)).Количество()>0 Тогда
			НоваяСтрока.Замещен = Истина;
		Иначе
			НоваяСтрока.Замещен = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Заголовок = ПланированиеКлиентСервер.СформироватьЗаголовокПериода(Периодичность, ДобавлениеДатаНачала, ДобавлениеДатаОкончания, ОтображатьНомерПериода, НоваяСтрока.Замещен);
		
		ТекущийПериод = ТекущийПериод + 1;
		
		ДобавлениеДатаНачала = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(ДобавлениеДатаОкончания+1 , Периодичность);
		ДобавлениеДатаОкончания = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ДобавлениеДатаОкончания+1, Периодичность);
		
	КонецЦикла; 
	
	ТаблицаПериоды.Сортировать("НомерКолонки");
	
КонецПроцедуры

// Процедура обновляет структуру данных кросс-таблицы плана
//
// Параметры:
//  Форма  				- УправляемаяФорма - форма в которой необходимо создать таблицу периодов
//  Параметры  			- Структура - параметры формирования кросс-таблицы
//
Процедура ОбновитьСтруктуруВыводаКроссТаблицы(Форма, Параметры) Экспорт
	
	ИмяРеквизитаКроссТаблицы = Параметры.ИмяРеквизитаКроссТаблицы;
	ЭлементФормыКроссТаблицы = Параметры.ЭлементФормыКроссТаблицы;
	ТаблицаПериодов = Параметры.ТаблицаПериодов;
	Периодичность = Параметры.Периодичность;
	Поля = Параметры.Поля;
	
	Если Параметры.Свойство("ВыводитьПредыдущийПериод") Тогда
		ВыводитьПредыдущийПериод = Параметры.ВыводитьПредыдущийПериод;
	Иначе
		ВыводитьПредыдущийПериод = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("СоздаватьГруппуПериода") Тогда
		СоздаватьГруппуПериода = Параметры.СоздаватьГруппуПериода;
	Иначе
		СоздаватьГруппуПериода = Ложь;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
	РеквизитыТаблицыПлана = Форма.ПолучитьРеквизиты(ИмяРеквизитаКроссТаблицы);
	РеквизитыВерхнегоУровня = Форма.ПолучитьРеквизиты();
	
	Для каждого СтруктураПоля Из Поля Цикл
		
		Если СтруктураПоля.Свойство("СоздаватьРеквизит") Тогда
			СоздаватьРеквизит = СтруктураПоля.СоздаватьРеквизит;
		Иначе
			СоздаватьРеквизит = Истина;
		КонецЕсли;
		Если НЕ СоздаватьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
		Если СтруктураПоля.Свойство("УдалятьРеквизитыТаблицы") Тогда
			УдалятьРеквизитыТаблицы = СтруктураПоля.УдалятьРеквизитыТаблицы;
		Иначе
			УдалятьРеквизитыТаблицы = Ложь;
		КонецЕсли;
		Если СтруктураПоля.Свойство("ТипЭлемента") Тогда
			ТипЭлемента = СтруктураПоля.ТипЭлемента;
		Иначе
			ТипЭлемента = "Число";
		КонецЕсли;
		Если СтруктураПоля.Свойство("СоздаватьИтоговыеРеквизиты") Тогда
			СоздаватьИтоговыеРеквизиты = СтруктураПоля.СоздаватьИтоговыеРеквизиты;
		Иначе
			СоздаватьИтоговыеРеквизиты = Ложь;
		КонецЕсли;
		Если СтруктураПоля.Свойство("РасширенныйФорматЧислаДаты") Тогда
			РасширенныйФорматЧислаДаты = СтруктураПоля.РасширенныйФорматЧислаДаты;
		Иначе
			РасширенныйФорматЧислаДаты = Ложь;
		КонецЕсли;
				
		Если СоздаватьИтоговыеРеквизиты И ТипЭлемента <> "Число" И ТипЗнч(ТипЭлемента) <> Тип("ОписаниеТипов") Тогда
			СоздаватьИтоговыеРеквизиты = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ТипЭлемента) = Тип("ОписаниеТипов") Тогда
			ОписаниеТипов = ТипЭлемента;
		ИначеЕсли ТипЭлемента = "Булево" Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Булево");
		ИначеЕсли ТипЭлемента = "Дата" Тогда
			
			Если РасширенныйФорматЧислаДаты Тогда
				ОписаниеТипов = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
			Иначе
				ОписаниеТипов = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
			КонецЕсли;
		Иначе
			
			Если РасширенныйФорматЧислаДаты Тогда
				ОписаниеТипов = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 5);
			Иначе
				ОписаниеТипов = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3); 
			КонецЕсли; 
			
		КонецЕсли;
		
		// Удаление реквизитов
		Если УдалятьРеквизитыТаблицы Тогда
			Для Каждого Реквизит Из РеквизитыТаблицыПлана Цикл
				Если СтрНайти(Реквизит.Имя, ПрефиксРеквизитаКолонки) Тогда
					УдаляемыеРеквизиты.Добавить(ИмяРеквизитаКроссТаблицы+"." + Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Создание реквизитов  таблицы
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
			
			Если НЕ СтрокаПериода.Активная Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитСуществует = Ложь;
			Для Каждого Реквизит Из РеквизитыТаблицыПлана Цикл
				Если Реквизит.Имя = ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки Тогда
					РеквизитСуществует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если РеквизитСуществует Тогда
				Реквизит.Заголовок = СтрокаПериода.Заголовок;
				Продолжить;
			КонецЕсли; 
			
			Реквизит = Новый РеквизитФормы(ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ОписаниеТипов, ИмяРеквизитаКроссТаблицы, 
				СтрокаПериода.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЦикла;
		
		// Создаем итоговые реквизиты 
		Если СоздаватьИтоговыеРеквизиты Тогда
			Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
				Если НЕ СтрокаПериода.Активная Тогда
					Продолжить;
				КонецЕсли; 
				
				РеквизитСуществует = Ложь;
				Для Каждого Реквизит Из РеквизитыВерхнегоУровня Цикл
					Если Реквизит.Имя = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки,".","_") Тогда
						РеквизитСуществует = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если РеквизитСуществует Тогда
					Продолжить;
				КонецЕсли; 
				
				ПрефиксРеквизита = НСтр("ru='Итого'");
				
				Реквизит = Новый РеквизитФормы(СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки,".","_"), ОписаниеТипов, 
					, ПрефиксРеквизита + " " + СтрокаПериода.Заголовок);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	Если Не ЗначениеЗаполнено(ЭлементФормыКроссТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление элементов формы
	УдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекЭлемент Из Форма.Элементы[ЭлементФормыКроссТаблицы].ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + "ГруппаРеквизитов") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
			Продолжить;
		КонецЕсли;
		ЭлементНайден = Ложь;
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
			Если  СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + "Группа"+СтрокаПериода.ИмяКолонки) Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементНайден Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого СтруктураПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
			Если СтрНайти(ТекЭлемент.Имя, ПрефиксРеквизитаКолонки) > 0  Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ВладелецПоля = Форма.Элементы[ЭлементФормыКроссТаблицы];
	
	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		Если НЕ СтрокаПериода.Активная Тогда
			Продолжить;
		КонецЕсли; 
		
		ЭлементДляПодвала = Неопределено;
		
		Если СоздаватьГруппуПериода Тогда
			НайденныеСтроки = ТаблицаПериодов.НайтиСтроки(Новый Структура("Активная", Истина));
			Если НайденныеСтроки.Количество() > 1 Тогда
				ЭлементФормы = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + "Группа"+СтрокаПериода.ИмяКолонки, Тип("ГруппаФормы"), 
					Форма.Элементы[ЭлементФормыКроссТаблицы]);
				ЭлементФормы.Группировка      = ГруппировкаКолонок.Горизонтальная;
				ЭлементФормы.ОтображатьВШапке = Истина;
				ЭлементФормы.Заголовок        = СтрокаПериода.Заголовок;
				
				ВладелецПоля = ЭлементФормы;
			Иначе
				ВладелецПоля = Форма.Элементы[ЭлементФормыКроссТаблицы];
			КонецЕсли;
		КонецЕсли;
		
		Для каждого СтруктураПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
			Если СтруктураПоля.Свойство("СоздаватьЭлемент") Тогда
				СоздаватьЭлемент = СтруктураПоля.СоздаватьЭлемент;
			Иначе
				СоздаватьЭлемент = Истина;
			КонецЕсли;
			Если СтруктураПоля.Свойство("СоздаватьИтоговыеРеквизиты") Тогда
				СоздаватьИтоговыеРеквизиты = СтруктураПоля.СоздаватьИтоговыеРеквизиты;
			Иначе
				СоздаватьИтоговыеРеквизиты = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе") Тогда
				ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе = СтруктураПоля.ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе;
			Иначе
				ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПоказыватьИтоговыеРеквизитыВГруппе") Тогда
				ПоказыватьИтоговыеРеквизитыВГруппе = СтруктураПоля.ПоказыватьИтоговыеРеквизитыВГруппе;
			Иначе
				ПоказыватьИтоговыеРеквизитыВГруппе = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ШиринаЭлемента") Тогда
				ШиринаЭлемента = СтруктураПоля.ШиринаЭлемента;
			Иначе
				ШиринаЭлемента = 6;
			КонецЕсли;
			Если СтруктураПоля.Свойство("СтруктураДействий") Тогда
				СтруктураДействий = СтруктураПоля.СтруктураДействий;
			Иначе
				СтруктураДействий = Новый Структура();
			КонецЕсли;
			Если СтруктураПоля.Свойство("ТипЭлементаФормы") Тогда
				ТипЭлементаФормы = СтруктураПоля.ТипЭлементаФормы;
			Иначе
				ТипЭлементаФормы = Тип("ПолеФормы");
			КонецЕсли;
			Если СтруктураПоля.Свойство("ВидПоля") Тогда
				ВидПоля = СтруктураПоля.ВидПоля;
			Иначе
				ВидПоля = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПрефиксГруппы") Тогда
				РодительЭлемента = Форма.Элементы[ЭлементФормыКроссТаблицы + СтруктураПоля.ПрефиксГруппы + СтрокаПериода.ИмяКолонки];
			Иначе
				РодительЭлемента = ВладелецПоля;
			КонецЕсли;
			
			Если СоздаватьЭлемент Тогда
				// Перепривязываем данные
				// Создание элементов формы
				Элемент = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, 
					ТипЭлементаФормы, РодительЭлемента);
				Элемент.Вид = ВидПоля;
				Если ТипЭлементаФормы = Тип("ПолеФормы") ИЛИ ТипЭлементаФормы = Тип("ТаблицаФормы") Тогда
					Элемент.ПутьКДанным = ИмяРеквизитаКроссТаблицы+"."+ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки;
				КонецЕсли;
				
				Если Элемент.Вид <> ВидПоляФормы.ПолеФлажка Тогда
					Элемент.Ширина = ШиринаЭлемента;
				КонецЕсли; 
				Если СтруктураПоля.Свойство("Заголовок") Тогда
					Элемент.Заголовок = СтруктураПоля.Заголовок;
				Иначе
					Элемент.Заголовок = СтрокаПериода.Заголовок;
				КонецЕсли; 
				Если СтруктураПоля.Свойство("СвойстваЭлемента") И ТипЗнч(СтруктураПоля.СвойстваЭлемента) = Тип("Структура") Тогда
					ЗаполнитьЗначенияСвойств(Элемент, СтруктураПоля.СвойстваЭлемента);
				КонецЕсли; 
				Для каждого Действие Из СтруктураДействий Цикл
					Элемент.УстановитьДействие(Действие.Ключ, Действие.Значение);
				КонецЦикла;
				
				ЭлементДляПодвала = Элемент;
			КонецЕсли;
			
			Если СоздаватьИтоговыеРеквизиты 
				И (СоздаватьЭлемент 
					ИЛИ ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе 
					ИЛИ ПоказыватьИтоговыеРеквизитыВГруппе) Тогда
				Если (СоздаватьЭлемент ИЛИ ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе) И ЭлементДляПодвала <> Неопределено Тогда
					ЭлементДляПодвала.ПутьКДаннымПодвала = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ".","_");
				КонецЕсли;
				
				Если ПоказыватьИтоговыеРеквизитыВГруппе 
					//И СоздаватьГруппуПериода 
					И ВладелецПоля <> Неопределено 
					И ТипЗнч(ВладелецПоля) = Тип("ГруппаФормы") 
					И ВладелецПоля.ОтображатьВШапке Тогда
					Если НЕ ПустаяСтрока(ВладелецПоля.Заголовок) Тогда
						ВладелецПоля.Заголовок = ВладелецПоля.Заголовок + ": ";
					КонецЕсли; 
					ВладелецПоля.ПутьКДаннымШапки = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ".","_");
					ВладелецПоля.ФорматШапки = "ЧДЦ=2; ЧН=0,00";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает реквизит в который сохраняется структура со значениями сохраняемых реквизитов
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой необходимо создать реквизит
//  ИмяРеквизитаПроверки   - Строка - Имя реквизита проверки, произвольное имя, не занятое другими реквизитами формы
//  ИменаРеквизитовОбъекта - Строка - Имена реквизитов объекта, значения которых сохраняются в реквизит проверки
//
Процедура СоздатьРеквизитыПроверкиИзменений(Форма, Знач ИмяРеквизитаПроверки, Знач ИменаРеквизитовОбъекта) Экспорт 

	РеквизитыВерхнегоУровня = Форма.ПолучитьРеквизиты();
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов();
	
	ДобавляемыеРеквизиты = Новый Массив();
	
	РеквизитСуществует = Ложь;
	Для Каждого Реквизит Из РеквизитыВерхнегоУровня Цикл
		Если Реквизит.Имя = ИмяРеквизитаПроверки Тогда
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ РеквизитСуществует Тогда
		Реквизит = Новый РеквизитФормы(ИмяРеквизитаПроверки, ОписаниеТиповНеопределено);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Если ТипЗнч(Форма[ИмяРеквизитаПроверки]) <> Тип("Структура") Тогда
	
		Форма[ИмяРеквизитаПроверки] = Новый Структура(ИменаРеквизитовОбъекта);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет заполнение кросс-таблицы в форме
//
// Параметры:
//  Таблица              - ТаблицаЗначений - кросс-таблица, в которой необходимо проверить реквизиты
//  СтруктураДействий    - Структура - Параметры, настройки и действия для проверки заполнения
//  Отказ                - Булево - Истина, если есть ошибки заполнения
//  ПроверяемыеРеквизиты - Массив - проверяемые реквизиты объекта
//  КроссТаблица         - Булево - Признак кросс-таблицы
//
Процедура ОбработкаПроверкиЗаполненияВФорме(Таблица, СтруктураДействий, Отказ, ПроверяемыеРеквизиты, Знач КроссТаблица = Истина) Экспорт 
	
	Если НЕ КроссТаблица Тогда
		Возврат;
	КонецЕсли; 
	
	ПредставлениеТаблицы 	= СтруктураДействий.ПредставлениеТаблицы;
	ПутьКТаблице 			= СтруктураДействий.ПутьКТаблице;
	
	Если Таблица.Количество() = 0 Тогда
	
		ТекстСообщения = НСтр("ru='Не заполнен список ""%ПредставлениеТаблицы%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТаблицы%",ПредставлениеТаблицы);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКТаблице,
			,
			Отказ);
		Возврат;
	
	КонецЕсли;
	
	ЗаполнятьПартнераВТЧ         = Ложь;
	ЗаполнятьСоглашениеВТЧ       = Ложь;
	ЗаполнятьСкладВТЧ            = Ложь;
	ЗаполнятьХарактеристикуВТЧ   = Ложь;
	ЗаполнятьВариантКомплектации = Ложь;
	
	ТекстОшибкиПартнер 			= НСтр("ru='Не заполнена колонка ""%Партнер%""'");
	ТекстОшибкиСоглашение 		= НСтр("ru='Не заполнена колонка ""Соглашение""'");
	ТекстОшибкиСклад 			= НСтр("ru='Не заполнена колонка ""Склад""'");
	ТекстОшибкиХарактеристика	= НСтр("ru='Не заполнена колонка ""Характеристика""'");
	ТекстОшибкиКомплектация     = НСтр("ru='Не заполнена колонка ""Комплектация""'");
	
	ШаблонАдресаОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""%Товары%""'");
	
	Если НЕ ПустаяСтрока(ПредставлениеТаблицы) Тогда
		ШаблонАдресаОшибки = СтрЗаменить(ШаблонАдресаОшибки, "%Товары%",ПредставлениеТаблицы);
	Иначе
		ШаблонАдресаОшибки = СтрЗаменить(ШаблонАдресаОшибки, "%Товары%",НСтр("ru='Товары'"));
	КонецЕсли;
		
	ИмяКолонки = "";
	Если СтруктураДействий.Свойство("ЗаполнятьПартнераВТЧ", ИмяКолонки) Тогда
		Если НЕ ПустаяСтрока(ИмяКолонки) Тогда
			ТекстОшибкиПартнер = СтрЗаменить(ТекстОшибкиПартнер, "%Партнер%",ИмяКолонки);
		Иначе
			ТекстОшибкиПартнер = СтрЗаменить(ТекстОшибкиПартнер, "%Партнер%",НСтр("ru='Партнер'"));
		КонецЕсли; 
		ЗаполнятьПартнераВТЧ = Истина;
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ЗаполнятьСоглашениеВТЧ") Тогда 
		ЗаполнятьСоглашениеВТЧ = Истина;
	КонецЕсли; 
	Если СтруктураДействий.Свойство("ЗаполнятьСкладВТЧ") Тогда 
		ЗаполнятьСкладВТЧ = Истина;
	КонецЕсли; 
	Если СтруктураДействий.Свойство("ЗаполнятьХарактеристикуВТЧ") Тогда 
		ЗаполнятьХарактеристикуВТЧ = Истина;
	КонецЕсли; 
	Если СтруктураДействий.Свойство("ЗаполнятьВариантКомплектации") Тогда 
		ЗаполнятьВариантКомплектации = Истина;
	КонецЕсли; 
	
	ПараметрыПроверкиКоличества = Неопределено;
	Если СтруктураДействий.Свойство("ПроверкаКоличестваПоПериодам", ПараметрыПроверкиКоличества) Тогда
		Если ПараметрыПроверкиКоличества.Периоды.Количество() = 1 Тогда
			ПараметрыПроверкиКоличества.Вставить("ИмяПоля", ПараметрыПроверкиКоличества.ПрефиксПоля + ПараметрыПроверкиКоличества.Периоды[0].ИмяКолонки);
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		АдресОшибки = СтрЗаменить(ШаблонАдресаОшибки,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
		
		Если ЗаполнятьПартнераВТЧ И НЕ ЗначениеЗаполнено(СтрокаТЧ.Партнер) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиПартнер + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "Партнер"),
				,
				Отказ);
			
		КонецЕсли;
		Если ЗаполнятьСоглашениеВТЧ И НЕ ЗначениеЗаполнено(СтрокаТЧ.Соглашение) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиСоглашение + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "Соглашение"),
				,
				Отказ);
			
		КонецЕсли;
		Если ЗаполнятьСкладВТЧ 
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) 
			И (НЕ СтрокаТЧ.Свойство("ТипНоменклатуры") 
				ИЛИ СтрокаТЧ.Свойство("ТипНоменклатуры") 
				И (СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
					ИЛИ СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиСклад + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "Склад"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ЗаполнятьВариантКомплектации И НЕ ЗначениеЗаполнено(СтрокаТЧ.ВариантКомплектации) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиКомплектация + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "ВариантКомплектации"),
				,
				Отказ);
			
		КонецЕсли;
			
		
		Если СтруктураДействий.Свойство("ПроверкаКоличестваПоПериодам") Тогда 
			
			ЕстьЗполненныеСтроки = Ложь;
			Для каждого Период Из ПараметрыПроверкиКоличества.Периоды Цикл
				ЕстьЗполненныеСтроки = ЗначениеЗаполнено(СтрокаТЧ[ПараметрыПроверкиКоличества.ПрефиксПоля + Период.ИмяКолонки]);
				Если ЕстьЗполненныеСтроки Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НЕ ЕстьЗполненныеСтроки Тогда
				
				ТекстОшибкиКоличества = НСтр("ru='Не заполнено количество'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибкиКоличества + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, ПараметрыПроверкиКоличества.ИмяПоля),
					,
					Отказ);
			
			КонецЕсли; 
		
		КонецЕсли; 
	КонецЦикла;
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Если ЗаполнятьХарактеристикуВТЧ И ИспользоватьХарактеристики Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Ошибки
		|ИЗ
		|	&Таблица КАК Товары
		|ГДЕ
		|	Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ошибки.НомерСтроки,
		|	Ошибки.Номенклатура
		|ИЗ
		|	Ошибки КАК Ошибки
		|ГДЕ
		|	Ошибки.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Таблица",  Таблица.Выгрузить(, "НомерСтроки, Номенклатура, Характеристика"));
				
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			АдресОшибки = СтрЗаменить(ШаблонАдресаОшибки,"%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиХарактеристика + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, Выборка.НомерСтроки, "Характеристика"),
				,
				Отказ);
		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет заполнение документа по сценарию и виду плана
//
// Параметры:
//  Объект               - ДокументОбъект - документ, в котором необходимо проверить реквизиты по сценарию и виду плана
//  Отказ                - Булево - Истина, если есть ошибки заполнения
//  ПроверяемыеРеквизиты - Массив - проверяемые реквизиты объекта
//
Процедура ОбработкаПроверкиЗаполненияПоСценариюВидуПлана(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт 

	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	РеквизитыСценария = "Периодичность, Валюта, ПланЗакупокПланироватьПоСумме,
		|ПланПродажПланироватьПоСумме, ИспользоватьДляПланированияМатериалов";
	ПараметрыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сценарий, РеквизитыСценария);
	
	Если Объект.Периодичность <> ПараметрыСценария.Периодичность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Периодичность документа не соответствует периодичности сценария.'"), Объект, "Сценарий",,Отказ);
	КонецЕсли; 
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПланЗакупок") Тогда
		
		Если Объект.ПланироватьПоСумме <> ПараметрыСценария.ПланЗакупокПланироватьПоСумме Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Настройка планирования по количеству и сумме в документе не соответствует настройке сценария.'"), Объект, "Сценарий",,Отказ);
		КонецЕсли;
			
		Если ПараметрыСценария.ПланЗакупокПланироватьПоСумме И Объект.Валюта <> ПараметрыСценария.Валюта Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Валюта в документе не соответствует валюте сценария.'"), Объект, "Сценарий",,Отказ);
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланПродаж") Тогда
		
		Если Объект.ПланироватьПоСумме <> ПараметрыСценария.ПланПродажПланироватьПоСумме Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Настройки планирования по количеству и сумме в документе не соответствует настройкам сценария.'"), Объект, "Сценарий",,Отказ);
		КонецЕсли;
			
		Если ПараметрыСценария.ПланПродажПланироватьПоСумме И Объект.Валюта <> ПараметрыСценария.Валюта Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Валюта в документе не соответствует валюте сценария.'"), Объект, "Сценарий",,Отказ);
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ВидПлана) Тогда
		РеквизитыВидаПлана = "ЗаполнятьПодразделение,ЗаполнятьПартнера, ЗаполнятьПартнераВТЧ, ЗаполнятьСоглашение,
			|ЗаполнятьСоглашениеВТЧ, ЗаполнятьСклад,ЗаполнятьСкладВТЧ, ЗаполнятьПланОплат, ЗаполнятьМенеджера,
			|ЗаполнятьФорматМагазина";
		НастройкиЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПлана, РеквизитыВидаПлана);
			
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПланЗакупок") Тогда
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьПартнера Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Партнер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСоглашение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьПартнераВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Партнер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСоглашениеВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Соглашение");
			КонецЕсли;
			Если НастройкиЗаполнения.ЗаполнятьСкладВТЧ И НЕ Объект.КроссТаблица Тогда
				ПараметрыПроверки = Новый Структура("ИмяТЧ, ПредставлениеТЧ", "Товары", НСтр("ru='Товары'"));
				ПроверитьЗаполнениеСклада(Объект, Отказ, ПараметрыПроверки);
			КонецЕсли;
			Если Объект.ПланироватьПоСумме И Объект.ЗаполнятьПланОплат <> НастройкиЗаполнения.ЗаполнятьПланОплат Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Настройки заполнения плана оплат в документе не соответствует настройкам вида плана.'"), 
					Объект, 
					"ВидПлана",
					,
					Отказ);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланПродаж") Тогда
			
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьПартнера Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Партнер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСоглашение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьМенеджера Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Менеджер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьФорматМагазина Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ФорматМагазина");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьПартнераВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Партнер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСоглашениеВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Соглашение");
			КонецЕсли;
			Если НастройкиЗаполнения.ЗаполнятьСкладВТЧ И НЕ Объект.КроссТаблица Тогда
				ПараметрыПроверки = Новый Структура("ИмяТЧ, ПредставлениеТЧ", "Товары", НСтр("ru='Товары'"));
				ПроверитьЗаполнениеСклада(Объект, Отказ, ПараметрыПроверки);
			КонецЕсли;
			Если Объект.ПланироватьПоСумме И Объект.ЗаполнятьПланОплат <> НастройкиЗаполнения.ЗаполнятьПланОплат Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Настройки заполнения плана оплат в документе не соответствует настройкам вида плана.'"), 
					Объект, 
					"ВидПлана",
					,
					Отказ);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланПродажПоКатегориям") Тогда
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьФорматМагазина Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ФорматМагазина");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланСборкиРазборки") Тогда
			
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСкладВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
			КонецЕсли;
			
			
		КонецЕсли; 
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Количество"
// 
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  ЕстьПрефиксГруппыКомментария - Булево		 - Флаг определяет, групприровать ли с полем картинки комментария
//  ЕстьЗаголовок				 - Булево		 - Флаг определяет, есть ли заголовок у поля
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыКоличество(ПараметрыВывода, СоздаватьЭлемент = Истина, 
	ЕстьПрефиксГруппыКомментария = Ложь, ЕстьЗаголовок = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Количество_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	Если ЕстьПрефиксГруппыКомментария Тогда
		СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	КонецЕсли; 
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Число");
	Если ЕстьЗаголовок Тогда
		СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Количество'"));
	КонецЕсли;
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Цена"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  ЕстьПрефиксГруппыКомментария - Булево		 - Флаг определяет, групприровать ли с полем картинки комментария
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыЦена(ПараметрыВывода, СоздаватьЭлемент = Истина, ЕстьПрефиксГруппыКомментария = Ложь, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Цена_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	Если ЕстьПрефиксГруппыКомментария Тогда
		СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	КонецЕсли; 
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Цена'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Сумма"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыСумма(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Сумма_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Сумма'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Комментарий"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыКомментарий(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Комментарий_");
	СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", Новый ОписаниеТипов("Строка"));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Комментарий'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("КнопкаВыбора", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("МногострочныйРежим", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("Высота", 1);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Отменено"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыОтменено(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Отменено_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Булево");
	СтруктураПоля.Вставить("ВидПоля", ВидПоляФормы.ПолеФлажка);
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Отменено'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Замещено"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыЗамещен(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Замещен_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Булево");
	СтруктураПоля.Вставить("ВидПоля", ВидПоляФормы.ПолеФлажка);
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Замещен'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "группа комментария с картинкой"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыГруппаКомментарияСКартинкой(ПараметрыВывода, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "ГруппаКомментарий_");
	СтруктураПоля.Вставить("СоздаватьРеквизит", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", Истина);
	СтруктураПоля.Вставить("ТипЭлементаФормы", Тип("ГруппаФормы"));
	СтруктураПоля.Вставить("ВидПоля", ВидГруппыФормы.ГруппаКолонок);
	СтруктураПоля.Вставить("ШиринаЭлемента", 8);
	СтруктураПоля.Вставить("Заголовок", "");
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("Группировка", ГруппировкаКолонок.ВЯчейке);
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "КартинкаКомментарий_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	СтруктураПоля.Вставить("СоздаватьЭлемент", Истина);
	СтруктураПоля.Вставить("ВидПоля", ВидПоляФормы.ПолеКартинки);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0));
	СтруктураПоля.Вставить("Заголовок", "");
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 1);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("КартинкаЗначений", БиблиотекаКартинок.КоллекцияКомментарий);
	СтруктураПоля.СвойстваЭлемента.Вставить("ПропускатьПриВводе", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("ОтображатьВПодвале", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("РастягиватьПоВертикали", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("Рамка", Новый Рамка(ТипРамкиЭлементаУправления.БезРамки));
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСобытийОбъекта

// Процедура, вызываемая из одноименного обработчика события формы объекта плана.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Правила заполнения не были получены при чтении на сервере.
	Если НЕ ЭтоАдресВременногоХранилища(Форма.АдресПравилаЗаполнения) Тогда
		
		Если ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			Форма.АдресПравилаЗаполнения = ПоместитьВоВременноеХранилище(
				Форма.Параметры.ЗначениеКопирования.ПравилоЗаполнения.Выгрузить(),
				Форма.УникальныйИдентификатор);
		Иначе
			ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
			Форма.АдресПравилаЗаполнения = ПоместитьВоВременноеХранилище(
				ДокументОбъект.ПравилоЗаполнения.Выгрузить(),
				Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	// Пользовательские настройки не были получены при чтении на сервере.
	Если НЕ ЭтоАдресВременногоХранилища(Форма.АдресПользовательскихНастроек) Тогда
		
		Если ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			Форма.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
				Форма.Параметры.ЗначениеКопирования.ПользовательскиеНастройки.Получить(),
				Форма.УникальныйИдентификатор);
		Иначе
			Если ДокументОбъект = Неопределено Тогда
			
				ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
			
			КонецЕсли;
		
			Форма.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
				ДокументОбъект.ПользовательскиеНастройки.Получить(),
				Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы объекта плана.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт 
	
	// Получение правила заполнения и пользовательских настроек из объекта
	Форма.АдресПравилаЗаполнения = ПоместитьВоВременноеХранилище(
		ТекущийОбъект.ПравилоЗаполнения.Выгрузить(),
		Форма.УникальныйИдентификатор);
	Форма.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
		ТекущийОбъект.ПользовательскиеНастройки.Получить(),
		Форма.УникальныйИдентификатор);
	
	ПриЧтенииСозданииНаСервере(Форма);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Форма.АдресПравилаЗаполнения) Тогда
		ТекущийОбъект.ПравилоЗаполнения.Загрузить(ПолучитьИзВременногоХранилища(Форма.АдресПравилаЗаполнения));
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(Форма.АдресПользовательскихНастроек) Тогда
		ТекущийОбъект.ПользовательскиеНастройки = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресПользовательскихНастроек));
	КонецЕсли;
	
	Если ТипЗнч(Форма.СтруктураНастроек) = Тип("Структура") Тогда
		ТекущийОбъект.СтруктураНастроек = Новый ХранилищеЗначения(Форма.СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИсточниковПланирования

// Функция обрабатывает все источники правила заполнения и возвращает итоговый результат
//
// Параметры:
//  ТипПлана                  - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ОбъектПравилоЗаполнения   - Объект.ТабличнаяЧасть - ТЧ объекта, содержащее правило заполнения
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - настройки пользователя для документа плана
//  ДополнительныеПараметры   - Структура - Дополнительные параметры, используемые при получении данных из источников
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица итоговых данных преобразованных по правилам из различных источников
//
Функция ВыбратьДанныеПоПравилам(Знач ТипПлана, Знач ОбъектПравилоЗаполнения, ПользовательскиеНастройки, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Перем Результат;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ОбъектПравилоЗаполнения) = Тип("ТаблицаЗначений") Тогда
		ПравилоЗаполнения = ОбъектПравилоЗаполнения;
	Иначе
		ПравилоЗаполнения = ОбъектПравилоЗаполнения.Выгрузить();
	КонецЕсли; 
	
	ПравилоЗаполнения.Колонки.Добавить("ДанныеВыбраны", Новый ОписаниеТипов("Булево"));
	ПравилоЗаполнения.Колонки.Добавить("НаборДанных");
	ПравилоЗаполнения.Колонки.Добавить("КомпоновщикНастроекКомпоновкиДанных");
	
	НоваяСтрокаПравилоЗаполнения = ПравилоЗаполнения.Добавить();
	НоваяСтрокаПравилоЗаполнения.ДанныеВыбраны = Ложь;
	НоваяСтрокаПравилоЗаполнения.НаборДанных = Неопределено;
	НоваяСтрокаПравилоЗаполнения.НомерСтроки = 0;
	НоваяСтрокаПравилоЗаполнения.НомерСтрокиРодитель = 99999;
	НоваяСтрокаПравилоЗаполнения.ВариантПреобразования = Перечисления.ВариантыПреобразования.Сложение;
	НоваяСтрокаПравилоЗаполнения.Источник = Справочники.ИсточникиДанныхПланирования.ПустаяСсылка();
	НоваяСтрокаПравилоЗаполнения.ТипЭлемента = 1;
	НоваяСтрокаПравилоЗаполнения.Использование = Истина;
	НоваяСтрокаПравилоЗаполнения.Исключать = Ложь;
	НоваяСтрокаПравилоЗаполнения.ПользовательскиеНастройки = Неопределено;
	НоваяСтрокаПравилоЗаполнения.Период = Неопределено;
	НоваяСтрокаПравилоЗаполнения.Дата = Неопределено;
	НоваяСтрокаПравилоЗаполнения.Присоединять = Ложь;
	
	ПравилоЗаполнения.Сортировать("ТипЭлемента, НомерСтрокиРодитель, НомерСтроки");
	
	// Установка признака использования.
	ВсеПравилаОбработаны = Ложь;
	
	Пока НЕ ВсеПравилаОбработаны Цикл
		
		ВсеПравилаОбработаны = Истина;
		
		Для каждого ЭлементПравилоЗаполнения Из ПравилоЗаполнения Цикл
			
			Если ЭлементПравилоЗаполнения.ТипЭлемента = 1 Тогда
				
				// Отключение использования подчиненных, размещенных в отключенном родителе.
				НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель, Использование", ЭлементПравилоЗаполнения.НомерСтроки, Истина));
				
				Если НЕ ЭлементПравилоЗаполнения.Использование Тогда
					
					Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
						
						НайденнаяСтрока.Использование = Ложь;
						ВсеПравилаОбработаны = Ложь;
						
					КонецЦикла;
					
				Иначе
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						ЭлементПравилоЗаполнения.Использование = Ложь;
						ВсеПравилаОбработаны = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнятьНазначениеВТЧ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.ПараметрыДанных.ВидПлана, "ЗаполнятьНазначениеВТЧ");
	
	// Обработка правил преобразования
	ВсеПравилаОбработаны = Ложь;
	
	Пока НЕ ВсеПравилаОбработаны Цикл
		
		ВсеПравилаОбработаны = Истина;
		
		Для каждого ЭлементПравилоЗаполнения из ПравилоЗаполнения Цикл
			
			Если НЕ ЭлементПравилоЗаполнения.ДанныеВыбраны И ЭлементПравилоЗаполнения.Использование Тогда
				
				ВсеПравилаОбработаны = Ложь;
				
				Если ЭлементПравилоЗаполнения.ТипЭлемента = 0 Тогда
					
					ПараметрыИсточникаДанных = Новый Структура;
					ПараметрыИсточникаДанных.Вставить("ИсточникДанныхПланирования", 	ЭлементПравилоЗаполнения.Источник);
					ПараметрыИсточникаДанных.Вставить("Исключать", 						ЭлементПравилоЗаполнения.Исключать);
					ПараметрыИсточникаДанных.Вставить("ИзменитьРезультатНа", 			ЭлементПравилоЗаполнения.ИзменитьРезультатНа);
					
					ДополнительныеПараметрыИсточника = Новый Структура("Период, Дата", ЭлементПравилоЗаполнения.Период.Получить(), ЭлементПравилоЗаполнения.Дата.Получить());
					Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ПараметрыДанных") <> Неопределено Тогда
						ДополнительныеПараметрыИсточника.Вставить("ПараметрыДанных", ДополнительныеПараметры.ПараметрыДанных);
					КонецЕсли;
					КомпоновщикНастроекКомпоновкиДанных = Неопределено;
					ЭлементПравилоЗаполнения.НаборДанных = Справочники.ИсточникиДанныхПланирования.ВыбратьДанные(
						ПараметрыИсточникаДанных, 
						ЭлементПравилоЗаполнения.ПользовательскиеНастройки.Получить(), 
						ДополнительныеПараметрыИсточника, 
						КомпоновщикНастроекКомпоновкиДанных);
					ЭлементПравилоЗаполнения.ДанныеВыбраны = Истина;
					ЭлементПравилоЗаполнения.КомпоновщикНастроекКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных;
					
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("НомерСтрокиРодитель", ЭлементПравилоЗаполнения.НомерСтроки);
					Отбор.Вставить("Использование",       Истина);
					Отбор.Вставить("ДанныеВыбраны",       Ложь);
					Отбор.Вставить("Присоединять",        Ложь);
					НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель, Использование, ДанныеВыбраны", 
							ЭлементПравилоЗаполнения.НомерСтроки, Истина, Истина));
						
						ПравилоПреобразования = Новый Структура("ВариантПреобразования, Исключать, Присоединять", 
						ЭлементПравилоЗаполнения.ВариантПреобразования, 
						ЭлементПравилоЗаполнения.Исключать,
						ЭлементПравилоЗаполнения.Присоединять);
						
						Если ЭлементПравилоЗаполнения.НомерСтрокиРодитель = 99999 Тогда
							
							ЭлементПравилоЗаполнения.НаборДанных = ПреобразоватьДанные(ТипПлана, НайденныеСтроки, ПравилоПреобразования, 
								ПользовательскиеНастройки, ДополнительныеПараметры, ЗаполнятьНазначениеВТЧ);
							Результат = ЭлементПравилоЗаполнения.НаборДанных;
							
						Иначе
							
							ЭлементПравилоЗаполнения.НаборДанных = ПреобразоватьДанные(ТипПлана, НайденныеСтроки, ПравилоПреобразования,,,ЗаполнятьНазначениеВТЧ);
							ЭлементПравилоЗаполнения.КомпоновщикНастроекКомпоновкиДанных = НайденныеСтроки[0].КомпоновщикНастроекКомпоновкиДанных;
							
						КонецЕсли;
						
						ЭлементПравилоЗаполнения.ДанныеВыбраны = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция получает значения реквизитов сценария
//
// Параметры:
//  Сценарий  - СправочникСсылка.СценарииТоварногоПланирования - Ссылка на сценарий планирвоания
//  Параметры - Структура - переменная, в которую возвращаются значения реквизитов сценария
//
// Возвращаемое значение:
//   Структура   - Значения параметров сценария
//
Функция ПолучитьПараметрыСценария(Сценарий, Параметры = Неопределено) Экспорт 

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, "Валюта, Периодичность");
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	Параметры.Вставить("Сценарий", Сценарий);
	Для каждого Реквизит Из Реквизиты Цикл
		Параметры.Вставить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	Возврат Параметры;

КонецФункции

// Функция возвращает в виде структуры все параметры документа плана
//
// Параметры:
//  Объект                - ДокументОбъект - Документ плана
//  Параметры - Структура - переменная, в которую возвращаются значения реквизитов сценария
//
// Возвращаемое значение:
//   Структура   - Значения параметров сценария
//
Функция ПолучитьПараметрыПлана(Объект, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура();
		Параметры.Вставить("Ссылка");
		Параметры.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		Параметры.Вставить("ФорматМагазина", Справочники.ФорматыМагазинов.ПустаяСсылка());
		Параметры.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
		Параметры.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Параметры.Вставить("Соглашение");
		Параметры.Вставить("Статус");
		Параметры.Вставить("Периодичность");
		Параметры.Вставить("НачалоПериода");
		Параметры.Вставить("ОкончаниеПериода");
		Параметры.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
		Параметры.Вставить("Менеджер", Справочники.Пользователи.ПустаяСсылка());
		Параметры.Вставить("ВидПлана", Справочники.ВидыПланов.ПустаяСсылка());
		Параметры.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Параметры, Объект);
	ПолучитьПараметрыСценария(Объект.Сценарий, Параметры);
	
	Возврат Параметры;

КонецФункции

// Функция помещает схему преобразования данных в хранилище значения и возвращает адрес
//
// Параметры:
//  ТипПлана                  - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор, в который возвращается адрес схемы
//
// Возвращаемое значение:
//   Строка - адрес временного хранилища значений
//
Функция ПолучитьАдресСхемыПреобразованияДанных(Знач ТипПлана, Знач УникальныйИдентификатор, ЗаполнятьНазначениеВТЧ = Ложь) Экспорт 

	АдресСхемыПреобразованияДанных = "";
	СхемаКомпоновкиДанныхПреобразование = ПолучитьСхемуПреобразованияДанных(ТипПлана,,ЗаполнятьНазначениеВТЧ);
	
	АдресСхемыПреобразованияДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхПреобразование, УникальныйИдентификатор);
	
	Возврат АдресСхемыПреобразованияДанных;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИнтерфейсаЗаполненияПоФормулам

// Формирует структуру дополнительных реквизитов
//
// Параметры:
//  Параметры	 - Структура - Значения дополнительных реквизитов
// 
// Возвращаемое значение:
//  Структура - Структура дополнительных реквизитов
//
Функция ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры) Экспорт
	
	ЭлементФормыТаблицы 	= Параметры.ЭлементФормыТаблицы;
	Сценарий 				= Параметры.СценарийРеквизиты;
	ВидПлана				= Параметры.ВидПланаРеквизиты;
	СоздаватьЭлементыФормы  = Параметры.СоздаватьЭлементыФормы;
	ПутьКРеквизиту			= Параметры.ПутьКРеквизиту;
	ЭтоПланПродажПоКатегориям = ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям;
	ЗаполнятьНазначениеВТЧ	= ВидПлана.ЗаполнятьНазначениеВТЧ;
	
	Если СоздаватьЭлементыФормы Тогда
		ГруппаФормыДопПараметрыФормула	 = Параметры.ГруппаФормыДопПараметрыФормула;
		ГруппаФормыДопПараметрыОтклонение= Параметры.ГруппаФормыДопПараметрыОтклонение;
		ГруппаФормыДопПараметры			 = Параметры.ГруппаФормыДопПараметры;
	КонецЕсли;
	
	ДопПараметры 		= Новый Структура();
	
#Область СвободныеОстатки
	//Свойства реквизита формы
	ДопПараметр 		= Новый Структура();
	ДопПараметр.Вставить("Имя", 				"СвободныеОстатки");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='Свободный остаток'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	НЕ ЭтоПланПродажПоКатегориям И НЕ ЗаполнятьНазначениеВТЧ);
	
	//Свойства операнда
	ДопПараметр.Вставить("СоздаватьОперанд", 	НЕ ЭтоПланПродажПоКатегориям И НЕ ЗаполнятьНазначениеВТЧ);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='Свободный остаток'"));
	
	ДопПараметры.Вставить("СвободныеОстатки",ДопПараметр);
#КонецОбласти 

	Документы.ПланПродажПоКатегориям.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	Документы.ПланПродаж.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		Документы.ПланСборкиРазборки.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	КонецЕсли;
	Документы.ПланЗакупок.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	
#Область Формула
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"Формула");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Строка"));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru='Формула'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", Истина);
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", Ложь);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru='Формула'"));
	
	ДопПараметры.Вставить("Формула", ДопПараметр);
#КонецОбласти
	
#Область ФормулаВычисление
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"ФормулаВычисление");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Строка"));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru='Формула'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", Истина);
	
	Если СоздаватьЭлементыФормы Тогда
		//Свойства элемента формы
		ДопПараметр.Вставить("ИмяЭлемента", 			ЭлементФормыТаблицы + ДопПараметр.Имя);
		ДопПараметр.Вставить("ТипЭлемента", 			Тип("ПолеФормы"));
		ДопПараметр.Вставить("Родитель", 				ГруппаФормыДопПараметры.Имя);
		ДопПараметр.Вставить("Вид", 					"ПолеНадписи");
		ДопПараметр.Вставить("ПутьКДанным", 			?(ПустаяСтрока(ПутьКРеквизиту), "", ПутьКРеквизиту + ".") + ДопПараметр.Имя);
		ДопПараметр.Вставить("СоздаватьЭлемент", 		Истина);
		
		//Действие
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("Нажатие", 		"Подключаемый_УстановитьПроизвольнуюФормулу");
		ДопПараметр.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли;
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", Ложь);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru='Вычисление'"));
	
	ДопПараметры.Вставить("ФормулаВычисление", ДопПараметр);
#КонецОбласти

#Область ФормулаПредставление
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"ФормулаПредставление");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Строка"));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru='Формула'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", Истина);
	
	Если СоздаватьЭлементыФормы Тогда
		//Свойства элемента формы
		ДопПараметр.Вставить("ИмяЭлемента", 		ЭлементФормыТаблицы + ДопПараметр.Имя);
		ДопПараметр.Вставить("ТипЭлемента", 		Тип("ПолеФормы"));
		ДопПараметр.Вставить("Родитель", 			ГруппаФормыДопПараметрыФормула.Имя);
		ДопПараметр.Вставить("Вид", 				"ПолеВвода");
		ДопПараметр.Вставить("ПутьКДанным", 		?(ПустаяСтрока(ПутьКРеквизиту), "", ПутьКРеквизиту + ".") + ДопПараметр.Имя);
		ДопПараметр.Вставить("КартинкаШапки", 		БиблиотекаКартинок.Изменить);
		ДопПараметр.Вставить("РедактированиеТекста",Ложь);
		ДопПараметр.Вставить("ТолькоПросмотр", 		Ложь);
		ДопПараметр.Вставить("СоздаватьЭлемент", 	ГруппаФормыДопПараметрыФормула.Вид = ВидГруппыФормы.ГруппаКолонок);
		ДопПараметр.Вставить("Ширина", 				10);
		ДопПараметр.Вставить("КнопкаОткрытия", 		Истина);
		ДопПараметр.Вставить("КнопкаВыбора", 		Ложь);
		
		//Действие
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("Открытие", 		"Подключаемый_УстановитьПроизвольнуюФормулу");
		ДопПараметр.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли;
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", Ложь);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru='Формула'"));
	
	ДопПараметры.Вставить("ФормулаПредставление", ДопПараметр);
#КонецОбласти
	
#Область Отклонение	
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"Отклонение");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru='Отклонение от формулы'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", Истина);
	
	Если СоздаватьЭлементыФормы Тогда
		//Свойства элемента формы
		ДопПараметр.Вставить("ИмяЭлемента", 		ЭлементФормыТаблицы + ДопПараметр.Имя);
		ДопПараметр.Вставить("ТипЭлемента", 		Тип("ПолеФормы"));
		ДопПараметр.Вставить("Родитель", 			ГруппаФормыДопПараметрыОтклонение.Имя);
		ДопПараметр.Вставить("Вид", 				"ПолеВвода");
		ДопПараметр.Вставить("ПутьКДанным", 		?(ПустаяСтрока(ПутьКРеквизиту), "", ПутьКРеквизиту + ".") + ДопПараметр.Имя);
		ДопПараметр.Вставить("КартинкаШапки", 		Новый Картинка());
		ДопПараметр.Вставить("РедактированиеТекста",Ложь);
		ДопПараметр.Вставить("ТолькоПросмотр", 		ГруппаФормыДопПараметрыОтклонение.Вид = ВидГруппыФормы.ОбычнаяГруппа);
		ДопПараметр.Вставить("СоздаватьЭлемент",	Истина);
		ДопПараметр.Вставить("Ширина", 				10);
		ДопПараметр.Вставить("КнопкаОткрытия", 		Ложь);
		ДопПараметр.Вставить("КнопкаВыбора", 		Ложь);
	КонецЕсли;
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", Ложь);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru='Отклонение от формулы'"));
	
	ДопПараметры.Вставить("Отклонение", ДопПараметр);
#КонецОбласти
	
	Возврат ДопПараметры;
	
КонецФункции

// Создает дополнительные реквизиты формы
//
// Параметры:
// Форма             - УправляемаяФорма - Форма документа
// Параметры         - Структура - Значения дополнительных реквизитов
//
Процедура ОбновитьСтруктуруВыводаТаблицы(Форма, Параметры) Экспорт

	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты 	 = Новый Массив();
	
	Для каждого СтруктураПоля Из Параметры.Поля Цикл
		
		СтруктураПоля = СтруктураПоля.Значение;
		
		РеквизитыТаблицыПлана = Форма.ПолучитьРеквизиты(СтруктураПоля.Путь);
		
		//Удаление реквизитов
		Для каждого Реквизит Из РеквизитыТаблицыПлана Цикл
			Если Реквизит.Имя = СтруктураПоля.Имя Тогда
				УдаляемыеРеквизиты.Добавить(?(ПустаяСтрока(СтруктураПоля.Путь), "" ,СтруктураПоля.Путь + ".") + СтруктураПоля.Имя);
			КонецЕсли;
		КонецЦикла;
		
		//Добавление реквизитов
		Если СтруктураПоля.СоздаватьРеквизит Тогда
			Реквизит = Новый РеквизитФормы(СтруктураПоля.Имя, СтруктураПоля.Тип, СтруктураПоля.Путь, СтруктураПоля.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
		//Удаление элементов
		Если СтруктураПоля.Свойство("ИмяЭлемента") Тогда
			УдаляемыйЭлемент = Форма.Элементы.Найти(СтруктураПоля.ИмяЭлемента);
		Иначе
			УдаляемыйЭлемент = Неопределено;
		КонецЕсли;
		
		Если УдаляемыйЭлемент <> Неопределено Тогда
			Форма.Элементы.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	//Создание элементов
	Для каждого СтруктураПоля Из Параметры.Поля Цикл
		
		СтруктураПоля = СтруктураПоля.Значение;
		Если СтруктураПоля.Свойство("СоздаватьЭлемент") и СтруктураПоля.СоздаватьЭлемент Тогда
			
			Родитель = Форма.Элементы[СтруктураПоля.Родитель];
			ЭлементФормы = Форма.Элементы.Добавить(СтруктураПоля.ИмяЭлемента, СтруктураПоля.ТипЭлемента, Родитель);
			Если СтруктураПоля.Вид = "ПолеНадписи" Тогда
				ЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи;
				ЭлементФормы.Гиперссылка = Истина;
				ЗаполнитьЗначенияСвойств(ЭлементФормы, СтруктураПоля, "Заголовок,ПутьКДанным");
			Иначе
				ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
				ЗаполнитьЗначенияСвойств(ЭлементФормы, СтруктураПоля, "Заголовок,ПутьКДанным,КартинкаШапки,Ширина,КнопкаОткрытия,КнопкаВыбора,РедактированиеТекста,ТолькоПросмотр");
			КонецЕсли;
			
			Если СтруктураПоля.Свойство("СтруктураДействий") Тогда
				Для каждого Действие Из СтруктураПоля.СтруктураДействий Цикл
					ЭлементФормы.УстановитьДействие(Действие.Ключ, Действие.Значение);
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Инициализация дерева операторов
//
// Параметры:
// Дерево             - ДеревоЗначений - Дерево значений
//
Процедура ИнициализироватьДереваОператоров(Дерево) Экспорт
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И'"),      " " + НСтр("ru='И'")      + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИЛИ'"),    " " + НСтр("ru='ИЛИ'")    + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НЕ'"),     " " + НСтр("ru='НЕ'")     + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА'"), " " + НСтр("ru='ИСТИНА'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ'"),   " " + НСтр("ru='ЛОЖЬ'")   + " ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Функции'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум'"),    НСтр("ru='Макс(,)'"), 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум'"),     НСтр("ru='Мин(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление'"),  НСтр("ru='Окр(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть'"), НСтр("ru='Цел()'"),   1);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие'"),     "?(,,)",              3);
	РаботаСформулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Значение колонки'"),      НСтр("ru='ЗначениеКолонки()'"),1);
	РаботаСформулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Номер текущей колонки'"), НСтр("ru='НомерТекущейКолонки()'"),0);
	
КонецПроцедуры

// Инициализация дополнительных параметров
//
// Параметры:
// ДополнительныеПараметрыТовары             - Структура - Структура доп. параметров
// ДополнительныеПараметрыТоварыПоПериодам   - Структура - Структура доп. параметров по периодам
// Параметры             - Структура - Структура параметров
//
Процедура ИнициализироватьДопПараметры(ДополнительныеПараметрыТовары, ДополнительныеПараметрыТоварыПоПериодам, Параметры) Экспорт

	ДополнительныеПараметрыПоПериодам 	= Параметры.Форма.Элементы.ТоварыПоПериодамДополнительныеПараметры;
	ДополнительныеПараметрыФормула 		= Параметры.Форма.Элементы.ТоварыДополнительныеПараметрыФормула;
	ДополнительныеПараметрыОтклонение 	= Параметры.Форма.Элементы.ТоварыДополнительныеПараметрыОтклонение;
	ДополнительныеПараметры 			= Параметры.Форма.Элементы.ТоварыДополнительныеПараметры;
	
	
	СценарийРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Форма.Объект.Сценарий, 
		"ИспользоватьВПланированииПродаж, ИспользоватьВПланированииПроизводства, ИспользоватьВПланированииЗакупок, 
		|ИспользоватьВПланированииСборкиРазборки, ИспользоватьДляПланированияМатериалов, 
		|ИспользоватьВПланированииПродажПоКатегориям, ИспользоватьРасчетПоСкоростиПродаж,
		|ПланированиеПоНазначениям");
		
	ВидПланаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Форма.Объект.ВидПлана, 
		"ТипПлана, ЗаполнятьПартнера, ЗаполнятьСоглашение, ЗаполнятьСклад, ЗаполнятьПодразделение, ЗаполнятьМенеджера,
		|ЗаполнятьФорматМагазина, ЗаполнятьНазначениеВТЧ");
	
	ПараметрыПолей = Новый Структура();
	ПараметрыПолей.Вставить("ПутьКРеквизиту", 					Параметры.ПутьКРеквизиту);
	ПараметрыПолей.Вставить("ЭлементФормыТаблицы", 				Параметры.ЭлементФормыТаблицы);
	ПараметрыПолей.Вставить("СценарийРеквизиты", 				СценарийРеквизиты);
	ПараметрыПолей.Вставить("ВидПланаРеквизиты", 				ВидПланаРеквизиты);
	ПараметрыПолей.Вставить("СоздаватьЭлементыФормы", 			Истина);
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметрыФормула", 	Новый Структура("Имя, Вид",ДополнительныеПараметрыФормула.Имя, ДополнительныеПараметрыФормула.Вид));
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметрыОтклонение",Новый Структура("Имя, Вид",ДополнительныеПараметрыОтклонение.Имя, ДополнительныеПараметрыОтклонение.Вид));
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметры", 			Новый Структура("Имя, Вид",ДополнительныеПараметры.Имя, ДополнительныеПараметры.Вид));
	
	ДополнительныеПараметрыТовары = Планирование.ДополнительныеПараметрыДляРасчетаПоФормуле(ПараметрыПолей);
	
	
	ПараметрыПолей = Новый Структура();
	ПараметрыПолей.Вставить("ПутьКРеквизиту", 					"");
	ПараметрыПолей.Вставить("ЭлементФормыТаблицы", 				Параметры.ЭлементФормыТаблицыПоПериодам);
	ПараметрыПолей.Вставить("СценарийРеквизиты", 				СценарийРеквизиты);
	ПараметрыПолей.Вставить("ВидПланаРеквизиты", 				ВидПланаРеквизиты);
	ПараметрыПолей.Вставить("СоздаватьЭлементыФормы", 			Истина);
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметрыФормула", 	Новый Структура("Имя, Вид",ДополнительныеПараметрыПоПериодам.Имя, ДополнительныеПараметрыПоПериодам.Вид));
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметрыОтклонение",Новый Структура("Имя, Вид",ДополнительныеПараметрыПоПериодам.Имя, ДополнительныеПараметрыПоПериодам.Вид));
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметры", 			Новый Структура("Имя, Вид",ДополнительныеПараметрыПоПериодам.Имя, ДополнительныеПараметрыПоПериодам.Вид));
	
	ДополнительныеПараметрыТоварыПоПериодам = Планирование.ДополнительныеПараметрыДляРасчетаПоФормуле(ПараметрыПолей);
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыЗаполненияПоФормулам

// Возвращает таблицу данных рассчитанных по формуле
//
// Параметры:
//  Параметры  - Структура - Настройки расчета
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица с данными рассчитанными по формуле
//
Функция ЗаполнитьПоФормуле(Параметры) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИменНаборов = Параметры.МассивИменНаборов;
	
	ТипПлана = Параметры.ТипПлана;
	ВидПлана = Параметры.ВидПлана;
	ЗаполнятьНазначениеВТЧ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ЗаполнятьНазначениеВТЧ");
	
	НаборыДанныхОбъекты = Неопределено;
	Если НЕ Параметры.Свойство("НаборыДанныхОбъекты", НаборыДанныхОбъекты) ИЛИ ТипЗнч(НаборыДанныхОбъекты) <> Тип("Структура") Тогда
		НаборыДанныхОбъекты = Новый Структура;
	КонецЕсли; 
	Если Параметры.Свойство("ИмяКолонкиРезультата") Тогда
		ИмяКолонкиРезультата = Параметры.ИмяКолонкиРезультата;
	Иначе
		ИмяКолонкиРезультата = "Количество";
	КонецЕсли;
	
	
	МакетыОперандов = МакетыОперандовПлана();
	
	СКД_Преобразование = ПолучитьСхемуПреобразованияДанных(ТипПлана, Истина, ЗаполнятьНазначениеВТЧ);
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	Если Параметры.Свойство("Сценарий") Тогда
	
		Параметры.Вставить("СтатусыСценария", Справочники.СценарииТоварногоПланирования.СписокСтатусовПланов(Параметры.Сценарий));
	
	КонецЕсли; 
	
	Если Параметры.Свойство("ЗаполнятьСостав") Тогда
	
		ЗаполняемаяТЧ.Очистить();
		// Заполняем состав
		
		МассивИменНаборовЗаполнения = Параметры.МассивИменНаборовЗаполнения;
		
		СКД_Заполнения = ПолучитьСхемуПреобразованияДанных(ТипПлана, Ложь, ЗаполнятьНазначениеВТЧ);
		НаборДанныхОбъединение = СКД_Заполнения.НаборыДанных.Объединение;
		
		
		Для каждого ИмяОперанда Из МассивИменНаборовЗаполнения Цикл
			
			СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
			
			Если СКД_Операнда = Неопределено 
				ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
				ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ИмяОперанда = "ЦеныНоменклатуры" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.ЦеныНоменклатуры.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыСрезПоследних.Упаковка",
					"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.ЦеныНоменклатуры.Запрос = ТекстЗапроса;
			ИначеЕсли ИмяОперанда = "ЦеныНоменклатурыПоставщиков" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.ЦеныНоменклатурыПоставщиков.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.ЦеныНоменклатурыПоставщиков.Запрос = ТекстЗапроса;
			ИначеЕсли ИмяОперанда = "МинимальнаяЦенаПоставщика" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.МинимальнаяЦенаПоставщика.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.МинимальнаяЦенаПоставщика.Запрос = ТекстЗапроса;
			КонецЕсли;
				
			ДобавитьНаборОперандаВСхемуПреобразования(СКД_Заполнения, НаборДанныхОбъединение, СКД_Операнда);
			
		КонецЦикла;
		
		СКД_Заполнения.ВычисляемыеПоля.Очистить(); // удаляем, т.к. не известно, есть ли поля выражения в источниках
		УдалитьНаборыНеИспользуемыеДляФормул(СКД_Заполнения);
		ОтключитьНеиспользуемыеПоляСхемыПреобразования(СКД_Заполнения, ВидПлана);
		
		ЗаполняемаяТЧ = Новый ТаблицаЗначений;
		
		ВыполнитьСхемуПреобразования(СКД_Заполнения, Параметры, ЗаполняемаяТЧ);
		
		Если ЗаполняемаяТЧ.Колонки.Найти("Период") <> Неопределено И ЗаполняемаяТЧ.Колонки.Найти("ПериодСостава") = Неопределено Тогда
			ЗаполняемаяТЧ.Колонки["Период"].Имя = "ПериодСостава";
			
			// Дополняем таблицу состава всеми периодами
			ЗаполняемаяТЧКопия = ЗаполняемаяТЧ.Скопировать();
			
			ХарактеристикиИспользуются = ЗаполняемаяТЧ.Колонки.Найти("Характеристика") <> Неопределено;
			
			Для каждого СтрокаТЧ Из ЗаполняемаяТЧКопия Цикл
				Для каждого Период Из Параметры.Периоды Цикл
					
					Если Параметры.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
						СтруктураПоиска = Новый Структура("ТоварнаяКатегория, ПериодСостава", СтрокаТЧ.ТоварнаяКатегория, Период.ДатаНачала);
					Иначе
						СтруктураПоиска = Новый Структура("Номенклатура, ПериодСостава", СтрокаТЧ.Номенклатура, Период.ДатаНачала);
					КонецЕсли;
					
					Если ХарактеристикиИспользуются Тогда
						СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
					КонецЕсли;
					
					Если ЗаполняемаяТЧКопия.НайтиСтроки(СтруктураПоиска).Количество()>0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ЗаполняемаяТЧ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
					
				КонецЦикла; 
			КонецЦикла;
			
		ИначеЕсли ЗаполняемаяТЧ.Колонки.Найти("ПериодСостава") = Неопределено Тогда
			ЗаполняемаяТЧ.Колонки.Добавить("ПериодСостава", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
			ЗаполняемаяТЧ.ЗаполнитьЗначения(Параметры.НачалоПериодаСмещения, "ПериодСостава");
			
			// Копируем строки в в каждый период плана
			Если Параметры.Периоды.Количество() > 1 Тогда
				
				ОдинПериод = ЗаполняемаяТЧ.Скопировать();
				
				Для каждого СтрокаТЧ Из ОдинПериод Цикл
					Для каждого Период Из Параметры.Периоды Цикл
						Если Период.ДатаНачала = Параметры.НачалоПериодаСмещения Тогда
							Продолжить;
						КонецЕсли; 
						НоваяСтрока = ЗаполняемаяТЧ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
						НоваяСтрока.ПериодСостава = Период.ДатаНачала;
					КонецЦикла; 
				КонецЦикла; 
			
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЗаполняемаяТЧ.Колонки.Найти("LineNumber") <> Неопределено Тогда
		ЗаполняемаяТЧ.Колонки.LineNumber.Имя = "НомерСтроки";
	КонецЕсли;
	Если ЗаполняемаяТЧ.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ЗаполняемаяТЧ.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(5,0));
		
		НомерСтроки = 0;
		Для каждого СтрокаТЧ Из ЗаполняемаяТЧ Цикл
			
			НомерСтроки = НомерСтроки + 1;
			СтрокаТЧ.НомерСтроки = НомерСтроки;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ИменаОперандов = "";
	
	// Заполнение операндов
	НаборДанныхОбъединение = СКД_Преобразование.НаборыДанных.Объединение;
	
	Для каждого ИмяОперанда Из МассивИменНаборов Цикл
	
		СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
		
		Если СКД_Операнда = Неопределено 
			ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
			ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		
		ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, НаборДанныхОбъединение, СКД_Операнда, ИменаОперандов);
		
	КонецЦикла; 
	
	НаборДанныхПрисоединение = СКД_Преобразование.НаборыДанных.Найти("Присоединение");
	Если Параметры.Свойство("ОбновлятьПоказатели") 
		И Параметры.Свойство("МассивИменНаборовПрисоединения")
		И НаборДанныхПрисоединение <> Неопределено Тогда
		
		МассивИменНаборовПрисоединения = Параметры.МассивИменНаборовПрисоединения;
		
		Для каждого ИмяОперанда Из МассивИменНаборовПрисоединения Цикл
			
			СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
			
			Если СКД_Операнда = Неопределено 
				ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
				ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ИмяОперанда = "ЦеныНоменклатуры" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.ЦеныНоменклатуры.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыСрезПоследних.Упаковка",
					"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.ЦеныНоменклатуры.Запрос = ТекстЗапроса;
			ИначеЕсли ИмяОперанда = "ЦеныНоменклатурыПоставщиков" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.ЦеныНоменклатурыПоставщиков.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.ЦеныНоменклатурыПоставщиков.Запрос = ТекстЗапроса;
			ИначеЕсли ИмяОперанда = "МинимальнаяЦенаПоставщика" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.МинимальнаяЦенаПоставщика.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.МинимальнаяЦенаПоставщика.Запрос = ТекстЗапроса;
			КонецЕсли;
				
			ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, НаборДанныхПрисоединение, СКД_Операнда, ИменаОперандов);
			
		КонецЦикла; 
	КонецЕсли;
	
	УдалитьНаборыНеИспользуемыеДляФормул(СКД_Преобразование);
	ОтключитьНеиспользуемыеПоляСхемыПреобразования(СКД_Преобразование, ВидПлана);
	
	Для каждого Поле Из СКД_Преобразование.НаборыДанных.ТаблицаСостава.Поля Цикл
	
		Если ЗаполняемаяТЧ.Колонки.Найти(Поле.Поле) = Неопределено Тогда
			ЗаполняемаяТЧ.Колонки.Добавить(Поле.Поле, Поле.ТипЗначения);
		КонецЕсли; 
	
	КонецЦикла; 
	НаборыДанныхОбъекты.Вставить("ТаблицаСостава", ЗаполняемаяТЧ);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	ВыполнитьСхемуПреобразования(СКД_Преобразование, Параметры, ТаблицаРезультата, НаборыДанныхОбъекты);
	
	// Обрабатываем рассчет специальных полей
	Если ТаблицаРезультата.Колонки.Найти("Номенклатура") <> Неопределено
		И (ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориям") <> Неопределено
		ИЛИ ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямСОтбором") <> Неопределено) Тогда
		
		ИменаПолейПоказателей = Новый Массив;
		Если ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориям") <> Неопределено Тогда 
			ИменаПолейПоказателей.Добавить("ПланыПродажПоКатегориям");
		КонецЕсли;
		Если ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямСОтбором") <> Неопределено Тогда 
			ИменаПолейПоказателей.Добавить("ПланыПродажПоКатегориямСОтбором");
		КонецЕсли;
		
		ТаблицаРезультата.Колонки.ПериодСостава.Имя = "Период";
		
		Документы.НормативРаспределенияПлановПродажПоКатегориям.ПересчитатьПоказателиПоНормативамРаспределения(ТаблицаРезультата, ИменаПолейПоказателей);
		
		Если ТаблицаРезультата.Колонки.Найти("НомерСтроки") <> Неопределено Тогда 
			ТаблицаРезультата.Сортировать("НомерСтроки");
		КонецЕсли;
		
		ТаблицаРезультата.Колонки.Период.Имя = "ПериодСостава";
		
	ИначеЕсли ТаблицаРезультата.Колонки.Найти("Номенклатура") <> Неопределено
		И (ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямПоСкоростиПродаж") <> Неопределено
		ИЛИ ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором") <> Неопределено) Тогда
		
		ИменаПолейПоказателей = Новый Массив;
		Если ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямПоСкоростиПродаж") <> Неопределено Тогда 
			ИменаПолейПоказателей.Добавить("ПланыПродажПоКатегориямПоСкоростиПродаж");
		КонецЕсли;
		Если ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором") <> Неопределено Тогда 
			ИменаПолейПоказателей.Добавить("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором");
		КонецЕсли;
		
		ТаблицаРезультата.Колонки.ПериодСостава.Имя = "Период";
		
		Документы.НормативРаспределенияПлановПродажПоКатегориям.ПересчитатьПоказателиПоНормативамРаспределения(ТаблицаРезультата, ИменаПолейПоказателей);
		
		Если ТаблицаРезультата.Колонки.Найти("НомерСтроки") <> Неопределено Тогда 
			ТаблицаРезультата.Сортировать("НомерСтроки");
		КонецЕсли;
		
		ТаблицаРезультата.Колонки.Период.Имя = "ПериодСостава";
		
	КонецЕсли;
	
	// Рассчитываем количество по формуле
	Если ТаблицаРезультата.Колонки.Найти("Формула") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Добавить("Формула", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если ТаблицаРезультата.Колонки.Найти("ФормулаПредставление") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Добавить("ФормулаПредставление", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если ТаблицаРезультата.Колонки.Найти("ФормулаВычисление") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Добавить("ФормулаВычисление", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Если ТаблицаРезультата.Колонки.Найти(ИмяКолонкиРезультата) = Неопределено Тогда
		ТаблицаРезультата.Колонки.Добавить(ИмяКолонкиРезультата, ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3));
	КонецЕсли; 
	
	Если НЕ Параметры.Свойство("ЗаполнятьСостав") И НЕ Параметры.Свойство("ЗаполнятьОперанды") И Параметры.Свойство("ОбновлятьПоказатели") Тогда
	
		Для каждого СтрокаТЧ Из ЗаполняемаяТЧ Цикл
			
			НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
			ТекущиеДанные = Новый Структура(ИменаОперандов);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0];
				
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, НайденнаяСтрока);
				
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекущиеДанные);
			
		КонецЦикла;
		
		Возврат ЗаполняемаяТЧ;
	
	Иначе
	
		Для каждого СтрокаТЧ Из ТаблицаРезультата Цикл
			
			ТекущиеДанные = Новый Структура(ИменаОперандов);
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаТЧ);
			РезультатВычисления = ПланированиеКлиентСервер.ВычислитьПоФормуле(Параметры.Формула, ТекущиеДанные, 
			                                                             Неопределено, Неопределено,Параметры.ФормулаПредставление);
			
			СтрокаТЧ[ИмяКолонкиРезультата] = РезультатВычисления.Результат;
			СтрокаТЧ.Формула               = Параметры.Формула;
			СтрокаТЧ.ФормулаПредставление  = РезультатВычисления.Представление;
			СтрокаТЧ.ФормулаВычисление     = РезультатВычисления.Вычисление;
			
		КонецЦикла;
		
		Возврат ТаблицаРезультата;
	
	КонецЕсли; 
	
КонецФункции

// Возвращает макеты операндов для данного плана
//
// Возвращаемое значение:
//   Соответствие   - Макеты для операндов
//
Функция МакетыОперандовПлана() Экспорт 

	Макеты = Новый Соответствие;
	
	Макеты.Вставить("СвободныеОстатки", Справочники.СценарииТоварногоПланирования.ПолучитьМакет("СКД_СвободныеОстатки"));
	
	Документы.ПланПродажПоКатегориям.МакетыОперандовПлана(Макеты);
	Документы.ПланПродаж.МакетыОперандовПлана(Макеты);
	Документы.ПланЗакупок.МакетыОперандовПлана(Макеты);
	Документы.ПланСборкиРазборки.МакетыОперандовПлана(Макеты);
	
	Возврат Макеты;

КонецФункции

// Выбирает данные расшифровки
//
// Параметры:
//  МассивИменНаборов	 - Массив	 - Массив наборов данных (источников заполнения показателей)
//  Параметры			 - Структура - Параметры запроса
// 
// Возвращаемое значение:
//  Массив - Данные расшифровки (Документ, Дата документа, Номер документа)
//
Функция ПолучитьРасшифровку(МассивИменНаборов, Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Документ");
	МассивПолей.Добавить("ДатаДокумента");
	МассивПолей.Добавить("НомерДокумента");
	Для каждого Элемент Из МассивИменНаборов Цикл
		МассивПолей.Добавить(Элемент);
	КонецЦикла; 
	
	МассивДанныхРасшифровки = Новый Массив();
	
	Расшифровка = Новый ТаблицаЗначений();
	
	ТипПлана = ПланированиеКлиентСервер.ПолучитьТипПланаПоСсылке(Параметры.Ссылка);
	
	МакетыОперандов = МакетыОперандовПлана();
	
	СКД_Преобразование = ПолучитьСхемуПреобразованияДанных(ТипПлана);
	НаборДанныхОбъединение = СКД_Преобразование.НаборыДанных.Объединение;
	
	ИменаОперандов = "";
	
	Для каждого ИмяОперанда Из МассивИменНаборов Цикл
		
		СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
		
		Если СКД_Операнда = Неопределено 
			ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
			ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		
		ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, НаборДанныхОбъединение, СКД_Операнда, ИменаОперандов);
		
	КонецЦикла; 
	
	УдалитьНаборыНеИспользуемыеДляФормул(СКД_Преобразование);
	
	//Добавляем поля для расшифровки
	НастроитьСхемуДляРасшифровки(СКД_Преобразование, НаборДанныхОбъединение, МассивПолей);
	
	ВыполнитьСхемуПреобразования(СКД_Преобразование, Параметры, Расшифровка);
	
	Если Расшифровка.Количество() > 0
		И Параметры.Свойство("Отбор")
		И Параметры.Отбор.Свойство("Номенклатура")
		И (МассивИменНаборов.Найти("ПланыПродажПоКатегориям") <> Неопределено
		ИЛИ МассивИменНаборов.Найти("ПланыПродажПоКатегориямСОтбором") <> Неопределено
		ИЛИ МассивИменНаборов.Найти("ПланыПродажПоКатегориямПоСкоростиПродаж") <> Неопределено
		ИЛИ МассивИменНаборов.Найти("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором") <> Неопределено)Тогда
		
		Номенклатура = Параметры.Отбор.Номенклатура;
		Если Параметры.Отбор.Свойство("Характеристика") Тогда
			Характеристика = Параметры.Отбор.Характеристика;
		Иначе
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
		
		НормативыПоНоменклатуре = Истина;
		
		Если МассивИменНаборов.Найти("ПланыПродажПоКатегориям") <> Неопределено Тогда
			ИмяКолонкиНорматива = "ПланыПродажПоКатегориям";
		ИначеЕсли МассивИменНаборов.Найти("ПланыПродажПоКатегориямСОтбором") <> Неопределено Тогда
			ИмяКолонкиНорматива = "ПланыПродажПоКатегориямСОтбором";
		ИначеЕсли МассивИменНаборов.Найти("ПланыПродажПоКатегориямПоСкоростиПродаж") <> Неопределено Тогда
			ИмяКолонкиНорматива = "ПланыПродажПоКатегориямПоСкоростиПродаж";
			НормативыПоНоменклатуре = Ложь;
		Иначе
			ИмяКолонкиНорматива = "ПланыПродажПоКатегориямПоСкоростиПродажСОтбором";
			НормативыПоНоменклатуре = Ложь;
		КонецЕсли; 
		
		Нормативы = Документы.НормативРаспределенияПлановПродажПоКатегориям.ПолучитьНормативыРаспределения(
			Параметры.НачалоПериодаСмещения,
			Номенклатура, 
			Характеристика,
			НормативыПоНоменклатуре);
		
		Если Нормативы <> Неопределено И Нормативы.Количество() > 0 Тогда
			// Замена типов колонки
			Типы = Расшифровка.Колонки.Документ.ТипЗначения.Типы();
			Типы.Добавить(Тип("ДокументСсылка.НормативРаспределенияПлановПродажПоКатегориям"));
			Расшифровка.Колонки.Документ.Имя = "ДокументСтарый";
			Расшифровка.Колонки.Добавить("Документ", Новый ОписаниеТипов(Типы));
			Для каждого СтрокаРасшифровки Из Расшифровка Цикл
				СтрокаРасшифровки.Документ = СтрокаРасшифровки.ДокументСтарый;
			КонецЦикла; 
			Расшифровка.Колонки.Удалить(Расшифровка.Колонки.ДокументСтарый);
			
			Для каждого Норматив Из Нормативы Цикл
				
				НоваяСтрока = Расшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Норматив);
				
				НоваяСтрока[ИмяКолонкиНорматива] = Норматив.ДоляРаспределения
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Для каждого СтрокаРасшифровки Из Расшифровка Цикл
		СтруктураДанныхРасшифровки = Новый Структура();
		Для каждого Колонка Из Расшифровка.Колонки Цикл
			СтруктураДанныхРасшифровки.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураДанныхРасшифровки, СтрокаРасшифровки);
		МассивДанныхРасшифровки.Добавить(СтруктураДанныхРасшифровки);
	КонецЦикла; 
	
	Возврат МассивДанныхРасшифровки;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Скопирована из ОбщегоНазначенияКлиентСервер, отличается тем, что в последнем периоде тоже округляет данные.
// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  МассивКоэффициентов - Массив - коэффициенты распределения;
//  Точность - Число - точность округления при распределении. Необязателен.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
//           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьСуммуПропорциональноКоэффициентам(Знач РаспределяемаяСумма, Коэффициенты, Знач Точность = 2) Экспорт
	
	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * Коэффициенты[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом.
	Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
		Результат[ИндексМаксимальногоКоэффициента] = Окр(Результат[ИндексМаксимальногоКоэффициента] + РаспределяемаяСумма - РаспределеннаяСумма, Точность, 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу данных рассчитанных для замещения
//
// Параметры:
//  Параметры  - Структура - Настройки расчета
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица с данными рассчитанными по формуле
//
Функция ЗаполнитьДляЗамещения(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяМенеджера = СтрЗаменить(Параметры.КлючОбщихНастроек, "Документ.", "");
	
	Запрос = Новый Запрос;
	Запрос = Документы[ИмяМенеджера].ЗапросЗамещения(Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Получает валюту сценария планирования.
//
// Параметры:
//	СценарийПланирования - СправочникСсылка.СценарииТоварногоПланирования - сценарий планирования
// Возвращаемое значение:
//  СправочникСсылка.Валюты - валюта сценария планирования.
Функция ВалютаСценария(СценарийПланирования) Экспорт
	Возврат СценарийПланирования.Валюта;
КонецФункции

// Подсистема БюджетированиеИПланирование в УТ имеет имя Планирование.
// Функция возвращает подсистему в зависимости от текущего решения.
// 
// Возвращаемое значение:
//  ОбъектМетаданных.Подсистема - подсистема планирование.
//
Функция ПодсистемаПланирование() Экспорт
	
		
		Результат = Метаданные.Подсистемы.Найти("Планирование");
		
	
	Возврат Результат;
	
КонецФункции
	

#КонецОбласти

#КонецОбласти

#Область ПроцедурыЗаписиДвиженийВРегистр

// Заполняет движения документа "План закупок"
//
Процедура ОтразитьПланЗакупок(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыЗакупок;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПланыЗакупок.Записывать = Истина;
	Движения.ПланыЗакупок.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения документа "План закупок"
//
Процедура ОтразитьПланыОплатПоставщикам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыОплатПоставщикам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПланыОплатПоставщикам.Записывать = Истина;
	Движения.ПланыОплатПоставщикам.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения документа "План продаж"
//
Процедура ОтразитьПланыПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыПродаж;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПланыПродаж.Записывать = Истина;
	Движения.ПланыПродаж.Загрузить(Таблица);

КонецПроцедуры

// Заполняет движения документа "План продаж"
//
Процедура ОтразитьПланыОплатКлиентов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыОплатКлиентов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПланыОплатКлиентов.Записывать = Истина;
	Движения.ПланыОплатКлиентов.Загрузить(Таблица);

КонецПроцедуры

// Заполняет движения документа "План продаж по категориям"
//
Процедура ОтразитьПланПродажПоКатегориям(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыПродажПоКатегориям;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПланыПродажПоКатегориям.Записывать = Истина;
	Движения.ПланыПродажПоКатегориям.Загрузить(Таблица);

КонецПроцедуры


// Заполняет движения документа "План сборки (разборки)"
//
Процедура ОтразитьПланыСборкиРазборки(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыСборкиРазборки;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПланыСборкиРазборки.Записывать = Истина;
	Движения.ПланыСборкиРазборки.Загрузить(Таблица);

КонецПроцедуры

// Заполняет движения документа "План сборки (разборки)"
//
Процедура ОтразитьПланыКомплектующих(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаКомплектов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыСборкиРазборкиДляРазузлования;
	
	Если Отказ Или ТаблицаКомплектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКомплектующих = ТаблицаКомплектов.СкопироватьКолонки();
	
	Для каждого ЭлементКомплект Из ТаблицаКомплектов Цикл
		
		ДанныеПоНоменклатуре = Новый Структура("Номенклатура, Характеристика, Количество, ВариантКомплектации");
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ЭлементКомплект);
		
		ДанныеВариантаКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(ДанныеПоНоменклатуре.ВариантКомплектации,,ДанныеПоНоменклатуре.Количество);
		
		Для каждого ЭлементКомплектующее Из ДанныеВариантаКомплектации Цикл
			
			НоваяСтрока = ТаблицаКомплектующих.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКомплектующее,"Номенклатура,Характеристика,Количество");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКомплект, "Период, Статус, Сценарий, ХозяйственнаяОперация,ВариантКомплектации,ПланСборкиРазборки,Склад,Назначение,ДатаВыпуска");
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Движения.ПланыПотребленияКомплектующих.Записывать = Истина;
	Движения.ПланыПотребленияКомплектующих.Загрузить(ТаблицаКомплектующих);

КонецПроцедуры

// Заполняет движения документа "Нормативы распределения"
//
Процедура ОтразитьНормативыРаспределенияПлановПродажПоКатегориям(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНормативыРаспределенияПлановПродажПоКатегориям;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.НормативыРаспределенияПлановПродажПоКатегориям.Записывать = Истина;
	Движения.НормативыРаспределенияПлановПродажПоКатегориям.Загрузить(Таблица);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗамещенияПланов

// Процедура запускает фоновое проведение замещенных планов
//
Процедура ЗапускВыполненияФоновогоПроведенияПлана() Экспорт
	
	Ключ = "ЗамещениеПланов";
		
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Замещение/отмена замещения планов'");
	
	ИмяЭкспортнойПроцедуры = "Планирование.ВыполнитьФоновоеПроведенияПлана";
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Новый Структура("КоличествоОшибок", 0));
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Процедура выполняет фоновое проведение замещенных планов
//
// Параметры:
//  ПараметрыЗадания  - Структура - структура хранит количество ошибок, если ошибок будет больше определенного лимита, то задание завершится
//
Процедура ВыполнитьФоновоеПроведенияПлана(ПараметрыЗадания) Экспорт
	
	Если ПараметрыЗадания.Свойство("КоличествоОшибок") Тогда
		
		МаксимальноеКоличествоОшибок = 3;
		
		Если ПараметрыЗадания.КоличествоОшибок >= МаксимальноеКоличествоОшибок Тогда
			
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			
			ТекстСообщения = НСтр("ru = 'Фоновое замещение/отмена замещения планов остановлена. Количество неудачных попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое замещение/отмена замещения плана'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗамещениеПланов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗамещениеПланов.ЗамещенныйПлан
		|ИЗ
		|	РегистрСведений.ЗамещениеПланов КАК ЗамещениеПланов
		|ГДЕ
		|	(ЗамещениеПланов.КЗамещению
		|			ИЛИ ЗамещениеПланов.КОтменеЗамещения)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить блокировку регистра ""Замещение планов"" фоновым заданием. Количество попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое замещение плана'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
				
		ВыполнитьФоновоеПроведенияПлана(ПараметрыЗадания);
		Возврат;
	КонецПопытки;
	
	ЗамещениеВыполнено = Истина;
	
	Пока Выборка.Следующий() Цикл
		ПараметрыЗадания.Вставить("ЗамещенныйПлан", Выборка.ЗамещенныйПлан);
		ВыполнитьПроведенияПлана(ПараметрыЗадания);
		ЗамещениеВыполнено = Ложь;
	КонецЦикла;
	
	Если Не ЗамещениеВыполнено Тогда
		ВыполнитьФоновоеПроведенияПлана(ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьПроведенияПлана(ПараметрыЗадания)
	
	ЗамещенныйПлан = ПараметрыЗадания.ЗамещенныйПлан;
	
	Попытка
		ЗамещенныйПланОбъект = ЗамещенныйПлан.ПолучитьОбъект();
		ЗамещенныйПланОбъект.Заблокировать();
		
		Если ЗамещенныйПланОбъект.Проведен Тогда
			ЗамещенныйПланОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			ЗамещенныйПланОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Возврат Истина;
	Исключение
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить замещение/отмену замещения плана %ЗамещенныйПлан% фоновым заданием по причине: %Причина%. Количество попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗамещенныйПлан%", ЗамещенныйПлан);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое замещение плана'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				ЗамещенныйПлан.Метаданные(),
				ЗамещенныйПлан,
				ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьЗамещенныеПериоды(Параметры, ИмяДокумента , ИмяРеквизитаНачалоПериода = "НачалоПериода") Экспорт
	
	ПериодыПлана = Новый ТаблицаЗначений();
	ПериодыПлана.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ДобавлениеДатаНачала = Параметры[ИмяРеквизитаНачалоПериода];
	Пока ДобавлениеДатаНачала < КонецДня(Параметры.ОкончаниеПериода) Цикл
		НоваяСтрока = ПериодыПлана.Добавить();
		НоваяСтрока.Период = ДобавлениеДатаНачала;
		
		ДатуОкончанияПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ДобавлениеДатаНачала, Параметры.Периодичность);
		ДобавлениеДатаНачала = ДатуОкончанияПериода+1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Периоды.Период
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	&Периоды КАК Периоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланЗамещающий.Ссылка,
	|	ПланЗамещающий.ВидПлана,
	|	ВЫБОР
	|		КОГДА &НачалоПериода > ПланЗамещающий.НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ПланЗамещающий.НачалоПериода
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА &ОкончаниеПериода < ПланЗамещающий.ОкончаниеПериода
	|			ТОГДА &ОкончаниеПериода
	|		ИНАЧЕ ПланЗамещающий.ОкончаниеПериода
	|	КОНЕЦ КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ЗамещаемыеПланы
	|ИЗ
	|	Документ.ПланПродаж КАК ПланЗамещающий
	|ГДЕ
	|	ПланЗамещающий.ОкончаниеПериода >= &НачалоПериода
	|	И ПланЗамещающий.НачалоПериода <= &ОкончаниеПериода
	|	И ПланЗамещающий.Ссылка <> &Ссылка
	|	И ПланЗамещающий.Проведен
	|	И ПланЗамещающий.ВидПлана = &ВидПлана
	|	И ПланЗамещающий.Статус.Порядок >= &СтатусИндекс
	|	И ПланЗамещающий.Дата > &Дата
	|	И &ТекстЗапросаОтборПодразделение
	|	И &ТекстЗапросаОтборПартнер
	|	И &ТекстЗапросаОтборСоглашение
	|	И &ТекстЗапросаОтборСклад
	|	И &ТекстЗапросаОтборФорматМагазина
	|	И &ТекстЗапросаОтборМенеджер
	|	И &ТекстЗапросаОтборХозяйственнаяОперация
	|	И &ТекстЗапросаОтборНазначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Период КАК ЗамещенныйПериод
	|ИЗ
	|	ЗамещаемыеПланы КАК ЗамещаемыеПланы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Периоды КАК Периоды
	|		ПО ЗамещаемыеПланы.НачалоПериода <= Периоды.Период
	|			И ЗамещаемыеПланы.ОкончаниеПериода >= Периоды.Период";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		".ПланПродаж",
		"."+ИмяДокумента);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"НачалоПериода",
		""+ИмяРеквизитаНачалоПериода);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборПодразделение",
		?(Параметры.Свойство("Подразделение"),"ПланЗамещающий.Подразделение = &Подразделение","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборПартнер",
		?(Параметры.Свойство("Партнер"),"ПланЗамещающий.Партнер = &Партнер","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборСоглашение",
		?(Параметры.Свойство("Соглашение"),"ПланЗамещающий.Соглашение = &Соглашение","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборСклад",
		?(Параметры.Свойство("Склад"),"ПланЗамещающий.Склад = &Склад","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборФорматМагазина",
		?(Параметры.Свойство("ФорматМагазина"),"ПланЗамещающий.ФорматМагазина = &ФорматМагазина","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборМенеджер",
		?(Параметры.Свойство("Менеджер"),"ПланЗамещающий.Менеджер = &Менеджер","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборНазначение",
		?(Параметры.Свойство("Назначение"),"ПланЗамещающий.Назначение = &Назначение","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборХозяйственнаяОперация",
		?(Параметры.Свойство("ХозяйственнаяОперация"),"ПланЗамещающий.ХозяйственнаяОперация = &ХозяйственнаяОперация","Истина"));
		
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	Запрос.УстановитьПараметр("ВидПлана", Параметры.ВидПлана);
	Запрос.УстановитьПараметр("СтатусИндекс", Перечисления.СтатусыПланов.Индекс(Параметры.Статус));
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	Запрос.УстановитьПараметр(ИмяРеквизитаНачалоПериода, Параметры[ИмяРеквизитаНачалоПериода]);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Параметры.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Периодичность", Параметры.Периодичность);
	Запрос.УстановитьПараметр("Периоды", ПериодыПлана);
	
	Если Параметры.Свойство("Подразделение") Тогда
		Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	КонецЕсли;
	Если Параметры.Свойство("Партнер") Тогда
		Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
	КонецЕсли;
	Если Параметры.Свойство("Соглашение") Тогда
		Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
	КонецЕсли;
	Если Параметры.Свойство("Склад") Тогда
		Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	КонецЕсли;
	Если Параметры.Свойство("ФорматМагазина") Тогда
		Запрос.УстановитьПараметр("ФорматМагазина", Параметры.ФорматМагазина);
	КонецЕсли;
	Если Параметры.Свойство("Менеджер") Тогда
		Запрос.УстановитьПараметр("Менеджер", Параметры.Менеджер);
	КонецЕсли;
	Если Параметры.Свойство("Назначение") Тогда
		Запрос.УстановитьПараметр("Назначение", Параметры.Назначение);
	КонецЕсли;
	Если Параметры.Свойство("ХозяйственнаяОперация") Тогда
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.ХозяйственнаяОперация);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//Процедура обновляет гиперссылку переходу к замещенным и замещающим планам
//	
// Параметры:
//	Форма - УправляемаяФорма - форма плана.
//
Процедура ОбновитьГиперссылкуЗамещение(Форма) Экспорт
	
	Объект = Форма.Объект;
	Запрос = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ЗапросЗамещеннныеИЗамещающиеПланы(Объект);
	
	ЗапросПакет = Запрос.ВыполнитьПакет();
	ТЗЗамещающиеПланы = ЗапросПакет[0].Выгрузить();
	ТЗЗамещенныеПланы = ЗапросПакет[1].Выгрузить();
	
	МассивСтроки = Новый Массив;
	Если ТЗЗамещенныеПланы.Количество() > 0 Тогда
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Замещенные ('") + ТЗЗамещенныеПланы.Количество() + ")",,ЦветаСтиля.ЦветТекстаУспех,,"Замещенные"));
	КонецЕсли;
	Если ТЗЗамещающиеПланы.Количество() > 0 Тогда
		Если МассивСтроки.Количество()>0 Тогда
			МассивСтроки.Добавить(", ");
		КонецЕсли;
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Замещающие ('") + ТЗЗамещающиеПланы.Количество() + ")",,ЦветаСтиля.ЦветТекстаПроблема,,"Замещающие"));
	КонецЕсли;
	Если МассивСтроки.Количество()= 0 Тогда
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Без замещения'"),,ЦветаСтиля.ЦветГиперссылки));
	КонецЕсли;
	Форма.ЗамещениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(МассивСтроки);
	
КонецПроцедуры

// Возвращает признак требуется ли для плана сделать замещение/отмену замещения.
//
// Параметры:
//	Ссылка - ДокументСсылка.ПланПродаж, ДокументСсылка.ПланПродажПоКатегориям, ДокументСсылка.ПланПроизводства, ДокументСсылка.ПланЗакупок, ДокументСсылка.ПланСборкиРазборки - ссылка на проверяемый план
//
// Возвращаемое значение:
//	Булево - возвращает Истина, если для плана требуется выполнить замещение/отмену замещения.
//
Функция КонтрольЗамещенияПлана(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗамещениеПланов.ЗамещающийПлан
	|ИЗ
	|	РегистрСведений.ЗамещениеПланов КАК ЗамещениеПланов
	|ГДЕ
	|	ЗамещениеПланов.ЗамещенныйПлан = &Ссылка
	|	И (ЗамещениеПланов.КЗамещению
	|			ИЛИ ЗамещениеПланов.КОтменеЗамещения)
	|	И НЕ(ЗамещениеПланов.КЗамещению
	|				И ЗамещениеПланов.КОтменеЗамещения)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает признак требуется ли выполнить замещение/отмену замещения планов.
//
// Возвращаемое значение:
//	Булево - возвращает Истина, если для планов требуется выполнить замещение/отмену замещения.
//
Процедура КонтрольЗамещенияПланов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗамещениеПланов.ЗамещенныйПлан КАК ЗамещенныйПлан
	|ИЗ
	|	РегистрСведений.ЗамещениеПланов КАК ЗамещениеПланов
	|ГДЕ
	|	(ЗамещениеПланов.КЗамещению
	|			ИЛИ ЗамещениеПланов.КОтменеЗамещения)
	|	И НЕ(ЗамещениеПланов.КЗамещению
	|				И ЗамещениеПланов.КОтменеЗамещения)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Планирование.ЗапускВыполненияФоновогоПроведенияПлана();
	КонецЕсли;
		
КонецПроцедуры

// Для переданных ссылок производится отмена проведения в порядке их даты.
//
// Параметры:
//  МассивСсылок - 	Массив, ДокументСсылка.ПланПродаж, ДокументСсылка.ПланПродажПоКатегориям, ДокументСсылка.ПланПроизводства, ДокументСсылка.ПланЗакупок, ДокументСсылка.ПланСборкиРазборки - массив ссылок на планы
//  ИмяДокумента - Строка - имя документа плана 
// 
Процедура ОтменитьПроведениеПланов(МассивСсылок, ИмяДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланПродаж.Ссылка,
	|	ПланПродаж.ВидПлана КАК ВидПлана,
	|	ПРЕДСТАВЛЕНИЕ(ПланПродаж.Ссылка) КАК Представление,
	|	ПланПродаж.Дата КАК Дата
	|ИЗ
	|	Документ.ПланПродаж КАК ПланПродаж
	|ГДЕ
	|	ПланПродаж.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПлана,
	|	Дата";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		".ПланПродаж",
		"."+ИмяДокумента);
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	ШаблонОшибки = НСтр("ru='Не удалось выполнить отмену проведения документа %Документ%. %ОписаниеОшибки%'");
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", Выборка.Представление);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыФормыНастройкиПравилаЗаполнения

// Функция проверяет корректность настроек в правиле заполнения
//
// Параметры:
//  ПравилоЗаполнения               - ТаблицаЗначений - Таблица с источниками и настройками правила
//  АдресСхемыПреобразованияДанных  - Строка - Адрес временного хранилища данных со схемой преобразования данных
//  ВидПлана                        - СправочникСсылка.ВидыПланов - Ссылка на вид плана, для определения полей схемы
//  ИмяРеквизитаПравила             - Строка - Имя реквизита для которого устанавливать сообщение ошибки
//
Функция ПроверитьПравилоЗаполнения(Знач ПравилоЗаполнения, Знач АдресСхемыПреобразованияДанных, Знач ВидПлана = Неопределено, Знач ИмяРеквизитаПравила = "", ЕстьОтборПоРесурсам) Экспорт 
	
	ПравилоКорректно = Истина;
	
	ПоляСхемы = ПолучитьПоляСхемыПреобразованияДанных(АдресСхемыПреобразованияДанных, ВидПлана);
	
	СоответствиеПолямДокумента = Истина;
	
	// Проверка источников строк (объединения)
	СоответствиеПолямИсточников = Истина;
	ПоляЭталонногоИсточника = Новый Структура;
	ЕстьПоляЭталонногоИсточника = Ложь;
		
	НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, ТипЭлемента", Ложь, 0));
	
	ЕстьПравилаЗаполнения = Ложь;
	Для каждого ЭлементПравила Из НайденныеСтроки Цикл
		
		Если НЕ ЭлементПравила.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементПравила.Источник, 
			"ИмяШаблонаСКД, СхемаКомпоновкиДанных");
		
		Если Реквизиты.СхемаКомпоновкиДанных = Неопределено Тогда
			ПравилоКорректно = Ложь;
			ТекстОшибки = НСтр("ru='Источник заполнения не заполнен.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.ИмяШаблонаСКД) Тогда
			СхемаКомпоновкиДанных = Справочники.ИсточникиДанныхПланирования.СхемаКомпоновкиПоИмениШаблона(Реквизиты.ИмяШаблонаСКД);
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
			КонецЕсли; 
		Иначе
			СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
		КонецЕсли;
		ПользовательскиеНастройки = ЭлементПравила.ПользовательскиеНастройки.Получить();
		
		// Загрузка настроек
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Если ПользовательскиеНастройки <> Неопределено Тогда
			
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
		КонецЕсли;
		
		КомпоновщикПоляГруппировки = ПланированиеКлиентСервер.ПолучитьПоляГруппировок(КомпоновщикНастроек);
		
		КомпоновщикПоляВыбора = ПланированиеКлиентСервер.ПолучитьПоляВыбора(КомпоновщикНастроек);
		
		Если КомпоновщикПоляГруппировки.Количество() = 0 И КомпоновщикПоляВыбора.Количество() = 0 Тогда
			СоответствиеПолямДокумента = Ложь;
		КонецЕсли;
		
		ПоляИсточника = Новый Массив;
		Для каждого Группировка Из КомпоновщикПоляГруппировки Цикл
			Если НЕ Группировка.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(Группировка.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(Группировка.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(Группировка.Поле));
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого ВыбранноеПоле Из КомпоновщикПоляВыбора Цикл
			Если НЕ ВыбранноеПоле.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(ВыбранноеПоле.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПоляЭталонногоИсточника И ПоляИсточника.Количество() <> ПоляЭталонногоИсточника.Количество() Тогда
			СоответствиеПолямИсточников = Ложь;
		КонецЕсли; 
		
		ЕстьПоляЭталонногоИсточника = Истина;
		
		ЕстьПравилаЗаполнения = Истина;
		
		Если НЕ СоответствиеПолямДокумента И НЕ СоответствиеПолямИсточников Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если Не ЕстьПравилаЗаполнения Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru='Не заполнены источники заполнения количества.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Если НЕ СоответствиеПолямДокумента ИЛИ НЕ СоответствиеПолямИсточников Тогда
		ПравилоКорректно = Ложь;
	КонецЕсли;
		
	ТекстОшибки = НСтр("ru='Список полей источников заполнения количества различается. Отредактируйте группировки и выбранные поля.'");
	Если НЕ СоответствиеПолямИсточников Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли; 
	
	// Проверка источников колонок (присоединения)
	СоответствиеПолямИсточников = Истина;
	ПоляЭталонногоИсточника = Новый Структура;
	ЕстьПоляЭталонногоИсточника = Ложь;
	
	НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, ТипЭлемента", Истина, 0));
	Для каждого ЭлементПравила Из НайденныеСтроки Цикл
		
		Если НЕ ЭлементПравила.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементПравила.Источник, 
			"ИмяШаблонаСКД, СхемаКомпоновкиДанных");
		
		Если Реквизиты.СхемаКомпоновкиДанных = Неопределено Тогда
			ПравилоКорректно = Ложь;
			ТекстОшибки = НСтр("ru='Источник заполнения не заполнен.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.ИмяШаблонаСКД) Тогда
			СхемаКомпоновкиДанных = Справочники.ИсточникиДанныхПланирования.СхемаКомпоновкиПоИмениШаблона(Реквизиты.ИмяШаблонаСКД);
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
			КонецЕсли; 
		Иначе
			СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
		КонецЕсли;
		ПользовательскиеНастройки = ЭлементПравила.ПользовательскиеНастройки.Получить();
		
		// Загрузка настроек
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Если ПользовательскиеНастройки <> Неопределено Тогда
			
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
		КонецЕсли;
		
		КомпоновщикПоляГруппировки = ПланированиеКлиентСервер.ПолучитьПоляГруппировок(КомпоновщикНастроек);
		
		КомпоновщикПоляВыбора = ПланированиеКлиентСервер.ПолучитьПоляВыбора(КомпоновщикНастроек);
		
		Если КомпоновщикПоляГруппировки.Количество() = 0 И КомпоновщикПоляВыбора.Количество() = 0 Тогда
			СоответствиеПолямДокумента = Ложь;
		КонецЕсли;
		
		ПоляИсточника = Новый Массив;
		Для каждого Группировка Из КомпоновщикПоляГруппировки Цикл
			Если НЕ Группировка.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(Группировка.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(Группировка.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(Группировка.Поле));
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого ВыбранноеПоле Из КомпоновщикПоляВыбора Цикл
			Если НЕ ВыбранноеПоле.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(ВыбранноеПоле.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПоляЭталонногоИсточника И ПоляИсточника.Количество() <> ПоляЭталонногоИсточника.Количество() Тогда
			СоответствиеПолямИсточников = Ложь;
		КонецЕсли; 
		
		ЕстьПоляЭталонногоИсточника = Истина;
		
		Если НЕ СоответствиеПолямДокумента И НЕ СоответствиеПолямИсточников Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ СоответствиеПолямДокумента ИЛИ НЕ СоответствиеПолямИсточников Тогда
		ПравилоКорректно = Ложь;
	КонецЕсли;
		
	ТекстОшибки = НСтр("ru='Состав полей, возвращаемых источниками заполнения цены, различается. Отредактируйте ""Группировки"" и ""Выбранные поля"", чтобы каждый источник возвращал одинаковый состав полей.'");
	Если НЕ СоответствиеПолямИсточников Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Состав полей, возвращаемых источниками, не совпадает с данными документа. Отредактируйте ""Группировки"" и ""Выбранные поля"", исключив ненужные поля.'");
	Если НЕ СоответствиеПолямДокумента Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли; 
	
	Если ЕстьОтборПоРесурсам Тогда
		КоличествоИсточниковЗаполненияПервогоУровня = ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель", 0)).Количество();
		Если КоличествоИсточниковЗаполненияПервогоУровня > 1 Тогда
			ПравилоКорректно = Ложь;
			ТекстОшибки = НСтр("ru='Установлены отборы на поля ресурсов(""Количество"", ""Цена"", ""Сумма""), для корректного применения отбора источники должны быть сгруппированы на первом уровне.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПравилоКорректно;

КонецФункции 

// Кэширует текущие значения настроек планирования и формирует информационные надписи
//
// Параметры:
//  Форма  - УправляемаяФорма - форма, для которой выполняются действия
//
Процедура СохранитьНовыйПериод(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	//Сохранение значений из полей периода
	Форма.СценарийДоИзменения           = Объект.Сценарий;
	Форма.ВидПланаДоИзменения           = Объект.ВидПлана;
	Форма.ПериодичностьДоИзменения      = Объект.Периодичность;
	Форма.НачалоПериодаДоИзменения      = Объект.НачалоПериода;
	Форма.ОкончаниеПериодаДоИзменения   = Объект.ОкончаниеПериода;
	Форма.ПланироватьПоСуммеДоИзменения = Объект.ПланироватьПоСумме;
	
	Форма.НадписьПериодичностьВалюта = "";
	
	Если Не Объект.Периодичность.Пустая() Тогда
		Форма.НадписьПериодичностьВалюта = Форма.НадписьПериодичностьВалюта +НСтр("ru = 'Периодичность'") + ": " + Строка(Объект.Периодичность);
	КонецЕсли;
	Если Объект.ПланироватьПоСумме Тогда
		Форма.НадписьПериодичностьВалюта = Форма.НадписьПериодичностьВалюта + ", " + НСтр("ru = 'Валюта'") + ": " + Строка(Объект.Валюта);
	КонецЕсли; 
	
КонецПроцедуры

// Функция получает массив полей схемы преобразования данных в документ плана
//
// Параметры:
//  АдресСхемыПреобразованияДанных  - Строка - Адрес временного хранилища, в котором сохранена схема 
//                 преобразования данных в документ
//  ВидПлана  - СправочникСсылка.ВидыПланов - Ссылка на вид плана по которому заполняется документ
//
// Возвращаемое значение:
//   Массив   - Список полей, которые можно использовать для заполнения документа
//
Функция ПолучитьПоляСхемыПреобразованияДанных(Знач АдресСхемыПреобразованияДанных, Знач ВидПлана = Неопределено) Экспорт 

	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыПреобразованияДанных);
	
	ОтключитьНеиспользуемыеПоляСхемыПреобразования(СхемаКомпоновки, ВидПлана);
	
	ПоляСхемы = Новый Массив;
	Если СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура.Количество() > 0 Тогда
		ПоляГруппировки = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Иначе
		ПоляГруппировки = СхемаКомпоновки.ВариантыНастроек[0].Настройки.ДоступныеПоляГруппировок.Элементы;
	КонецЕсли; 
	
	Для каждого Группировка Из ПоляГруппировки Цикл
		
		Если Группировка.Использование И ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
			ПоляСхемы.Добавить(Строка(Группировка.Поле));
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для каждого ВыбранноеПоле Из СхемаКомпоновки.ВариантыНастроек[0].Настройки.Выбор.Элементы Цикл
		
		Если ВыбранноеПоле.Использование И ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
			ПоляСхемы.Добавить(Строка(ВыбранноеПоле.Поле));
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ПоляСхемы;
	
КонецФункции 

// Процедура отключает неиспользуемые поля по виду плана
//
// Параметры:
//  СКДПреобразования  - СхемаКомпоновкиДанных - Схема в которой необходимо отключить поля
//  ВидПлана  - СправочинкСсылка.ВидыПланов - Вид плана по которому заполняется документ
//
Процедура ОтключитьНеиспользуемыеПоляСхемыПреобразования(СКД_Преобразование, Знач ВидПлана) 

	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеПоля = Новый Массив;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Характеристика"));
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "Владелец, ТипПлана, ЗаполнятьПартнераВТЧ, ЗаполнятьСоглашение, ЗаполнятьСоглашениеВТЧ, ЗаполнятьСкладВТЧ, ЗаполнятьНазначениеВТЧ");
	Если ЗначенияРеквизитов.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям
		И ЗначениеЗаполнено(ЗначенияРеквизитов.Владелец) Тогда
		ИспользоватьРасчетПоСкоростиПродаж = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.Владелец, "ИспользоватьРасчетПоСкоростиПродаж");
		Если НЕ ИспользоватьРасчетПоСкоростиПродаж = Истина Тогда
			УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("РейтингПродаж"));
		КонецЕсли; 
	КонецЕсли;
	Если НЕ ЗначенияРеквизитов.ЗаполнятьПартнераВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Партнер"));
	КонецЕсли; 
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСоглашениеВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Соглашение"));
	КонецЕсли;
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСоглашениеВТЧ И НЕ ЗначенияРеквизитов.ЗаполнятьСоглашение Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("ВидЦеныПоставщика"));
	КонецЕсли;
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьНазначениеВТЧ 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Назначение"));
	КонецЕсли;
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСкладВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Склад"));
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Склад.Календарь"));
	КонецЕсли;
	
	Если УдаляемыеПоля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура.Количество() > 0 Тогда
		ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Иначе
		ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.ДоступныеПоляГруппировок.Элементы;
	КонецЕсли; 
	
	Для каждого Группировка Из ПоляГруппировки Цикл
		
		Если УдаляемыеПоля.Найти(Группировка.Поле) <> Неопределено Тогда
			Группировка.Использование = Ложь;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого ВыбранноеПоле Из СКД_Преобразование.ВариантыНастроек[0].Настройки.Выбор.Элементы Цикл
		
		Если УдаляемыеПоля.Найти(ВыбранноеПоле.Поле) <> Неопределено Тогда
			ВыбранноеПоле.Использование = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборТаблицаСостава = СКД_Преобразование.НаборыДанных.Найти("ТаблицаСостава");
	Если НаборТаблицаСостава <> Неопределено Тогда
	
		Для каждого Поле Из УдаляемыеПоля Цикл
		
			НайденноеПоле = НаборТаблицаСостава.Поля.Найти(Строка(Поле));
			Если НайденноеПоле <> Неопределено Тогда
			
				НаборТаблицаСостава.Поля.Удалить(НайденноеПоле);
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
	Пока  Индекс >= 0 Цикл
		Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
		Индекс = Индекс - 1;
		
		Если УдаляемыеПоля.Найти(Новый ПолеКомпоновкиДанных(Связь.ВыражениеИсточник))  <> Неопределено
			ИЛИ УдаляемыеПоля.Найти(Новый ПолеКомпоновкиДанных(Связь.ВыражениеПриемник))  <> Неопределено Тогда
			
			СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти

#Область Отчет_СбалансированностьПланов

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура СбалансированностьПлановПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт

	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючТекущегоВарианта", ЭтаФорма.КлючТекущегоВарианта);
	
	// Изменение настроек по функциональным опциям
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗакупок") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыЗакупки");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыПродаж");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство")
		Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыПроизводства");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыСборки");
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыКомплектующих");
	КонецЕсли;
	
	НовыеНастройкиКД = КомпоновщикНастроек.Настройки;

КонецПроцедуры

// Вызывается в обработчике "ПриЗагрузкеПользовательскихНастроекНаСервере"
//   формы отчета до выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойПользовательскихНастроекНаСервере
//
Процедура СбалансированностьПлановПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		КонтекстныеНастройки = ПолучитьПользовательскиеНастройкиСОтборомПоДокументам(Параметры.ПараметрКоманды);
		
		Если КонтекстныеНастройки.Свойство("Номенклатура") Тогда
			
			МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор, "Номенклатура");
			Если МассивЭлементов.Количество() = 0 Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					КомпоновщикНастроек,
					"Номенклатура",
					КонтекстныеНастройки.Номенклатура,
					ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, 
					Истина, 
					Новый Структура("ВПользовательскиеНастройки", Истина));
			Иначе
				
				ЭлементОтбора = МассивЭлементов[0];
				ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
				ЭлементПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
				Если ЭлементПользовательскихНастроек = Неопределено Тогда
					КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
						КомпоновщикНастроек,
						"Номенклатура",
						КонтекстныеНастройки.Номенклатура,
						ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, 
						Истина, 
						Новый Структура("ВПользовательскиеНастройки", Истина));
				Иначе
					ЭлементПользовательскихНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
					ЭлементПользовательскихНастроек.ПравоеЗначение = Новый СписокЗначений;
					ЭлементПользовательскихНастроек.ПравоеЗначение.ЗагрузитьЗначения(КонтекстныеНастройки.Номенклатура);
					ЭлементПользовательскихНастроек.Использование = Истина;
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли; 
		
		Если КонтекстныеНастройки.Свойство("Период") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки,"Период",КонтекстныеНастройки.Период);
		КонецЕсли; 
		Если КонтекстныеНастройки.Свойство("Сценарий") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки,"Сценарий",КонтекстныеНастройки.Сценарий);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
	
		ПараметрГруппироватьПоСкладам = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ГруппироватьПоСкладам");
		Если ПараметрГруппироватьПоСкладам <> Неопределено Тогда
			ПараметрГруппироватьПоСкладам.Значение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение настроек по функциональным опциям
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗакупок") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыЗакупки");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыПродаж");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство")
		Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыПроизводства");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыСборки");
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыКомплектующих");
	КонецЕсли;
	
	НовыеПользовательскиеНастройкиКД = КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецПроцедуры

// Вызывается в обработчике "ПриКомпоновкеРезультата" при формировании отчета
//
Процедура СбалансированностьПлановПриКомпоновкеРезультата(КомпоновщикНастроек, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт 

	ТолькоПревышениеОтклонения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ТолькоПревышениеОтклонения");
	ТолькоМеньшеОтклонения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ТолькоМеньшеОтклонения");
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 Тогда
		
		Отбор = КомпоновщикНастроек.Настройки.Структура[0].Отбор;
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор, ,"ТолькоПревышениеОтклонения");
		Если ТолькоПревышениеОтклонения <> Неопределено И МассивЭлементов.Количество() > 0 Тогда
			МассивЭлементов[0].Использование = ТолькоПревышениеОтклонения.Использование;
		КонецЕсли;
		
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор, ,"ТолькоМеньшеОтклонения");
		Если ТолькоМеньшеОтклонения <> Неопределено И МассивЭлементов.Количество() > 0 Тогда
			МассивЭлементов[0].Использование = ТолькоМеньшеОтклонения.Использование;
		КонецЕсли;
	
	КонецЕсли; 
	
	ПланыПродаж        = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыПродаж");
	ПланыЗакупок       = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыЗакупок");
	ПланыКомплектующих = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыКомплектующих");
	ПланыМатериалов	   = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыМатериалов");
	ПланыСборки        = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыСборки");
	ПланыПроизводства  = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыПроизводства");
	
	ВыбранныеПоля                   = Неопределено;
	ПланыЗакупокИспользование       = Ложь ИЛИ (ПланыЗакупок <> Неопределено И ПланыЗакупок.Использование);
	ПланыПродажИспользование        = Ложь ИЛИ (ПланыПродаж <> Неопределено И ПланыПродаж.Использование);
	ПланыПроизводстваИспользование  = Ложь ИЛИ (ПланыПроизводства <> Неопределено И ПланыПроизводства.Использование);
	ПланыСборкиИспользование        = Ложь ИЛИ (ПланыСборки <> Неопределено И ПланыСборки.Использование);
	ПланыКомплектующихИспользование = Ложь ИЛИ (ПланыКомплектующих <> Неопределено И ПланыКомплектующих.Использование);
	ПланыМатериаловИспользование 	= Ложь ИЛИ (ПланыМатериалов <> Неопределено И ПланыМатериалов.Использование);
	
	ИдентификаторНастройкиВыбранныхПолей = КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки;
	Для каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ИдентификаторНастройкиВыбранныхПолей Тогда
			ВыбранныеПоля = ЭлементНастройки;
		КонецЕсли;
		Если ПланыЗакупок <> Неопределено И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыЗакупок.ИдентификаторПользовательскойНастройки Тогда
			ПланыЗакупокИспользование = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыПродаж  <> Неопределено И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыПродаж.ИдентификаторПользовательскойНастройки Тогда
			ПланыПродажИспользование = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыПроизводства <> Неопределено И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыПроизводства.ИдентификаторПользовательскойНастройки Тогда
			ПланыПроизводстваИспользование = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыСборки <> Неопределено И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыСборки.ИдентификаторПользовательскойНастройки Тогда
			ПланыСборкиИспользование = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыКомплектующих <> Неопределено И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыКомплектующих.ИдентификаторПользовательскойНастройки Тогда
			ПланыКомплектующихИспользование = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыМатериалов <> Неопределено И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыМатериалов.ИдентификаторПользовательскойНастройки Тогда
			ПланыМатериаловИспользование = ЭлементНастройки.Использование;
		КонецЕсли;
	КонецЦикла; 
	Если ВыбранныеПоля = Неопределено Тогда
		ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
	КонецЕсли; 
	
	Сценарий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Сценарий");
	Если Сценарий <> Неопределено И ЗначениеЗаполнено(Сценарий.Значение) Тогда
		ПараметрыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий.Значение, "ИспользоватьВПланированииЗакупок, 
			|ИспользоватьВПланированииСборкиРазборки, ИспользоватьВПланированииПродаж, ИспользоватьВПланированииПроизводства,
			|ПланированиеПоНазначениям");
		Для каждого КлючИЗначение Из ПараметрыСценария Цикл
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, КлючИЗначение.Ключ,КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
		
	УстановитьВыбранныеПоляПоОтборам(ВыбранныеПоля, 
		ПланыЗакупокИспользование, 
		ПланыПродажИспользование, 
		ПланыПроизводстваИспользование, 
		ПланыСборкиИспользование,
		ПланыКомплектующихИспользование,
		ПланыМатериаловИспользование);
		
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПользовательскиеНастройкиСОтборомПоДокументам(ОтборПоДокументам)
	
	КонтекстныеНастройки = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ВложенныйЗапрос.НачалоПериода) КАК НачалоПериода,
	|	МАКСИМУМ(ВложенныйЗапрос.ОкончаниеПериода) КАК ОкончаниеПериода,
	|	МАКСИМУМ(ВложенныйЗапрос.Сценарий) КАК Сценарий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументПлана.НачалоПериода КАК НачалоПериода,
	|		ДокументПлана.ОкончаниеПериода КАК ОкончаниеПериода,
	|		ДокументПлана.Сценарий КАК Сценарий
	|	ИЗ
	|		Документ.ПланЗакупок КАК ДокументПлана
	|	ГДЕ
	|		ДокументПлана.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументПлана.НачалоПериода,
	|		ДокументПлана.ОкончаниеПериода,
	|		ДокументПлана.Сценарий
	|	ИЗ
	|		Документ.ПланПродаж КАК ДокументПлана
	|	ГДЕ
	|		ДокументПлана.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументПлана.НачалоПериода,
	|		ДокументПлана.ОкончаниеПериода,
	|		ДокументПлана.Сценарий
	|	ИЗ
	|		Документ.ПланСборкиРазборки КАК ДокументПлана
	|	ГДЕ
	|		ДокументПлана.Ссылка В(&МассивСсылок)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументПланаТовары.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ПланЗакупок.Товары КАК ДокументПланаТовары
	|	ГДЕ
	|		ДокументПланаТовары.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументПланаТовары.Номенклатура
	|	ИЗ
	|		Документ.ПланПродаж.Товары КАК ДокументПланаТовары
	|	ГДЕ
	|		ДокументПланаТовары.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументПланаТовары.Номенклатура
	|	ИЗ
	|		Документ.ПланСборкиРазборки.Товары КАК ДокументПланаТовары
	|	ГДЕ
	|		ДокументПланаТовары.Ссылка В(&МассивСсылок)) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("МассивСсылок", ОтборПоДокументам);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[0].Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КонтекстныеНастройки.Вставить("Сценарий",ВыборкаДетальныеЗаписи.Сценарий);
		Период = Новый СтандартныйПериод;
		Период.ДатаНачала = ВыборкаДетальныеЗаписи.НачалоПериода;
		Период.ДатаОкончания = ВыборкаДетальныеЗаписи.ОкончаниеПериода;
		КонтекстныеНастройки.Вставить("Период", Период);
	КонецЕсли;

	ТаблицаНоменклатуры = РезультатыЗапроса[1].Выгрузить();
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
	
		МассивНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
		КонтекстныеНастройки.Вставить("Номенклатура",МассивНоменклатуры);
	
	КонецЕсли; 
	
	Возврат КонтекстныеНастройки;

КонецФункции

Функция УдалитьОтборПоПредставлению(КомпоновщикНастроек, ЭлементСтруктуры, ИмяПоля, Представление = "")
	
	Если ТипЗнч(ИмяПоля) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Иначе
		Поле = ИмяПоля;
	КонецЕсли; 
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отборы = ЭлементСтруктуры.Настройки.Отбор.Элементы;
	Иначе
		Отборы = ЭлементСтруктуры;
	КонецЕсли;
	Результат = Ложь;
	Для каждого Элемент Из Отборы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = УдалитьОтборПоПредставлению(КомпоновщикНастроек, Элемент.Элементы, Поле, Представление);
			Если Результат Тогда
				Прервать;
			КонецЕсли; 
		Иначе
			Если Элемент.ЛевоеЗначение = Поле 
				И (НЕ ЗначениеЗаполнено(Представление) 
					ИЛИ ЗначениеЗаполнено(Представление) 
					И Элемент.Представление = Представление) Тогда
					
				ИдентификаторПользовательскойНастройки = Элемент.ИдентификаторПользовательскойНастройки;
				Отборы.Удалить(Элемент);
				Результат = Истина;
				ЭлементПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
				Если ЭлементПользовательскихНастроек <> Неопределено Тогда
					КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьВыбранныеПоляПоОтборам(ВыбранныеПоля, 
		ПланыЗакупок, 
		ПланыПродаж, 
		ПланыПроизводства,
		ПланыСборки,
		ПланыКомплектующих,
		ПланыМатериалов)
	
	ПолеПланЗакупок       = Новый ПолеКомпоновкиДанных("ПланЗакупок");
	ПолеПланПродаж        = Новый ПолеКомпоновкиДанных("ПланПродаж");
	ПолеПланПроизводства  = Новый ПолеКомпоновкиДанных("ПланПроизводства");
	ПолеПланСборки        = Новый ПолеКомпоновкиДанных("ПланСборки");
	ПолеПланКомплектующих = Новый ПолеКомпоновкиДанных("ПланКомплектующих");
	ПолеПланМатериалов	  = Новый ПолеКомпоновкиДанных("ПланМатериалов");
	
	Для каждого ПолеВыбора Из ВыбранныеПоля.Элементы Цикл
		
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		
			УстановитьВыбранныеПоляПоОтборам(ПолеВыбора, 
				ПланыЗакупок, 
				ПланыПродаж, 
				ПланыПроизводства,
				ПланыСборки,
				ПланыКомплектующих,
				ПланыМатериалов);
		
		КонецЕсли; 
			
		Если ПолеВыбора.Поле = ПолеПланЗакупок Тогда
			ПолеВыбора.Использование = ПланыЗакупок;
		КонецЕсли; 
		Если ПолеВыбора.Поле = ПолеПланПродаж Тогда
			ПолеВыбора.Использование = ПланыПродаж;
		КонецЕсли; 
		Если ПолеВыбора.Поле = ПолеПланПроизводства Тогда
			ПолеВыбора.Использование = ПланыПроизводства;
		КонецЕсли; 
		Если ПолеВыбора.Поле = ПолеПланСборки Тогда
			ПолеВыбора.Использование = ПланыСборки;
		КонецЕсли; 
		Если ПолеВыбора.Поле = ПолеПланКомплектующих Тогда
			ПолеВыбора.Использование = ПланыКомплектующих;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланМатериалов Тогда
			ПолеВыбора.Использование = ПланыМатериалов;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОтбор(ЭлементСтруктуры, ИмяПоля, Представление = "")
	
	Если ТипЗнч(ИмяПоля) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Иначе
		Поле = ИмяПоля;
	КонецЕсли; 
	
	Отбор = Неопределено;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отборы = ЭлементСтруктуры.Настройки.Отбор.Элементы;
	Иначе
		Отборы = ЭлементСтруктуры;
	КонецЕсли;
	
	Для каждого Элемент Из Отборы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Отбор = ПолучитьОтбор(Элемент.Элементы, Поле, Представление);
			Если Отбор <> Неопределено Тогда
				Прервать;
			КонецЕсли; 
		Иначе
			Если Элемент.ЛевоеЗначение = Поле 
				И (НЕ ЗначениеЗаполнено(Представление) 
					ИЛИ ЗначениеЗаполнено(Представление) 
					И Элемент.Представление = Представление) Тогда
				Отбор = Элемент;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

Процедура ПроверитьСтатусУтвержден(Объект, Отказ, РежимЗаписи, ТипПлана) Экспорт 
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланЗакупок И РольДоступна("УтверждениеПлановЗакупок") Тогда
		Возврат;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланПродаж И РольДоступна("УтверждениеПлановПродаж") Тогда
		Возврат;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям И РольДоступна("УтверждениеПлановПродажПоКатегориям") Тогда
		Возврат;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки И РольДоступна("УтверждениеПлановСборкиРазборки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПривилегированныйРежим() 
		И (РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
		
		Если Объект.Статус = Перечисления.СтатусыПланов.Утвержден 
			ИЛИ ЗначениеЗаполнено(Объект.Ссылка) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Статус") = Перечисления.СтатусыПланов.Утвержден Тогда
			
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщения = НСтр("ru = 'Недостаточно прав для проведения документа в статусе ""Утвержден"".'")
			Иначе
				ТекстСообщения = НСтр("ru = 'Недостаточно прав для отмены проведения документа в статусе ""Утвержден"".'")
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				,
				,
				Отказ);
		
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Функция ФункцииИзОбщегоМодуля() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("НомерТекущейКолонки", "ПланированиеКлиентСервер.НомерТекущейКолонки");
	Структура.Вставить("ЗначениеКолонки", "ПланированиеКлиентСервер.ЗначениеКолонки");
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьСтатусЗамещения(ДокументСсылка) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыПланов.Отменен);
	МассивСтатусов.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
	МассивСтатусов.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	МассивСтатусов.Добавить(Перечисления.СтатусыПланов.Утвержден);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Сценарий,Статус");
	
	СтатусСценария = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.Сценарий, "ПолучатьДанныеПлановВСтатусе");
	СтатусДокумента = РеквизитыДокумента.Статус;
	
	ИндексСтатусаДокумента = МассивСтатусов.Найти(СтатусДокумента);
	ИндексСтатусаСценария = МассивСтатусов.Найти(СтатусСценария);
	
	Если ИндексСтатусаДокумента = Неопределено 
		или ИндексСтатусаСценария = Неопределено
		или ИндексСтатусаДокумента < ИндексСтатусаСценария Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = Макс(ИндексСтатусаСценария, ИндексСтатусаДокумента);
	
	Возврат МассивСтатусов[Индекс]
	
КонецФункции

Функция ПолучитьСтатусыЗаполнения(Сценарий) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыПланов.Отменен);
	МассивСтатусов.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
	МассивСтатусов.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	МассивСтатусов.Добавить(Перечисления.СтатусыПланов.Утвержден);
	
	СтатусСценария = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "ПолучатьДанныеПлановВСтатусе");
	
	ИндексСтатусаСценария = МассивСтатусов.Найти(СтатусСценария);
	
	СтатусыЗаполнения = Новый Массив;
	
	Для Инд = 0 По МассивСтатусов.Количество() - 1 Цикл
	
		Если Инд >= ИндексСтатусаСценария Тогда
		
			СтатусыЗаполнения.Добавить(МассивСтатусов[Инд]);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СтатусыЗаполнения
	
КонецФункции

Функция ПроверитьСуществованиеУжеСозданныхПланов(ДанныеФормы, ИмяТипаДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеФормы.Ссылка) Или Не ЗначениеЗаполнено(ДанныеФормы.Сценарий) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДанныеФормы.Ссылка);
	Запрос.УстановитьПараметр("Сценарий", ДанныеФормы.Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода",   ДанныеФормы.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ДанныеФормы.ОкончаниеПериода);
	
	Если ИмяТипаДокумента = "ПланЗакупок" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		Запрос.УстановитьПараметр("Партнер",    ДанныеФормы.Партнер);
		Запрос.УстановитьПараметр("Соглашение", ДанныеФормы.Соглашение);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланЗакупок КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Партнер = &Партнер
		|	И План.Соглашение = &Соглашение
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= План.Сценарий.ПолучатьДанныеПлановВСтатусе.Порядок
		|	И План.Ссылка <> &Ссылка
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ";
		
	ИначеЕсли ИмяТипаДокумента = "ПланПродаж" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		Запрос.УстановитьПараметр("Партнер",    ДанныеФормы.Партнер);
		Запрос.УстановитьПараметр("Соглашение", ДанныеФормы.Соглашение);
		Запрос.УстановитьПараметр("Менеджер",   ДанныеФормы.Менеджер);
		Запрос.УстановитьПараметр("ФорматМагазина", ДанныеФормы.ФорматМагазина);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланПродаж КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Партнер = &Партнер
		|	И План.Соглашение = &Соглашение
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= План.Сценарий.ПолучатьДанныеПлановВСтатусе.Порядок
		|	И План.Ссылка <> &Ссылка
		|	И План.ФорматМагазина = &ФорматМагазина
		|	И План.Менеджер = &Менеджер
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ"
		
	ИначеЕсли ИмяТипаДокумента = "ПланПродажПоКатегориям" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		Запрос.УстановитьПараметр("ФорматМагазина", ДанныеФормы.ФорматМагазина);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланПродажПоКатегориям КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= План.Сценарий.ПолучатьДанныеПлановВСтатусе.Порядок
		|	И План.Ссылка <> &Ссылка
		|	И План.ФорматМагазина = &ФорматМагазина
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ"
		
	ИначеЕсли ИмяТипаДокумента = "ПланСборкиРазборки" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланСборкиРазборки КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= План.Сценарий.ПолучатьДанныеПлановВСтатусе.Порядок
		|	И План.Ссылка <> &Ссылка
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ"
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В базе уже создан документ за текущий период: %1 в статусе %2, который необходимо утвердить.'"), 
																					ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Статус);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаДетальныеЗаписи.Ссылка, "ВидПлана");
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеЗаказовПоПланам

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  МассивКоэффициентов - Массив - коэффициенты распределения;
//  КратностьТовара - Число - кратность распределенного количество.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
//           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьКоличествоПропорциональноКоэффициентамИКратностиСтроки(Знач РаспределяемаяСумма, КоэффициентУпаковки, Коэффициенты, КратностьТовара)
	
	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 2 Цикл
		Если РаспределеннаяСумма>= РаспределяемаяСумма Тогда
			Прервать;
		КонецЕсли;
		Результат[Индекс] = Окр((РаспределяемаяСумма-РаспределеннаяСумма) * Коэффициенты[Индекс] / СуммаКоэффициентов, 3, 1);
		КоличествоКратныхУпаковок = Результат[Индекс] * КоэффициентУпаковки / КратностьТовара;
		Если КоличествоКратныхУпаковок - Цел(КоличествоКратныхУпаковок) > 0 Тогда
			Результат[Индекс] = (Цел(КоличествоКратныхУпаковок) + 1) * КратностьТовара / КоэффициентУпаковки;
		КонецЕсли;
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
		СуммаКоэффициентов = СуммаКоэффициентов - Коэффициенты[Индекс];
	КонецЦикла;
	
	// Последний коэффициент расчитывается с учетом ранее вычисленных.
	ИндексПоследнегоКоэффициента = Коэффициенты.Количество() -1;
	Результат[ИндексПоследнегоКоэффициента] = РаспределяемаяСумма - РаспределеннаяСумма;
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиИлиРаспределитьНаСервере(ПараметрыРаспределения, Знач ВыделенныеСтроки, ФормированиеЗаказов) Экспорт
	
	Если ПараметрыРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаспределения.Вставить("НомерДняНедели", ПланированиеКлиентСервер.НомерДняНедели(ПараметрыРаспределения.ДеньНедели));
	Периодичность = ПараметрыРаспределения.Периодичность;
	
	Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводства" Тогда
		ИмяКолонкиПериода = "ДатаВыпуска";
		ИмяКолонкиДатаЗаказа = "";
	ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
		ИмяКолонкиПериода = "ДатаПоступления";
		ИмяКолонкиДатаЗаказа = "";
	ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеСборкиРазборки" Тогда
		ИмяКолонкиПериода = "НачалоПериодаСборки";
		ИмяКолонкиДатаЗаказа = "ДатаЗаказа";
	ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеПередачиМатериаловВПроизводство" Тогда
		ИмяКолонкиПериода = "НачалоПериодаПотребности";
		ИмяКолонкиДатаЗаказа = "ДатаЗаказа";
	КонецЕсли;
	
	КэшированныеНастройки = Новый Соответствие;
	
	Если ПараметрыРаспределения.Операция = "Распределение" Тогда
		ДолиРаспределения = Новый ТаблицаЗначений;
		ДолиРаспределения.Колонки.Добавить("Период", Новый ОписаниеТипов("Число"));
		ДолиРаспределения.Колонки.Добавить("Доля", Новый ОписаниеТипов("Число"));
		ДолиРаспределения.Индексы.Добавить("Период");
		
		ТекущийПериод = 1;
		Для каждого Доля Из ПараметрыРаспределения.Доли Цикл
		
			НоваяСтрока = ДолиРаспределения.Добавить();
			НоваяСтрока.Период = ТекущийПериод;
			НоваяСтрока.Доля = Доля;
			
			ТекущийПериод = ТекущийПериод + 1;
		КонецЦикла;
		
		СуммаДолей = ДолиРаспределения.Итог("Доля");
		
		Коэффициенты = ДолиРаспределения.ВыгрузитьКолонку("Доля");
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТЧ = ФормированиеЗаказов.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ПараметрыРаспределения.ОтметитьКЗаказу Тогда
			СтрокаТЧ.ОтметитьКЗаказу = Истина;
		КонецЕсли; 
		
		Если ПараметрыРаспределения.Операция = "Перенос" Тогда
		
			Если ПараметрыРаспределения.ВариантПереноса = "НаЧисло" Тогда
			
				Если Периодичность = Перечисления.Периодичность.Месяц И ПараметрыРаспределения.НомерДня = 31 Тогда
				
					СтрокаТЧ[ИмяКолонкиПериода] =  КонецМесяца(СтрокаТЧ.ДатаВыпуска);
				
				Иначе
					ОкончаниеПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
					ДатаПереноса = НачалоДня(ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(СтрокаТЧ[ИмяКолонкиПериода], 
						Периодичность))-1 + ПараметрыРаспределения.НомерДня * 86400;
					Если ОкончаниеПериода <= ДатаПереноса Тогда
					
						СтрокаТЧ[ИмяКолонкиПериода] =  ОкончаниеПериода;
					
					Иначе
					
						СтрокаТЧ[ИмяКолонкиПериода] =  ДатаПереноса;
					
					КонецЕсли;
				КонецЕсли;
			
			ИначеЕсли ПараметрыРаспределения.ВариантПереноса = "НаПервыйДеньНедели" Тогда
				
				НачалоПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
				ТекущийДеньНедели = ДеньНедели(НачалоПериода);
				
				Если ТекущийДеньНедели <= ПараметрыРаспределения.НомерДняНедели Тогда
					СтрокаТЧ[ИмяКолонкиПериода] =  НачалоНедели(НачалоПериода) + (ПараметрыРаспределения.НомерДняНедели -1) * 86400;
				Иначе
					СтрокаТЧ[ИмяКолонкиПериода] =  НачалоДня(КонецНедели(НачалоПериода)) + ПараметрыРаспределения.НомерДняНедели * 86400;
				КонецЕсли;
				
			ИначеЕсли ПараметрыРаспределения.ВариантПереноса = "НаПоследнийДеньНедели" Тогда
				
				ОкончаниеПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
				ТекущийДеньНедели = ДеньНедели(ОкончаниеПериода);
				
				Если ТекущийДеньНедели >= ПараметрыРаспределения.НомерДняНедели Тогда
					СтрокаТЧ[ИмяКолонкиПериода] =  НачалоНедели(ОкончаниеПериода) + (ПараметрыРаспределения.НомерДняНедели -1) * 86400;
				Иначе
					СтрокаТЧ[ИмяКолонкиПериода] =  НачалоДня(ОкончаниеПериода) - (7 - ПараметрыРаспределения.НомерДняНедели + ТекущийДеньНедели) * 86400;
				КонецЕсли;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ИмяКолонкиДатаЗаказа) Тогда
				СтрокаТЧ[ИмяКолонкиДатаЗаказа] = СтрокаТЧ[ИмяКолонкиПериода] - СтрокаТЧ.ДнейДоЗаказа*86400;
			КонецЕсли;
			
		ИначеЕсли ПараметрыРаспределения.Операция = "Распределение" Тогда
			
			Если СтрокаТЧ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НачалоПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
			Настройки = КэшированныеНастройки.Получить(НачалоПериода);
			Если Настройки = Неопределено Тогда
				
				ОкончаниеПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
				КоличествоДнейВПериоде = Цел((ОкончаниеПериода + 1 - НачалоПериода)/86400);
				
				Если КоличествоДнейВПериоде >= ПараметрыРаспределения.КоличествоПериодов Тогда
					КоличествоПериодов = ПараметрыРаспределения.КоличествоПериодов;
				Иначе
					КоличествоПериодов = КоличествоДнейВПериоде;
				КонецЕсли;
				
				Если ПараметрыРаспределения.ВариантРаспределенияДат = "ПоНеделям" Тогда
					ТекущийДеньНедели = ДеньНедели(НачалоПериода);
					Если ТекущийДеньНедели <= ПараметрыРаспределения.НомерДняНедели Тогда
						ПервыйПериод = НачалоПериода  + (ПараметрыРаспределения.НомерДняНедели - ТекущийДеньНедели) * 86400;
					Иначе
						ПервыйПериод = КонецНедели(НачалоПериода) + 1 + (ПараметрыРаспределения.НомерДняНедели -1) * 86400;
					КонецЕсли;
				Иначе
					ПервыйПериод = НачалоПериода;
				КонецЕсли;
				
				Если ПараметрыРаспределения.ВариантРаспределенияДат = "ПоНеделям" Тогда
					
					ТекущийДеньНедели = ДеньНедели(ОкончаниеПериода);
					Если ТекущийДеньНедели >= ПараметрыРаспределения.НомерДняНедели Тогда
						ПоследнийПериод = НачалоНедели(ОкончаниеПериода) + (ПараметрыРаспределения.НомерДняНедели -1) * 86400;
					Иначе
						ПоследнийПериод = НачалоНедели(ОкончаниеПериода)- (8 - ПараметрыРаспределения.НомерДняНедели) * 86400;
					КонецЕсли;
					
					КоличествоПериодов = Цел((ПоследнийПериод - ПервыйПериод) / 604800) + 1;
					
				КонецЕсли;
				
				СуммаДолей = 0;
				Коэффициенты = Новый Массив;
				Для каждого СтрокаДоли Из ДолиРаспределения Цикл
					
					Если СтрокаДоли.Период > КоличествоПериодов Тогда
						Продолжить;
					КонецЕсли; 
					
					Коэффициенты.Добавить(СтрокаДоли.Доля);
					СуммаДолей = СуммаДолей + СтрокаДоли.Доля;
					
				КонецЦикла;
				
				КэшированныеНастройки.Вставить(НачалоПериода, 
					Новый Структура("КоличествоПериодов, Коэффициенты, ПервыйПериод, КоличествоДнейВПериоде, СуммаДолей",
					КоличествоПериодов, Коэффициенты, ПервыйПериод, КоличествоДнейВПериоде, СуммаДолей));
				
			Иначе
				
				КоличествоПериодов     = Настройки.КоличествоПериодов;
				Коэффициенты           = Настройки.Коэффициенты;
				ПервыйПериод           = Настройки.ПервыйПериод;
				КоличествоДнейВПериоде = Настройки.КоличествоДнейВПериоде;
				СуммаДолей             = Настройки.СуммаДолей;
			
			КонецЕсли; 
			
			Если КоличествоПериодов = 1 ИЛИ СуммаДолей = 0 Тогда
				СтрокаТЧ[ИмяКолонкиПериода] = ПервыйПериод;
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводства" Тогда
				КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(СтрокаТЧ.Упаковка, СтрокаТч.Номенклатура);
				КоличествоУпаковок = РаспределитьКоличествоПропорциональноКоэффициентамИКратностиСтроки(
					СтрокаТЧ.КоличествоУпаковок,
					КоэффициентУпаковки,
					Коэффициенты,
					СтрокаТЧ.КоличествоПродукцииВСпецификации);
			ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеСборкиРазборки" Тогда
				КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(СтрокаТЧ.Упаковка, СтрокаТч.Номенклатура);
				КоличествоУпаковок = РаспределитьКоличествоПропорциональноКоэффициентамИКратностиСтроки(
					СтрокаТЧ.КоличествоУпаковок,
					КоэффициентУпаковки,
					Коэффициенты,
					СтрокаТЧ.КоличествоКомплектовВВариантеКомплектации);
				ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеПередачиМатериаловВПроизводство"
					Или ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
				КоличествоУпаковок = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
					СтрокаТЧ.КоличествоУпаковок, 
					Коэффициенты,
					3 + ПараметрыРаспределения.ТочностьОкругления);
			КонецЕсли;
			
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводства"
				И Не ПараметрыРаспределения.ВариантРаспределенияДат = "ПоНеделям" Тогда
				СтрокаТЧ[ИмяКолонкиПериода] = ОкончаниеПериода;
				ПоследнийПериод = КоличествоУпаковок.Количество()-1;
				КоличествоУпаковок.Вставить(0, КоличествоУпаковок[ПоследнийПериод]);
				КоличествоУпаковок.Удалить(ПоследнийПериод + 1);
			Иначе
				СтрокаТЧ[ИмяКолонкиПериода] = ПервыйПериод;
			КонецЕсли;
			
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводства" Тогда
				СтрокаТЧ.Период.ДатаНачала = НачалоПериода;
				СтрокаТЧ.Период.ДатаОкончания = СтрокаТЧ[ИмяКолонкиПериода];
			Иначе
				СтрокаТЧ.Период.ДатаНачала = СтрокаТЧ[ИмяКолонкиПериода];
				СтрокаТЧ.Период.ДатаОкончания = ОкончаниеПериода;
			КонецЕсли;
			
			СтрокаТЧ.КоличествоУпаковок = КоличествоУпаковок[0];
			
			//Расчет даты заказа и начала сборки 
			Если ЗначениеЗаполнено(ИмяКолонкиДатаЗаказа) Тогда
				СтрокаТЧ[ИмяКолонкиДатаЗаказа] = СтрокаТЧ[ИмяКолонкиПериода] - СтрокаТЧ.ДнейДоЗаказа*86400;
			КонецЕсли;
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеСборкиРазборки" Тогда
				СтрокаТЧ.ДатаНачалаСборки = СтрокаТЧ.НачалоПериодаСборки - СтрокаТЧ.ДлительностьСборкиРазборки*86400;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
				СтрокаТЧ.ОбщийВес = СтрокаТЧ.Количество * СтрокаТЧ.Вес;
			КонецЕсли;
	
			Для НомерПериода = 2 По КоличествоПериодов Цикл
				
				Если КоличествоУпаковок[НомерПериода-1] = Неопределено
					Или КоличествоУпаковок[НомерПериода-1] <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ФормированиеЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.Период = Новый СтандартныйПериод;
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок[НомерПериода-1];
				
				Если ПараметрыРаспределения.ВариантРаспределенияДат = "ПоПолугодиям" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = ДобавитьМесяц(НачалоПериода, 6 * (НомерПериода-1));
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоКварталам" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = ДобавитьМесяц(НачалоПериода, 3 * (НомерПериода-1));
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоМесяцам" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = ДобавитьМесяц(НачалоПериода, НомерПериода-1);
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоНеделям" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = ПервыйПериод + 604800 * (НомерПериода-1);
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоДекадам" Тогда
					НачалоТекущегоМесяца = ДобавитьМесяц(НачалоПериода, Цел((НомерПериода-1)/3));
					НоваяСтрока[ИмяКолонкиПериода] = НачалоТекущегоМесяца + 864000 * ((НомерПериода-1)%3);
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоПериодам" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = НачалоПериода + 86400 * Цел(КоличествоДнейВПериоде / КоличествоПериодов * (НомерПериода-1));
				КонецЕсли;
				
				НоваяСтрока[ИмяКолонкиПериода] = Мин(НоваяСтрока[ИмяКолонкиПериода], ОкончаниеПериода);
				
				Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводства" Тогда
					НоваяСтрока.Период.ДатаНачала = НачалоПериода;
					НоваяСтрока.Период.ДатаОкончания = НоваяСтрока[ИмяКолонкиПериода];
				Иначе
					НоваяСтрока.Период.ДатаНачала = НоваяСтрока[ИмяКолонкиПериода];
					НоваяСтрока.Период.ДатаОкончания = ОкончаниеПериода;
				КонецЕсли;
				
				//Расчет даты заказа и начала сборки 
				Если ЗначениеЗаполнено(ИмяКолонкиДатаЗаказа) Тогда
					НоваяСтрока[ИмяКолонкиДатаЗаказа] = НоваяСтрока[ИмяКолонкиПериода] - НоваяСтрока.ДнейДоЗаказа*86400;
				КонецЕсли;
				Если ПараметрыРаспределения.ТипПланирования = "ПланированиеСборкиРазборки" Тогда
					НоваяСтрока.ДатаНачалаСборки = НоваяСтрока.НачалоПериодаСборки - НоваяСтрока.ДлительностьСборкиРазборки*86400;
				КонецЕсли;
			
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				Если ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
					НоваяСтрока.ОбщийВес = НоваяСтрока.Количество * НоваяСтрока.Вес;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыКроссТаблиц

// Процедура проверяет заполнение склада в документе
//
// Параметры:
//  Объект            - ДокументОбъект - документ, в котором необходимо проверить заполнение склада
//  Отказ             - Булево - Истина, если есть ошибки заполнения
//  ПараметрыПроверки - Структура - Параметры проверки: ИмяТЧ и ПредставлениеТЧ
//
Процедура ПроверитьЗаполнениеСклада(Объект, Отказ, ПараметрыПроверки)

	ИмяТЧ           = ПараметрыПроверки.ИмяТЧ;
	ПредставлениеТЧ = ПараметрыПроверки.ПредставлениеТЧ;
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Склад"" в строке %1 списка ""%2""'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки,
	|	ТЧ.Номенклатура,
	|	ТЧ.Склад
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.НомерСтроки
	|ИЗ
	|	ТЧ КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТЧ.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	Запрос.УстановитьПараметр("ТЧ", Объект[ИмяТЧ].Выгрузить(, "НомерСтроки, Номенклатура, Склад"));
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, 
			ВыборкаДетальныеЗаписи.НомерСтроки, 
			ПредставлениеТЧ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ВыборкаДетальныеЗаписи.НомерСтроки, "Склад"),
			,
			Отказ);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСобытийОбъекта

Процедура ПриЧтенииСозданииНаСервере(Форма)
	
	Форма.ОтображатьНомерПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Сценарий, "ОтображатьНомерПериода");
	
	СоздатьТаблицуПериодов(Форма, "Периоды");
	
	СоздатьРеквизитыПроверкиИзменений(
		Форма, 
		"РеквизитыДоИзменения", 
		"Сценарий, ВидПлана, Периодичность, НачалоПериода, ОкончаниеПериода");
	
	
конецпроцедуры

#КонецОбласти

#Область ПроцедурыИсточниковПланирования

// Функция преобразовывает данные по правилу и возвращает результат по источнику или группе источников
//
// Параметры:
//  ТипПлана                         - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ПравилаЗаполненияНайденныеСтроки - Массив - Массив строк правила
//  ПараметрыПреобразования          - Структура - параметры преобразования
//  ПользовательскиеНастройки        - ПользовательскиеНастройкиКомпоновкиДанных - настройки пользователя для документа плана
//  ДополнительныеПараметры          - Структура - Дополнительные параметры, используемые при получении данных из источников
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица итоговых данных преобразованных по правилам из источника или группы источников
//
Функция ПреобразоватьДанные(Знач ТипПлана, ПравилаЗаполненияНайденныеСтроки, ПараметрыПреобразования, 
	ПользовательскиеНастройки = Неопределено, ДополнительныеПараметры = Неопределено, ЗаполнятьНазначениеВТЧ = Истина)
	
	СхемаКомпоновкиДанных = ПолучитьСхемуПреобразованияДанных(ТипПлана,,ЗаполнятьНазначениеВТЧ);
	
	// Добавление предопределенных параметров и установка значений.
	НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	НовыйПараметр.Имя = "Коэффициент";
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("Число");
	НовыйПараметр.Значение = 1;
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	// Добавление параметров из дополнительных параметров и установка значений.
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ПараметрыДанных") Тогда
		
		Для каждого Параметр из ДополнительныеПараметры.ПараметрыДанных Цикл
			
			НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Найти(Параметр.Ключ);
			
			Если НовыйПараметр = Неопределено Тогда
				
				НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
				НовыйПараметр.Имя = Параметр.Ключ;
				НовыйПараметр.ОграничениеИспользования = Ложь;

			КонецЕсли;
			
			НовыйПараметр.Значение = Параметр.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборДанныхОбъединение = СхемаКомпоновкиДанных.НаборыДанных.Объединение;
	НаборДанныхПрисоединение = СхемаКомпоновкиДанных.НаборыДанных.Найти("Присоединение");
	СвязиНаборов = Новый Структура;
	
	Если ПараметрыПреобразования.Присоединять = Истина Тогда
		СтрокаКоэффициент = "";
	Иначе
		СтрокаКоэффициент = " * &Коэффициент";
	КонецЕсли; 
	Для каждого ПолеИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		
		Если ПолеИтога.ПутьКДанным <> "Количество" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Сложение Тогда
			
			ПолеИтога.Выражение = "Сумма("+ПолеИтога.ПутьКДанным+")" + СтрокаКоэффициент;
			
		ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Максимум Тогда
			
			ПолеИтога.Выражение = "Максимум("+ПолеИтога.ПутьКДанным+")" + СтрокаКоэффициент;
			
		ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Среднее Тогда
			
			ПолеИтога.Выражение = "Среднее("+ПолеИтога.ПутьКДанным+")" + СтрокаКоэффициент;
			
		ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Минимум Тогда
			
			ПолеИтога.Выражение = "Минимум("+ПолеИтога.ПутьКДанным+")" + СтрокаКоэффициент;
			
		КонецЕсли;
	КонецЦикла; 
	
	НаборыДанных = Новый Структура;
	ПоляПрисоединения = Новый Массив; // Поля набора присоединения, которые необходимо удалить из набора объединения
	
	КоличествоНаборовДанныхПрисоединение = 0;
	Для каждого НайденнаяСтрока из ПравилаЗаполненияНайденныеСтроки Цикл
		// Определяем наборы присоединения только для верхнего уровня дерева правил
		Если НайденнаяСтрока.Присоединять = Истина И НайденнаяСтрока.НомерСтрокиРодитель = 0 Тогда
			КоличествоНаборовДанныхПрисоединение = КоличествоНаборовДанныхПрисоединение + 1;
			
			// Переопределяем поля, которые нужно взять из набора
			Если НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Количество() = 0 Тогда
				ДоступныеПоляВыбора = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляВыбора.Элементы;
			Иначе
				ДоступныеПоляВыбора = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура[0].Выбор.ДоступныеПоляВыбора.Элементы;
			КонецЕсли;
			Для каждого ЭлементНастройки Из НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки.Элементы Цикл 
				Если ТипЗнч(ЭлементНастройки) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
					ДоступныеПоляВыбора = ЭлементНастройки.Элементы;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для каждого Поле Из ДоступныеПоляВыбора Цикл
				Если ТипЗнч(Поле) = Тип("ВыбранноеПолеКомпоновкиДанных") И НЕ Поле.Использование Тогда
					Продолжить;
				КонецЕсли; 
				Если ПоляПрисоединения.Найти(Строка(Поле.Поле)) = Неопределено Тогда
					ПоляПрисоединения.Добавить(Строка(Поле.Поле));
				КонецЕсли;
			КонецЦикла;
		Иначе
			НайденнаяСтрока.Присоединять = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоНаборовДанныхПрисоединение = 0 И НаборДанныхПрисоединение <> Неопределено Тогда
		
		// Добавляем поля из набора присоединения, чтобы была возможность выбирать все одним набором
		Для каждого Поле Из НаборДанныхПрисоединение.Элементы.НаборДанных.Поля Цикл
			Если НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Найти(Поле.ПутьКДанным) = Неопределено Тогда
				ПолеНабораДанных = НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Добавить(ТипЗнч(Поле));
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
			КонецЕсли; 
		КонецЦикла;
		
		НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
		СхемаКомпоновкиДанных.НаборыДанных.Удалить(НаборДанныхПрисоединение);
		
	Иначе
		// Удаляем поля из набора объединения - чтобы взять их из присоединения
		Для каждого Поле Из ПоляПрисоединения Цикл
			НайденноеПоле = НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Найти(Поле);
			Если НайденноеПоле <> Неопределено Тогда
				НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Удалить(НайденноеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
		
	// Добавление наборов данных для каждого исходного набора данных.
	Для каждого НайденнаяСтрока из ПравилаЗаполненияНайденныеСтроки Цикл
		
		НаборДанныхКлюч = "НаборДанных" + Формат(НайденнаяСтрока.НомерСтроки, "ЧГ=0");
		НаборыДанных.Вставить(НаборДанныхКлюч, НайденнаяСтрока.НаборДанных);
		
		// Добавление набора данных.
		Если НайденнаяСтрока.Присоединять = Истина И НаборДанныхПрисоединение <> Неопределено Тогда
			НаборДанныхОбъект = НаборДанныхПрисоединение.Элементы.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанныхОбъект.Имя = НаборДанныхКлюч;
			НаборДанныхОбъект.ИмяОбъекта = НаборДанныхКлюч;
			НаборДанныхОбъект.ИсточникДанных = "ИсточникДанных";
			
			// Добавление группировки
			Если НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Количество() = 0 Тогда
				КоллекцияПолейГруппировки = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляГруппировок.Элементы;
			Иначе
				КоллекцияПолейГруппировки = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура[0].ПоляГруппировки.Элементы;
			КонецЕсли;
			
			Для каждого ПолеГруппировки Из КоллекцияПолейГруппировки Цикл
			
				Если НЕ ПолеГруппировки.Использование ИЛИ НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Найти(ПолеГруппировки.Поле) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СвязиНаборов.Вставить(Строка(ПолеГруппировки.Поле), Строка(ПолеГруппировки.Поле));
				
			КонецЦикла;
			
			Если НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Количество() = 0 Тогда
				ДоступныеПоляВыбора = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляВыбора.Элементы;
			Иначе
				ДоступныеПоляВыбора = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура[0].Выбор.ДоступныеПоляВыбора.Элементы;
			КонецЕсли;
			Для каждого Поле Из ДоступныеПоляВыбора Цикл
				Если Поле.Папка Тогда
					Продолжить;
				КонецЕсли; 
				ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ПолеНабораДанных.ТипЗначения = Поле.ТипЗначения;
				ПолеНабораДанных.Поле = Строка(Поле.Поле);
				ПолеНабораДанных.Заголовок = Строка(Поле.Поле);
				ПолеНабораДанных.ПутьКДанным = Строка(Поле.Поле);
				
				Если НаборДанныхПрисоединение.Поля.Найти(Поле.Поле) = Неопределено Тогда
					ПолеНабораДанных = НаборДанныхПрисоединение.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
					ПолеНабораДанных.ТипЗначения = Поле.ТипЗначения;
					ПолеНабораДанных.Поле = Строка(Поле.Поле);
					ПолеНабораДанных.Заголовок = Строка(Поле.Поле);
					ПолеНабораДанных.ПутьКДанным = Строка(Поле.Поле);
				КонецЕсли;
			КонецЦикла;
			 
		Иначе
			НаборДанныхОбъект = НаборДанныхОбъединение.Элементы.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанныхОбъект.Имя = НаборДанныхКлюч;
			НаборДанныхОбъект.ИмяОбъекта = НаборДанныхКлюч;
			НаборДанныхОбъект.ИсточникДанных = "ИсточникДанных";
			
			Для каждого Поле Из НаборДанныхОбъединение.Элементы.НаборДанных.Поля Цикл
				ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(ТипЗнч(Поле));
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
			КонецЦикла;
		КонецЕсли;
				
	КонецЦикла;
	
	Если КоличествоНаборовДанныхПрисоединение > 0 И НаборДанныхПрисоединение <> Неопределено Тогда
		Для каждого ЭлементСвязи Из СвязиНаборов Цикл
			Если НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Найти(ЭлементСвязи.Значение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСвязьДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
			НоваяСвязьДанных.НаборДанныхИсточник = "Объединение";
			НоваяСвязьДанных.НаборДанныхПриемник = "Присоединение";
			НоваяСвязьДанных.ВыражениеИсточник = ЭлементСвязи.Значение;
			НоваяСвязьДанных.ВыражениеПриемник = ЭлементСвязи.Ключ;
						
		КонецЦикла;
				
		НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
	КонецЕсли;
	
	НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
	
	// Загрузка настроек
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Загрузка настроек из дополнительных параметров
	Если ПользовательскиеНастройки <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
	КонецЕсли;
	
	// Включение использования параметров данных
	Для каждого ПараметрДанных из КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы Цикл
		
		ПараметрДанных.Использование = Истина;
		
	КонецЦикла;
	
	// Отключение вывода общих итогов
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Добавление ресурса
	Если КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Количество() = 0 Тогда
		Для каждого Элемент из КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			
			Если Элемент.Ресурс И НЕ Элемент.Папка Тогда
				НайденЭлемент = Ложь;
				Для каждого ЭлементВыбора из КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы Цикл
					Если ЭлементВыбора.Поле = Элемент.Поле Тогда
						НайденЭлемент = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если НайденЭлемент Тогда
					Продолжить;
				КонецЕсли; 
				ВыбранноеПоле = КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.Поле = Элемент.Поле;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли; 
	
	// Добавление группировки
	Если КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Количество() = 0 Тогда
		ГруппировкаКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		// Добавление полей группировки
		Для каждого Элемент из КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
			
			Если НЕ Элемент.Ресурс Тогда
								
				ВыбранноеПоле = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.Поле = Элемент.Поле;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Таблица значений, в которую будет получен результат
	Результат = Новый ТаблицаЗначений;
	Если СхемаКомпоновкиДанных.НаборыДанных.Объединение.Элементы.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанных);
		
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(Результат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ПараметрыПреобразования.Исключать И Результат.Колонки.Найти("Количество") <> Неопределено Тогда
		
		Для каждого СтрокаРезультата из Результат Цикл
			
			СтрокаРезультата.Количество = - СтрокаРезультата.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЗаполненияПоФормулам

// Добавляет первый набор данных из СКД операнда в схему преобразования и все настройки операнда
//
// Параметры:
//  СКД_Преобразование  - СхемаКопоновкиДанных - схема преобразования документа, в которую добавляется набор операнда
//  КоллекцияНаборов  - НаборыДанных - Коллекция объединения наборов данных в схеме преобразования
//  СКД_Операнда  - СхемаКопоновкиДанных - схема операнда с настройками, из которой будут добавлены наборы 
//                 в схему преобразования
//  ИменаОперандов  - Строка - Имена операндов, разделенные запятыми, используемые для заполнения ТЧ
//
Процедура ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, КоллекцияНаборов, СКД_Операнда, ИменаОперандов = "")
	
	НастройкиПреобразования = СКД_Преобразование.ВариантыНастроек[0].Настройки;
	
	НаборДанныхОбъект = КоллекцияНаборов.Элементы.Добавить(ТипЗнч(СКД_Операнда.НаборыДанных[0]));
	НаборДанныхОбъект.Имя = СКД_Операнда.НаборыДанных[0].Имя;
	НаборДанныхОбъект.ИсточникДанных = СКД_Преобразование.ИсточникиДанных[0].Имя;
	
	Если ТипЗнч(СКД_Операнда.НаборыДанных[0]) <> Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
		НаборДанныхОбъект.Запрос = СКД_Операнда.НаборыДанных[0].Запрос;
		НаборДанныхОбъект.АвтоЗаполнениеДоступныхПолей = СКД_Операнда.НаборыДанных[0].АвтоЗаполнениеДоступныхПолей;
	Иначе
		НаборДанныхОбъект.ИмяОбъекта  = СКД_Операнда.НаборыДанных[0].ИмяОбъекта ;
	КонецЕсли; 
	
	// Поля набора
	Для каждого Поле Из СКД_Операнда.НаборыДанных[0].Поля Цикл
		ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(ТипЗнч(Поле));
		ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
		
		ПолеНабораДанных = КоллекцияНаборов.Поля.Найти(Поле.Поле);
		Если ПолеНабораДанных = Неопределено Тогда
			ПолеНабораДанных = КоллекцияНаборов.Поля.Добавить(ТипЗнч(Поле));
			ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
		КонецЕсли; 
	КонецЦикла;
	
	// Ресурсы
	Для каждого Поле Из СКД_Операнда.ПоляИтога Цикл
		
		НовоеПоле = СКД_Преобразование.ПоляИтога.Найти(Поле.ПутьКДанным);
		
		Если НовоеПоле = Неопределено Тогда
			НовоеПоле = СКД_Преобразование.ПоляИтога.Добавить();
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(НовоеПоле, Поле, "Выражение, ПутьКДанным");
		
		ПолеВыбора = НастройкиПреобразования.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(НовоеПоле.ПутьКДанным);
		ПолеВыбора.Заголовок = НовоеПоле.ПутьКДанным;
		ПолеВыбора.Использование = Истина;
		
		ИменаОперандов = ИменаОперандов + ?(ПустаяСтрока(ИменаОперандов), "", ", ") + НовоеПоле.ПутьКДанным;
	КонецЦикла; 
	
	Для каждого Параметр Из СКД_Операнда.Параметры Цикл
		
		НайденныйПараметр = СКД_Преобразование.Параметры.Найти(Параметр.Имя);
		Если НайденныйПараметр = Неопределено Тогда
			
			НовыйПараметр = СКД_Преобразование.Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараметр, 
			Параметр, 
			"ВключатьВДоступныеПоля, Использование, Выражение, ДоступенСписокЗначений, Заголовок, ЗапрещатьНезаполненныеЗначения,
			|Значение, Имя, ОграничениеИспользования, ПараметрФункциональныхОпций, ТипЗначения");
			
		КонецЕсли; 
	КонецЦикла; 
	

КонецПроцедуры

// Выполняет СКД преобразования, дополненную наборами операндов и др. настройками, выводит результат в таблицу
//
// Параметры:
//  СКД_Преобразование   - СхемаКопоновкиДанных - схема преобразования документа с добавленными наборами операндов
//  Параметры  - Структура - параметры необходимые для выполнения схемы
//  ТаблицаРезультата  - ТаблицаЗначений - таблица, в которую будет выведен результат выполнения схемы
//  НаборыДанныхОбъекты  - Структура - Структура с внешними наборами-объектами для схемы компоновки
//
Процедура ВыполнитьСхемуПреобразования(СКД_Преобразование, Параметры, ТаблицаРезультата, НаборыДанныхОбъекты = Неопределено)
	
	// Загрузка СКД
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД_Преобразование));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД_Преобразование.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	// Добавляем параметры
	Для каждого Параметр Из СКД_Преобразование.Параметры Цикл
	
		Если Параметры.Свойство(Параметр.Имя) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Параметр.Имя, Параметры[Параметр.Имя]);
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Установка отборов
	Если Параметры.Свойство("Отбор") Тогда
		Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			Поле = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Поле) <> Неопределено Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, Поле, ЭлементОтбора.Значение,,, Новый Структура("ВПользовательскиеНастройки", Истина));
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если Параметры.Свойство("Ссылка") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Ссылка", Параметры.Ссылка);
	КонецЕсли; 
	
	// Установка отбора по сегментам номенклатуры
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	// Установка отбора по сегментам партнеров
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек); 
	
	// Отключение вывода общих итогов
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД_Преобразование, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанныхОбъекты);
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

// Удаляет неиспользуемые наборы для заполнения по формулам
//
// Параметры:
//  СКД_Преобразование   - СхемаКопоновкиДанных - схема преобразования документа
//
Процедура УдалитьНаборыНеИспользуемыеДляФормул(СКД_Преобразование)

	НаборДанныхОбъединение = СКД_Преобразование.НаборыДанных.Объединение;
	НаборДанныхПрисоединение = СКД_Преобразование.НаборыДанных.Найти("Присоединение");
	Если НаборДанныхПрисоединение <> Неопределено Тогда
		
		// Проверяем добавлены ли наборы присоединения
		Если НаборДанныхПрисоединение.Элементы.Количество() = 1 Тогда
			
			// Добавляем поля из набора присоединения, чтобы была возможность выбирать все одним набором
			Для каждого Поле Из НаборДанныхПрисоединение.Элементы.НаборДанных.Поля Цикл
				ПолеНабораДанных = НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Добавить(ТипЗнч(Поле));
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
			КонецЦикла;
			
			Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
			
			Пока  Индекс >= 0 Цикл
				
				Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
				Если Связь.НаборДанныхИсточник = "Присоединение" ИЛИ Связь.НаборДанныхПриемник  = "Присоединение" Тогда
					СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
				КонецЕсли; 
				
				Индекс = Индекс - 1;
				
			КонецЦикла;
			
			НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
			СКД_Преобразование.НаборыДанных.Удалить(НаборДанныхПрисоединение);
			
		Иначе
			НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НаборДанныхОбъединение.Элементы.Количество() = 1 Тогда
		
		Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
		
		Пока  Индекс >= 0 Цикл
			
			Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
			Если Связь.НаборДанныхИсточник = "Объединение" ИЛИ Связь.НаборДанныхПриемник = "Объединение" Тогда
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			КонецЕсли; 
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
		НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
		СКД_Преобразование.НаборыДанных.Удалить(НаборДанныхОбъединение);
		
	Иначе
		НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
	КонецЕсли;
	
	// Удаляем поля итогов которые не найдены в наборах данных
	Индекс = СКД_Преобразование.ПоляИтога.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ПолеНайдено = Ложь;
		ПолеИтога = СКД_Преобразование.ПоляИтога[Индекс];
		Для каждого Набор Из СКД_Преобразование.НаборыДанных Цикл
			
			Если Набор.Поля.Найти(ПолеИтога.ПутьКДанным) <> Неопределено Тогда
				ПолеНайдено = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЦикла; 
		
		Если НЕ ПолеНайдено Тогда
			СКД_Преобразование.ПоляИтога.Удалить(ПолеИтога);
		КонецЕсли; 
		
		Индекс = Индекс - 1;
		
	КонецЦикла; 
	
	
КонецПроцедуры

// Настраивает СКД преобразования для вывода расшифровки значения одного операнда
//
// Параметры:
//  СКД_Преобразование   - СхемаКопоновкиДанных - схема преобразования документа
//  КоллекцияНаборов  - НаборыДанных - коллекция наборов, из которой необходимо удалить поля
//  МассивПолей  - Массив - Поля, которые должны остаться в схеме
//
Процедура НастроитьСхемуДляРасшифровки(СКД_Преобразование, КоллекцияНаборов, МассивПолей)

	//Удаляем лишние поля
	УдалитьПоля(КоллекцияНаборов.Поля, МассивПолей);
	Для каждого Набор Из КоллекцияНаборов.Элементы Цикл
		УдалитьПоля(Набор.Поля, МассивПолей);
	КонецЦикла;
	
	Настройки = СКД_Преобразование.НастройкиПоУмолчанию;
	
	//Удаляем лишние связи
	СКД_Преобразование.СвязиНаборовДанных.Очистить();
	СКД_Преобразование.ПоляИтога.Очистить();
	Настройки.Структура.Очистить();
	
	ГруппировкаРегистратор = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	Для каждого Поле Из МассивПолей Цикл
	
		ПолеРегистратор = ГруппировкаРегистратор.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеРегистратор.Использование = Истина;
		ПолеРегистратор.Поле = Новый ПолеКомпоновкиДанных(Поле);
	
	КонецЦикла; 
	
	ВыбранныеПоляДляРегистратора = ГруппировкаРегистратор.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляРегистратора.Использование = Истина;

КонецПроцедуры 

// Удаление полей компоновки
//
// Параметры:
// Поля             - ПоляНабораДанныхСхемыКомпоновкиДанных - Коллекция полей, из которых удаляем лишние
// МассивПолей        - Массив - Массив полей, которые нужно оставить
//
Процедура УдалитьПоля(Поля, МассивПолей)
	
	МассивУдаляемыхПолей = Новый Массив();
	
	Для каждого Поле Из Поля Цикл
		Если МассивПолей.Найти(Поле.Поле) = Неопределено Тогда
			МассивУдаляемыхПолей.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Поле Из МассивУдаляемыхПолей Цикл
		Поля.Удалить(Поле);
	КонецЦикла; 

КонецПроцедуры

// Функция создает таблицу значений для заполнения периодами плана
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с колонками периодов
//
Функция ШаблонТаблицыПериодов() Экспорт
	
	ОписаниеТиповЧ = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0); 
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповДата = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерКолонки",  ОписаниеТиповЧ);
	ТаблицаПериодов.Колонки.Добавить("ИмяКолонки",    ОписаниеТиповСтрока);
	ТаблицаПериодов.Колонки.Добавить("Активная",      ОписаниеТиповБулево);
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",    ОписаниеТиповДата);
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания", ОписаниеТиповДата);
	ТаблицаПериодов.Колонки.Добавить("Заголовок",     ОписаниеТиповСтрока);
	ТаблицаПериодов.Колонки.Добавить("Замещен",       ОписаниеТиповБулево);
	
	Возврат ТаблицаПериодов;

КонецФункции 

#КонецОбласти


#КонецОбласти
