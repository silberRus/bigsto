
#Область ПрограммныйИнтерфейс

#Область УправлениеИнтерфейснымиЭлементами

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьВидимостьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭлементовПоМассиву()

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме
//	ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//	ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части
//
Процедура УстановитьВидимостьЭлементовПоМассивуРасширенный(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов,
	Знач ИмяТЧ, Знач ИмяЗаменыТЧ) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(СтрЗаменить(ЭлементМассива, ИмяТЧ, ИмяЗаменыТЧ), ".", "");
		
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
			И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается доступность.
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть доступны на форме.
//
Процедура УстановитьДоступностьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ДоступностьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Доступность <> ДоступностьРеквизита Тогда
			Элементы[ИмяРеквизита].Доступность = ДоступностьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьЭлементовПоМассиву()

// Процедура устанавливает видимость подбора по остаткам расчетов в форме.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Кнопка - КнопкаФормы - Кнопка формы для открытия подбора
//
Процедура УстановитьВидимостьПодбораПоОстаткамРасчетов(ХозяйственнаяОперация, Кнопка) Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	
	Кнопка.Видимость = (МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено);
	
КонецПроцедуры // УстановитьВидимостьПодбораПоОстаткамРасчетов()

// Возвращает форматированный текст представления записи книги покупок в документе
//
// Параметры:
//    Основание - ДокументСсылка - Документ, на основании которого вводится запись книги покупок
//
// Возвращаемое значение:
//    Строка - Представление записи книги покупок
//
Функция ПредставлениеЗаписиКнигиПокупокВАвансовомОтчете(Основание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтрок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата
	|
	|ИЗ
	|	Документ.ЗаписьКнигиПокупок КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Основание
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		СтрокаГиперссылки = Новый ФорматированнаяСтрока(
			НСтр("ru='Оформить запись книги покупок'"), ,
			ЦветаСтиля.ЦветГиперссылки, ,
			"ВвестиНовуюЗаписьКнигиПокупок");
		
		МассивСтрок.Добавить(СтрокаГиперссылки);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() > 1 Тогда
			
			ТекстЗаписьКнигиПокупок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Записи книги покупок (%1)'"), Строка(Выборка.Количество()));
			
			СтрокаГиперссылки = Новый ФорматированнаяСтрока(
				ТекстЗаписьКнигиПокупок, ,
				ЦветаСтиля.ЦветГиперссылки, ,
				"ОткрытьСписокЗаписейКнигиПокупок");
			
		Иначе
			
			Выборка.Следующий();
			
			СтрокаГиперссылки = Новый ФорматированнаяСтрока(
				НСтр("ru='Запись книги покупок'") + ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Выборка), ,
				ЦветаСтиля.ЦветГиперссылки, ,
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
				
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаГиперссылки);
		
		МассивСтрок.Добавить("   ");
		
		СтрокаГиперссылкиДобавить = Новый ФорматированнаяСтрока(
			НСтр("ru='Добавить'"), ,
			ЦветаСтиля.ЦветГиперссылки, ,
			"ДобавитьЗаписьКнигиПокупок");
			
		МассивСтрок.Добавить(СтрокаГиперссылкиДобавить);
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

#Область ВидимостьОпераций

// Процедура устанавливает видимость выбора оплаты платежной картой в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора формы оплаты
//
Процедура УстановитьВидимостьОплатыПлатежнойКартой(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению("ПлатежнаяКарта");
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции поступления из другой кассы
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПередачиМеждуКассами(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции перечисления на другой счет
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПеречисленияНаДругойСчет(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций с кассами ККМ в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийСКассамиККМ(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС в другую организацию в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПередачиМеждуОрганизациями(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций внутренней передачи ДС в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийВнутреннейПередачи(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции оплаты таможенного платежа в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПеречислениеТаможне(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС по договорам кредитов и депозитов.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаКредитовИДепозитов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыНаличные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыБезналичные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииКонвертацияВалюты(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций по зарплате в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПоЗарплате(Поле) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		
		МассивОперацийПоЗарплате = Новый Массив;
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
		
		Для Каждого Элемент Из МассивОперацийПоЗарплате Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Элемент);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций эквайринга в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийЭквайринга(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций выдачи и погашения займов сотрудникам в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийЗаймамСотрудникам(Поле) Экспорт
	
	ОперацииПоЗаймамНеДоступны = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	
	Если ОперацииПоЗаймамНеДоступны Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииОплатаЛизингодателю(Поле) Экспорт
	
	ИспользоватьЛизинг = Ложь;
	Если НЕ ИспользоватьЛизинг Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочееПоступлениеДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПрочееПоступлениеДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочаяВыдачаДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура устанавливает заголовок колонки "Сумма платежа".
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//	Элементы - ВсеЭлементыФормы - Коллекция элементов управляемой формы.
//
Процедура УстановитьЗаголовокСуммыПлатежа(Валюта, Элементы) Экспорт
	
	Элементы.РасшифровкаПлатежаСумма.Заголовок = СтрШаблон(НСтр("ru = 'Сумма (%1)'"), Строка(Валюта));
	
	Если Элементы.Найти("РасшифровкаПлатежаСуммаНДС") <> Неопределено Тогда
		Элементы.РасшифровкаПлатежаСуммаНДС.Заголовок = СтрШаблон(НСтр("ru = 'Сумма НДС (%1)'"), Строка(Валюта));
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокСуммыПлатежа()

// Подмена префикса организации префиксом кассовой книги
//
//Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
//    Префикс - Строка - префикс объекта, который нужно изменить
//
Процедура УстановитьПрефиксИнформационнойБазыИКассовойКнигиНомеруДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс);
	
	РеквизитыПрефиксации = "";
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЛистКассовойКниги")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств") Тогда
		РеквизитыПрефиксации = ПолучитьПрефиксациюКассыКассовойКниги(Источник.КассоваяКнига);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		РеквизитыПрефиксации = ПолучитьПрефиксациюКассыКассовойКниги(Источник.Касса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПрефиксации)
		И ЗначениеЗаполнено(РеквизитыПрефиксации.ИспользоватьПрефикс)
		И РеквизитыПрефиксации.ИспользоватьПрефикс Тогда
		
		ПрефиксКассовойКниги = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(РеквизитыПрефиксации.Префикс, 2, "0", "Слева");
		Префикс = ПрефиксКассовойКниги + Прав(Префикс, СтрДлина(Префикс) - 2);
	КонецЕсли;
	
КонецПроцедуры

// Сброс номера документа при необходимости его изменения
//
// Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    Отказ - Булево - флаг отказа
//    РежимЗаписи - РежимЗаписиДокумента - Режим записи
//    РежимПроведения - РежимПроведенияДокумента - Режим проведения
// 
Процедура ПроверитьНомерДокументаПоДатеОрганизацииКассовойКнигеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПрефиксацияОбъектовСобытия.ПроверитьНомерДокументаПоДатеИОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	ИначеЕсли Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПрефиксацииДоИзменения = "";
	РеквизитыПрефиксацииПослеИзменения = "";
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЛистКассовойКниги")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств") Тогда
		
		КассоваяКнигаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "КассоваяКнига");
		РеквизитыПрефиксацииДоИзменения = ПолучитьПрефиксациюКассыКассовойКниги(КассоваяКнигаСсылка);
		
		РеквизитыПрефиксацииПослеИзменения = ПолучитьПрефиксациюКассыКассовойКниги(Источник.КассоваяКнига);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		КассаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Касса");
		РеквизитыПрефиксацииДоИзменения = ПолучитьПрефиксациюКассыКассовойКниги(КассаСсылка);
		
		РеквизитыПрефиксацииПослеИзменения = ПолучитьПрефиксациюКассыКассовойКниги(Источник.Касса);
	КонецЕсли;
	
	ПрефиксДоИзменения = ?(
		ЗначениеЗаполнено(РеквизитыПрефиксацииДоИзменения)
		И ЗначениеЗаполнено(РеквизитыПрефиксацииДоИзменения.ИспользоватьПрефикс)
		И РеквизитыПрефиксацииДоИзменения.ИспользоватьПрефикс,
		РеквизитыПрефиксацииДоИзменения.Префикс,
		"");
		
	ПрефиксПослеИзменения = ?(
		ЗначениеЗаполнено(РеквизитыПрефиксацииПослеИзменения)
		И ЗначениеЗаполнено(РеквизитыПрефиксацииПослеИзменения.ИспользоватьПрефикс)
		И РеквизитыПрефиксацииПослеИзменения.ИспользоватьПрефикс,
		РеквизитыПрефиксацииПослеИзменения.Префикс,
		"");
	
	Если ПрефиксДоИзменения <> ПрефиксПослеИзменения Тогда
		Источник.Номер = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для кассы.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементКасса - ПолеФормы - Поле для ввода кассы.
//
Процедура УстановитьПараметрыВыбораКассы(Объект, ЭлементКасса) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.Касса)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
		 И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	КонецЕсли;
	
	ЭлементКасса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораКассы()

// Процедура устанавливает параметры выбора для банковского счета.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчета(Объект, ЭлементБанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
		 И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Константы.ВалютаРегламентированногоУчета.Получить()));
	КонецЕсли;
	
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчета()

// Процедура устанавливает параметры выбора для банковского счета получателя.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элемент) Экспорт
	
	МассивСвязиПараметров = Новый Массив;
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаКонвертации"));
	Иначе
		Если Не Объект.Свойство("ПланированиеСуммы")
			Или Объект.Свойство("ПланированиеСуммы") И Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
		КонецЕсли;
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) Тогда
		
		Если Объект.Свойство("ОрганизацияПолучатель") И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОрганизацияПолучатель"));
		Иначе
			СписокОрганизаций = Новый СписокЗначений;
			ПараметрыВыбораОрганизации = Новый Структура;
			ПараметрыВыбораОрганизации.Вставить("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные");
			ПараметрыВыбораОрганизации.Вставить("Организация", Объект.Организация);
			ПараметрыВыбораОрганизации.Вставить("СтрокаПоиска", Неопределено);
			СтандартнаяОбработка = Ложь;
			ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(СписокОрганизаций, ПараметрыВыбораОрганизации, СтандартнаяОбработка);
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(СписокОрганизаций.ВыгрузитьЗначения())));
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация))));
	КонецЕсли;
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязиПараметров);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаПолучателя()

// Процедура устанавливает параметры выбора для эквайрингового терминала.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЭквайринговыйТерминал - ПолеФормы - Поле для ввода эквайрингового терминала.
//
Процедура УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, ЭлементЭквайринговыйТерминал) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
		 ИЛИ ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
			ЭлементЭквайринговыйТерминал.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбораЭквайринговогоТерминала()

// Процедура устанавливает параметры выбора для партнера.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементПартнер - ПолеФормы - Поле для ввода партнера.
//
Процедура УстановитьПараметрыВыбораПартнера(Объект, ЭлементПартнер) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	ЭлементПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораПартнера()

// Процедура устанавливает параметры выбора для банковского счета контрагента.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчетКонтрагента - ПолеФормы - Поле для ввода банковского счета контрагента.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, ЭлементБанковскийСчетКонтрагента) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо"));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	КонецЕсли;
	
	ЭлементБанковскийСчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента()

// Процедура устанавливает параметры выбора для заявки на расходование денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЗаявка - ПолеФормы - Поле для ввода заявки на расходование денежных средств.
//
Процедура УстановитьПараметрыВыбораЗаявки(Объект, ЭлементЗаявка) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате", "Объект.ХозяйственнаяОперация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком
		Или  Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация", РежимИзмененияСвязанногоЗначения.НеИзменять));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
	КонецЕсли;
	
	ЭлементЗаявка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	ЭлементЗаявка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораЗаявки()

// Процедура устанавливает параметры выбора для списания денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСписание - ПолеФормы - Поле для ввода списания денежных средств.
//
Процедура УстановитьПараметрыВыбораСписанияДенежныхСредств(Объект, ЭлементСписание) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаКонвертации", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ПодотчетноеЛицо", "Объект.ПодотчетноеЛицо"));
		
	КонецЕсли;
	
	ЭлементСписание.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	ЭлементСписание.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи движения денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи движения денежных средств.
//
Процедура УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, ЭлементСтатья) Экспорт
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		МассивПараметров.Добавить(
			Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперацияПоЗарплате",
				РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
	КонецЕсли;
	ЭлементСтатья.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи расходов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи расходов.
//
Процедура УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элемент) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	
	Если (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"))
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	Иначе
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕСли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Функция возвращает параметры выбора для статьи движения денежных средств.
//
// Параметры:
//    Объект - ДанныеФормыСтруктура - Текущий объект
//    ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//    Параметры - ФиксированныйМассив - массив параметров выбора
//
Функция ПолучитьПараметрыВыбораСтатьиДДС(Объект, ДополнительныеПараметры) Экспорт
	
	МассивПараметров = Новый Массив;
	
	ДоговорКредитаДепозита = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ДоговорКредитаДепозита", ДоговорКредитаДепозита);
	КонецЕсли;
	
	ОплатаПоКредитам = Новый Массив;
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
	
	ПоступленияПоКредитамДепозитам = Новый Массив;
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
	
	Если ОплатаПоКредитам.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		СтрокаРеквизитов = "ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПроцентов,СтатьяДДСКомиссии,СтатьяДДСПоступленияВыдачи";
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКредитаДепозита, СтрокаРеквизитов);
		МассивСтатей = Новый Массив;
		Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСОсновногоДолга);
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПроцентов);
			Если ЗначениеЗаполнено(Реквизиты.СтатьяДДСКомиссии) Тогда
				МассивСтатей.Добавить(Реквизиты.СтатьяДДСКомиссии);
			КонецЕсли;
		Иначе
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПоступленияВыдачи);
		КонецЕсли;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСтатей));
		
	ИначеЕсли ПоступленияПоКредитамДепозитам.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		СтрокаРеквизитов = "ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПроцентов,СтатьяДДСПоступленияВыдачи";
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКредитаДепозита, СтрокаРеквизитов);
		МассивСтатей = Новый Массив;
		Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПоступленияВыдачи);
		Иначе
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСОсновногоДолга);
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПроцентов);
		КонецЕсли;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСтатей)));
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

// Процедура устанавливает параметры выбора договора кредита(депозита, займа)
// и очищает договора кредита (депозита, займа) не соотвествующие текущей хозяйственной операции, организации.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//  ЭлементРасшифровкаПлатежаДоговор - ПолеФормы - Поле для ввода договора кредита (депозита)
//  ОчиститьДоговора - Булево - Если истина тогда очищать в таб.части расшифровка платежа договора кредита (депозита) 
//								не соотвествующие текущей хозяйственной операции
//
Процедура УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, ЭлементРасшифровкаПлатежаДоговор, ОчиститьДоговора = Ложь) Экспорт
	
	ХарактерДоговора = Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация);
	Если ХарактерДоговора = Неопределено Тогда// это не кредитно\депозитная хоз.операция
		Возврат;
	КонецЕсли;
	
	// Определим параметры выбора
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора", ХарактерДоговора));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	// Определимся с отбором по организации
	Организация = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Если НЕ Объект.БанковскийСчет.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчет,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если НЕ Объект.Касса.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Касса,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = Объект.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Организация));
	КонецЕсли;
	
	// Определимся с отбором по валюте
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДоговора.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
	|ГДЕ
	|	НЕ ДанныеДоговора.ПометкаУдаления
	|	И (ДанныеДоговора.Организация = &Организация ИЛИ &ЛюбаяОрганизация)
	|	И (ДанныеДоговора.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагнет)
	|	И ДанныеДоговора.ХарактерДоговора = &ХарактерДоговора
	|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДанныеДоговора.ПорядокОплаты В (
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях),
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВВалюте))");
	Запрос.УстановитьПараметр("Организация"     , Организация);
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Контрагент"      , Объект.Контрагент);
	Запрос.УстановитьПараметр("ЛюбойКонтрагнет" , НЕ ЗначениеЗаполнено(Объект.Контрагент));
	Запрос.УстановитьПараметр("ХарактерДоговора", ХарактерДоговора);
	
	ИмеютсяРасчетыВВалютеОплатаВРублях = Запрос.Выполнить().Выбрать().Следующий();
	Если НЕ ИмеютсяРасчетыВВалютеОплатаВРублях Тогда
		Если НЕ ЗначениеЗаполнено(Валюта) И ЗначениеЗаполнено(Объект.Валюта) Тогда
			Валюта = Объект.Валюта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Валюта) Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Валюта));
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора
	ЭлементРасшифровкаПлатежаДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Определим связей параметров выбора
	МассивСвязей = Новый Массив;
	ОчищатьДоговор = РежимИзмененияСвязанногоЗначения.Очищать;
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", ОчищатьДоговор));
	КонецЕсли;
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент","Объект.Контрагент", ОчищатьДоговор));
		Партнеры = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("Партнер");
		Если Партнеры.Количество() > 0 И ЗначениеЗаполнено(Партнеры[0]) Тогда
			МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер","Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер", ОчищатьДоговор));
		КонецЕсли;
	КонецЕсли;
	ЭлементРасшифровкаПлатежаДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

	// Очистим договора не соотвествующие текущей хозяйственной операции
	Если ОчиститьДоговора Тогда
		МассивДоговоров = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("ДоговорКредитаДепозита");
		РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоговоров, "Организация,ХарактерДоговора");
		Если РеквизитыДоговоров.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКредитаДепозита) Тогда
					Продолжить;
				КонецЕсли;
				Если РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].Организация <> Организация
					ИЛИ РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].ХарактерДоговора <> ХарактерДоговора Тогда
					СтрокаТаблицы.ДоговорКредитаДепозита = Неопределено;
					СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;// есть что очищать
	КонецЕсли;// Необходимо очистить договора кредитов (депозитов)
	
КонецПроцедуры

// Процедура список выбора типов сумм текущей хозяйственной операции.
//
// Параметры:
//	Список - СписокЗначений - список выбора элемента формы
//  ХозОперация - Перечисления.ХозяйственныеОперации - текщая хозяйственная операция
//
Процедура ЗаполнитьСписокТиповСуммКредитовДепозитов(Список, ХозОперация) Экспорт
	
	ТипыСумм = Перечисления.ТипыСуммГрафикаКредитовИДепозитов;
	Список.Очистить();
	Список.Добавить(ТипыСумм.ОсновнойДолг);
	Список.Добавить(ТипыСумм.Проценты);
	Если ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		Список.Добавить(ТипыСумм.Комиссия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список периодов возникновения расходов для платежей в бюджет
//
// Параметры:
//    Список - СписокЗначений - список выбора элемента формы
//    Дата - Дата - Дата, к которой относятся периоды
//
Процедура ЗаполнитьСписокПериодовВозникновенияРасходов(Список, Знач Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Список.Очистить();
	Список.Добавить(НачалоДня(Дата), НСтр("ru = 'Текущий день'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), -1), НСтр("ru = 'Прошлый месяц'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), -1), НСтр("ru = 'Прошлый квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), -1), НСтр("ru = 'Прошлый год'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), 1), НСтр("ru = 'Следующий месяц'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), 3), НСтр("ru = 'Следующий квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), 12), НСтр("ru = 'Следущий год'"));
	
КонецПроцедуры

// Процедура заполняет организацию владельца объекта расчета в табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Текущий объект
//  ИмяДокумента - Строка - Имя документа как в метаданных
//  ИмяТаблицы - Строка - Имя табличной части как в метаданных
//                        В табличной части объект расчетов должен содержаться в поле "Заказа"
//                        Необходимо наличие поля "Организация"
//
Процедура ЗаполнитьВладельцаОбъектаРасчета(Объект, ИмяТаблицы = "РасшифровкаПлатежа", Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки-1 КАК ИндексСтроки,
	|	Таблица.Заказ КАК Заказ
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИндексСтроки КАК ИндексСтроки,
	|	ЕСТЬNULL(Таблица.Заказ.Организация, &Организация) КАК Организация
	|ИЗ
	|	вт КАК Таблица";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Объект[ИмяТаблицы].Выгрузить());
	Запрос.УстановитьПараметр("Организация", ?(Организация = Неопределено, Объект.Организация, Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект[ИмяТаблицы][Выборка.ИндексСтроки].Организация = Выборка.Организация;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ФункцииЗаполненияДокументов

// Функция определяет партнера, соответствующего выбранному контрагенту.
//
// Возвращает ссылку на партнера или Неопределено, если заданный для контрагента партнер не удовлетворяет условиям отбора
//
// Параметры:
//    Контрагент - СправочникСсылка.Контрагенты - контрагент, партнера которого нужно найти
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - необязательное ограничение по хозяйственной операции
//
// Возвращаемое значение:
//    СправочникСсылка.Партнеры - Партнер
//
Функция ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|	И (ВЫБОР КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	ТОГДА
	|		Контрагенты.Партнер.Клиент
	|	КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов))
	|	ТОГДА
	|		Контрагенты.Партнер.ПрочиеОтношения
	|	ИНАЧЕ
	|		Контрагенты.Партнер.Поставщик
	|	КОНЕЦ
	|		ИЛИ &ХозяйственнаяОперация = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ИспользоватьПартнеровКакКонтрагентов)
	|";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Партнер = Выборка.Партнер;
	Иначе
		Партнер = Неопределено;
	КонецЕсли;
	
	Возврат Партнер;

КонецФункции // ПолучитьПартнераПоКонтрагенту()

// Процедура заполняет значения полей "БИК" и "КоррСчет".
//
// Параметры:
//    Банк - СправочникСсылка.КлассификаторБанков - Банк
//    Бик - Строка - БИК банка
//    КоррСчет - Строка - Корреспондентский счет банка
//
Процедура ЗаполнитьБИКиКоррСчет(Банк, Бик, КоррСчет) Экспорт

	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Код КАК БИК,
	|	КоррСчет КАК КоррСчет
	|ИЗ
	|	Справочник.КлассификаторБанков КАК Банки
	|ГДЕ
	|	Банки.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Бик = Выборка.БИК;
		КоррСчет = Выборка.КоррСчет;
	КонецЕсли;

КонецПроцедуры

// Процедура получает банк по указанному БИК или корреспондентскому счету.
//
// Параметры:
//	Поле - Строка - Имя поля, в котором произведен выбор значения.
//	Значение - Строка - Значение, выбранное в поле.
//	Банк - СправочникСсылка.КлассификаторБанков - Значение поля для указания банка
//	БИК - Строка - БИК банка
//	КоррСчет - Строка - Корреспондентский счет банка
//
// Возвращаемое значение:
//	СписокЗначений - Список банков для интерактивного выбора.
//
Функция ПолучитьСписокБанковПоРеквизитам(Поле, Значение, Банк, БИК, КоррСчет) Экспорт

	СписокБанков = Новый СписокЗначений;
	
	// Если значение не выбрано, очистим значение банка.
	Если ПустаяСтрока(Значение) Тогда
	
		Банк = Справочники.КлассификаторБанков.ПустаяСсылка();
		БИК = "";
		КоррСчет = "";
		
		Возврат СписокБанков;
		
	КонецЕсли;
		
	ТаблицаБанков = Новый ТаблицаЗначений;
	Колонки = ТаблицаБанков.Колонки;
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("КоррСчет");
	
	ЭтоБИК = Ложь;
	ЭтоКоррСчет = Ложь;
	Если СтрНайти(Поле, "БИК") <> 0 Тогда
		ЭтоБИК = Истина;
	ИначеЕсли СтрНайти(Поле, "КоррСчет") <> 0 Тогда
		ЭтоКоррСчет = Истина;
	КонецЕсли;
	
	Если (ЭтоБИК И СтрДлина(Значение) = 9)
	 ИЛИ (ЭтоКоррСчет И СтрДлина(Значение) = 20)
	Тогда
		
		Если ЭтоБИК Тогда
			СтруктураОтбора = Новый Структура("Код", Значение);
			
		ИначеЕсли ЭтоКоррСчет Тогда
			СтруктураОтбора = Новый Структура("КоррСчет", Значение);
			
		КонецЕсли;
		
		Выборка = Справочники.КлассификаторБанков.Выбрать(,, СтруктураОтбора, "Код Возр");
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
				
	КонецЕсли;
	
	Если ТаблицаБанков.Количество() = 1 Тогда
		ДанныеБанка = ТаблицаБанков[0];
		
		Банк = ДанныеБанка.Ссылка;
		БИК = ДанныеБанка.Код;
		КоррСчет = ДанныеБанка.КоррСчет;
		СписокБанков.Добавить(Банк);
		
	ИначеЕсли ТаблицаБанков.Количество() > 1 Тогда
		МассивБанков = ТаблицаБанков.ВыгрузитьКолонку("Ссылка");
		СписокБанков.ЗагрузитьЗначения(МассивБанков);
		
	КонецЕсли;
	
	Возврат СписокБанков;
	
КонецФункции

// Функция получает валюту, соответствующую номеру банковского счета.
// 6-8 разряды номера банковского счета соответствуют коду валюты.
// Для рублей используется код 810.
//
// Параметры:
//	НомерСчета - Число - Номер банковского счета
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - Валюта банковского счета
//
Функция ПолучитьВалютуПоНомеруСчета(НомерСчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|");
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции // ПолучитьВалютуПоНомеруСчета()

// Функция помещает расшифровку платежа во временное хранилище и возвращает адрес.
//
// Параметры:
//    РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть расшифровки
//    УникальныйИдентификатор - Строка - Идентификатор
//
// Возвращаемое значение:
//    Строка - Адрес временного хранилища
//
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа, УникальныйИдентификатор) Экспорт

	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		РасшифровкаПлатежа.Выгрузить(),
		УникальныйИдентификатор);
		
	Возврат АдресПлатежейВХранилище;
	
КонецФункции // ПоместитьРасшифровкуПлатежаВХранилище()

// Процедура заполняет кассу, банковский счет или эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты заявки
//	ДанныеЗаполнения - Структура - Данные для заполнения документа
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, ВалютаПлатежа = Неопределено) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты = ФормаОплаты;
		СтруктураПараметров.Касса       = ДанныеЗаполнения.Касса;
		СтруктураПараметров.Валюта      = ВалютаПлатежа;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		Если Не ЗначениеЗаполнено(Касса) Тогда
			ТекущаяКасса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.Кассы.ПолучитьРеквизитыКассы(ТекущаяКасса).Организация
				Тогда
					Касса = ТекущаяКасса;
				КонецЕсли;
			Иначе
				Касса = ТекущаяКасса;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			ДанныеЗаполнения.Вставить("Касса", Касса);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты    = ФормаОплаты;
		СтруктураПараметров.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		СтруктураПараметров.Валюта         = ВалютаПлатежа;
		
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			ТекущийБанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ТекущийБанковскийСчет).Организация
				Тогда
					БанковскийСчет = ТекущийБанковскийСчет;
				КонецЕсли;
			Иначе
				БанковскийСчет = ТекущийБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
		
		ЭквайринговыйТерминал =
			Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ДанныеЗаполнения.Организация);
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ТекущийЭквайринговыйТерминал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийЭквайринговыйТерминал", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ТекущийЭквайринговыйТерминал).Организация
				Тогда
					ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
				КонецЕсли;
			Иначе
				ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Реквизиты = Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("Валюта", Реквизиты.Валюта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет документ на основании заявок на расходование денежных средств.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты (зависит от вводимого документа оплаты)
//
Процедура ЗаполнитьДокументПоЗаявкамНаРасходованиеДенежныхСредств(ДанныеЗаполнения, ТабличнаяЧасть, ФормаОплаты) Экспорт
	
	МассивСсылок = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		МассивСсылок.Добавить(ДанныеЗаполнения);
		БанковскийСчетКасса = Неопределено;
		СуммаПлатежа = 0;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			МассивСсылок.Добавить(ДанныеЗаполнения.ДокументОснование);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
			МассивСсылок = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
		БанковскийСчетКасса = ДанныеЗаполнения.БанковскийСчетКасса;
		СуммаПлатежа = ДанныеЗаполнения.Сумма;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Заявка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			Заявка.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			Заявка.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	Заявка.БанковскийСчет КАК БанковскийСчет,
	|	Заявка.Касса КАК Касса,
	|	Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Заявка.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА НЕ Заявка.БанковскийСчетКонтрагента.Закрыт ТОГДА
	|		Заявка.БанковскийСчетКонтрагента
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	Заявка.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВЫБОР КОГДА НЕ Заявка.БанковскийСчетПолучатель.Закрыт ТОГДА
	|		Заявка.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|	Заявка.КассаПолучатель КАК КассаПолучатель,
	|	Заявка.Подразделение КАК Подразделение,
	|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Заявка.ВалютаКонвертации КАК ВалютаКонвертации,
	|	Заявка.СуммаПослеКонвертации КАК СуммаПослеКонвертации,
	|	Заявка.КурсКонвертации КАК КурсКонвертации,
	|	Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|	Заявка.НомерВедомостиНаВыплатуЗарплаты КАК НомерВедомостиНаВыплатуЗарплаты,
	|	Заявка.ДатаВедомостиНаВыплатуЗарплаты КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	Заявка.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов,
	|	Заявка.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	Заявка.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	Заявка.ДатаАвансовогоОтчета КАК ДатаАвансовогоОтчета,
	|	Заявка.ПеречислениеВБюджет КАК ПеречислениеВБюджет,
	|	Заявка.ТипНалога КАК ТипНалога,
	|	Заявка.НДФЛПоВедомостям КАК НДФЛПоВедомостям,
	|	Заявка.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Заявка.ВидПеречисленияВБюджет КАК ВидПеречисленияВБюджет,
	|	Заявка.КодОКАТО КАК КодОКАТО,
	|	Заявка.ПоказательОснования КАК ПоказательОснования,
	|	Заявка.ПоказательПериода КАК ПоказательПериода,
	|	Заявка.ПоказательНомера КАК ПоказательНомера,
	|	Заявка.ПоказательДаты КАК ПоказательДаты,
	|	Заявка.ПоказательТипа КАК ПоказательТипа,
	|	Заявка.СтатусСоставителя КАК СтатусСоставителя,
	|	Заявка.КодБК КАК КодБК,
	|	Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) КАК ЭтоВыплатаЗарплаты,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику))
	|		ТОГДА
	|			Заявка.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Заявка.Контрагент.НаименованиеПолное <> """" ТОГДА
	|					Заявка.Контрагент.НаименованиеПолное
	|				ИНАЧЕ
	|					Заявка.Контрагент.Наименование
	|			КОНЕЦ
	|	КОНЕЦ КАК Выдать,
	|	Истина КАК ОплатаПоЗаявкам,
	|	Заявка.ИННПлательщика КАК ИННПлательщика,
	|	Заявка.КПППлательщика КАК КПППлательщика,
	|	Заявка.ТекстПлательщика КАК ТекстПлательщика,
	|	Заявка.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Заявка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Заявка.Договор КАК Договор,
	|	Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			3
	|	КОНЕЦ КАК ОчередностьПлатежа
	|
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств В (&МассивСсылок)
	|		И (БанковскийСчетКасса В (&БанковскиеСчетаКассы) ИЛИ &НеОграничиватьПоБанковскомуСчетуКассе)
	|	) КАК ДенежныеСредства
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	БанковскиеСчетаКассы = Новый Массив;
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		БанковскиеСчетаКассы.Добавить(БанковскийСчетКасса);
		БанковскиеСчетаКассы.Добавить(Неопределено);
		Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		Запрос.УстановитьПараметр("НеОграничиватьПоБанковскомуСчетуКассе", Ложь);
	Иначе
		Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		Запрос.УстановитьПараметр("НеОграничиватьПоБанковскомуСчетуКассе", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ФормаОплатыЗаявки)
		И ФормаОплаты <> Выборка.ФормаОплатыЗаявки Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Форма оплаты ""%1"" вводимого документа отличается от формы оплаты ""%2"" заявки.'"),
			ФормаОплаты,
			Выборка.ФормаОплатыЗаявки);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта
		И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Текст = НСтр("ru = 'Выбранная операция не соответствует операции возврата оплаты клиенту, для которой предусмотрен эквайринговый платеж.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчетКасса);
		ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ДанныеЗаполнения.Вставить("Касса", БанковскийСчетКасса);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("БанковскийСчетПолучатель", БанковскийСчетПолучатель);
		КассаПолучатель = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("КассаПолучатель", КассаПолучатель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СуммаПлатежа) Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаПлатежа);
	Иначе
		ДанныеЗаполнения.Вставить("СуммаДокумента", РезультатЗапроса[1].Выгрузить()[0].Сумма);
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(Выборка.ПодотчетноеЛицо).Представление;
		Если Не ЗначениеЗаполнено(ДокументФизическогоЛица) Тогда
			ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(
				Выборка.ПодотчетноеЛицо,
				Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ).Представление;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		ДанныеЗаполнения.Вставить("ПоДокументу", ДокументФизическогоЛица);
	КонецЕсли;
	
	Если Выборка.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения);
	Иначе
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, Выборка.Валюта);
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ДанныеЗаполнения.КурсКонвертации <> 0
		И ДанныеЗаполнения.СуммаПослеКонвертации = 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаПослеКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Выборка.ВалютаЗаявки, ДанныеЗаполнения.Валюта, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыПересчета.Кратность / (КурсВалюты.Кратность * КурсВалютыПересчета.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсВалютыПересчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыПересчета.Курс <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ
	|			СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ КАК Сумма,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЛизинга,
	|	РасшифровкаПлатежа.ТипПлатежаПоЛизингу,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	//ДанныеСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета *
	|			ВЫБОР
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)) ТОГДА
	|					0.1
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)) ТОГДА
	|					0.18
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ /
	|			(ВЫБОР
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)) ТОГДА
	|					0.1
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)) ТОГДА
	|					0.18
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ + 1)
	|	ИНАЧЕ
	|		СУММА(РасшифровкаПлатежа.СуммаНДС)
	|	КОНЕЦ КАК СуммаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.Заказ,
	|		ЕСТЬNULL(РасшифровкаДокумента.Сумма, Заявка.СуммаДокумента) КАК Сумма,
	|		ВЫБОР
	|			КОГДА Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		РасшифровкаДокумента.СуммаНДС КАК СуммаНДС,
	|		Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|		Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|		Заявка.Валюта КАК Валюта
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		ПО
	|			РасшифровкаДокумента.Ссылка = Заявка.Ссылка
	|		
	|	ГДЕ
	|		Заявка.Ссылка В(&МассивСсылок)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.Заказ,
	|		-РасшифровкаДокумента.Сумма,
	|		ВЫБОР
	|			КОГДА РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				-РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		-РасшифровкаДокумента.СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = РасшифровкаДокумента.Ссылка
	|			
	|	ГДЕ
	|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.Заказ,
	|		-РасшифровкаДокумента.Сумма,
	|		ВЫБОР
	|			КОГДА РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				-РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ссылка.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		-РасшифровкаДокумента.СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = РасшифровкаДокумента.Ссылка
	|	ГДЕ
	|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивСсылок)
	|	)
	|	КАК РасшифровкаПлатежа
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			КурсыВалют КАК КурсыВалют
	|		ПО
	|			РасшифровкаПлатежа.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЛизинга,
	|	РасшифровкаПлатежа.ТипПлатежаПоЛизингу,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	//ГруппировкаСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.ПланированиеСуммы,
	|	КурсыВалют.КоэффициентПересчета
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов)
	|			ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ > 0
	|	
	|УПОРЯДОЧИТЬ ПО
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|";
	
	
	Запрос.УстановитьПараметр("Валюта", ДанныеЗаполнения.Валюта);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличнаяЧасть.Очистить();
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
	Пока Выборка.Следующий() Цикл
		Сумма = Мин(Выборка.Сумма, СуммаДокумента);
		ПересчитатьНДС = (Сумма <> Выборка.Сумма);
		СуммаДокумента = СуммаДокумента - Сумма;
		Если Сумма > 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
			
			Если ПересчитатьНДС Тогда
				СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Истина));
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.СуммаДокумента <> ТабличнаяЧасть.Итог("СуммаВзаиморасчетов") Тогда
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
	КонецЕсли;
	
КонецПроцедуры


// Заполняет таблицу остатками денежных средств к выплате по заявкам
//
// Параметры:
//    ДанныеОтбора - Структура - содержит значения отбора заявок
//    ТабличнаяЧасть - ДанныеФормыКоллекция - заполняемая таблица
//
Процедура ЗаполнитьПоОстаткамЗаявокНаРасходованиеДенежныхСредств(ДанныеОтбора, ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыПересчета.Кратность / (КурсВалюты.Кратность * КурсВалютыПересчета.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДатаСеанса, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДатаСеанса, Валюта = &Валюта) КАК КурсВалютыПересчета
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыПересчета.Курс <> 0
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.Номер  КАК НомерЗаявки,
	|	Заявка.Дата   КАК ДатаЗаявки,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаВВалюте,
	|	ДенежныеСредства.СуммаОстаток * КурсыВалют.КоэффициентПересчета КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		Организация = &Организация
	|		И Получатель = &Получатель
	|		И БанковскийСчетКасса В (&БанковскиеСчетаКассы)) КАК ДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО Заявка.Валюта = КурсыВалют.Валюта
	|	
	|ГДЕ
	|	Заявка.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И (Заявка.ФормаОплатыЗаявки = &ФормаОплаты ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (Заявка.Валюта = &Валюта ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|	И Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|";
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", ДанныеОтбора.Валюта);
	Запрос.УстановитьПараметр("Организация", ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("ФормаОплаты", ДанныеОтбора.ФормаОплаты);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДанныеОтбора.ХозяйственнаяОперация);
	
	БанковскиеСчетаКассы = Новый Массив;
	БанковскиеСчетаКассы.Добавить(ДанныеОтбора.БанковскийСчетКасса);
	БанковскиеСчетаКассы.Добавить(Неопределено);
	Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
	
	Получатель = Неопределено;
	Если ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		Получатель = ДанныеОтбора.ПодотчетноеЛицо;
		
	ИначеЕсли ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Если ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.БанковскийСчетПолучатель, "Владелец");
		ИначеЕсли ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.КассаПолучатель, "Владелец");
		КонецЕсли;
	Иначе
		Получатель = ДанныеОтбора.Контрагент;
	КонецЕсли;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	ТабличнаяЧасть.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ПредставлениеЗаявки = СтрШаблон(" %1 " + НСтр("ru='от %2'"), Выборка.НомерЗаявки, Формат(Выборка.ДатаЗаявки, "ДЛФ=D"));
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет документ на основании распоряжения на перемещение денежных средств.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств - Документ - основание
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличныеЧасти - Табличная часть "Расшифровка платежа" документа
//
Процедура ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств(
	Знач ДокументОснование,
	ДокументОбъект,
	ДанныеЗаполнения,
	РасшифровкаПлатежа = Неопределено
	) Экспорт
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК РаспоряжениеНаПеремещениеДенежныхСредств,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Статус КАК Статус,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.Касса
	|	КОНЕЦ КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КассаПолучатель,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк)
	|		) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаДокумента
	|ИЗ
	|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|			ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|		) КАК ДенежныеСредства
	|	ПО
	|		Истина
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (&МассивОпераций)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	МассивОпераций = Новый Массив;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
		ПредставлениеДокумента = НСтр("ru = 'Приходный кассовый ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		ПредставлениеДокумента = НСтр("ru = 'Расходный кассовый ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru = 'Списание безналичных ДС'");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить %1 на основании документа %2'"),
			ПредставлениеДокумента,
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Выборка.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено к оплате'");
			ВызватьИсключение Текст;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств()

// Процедура заполняет статью ДДС в шапке документа по хозяйственной операции.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция
//
Процедура ЗаполнитьСтатьюДвиженияДенежныхСредств(ДокументОбъект, ДанныеЗаполнения, ХозяйственнаяОперация) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			
			Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты 
				И ДанныеЗаполнения.Свойство("ХозяйственнаяОперацияПоЗарплате") Тогда
				
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате));
					
			Иначе
					
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация));
					
			КонецЕсли;
			
		Иначе
			ДокументОбъект.СтатьяДвиженияДенежныхСредств =
				ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьюДвиженияДенежныхСредств()


// Функция формирует текст строки "В том числе НДС" платежа.
//
// Параметры:
//    ВалютаДокумента - Число - Валюта документа
//    РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть Расшифровка платежа
//    ДобавлятьТекстВТомЧисле - Булево - Добавлять строку "В т.ч." в текст платежа
//
// Возвращаемое значение:
//    Строка - Текст суммы НДС платежа
//
Функция ТекстСуммаНДСПлатежа(ВалютаДокумента, РасшифровкаПлатежа, ДобавлятьТекстВТомЧисле) Экспорт
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		ТаблицаНДС = РасшифровкаПлатежа.Скопировать(, "СтавкаНДС, СуммаНДС");
	Иначе
		ТаблицаНДС = РасшифровкаПлатежа.Выгрузить(, "СтавкаНДС, СуммаНДС");
	КонецЕсли;
	ТаблицаНДС.Свернуть("СтавкаНДС", "СуммаНДС");
	
	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ПредставлениеВалюты = "руб.";
	Иначе
		ПредставлениеВалюты = СокрЛП(ВалютаДокумента);
	КонецЕсли;
	
	ТекстНазначениеПлатежаНДС = "";
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			Продолжить;
		КонецЕсли;
		ТекстНазначениеПлатежаНДС = ТекстНазначениеПлатежаНДС
			+ ?(ПустаяСтрока(ТекстНазначениеПлатежаНДС), "", ", ")
			+ НСтр("ru = 'НДС'") + " (" + СтрокаТаблицы.СтавкаНДС + ") "
			+ Формат(СтрокаТаблицы.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=") + " " + ПредставлениеВалюты;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТекстНазначениеПлатежаНДС) Тогда
		ТекстНазначениеПлатежаНДС = НСтр("ru = 'Без налога (НДС)'");
	Иначе
		Если ДобавлятьТекстВТомЧисле Тогда
			ТекстНазначениеПлатежаНДС = НСтр("ru = 'В т.ч.'") + " " + ТекстНазначениеПлатежаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНазначениеПлатежаНДС;
	
КонецФункции

// Процедура заполняет документ на основании договора кредита (депозита).
//
// Параметры:
//	ДоговорКредитаДепозита - СправочникСсылка.ДоговорыКредитовИДепозитов - Договор - основание
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//  ЭтоПоступление - Булево - вид движения денежных средств
//
Процедура ЗаполнитьПоДоговоруКредитаДепозита(Знач ДоговорКредитаДепозита, ДанныеЗаполнения, РасшифровкаПлатежа, ЭтоПоступление) Экспорт
	
	ДанныеЗаполнения = Справочники.ДоговорыКредитовИДепозитов.ДанныеЗаполненияДокументаДДС(ДоговорКредитаДепозита, ЭтоПоступление);
	РасшифровкаПлатежа.Загрузить(ДанныеЗаполнения.РасшифровкаПлатежа);
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

// Очищает банковский счет организации, если он принадлежит другой организации.
// Заполняет по умолчанию, если банковский счет не заполнен.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Проверяемый банковский счет
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности
//
Процедура ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Знач Организация, БанковскийСчет, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецСчета = Неопределено;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецСчета Тогда
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Очищает кассу организации, если она принадлежит другой организации.
// Заполняет по умолчанию, если касса не заполнена.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Касса - СправочникСсылка.Кассы - Проверяемая касса
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности
//
Процедура ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Знач Организация, Касса, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецКассы = Неопределено;
	Если ЗначениеЗаполнено(Касса) Тогда
		ВладелецКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецКассы Тогда
		Касса = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
	СтруктураПараметров.Касса 					= Касса;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Очищает реквизиты платежей в бюджет после проверки даты применения Приказа 107н 
//
// Параметры:
//	Объект - ДокументСсылка - Документ оплаты.
//	ПредыдущийПериод - Дата - исходный период (до изменения)
//	НовыйПериод - Дата - новый период
//
Процедура ПриИзмененииПравилПлатежейВБюджет(Объект, ПредыдущийПериод, НовыйПериод) Экспорт
	ДатаНачалаПримененияПриказа107н = Константы.ДатаНачалаПримененияПриказа107н.Получить();
	
	ДействовалиНовыеПравила = ПредыдущийПериод >= ДатаНачалаПримененияПриказа107н;
	ДействуютНовыеПравила   = НовыйПериод >= ДатаНачалаПримененияПриказа107н;
	
	Если ДействовалиНовыеПравила <> ДействуютНовыеПравила Тогда
		Объект.КодОКАТО = "";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательНомера = "";
		Объект.ПоказательДаты = "";
		Объект.ПоказательТипа = "";
	КонецЕсли;
КонецПроцедуры

// Выбирает перечень КПП подразделений организации
//
// Параметры:
//    Организация - СправочникСсылка.Организации - Организация, для которой определяет перечень КПП
//
// Возвращаемое значение:
//    Массив - список КПП
//
Функция СписокКППОрганизации(Организация) Экспорт
	
	СписокВыбораКПП = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Регистрации.РегистрацияВНалоговомОргане.КПП, """")  КАК КПП,
	|	ЕСТЬNULL(Регистрации.Подразделение.Наименование, """")       КАК Подразделение,
	|	Регистрации.РегистрацияВНалоговомОргане                      КАК Ссылка
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|ГДЕ
	|	Регистрации.Организация = &Организация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Организации.РегистрацияВНалоговомОргане.КПП, ""0""),
	|	Организации.Наименование,
	|	Организации.РегистрацияВНалоговомОргане
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.ОбособленноеПодразделение
	|	И НЕ Организации.ПометкаУдаления
	|	И Организации.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Регистрации.РегистрацияВНалоговомОргане.КПП, """")  КАК КПП,
	|	ЕСТЬNULL(Регистрации.Подразделение.Наименование, """")       КАК Подразделение,
	|	Регистрации.РегистрацияВНалоговомОргане                      КАК Ссылка
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|ГДЕ
	|	Регистрации.Организация.ГоловнаяОрганизация = &Организация
	|
	|;
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.КПП КАК КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[1].Выбрать();
	Если Выборка.Следующий() Тогда
		КПП = Новый Структура("КПП, Подразделение, Ссылка");
		ЗаполнитьЗначенияСвойств(КПП, Выборка);
		СписокВыбораКПП.Добавить(КПП);
	КонецЕсли;
	
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.КПП) Тогда
			КПП = Новый Структура("КПП, Подразделение, Ссылка");
			ЗаполнитьЗначенияСвойств(КПП, Выборка);
			СписокВыбораКПП.Добавить(КПП);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбораКПП;
	
КонецФункции

// Фукнция возвращает валюту платежа по документу
//
// Параметры:
//  ФормаОплаты - Перечесление.ФормыОплаты - Форма оплаты документа.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизации - Банковский счет документа.
//  Касса - СправочникСсылка.Кассы - Касса документа.
//
// Возвращаемое значение:
//  Валюта - СправочникСсылка.Валюты - Валюта платежа.
Функция ПолучитьВалютуОплаты(ФормаОплаты = Неопределено, БанковскийСчет = Неопределено, Касса = Неопределено) Экспорт
	
	Если (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная ИЛИ НЕ ЗначениеЗаполнено(ФормаОплаты))
		И ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВалютаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
	ИначеЕсли (ФормаОплаты = Перечисления.ФормыОплаты.Наличная ИЛИ НЕ ЗначениеЗаполнено(ФормаОплаты))
		И ЗначениеЗаполнено(Касса) Тогда
		ВалютаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "ВалютаДенежныхСредств");
	Иначе
		ВалютаОплаты = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВалютаОплаты;
	
КонецФункции

// Создает платежные документы, либо формирует данные заполнения для создания одного платежного документа
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определн автоматически.
//
// Возвращаемое значение:
//    Структура:
//        ОткрыватьФормуПомощника - Булево - Признак необходимости открытия формы помощника создания документов
//        ДокументКСозданию - Структура - Данные заполнения единственного документа
//        ДлительнаяОперация - Структура - Длительная операция создания нескольких документов
//        АдресСтрокГрафика - Строка - Алдрес временного хранилища, в котором содержатся оплачиваемые строки графика
//
Функция ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента) Экспорт
	
	Результат = Новый Структура("ОткрыватьФормуПомощника, ДокументКСозданию, ДлительнаяОперация, АдресСтрокГрафика");
	
	
	ДокументыКСозданию = ДокументыКСозданию(СтрокиГрафика, ТипДокумента);
	
	Если ДокументыКСозданию.Количество() = 1 Тогда
		Результат.Вставить("ОткрыватьФормуПомощника", Ложь);
		Результат.Вставить("ДокументКСозданию", ДокументыКСозданию[0]);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Формирование платежных документов'");
		ВыполняемыйМетод = "ДенежныеСредстваСервер.СоздатьПлатежи";
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументыКСозданию", ДокументыКСозданию);
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
		Результат.Вставить("ДлительнаяОперация", ДлительнаяОперация);
		Результат.Вставить("ОткрыватьФормуПомощника", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Формирует данные для создания документов на основании строк графика платежей
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определн автоматически.
//    Группировать - Булево - Признак необходимости группировки строк графика
//
// Возвращаемое значение:
//    Массив - Структуры с полями "Тип документа" и "Данные заполнения"
//
Функция ДокументыКСозданию(СтрокиГрафика, ТипДокумента, Группировать = Истина) Экспорт
	
	ДокументыКСозданию = Новый Массив;
	ТаблицаОплаты = РегистрыСведений.ГрафикПлатежей.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
		НоваяСтрока = ТаблицаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГрафика);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ОбъектОплаты КАК ОбъектОплаты
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&ТаблицаОплаты КАК ТаблицаОплаты
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОператорТаблицаОплаты = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Для каждого Колонка из ТаблицаОплаты.Колонки Цикл
		ОператорТаблицаОплаты.ВыбираемыеПоля.Добавить("ТаблицаОплаты." + Колонка.Имя);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ТаблицаОплаты", ТаблицаОплаты);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ГрафикПлатежей.ОбъектОплаты КАК ОбъектОплаты,
	|	ГрафикПлатежей.ОбъектОплаты КАК ЗаказКлиента,
	|	ГрафикПлатежей.ОбъектОплаты КАК ЗаказПоставщику,
	|	ГрафикПлатежей.ОбъектОплаты КАК ОснованиеПлатежа,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчет,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК Касса,
	|	ГрафикПлатежей.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ГрафикПлатежей.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ГрафикПлатежей.Организация КАК Организация,
	|	ГрафикПлатежей.Подразделение КАК Подразделение,
	|	ГрафикПлатежей.Валюта КАК Валюта,
	|	ГрафикПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ХозяйственнаяОперацияПоЗарплате, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) КАК ХозяйственнаяОперацияПоЗарплате,
	|	ЕСТЬNULL(ГрафикПлатежей.БанковскийСчетКасса.ВалютаДенежныхСредств, ГрафикПлатежей.Валюта) КАК ВалютаДенежныхСредств,
	|	ЕСТЬNULL(ГрафикПлатежей.БанковскийСчетКасса.ВалютаДенежныхСредств, ГрафикПлатежей.Валюта) КАК ВалютаДокумента,
	|	
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).БанковскийСчетКонтрагента, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) КАК БанковскийСчетКонтрагента,
	|	
	|	ГрафикПлатежей.Сумма КАК СуммаКОплате,
	|	
	|	ГрафикПлатежей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|		ИНАЧЕ
	|			ГрафикПлатежей.ФормаОплаты
	|	КОНЕЦ КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			) ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК Группируется
	|
	|ПОМЕСТИТЬ ТаблицаОплатыПолная
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОплаты КАК ТаблицаОплаты
	|	ПО
	|		ТаблицаОплаты.ОбъектОплаты = ГрафикПлатежей.ОбъектОплаты
	|		И (ТаблицаОплаты.БанковскийСчетКасса = ГрафикПлатежей.БанковскийСчетКасса
	|			ИЛИ ГрафикПлатежей.БанковскийСчетКасса = НЕОПРЕДЕЛЕНО И ТаблицаОплаты.БанковскийСчетКасса = НЕОПРЕДЕЛЕНО)
	|		И ТаблицаОплаты.ДатаПлатежа = ГрафикПлатежей.ДатаПлатежа
	|		И ТаблицаОплаты.ПоступлениеСписание = ГрафикПлатежей.ПоступлениеСписание
	|		И ТаблицаОплаты.ПлательщикПолучатель = ГрафикПлатежей.ПлательщикПолучатель
	|		И ТаблицаОплаты.Организация = ГрафикПлатежей.Организация
	|		И ТаблицаОплаты.Валюта = ГрафикПлатежей.Валюта
	|;
	|////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ТаблицаОплатыПолная
	|ГДЕ
	|	ТаблицаОплатыПолная.ХозяйственнаяОперацияПоЗарплате <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|;
	|////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.ПлательщикПолучатель,
	|	ТаблицаОплаты.БанковскийСчетКонтрагента,
	|	ТаблицаОплаты.ХозяйственнаяОперация,
	|	ТаблицаОплаты.ПоступлениеСписание,
	|	ТаблицаОплаты.ФормаОплаты,
	|	ТаблицаОплаты.Валюта,
	|	ТаблицаОплаты.Группируется,
	|	СУММА(ТаблицаОплаты.СуммаКОплате) КАК СуммаКОплате
	|	
	|ИЗ
	|	ТаблицаОплатыПолная КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.Группируется
	|	И ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.ПлательщикПолучатель,
	|	ТаблицаОплаты.БанковскийСчетКонтрагента,
	|	ТаблицаОплаты.ХозяйственнаяОперация,
	|	ТаблицаОплаты.ПоступлениеСписание,
	|	ТаблицаОплаты.ФормаОплаты,
	|	ТаблицаОплаты.Валюта,
	|	ТаблицаОплаты.Группируется
	|;
	|////////////////////////////////////
	|";
	
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ТаблицаОплаты.ОбъектОплаты                                                  КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)  КАК ХозяйственнаяОперация,
		|	ТаблицаОплаты.Организация                                                   КАК Организация,
		|	ТаблицаОплаты.Подразделение                                                 КАК Подразделение,
		|	ТаблицаОплаты.БанковскийСчетКасса                                           КАК БанковскийСчет,
		|	ЛицевыеСчета.ФизическоеЛицо                                                 КАК ПодотчетноеЛицо,
		|	ЛицевыеСчета.ЛицевойСчет                                                    КАК БанковскийСчетКонтрагента,
		|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств                                 КАК СтатьяДвиженияДенежныхСредств,
		|	ИСТИНА                                                                      КАК ОплатаПоЗаявкам,
		|	СУММА(ЛицевыеСчета.Сумма)                                                   КАК Сумма,
		|	СУММА(ЛицевыеСчета.Сумма)                                                   КАК СуммаДокумента
		|ИЗ
		|	ТаблицаОплатыПолная КАК ТаблицаОплаты
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ЛицевыеСчетаСотрудников КАК ЛицевыеСчета
		|		ПО ЛицевыеСчета.Ссылка = ТаблицаОплаты.ОбъектОплаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК Списания
		|			ПО Списания.ПодотчетноеЛицо = ЛицевыеСчета.ФизическоеЛицо
		|				И Списания.БанковскийСчетКонтрагента = ЛицевыеСчета.ЛицевойСчет
		|				И Списания.ЗаявкаНаРасходованиеДенежныхСредств = ТаблицаОплаты.ОбъектОплаты
		|				И Списания.Проведен
		|ГДЕ
		|	ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
		|	И Списания.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплаты.ОбъектОплаты,
		|	ТаблицаОплаты.Организация,
		|	ТаблицаОплаты.Подразделение,
		|	ТаблицаОплаты.БанковскийСчетКасса,
		|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств,
		|	ЛицевыеСчета.ФизическоеЛицо,
		|	ЛицевыеСчета.ЛицевойСчет
		|";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОплаты = Результат[1].Выгрузить();
	ВыборкаСтроки = Результат[1].Выбрать();
	ВыборкаГруппировки = Результат[2].Выбрать();
	ВыборкаВыплатыЗарплаты = Результат[3].Выбрать();
	
	ОтборПлатежей = Новый Структура;
	Для Каждого Колонка из Результат[2].Колонки Цикл
		ОтборПлатежей.Вставить(Колонка.Имя);
	КонецЦикла;
	ОтборПлатежей.Удалить("СуммаКОплате");
	
	Пока ВыборкаГруппировки.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборПлатежей, ВыборкаГруппировки);
		
		ОтобранныеПлатежи = ТаблицаОплаты.НайтиСтроки(ОтборПлатежей);
		
		Если Не ОтобранныеПлатежи.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
			ТипДокумента = ОпределитьТипСоздаваемогоДокумента(ВыборкаГруппировки);
		КонецЕсли;
		
		ДанныеЗаполнения = Неопределено;
		
		Если ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств")
			Или ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			
			МассивСсылок = Новый Массив;
			Для Каждого СтрокаПлатежа из ОтобранныеПлатежи Цикл
				МассивСсылок.Добавить(СтрокаПлатежа.ОбъектОплаты);
			КонецЦикла;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("ПлательщикПолучатель", ВыборкаГруппировки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаГруппировки.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("Сумма", ВыборкаГруппировки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаГруппировки.Валюта);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", МассивСсылок.Количество() > 1);
		Иначе
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("Касса", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("Контрагент", ВыборкаГруппировки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("Организация", ВыборкаГруппировки.Организация);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаГруппировки.Валюта);
			
			Если ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
				Если ТипДокумента = "ПриходныйКассовыйОрдер" Или ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
					ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
				Иначе
					ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
				КонецЕсли;
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить("Основание", ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаОплаты.Скопировать(ОтобранныеПлатежи)));
		КонецЕсли;
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Пока ВыборкаСтроки.НайтиСледующий(Новый Структура("Группируется", Ложь)) Цикл
		
		ДанныеЗаполнения = Неопределено;
		
		Если ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ВыборкаСтроки.ОбъектОплаты);
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ВыборкаСтроки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("ПлательщикПолучатель", ВыборкаСтроки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаСтроки.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("Сумма", ВыборкаСтроки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", Ложь);
			
		Иначе
			
			Если ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("Организация", ВыборкаСтроки.Организация);
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаСтроки.ХозяйственнаяОперация);
				ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
				ДанныеЗаполнения.Вставить("СуммаДокумента", ВыборкаСтроки.СуммаКОплате);
				
				ДанныеЗаполнения.Вставить("БанковскийСчетОтправитель", ВыборкаСтроки.ОбъектОплаты);
				ДанныеЗаполнения.Вставить("КассаОтправитель", ВыборкаСтроки.ОбъектОплаты);
				ДанныеЗаполнения.Вставить("Контрагент", ВыборкаСтроки.ОбъектОплаты);
				ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаСтроки.БанковскийСчет);
				ДанныеЗаполнения.Вставить("Касса", ВыборкаСтроки.Касса);
				
			Иначе
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаСтроки.БанковскийСчетКасса);
				ДанныеЗаполнения.Вставить("Касса", ВыборкаСтроки.БанковскийСчетКасса);
				ДанныеЗаполнения.Вставить("Контрагент", ВыборкаСтроки.ПлательщикПолучатель);
				ДанныеЗаполнения.Вставить("Организация", ВыборкаСтроки.Организация);
				ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
				ДанныеЗаполнения.Вставить("Основание", ВыборкаСтроки.ОбъектОплаты);
			КонецЕсли;
		КонецЕсли;
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Пока ВыборкаВыплатыЗарплаты.Следующий() Цикл
		
		ДанныеЗаполнения = Новый Структура;
		Для каждого Колонка Из Результат[3].Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаВыплатыЗарплаты);
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Возврат ДокументыКСозданию;
	
КонецФункции

// Создает платежные документы
//
// Параметры:
//    Параметры - Структура - Содержит массив подготовленных данных для заполнения документов
//    АдресРезультата - Строка - Адрес временного хранилища, куда будет помещен массив ссылок на созданные документы
//
Процедура СоздатьПлатежи(Параметры, АдресРезультата) Экспорт
	
	ДокументыКСозданию = Параметры.ДокументыКСозданию;
	КоличествоДокументов = ДокументыКСозданию.Количество();
	Инд = 1;
	
	СозданныеДокументы = Новый Массив;
	Для каждого ДанныеДокумента Из ДокументыКСозданию Цикл
		
		НовыйДокумент = Документы[ДанныеДокумента.ТипДокумента].СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
		НовыйДокумент.Заполнить(ДанныеДокумента.ДанныеЗаполнения);
		
		НовыйДокумент.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			Если НовыйДокумент.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения")
				И НовыйДокумент.ДополнительныеСвойства.ОшибкиЗаполнения <> "" Тогда
				Режим = РежимЗаписиДокумента.Запись;
			Иначе
				Режим = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
		Иначе
			Режим = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		НовыйДокумент.Записать(Режим);
		
		Если НовыйДокумент.Ссылка <> Неопределено Тогда
			СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
		КонецЕсли;
		
		Прогресс = Окр(Инд / КоличествоДокументов * 100);
		ДлительныеОперации.СообщитьПрогресс(Прогресс);
		
		Инд = Инд + 1;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СозданныеДокументы, АдресРезультата);
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, АдресРезультата, "ПомощникФормированияПлатежныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет платежные документы
//
// Параметры:
//    СсылкиНаУдаление - Массив - Ссылки на удаляемые документы
//    АдресРезультата - Строка - Адрес временного хранилища, куда будут помещены ошибки при их наличии
//
Процедура УдалитьПлатежи(СсылкиНаУдаление, АдресРезультата) Экспорт
	
	ДокументыКУдалению = Новый Массив;
	МассивПомеченныхНаУдаление = Новый Массив;
	СписокОшибок = Неопределено;
	ПрепятствующиеУдалению = Новый ТаблицаЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого СсылкаНаУдаление Из СсылкиНаУдаление Цикл
		ДокументОбъект = СсылкаНаУдаление.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
				"Объект.СозданныеДокументы",
				ОписаниеОшибки(),
				Неопределено);
			Продолжить;
		КонецПопытки;
		ДокументыКУдалению.Добавить(СсылкаНаУдаление);
	КонецЦикла;
	
	ТабСсылок = НайтиПоСсылкам(ДокументыКУдалению);
	СтрСообщения = НСтр("ru='Имеются ссылки на объект %1 в %2. Документ не будет удален.'");
	Для каждого Ссылка из ТабСсылок Цикл
		Если ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСКлиентами")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСПоставщиками")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКЗакрытиюМесяца")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.СостоянияОбменСБанками")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ДокументыСОшибкамиПроверкиКонтрагентов")
			Тогда
				Продолжить;
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1]));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
			"Объект.СозданныеДокументы",
			ТекстОшибки,
			Неопределено);
		Индекс = ДокументыКУдалению.Найти(Ссылка[0]);
		Если Индекс <> Неопределено Тогда
			ДокументыКУдалению.Удалить(Индекс);
		КонецЕсли;
		МассивПомеченныхНаУдаление.Добавить(Ссылка[0]);
	КонецЦикла;
	
	Попытка
		УдалитьОбъекты(ДокументыКУдалению, Ложь);
	Исключение
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
			"Объект.СозданныеДокументы",
			ОписаниеОшибки(),
			Неопределено);
	КонецПопытки;
	
	Для каждого СсылкаНаУдаление Из МассивПомеченныхНаУдаление Цикл
		ДокументОбъект = СсылкаНаУдаление.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(СписокОшибок, АдресРезультата);
	
КонецПроцедуры

Функция ОпределитьТипСоздаваемогоДокумента(ДанныеОплаты)
	
	ТипДокумента = Неопределено;
	
	Если ДанныеОплаты.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Списание Тогда
		Если ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ТипДокумента = "СписаниеБезналичныхДенежныхСредств";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТипДокумента = "РасходныйКассовыйОрдер";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			ТипДокумента = "ОперацияПоПлатежнойКарте";
		КонецЕсли;
	ИначеЕсли ДанныеОплаты.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Поступление Тогда
		Если ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТипДокумента = "ПриходныйКассовыйОрдер";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			ТипДокумента = "ОперацияПоПлатежнойКарте";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанками

// Проверяет принадлежность хозяйственной операции к множеству операций по зарплате.
//
// Параметры:
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция
//
// Возвращаемое значение:
//    Булево - Признак принадлежности
//
Функция ОперацияПоЗарплате(ХозяйственнаяОперация) Экспорт
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	
	Если МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выделяет в назначении платежа фиксированную часть без служебных символов, слов менее 2 символов, чисел
//
// Параметры:
//    ВремСтрока - Строка - Преобразуемая строка
//
// Возвращаемое значение:
//    Строка - Форматированная строка назначения
//
Функция ФорматироватьНазначениеПлатежа(Знач ВремСтрока) Экспорт
	
	НедопустимыеСимволы = "0123456789""/\[]:;|=?*<>.,-_(){}+-=№@";
	
	Для Позиция = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ВремСтрока = СтрЗаменить(ВремСтрока, Сред(НедопустимыеСимволы, Позиция, 1), " ");
	КонецЦикла;
	
	МассивСлов = РазложитьСтрокуНазначенияВМассивСлов(ВремСтрока);
	
	СтрокаРезультат = "";
	Для каждого Слово из МассивСлов Цикл
		СтрокаРезультат = СтрокаРезультат + " " + Слово;
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаРезультат);
	
КонецФункции

// Формирует назначение платежа для уплаты налогов
//
// Параметры:
//   КБК - Строка - КБК
//   ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет - Вид налогового обязательства
//   Организация - СправочникСсылка.Организации - Организация
//   Период - Дата - Период
//   ПредставлениеНалоговогоПериода - Строка - Налоговый период строкой
//
// Возвращаемое значение:
//  Строка - назначение платежа
//
Функция НазначениеПлатежаДляУплатыНалогов(КБК, ВидНалоговогоОбязательства, Организация = Неопределено, Знач Период = Неопределено, ПредставлениеНалоговогоПериода = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НазначениеПлатежа = "";
	Если ЗначениеЗаполнено(КБК) Тогда
		ВидНалога         = ДенежныеСредстваПовтИсп.ВидНалогаПоКБК(КБК);
		НазначениеПлатежа = ДенежныеСредстваПовтИсп.НазначениеПлатежаПоКБК(КБК);
		ДатаАктуальности  = Дата('20150101');
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставлениеНалоговогоПериода) И ВидНалоговогоОбязательства <> "Штраф" Тогда
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", ПредставлениеНалоговогоПериода);
	Иначе
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", "");
	КонецЕсли;
	
	// При уплате страховых взносов, как правило, требуется указывать регистрационный номер
	КлючиРеквизитов = "РегистрационныйНомерПФР, ИПРегистрационныйНомерПФР, РегистрационныйНомерФСС, ИПРегистрационныйНомерФСС";
	РеквизитыОрганизации = ?(ЗначениеЗаполнено(Организация), ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, КлючиРеквизитов), Новый Структура(КлючиРеквизитов));
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР>",    РеквизитыОрганизации.РегистрационныйНомерПФР);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР_ИП>", РеквизитыОрганизации.ИПРегистрационныйНомерПФР);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС>",    РеквизитыОрганизации.РегистрационныйНомерФСС);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС_ИП>", РеквизитыОрганизации.ИПРегистрационныйНомерФСС);
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "  ", " ");
	
	Возврат НазначениеПлатежа;
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполненияДокументов

// Функция формирует запрос по табличной части "Расшифровка платежа".
//
// Параметры:
//	РасшифровкаПлатежа - Табличная часть документа
//	Организация - СправочникСсылка.Организации - Организация документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
// Возвращаемое значение:
//	Запрос - запрос по табличной части
//
Функция ЗапросПоТабличнойЧастиРасшифровкаПлатежа(РасшифровкаПлатежа, Организация, ХозяйственнаяОперация = Неопределено, ТипДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ПроверкаСчетаНаОплату
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ВЫБОР
	|	КОГДА ТаблицаДокумента.Заказ ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|		ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Справочник.ДоговорыМеждуОрганизациями) ТОГДА
	|		ТаблицаДокумента.Заказ.Организация НЕ В (&Организация) И ТаблицаДокумента.Заказ.ОрганизацияПолучатель НЕ В (&Организация)
	|	КОГДА ТаблицаДокумента.Заказ ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями ТОГДА
	|		ТаблицаДокумента.Заказ.Организация НЕ В (&Организация)
	|		 И ВЫРАЗИТЬ(ТаблицаДокумента.Заказ КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).Комиссионер НЕ В (&Организация)
	|	КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		ВЫБОР КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СчетНаОплату КАК Документ.СчетНаОплатуКлиенту).Организация ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТаблицаДокумента.СчетНаОплату КАК Документ.СчетНаОплатуКлиенту).Организация НЕ В(&Организация)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ТаблицаДокумента.Заказ.Организация ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ТаблицаДокумента.Заказ.Организация НЕ В(&Организация)
	|		КОНЕЦ
	|	КОНЕЦ
	|	//ОтборПоТипу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = РасшифровкаПлатежа.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	КолонкаЗаказИзДокумента = ТаблицаДокумента.Колонки.Найти("Заказ");
	КолонкаЗаказИзДокумента.Имя = "ЗаказИзДокумента";
	МассивДобавляемыхТипов = Новый Массив;
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	ТаблицаДокумента.Колонки.Добавить("Заказ", Новый ОписаниеТипов(КолонкаЗаказИзДокумента.ТипЗначения, МассивДобавляемыхТипов));
	ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку(КолонкаЗаказИзДокумента), "Заказ");
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьСчетаНаОплатуКлиентам", ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам"));
	
	Если ТипДокумента <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ОтборПоТипу","И НЕ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = &ТипДокумента");
		Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	КонецЕсли;
	
	ДоступныеОрганизации = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЗапросПоДоступнымОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		ЗапросПоДоступнымОрганизациям.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = ЗапросПоДоступнымОрганизациям.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	Возврат Запрос;
	
КонецФункции // ЗапросПоТабличнойЧастиРасшифровкаПлатежа()

// Процедура проверяет заполнение табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	СуммаДокумента - Число - Общая сумма документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок
//
Процедура ПроверитьЗаполнениеРасшифровкиПлатежа(
	ДокументОбъект,
	СуммаДокумента,
	ХозяйственнаяОперация,
	Отказ,
	ФлагОбменСБанками = Ложь,
	ОшибкиЗаполнения = ""
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	
	Если МассивНепроверяемыхОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие сумм документа и табличной части.
	Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0
	   И СуммаДокумента <> ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма")
	Тогда
		Текст = НСтр("ru = 'Сумма по строкам в табличной части должна равняться сумме документа'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РасшифровкаПлатежа[0].Сумма",
				,
				Отказ);
		КонецеСли;
	КонецЕсли;
	
	// Проверим соответствие организации в шапке документа и в табличной части.
	Запрос = ЗапросПоТабличнойЧастиРасшифровкаПлатежа(
		ДокументОбъект.РасшифровкаПлатежа,
		ДокументОбъект.Организация,
		ХозяйственнаяОперация,
		ТипЗнч(ДокументОбъект.Ссылка));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ПроверкаСчетаНаОплату Тогда
			ТекстДокумент = НСтр("ru = 'счете на оплату'");
			ИмяПоля = "СчетНаОПлату";
		Иначе
			ТекстДокумент = НСтр("ru = 'заказе'");
			ИмяПоля = "Заказ";
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			Поле = "УменьшенДолгСтрокой";
			КлючДанных = Неопределено;
		Иначе
			Поле = "РасшифровкаПлатежа[" + (Выборка.НомерСтроки - 1) + "]." + ИмяПоля;
			КлючДанных = ДокументОбъект;
		КонецЕсли;
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Организация в %1 в строке %2 списка ""Расшифровка платежа"" не соответствует организации документа %3'"),
			ТекстДокумент,
			Выборка.НомерСтроки,
			ДокументОбъект.Организация);
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				КлючДанных,
				Поле,
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРасшифровкиПлатежа()

// Процедура проверки заявки на расходование денежных средств, указанной в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьЗаявкуНаРасходованиеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
		И МассивНепроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) = Неопределено Тогда
		
		Если Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
			
			Если Не ДокументОбъект.ОплатаПоЗаявкам Тогда
				Возврат;
			КонецЕсли;
		
			МассивЗаявок = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
			
			Если Не МассивЗаявок.Количество() Тогда
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Представление(ДанныеДокумента.Ссылка) КАК Заявка,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Организация <> &Организация ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВОрганизации,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.ПланированиеСуммы В (
			|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа))
			|		И ДанныеДокумента.Валюта <> &Валюта ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВалюты,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЗаявкаНеУтвержденаКоплате
			|	
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В (&МассивЗаявок)
			|");
		
			Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			Запрос.УстановитьПараметр("Валюта", ДокументОбъект.Валюта);
			Запрос.УстановитьПараметр("ДокументОплатыСсылка", ДокументОбъект.Ссылка);
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				БанковскийСчетКасса = ДокументОбъект.Касса;
			ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
				БанковскийСчетКасса = ДокументОбъект.БанковскийСчет;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("БанковскийСчетКасса", БанковскийСчетКасса);
			
			ТаблицаПроверки = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаПроверки из ТаблицаПроверки Цикл
				
				Если СтрокаПроверки.ЕстьОтличияВОрганизации Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Организация документа %1 не соответствует организации в %2'"),
						ДокументОбъект.Организация,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЕстьОтличияВалюты Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Валюта документа %1 не соответствует валюте в %2'"),
						ДокументОбъект.Валюта,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЗаявкаНеУтвержденаКоплате Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 не утверждена к оплате'"),
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаявкуНаРасходованиеДенежныхСредств()

// ВыборкаРеквизитыШапки - ВыборкаИзРезультатаЗапроса - Выборка
// Процедура проверки распоряжения на перемещение денежных средств, указанного в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивПроверяемыхОпераций = Новый Массив;
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
	   И МассивПроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств)
	Тогда
	
		Реквизиты = Документы.РаспоряжениеНаПеремещениеДенежныхСредств.РеквизитыДокумента(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств);
		Если Реквизиты.Организация <> ДокументОбъект.Организация Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Организация в распоряжении не соответствует организации документа %1'"),
				ДокументОбъект.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Подразделение <> ДокументОбъект.Подразделение Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подразделение в распоряжении не соответствует подразделению документа %1'"),
				ДокументОбъект.Подразделение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено к оплате'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Валюта <> ДокументОбъект.Валюта Тогда
			
			Текст = НСтр("ru = 'Валюта распоряжения не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств()

// Процедура проверяет кассу получателя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуПолучателя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаПолучатель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(ДокументОбъект.Касса)
			И ДокументОбъект.Касса = ДокументОбъект.КассаПолучатель Тогда
			
			Текст = НСтр("ru = 'Одна и та же касса не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаПолучатель, "Владелец, ВалютаДенежныхСредств");
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Владелец Тогда
				
				Текст = НСтр("ru = 'Организация кассы получателя не соответствует организации документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.ВалютаДенежныхСредств Тогда
				Текст = НСтр("ru = 'Валюта кассы получателя не соответствует валюте документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
				И ЗначениеЗаполнено(ДокументОбъект.Касса) И ТипЗнч(ДокументОбъект.КассаПолучатель) <> Тип("СправочникСсылка.КассыККМ") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ПолучателиПлатежейПриПеремещенииДС.ПолучательПлатежа КАК КассаПолучатель
					|ИЗ
					|	Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК ПолучателиПлатежейПриПеремещенииДС
					|ГДЕ
					|	ПолучателиПлатежейПриПеремещенииДС.Ссылка = &Касса");
				Запрос.УстановитьПараметр("Касса", ДокументОбъект.Касса);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой()
					И РезультатЗапроса.Выгрузить().Найти(ДокументОбъект.КассаПолучатель) = Неопределено Тогда
					
					Текст = НСтр("ru = 'Касса получатель недоступна для перемещения денежных средств из кассы документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуПолучателя()

// Процедура проверяет кассу отправителя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуОтправителя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаОтправитель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(ДокументОбъект.Касса)
			И ДокументОбъект.Касса = ДокументОбъект.КассаОтправитель Тогда
			
			Текст = НСтр("ru = 'Одна и та же касса не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаОтправитель, "Владелец, ВалютаДенежныхСредств");
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Владелец Тогда
				
					Текст = НСтр("ru = 'Организация кассы отправителя не соответствует организации документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			ИначеЕсли (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				Или ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
				И ДокументОбъект.Организация = РеквизитыКассы.Владелец Тогда
				
					Текст = НСтр("ru = 'Организация кассы отправителя должна отличаться от организации документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.ВалютаДенежныхСредств Тогда
				Текст = НСтр("ru = 'Валюта кассы отправителя не соответствует валюте документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуОтправителя()

// Процедура проверяет кассу ККМ, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуККМ(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(ДокументОбъект.КассаККМ);
		Если ДокументОбъект.Организация <> РеквизитыКассыККМ.Организация Тогда
			Текст = НСтр("ru = 'Организация кассы ККМ не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		Если ДокументОбъект.Валюта <> РеквизитыКассыККМ.Валюта Тогда
			Текст = НСтр("ru = 'Валюта кассы ККМ не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуККМ()

// Процедура проверяет банковский счет получатель, указанный в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок
//
Процедура ПроверитьБанковскийСчетПолучатель(ДокументОбъект, Отказ, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)
		   И ДокументОбъект.БанковскийСчет = ДокументОбъект.БанковскийСчетПолучатель Тогда
		   
			Текст = НСтр("ru = 'Один и тот же банковский счет не может являться отправителем и получателем одновременно'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ);
			КонецЕсли;
		Иначе
			
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчетПолучатель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			 И ДокументОбъект.Организация <> РеквизитыСчета.Организация Тогда
				Текст = НСтр("ru = 'Организация счета получателя не соответствует организации документа'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"БанковскийСчетПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
				Текст = НСтр("ru = 'Валюта счета получателя не соответствует валюте документа'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"БанковскийСчетПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
			
			// Проверка взаимосвязанности организации счета получателя с организацией кассы отправителя по организационной структуре
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя должна быть взаимосвязана с организацией счета отправителя по организационной структуре.'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя не должна быть взаимосвязана с организацией счета отправителя по организационной структуре.'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетПолучатель()

// Процедура проверяет банковский счет контрагента, указанный в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	МассивНепроверяемыхРеквизитов - Массив - Реквизиты, не используемые для операции документа
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок
//
Процедура ПроверитьБанковскийСчетКонтрагента(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт
	
	Если МассивНепроверяемыхРеквизитов.Найти("БанковскийСчетКонтрагента") = Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(ДокументОбъект.БанковскийСчетКонтрагента);
			
		Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
			Текст = НСтр("ru = 'Валюта банковского счета не соответствует валюте документа'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетКонтрагента",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетКонтрагента()

// Процедура проверяет валюту конвертации, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок
//
Процедура ПроверитьВалютуКонвертации(ДокументОбъект, Отказ, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	   И ЗначениеЗаполнено(ДокументОбъект.Валюта)
	   И ЗначениеЗаполнено(ДокументОбъект.ВалютаКонвертации)
	Тогда
		
		Если ДокументОбъект.Валюта = ДокументОбъект.ВалютаКонвертации Тогда
			
			Текст = НСтр("ru = 'Валюта конвертации должна отличаться от валюты документа'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"ВалютаКонвертации",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Определяет, разрешены ли платежи без указания заявок на расходование денежных средств.
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - документ, для которого выполняется проверка.
//
// Возвращаемое значение:
//    Булево - Разрешены, или нет
//
Функция РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Реквизиты = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.Касса);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		Реквизиты =
			Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчет);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		Реквизиты =
			Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ДокументОбъект.ЭквайринговыйТерминал);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции // РазрешеныПлатежиБезУказанияЗаявок() 

// Процедура очищает неиспользуемые для хозяйственной операции реквизиты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов документа, которые необходимо очищать
//	МассивРеквизитовОперации - Массив - Массив реквизитов документа, которые относятся к хозяйственной операции документа
//
Процедура ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, Знач МассивВсехРеквизитов, Знач МассивРеквизитовОперации) Экспорт
	
	// Удалим из массива реквизиты, относящиеся к хозяйственной операции.
	Для Каждого ЭлементМассива Из МассивРеквизитовОперации Цикл
		
		Номер = МассивВсехРеквизитов.Найти(ЭлементМассива);
		Если Номер <> Неопределено Тогда
			МассивВсехРеквизитов.Удалить(Номер);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТабличныхЧастей = Новый Структура;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Позиция = СтрНайти(ЭлементМассива, ".");
		
		// Реквизит табличной части.
		Если Позиция <> 0 Тогда
			ИмяТабличнойЧасти = Лев(ЭлементМассива, Позиция - 1);
			РеквизитыТабличнойЧасти = Неопределено;
			Если Не СтруктураТабличныхЧастей.Свойство(ИмяТабличнойЧасти, РеквизитыТабличнойЧасти) Тогда
				СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Новый Массив);
				РеквизитыТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
			КонецЕсли;
			РеквизитыТабличнойЧасти.Добавить(Сред(ЭлементМассива, Позиция + 1));
			
		// Для табличной части ничего не делаем.	
		ИначеЕсли ЭлементМассива = "РасшифровкаПлатежа"
		 ИЛИ ЭлементМассива = "ВыплатаЗаработнойПлаты"
		 ИЛИ ЭлементМассива = "СтрокаФизическиеЛица" Тогда
			Продолжить;
			
		// Реквизит шапки.	
		Иначе
			Если ЗначениеЗаполнено(ДокументОбъект[СокрЛП(ЭлементМассива)]) Тогда
				ДокументОбъект[СокрЛП(ЭлементМассива)] = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Очистим необходимые реквизиты табличной части.
	Если СтруктураТабличныхЧастей.Количество() > 0 Тогда
		
		Для Каждого ТабличнаяЧасть ИЗ СтруктураТабличныхЧастей Цикл
			
			Для Каждого СтрокаТаблицы Из ДокументОбъект[ТабличнаяЧасть.Ключ] Цикл
				
				Для Каждого ЭлементМассива Из ТабличнаяЧасть.Значение Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[СокрЛП(ЭлементМассива)]) Тогда
						СтрокаТаблицы[СокрЛП(ЭлементМассива)] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизиты()

// Процедура очищает неиспользуемые реквизиты для указанной в документе формы оплаты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	ОчищатьДляПустойФормыОплаты - Булево - очищать реквизиты, если форма оплаты не указана (при любой форме оплаты)
//
Процедура ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ДокументОбъект, ФормаОплаты, ОчищатьДляПустойФормыОплаты = Ложь) Экспорт
	
	Если Не (ЗначениеЗаполнено(ФормаОплаты) Или ОчищатьДляПустойФормыОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Безналичная Тогда
		МассивРеквизитов.Добавить("БанковскийСчет");
	КонецЕсли;
	
	ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизитыФормыОплаты()


// В зависимости от хоз. операции, добавляет в массив реквизиты объекта не требующие проверки заполнения.
// Параметры:
//    ДокументОбъект                  - ДокументОбъект - документ, предназначенный для записи или проведения;
//    МассивНепроверяемыхРеквизитов   - Массив - массив реквизитов, не требующих проверки
//                                      при записи и проведении документа;
//    ХозяйственнаяОперацияПоЗарплате - Булево - признак того, что хозяйственная операция, указанная в документе,
//                                      отражает движения по заработной плате.
//
Процедура ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(ДокументОбъект, МассивНепроверяемыхРеквизитов, ХозяйственнаяОперацияПоЗарплате = Ложь) Экспорт
	
	Если ОперацияПоЗарплате(ДокументОбъект.ХозяйственнаяОперация) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("АналитикаАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить()
			И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
		КонецЕсли;
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			
		КонецЕсли;
		
		Если ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			
		ИначеЕсли ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда 
			
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			МассивНепроверяемыхРеквизитов.Добавить("ФизическоеЛицо");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевойСчет");
			
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		КонецЕсли;
		
		Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку к имеющимся
//
// Параметры:
//    ОшибкиЗаполнения - Строка - Накопленное описание ошибок
//    ТекстОшибки - Строка - Описание очередной ошибки
//
Процедура ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ОшибкиЗаполнения = ОшибкиЗаполнения + "
	|" + ТекстОшибки;
	
КонецПроцедуры

// Выполняет проверку заполнения реквизитов вместо платформы. Ошибки записываются, а не выводятся на экран
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Объект документа
//    ПроверяемыеРеквизиты - Массив - Реквизиты, требующие проверки заполненности
//    ОшибкиЗаполнения - Строка - Описание ошибок заполнения
//
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты, ОшибкиЗаполнения) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	РеквизитыДокумента = МетаданныеДокумента.Реквизиты;
	ТабличныеЧасти = МетаданныеДокумента.ТабличныеЧасти;
	
	Для каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		
		ПозТочки = СтрНайти(ИмяРеквизита, ".");
		Если ПозТочки = 0 Тогда
			Если ИмяРеквизита = "Дата" Тогда
				Реквизит = МетаданныеДокумента.СтандартныеРеквизиты.Дата;
			Иначе
				Реквизит = РеквизитыДокумента.Найти(ИмяРеквизита);
			КонецЕсли;
			
			Если Реквизит <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Поле ""%1"" не заполнено'"),
						Реквизит.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТабЧастьДокумента = ТабличныеЧасти.Найти(ИмяРеквизита);
			Если ТабЧастьДокумента <> Неопределено Тогда
				Если Не ДокументОбъект[ИмяРеквизита].Количество() Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не введено ни одной строки в список ""%1""'"),
						ТабЧастьДокумента.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ИмяТабЧасти = Лев(ИмяРеквизита, ПозТочки - 1);
			ИмяРеквизита = Сред(ИмяРеквизита, ПозТочки + 1);
			
			ТабЧастьДокумента = ТабличныеЧасти[ИмяТабЧасти];
			Если ТабЧастьДокумента <> Неопределено Тогда
				Реквизит = ТабЧастьДокумента.Реквизиты.Найти(ИмяРеквизита);
				Если Реквизит <> Неопределено Тогда
					Для каждого СтрокаТабЧасти Из ДокументОбъект[ИмяТабЧасти] Цикл
						Если Не ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
								Реквизит.Синоним,
								СтрокаТабЧасти.НомерСтроки,
								ТабЧастьДокумента.Синоним);
							ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку заполнения однострочной расшифровки платежа
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Проверяемый документ
//    ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты документа
//    ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//    ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части
//    Отказ - Булево - Признак отказа от операции
//
Процедура ПроверитьЗаполнениеРасшифровкиБезРазбиения(ДокументОбъект, ПроверяемыеРеквизиты, ИмяТЧ, ИмяЗаменыТЧ, Отказ) Экспорт
	
	Если Не ДокументОбъект[ИмяТЧ].Количество() Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ТабличныеЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти;
	ТабЧастьДокумента = ТабличныеЧасти[ИмяТЧ];
	
	ШаблонОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		
		Если СтрНайти(ПроверяемыйРеквизит, ИмяТЧ) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозТочки = СтрНайти(ПроверяемыйРеквизит, ".");
		Если ПозТочки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(ПроверяемыйРеквизит, ПозТочки + 1);
		ИмяЭлемента = ИмяЗаменыТЧ + ИмяРеквизита;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяТЧ][0][ИмяРеквизита]) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ШаблонОшибки, ТабЧастьДокумента.Реквизиты[ИмяРеквизита].Синоним),
				,
				"Элементы." + ИмяТЧ + ".ТекущиеДанные." + ИмяРеквизита,
				,
				Отказ);
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить(ПроверяемыйРеквизит);
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Проверяет корретность заполнения налоговых реквизитов
//
// Параметры:
//	Объект - ДокументСсылка - Документ оплаты.
//	Отказ - Булево - Признак отказа от продолжения работы
//	ПроверяемыеРеквизиты - Массив - Непроверяемые реквизиты документа
//	ФлагОбменСБанками - Булево - используется обмен с банком
//	ОшибкиЗаполнения - Строка - Накопленное описание ошибок
//
Процедура ПроверитьЗаполнениеНалоговыхРеквизитов(Объект, Отказ, НепроверяемыеРеквизиты, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = Неопределено) Экспорт
	
	ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	ПеречислениеВБюджет = Объект.ПеречислениеВБюджет;
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	СтатусСоставителя = Объект.СтатусСоставителя;
	Дата = Объект.Дата;
	
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	
	ПараметрыПроверкиЗаполнения = Новый Структура("ПрименениеПриказа107н, ПрименениеПриказа126н",
		Дата >= Константы.ДатаНачалаПримененияПриказа107н.Получить() Или Не ЗначениеЗаполнено(Дата),
		ДатаНачалаПримененияПриказа126н <> '00010101' И Дата >= ДатаНачалаПримененияПриказа126н Или Не ЗначениеЗаполнено(Дата));
	
	МассивОпераций = Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет();
	
	Если ПеречислениеВБюджет И МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
	
		// Проверки, обшие для всех видов перечислений в бюджет
		Если ПлатежиВБюджетКлиентСервер.СтатусыПлательщика(
			ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н, Дата).НайтиПоЗначению(СтатусСоставителя) = Неопределено Тогда
			
			ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Статус составителя""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
			НепроверяемыеРеквизиты.Добавить("ПоказательТипа");
		КонецЕсли;
		
		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения реквизитов платежа в бюджет согласно 148н
//
// Параметры:
//	Объект - ДокументОбъект - Документ оплаты.
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьИННиКППНаСоответствие148н(Объект, Отказ) Экспорт
	
	Если Объект.Дата < ПлатежиВБюджетКлиентСервер.НачалоДействияУказания3844У() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПлательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИНН, КПП");
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
		И ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		РеквизитыПлательщика.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП");
	КонецЕсли;
	
	РеквизитыПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчетКонтрагента, "Владелец.ИНН, Владелец.КПП");
	
	Если Лев(РеквизитыПлательщика.ИНН, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект,,, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПлательщика.КПП, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры КПП плательщика не могут быть ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект,,, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПолучателя.ВладелецИНН, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "Контрагент",, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПолучателя.ВладелецКПП, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры КПП получателя не могут быть ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "Контрагент",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнения реквизита Партнер в ТЧ РасшифровкаПлатежа
//
// Параметры:
//	Объект                - ДокументОбъект - Деженжный документ.
//	ХозяйственнаяОперация - Справочник.ХозяйственныеОперация - хозяйственная операция объекта
//	МассивНепроверяемыхРеквизитов - Массив - Непроверяемые реквизиты документа
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьЗаполнениеПартнера(Объект, ХозяйственнаяОперация, МассивНепроверяемыхРеквизитов, РасшифровкаБезРазбиения, Отказ) Экспорт
	
	Если МассивНепроверяемыхРеквизитов.Найти("РасшифровкаПлатежа.Партнер") = Неопределено Тогда
		ПредставлениеРеквизитаПартнер = ПартнерыИКонтрагенты.ЗаголовокРеквизитаПартнерВЗависимостиОтХозяйственнойОперации( ХозяйственнаяОперация);
		СинонимРеквизитаПартнера      = Объект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Партнер.Синоним;
		Если ПредставлениеРеквизитаПартнер <> СинонимРеквизитаПартнера Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Партнер");
			Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
				Если Не ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.Партнер) Тогда
					
					Если РасшифровкаБезРазбиения Тогда
						ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер";
						КлючДанных = Неопределено;
					Иначе
						ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровкаПлатежа.НомерСтроки, "Партнер");
						КлючДанных = Объект;
					КонецЕсли;
					
					ТекстОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПредставлениеРеквизитаПартнер);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, ИмяПоля, , Отказ);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ЗаполнениеСправочников

// Заполнение общих реквизитов справочников
//
// Параметры:
//    Объект - СправочникОбъект - объект
Процедура ОбработкаЗаполненияСправочников(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Владелец")
		И Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		Объект.Владелец = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Владелец);
		Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось определить принадлежность элемента к определенной ""Организации"". В информационной базе введено несколько организаций,
				                             |Включите функциональную опцию ""Использовать несколько организаций""!'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось определить принадлежность элемента к определенной ""Организации"". Возможно, в информационной базе не введено ни одной организации!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвиженийПоДенежнымСредствам

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваНаличные()

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВКассахККМ;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваВКассахККМ;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваВКассахККМ()

// Процедура формирования движений по регистру "Денежные средства (безналичные)".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваБезналичные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваБезналичные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваБезналичные()

// Процедура формирования движений по регистру "Денежные средства в пути"
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваВПути(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВПути;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваВПути;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваБезналичные()

// Процедура формирования движений по регистру "Денежные средства у подотчетных лиц".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваУПодотчетныхЛиц;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваУПодотчетныхЛиц;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваУПодотчетныхЛиц()

// Процедура формирования движений по регистру "Денежные средства к выплате".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКВыплате;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКВыплате;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКВыплате()

// Процедура формирования движений по регистру "Расчеты по эквайрингу".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоЭквайрингу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоЭквайрингу.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.РасчетыПоЭквайрингу;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоЭквайрингу);
	
КонецПроцедуры // ОтразитьРасчетыПоЭквайрингу()

// Процедура формирования движений по регистру "Лимиты расхода денежных средств".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьЛимитыРасходаДенежныхСредств(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЛимиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЛимитыРасходаДенежныхСредств;
	
	Если Отказ ИЛИ ТаблицаЛимиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЛимитыРасходаДенежныхСредств = Движения.ЛимитыРасходаДенежныхСредств;
	ДвиженияЛимитыРасходаДенежныхСредств.Записывать = Истина;
	ДвиженияЛимитыРасходаДенежныхСредств.Загрузить(ТаблицаЛимиты);
	
КонецПроцедуры // ОтразитьЛимитыРасходаДенежныхСредств()

// Функция проверяет возможность формирования документа "Списание безналичных ДС"
// на основании нескольких документов. 
//
// Параметры:
//  МассивСсылок  - Массив - заказы поставщикам, по которым необходимо ввести реализацию
//
// Возвращаемое значение:
//   Булево   - Истина, если формирование возможно.
//
Функция СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам(МассивСсылок) Экспорт

	Отказ = Ложь;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Контрагент) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Организация) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ТипДокумента) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияТип
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПриобретениеТоваровУслуг.Организация КАК Организация,
	|		ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|		""А"" КАК ТипДокумента
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ГДЕ
	|		ПриобретениеТоваровУслуг.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриобретениеУслугПрочихАктивов.Организация,
	|		ПриобретениеУслугПрочихАктивов.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|	ГДЕ
	|		ПриобретениеУслугПрочихАктивов.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Организация,
	|		ЗаказПоставщику.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитенту.Организация,
	|		ОтчетКомитенту.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ГДЕ
	|		ОтчетКомитенту.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОСписании.Организация,
	|		ОтчетКомитентуОСписании.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ГДЕ
	|		ОтчетКомитентуОСписании.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионера.Организация,
	|		ОтчетКомиссионера.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ГДЕ
	|		ОтчетКомиссионера.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаТоваровМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ГДЕ
	|		ПередачаТоваровМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетПоКомиссииМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ГДЕ
	|		ОтчетПоКомиссииМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаможеннаяДекларацияИмпорт.Организация,
	|		ТаможеннаяДекларацияИмпорт.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка В(&МассивСсылок)
	|	
	|	
	|	) КАК ВложенныйЗапрос
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Отказ;
	КонецЕсли;
		
	Если СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка) Тогда
	
		ТекстОшибки = НСтр("ru='Ввод одного документа Списание безналичных ДС на основании выделенных распоряжений невозможен'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
	КонецЕсли;

	Возврат НЕ Отказ;
	
КонецФункции // СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам()

// Процедура выполняет пересчет сумм документа в новую валюту.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта
//
Процедура ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, НоваяВалюта) Экспорт
	
	КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		НоваяВалюта,
		Объект.Дата);
	
	// Пересчитаем сумму документа в новую валюту.
	Объект.СуммаДокумента = Окр(КоэффициентПересчета * Объект.СуммаДокумента, 2, 1);
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("РасшифровкаПлатежа");
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
		Если Объект.Свойство(ТабличнаяЧасть) Тогда
			
			ИтогСумма = Объект[ТабличнаяЧасть].Итог("Сумма");
			СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
			
			// Пересчитаем суммы в табличной части документа.
			Если ИтогСумма <> 0 Тогда
				Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл
					
					Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
					ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
					СуммаДокумента = СуммаДокумента - Сумма;
					СтрокаТаблицы.Сумма = Сумма;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты по договорам кредитов и депозитов".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Дополнительные свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыПоДоговорамКредитовИДепозитов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоДоговорамКредитовИДепозитов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоДоговорамКредитовИДепозитов;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоДоговорамКредитовИДепозитов.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.РасчетыПоДоговорамКредитовИДепозитов;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоДоговорамКредитовИДепозитов);
	
КонецПроцедуры // ОтразитьРасчетыПоДоговорамКредитовИДепозитов()

// Параметры:
//    ТекущийДоговор - СправочникСсылка.Договоры - Договор с контрагентом
//    Партнер - СправочникСсылка.Партнеры - Партнер
//    Контрагент - СправочникСсылка.Контрагенты - Контрагент
//    Организация - СправочникСсылка.Организации - Организация
//    ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция
//
// Возвращаемое значение:
//   СправочникСсылка.Договоры - договор по умолчанию, являющийся объектом расчетов.
//
Функция ДоговорПоУмолчанию(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации
	) Экспорт
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Формирует текст запроса для получения указанного реквизита объекта расчетов
//
// Параметры:
//    ИмяДокумента - Строка - Имя документа
//    ТаблицаИсточник - Строка - Таблица источник данных
//    ИмяОбъектаРасчетов - Строка - Имя объекта расчетов
//    ИмяРеквизитаОбъектаРасчетов - Строка - Имя реквизита объекта расчетов
//
// Возвращаемое значение:
//    Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитаОбъектаРасчетов(ИмяДокумента, ТаблицаИсточник, ИмяОбъектаРасчетов, ИмяРеквизитаОбъектаРасчетов) Экспорт
	
	Возврат ДенежныеСредстваПовтИсп.ТекстЗапросаРеквизитаОбъектаРасчетов(
				ТаблицаИсточник+"."+ИмяОбъектаРасчетов,
				ИмяРеквизитаОбъектаРасчетов,
				"Документы."+ИмяДокумента+".ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты."+ИмяОбъектаРасчетов);
	
КонецФункции

#КонецОбласти



#Область НаименованиеОрганизации

// Формирует варианты наименования юридического лица в соответствии с его организационно-правовой формой
//
// Параметры:
//    Наименование - Строка - Наименование юр. лица
//
// Возвращаемое значение:
//    Структура - Наименование, РабочееНаименование, ПолноеНаименование
//
Функция НаименованиеОрганизации(Знач Наименование) Экспорт
	
	Наименование = СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки = СтрНайти(Наименование, """");
			ПозицияПоследнейКавычки = 0;
			
			ВремНаименование = Наименование;
			
			ПозицияКавычки = ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки = ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование = Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки = СтрНайти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование = Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование = Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизационноПравоваяФорма) Тогда
		ПолноеНаименование = Наименование;
	Иначе
		ПолноеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
			ОрганизационноПравоваяФорма, Наименование);
	КонецЕсли;
	
	СокращенноеНаименование = Наименование + ?(ПустаяСтрока(ОрганизационноПравоваяФормаСокращенно), "", " ")
		+ ОрганизационноПравоваяФормаСокращенно;
	
	СтруктураНаименования = Новый Структура("Наименование, СокращенноеНаименование, ПолноеНаименование",
		Наименование, СокращенноеНаименование, ПолноеНаименование);
	
	Возврат СтруктураНаименования;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументов

//Возвращает параметры вызова фукнции ПолучитьБанковскийСчетОрганизацииПоУмолчанию
//	
// Возвращаемое значение
//    Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* БанковскийСчет 		  - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета
//
Функция ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("БанковскийСчет");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

//Возвращает параметры вызова фукнции ПолучитьКассуОрганизацииПоУмолчанию
//	
// Возвращаемое значение
//    Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* Касса					  - СправочникСсылка.Кассы - Касса, которую нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета
//
Функция ПараметрыЗаполненияКассыОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("Касса");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет наличие заказа в табличной части "Расшифровка платежа" документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//
// Возвращаемое значение:
//	Булево - Истина - заказ указан в строке табличной части
//
Функция УказанЗаказВРасшифровкеПлатежа(Объект)
	
	ЗаказУказан = Ложь;
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			ЗаказУказан = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаказУказан;
	
КонецФункции // УказанЗаказВРасшифровкеПлатежа()

Функция ПолучитьПрефиксациюКассыКассовойКниги(Ссылка)
	
	РеквизитыПрефиксации = Новый Структура("ИспользоватьПрефикс, Префикс");
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КассовыеКниги") Тогда
		РеквизитыПрефиксации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ИспользоватьПрефикс, Префикс");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Кассы") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "КассоваяКнига.ИспользоватьПрефикс, КассоваяКнига.Префикс");
		РеквизитыПрефиксации.Вставить("ИспользоватьПрефикс", Реквизиты.КассоваяКнигаИспользоватьПрефикс);
		РеквизитыПрефиксации.Вставить("Префикс", Реквизиты.КассоваяКнигаПрефикс);
	КонецЕсли;
	
	Возврат РеквизитыПрефиксации;
	
КонецФункции

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат = Ложь;
	
	Наименование = СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает параметры выбора для контрагента, если не включено раздельное ведение партнеров и контрагентов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода контрагента.
//
Процедура УстановитьПараметрыВыбораКонтрагента(Объект, Элемент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Заполняется список выбора ставки НДС в платежных документах
//
// Параметры:
//    Элемент - ПолеФормы - Поле ввода ставки НДС
//
Процедура УстановитьПараметрыВыбораСтавкиНДС(Элемент) Экспорт
	
	ИсключаемыеЗначения = Новый Массив;
	ИсключаемыеЗначения.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	ИсключаемыеЗначения.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	Если Не Константы.ИспользоватьПродажиНаЭкспорт.Получить() Тогда
		ИсключаемыеЗначения.Добавить(Перечисления.СтавкиНДС.НДС0);
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура);
	ПараметрыВыбора.Вставить("СтрокаПоиска");
	
	ОбщегоНазначенияУТВызовСервера.ДоступныеДляВыбораЗначенияПеречисления(
		"СтавкиНДС",
		ДанныеВыбора,
		ПараметрыВыбора,
		ИсключаемыеЗначения);
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ДанныеВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

// Формирует таблицу НДС по переданным объектам расчетов
// 
// Параметры
//    ДатаДокумента - Дата - Дата платежного документа
//    ВалютаДокумента - СправочникСсылка.Валюты - Валюта платежного документа
//    ОбъектыРасчетов - Массив - Объекты расчетов, данные НДС которых выбираются
//    ОплатаОтКлиента - Булево - Признак оплаты от клиента или платежа поставщику
//
Функция РасшифровкаПлатежаНДС(ДатаДокумента, ВалютаДокумента, ОбъектыРасчетов, ОплатаОтКлиента = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование
	|
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетаФактуры
	|
	|ГДЕ
	|	СчетаФактуры.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                 КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС              КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента  КАК СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаСуммНДС
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                 КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС              КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента  КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка           КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС        КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаПродажи     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаПродажиНДС  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта    КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка           КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС        КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаПродажи     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаПродажиНДС  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта    КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	0                              КАК СуммаСНДС,
	|	0                              КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО                   КАК Валюта,
	|	0
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	0                              КАК СуммаСНДС,
	|	0                              КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО                   КАК Валюта,
	|	0
	|
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыДокумента.Кратность / (КурсВалюты.Кратность * КурсВалютыДокумента.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыДокумента.Курс <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммНДС.Ссылка                                                            КАК Ссылка,
	|	ТаблицаСуммНДС.СуммаДокумента * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)     КАК СуммаДокумента,
	|	ВЫБОР КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС18) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|	КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС10) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|	ИНАЧЕ
	|		ТаблицаСуммНДС.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(ТаблицаСуммНДС.СуммаСНДС) * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)   КАК СуммаСНДС,
	|	СУММА(ТаблицаСуммНДС.СуммаНДС) * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)    КАК СуммаНДС
	|
	|ИЗ
	|	ТаблицаСуммНДС КАК ТаблицаСуммНДС
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют
	|	ПО
	|		ТаблицаСуммНДС.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуммНДС.Ссылка,
	|	ТаблицаСуммНДС.СуммаДокумента,
	|	КурсыВалют.КоэффициентПересчета,
	|	ВЫБОР КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС18) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|	КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС10) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|	ИНАЧЕ
	|		ТаблицаСуммНДС.СтавкаНДС
	|	КОНЕЦ
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаСуммНДС.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаСуммНДС.СуммаНДС) <> 0)
	|	ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаСуммНДС.Ссылка) В (
	|		ТИП(Справочник.ДоговорыКонтрагентов),
	|		ТИП(Справочник.ДоговорыМеждуОрганизациями)
	|	)
	|";
	
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивДокументов", ОбъектыРасчетов);
	Запрос.УстановитьПараметр("ОплатаОтКлиента", ОплатаОтКлиента);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	СтавкаНДС18 = Новый Массив;
	СтавкаНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкаНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	СтавкаНДС10 = Новый Массив;
	СтавкаНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкаНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	Запрос.УстановитьПараметр("СтавкаНДС18", СтавкаНДС18);
	Запрос.УстановитьПараметр("СтавкаНДС10", СтавкаНДС10);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет ставки и суммы НДС в расшифровке платежа
//
// Параметры:
//    РасшифровкаПлатежа - ТабличнаяЧасть, ТаблицаЗначений - Табличная часть "Расшифровка платежа" или таблица значений с соответствующими колонками
//    ТаблицаНДС - ТаблицаЗначений - Таблица со значениями ставок и сумм НДС
//
Процедура ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа, ТаблицаНДС) Экспорт
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		Платежи = РасшифровкаПлатежа.Скопировать();
	Иначе
		Платежи = РасшифровкаПлатежа.Выгрузить();
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	Платежи.Колонки.Добавить("ИндСтроки", Новый ОписаниеТипов(МассивТипов));
	Инд = 0;
	Для каждого СтрокаТаблицы Из Платежи Цикл
		СтрокаТаблицы.ИндСтроки = Инд;
		Инд = Инд + 1;
	КонецЦикла;
	
	Если Платежи.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтавкиНДС"));
		Платежи.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов(МассивТипов));
	КонецЕсли;
	Если Платежи.Колонки.Найти("СуммаНДС") = Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		Платежи.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов(МассивТипов));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Платежи.Заказ КАК Заказ
	|ПОМЕСТИТЬ Платежи
	|ИЗ
	|	&Платежи КАК Платежи
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНДС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаНДС
	|ИЗ
	|	&ТаблицаНДС КАК ТаблицаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОператорПлатежи = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Для каждого Колонка из Платежи.Колонки Цикл
		ОператорПлатежи.ВыбираемыеПоля.Добавить("Платежи." + Колонка.Имя);
	КонецЦикла;
	
	ОператорТаблицаНДС = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
	Для каждого Колонка из ТаблицаНДС.Колонки Цикл
		ОператорТаблицаНДС.ВыбираемыеПоля.Добавить("ТаблицаНДС." + Колонка.Имя);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Платежи", Платежи);
	Запрос.УстановитьПараметр("ТаблицаНДС", ТаблицаНДС);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНДС.СтавкаНДС, Платежи.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(ТаблицаНДС.СуммаНДС, Платежи.СуммаНДС) КАК СуммаНДС,
	|	НЕ ТаблицаНДС.Ссылка ЕСТЬ NULL КАК ПересчитатьНДС,
	|	*
	|ИЗ
	|	Платежи КАК Платежи
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаНДС КАК ТаблицаНДС
	|	ПО
	|		Платежи.Заказ = ТаблицаНДС.Ссылка
	|			ИЛИ &УсловиеОснованияПлатежа
	|		И (Платежи.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ИЛИ Платежи.СтавкаНДС = НЕОПРЕДЕЛЕНО
	|			ИЛИ Платежи.СтавкаНДС ЕСТЬ NULL)
	|УПОРЯДОЧИТЬ ПО
	|	Платежи.ИндСтроки
	|";
	
	Если Платежи.Колонки.Найти("ОснованиеПлатежа") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОснованияПлатежа", "
		|((Платежи.ОснованиеПлатежа.ДокументОснование = ТаблицаНДС.Ссылка
		|ИЛИ Платежи.ОснованиеПлатежа = ТаблицаНДС.Ссылка)
		|И Платежи.Заказ НЕ В(&Ссылки))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОснованияПлатежа", "ЛОЖЬ");
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылки", ТаблицаНДС.ВыгрузитьКолонку("Ссылка"));
	
	Платежи = Запрос.Выполнить().Выгрузить();
	
	РассчитыватьСуммуВзаиморасчетов = (Платежи.Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено);
	
	СписаноВсего = 0;
	СписаноВсегоВзаиморасчетов = 0;
	
	Для каждого Платеж Из Платежи Цикл
		
		Если Не Платеж.ПересчитатьНДС Или Не ЗначениеЗаполнено(Платеж.СтавкаНДС) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Платеж.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			Или ТипЗнч(Платеж.Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			
			Если Платеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				Платеж.СуммаНДС = Платеж.Сумма * 18 / 118;
			ИначеЕсли Платеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				Платеж.СуммаНДС = Платеж.Сумма * 10 / 110;
			КонецЕсли;
		Иначе
			
			Если Платежи.Индекс(Платеж) = 0 Тогда
				НовыйЗаказ = Истина;
			Иначе
				НовыйЗаказ = (Платеж.ИндСтроки <> Платежи[Платежи.Индекс(Платеж) - 1].ИндСтроки);
			КонецЕсли;
			
			Если НовыйЗаказ Тогда
				СписаноВсего = 0;
				СписаноВсегоВзаиморасчетов = 0;
			КонецЕсли;
			
			Платеж.СуммаНДС = Платеж.СуммаНДС * ?(Платеж.СуммаДокумента <> 0, Платеж.Сумма / Платеж.СуммаДокумента, 0);
			
			ПоследняяСтрокаЗаказа = (Платежи.Индекс(Платеж) = Платежи.Количество() - 1)
				Или (Платеж.ИндСтроки <> Платежи[Платежи.Индекс(Платеж) + 1].ИндСтроки);
			
			Платеж.Сумма = Окр(ВзаиморасчетыСервер.СписатьСумму(
				Платеж.Сумма - СписаноВсего,
				Платеж.Сумма * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
				ПоследняяСтрокаЗаказа), 2);
			
			СписаноВсего = СписаноВсего + Платеж.Сумма;
			
			Если РассчитыватьСуммуВзаиморасчетов Тогда
				Платеж.СуммаВзаиморасчетов = Окр(ВзаиморасчетыСервер.СписатьСумму(
					Платеж.СуммаВзаиморасчетов - СписаноВсегоВзаиморасчетов,
					Платеж.СуммаВзаиморасчетов * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
					ПоследняяСтрокаЗаказа), 2);
					
				СписаноВсегоВзаиморасчетов = СписаноВсегоВзаиморасчетов + Платеж.СуммаВзаиморасчетов;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		РасшифровкаПлатежа = Платежи.Скопировать();
	Иначе
		РасшифровкаПлатежа.Загрузить(Платежи);
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует текст назначения платежа для документа оплаты
//
// Параметры:
//    Объект - ДокументСсылка - Документ оплаты
//
Процедура ЗаполнитьТекстНазначенияПлатежа(Объект) Экспорт
	
	ТекстНазначение = "";
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		ТекстНазначение = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента).ТекстНазначения;
	КонецЕсли;
	
	Если ТекстНазначение = "" Тогда
			ТекстНазначение = НазначениеПлатежа(Объект);
	Иначе
		ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		ТекстСуммаНДС = ТекстСуммаНДСПлатежа(Объект.Валюта, Объект.РасшифровкаПлатежа, Истина);
		ТекстНазначение = ТекстНазначение + Символы.ПС + ТекстСумма + Символы.ПС + ТекстСуммаНДС;
	КонецЕсли;
	
	Объект.НазначениеПлатежа = ТекстНазначение;
	
КонецПроцедуры

// Получает ставку НДС для объекта расчетов, если она единственная
//
// Параметры:
//    ОбъектыРасчетов - Массив, ДокументСсылка - Объекты расчетов
//    ЭтоРасчетыСКлиентами - Булево - Признак расчетов с клиентами
//
Функция СтавкаНДСОбъектаРасчетов(ОбъектыРасчетов, ЭтоРасчетыСКлиентами = Истина) Экспорт
	
	ТаблицаНДС = ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Неопределено, Неопределено, ОбъектыРасчетов, ЭтоРасчетыСКлиентами);
	Если ТаблицаНДС.Количество() = 1 Тогда
		Возврат ТаблицаНДС[0].СтавкаНДС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает статью ДДС для объекта расчетов
//
// Параметры:
//    ОбъектРасчетов - ДокументСсылка - Объект расчетов
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - операция для подбора статьи ДДС по умолчанию
//
Функция СтатьяДвиженияДенежныхСредствОбъектаРасчетов(ОбъектРасчетов, ХозяйственнаяОперация) Экспорт
	
	СтатьяДвиженияДенежныхСредств = Неопределено;
	
	ВыбираемыеПоля = Новый Массив;
	ТипОбъекта = ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектРасчетов);
	
	ДоступныеРеквизиты = ОбъектРасчетов.Метаданные().Реквизиты;
	Если ДоступныеРеквизиты.Найти("Соглашение") <> Неопределено Тогда
		ВыбираемыеПоля.Добавить("Соглашение.СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	Если ДоступныеРеквизиты.Найти("Договор") <> Неопределено Тогда
		ВыбираемыеПоля.Добавить("Договор.СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	Если ДоступныеРеквизиты.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
		ВыбираемыеПоля.Добавить("СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
	Если ВыбираемыеПоля.Количество() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, ВыбираемыеПоля);
		УстановитьПривилегированныйРежим(Ложь);
		Если ЗначенияРеквизитов.Свойство("СоглашениеСтатьяДвиженияДенежныхСредств")
			И ЗначениеЗаполнено(ЗначенияРеквизитов.СоглашениеСтатьяДвиженияДенежныхСредств) Тогда
			СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СоглашениеСтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		Если ЗначенияРеквизитов.Свойство("ДоговорСтатьяДвиженияДенежныхСредств")
			И ЗначениеЗаполнено(ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредств) Тогда
			СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		Если ЗначенияРеквизитов.Свойство("СтатьяДвиженияДенежныхСредств")
			И ЗначениеЗаполнено(ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредств) Тогда
			СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;
	
КонецФункции

// Возвращает строку с перечислением документов из расшифровки платежа.
//
// Параметры: Объект - ДокументСсылка - Документ, содержащий расшифровку платежа.
//
// Возвращаемое значение: Строка.
//
Функция НазначениеПлатежа(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить(, "Заказ, Сумма, СтавкаНДС, СуммаНДС");
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов(Документы.ТипВсеСсылки(), "СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокументов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для Сч = 1 По РасшифровкаПлатежа.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла;
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"), "Документ");
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Сумма"), "Сумма");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Документ    КАК Документ,
	|	ИсходнаяТаблица.Сумма       КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерПоДаннымПоставщика       КАК Номер,
	|	ДанныеДокумента.ДатаПоДаннымПоставщика        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерДекларации               КАК Номер,
	|	НЕОПРЕДЕЛЕНО                                  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер
	|	
	|	
	|");
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаКРаспределению = Объект.РасшифровкаПлатежа.Итог("Сумма");
	ТекстНазначенияПлатежа = "";
	ПредставленияДокументов = ПолучитьПредставленияДокументов();
	
	РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Валюта, "Код, Наименование");
	Если РеквизитыВалюты.Код = "643" Тогда
		ВалютаДляПечати = НСтр("ru = 'руб.'");
	Иначе
		ВалютаДляПечати = СокрЛП(РеквизитыВалюты.Наименование);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "НаименованиеДляПечати")
			+ " " + Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
			+ " " + ВалютаДляПечати;
		Иначе
			ВидДокумента = "";
			ПредставленияДокументов.Свойство(Выборка.Документ.Метаданные().Имя, ВидДокумента);
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ПредставлениеДляПечати = НСтр("ru = '%Вид% №%Номер% от %Дата% %Сумма% %Валюта%'");
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Вид%", ВидДокумента);
				Если Выборка.НомерВходящегоДокумента Тогда
					ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%", СокрЛП(Выборка.Номер));
				Иначе
					ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%",
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Ложь, Истина));
				КонецЕсли;
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Дата%", Формат(Выборка.Дата, "ДЛФ=D"));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Сумма%",
					Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Валюта%", ВалютаДляПечати);
				ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", " + ПредставлениеДляПечати;
			КонецЕсли;
		КонецЕсли;
		СуммаКРаспределению = СуммаКРаспределению - Выборка.Сумма;
	КонецЦикла;
	
	Если СуммаКРаспределению > 0 Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ НСтр("ru = 'без указания назначения'")
			+ " " + Формат(СуммаКРаспределению, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
			+ " " + ВалютаДляПечати;
	КонецЕсли;
	Если СуммаКРаспределению <= 0 Тогда
		ТекстНазначенияПлатежа = НСтр("ru = 'Оплата по'") + Сред(ТекстНазначенияПлатежа, 2);
	Иначе
		ТекстНазначенияПлатежа = НСтр("ru = 'Оплата'") + Сред(ТекстНазначенияПлатежа, 2);
	КонецЕсли;
	
	Если Прав(ТекстНазначенияПлатежа, 1) <> "." Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ".";
	КонецЕсли;
	ДлинаТекстаДокументов = СтрДлина(ТекстНазначенияПлатежа);
	
	ТекстСуммаНДС = ТекстСуммаНДСПлатежа(
		Объект.Валюта,
		РасшифровкаПлатежа,
		Истина);
	ДлинаТекстаНДС = СтрДлина(ТекстСуммаНДС);
	
	Если ДлинаТекстаДокументов + ДлинаТекстаНДС > 210 Тогда
		ДлинаТекстаДокументов = 207 - ДлинаТекстаНДС;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ДлинаТекстаДокументов);
		ТекстПоискаПоследнегоДокумента = ТекстНазначенияПлатежа;
		ПозицияПоследнейЗапятой = 0;
		ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		Пока НЕ ПозицияЗапятой = 0 Цикл
			ПозицияПоследнейЗапятой = ПозицияПоследнейЗапятой + ПозицияЗапятой;
			ТекстПоискаПоследнегоДокумента = Сред(ТекстПоискаПоследнегоДокумента, ПозицияЗапятой + 1);
			ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		КонецЦикла;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ПозицияПоследнейЗапятой - 1) + "...";
	КонецЕсли;
	ТекстНазначенияПлатежа = СокрЛП(ТекстНазначенияПлатежа) + Символы.ПС + СокрЛП(ТекстСуммаНДС);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТекстНазначенияПлатежа;
	
КонецФункции

// Выводит сообщения об ошибках при вводе списания безналичных ДС на основании 
// нескольких документов.
//
// Параметры
//  Выборка  - Выборка из результата запроса
//
// Возвращаемое значение:
//   Булево   - Истина, если отказ от ввода на основании
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка)

	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных документов отличается %ПредставлениеПоля%'");
	
	Если Выборка.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Контрагент""'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Организация""'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияТип Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='тип документов'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
    Возврат Отказ;
	
КонецФункции // СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС()

Процедура ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	ПоказательОснования = Объект.ПоказательОснования;
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательТипа = Объект.ПоказательТипа;
	ПоказательНомера = Объект.ПоказательНомера;
	ПоказательДаты = Объект.ПоказательДаты;
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеПоказателяПериода(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	Если ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(
		ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н, Объект.Дата).НайтиПоЗначению(ПоказательОснования) = Неопределено
		И ПоказательТипа <> "0" Тогда
		ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Основание""'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
		Если ПлатежиВБюджетКлиентСервер.ТипыПлатежа(ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н).НайтиПоЗначению(ПоказательТипа) = Неопределено
			И ПоказательТипа <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Тип платежа""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти("АП,АР", ПоказательОснования) > 0 Тогда
		Если ЗначениеЗаполнено(ПоказательПериода)
			И ПоказательПериода <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Период""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрНайти("ТП,ЗД", ПоказательОснования) > 0	Тогда
		Если ЗначениеЗаполнено(ПоказательНомера) 
			И ПоказательНомера <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ПоказательДатыСтрокой = ПоказательДаты;
		Если Лев(ПоказательДатыСтрокой, 1) = "0"
			И Сред(ПоказательДатыСтрокой, 2, 2) = " ." Тогда
			ПоказательДатыСтрокой = "0";
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(ПоказательДатыСтрокой, ".", "")) Тогда
			ПоказательДатыСтрокой = "";
		КонецЕсли;
		
		Если ПоказательОснования = "ЗД" Тогда
			Если ЗначениеЗаполнено(ПоказательДатыСтрокой)
				И ПоказательДатыСтрокой <> "0" Тогда
				ТекстОшибки = НСтр("ru = 'При основании платежа ""ЗД"" следует указать ""0"" в поле ""Дата""'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	ПоказательОснования = Объект.ПоказательОснования;
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательТипа = Объект.ПоказательТипа;
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	Если ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(
		ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н, Объект.Дата).НайтиПоЗначению(ПоказательОснования) = Неопределено
		И ПоказательТипа <> "0" Тогда
		ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Основание""'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоказательПериода) Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо заполнить значение поля ""Код таможенного органа""'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
		Если ПлатежиВБюджетКлиентСервер.ТипыПлатежа(ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н).НайтиПоЗначению(ПоказательТипа) = Неопределено
			И ПоказательТипа <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Тип платежа""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ПоказательПериода", "Период");
	СтруктураПолей.Вставить("ПоказательНомера", НСтр("ru='Номер документа'"));
	СтруктураПолей.Вставить("ПоказательДаты", НСтр("ru='Дата документа'"));
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	Для Каждого ЭлементСтруктуры Из СтруктураПолей Цикл
		Если Объект[ЭлементСтруктуры.Ключ] <> "0" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""%1""'"),
				ЭлементСтруктуры.Значение);
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПоказателяПериода(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательОснования = Объект.ПоказательОснования;
	
	ОшибкаЗаполненияПериода = Ложь;
	
	Если ЗначениеЗаполнено(ПоказательПериода) Тогда
		Если СтрНайти("ТП,ЗД", ПоказательОснования) > 0 И ПоказательПериода <> "0" Тогда
			ПериодичностьНалога = Сред((ПоказательПериода), 1, 2);
			
			НомерПериода = Сред((ПоказательПериода), 4, 2);
			НомерПериода = ?(ПустаяСтрока(НомерПериода), 0, Число(НомерПериода));
			
			ГодПериода = Сред((ПоказательПериода), 7, 4);
			ГодПериода = ?(ПустаяСтрока(ГодПериода), 0, Число(ГодПериода));
			
			Если СтрНайти("МС,КВ,ПЛ,ГД", ПериодичностьНалога) > 0 Тогда
				Если СтрДлина(ПоказательПериода) - СтрДлина(СтрЗаменить(ПоказательПериода, ".", "")) <> 2
				 ИЛИ ГодПериода < 2000 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПериодичностьНалога = "МС" Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 12 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "КВ" Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 4 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "ПЛ" > 0 Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 2 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "ГД" Тогда
				Если НомерПериода <> 0 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
				
			Иначе
				ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода);
			КонецЕсли;
			
		ИначеЕсли СтрНайти("ТР,РС,ОТ,РТ,ВУ,ПБ,ПР", ПоказательОснования) > 0
			И ПоказательПериода <> "0" Тогда
			
			ПериодичностьНалога = Сред((ПоказательПериода), 1, 2);
			
			Если СтрНайти("МС,КВ,ПЛ,ГД", ПериодичностьНалога) > 0 Тогда
				ОшибкаЗаполненияПериода = Истина;
			Иначе
				ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаЗаполненияПериода Тогда
		ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Период""'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	КБК = Объект.КодБК;
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж И СокрЛП(КБК) = "0" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрП(КБК)) <> 20 Тогда
		
		ТекстОшибки =  НСтр("ru = 'КБК должен состоять из 20 знаков'");
		
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБК) Тогда
		
		ТекстОшибки = НСтр("ru = 'КБК должен содержать только цифры'");
		
	ИначеЕсли ПустаяСтрока(СокрЛП(СтрЗаменить(КБК, "0", ""))) Тогда
		
		ТекстОшибки = НСтр("ru = 'Все знаки КБК не могут одновременно принимать значение ""0""'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	КодОКАТО = Объект.КодОКАТО;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если ПустаяСтрока(СокрЛП(СтрЗаменить(КодОКАТО, "0", ""))) Тогда
		
		ТекстОшибки = НСтр("ru = 'Все знаки ОКТМО не могут одновременно принимать значение ""0""'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	УИН = Объект.ИдентификаторПлатежа;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрП(УИН)) <> 20 И СтрДлина(СокрП(УИН)) <> 25 И СтрДлина(СокрП(УИН)) <> 1 И СтрДлина(СокрП(УИН)) <> 0 Тогда
		
		ТекстОшибки =  НСтр("ru = 'УИН должен состоять из 20 или 25 знаков.
			|В случае отсутствия Уникального идентификатора начисления указывается значение ""0"".'");
		
	ИначеЕсли ПустаяСтрока(СокрЛП(СтрЗаменить(УИН, "0", ""))) И СтрДлина(СокрП(УИН)) <> 0 И СокрП(УИН) <> "0" Тогда
		
		ТекстОшибки = НСтр("ru = 'Все знаки УИН не могут одновременно принимать значение ""0""'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				"ИдентификаторПлатежа",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода)
	
	ПоказательПериода = Объект.ПоказательПериода;
	
	ПозицияПериода = СтрНайти(СокрЛП(ПоказательПериода),".");
	ПозицияГода = СтрНайти(Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1), ".") + ПозицияПериода;

	ДатаПериода = Лев(СокрЛП(ПоказательПериода), ПозицияПериода - 1);
	НомерПериода = Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1, ПозицияГода - ПозицияПериода - 1);
	ГодПериода = Сред(СокрЛП(ПоказательПериода), ПозицияГода + 1);
	
	Попытка
		ДатаПоказателя = Дата(Число(ГодПериода), Число(НомерПериода), Число(ДатаПериода));
	Исключение
		ОшибкаЗаполненияПериода = Истина;
	КонецПопытки
	
КонецПроцедуры

Функция РеквизитыПлательщика(Объект) Экспорт
	
	Результат = Новый Структура("ИННПлательщика, КПППлательщика, ТекстПлательщика");
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		СписокРеквизитов = Новый Структура;
		СписокРеквизитов.Вставить("ИННПлательщика", "ИНН");
		СписокРеквизитов.Вставить("КПППлательщика", "КПП");
		
		ТекстКорреспондента = "";
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			ТекстКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ТекстКорреспондента");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстКорреспондента) Тогда
			Результат.ТекстПлательщика = ТекстКорреспондента;
		Иначе
			СписокРеквизитов.Вставить("ТекстПлательщика", "НаименованиеСокращенное");
		КонецЕсли;
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыОрганизации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НадписьРеквизитыПлательщика(ИНН, КПП, ТекстКорреспондента, ЮрФизЛицо, ХозяйственнаяОперация) Экспорт
	
	ШаблонНадписи = НСтр("ru = 'ИНН %1%2, %3'");
	
	СтрокаИНН = ?(ПустаяСтрока(ИНН), НСтр("ru = '<не указан>'"), СокрЛП(ИНН));
	
	ТребуетсяУказаниеКПП = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	КППОтсутствует = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	
	СтрокаКПП = ", " + НСтр("ru = 'КПП'");
	Если Не ЗначениеЗаполнено(КПП) Тогда
		Если ТребуетсяУказаниеКПП И КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " 0";
		ИначеЕсли Не ТребуетсяУказаниеКПП И КППОтсутствует Тогда
			СтрокаКПП = "";
		ИначеЕсли ТребуетсяУказаниеКПП И Не КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " " + НСтр("ru = '<не указан>'");
		ИначеЕсли Не ТребуетсяУказаниеКПП И Не КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " 0";
		КонецЕсли;
	Иначе
		СтрокаКПП = СтрокаКПП + " " + КПП;
	КонецЕсли;
	
	СтрокаТекстКорреспондента = СокрЛП(ТекстКорреспондента);
	
	Возврат СтрШаблон(ШаблонНадписи,
		СтрокаИНН,
		СтрокаКПП,
		СтрокаТекстКорреспондента);
		
КонецФункции

Функция РазложитьСтрокуНазначенияВМассивСлов(Знач Строка)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		ОчСимвол = Сред(Строка, Позиция, 1);
		Если ОчСимвол = " " Тогда
			Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

// Возвращает перечень документов с их синонимами для назначения платежа
//
// Возвращаемое значение: Структура, в ключах которой - имена документов, в значениях - синонимы.
//
Функция ПолучитьПредставленияДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента",                         НСтр("ru='заказу'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику",                      НСтр("ru='заказу'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента",      НСтр("ru='заявке на возврат товаров'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",                    НСтр("ru='отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",                       НСтр("ru='отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",              НСтр("ru='отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",    НСтр("ru='отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",    НСтр("ru='накладной'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",             НСтр("ru='накладной'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",       НСтр("ru='акту'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг",               НСтр("ru='накладной'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт",           НСтр("ru='декларации на товары'"));
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции // ПолучитьПредставленияДокументов()

Процедура ЗаписатьДатуВыгрузкиПлатежей(Платежи, Блокировать = Истина) Экспорт
	
	Для каждого Платеж Из Платежи Цикл
		
		ДатаВыгрузкиДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж, "ДатаВыгрузки");
		
		ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
		
		Если ДатаВыгрузкиДокумента = ТекущаяДатаСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Платеж.ПолучитьОбъект();
		
		Если Блокировать Тогда
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать дату выгрузки в банк документа: %1'"), ДокументОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		ДокументОбъект.ДатаВыгрузки = ТекущаяДатаСеанса;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Выполняет переоценку денежных средств у подотчетного лица
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация в которой необходимо переоценить денежные средства
//  Дата - Дата - на которую неободимо выпонить переоценку
//  ПодотчетноеЛицу - СправочникСсылка.ФизическиеЛица - подотчетное лицо
//
Процедура ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Организация, Дата, ПодотчетноеЛицо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Документы.РасчетКурсовыхРазниц.ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Организация, Дата, ПодотчетноеЛицо);
	
КонецПроцедуры

#Область ПечатьЧека

Функция ПараметрыОперацииФискализацииЧека(ДокументСсылка, СуммаПредоплатыКорректировка = Неопределено, ВерсияФФД = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств) КАК ТипРасчета,
	|	ЕСТЬNULL(ДанныеДокумента.Кассир.ФизическоеЛицо.Наименование, """")          КАК Кассир,
	|	ЕСТЬNULL(ДанныеДокумента.Кассир.ФизическоеЛицо.ИНН, """")                   КАК КассирИНН,
	|	
	|	ДанныеДокумента.Организация    КАК Организация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	
	|	ДанныеДокумента.ПринятоОт                     КАК ПринятоОт,
	|	ДанныеДокумента.Основание                     КАК Основание,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные) КАК ТипОплаты,
	|	ДанныеДокумента.Ссылка                        КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств) ТипРасчета,
	|	ЕСТЬNULL(ДанныеДокумента.Кассир.ФизическоеЛицо.Наименование, """")           КАК Кассир,
	|	ЕСТЬNULL(ДанныеДокумента.Кассир.ФизическоеЛицо.ИНН, """")                    КАК КассирИНН,
	|	
	|	ДанныеДокумента.Организация    КАК Организация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	
	|	ДанныеДокумента.Выдать                        КАК ПринятоОт,
	|	ДанныеДокумента.Основание                     КАК Основание,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные) КАК ТипОплаты,
	|	ДанныеДокумента.Ссылка                        КАК Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПустаяСсылка)
	|	КОНЕЦ КАК ТипРасчета,
	|	ЕСТЬNULL(ДанныеДокумента.Ответственный.ФизическоеЛицо.Наименование, """") КАК Кассир,
	|	ЕСТЬNULL(ДанныеДокумента.Ответственный.ФизическоеЛицо.ИНН, """")          КАК КассирИНН,
	|	
	|	ДанныеДокумента.Организация    КАК Организация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	
	|	ЕСТЬNULL(ДанныеДокумента.Контрагент.НаименованиеПолное, """") КАК ПринятоОт,
	|	""""                                                          КАК Основание,
	|	ДанныеДокумента.Дата                                          КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)               КАК ТипОплаты,
	|	ДанныеДокумента.Ссылка                                        КАК Ссылка
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПустаяСсылка)
	|	КОНЕЦ КАК ТипРасчета,
	|	ЕСТЬNULL(ДанныеДокумента.Ответственный.ФизическоеЛицо.Наименование, """") КАК Кассир,
	|	ЕСТЬNULL(ДанныеДокумента.Ответственный.ФизическоеЛицо.ИНН, """")          КАК КассирИНН,
	|	
	|	ДанныеДокумента.Организация    КАК Организация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	
	|	ЕСТЬNULL(ДанныеДокумента.Контрагент.НаименованиеПолное, """") КАК ПринятоОт,
	|	""""                                                          КАК Основание,
	|	ДанныеДокумента.Дата                                          КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)               КАК ТипОплаты,
	|	ДанныеДокумента.Ссылка                                        КАК Ссылка
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	Если Не Выборка.Следующий() Тогда
		Возврат ПараметрыФискализацииЧека;
	КонецЕсли;
	
	СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, ТекущаяДатаСеанса());
	
	ПараметрыФискализацииЧека.ДокументОснование      = ДокументСсылка;
	ПараметрыФискализацииЧека.ТипРасчета             = Выборка.ТипРасчета;
	ПараметрыФискализацииЧека.АдресРасчетов          = СведенияОЮрФизЛице.ФактическийАдрес;
	ПараметрыФискализацииЧека.МестоРасчетов          = "";
	
	ПараметрыФискализацииЧека.Кассир    = Выборка.Кассир;
	ПараметрыФискализацииЧека.КассирИНН = Выборка.КассирИНН;
	
	// Для принтера чеков (ЕНВД)
	ПараметрыФискализацииЧека.ОрганизацияНазвание  = СведенияОЮрФизЛице.ПолноеНаименование;
	ПараметрыФискализацииЧека.ОрганизацияИНН       = СведенияОЮрФизЛице.ИНН;
	ПараметрыФискализацииЧека.ОрганизацияКПП       = СведенияОЮрФизЛице.КПП;
	ПараметрыФискализацииЧека.АдресМагазина        = СведенияОЮрФизЛице.ФактическийАдрес;
	ПараметрыФискализацииЧека.НаименованиеМагазина = СведенияОЮрФизЛице.СокращенноеНаименование;
	
	Если ВерсияФФД = "1.0" Тогда
		ЗаполнитьПозицииИТаблицуОплатЧека10(ПараметрыФискализацииЧека, Выборка, СуммаПредоплатыКорректировка);
	Иначе
		ЗаполнитьПозицииИТаблицуОплатЧека(ПараметрыФискализацииЧека, Выборка, СуммаПредоплатыКорректировка);
	КонецЕсли;
	
	Возврат ПараметрыФискализацииЧека;
	
КонецФункции

Процедура ЗаполнитьПозицииИТаблицуОплатЧека(ПараметрыФискализацииЧека, ДанныеДокумента, СуммаПредоплатыКорректировка)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|ПОМЕСТИТЬ Расшифровка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыНакладная)
	|		ИЛИ
	|		ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыНакладная)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДоговор)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДополнительно)
	|		И НЕ ДанныеДокумента.ОснованиеПлатежа.Валюта ЕСТЬ NULL
	|		И ДанныеДокумента.ОснованиеПлатежа = ДанныеДокумента.Заказ)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыДополнительно)
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (&ТипыНакладная)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И (ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыНакладная)
	|		ИЛИ
	|		ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыНакладная)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДоговор)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДополнительно)
	|		И НЕ ДанныеДокумента.ОснованиеПлатежа.Валюта ЕСТЬ NULL
	|		И ДанныеДокумента.ОснованиеПлатежа = ДанныеДокумента.Заказ)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты ,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыДополнительно)
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (&ТипыНакладная)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыДоговор)
	|	И ДанныеДокумента.Заказ <> НЕОПРЕДЕЛЕНО
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыДоговор)
	|	И ДанныеДокумента.Заказ <> НЕОПРЕДЕЛЕНО
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетНаОплатуКлиенту
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.ДокументОснование
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.ОперацияПоЯндексКассе
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.ОснованиеПлатежа
	|		ИНАЧЕ ДанныеДокумента.ОснованиеПлатежа
	|	КОНЕЦ КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СуммаНДС18 > 0 ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|		КОГДА ДанныеДокумента.СуммаНДС10 > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаОплаты,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаВзаиморасчетовОплаты
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Основание
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.ЗаказКлиента КАК ЗаказКлиента,
	|	ЕСТЬNULL(СУММА(Расчеты.КОплатеРасход), 0) КАК КОплатеРасход
	|ПОМЕСТИТЬ Расчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(,, Регистратор,
	|		ЗаказКлиента В (
	|			ВЫБРАТЬ
	|				Расшифровка.Основание
	|			ИЗ
	|				Расшифровка
	|			ГДЕ
	|				ТИПЗНАЧЕНИЯ(Расшифровка.Основание) НЕ В (
	|					ТИП(Документ.ВозвратТоваровОтКлиента),
	|					ТИП(Документ.ВозвратТоваровПоставщику),
	|					ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|				)
	|				И Расшифровка.Основание <> НЕОПРЕДЕЛЕНО
	|			)
	|		И Валюта = &Валюта
	|	) КАК Расчеты
	|ГДЕ
	|	Регистратор <> &Ссылка
	|	И НЕ &ТипРасчетаВозврат
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.ЗаказКлиента
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(СУММА(Расчеты.КОплатеРасход), 0) >= 0
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расшифровка.Основание,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.СуммаДокумента,
	|	Расшифровка.СуммаОплаты,
	|	ВЫБОР
	|		КОГДА НЕ &ЗаданаСуммаПредоплаты ТОГДА
	|			ЕСТЬNULL(СУММА(ЖурналФискальныхОпераций.ФискальнаяОперацияСуммаПредоплаты), ЕСТЬNULL(СУММА(Расчеты.КОплатеРасход), 0))
	|		ИНАЧЕ
	|			&СуммаПредоплатыКорректировка
	|	КОНЕЦ КАК СуммаПредоплаты,
	|	ВЫБОР
	|		КОГДА Расшифровка.ВалютаОснования = &Валюта ТОГДА
	|			ВЫБОР
	|				КОГДА Расшифровка.СуммаОплаты - Расшифровка.СуммаДокумента
	|					+ ВЫБОР
	|						КОГДА НЕ &ЗаданаСуммаПредоплаты ТОГДА
	|							ЕСТЬNULL(СУММА(ЖурналФискальныхОпераций.ФискальнаяОперацияСуммаПредоплаты), ЕСТЬNULL(СУММА(Расчеты.КОплатеРасход), 0))
	|						ИНАЧЕ
	|							&СуммаПредоплатыКорректировка
	|					КОНЕЦ > 0 ТОГДА
	|					
	|					Расшифровка.СуммаОплаты - Расшифровка.СуммаДокумента
	|						+ ВЫБОР
	|							КОГДА НЕ &ЗаданаСуммаПредоплаты ТОГДА
	|								ЕСТЬNULL(СУММА(ЖурналФискальныхОпераций.ФискальнаяОперацияСуммаПредоплаты), ЕСТЬNULL(СУММА(Расчеты.КОплатеРасход), 0))
	|							ИНАЧЕ
	|								&СуммаПредоплатыКорректировка
	|						КОНЕЦ
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаПереплаты,
	|	ВЫБОР
	|		КОГДА Расшифровка.ВалютаОснования = &Валюта ТОГДА
	|			ВЫБОР
	|				КОГДА Расшифровка.СуммаДокумента - Расшифровка.СуммаОплаты
	|					- ВЫБОР
	|						КОГДА НЕ &ЗаданаСуммаПредоплаты ТОГДА
	|							ЕСТЬNULL(СУММА(ЖурналФискальныхОпераций.ФискальнаяОперацияСуммаПредоплаты), ЕСТЬNULL(СУММА(Расчеты.КОплатеРасход), 0))
	|						ИНАЧЕ
	|							&СуммаПредоплатыКорректировка
	|					КОНЕЦ > 0 ТОГДА
	|					
	|					Расшифровка.СуммаДокумента - Расшифровка.СуммаОплаты
	|						- ВЫБОР
	|							КОГДА НЕ &ЗаданаСуммаПредоплаты ТОГДА
	|								ЕСТЬNULL(СУММА(ЖурналФискальныхОпераций.ФискальнаяОперацияСуммаПредоплаты), ЕСТЬNULL(СУММА(Расчеты.КОплатеРасход), 0))
	|							ИНАЧЕ
	|								&СуммаПредоплатыКорректировка
	|						КОНЕЦ
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредита
	|	
	|ПОМЕСТИТЬ РасшифровкаОснования
	|ИЗ
	|	Расшифровка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЖурналФискальныхОпераций КАК ЖурналФискальныхОпераций
	|	ПО
	|		ЖурналФискальныхОпераций.ДокументОснование = Расшифровка.Основание
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Расчеты КАК Расчеты
	|	ПО
	|		Расчеты.ЗаказКлиента = Расшифровка.Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.Основание,
	|	Расшифровка.ВалютаОснования,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.СуммаДокумента,
	|	Расшифровка.СуммаОплаты
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаОснования.Основание,
	|	РасшифровкаОснования.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаОснования.СуммаПереплаты КАК СуммаПереплаты
	|ИЗ
	|	РасшифровкаОснования
	|ГДЕ
	|	РасшифровкаОснования.СуммаПереплаты > 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.ОснованиеПлатежа = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.ОснованиеПлатежа = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.Заказ = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.Заказ = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|	ДанныеДокумента.СуммаДокументаСНДС18
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокументаСНДС18 > 0
	|	И (НЕ ДанныеДокумента.Ссылка В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.ОснованиеПлатежа = &Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10),
	|	ДанныеДокумента.СуммаДокументаСНДС10
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокументаСНДС10 > 0
	|	И (НЕ ДанныеДокумента.Ссылка В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.ОснованиеПлатежа = &Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	ДанныеДокумента.СуммаДокумента - (ДанныеДокумента.СуммаДокументаСНДС18 + ДанныеДокумента.СуммаДокументаСНДС10)
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.СуммаДокумента - (ДанныеДокумента.СуммаДокументаСНДС18 + ДанныеДокумента.СуммаДокументаСНДС10)) > 0
	|	И (НЕ ДанныеДокумента.Ссылка В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.ОснованиеПлатежа = &Ссылка)
	|
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасшифровкаОснования.СуммаПредоплаты), 0) КАК СуммаПредоплаты,
	|	ЕСТЬNULL(СУММА(РасшифровкаОснования.СуммаКредита), 0) КАК СуммаКредита
	|ИЗ
	|	РасшифровкаОснования
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расшифровка.Основание КАК Основание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫБОР
	|				КОГДА Расшифровка.ВалютаОснования = Расшифровка.ВалютаОплаты ТОГДА
	|					ЕСТЬNULL(Расшифровка.СуммаДокумента, 0) = Расшифровка.СуммаОплаты
	|				ИНАЧЕ
	|					ЕСТЬNULL(Расшифровка.СуммаВзаиморасчетовОснования, Расшифровка.СуммаДокумента) = Расшифровка.СуммаВзаиморасчетовОплаты
	|			КОНЕЦ, ЛОЖЬ) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная)
	|	КОНЕЦ КАК ПризнакСпособаРасчетаПредоплата
	|ПОМЕСТИТЬ ОснованияПлатежа
	|ИЗ
	|	Расшифровка
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Расшифровка.Основание.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Расшифровка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеДокумента.Ссылка);
	Запрос.УстановитьПараметр("Валюта", ДанныеДокумента.Валюта);
	Запрос.УстановитьПараметр("СуммаПредоплатыКорректировка",
		?(ЗначениеЗаполнено(СуммаПредоплатыКорректировка), СуммаПредоплатыКорректировка, 0));
	Запрос.УстановитьПараметр("ЗаданаСуммаПредоплаты", ЗначениеЗаполнено(СуммаПредоплатыКорректировка));
	
	Запрос.УстановитьПараметр("ТипыНакладная", Метаданные.ОпределяемыеТипы.ОбъектРасчетовНакладная.Тип.Типы());
	
	ТипыДоговор = Новый Массив;
	ТипыДоговор.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ТипыДоговор.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	Запрос.УстановитьПараметр("ТипыДоговор", ТипыДоговор);
	
	ТипыДополнительно = Новый Массив;
	ТипыДополнительно.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	ТипыДополнительно.Добавить(Тип("ДокументСсылка.СчетНаОплатуКлиенту"));
	Запрос.УстановитьПараметр("ТипыДополнительно", ТипыДополнительно);
	
	Запрос.УстановитьПараметр("ТипРасчетаВозврат", ПараметрыФискализацииЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	НалогообложениеНДС = Неопределено;
	ВыборкаНалогообложения = РезультатЗапроса[6].Выбрать();
	Пока ВыборкаНалогообложения.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаНалогообложения.НалогообложениеНДС) Тогда
			Если ЗначениеЗаполнено(НалогообложениеНДС) И 
				НалогообложениеНДС <> ВыборкаНалогообложения.НалогообложениеНДС Тогда
				ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
				Возврат;
			Иначе
				НалогообложениеНДС = ВыборкаНалогообложения.НалогообложениеНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		ПараметрыФискализацииЧека.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	Иначе
		ПараметрыФискализацииЧека.СистемаНалогообложения =
			РозничныеПродажи.СистемаНалогообложенияФискальнойОперации(ДанныеДокумента.Организация);
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура;
	СтрокаОплаты.Вставить("ТипОплаты", ДанныеДокумента.ТипОплаты);
	СтрокаОплаты.Вставить("Сумма",     ДанныеДокумента.СуммаДокумента);
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	Если Не РезультатЗапроса[4].Пустой() Тогда
		
		ВыборкаОплат = РезультатЗапроса[4].Выбрать();
		ВыборкаОплат.Следующий();
		
		Если ВыборкаОплат.СуммаПредоплаты > 0 Тогда
			СтрокаОплаты = Новый Структура;
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
			СтрокаОплаты.Вставить("Сумма",     ВыборкаОплат.СуммаПредоплаты);
			ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
		
		Если ВыборкаОплат.СуммаКредита > 0 Тогда
			СтрокаОплаты = Новый Структура;
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
			СтрокаОплаты.Вставить("Сумма",     ВыборкаОплат.СуммаКредита);
			ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЕсли;
	
	ПозицииЧека = Новый Массив;
	ИтогоСуммаЧека = 0;
	
	ВыборкаАвансов = РезультатЗапроса[3].Выбрать();
	Пока ВыборкаАвансов.Следующий() Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.Аванс;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		Если ДанныеДокумента.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'")
				+ " " + ДанныеДокумента.ПринятоОт;
		Иначе
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выдано:'")
				+ " " + ДанныеДокумента.ПринятоОт;
		КонецЕсли;
		
		СтрокаПозицииЧека.Количество   = 1;
		СтрокаПозицииЧека.Цена         = ВыборкаАвансов.СуммаПереплаты;
		СтрокаПозицииЧека.Сумма        = ВыборкаАвансов.СуммаПереплаты;
		СтрокаПозицииЧека.СтавкаНДС    = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(ВыборкаАвансов.СтавкаНДС);
		СтрокаПозицииЧека.НомерСекции  = 2;
		
		Если СтрокаПозицииЧека.Количество <> 0 Тогда
			СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2);
		КонецЕсли;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаОплаченныеПозицииНоменклатуры();
	
	Запрос.УстановитьПараметр("ДатаДокумента",    ДанныеДокумента.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента",  ДанныеДокумента.Валюта);
	Запрос.УстановитьПараметр("ОплатаОтКлиента",  ДанныеДокумента.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	Запрос.УстановитьПараметр("ПризнакСпособаРасчетаКредит", Перечисления.ПризнакиСпособаРасчета.ОплатаКредита);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, Выборка);
		
		СтрокаПозицииЧека.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименование,
			Выборка.ХарактеристикаНаименование,
			Выборка.УпаковкаНаименование);
		
		СтрокаПозицииЧека.СтавкаНДС = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(Выборка.СтавкаНДС);
		СтрокаПозицииЧека.НомерСекции = 1;
		
		Если СтрокаПозицииЧека.Количество <> 0 Тогда
			СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2);
		КонецЕсли;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
		
	КонецЦикла;
	
	ПараметрыФискализацииЧека.ПозицииЧека = ПозицииЧека;
	
КонецПроцедуры

Процедура ЗаполнитьПозицииИТаблицуОплатЧека10(ПараметрыФискализацииЧека, ДанныеДокумента, СуммаПредоплатыКорректировка);
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", ДанныеДокумента.ТипОплаты);
	СтрокаОплаты.Вставить("Сумма", ДанныеДокумента.СуммаДокумента);
	
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	ПозицииЧека = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|ПОМЕСТИТЬ Расшифровка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетНаОплатуКлиенту
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.ДокументОснование
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.ОперацияПоЯндексКассе
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.ОснованиеПлатежа
	|		ИНАЧЕ ДанныеДокумента.ОснованиеПлатежа
	|	КОНЕЦ КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаОплаты,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаВзаиморасчетовОплаты
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	Расшифровка.Основание,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА Расшифровка.ВалютаОснования = Расшифровка.ВалютаОплаты ТОГДА
	|			ЕСТЬNULL(Расшифровка.СуммаОснования, 0) = Расшифровка.СуммаОплаты
	|		ИНАЧЕ
	|			ЕСТЬNULL(Расшифровка.СуммаВзаиморасчетовОснования, Расшифровка.СуммаОснования) = Расшифровка.СуммаВзаиморасчетовОплаты
	|	КОНЕЦ, ЛОЖЬ) И (Расшифровка.Основание <> &Ссылка) КАК ПолнаяОплатаОснования
	|ПОМЕСТИТЬ РасшифровкаОснования
	|ИЗ
	|	Расшифровка
	|;
	|
	|ВЫБРАТЬ
	|	Расшифровка.Основание
	|ИЗ
	|	РасшифровкаОснования КАК Расшифровка
	|ГДЕ
	|	Расшифровка.ПолнаяОплатаОснования
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО Расшифровка.Основание = ДанныеДокумента.Заказ
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО (Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|		ИЛИ Расшифровка.Основание = ДанныеДокумента.Заказ)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) КАК СтавкаНДС,
	|	ДанныеДокумента.СуммаДокументаСНДС18 КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО (Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа 
	|		ИЛИ Расшифровка.Основание = ДанныеДокумента.ОбъектРасчетов)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокументаСНДС18 > 0
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) КАК СтавкаНДС,
	|	ДанныеДокумента.СуммаДокументаСНДС10 КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО (Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|		ИЛИ Расшифровка.Основание = ДанныеДокумента.ОбъектРасчетов)	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокументаСНДС10 > 0
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	|	ДанныеДокумента.СуммаДокумента - (ДанныеДокумента.СуммаДокументаСНДС18 + ДанныеДокумента.СуммаДокументаСНДС10) КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО (Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|		ИЛИ Расшифровка.Основание = ДанныеДокумента.ОбъектРасчетов)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.СуммаДокумента - (ДанныеДокумента.СуммаДокументаСНДС18 + ДанныеДокумента.СуммаДокументаСНДС10)) > 0
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|///////////////////////////////////////////////
	|
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Расшифровка.Основание.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Расшифровка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеДокумента.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	УстановитьПривилегированныйРежим(Ложь);
	
	НалогообложениеНДС = Неопределено;
	ВыборкаНалогообложения = РезультатЗапроса[4].Выбрать();
	Пока ВыборкаНалогообложения.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаНалогообложения.НалогообложениеНДС) Тогда
			Если ЗначениеЗаполнено(НалогообложениеНДС) И 
				НалогообложениеНДС <> ВыборкаНалогообложения.НалогообложениеНДС Тогда
				ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
				Возврат;
			Иначе
				НалогообложениеНДС = ВыборкаНалогообложения.НалогообложениеНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		ПараметрыФискализацииЧека.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	Иначе
		ПараметрыФискализацииЧека.СистемаНалогообложения =
			РозничныеПродажи.СистемаНалогообложенияФискальнойОперации(ДанныеДокумента.Организация);
	КонецЕсли;
	
	ИтогоСуммаЧека = 0;
	
	ВыборкаСтрокБезТоваров = РезультатЗапроса[3].Выбрать();
	Пока ВыборкаСтрокБезТоваров.Следующий() Цикл
		
		СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаСтрокБезТоваров.СтавкаНДС);
		
		Если ВыборкаСтрокБезТоваров.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЗначениеСтавкиНДС = Неопределено;
		Иначе
			ЗначениеСтавкиНДС = СтавкаНДС * 100;
		КонецЕсли;
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		Если ДанныеДокумента.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'")
				+ " " + ДанныеДокумента.ПринятоОт;
		Иначе
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выдано:'")
				+ " " + ДанныеДокумента.ПринятоОт;
		КонецЕсли;
		СтрокаПозицииЧека.Количество   = 1;
		СтрокаПозицииЧека.Цена         = ВыборкаСтрокБезТоваров.Сумма;
		СтрокаПозицииЧека.Сумма        = ВыборкаСтрокБезТоваров.Сумма;
		СтрокаПозицииЧека.СтавкаНДС    = ЗначениеСтавкиНДС;
		СтрокаПозицииЧека.НомерСекции  = 2;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
	КонецЦикла;
	
	ДокументыОснования = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Основание");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОплаченныеПозицииНоменклатуры10();
	Запрос.УстановитьПараметр("МассивДокументов", ДокументыОснования);
	Запрос.УстановитьПараметр("ДатаДокумента", ДанныеДокумента.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДанныеДокумента.Валюта);
	Запрос.УстановитьПараметр("ОплатаОтКлиента", ДанныеДокумента.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, Выборка);
		
		СтрокаПозицииЧека.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименование,
			Выборка.ХарактеристикаНаименование,
			Выборка.УпаковкаНаименование);
		
		СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС);
		
		Если Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЗначениеСтавкиНДС = Неопределено;
		Иначе
			ЗначениеСтавкиНДС = СтавкаНДС * 100;
		КонецЕсли;
		
		СтрокаПозицииЧека.СтавкаНДС = ЗначениеСтавкиНДС;
		СтрокаПозицииЧека.НомерСекции = 1;
		
		// Данные по алкогольной продукции
		ПараметрыАлкогольнойПродукции = Новый Массив;
		Если ЗначениеЗаполнено(Выборка.АлкогольнаяПродукция) И Выборка.АлкогольнаяПродукция Тогда
			ПараметрыАлкогольнойПродукции.Добавить(Выборка.МаркируемаяАлкогольнаяПродукция); // Признак наличия штрихкода PDF417
			ПараметрыАлкогольнойПродукции.Добавить("");                                      // Штрихкод марки в формате PDF417
			ПараметрыАлкогольнойПродукции.Добавить(Выборка.Объем);                           // Объем номенклатуры в литрах
			ПараметрыАлкогольнойПродукции.Добавить(Выборка.Крепость);                        // Процент содержания алкоголя
			ПараметрыАлкогольнойПродукции.Добавить(Выборка.КодВидаАлкогольнойПродукции);     // Код вида алкогольной продукции
		КонецЕсли;
		
		// Дополнительные параметры
		СтрокаПозицииЧека.Вставить("ПараметрыАлкогольнойПродукции", ПараметрыАлкогольнойПродукции);
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
	КонецЦикла;
	
	Если ИтогоСуммаЧека <> ДанныеДокумента.СуммаДокумента И ПозицииЧека.Количество() Тогда
		ПозицииЧека[ПозицииЧека.ВГраница()].Сумма =
			ПозицииЧека[ПозицииЧека.ВГраница()].Сумма + ДанныеДокумента.СуммаДокумента - ИтогоСуммаЧека;
	КонецЕсли;
	
	ПараметрыФискализацииЧека.ПозицииЧека = ПозицииЧека;
	
КонецПроцедуры

Функция ТекстЗапросаОплаченныеПозицииНоменклатуры()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
	|			ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата
	|		ИНАЧЕ
	|			&ПризнакСпособаРасчетаКредит
	|	КОНЕЦ КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	(ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ПризнакСпособаРасчетаКредит            КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ &ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыДокумента.Кратность / (КурсВалюты.Кратность * КурсВалютыДокумента.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыДокумента.Курс <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Количество             КАК Количество,
	|	ТаблицаНоменклатуры.Сумма * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК Сумма,
	|	ТаблицаНоменклатуры.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаНоменклатуры.Валюта                 КАК Валюта,
	|	ТаблицаНоменклатуры.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЦенаВключаетНДС ТОГДА
	|			ТаблицаНоменклатуры.Цена
	|		КОГДА ТаблицаНоменклатуры.Количество = 0 ТОГДА
	|			ТаблицаНоменклатуры.Сумма
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Сумма / ТаблицаНоменклатуры.Количество
	|	КОНЕЦ * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(15, 2)) КАК Цена,
	|	
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Номенклатура) = ТИП(Строка) ТОГДА
	|			ТаблицаНоменклатуры.Номенклатура
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ТаблицаНоменклатуры.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименование,
	|	ТаблицаНоменклатуры.Упаковка               КАК УпаковкаНаименование
	|
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют
	|		ПО ТаблицаНоменклатуры.Валюта = КурсыВалют.Валюта
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОплаченныеПозицииНоменклатуры10()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетаФактуры
	|ГДЕ
	|	СчетаФактуры.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаНаОплатуКлиенту.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ СчетаНаОплатуКлиенту
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|ГДЕ
	|	СчетаНаОплатуКлиенту.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|		ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|		ПО ТаблицаДокумента.Ссылка = СчетаНаОплатуКлиенту.ДокументОснование
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	ИЛИ СчетаНаОплатуКлиенту.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|		ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|		ПО ТаблицаДокумента.Ссылка = СчетаНаОплатуКлиенту.ДокументОснование
	|
	|ГДЕ
	|	(ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|		ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|		ИЛИ СчетаНаОплатуКлиенту.ДокументОснование ЕСТЬ НЕ NULL)
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|		ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|		ПО ТаблицаДокумента.Ссылка = СчетаНаОплатуКлиенту.ДокументОснование
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	ИЛИ СчетаНаОплатуКлиенту.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|		ПО ТаблицаДокумента.Ссылка = СчетаНаОплатуКлиенту.ДокументОснование
	|
	|ГДЕ
	|	(ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|		ИЛИ СчетаНаОплатуКлиенту.ДокументОснование ЕСТЬ НЕ NULL)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|	ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	(ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL)
	|	И &ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|	ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	(ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL)
	|	И &ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|	ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТовары.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТовары.Характеристика = Штрихкоды.Характеристика
	|			И (ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|				ИЛИ &ТекстЗапросаКоэффициентУпаковки1 = 1
	|					И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения = ТаблицаТовары.Упаковка.ЕдиницаИзмерения
	|					И Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка,
	|	МАКСИМУМ(Штрихкоды.ПриоритетШтрихКода) КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ ПриотритетШтрихКода
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриотритетШтрихКода КАК ПриотритетШтрихКода
	|		ПО Штрихкоды.Номенклатура = ПриотритетШтрихКода.Номенклатура
	|			И Штрихкоды.Характеристика = ПриотритетШтрихКода.Характеристика
	|			И Штрихкоды.Упаковка = ПриотритетШтрихКода.Упаковка
	|			И Штрихкоды.ПриоритетШтрихКода = ПриотритетШтрихКода.ПриоритетШтрихКода
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Характеристика,
	|	Упаковка
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыДокумента.Кратность / (КурсВалюты.Кратность * КурсВалютыДокумента.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыДокумента.Курс <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Количество             КАК Количество,
	|	ТаблицаНоменклатуры.Сумма * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК Сумма,
	|	ТаблицаНоменклатуры.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаНоменклатуры.Валюта                 КАК Валюта,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЦенаВключаетНДС ТОГДА
	|			ТаблицаНоменклатуры.Цена
	|		КОГДА ТаблицаНоменклатуры.Количество = 0 ТОГДА
	|			ТаблицаНоменклатуры.Сумма
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Сумма / ТаблицаНоменклатуры.Количество
	|	КОНЕЦ * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Номенклатура) = ТИП(Строка) ТОГДА
	|			ТаблицаНоменклатуры.Номенклатура
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ТаблицаНоменклатуры.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименование,
	|	ТаблицаНоменклатуры.Упаковка               КАК УпаковкаНаименование,
	|	
	|	ТаблицаНоменклатуры.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаНоменклатуры.Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК МаркируемаяАлкогольнаяПродукция,
	|	ТаблицаНоменклатуры.Номенклатура.ОбъемДАЛ * 10 КАК Объем,
	|	ТаблицаНоменклатуры.Номенклатура.Крепость КАК Крепость,
	|	ТаблицаНоменклатуры.Номенклатура.ВидАлкогольнойПродукции.Код КАК КодВидаАлкогольнойПродукции,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод
	|
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют
	|		ПО ТаблицаНоменклатуры.Валюта = КурсыВалют.Валюта
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = ТаблицаНоменклатуры.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = ТаблицаНоменклатуры.Характеристика
	|			И ШтрихкодыНоменклатуры.Упаковка = ТаблицаНоменклатуры.Упаковка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ДокументыКЗаполнениюНДС(ИмяДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыРасчетов.Ссылка КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента КАК ОплатаОтКлиента
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|(ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Ссылка,
	|	ИСТИНА КАК ОплатаОтКлиента
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И (&ИмяДокумента = ""ПоступлениеБезналичныхДенежныхСредств""
	|		ИЛИ &ИмяДокумента = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И (&ИмяДокумента = ""ПриходныйКассовыйОрдер""
	|		ИЛИ &ИмяДокумента = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И (&ИмяДокумента = ""ОперацияПоПлатежнойКарте""
	|		ИЛИ &ИмяДокумента = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И &ИмяДокумента = ""ЗаявкаНаРасходованиеДенежныхСредств""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И (&ИмяДокумента = ""РасходныйКассовыйОрдер""
	|		ИЛИ &ИмяДокумента = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И (&ИмяДокумента = ""СписаниеБезналичныхДенежныхСредств""
	|		ИЛИ &ИмяДокумента = НЕОПРЕДЕЛЕНО)
	|) КАК ОбъектыРасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОплатаОтКлиента
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетаФактуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.Ссылка = ОбъектыРасчетов.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка                 КАК Ссылка,
	|	ТаблицаДокумента.ОплатаОтКлиента        КАК ОплатаОтКлиента
	|
	|ПОМЕСТИТЬ ОбъектыРасчетовНДС
	|ИЗ
	|(ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                 КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента         КАК ОплатаОтКлиента
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                 КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента         КАК ОплатаОтКлиента
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|	И НЕ ОбъектыРасчетов.ОплатаОтКлиента
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|	И ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|	И НЕ ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|	И ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|	И ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|	И НЕ ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|	И ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|	И НЕ ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ОбъектыРасчетов.ОплатаОтКлиента
	|
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов
	|	ПО ТаблицаДокумента.Ссылка = ОбъектыРасчетов.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.СтавкаНДС В (&СтавкиНДС)
	|) КАК ТаблицаДокумента
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОплатаОтКлиента
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетовНДС КАК ОбъектыРасчетов
	|	ПО ДанныеДокумента.Заказ = ОбъектыРасчетов.Ссылка
	|	И НЕ ОбъектыРасчетов.ОплатаОтКлиента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И &ИмяДокумента = ""СписаниеБезналичныхДенежныхСредств""
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ДанныеДокумента.СтавкаНДС В (&СтавкиНДС) ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетовНДС КАК ОбъектыРасчетов
	|	ПО ДанныеДокумента.Заказ = ОбъектыРасчетов.Ссылка
	|	И НЕ ОбъектыРасчетов.ОплатаОтКлиента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И &ИмяДокумента = ""РасходныйКассовыйОрдер""
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ДанныеДокумента.СтавкаНДС В (&СтавкиНДС) ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетовНДС КАК ОбъектыРасчетов
	|	ПО ДанныеДокумента.Заказ = ОбъектыРасчетов.Ссылка
	|	И НЕ ОбъектыРасчетов.ОплатаОтКлиента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И &ИмяДокумента = ""ЗаявкаНаРасходованиеДенежныхСредств""
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ДанныеДокумента.СтавкаНДС В (&СтавкиНДС) ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетовНДС КАК ОбъектыРасчетов
	|	ПО ДанныеДокумента.ОснованиеПлатежа = ОбъектыРасчетов.Ссылка
	|	И ОбъектыРасчетов.ОплатаОтКлиента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И &ИмяДокумента = ""ПриходныйКассовыйОрдер""
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ДанныеДокумента.СтавкаНДС В (&СтавкиНДС) ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетовНДС КАК ОбъектыРасчетов
	|	ПО ДанныеДокумента.ОснованиеПлатежа = ОбъектыРасчетов.Ссылка
	|	И ОбъектыРасчетов.ОплатаОтКлиента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И &ИмяДокумента = ""ПоступлениеБезналичныхДенежныхСредств""
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ДанныеДокумента.СтавкаНДС В (&СтавкиНДС) ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетовНДС КАК ОбъектыРасчетов
	|	ПО ДанныеДокумента.ОснованиеПлатежа = ОбъектыРасчетов.Ссылка
	|	И ОбъектыРасчетов.ОплатаОтКлиента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата > &ДатаНачала
	|	И ДанныеДокумента.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ДанныеДокумента.СтавкаНДС В (&СтавкиНДС) ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|";
	
	Запрос.УстановитьПараметр("ИмяДокумента", ИмяДокумента);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ДатаСдачиОтчетности = КонецМесяца(ДобавитьМесяц(НачалоГода(ТекущаяДата), 2));
	
	Если ТекущаяДата > ДатаСдачиОтчетности Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ТекущаяДата));
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ДобавитьМесяц(ТекущаяДата, -12)));
	КонецЕсли;
	
	СтавкиНДС = Новый Массив;
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ДокументыКЗаполнениюФайлаПодтверждающихДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявки.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК Заявки
	|ГДЕ
	|	Заявки.Ссылка.ПлатежиПо275ФЗ
	|	И НЕ Заявки.УдалитьПодтверждающийДокумент.Ссылка ЕСТЬ NULL 
	|	И Заявки.Файл.Ссылка ЕСТЬ NULL ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
