
#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииФормированияОтложенныхДвижений

// Метод вызывается из регламентного задания "Формирование движений по расчету с партнерами".
Процедура ОтложенноеПроведениеПоРасчетамСПартнерами() Экспорт
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроведениеПоРасчетамСПартнерами;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	КонецРасчета = КонецМесяца(ТекущаяДатаСеанса())+1;
	АналитикиРасчета = АналитикиРасчета();
	РассчитатьВсе(КонецРасчета, АналитикиРасчета);
	
КонецПроцедуры

// Возвращает имена полей по умолчанию для использования в отчетах.
// Возвращаемое значение:
//  Структура - Содержит в себе поля "Организация, Партнер, Контрагент, Период"
Функция ПоляОтбораПоУмолчанию() Экспорт
	
	ПоляОтбора = Новый Структура();
	ПоляОтбора.Вставить("Организация", "Организация");
	ПоляОтбора.Вставить("Партнер", "Партнер");
	ПоляОтбора.Вставить("Контрагент", "Контрагент");
	ПоляОтбора.Вставить("Договор", "Договор");
	ПоляОтбора.Вставить("Период", "Период");
	
	Возврат ПоляОтбора;
КонецФункции

// Метод вызывается из отчетов. Восстанавливает указанные расчеты только по указанным отборам в отчете.
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроек -  Компоновщик настроек отчета.
//		ПоляОтбора - Структура - Содержит в себе обязательные поля аналитик с указанием,
//								 как данные поля называются в отчете.
//		ДопСвойства - Структура - Содержит в себе доп. свойства отчета. При запуске расчета 
//								  в доп. свойствах взводится признак "ГраницаВзаиморасчетов".
//								  Проверяется другими механизмами, показывает что расчет не актуален.
//		РасчетКВосстановлению - Строка - Имя расчета к восстановлению. Если параметр не заполнен, 
//										то выполнятся все расчеты.
Процедура ВосстановитьРасчетыПоОтборам(КомпоновщикНастроек, ПоляОтбора, ДопСвойства, РасчетКВосстановлению = Неопределено) Экспорт
	
	КонецРасчета = ОтчетыУТКлиентСервер.ГраницаРасчета(КомпоновщикНастроек, ПоляОтбора.Период);
	
	ЗначенияПолей = Новый Структура;
	ОперацииСравнения = Новый Массив();
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	
	Для Каждого Поле Из ПоляОтбора Цикл
		Значение = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, Поле.Ключ, ОперацииСравнения);
		ЗначенияПолей.Вставить(Поле.Ключ, Значение);
	КонецЦикла;

	МассивКлючейПартнеровПоОтбору = МассивКлючейПартнеровПоОтбору(ЗначенияПолей);
	АналитикиРасчета = АналитикиРасчета();
	АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивКлючейПартнеровПоОтбору;
	Если Константы.АктуализироватьВзаиморасчетыПриФормированииОтчетов.Получить() Тогда
		РаспределитьРасчетыФоновымЗаданием(КонецРасчета, АналитикиРасчета, РасчетКВосстановлению);
	КонецЕсли;
	
	НачалоРасчета = НачалоРасчетов(КонецРасчета, АналитикиРасчета, РасчетКВосстановлению);
	ДопСвойства.Вставить("ГраницаВзаиморасчетов", НачалоРасчета);
	Если ЗначениеЗаполнено(НачалоРасчета) Тогда
		ИмяРасчета = ?(ЗначениеЗаполнено(РасчетКВосстановлению), РасчетКВосстановлению, "Взаиморасчеты");
		КРасчету = ВсегоДокументовКРасчету(НачалоРасчета, КонецРасчета, АналитикиРасчета, РасчетКВосстановлению);
		ДопСвойства.Вставить("НомерЗадания", 0);
		ДопСвойства.Вставить("АналитикиКРасчету", АналитикиРасчета);
		ДопСвойства.Вставить("ИмяРасчета", ИмяРасчета);
		ДопСвойства.Вставить("КРасчету", КРасчету);
	КонецЕсли;
КонецПроцедуры

// Возвращает минимальную дату, на которую неактуален расчет (расчеты).
// Параметры:
//		КонецРасчета - Дата - Верхняя граница анализа актуальности расчетов. 
//		АналитикиКРасчету - Структура - Содержит аналитики по партнерам или организациям, по которым необходим расчет:
//			* АналитикиУчетаПоПартнерам - Массив - Содержит массив ключей аналитик по партнерам.
//			* Организации - Массив - Содержит массив организаций.
//		РасчетКВосстановлению - Строка - Имя расчета для анализа. Если параметр не указан,
//										 то анализируются все расчеты.
//		НомерЗадания - Число - Если заполнено, то анализируются расчеты только по этому номеру.
// Возвращаемое значение:
//  Дата - Минимальная дата, на которую неактуален расчет.
Функция НачалоРасчетов(КонецРасчета, АналитикиКРасчету = Неопределено, РасчетКВосстановлению = Неопределено, НомерЗадания = Неопределено) Экспорт
	Если РасчетКВосстановлению = "РасчетыСКлиентами" Тогда
		НомерЗадания = ?(ЗначениеЗаполнено(НомерЗадания), НомерЗадания, Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить());
		ГраницаРасчетовСКлиентами = НачалоРасчета("ЗаданияКРаспределениюРасчетовСКлиентами", КонецРасчета, АналитикиКРасчету, НомерЗадания);
		ГраницаРасчетовСПоставщиками = Дата("39991212");
	ИначеЕсли РасчетКВосстановлению = "РасчетыСПоставщиками" Тогда
		НомерЗадания = ?(ЗначениеЗаполнено(НомерЗадания), НомерЗадания, Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить());
		ГраницаРасчетовСПоставщиками = НачалоРасчета("ЗаданияКРаспределениюРасчетовСПоставщиками", КонецРасчета, АналитикиКРасчету, НомерЗадания);
		ГраницаРасчетовСКлиентами = Дата("39991212");
	Иначе
		НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
		ГраницаРасчетовСКлиентами = НачалоРасчета("ЗаданияКРаспределениюРасчетовСКлиентами", КонецРасчета, АналитикиКРасчету, НомерЗадания);
		НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
		ГраницаРасчетовСПоставщиками = НачалоРасчета("ЗаданияКРаспределениюРасчетовСПоставщиками", КонецРасчета, АналитикиКРасчету, НомерЗадания);
	КонецЕсли;
	
	Если Мин(ГраницаРасчетовСКлиентами, ГраницаРасчетовСПоставщиками) < КонецРасчета Тогда
		ГраницаРасчетов = Мин(ГраницаРасчетовСКлиентами, ГраницаРасчетовСПоставщиками);
	Иначе
		ГраницаРасчетов = Неопределено;
	КонецЕсли;
	Возврат ГраницаРасчетов;
КонецФункции

// Выполняет полный расчеты с клиентами и поставщиками по указанную дату.
// Параметры:
//		ОкончаниеПериодаРасчета - Дата - Граница по которую выполняется расчет.
// 		АналитикиРасчета - Структура - Перечень аналитик, по которым требуется выполнить расчет. См. метод АналитикиРасчета().
Процедура РассчитатьВсе(ОкончаниеПериодаРасчета, АналитикиРасчета = Неопределено) Экспорт
	
	ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(НСтр("ru='Движения по расчетам с партнерами'"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РаспределитьВсеРасчетыСКлиентами(ОкончаниеПериодаРасчета, АналитикиРасчета);
	РаспределитьВсеРасчетыСПоставщиками(ОкончаниеПериодаРасчета, АналитикиРасчета);
	
КонецПроцедуры

// Выполняет полный расчет с клиентами по указанную дату.
// Параметры:
//		ОкончаниеПериодаРасчета - Дата - Граница по которую выполняется расчет.
//		АналитикиРасчета - Структура - Содержит аналитики по партнерам или организациям, по которым необходим расчет:
//			* АналитикиУчетаПоПартнерам - Массив - Содержит массив ключей аналитик по партнерам.
//			* Организации - Массив - Содержит массив организаций.
Процедура РаспределитьВсеРасчетыСКлиентами(ОкончаниеПериодаРасчета, АналитикиРасчета = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	УровеньИнформация = УровеньЖурналаРегистрации.Информация;
	ФорматПериода = "ДФ='yyyy.MM.dd HH:mm:ss'";
	КодЯзыка = Метаданные.ОсновнойЯзык.КодЯзыка;
	
	Комментарий = НСтр("ru = 'Выполняется распределение расчетов с клиентами по %ОкончаниеПериода%'", КодЯзыка);
	Комментарий = СтрЗаменить(Комментарий, "%ОкончаниеПериода%", Формат(ОкончаниеПериодаРасчета, ФорматПериода));
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Взаиморасчеты.Начало распределение расчетов'", КодЯзыка), УровеньИнформация, , ОкончаниеПериодаРасчета, Комментарий);
		
	ИспользуемыеМетаданные = Новый Структура("ИмяРегистраЗаданий, ИмяКонстантыЗаданий, ИмяОперативногоРегистра");
	ИспользуемыеМетаданные.ИмяРегистраЗаданий = "ЗаданияКРаспределениюРасчетовСКлиентами";
	ИспользуемыеМетаданные.ИмяКонстантыЗаданий = "НомерЗаданияКРаспределениюРасчетовСКлиентами";
	ИспользуемыеМетаданные.ИмяОперативногоРегистра = "РасчетыСКлиентами";
	
	КлючеваяОперация = "РаспределениеВзаиморасчетовВызовСервера.РаспределениеРасчетовСКлиентами";
	
	Если АналитикиРасчета = Неопределено Тогда
		АналитикиРасчета = АналитикиРасчета();
	КонецЕсли;
	
	ПервыйПериод = НачалоРасчета(ИспользуемыеМетаданные.ИмяРегистраЗаданий, ОкончаниеПериодаРасчета, АналитикиРасчета);
	НачалоПериода = НачалоМесяца(ПервыйПериод);
	
	Если НачалоПериода < ОкончаниеПериодаРасчета Тогда
		ПроверитьДатуЗапрета(ПервыйПериод);
	КонецЕсли;
	
	ПервыйПроход = Истина;
	Пока НачалоПериода < ОкончаниеПериодаРасчета Цикл
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
		КоличествоПовторяющихсяДанных = 0;
		
		Если ПервыйПроход Тогда
			НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(ИспользуемыеМетаданные.ИмяКонстантыЗаданий);
			ПервыйПроход = Ложь;
		КонецЕсли;
		
		ОкончаниеПериода = КонецМесяца(НачалоПериода);
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			Попытка
				ЗаблокироватьРегистрЗаданий(ИспользуемыеМетаданные.ИмяРегистраЗаданий, НомерЗаданияДоРасчета, АналитикиРасчета);
				ДанныеКРасчетуСКлиентамиЗаМесяц = ДанныеКРасчетуСКлиентамиЗаМесяц(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ИспользуемыеМетаданные, НомерЗаданияДоРасчета);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Не удалось заблокировать регистр заданий'", КодЯзыка), УровеньЖурналаРегистрации.Ошибка);
				ВызватьИсключение;
			КонецПопытки;
		Иначе
			ДанныеКРасчетуСКлиентамиЗаМесяц = ДанныеКРасчетуСКлиентамиЗаМесяц(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ИспользуемыеМетаданные, НомерЗаданияДоРасчета);
		КонецЕсли;
		СписокОрганизаций = ДанныеКРасчетуСКлиентамиЗаМесяц.Организации;
		
		// Этап 1Х: распределение расчетов с клиентами
		РассчитатьРасчетыСКлиентами(НачалоПериода, ОкончаниеПериода, ДанныеКРасчетуСКлиентамиЗаМесяц, КоличествоПовторяющихсяДанных);
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных, "РассчитатьРасчетыСКлиентами");
		КоличествоПовторяющихсяДанных = 0;
		
		// Этап 2Х: Переоценка расчетов на конец периода
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(СписокОрганизаций, КонецМесяца(НачалоПериода), ДанныеКРасчетуСКлиентамиЗаМесяц.АналитикиУчетаПоПартнерам, КоличествоПовторяющихсяДанных);
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных, "ПереоценитьРасчетыСКлиентами");
		КоличествоПовторяющихсяДанных = 0;
		
		
		// Этап 3Х: Установка новых границ расчета
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			Попытка
				ЗаблокироватьРегистрЗаданий(ИспользуемыеМетаданные.ИмяРегистраЗаданий, НомерЗаданияДоРасчета, АналитикиРасчета);
				УстановитьГраницыРасчетов(НачалоПериода, ОкончаниеПериода, ИспользуемыеМетаданные.ИмяРегистраЗаданий, АналитикиРасчета, ДанныеКРасчетуСКлиентамиЗаМесяц.ВременныеТаблицы, НомерЗаданияДоРасчета, КоличествоПовторяющихсяДанных);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Не удалось установить границы расчетов'", КодЯзыка), УровеньЖурналаРегистрации.Ошибка);
				ВызватьИсключение;
			КонецПопытки
		Иначе
			УстановитьГраницыРасчетов(НачалоПериода, ОкончаниеПериода, ИспользуемыеМетаданные.ИмяРегистраЗаданий, АналитикиРасчета, ДанныеКРасчетуСКлиентамиЗаМесяц.ВременныеТаблицы, НомерЗаданияДоРасчета, КоличествоПовторяющихсяДанных);
		КонецЕсли;
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных, "УстановитьГраницыРасчетов");
		КоличествоПовторяющихсяДанных = 0;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Взаиморасчеты.Распределены расчеты с клиентами за период'", КодЯзыка), УровеньИнформация, , Формат(НачалоПериода, "ДФ='yyyy.MM'"));
		
		ПрошлыйПериод = НачалоПериода;
		НачалоПериода = НачалоРасчета(ИспользуемыеМетаданные.ИмяРегистраЗаданий, ОкончаниеПериодаРасчета, АналитикиРасчета, НомерЗаданияДоРасчета);
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных);
		КоличествоПовторяющихсяДанных = 0;
	КонецЦикла;
	
	Комментарий = НСтр("ru = 'Распределены расчеты с клиентами с %НачалоПериода% по %ОкончаниеПериода%'", КодЯзыка);
	Комментарий = СтрЗаменить(Комментарий, "%НачалоПериода%", Формат(ПервыйПериод, ФорматПериода));
	Комментарий = СтрЗаменить(Комментарий, "%ОкончаниеПериода%", Формат(ОкончаниеПериодаРасчета, ФорматПериода));
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Взаиморасчеты.Окончание распределения расчетов'", КодЯзыка), УровеньИнформация, , ОкончаниеПериодаРасчета, Комментарий);
КонецПроцедуры

// Выполняет полный расчет с поставщиками по указанную дату.
// Параметры:
//		ОкончаниеПериодаРасчета - Дата - Граница по которую выполняется расчет.
//		АналитикиРасчета - Структура - Содержит аналитики по партнерам или организациям, по которым необходим расчет:
//			* АналитикиУчетаПоПартнерам - Массив - Содержит массив ключей аналитик по партнерам.
//			* Организации - Массив - Содержит массив организаций.
Процедура РаспределитьВсеРасчетыСПоставщиками(ОкончаниеПериодаРасчета, АналитикиРасчета = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	УровеньИнформация = УровеньЖурналаРегистрации.Информация;
	ФорматПериода = "ДФ='yyyy.MM.dd HH:mm:ss'";
	КодЯзыка = Метаданные.ОсновнойЯзык.КодЯзыка;
	
	Комментарий = НСтр("ru = 'Выполняется распределение расчетов с поставщиками по %ОкончаниеПериода%'", КодЯзыка);
	Комментарий = СтрЗаменить(Комментарий, "%ОкончаниеПериода%", Формат(ОкончаниеПериодаРасчета, ФорматПериода));
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Взаиморасчеты.Начало распределение расчетов'", КодЯзыка), УровеньИнформация, , ОкончаниеПериодаРасчета, Комментарий);
		
	ИспользуемыеМетаданные = Новый Структура("ИмяРегистраЗаданий, ИмяКонстантыЗаданий, ИмяОперативногоРегистра");
	ИспользуемыеМетаданные.ИмяРегистраЗаданий = "ЗаданияКРаспределениюРасчетовСПоставщиками";
	ИспользуемыеМетаданные.ИмяКонстантыЗаданий = "НомерЗаданияКРаспределениюРасчетовСПоставщиками";
	ИспользуемыеМетаданные.ИмяОперативногоРегистра = "РасчетыСПоставщиками";
	
	КлючеваяОперация = "РаспределениеВзаиморасчетовВызовСервера.РаспределениеРасчетовСПоставщиками";
	
	Если АналитикиРасчета = Неопределено Тогда
		АналитикиРасчета = АналитикиРасчета();
	КонецЕсли;
	
	ПервыйПериод = НачалоРасчета(ИспользуемыеМетаданные.ИмяРегистраЗаданий, ОкончаниеПериодаРасчета, АналитикиРасчета);
	НачалоПериода = НачалоМесяца(ПервыйПериод);
	
	Если НачалоПериода < ОкончаниеПериодаРасчета Тогда
		ПроверитьДатуЗапрета(ПервыйПериод);
	КонецЕсли;
	ПервыйПроход = Истина;
	Пока НачалоПериода < ОкончаниеПериодаРасчета Цикл
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
		КоличествоПовторяющихсяДанных = 0;
		Если ПервыйПроход Тогда
			НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(ИспользуемыеМетаданные.ИмяКонстантыЗаданий);
			ПервыйПроход = Ложь;
		КонецЕсли;
		
		ОкончаниеПериода = КонецМесяца(НачалоПериода);
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			Попытка
				ЗаблокироватьРегистрЗаданий(ИспользуемыеМетаданные.ИмяРегистраЗаданий, НомерЗаданияДоРасчета, АналитикиРасчета);
				ДанныеКРасчетуСПоставщикамиЗаМесяц = ДанныеКРасчетуСПоставщикамиЗаМесяц(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ИспользуемыеМетаданные, НомерЗаданияДоРасчета);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Не удалось заблокировать регистр заданий'", КодЯзыка), УровеньЖурналаРегистрации.Ошибка);
				ВызватьИсключение;
			КонецПопытки
		Иначе
			ДанныеКРасчетуСПоставщикамиЗаМесяц = ДанныеКРасчетуСПоставщикамиЗаМесяц(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ИспользуемыеМетаданные, НомерЗаданияДоРасчета);
		КонецЕсли;
		СписокОрганизаций = ДанныеКРасчетуСПоставщикамиЗаМесяц.Организации;
		
		// Этап 1Х: распределение расчетов с клиентами
		РассчитатьРасчетыСПоставщиками(НачалоПериода, ОкончаниеПериода, ДанныеКРасчетуСПоставщикамиЗаМесяц, КоличествоПовторяющихсяДанных);
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных, "РассчитатьРасчетыСПоставщиками");
		КоличествоПовторяющихсяДанных = 0;
		
		// Этап 2Х: Переоценка расчетов на конец периода
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(СписокОрганизаций, КонецМесяца(НачалоПериода), ДанныеКРасчетуСПоставщикамиЗаМесяц.АналитикиУчетаПоПартнерам, КоличествоПовторяющихсяДанных);
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных, "ПереоценитьРасчетыСПоставщиками");
		КоличествоПовторяющихсяДанных = 0;
		
		
		// Этап 3Х: Установка новых границ расчета
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			Попытка
				ЗаблокироватьРегистрЗаданий(ИспользуемыеМетаданные.ИмяРегистраЗаданий, НомерЗаданияДоРасчета, АналитикиРасчета);
				УстановитьГраницыРасчетов(НачалоПериода, ОкончаниеПериода, ИспользуемыеМетаданные.ИмяРегистраЗаданий, АналитикиРасчета, ДанныеКРасчетуСПоставщикамиЗаМесяц.ВременныеТаблицы, НомерЗаданияДоРасчета, КоличествоПовторяющихсяДанных);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Не удалось установить границы расчетов'", КодЯзыка), УровеньЖурналаРегистрации.Ошибка);
				ВызватьИсключение;
			КонецПопытки
		Иначе
			УстановитьГраницыРасчетов(НачалоПериода, ОкончаниеПериода, ИспользуемыеМетаданные.ИмяРегистраЗаданий, АналитикиРасчета, ДанныеКРасчетуСПоставщикамиЗаМесяц.ВременныеТаблицы, НомерЗаданияДоРасчета, КоличествоПовторяющихсяДанных);
		КонецЕсли;
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных, "УстановитьГраницыРасчетов");
		КоличествоПовторяющихсяДанных = 0;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Взаиморасчеты.Распределены расчеты с поставщиками за период'", КодЯзыка), УровеньИнформация, , Формат(НачалоПериода, "ДФ='yyyy.MM'"));
		
		ПрошлыйПериод = НачалоПериода;
		НачалоПериода = НачалоРасчета(ИспользуемыеМетаданные.ИмяРегистраЗаданий, ОкончаниеПериодаРасчета, АналитикиРасчета, НомерЗаданияДоРасчета);
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных);
		КоличествоПовторяющихсяДанных = 0;
	КонецЦикла;
	
	Комментарий = НСтр("ru = 'Распределены расчеты с клиентами с %НачалоПериода% по %ОкончаниеПериода%'", КодЯзыка);
	Комментарий = СтрЗаменить(Комментарий, "%НачалоПериода%", Формат(ПервыйПериод, ФорматПериода));
	Комментарий = СтрЗаменить(Комментарий, "%ОкончаниеПериода%", Формат(ОкончаниеПериодаРасчета, ФорматПериода));
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Взаиморасчеты.Окончание распределения расчетов'", КодЯзыка), УровеньИнформация, , ОкончаниеПериодаРасчета, Комментарий);
КонецПроцедуры

// Выполняет актуализацию расчетов в фоновом задании.
// Параметры:
//		КонецРасчета - Дата - Дата окончания актуализации.
//		АналитикиРасчета - Структура - Содержит аналитики по партнерам или организациям, по которым необходим расчет:
//			* АналитикиУчетаПоПартнерам - Массив - Содержит массив ключей аналитик по партнерам.
//			* Организации - Массив - Содержит массив организаций.
//		РасчетКВосстановлению - Строка - Имя расчета к актуализации. Если не заполнено, то актуализириются все расчеты.
Процедура РаспределитьРасчетыФоновымЗаданием(КонецРасчета = Неопределено, АналитикиРасчета = Неопределено, РасчетКВосстановлению = Неопределено, Ключ = "") Экспорт
	
	Если Не ЗначениеЗаполнено(КонецРасчета) Тогда
		КонецРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(НСтр("ru='Движения по расчетам с партнерами'"));
	
	Если РасчетКВосстановлению = "РасчетыСКлиентами" Тогда
		РаспределитьРасчетыСКлиентамиФоновымЗаданием(КонецРасчета, АналитикиРасчета, РасчетКВосстановлению, Ключ);
	ИначеЕсли РасчетКВосстановлению = "РасчетыСПоставщиками" Тогда
		РаспределитьРасчетыСПоставщикамиФоновымЗаданием(КонецРасчета, АналитикиРасчета, РасчетКВосстановлению, Ключ);
	Иначе
		РаспределитьРасчетыСКлиентамиФоновымЗаданием(КонецРасчета, АналитикиРасчета, РасчетКВосстановлению, Ключ);
		РаспределитьРасчетыСПоставщикамиФоновымЗаданием(КонецРасчета, АналитикиРасчета, РасчетКВосстановлению, Ключ);
	КонецЕсли;
КонецПроцедуры

// Выводит в макет информационную надпись о запущенном фоновом задании.
Процедура ВывестиАктуальностьРасчетов(Макет, ПараметрыРасчета) Экспорт
	Если ЗначениеЗаполнено(ПараметрыРасчета) И ПараметрыРасчета.Свойство("ГраницаВзаиморасчетов") Тогда
		Если ЗначениеЗаполнено(ПараметрыРасчета.ГраницаВзаиморасчетов) Тогда
			ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
			ТекстПредупреждения = НСтр("ru ='Распределение расчетов выполнено до %ДатаАктуальности%. 
										|Запущено задание по распределению расчетов с %ДатаНачалаРаспределения% (требуется распределить расчеты для %КоличествоДокументов%). 
										|После распределения Вам будет предложено переформировать отчет.'");
			ДатаАктуальности = КонецМесяца(ПараметрыРасчета.ГраницаВзаиморасчетов - 1);
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаАктуальности%", Формат(ДатаАктуальности, "ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаНачалаРаспределения%", Формат(ПараметрыРасчета.ГраницаВзаиморасчетов, "ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%КоличествоДокументов%", ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КРасчету));
			ОбластьПредупреждение.Текст = ТекстПредупреждения;
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Макет.ВставитьОбласть(ОбластьПредупреждение, Макет.Область(1,1,1,1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ПараметрыРасчета.Удалить("ГраницаВзаиморасчетов");
			ПараметрыРасчета.Удалить("НомерЗадания");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает имя фонового задания распределения взаиморасчетов с клиентами.
// Возвращаемое значение:
//  Строка - Имя фонового задания
Функция ИмяФоновогоЗаданияРасчетовСКлиентами() Экспорт
	Возврат "ВзаиморасчетыСКлиентами";
КонецФункции

// Возвращает имя фонового задания распределения взаиморасчетов с поставщиками.
// Возвращаемое значение:
//  Строка - Имя фонового задания
Функция ИмяФоновогоЗаданияРасчетовСПоставщиками() Экспорт
	Возврат "ВзаиморасчетыСПоставщиками";
КонецФункции

//Возвращает признак активности задания распределения расчетов
//Возвращаемое значение:
//  Булево - Фоновое задание активно
Функция АктивноФоновоеЗаданиеВзаиморасчетов() Экспорт
	
	Ключ = РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСПоставщиками();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ключ = РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСКлиентами();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетВФоне

Процедура РаспределитьРасчетыСПоставщикамиФоновымЗаданием(Период, АналитикиКРасчету, РасчетКВосстановлению, Ключ = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется распределение расчетов с поставщиками'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Период);
	ПараметрыЭкспортнойПроцедуры.Добавить(АналитикиКРасчету);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

Процедура РаспределитьРасчетыСКлиентамиФоновымЗаданием(Период, АналитикиКРасчету, РасчетКВосстановлению, Ключ = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется распределение расчетов с клиентами'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Период);
	ПараметрыЭкспортнойПроцедуры.Добавить(АналитикиКРасчету);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания,  Ключ, НаименованиеЗадания);
	
КонецПроцедуры

#КонецОбласти // РасчетВФоне

#Область ГраницыАналитикКРасчету
Функция НачалоРасчета(ИмяРегистраЗаданий, ОкончаниеРасчета, АналитикиРасчета, НомерЗадания = 0)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоПериодаРасчета
	|ИЗ
	|	ИмяРегистраЗаданий КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &ОкончаниеРасчета
	|	И (Задания.АналитикаУчетаПоПартнерам В (&АналитикиУчетаПоПартнерам)
	|		ИЛИ &ПоВсемАналитикам)
	|	И (Задания.Организация В (&Организации)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И (Задания.НомерЗадания <= &НомерЗадания
	|		ИЛИ &ПоВсемНомерамЗаданий)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Задания.Месяц) ЕСТЬ NULL)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИмяРегистраЗаданий", "РегистрСведений."+ИмяРегистраЗаданий);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОкончаниеРасчета", ОкончаниеРасчета);
	Запрос.УстановитьПараметр("АналитикиУчетаПоПартнерам", АналитикиРасчета.АналитикиУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ПоВсемАналитикам", Не ЗначениеЗаполнено(АналитикиРасчета.АналитикиУчетаПоПартнерам));
	Запрос.УстановитьПараметр("Организации", АналитикиРасчета.Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(АналитикиРасчета.Организации));
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("ПоВсемНомерамЗаданий", НомерЗадания = 0);

	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.НачалоПериодаРасчета, КонецМесяца(ОкончаниеРасчета) + 1);
КонецФункции

Функция ВсегоДокументовКРасчету(НачалоРасчета, КонецРасчета, АналитикиКРасчету, РасчетКВосстановлению)
	Если РасчетКВосстановлению = "РасчетыСКлиентами" Тогда
		КРасчетуСКлиентами = КоличествоДокументовКРасчету(НачалоРасчета, КонецРасчета, АналитикиКРасчету, "ЗаданияКРаспределениюРасчетовСКлиентами");
		КРасчетуСПоставщиками = 0;
	ИначеЕсли РасчетКВосстановлению = "РасчетыСПоставщиками" Тогда
		КРасчетуСПоставщиками = КоличествоДокументовКРасчету(НачалоРасчета, КонецРасчета, АналитикиКРасчету, "ЗаданияКРаспределениюРасчетовСПоставщиками");
		КРасчетуСКлиентами = 0;
	Иначе
		КРасчетуСКлиентами = КоличествоДокументовКРасчету(НачалоРасчета, КонецРасчета, АналитикиКРасчету, "ЗаданияКРаспределениюРасчетовСКлиентами");
		КРасчетуСПоставщиками = КоличествоДокументовКРасчету(НачалоРасчета, КонецРасчета, АналитикиКРасчету, "ЗаданияКРаспределениюРасчетовСПоставщиками");
	КонецЕсли;
	Возврат (КРасчетуСКлиентами + КРасчетуСПоставщиками);
КонецФункции

Функция КоличествоДокументовКРасчету(НачалоРасчета, КонецРасчета, АналитикиКРасчету, ИмяРегистраРасчета)
	Возврат РегистрыСведений[ИмяРегистраРасчета].КоличествоНеактуальныхДокументов(НачалоРасчета, КонецРасчета, АналитикиКРасчету);
КонецФункции

// Возвращает структуру полей аналитик расчета
// Возвращаемое значение:
//	Структура:
//		- АналитикиУчетаПоПартнерам - Неопределено - Ключ аналитики учета по партнерам.
//		- Организации - Неопределено - Организация расчета.
//
Функция АналитикиРасчета() Экспорт
	Возврат Новый Структура("АналитикиУчетаПоПартнерам, Организации", Неопределено, Неопределено);
КонецФункции

#КонецОбласти // ДокументыКРасчету

#Область ЭтапыРасчета

Функция ДанныеКРасчетуСКлиентамиЗаМесяц(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ИспользуемыеМетаданные, НомерЗаданияДоРасчета);
	Контекст = "РасчетыСКлиентами";
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	ДанныеКРасчету = Новый Структура("ДанныеДляРасчетовСКлиентами, Регистраторы, КэшГраниц");
	
	ЗаполнитьАналитикиКРасчетуЗаМесяц(ИспользуемыеМетаданные.ИмяРегистраЗаданий, НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета, АналитикиРасчета, ДанныеКРасчету);
	
	// ФАЗА 10: Выборка исходных данных для распределения расчетов с клиентами
	ДанныеКРасчету.ДанныеДляРасчетовСКлиентами = ДанныеДляРасчетовСКлиентами(НачалоПериода, ОкончаниеПериода, ДанныеКРасчету.АналитикиУчетаПоПартнерам, ВременныеТаблицы);
	// ФАЗА 12: Распределение расчетов с клиентами по исходным данным
	ИсключаемыеТипыРегистраторов = ИсключаемыеТипы(); // данные типы регистраторов не проверятся и не возвращаются методом Регистраторы()
	ДанныеКРасчету.Регистраторы = Регистраторы(НачалоПериода, ОкончаниеПериода, ДанныеКРасчету.АналитикиУчетаПоПартнерам, Контекст, ИсключаемыеТипыРегистраторов);
	Возврат ДанныеКРасчету;
КонецФункции

Функция ДанныеКРасчетуСПоставщикамиЗаМесяц(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ИспользуемыеМетаданные, НомерЗаданияДоРасчета);
	Контекст = "РасчетыСПоставщиками";
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	ДанныеКРасчету = Новый Структура("ДанныеДляРасчетовСПоставщиками, Регистраторы, КэшГраниц");
	
	ЗаполнитьАналитикиКРасчетуЗаМесяц(ИспользуемыеМетаданные.ИмяРегистраЗаданий, НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета, АналитикиРасчета, ДанныеКРасчету);
	
	// ФАЗА 10: Выборка исходных данных для распределения расчетов с клиентами
	ДанныеКРасчету.ДанныеДляРасчетовСПоставщиками = ДанныеДляРасчетовСПоставщиками(НачалоПериода, ОкончаниеПериода, ДанныеКРасчету.АналитикиУчетаПоПартнерам, ВременныеТаблицы);
	// ФАЗА 12: Распределение расчетов с клиентами по исходным данным
	ИсключаемыеТипыРегистраторов = ИсключаемыеТипы(); // данные типы регистраторов не проверятся и не возвращаются методом Регистраторы()
	ДанныеКРасчету.Регистраторы = Регистраторы(НачалоПериода, ОкончаниеПериода, ДанныеКРасчету.АналитикиУчетаПоПартнерам, Контекст, ИсключаемыеТипыРегистраторов);
	Возврат ДанныеКРасчету;
КонецФункции

Процедура ЗаполнитьАналитикиКРасчетуЗаМесяц(ИмяРегистраЗаданий, НачалоПериода, ОкончаниеПериода, НомерЗадания, АналитикиРасчета, ИсходныеДанные)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерЗадания,
	|	Задания.Организация,
	|	Задания.АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов,
	|	Задания.Документ
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрЗаданий КАК Задания
	|ГДЕ
	|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.АналитикаУчетаПоПартнерам В (&АналитикиУчетаПоПартнерам) ИЛИ &ПоВсемАналитикам)
	|	И (Задания.Организация В (&Организации) ИЛИ &ПоВсемОрганизациям)
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.АналитикаУчетаПоПартнерам
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрЗаданий", "РегистрСведений." + ИмяРегистраЗаданий);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("АналитикиУчетаПоПартнерам", АналитикиРасчета.АналитикиУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ПоВсемАналитикам", АналитикиРасчета.АналитикиУчетаПоПартнерам = Неопределено);
	Запрос.УстановитьПараметр("Организации", АналитикиРасчета.Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", АналитикиРасчета.Организации = Неопределено);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходныеДанные.Вставить("АналитикиУчетаПоПартнерам", Результат[1].Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам"));
	ИсходныеДанные.Вставить("Организации", Результат[2].Выгрузить().ВыгрузитьКолонку("Организация"));
	ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗаблокироватьРегистрЗаданий(ИмяРегистраЗаданий, НомерЗаданияДоРасчета, АналитикиРасчета)
	
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений."+ИмяРегистраЗаданий;
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	Если АналитикиРасчета.АналитикиУчетаПоПартнерам <> Неопределено 
		ИЛИ АналитикиРасчета.Организации <> Неопределено Тогда
		
		КоличествоАналитикПоПартнерам = КоличествоСтрокАналитики(АналитикиРасчета.АналитикиУчетаПоПартнерам);
		КоличествоОрганизаций = КоличествоСтрокАналитики(АналитикиРасчета.Организации);
		
		КоличествоСтрок = Макс(КоличествоОрганизаций, КоличествоАналитикПоПартнерам);
		
		ИсточникБлокировки = Новый ТаблицаЗначений;
		Счетчик = 0;
		Пока Счетчик < КоличествоСтрок Цикл
			ИсточникБлокировки.Добавить();
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		Если АналитикиРасчета.АналитикиУчетаПоПартнерам <> Неопределено Тогда
			ИсточникБлокировки.Колонки.Добавить("АналитикаУчетаПоПартнерам", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам"));
			ИсточникБлокировки.ЗагрузитьКолонку(АналитикиРасчета.АналитикиУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналитикаУчетаПоПартнерам", "АналитикаУчетаПоПартнерам");
		КонецЕсли;
		Если АналитикиРасчета.Организации <> Неопределено Тогда
			ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
			Если ТипЗнч(АналитикиРасчета.Организации) = Тип("СписокЗначений") Тогда
				ИсточникБлокировки.ЗагрузитьКолонку(АналитикиРасчета.Организации.ВыгрузитьЗначения(), "Организация");
			Иначе
				ИсточникБлокировки.ЗагрузитьКолонку(АналитикиРасчета.Организации, "Организация");
			КонецЕсли;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
	КонецЕсли;
	
	Блокировка.Заблокировать();
КонецПроцедуры

Функция КоличествоСтрокАналитики(АналитикаРасчета)
	
	Если АналитикаРасчета = Неопределено Тогда
		 КоличествоСтрокАналитики = 0;
	ИначеЕсли ТипЗнч(АналитикаРасчета) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(АналитикаРасчета) = Тип("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам") Тогда
		КоличествоСтрокАналитики = 1;
	Иначе
		КоличествоСтрокАналитики = АналитикаРасчета.Количество();
	КонецЕсли;
	
	Возврат КоличествоСтрокАналитики;
КонецФункции

// Этап 1Х: распределение расчетов с клиентами
Процедура РассчитатьРасчетыСКлиентами(НачалоПериода, ОкончаниеПериода, ИсходныеДанные, КоличествоЗаписей = 0)
	Контекст = "РасчетыСКлиентами";
	РасчетныеРасчетыСКлиентами = РасчетныеРасчетыСКлиентами(ИсходныеДанные.ДанныеДляРасчетовСКлиентами, ИсходныеДанные.Регистраторы, Неопределено, Ложь, КоличествоЗаписей);
	// ФАЗА 14: Запись регистра РасчетыСКлиентамиПоДокументам
	ЗаписатьРасчетныеПартии(РегистрыНакопления.РасчетыСКлиентамиПоДокументам, РасчетныеРасчетыСКлиентами, ИсходныеДанные.Регистраторы);
	ОчиститьРегистрНаСервере(ИсходныеДанные.Регистраторы, "РасчетыСКлиентамиПоДокументам");
	РегистраторыКОтражению = РасчетныеРасчетыСКлиентами.ВыгрузитьКолонку("Регистратор");
	СформироватьДвиженияПоНДС(Контекст, РегистраторыКОтражению);
	// Обновление сумм в регистре сведений и регистрах упр. баланса
	СуммыДокументовВВалютеРегл(Контекст, РегистраторыКОтражению);
	// Обновление упр. баланса
	СформироватьДвиженияПоУправленческомуУчету(Контекст, РасчетныеРасчетыСКлиентами);
КонецПроцедуры

// Этап 2Х: распределение расчетов с поставщиками
Процедура РассчитатьРасчетыСПоставщиками(НачалоПериода, ОкончаниеПериода, ИсходныеДанные, КоличествоЗаписей = 0)
	Контекст = "РасчетыСПоставщиками";
	РасчетныеРасчетыСПоставщиками = РасчетныеРасчетыСПоставщиками(ИсходныеДанные.ДанныеДляРасчетовСПоставщиками, ИсходныеДанные.Регистраторы, Неопределено, Ложь, КоличествоЗаписей);
	// ФАЗА 14: Запись регистра РасчетыСПоставщикамиПоДокументам
	ЗаписатьРасчетныеПартии(РегистрыНакопления.РасчетыСПоставщикамиПоДокументам, РасчетныеРасчетыСПоставщиками, ИсходныеДанные.Регистраторы);
	ОчиститьРегистрНаСервере(ИсходныеДанные.Регистраторы, "РасчетыСПоставщикамиПоДокументам");
	РегистраторыКОтражению = РасчетныеРасчетыСПоставщиками.ВыгрузитьКолонку("Регистратор");
	СформироватьДвиженияПоНДС(Контекст, РегистраторыКОтражению);
	// Обновление сумм в регистре сведений и регистрах упр. баланса
	СуммыДокументовВВалютеРегл(Контекст, РегистраторыКОтражению);
	// Обновление упр. баланса
	СформироватьДвиженияПоУправленческомуУчету(Контекст, РасчетныеРасчетыСПоставщиками);
КонецПроцедуры

// Этап 4Х: Запись новых границ расчетов
Процедура УстановитьГраницыРасчетов(РассчитаныйПериод, ОкончаниеПериодаРасчета, ИмяРегистраЗаданий, АналитикиРасчета, ВременныеТаблицы, НомерЗаданияДоРасчета, КоличествоОбработанныхЭлементов = 0)
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачалоРасчета(ИмяРегистраЗаданий, ОкончаниеПериодаРасчета, АналитикиРасчета, НомерЗаданияДоРасчета) < РассчитаныйПериод Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерЗадания,
	|	Задания.Организация,
	|	Задания.АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов,
	|	Задания.Документ
	|ИЗ
	|	КэшГраниц КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СледующийМесяц                   КАК Месяц,
	|	МАКСИМУМ(Границы.НомерЗадания)    КАК НомерЗадания,
	|	Границы.Организация               КАК Организация,
	|	Границы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Границы.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО                      КАК Документ
	|ИЗ
	|	КэшГраниц КАК Границы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяРегистраЗаданий КАК Задания
	|	ПО &СледующийМесяц = Задания.Месяц
	|		И Границы.НомерЗадания = Задания.НомерЗадания
	|		И Границы.Организация = Задания.Организация
	|		И Границы.АналитикаУчетаПоПартнерам = Задания.АналитикаУчетаПоПартнерам
	|		И Границы.ОбъектРасчетов = Задания.ОбъектРасчетов
	|		И НЕОПРЕДЕЛЕНО = Задания.Документ
	|ГДЕ
	|	Задания.Месяц ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.Организация,
	|	Границы.АналитикаУчетаПоПартнерам,
	|	Границы.ОбъектРасчетов
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРегистраЗаданий", "РегистрСведений." + ИмяРегистраЗаданий);
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("СледующийМесяц", КонецМесяца(РассчитаныйПериод) + 1);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений[ИмяРегистраЗаданий].СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.АналитикаУчетаПоПартнерам.Установить(Выборка.АналитикаУчетаПоПартнерам);
		Набор.Отбор.ОбъектРасчетов.Установить(Выборка.ОбъектРасчетов);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Записать(); // Очистили рассчитанные аналитики в прошлом периоде
		КоличествоОбработанныхЭлементов = КоличествоОбработанныхЭлементов + 1;
	КонецЦикла;
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений[ИмяРегистраЗаданий].СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.АналитикаУчетаПоПартнерам.Установить(Выборка.АналитикаУчетаПоПартнерам);
		Набор.Отбор.ОбъектРасчетов.Установить(Выборка.ОбъектРасчетов);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		СтрокаНабора = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		Набор.Записать(Истина); // Перенесли рассчитанные аналитики в новый период
		КоличествоОбработанныхЭлементов = КоличествоОбработанныхЭлементов + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыСКлиентами

// Текст запроса исходных движений для распределения расчетов с клиентами
Функция ДанныеДляРасчетовСКлиентами(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ВременныеТаблицы)
	ТекстСортировка = "
		|УПОРЯДОЧИТЬ ПО
		|	Период, Приоритет, Регистратор
		|";
	
	ИсходныйТекстЗапроса =
		ТекстРасчетыСКлиентамиИнициализация() + ";"
		+ ТекстКорректировкиРеализаций() + ";"
		+ ТекстОписаниеРасчетыСКлиентами()
		+ "ОБЪЕДИНИТЬ ВСЕ" + ТекстОстаткиРасчетовСКлиентами()
		+ "ОБЪЕДИНИТЬ ВСЕ" + ТекстОтгрузкиПрошлыхПериодов()
		+ "ОБЪЕДИНИТЬ ВСЕ" + ТекстДвиженияРасчетовСКлиентами()
		+ "ОБЪЕДИНИТЬ ВСЕ" + ТекстАктуальныеЗаписиРасчетовСКлиентами()
		+ ТекстСортировка;
	ИсходныйЗапрос = Новый Запрос(ИсходныйТекстЗапроса);
	ИсходныйЗапрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ИсходныйЗапрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	ИсходныйЗапрос.УстановитьПараметр("АналитикиРасчета", АналитикиРасчета);
	ИсходныйЗапрос.УстановитьПараметр("ПоВсемАналитикам", АналитикиРасчета = Неопределено);
	ИсходныйЗапрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	ИсходныйЗапрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	СписокТиповЗаказов = Новый СписокЗначений;
	СписокТиповЗаказов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	СписокТиповЗаказов.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	ИсходныйЗапрос.УстановитьПараметр("СписокТиповЗаказов", СписокТиповЗаказов);
	ИсходныйЗапрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ДанныеДляРасчета = ИсходныйЗапрос.Выполнить();

	Возврат ДанныеДляРасчета;
КонецФункции

Функция РасчетныеРасчетыСКлиентами(ДанныеДляРасчета, Регистраторы, ЦепочкиДвижений = Неопределено, Тест = Ложь, КоличествоЗаписей = 0) // ДанныеДляРасчета будут изменены
	// Шаг 1: создаем буфер накопления рассчитанных партий
	Запрос = Новый Запрос(ТекстОписаниеРасчетыСКлиентами());
	РасчетныеПартии = Запрос.Выполнить().Выгрузить();
	
	// Шаг 2: готовим описание обсчета
	КонтекстЦепочек = ОписаниеЦепочек("ОстатокОплат, ОстатокОтгрузок, ПрошлаяОтгрузка, Оплата, СторноОплаты, СторноОтгрузки, Отгрузка, ВозвратТоваров, Актуальные");
	
	ПоляПотреблений = "АналитикаУчетаПоПартнерам, ЗаказКлиента, Валюта";
	КонтекстДвижений = ОписаниеДвижений(
		"РасчетыСКлиентами", ПереченьПолей(РасчетныеПартии.Колонки),
		ПоляПотреблений,
		"КВозврату, Долг, ДолгУпр, ДолгРегл, Предоплата, ПредоплатаУпр, ПредоплатаРегл, ЗалогЗаТару, ЗалогЗаТаруРегл, Сумма",
		"Сумма", "Сумма", "РасчетныйДокумент", "Период", "Период, ПриоритетРасчетногоДокумента УБЫВ, Приоритет ВОЗР, Регистратор");
		
	// Шаг 3: обсчитываем потребления из партий
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "Оплата", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Оплата", "ОстатокОтгрузок", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Оплата", "Отгрузка", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Оплата", "СторноОплаты", ПоляПотреблений);
	
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "Отгрузка", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Отгрузка", "ОстатокОплат", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Отгрузка", "Оплата", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Отгрузка", "СторноОтгрузки", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Отгрузка", "ВозвратТоваров", ПоляПотреблений);
	
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "СторноОплаты", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОплаты", "ОстатокОплат", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОплаты", "Оплата", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОплаты", "ВозвратТоваров", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОплаты", "СторноОтгрузки", ПоляПотреблений);
	
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "ВозвратТоваров", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ВозвратТоваров", "ОстатокОтгрузок", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ВозвратТоваров", "Отгрузка", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ВозвратТоваров", "СторноОплаты", ПоляПотреблений);
	
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "СторноОтгрузки", "АналитикаУчетаПоПартнерам, ЗаказКлиента, Валюта, ДокументОтгрузки");
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОтгрузки", "ОстатокОтгрузок", "АналитикаУчетаПоПартнерам, ЗаказКлиента, Валюта, ДокументОтгрузки");
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОтгрузки", "ПрошлаяОтгрузка", "АналитикаУчетаПоПартнерам, ЗаказКлиента, Валюта, ДокументОтгрузки");
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОтгрузки", "Отгрузка", "АналитикаУчетаПоПартнерам, ЗаказКлиента, Валюта, ДокументОтгрузки");
	
	ЦепочкиДвижений = ЦепочкиДвиженийИзВыборки(КонтекстЦепочек, ДанныеДляРасчета);
	РассчитатьПартииПоЦепочкамИзВыборки(КонтекстДвижений, ДанныеДляРасчета, РасчетныеПартии, ЦепочкиДвижений, Регистраторы, Тест, КоличествоЗаписей);
	
	// Шаг 4: Удаляем строки, не требующие записи в базу.
	УдалитьНезаписываемыеСтроки(КонтекстДвижений.Контекст, РасчетныеПартии);
	
	// Шаг 5: Сортировка партий для дальнейшей записи
	РасчетныеПартии.Сортировать("Регистратор, Приоритет", Новый СравнениеЗначений);
	Возврат РасчетныеПартии;
	
КонецФункции

Функция ТекстРасчетыСКлиентамиИнициализация()
	Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Аналитики.КлючАналитики
		|ПОМЕСТИТЬ АналитикиРасчета
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитики
		|ГДЕ
		|	(Аналитики.КлючАналитики В (&АналитикиРасчета)
		|		ИЛИ &ПоВсемАналитикам)
		|;
		|///////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор                             КАК Регистратор,
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                            КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ЕСТЬNULL(Суммы.Валюта, Расчеты.Валюта)          КАК ВалютаДокумента
		|ПОМЕСТИТЬ РегистраторыКРасчету
		|ИЗ 
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Расчеты.Регистратор               КАК Регистратор,
		|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|		Расчеты.ЗаказКлиента              КАК ЗаказКлиента,
		|		Расчеты.Валюта                    КАК Валюта
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты 
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК Аналитики
		|				ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.КлючАналитики
		|	ГДЕ
		|		Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		И Расчеты.Сумма <> 0
		|
		|	ОБЪЕДИНИТЬ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РасчетыПоДокументам.Регистратор               КАК Регистратор,
		|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|		РасчетыПоДокументам.ЗаказКлиента              КАК ЗаказКлиента,
		|		РасчетыПоДокументам.Валюта                    КАК Валюта
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыПоДокументам 
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК Аналитики
		|				ПО РасчетыПоДокументам.АналитикаУчетаПоПартнерам = Аналитики.КлючАналитики
		|	ГДЕ
		|		РасчетыПоДокументам.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		И (РасчетыПоДокументам.Долг <> 0 ИЛИ РасчетыПоДокументам.Предоплата <> 0)
		|	) КАК Расчеты
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
		|	ПО Расчеты.Регистратор = Суммы.Регистратор
		|		И (Расчеты.АналитикаУчетаПоПартнерам = Суммы.АналитикаУчетаПоПартнерам
		|			ИЛИ Суммы.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
		|		И Суммы.ТипРасчетов В (ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом), ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка))
		|		И НЕ Суммы.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
		|;
		|///////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК Регистратор
		|ПОМЕСТИТЬ ДокументыОтгрузки
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК Аналитики
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.КлючАналитики
		|ГДЕ
		|	Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Расчеты.Сумма <> 0
		|	И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|;
		|////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДД.РасчетныйДокумент КАК Ссылка,
		|	МАКСИМУМ(Периодика.Регистратор) КАК Регистратор,
		|	МАКСИМУМ(ВЫБОР 
		|				КОГДА Периодика.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
		|						ТОГДА ВЫРАЗИТЬ(Периодика.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Дата 
		|					ИНАЧЕ Периодика.Период 
		|			КОНЕЦ) КАК Период
		|ПОМЕСТИТЬ ОстаткиПоЛИФО
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&НачалоПериода) КАК ДД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Периодика
		|		ПО Периодика.Период < &НачалоПериода
		|		И Периодика.РасчетныйДокумент = ДД.РасчетныйДокумент
		|ГДЕ
		|	ДД.РасчетныйДокумент <> НЕОПРЕДЕЛЕНО
		|	И ((Периодика.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И Периодика.Долг > 0)
		|		ИЛИ (Периодика.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Периодика.Предоплата > 0)
		|	)
		|СГРУППИРОВАТЬ ПО
		|	ДД.РасчетныйДокумент
		|;
		|///////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор КАК Регистратор,
		|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДокументыОтгрузки.Регистратор КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ПрошлыеОтгрузки
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузки КАК ДокументыОтгрузки
		|	ПО Расчеты.Регистратор = ДокументыОтгрузки.Регистратор
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК ОтборПоАналитикам
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ОтборПоАналитикам.КлючАналитики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоЛИФО КАК ОстаткиПоЛИФО
		|	ПО Расчеты.РасчетныйДокумент = ОстаткиПоЛИФО.Ссылка
		|ГДЕ
		|	Расчеты.Период < &НачалоПериода
		|	И ОстаткиПоЛИФО.Ссылка ЕСТЬ NULL
		|	И Расчеты.РасчетныйДокумент <> ДокументыОтгрузки.Регистратор
		|;
		|////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор               КАК Регистратор,
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента              КАК ЗаказКлиента,
		|	Расчеты.Валюта                    КАК Валюта
		|ПОМЕСТИТЬ АктуальныеАналитики
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыКРасчету КАК Регистраторы
		|	ПО Расчеты.Регистратор = Регистраторы.Регистратор
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ АналитикиРасчета КАК АналитикиКРасчету
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикиКРасчету.КлючАналитики
		|ГДЕ
		|	АналитикиКРасчету.КлючАналитики ЕСТЬ NULL
		|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|;
		|////////////////////////////////////////
		|ВЫБРАТЬ 
		|	Корректировки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Корректировки.ЗаказКлиента              КАК ЗаказКлиента,
		|	Корректировки.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Корректировки.Валюта                    КАК Валюта,
		|	СУММА(Корректировки.КВозврату)          КАК КВозврату,
		|	СУММА(Корректировки.Долг)               КАК Долг,
		|	СУММА(Корректировки.ДолгУпр)            КАК ДолгУпр,
		|	СУММА(Корректировки.ДолгРегл)           КАК ДолгРегл,
		|	СУММА(Корректировки.Предоплата)         КАК Предоплата,
		|	СУММА(Корректировки.ПредоплатаУпр)      КАК ПредоплатаУпр,
		|	СУММА(Корректировки.ПредоплатаРегл)     КАК ПредоплатаРегл,
		|	СУММА(Корректировки.ЗалогЗаТару)        КАК ЗалогЗаТару,
		|	СУММА(Корректировки.ЗалогЗаТаруРегл)    КАК ЗалогЗаТаруРегл
		|ПОМЕСТИТЬ ВТКорректировкиПоДокументам
		|ИЗ	
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Корректировки
		|ГДЕ
		|	Корректировки.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|	И Корректировки.Период МЕЖДУ  &НачалоПериода И &ОкончаниеПериода
		|СГРУППИРОВАТЬ ПО 
		|	Корректировки.АналитикаУчетаПоПартнерам,
		|	Корректировки.ЗаказКлиента,
		|	Корректировки.РасчетныйДокумент,
		|	Корректировки.Валюта
		|;
		|/////////////////////////////////////////////
		|ВЫБРАТЬ
		|	10 КАК Приоритет,
		|	ВЫБОР КОГДА ДД.ПредоплатаОстаток <> 0 
		|		ТОГДА ""ОстатокОплат""
		|		ИНАЧЕ ""ОстатокОтгрузок""
		|	КОНЕЦ КАК ТипЗаписи,
		|	ИСТИНА КАК РасчетЗавершен,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ЕСТЬNULL(Периодика.Период, &НачалоПериода) КАК Период,
		|	ЕСТЬNULL(Периодика.Регистратор, ДД.РасчетныйДокумент) КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА ДД.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|		ТОГДА NULL
		|		ИНАЧЕ ДД.ЗаказКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|	ДД.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	ВЫБОР КОГДА (ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0) + ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0)) < 0
		|		ТОГДА 0 - (ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0) + ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0))
		|		ИНАЧЕ (ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0)  + ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0))
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР КОГДА ДД.КВозвратуОстаток + ЕСТЬNULL(Корректировки.КВозврату,0) < 0
		|		ТОГДА 0 - (ДД.КВозвратуОстаток + ЕСТЬNULL(Корректировки.КВозврату,0))
		|		ИНАЧЕ ДД.КВозвратуОстаток + ЕСТЬNULL(Корректировки.КВозврату,0)
		|	КОНЕЦ КАК КВозврату,
		|	ВЫБОР КОГДА ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0) < 0
		|		ТОГДА 0 - (ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0))
		|		ИНАЧЕ ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0)
		|	КОНЕЦ КАК Долг,
		|	ВЫБОР КОГДА ДД.ДолгУпрОстаток + ЕСТЬNULL(Корректировки.ДолгУпр,0) < 0
		|		ТОГДА 0 - (ДД.ДолгУпрОстаток + ЕСТЬNULL(Корректировки.ДолгУпр,0))
		|		ИНАЧЕ ДД.ДолгУпрОстаток + ЕСТЬNULL(Корректировки.ДолгУпр,0)
		|	КОНЕЦ КАК ДолгУпр,
		|	ВЫБОР КОГДА ДД.ДолгРеглОстаток + ЕСТЬNULL(Корректировки.ДолгРегл,0) < 0
		|		ТОГДА 0 - (ДД.ДолгРеглОстаток + ЕСТЬNULL(Корректировки.ДолгРегл,0))
		|		ИНАЧЕ ДД.ДолгРеглОстаток + ЕСТЬNULL(Корректировки.ДолгРегл,0)
		|	КОНЕЦ КАК ДолгРегл,
		|	ВЫБОР КОГДА ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0) < 0
		|		ТОГДА 0 - (ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0))
		|		ИНАЧЕ ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0)
		|	КОНЕЦ КАК Предоплата,
		|	ВЫБОР КОГДА ДД.ПредоплатаУпрОстаток + ЕСТЬNULL(Корректировки.ПредоплатаУпр,0) < 0
		|		ТОГДА 0 - (ДД.ПредоплатаУпрОстаток + ЕСТЬNULL(Корректировки.ПредоплатаУпр,0))
		|		ИНАЧЕ ДД.ПредоплатаУпрОстаток + ЕСТЬNULL(Корректировки.ПредоплатаУпр,0)
		|	КОНЕЦ КАК ПредоплатаУпр,
		|	ВЫБОР КОГДА ДД.ПредоплатаРеглОстаток + ЕСТЬNULL(Корректировки.ПредоплатаРегл,0) < 0
		|		ТОГДА 0 - (ДД.ПредоплатаРеглОстаток + ЕСТЬNULL(Корректировки.ПредоплатаРегл,0))
		|		ИНАЧЕ ДД.ПредоплатаРеглОстаток + ЕСТЬNULL(Корректировки.ПредоплатаРегл,0)
		|	КОНЕЦ КАК ПредоплатаРегл,
		|	ВЫБОР КОГДА ДД.ЗалогЗаТаруОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТару,0) < 0
		|		ТОГДА 0 - (ДД.ЗалогЗаТаруОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТару,0))
		|		ИНАЧЕ ДД.ЗалогЗаТаруОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТару,0)
		|	КОНЕЦ КАК ЗалогЗаТару,
		|	ВЫБОР КОГДА ДД.ЗалогЗаТаруРеглОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТаруРегл,0)< 0
		|		ТОГДА 0 - (ДД.ЗалогЗаТаруРеглОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТаруРегл,0))
		|		ИНАЧЕ ДД.ЗалогЗаТаруРеглОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТаруРегл,0)
		|	КОНЕЦ КАК ЗалогЗаТаруРегл,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
		|	ДД.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаПлатежа,
		|	ЕСТЬNULL(Периодика.Регистратор, ДД.РасчетныйДокумент) КАК ДокументОтгрузки,
		|	1 КАК ИндексДвиженияВзаимозачета,
		|	ВЫБОР КОГДА ЕСТЬNULL(Периодика.Регистратор, 0) = ДД.РасчетныйДокумент 
		|		ТОГДА 1 
		|			ИНАЧЕ 0 
		|	КОНЕЦ КАК ПриоритетРасчетногоДокумента
		|ПОМЕСТИТЬ ВтОстаткиРасчетовСКлиентами
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&НачалоПериода) КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК Аналитики
		|	ПО ДД.АналитикаУчетаПоПартнерам = Аналитики.КлючАналитики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоЛИФО КАК Периодика
		|		ПО Периодика.Ссылка = ДД.РасчетныйДокумент
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКорректировкиПоДокументам КАК Корректировки
		|		ПО ДД.АналитикаУчетаПоПартнерам = Корректировки.АналитикаУчетаПоПартнерам
		|			И ДД.ЗаказКлиента           = Корректировки.ЗаказКлиента
		|			И ДД.РасчетныйДокумент      = Корректировки.РасчетныйДокумент
		|			И ДД.Валюта                 = Корректировки.Валюта
		|";
КонецФункции

Функция ТекстКорректировкиРеализаций()
	Возврат "
		|ВЫБРАТЬ
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказКлиента КАК ЗаказКлиента,
		|	ДД.Валюта КАК Валюта,
		|
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ТОГДА - ДД.Сумма
		|		ИНАЧЕ ДД.Сумма
		|	КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ТОГДА - ДД.СуммаУпр
		|		ИНАЧЕ ДД.СуммаУпр
		|	КОНЕЦ) КАК СуммаУпр,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ТОГДА - ДД.СуммаРегл
		|		ИНАЧЕ ДД.СуммаРегл
		|	КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ТОГДА - ДД.ЗалогЗаТару
		|		ИНАЧЕ ДД.ЗалогЗаТару
		|	КОНЕЦ) КАК ЗалогЗаТару,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ТОГДА - ДД.КОплате
		|		ИНАЧЕ ДД.КОплате
		|	КОНЕЦ) КАК КОплате,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ТОГДА - ДД.Оплачивается
		|		ИНАЧЕ ДД.Оплачивается
		|	КОНЕЦ) КАК Оплачивается,
		|
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДД.ДатаПлатежа КАК ДатаПлатежа,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаРеглУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаРегл,
		|	ВЫБОР КОГДА КРасчету.Валюта = &ВалютаУпрУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаУпрУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаУпр
		|ПОМЕСТИТЬ ВтКорректировки
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыКРасчету КАК КРасчету
		|	ПО ДД.Регистратор = КРасчету.Регистратор
		|		И ДД.АналитикаУчетаПоПартнерам = КРасчету.АналитикаУчетаПоПартнерам
		|		И ДД.ЗаказКлиента = КРасчету.ЗаказКлиента
		|		И ДД.Валюта = КРасчету.Валюта
		|ГДЕ
		|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И ДД.Сумма <> 0
		|	И ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ЗНАЧЕНИЕ(Документ.КорректировкаРеализации)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказКлиента,
		|	ДД.Валюта,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств,
		|	ДД.ДатаПлатежа,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаРеглУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР КОГДА КРасчету.Валюта = &ВалютаУпрУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаУпрУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|/////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ВЫБОР КОГДА ДД.Сумма < 0 
		|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ КАК ВидДвижения,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказКлиента КАК ЗаказКлиента,
		|	ДД.Валюта КАК Валюта,
		|
		|	ВЫБОР КОГДА ДД.Сумма < 0
		|		ТОГДА 0 - ДД.Сумма
		|		ИНАЧЕ ДД.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР КОГДА ДД.СуммаУпр < 0
		|		ТОГДА 0 - ДД.СуммаУпр
		|		ИНАЧЕ ДД.СуммаУпр
		|	КОНЕЦ КАК СуммаУпр,
		|	ВЫБОР КОГДА ДД.СуммаРегл < 0
		|		ТОГДА 0 - ДД.СуммаРегл
		|		ИНАЧЕ ДД.СуммаРегл
		|	КОНЕЦ КАК СуммаРегл,
		|
		|	ВЫБОР КОГДА ДД.ЗалогЗаТару < 0
		|		ТОГДА 0 - ДД.ЗалогЗаТару
		|		ИНАЧЕ ДД.ЗалогЗаТару
		|	КОНЕЦ КАК ЗалогЗаТару,
		|	ВЫБОР КОГДА ДД.КОплате < 0
		|		ТОГДА 0 - ДД.КОплате
		|		ИНАЧЕ ДД.КОплате
		|	КОНЕЦ КАК КОплате,
		|	ВЫБОР КОГДА ДД.Оплачивается < 0
		|		ТОГДА 0 - ДД.Оплачивается
		|		ИНАЧЕ ДД.Оплачивается
		|	КОНЕЦ КАК Оплачивается,
		|
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДД.ДатаПлатежа КАК ДатаПлатежа,
		|	ДД.РасчетПоКурсуДокументаРегл КАК РасчетПоКурсуДокументаРегл,
		|	ДД.РасчетПоКурсуДокументаУпр КАК РасчетПоКурсуДокументаУпр
		|ПОМЕСТИТЬ Корректировки
		|ИЗ ВтКорректировки КАК ДД
		|;
		|////////////////////////////////////
		|УНИЧТОЖИТЬ ВтКорректировки
		|";
КонецФункции

Функция ТекстОписаниеРасчетыСКлиентами()
	Возврат "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК Приоритет,
		|	""ХХХХХХХХХХХХХХХХХХ"" КАК ТипЗаписи,
		|	ЛОЖЬ КАК РасчетЗавершен,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказКлиента КАК ЗаказКлиента,
		|	ДД.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	0. КАК Сумма,
		|	0. КАК КВозврату,
		|	0. КАК Долг,
		|	0. КАК ДолгУпр,
		|	0. КАК ДолгРегл,
		|	0. КАК Предоплата,
		|	0. КАК ПредоплатаУпр,
		|	0. КАК ПредоплатаРегл,
		|	0. КАК ЗалогЗаТару,
		|	0. КАК ЗалогЗаТаруРегл,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаПлатежа,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки,
		|	НЕОПРЕДЕЛЕНО КАК РасчетПоКурсуДокументаРегл,
		|	НЕОПРЕДЕЛЕНО КАК РасчетПоКурсуДокументаУпр,
		|	1 КАК ИндексДвиженияВзаимозачета,
		|	0 КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДД
		|";
КонецФункции
	
Функция ТекстОстаткиРасчетовСКлиентами()
	Возврат "
		|ВЫБРАТЬ
		|	Остатки.Приоритет КАК Приоритет,
		|	Остатки.ТипЗаписи КАК ТипЗаписи,
		|	Остатки.РасчетЗавершен КАК РасчетЗавершен,
		|	Остатки.ВидДвижения КАК ВидДвижения,
		|	Остатки.Период КАК Период,
		|	Остатки.Регистратор КАК Регистратор,
		|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента КАК ЗаказКлиента,
		|	Остатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	Остатки.Валюта КАК Валюта,
		|	Остатки.Сумма КАК Сумма,
		|	Остатки.КВозврату КАК КВозврату,
		|	Остатки.Долг КАК Долг,
		|	Остатки.ДолгУпр КАК ДолгУпр,
		|	Остатки.ДолгРегл КАК ДолгРегл,
		|	Остатки.Предоплата КАК Предоплата,
		|	Остатки.ПредоплатаУпр КАК ПредоплатаУпр,
		|	Остатки.ПредоплатаРегл КАК ПредоплатаРегл,
		|	Остатки.ЗалогЗаТару КАК ЗалогЗаТару,
		|	Остатки.ЗалогЗаТаруРегл КАК ЗалогЗаТаруРегл,
		|	Остатки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	Остатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Остатки.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа,
		|	Остатки.ДатаПлатежа КАК ДатаПлатежа,
		|	Остатки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВЫБОР КОГДА Остатки.Валюта = &ВалютаРеглУчета
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Суммы.Валюта), ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = &ВалютаРеглУчета
		|		ИЛИ ТИПЗНАЧЕНИЯ(Остатки.РасчетныйДокумент) <> ТИП(Документ.ВзаимозачетЗадолженности)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаРегл,
		|	ВЫБОР КОГДА Остатки.Валюта = &ВалютаУпрУчета
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Суммы.Валюта), ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = &ВалютаУпрУчета
		|		ИЛИ ТИПЗНАЧЕНИЯ(Остатки.РасчетныйДокумент) <> ТИП(Документ.ВзаимозачетЗадолженности)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаУпр,
		|	ИндексДвиженияВзаимозачета КАК ИндексДвиженияВзаимозачета,
		|	ПриоритетРасчетногоДокумента КАК ПриоритетРасчетногоДокумента
		|
		|ИЗ ВтОстаткиРасчетовСКлиентами КАК Остатки
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
		|		ПО Остатки.Регистратор = Суммы.Регистратор
		|			И (Остатки.АналитикаУчетаПоПартнерам = Суммы.АналитикаУчетаПоПартнерам
		|				ИЛИ Суммы.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
		|			И ТИПЗНАЧЕНИЯ(Суммы.Регистратор) <> ТИП(Документ.ВзаимозачетЗадолженности)
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Приоритет,
		|	Остатки.ТипЗаписи,
		|	Остатки.РасчетЗавершен,
		|	Остатки.ВидДвижения,
		|	Остатки.Период,
		|	Остатки.Регистратор,
		|	Остатки.АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента,
		|	Остатки.РасчетныйДокумент,
		|	Остатки.Валюта,
		|	Остатки.Сумма,
		|	Остатки.КВозврату,
		|	Остатки.Долг,
		|	Остатки.ДолгУпр,
		|	Остатки.ДолгРегл,
		|	Остатки.Предоплата,
		|	Остатки.ПредоплатаУпр,
		|	Остатки.ПредоплатаРегл,
		|	Остатки.ЗалогЗаТару,
		|	Остатки.ЗалогЗаТаруРегл,
		|	Остатки.ХозяйственнаяОперация,
		|	Остатки.СтатьяДвиженияДенежныхСредств,
		|	Остатки.УдалитьДатаПлатежа,
		|	Остатки.ДатаПлатежа,
		|	Остатки.ДокументОтгрузки,
		|	ИндексДвиженияВзаимозачета,
		|	ПриоритетРасчетногоДокумента
		|	
		|";
КонецФункции
	
Функция ТекстОтгрузкиПрошлыхПериодов()
	Возврат "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДД.Регистратор <> ДД.РасчетныйДокумент
		|		ТОГДА 9
		|		ИНАЧЕ 10
		|	КОНЕЦ КАК Приоритет,
		|	""ПрошлаяОтгрузка"" КАК ТипЗаписи,
		|	ИСТИНА КАК РасчетЗавершен,
		|	ДД.ВидДвижения КАК ВидДвижения,
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА ДД.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|		ТОГДА NULL
		|		ИНАЧЕ ДД.ЗаказКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|	ВЫБОР КОГДА ДД.РасчетныйДокумент = ПрошлыеОтгрузки.ДокументОтгрузки
		|		ТОГДА ДД.Регистратор
		|		ИНАЧЕ ДД.РасчетныйДокумент
		|	КОНЕЦ КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	СУММА(ВЫБОР КОГДА (ДД.Долг + ДД.Предоплата) < 0
		|		ТОГДА 0 - (ДД.Долг + ДД.Предоплата)
		|		ИНАЧЕ (ДД.Долг + ДД.Предоплата)
		|	КОНЕЦ) КАК Сумма,
		|	СУММА(ДД.КВозврату) КАК КВозврату,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент = ДД.Регистратор
		|			ТОГДА ДД.Долг
		|			ИНАЧЕ 0
		|	КОНЕЦ) КАК Долг,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент = ДД.Регистратор
		|			ТОГДА ДД.ДолгУпр
		|			ИНАЧЕ 0
		|	КОНЕЦ) КАК ДолгУпр,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент = ДД.Регистратор
		|			ТОГДА ДД.ДолгРегл
		|			ИНАЧЕ 0
		|	КОНЕЦ) КАК ДолгРегл,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент <> ДД.Регистратор И ДД.Долг <> 0
		|			ТОГДА ДД.Долг
		|			ИНАЧЕ ДД.Предоплата
		|	КОНЕЦ) КАК Предоплата,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент <> ДД.Регистратор И ДД.ДолгУпр <> 0
		|			ТОГДА ДД.ДолгУпр
		|			ИНАЧЕ ДД.ПредоплатаУпр
		|	КОНЕЦ) КАК ПредоплатаУпр,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент <> ДД.Регистратор И ДД.ДолгРегл <> 0
		|			ТОГДА ДД.ДолгРегл
		|			ИНАЧЕ ДД.ПредоплатаРегл
		|	КОНЕЦ) КАК ПредоплатаРегл,
		|	СУММА(ДД.ЗалогЗаТару) КАК ЗалогЗаТару,
		|	СУММА(ДД.ЗалогЗаТаруРегл) КАК ЗалогЗаТаруРегл,
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	ДД.ДатаПлатежа КАК ДатаПлатежа,
		|	ПрошлыеОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ Суммы.Валюта = &ВалютаРеглУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаРегл,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаУпрУчета
		|		ИЛИ Суммы.Валюта = &ВалютаУпрУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаУпр,
		|	1 КАК ИндексДвиженияВзаимозачета,
		|	ВЫБОР КОГДА ДД.Регистратор = ДД.РасчетныйДокумент 
		|		ТОГДА 1
		|			ИНАЧЕ 0 
		|	КОНЕЦ КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрошлыеОтгрузки КАК ПрошлыеОтгрузки
		|	ПО ДД.Регистратор = ПрошлыеОтгрузки.Регистратор
		|		И ДД.РасчетныйДокумент = ПрошлыеОтгрузки.РасчетныйДокумент
		|		И ДД.АналитикаУчетаПоПартнерам = ПрошлыеОтгрузки.АналитикаУчетаПоПартнерам
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
		|	ПО ВЫБОР КОГДА ДД.РасчетныйДокумент = ПрошлыеОтгрузки.ДокументОтгрузки
		|				ТОГДА ДД.Регистратор
		|			ИНАЧЕ ДД.РасчетныйДокумент
		|		КОНЕЦ = Суммы.Регистратор
		|		И (ДД.АналитикаУчетаПоПартнерам = Суммы.АналитикаУчетаПоПартнерам
		|			ИЛИ Суммы.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
		|		И Суммы.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА ДД.Регистратор <> ДД.РасчетныйДокумент
		|		ТОГДА 9
		|		ИНАЧЕ 10
		|	КОНЕЦ,
		|	ДД.ВидДвижения,
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказКлиента,
		|	ДД.РасчетныйДокумент,
		|	ДД.Валюта,
		|	ДД.ДатаПлатежа,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств,
		|	ДД.ДатаПлатежа,
		|	ПрошлыеОтгрузки.ДокументОтгрузки,
		|	ВЫБОР КОГДА ДД.Регистратор = ДД.РасчетныйДокумент 
		|		ТОГДА 1
		|			ИНАЧЕ 0 
		|	КОНЕЦ,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ Суммы.Валюта = &ВалютаРеглУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаУпрУчета
		|		ИЛИ Суммы.Валюта = &ВалютаУпрУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|";
КонецФункции

Функция ТекстДвиженияРасчетовСКлиентами()
	Возврат "
		| // Движения по Расчетам с клиентами без корректировок реализаций
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0)
		|			ТОГДА 12
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		ТОГДА 14
		|		ИНАЧЕ 13
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Оплачивается > 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.КОплате > 0)
		|				И ДД.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|			ТОГДА ""Оплата""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ""Отгрузка""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомитенту))
		|			ТОГДА ""ВозвратТоваров""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|			ТОГДА ""СторноОтгрузки""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|			ТОГДА ""СторноОплаты""
		|	КОНЕЦ КАК ТипЗаписи,
		|	ЛОЖЬ КАК РасчетЗавершен,
		|	ДД.ВидДвижения КАК ВидДвижения,
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА ДД.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|		ТОГДА NULL
		|		ИНАЧЕ ДД.ЗаказКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|	ВЫБОР КОГДА ДД.РасчетныйДокумент <> Неопределено
		|		ТОГДА ДД.РасчетныйДокумент
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	СУММА(ДД.Сумма) КАК Сумма,
		|	0. КАК КВозврату,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					 И ДД.Сумма < 0)
		|			ТОГДА ДД.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК Долг,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					 И ДД.Сумма < 0)
		|			ТОГДА ДД.СуммаУпр
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ДолгУпр,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					 И ДД.Сумма < 0)
		|			ТОГДА ДД.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ДолгРегл,
		|	СУММА(
		|		ВЫБОР КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0)
		|				ТОГДА ДД.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК Предоплата,
		|	СУММА(
		|		ВЫБОР КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0)
		|				ТОГДА ДД.СуммаУпр
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ПредоплатаУпр,
		|	СУММА(
		|		ВЫБОР КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0)
		|				ТОГДА ДД.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ПредоплатаРегл,
		|	СУММА(ДД.ЗалогЗаТару) КАК ЗалогЗаТару,
		|	0. КАК ЗалогЗаТаруРегл,
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	ДД.ДатаПлатежа КАК ДатаПлатежа,
		|	ВЫБОР КОГДА ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		И ДД.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫРАЗИТЬ(ДД.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ КАК ДокументОтгрузки,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаРеглУчета
		|		ИЛИ ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаРегл,
		|	ВЫБОР КОГДА КРасчету.Валюта = &ВалютаУпрУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаУпрУчета
		|		ИЛИ ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаУпр,
		|
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			И ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|		ТОГДА 0
		|		КОГДА ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			И ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|		ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ИндексДвиженияВзаимозачета,
		|	0 КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыКРасчету КАК КРасчету
		|	ПО ДД.Регистратор = КРасчету.Регистратор
		|		И (ДД.АналитикаУчетаПоПартнерам = КРасчету.АналитикаУчетаПоПартнерам 
		|			ИЛИ КРасчету.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
		|		И ДД.ЗаказКлиента = КРасчету.ЗаказКлиента
		|		И ДД.Валюта = КРасчету.Валюта
		|ГДЕ
		|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И ДД.Сумма <> 0
		|	И ТИПЗНАЧЕНИЯ(ДД.Регистратор) <> ЗНАЧЕНИЕ(Документ.КорректировкаРеализации)
		|	И НЕ ДД.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0)
		|			ТОГДА 12
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		ТОГДА 14
		|		ИНАЧЕ 13
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Оплачивается > 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.КОплате > 0)
		|				И ДД.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|			ТОГДА ""Оплата""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ""Отгрузка""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомитенту))
		|			ТОГДА ""ВозвратТоваров""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|			ТОГДА ""СторноОтгрузки""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|			ТОГДА ""СторноОплаты""
		|	КОНЕЦ,
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ВЫБОР КОГДА ДД.РасчетныйДокумент <> Неопределено
		|		ТОГДА ДД.РасчетныйДокумент
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ,
		|	ДД.ВидДвижения,
		|	ДД.АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказКлиента,
		|	ДД.Валюта,
		|	ДД.ДатаПлатежа,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств,
		|	ДД.ДатаПлатежа,
		|	ВЫБОР КОГДА ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		И ДД.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫРАЗИТЬ(ДД.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаРеглУчета
		|		ИЛИ ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР КОГДА КРасчету.Валюта = &ВалютаУпрУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаУпрУчета
		|		ИЛИ ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			И ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|		ТОГДА 0
		|		КОГДА ТИПЗНАЧЕНИЯ(ДД.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			И ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|		ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		| // Движения документа Корректировка реализации
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0)
		|			ТОГДА 12
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		ТОГДА 14
		|		ИНАЧЕ 13
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Оплачивается > 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.КОплате > 0)
		|				И ДД.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|			ТОГДА ""Оплата""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ""Отгрузка""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0 И ДД.КОплате <> 0
		|			И ДД.ХозяйственнаяОперация В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя))
		|			ТОГДА ""ВозвратТоваров""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|			ТОГДА ""СторноОтгрузки""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Оплачивается = 0
		|			ТОГДА ""СторноОплаты""
		|	КОНЕЦ КАК ТипЗаписи,
		|	ЛОЖЬ КАК РасчетЗавершен,
		|	ДД.ВидДвижения КАК ВидДвижения,
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА ДД.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|		ТОГДА NULL
		|		ИНАЧЕ ДД.ЗаказКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|	ДД.Регистратор КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	СУММА(ДД.Сумма) КАК Сумма,
		|	0. КАК КВозврату,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0)
		|			ТОГДА ДД.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК Долг,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0)
		|			ТОГДА ДД.СуммаУпр
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ДолгУпр,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0)
		|			ТОГДА ДД.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ДолгРегл,
		|	СУММА(
		|		ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			ТОГДА ДД.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК Предоплата,
		|	СУММА(
		|		ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			ТОГДА ДД.СуммаУпр
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ПредоплатаУпр,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			ТОГДА ДД.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ПредоплатаРегл,
		|	СУММА(ДД.ЗалогЗаТару) КАК ЗалогЗаТару,
		|	0. КАК ЗалогЗаТаруРегл,
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	ДД.ДатаПлатежа КАК ДатаПлатежа,
		|	ВЫБОР КОГДА ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		И ДД.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫРАЗИТЬ(ДД.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ КАК ДокументОтгрузки,
		|	ДД.РасчетПоКурсуДокументаРегл КАК РасчетПоКурсуДокументаРегл,
		|	ДД.РасчетПоКурсуДокументаУпр КАК РасчетПоКурсуДокументаУпр,
		|	1 КАК ИндексДвиженияВзаимозачета,
		|	0 КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	Корректировки КАК ДД
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0)
		|			ТОГДА 12
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		ТОГДА 14
		|		ИНАЧЕ 13
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Оплачивается > 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.КОплате > 0)
		|				И ДД.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|			ТОГДА ""Оплата""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ""Отгрузка""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0 И ДД.КОплате <> 0
		|			И ДД.ХозяйственнаяОперация В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя))
		|			ТОГДА ""ВозвратТоваров""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|			ТОГДА ""СторноОтгрузки""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Оплачивается = 0
		|			ТОГДА ""СторноОплаты""
		|	КОНЕЦ,
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ДД.ВидДвижения,
		|	ДД.АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказКлиента,
		|	ДД.Валюта,
		|	ДД.ДатаПлатежа,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств,
		|	ДД.ДатаПлатежа,
		|	ВЫБОР КОГДА ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		И ДД.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫРАЗИТЬ(ДД.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ,
		|	ДД.РасчетПоКурсуДокументаРегл,
		|	ДД.РасчетПоКурсуДокументаУпр,
		|	0
		|";
КонецФункции

Функция ТекстАктуальныеЗаписиРасчетовСКлиентами()
	Возврат "
		|ВЫБРАТЬ
		|	11 КАК Приоритет,
		|	""Актуальные"" КАК ТипЗаписи,
		|	ИСТИНА КАК РасчетЗавершен,
		|	ДД.ВидДвижения КАК ВидДвижения,
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказКлиента КАК ЗаказКлиента,
		|	ДД.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	0. КАК Сумма,
		|	ДД.КВозврату КАК КВозврату,
		|	ДД.Долг КАК Долг,
		|	ДД.ДолгУпр КАК ДолгУпр,
		|	ДД.ДолгРегл КАК ДолгРегл,
		|	ДД.Предоплата КАК Предоплата,
		|	ДД.ПредоплатаУпр КАК ПредоплатаУпр,
		|	ДД.ПредоплатаРегл КАК ПредоплатаРегл,
		|	ДД.ЗалогЗаТару КАК ЗалогЗаТару,
		|	ДД.ЗалогЗаТаруРегл КАК ЗалогЗаТаруРегл,
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	ДД.ДатаПлатежа КАК ДатаПлатежа,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки,
		|	ЛОЖЬ КАК РасчетПоКурсуДокументаРегл,
		|	ЛОЖЬ КАК РасчетПоКурсуДокументаУпр,
		|	1 КАК ИндексДвиженияВзаимозачета,
		|	0 КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеАналитики КАК АктуальныеАналитики
		|	ПО ДД.Регистратор = АктуальныеАналитики.Регистратор
		|		И ДД.АналитикаУчетаПоПартнерам = АктуальныеАналитики.АналитикаУчетаПоПартнерам
		|		И ДД.ЗаказКлиента = АктуальныеАналитики.ЗаказКлиента
		|		И ДД.Валюта = АктуальныеАналитики.Валюта
		|";
КонецФункции

#КонецОбласти

#Область РасчетыСПоставщиками

// Текст запроса исходных движений для распределения расчетов с поставщиками
Функция ДанныеДляРасчетовСПоставщиками(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ВременныеТаблицы)
	// СОРТИРОВКА по аналитикам, приоритету и моменту движения - требование алгоритма обсчета расчетов
	ТекстСортировка = "
		|УПОРЯДОЧИТЬ ПО
		|	Период, Приоритет, Регистратор
		|";
	
	ИсходныйТекстЗапроса =
		ТекстРасчетыСПоставщикамиИнициализация() + ";"
		+  ТекстОписаниеРасчетыСПоставщиками()
		+ "ОБЪЕДИНИТЬ ВСЕ" +  ТекстОстаткиРасчетовСПоставщиками()
		+ "ОБЪЕДИНИТЬ ВСЕ" +  ТекстПоступленияПрошлыхПериодов()
		+ "ОБЪЕДИНИТЬ ВСЕ" +  ТекстДвиженияРасчетовСПоставщиками()
		+ ТекстСортировка;
	ИсходныйЗапрос = Новый Запрос(ИсходныйТекстЗапроса);
	ИсходныйЗапрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ИсходныйЗапрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	ИсходныйЗапрос.УстановитьПараметр("АналитикиРасчета", АналитикиРасчета);
	ИсходныйЗапрос.УстановитьПараметр("ПоВсемАналитикам", АналитикиРасчета = Неопределено);
	ИсходныйЗапрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	ИсходныйЗапрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	СписокТиповЗаказов = Новый СписокЗначений;
	СписокТиповЗаказов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	СписокТиповЗаказов.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	ИсходныйЗапрос.УстановитьПараметр("СписокТиповЗаказов", СписокТиповЗаказов);
	ИсходныйЗапрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ДанныеДляРасчета = ИсходныйЗапрос.Выполнить();

	Возврат ДанныеДляРасчета;
КонецФункции

Функция РасчетныеРасчетыСПоставщиками(ДанныеДляРасчета, Регистраторы, ЦепочкиДвижений = Неопределено, Тест = Ложь, КоличествоЗаписей = 0) // ДанныеДляРасчета будут изменены
	// Шаг 1: создаем буфер накопления рассчитанных партий
	Запрос = Новый Запрос(ТекстОписаниеРасчетыСПоставщиками());
	РасчетныеПартии = Запрос.Выполнить().Выгрузить();
	
	// Шаг 2: готовим описание обсчета
	КонтекстЦепочек = ОписаниеЦепочек("ОстатокОплат, ОстатокПоступлений, ПрошлоеПоступление, Оплата, СторноПоступления, СторноОплаты, ПоступлениеТоваров, ВозвратТоваров, Актуальные");
	
	ПоляПотреблений = "АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта";
	КонтекстДвижений = ОписаниеДвижений(
		"РасчетыСПоставщиками", ПереченьПолей(РасчетныеПартии.Колонки),
		ПоляПотреблений,
		"КВозврату, Долг, ДолгУпр, ДолгРегл, Предоплата, ПредоплатаУпр, ПредоплатаРегл, ЗалогЗаТару, ЗалогЗаТаруРегл, Сумма",
		"Сумма", "Сумма", "РасчетныйДокумент", "Период", "Период, ПриоритетРасчетногоДокумента УБЫВ, Приоритет ВОЗР");
		
	// Шаг 3: обсчитываем потребления из партий
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "Оплата", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Оплата", "ОстатокПоступлений", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Оплата", "ПоступлениеТоваров", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "Оплата", "СторноОплаты", ПоляПотреблений);
	
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "ПоступлениеТоваров", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ПоступлениеТоваров", "ОстатокОплат", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ПоступлениеТоваров", "Оплата", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ПоступлениеТоваров", "ВозвратТоваров", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ПоступлениеТоваров", "СторноПоступления", ПоляПотреблений);
	
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "СторноОплаты", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОплаты", "ОстатокОплат", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОплаты", "Оплата", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОплаты", "ВозвратТоваров", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноОплаты", "СторноПоступления", ПоляПотреблений); // возврат оплаты от поставщика
	
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "ВозвратТоваров", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ВозвратТоваров", "ОстатокПоступлений", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ВозвратТоваров", "ПоступлениеТоваров", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ВозвратТоваров", "ОстатокПоступлений", ПоляПотреблений);
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "ВозвратТоваров", "СторноОплаты", ПоляПотреблений);
	
	ДобавитьОписаниеПриемника(КонтекстЦепочек, "СторноПоступления", "АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта, ДокументПоступления");
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноПоступления", "ОстатокПоступлений", "АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта, ДокументПоступления");
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноПоступления", "ПрошлоеПоступление", "АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта, ДокументПоступления");
	ДобавитьОписаниеИсточника(КонтекстЦепочек, "СторноПоступления", "ПоступлениеТоваров", "АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта, ДокументПоступления");
	
	ЦепочкиДвижений = ЦепочкиДвиженийИзВыборки(КонтекстЦепочек, ДанныеДляРасчета);
	РассчитатьПартииПоЦепочкамИзВыборки(КонтекстДвижений, ДанныеДляРасчета, РасчетныеПартии, ЦепочкиДвижений, Регистраторы, Тест, КоличествоЗаписей);
	
	// Шаг 4: Удаляем строки, не требующие записи в базу.
	УдалитьНезаписываемыеСтроки(КонтекстДвижений.Контекст, РасчетныеПартии);
	
	// Шаг 5: Сортировка партий для дальнейшей записи
	РасчетныеПартии.Сортировать("Регистратор, Приоритет", Новый СравнениеЗначений);
	Возврат РасчетныеПартии;
КонецФункции

Функция ТекстРасчетыСПоставщикамиИнициализация()
	Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Аналитики.КлючАналитики КАК КлючАналитики,
		|	Аналитики.Организация   КАК Организация,
		|	Аналитики.Партнер       КАК Партнер,
		|	Аналитики.Контрагент    КАК Контрагент,
		|	Аналитики.Договор       КАК Договор
		|ПОМЕСТИТЬ АналитикиРасчета
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитики
		|ГДЕ
		|	(Аналитики.КлючАналитики В (&АналитикиРасчета)
		|		ИЛИ &ПоВсемАналитикам)
		|;
		|///////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор                             КАК Регистратор,
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                         КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ЕСТЬNULL(Суммы.Валюта, Расчеты.Валюта)          КАК ВалютаДокумента
		|ПОМЕСТИТЬ РегистраторыКРасчету
		|ИЗ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Расчеты.Регистратор               КАК Регистратор,
		|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|		Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
		|		Расчеты.Валюта                    КАК Валюта
		|	ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК Аналитики
		|			ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.КлючАналитики
		|	ГДЕ
		|		Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		И Расчеты.Сумма <> 0
		|
		|	ОБЪЕДИНИТЬ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РасчетыПоДокументам.Регистратор               КАК Регистратор,
		|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|		РасчетыПоДокументам.ЗаказПоставщику           КАК ЗаказПоставщику,
		|		РасчетыПоДокументам.Валюта                    КАК Валюта
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам 
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК Аналитики
		|				ПО РасчетыПоДокументам.АналитикаУчетаПоПартнерам = Аналитики.КлючАналитики
		|	ГДЕ
		|		РасчетыПоДокументам.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		И (РасчетыПоДокументам.Долг <> 0 ИЛИ РасчетыПоДокументам.Предоплата <> 0)
		|	) КАК Расчеты
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
		|	ПО Расчеты.Регистратор = Суммы.Регистратор
		|		И (Расчеты.АналитикаУчетаПоПартнерам = Суммы.АналитикаУчетаПоПартнерам
		|			ИЛИ Суммы.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
		|		И Суммы.ТипРасчетов В (ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком), ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка))
		|		И НЕ Суммы.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
		|;
		|///////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование КАК Регистратор
		|ПОМЕСТИТЬ ДокументыПоступления
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК Аналитики
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.КлючАналитики
		|ГДЕ
		|	Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Расчеты.Сумма <> 0
		|	И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|;
		|///////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор КАК Регистратор,
		|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДокументыПоступления.Регистратор КАК ДокументПоступления
		|ПОМЕСТИТЬ ПрошлыеПоступления
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоступления КАК ДокументыПоступления
		|	ПО Расчеты.Регистратор = ДокументыПоступления.Регистратор
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК ОтборПоАналитикам
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ОтборПоАналитикам.КлючАналитики
		|ГДЕ
		|	Расчеты.Период < &НачалоПериода
		|	И Расчеты.РасчетныйДокумент <> ДокументыПоступления.Регистратор
		|;
		|////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор               КАК Регистратор,
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
		|	Расчеты.Валюта                    КАК Валюта
		|ПОМЕСТИТЬ АктуальныеАналитики
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыКРасчету КАК Регистраторы
		|	ПО Расчеты.Регистратор = Регистраторы.Регистратор
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ АналитикиРасчета КАК АналитикиКРасчету
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикиКРасчету.КлючАналитики
		|ГДЕ
		|	АналитикиКРасчету.КлючАналитики ЕСТЬ NULL
		|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|;
		|////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДД.РасчетныйДокумент КАК Ссылка,
		|	МАКСИМУМ(Периодика.Регистратор) КАК Регистратор,
		|	МАКСИМУМ(ВЫБОР 
		|				КОГДА Периодика.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
		|						ТОГДА ВЫРАЗИТЬ(Периодика.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Дата 
		|					ИНАЧЕ Периодика.Период 
		|			КОНЕЦ) КАК Период
		|ПОМЕСТИТЬ ОстаткиПоЛИФО
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&НачалоПериода) КАК ДД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Периодика
		|		ПО Периодика.Период < &НачалоПериода
		|		И Периодика.РасчетныйДокумент = ДД.РасчетныйДокумент
		|ГДЕ
		|	ДД.РасчетныйДокумент <> НЕОПРЕДЕЛЕНО
		|	И ((Периодика.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Периодика.Долг > 0)
		|		ИЛИ (Периодика.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И Периодика.Предоплата > 0)
		|	)
		|СГРУППИРОВАТЬ ПО
		|	ДД.РасчетныйДокумент
		|;
		|////////////////////////////////////////
		|ВЫБРАТЬ 
		|	Корректировки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Корректировки.ЗаказПоставщику           КАК ЗаказПоставщику,
		|	Корректировки.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Корректировки.Валюта                    КАК Валюта,
		|	СУММА(Корректировки.КВозврату)          КАК КВозврату,
		|	СУММА(Корректировки.Долг)               КАК Долг,
		|	СУММА(Корректировки.ДолгУпр)            КАК ДолгУпр,
		|	СУММА(Корректировки.ДолгРегл)           КАК ДолгРегл,
		|	СУММА(Корректировки.Предоплата)         КАК Предоплата,
		|	СУММА(Корректировки.ПредоплатаУпр)      КАК ПредоплатаУпр,
		|	СУММА(Корректировки.ПредоплатаРегл)     КАК ПредоплатаРегл,
		|	СУММА(Корректировки.ЗалогЗаТару)        КАК ЗалогЗаТару,
		|	СУММА(Корректировки.ЗалогЗаТаруРегл)    КАК ЗалогЗаТаруРегл
		|ПОМЕСТИТЬ ВТКорректировкиПоДокументам
		|ИЗ	
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Корректировки
		|ГДЕ
		|	Корректировки.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|	И Корректировки.Период МЕЖДУ  &НачалоПериода И &ОкончаниеПериода
		|СГРУППИРОВАТЬ ПО 
		|Корректировки.АналитикаУчетаПоПартнерам,
		|Корректировки.ЗаказПоставщику,
		|Корректировки.РасчетныйДокумент,
		|Корректировки.Валюта
		|;
		|////////////////////////////////////////
		|ВЫБРАТЬ
		|	11 КАК Приоритет,
		|	ВЫБОР КОГДА ДД.ДолгОстаток <> 0 
		|		ТОГДА ""ОстатокПоступлений""
		|		ИНАЧЕ ""ОстатокОплат""
		|	КОНЕЦ КАК ТипЗаписи,
		|	ИСТИНА КАК РасчетЗавершен,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ЕСТЬNULL(Периодика.Период, &НачалоПериода) КАК Период,
		|	ЕСТЬNULL(Периодика.Регистратор, ДД.РасчетныйДокумент) КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА ДД.ЗаказПоставщику = НЕОПРЕДЕЛЕНО
		|		ТОГДА NULL
		|		ИНАЧЕ ДД.ЗаказПоставщику
		|	КОНЕЦ КАК ЗаказПоставщику,
		|	ДД.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	ВЫБОР КОГДА (ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0) + ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0)) < 0
		|		ТОГДА 0 - (ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0) + ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0))
		|		ИНАЧЕ (ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0)  + ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0))
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР КОГДА ДД.КВозвратуОстаток + ЕСТЬNULL(Корректировки.КВозврату,0) < 0
		|		ТОГДА 0 - (ДД.КВозвратуОстаток + ЕСТЬNULL(Корректировки.КВозврату,0))
		|		ИНАЧЕ ДД.КВозвратуОстаток + ЕСТЬNULL(Корректировки.КВозврату,0)
		|	КОНЕЦ КАК КВозврату,
		|	ВЫБОР КОГДА ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0) < 0
		|		ТОГДА 0 - (ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0))
		|		ИНАЧЕ ДД.ДолгОстаток + ЕСТЬNULL(Корректировки.Долг,0)
		|	КОНЕЦ КАК Долг,
		|	ВЫБОР КОГДА ДД.ДолгУпрОстаток + ЕСТЬNULL(Корректировки.ДолгУпр,0) < 0
		|		ТОГДА 0 - (ДД.ДолгУпрОстаток + ЕСТЬNULL(Корректировки.ДолгУпр,0))
		|		ИНАЧЕ ДД.ДолгУпрОстаток + ЕСТЬNULL(Корректировки.ДолгУпр,0)
		|	КОНЕЦ КАК ДолгУпр,
		|	ВЫБОР КОГДА ДД.ДолгРеглОстаток + ЕСТЬNULL(Корректировки.ДолгРегл,0) < 0
		|		ТОГДА 0 - (ДД.ДолгРеглОстаток + ЕСТЬNULL(Корректировки.ДолгРегл,0))
		|		ИНАЧЕ ДД.ДолгРеглОстаток + ЕСТЬNULL(Корректировки.ДолгРегл,0)
		|	КОНЕЦ КАК ДолгРегл,
		|	ВЫБОР КОГДА ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0) < 0
		|		ТОГДА 0 - (ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0))
		|		ИНАЧЕ ДД.ПредоплатаОстаток + ЕСТЬNULL(Корректировки.Предоплата,0)
		|	КОНЕЦ КАК Предоплата,
		|	ВЫБОР КОГДА ДД.ПредоплатаУпрОстаток + ЕСТЬNULL(Корректировки.ПредоплатаУпр,0) < 0
		|		ТОГДА 0 - (ДД.ПредоплатаУпрОстаток + ЕСТЬNULL(Корректировки.ПредоплатаУпр,0))
		|		ИНАЧЕ ДД.ПредоплатаУпрОстаток + ЕСТЬNULL(Корректировки.ПредоплатаУпр,0)
		|	КОНЕЦ КАК ПредоплатаУпр,
		|	ВЫБОР КОГДА ДД.ПредоплатаРеглОстаток + ЕСТЬNULL(Корректировки.ПредоплатаРегл,0) < 0
		|		ТОГДА 0 - (ДД.ПредоплатаРеглОстаток + ЕСТЬNULL(Корректировки.ПредоплатаРегл,0))
		|		ИНАЧЕ ДД.ПредоплатаРеглОстаток + ЕСТЬNULL(Корректировки.ПредоплатаРегл,0)
		|	КОНЕЦ КАК ПредоплатаРегл,
		|	ВЫБОР КОГДА ДД.ЗалогЗаТаруОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТару,0) < 0
		|		ТОГДА 0 - (ДД.ЗалогЗаТаруОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТару,0))
		|		ИНАЧЕ ДД.ЗалогЗаТаруОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТару,0)
		|	КОНЕЦ КАК ЗалогЗаТару,
		|	ВЫБОР КОГДА ДД.ЗалогЗаТаруРеглОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТаруРегл,0)< 0
		|		ТОГДА 0 - (ДД.ЗалогЗаТаруРеглОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТаруРегл,0))
		|		ИНАЧЕ ДД.ЗалогЗаТаруРеглОстаток + ЕСТЬNULL(Корректировки.ЗалогЗаТаруРегл,0)
		|	КОНЕЦ КАК ЗалогЗаТаруРегл,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	ЕСТЬNULL(Периодика.Регистратор, ДД.РасчетныйДокумент) КАК ДокументПоступления,
		|	ВЫБОР КОГДА ЕСТЬNULL(Периодика.Регистратор, 0) = ДД.РасчетныйДокумент 
		|		ТОГДА 1 
		|			ИНАЧЕ 0 
		|	КОНЕЦ КАК ПриоритетРасчетногоДокумента
		|
		|ПОМЕСТИТЬ ВтОстаткиРасчетыСПоставищками
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&НачалоПериода) КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиРасчета КАК Аналитики
		|	ПО ДД.АналитикаУчетаПоПартнерам = Аналитики.КлючАналитики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоЛИФО КАК Периодика
		|		ПО Периодика.Ссылка = ДД.РасчетныйДокумент
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКорректировкиПоДокументам КАК Корректировки
		|		ПО ДД.АналитикаУчетаПоПартнерам = Корректировки.АналитикаУчетаПоПартнерам
		|			И ДД.ЗаказПоставщику        = Корректировки.ЗаказПоставщику
		|			И ДД.РасчетныйДокумент      = Корректировки.РасчетныйДокумент
		|			И ДД.Валюта                 = Корректировки.Валюта
		|";
КонецФункции

Функция ТекстОписаниеРасчетыСПоставщиками()
	Возврат "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК Приоритет,
		|	""ХХХХХХХХХХХХХХХХХХ"" КАК ТипЗаписи,
		|	ЛОЖЬ КАК РасчетЗавершен,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ДД.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	0. КАК Сумма,
		|	0. КАК КВозврату,
		|	0. КАК Долг,
		|	0. КАК ДолгУпр,
		|	0. КАК ДолгРегл,
		|	0. КАК Предоплата,
		|	0. КАК ПредоплатаУпр,
		|	0. КАК ПредоплатаРегл,
		|	0. КАК ЗалогЗаТару,
		|	0. КАК ЗалогЗаТаруРегл,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	НЕОПРЕДЕЛЕНО КАК ДокументПоступления,
		|	НЕОПРЕДЕЛЕНО КАК РасчетПоКурсуДокументаРегл,
		|	НЕОПРЕДЕЛЕНО КАК РасчетПоКурсуДокументаУпр,
		|	0 КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДД
		|";
КонецФункции
	
Функция ТекстОстаткиРасчетовСПоставщиками()
	Возврат "
		|ВЫБРАТЬ
		|	Остатки.Приоритет КАК Приоритет,
		|	Остатки.ТипЗаписи КАК ТипЗаписи,
		|	Остатки.РасчетЗавершен КАК РасчетЗавершен,
		|	Остатки.ВидДвижения КАК ВидДвижения,
		|	Остатки.Период КАК Период,
		|	Остатки.Регистратор КАК Регистратор,
		|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику КАК ЗаказПоставщику,
		|	Остатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	Остатки.Валюта КАК Валюта,
		|	Остатки.Сумма КАК Сумма,
		|	Остатки.КВозврату КАК КВозврату,
		|	Остатки.Долг КАК Долг,
		|	Остатки.ДолгУпр КАК ДолгУпр,
		|	Остатки.ДолгРегл КАК ДолгРегл,
		|	Остатки.Предоплата КАК Предоплата,
		|	Остатки.ПредоплатаУпр КАК ПредоплатаУпр,
		|	Остатки.ПредоплатаРегл КАК ПредоплатаРегл,
		|	Остатки.ЗалогЗаТару КАК ЗалогЗаТару,
		|	Остатки.ЗалогЗаТаруРегл КАК ЗалогЗаТаруРегл,
		|	Остатки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	Остатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Остатки.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа,
		|	Остатки.ДокументПоступления КАК ДокументПоступления,
		|	ВЫБОР КОГДА Остатки.Валюта = &ВалютаРеглУчета
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Суммы.Валюта), ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = &ВалютаРеглУчета
		|		ИЛИ ТИПЗНАЧЕНИЯ(Остатки.РасчетныйДокумент) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаРегл,
		|	ВЫБОР КОГДА Остатки.Валюта = &ВалютаУпрУчета
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Суммы.Валюта), ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = &ВалютаУпрУчета
		|		ИЛИ ТИПЗНАЧЕНИЯ(Остатки.РасчетныйДокумент) = ТИП(Документ.ВзаимозачетЗадолженности)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаУпр,
		|	Остатки.ПриоритетРасчетногоДокумента КАК ПриоритетРасчетногоДокумента
		|
		|ИЗ ВтОстаткиРасчетыСПоставищками КАК Остатки
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
		|		ПО Остатки.Регистратор = Суммы.Регистратор
		|			И (Остатки.АналитикаУчетаПоПартнерам = Суммы.АналитикаУчетаПоПартнерам
		|				ИЛИ Суммы.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
		|			И ТИПЗНАЧЕНИЯ(Суммы.Регистратор) <> ТИП(Документ.ВзаимозачетЗадолженности)
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Приоритет,
		|	Остатки.ТипЗаписи,
		|	Остатки.РасчетЗавершен,
		|	Остатки.ВидДвижения,
		|	Остатки.Период,
		|	Остатки.Регистратор,
		|	Остатки.АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику,
		|	Остатки.РасчетныйДокумент,
		|	Остатки.Валюта,
		|	Остатки.Сумма,
		|	Остатки.КВозврату,
		|	Остатки.Долг ,
		|	Остатки.ДолгУпр,
		|	Остатки.ДолгРегл,
		|	Остатки.Предоплата,
		|	Остатки.ПредоплатаУпр,
		|	Остатки.ПредоплатаРегл,
		|	Остатки.ЗалогЗаТару,
		|	Остатки.ЗалогЗаТаруРегл,
		|	Остатки.ХозяйственнаяОперация,
		|	Остатки.СтатьяДвиженияДенежныхСредств,
		|	Остатки.УдалитьДатаПлатежа,
		|	Остатки.ДокументПоступления,
		|	Остатки.ПриоритетРасчетногоДокумента
		|";
КонецФункции
	
Функция ТекстПоступленияПрошлыхПериодов()
	Возврат "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДД.Регистратор <> ДД.РасчетныйДокумент
		|		ТОГДА 9
		|		ИНАЧЕ 10
		|	КОНЕЦ КАК Приоритет,
		|	""ПрошлоеПоступление"" КАК ТипЗаписи,
		|	ИСТИНА КАК РасчетЗавершен,
		|	ДД.ВидДвижения КАК ВидДвижения,
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА ДД.ЗаказПоставщику = НЕОПРЕДЕЛЕНО
		|		ТОГДА NULL
		|		ИНАЧЕ ДД.ЗаказПоставщику
		|	КОНЕЦ КАК ЗаказПоставщику,
		|	ВЫБОР КОГДА ДД.РасчетныйДокумент = ПрошлыеПоступления.ДокументПоступления
		|		ТОГДА ДД.Регистратор
		|		ИНАЧЕ ДД.РасчетныйДокумент
		|	КОНЕЦ КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	СУММА(ВЫБОР КОГДА (ДД.Долг + ДД.Предоплата) < 0
		|		ТОГДА 0 - (ДД.Долг + ДД.Предоплата)
		|		ИНАЧЕ (ДД.Долг + ДД.Предоплата)
		|	КОНЕЦ) КАК Сумма,
		|	СУММА(ДД.КВозврату) КАК КВозврату,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент = ДД.Регистратор
		|			ТОГДА ДД.Долг
		|			ИНАЧЕ 0
		|	КОНЕЦ) КАК Долг,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент = ДД.Регистратор
		|			ТОГДА ДД.ДолгУпр
		|			ИНАЧЕ 0
		|	КОНЕЦ) КАК ДолгУпр,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент = ДД.Регистратор
		|			ТОГДА ДД.ДолгРегл
		|			ИНАЧЕ 0
		|	КОНЕЦ) КАК ДолгРегл,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент <> ДД.Регистратор И ДД.Долг <> 0
		|			ТОГДА ДД.Долг
		|			ИНАЧЕ ДД.Предоплата
		|	КОНЕЦ) КАК Предоплата,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент <> ДД.Регистратор И ДД.ДолгУпр <> 0
		|			ТОГДА ДД.ДолгУпр
		|			ИНАЧЕ ДД.ПредоплатаУпр
		|	КОНЕЦ) КАК ПредоплатаУпр,
		|	СУММА(ВЫБОР КОГДА ДД.РасчетныйДокумент <> ДД.Регистратор И ДД.ДолгРегл <> 0
		|			ТОГДА ДД.ДолгРегл
		|			ИНАЧЕ ДД.ПредоплатаРегл
		|	КОНЕЦ) КАК ПредоплатаРегл,
		|	СУММА(ДД.ЗалогЗаТару) КАК ЗалогЗаТару,
		|	СУММА(ДД.ЗалогЗаТаруРегл) КАК ЗалогЗаТаруРегл,
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДД.ДатаПлатежа КАК УдалитьДатаПлатежа,
		|	ПрошлыеПоступления.ДокументПоступления КАК ДокументПоступления,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ Суммы.Валюта = &ВалютаРеглУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаРегл,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаУпрУчета
		|		ИЛИ Суммы.Валюта = &ВалютаУпрУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаУпр,
		|	ВЫБОР КОГДА ДД.Регистратор = ДД.РасчетныйДокумент 
		|		ТОГДА 1
		|			ИНАЧЕ 0 
		|	КОНЕЦ КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрошлыеПоступления КАК ПрошлыеПоступления
		|	ПО ДД.Регистратор = ПрошлыеПоступления.Регистратор
		|		И ДД.РасчетныйДокумент = ПрошлыеПоступления.РасчетныйДокумент
		|		И ДД.АналитикаУчетаПоПартнерам = ПрошлыеПоступления.АналитикаУчетаПоПартнерам
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
		|
		|	ПО ВЫБОР КОГДА ДД.РасчетныйДокумент = ПрошлыеПоступления.ДокументПоступления
		|				ТОГДА ДД.Регистратор
		|			ИНАЧЕ ДД.РасчетныйДокумент
		|		КОНЕЦ = Суммы.Регистратор
		|		И (ДД.АналитикаУчетаПоПартнерам = Суммы.АналитикаУчетаПоПартнерам
		|			ИЛИ Суммы.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
		|		И Суммы.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|СГРУППИРОВАТЬ ПО
		|	ДД.ВидДвижения,
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказПоставщику,
		|	ДД.РасчетныйДокумент,
		|	ДД.Валюта,
		|	ДД.ДатаПлатежа,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств,
		|	ДД.ДатаПлатежа,
		|	ПрошлыеПоступления.ДокументПоступления,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ Суммы.Валюта = &ВалютаРеглУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаУпрУчета
		|		ИЛИ Суммы.Валюта = &ВалютаУпрУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|";
КонецФункции

Функция ТекстДвиженияРасчетовСПоставщиками()
	Возврат "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма >= 0 И ДД.КОплате >= 0 И ДД.Оплачивается >= 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		ТОГДА 10 // это сторно поступления
		|	КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате <= 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|						И ДД.ХозяйственнаяОперация В (
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)))
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|						И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
		|		ТОГДА 10 // это сторно оплаты
		|	КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0 // это долг
		|		ТОГДА 11
		|	КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 // это долг
		|					И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация В (
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности)))
		|		ТОГДА 11
		|		ИНАЧЕ 9
		|	КОНЕЦ КАК Приоритет,
		|	ВЫБОР
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0 И ДД.КПоступлению >= 0
		|			ТОГДА ""ПоступлениеТоваров""
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма >= 0 И ДД.КОплате >= 0 И ДД.Оплачивается >= 0)
		|				И НЕ ДД.ХозяйственнаяОперация В (
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику),
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0 И ДД.КПоступлению < 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма > 0 И ДД.КОплате = 0 И ДД.Оплачивается = 0 
		|					И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику))
		|			ТОГДА ""Оплата""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма >= 0 И ДД.КОплате >= 0 И ДД.Оплачивается >= 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|			ТОГДА ""СторноПоступления""
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма > 0 И ДД.КОплате > 0
		|					И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
		|				) ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0 И ДД.КОплате = 0)
		|			ТОГДА ""ВозвратТоваров""
		|		КОГДА ((ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате <= 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|					И ДД.ХозяйственнаяОперация В (
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка))
		|					))
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|						И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
		|			ТОГДА ""СторноОплаты""
		|	КОНЕЦ КАК ТипЗаписи,
		|	ЛОЖЬ КАК РасчетЗавершен,
		|	ВЫБОР КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|				И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)))
		|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ДД.ВидДвижения
		|	КОНЕЦ КАК ВидДвижения,
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА ДД.ЗаказПоставщику = НЕОПРЕДЕЛЕНО
		|		ТОГДА NULL
		|		ИНАЧЕ ДД.ЗаказПоставщику
		|	КОНЕЦ КАК ЗаказПоставщику,
		|	ВЫБОР КОГДА ДД.РасчетныйДокумент <> Неопределено
		|		ТОГДА ДД.РасчетныйДокумент
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	СУММА(
		|		ВЫБОР 
		|			КОГДА ДД.Сумма < 0 И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|			ТОГДА 0 - ДД.Сумма
		|			ИНАЧЕ ДД.Сумма
		|		КОНЕЦ
		|	) КАК Сумма,
		|	0. КАК КВозврату,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			ТОГДА ДД.Сумма
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0
		|					И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация В (
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности))
		|				))
		|			ТОГДА ДД.Сумма
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
		|			ТОГДА ДД.Сумма
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|				И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
		|			ТОГДА ДД.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК Долг,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			ТОГДА ДД.СуммаУпр
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0
		|					И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация В (
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности))
		|				))
		|			ТОГДА ДД.СуммаУпр
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
		|			ТОГДА ДД.СуммаУпр
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|				И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
		|			ТОГДА ДД.СуммаУпр
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ДолгУпр,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|			ТОГДА ДД.СуммаРегл
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0
		|					И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация В (
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности))
		|				))
		|			ТОГДА ДД.СуммаРегл
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
		|			ТОГДА ДД.СуммаРегл
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|				И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
		|			ТОГДА ДД.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ДолгРегл,
		|	СУММА(
		|		ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма > 0
		|				ТОГДА ДД.Сумма
		|			КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|					И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)))
		|				ТОГДА 0 - ДД.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК Предоплата,
		|	СУММА(
		|		ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма > 0
		|				ТОГДА ДД.СуммаУпр
		|			КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|					И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)))
		|				ТОГДА 0 - ДД.СуммаУпр
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ПредоплатаУпр,
		|	СУММА(ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма > 0
		|				ТОГДА ДД.СуммаРегл
		|			КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|					И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)))
		|				ТОГДА 0 - ДД.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	) КАК ПредоплатаРегл,
		|	СУММА(ДД.ЗалогЗаТару) КАК ЗалогЗаТару,
		|	0. КАК ЗалогЗаТаруРегл,
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	ВЫБОР КОГДА ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		И ДД.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|			ТОГДА ВЫРАЗИТЬ(ДД.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ КАК ДокументПоступления,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаРеглУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаРегл,
		|	ВЫБОР КОГДА КРасчету.Валюта = &ВалютаУпрУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаУпрУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетПоКурсуДокументаУпр,
		|	0 КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыКРасчету КАК КРасчету
		|	ПО ДД.Регистратор = КРасчету.Регистратор
		|		И (ДД.АналитикаУчетаПоПартнерам = КРасчету.АналитикаУчетаПоПартнерам 
		|			ИЛИ КРасчету.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
		|		И ДД.ЗаказПоставщику = КРасчету.ЗаказПоставщику
		|		И ДД.Валюта = КРасчету.Валюта
		|ГДЕ
		|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И ДД.Сумма <> 0 
		|	И НЕ ДД.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма >= 0 И ДД.КОплате >= 0 И ДД.Оплачивается >= 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		ТОГДА 10
		|	КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате <= 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|					И ДД.ХозяйственнаяОперация В (
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)))
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|						И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
		|		ТОГДА 10
		|	КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0
		|		ТОГДА 11
		|	КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0
		|					И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация В (
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
		|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности)))
		|		ТОГДА 11
		|		ИНАЧЕ 9
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма > 0 И ДД.КПоступлению >= 0
		|			ТОГДА ""ПоступлениеТоваров""
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма >= 0 И ДД.КОплате >= 0 И ДД.Оплачивается >= 0)
		|				И НЕ ДД.ХозяйственнаяОперация В (
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику),
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0 И ДД.КПоступлению < 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма > 0 И ДД.КОплате = 0 И ДД.Оплачивается = 0 
		|					И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику))
		|			ТОГДА ""Оплата""
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма >= 0 И ДД.КОплате >= 0 И ДД.Оплачивается >= 0
		|			И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|			ТОГДА ""СторноПоступления""
		|		КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма > 0 И ДД.КОплате > 0
		|					И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
		|				) ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0 И ДД.КОплате = 0)
		|			ТОГДА ""ВозвратТоваров""
		|		КОГДА ((ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате <= 0)
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|					И ДД.ХозяйственнаяОперация В (
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка))
		|					))
		|				ИЛИ (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Сумма < 0 И ДД.КОплате < 0
		|						И ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
		|			ТОГДА ""СторноОплаты""
		|	КОНЕЦ,
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ВЫБОР КОГДА ДД.РасчетныйДокумент <> Неопределено
		|		ТОГДА ДД.РасчетныйДокумент
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ,
		|	ВЫБОР КОГДА (ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДД.Сумма < 0
		|				И (ДД.КПоступлению < 0 ИЛИ ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)))
		|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ДД.ВидДвижения
		|	КОНЕЦ,
		|	ДД.АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказПоставщику,
		|	ДД.Валюта,
		|	ДД.ДатаПлатежа,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		|	ВЫБОР КОГДА ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
		|		И ДД.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|			ТОГДА ВЫРАЗИТЬ(ДД.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование
		|		ИНАЧЕ ДД.Регистратор
		|	КОНЕЦ,
		|	ВЫБОР КОГДА ДД.Валюта = &ВалютаРеглУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаРеглУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР КОГДА КРасчету.Валюта = &ВалютаУпрУчета
		|		ИЛИ КРасчету.ВалютаДокумента = &ВалютаУпрУчета
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	10 КАК Приоритет,
		|	""Актуальные"" КАК ТипЗаписи,
		|	ИСТИНА КАК РасчетЗавершен,
		|	ДД.ВидДвижения КАК ВидДвижения,
		|	ДД.Период КАК Период,
		|	ДД.Регистратор КАК Регистратор,
		|	ДД.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДД.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ДД.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ДД.Валюта КАК Валюта,
		|	0. КАК Сумма,
		|	ДД.КВозврату КАК КВозврату,
		|	ДД.Долг КАК Долг,
		|	ДД.ДолгУпр КАК ДолгУпр,
		|	ДД.ДолгРегл КАК ДолгРегл,
		|	ДД.Предоплата КАК Предоплата,
		|	ДД.ПредоплатаУпр КАК ПредоплатаУпр,
		|	ДД.ПредоплатаРегл КАК ПредоплатаРегл,
		|	ДД.ЗалогЗаТару КАК ЗалогЗаТару,
		|	ДД.ЗалогЗаТаруРегл КАК ЗалогЗаТаруРегл,
		|	ДД.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДД.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК УдалитьДатаПлатежа,
		|	НЕОПРЕДЕЛЕНО КАК ДокументПоступления,
		|	ЛОЖЬ КАК РасчетПоКурсуДокументаРегл,
		|	ЛОЖЬ КАК РасчетПоКурсуДокументаУпр,
		|	0 КАК ПриоритетРасчетногоДокумента
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДД
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеАналитики КАК АктуальныеАналитики
		|	ПО ДД.Регистратор = АктуальныеАналитики.Регистратор
		|		И ДД.АналитикаУчетаПоПартнерам = АктуальныеАналитики.АналитикаУчетаПоПартнерам
		|		И ДД.ЗаказПоставщику = АктуальныеАналитики.ЗаказПоставщику
		|		И ДД.Валюта = АктуальныеАналитики.Валюта
		|";
КонецФункции
#КонецОбласти

// Контекстные методы заполнения документа расчетов по строке расхода и строке прихода
#Область ЗаполнитьДокументРасчетов

// Используется для ВСЕХ вызовов заполнения расчетной партии
Процедура ЗаполнитьРасчетнуюПартию(Контекст, РасчетнаяПартия, Расход, Приход, Валюты)
	Если Контекст = "РасчетыСКлиентами" Тогда
		ЗаполнитьРасчетыСКлиентами(РасчетнаяПартия, Расход, Приход, Валюты);
	ИначеЕсли Контекст = "РасчетыСПоставщиками" Тогда
		ЗаполнитьРасчетысПоставщиками(РасчетнаяПартия, Расход, Приход, Валюты);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРасчетыСКлиентами(РасчетнаяПартия, Расход, Приход, Валюты) // РасчетыСКлиентамиПоДокументам
	ЗаполнитьЗначенияСвойств(РасчетнаяПартия, Расход);
	Если Неопределено = Приход // остатки по оплате и отгрузке не должны "закрываться" друг на друга
		ИЛИ (ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ВводОстатков") 
				И ТипЗнч(Приход.Регистратор) = Тип("ДокументСсылка.ВводОстатков"))
		ИЛИ (Расход.ТипЗаписи = "Отгрузка" И Приход.Долг <> 0) // Отгрузка закрывается только на предплату
		ИЛИ (Расход.ТипЗаписи = "СторноОплаты" И Приход.Предоплата = 0) // Сторно оплаты закрывается только на предоплату
		ИЛИ (Расход.ТипЗаписи = "Оплата" И Приход.Предоплата <> 0) // Оплата закрывается только на долг
	Тогда
		Возврат;
	КонецЕсли;
	
	СуммаСписания = Мин(Расход.Сумма, Приход.Сумма);
	
	РасходБазис = ?(Расход.Сумма <> 0, СуммаСписания / Расход.Сумма, 0);
	ПриходБазис = ?(Приход.Сумма <> 0, СуммаСписания / Приход.Сумма, 0);
	
	КурсУпрДолгаРасходнойПартии  = ?(Расход.Долг <> 0, Расход.ДолгУпр / Расход.Долг, 0);
	КурсРеглДолгаРасходнойПартии = ?(Расход.Долг <> 0, Расход.ДолгРегл / Расход.Долг, 0);
	
	// заполняем показатели расчетной партии
	РасчетнаяПартия.Сумма = Окр(ПриходБазис * Приход.Сумма, 2);
	РасчетнаяПартия.КВозврату = Окр(ПриходБазис * Приход.КВозврату, 2);
	Если Расход.ТипЗаписи = "Отгрузка"
		ИЛИ Расход.ТипЗаписи = "СторноОтгрузки"
		ИЛИ Расход.ТипЗаписи = "ВозвратТоваров"
	Тогда
		РасчетнаяПартия.ЗалогЗаТару = Окр(ПриходБазис * Приход.ЗалогЗаТару, 2);
	Иначе
		РасчетнаяПартия.ЗалогЗаТару = 0;
	КонецЕсли;
	РасчетнаяПартия.Предоплата = Окр(ПриходБазис * Приход.Предоплата, 2);
	Если РасчетнаяПартия.Предоплата = 0 Тогда
		РасчетнаяПартия.ПредоплатаУпр = 0;
		РасчетнаяПартия.ПредоплатаРегл = 0;
	Иначе
		Если Расход.РасчетПоКурсуДокументаРегл И (ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			ИЛИ ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Тогда
			РасчетнаяПартия.ПредоплатаРегл = Мин(Приход.ПредоплатаРегл, ?(Расход.ДолгРегл=0,Расход.ПредоплатаРегл, Расход.ДолгРегл));
		ИначеЕсли Расход.Долг <> 0 И ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			РасчетнаяПартия.ПредоплатаРегл = Окр(РасходБазис * Расход.ДолгРегл, 2);
		Иначе
			РасчетнаяПартия.ПредоплатаРегл = Окр(ПриходБазис * Приход.ПредоплатаРегл, 2);
		КонецЕсли;
		
		Если Расход.РасчетПоКурсуДокументаУпр И (ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			ИЛИ ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Тогда
			РасчетнаяПартия.ПредоплатаУпр = Мин(Приход.ПредоплатаУпр, ?(Расход.ДолгУпр=0,Расход.ПредоплатаУпр, Расход.ДолгУпр));
		ИначеЕсли Расход.Долг <> 0 И ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			РасчетнаяПартия.ПредоплатаУпр = Окр(РасходБазис * Расход.ДолгУпр, 2);
		Иначе
			РасчетнаяПартия.ПредоплатаУпр = Окр(ПриходБазис * Приход.ПредоплатаУпр, 2);
		КонецЕсли;
		
	КонецЕсли;
	РасчетнаяПартия.Долг = Окр(ПриходБазис * Приход.Долг, 2);
	Если РасчетнаяПартия.Долг <> 0 Тогда
		Если Расход.ТипЗаписи = "Оплата"
			ИЛИ Расход.ТипЗаписи = "СторноОтгрузки"
			ИЛИ Расход.ТипЗаписи = "ВозвратТоваров"
		Тогда // суммы Упр и Регл считаем по курсу оплаты
			РасчетнаяПартия.ДолгУпр = Окр(РасходБазис * Расход.ПредоплатаУпр, 2);
			РасчетнаяПартия.ДолгРегл = Окр(РасходБазис * Расход.ПредоплатаРегл, 2);
		Иначе
			РасчетнаяПартия.ДолгУпр = Окр(ПриходБазис * Приход.ДолгУпр, 2);
			РасчетнаяПартия.ДолгРегл = Окр(ПриходБазис * Приход.ДолгРегл, 2);
		КонецЕсли;
		РасчетнаяПартия.Приоритет = 12;
	Иначе
		РасчетнаяПартия.ДолгУпр = 0;
		РасчетнаяПартия.ДолгРегл = 0;
		РасчетнаяПартия.Приоритет = 13;
	КонецЕсли;
	
	// корректируем базу расчета в потреблении
	Расход.Сумма = Расход.Сумма - Окр(РасходБазис * Расход.Сумма, 2);
	Расход.КВозврату = Расход.КВозврату - Окр(РасходБазис * Расход.КВозврату, 2);
	Расход.ЗалогЗаТару = Расход.ЗалогЗаТару - Окр(РасходБазис * Расход.ЗалогЗаТару, 2);
	Расход.Предоплата = Расход.Предоплата - Окр(РасходБазис * Расход.Предоплата, 2);
	Если Расход.ТипЗаписи = "Оплата"
		ИЛИ Расход.ТипЗаписи = "СторноОтгрузки"
		ИЛИ Расход.ТипЗаписи = "ВозвратТоваров"
	Тогда
		Если РасчетнаяПартия.Долг <> 0 Тогда
			Расход.ПредоплатаУпр = Расход.ПредоплатаУпр - РасчетнаяПартия.ДолгУпр;
			Расход.ПредоплатаРегл = Расход.ПредоплатаРегл - РасчетнаяПартия.ДолгРегл;
		ИначеЕсли РасчетнаяПартия.Предоплата <> 0 Тогда
			Расход.ПредоплатаУпр = Расход.ПредоплатаУпр - РасчетнаяПартия.ПредоплатаУпр;
			Расход.ПредоплатаРегл = Расход.ПредоплатаРегл - РасчетнаяПартия.ПредоплатаРегл;
		КонецЕсли;
	Иначе
		Расход.ПредоплатаУпр = Расход.ПредоплатаУпр - Окр(РасходБазис * Расход.ПредоплатаУпр, 2);
		Расход.ПредоплатаРегл = Расход.ПредоплатаРегл - Окр(РасходБазис * Расход.ПредоплатаРегл, 2);
	КонецЕсли;
	Расход.Долг = Расход.Долг - Окр(РасходБазис * Расход.Долг, 2);
	
	//Если курс регл зафиксирован в документе
	Если Расход.РасчетПоКурсуДокументаРегл Тогда
		Расход.ДолгРегл = Макс(0,Расход.ДолгРегл - РасчетнаяПартия.ПредоплатаРегл); 
	//Если есть остаток долга после зачета
	ИначеЕсли Расход.Долг <> 0 И РасчетнаяПартия.Предоплата <> 0 Тогда
		Расход.ДолгРегл = Расход.Долг * КурсРеглДолгаРасходнойПартии;
	Иначе
		Расход.ДолгРегл = Расход.ДолгРегл - Окр(РасходБазис * Расход.ДолгРегл, 2);
	КонецЕсли;
	
	Если Расход.РасчетПоКурсуДокументаУпр Тогда
		Расход.ДолгУпр = Макс(0,Расход.ДолгУпр - РасчетнаяПартия.ПредоплатаУпр);
	ИначеЕсли Расход.Долг <> 0 И РасчетнаяПартия.Предоплата <> 0 Тогда
		Расход.ДолгУпр = Расход.Долг * КурсУпрДолгаРасходнойПартии;
	Иначе
		Расход.ДолгУпр = Расход.ДолгУпр - Окр(РасходБазис * Расход.ДолгУпр, 2);
	КонецЕсли;
	
	Приход.Сумма = Приход.Сумма - РасчетнаяПартия.Сумма;
	Приход.КВозврату = Приход.КВозврату - РасчетнаяПартия.КВозврату;
	Приход.ЗалогЗаТару = Приход.ЗалогЗаТару - РасчетнаяПартия.ЗалогЗаТару;
	Если Расход.ТипЗаписи = "Оплата"
		ИЛИ Расход.ТипЗаписи = "СторноОтгрузки"
		ИЛИ Расход.ТипЗаписи = "ВозвратТоваров"
	Тогда
		Приход.Долг = Приход.Долг - Окр(ПриходБазис * Приход.Долг, 2);
		Приход.ДолгУпр = Приход.ДолгУпр - Окр(ПриходБазис * Приход.ДолгУпр, 2);
		Приход.ДолгРегл = Приход.ДолгРегл - Окр(ПриходБазис * Приход.ДолгРегл, 2);
	Иначе
		Приход.Долг = Приход.Долг - РасчетнаяПартия.Долг;
		Приход.ДолгУпр = Приход.ДолгУпр - РасчетнаяПартия.ДолгУпр;
		Приход.ДолгРегл = Приход.ДолгРегл - РасчетнаяПартия.ДолгРегл;
	КонецЕсли;
	Приход.Предоплата = Приход.Предоплата - РасчетнаяПартия.Предоплата;
	Приход.ПредоплатаУпр = Приход.ПредоплатаУпр - РасчетнаяПартия.ПредоплатаУпр;
	Приход.ПредоплатаРегл = Приход.ПредоплатаРегл - РасчетнаяПартия.ПредоплатаРегл;
	
	РасчетнаяПартия.РасчетЗавершен = Истина;
	РасчетнаяПартия.Приоритет = Приход.Приоритет;
	РасчетнаяПартия.УдалитьДатаПлатежа = Приход.УдалитьДатаПлатежа;
	ЭтоКорректировка = ?(ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации"), Истина, Ложь);
	Если (ЭтоКорректировка И РасчетнаяПартия.Долг <> 0 И Расход.ВидДвижения = ВидДвиженияНакопления.Приход)
		ИЛИ (ЭтоКорректировка И РасчетнаяПартия.Предоплата <> 0 И Расход.ВидДвижения = ВидДвиженияНакопления.Расход
			И Приход.Регистратор = Приход.ДокументОтгрузки) Тогда
		РасчетнаяПартия.РасчетныйДокумент = Расход.РасчетныйДокумент; // для аванса расчетным документом будет корректировка
	Иначе
		ЭтоСторно = ЭтоСторно(Расход.ТипЗаписи);
		ПриходЭтоСторно = ЭтоСторно(Приход.ТипЗаписи);
		Если Приход.Регистратор = Неопределено ИЛИ Приход.ТипЗаписи = "ОстатокОплат" ИЛИ Приход.ТипЗаписи = "ОстатокОтгрузок" 
			ИЛИ ТипЗнч(Приход.Регистратор) = Тип("ДокументСсылка.ВводОстатков")
			ИЛИ ЭтоСторно
			ИЛИ ПриходЭтоСторно
			ИЛИ ЭтоКорректировка Тогда
			РасчетнаяПартия.РасчетныйДокумент = Приход.РасчетныйДокумент;
		Иначе
			РасчетнаяПартия.РасчетныйДокумент = Приход.Регистратор; // у долга расчетный документ сохраняем
		КонецЕсли;
	КонецЕсли;
	
	Если РасчетнаяПартия.ЗалогЗаТару <> 0 Тогда
		ЗаполнитьЗалогЗаТаруРегл(Валюты, РасчетнаяПартия);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРасчетыСПоставщиками(РасчетнаяПартия, Расход, Приход, Валюты) // РасчетысПоставщикамиПоДокументам
	
	ЗаполнитьЗначенияСвойств(РасчетнаяПартия, Расход);
	Если Неопределено = Приход 
		ИЛИ (ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ВводОстатков") // остатки по оплате и отгрузке не должны "закрываться" друг на друга
				И ТипЗнч(Приход.Регистратор) = Тип("ДокументСсылка.ВводОстатков"))
		ИЛИ (Расход.ТипЗаписи = "Оплата" И Приход.Предоплата <> 0) // Оплата закрывается только на долг
		ИЛИ (Расход.ТипЗаписи = "СторноОплаты" И Приход.Предоплата = 0) // Сторно оплаты закрывается только на предоплату
		ИЛИ (Расход.ТипЗаписи = "ПоступлениеТоваров" И Приход.Долг <> 0) // Поступление закрывается только на предплату
		ИЛИ (Расход.ТипЗаписи = "ПоступлениеТоваров" И Приход.ТипЗаписи = "СторноПоступления" 
			И Расход.ХозяйственнаяОперация = Приход.ХозяйственнаяОперация И Расход.Регистратор <> Приход.Регистратор)
	Тогда
		Возврат;
	КонецЕсли;
	
	СуммаСписания = Мин(Расход.Сумма, Приход.Сумма);
	
	РасходБазис = ?(Расход.Сумма <> 0, СуммаСписания / Расход.Сумма, 0);
	ПриходБазис = ?(Приход.Сумма <> 0, СуммаСписания / Приход.Сумма, 0);
	
	КурсУпрДолгаРасходнойПартии  = ?(Расход.Долг <> 0, Расход.ДолгУпр / Расход.Долг, 0);
	КурсРеглДолгаРасходнойПартии = ?(Расход.Долг <> 0, Расход.ДолгРегл / Расход.Долг, 0);
	
	// заполняем показатели расчетной партии
	РасчетнаяПартия.Сумма = Окр(ПриходБазис * Приход.Сумма, 2);
	РасчетнаяПартия.КВозврату = Окр(ПриходБазис * Приход.КВозврату, 2);
	Если Расход.ТипЗаписи = "Поступление"
		ИЛИ Расход.ТипЗаписи = "СторноПоступления"
		ИЛИ Расход.ТипЗаписи = "ВозвратТоваров"
	Тогда
		РасчетнаяПартия.ЗалогЗаТару = Окр(ПриходБазис * Приход.ЗалогЗаТару, 2);
	Иначе
		РасчетнаяПартия.ЗалогЗаТару = 0;
	КонецЕсли;
	РасчетнаяПартия.Долг = Окр(ПриходБазис * Приход.Долг, 2);
	РасчетнаяПартия.Предоплата = Окр(ПриходБазис * Приход.Предоплата, 2);
	Если РасчетнаяПартия.Предоплата = 0 Тогда
		РасчетнаяПартия.ПредоплатаУпр = 0;
		РасчетнаяПартия.ПредоплатаРегл = 0;
		РасчетнаяПартия.Приоритет = 12;
	Иначе
		Если Расход.РасчетПоКурсуДокументаРегл  И (ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
			ИЛИ ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) Тогда
			РасчетнаяПартия.ПредоплатаРегл = Мин(Приход.ПредоплатаРегл, ?(Расход.ДолгРегл=0,Расход.ПредоплатаРегл, Расход.ДолгРегл));
		ИначеЕсли Расход.Долг <> 0 И ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			РасчетнаяПартия.ПредоплатаРегл = Окр(РасходБазис * Расход.ДолгРегл, 2);
		Иначе
			РасчетнаяПартия.ПредоплатаРегл = Окр(ПриходБазис * Приход.ПредоплатаРегл, 2);
		КонецЕсли;
		Если Расход.РасчетПоКурсуДокументаУпр  И (ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
			ИЛИ ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) Тогда
			РасчетнаяПартия.ПредоплатаУпр = Мин(Приход.ПредоплатаУпр,?(Расход.ДолгУпр=0,Расход.ПредоплатаУпр, Расход.ДолгУпр));
		ИначеЕсли Расход.Долг <> 0 И ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			РасчетнаяПартия.ПредоплатаУпр = Окр(РасходБазис * Расход.ДолгУпр, 2);
		Иначе
			РасчетнаяПартия.ПредоплатаУпр = Окр(ПриходБазис * Приход.ПредоплатаУпр, 2);;
		КонецЕсли;
		РасчетнаяПартия.Приоритет = 13;
	КонецЕсли;
	Если Расход.ТипЗаписи = "Оплата"
		ИЛИ Расход.ТипЗаписи = "ВозвратТоваров" Тогда // суммы Упр и Регл считаем по курсу оплаты
		Если РасчетнаяПартия.Долг = 0 Тогда
			РасчетнаяПартия.ДолгУпр = 0;
			РасчетнаяПартия.ДолгРегл = 0;
		Иначе
			РасчетнаяПартия.ДолгУпр = Окр(РасходБазис * Расход.ПредоплатаУпр, 2);
			РасчетнаяПартия.ДолгРегл = Окр(РасходБазис * Расход.ПредоплатаРегл, 2);
		КонецЕсли;
	Иначе
		РасчетнаяПартия.ДолгУпр = Окр(ПриходБазис * Приход.ДолгУпр, 2);
		РасчетнаяПартия.ДолгРегл = Окр(ПриходБазис * Приход.ДолгРегл, 2);
	КонецЕсли;
	
	// корректируем базу расчета в потреблении
	Расход.Сумма = Расход.Сумма - Окр(РасходБазис * Расход.Сумма, 2);
	Расход.КВозврату = Расход.КВозврату - Окр(РасходБазис * Расход.КВозврату, 2);
	Расход.ЗалогЗатару = Расход.ЗалогЗатару - Окр(РасходБазис * Расход.ЗалогЗатару, 2);
	Расход.Долг = Расход.Долг - Окр(РасходБазис * Расход.Долг, 2);
	Если Расход.РасчетПоКурсуДокументаРегл Тогда
		Расход.ДолгРегл = Макс(0,Расход.ДолгРегл - РасчетнаяПартия.ПредоплатаРегл);
	ИначеЕсли Расход.Долг <> 0 И РасчетнаяПартия.Предоплата <> 0 Тогда
		Расход.ДолгРегл = Расход.Долг * КурсРеглДолгаРасходнойПартии; 
	Иначе
		Расход.ДолгРегл = Расход.ДолгРегл - Окр(РасходБазис * Расход.ДолгРегл, 2);
	КонецЕсли;
	Если Расход.РасчетПоКурсуДокументаУпр Тогда
		Расход.ДолгУпр = Макс(0,Расход.ДолгУпр - РасчетнаяПартия.ПредоплатаУпр);
	ИначеЕсли Расход.Долг <> 0 И РасчетнаяПартия.Предоплата <> 0 Тогда
		Расход.ДолгУпр = Расход.Долг * КурсУпрДолгаРасходнойПартии; 
	Иначе
		Расход.ДолгУпр = Расход.ДолгУпр - Окр(РасходБазис * Расход.ДолгУпр, 2);
	КонецЕсли;
	Расход.Предоплата = Расход.Предоплата - Окр(РасходБазис * Расход.Предоплата, 2);
	Если Расход.ТипЗаписи = "Оплата" Тогда
		Расход.ПредоплатаУпр = Расход.ПредоплатаУпр - РасчетнаяПартия.ДолгУпр;
		Расход.ПредоплатаРегл = Расход.ПредоплатаРегл - РасчетнаяПартия.ДолгРегл;
	Иначе
		Расход.ПредоплатаУпр = Расход.ПредоплатаУпр - Окр(РасходБазис * Расход.ПредоплатаУпр, 2);
		Расход.ПредоплатаРегл = Расход.ПредоплатаРегл - Окр(РасходБазис * Расход.ПредоплатаРегл, 2);
	КонецЕсли;
	
	Приход.Сумма = Приход.Сумма - РасчетнаяПартия.Сумма;
	Приход.КВозврату = Приход.КВозврату - РасчетнаяПартия.КВозврату;
	Приход.ЗалогЗаТару = Приход.ЗалогЗаТару - РасчетнаяПартия.ЗалогЗаТару;
	Если Расход.ТипЗаписи = "Оплата" Тогда
		Приход.Долг = Приход.Долг - Окр(ПриходБазис * Приход.Долг, 2);
		Приход.ДолгУпр = Приход.ДолгУпр - Окр(ПриходБазис * Приход.ДолгУпр, 2);
		Приход.ДолгРегл = Приход.ДолгРегл - Окр(ПриходБазис * Приход.ДолгРегл, 2);
	Иначе
		Приход.Долг = Приход.Долг - РасчетнаяПартия.Долг;
		Приход.ДолгУпр = Приход.ДолгУпр - РасчетнаяПартия.ДолгУпр;
		Приход.ДолгРегл = Приход.ДолгРегл - РасчетнаяПартия.ДолгРегл;
	КонецЕсли;
	Приход.Предоплата = Приход.Предоплата - РасчетнаяПартия.Предоплата;
	Приход.ПредоплатаУпр = Приход.ПредоплатаУпр - РасчетнаяПартия.ПредоплатаУпр;
	Приход.ПредоплатаРегл = Приход.ПредоплатаРегл - РасчетнаяПартия.ПредоплатаРегл;
	
	ЭтоКорректировка = ?(ТипЗнч(Расход.Регистратор) = Тип("ДокументСсылка.КорректировкаПриобретения"), Истина, Ложь);
	Если (ЭтоКорректировка И РасчетнаяПартия.Долг <> 0 И Расход.ВидДвижения = ВидДвиженияНакопления.Расход)
		ИЛИ (ЭтоКорректировка И РасчетнаяПартия.Предоплата <> 0 И Расход.ВидДвижения = ВидДвиженияНакопления.Приход
			И Приход.Регистратор = Приход.ДокументПоступления) Тогда
		РасчетнаяПартия.РасчетныйДокумент = Расход.РасчетныйДокумент; // для аванса расчетным документом будет корректировка
	Иначе
		ЭтоСторно = ЭтоСторно(Расход.ТипЗаписи);
		ПриходЭтоСторно = ЭтоСторно(Приход.ТипЗаписи);
		Если Приход.Регистратор = Неопределено
			ИЛИ ТипЗнч(Приход.Регистратор) = Тип("ДокументСсылка.ВводОстатков")
			ИЛИ ЭтоСторно
			ИЛИ ПриходЭтоСторно
			ИЛИ Расход.ХозяйственнаяОперация = Приход.ХозяйственнаяОперация
			ИЛИ Приход.ТипЗаписи = "СторноПоступления"
			ИЛИ Приход.ТипЗаписи = "ОстатокПоступлений" И (Приход.РасчетныйДокумент = Приход.ЗаказПоставщику) Тогда
			РасчетнаяПартия.РасчетныйДокумент = Приход.РасчетныйДокумент;
		Иначе
			РасчетнаяПартия.РасчетныйДокумент = Приход.Регистратор;
		КонецЕсли;
	КонецЕсли;
	
	РасчетнаяПартия.РасчетЗавершен = Истина;
	РасчетнаяПартия.Приоритет = Приход.Приоритет;
	РасчетнаяПартия.УдалитьДатаПлатежа = Приход.УдалитьДатаПлатежа;
	Если РасчетнаяПартия.ЗалогЗаТару <> 0 Тогда
		ЗаполнитьЗалогЗаТаруРегл(Валюты, РасчетнаяПартия);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Общие алгоритмы расчета партий
#Область ОбщиеРасчетныеМетоды

Процедура УдалитьНезаписываемыеСтроки(Контекст, РасчетныеПартии)
	
	УдаляемыеТипы = Новый Структура;
	УдаляемыеРазделы = Новый Соответствие;
	Если Контекст = "РасчетыСКлиентами" Тогда
		УдаляемыеТипы.Вставить("ОстатокОплат");
		УдаляемыеТипы.Вставить("ОстатокОтгрузок");
		УдаляемыеТипы.Вставить("ПрошлаяОтгрузка");
		УдалятьНезавершенные = Ложь;
	ИначеЕсли Контекст = "РасчетыСПоставщиками" Тогда
		УдаляемыеТипы.Вставить("ОстатокОплат");
		УдаляемыеТипы.Вставить("ОстатокПоступлений");
		УдаляемыеТипы.Вставить("ПрошлоеПоступление");
		УдалятьНезавершенные = Ложь;
	КонецЕсли;
	
	МинимальныйИндекс = 1 - РасчетныеПартии.Количество();
	Для Индекс = МинимальныйИндекс По 0 Цикл
		РасчетнаяПартия = РасчетныеПартии[-Индекс];
		Если УдалятьНезавершенные И РасчетнаяПартия.РасчетЗавершен <> Истина
			Или УдаляемыеТипы.Свойство(РасчетнаяПартия.ТипЗаписи)
		Тогда
			РасчетныеПартии.Удалить(-Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция Регистраторы(НачалоПериода, ОкончаниеПериода, АналитикиРасчета, ИмяРегистра, МассивИсключаемыхТипов = Неопределено)
	ШаблонЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДД.Регистратор КАК Регистратор
		|ИЗ
		|	&ШаблонРегистраРасчетов КАК ДД
		|ГДЕ
		|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И ДД.Сумма <> 0
		|	И НЕ ТипЗначения(ДД.Регистратор) В (&МассивИсключаемыхТипов)
		|	И (ДД.АналитикаУчетаПоПартнерам В (&АналитикиРасчета) ИЛИ &ПоВсемАналитикам)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДД.Регистратор КАК Регистратор
		|ИЗ
		|	&ШаблонРегистраПоДокументам КАК ДД
		|ГДЕ
		|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И (ДД.Долг <> 0 ИЛИ ДД.Предоплата <> 0) 
		|	И НЕ ТипЗначения(ДД.Регистратор) В (&МассивИсключаемыхТипов)
		|	И (ДД.АналитикаУчетаПоПартнерам В (&АналитикиРасчета) ИЛИ &ПоВсемАналитикам)
		|";
	ШаблонРегистра = "РегистрНакопления.";
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&ШаблонРегистраРасчетов", ШаблонРегистра + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ШаблонРегистраПоДокументам", ШаблонРегистра + ИмяРегистра + "ПоДокументам");
	Регистраторы = Новый Соответствие;
	Если МассивИсключаемыхТипов = Неопределено Тогда
		МассивИсключаемыхТипов = Новый Массив;
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("МассивИсключаемыхТипов", МассивИсключаемыхТипов);
	Запрос.УстановитьПараметр("АналитикиРасчета", АналитикиРасчета);
	Запрос.УстановитьПараметр("ПоВсемАналитикам", АналитикиРасчета = Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Регистраторы.Вставить(Выборка.Регистратор, Истина);
	КонецЦикла;
	Возврат Регистраторы;
КонецФункции

Процедура ЗаписатьРасчетныеПартии(МенеджерРегистра, РасчетныеПартии, Регистраторы)
	
	Если РасчетныеПартии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ВАЖНО!
	// При нескольких вызовах процедуры не должно быть ситуации, когда по одному регистратору движения записываются несколько раз.
	// Если это не будет соблюдаться, то задания к расчету транспортного налога будут формироваться неверно.
	
	
	РасчетныеПартии.Сортировать("Регистратор", Новый СравнениеЗначений);
	
	Движения = МенеджерРегистра.СоздатьНаборЗаписей();
	
	Регистратор = Неопределено;
	Замещать = Истина;
	Счетчик = 0;
	МаксимумСчетчика = РасчетныеПартии.Количество() - 1;
	Пока Счетчик <= МаксимумСчетчика Цикл
		РасчетнаяПартия = РасчетныеПартии[Счетчик];
		Если Регистратор <> РасчетнаяПартия.Регистратор Тогда
			Регистратор = РасчетнаяПартия.Регистратор;
			
			Движения.Очистить();
			Движения.Отбор.Регистратор.Установить(Регистратор);
			
			НачатьТранзакцию();
			Если Регистраторы <> Неопределено Тогда
				Если Регистраторы[Регистратор] <> Неопределено Тогда
					Замещать = Истина;
					Регистраторы.Удалить(Регистратор);
				Иначе
					Замещать = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Движение = Движения.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, РасчетнаяПартия);
		Движение.Активность = Истина;
		
		Счетчик = Счетчик + 1;
		Если Счетчик > МаксимумСчетчика Или (Регистратор <> РасчетныеПартии[Счетчик].Регистратор) Тогда
			Движения.Записать(Замещать);
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоУправленческомуУчету(Контекст, ДокументыРасчетов)
	
	РегистраторыКОтражению = ДокументыРасчетов.ВыгрузитьКолонку("Регистратор");
	Если Контекст = "РасчетыСКлиентами" Тогда
		УправленческийУчетПроведениеСервер.СформироватьДвиженияДенежныеСредстваКонтрагентПоКлиентам(РегистраторыКОтражению);
	Иначе
		УправленческийУчетПроведениеСервер.СформироватьДвиженияДенежныеСредстваКонтрагентПоПоставщикам(РегистраторыКОтражению);
	КонецЕсли;
	УправленческийУчетПроведениеСервер.СформироватьДвиженияКонтрагентКонтрагент(РегистраторыКОтражению);
	УправленческийУчетПроведениеСервер.СформироватьДвиженияКонтрагентДоходыРасходы(РегистраторыКОтражению);
	Если ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
		УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивовПоРасчетамСПартнерами(РегистраторыКОтражению);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗалогЗаТаруРегл(Валюты, РасчетнаяПартия)
	
	КоэффициентВалютыРегл = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
		Валюты.ВалютаРегламентированногоУчета,
		РасчетнаяПартия.Период,
		Валюты.КэшКурсовВалют);
		
	КоэффициентВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
		РасчетнаяПартия.Валюта,
		РасчетнаяПартия.Период,
		Валюты.КэшКурсовВалют);
		
	Если КоэффициентВалютыРегл <> 0 Тогда
		РасчетнаяПартия.ЗалогЗаТаруРегл = РасчетнаяПартия.ЗалогЗаТару * КоэффициентВалютыВзаиморасчетов / КоэффициентВалютыРегл;
	КонецЕсли;
КонецПроцедуры

Функция СуммыКлиентовВВалютеРегл()
	Возврат "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	МАКСИМУМ(ДанныеРегистра.ЗаказКлиента.ПорядокОплаты) КАК ПорядокОплаты,
	|	
	|	СУММА(ВЫБОР 
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДанныеРегистра.ПредоплатаРегл < 0
	|			ТОГДА -ДанныеРегистра.ПредоплатаРегл
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
	|			ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	) КАК ПредоплатаРегл,
	|	
	|	СУММА(ВЫБОР 
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДанныеРегистра.ПредоплатаУпр < 0
	|				ТОГДА -ДанныеРегистра.ПредоплатаУпр
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
	|				ТОГДА ДанныеРегистра.ПредоплатаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	) КАК ПредоплатаУпр,
	|
	|	СУММА(ВЫБОР 
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДанныеРегистра.Долг < 0
	|				ТОГДА -ДанныеРегистра.Долг
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
	|				ТОГДА ДанныеРегистра.Долг
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	) КАК Долг
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|		И (ДанныеРегистра.АналитикаУчетаПоПартнерам = ТаблицаДокументов.АналитикаУчетаПоПартнерам
	|			ИЛИ ТаблицаДокументов.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Валюта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
КонецФункции

Функция СуммыПоставщиковВВалютеРегл()
	Возврат "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	МАКСИМУМ(ДанныеРегистра.ЗаказПоставщику.ПорядокОплаты) КАК ПорядокОплаты,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|		 		И Поступление.Организация = Аналитика.Организация 
	|			ТОГДА 
	|				ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаУПоставщика)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаПоИмпорту)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаВСтранахЕАЭС)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|				ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ДанныеРегистра.ПредоплатаРегл
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДанныеРегистра.ПредоплатаРегл<0
	|		ТОГДА -ДанныеРегистра.ПредоплатаРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|	) КАК ПредоплатаРегл,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|		 		И Поступление.Организация = Аналитика.Организация 
	|			ТОГДА 
	|				ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаУПоставщика)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаПоИмпорту)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаВСтранахЕАЭС)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|				ТОГДА ДанныеРегистра.ПредоплатаУпр
	|				ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ДанныеРегистра.ПредоплатаУпр
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДанныеРегистра.ПредоплатаУпр<0
	|		ТОГДА -ДанныеРегистра.ПредоплатаУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|	) КАК ПредоплатаУпр,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			И Поступление.Организация = Аналитика.Организация
	|			ТОГДА
	|				ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаУПоставщика)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаПоИмпорту)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация В (&ХозОперацииЗакупкаВСтранахЕАЭС)
	|			 		ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|				ТОГДА ДанныеРегистра.Долг
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ДанныеРегистра.Долг
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДанныеРегистра.Долг<0
	|		ТОГДА -ДанныеРегистра.Долг
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|	) КАК Долг
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|		И (ДанныеРегистра.АналитикаУчетаПоПартнерам = ТаблицаДокументов.АналитикаУчетаПоПартнерам
	|			ИЛИ ТаблицаДокументов.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|	ПО Аналитика.Ссылка = ДанныеРегистра.АналитикаУчетаПоПартнерам
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Поступление
	|	ПО Поступление.Ссылка = ДанныеРегистра.Регистратор
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Валюта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
КонецФункции

Процедура СуммыДокументовВВалютеРегл(ВариантРасчета, МассивДокументов = Неопределено)
	
	Валюты = Новый Структура("ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета, КэшКурсовВалют",
		Константы.ВалютаРегламентированногоУчета.Получить(),
		Константы.ВалютаУправленческогоУчета.Получить(),
		РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют());
		
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|
	|ГДЕ
	|	ДанныеРегистра.ТипРасчетов = &ТипРасчета
	|	И (ДанныеРегистра.Валюта <> &ВалютаРегламентированногоУчета
	|		ИЛИ ДанныеРегистра.Валюта <> &ВалютаУправленческогоУчета)
	|	И (ДанныеРегистра.Регистратор В (&МассивДокументов)
	|		ИЛИ (&ПоВсемДокументам 
	|			И ((ДанныеРегистра.СуммаБезНДС <> 0 И 
	|					(ДанныеРегистра.СуммаБезНДСРегл = 0 ИЛИ ДанныеРегистра.СуммаБезНДСУпр = 0))
	|				ИЛИ (ДанныеРегистра.СуммаНДС <> 0 И 
	|					(ДанныеРегистра.СуммаНДСРегл = 0 ИЛИ ДанныеРегистра.СуммаНДСУпр = 0)))
	|		)
	|	)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ВариантРасчета = "РасчетыСКлиентами" Тогда
		ТипРасчета = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ТекстРасчета = СуммыКлиентовВВалютеРегл();
	Иначе
		ТипРасчета = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		ТекстРасчета = СуммыПоставщиковВВалютеРегл();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса
	+ ТекстРасчета
	+ "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка,
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	ДанныеРегистра.СуммаБезНДС     КАК СуммаБезНДС,
	|	ДанныеРегистра.СуммаНДС        КАК СуммаНДС,
	|	ДанныеРегистра.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
	|	ДанныеРегистра.СуммаНДСРегл    КАК СуммаНДСРегл,
	|	ДанныеРегистра.БазаНДСРегл     КАК БазаНДСРегл,
	|	ДанныеРегистра.СуммаБезНДСУпр  КАК СуммаБезНДСУпр,
	|	ДанныеРегистра.СуммаНДСУпр     КАК СуммаНДСУпр,
	|	ДанныеРегистра.БазаНДСУпр      КАК БазаНДСУпр,
	|	
	|	ДанныеРегистра.Валюта                    КАК Валюта,
	|	ДанныеРегистра.СтавкаНДС                 КАК СтавкаНДС,
	|	ДанныеРегистра.ТипРасчетов               КАК ТипРасчетов,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	
	|	ВЫБОР КОГДА ДанныеРегистра.ТипРасчетов = &ТипРасчета
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьСуммыРегл,
	|	
	|	ВЫБОР КОГДА ДанныеРегистра.ТипРасчетов = &ТипРасчета
	|		ТОГДА ДанныеРегистра.СуммаБезНДС + ДанныеРегистра.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаБезНДС + ДанныеРегистра.СуммаНДС < 0
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСторно
	|
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|		И (ДанныеРегистра.АналитикаУчетаПоПартнерам = ТаблицаДокументов.АналитикаУчетаПоПартнерам
	|		ИЛИ ТаблицаДокументов.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	СУММА(СуммаСНДС)
	|ПО
	|	ДанныеРегистра.Регистратор,
	|	ЭтоСторно
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Валюты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Валюты.ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ПоВсемДокументам", Не ЗначениеЗаполнено(МассивДокументов));
	Запрос.УстановитьПараметр("ТипРасчета", ТипРасчета);
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаУПоставщика", ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика));
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаПоИмпорту", ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту));
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаВСтранахЕАЭС", ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоРасчетам   = МассивРезультатов[1];
	РезультатПоДокументам = МассивРезультатов[2];
	
	ВыборкаПоРасчетам = РезультатПоРасчетам.Выбрать();
	
	ЗатронутыеРегистраторы = Новый Массив;
	ВыборкаПоДокументу = РезультатПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СуммыДокументовВВалютеРегл.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументу.Ссылка);
		
		ВыборкаПоТипуЗаписи = ВыборкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоТипуЗаписи.Следующий() Цикл
			СуммаДокументаРегл = 0;
			СуммаДокументаУпр  = 0;
			СуммаДокумента     = ВыборкаПоТипуЗаписи.СуммаСНДС;
			
			КурсВалютыРегл     = 1;
			БазаНДСРегл        = 0;
			КурсВалютыУпр      = 1;
			БазаНДСУпр         = 0;
			
			ПересчитываемРегл = Истина;
			ПересчитываемУпр  = Истина;
			
			КурсВалютыРегл = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
					Валюты.ВалютаРегламентированногоУчета,
					ВыборкаПоДокументу.Период,
					Валюты.КэшКурсовВалют);
			КурсВалютыУпр = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
					Валюты.ВалютаУправленческогоУчета,
					ВыборкаПоДокументу.Период,
					Валюты.КэшКурсовВалют);
			
			Пока ВыборкаПоРасчетам.НайтиСледующий(Новый Структура("Регистратор", ВыборкаПоДокументу.Ссылка)) Цикл
				
				КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
					ВыборкаПоРасчетам.Валюта,
					ВыборкаПоДокументу.Период,
					Валюты.КэшКурсовВалют);
				
				ДолгРегл = ВыборкаПоРасчетам.Долг * КурсВалютыВзаиморасчетов / КурсВалютыРегл;
				СуммаДокументаРегл = СуммаДокументаРегл + ВыборкаПоРасчетам.ПредоплатаРегл + ДолгРегл;
				
				ДолгУпр  = ВыборкаПоРасчетам.Долг * КурсВалютыВзаиморасчетов / КурсВалютыУпр;
				СуммаДокументаУпр  = СуммаДокументаУпр + ВыборкаПоРасчетам.ПредоплатаУпр + ДолгУпр;

				ПорядокОплаты  = ВыборкаПоРасчетам.ПорядокОплаты;
				ВалютаРасчетов = ВыборкаПоРасчетам.Валюта;
			КонецЦикла;
		
			ВыборкаПоРасчетам.Сбросить();
			
			УчтеноБазыРаспределения = 0;
			УжеРаспределено = 0;
			УжеРаспределеноУпр = 0;
			
			Выборка = ВыборкаПоТипуЗаписи.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ВалютаРасчетов = Валюты.ВалютаРегламентированногоУчета
					ИЛИ Выборка.Валюта = Валюты.ВалютаРегламентированногоУчета Тогда
					ПересчитываемРегл =Ложь;
				КонецЕсли;
				
				Если ВалютаРасчетов = Валюты.ВалютаУправленческогоУчета
					ИЛИ Выборка.Валюта = Валюты.ВалютаУправленческогоУчета Тогда
					ПересчитываемУпр = Ложь;
				КонецЕсли;
				
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				
				Если Выборка.ПересчитатьСуммыРегл И СуммаДокумента <> 0 Тогда
					
					СуммаСНДС = Выборка.СуммаБезНДС + Выборка.СуммаНДС;
					
					СуммаСНДСРегл = Окр(СуммаДокументаРегл * (УчтеноБазыРаспределения + СуммаСНДС) / СуммаДокумента, 2) - УжеРаспределено;
					СуммаСНДСУпр  = Окр(СуммаДокументаУпр * (УчтеноБазыРаспределения + СуммаСНДС) / СуммаДокумента, 2) - УжеРаспределеноУпр;
					
					УчтеноБазыРаспределения = УчтеноБазыРаспределения + СуммаСНДС;
					УжеРаспределено         = УжеРаспределено + СуммаСНДСРегл;
					УжеРаспределеноУпр      = УжеРаспределеноУпр + СуммаСНДСУпр;
					
					ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС);
					
					Если ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте Тогда
						
						КурсВалютыДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
							Выборка.Валюта,
							ВыборкаПоДокументу.Период,
							Валюты.КэшКурсовВалют);
							
						Если ПересчитываемРегл Тогда
							НоваяЗапись.БазаНДСРегл = Выборка.СуммаБезНДС * КурсВалютыДокумента / КурсВалютыРегл;
							Если НоваяЗапись.СуммаНДС = 0 Тогда 
								НоваяЗапись.СуммаНДСРегл = 0;
							Иначе
								НоваяЗапись.СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяЗапись.БазаНДСРегл, ТекПроцентНДС, Ложь);
							КонецЕсли;
							НоваяЗапись.СуммаБезНДСРегл = СуммаСНДСРегл - НоваяЗапись.СуммаНДСРегл;
						КонецЕсли;
						Если ПересчитываемУпр Тогда
							НоваяЗапись.БазаНДСУпр = Выборка.СуммаБезНДС * КурсВалютыДокумента / КурсВалютыУпр;
							Если НоваяЗапись.СуммаНДС = 0 Тогда 
								НоваяЗапись.СуммаНДСУпр = 0;
							Иначе
								НоваяЗапись.СуммаНДСУпр = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяЗапись.БазаНДСУпр, ТекПроцентНДС, Ложь);
							КонецЕсли;
							НоваяЗапись.СуммаБезНДСУпр = СуммаСНДСУпр - НоваяЗапись.СуммаНДСУпр;
						КонецЕсли;
						
					Иначе
						
						Если ПересчитываемРегл Тогда
							Если НоваяЗапись.СуммаНДС = 0 Тогда 
								НоваяЗапись.СуммаНДСРегл = 0;
							Иначе
								НоваяЗапись.СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСРегл, ТекПроцентНДС);
							КонецЕсли;
							НоваяЗапись.СуммаБезНДСРегл = СуммаСНДСРегл - НоваяЗапись.СуммаНДСРегл;
							НоваяЗапись.БазаНДСРегл  = НоваяЗапись.СуммаБезНДСРегл;
						КонецЕсли;
						Если ПересчитываемУпр Тогда
							Если НоваяЗапись.СуммаНДС = 0 Тогда 
								НоваяЗапись.СуммаНДСУпр = 0;
							Иначе
								НоваяЗапись.СуммаНДСУпр = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСУпр, ТекПроцентНДС);
							КонецЕсли;
							НоваяЗапись.СуммаБезНДСУпр = СуммаСНДСУпр - НоваяЗапись.СуммаНДСУпр;
							НоваяЗапись.БазаНДСУпр  = НоваяЗапись.СуммаБезНДСУпр;
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ПересчитываемУпр Тогда
						Если НоваяЗапись.СуммаНДС = 0 Тогда 
							НоваяЗапись.СуммаНДСУпр = 0;
						Иначе
							НоваяЗапись.СуммаНДСУпр = Выборка.СуммаНДСУпр;
						КонецЕсли;
						НоваяЗапись.СуммаБезНДСУпр = Выборка.СуммаБезНДСУпр;
						НоваяЗапись.БазаНДСУпр = Выборка.БазаНДСУпр;
					КонецЕсли;
					
					Если НЕ ПересчитываемРегл Тогда
						Если НоваяЗапись.СуммаНДС = 0 Тогда 
							НоваяЗапись.СуммаНДСРегл = 0;
						Иначе
							НоваяЗапись.СуммаНДСРегл = Выборка.СуммаНДСРегл;
						КонецЕсли;
						НоваяЗапись.СуммаБезНДСРегл = Выборка.СуммаБезНДСРегл;
						НоваяЗапись.БазаНДСРегл = Выборка.БазаНДСРегл;
					КонецЕсли;
					
					Если Выборка.ЭтоСторно Тогда
						Если ПересчитываемРегл Тогда 
							Если НоваяЗапись.СуммаНДС = 0 Тогда 
								НоваяЗапись.СуммаНДСРегл = 0;
							Иначе
								НоваяЗапись.СуммаНДСРегл = -НоваяЗапись.СуммаНДСРегл;
							КонецЕсли;
							НоваяЗапись.СуммаБезНДСРегл = -НоваяЗапись.СуммаБезНДСРегл;
						КонецЕсли;
						Если ПересчитываемУпр Тогда
							Если НоваяЗапись.СуммаНДС = 0 Тогда 
								НоваяЗапись.СуммаНДСРегл = 0;
							Иначе
								НоваяЗапись.СуммаНДСРегл = -НоваяЗапись.СуммаНДСУпр;
							КонецЕсли;
							НоваяЗапись.СуммаБезНДСУпр = -НоваяЗапись.СуммаБезНДСУпр;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Записать();
		
		ЗатронутыеРегистраторы.Добавить(ВыборкаПоДокументу.Ссылка);
		
	КонецЦикла;
	
	РегистрыСведений.СуммыДокументовВВалютеРегл.ОбновитьДвиженияДокументов(ЗатронутыеРегистраторы);
	
	Если ВариантРасчета = "РасчетыСКлиентами" Тогда
		СформироватьЗаданияКРаспределениюНДС(ЗатронутыеРегистраторы);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распределение приходов на расходы

Функция ОписаниеДвижений(Контекст, ПоляРасчета, КлючиСравнения, Показатели, БазисПрихода, БазисРасхода, КлючРасхода, ПолеПорядка, ПоляСортировки = "", СортировкаПоУсловию = "")
	Описание = Новый Структура();
	Описание.Вставить("Контекст", Контекст);
	Описание.Вставить("ПоляРасчета", ПоляРасчета);
	Описание.Вставить("КлючиСравнения", КлючиСравнения);
	Описание.Вставить("Показатели", Показатели);
	Описание.Вставить("БазисПрихода", БазисПрихода);
	Описание.Вставить("БазисРасхода", БазисРасхода);
	Описание.Вставить("КлючРасхода", КлючРасхода);
	Описание.Вставить("ПолеПорядка", ПолеПорядка);
	Описание.Вставить("ПоляСортировки", ПоляСортировки);
	Описание.Вставить("СортировкаПоУсловию", СортировкаПоУсловию);
	
	Возврат Описание;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Построение цепочек движений для проброса документов расчета

// Граф сопоставлений индексов строк расхода и индексов строк с источниками расчетов
Функция ЦепочкиДвиженийИзВыборки(ОписаниеЦепочек, РасчетныеПартии)
	ИндексРасчета = Новый Соответствие;
	ТипыЗаписей = Новый Соответствие;
	
	Движение = РасчетныеПартии.Выбрать();
	
	КлючиДвижения = Новый Массив;
	// строим индекс нерасчитанных потребителей
	НомерСтроки = -1;
	Пока Движение.Следующий() Цикл
		НомерСтроки = НомерСтроки + 1;
		Если Движение.РасчетЗавершен Тогда
			Продолжить;
		КонецЕсли;
		
		КлючиДвижения.Очистить();
		КлючиДвижения.Добавить(Движение.ТипЗаписи);
		Для Каждого ПолеСвязи Из ОписаниеЦепочек[Движение.ТипЗаписи].ПоляСвязи Цикл
			КлючиДвижения.Добавить(Движение[ПолеСвязи]);
		КонецЦикла;
		КлючиДвижения.Добавить(НомерСтроки);
		ТипыЗаписей.Вставить(НомерСтроки, Движение.ТипЗаписи);
		
		ДобавитьУзелИндекса(ИндексРасчета, КлючиДвижения, НомерСтроки);
	КонецЦикла;
	
	ЦепочкиДвижений = Новый Соответствие;
	
	// ищем элементы индекса, которые могут являться приемниками данных текущего движения
	Движение.Сбросить();
	НомерСтроки = -1;
	Пока Движение.Следующий() Цикл
		НомерСтроки = НомерСтроки + 1;
		ОписаниеЦепочки = Неопределено;
		Если Не ОписаниеЦепочек.Свойство(Движение.ТипЗаписи, ОписаниеЦепочки) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеТипаПриемника Из ОписаниеЦепочки.ТипыПриемников Цикл
			Узлы = ИндексРасчета[ОписаниеТипаПриемника.Ключ];
			Если Узлы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ПолеИсточника Из ОписаниеТипаПриемника.Значение Цикл
				Узлы = Узлы[Движение[ПолеИсточника]];
				Если Узлы = Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Узлы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Узел Из Узлы Цикл
				Если ОписаниеТипаПриемника.Ключ = ТипыЗаписей[Узел.Ключ] Тогда // Сравниваем тип записи
					СвязатьУзлыЦепочки(ЦепочкиДвижений, Узел.Ключ, НомерСтроки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат ЦепочкиДвижений;
КонецФункции

Функция ОписаниеЦепочек(ПереченьТиповЗаписей)
	ОписаниеЦепочек = Новый Структура(ПереченьТиповЗаписей);
	Для Каждого Описание Из ОписаниеЦепочек Цикл
		ОписаниеЦепочек[Описание.Ключ] = Новый Структура("ПоляСвязи, ТипыПриемников");
		ОписаниеЦепочек[Описание.Ключ].ПоляСвязи = Новый Массив;
		ОписаниеЦепочек[Описание.Ключ].ТипыПриемников = Новый Соответствие;
	КонецЦикла;
	Возврат ОписаниеЦепочек;
КонецФункции

Процедура ДобавитьОписаниеПриемника(ОписаниеЦепочек, ТипПриемника, ПоляПриемника)
	Для Каждого ОписаниеПоля Из Новый Структура(ПоляПриемника) Цикл
		ОписаниеЦепочек[ТипПриемника].ПоляСвязи.Добавить(ОписаниеПоля.Ключ);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьОписаниеИсточника(ОписаниеЦепочек, ТипПриемника, ТипИсточника, ПоляИсточника)
	ПоляСвязи = Новый Массив;
	Для Каждого ОписаниеПоля Из Новый Структура(ПоляИсточника) Цикл
		ПоляСвязи.Добавить(ОписаниеПоля.Ключ);
	КонецЦикла;
	ОписаниеЦепочек[ТипИсточника].ТипыПриемников.Вставить(ТипПриемника, ПоляСвязи);
КонецПроцедуры

// В источники приемника добавляется источник, в приемники источника добавляется приемник
Процедура СвязатьУзлыЦепочки(ЦепочкиДвижений, Приемник, Источник, ПослеИсточника = Неопределено)
	// связываем только различные строки
	Если Источник = Приемник Тогда
		Возврат;
	КонецЕсли;
	
	// приемник добавляется в сопоставление, для приемника заполняются источники (строка с ложной партией)
	Если Неопределено = ЦепочкиДвижений[Приемник] Тогда
		ЦепочкиДвижений.Вставить(Приемник, Новый Структура("Источники, Приемники", Новый Массив, Новый Массив));
	КонецЕсли;
	Источники = ЦепочкиДвижений[Приемник].Источники;
	Если ПослеИсточника <> Неопределено Тогда
		Индекс = Источники.Найти(ПослеИсточника);
		Если Индекс <> Неопределено Тогда
			Источники.Вставить(Индекс + 1, Источник);
		КонецЕсли;
	Иначе
		Источники.Добавить(Источник);
	КонецЕсли;
	
	// источник добавляется в сопоставление, для источника заполняются приемники (строка ложной партии)
	Если Неопределено = ЦепочкиДвижений[Источник] Тогда
		ЦепочкиДвижений.Вставить(Источник, Новый Структура("Источники, Приемники", Новый Массив, Новый Массив));
	КонецЕсли;
	ЦепочкиДвижений[Источник].Приемники.Добавить(Приемник);
КонецПроцедуры

// ждем, что источников будем менее десятка и они будут почти всегда уже упорядочены, поэтому делаем сортировку вставками
Процедура СортироватьИсточники(Источники, ПолеПорядка, РасчетныеПартии)
	Для Счетчик = 1 По Источники.ВГраница() Цикл
		Если Неопределено = РасчетныеПартии[Источники[Счетчик]] Тогда
			Продолжить;
		КонецЕсли;
		Элемент = Новый Структура("Порядок, Источник", РасчетныеПартии[Источники[Счетчик]][ПолеПорядка], Источники[Счетчик]);
		ПредыдущийНомер = Счетчик - 1;
		Пока ПредыдущийНомер >= 0 Цикл
			Если Неопределено = РасчетныеПартии[Источники[ПредыдущийНомер]] Тогда
				ПредыдущийНомер = ПредыдущийНомер - 1;
				Продолжить;
			КонецЕсли;
			Если РасчетныеПартии[Источники[ПредыдущийНомер]][ПолеПорядка] <= Элемент.Порядок Тогда
				Прервать;
			КонецЕсли;
			Источники[ПредыдущийНомер + 1] = Источники[ПредыдущийНомер];
			ПредыдущийНомер = ПредыдущийНомер - 1;
		КонецЦикла;
		Источники[ПредыдущийНомер + 1] = Элемент.Источник;
	КонецЦикла;
КонецПроцедуры

Процедура СортироватьИсточникиПоПолямСортировки(Источники, ПоляСортировки, Приходы, НаправлениеСортировки = "Убыв")
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("Ключ");
	УсловиеСортировки = "";
	Для Каждого ПолеСортировки Из ПоляСортировки Цикл
		ПараметрыПоляСортировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПолеСортировки, " ");
		ТаблицаСортировки.Колонки.Добавить(ПараметрыПоляСортировки[0]);
		Если ЗначениеЗаполнено(УсловиеСортировки) Тогда
			УсловиеСортировки = УсловиеСортировки + ", ";
		КонецЕсли;
		УсловиеСортировки = УсловиеСортировки + ПараметрыПоляСортировки[0] + " " + ?(ПараметрыПоляСортировки.Количество() > 1, ПараметрыПоляСортировки[1], НаправлениеСортировки);
	КонецЦикла;
	Для Каждого Источник Из Источники Цикл
		СтрокаПрихода = Приходы.Получить(Источник);
		Если СтрокаПрихода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСортировки = ТаблицаСортировки.Добавить();
		СтрокаСортировки.Ключ = Источник;
		Для Каждого ПолеСортировки Из ПоляСортировки Цикл
			ПараметрыПоляСортировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПолеСортировки, " ");
			СтрокаСортировки[ПараметрыПоляСортировки[0]] = СтрокаПрихода[ПараметрыПоляСортировки[0]];
		КонецЦикла;
	КонецЦикла;
	ТаблицаСортировки.Сортировать(УсловиеСортировки);
	Источники = ТаблицаСортировки.ВыгрузитьКолонку("Ключ");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расчет по цепочкам движений и выборки из результата запроса

Процедура РассчитатьПартииПоЦепочкамИзВыборки(ОписаниеДвижений, РезультатЗапроса, РасчетныеПартии, ЦепочкиДвижений, Регистраторы,  Тест = Ложь, КоличествоЗаписей = 0)
	Приходы = Новый Соответствие; // буфер копий партий для покрытия расходов
	СтрокиПартий = Новый Соответствие; // буфер нерассчитанных партий для расчета на следующих итерациях
	ПройденныйПуть = Новый Соответствие; // используется для прерывания циклов
	
	Валюты = Новый Структура;
	Валюты.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Валюты.Вставить("КэшКурсовВалют", РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют());
	
	ИндексРасхода = -1;
	Выборка = РезультатЗапроса.Выбрать();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	КоличествоЗаписей = Выборка.Количество();
	МаксИндекс = Выборка.Количество() + 1;
	Пока Выборка.Следующий() Цикл
		ИндексРасхода = ИндексРасхода + 1;
		Если ЦепочкиДвижений[ИндексРасхода] = Неопределено Тогда
			РасчетнаяПартия = РасчетныеПартии.Добавить();
			ЗаполнитьЗначенияСвойств(РасчетнаяПартия, Выборка);
			ЗаполнитьЗалогЗаТаруРегл(Валюты, РасчетнаяПартия);;
			Продолжить; // строка к обсчету НЕ зарегистрирована
		ИначеЕсли Выборка.РасчетЗавершен Тогда
			Если ЦепочкиДвижений[ИндексРасхода].Приемники.Количество() > 0 Тогда
				Приход = КопияЗаписиСтруктурой(Выборка, ОписаниеДвижений.ПоляРасчета);
				ЭтоСторно = ЭтоСторно(Приход.ТипЗаписи);
				ИнвертироватьПоказатели(Приход, ОписаниеДвижений.Показатели, ЭтоСторно);
				Приходы.Вставить(ИндексРасхода, Приход);
			КонецЕсли;
			РасчетнаяПартия = РасчетныеПартии.Добавить();
			ЗаполнитьЗначенияСвойств(РасчетнаяПартия, Выборка);
			ЗаполнитьЗалогЗаТаруРегл(Валюты, РасчетнаяПартия);
			Продолжить; // строка является исходной партией
		КонецЕсли;
		ПройденныйПуть.Очистить();
		РасчетнаяПартия = КопияЗаписиСтруктурой(Выборка, ОписаниеДвижений.ПоляРасчета);
		РассчитатьПартиюПоЦепочкеИзВыборки(ОписаниеДвижений, РасчетнаяПартия, РасчетныеПартии, ЦепочкиДвижений, Приходы, ИндексРасхода, ПройденныйПуть, МаксИндекс, Ложь, СтрокиПартий, Валюты);
		
		// Запишем порцию движений в регистр.
		Если РасчетныеПартии.Количество() > 1000
			И (ИндексРасхода = КоличествоЗаписей - 1 
				ИЛИ (ИндексРасхода < КоличествоЗаписей - 1
					И ТаблицаДанных[ИндексРасхода + 1].Регистратор <> Выборка.Регистратор)) Тогда
			УдалитьНезаписываемыеСтроки(ОписаниеДвижений.Контекст, РасчетныеПартии);
			Если ОписаниеДвижений.Контекст = "РасчетыСКлиентами" Тогда
				ЗаписатьРасчетныеПартии(РегистрыНакопления.РасчетыСКлиентамиПоДокументам, РасчетныеПартии, Регистраторы);
			ИначеЕсли ОписаниеДвижений.Контекст = "РасчетыСПоставщиками" Тогда
				ЗаписатьРасчетныеПартии(РегистрыНакопления.РасчетыСПоставщикамиПоДокументам, РасчетныеПартии, Регистраторы);
			КонецЕсли;
			РегистраторыКОтражению = РасчетныеПартии.ВыгрузитьКолонку("Регистратор");
			СформироватьДвиженияПоНДС(ОписаниеДвижений.Контекст, РегистраторыКОтражению);
			СформироватьДвиженияПоУправленческомуУчету(ОписаниеДвижений.Контекст, РасчетныеПартии);
			СуммыДокументовВВалютеРегл(ОписаниеДвижений.Контекст, РегистраторыКОтражению);
			РасчетныеПартии.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < МаксИндекс Цикл
		ИндексРасхода = Счетчик;
		Счетчик = Счетчик + 1;
		Если СтрокиПартий[ИндексРасхода] = Неопределено Тогда
			Продолжить; // строка к обсчету НЕ зарегистрирована
		КонецЕсли;
		ПройденныйПуть.Очистить();
		РасчетнаяПартия = КопияЗаписиСтруктурой(СтрокиПартий[ИндексРасхода], ОписаниеДвижений.ПоляРасчета);
		РассчитатьПартиюПоЦепочкеИзВыборки(ОписаниеДвижений, РасчетнаяПартия, РасчетныеПартии, ЦепочкиДвижений, Приходы, ИндексРасхода, ПройденныйПуть, МаксИндекс, Истина, СтрокиПартий, Валюты);
		
		// Запишем порцию движений в регистр.
		Если РасчетныеПартии.Количество() > 1000
			И (ИндексРасхода = МаксИндекс 
				ИЛИ (ИндексРасхода < МаксИндекс
					И СтрокиПартий[ИндексРасхода + 1].Регистратор <> СтрокиПартий[ИндексРасхода].Регистратор)) Тогда
			УдалитьНезаписываемыеСтроки(ОписаниеДвижений.Контекст, РасчетныеПартии);
			Если ОписаниеДвижений.Контекст = "РасчетыСКлиентами" Тогда
				ЗаписатьРасчетныеПартии(РегистрыНакопления.РасчетыСКлиентамиПоДокументам, РасчетныеПартии, Регистраторы);
			ИначеЕсли ОписаниеДвижений.Контекст = "РасчетыСПоставщиками" Тогда
				ЗаписатьРасчетныеПартии(РегистрыНакопления.РасчетыСПоставщикамиПоДокументам, РасчетныеПартии, Регистраторы);
			КонецЕсли;
			РегистраторыКОтражению = РасчетныеПартии.ВыгрузитьКолонку("Регистратор");
			СформироватьДвиженияПоНДС(ОписаниеДвижений.Контекст, РегистраторыКОтражению);
			СформироватьДвиженияПоУправленческомуУчету(ОписаниеДвижений.Контекст, РасчетныеПартии);
			СуммыДокументовВВалютеРегл(ОписаниеДвижений.Контекст, РегистраторыКОтражению);
			РасчетныеПартии.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиПартий Цикл
		РасчетнаяПартия = РасчетныеПартии.Добавить();
		ЗаполнитьЗначенияСвойств(РасчетнаяПартия, Строка.Значение);
		ЗаполнитьЗалогЗаТаруРегл(Валюты, РасчетнаяПартия);
		Если РасчетныеПартии.Количество() > 1000 Тогда
			УдалитьНезаписываемыеСтроки(ОписаниеДвижений.Контекст, РасчетныеПартии);
			Если ОписаниеДвижений.Контекст = "РасчетыСКлиентами" Тогда
				ЗаписатьРасчетныеПартии(РегистрыНакопления.РасчетыСКлиентамиПоДокументам, РасчетныеПартии, Регистраторы);
			ИначеЕсли ОписаниеДвижений.Контекст = "РасчетыСПоставщиками" Тогда
				ЗаписатьРасчетныеПартии(РегистрыНакопления.РасчетыСПоставщикамиПоДокументам, РасчетныеПартии, Регистраторы);
			КонецЕсли;
			РегистраторыКОтражению = РасчетныеПартии.ВыгрузитьКолонку("Регистратор");
			СформироватьДвиженияПоНДС(ОписаниеДвижений.Контекст, РегистраторыКОтражению);
			СформироватьДвиженияПоУправленческомуУчету(ОписаниеДвижений.Контекст, РасчетныеПартии);
			СуммыДокументовВВалютеРегл(ОписаниеДвижений.Контекст, РегистраторыКОтражению);
			РасчетныеПартии.Очистить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РассчитатьПартиюПоЦепочкеИзВыборки(ОписаниеДвижений, РасчетнаяПартия, РасчетныеПартии, ЦепочкиДвижений, Приходы, ИндексРасхода, ПройденныйПуть, МаксИндекс, Итерация, СтрокиПартий, Валюты)
	Если ЦепочкиДвижений[ИндексРасхода] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИнвертировалиПоказатели = Ложь;
	Источники = ЦепочкиДвижений[ИндексРасхода].Источники;
	Расход = КопияЗаписиСтруктурой(РасчетнаяПартия, ОписаниеДвижений.ПоляРасчета);
	Если ИндексРасхода = ПройденныйПуть[ИндексРасхода] Тогда
		Возврат; //мы тут уже были или источников для данной строки не зарегистрировано
	КонецЕсли;
	Если Источники.Количество() = 0 Тогда
		Расход.РасчетЗавершен = Истина;
		Расход.РасчетныйДокумент = Расход.Регистратор;
		Расход.ПриоритетРасчетногоДокумента = 1;
		
		НоваяПартия = РасчетныеПартии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПартия, Расход);
		ЗаполнитьЗалогЗаТаруРегл(Валюты, НоваяПартия);
		
		Приход = КопияЗаписиСтруктурой(НоваяПартия, ОписаниеДвижений.ПоляРасчета);
		ЭтоСторно = ЭтоСторно(Приход.ТипЗаписи);
		ИнвертироватьПоказатели(Приход, ОписаниеДвижений.Показатели, ЭтоСторно);
		Приходы.Вставить(ИндексРасхода, Приход);
		Возврат;
	КонецЕсли;
	
	ПройденныйПуть.Вставить(ИндексРасхода, ИндексРасхода);
	ЭтоСторно = ЭтоСторно(Расход.ТипЗаписи);
	
	ЗначенияПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ОписаниеДвижений.ПоляСортировки, ",");
	Если ЭтоСторно И ТребуетсяСортировка(Расход, ЭтоСторно) Тогда
		СортироватьИсточникиПоПолямСортировки(Источники, ЗначенияПолей, Приходы);
	ИначеЕсли ЭтоСторно Тогда
		СортироватьИсточникиПоПолямСортировки(Источники, ЗначенияПолей, Приходы, "Возр");
	КонецЕсли;
	
	Если ЭтоСторно И Итерация Тогда
		Для Каждого ИндексИсточника Из Источники Цикл
			Если Неопределено = Приходы[ИндексИсточника] И СтрокиПартий[ИндексИсточника] <> Неопределено Тогда // данный источник еще не рассчитан
				РассчитатьПартиюПоЦепочкеИзВыборки(ОписаниеДвижений, СтрокиПартий[ИндексИсточника], РасчетныеПартии, ЦепочкиДвижений, Приходы, ИндексИсточника, ПройденныйПуть, МаксИндекс, Итерация, СтрокиПартий, Валюты);
			КонецЕсли;
		КонецЦикла;
		СортироватьИсточники(Источники, ОписаниеДвижений.ПолеПорядка, Приходы);
	КонецЕсли;
	
	Счетчик = 0;
	ВГраница = Источники.ВГраница();
	ДоступныеИсточники = Новый Массив;
	РасчетЗавершен = Новый Массив;
	
	ИндексРасчетнойПартии = -1;
	Если ЭтоСторно И Расход[ОписаниеДвижений.БазисРасхода] < 0 Тогда
		ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ЭтоСторно);
		ИнвертировалиПоказатели = Истина;
	КонецЕсли;
	Пока Счетчик <= ВГраница Цикл
		ИндексИсточника = Источники[Счетчик];
		Счетчик = Счетчик + 1;
		
		Если Не ЭтоСторно И ИндексИсточника = ПройденныйПуть[ИндексИсточника] Тогда
			ДоступныеИсточники.Добавить(ИндексИсточника);
			Продолжить; // данный источник еще рассчитан не до конца
		КонецЕсли;
		
		Приход = Приходы[ИндексИсточника];
		Если Неопределено = Приход Тогда
			Если Не Итерация ИЛИ Неопределено = СтрокиПартий[ИндексИсточника] Тогда
				ДоступныеИсточники.Добавить(ИндексИсточника);
				Продолжить;
			КонецЕсли;
			Источник = СтрокиПартий[ИндексИсточника];
			Если Не Источник.РасчетЗавершен Тогда
				РассчитатьПартиюПоЦепочкеИзВыборки(ОписаниеДвижений, Источник, РасчетныеПартии, ЦепочкиДвижений, Приходы, ИндексИсточника, ПройденныйПуть, МаксИндекс, Итерация, СтрокиПартий, Валюты);
				ВГраница = Источники.ВГраница();
				Приход = Приходы[ИндексИсточника];
				Если Неопределено = Приход Тогда
					ДоступныеИсточники.Добавить(ИндексИсточника);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПриходЭтоСторно = ЭтоСторно(Приход.ТипЗаписи);
		Если Приход[ОписаниеДвижений.БазисПрихода] < 0. Тогда
			ИнвертироватьПоказатели(Приход, ОписаниеДвижений.Показатели, ПриходЭтоСторно);
		КонецЕсли;
		Если Приход[ОписаниеДвижений.БазисПрихода] = 0. Тогда
			Приходы.Удалить(ИндексИсточника);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьРасчетнуюПартию(ОписаниеДвижений.Контекст, РасчетнаяПартия, Расход, Приход, Валюты);
		Если ИнвертировалиПоказатели Тогда
			ИнвертироватьПоказатели(РасчетнаяПартия, ОписаниеДвижений.Показатели, ЭтоСторно);
		КонецЕсли;
		
		Если Приход[ОписаниеДвижений.БазисПрихода] <= 0. Тогда
			Приходы.Удалить(ИндексИсточника);
		КонецЕсли;
		Если РасчетнаяПартия.РасчетЗавершен Тогда
			НоваяПартия = РасчетныеПартии.Добавить();
			Если РасчетнаяПартия.Регистратор = РасчетнаяПартия.РасчетныйДокумент Тогда
				РасчетнаяПартия.ПриоритетРасчетногоДокумента = 1;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяПартия, РасчетнаяПартия);
			ЗаполнитьЗалогЗаТаруРегл(Валюты, НоваяПартия);
			
			ТекущийИндекс = ?(ИндексРасчетнойПартии >= 0, ИндексРасчетнойПартии, ИндексРасхода);
			РасчетЗавершен.Добавить(ТекущийИндекс);
			Если СтрокиПартий[ТекущийИндекс] <> Неопределено Тогда
				СтрокиПартий.Удалить(ТекущийИндекс);
			КонецЕсли;
			Приход = КопияЗаписиСтруктурой(НоваяПартия, ОписаниеДвижений.ПоляРасчета);
			ЭтоСторно = ЭтоСторно(Приход.ТипЗаписи);
			ИнвертироватьПоказатели(Приход, ОписаниеДвижений.Показатели, ЭтоСторно);
			Приходы.Вставить(ТекущийИндекс, Приход);
			// Добавим новую строку партии.
			Если Расход[ОписаниеДвижений.БазисРасхода] > 0. Тогда
				РасчетнаяПартия = КопияЗаписиСтруктурой(Расход, ОписаниеДвижений.ПоляРасчета);
				РасчетнаяПартия.РасчетЗавершен = Ложь;
				РасчетнаяПартия[ОписаниеДвижений.ПолеПорядка] = Дата(1,1,1);
				ИндексРасчетнойПартии = МаксИндекс;
				ПройденныйПуть.Вставить(ИндексРасчетнойПартии, ИндексРасчетнойПартии);
				МаксИндекс = МаксИндекс + 1;
				// текущий источник будет также источником для новой расчетной партии
				Для Каждого ИндексПриемника Из ЦепочкиДвижений[ИндексРасхода].Приемники Цикл
					Если Не ЦепочкиДвижений[ИндексПриемника].Свойство("РасчетЗавершен") Тогда
						СвязатьУзлыЦепочки(ЦепочкиДвижений, ИндексПриемника, ИндексРасчетнойПартии, ИндексРасхода);
					КонецЕсли;
				КонецЦикла; // приемники текущего расхода получили новую партию в источниках
			КонецЕсли;
		КонецЕсли;
		Если Расход[ОписаниеДвижений.БазисРасхода] <= 0. Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтрокиПартий[ИндексРасхода] <> Неопределено Тогда
		СтрокиПартий.Удалить(ИндексРасхода);
	КонецЕсли;
	Если Расход[ОписаниеДвижений.БазисРасхода] <> 0 
		ИЛИ Расход.ДолгРегл <> 0
		ИЛИ Расход.ДолгУпр <> 0 Тогда
		Расход.РасчетЗавершен = Истина;
		НоваяПартия = РасчетныеПартии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПартия, Расход);
		
		Если НоваяПартия.Регистратор = НоваяПартия.РасчетныйДокумент Тогда
			НоваяПартия.ПриоритетРасчетногоДокумента = 1;
		КонецЕсли;

		Если Расход.ТипЗаписи <> "Отгрузка" Тогда
			НоваяПартия.ЗалогЗаТару = 0;
			НоваяПартия.ЗалогЗаТаруРегл = 0;
		Иначе
			ЗаполнитьЗалогЗаТаруРегл(Валюты, НоваяПартия);
		КонецЕсли;
		
		Если ИнвертировалиПоказатели Тогда
			ИнвертироватьПоказатели(НоваяПартия, ОписаниеДвижений.Показатели, ЭтоСторно);
		КонецЕсли;
		
		ТекущийИндекс = ?(ИндексРасчетнойПартии >= 0, ИндексРасчетнойПартии, ИндексРасхода);
		
		Приход = КопияЗаписиСтруктурой(НоваяПартия, ОписаниеДвижений.ПоляРасчета);
		ЭтоСторно = ЭтоСторно(Приход.ТипЗаписи);
		ИнвертироватьПоказатели(Приход, ОписаниеДвижений.Показатели, ЭтоСторно);
		Приходы.Вставить(ТекущийИндекс, Приход);
		
		Если ИндексРасчетнойПартии >= 0 И ДоступныеИсточники.Количество() > 0 Тогда
			Для Каждого ИндексИсточника Из ДоступныеИсточники Цикл
				СвязатьУзлыЦепочки(ЦепочкиДвижений, ТекущийИндекс, ИндексИсточника);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Индекс Из РасчетЗавершен Цикл
		Если ЦепочкиДвижений[Индекс] <> Неопределено Тогда
			ЦепочкиДвижений[Индекс].Вставить("РасчетЗавершен", Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеМетоды

Функция КопияЗаписиСтруктурой(Запись, ПереченьПолей)
	КопияСтрокиСтруктурой = Новый Структура(ПереченьПолей);
	ЗаполнитьЗначенияСвойств(КопияСтрокиСтруктурой, Запись);
	Возврат КопияСтрокиСтруктурой;
КонецФункции

Функция ЭтоСторно(ТипЗаписи)
	Если ТипЗаписи = "СторноОплаты" ИЛИ ТипЗаписи = "СторноОтгрузки"
		ИЛИ ТипЗаписи = "СторноПоступления" ИЛИ ТипЗаписи = "ВозвратТоваров"
	Тогда
		ЭтоСторно = Истина;
	Иначе
		ЭтоСторно = Ложь;
	КонецЕсли;
	Возврат ЭтоСторно;
КонецФункции

Функция ТребуетсяСортировка(Запись, ЭтоСторно)
	Если (ЭтоСторно
			И Запись.ТипЗаписи <> "ВозвратТоваров"
			И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности)
		ИЛИ (Запись.ТипЗаписи = "ПоступлениеТоваров"
			И Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаЗадолженности)
		ИЛИ (ЭтоСторно
			И Запись.ТипЗаписи = "ВозвратТоваров"
			И (Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику
				ИЛИ Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
	Тогда
		ТребуетсяСортировка = Истина;
	Иначе
		ТребуетсяСортировка = Ложь;
	КонецЕсли;
	Возврат ТребуетсяСортировка;
КонецФункции

Процедура ИнвертироватьПоказатели(Запись, ПереченьПоказателей, Инвертировать)
	Если Не Инвертировать Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Поле Из Новый Структура(ПереченьПоказателей) Цикл
		Запись[Поле.Ключ] = -Запись[Поле.Ключ];
	КонецЦикла;
КонецПроцедуры

Функция ПереченьПолей(КоллекцияКолонок)
	ПереченьПолей = "";
	Для Каждого Колонка Из КоллекцияКолонок Цикл
		ПереченьПолей = ПереченьПолей + ?(ЗначениеЗаполнено(ПереченьПолей), ", ", "") + Колонка.Имя;
	КонецЦикла;
	Возврат ПереченьПолей;
КонецФункции

Функция ДобавитьУзелИндекса(Индекс, КлючиИндекса, Значение)
	ВГраница = КлючиИндекса.ВГраница();
	Если ВГраница < 0 Или КлючиИндекса[0] = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелИндекса = Индекс;
	Счетчик = 0;
	Пока Счетчик < ВГраница Цикл
		ПодузелИндекса = УзелИндекса[КлючиИндекса[Счетчик]];
		Если ПодузелИндекса = Неопределено Тогда
			ПодузелИндекса = Новый Соответствие;
			УзелИндекса.Вставить(КлючиИндекса[Счетчик], ПодузелИндекса);
		КонецЕсли;
		УзелИндекса = ПодузелИндекса;
		Счетчик = Счетчик + 1;
		Если КлючиИндекса[Счетчик] = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	УзелИндекса.Вставить(КлючиИндекса[Счетчик], Значение);
	Возврат Значение;
КонецФункции


Функция СформироватьДвиженияПоНДС(Контекст, РегистраторыКОтражению)
	Если Контекст = "РасчетыСКлиентами" Тогда
		Документы.СчетФактураВыданныйАванс.СформироватьДвиженияПоКнигамПокупокПродаж(РегистраторыКОтражению);
	ИначеЕсли Контекст = "РасчетыСПоставщиками" Тогда
		Документы.СчетФактураПолученныйАванс.СформироватьДвиженияПоКнигеПродаж(РегистраторыКОтражению);
		Документы.СчетФактураНалоговыйАгент.СформироватьДвиженияНДС(РегистраторыКОтражению);
	КонецЕсли;
КонецФункции

Процедура СформироватьЗаданияКРаспределениюНДС(Регистраторы)
	
	Если Регистраторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.Месяц КАК Месяц,
		|	Движения.Организация КАК Организация
		|ПОМЕСТИТЬ втИзменениеБазыРаспределения
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродаж.Период, МЕСЯЦ) КАК Месяц,
		|		Аналитика.Организация КАК Организация
		|	ИЗ
		|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО
		|			ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|	ГДЕ
		|		ВыручкаИСебестоимостьПродаж.Регистратор В (&Регистраторы)
		|
		|	ОБЪЕДИНИТЬ ВСЕ 
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НАЧАЛОПЕРИОДА(КонтрагентДоходыРасходы.Период, МЕСЯЦ) КАК Месяц,
		|		КонтрагентДоходыРасходы.Организация КАК Организация
		|	ИЗ
		|		РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК КонтрагентДоходыРасходы
		|	ГДЕ
		|		КонтрагентДоходыРасходы.Регистратор В (&Регистраторы)) Движения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Месяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Месяц,
		|	Задания.Организация
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Таблица.Месяц                             КАК Месяц,
		|		Таблица.Организация                       КАК Организация
		|	ИЗ
		|		втИзменениеБазыРаспределения КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Документ.РаспределениеНДС КАК РаспределениеНДС
		|		ПО
		|			Таблица.Месяц = НАЧАЛОПЕРИОДА(РаспределениеНДС.Дата, МЕСЯЦ)
		|			И Таблица.Организация = РаспределениеНДС.Организация
		|			И РаспределениеНДС.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ 
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НАЧАЛОПЕРИОДА(
		|			КОНЕЦПЕРИОДА(Таблица.Месяц, КВАРТАЛ), 
		|			МЕСЯЦ)                                КАК Месяц,
		|		Таблица.Организация                       КАК Организация
		|	ИЗ
		|		втИзменениеБазыРаспределения КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Документ.РаспределениеНДС КАК РаспределениеНДС
		|		ПО
		|			КОНЕЦПЕРИОДА(Таблица.Месяц, КВАРТАЛ) = КОНЕЦПЕРИОДА(РаспределениеНДС.Дата, МЕСЯЦ)
		|			И Таблица.Организация = РаспределениеНДС.Организация
		|			И РаспределениеНДС.Проведен) КАК Задания
		|");
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Запись = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Операция = Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС;
			Запись.НомерЗадания = Константы.НомерЗаданияКЗакрытиюМесяца.Получить();
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сформировать задание к распределению НДС за %1 в организации %2 по причине: %3'"),
				Выборка.Месяц,
				Выборка.Организация,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаиморасчеты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьДатуЗапрета(Период)
	
	ШаблонЗапретаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	СтрокаШаблона = ШаблонЗапретаДанных.Добавить();
	СтрокаШаблона.Дата   = Период;
	СтрокаШаблона.Раздел = "РегламентныеОперации";
	
	Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ШаблонЗапретаДанных) Тогда
	
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось запустить распределение взаиморасчетов за %1 из-за установленной даты запрета.'"),
				Формат(Период,"ДФ='MMMM yyyy'"));
				
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаиморасчеты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаДвиженийРегистров

Процедура ОчиститьРегистрНаСервере(Регистраторы, ИмяРегистра)
	Для Каждого Элемент Из Регистраторы Цикл 
		НачатьТранзакцию();
		Попытка
			Движения = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			Движения.Отбор.Регистратор.Установить(Элемент.Ключ);
			Движения.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить регистр: %1 у документа: %2 по причине: %3'"),
				ИмяРегистра,
				Элемент.Ключ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Элемент.Ключ.Метаданные(),
				Элемент.Ключ,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция ИсключаемыеТипы()
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	Возврат ИсключаемыеТипы;
КонецФункции

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации)
	
	ВходящиеДанные = Новый Соответствие;
	
	// из этого модуля + модулей счетов-фактур, см. СформироватьДвиженияПоНДС()	
	ВходящиеДанные.Вставить(Метаданные.Документы.АктВыполненныхРабот);
	ВходящиеДанные.Вставить(Метаданные.Документы.АннулированиеПодарочныхСертификатов);
	ВходящиеДанные.Вставить(Метаданные.Документы.ВозвратПодарочныхСертификатов);
	ВходящиеДанные.Вставить(Метаданные.Документы.КорректировкаПриобретения);
	ВходящиеДанные.Вставить(Метаданные.Документы.КорректировкаРеализации);
	ВходящиеДанные.Вставить(Метаданные.Документы.ОтчетКомиссионера);
	ВходящиеДанные.Вставить(Метаданные.Документы.ОтчетКомиссионераОСписании);
	ВходящиеДанные.Вставить(Метаданные.Документы.ОтчетКомитенту);
	ВходящиеДанные.Вставить(Метаданные.Документы.ОтчетКомитентуОСписании);
	ВходящиеДанные.Вставить(Метаданные.Документы.ОтчетОРозничныхПродажах);
	ВходящиеДанные.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями);
	ВходящиеДанные.Вставить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
	ВходящиеДанные.Вставить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств);
	ВходящиеДанные.Вставить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	ВходящиеДанные.Вставить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	ВходящиеДанные.Вставить(Метаданные.Документы.РеализацияТоваровУслуг);
	ВходящиеДанные.Вставить(Метаданные.Документы.РеализацияУслугПрочихАктивов);
	ВходящиеДанные.Вставить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	ВходящиеДанные.Вставить(Метаданные.Документы.СчетФактураВыданныйАванс);
	ВходящиеДанные.Вставить(Метаданные.Документы.СчетФактураПолученныйАванс);
	ВходящиеДанные.Вставить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт);
	
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПодарочныеСертификаты);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам);
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДанныеПервичныхДокументов);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками);
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации);
	
КонецПроцедуры

// Метод возвращает массив ключей аналитики, по которым будет выполняться расчет.
// Параметры:
//	ПоляОтбора - Структура - Содержит в себе значения полей: организация, партнер и контрагент.
// Возвращаемое значение:
//	Массив - Массив ключей аналитик по партнерам
Функция МассивКлючейПартнеровПоОтбору(ПоляОтбора) Экспорт
	Организация = Неопределено;
	Партнер = Неопределено;
	Контрагент = Неопределено;
	Договор = Неопределено;
	
	ПоляОтбора.Свойство("Организация", Организация);
	ПоляОтбора.Свойство("Партнер", Партнер);
	ПоляОтбора.Свойство("Контрагент", Контрагент);
	ПоляОтбора.Свойство("Договор", Договор);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ключи.КлючАналитики КАК Ключ
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК Ключи
	|ГДЕ
	|	(Ключи.Организация В (&Организация) ИЛИ &ПоВсемОрганизациям)
	|	И (Ключи.Партнер В (&Партнер) ИЛИ &ПоВсемПартнерам)
	|	И (Ключи.Контрагент В (&Контрагент) ИЛИ &ПоВсемКонтрагентам)
	|	И (Ключи.Договор В (&Договор) ИЛИ &ПоВсемДоговорам)
	|");

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПоляОтбора.Организация));
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ПоВсемПартнерам", НЕ ЗначениеЗаполнено(ПоляОтбора.Партнер));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", НЕ ЗначениеЗаполнено(ПоляОтбора.Контрагент));
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ПоВсемДоговорам", НЕ ЗначениеЗаполнено(ПоляОтбора.Договор));
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Ключ");
КонецФункции

#КонецОбласти

#КонецОбласти
