
#Область ПрограммныйИнтерфейс

// Возвращает данные ответственного лица для подписи в отчете.
//
// Параметры:
//	Параметры - Структура - Настройки формирования отчета, содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация, по которой формируется отчет.
//		* ОтветственноеЛицо - Перечисления.ОтветственныеЛицаОрганизаций - Вид ответственного лица.
//		* Период - Дата - Период формирования отчета (опционально).
//		* КонецПериода - Дата - Конец периода формирования отчета (опционально).
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Должность - Строка - Должность ответственного лица.
//		* РасшифровкаПодписи - Строка - Фамилия и инициалы ответственного лица.
//
Функция ПолучитьДанныеОтветственногоЛица(Параметры) Экспорт
	
	ДанныеОтветственногоЛица = Новый Структура("Должность,РасшифровкаПодписи");
	
	Если Не Параметры.Свойство("Организация")
		ИЛИ Не Параметры.Свойство("ОтветственноеЛицо") Тогда
		Возврат ДанныеОтветственногоЛица;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация)
		ИЛИ Не ЗначениеЗаполнено(Параметры.ОтветственноеЛицо) Тогда
		Возврат ДанныеОтветственногоЛица;
	КонецЕсли;
	
	Если Параметры.Свойство("Период") И ЗначениеЗаполнено(Параметры.Период) Тогда
		Период = Параметры.Период;
	ИначеЕсли Параметры.Свойство("КонецПериода") И ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Период = КонецДня(Параметры.КонецПериода);
	Иначе
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
		
	РеквизитыОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(Параметры.Организация, Период);

	// Сначала проверяем ответственных за регистры, потом все остальные виды ответственных.
	Если Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры Тогда
		Ключ = "ОтветственныйЗаБухгалтерскиеРегистры";
	
	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
		Ключ = "ОтветственныйЗаНалоговыеРегистры";
	
	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
		Ключ = "Руководитель";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
		Ключ = "ГлавныйБухгалтер";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы Тогда
		Ключ = "РуководительКадровойСлужбы";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
		Ключ = "Кассир";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель Тогда
		Ключ = "УполномоченныйПредставитель";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель Тогда
		Ключ = "Исполнитель";

	КонецЕсли;

	ДанныеОтветственногоЛица.Должность 			= РеквизитыОтветственныхЛиц[Ключ + "ДолжностьПредставление"];
	ДанныеОтветственногоЛица.РасшифровкаПодписи = РеквизитыОтветственныхЛиц[Ключ + "Представление"];
	
	Возврат ДанныеОтветственногоЛица;
			
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции


Функция НачалоПериодаОтчета(Знач ДатаПериода, ИдентификаторОбъекта)
	
	Перем Смещение;
	
	ПериодОтчета = Новый Структура;
	ПериодОтчета.Вставить("Продажи", -3);
	ПериодОтчета.Вставить("ПродажиПоМесяцам", -36);
	ПериодОтчета.Вставить("ПоступленияДенежныхСредств", -3);
	ПериодОтчета.Вставить("РасходыДенежныхСредств", -3);
	ПериодОтчета.Вставить("ДоходыРасходы", -3);
	ПериодОтчета.Вставить("ОборотныеСредства", -3);
	ПериодОтчета.Вставить("ДинамикаЗадолженностиПокупателей", -3);
	ПериодОтчета.Вставить("ДинамикаЗадолженностиПоставщикам", -3);
	
	Если ПериодОтчета.Свойство(ИдентификаторОбъекта, Смещение) Тогда
		ДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение);
	КонецЕсли;
	
	Возврат НачалоМесяца(ДатаПериода);
	
КонецФункции

// Устанавливает для отчета настройки по умолчанию.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//
Процедура УстановитьНастройкиПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	
	// Если отчет открывается для непосредственного формирования, то его контекст должен быть задан через параметры.
	СформироватьПриОткрытии =
		ФормаОтчета.Параметры.Свойство("СформироватьПриОткрытии") 
		И ФормаОтчета.Параметры.СформироватьПриОткрытии = Истина;
	
	Если Отчет.Свойство("НачалоПериода") 
		И (Не ЗначениеЗаполнено(Отчет.НачалоПериода) Или Не СформироватьПриОткрытии) Тогда
		Отчет.НачалоПериода = НачалоПериодаОтчета(ОбщегоНазначения.ТекущаяДатаПользователя(), ИдентификаторОбъекта);
	КонецЕсли;
	Если Отчет.Свойство("КонецПериода")
		И (Не ЗначениеЗаполнено(Отчет.КонецПериода) Или Не СформироватьПриОткрытии) Тогда
		Отчет.КонецПериода = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	Если Отчет.Свойство("Организация")
		И (Не ЗначениеЗаполнено(Отчет.Организация) Или Не СформироватьПриОткрытии) Тогда
		Отчет.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	Если Отчет.Свойство("Подразделение") Тогда
		Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			Отчет.Подразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;
	ИначеЕсли Отчет.Свойство("ПодразделениеОрганизации") Тогда
		Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			Отчет.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательБУ") Тогда
		Отчет.ПоказательБУ = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("СальдоНаНачалоДт") Тогда
		Отчет.СальдоНаНачалоДт   = Истина;
		Отчет.СальдоНаНачалоКт   = Истина;
		Отчет.СальдоНаКонецДт    = Истина;
		Отчет.СальдоНаКонецКт    = Истина;
		Отчет.ОборотыЗаПериодДт  = Истина;
		Отчет.ОборотыЗаПериодКт  = Истина;
		Отчет.ОборотыСоСчетамиДт = Истина;
		Отчет.ОборотыСоСчетамиКт = Истина;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		
		Настройки = Новый Структура();
		
		Настройки.Вставить("Показатели",			Истина);
		Настройки.Вставить("Группировка",			Ложь);
		Настройки.Вставить("РазвернутоеСальдо",		Ложь);
		Настройки.Вставить("Отбор",					Истина);
		Настройки.Вставить("ДополнительныеПоля",	Истина);
		Настройки.Вставить("УсловноеОформление",	Истина);
		
		ФормаОтчета.ЗаполнитьНастройкамиПоУмолчанию(Настройки);
		
	КонецЕсли;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("Интервалы") Тогда
		Отчет.Интервалы.Очистить();
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 7;
		НоваяСтрока.Представление = НСтр("ru = 'До 7 дней'");
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 15;
		НоваяСтрока.Представление = НСтр("ru = 'От 8 до 15 дней'");
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 30;
		НоваяСтрока.Представление = НСтр("ru = 'От 16 до 30 дней'");
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 60;
		НоваяСтрока.Представление = НСтр("ru = 'От 31 до 60 дней'");
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 90;
		НоваяСтрока.Представление = НСтр("ru = 'От 61 до 90 дней'");
	КонецЕсли;
	
	Если Отчет.Свойство("Период") Тогда
		Отчет.Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ФормаОтчета.ВыводитьЗаголовок = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ФормаОтчета.ВыводитьДиаграмму = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательПоступление") Тогда
		Отчет.ПоказательПоступление = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательРасход") Тогда
		Отчет.ПоказательРасход = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательЗадолженность") Тогда
		Отчет.ПоказательЗадолженность = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательПросроченнаяЗадолженность") Тогда
		Отчет.ПоказательПросроченнаяЗадолженность = Истина;
	КонецЕсли;
	
	БухгалтерскиеОтчетыПереопределяемый.УстановитьНастройкиПоУмолчанию(ФормаОтчета);
	
КонецПроцедуры

// Устанавливает настройки компоновщика отчета по умолчанию.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//
Процедура УстановитьНастройкиКомпоновщикаПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмещениеДополнительныхПолей(КомпоновщикНастроек) 
	
	РасположениеРеквизитов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов");	
	
	Если РасположениеРеквизитов.Использование = Истина
		И РасположениеРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Заполняет табличную часть "ДополнительныеПоля" отчета из настроек компоновщика.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	ДополнительныеПоля - ТабличнаяЧасть - Табличная часть отчета "Дополнительные поля".
//	Группировка - ТабличнаяЧасть - Табличная часть отчета "Группировка".
//
Процедура ЗаполнитьДополнительныеПоляИзНастроек(КомпоновщикНастроек, ДополнительныеПоля, Группировка) Экспорт
	
	Если Группировка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоля.Очистить();
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И СтрНайти(Строка(ВыбранноеПоле.Поле), ".") > 0 Тогда
			Поле = Строка(ВыбранноеПоле.Поле);
			МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ".");
			
			Если Группировка.НайтиСтроки(Новый Структура("Поле", МассивПолей[0])).Количество() > 0 Тогда
				НоваяСтрока = ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = ВыбранноеПоле.Использование;
				НоваяСтрока.Поле          = Поле;
				НоваяСтрока.Представление = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура, Группировка)
	
	Если Структура.ПоляГруппировки.Элементы.Количество() > 0 Тогда
		Поле = Строка(Структура.ПоляГруппировки.Элементы[0].Поле);
		
		Если (НРег(Поле) <> "подразделение" ИЛИ БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям()) Тогда
			НоваяСтрока = Группировка.Добавить();
			
			НоваяСтрока.Использование  = Структура.Использование;
			НоваяСтрока.Поле           = Поле;
			НоваяСтрока.Представление  = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			Если Не ЗначениеЗаполнено(НоваяСтрока.Представление) Тогда
				НоваяСтрока.Представление = Поле;
			КонецЕсли;
			
			ТипГруппировки = Структура.ПоляГруппировки.Элементы[0].ТипГруппировки;
			Если ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
				НоваяСтрока.ТипГруппировки = 1;
			ИначеЕсли ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
				НоваяСтрока.ТипГруппировки = 2;
			Иначе
				НоваяСтрока.ТипГруппировки = 0;
			КонецЕсли;
		КонецЕсли;
		Если Структура.Структура.Количество() > 0 Тогда
			ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура.Структура[0], Группировка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текстовое представление для организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации, Неопределено - Организация, для которой сформировать представление.
//	ВключатьОбособленныеПодразделения - Булево - Признак включения слов "с обособленными подразделениями" в текст.
//
// Возвращаемое значение:
//	Строка - Представление организации.
//
Функция ПолучитьТекстОрганизация(Организация = Неопределено, ВключатьОбособленныеПодразделения = Ложь) Экспорт
	
	ТекстОрганизации = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		Если ВключатьОбособленныеПодразделения Тогда
			ТекстОрганизации = ПолучитьТекстОбособленныхПодразделений(Организация);
		Иначе
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
			ТекстОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
			Если ПустаяСтрока(ТекстОрганизации) Тогда
				ТекстОрганизации = СведенияОбОрганизации.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОрганизации;
	
КонецФункции

// Возвращает представление организации с обособленными подразделениями.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой сформировать представление.
//
// Возвращаемое значение:
//	Строка - Представление организации.
//
Функция ПолучитьТекстОбособленныхПодразделений(Организация) Экспорт
	
	ТекстОрганизации = "";
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	ТекстОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Если ПустаяСтрока(ТекстОрганизации) Тогда
		ТекстОрганизации = СведенияОбОрганизации.Представление;
	КонецЕсли;
	
	ТекстОрганизации = ТекстОрганизации + " " + НСтр("ru = 'с обособленными подразделениями'");
	
	Возврат ТекстОрганизации;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТА, ОБРАБОТКА РЕЗУЛЬТАТА ОТЧЕТА
// 

// Возвращает сумму выделенных ячеек табличного документа.
//
// Параметры:
//	Результат - ТабличныйДокумент - Табличный документ, содержащий ячейки для суммирования.
//	КэшВыделеннойОбласти - Структура - Содержит ячейки выделенной области.
//
// Возвращаемое значение:
//	Число - Сумма значений ячеек.
//
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Знач Результат, КэшВыделеннойОбласти) Экспорт
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				Попытка
					Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							Сумма = Сумма + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							ЧислоВЯчейке = Число(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)));
							Сумма = Сумма + ЧислоВЯчейке;
						КонецЕсли;
					КонецЕсли;
				Исключение
					// Запись в журнал регистрации не требуется.
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции

// Формирует отчет по переданным параметрам и помещает его результат во временное хранилище.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ИдентификаторОтчета - Строка - Имя отчета, как оно указано в метаданных.
//		* СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема отчета.
//		* НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отчета.
//	АдресХранилища - Строка - Адрес временного хранилища, в которое необходимо поместить результат.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ВыводитьПолностью = Истина;
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	
	Попытка
		ПараметрыИсполненияОтчета = МенеджерОтчета.ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется.
	КонецПопытки;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	ИспользоватьПривилегированныйРежим         = Истина;
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПривилегированныйРежим") Тогда
			ИспользоватьПривилегированныйРежим = ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	ИнициализироватьКомпоновщикНастроекСКД(КомпоновщикНастроек, СхемаКомпоновкиДанных, ПараметрыОтчета.ИдентификаторОтчета);
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодвал    = Истина;
	
	ВыводитьЕдиницуИзмерения = Ложь;
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовок;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьПодвал;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЕдиницуИзмерения") Тогда
		ВыводитьЕдиницуИзмерения = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЕдиницуИзмерения;
	КонецЕсли;

	Результат = Новый ТабличныйДокумент;
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда
		Если ИспользоватьПередКомпоновкойМакета Тогда
			МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
		КонецЕсли;
		
		КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
		
		// Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			// В качестве схемы компоновки будет выступать схема самого отчета.
			// В качестве настроек отчета - текущие настройки отчета.
			// Данные расшифровки будем помещать в ДанныеРасшифровки.
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета);
			КонецЕсли;
			
			// Вызываем событие отчета
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
			
			Если ИспользоватьВнешниеНаборыДанных Тогда
				ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
		
			// Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			// Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			// Перед началом вывода установим привилегированный режим
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
		
			// Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				// Основной цикл вывода отчета
				Пока Истина Цикл
					
					// Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						// Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						МенеджерОтчета.ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, Отказ);
						
						Если Не Отказ Тогда
							// Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				// Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			
			// После окончания процессором вывода отчета, поместим расшифровку во временное хранилище.
			ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект); 
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
			
			// Отключаем привилегированный режим если он использовался
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			// Запись в журнал регистрации не требуется
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован! %1'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, ИнформацияОбОшибке.Описание));
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ВыводитьПодвал Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Результат);
			Иначе
				ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
		Иначе
			ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
		КонецЕсли;
	КонецЕсли;
	
	// Если по каким-либо причинам отчет не был сформирован, адрес расшифровки оставляем прежним,
	// чтобы использовать его повторно при следующем формировании отчета.
	Если Отказ Тогда
		ДанныеРасшифровки = ПараметрыОтчета.ДанныеРасшифровки;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат,ДанныеРасшифровки", Результат, ДанныеРасшифровки), АдресХранилища);
	
КонецПроцедуры

// Выводит заголовок отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация, по которой формируется отчет.
//		* ВключатьОбособленныеПодразделения - Булево - Признак вывод данным по обособленным подразделениям.
//		* ИдентификаторОтчета - Строка - Имя отчета.
//		* НаборПоказателей - Массив - Массив строк с именам выводимых показателей отчета (опционально).
//		* Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Подразделение, по которому выводятся данные (опционально).
//		* ВыводитьЕдиницуИзмерения - Булево - Признак необходимости вывода единицы измерения (опционально).
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = "ОтчетОбъект." + ПараметрыОтчета.ИдентификаторОтчета;	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета].Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.Продажи" Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ТекстПодразделение = "";
	Если ПараметрыОтчета.Свойство("Подразделение") И ЗначениеЗаполнено(ПараметрыОтчета.Подразделение) Тогда
		ТекстПодразделение = НСтр("ru = 'Подразделение Равно'") + " """ + ПараметрыОтчета.Подразделение + """";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение + " " + НСтр("ru = 'И'") + " " + ТекстОтбор;
	ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  "ОтчетОбъект.ОборотноСальдоваяВедомость" 
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
		И ИдентификаторОбъекта <> "ОтчетОбъект.ОтчетПоПроводкам"
		И ИдентификаторОбъекта <> "ОтчетОбъект.Продажи" Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

// Выводит подвал отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ОтветственноеЛицо - Перечисления.ОтветственныеЛицаОрганизаций - Вид ответственного лица.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	// Ответственное лицо
	Если ПараметрыОтчета.Свойство("ОтветственноеЛицо")
		И ЗначениеЗаполнено(ПараметрыОтчета.ОтветственноеЛицо) Тогда
		
		ОбластьПодписи.Параметры.Заполнить(ПолучитьДанныеОтветственногоЛица(ПараметрыОтчета));		
	КонецЕсли;

	Результат.Вывести(ОбластьПодписи);
			
КонецПроцедуры

// Устанавливает макет оформления отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* МакетОформления - Строка - Имя макета оформления.
//	НастройкаКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных) Экспорт

	СтандартнаяОбработка = Истина;
	БухгалтерскиеОтчетыПереопределяемый.УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	МакетОформления	= Неопределено;
	
	Если ПараметрыОтчета.Свойство("МакетОформления", МакетОформления) Тогда
		Если НЕ ЗначениеЗаполнено(МакетОформления) ИЛИ МакетОформления = "МакетОформленияОтчетовЗеленый" Тогда
			МакетОформления = "ОформлениеОтчетовЗеленый";
		ИначеЕсли МакетОформления = "МакетОформленияОтчетовЧерноБелый" Тогда
			МакетОформления = "ОформлениеОтчетовЧерноБелый";
		КонецЕсли;
	Иначе
		МакетОформления = "ОформлениеОтчетовЗеленый";
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", МакетОформления);	
	
КонецПроцедуры

// Выполняет дополнительную обработку результата отчета после его формирования:
//	- настраивает параметры печати;
//	- устанавливает колонтитулы.
//
// Параметры:
//	ИдентификаторОтчета - Строка - Имя отчета.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ОбработкаРезультатаОтчета(ИдентификаторОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
			// Запись в журнал регистрации не требуется.
		КонецПопытки;
	КонецЦикла;
	
	// Удалим строки с высотой равной 1
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс, "ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Результат.АвтоМасштаб = Истина;
	Результат.ПолеСлева   = 5;
	Результат.ПолеСправа  = 5;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
		
	УправлениеКолонтитулами.УстановитьКолонтитулы(
		Результат, Метаданные.Отчеты[ИдентификаторОтчета].Синоним, Пользователи.ТекущийПользователь());

КонецПроцедуры

// Выполняет проверку заполнения настроек отчета перед формированием.
//
// Параметры:
//	ОтчетОбъект - ОтчетОбъект.* - Проверяемый отчет.
//	Отказ - Булево - Истина, если проверка не прошла.
//	Проверки - Структура - Описание проверок. Содержит ключи:
//		* КорректностьПериода - Булево - Признак проверки периода отчета.
//		* ВыборПоказателя - Булево - Признак необходимости проверять выбранные показатели отчета.
//		* СписокВидовСубконто - Булево - Признак проверки количества выбранных видов субконто.
//
Процедура ОбработкаПроверкиЗаполнения(ОтчетОбъект, Отказ, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = СтандартныеПроверкиЗаполнения();
	КонецЕсли;
	
	Если Проверки.Свойство("КорректностьПериода") И Проверки.КорректностьПериода Тогда
		Если ЗначениеЗаполнено(ОтчетОбъект.КонецПериода) И ОтчетОбъект.НачалоПериода > ОтчетОбъект.КонецПериода Тогда
			ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет.НачалоПериода",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Проверки.Свойство("ВыборПоказателя") И Проверки.ВыборПоказателя Тогда
		КоличествоПоказателей = 0;
		ПервыйПоказатель = "";
		НаборПоказателей = Отчеты[ОтчетОбъект.Метаданные().Имя].ПолучитьНаборПоказателей();
		Для Каждого ЭлементНабора Из НаборПоказателей Цикл
			КоличествоПоказателей = КоличествоПоказателей + ОтчетОбъект["Показатель" + ЭлементНабора];
			Если ПустаяСтрока(ПервыйПоказатель) Тогда
				ПервыйПоказатель = "Показатель" + ЭлементНабора;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПоказателей = 0 И НаборПоказателей.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран показатель(и)'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет." + ПервыйПоказатель,, Отказ);
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

// Возвращает признаки проверки отчета перед формирование по умолчанию.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* КорректностьПериода - Булево - Признак проверки периода отчета.
//		* ВыборПоказателя - Булево - Признак необходимости проверять выбранные показатели отчета.
//
Функция СтандартныеПроверкиЗаполнения() Экспорт
	
	Возврат Новый Структура("КорректностьПериода, ВыборПоказателя", Истина, Истина);

КонецФункции

// Возвращает копию описания макета схемы компоновки данных.
// 
// Параметры:
//	ОписаниеМакета - ОписаниеМакетаСхемыКомпоновкиДанных - Исходное описание.
//	ФормаЗаписи - Строка - Форма записи описания макета в XML.
//
// Возвращаемое значение:
//	ОписаниеМакетаСхемыКомпоновкиДанных - Копия исходного описания макета.
//
Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

// Вызывается из обработчика события "ПриСохраненииПользовательскихНастроекНаСервере" формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Сохраняемые настройки.
//	СохранятьТолькоРеквизиты - Булево - Признак сохранения только значений реквизитов отчета без настроек СКД.
//
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, СохранятьТолькоРеквизиты = Ложь) Экспорт
	
	ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	КонецЕсли;

	// Сохранение реквизитов отчета
	ДополнительныеСвойства = Новый Структура;
	Для Каждого Реквизит Из ОтчетМетаданные.Реквизиты Цикл
		Если Реквизит.Имя <> "РежимРасшифровки"
			И Реквизит.Имя <> "СписокСформированныхЛистов" Тогда
			ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетМетаданные.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя].Выгрузить());
	КонецЦикла;
	
	РеквизитыФормы = ФормаОтчета.ПолучитьРеквизиты();
	// Сохранение реквизитов формы
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ФормаОтчета.ВыводитьЗаголовок);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьПодвал") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьПодвал", ФормаОтчета.ВыводитьПодвал);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЕдиницуИзмерения") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьЕдиницуИзмерения", ФормаОтчета.ВыводитьЕдиницуИзмерения);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", ФормаОтчета.ВыводитьДиаграмму);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "МакетОформления") Тогда
		ДополнительныеСвойства.Вставить("МакетОформления", ФормаОтчета.МакетОформления);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "СкрыватьНастройкиПриФормированииОтчета") Тогда
		ДополнительныеСвойства.Вставить("СкрыватьНастройкиПриФормированииОтчета", ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета);
	КонецЕсли;
	
	// Сохраним вид периода	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВидПериода") Тогда
		ДополнительныеСвойства.Вставить("ВидПериода", ФормаОтчета.ВидПериода);
	КонецЕсли;
	
	Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
		Если Настройки.ДополнительныеСвойства.Свойство("ПанельНастроекСкрытаАвтоматически")
			И Настройки.ДополнительныеСвойства.ПанельНастроекСкрытаАвтоматически = Истина Тогда
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", Истина);
		Иначе
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

Процедура УстановитьОрганизацию(Форма)
	
	// Определяем основную организацию
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		// Если основная организация задана и это не та организация с которой хочет открыться отчет
		// подставляем основную организацию, и устанавливаем настройки по умолчанию.
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И ОсновнаяОрганизация <> Форма.Отчет.Организация Тогда
			Форма.Отчет.Организация = ОсновнаяОрганизация;
			РеквизитыФормы = РеквизитыФормы(Форма);
			Если РеквизитыФормы.Свойство("ОрганизацияИзменилась") Тогда
				Форма.ОрганизацияИзменилась = Истина;
			КонецЕсли;
			
			// Реквизит ВключатьОбособленныеПодразделения должен быть только у отчетов, которые поддерживают выбор варианта:
			// выводить по всей организации или по организации без обособленных подразделений.
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Отчет, "ВключатьОбособленныеПодразделения") Тогда
				Форма.Отчет.ВключатьОбособленныеПодразделения = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Форма.Отчет.Организация = ОсновнаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Сохраняемые настройки.
//	ЗагружатьТолькоРеквизиты - Булево - Признак загрузки только значений реквизитов отчета без настроек СКД.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, ЗагружатьТолькоРеквизиты = Ложь) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	// Для отчетов, использующих варианты отчетов, при инициализации отчета
	// происходит загрузка варианта и пользовательских настроек поэтому,
	// перед тем как загружать настройки, проверим режим расшифровки.
	РежимРасшифровки = Ложь;
	Если ФормаОтчета.Параметры.Свойство("КлючВарианта") И ЗначениеЗаполнено(ФормаОтчета.Параметры.КлючВарианта) Тогда
		Если Отчет.Свойство("РежимРасшифровки") И ФормаОтчета.Отчет.РежимРасшифровки Тогда
			РежимРасшифровки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Если настройки не заданы или отчет в режиме расшифровки, загружаем настройки по умолчанию.
	Если Настройки = Неопределено ИЛИ РежимРасшифровки Тогда
		// Установка настроек по умолчанию.
		УстановитьНастройкиПоУмолчанию(ФормаОтчета);
	Иначе 
		// Восстановление сохраненных настроек.
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				// Восстановление реквизитов отчета.
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Загрузить(ЭлементСтруктуры.Значение);
					ИначеЕсли ЭлементСтруктуры.Ключ = "Подразделение"
						И Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
						Продолжить;
					ИначеЕсли ЭлементСтруктуры.Ключ <> "РежимРасшифровки" Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
				
				// Восстановление реквизитов формы.
				Если ЭлементСтруктуры.Ключ = "ВыводитьЗаголовок" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЗаголовок") Тогда
					ФормаОтчета.ВыводитьЗаголовок = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодвал" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьПодвал") Тогда
					ФормаОтчета.ВыводитьПодвал = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьЕдиницуИзмерения" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЕдиницуИзмерения") Тогда
					ФормаОтчета.ВыводитьЕдиницуИзмерения = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьДиаграмму" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьДиаграмму") Тогда
					ФормаОтчета.ВыводитьДиаграмму = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "МакетОформления" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "МакетОформления") Тогда
					ФормаОтчета.МакетОформления = ЭлементСтруктуры.Значение;
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
						ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
						"МакетОформления", ФормаОтчета.МакетОформления);
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВидПериода" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВидПериода") Тогда
					ФормаОтчета.ВидПериода = ЭлементСтруктуры.Значение;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СкрыватьНастройкиПриФормированииОтчета" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "СкрыватьНастройкиПриФормированииОтчета") Тогда
					ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета = ЭлементСтруктуры.Значение;		
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "ВидимостьПанелиНастроек" И НЕ ЕстьЭлементФормы(ФормаОтчета, "РазделыОтчета") Тогда
					Если ЕстьЭлементФормы(ФормаОтчета, "ПанельНастроек") Тогда
						БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
							ФормаОтчета.Элементы.ПанельНастроек, ДополнительныеСвойства.ВидимостьПанелиНастроек);
					КонецЕсли;
					Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
 						ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость = ДополнительныеСвойства.ВидимостьПанелиНастроек;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ДополнительныеСвойства.Свойство("ВыводитьДиаграмму") И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьДиаграмму") Тогда
				
				ФормаОтчета.ВыводитьДиаграмму = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек.
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные.
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек.
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;
		
		Если Отчет.Свойство("Организация") Тогда
			УстановитьОрганизацию(ФормаОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "МинимальныйВидПериода") Тогда
		МинимальныйВидПериода = ФормаОтчета.МинимальныйВидПериода;
	Иначе
		МинимальныйВидПериода = Неопределено;
	КонецЕсли;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		Если ФормаОтчета.Отчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Счет.Наименование")).Количество() = 0 Тогда
			НоваяСтрока = ФормаОтчета.Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Представление = НСтр("ru = 'Выводить наименование счета'");
			НоваяСтрока.Поле          = "Счет.Наименование";
			НоваяСтрока.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВидПериода") И НЕ ЗначениеЗаполнено(ФормаОтчета.ВидПериода) Тогда
		ФормаОтчета.ВидПериода = ВыборПериодаКлиентСервер.ПолучитьВидПериода(
			ФормаОтчета.Отчет.НачалоПериода, ФормаОтчета.Отчет.КонецПериода, МинимальныйВидПериода);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ПолеОрганизация") Тогда
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			ФормаОтчета.ПолеОрганизация, ФормаОтчета.Отчет.Организация, ФормаОтчета.Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;
		
КонецПроцедуры

// Выполняет инициализацию компоновщика настроек в форме отчета по переданным настройкам.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	Настройки - НастройкиКомпоновкиДанных - Настройки, которые необходимо загрузить в компоновщик.
//
Процедура ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(ФормаОтчета, Настройки) Экспорт

	// Для отчетов использующих варианты отчетов, при инициализации отчета
	// происходит загрузка варианта и пользовательских настроек поэтому,
	// перед тем как загружать настройки, проверим режим расшифровки.
	РежимРасшифровки = Ложь;
	Отчет = ФормаОтчета.Отчет;
	Если Отчет.Свойство("РежимРасшифровки") И ФормаОтчета.Отчет.РежимРасшифровки Тогда
		РежимРасшифровки = Истина;
	КонецЕсли;
	
	// Если настройки не заданы или отчет в режиме расшифровки, загружаем настройки по умолчанию.
	Если Настройки = Неопределено Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиКомпоновщикаПоУмолчанию(ФормаОтчета);
	Иначе 
		ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Перенос пользовательских настроек в основные
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
		
		// Очистка пользовательских настроек
		ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает доступное поле по полю компоновки.
//
// Параметры:
//	ПолеКомпоновкиДанных - Строка, ПолеКомпоновкиДанных - Искомое поле.
//	ОбластьПоиска - КомпоновщикНастроекКомпоновкиДанных, ДанныеРасшифровкиКомпоновкиДанных, 
//		НастройкиВложенногоОбъектаКомпоновкиДанных - Коллекция полей для поиска.
//
// Возвращаемое значение:
//	ДоступноеПолеКомпоновкиДанных - Найденное поле или Неопределено.
//
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

// Возвращает массив полей, по которым следует расшифровать отчет.
//
// Параметры:
//	Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных, ДанныеРасшифровкиКомпоновкиДанных - Значения текущей расшифровки.
//	ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Коллекция данных расшифровки отчета.
//	ТекущийОтчет - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек отчета.
//	ВключатьРесурсы - Булево - Признак включения в результат полей-ресурсов.
//
// Возвращаемое значение:
//	Массив - Массив значений типа ЗначениеПоляРасшифровкиКомпоновкиДанных.
//
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции


// Отменяет выполнение фоновых заданий по списку идентификаторов.
//
// Параметры:
//	ИдентификаторыОтменяемыхЗаданий - Массив - Содержит идентификаторы фоновых заданий.
//
Процедура ОтменитьВыполнениеЗаданий(ИдентификаторыОтменяемыхЗаданий) Экспорт
	
	Для каждого ИдентификаторЗадания Из ИдентификаторыОтменяемыхЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует компоновщик настроек отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	ОрганизацияИзменилась - Булево - При вызове инициализации из-за изменения организации необходимо передать Истина.
//	ИмяВариантаНастроек - Строка - Имя варианта настроек.
//
Процедура ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась = Ложь, ИмяВариантаНастроек = "") Экспорт
	
	Форма.КомпоновщикИнициализирован = Истина;
	
	Форма.Элементы.НастройкиОтчета.Видимость = Истина;
	
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
	
	Схема = Отчеты[ИмяОтчета].ПолучитьМакет("СхемаКомпоновкиДанных");
	
	Если ПустаяСтрока(ИмяВариантаНастроек) Тогда
		ИмяВариантаНастроек = ИмяОтчета;
	КонецЕсли;
	
	ВариантНастроек = Схема.ВариантыНастроек.Найти(ИмяВариантаНастроек);
	
	Если ВариантНастроек <> Неопределено Тогда
		Настройки = ВариантНастроек.Настройки;
	Иначе
		Настройки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	Форма.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, Форма.УникальныйИдентификатор);
	ИнициализироватьКомпоновщикНастроекСКД(Форма.Отчет.КомпоновщикНастроек, Форма.СхемаКомпоновкиДанных, ИмяОтчета);
	
	ТекущиеПользовательскиеНастройки = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(Форма.ПользовательскиеНастройки) Тогда
		ТекущиеПользовательскиеНастройки = ПолучитьИзВременногоХранилища(Форма.ПользовательскиеНастройки);
	КонецЕсли;
	
	ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(Форма, ТекущиеПользовательскиеНастройки);
	
	Если ОрганизацияИзменилась Тогда
		БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьКомпоновщикНастроекСКД(КомпоновщикНастроек, СхемаКомпоновкиДанных, ИмяОтчета)

    Попытка
        КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    Исключение
        ИмяСобытияЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru = 'Отчеты.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
            ИмяОтчета);
            
        ТекстПредставленияОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации(
            ИмяСобытияЖурнала,
            УровеньЖурналаРегистрации.Ошибка,
            ,
            ,
            ТекстПредставленияОшибки);
        ВызватьИсключение;
    КонецПопытки;

КонецПроцедуры

Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура();
	
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		
		РеквизитыФормы.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	
	Возврат РеквизитыФормы;
	
КонецФункции


// Возвращает признак использования подразделений.
//
// Возвращаемое значение:
//	Булево - Истина, если подразделения используются, иначе Ложь.
//
Функция ИспользоватьПодразделения() Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения();
	
КонецФункции

// Возвращает описание типов со справочниками, имеющими владельца организацию.
//
// Возвращаемое значение:
//	ОписаниеТипов - Содержит типы справочников, имеющими владельца организацию.
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
КонецФункции

// Возвращает список имен макетов оформления отчета.
//
// Возвращаемое значение:
//	СписокЗначений - Содержит строки с именами макетов оформления.
//
Функция ПолучитьСписокМакетовОформления() Экспорт
	
	СписокМакетовОформления = Новый СписокЗначений;
	Для Каждого ОбщийМакет Из Метаданные.ОбщиеМакеты Цикл
		Если ОбщийМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.МакетОформленияКомпоновкиДанных Тогда
			СписокМакетовОформления.Добавить(ОбщийМакет.Имя, ОбщийМакет.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	СписокМакетовОформления.Добавить(НСтр("ru = 'Основной'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Яркий'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Море'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Арктика'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Зеленый'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Античный'"));
	
	Возврат СписокМакетовОформления;
	
КонецФункции

Процедура ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак использования направлений деятельности.
//
// Возвращаемое значение:
//	Булево - Истина, если направления деятельности используются, иначе Ложь.
//
Функция ИспользоватьНаправленияДеятельности() Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ИспользоватьНаправленияДеятельности();
	
КонецФункции

#КонецОбласти
