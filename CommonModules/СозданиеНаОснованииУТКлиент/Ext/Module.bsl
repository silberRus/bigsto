
#Область СлужебныеПроцедурыИФункции

#Область ЗаказыНаПередачуВПроизводство


#КонецОбласти

#Область ЗаказыПоставщикам

Процедура СозданиеЗаказовПоставщикамНаОсновании(ДокументОснование, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	СозданиеНаОснованииУТВызовСервера.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	ОткрытьФорму(
		"Документ.ЗаказПоставщику.Форма.СозданиеЗаказовПоставщикамНаОсновании", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

#КонецОбласти

#Область СчетНаОплату

Процедура СоздатьСчетНаОплату(МассивСсылок, ПараметрыВыполнения) Экспорт
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(ПараметрКоманды);
	ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

Процедура СоздатьСчетНаОплатуРеализацияАкт(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);

	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;

	ПараметрыОткрытияФормы = СозданиеНаОснованииУТВызовСервера.СчетНаОплатуРеализацияАктПолучитьПараметрыОткрытияФормы(ПараметрКоманды);
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru='%Документ% оформлена по нескольким заказам. Необходимо ввести счет на оплату на основании заказов.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ПараметрКоманды);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

Процедура СоздатьСчетНаОплатуПоДоговору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если НЕ СозданиеНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	

КонецПроцедуры

Процедура СоздатьСчетНаОплатуПредоплатаПоДоговору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если Не СозданиеНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры


#КонецОбласти

#Область ДокументыНаОснованииЗаказа

Процедура АктВыполненныхРаботСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.АктВыполненныхРаботПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия <> Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	КонецЕсли;

КонецПроцедуры

Процедура ВнутреннееПотреблениеТоваровСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ВнутреннееПотреблениеТоваровПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриобретениеТоваровУслугСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПриобретениеТоваровУслугПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

Процедура СборкаТоваровСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.СборкаТоваровПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.СборкаТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РеализацияТоваровУслугСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.РеализацияТоваровУслугСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.РеализацияТоваровУслугПараметрыОткрытияФормы(МассивСсылок);
	
	Если НЕ ПараметрыОткрытия = Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПеремещениеТоваровСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПеремещениеТоваровПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.ПеремещениеТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Документооборот

Процедура ИнтеграцияС1СДокументооборотСоздатьПисьмо(МассивСсылок, ПараметрыВыполнения) Экспорт

	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИнтеграцияС1СДокументооборотСоздатьПисьмоПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
		
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(ОписаниеОповещения);
	
КонецПроцедуры 

Процедура ИнтеграцияС1СДокументооборотСоздатьПисьмоПроверитьПодключениеЗавершение(Результат, ОбъектИС) Экспорт
	
	Если Результат = Истина Тогда // авторизация успешна
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИнтеграцияС1СДокументооборотСоздатьПисьмоПоискСвязанногоОбъектаЗавершение", ЭтотОбъект, ОбъектИС);
		ИнтеграцияС1СДокументооборотКлиент.НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не настроено подключение к 1С:Документообороту или сервис
			|1С:Документооборота недоступен. Обратитесь к администратору.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнтеграцияС1СДокументооборотСоздатьПисьмоПоискСвязанногоОбъектаЗавершение(Результат, ОбъектИС) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Предмет", Результат);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", Параметры);
	
КонецПроцедуры

Процедура ИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс(МассивСсылок, ПараметрыВыполнения) Экспорт

	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИнтеграцияС1СДокументооборотСоздатьБизнесПроцессПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
		
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(ОписаниеОповещения);
	
КонецПроцедуры 

Процедура ИнтеграцияС1СДокументооборотСоздатьБизнесПроцессПроверитьПодключениеЗавершение(Результат, ОбъектИС) Экспорт
	
	Если Результат = Истина Тогда // авторизация успешна
		
		ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцесс(ОбъектИС);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не настроено подключение к 1С:Документообороту или сервис
			|1С:Документооборота недоступен. Обратитесь к администратору.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СогласованиеПродажи

Процедура СоздатьНовоеСогласованиеЗаказаКлиента(МассивСсылок, ПараметрыВыполнения) Экспорт

	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание = МассивСсылок;
	Иначе
		Основание = МассивСсылок[0];
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.СогласованиеПродажи.ФормаОбъекта",
	Новый Структура("Основание", Основание),
	,
	,);

КонецПроцедуры 

#КонецОбласти 

#Область СогласованиеЗакупки

Процедура СоздатьНовоеСогласованиеЗаказаПоставщику(МассивСсылок, ПараметрыВыполнения) Экспорт

	ОткрытьФорму("БизнесПроцесс.СогласованиеЗакупки.ФормаОбъекта",
	Новый Структура("Основание",МассивСсылок),
	,
	,);

КонецПроцедуры 

#КонецОбласти 


Процедура СозданиеСвязанныхОбъектов(МассивСсылок, ПараметрыВыполнения) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	ПараметрыВыполненияКоманды.Источник = ПараметрыВыполнения.Форма;
	
	ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок(
		МассивСсылок,
		ПараметрыВыполненияКоманды,
		ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов());

КонецПроцедуры 

Процедура ОпределитьСправочноеРазмещениеПоЯчейкам(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументПриемки",ПараметрКоманды);
	ОткрытьФорму("Обработка.СправочноеРазмещениеНоменклатуры.Форма.Форма",Параметры,ПараметрыВыполненияКоманды.Источник,ПараметрКоманды);

КонецПроцедуры

Процедура ПередачаВЭксплуатациюНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВЭксплуатацию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

Процедура СписаниеНаРасходыАктивыНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры



Процедура СоздатьНаОснованииРасходныйОрдерНаТовары(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ОчиститьСообщения();
	
	МассивРаспоряжений = Новый Массив;
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		МассивРаспоряжений.Добавить(МассивСсылок);
	Иначе
		МассивРаспоряжений = МассивСсылок;
	КонецЕсли;
		
	ОткрытьФорму("Обработка.УправлениеОтгрузкой.Форма.ФормаНастроекСозданияОрдеров",Новый Структура("МассивРаспоряжений",МассивРаспоряжений),,,,,);	
	
КонецПроцедуры

Процедура АктНаПередачуПрав(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	
	ПараметрыОснования = Новый Структура;
	
	ПараметрыОснования.Вставить("ДокументОснование",   ПараметрКоманды);
	ПараметрыОснования.Вставить("ЗаполнятьПоОстаткам", Истина);
	ПараметрыОснования.Вставить("ВариантОформленияПродажи",
	ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав"));
	
	ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ПараметрыОснования));

КонецПроцедуры

Процедура СоздатьЗаказНаВнутреннееПотребление(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаВнутреннееПотребление");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры 

Процедура СоздатьЗаказНаПеремещение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаПеремещение");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииЗаказаКлиентаПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииЗаказаКлиентаПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения);
	
КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииПриобретенияТоваровУслугПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииПриобретенияТоваровУслугПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения);
	
КонецПроцедуры


Процедура СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если Не ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладовПослеВыбораСклада",
			СозданиеНаОснованииУТКлиент,
			ПараметрыВыполнения);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ПараметрыВыполнения.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(ДополнительныеПараметры.МассивСсылок) = Тип("Массив")
		И ДополнительныеПараметры.МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание.Основание = ДополнительныеПараметры.МассивСсылок;
	Иначе
		Основание.Основание = ДополнительныеПараметры.МассивСсылок[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада",СозданиеНаОснованииУТКлиент, ПараметрыВыполнения);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ПараметрыВыполнения.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоддержаниеЗапасов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	СозданиеНаОснованииУТВызовСервера.УстановитьПоддержаниеЗапасов(ПараметрКоманды);
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры

Процедура НастройкаПоддержанияЗапасов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры

Процедура ПомощникОформленияСкладскихАктов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		РезультатПроверки = СозданиеНаОснованииУТВызовСервера.ПроверитьСтатусПересчетаНаСервере(ПараметрКоманды);
		Если Не РезультатПроверки.МожноОткрытьПомощник Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.СообщениеПользователю);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникОформленияСкладскихАктов.Форма", 
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры

Процедура КорректировочныйСчетФактура(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	РеквизитыДляОбработки = СозданиеНаОснованииУТВызовСервера.СтруктураРеквизитовДляОбработки(ПараметрКоманды);
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ТипЗнч(ПараметрКоманды)=Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ТипСчетФактуры = "Выданный";
	ИначеЕсли ТипЗнч(ПараметрКоманды)=Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ТипСчетФактуры = "Полученный";
	ИначеЕсли ТипЗнч(ПараметрКоманды)=Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
		ТипСчетФактуры = "ПолученныйНалоговыйАгент";
	КонецЕсли;
	
	Если РеквизитыДляОбработки.Исправление Тогда
		
		ЗначенияЗаполнения.Вставить("Исправление", Истина);
		ЗначенияЗаполнения.Вставить("СчетФактураОснование", ПараметрКоманды);
		
	ИначеЕсли РеквизитыДляОбработки.Корректировочный Тогда
		
		Основания = РеквизитыДляОбработки.Основания;
		
		Если Основания.Количество() = 1 Тогда
			ЗначенияЗаполнения.Вставить("ДокументОснование", Основания[0]);
		Иначе
			ЗначенияЗаполнения.Вставить("ДокументОснование", Основания);
			ЗначенияЗаполнения.Вставить("Дата", РеквизитыДляОбработки.ДатаКорректировки);
		КонецЕсли;
		
		ЗначенияЗаполнения.Вставить("Корректировочный", Истина);
		
	Иначе
		
		Если ТипСчетФактуры="Выданный" тогда
			ТекстОперации = НСтр("ru = 'Корректировка реализации'");
		Иначе
			ТекстОперации = НСтр("ru = 'Корректировка поступления'");
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Для выбранного документа уже введен корректировочный счет-фактура.
		|Чтобы ввести новую корректировку, необходимо создать документ ""%Операция%"".'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Операция%",ТекстОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.СчетФактура"+ТипСчетФактуры+".ФормаОбъекта",
			ПараметрыФормы,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

Процедура ИсправительныйСчетФактураВыданныйАванс(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Исправление", Истина);
	ЗначенияЗаполнения.Вставить("СчетФактураОснование", ПараметрКоманды);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.СчетФактураВыданныйАванс.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

Процедура ИсправительныйСчетФактураПолученныйАванс(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Исправление", Истина);
	ЗначенияЗаполнения.Вставить("СчетФактураОснование", ПараметрКоманды);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.СчетФактураПолученныйАванс.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

Процедура ИсправлениеПрочегоНачисленияНДС(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.ЗаписьКнигиПродаж.Форма.ФормаДокумента",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры






#Область КорректировкаНазначения

Процедура ОткрытьМастерСнятияРезерва(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормыЗаполнения = Новый Структура();
	ПараметрыФормыЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв"));
	ПараметрыФормыЗаполнения.Вставить("Мастер", Истина);
	ПараметрыФормыЗаполнения.Вставить("Заказ", ПараметрыВыполнения.ОбъектыОснований[0]);
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта", ПараметрыФормыЗаполнения, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

Процедура ОткрытьМастерРезервирования(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормыЗаполнения = Новый Структура();
	ПараметрыФормыЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать"));
	ПараметрыФормыЗаполнения.Вставить("Мастер", Истина);
	ПараметрыФормыЗаполнения.Вставить("Заказ", ПараметрыВыполнения.ОбъектыОснований[0]);
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта", ПараметрыФормыЗаполнения, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

#КонецОбласти

Процедура СоздатьРасходныйКассовыйОрдер(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		МассивСсылок,
		"РасходныйКассовыйОрдер");
	
КонецПроцедуры

Процедура СоздатьСписаниеБезналичныхДС(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		МассивСсылок,
		"СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

Процедура ПоручениеЭкспедитору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ОткрытьФорму("Документ.ПоручениеЭкспедитору.Форма.ФормаДокумента", Новый Структура("Основание", МассивСсылок));
	
КонецПроцедуры

Процедура СписаниеБезналичныхДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок[0]);
	
	ОткрытьФорму(
		"Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры

Процедура ПоступлениеБезналичныхДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок[0]);
	
	ОткрытьФорму(
		"Документ.ПоступлениеБезналичныхДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры

Процедура ЗаявкаНаРасходованиеДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок[0]);
	
	ОткрытьФорму(
		"Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры


Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения)
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада",
			СозданиеНаОснованииУТКлиент, ПараметрыВыполнения);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ПараметрыВыполнения.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		 Или ТипЗнч(ДополнительныеПараметры.МассивСсылок) = Тип("Массив")
			 И ДополнительныеПараметры.МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание.Основание = ДополнительныеПараметры.МассивСсылок;
	Иначе
		Основание.Основание = ДополнительныеПараметры.МассивСсылок[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ЗаказНаПеремещение.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		 Или ТипЗнч(ДополнительныеПараметры.МассивСсылок) = Тип("Массив")
			 И ДополнительныеПараметры.МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание.Основание = ДополнительныеПараметры.МассивСсылок;
	Иначе
		Основание.Основание = ДополнительныеПараметры.МассивСсылок[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры



Функция СоздатьАктОРасхожденияхПослеПриемкиНаОснованииПриобретенияТоваровУслуг(Обработчик, ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Обработчик);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.АктОРасхожденияхПослеПриемкиПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОткрытьФорму("Документ.АктОРасхожденияхПослеПриемки.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);
	
КонецФункции

#КонецОбласти
