// Конвертация УП2.4.3 от 10.05.2018 19:39:43
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПередКонвертациейУТКАУП(КомпонентыОбмена);
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	ПослеКонвертацииУТКАУП(КомпонентыОбмена);
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	ПередОтложеннымЗаполнениемУТКАУП(КомпонентыОбмена);
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АктВыполненныхРабот(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АннулированиеПС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВводОстатков_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВЗ_КорректировкаДолга_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВнутреннееПотреблениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратПС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтКлиента(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаявкаНаРасходДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСмена_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализации(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачисленияКредитовИДепозитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеИзлишковТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетБанкаПоЭквайрингу_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионераОСписании(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссияМеждуОрганизациямиОСписании_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПоКомиссииМеждуОрганизациями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныйКассовыйОрдер(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПрочееОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходныйКассовыйОрдер(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияУслугПрочихАктивов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеБезналичныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеЗадолженности_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплату_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданныйАванс_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураКомиссионеру_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураКомитента_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученныйАванс_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Спр_ГруппыАналитическогоУчетаНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Спр_ГруппыФинансовогоУчетаРасчетов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВариантыКомплектацииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыПодарочныхСертификатов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ГруппыФинУчетаНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКредитовИДепозитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкПрод_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ОтветственныеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_УпаковкиЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФИОФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_СтатьиДоходов_Отправка(ПравилаОбработкиДанных);
	
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_АвансовыйОтчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АннулированиеПС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВнутреннееПотреблениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратПС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаявкаНаПереводДСВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризационнаяОпись_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСменаЗакрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСменаОткрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачисленияКредитовИДепозитов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиБезналичныхДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиЗадолжПодотчетников_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиКредитовЗаймов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНаличныхДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетн_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчСПокупателямиАвансы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчСПокупателямиДолги_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчСПоставщикамиДолги_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТараПереданная_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТараПринятая_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомис_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомис_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПоступлениеИзКассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПрочееОприходованиеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыдачаВКассуККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗП_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗПНаЛС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеНедостачТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплату_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Спр_ГруппыАналитическогоУчетаНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Спр_ГруппыФинансовогоУчетаРасчетов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ГруппаНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкПрод_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ОтветственныеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Группа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДоходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Файлы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет
Процедура ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_АвансовыйОтчет_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчетИзСтруктуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.Свойство("ВыгружатьУдалениеПоСсылке") Тогда
			ИспользованиеПКО.Документ_АвансовыйОтчет_Отправка = Ложь;
		Иначе
			ИспользованиеПКО.Удалить("Документ_АвансовыйОтчет_Отправка");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Удалить("Документ_АвансовыйОтчет_Отправка");
	ИспользованиеПКО.Удалить("Документ_АвансовыйОтчетИзСтруктуры_Отправка");
	
	ПравилоАвансовыйОтчет = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_АвансовыйОтчет", "Имя");
	Если ПравилоАвансовыйОтчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрочиеРасходы           = ДанныеИБ.ПрочиеРасходы.Выгрузить();
	ОплатаПоставщикам       = ДанныеИБ.ОплатаПоставщикам.Выгрузить();
	ДополнительныеРеквизиты = ДанныеИБ.ДополнительныеРеквизиты.Выгрузить();
	
	Если Не ДанныеИБ.Мультивалютный Тогда
		ДанныеИБСтруктура = Новый Структура("Ссылка, Номер, Дата, Организация, Подразделение, Валюта, 
		|КоличествоДокументов, КоличествоЛистов, Комментарий, НазначениеАванса, ПодотчетноеЛицо, ДокументОснование");
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		
		ДанныеИБСтруктура.Вставить("Ответственный",           ДанныеИБ.Автор);
		ДанныеИБСтруктура.Вставить("ПрочиеРасходы",           ПрочиеРасходы);
		ДанныеИБСтруктура.Вставить("ОплатаПоставщикам",       ОплатаПоставщикам);
		ДанныеИБСтруктура.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
			ДанныеИБСтруктура, 
			ПравилоАвансовыйОтчет);
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	АвансовыйОтчетПрочиеРасходы.Валюта КАК Валюта
		|ПОМЕСТИТЬ ВТ_ВалютыДокумента
		|ИЗ
		|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК АвансовыйОтчетПрочиеРасходы
		|ГДЕ
		|	АвансовыйОтчетПрочиеРасходы.Ссылка = &Ссылка
		|	И НЕ АвансовыйОтчетПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АвансовыйОтчетОплатаПоставщикам.Валюта
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
		|ГДЕ
		|	АвансовыйОтчетОплатаПоставщикам.Ссылка = &Ссылка
		|	И НЕ АвансовыйОтчетОплатаПоставщикам.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВалютыДокумента.Валюта КАК Валюта,
		|	ЕСТЬNULL(ПОДСТРОКА(Валюты.Наименование, 1, 2), """") КАК ПрефиксВалюты
		|ИЗ
		|	ВТ_ВалютыДокумента КАК ВТ_ВалютыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		|		ПО (Валюты.Ссылка = ВТ_ВалютыДокумента.Валюта)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВалютыДокумента.Валюта,
		|	ЕСТЬNULL(ПОДСТРОКА(Валюты.Наименование, 1, 2), """")");
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
		ВалютыДокумента = Запрос.Выполнить().Выгрузить();
		ВалютыДокумента.Индексы.Добавить("Валюта");
		
		ВалютаРеглУчета   = ВалютаРегламентированногоУчета(КомпонентыОбмена);
		ВыгружатьУдаление = (ВалютыДокумента.Найти(ВалютаРеглУчета, "Валюта") = Неопределено);
		
		Для Каждого ВалютаДокумента Из ВалютыДокумента Цикл
			
			ОтборПоВалюте = Новый Структура("Валюта", ВалютаДокумента.Валюта);
			
			ПрочиеРасходыПоВалюте     = ПрочиеРасходы.Скопировать(ОтборПоВалюте);
			ОплатаПоставщикамПоВалюте = ОплатаПоставщикам.Скопировать(ОтборПоВалюте);
			
			ДанныеИБСтруктура = Новый Структура("Номер, Дата, Организация, Подразделение,
			|КоличествоДокументов, КоличествоЛистов, Комментарий, НазначениеАванса, ПодотчетноеЛицо, ДокументОснование");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			
			Если ВалютаДокумента.Валюта = ВалютаРеглУчета Тогда
				ДанныеИБСтруктура.Вставить("Ссылка", ДанныеИБ.Ссылка);
			Иначе
				НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ДанныеИБ.Номер, Истина, Истина);
				СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
				ПрефиксНомера = СтандартныеПрефиксы + ВалютаДокумента.ПрефиксВалюты;
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
				Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
					ДанныеИБСтруктура.Номер = ПрефиксНомера
						+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
				КонецЕсли;
			КонецЕсли;
			
			ДанныеИБСтруктура.Вставить("Ответственный",           ДанныеИБ.Автор);
			ДанныеИБСтруктура.Вставить("Валюта",                  ВалютаДокумента.Валюта);
			ДанныеИБСтруктура.Вставить("ПрочиеРасходы",           ПрочиеРасходыПоВалюте);
			ДанныеИБСтруктура.Вставить("ОплатаПоставщикам",       ОплатаПоставщикамПоВалюте);
			ДанныеИБСтруктура.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
			
			Если ВыгружатьУдаление Тогда
				ДанныеИБСтруктура.Вставить("ВыгружатьУдалениеПоСсылке", Истина);
				ДанныеИБСтруктура.Вставить("Ссылка", ДанныеИБ.Ссылка);
				ВыгружатьУдаление = Ложь;
			КонецЕсли;
			
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБСтруктура, 
				ПравилоАвансовыйОтчет);
		КонецЦикла;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_АктВыполненныхРабот
Процедура ДобавитьПОД_Документ_АктВыполненныхРабот(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АктВыполненныхРабот";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АктВыполненныхРабот;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_АктВыполненныхРабот_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АктВыполненныхРабот_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АктВыполненныхРаботРТУ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_АктВыполненныхРабот_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.АктВыполненныхРабот") Тогда
		ИспользованиеПКО.Документ_АктВыполненныхРабот_Отправка = Истина;
		ИспользованиеПКО.Удалить("Документ_АктВыполненныхРаботРТУ_Отправка");
	Иначе
		ИспользованиеПКО.Документ_АктВыполненныхРаботРТУ_Отправка = Истина;
		ИспользованиеПКО.Удалить("Документ_АктВыполненныхРабот_Отправка");
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_АннулированиеПС_Отправка
Процедура ДобавитьПОД_Документ_АннулированиеПС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АннулированиеПС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АннулированиеПодарочныхСертификатов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АннулированиеПС_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВводОстатков_Отправка
Процедура ДобавитьПОД_Документ_ВводОстатков_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВводОстатков_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВводОстатков;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВводОстатков_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДС_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиЗадолжПодотчетников_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиКредитовЗаймов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДС_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиПерерасходаПодотчетн_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчСПокупателямиАвансы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПереданныхНаКомис_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомис_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчСПокупателямиДолги_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчСПоставщикамиДолги_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПереданная_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПринятая_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВводОстатков_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах Тогда
		ИспользованиеПКО.Документ_ОстаткиБезналичныхДС_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников Тогда
		ИспользованиеПКО.Документ_ОстаткиЗадолжПодотчетников_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов Тогда
		ИспользованиеПКО.Документ_ОстаткиКредитовЗаймов_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВКассах Тогда
		ИспользованиеПКО.Документ_ОстаткиНаличныхДС_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств Тогда
		ИспользованиеПКО.Документ_ОстаткиПерерасходаПодотчетн_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов Тогда
		ИспользованиеПКО.Документ_ОстаткиРасчСПокупателямиАвансы_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов Тогда
		ИспользованиеПКО.Документ_ОстаткиРасчСПокупателямиДолги_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		ИспользованиеПКО.Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками Тогда
		ИспользованиеПКО.Документ_ОстаткиРасчСПоставщикамиДолги_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		ИспользованиеПКО.Документ_ОстаткиСобственныхТМЦ_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам Тогда
		ИспользованиеПКО.Документ_ОстаткиТараПереданная_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
		ИспользованиеПКО.Документ_ОстаткиТараПринятая_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию Тогда
		ИспользованиеПКО.Документ_ОстаткиТоваровПереданныхНаКомис_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию Тогда
		ИспользованиеПКО.Документ_ОстаткиТоваровПринятыхНаКомис_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВЗ_КорректировкаДолга_Отправка
Процедура ДобавитьПОД_Документ_ВЗ_КорректировкаДолга_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВЗ_КорректировкаДолга_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВзаимозачетЗадолженности;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВЗ_КорректировкаДолга_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВЗ_НашаОрганизация");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВЗ_ОрганизацияКредитор");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВЗ_ОрганизацияДебитор");
КонецПроцедуры

Процедура ПОД_Документ_ВЗ_КорректировкаДолга_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользоватьОтборПоОрганизациям = КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям;
	ВыгружатьУпрОрганизацию = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию;
	УзелСписокОрганизаций   = КомпонентыОбмена.ПараметрыКонвертации.Организации;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ОрганизацияКредитор)
		И ТипЗнч(ДанныеИБ.ОрганизацияКредитор) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("ВзаимозачетСУчастиемДвухОрганизаций", Истина);
	
		ИспользованиеПКО.Документ_ВЗ_НашаОрганизация = Ложь;
		
		Если ИспользоватьОтборПоОрганизациям Тогда
			Если УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Организация) <> Неопределено Тогда
				ИспользованиеПКО.Документ_ВЗ_ОрганизацияДебитор  = Истина;
			Иначе
				ИспользованиеПКО.Документ_ВЗ_ОрганизацияДебитор  = Ложь;
			КонецЕсли;
			Если УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.ОрганизацияКредитор) <> Неопределено Тогда
				ИспользованиеПКО.Документ_ВЗ_ОрганизацияКредитор = Истина;
			Иначе
				ИспользованиеПКО.Документ_ВЗ_ОрганизацияКредитор = Ложь;
			КонецЕсли;
		Иначе
			ИспользованиеПКО.Документ_ВЗ_ОрганизацияДебитор  = ВыгружатьУпрОрганизацию
				Или ДанныеИБ.Организация <> УправленческаяОрганизация();
			ИспользованиеПКО.Документ_ВЗ_ОрганизацияКредитор = ВыгружатьУпрОрганизацию
				Или ДанныеИБ.ОрганизацияКредитор <> УправленческаяОрганизация();
		КонецЕсли;
	Иначе
		Если ИспользоватьОтборПоОрганизациям Тогда
			Если УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Организация) <> Неопределено Тогда
				ИспользованиеПКО.Документ_ВЗ_НашаОрганизация = Истина;
			Иначе
				ИспользованиеПКО.Документ_ВЗ_НашаОрганизация = Ложь;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеИБ.КонтрагентКредитор) = Тип("СправочникСсылка.Организации")
				И УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.КонтрагентКредитор) <> Неопределено Тогда
				ИспользованиеПКО.Документ_ВЗ_ОрганизацияКредитор = Истина;
			Иначе
				ИспользованиеПКО.Документ_ВЗ_ОрганизацияКредитор = Ложь;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеИБ.КонтрагентДебитор) = Тип("СправочникСсылка.Организации")
				И УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.КонтрагентДебитор) <> Неопределено Тогда
				ИспользованиеПКО.Документ_ВЗ_ОрганизацияДебитор = Истина;
			Иначе
				ИспользованиеПКО.Документ_ВЗ_ОрганизацияДебитор = Ложь;
			КонецЕсли;
		Иначе
			ИспользованиеПКО.Документ_ВЗ_НашаОрганизация = ВыгружатьУпрОрганизацию 
				Или ДанныеИБ.Организация <> УправленческаяОрганизация();
				
			ТипОрганизацияКлиент = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент;
				
			ИспользованиеПКО.Документ_ВЗ_ОрганизацияКредитор = (ДанныеИБ.ТипКредитора = ТипОрганизацияКлиент
				Или ДанныеИБ.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик)
				И (ВыгружатьУпрОрганизацию Или ДанныеИБ.КонтрагентКредитор <> УправленческаяОрганизация());
				
			ИспользованиеПКО.Документ_ВЗ_ОрганизацияДебитор = (ДанныеИБ.ТипДебитора = ТипОрганизацияКлиент
				Или ДанныеИБ.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик)
				И (ВыгружатьУпрОрганизацию Или ДанныеИБ.КонтрагентДебитор <> УправленческаяОрганизация());
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнесениеДСВКассуККМ_Отправка
Процедура ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнесениеДСВКассуККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВнесениеДенежныхСредствВКассуККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВнесениеДСВКассуККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнесениеДСВКассуККМ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВнесениеДСВКассуККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутреннееПотреблениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ВнутреннееПотреблениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнутреннееПотреблениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВнутреннееПотреблениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутреннееПотребление_ВСписание_Отпр");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутреннееПотребление_ВПроизводство_Отпр");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра");
КонецПроцедуры

Процедура ПОД_Документ_ВнутреннееПотреблениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ВПТ_ВидыЗапасов.Количество) КАК Количество,
		|	ВПТ_ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВПТ_ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВПТ_ВидыЗапасов.СтатьяРасходов КАК СтатьяРасходов,
		|	ВПТ_Шапка.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ВПТ_ВидыЗапасов.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(Аналитика.Номенклатура.ГруппаАналитическогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка))
		|		ИНАЧЕ ВПТ_ВидыЗапасов.ГруппаПродукции
		|	КОНЕЦ КАК ГруппаАналитическогоУчетаНоменклатуры,
		|	ВПТ_Товары.СчетУчета КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА ВПТ_ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ПОМЕСТИТЬ ТоварыВсе
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров КАК ВПТ_Шапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ВПТ_ВидыЗапасов
		|		ПО (ВПТ_ВидыЗапасов.Ссылка = ВПТ_Шапка.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО (ВПТ_ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВПТ_Товары
		|		ПО (ВПТ_Товары.Ссылка = ВПТ_Шапка.Ссылка)
		|			И (ВПТ_Товары.ИдентификаторСтроки = ВПТ_ВидыЗапасов.ИдентификаторСтроки)
		|ГДЕ
		|	ВПТ_Шапка.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Номенклатура,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения,
		|	ВПТ_ВидыЗапасов.НомерГТД.Код,
		|	ВПТ_ВидыЗапасов.НомерГТД.СтранаПроисхождения,
		|	ВПТ_ВидыЗапасов.СтатьяРасходов,
		|	ВПТ_Шапка.Подразделение,
		|	ВЫБОР
		|		КОГДА ВПТ_ВидыЗапасов.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(Аналитика.Номенклатура.ГруппаАналитическогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка))
		|		ИНАЧЕ ВПТ_ВидыЗапасов.ГруппаПродукции
		|	КОНЕЦ,
		|	ВПТ_Товары.СчетУчета,
		|	ВЫБОР
		|		КОГДА ВПТ_ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипЗапасов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.НомерГТД,
		|	Товары.СтранаПроисхождения,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(7)) КАК СчетЗатрат,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяЗатрат,
		|	Товары.СтатьяРасходов,
		|	Товары.Подразделение,
		|	Товары.ГруппаАналитическогоУчетаНоменклатуры,
		|	Товары.ТипЗапасов,
		|	Товары.СчетУчета
		|ИЗ
		|	ТоварыВсе КАК Товары
		|ГДЕ
		|	Товары.ТипЗапасов = ""СобственныеТовары""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.НомерГТД,
		|	Товары.СтранаПроисхождения,
		|	Товары.ТипЗапасов
		|ИЗ
		|	ТоварыВсе КАК Товары
		|ГДЕ
		|	Товары.ТипЗапасов = ""КомиссионныеТовары""");
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("ЭтоУТ", ЭтоУТ());
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		СобственныеТовары = РезультатЗапроса[1].Выгрузить();
		СобственныеТовары.Колонки.Добавить("ПодразделениеЗатрат");
		
		КомиссионныеТовары = РезультатЗапроса[2].Выгрузить();
		
		Для Каждого СтрокаСобственныеТовары Из СобственныеТовары Цикл
			Если ЗначениеЗаполнено(СтрокаСобственныеТовары.Подразделение) Тогда
				СтруктураПодразделение = Новый Структура;
				ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаСобственныеТовары.Подразделение);
				СтрокаСобственныеТовары.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СтрокаСобственныеТовары.ГруппаАналитическогоУчетаНоменклатуры)
				И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ГруппыАналитическогоУчетаНоменклатуры") Тогда
				СтруктураАналитики = Новый Структура;
				СтруктураАналитики.Вставить("Значение", СтрокаСобственныеТовары.ГруппаАналитическогоУчетаНоменклатуры);
				СтруктураАналитики.Вставить("ИмяПКО", ?(СтрокаСобственныеТовары.ГруппаАналитическогоУчетаНоменклатуры.ЭтоГруппа,
					"Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа", "Спр_ГруппыАналитическогоУчетаНоменклатуры"));
				СтрокаСобственныеТовары.ГруппаАналитическогоУчетаНоменклатуры = СтруктураАналитики;
			КонецЕсли;
			
			СтрокаСобственныеТовары.СчетЗатрат = СчетУчетаПоСтатье(СтрокаСобственныеТовары.СтатьяРасходов,
				ДанныеИБ.Организация, ДанныеИБ.Подразделение, СтрокаСобственныеТовары.СчетУчета);
				
			Если ТипЗнч(СтрокаСобственныеТовары.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				СтрокаСобственныеТовары.СтатьяЗатрат = СтрокаСобственныеТовары.СтатьяРасходов;
			КонецЕсли;
		КонецЦикла;
		
		Если СобственныеТовары.Количество() > 0 Тогда
			ДанныеИБ.ДополнительныеСвойства.Вставить("СобственныеТовары", СобственныеТовары);
			ИспользованиеПКО.Документ_ВнутреннееПотребление_ВПроизводство_Отпр = Истина;
		КонецЕсли;
		
		Если КомиссионныеТовары.Количество() > 0 Тогда    
			ДанныеИБ.ДополнительныеСвойства.Вставить("КомиссионныеТовары", КомиссионныеТовары);
			ИспользованиеПКО.Документ_ВнутреннееПотребление_ВСписание_Отпр = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		ИспользованиеПКО.Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра = Истина;
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов") Тогда
		ИспользованиеПКО.Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр = ИспользованиеПКО.Документ_ВнутреннееПотребление_ВСписание_Отпр;
		ИспользованиеПКО.Удалить("Документ_ВнутреннееПотребление_ВСписание_Отпр");
	Иначе
		ИспользованиеПКО.Удалить("Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр");
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПС_Отправка
Процедура ДобавитьПОД_Документ_ВозвратПС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратПС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратПодарочныхСертификатов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратПС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратПС_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратПС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровМеждуОрганизациями_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровМеждуОрганизациями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратМеждуОрганизациями_Поставщику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратМеждуОрганизациями_ОтПокупателя_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		
		УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
		
		ВыгружатьВозвратПоставщику   = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Организация) <> Неопределено;
		ВыгружатьВозвратОтПокупателя = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.ОрганизацияПолучатель) <> Неопределено;
		
	Иначе
		
		ВыгружатьВозвратПоставщику = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.Организация <> УправленческаяОрганизация();
			
		ВыгружатьВозвратОтПокупателя = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.ОрганизацияПолучатель <> УправленческаяОрганизация();
		
	КонецЕсли;
	
	ИспользованиеПКО.ВозвратМеждуОрганизациями_Поставщику_Отправка   = ВыгружатьВозвратПоставщику;
	ИспользованиеПКО.ВозвратМеждуОрганизациями_ОтПокупателя_Отправка = ВыгружатьВозвратОтПокупателя;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтКлиента
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтКлиента(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтКлиента";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтКлиента_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Провека на наличие записей в табличной части Товары.
	// Если табличная часть пустая, то документ не выгружается, иначе он не пройдет проверку по схеме.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И (Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		ИЛИ Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыемкаДСИзКассыККМ_Отправка
Процедура ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыемкаДСИзКассыККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВыемкаДСИзКассыККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыемкаДСИзКассыККМ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВыемкаДСИзКассыККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказКлиента_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказКлиента;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ОграничениеНулевойСуммыТоваров = (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2"));
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьНеСоответствующиеФормату
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО Товары.Номенклатура = НоменклатураСправочник.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Отменено = ЛОЖЬ
	|	И Товары.Сумма = 0
	|	И (НоменклатураСправочник.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ИЛИ НоменклатураСправочник.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				И &Ограничение)");
	Запрос.УстановитьПараметр("Ссылка",      ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Ограничение", ОграничениеНулевойСуммыТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИспользованиеПКО.Документ_ЗаказКлиента_Отправка = РезультатЗапроса.Пустой();
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ЗаказПоставщику") Тогда
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		Возврат;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДС_Отправка
Процедура ДобавитьПОД_Документ_ЗаявкаНаРасходДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаявкаНаРасходДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаявкаНаРасходДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаПереводДСВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСКонвВалюты_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаявкаНаРасходДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаПереводДСВБюджет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаПереводДСВБюджет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств 
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2") Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСПрочее_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСПрочее_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСПрочее_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСПрочее_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСКонвВалюты_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСПрочее_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризационнаяОпись_Отправка
Процедура ДобавитьПОД_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризационнаяОпись_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризационнаяОпись;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризационнаяОпись_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ИнвентаризационнаяОпись_Отправка = Ложь;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_ИнвентаризационнаяОпись_Отправка = Ложь;
		Возврат;
	КонецЕсли;	
	
	ДанныеДокумента = Документы.ИнвентаризационнаяОпись.ДанныеИнвентаризации(ДанныеИБ.Ссылка);
	
	Если ДанныеДокумента = Неопределено Тогда
		ИспользованиеПКО.Документ_ИнвентаризационнаяОпись_Отправка = Ложь;
	Иначе
		ТаблицаТоваров = ДанныеДокумента.РезультатПоТабличнойЧасти.Выгрузить();
		ТаблицаТоваров.Колонки.КоличествоПоУчету.Имя = "КоличествоУчет";
		ТаблицаТоваров.Колонки.КоличествоФактическое.Имя = "Количество";
		ТаблицаТоваров.Колонки.СуммаПоУчету.Имя = "СуммаУчет";
		ТаблицаТоваров.Колонки.СуммаФактическая.Имя = "Сумма";
		ТаблицаТоваров.Колонки.Добавить("Штрихкод");
		ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
		ТаблицаТоваров.Колонки.Добавить("ЦенаЗаУпаковку");
		ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок");
		ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковокУчет");
		ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
		ТаблицаТоваров.Колонки.Добавить("СчетУчета");
	
		ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДокумента");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	
		Если ДанныеДокумента.РезультатКурсВалюты <> Неопределено Тогда
			КурсВалюты = ДанныеДокумента.РезультатКурсВалюты.Выбрать();
			Если КурсВалюты.Следующий() Тогда
				КоэффициентПересчета = КурсВалюты.КоэффициентПересчета;
			Иначе
				КоэффициентПересчета = 1;
			КонецЕсли;
		Иначе
			КоэффициентПересчета = 1;
		КонецЕсли;
	
		НомерСтроки = 0;
		ЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"), "ЕдиницаИзмерения");
		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы.НомерСтрокиДокумента = НомерСтроки;
			СтрокаТаблицы.ЕдиницаИзмерения     = ЕдиницыИзмерения[СтрокаТаблицы.Номенклатура];
			СтрокаТаблицы.Цена                 = Окр(СтрокаТаблицы.Цена * КоэффициентПересчета, 2);
			СтрокаТаблицы.СуммаУчет            = Окр(СтрокаТаблицы.СуммаУчет * КоэффициентПересчета, 2);
			СтрокаТаблицы.Сумма                = Окр(СтрокаТаблицы.Сумма * КоэффициентПересчета, 2);
			СтрокаТаблицы.ТипЗапасов           = Перечисления.ТипыЗапасов.Товар;
		КонецЦикла;
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", ТаблицаТоваров);
		
		ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КассоваяСмена_Отправка
Процедура ДобавитьПОД_Документ_КассоваяСмена_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КассоваяСмена_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КассоваяСмена;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаОткрытие_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаЗакрытие_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	//Получим КассуККМ
	КассаККМ = ДанныеИБ.КассаККМ;
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(ДанныеИБ.ФискальноеУстройство);
		КассаККМ = КассаККМФискальноеУстройство.КассаККМ;
		
		Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
			ИспользованиеПКО.Очистить();
			
			ШаблонПредупреждения = НСтр("ru = 'Документ %1 не может быть выгружен,
			|т.к. не обнаружена КассаККМ, соответствующая оборудованию: 
			|%2'");
		
			ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ДанныеИБ.Ссылка, ДанныеИБ.ФискальноеУстройство);
		
			КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями; 
			ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(
				КомпонентыОбмена, ТекстПредупреждения,,	Ложь,,,);
			
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("КассаККМ", КассаККМ);
	
	Если ДанныеИБ.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		ИспользованиеПКО.Документ_КассоваяСменаЗакрытие_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступления_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПриобретения;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Оприходование");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Списание");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_СписаниеЗапасов");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		
	ИспользованиеПКО.Документ_КорректировкаПоступления_Отправка = Истина;
	
	Если ДанныеИБ.Расхождения.Количество() = 0 Тогда
		Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов") Тогда
			ИспользованиеПКО.Документ_КорректировкаПоступления_СписаниеЗапасов = ИспользованиеПКО.Документ_КорректировкаПоступления_Списание;
			ИспользованиеПКО.Удалить("Документ_КорректировкаПоступления_Списание");
		Иначе
			ИспользованиеПКО.Удалить("Документ_КорректировкаПоступления_СписаниеЗапасов");
		КонецЕсли;
	
		Возврат;
	КонецЕсли;
	
	// Списание, Оприходование
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Док.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	СУММА(Док.Количество) КАК Количество,
	|	СУММА(Док.СуммаСНДС - Док.СуммаНДС) КАК Сумма,
	|	Док.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ ТоварыКоличественныхРасхождений
	|ИЗ
	|	Документ.КорректировкаПриобретения.Расхождения КАК Док
	|ГДЕ
	|	Док.Ссылка = &КорректировкаПоступления
	|	И (Док.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ Док.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Док.Ссылка.ДокументОснование КАК Документ.ПриобретениеТоваровУслуг).ВернутьМногооборотнуюТару, ЛОЖЬ))
	|	И Док.ВариантОтражения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокПоступлений.ОтразитьНаПрочихДоходах), ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокПоступлений.СписатьНаРасходы))
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.НомерГТД,
	|	ВЫБОР
	|		КОГДА Док.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ТипЗапасов КАК ТипЗапасов,
	|	Товары.НомерГТД.Код КАК НомерГТД,
	|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	ТоварыКоличественныхРасхождений КАК Товары
	|ГДЕ
	|	Товары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ТипЗапасов КАК ТипЗапасов,
	|	Товары.НомерГТД.Код КАК НомерГТД,
	|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	-Товары.Количество КАК Количество,
	|	-Товары.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	ТоварыКоличественныхРасхождений КАК Товары
	|ГДЕ
	|	Товары.Количество < 0");
	Запрос.УстановитьПараметр("КорректировкаПоступления", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТоварыКСписаниюВБухгалтерии      = РезультатЗапроса[1].Выгрузить();
	ТоварыКОприходованиюВБухгалтерии = РезультатЗапроса[2].Выгрузить();
	
	Если ТоварыКСписаниюВБухгалтерии.Количество() > 0 Тогда
		ЗаполнитьЦенуСписаниеОприходование(ТоварыКСписаниюВБухгалтерии, КомпонентыОбмена);
		
		ИспользованиеПКО.Документ_КорректировкаПоступления_Списание = Истина;
		ДанныеИБ.ДополнительныеСвойства.Вставить("ТоварыКСписанию", ТоварыКСписаниюВБухгалтерии);
	КонецЕсли;
	
	Если ТоварыКОприходованиюВБухгалтерии.Количество() > 0 Тогда
		ЗаполнитьЦенуСписаниеОприходование(ТоварыКОприходованиюВБухгалтерии, КомпонентыОбмена);
		
		ИспользованиеПКО.Документ_КорректировкаПоступления_Оприходование = Истина;
		ДанныеИБ.ДополнительныеСвойства.Вставить("ТоварыКОприходованию", ТоварыКОприходованиюВБухгалтерии);
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов") Тогда
		ИспользованиеПКО.Документ_КорректировкаПоступления_СписаниеЗапасов = ИспользованиеПКО.Документ_КорректировкаПоступления_Списание;
		ИспользованиеПКО.Удалить("Документ_КорректировкаПоступления_Списание");
	Иначе
		ИспользованиеПКО.Удалить("Документ_КорректировкаПоступления_СписаниеЗапасов");
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации
Процедура ДобавитьПОД_Документ_КорректировкаРеализации(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализации";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КорректировкаРеализации_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Списание");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_СписаниеЗапасов");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Оприходование");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаРеализации_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	ИспользованиеПКО.Документ_КорректировкаРеализации_Отправка = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВидыЗапасовСписание.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ВидыЗапасовСписание.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	СУММА(ВидыЗапасовСписание.Количество) КАК Количество,
	|	СУММА(ВидыЗапасовСписание.СуммаСНДС - ВидыЗапасовСписание.СуммаНДС) КАК Сумма
	|ПОМЕСТИТЬ ТоварыКОприходованию
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовСписание КАК ВидыЗапасовСписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО (АналитикаНоменклатуры.Ссылка = ВидыЗапасовСписание.АналитикаУчетаНоменклатуры)
	|ГДЕ
	|	ВидыЗапасовСписание.Ссылка = &КорректировкаРеализации
	|	И ВидыЗапасовСписание.НаДоходыРасходы
	|	И (АналитикаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ АналитикаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ВидыЗапасовСписание.Ссылка.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ВернутьМногооборотнуюТару, ЛОЖЬ))
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаНоменклатуры.Номенклатура,
	|	ВидыЗапасовСписание.НомерГТД,
	|	ВЫБОР
	|		КОГДА ВидыЗапасовСписание.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВидыЗапасовОприходование.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ВидыЗапасовОприходование.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	СУММА(ВидыЗапасовОприходование.Количество) КАК Количество,
	|	СУММА(ВидыЗапасовОприходование.СуммаСНДС - ВидыЗапасовОприходование.СуммаНДС) КАК Сумма
	|ПОМЕСТИТЬ ТоварыКСписанию
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовОприходование КАК ВидыЗапасовОприходование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО (АналитикаНоменклатуры.Ссылка = ВидыЗапасовОприходование.АналитикаУчетаНоменклатуры)
	|ГДЕ
	|	ВидыЗапасовОприходование.Ссылка = &КорректировкаРеализации
	|	И ВидыЗапасовОприходование.НаДоходыРасходы
	|	И (АналитикаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ АналитикаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ВидыЗапасовОприходование.Ссылка.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ВернутьМногооборотнуюТару, ЛОЖЬ))
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаНоменклатуры.Номенклатура,
	|	ВидыЗапасовОприходование.НомерГТД,
	|	ВЫБОР
	|		КОГДА ВидыЗапасовОприходование.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОприходованию.Номенклатура КАК Номенклатура,
	|	ТоварыКОприходованию.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыКОприходованию.НомерГТД.Код КАК НомерГТД,
	|	ТоварыКОприходованию.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТоварыКОприходованию.ТипЗапасов КАК ТипЗапасов,
	|	ТоварыКОприходованию.Количество КАК Количество,
	|	ТоварыКОприходованию.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	ТоварыКОприходованию КАК ТоварыКОприходованию
	|ГДЕ
	|	ТоварыКОприходованию.Количество <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКСписанию.Номенклатура КАК Номенклатура,
	|	ТоварыКСписанию.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыКСписанию.НомерГТД.Код КАК НомерГТД,
	|	ТоварыКСписанию.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТоварыКСписанию.ТипЗапасов КАК ТипЗапасов,
	|	ТоварыКСписанию.Количество КАК Количество,
	|	ТоварыКСписанию.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	ТоварыКСписанию КАК ТоварыКСписанию
	|ГДЕ
	|	ТоварыКСписанию.Количество <> 0");
	Запрос.УстановитьПараметр("КорректировкаРеализации", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТоварыКОприходованиюВБухгалтерии = РезультатЗапроса[2].Выгрузить();
	ТоварыКСписаниюВБухгалтерии      = РезультатЗапроса[3].Выгрузить();
	
	Если ТоварыКОприходованиюВБухгалтерии.Количество() > 0 Тогда
		ЗаполнитьЦенуСписаниеОприходование(ТоварыКОприходованиюВБухгалтерии, КомпонентыОбмена);
		
		ИспользованиеПКО.Документ_КорректировкаРеализации_Оприходование = Истина;
		ДанныеИБ.ДополнительныеСвойства.Вставить("ТоварыКОприходованиюВБухгалтерии", ТоварыКОприходованиюВБухгалтерии);
	КонецЕсли;
	
	Если ТоварыКСписаниюВБухгалтерии.Количество() > 0 Тогда
		ЗаполнитьЦенуСписаниеОприходование(ТоварыКСписаниюВБухгалтерии, КомпонентыОбмена);
		
		ИспользованиеПКО.Документ_КорректировкаРеализации_Списание = Истина;
		ДанныеИБ.ДополнительныеСвойства.Вставить("ТоварыКСписаниюВБухгалтерии", ТоварыКСписаниюВБухгалтерии);
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов") Тогда
		ИспользованиеПКО.Документ_КорректировкаРеализации_СписаниеЗапасов = ИспользованиеПКО.Документ_КорректировкаРеализации_Списание;
		ИспользованиеПКО.Удалить("Документ_КорректировкаРеализации_Списание");
	Иначе
		ИспользованиеПКО.Удалить("Документ_КорректировкаРеализации_СписаниеЗапасов");
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_НачисленияКредитовИДепозитов_Отправка
Процедура ДобавитьПОД_Документ_НачисленияКредитовИДепозитов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_НачисленияКредитовИДепозитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.НачисленияКредитовИДепозитов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_НачисленияКредитовИДепозитов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачисленияКредитовИДепозитов_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_НачисленияКредитовИДепозитов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте_Отправка
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОперацияПоПлатежнойКарте;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Очистить();
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
	
		ИспользованиеПКО.Вставить("Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка", Ложь);
		ИспользованиеПКО.Вставить("Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка", Ложь);
	
		Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
			ИспользованиеПКО.Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ИспользованиеПКО.Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка = Истина;
		КонецЕсли;
		
	Иначе
		ИспользованиеПКО.Вставить("Документ_ОперацияПоПлатежнойКарте_Отправка", Истина);
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеИзлишковТоваров
Процедура ДобавитьПОД_Документ_ОприходованиеИзлишковТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеИзлишковТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетБанкаПоЭквайрингу_Отправка
Процедура ДобавитьПОД_Документ_ОтчетБанкаПоЭквайрингу_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетБанкаПоЭквайрингу_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетБанкаПоОперациямЭквайринга;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионера;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионера_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионераОСписании
Процедура ДобавитьПОД_Документ_ОтчетКомиссионераОСписании(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионераОСписании";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионераОСписании;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионераОСписании_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссияМеждуОрганизациямиОСписании_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомиссияМеждуОрганизациямиОСписании_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссияМеждуОрганизациямиОСписании_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетКомиссияМеждуОрганизациямиОСписании_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссияОрганизСписаниеКомиссионер");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссияОрганизСписаниеКомитент");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетКомиссияМеждуОрганизациямиОСписании_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		
		УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
		
		ВыгружатьОтчетКомиссионера = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Организация) <> Неопределено;
		ВыгружатьОтчетКомитенту	   = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Комиссионер) <> Неопределено;
		
	Иначе
		
		ВыгружатьОтчетКомиссионера = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.Организация <> УправленческаяОрганизация();
			
		ВыгружатьОтчетКомитенту = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.Комиссионер <> УправленческаяОрганизация();
		
	КонецЕсли;
	
	ИспользованиеПКО.Документ_ОтчетКомиссияОрганизСписаниеКомитент    = ВыгружатьОтчетКомитенту;
	ИспользованиеПКО.Документ_ОтчетКомиссияОрганизСписаниеКомиссионер = ВыгружатьОтчетКомиссионера;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитенту;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитентуОСписании_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитентуОСписании_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитентуОСписании;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитентуОСписании_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Товары.Номенклатура КАК Номенклатура,
	                      |	Товары.Номенклатура.Наименование КАК НоменклатураНаименование,
	                      |	Товары.Количество КАК Количество,
	                      |	Товары.Цена КАК Цена,
	                      |	Товары.Сумма КАК Сумма,
	                      |	Товары.СтавкаНДС КАК СтавкаНДС,
	                      |	Товары.СуммаНДС КАК СуммаНДС,
	                      |	Товары.НомерСтроки КАК НомерСтроки,
	                      |	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	                      |ПОМЕСТИТЬ ТаблицаТовары
	                      |ИЗ
	                      |	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	                      |ГДЕ
	                      |	Товары.Ссылка = &Ссылка
	                      |	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	                      |	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	                      |	ТаблицаТовары.Номенклатура КАК Номенклатура
	                      |ПОМЕСТИТЬ ВТ_ПорядокСтрокТаблицыТовары
	                      |ИЗ
	                      |	ТаблицаТовары КАК ТаблицаТовары
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТаблицаТовары.Номенклатура
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	                      |	ВидыЗапасов.Количество КАК Количество,
	                      |	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	                      |	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
	                      |	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
	                      |	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	                      |	ВидыЗапасов.ВидЗапасов.Контрагент КАК Поставщик,
	                      |	ВЫБОР
	                      |		КОГДА ВЫБОР
	                      |				КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	                      |					ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
	                      |				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
	                      |			КОНЕЦ < 0.01
	                      |			ТОГДА 0.01
	                      |		ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
	                      |					КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	                      |						ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
	                      |					ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
	                      |				КОНЕЦ КАК ЧИСЛО(15, 2))
	                      |	КОНЕЦ КАК Цена,
	                      |	ВЫБОР
	                      |		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	                      |			ТОГДА ВидыЗапасов.СуммаСНДС
	                      |		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
	                      |	КОНЕЦ КАК Сумма,
	                      |	ВЫБОР
	                      |		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	                      |			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	                      |		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	                      |	КОНЕЦ КАК ТипЗапасов
	                      |ПОМЕСТИТЬ ВидыЗапасов
	                      |ИЗ
	                      |	Документ.ОтчетОРозничныхПродажах.ВидыЗапасов КАК ВидыЗапасов
	                      |ГДЕ
	                      |	ВидыЗапасов.Ссылка = &Ссылка
	                      |	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	                      |	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВидыЗапасов.Номенклатура КАК Номенклатура,
	                      |	ВидыЗапасов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |	ВидыЗапасов.Цена КАК Цена,
	                      |	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	                      |	ВидыЗапасов.НомерГТД КАК НомерГТД,
	                      |	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
	                      |	ВидыЗапасов.Поставщик КАК Поставщик,
	                      |	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
	                      |	ВТ_ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
	                      |	СУММА(ВидыЗапасов.Количество) КАК Количество,
	                      |	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
	                      |	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС
	                      |ИЗ
	                      |	ВидыЗапасов КАК ВидыЗапасов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокСтрокТаблицыТовары КАК ВТ_ПорядокСтрокТаблицыТовары
	                      |		ПО ВидыЗапасов.Номенклатура = ВТ_ПорядокСтрокТаблицыТовары.Номенклатура
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВидыЗапасов.Номенклатура,
	                      |	ВидыЗапасов.Цена,
	                      |	ВидыЗапасов.СтавкаНДС,
	                      |	ВидыЗапасов.НомерГТД,
	                      |	ВидыЗапасов.СтранаПроисхождения,
	                      |	ВидыЗапасов.ТипЗапасов,
	                      |	ВидыЗапасов.Поставщик,
	                      |	ВидыЗапасов.Номенклатура.ЕдиницаИзмерения,
	                      |	ВТ_ПорядокСтрокТаблицыТовары.НомерСтроки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОплатаПлатежнымиКартами.Сумма КАК СуммаОплаты,
	                      |	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерКарты,
	                      |	""Неопределено"" КАК ВидКарты,
	                      |	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.БанковскийСчет КАК БанковскийСчетОрганизации,
	                      |	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Код КАК Номер,
	                      |	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Ссылка КАК Ссылка,
	                      |	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайер КАК Эквайрер
	                      |ИЗ
	                      |	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	                      |ГДЕ
	                      |	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ПодарочныеСертификаты.Сумма) КАК Сумма,
	                      |	ПодарочныеСертификаты.ПодарочныйСертификат.Код КАК СерийныйНомер,
	                      |	ПодарочныеСертификаты.ПодарочныйСертификат.Штрихкод КАК Штрихкод,
	                      |	ПодарочныеСертификаты.ПодарочныйСертификат.МагнитныйКод КАК МагнитныйКод,
	                      |	ПодарочныеСертификаты.ПодарочныйСертификат.Владелец КАК ВидПодарочногоСертификатаСсылка
	                      |ИЗ
	                      |	Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	                      |ГДЕ
	                      |	ПодарочныеСертификаты.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПодарочныеСертификаты.ПодарочныйСертификат.Код,
	                      |	ПодарочныеСертификаты.ПодарочныйСертификат.Штрихкод,
	                      |	ПодарочныеСертификаты.ПодарочныйСертификат.МагнитныйКод,
	                      |	ПодарочныеСертификаты.ПодарочныйСертификат.Владелец
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Товары.Номенклатура КАК Номенклатура,
	                      |	Товары.Номенклатура.Наименование КАК Содержание,
	                      |	Товары.Количество КАК Количество,
	                      |	Товары.Цена КАК Цена,
	                      |	Товары.Сумма КАК Сумма,
	                      |	Товары.СтавкаНДС КАК СтавкаНДС,
	                      |	Товары.Номенклатура.Принципал КАК ПринципалСсылка,
	                      |	ВЫБОР
	                      |		КОГДА Товары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме)
	                      |				ИЛИ Товары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером)
	                      |			ТОГДА ""Агентские""
	                      |		ИНАЧЕ ""Собственные""
	                      |	КОНЕЦ КАК ТипУслуги,
	                      |	Товары.СуммаНДС КАК СуммаНДС
	                      |ИЗ
	                      |	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	                      |ГДЕ
	                      |	Товары.Ссылка = &Ссылка
	                      |	И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	                      |			ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РеализацияПодарочныхСертификатов.Ссылка КАК Ссылка,
	                      |	РеализацияПодарочныхСертификатов.КассоваяСмена КАК КассоваяСмена
	                      |ПОМЕСТИТЬ ВТ_РеализацияПС
	                      |ИЗ
	                      |	Документ.РеализацияПодарочныхСертификатов.ПодарочныеСертификаты КАК ТЧПодарочныеСертификаты
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияПодарочныхСертификатов КАК РеализацияПодарочныхСертификатов
	                      |		ПО ТЧПодарочныеСертификаты.Ссылка = РеализацияПодарочныхСертификатов.Ссылка
	                      |ГДЕ
	                      |	РеализацияПодарочныхСертификатов.КассоваяСмена = &КассоваяСмена
	                      |	И РеализацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РеализацияПодарочныхСертификатов.Ссылка,
	                      |	РеализацияПодарочныхСертификатов.КассоваяСмена
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РеализацияПодарочныхСертификатов.Сумма КАК Сумма,
	                      |	РеализацияПодарочныхСертификатов.ПодарочныйСертификат.Штрихкод КАК Штрихкод,
	                      |	РеализацияПодарочныхСертификатов.ПодарочныйСертификат.МагнитныйКод КАК МагнитныйКод,
	                      |	РеализацияПодарочныхСертификатов.ПодарочныйСертификат.Код КАК СерийныйНомер,
	                      |	ВидыПодарочныхСертификатов.ЧастичнаяОплата КАК РазрешенаЧастичнаяОплата,
	                      |	ВидыПодарочныхСертификатов.Ссылка КАК ВидПодарочногоСертификата,
	                      |	ЕСТЬNULL(ВЫБОР
	                      |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	                      |				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕНЬ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	                      |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	                      |				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, НЕДЕЛЯ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	                      |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	                      |				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, МЕСЯЦ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	                      |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	                      |				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, КВАРТАЛ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	                      |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	                      |				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ГОД, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	                      |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	                      |				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕКАДА, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	                      |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	                      |				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ПОЛУГОДИЕ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	                      |			ИНАЧЕ АктивацияПодарочныхСертификатов.Период
	                      |		КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДействителенДо
	                      |ИЗ
	                      |	Документ.РеализацияПодарочныхСертификатов.ПодарочныеСертификаты КАК РеализацияПодарочныхСертификатов
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РеализацияПС КАК ВТ_РеализацияПС
	                      |		ПО РеализацияПодарочныхСертификатов.Ссылка = ВТ_РеализацияПС.Ссылка
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	                      |		ПО РеализацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец = ВидыПодарочныхСертификатов.Ссылка
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	                      |		ПО РеализацияПодарочныхСертификатов.ПодарочныйСертификат = АктивацияПодарочныхСертификатов.ПодарочныйСертификат
	                      |			И (АктивацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК СуммаОплаты,
	                      |	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерКарты,
	                      |	""Неопределено"" КАК ВидКарты,
	                      |	ЭквайринговыеТерминалы.Эквайер КАК Эквайрер,
	                      |	ЭквайринговыеТерминалы.БанковскийСчет КАК БанковскийСчетОрганизации,
	                      |	ЭквайринговыеТерминалы.Код КАК Номер,
	                      |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.РеализацияПодарочныхСертификатов.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	                      |		ПО ОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ЭквайринговыеТерминалы.Ссылка
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РеализацияПС КАК ВТ_РеализацияПС
	                      |		ПО ОплатаПлатежнымиКартами.Ссылка = ВТ_РеализацияПС.Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
	                      |	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
	                      |	ЭквайринговыеТерминалы.Эквайер,
	                      |	ЭквайринговыеТерминалы.БанковскийСчет,
	                      |	ЭквайринговыеТерминалы.Код,
	                      |	ЭквайринговыеТерминалы.Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка",        ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("КассоваяСмена", ДанныеИБ.КассоваяСмена);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	СуммаДокумента = ДанныеИБ.СуммаДокумента;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты") Тогда
		ПодарочныеСертификаты = РезультатыЗапроса[8].Выгрузить();
		СуммаДокумента = СуммаДокумента + ПодарочныеСертификаты.Итог("Сумма");
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2")
		или СуммаДокумента > 0 Тогда    
		ДанныеИБ.ДополнительныеСвойства.Вставить("РезультатыЗапроса", РезультатыЗапроса);
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = Ложь;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетПоКомиссииМеждуОрганизациями_Отправка
Процедура ДобавитьПОД_Документ_ОтчетПоКомиссииМеждуОрганизациями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетПоКомиссииМеждуОрганизациями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетПоКомиссииМеждуОрганизациями_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетПоКомиссииМеждуОрганизациями_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		
		УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
		
		ВыгружатьОтчетКомиссионера = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Организация) <> Неопределено;
		ВыгружатьОтчетКомитенту	   = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Комиссионер) <> Неопределено;
		
	Иначе
		
		ВыгружатьОтчетКомиссионера = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.Организация <> УправленческаяОрганизация();
			
		ВыгружатьОтчетКомитенту = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.Комиссионер <> УправленческаяОрганизация();
		
	КонецЕсли;
	
	ИспользованиеПКО.ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка  = ВыгружатьОтчетКомитенту;
	ИспользованиеПКО.ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ = ВыгружатьОтчетКомиссионера;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДС_Отправка
Процедура ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Шапка.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет, """") КАК КорреспондирующийСчет,
	|	ЕСТЬNULL(Шапка.ДокументВыдачи.Дата, Шапка.Дата) КАК СБДС_Дата,
	|	Шапка.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаБанковскогоСчета,
	|	Шапка.Валюта КАК Валюта,
	|	Шапка.ВалютаКонвертации
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяДоходов.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.СтатьяДоходов КАК СтатьяДоходов
	|ПОМЕСТИТЬ СтрокаСоСтатьейДоходовСКорСчетом
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеДоходы)
	|		ИЛИ ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств))
	|	И ДанныеДокумента.СтатьяДоходов.КорреспондирующийСчет is not null
	|	И ДанныеДокумента.СтатьяДоходов.КорреспондирующийСчет <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерваяСтрокаРасшифровки.ДоговорКредитаДепозита.СтатьяДДСКомиссии КАК ПерваяСтрРП_ДоговорКредитаДепозита_СДДСКомиссии,
	|	ПерваяСтрокаРасшифровки.ДоговорКредитаДепозита.СтатьяДДСПроцентов КАК ПерваяСтрРП_ДоговорКредитаДепозита_СДДСПроцентов,
	|	ПерваяСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств КАК ПерваяСтрРП_СДДС
	|ПОМЕСТИТЬ ПерваяСтрокаРасшифровки
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПерваяСтрокаРасшифровки
	|ГДЕ
	|	ПерваяСтрокаРасшифровки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяСтрокаРасшифровки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СтрокаСоСтатьейДоходовСКорСчетом.КорреспондирующийСчет, Шапка.КорреспондирующийСчет) КАК КорреспондирующийСчет,
	|	ЕСТЬNULL(СтрокаСоСтатьейДоходовСКорСчетом.СтатьяДоходов, Неопределено) КАК СтатьяДоходов,
	|	Шапка.СБДС_Дата,
	|	Шапка.ВалютаБанковскогоСчета,
	|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_ДоговорКредитаДепозита_СДДСКомиссии, Неопределено) КАК ПерваяСтрРП_ДоговорКредитаДепозита_СДДСКомиссии,
	|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_ДоговорКредитаДепозита_СДДСПроцентов, Неопределено) КАК ПерваяСтрРП_ДоговорКредитаДепозита_СДДСПроцентов,
	|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_СДДС, Неопределено) КАК ПерваяСтрРП_СДДС,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Валюта_Курс,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Валюта_Кратность
	|ИЗ
	|	Шапка КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокаСоСтатьейДоходовСКорСчетом КАК СтрокаСоСтатьейДоходовСКорСчетом
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПерваяСтрокаРасшифровки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|		ПО Шапка.Валюта = КурсыВалют.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств                       КАК СтатьяДДС,
	|	РасшифровкаПлатежа.Сумма                                               КАК Сумма,
	|	РасшифровкаПлатежа.СуммаНДС                                            КАК СуммаНДС,
	|	РасшифровкаПлатежа.СтавкаНДС                                           КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов                                 КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.Заказ                                               КАК Заказ,
	|	РасшифровкаПлатежа.Партнер                                             КАК Партнер,
	|	ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита 							   КАК ДоговорКредитаДепозита,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1)                                           КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1)                                      КАК КратностьВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов                                КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
	|			ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитСотруднику)
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|						ТОГДА ""КраткосрочныеКредиты""
	|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|						ТОГДА ""ДолгосрочныеКредиты""
	|				КОНЕЦ
	|		КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
	|				ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм)
	|				ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВкладСотрудника)
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|						ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи
	|								ТОГДА ""КраткосрочныеЗаймы""
	|						КОНЕЦ
	|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|						ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи
	|								ТОГДА ""ДолгосрочныеЗаймы""
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВидРасчетовРасширенный,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """" И &ЭтоУТ
	|			ТОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитСотруднику)
	|					ТОГДА ""58.03""
	|				КОГДА (РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
	|						ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм))
	|					И РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи
	|					ТОГДА ""58.03""
	|				КОГДА (РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
	|						ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм)
	|						ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВкладСотрудника))
	|					И РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи
	|					ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|								ТОГДА ВЫБОР
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
	|											ТОГДА ""66.03""
	|										ИНАЧЕ ""66.23""
	|									КОНЕЦ
	|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|								ТОГДА ВЫБОР
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
	|											ТОГДА ""67.03""
	|										ИНАЧЕ ""67.23""
	|									КОНЕЦ
	|						КОНЕЦ
	|				КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
	|					ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|								ТОГДА ВЫБОР
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
	|											ТОГДА ""66.01""
	|										ИНАЧЕ ""66.21""
	|									КОНЕЦ
	|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|								ТОГДА ВЫБОР
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
	|											ТОГДА ""67.01""
	|										ИНАЧЕ ""67.21""
	|									КОНЕЦ
	|					КОНЕЦ
	|				КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ДепозитВБанке)
	|					ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ДепозитВБанкеСКапитализацией)
	|					ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
	|								ТОГДА ""55.03""
	|							ИНАЧЕ ""55.23""
	|						КОНЕЦ
	|		КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентом
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|		ПО РасшифровкаПлатежа.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяДоходов КАК СтатьяДоходов
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеДоходы)
	|		ИЛИ ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств))
	|	И ДанныеДокумента.СтатьяДоходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|   И ДанныеДокумента.СтатьяДоходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ЭтоУТ", ЭтоУТ());
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютаРеглУчета);
	
	ДополнительныеДанные = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = ДополнительныеДанные[3].Выгрузить()[0];
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки", ДанныеШапки);
	ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежаРасширенная", ДополнительныеДанные[4]);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		Если ДанныеИБ.ВалютаКонвертации = ВалютаРеглУчета
			Или ДанныеИБ.Валюта = ВалютаРеглУчета Тогда
			
			ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.Валюта <> ВалютаРеглУчета
			И ДанныеИБ.ВалютаКонвертации <> ВалютаРеглУчета Тогда
			
			ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоХозяйственнаяОперацияРасчетыПоКредитамЗаймам(ДанныеИБ.ХозяйственнаяОперация) Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ЭтоХозяйственнаяОперацияРасчетыПоДепозитам(ДанныеИБ.ХозяйственнаяОперация) Тогда
		
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
		// Хоз операция ПрочиеДоходы устарела. Оставлено на переходный период.
		// Прочий доход отражается видом операции ПрочееПоступлениеДенежныхСредств.
		Для Каждого СтрокаТЧ Из ДанныеИБ.РасшифровкаПлатежа Цикл
			
			// Если заполнена статья доходов - то это ПрочиеДоходы.
			Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяДоходов)
				И ТипЗнч(СтрокаТЧ.СтатьяДоходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
				
				ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Не ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка;
		
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте Тогда
		
		Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ПБДСПоПлатежнымКартам") Тогда
			ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаТоваровМеждуОрганизациями_Отправка
Процедура ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаТоваровМеждуОрганизациями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПередачаМеждуОрганизациями_ПТУ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПередачаМеждуОрганизациями_РТУ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		
		УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
		
		ВыгружатьПродажу = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Организация) <> Неопределено;
		ВыгружатьПокупку = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.ОрганизацияПолучатель) <> Неопределено;
		
	Иначе
		
		ВыгружатьПродажу = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.Организация <> УправленческаяОрганизация();
			
		ВыгружатьПокупку = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.ОрганизацияПолучатель <> УправленческаяОрганизация();
		
	КонецЕсли;
	
	ИспользованиеПКО.ПередачаМеждуОрганизациями_ПТУ_Отправка = ВыгружатьПокупку;
	ИспользованиеПКО.ПередачаМеждуОрганизациями_РТУ_Отправка = ВыгружатьПродажу;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеТоваров_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка             = (ДанныеИБ.ВидыЗапасов.Количество() > 0);
	ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка  = (ДанныеИБ.ВидыЗапасов.Количество() > 0);
	ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка = (ДанныеИБ.ВидыЗапасов.Количество() > 0);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
		
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Ложь;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВидыЗапасов.НомерСтроки 												КАК НомерСтроки,
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура 					КАК Номенклатура,
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика 					КАК Характеристика,
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
			|	ВидыЗапасов.Количество 													КАК Количество,
			|	ВидыЗапасов.НомерГТД.Код  								  				КАК НомерГТД,
			|	ВидыЗапасов.НомерГТД.СтранаПроисхождения  		           				КАК СтранаПроисхождения,
			|	КОНЕЦПЕРИОДА(ВидыЗапасов.Ссылка.Дата, ДЕНЬ) 							КАК ДатаПолученияЦены,
			|	ВидыЗапасов.Ссылка.ВидЦены 												КАК ВидЦены,
			|	ВидыЗапасов.Ссылка.ВидЦены.ВалютаЦены 									КАК ВалютаЦены,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|			ТОГДА ""ВозвратнаяТара""
			|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ 																	КАК ТипЗапасов,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|			ТОГДА ""ВозвратнаяТара""
			|		КОГДА ВидыЗапасов.ВидЗапасовПолучателя.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ 																	КАК ТипЗапасовПолучателя
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ВидыЗапасов
			|ГДЕ
			|	ВидыЗапасов.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыЦенНоменклатуры.НомерСтроки,
			|	ЦеныНоменклатуры.Цена
			|ПОМЕСТИТЬ Цены
			|ИЗ
			|	(ВЫБРАТЬ
			|		Товары.НомерСтроки,
			|		ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
			|		ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатуры.Характеристика КАК Характеристика,
			|		МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
			|	ИЗ
			|		Товары КАК Товары
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|			ПО Товары.ВидЦены = ЦеныНоменклатуры.ВидЦены
			|				И Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
			|				И Товары.Характеристика = ЦеныНоменклатуры.Характеристика
			|				И Товары.ДатаПолученияЦены >= ЦеныНоменклатуры.Период
			|				И Товары.ВалютаЦены = ЦеныНоменклатуры.Валюта
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Товары.НомерСтроки,
			|		ЦеныНоменклатуры.ВидЦены,
			|		ЦеныНоменклатуры.Номенклатура,
			|		ЦеныНоменклатуры.Характеристика) КАК ПериодыЦенНоменклатуры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|		ПО ПериодыЦенНоменклатуры.Период = ЦеныНоменклатуры.Период
			|			И ПериодыЦенНоменклатуры.ВидЦены = ЦеныНоменклатуры.ВидЦены
			|			И ПериодыЦенНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
			|			И ПериодыЦенНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КурсыВалют.Валюта,
			|	КурсыВалют.Курс,
			|	КурсыВалют.Кратность
			|ПОМЕСТИТЬ КурсыВалют
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(КурсыВалют.Период) КАК Период,
			|		КурсыВалют.Валюта КАК Валюта
			|	ИЗ
			|		Документ.ПеремещениеТоваров КАК ДокументыПеремещениеТоваров
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
			|			ПО ДокументыПеремещениеТоваров.ВидЦены.ВалютаЦены = КурсыВалют.Валюта
			|				И ДокументыПеремещениеТоваров.Дата >= КурсыВалют.Период
			|	ГДЕ
			|		ДокументыПеремещениеТоваров.Ссылка = &Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		КурсыВалют.Валюта) КАК ПериодыКурсовВалютПоДокументам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
			|		ПО ПериодыКурсовВалютПоДокументам.Период = КурсыВалют.Период
			|			И ПериодыКурсовВалютПоДокументам.Валюта = КурсыВалют.Валюта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура 		КАК Номенклатура,
			|	Товары.Характеристика 		КАК Характеристика,
			|	Товары.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
			|	Товары.Количество 			КАК Количество,
			|	Товары.НомерГТД 			КАК НомерГТД,
			|	Товары.СтранаПроисхождения  КАК СтранаПроисхождения,
			|	Товары.ТипЗапасов 			КАК ТипЗапасов,
			|	Товары.ТипЗапасовПолучателя КАК ТипЗапасовПолучателя,
			|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(ЕСТЬNULL(Цены.Цена, 0)* ЕСТЬNULL(КурсыВалют.Курс, 1) / ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК ЧИСЛО(15, 2)) * Товары.Количество КАК ЧИСЛО(15, 2)) КАК Сумма,
			|	Товары.НомерСтроки КАК НомерСтрокиДокумента
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
			|		ПО Истина
			|		ЛЕВОЕ СОЕДИНЕНИЕ Цены КАК Цены
			|		ПО Товары.НомерСтроки = Цены.НомерСтроки
			|
			|УПОРЯДОЧИТЬ ПО
			|	Товары.НомерСтроки");
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Запрос.Выполнить().Выгрузить());
		
	Иначе
		ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка  = Ложь;
		ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка = Ложь;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересортицаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересортицаТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВОприходование_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписаниеЗапасов_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПересортицаВОприходование_Отправка = Истина;
	ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка      = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",   ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВидЦен", ДанныеИБ.ВидЦены);
	Запрос.УстановитьПараметр("РегВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НоменклатураОприходование КАК Номенклатура,
		|	Товары.ХарактеристикаОприходование КАК Характеристика,
		|	Товары.Номенклатура КАК НоменклатураСписание,
		|	Товары.Характеристика КАК ХарактеристикаСписание,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Цена * Товары.Количество КАК Сумма,
		|	Товары.НомерГТД.Код КАК НомерГТД,
		|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ПересортицаТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураСписание,
		|	ХарактеристикаСписание";
	
	
	Запрос.Выполнить();
	
	Если ДанныеИБ.ПриходоватьТоварыПоСебестоимостиСписания Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
			|	ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
			|	* ВЫБОР
			|		КОГДА &РегВалюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Цена,
			|	ВременнаяТаблицаТовары.НомерГТД,
			|	ВременнаяТаблицаТовары.СтранаПроисхождения,
			|	ВременнаяТаблицаТовары.ЕдиницаИзмерения,
			|	ВременнаяТаблицаТовары.Коэффициент,
			|	ВременнаяТаблицаТовары.Количество,
			|	ВременнаяТаблицаТовары.НомерСтроки
			|ПОМЕСТИТЬ ПервичныеДанные
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Дата,
			|				ВидЦены = &ВидЦен
			|					И (Номенклатура, Характеристика) В
			|						(ВЫБРАТЬ
			|							ВременнаяТаблицаТовары.НоменклатураСписание,
			|							ВременнаяТаблицаТовары.ХарактеристикаСписание
			|						ИЗ
			|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ВременнаяТаблицаТовары.НоменклатураСписание = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И ВременнаяТаблицаТовары.ХарактеристикаСписание = ЦеныНоменклатурыСрезПоследних.Характеристика
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
			|		ПО (ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
			|		ПО (ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПервичныеДанные.Номенклатура,
			|	ПервичныеДанные.Характеристика,
			|	ВЫБОР
			|		КОГДА ПервичныеДанные.Цена < 0.01
			|			ТОГДА 0.01
			|		ИНАЧЕ ВЫРАЗИТЬ(ПервичныеДанные.Цена КАК ЧИСЛО(15, 2))
			|	КОНЕЦ КАК Цена,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ПервичныеДанные.Цена < 0.01
			|				ТОГДА 0.01
			|			ИНАЧЕ ВЫРАЗИТЬ(ПервичныеДанные.Цена КАК ЧИСЛО(15, 2))
			|		КОНЕЦ * ПервичныеДанные.Количество КАК ЧИСЛО(15, 2)) КАК Сумма,
			|	ПервичныеДанные.НомерГТД,
			|	ПервичныеДанные.СтранаПроисхождения,
			|	ПервичныеДанные.ЕдиницаИзмерения,
			|	ПервичныеДанные.Коэффициент,
			|	ПервичныеДанные.Количество,
			|	ПервичныеДанные.НомерСтроки
			|ИЗ
			|	ПервичныеДанные КАК ПервичныеДанные";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.ЕдиницаИзмерения",
			"ВременнаяТаблицаТовары.Номенклатура"));
		
		Запрос.УстановитьПараметр("Дата",   ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("ВидЦен", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "УчетныйВидЦены"));
		Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
			
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Номенклатура,
			|	ВременнаяТаблицаТовары.Характеристика,
			|	ВременнаяТаблицаТовары.ЕдиницаИзмерения,
			|	ВременнаяТаблицаТовары.Коэффициент,
			|	ВременнаяТаблицаТовары.Количество,
			|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Цена * ВЫБОР
			|		КОГДА &РегВалюта <> &УпрВалюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
			|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * ВЫБОР
			|		КОГДА &РегВалюта <> &УпрВалюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
			|	ВременнаяТаблицаТовары.НомерГТД,
			|	ВременнаяТаблицаТовары.СтранаПроисхождения
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
			|		ПО (ИСТИНА)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВременнаяТаблицаТовары.НомерСтроки";
		
	КонецЕсли;
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ЕстьПустая = Ложь;
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Не ЗначениеЗаполнено(Строка.Цена) Или Не ЗначениеЗаполнено(Строка.Сумма) Тогда
			ЕстьПустая = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПустая Тогда
		ИспользованиеПКО.Документ_ПересортицаВОприходование_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка      = Ложь;
		
		ШаблонПредупреждения = НСтр("ru = 'Документ %1 не может быть выгружен,
		|т.к. не для всех приходуемых номенклатурных позиций задана учетная цена.
		|Тип учетной цены задается в параметрах склада как ""Учетный вид цены"".'");
	
		ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ДанныеИБ.Ссылка);
	
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями; 
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(
			КомпонентыОбмена, ТекстПредупреждения,,	Ложь,,,); 	
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов") Тогда
		ИспользованиеПКО.Документ_ПересортицаВСписаниеЗапасов_Отправка = ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка;
		ИспользованиеПКО.Удалить("Документ_ПересортицаВСписание_Отправка");
	Иначе
		ИспользованиеПКО.Удалить("Документ_ПересортицаВСписаниеЗапасов_Отправка");
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", ТаблицаТовары);
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриобретениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПТУЧерезПодотчетноеЛицо_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПТУЧерезПодотчетноеЛицо_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Истина;
		ИспользованиеПКО.Документ_ПТУЧерезПодотчетноеЛицо_Отправка = Ложь;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеУслугПрочихАктивов_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеУслугПрочихАктивов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриобретениеУслугПрочихАктивов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеУслугПрочихАктивов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПУПАЧерезПодотчетноеЛицо_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ИспользованиеПКО.Документ_ПоступлениеУслугПрочихАктивов_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПУПАЧерезПодотчетноеЛицо_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПоступлениеУслугПрочихАктивов_Отправка = Истина;
		ИспользованиеПКО.Документ_ПУПАЧерезПодотчетноеЛицо_Отправка = Ложь;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныйКассовыйОрдер
Процедура ДобавитьПОД_Документ_ПриходныйКассовыйОрдер(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходныйКассовыйОрдер";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходныйКассовыйОрдер_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОВнутренняяПередача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПоступлениеИзКассыККМ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПриходныйКассовыйОрдер_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(Шапка.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет, """") КАК КорреспондирующийСчет,
		|	Шапка.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаБанковскогоСчета,
		|	Шапка.Валюта КАК Валюта,
		|	Шапка.ВалютаКонвертации
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Шапка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДокумента.СтатьяДоходов.КорреспондирующийСчет КАК КорреспондирующийСчет,
		|	ДанныеДокумента.СтатьяДоходов КАК СтатьяДоходов
		|ПОМЕСТИТЬ СтрокаСоСтатьейДоходовСКорСчетом
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И (ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеДоходы)
		|			ИЛИ ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств))
		|	И ДанныеДокумента.СтатьяДоходов.КорреспондирующийСчет ЕСТЬ НЕ NULL 
		|	И ДанныеДокумента.СтатьяДоходов.КорреспондирующийСчет <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокумента.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПерваяСтрокаРасшифровки.ДоговорКредитаДепозита.СтатьяДДСКомиссии КАК ПерваяСтрРП_ДоговорКредитаДепозита_СДДСКомиссии,
		|	ПерваяСтрокаРасшифровки.ДоговорКредитаДепозита.СтатьяДДСПроцентов КАК ПерваяСтрРП_ДоговорКредитаДепозита_СДДСПроцентов,
		|	ПерваяСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств КАК ПерваяСтрРП_СДДС
		|ПОМЕСТИТЬ ПерваяСтрокаРасшифровки
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПерваяСтрокаРасшифровки
		|ГДЕ
		|	ПерваяСтрокаРасшифровки.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПерваяСтрокаРасшифровки.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СтрокаСоСтатьейДоходовСКорСчетом.КорреспондирующийСчет, Шапка.КорреспондирующийСчет) КАК КорреспондирующийСчет,
		|	ЕСТЬNULL(СтрокаСоСтатьейДоходовСКорСчетом.СтатьяДоходов, НЕОПРЕДЕЛЕНО) КАК СтатьяДоходов,
		|	Шапка.ВалютаБанковскогоСчета,
		|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_ДоговорКредитаДепозита_СДДСКомиссии, НЕОПРЕДЕЛЕНО) КАК ПерваяСтрРП_ДоговорКредитаДепозита_СДДСКомиссии,
		|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_ДоговорКредитаДепозита_СДДСПроцентов, НЕОПРЕДЕЛЕНО) КАК ПерваяСтрРП_ДоговорКредитаДепозита_СДДСПроцентов,
		|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_СДДС, НЕОПРЕДЕЛЕНО) КАК ПерваяСтрРП_СДДС,
		|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Валюта_Курс,
		|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Валюта_Кратность
		|ИЗ
		|	Шапка КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокаСоСтатьейДоходовСКорСчетом КАК СтрокаСоСтатьейДоходовСКорСчетом
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПерваяСтрокаРасшифровки КАК ПерваяСтрокаРасшифровки
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
		|		ПО Шапка.Валюта = КурсыВалют.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.Сумма КАК Сумма,
		|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
		|	РасшифровкаПлатежа.Заказ КАК Заказ,
		|	РасшифровкаПлатежа.Партнер КАК Партнер,
		|	ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
		|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК КратностьВзаиморасчетов,
		|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
		|			ТОГДА ВЫБОР
		|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
		|						ТОГДА ""КраткосрочныеКредиты""
		|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
		|						ТОГДА ""ДолгосрочныеКредиты""
		|				КОНЕЦ
		|		КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
		|				ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм)
		|				ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВкладСотрудника)
		|			ТОГДА ВЫБОР
		|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
		|						ТОГДА ВЫБОР
		|								КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи
		|									ТОГДА ""КраткосрочныеЗаймы""
		|							КОНЕЦ
		|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
		|						ТОГДА ВЫБОР
		|								КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи
		|									ТОГДА ""ДолгосрочныеЗаймы""
		|							КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидРасчетовРасширенный,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """"
		|			ТОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
		|						ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм))
		|						И (РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга
		|							ИЛИ РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов)
		|					ТОГДА ""58.03""
		|				КОГДА (РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
		|						ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм)
		|						ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВкладСотрудника))
		|						И РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи
		|					ТОГДА ВЫБОР
		|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
		|								ТОГДА ВЫБОР
		|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
		|											ТОГДА ""66.03""
		|										ИНАЧЕ ""66.23""
		|									КОНЕЦ
		|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
		|								ТОГДА ВЫБОР
		|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
		|											ТОГДА ""67.03""
		|										ИНАЧЕ ""67.23""
		|									КОНЕЦ
		|						КОНЕЦ
		|				КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
		|					ТОГДА ВЫБОР
		|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
		|								ТОГДА ВЫБОР
		|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
		|											ТОГДА ""66.01""
		|										ИНАЧЕ ""66.21""
		|									КОНЕЦ
		|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
		|								ТОГДА ВЫБОР
		|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРегУчета
		|											ТОГДА ""67.01""
		|										ИНАЧЕ ""67.21""
		|									КОНЕЦ
		|						КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентом
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
		|		ПО РасшифровкаПлатежа.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДокумента.СтатьяДоходов КАК СтатьяДоходов
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И (ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеДоходы)
		|			ИЛИ ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств))
		|	И (ДанныеДокумента.СтатьяДоходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
		|				И ДанныеДокумента.СтатьяДоходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
		|			ИЛИ ДанныеДокумента.СтатьяДоходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
		|				И ДанныеДокумента.СтатьяДоходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокумента.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВалютаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	ДополнительныеДанные = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = ДополнительныеДанные[3].Выгрузить()[0];
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки",                   ДанныеШапки);
	ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежаРасширенная", ДополнительныеДанные[4]);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		ИспользованиеПКО.Документ_ПКОВнутренняяПередача_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ИспользованиеПКО.Документ_ПКОКонвертацияВалюты_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.1") Тогда
			ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихРасходов Тогда
		// Хоз операции ПрочиеДоходы и СторнированиеПрочихРасходов больше не будет использоваться.
		// Оставлено на переходный период.
		ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		ДанныеДоходов = ДополнительныеДанные[5].Выгрузить();
		Если ДанныеДоходов.Количество() > 0 Тогда
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоХозяйственнаяОперацияРасчетыПоКредитамЗаймам(ДанныеИБ.ХозяйственнаяОперация)
		Или ЭтоХозяйственнаяОперацияРасчетыПоДепозитам(ДанныеИБ.ХозяйственнаяОперация) Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
			ИспользованиеПКО.Удалить("Документ_ПКОПоступлениеИзКассыККМ_Отправка");
		Иначе
			ИспользованиеПКО.Документ_ПКОПоступлениеИзКассыККМ_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПрочееОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПрочееОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПрочееОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПрочееОприходованиеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПрочееОприходованиеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_ПрочееОприходование_ВыпускПродукции_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПрочееОприходованиеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ЭтоУТ() Тогда
		ИспользованиеПКО.Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр = Ложь;
		ИспользованиеПКО.Док_ПрочееОприходование_ВыпускПродукции_Отправка = Ложь;
		
		Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеИзПроизводства Тогда
			ИспользованиеПКО.Док_ПрочееОприходование_ВыпускПродукции_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации Тогда
			ИспользованиеПКО.Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр = Истина;
		КонецЕсли;
	Иначе
		ИспользованиеПКО.Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр = Истина;
		ИспользованиеПКО.Док_ПрочееОприходование_ВыпускПродукции_Отправка = Ложь;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходныйКассовыйОрдер
Процедура ДобавитьПОД_Документ_РасходныйКассовыйОрдер(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходныйКассовыйОрдер";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РасходныйКассовыйОрдер_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВнутренняяПередача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыдачаВКассуККМ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РасходныйКассовыйОрдер_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	ВидРасчетов = "";
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
	
		ИспользованиеПКО.Документ_РКОВнутренняяПередача_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
	
		ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
			ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк Тогда
	
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком Тогда
	
		ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
	
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
		ВидРасчетов = "Подотчет";
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		// Хоз. операция ПрочиеРасходы больше не будет использоваться. Оставлено на переходный период.
		// Прочий расход отражается видом операции ПрочаяВыдачаДенежныхСредств.
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	
		ВидОперацииПрочее = "ПрочееСписание";
		// Если заполнена статья расходов - то это прочий расход.
		Для Каждого СтрокаТЧ Из ДанныеИБ.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов)
				И ТипЗнч(СтрокаТЧ.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
				ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли  ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
	
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "СПокупателем";
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
	
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "СПоставщиком";
	
	ИначеЕсли ЭтоХозяйственнаяОперацияРасчетыПоКредитамЗаймам(ДанныеИБ.ХозяйственнаяОперация) Тогда
	
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "КредитыИЗаймы";
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
	
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
			ИспользованиеПКО.Удалить("Документ_РКОВыдачаВКассуККМ_Отправка");
		Иначе
			ИспользованиеПКО.Документ_РКОВыдачаВКассуККМ_Отправка = Истина;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю Тогда
	
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "Прочее";
	
	КонецЕсли;
	
	Если ВидРасчетов <> "" Тогда
	
		ДанныеШапки = Новый Структура();
		ДанныеШапки.Вставить("ВидРасчетов", ВидРасчетов);
		ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки", ДанныеШапки);
	
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияУслугПрочихАктивов_Отправка
Процедура ДобавитьПОД_Документ_РеализацияУслугПрочихАктивов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияУслугПрочихАктивов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияУслугПрочихАктивов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияУслугПрочихАктивов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров
Процедура ДобавитьПОД_Документ_СборкаТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СборкаТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеБезналичныхДенежныхСредств
Процедура ДобавитьПОД_Документ_СписаниеБезналичныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеБезналичныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеБезналичныхДенежныхСредств_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПРаботнику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеБезналичныхДенежныхСредств_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		
	ДанныеШапки       = Новый Структура;
	ВидОперацииПрочее = "";
	ВидРасчетов       = "";
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
		
		ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		ИспользованиеПКО.Документ_СБДСПеречислениеЗПРаботнику_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "Прочее";
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		ВидОперацииПрочее = "ВнутренняяПередача";
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы 
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		
		// Хоз. операция ПрочиеРасходы больше не будет использоваться. Оставлено на переходный период.
		// Прочий расход отражается видом операции ПрочаяВыдачаДенежныхСредств.
		ВидОперацииПрочее = "ПрочееСписание";
		Для Каждого СтрокаТЧ Из ДанныеИБ.РасшифровкаПлатежа Цикл
			
			// Если заполнена статья расходов - то это прочий расход.
			Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов)
				И ТипЗнч(СтрокаТЧ.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				
				ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
				// При операции ПрочиеРасходы ВидОперацииПрочее не должен быть заполнен.
				ВидОперацииПрочее = "";
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
	
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "СПоставщиком";
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
	
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "СПокупателем";
	
	ИначеЕсли ЭтоХозяйственнаяОперацияРасчетыПоКредитамЗаймам(ДанныеИБ.ХозяйственнаяОперация) Тогда
	
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "КредитыИЗаймы";
		
	ИначеЕсли ЭтоХозяйственнаяОперацияРасчетыПоДепозитам(ДанныеИБ.ХозяйственнаяОперация) Тогда
	
		ВидОперацииПрочее = "ПрочееСписание";
		
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю Тогда
	
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "Прочее";
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
	
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
		ВидРасчетов = "Подотчет";
	
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
		
		ВидОперацииПрочее = "ПрочееСписание";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперацииПрочее) Тогда
	
		ДанныеШапки.Вставить("ВидОперацииПрочее", ВидОперацииПрочее);
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРасчетов) Тогда
		
		ДанныеШапки.Вставить("ВидРасчетов", ВидРасчетов);
		
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки", ДанныеШапки);
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеЗадолженности_Отправка
Процедура ДобавитьПОД_Документ_СписаниеЗадолженности_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеЗадолженности_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеЗадолженности;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СЗ_КорректировкаДолга");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостачТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеНедостач") Тогда
		ИспользованиеПКО.Документ_СписаниеНедостачТоваров_Отправка = Истина;
		ИспользованиеПКО.Удалить("Документ_СписаниеТоваров_Отправка");
	Иначе
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
		ИспользованиеПКО.Удалить("Документ_СписаниеНедостачТоваров_Отправка");
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплату_Отправка
Процедура ДобавитьПОД_Документ_СчетНаОплату_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетНаОплату_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуКлиенту;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетНаОплату_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплату_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетНаОплату_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СчетПокупателю") Тогда
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		Возврат;
	КонецЕсли;
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученныйИК_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
	ИспользованиеПКО.Документ_СчетФактураПолученныйИК_Отправка = Ложь;
	
	Для Каждого СтрокаОснование Из ДанныеИБ.ДокументыОснования Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОснование.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Истина;
		ТипОснования = ТипЗнч(СтрокаОснование.ДокументОснование);
		Если (ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			Или ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
			Или ТипОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"))
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДокументОснование, "РасчетыЧерезОтдельногоКонтрагента") Тогда
			
			ОрганизацияПолучатель_ИмяРеквизита = "ОрганизацияПолучатель";
			Если ТипОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				ОрганизацияПолучатель_ИмяРеквизита = "Комиссионер";
			КонецЕсли;
			
			ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДокументОснование, ОрганизацияПолучатель_ИмяРеквизита);
			ИспользованиеПКО.Документ_СчетФактураПолученныйИК_Отправка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользованиеПКО.Документ_СчетФактураПолученныйИК_Отправка 
		И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
	
		УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
		
		ИспользованиеПКО.Документ_СчетФактураПолученныйИК_Отправка = УзелСписокОрганизаций.НайтиПоЗначению(ОрганизацияПолучатель) <> Неопределено;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданныйАванс_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураВыданныйАванс_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданныйАванс_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданныйАванс;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданныйАванс_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураКомиссионеру_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураКомиссионеру_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураКомиссионеру_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураКомиссионеру;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураКомиссионеру_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураКомиссионеру_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученныйИКК_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураКомиссионеру_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетФактураКомиссионеру_Отправка = Истина;
	ИспользованиеПКО.Документ_СчетФактураПолученныйИКК_Отправка = Ложь;
	
	ДокументОснование = ДанныеИБ.ДокументОснование;
	
	ТипОснования = ТипЗнч(ДокументОснование);
	Если (ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		Или ТипОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"))
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "РасчетыЧерезОтдельногоКонтрагента") Тогда
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
			Если ТипОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Комиссионер");
			Иначе
				ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ОрганизацияПолучатель");
		    КонецЕсли;
			УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
			
			ИспользованиеПКО.Документ_СчетФактураПолученныйИКК_Отправка = УзелСписокОрганизаций.НайтиПоЗначению(ОрганизацияПолучатель) <> Неопределено;
		Иначе
			ИспользованиеПКО.Документ_СчетФактураПолученныйИКК_Отправка = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураКомитента_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураКомитента_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураКомитента_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураКомитента;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураКомитента_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученныйАванс_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураПолученныйАванс_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученныйАванс_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученныйАванс;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученныйАванс_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Отправка
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ТаможеннаяДекларацияИмпорт;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.ВидЦены КАК ТипЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Ссылка = &Ссылка
	|	И ЦеныНоменклатуры.Цена <> 0
	|	И ЦеныНоменклатуры.ВидЦены В(&ВидыЦенНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.ТипЦен КАК ТипЦен,
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ТабТовары.Цена / ТабТовары.Коэффициент КАК ЧИСЛО(15, 2))) КАК Цена
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабТовары.ТипЦен,
	|	ТабТовары.Номенклатура
	|ИТОГИ ПО
	|	ТипЦен";
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки", ТекстЗапросаКоэффициентУпаковки);
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидыЦенНоменклатуры", КомпонентыОбмена.ПараметрыКонвертации.ВидыЦенНоменклатуры);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	
	ВыборкаВидЦены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПравилоУстановкаЦенОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатуры_Отправка", "Имя");
	Если Не ПравилоУстановкаЦенОтправка = Неопределено Тогда
		Пока ВыборкаВидЦены.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаВидЦены.ТипЦен) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеИБСтруктура = Новый Структура("Дата, Номер, Ответственный, Ссылка, Комментарий");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			ВыборкаДетали = ВыборкаВидЦены.Выбрать();
			ТаблицаТоваров.Очистить();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТовары = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетали);
			КонецЦикла;
			ДанныеИБСтруктура.Вставить("ТипЦен", ВыборкаВидЦены.ТипЦен);
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБСтруктура, 
				ПравилоУстановкаЦенОтправка);
		КонецЦикла;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры
#КонецОбласти
#Область ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка
Процедура ДобавитьПОД_ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка");
КонецПроцедуры
#КонецОбласти
#Область ЗначенияДопРеквизитов_Отправка
Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗначенияДопРеквизитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
КонецПроцедуры
#КонецОбласти
#Область Спр_ГруппыАналитическогоУчетаНоменклатуры_Отправка
Процедура ДобавитьПОД_Спр_ГруппыАналитическогоУчетаНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Спр_ГруппыАналитическогоУчетаНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ГруппыАналитическогоУчетаНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Спр_ГруппыАналитическогоУчетаНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Спр_ГруппыАналитическогоУчетаНоменклатуры");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа");
КонецПроцедуры

Процедура ПОД_Спр_ГруппыАналитическогоУчетаНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ГруппыАналитическогоУчетаНоменклатуры") Тогда
		ИспользованиеПКО.Спр_ГруппыАналитическогоУчетаНоменклатуры       = Не ДанныеИБ.ЭтоГруппа;
		ИспользованиеПКО.Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа = ДанныеИБ.ЭтоГруппа;
	Иначе
		ИспользованиеПКО.Удалить("Спр_ГруппыАналитическогоУчетаНоменклатуры");
		ИспользованиеПКО.Удалить("Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа");
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Спр_ГруппыФинансовогоУчетаРасчетов_Отправка
Процедура ДобавитьПОД_Спр_ГруппыФинансовогоУчетаРасчетов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Спр_ГруппыФинансовогоУчетаРасчетов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ГрФинансовогоУчетаРасчетов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ = Неопределено
		И ДанныеИБ.ЭтоГруппа Тогда	
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаОрганизаций_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВариантыКомплектацииНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ВариантыКомплектацииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВариантыКомплектацииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВариантыКомплектацииНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыПодарочныхСертификатов_Отправка
Процедура ДобавитьПОД_Справочник_ВидыПодарочныхСертификатов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыПодарочныхСертификатов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыПодарочныхСертификатов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыПодарочныхСертификатов");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ВидыПодарочныхСертификатов = (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2"));
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГруппыФинУчетаНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ГруппыФинУчетаНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ГруппыФинУчетаНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ГруппыФинансовогоУчетаНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ГруппыФинУчетаНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ГруппыФинУчетаНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ГруппыФинУчетаНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Удалить("Справочник_ГруппыФинУчетаНоменклатуры_Отправка");
	Иначе
		ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
КонецПроцедуры

Процедура ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_ИзСтруктуры = (ТипЗнч(ДанныеИБ) = Тип("Структура"));
	ИспользованиеПКО.Справочник_ДоговорыКонтрагентов             = Не ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_ИзСтруктуры;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКредитовИДепозитов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКредитовИДепозитов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКредитовИДепозитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКредитовИДепозитов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКредитовИДепозитов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ИспользованиеПКО.Свойство("Справочник_ДокументыФизическихЛиц_Отправка")
		И (Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ДокументыФизическихЛиц")
			Или ТипЗнч(ДанныеИБ.Отбор.Физлицо.Значение) = Тип("СправочникСсылка.Контрагенты")) Тогда
		ИспользованиеПКО.Удалить("Справочник_ДокументыФизическихЛиц_Отправка");
	КонецЕсли;
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Отправка
Процедура ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КассыККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.КассыККМ") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты
Процедура ДобавитьПОД_Справочник_Контрагенты(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлкПрод_Отправка
Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкПрод_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЛицензииПоставщиковАлкПрод_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЛицензииПоставщиковАлкПрод_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЛицензииПоставщиковАлкПрод_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ЛицензииПоставщиковАлкПрод_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ЛицензииПоставщиковАлкПрод_Отправка = (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2"));
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОтветственныеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ОтветственныеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ОтветственныеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ОтветственныеЛицаОрганизаций;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ОтветственныеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ОтветственныеЛица_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ОтветственныеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ОтветственныеЛица_Отправка = (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2"));
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегистрацииВНалоговомОргане_Отправка
Процедура ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_РегистрацииВНалоговомОргане_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегистрацииВНалоговомОргане");
КонецПроцедуры

Процедура ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ДанныеИБ.Владелец)
		Или Не ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.Владелец)
		Или Не ЗначениеЗаполнено(ДанныеИБ.Код)
		Или (Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеОбособленногоПодразделения)
		И Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеИФНС)) Тогда
	
	 	ИспользованиеПКО.Справочник_РегистрацииВНалоговомОргане = Ложь;
		ШаблонПредупреждения = НСтр("ru = 'Регистрация в налоговом органе %1 не может быть выгружена,
		|т.к. в ней имеются незаполненные обязательные реквизиты.'");
		
		ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ДанныеИБ.Ссылка);
		
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями; 
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(
			КомпонентыОбмена, ТекстПредупреждения,,	Ложь,,,);
	
	КонецЕсли;
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_СкладыГруппа = (ДанныеИБ.ЭтоГруппа);
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС_Группа");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Удалить("Справочник_СтатьиДДС");
		ИспользованиеПКО.Справочник_СтатьиДДС_Группа = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2");
	Иначе
		ИспользованиеПКО.Удалить("Справочник_СтатьиДДС_Группа");
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Отправка
Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыЦен;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры

Процедура ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ТипыЦен = Не ДанныеИБ.ЭтоГруппа;
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_УпаковкиЕдиницыИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_УпаковкиЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_УпаковкиЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФИОФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ФИОФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФИОФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ФИОФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФИОФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ПОД_Справочник_ФИОФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Выгружаются в составе сведений о физическом лице.
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2"));
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы_Отправка
Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ЭквайринговыеТерминалы") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область СтатьиДоходов_Отправка
Процедура ДобавитьПОД_СтатьиДоходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "СтатьиДоходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов");
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АвансовыйОтчет";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_АвансовыйОтчет_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПТУЧерезПодотчетноеЛицо_Получение");
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_АвансовыйОтчет_Получение          = Ложь;
	ИспользованиеПКО.Документ_ПТУЧерезПодотчетноеЛицо_Получение = Ложь;
	
	Если ДанныеXDTO.Свойство("Товары") И ДанныеXDTO.Товары.Количество() > 0 Тогда
		ИспользованиеПКО.Документ_ПТУЧерезПодотчетноеЛицо_Получение = Истина;
	КонецЕсли;
	
	Если (ДанныеXDTO.Свойство("ПрочиеРасходы") И ДанныеXDTO.ПрочиеРасходы.Количество() > 0)
		Или (ДанныеXDTO.Свойство("ОплатаПоставщикам") И ДанныеXDTO.ОплатаПоставщикам.Количество() > 0) Тогда
		ИспользованиеПКО.Документ_АвансовыйОтчет_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_АннулированиеПС_Получение
Процедура ДобавитьПОД_Документ_АннулированиеПС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АннулированиеПС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АннулированиеПС_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнесениеДСВКассуККМ_Получение
Процедура ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнесениеДСВКассуККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВнесениеДСВКассуККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнесениеДСВКассуККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутреннееПотреблениеТоваров_Получение
Процедура ДобавитьПОД_Документ_ВнутреннееПотреблениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнутреннееПотреблениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутреннееПотреблениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПС_Получение
Процедура ДобавитьПОД_Документ_ВозвратПС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратПС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратПС_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыемкаДСИзКассыККМ_Получение
Процедура ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыемкаДСИзКассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыемкаДСИзКассыККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Получение
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Получение
Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаПереводДСВБюджет_Получение
Процедура ДобавитьПОД_Документ_ЗаявкаНаПереводДСВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаявкаНаПереводДСВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаявкаНаПереводДСВБюджет_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаПереводДСВБюджет_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ЗаявкаНаПереводДСВБюджет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользоватьЗаявкиНаРасходованиеДС = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	
	Для Каждого ТекИспользованиеПКО Из ИспользованиеПКО Цикл
		ИспользованиеПКО[ТекИспользованиеПКО.Ключ] = ИспользоватьЗаявкиНаРасходованиеДС;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользоватьЗаявкиНаРасходованиеДС = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	
	Для Каждого ТекИспользованиеПКО Из ИспользованиеПКО Цикл
		ИспользованиеПКО[ТекИспользованиеПКО.Ключ] = ИспользоватьЗаявкиНаРасходованиеДС;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение
Процедура ДобавитьПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользоватьЗаявкиНаРасходованиеДС = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	
	Для Каждого ТекИспользованиеПКО Из ИспользованиеПКО Цикл
		ИспользованиеПКО[ТекИспользованиеПКО.Ключ] = ИспользоватьЗаявкиНаРасходованиеДС;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение
Процедура ДобавитьПОД_Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаявкаНаРасходДСРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользоватьЗаявкиНаРасходованиеДС = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	
	Для Каждого ТекИспользованиеПКО Из ИспользованиеПКО Цикл
		ИспользованиеПКО[ТекИспользованиеПКО.Ключ] = ИспользоватьЗаявкиНаРасходованиеДС;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризационнаяОпись_Получение
Процедура ДобавитьПОД_Документ_ИнвентаризационнаяОпись_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризационнаяОпись_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ИнвентаризацияТоваров";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризационнаяОпись_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризационнаяОпись_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ИнвентаризационнаяОпись_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ИнвентаризационнаяОпись_Получение = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Документ_КассоваяСменаЗакрытие_Получение
Процедура ДобавитьПОД_Документ_КассоваяСменаЗакрытие_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КассоваяСменаЗакрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗакрытиеКассовойСмены";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаЗакрытие_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_КассоваяСменаОткрытие_Получение
Процедура ДобавитьПОД_Документ_КассоваяСменаОткрытие_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КассоваяСменаОткрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОткрытиеКассовойСмены";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаОткрытие_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_НачисленияКредитовИДепозитов_Получение
Процедура ДобавитьПОД_Документ_НачисленияКредитовИДепозитов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_НачисленияКредитовИДепозитов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.НачислениеКредитовДепозитов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачисленияКредитовИДепозитов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте_Получение
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДС_Получение
Процедура ДобавитьПОД_Документ_ОстаткиБезналичныхДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиБезналичныхДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДС_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиЗадолжПодотчетников_Получение
Процедура ДобавитьПОД_Документ_ОстаткиЗадолжПодотчетников_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиЗадолжПодотчетников_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиЗадолжПодотчетников_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиКредитовЗаймов_Получение
Процедура ДобавитьПОД_Документ_ОстаткиКредитовЗаймов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиКредитовЗаймов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовПоКредитамЗаймам";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиКредитовЗаймов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиНаличныхДС_Получение
Процедура ДобавитьПОД_Документ_ОстаткиНаличныхДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиНаличныхДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДС_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетн_Получение
Процедура ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетн_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиПерерасходаПодотчетн_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиПерерасходаПодотчетн_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПокупателямиАвансы_Получение
Процедура ДобавитьПОД_Документ_ОстаткиРасчСПокупателямиАвансы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчСПокупателямиАвансы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчСПокупателямиАвансы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПокупателямиДолги_Получение
Процедура ДобавитьПОД_Документ_ОстаткиРасчСПокупателямиДолги_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчСПокупателямиДолги_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчСПокупателямиДолги_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПоставщикамиАвансы_Получение
Процедура ДобавитьПОД_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчСПоставщикамиАвансы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчСПоставщикамиАвансы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПоставщикамиДолги_Получение
Процедура ДобавитьПОД_Документ_ОстаткиРасчСПоставщикамиДолги_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчСПоставщикамиДолги_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчСПоставщикамиДолги_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ_Получение
Процедура ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиСобственныхТМЦ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПереданная_Получение
Процедура ДобавитьПОД_Документ_ОстаткиТараПереданная_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТараПереданная_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиТараПереданная";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПереданная_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПринятая_Получение
Процедура ДобавитьПОД_Документ_ОстаткиТараПринятая_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТараПринятая_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиТараПринятая";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПринятая_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомис_Получение
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомис_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТоваровПереданныхНаКомис_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПереданныхНаКомис_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомис_Получение
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомис_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТоваровПринятыхНаКомис_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомис_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияПС_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РеализацияПС_Получение = ДанныеXDTO.Свойство("ПодарочныеСертификаты") И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОВнутренняяПередача_Получение
Процедура ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОВнутренняяПередача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПоступлениеИзКассыККМ_Получение
Процедура ДобавитьПОД_Документ_ПКОПоступлениеИзКассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПоступлениеИзКассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПоступлениеИзКассыККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПоступлениеИзКассыККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПрочееОприходованиеТоваров_Получение
Процедура ДобавитьПОД_Документ_ПрочееОприходованиеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПрочееОприходованиеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВнутренняяПередача_Получение
Процедура ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВнутренняяПередача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыдачаВКассуККМ_Получение
Процедура ДобавитьПОД_Документ_РКОВыдачаВКассуККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВыдачаВКассуККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВыдачаВКассуККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыдачаВКассуККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВыплатаЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочаяВыдача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочийРасход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_ПБДС_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗП_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗП_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗП_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗП_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПНаЛС_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗПНаЛС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗПНаЛС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПНаЛС_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПлатежиВБюджет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочееСписание";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочиеРасходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостачТоваров_Получение
Процедура ДобавитьПОД_Документ_СписаниеНедостачТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеНедостачТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеНедостач";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостачТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Получение
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплату_Получение
Процедура ДобавитьПОД_Документ_СчетНаОплату_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетНаОплату_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетПокупателю";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплату_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Получение
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ТаможеннаяДекларация";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Спр_ГруппыАналитическогоУчетаНоменклатуры_Получение
Процедура ДобавитьПОД_Спр_ГруппыАналитическогоУчетаНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Спр_ГруппыАналитическогоУчетаНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Спр_ГруппыАналитическогоУчетаНоменклатуры");
КонецПроцедуры
#КонецОбласти
#Область Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа_Получение
Процедура ДобавитьПОД_Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Спр_ГруппыФинансовогоУчетаРасчетов_Получение
Процедура ДобавитьПОД_Спр_ГруппыФинансовогоУчетаРасчетов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Спр_ГруппыФинансовогоУчетаРасчетов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыНастроекФинансовогоУчетаРасчетов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ГрФинансовогоУчетаРасчетов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанкиГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанкиГруппа = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаОрганизаций_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Получение = Ложь;
	ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Получение = Ложь;
	
	Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если Найти(Владелец.ТипЗначения, "Организация")>0 Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Получение = Истина;
		ИначеЕсли Найти(Владелец.ТипЗначения, "Контрагент") > 0
			 ИЛИ Найти(Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Получение = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыПодарочныхСертификатов_Получение
Процедура ДобавитьПОД_Справочник_ВидыПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыПодарочныхСертификатов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГруппаНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_ГруппаНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ГруппаНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Если обе функциональные опции отключены, то грузить договора не имеет смысла.
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами
		И Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками Тогда
	
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Ложь;
		Возврат;
		
	КонецЕсли;
	
	// Определим тип договора для проверки конкретной функциональной опции.
	ТипДоговора = Неопределено;
	ВидДоговора = Неопределено;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидДоговора") Тогда
		
		ВидДоговора = ДанныеXDTO.КлючевыеСвойства.ВидДоговора;
		
		Если  ТипЗнч(ВидДоговора) = Тип("Структура")
			И ВидДоговора.Свойство("Значение") Тогда
		    
		    ТипДоговора = ВидДоговора.Значение;
		    
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТипДоговора)
		Или (Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами
		И (ТипДоговора = "СПокупателем"
		Или ТипДоговора = "СКомиссионером"
		Или ТипДоговора = "СКомиссионеромНаЗакупку"))
		Или (Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками
		И (ТипДоговора = "СПоставщиком"
		Или ТипДоговора = "СКомитентом"
		Или ТипДоговора = "СКомитентомНаЗакупку"
		Или ТипДоговора = "Прочее")) Тогда
		
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Ложь;
		Возврат;
	
	КонецЕсли;
	
	
	// Определим признак ранее созданного виртуального договора. 
	// Если договор был создан из совокупности других объектов, его загружать не следует.
	ДопРеквизиты = Неопределено;
	
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты", ДопРеквизиты)
		И ТипЗнч(ДопРеквизиты) = Тип("ТаблицаЗначений") И ДопРеквизиты.Количество() > 0 Тогда
	
		Для Каждого ДопРеквизит Из ДопРеквизиты Цикл
			Если ДопРеквизит.ЗначениеСвойства = "ВиртуальныйДоговор" Тогда
				// Пришел виртуальный договор.
				ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Ложь;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипДоговора = "СПокупателем" И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		Или ТипДоговора = "СПоставщиком" И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		
		// Если нет ни одного соглашения с настройкой ИспользуютсяДоговорыКонтрагентов,
		// то договор не загружаем.
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Соглашения.Ссылка
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК Соглашения
			|ГДЕ
			|	Соглашения.ИспользуютсяДоговорыКонтрагентов
			|	И НЕ Соглашения.ПометкаУдаления
			|	И Соглашения.Контрагент В (&Контрагенты)
			|	И Соглашения.Организация В (&Организации)
			|");
		
		Если ТипДоговора = "СПоставщиком" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СоглашенияСКлиентами", "СоглашенияСПоставщиками");
		КонецЕсли;
		
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
			И ТипЗнч(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) = Тип("Структура")
			И ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка")
			И ТипЗнч(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Ссылка) = Тип("Структура")
			И ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Ссылка.Свойство("Значение") Тогда
			
			Валюта = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
				Строка(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Ссылка.Значение),
				Тип("СправочникСсылка.Валюты"),
				КомпонентыОбмена);
			Запрос.Текст = Запрос.Текст + Символы.ПС + " И Соглашения.Валюта = &Валюта";
			Запрос.УстановитьПараметр("Валюта", Валюта);
		КонецЕсли;
		
		Контрагенты = Новый Массив;
		Контрагенты.Добавить(ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
			Строка(ДанныеXDTO.КлючевыеСвойства.Контрагент.Ссылка.Значение),
			Тип("СправочникСсылка.Контрагенты"),
			КомпонентыОбмена));
		Контрагенты.Добавить(Справочники.Контрагенты.ПустаяСсылка());
		Организации = Новый Массив;
		Организации.Добавить(ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
			Строка(ДанныеXDTO.КлючевыеСвойства.Организация.Ссылка.Значение),
			Тип("СправочникСсылка.Организации"),
			КомпонентыОбмена));
		Организации.Добавить(Справочники.Организации.ПустаяСсылка());
		Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
		Запрос.УстановитьПараметр("Организации", Организации);
		
		Результат = Запрос.Выполнить();
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = НЕ Результат.Пустой();
		
		Возврат;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Получение
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДокументыФизическихЛиц";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СвойстваОтбор = ДанныеXDTO;
	
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") Тогда
		СвойстваОтбор = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	ФизическоеЛицоОтбор = Неопределено;
	ВидДокументаОтбор   = Неопределено;
	ПериодОтбор         = Неопределено;
	
	СвойстваОтбор.Свойство("ФизическоеЛицоОтбор", ФизическоеЛицоОтбор);
	СвойстваОтбор.Свойство("ВидДокументаОтбор",   ВидДокументаОтбор);
	СвойстваОтбор.Свойство("ПериодОтбор",         ПериодОтбор);
	
	ПравилоКонвертацииФизическиеЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ФизическиеЛица_Получение");
	ПравилоКонвертацииВидыДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыДокументовФизическихЛиц");
	
	ДокументыФЛ = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(ФизическоеЛицоОтбор) Тогда
		ДокументыФЛ.Отбор.Физлицо.Установить(ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, ФизическоеЛицоОтбор, ПравилоКонвертацииФизическиеЛица, "ПолучитьСсылку").Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидДокументаОтбор) Тогда
		ДокументыФЛ.Отбор.ВидДокумента.Установить(ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, ВидДокументаОтбор, ПравилоКонвертацииВидыДокументов, "ПолучитьСсылку").Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПериодОтбор) Тогда
		ДокументыФЛ.Отбор.Период.Установить(ПериодОтбор);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Физлицо.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	
		Для Каждого СтрокаЗаписи Из ДанныеXDTO.Записи Цикл
			ЗаписьДокументыФЛ = ДокументыФЛ.Добавить();
			
			Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Физлицо.Значение) Тогда
				ЗаписьДокументыФЛ.Физлицо = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена, СтрокаЗаписи.ФизическоеЛицо, ПравилоКонвертацииФизическиеЛица, "ПолучитьСсылку").Ссылка;
			Иначе
				ЗаписьДокументыФЛ.Физлицо = ДокументыФЛ.Отбор.Физлицо.Значение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.ВидДокумента.Значение) Тогда
				ЗаписьДокументыФЛ.ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена, СтрокаЗаписи.ВидДокумента, ПравилоКонвертацииВидыДокументов, "ПолучитьСсылку").Ссылка;
			Иначе
				ЗаписьДокументыФЛ.ВидДокумента = ДокументыФЛ.Отбор.ВидДокумента.Значение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Период.Значение) Тогда
				ЗаписьДокументыФЛ.Период = СтрокаЗаписи.Период;
			Иначе
				ЗаписьДокументыФЛ.Период = ДокументыФЛ.Отбор.Период.Значение;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗаписьДокументыФЛ, СтрокаЗаписи, "Серия, Номер, ДатаВыдачи, СрокДействия, КемВыдан, КодПодразделения, Представление");
			
			ЗаписьДокументыФЛ.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументыФЛ.ОбменДанными.Загрузка = Истина;
	ДокументыФЛ.Записать(Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Получение
Процедура ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КассыККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлкПрод_Получение
Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкПрод_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЛицензииПоставщиковАлкПрод_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЛицензииПоставщиковАлкПрод_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОтветственныеЛица_Получение
Процедура ДобавитьПОД_Справочник_ОтветственныеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ОтветственныеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ОтветственныеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ОтветственныеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа_Получение
Процедура ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Группа_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Группа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Группа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДСГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС_Группа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДоходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДоходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДоходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Получение
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиРасходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Файлы_Получение
Процедура ДобавитьПОД_Справочник_Файлы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Файлы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Файлы";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Файлы_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_Справочник_Файлы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	ВладелецФайла = Неопределено;
	Если Не ДанныеXDTO.Свойство("ВладелецФайла", ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ИнструкцияВладелецФайла = ЗначениеВИнструкциюПКО(КомпонентыОбмена, ВладелецФайла);
	Если ИнструкцияВладелецФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользованиеПКО.Свойство(ИнструкцияВладелецФайла.ИмяПКО) Тогда
		ИспользованиеПКО[ИнструкцияВладелецФайла.ИмяПКО] = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы_Получение
Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЭквайринговыеТерминалы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Получение");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр(ПравилаКонвертации);
		ДобавитьПКО_Док_ПрочееОприходование_ВыпускПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчетИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АктВыполненныхРабот_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АктВыполненныхРаботРТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АннулированиеПС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВЗ_НашаОрганизация(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВЗ_ОрганизацияДебитор(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВЗ_ОрганизацияКредитор(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнесениеДСВКассуККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутреннееПотребление_ВПроизводство_Отпр(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутреннееПотребление_ВСписание_Отпр(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратПС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыемкаДСИзКассыККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаПереводДСВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСКонвВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаОткрытие_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Оприходование(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Списание(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_СписаниеЗапасов(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Оприходование(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Списание(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_СписаниеЗапасов(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачисленияКредитовИДепозитов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиЗадолжПодотчетников_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиКредитовЗаймов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетн_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчСПокупателямиДолги_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПереданная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПринятая_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионераОСписании_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссияОрганизСписаниеКомиссионер(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссияОрганизСписаниеКомитент(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОВнутренняяПередача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПУПАЧерезПодотчетноеЛицо_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияУслугПрочихАктивов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВнутренняяПередача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗПРаботнику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров(ПравилаКонвертации);
		ДобавитьПКО_Документ_СЗ_КорректировкаДолга(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостачТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплату_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданныйАванс_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураКомиссионеру_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураКомитента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученныйАванс_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученныйИК_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученныйИКК_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ(ПравилаКонвертации);
		ДобавитьПКО_ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПередачаМеждуОрганизациями_РТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Банки_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ГруппыФинУчетаНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ГрФинансовогоУчетаРасчетов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКредитовИДепозитов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыИзФизЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЛицензииПоставщиковАлкПрод_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОтветственныеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации);
	
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_АннулированиеПС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутреннееПотреблениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратПС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаПереводДСВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризационнаяОпись_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаОткрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачисленияКредитовИДепозитов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиЗадолжПодотчетников_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиКредитовЗаймов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПереданная_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПринятая_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПервичныйДокументИзСтруктуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияПС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗП_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостачТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплату_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ГруппыФинУчетаНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ГрФинансовогоУчетаРасчетов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКредитов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомерГТД_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОКВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОКП(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОтветственныеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПодарочныеСертификаты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПодарочныеСертификатыБезВладельца(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайрингТерм_Получение_КлючСв(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайрингТермБезНомера_Получение_КлючСв(ПравилаКонвертации);
	КонецЕсли;
	
	ДобавитьПКО_Спр_ГруппыАналитическогоУчетаНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиРасходов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации);
КонецПроцедуры

#Область ДобавитьПКС
Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры
#КонецОбласти

#Область Отправка
#Область ВозвратМеждуОрганизациями_ОтПокупателя_Отправка
Процедура ДобавитьПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ВозвратМеждуОрганизациями_ОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДокументПоступления",   "ДокументРеализации", , "ПередачаМеждуОрганизациями_РТУ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",              "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                      "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ПокупателемВыставляетсяСчетФактураНаВозврат", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", НачалоДня(ДанныеИБ.Дата));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов);
	Иначе
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.Валюта);
	КонецЕсли;
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.ОрганизацияПолучатель;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеXDTO.ВалютаВзаиморасчетов;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах =
		ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеXDTO.ВалютаВзаиморасчетов;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКлиента");
		ПараметрыПоУмолчанию.ВидДоговора = "СПокупателем";
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКомиссионера");
		ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером";
	КонецЕсли;
	ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Ложь);
	
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
		
		РеквизитыСчетФактуры = Неопределено;
		Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(ДанныеИБ.Ссылка, ДанныеИБ.ОрганизацияПолучатель, РеквизитыСчетФактуры);
		ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", ЗначениеЗаполнено(РеквизитыСчетФактуры.Ссылка));
	
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Организация, КомпонентыОбмена);
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК Док
		|ГДЕ
		|	Док.ДокументОснование = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерИсправления УБЫВ");
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Истина);
		КонецЕсли;
	КонецЕсли;
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("Договор", Договор);
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеXDTO.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	// Табличная часть
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|			ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
		|			ТОГДА ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Себестоимость,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасовПолучателя.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена КАК Цена,
		|	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ВидыЗапасов.Количество) КАК Количество,
		|	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
		|	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВидыЗапасов.Себестоимость) КАК Себестоимость,
		|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения,
		|	ВидыЗапасов.ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки";
	
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ВозвратМеждуОрганизациями_Поставщику_Отправка
Процедура ДобавитьПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ВозвратМеждуОрганизациями_Поставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДокументПоступления",       "ДокументПоступления", , "ПередачаМеждуОрганизациями_ПТУ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов);
	Иначе
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.Валюта);
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеXDTO.ВалютаВзаиморасчетов;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах =
		ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеXDTO.ВалютаВзаиморасчетов;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратПоставщику");
		ПараметрыПоУмолчанию.ВидДоговора = "СПоставщиком";
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратКомитенту");
		ПараметрыПоУмолчанию.ВидДоговора = "СКомитентом";
	КонецЕсли;
	
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.ОрганизацияПолучатель, КомпонентыОбмена);
	КонецЕсли;
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор", ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеXDTO.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	// Табличная часть
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|			ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена КАК Цена,
		|	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ВидыЗапасов.Количество) КАК Количество,
		|	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
		|	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки";
		
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ТаблицаТовары.Колонки.Добавить("ТипЗапасов");
	ТаблицаТовары.ЗаполнитьЗначения(?(ДанныеXDTO.ВидОперации = "ВозвратПоставщику", "СобственныеТовары", "КомиссионныеТовары"), "ТипЗапасов");
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр
Процедура ДобавитьПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПрочееОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПередачи", 1, "Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеСпособаОтраженияРасходов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Номенклатура,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СтатьяРасходов.Наименование КАК СтатьяРасходовНаименование,
		|	СтатьяРасходов.КорреспондирующийСчет КАК СтатьяРасходовКорСчет,
		|	Количество КАК Количество,
		|	ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПартияТМЦВЭксплуатации.Документ КАК ДокументПередачиСсылка,
		|	""СобственныеТовары"" КАК ТипЗапасов
		|ИЗ
		|	Документ.ПрочееОприходованиеТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ТаблицаТовары.Колонки.Добавить("НаименованиеСпособаОтраженияРасходов");
	ТаблицаТовары.Колонки.Добавить("ДокументПередачи");
	Для Каждого Строка Из ТаблицаТовары Цикл
		Строка.НаименованиеСпособаОтраженияРасходов = Строка.СтатьяРасходовНаименование;
	
		Если ЗначениеЗаполнено(Строка.СтатьяРасходовКорСчет) Тогда
			НаименованиеСпособаОтраженияРасходов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	    		НСтр("ru='%1 счет( %2)'"),
	    		СокрЛП(Строка.НаименованиеСпособаОтраженияРасходов),
	    		Строка.СтатьяРасходовКорСчет);
			Строка.НаименованиеСпособаОтраженияРасходов = НаименованиеСпособаОтраженияРасходов;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДокументПередачиСсылка) Тогда
			Если ТипЗнч(Строка.ДокументПередачиСсылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
				Строка.ДокументПередачи = Строка.ДокументПередачиСсылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Док_ПрочееОприходование_ВыпускПродукции_Отправка
Процедура ДобавитьПКО_Док_ПрочееОприходование_ВыпускПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Док_ПрочееОприходование_ВыпускПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПрочееОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Док_ПрочееОприходование_ВыпускПродукции_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "СчетЗатрат", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продукция");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Док_ПрочееОприходование_ВыпускПродукции_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", "ВыпускПродукцииНаСклад");
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("Подразделение", Неопределено);
	Если ЗначениеЗаполнено(СкладДляВыгрузки) И ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладДляВыгрузки, "Подразделение");
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(Подразделение, ДанныеИБ.Организация);
			
			СтруктураДанныеПодразделения = Новый Структура(
				"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
				Строка(Подразделение),
				РегистрацияПодразделенияВНалоговомОргане);
			
			Инструкция = Новый Структура(
				"Значение, ИмяПКО",
				СтруктураДанныеПодразделения,
				"Справочник_Подразделения_ИзСтруктуры");
			
			ДанныеXDTO.Вставить("Подразделение", Инструкция);
		КонецЕсли;	
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		СчетЗатратСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Товары[0].СтатьяРасходов, "КорреспондирующийСчет");
		ДанныеXDTO.Вставить("СчетЗатрат", СчетЗатратСтрокой);
	КонецЕсли;
	ДанныеXDTO.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("РегВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	
	Запрос.Текст = "ВЫБРАТЬ
			|	Продукция.Номенклатура,
			|	Продукция.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	Продукция.Количество,
			|	ВЫРАЗИТЬ(Продукция.Цена * ВЫБОР
			|		КОГДА &РегВалюта <> &УпрВалюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЧИСЛО(10,2)) КАК Цена,
			|	ВЫРАЗИТЬ(Продукция.Сумма * ВЫБОР
			|		КОГДА &РегВалюта <> &УпрВалюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЧИСЛО(10,2)) КАК Сумма
			|ИЗ
			|	Документ.ПрочееОприходованиеТоваров.Товары КАК Продукция
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
			|		ПО (ИСТИНА)
			|ГДЕ
			|	Продукция.Ссылка = &Ссылка";
				   
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Продукция", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Валюта",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов", "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",     "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",     "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",      "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПоставщикам");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	
	// Данные шапки документа необходимы для вычисления курса и кратности.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК КратностьВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Валюта КАК Валюта) КАК ВалютаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
	|		ПО (КурсыВалютСрезПоследних.Валюта = ВалютаДокумента.Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходы.Контрагент,
	|	ПрочиеРасходы.Сумма,
	|	ПрочиеРасходы.СтавкаНДС,
	|	ПрочиеРасходы.СуммаНДС,
	|	ПрочиеРасходы.СтатьяДвиженияДенежныхСредств,
	|	ПрочиеРасходы.Подразделение,
	|	ПрочиеРасходы.СтатьяРасходов,
	|	ПрочиеРасходы.СчетУчета,
	|	ПрочиеРасходы.НомерВходящегоДокумента,
	|	ПрочиеРасходы.ДатаВходящегоДокумента,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента,
	|	ПрочиеРасходы.Комментарий,
	|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов1
	|ПОМЕСТИТЬ ВТПрочиеРасходы
	|ИЗ
	|	&ПрочиеРасходы КАК ПрочиеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Контрагент,
	|	ОплатаПоставщикам.Сумма,
	|	ОплатаПоставщикам.СуммаВзаиморасчетов,
	|	ОплатаПоставщикам.Комментарий,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	ОплатаПоставщикам.Заказ,
	|	ОплатаПоставщикам.ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ВТОплатаПоставщикам
	|ИЗ
	|	&ОплатаПоставщикам КАК ОплатаПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	NULL КАК Номенклатура,
	|	АвансовыйОтчетПрочиеРасходы.Контрагент КАК Поставщик,
	|	АвансовыйОтчетПрочиеРасходы.Сумма КАК Сумма,
	|	АвансовыйОтчетПрочиеРасходы.СтавкаНДС КАК СтавкаНДС,
	|	АвансовыйОтчетПрочиеРасходы.СуммаНДС КАК СуммаНДС,
	|	АвансовыйОтчетПрочиеРасходы.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	АвансовыйОтчетПрочиеРасходы.Подразделение КАК Подразделение,
	|	АвансовыйОтчетПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	АвансовыйОтчетПрочиеРасходы.СчетУчета КАК СчетУчета,
	|	ЛОЖЬ КАК ПредъявленСФ,
	|	АвансовыйОтчетПрочиеРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	АвансовыйОтчетПрочиеРасходы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	АвансовыйОтчетПрочиеРасходы.НаименованиеВходящегоДокумента КАК НаименованиеВходящегоДокумента,
	|	NULL КАК ДатаСФ,
	|	NULL КАК НомерСФ,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(АвансовыйОтчетПрочиеРасходы.Комментарий, 0, 1) = """"
	|			ТОГДА ЕСТЬNULL(СтатьиРасходов.Наименование, ЕСТЬNULL(СтатьиАктивовПассивов.Наименование, """"))
	|		ИНАЧЕ АвансовыйОтчетПрочиеРасходы.Комментарий
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ВТПрочиеРасходы КАК АвансовыйОтчетПрочиеРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО (СтатьиРасходов.Ссылка = АвансовыйОтчетПрочиеРасходы.СтатьяРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|		ПО (СтатьиАктивовПассивов.Ссылка = АвансовыйОтчетПрочиеРасходы.СтатьяРасходов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетОплатаПоставщикам.Контрагент,
	|	АвансовыйОтчетОплатаПоставщикам.Сумма,
	|	АвансовыйОтчетОплатаПоставщикам.СуммаВзаиморасчетов,
	|	АвансовыйОтчетОплатаПоставщикам.Комментарий КАК Содержание,
	|	АвансовыйОтчетОплатаПоставщикам.НомерВходящегоДокумента,
	|	АвансовыйОтчетОплатаПоставщикам.ДатаВходящегоДокумента,
	|	АвансовыйОтчетОплатаПоставщикам.Заказ КАК Заказ,
	|	АвансовыйОтчетОплатаПоставщикам.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсВалюты.Курс, 1) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсВалюты.Кратность, 1) КАК КратностьВзаиморасчетов
	|ИЗ
	|	ВТОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсВалюты
	|		ПО АвансовыйОтчетОплатаПоставщикам.ВалютаВзаиморасчетов = КурсВалюты.Валюта";
	
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("Валюта", ДанныеИБ.Валюта);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("ПрочиеРасходы", ДанныеИБ.ПрочиеРасходы);
		Запрос.УстановитьПараметр("ОплатаПоставщикам", ДанныеИБ.ОплатаПоставщикам);
	Иначе
		Запрос.УстановитьПараметр("ПрочиеРасходы", ДанныеИБ.ПрочиеРасходы.Выгрузить());
		Запрос.УстановитьПараметр("ОплатаПоставщикам", ДанныеИБ.ОплатаПоставщикам.Выгрузить());
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДанныеОперации = РезультатыЗапроса[0].Выбрать();
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсДокумента", ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьДокумента", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	
	ТабПрочее = РезультатыЗапроса[3].Выгрузить(); 
	ТабПрочее.Колонки.Добавить("ПодразделениеЗатрат");
	ТабПрочее.Колонки.Добавить("СчетЗатрат");
	ТабПрочее.Колонки.Добавить("СтатьяЗатрат");
	Для Каждого СтрокаПрочее Из ТабПрочее Цикл
		Если ЗначениеЗаполнено(СтрокаПрочее.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаПрочее.Подразделение);
			СтрокаПрочее.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
	
		СчетЗатрат = СчетУчетаПоСтатье(СтрокаПрочее.СтатьяРасходов, ДанныеИБ.Организация, СтрокаПрочее.Подразделение, СтрокаПрочее.СчетУчета);
	
		Если ТипЗнч(СтрокаПрочее.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаПрочее.СтатьяЗатрат = СтрокаПрочее.СтатьяРасходов;
			Если ЭтоУТ() 
				И ЗначениеЗаполнено(СтрокаПрочее.СтатьяДвиженияДенежныхСредств) Тогда
				СчетЗатратДДС = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПрочее.СтатьяДвиженияДенежныхСредств, 
											"КорреспондирующийСчет"));
				Если ЗначениеЗаполнено(СчетЗатратДДС) Тогда
					СчетЗатрат = СчетЗатратДДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаПрочее.СчетЗатрат = СчетЗатрат;
	КонецЦикла;
	ДанныеXDTO.Вставить("ПрочиеРасходы", ТабПрочее);
	
	ТабОплатаПоставщикам = РезультатыЗапроса[4].Выгрузить(); 
	// Заполнение договора
	ТабОплатаПоставщикам.Колонки.Добавить("Договор");
	Для Каждого СтрокаТаблицы Из ТабОплатаПоставщикам Цикл
		ТекДоговор = Неопределено;
		РасчетыВУсловныхЕдиницах = Ложь;
		Соглашение = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ТекДоговор = СтрокаТаблицы.Заказ;
			КонецЕсли;
				
			Если ТекДоговор = Неопределено Тогда
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					ТекДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Договор");
				Иначе
					// Не удалось определить договор из заказа. Договор будет вычислен позже.
					ТекДоговор = Неопределено;
				КонецЕсли;
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено Тогда
					Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Соглашение");
				Иначе
					// Не удалось определить соглашение из заказа. Соглашение будет вычислено позже.
					Соглашение = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТекДоговор <> Неопределено И ЗначениеЗаполнено(ТекДоговор) Тогда
			СтрокаТаблицы.Договор = ТекДоговор;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.ВидДоговора = "СПоставщиком";
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент = СтрокаТаблицы.Контрагент;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		СтрокаТаблицы.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, СтрокаТаблицы.Заказ, ДанныеИБ);
	КонецЦикла;
	ДанныеXDTO.Вставить("ОплатаПоставщикам", ТабОплатаПоставщикам);
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	ДанныеXDTO.Вставить("Сумма", ТабПрочее.Итог("Сумма") + ТабОплатаПоставщикам.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчетИзСтруктуры_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчетИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АвансовыйОтчетИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчетИзСтруктуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "КоличествоДокументов", 1);
	ДобавитьПКС(СвойстваШапки, "", "КоличествоЛистов", 1);
	ДобавитьПКС(СвойстваШапки, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "", "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "", "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "", "НазначениеАванса", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Ответственный", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "", "ПодотчетноеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "", "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "", "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВыданныеАвансы");
	ДобавитьПКС(СвойстваТЧ, "", "Документ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаКонтрагентам");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПоставщикам");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчетИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	
	// Данные шапки документа необходимы для вычисления курса и кратности.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК КратностьВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Валюта КАК Валюта) КАК ВалютаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
	|		ПО (КурсыВалютСрезПоследних.Валюта = ВалютаДокумента.Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходы.Контрагент,
	|	ПрочиеРасходы.Сумма,
	|	ПрочиеРасходы.СтавкаНДС,
	|	ПрочиеРасходы.СуммаНДС,
	|	ПрочиеРасходы.СтатьяДвиженияДенежныхСредств,
	|	ПрочиеРасходы.Подразделение,
	|	ПрочиеРасходы.СтатьяРасходов,
	|	ПрочиеРасходы.СчетУчета,
	|	ПрочиеРасходы.НомерВходящегоДокумента,
	|	ПрочиеРасходы.ДатаВходящегоДокумента,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента,
	|	ПрочиеРасходы.Комментарий
	|ПОМЕСТИТЬ ВТПрочиеРасходы
	|ИЗ
	|	&ПрочиеРасходы КАК ПрочиеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Контрагент,
	|	ОплатаПоставщикам.Сумма,
	|	ОплатаПоставщикам.СуммаВзаиморасчетов,
	|	ОплатаПоставщикам.Комментарий,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	ОплатаПоставщикам.Заказ,
	|	ОплатаПоставщикам.ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ВТОплатаПоставщикам
	|ИЗ
	|	&ОплатаПоставщикам КАК ОплатаПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	NULL КАК Номенклатура,
	|	АвансовыйОтчетПрочиеРасходы.Контрагент КАК Поставщик,
	|	АвансовыйОтчетПрочиеРасходы.Сумма КАК Сумма,
	|	АвансовыйОтчетПрочиеРасходы.СтавкаНДС КАК СтавкаНДС,
	|	АвансовыйОтчетПрочиеРасходы.СуммаНДС КАК СуммаНДС,
	|	АвансовыйОтчетПрочиеРасходы.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	АвансовыйОтчетПрочиеРасходы.Подразделение КАК Подразделение,
	|	АвансовыйОтчетПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	АвансовыйОтчетПрочиеРасходы.СчетУчета КАК СчетУчета,
	|	ЛОЖЬ КАК ПредъявленСФ,
	|	АвансовыйОтчетПрочиеРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	АвансовыйОтчетПрочиеРасходы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	АвансовыйОтчетПрочиеРасходы.НаименованиеВходящегоДокумента КАК НаименованиеВходящегоДокумента,
	|	NULL КАК ДатаСФ,
	|	NULL КАК НомерСФ,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(АвансовыйОтчетПрочиеРасходы.Комментарий, 0, 1) = """"
	|			ТОГДА ЕСТЬNULL(СтатьиРасходов.Наименование, ЕСТЬNULL(СтатьиАктивовПассивов.Наименование, """"))
	|		ИНАЧЕ АвансовыйОтчетПрочиеРасходы.Комментарий
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ВТПрочиеРасходы КАК АвансовыйОтчетПрочиеРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО (СтатьиРасходов.Ссылка = АвансовыйОтчетПрочиеРасходы.СтатьяРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|		ПО (СтатьиАктивовПассивов.Ссылка = АвансовыйОтчетПрочиеРасходы.СтатьяРасходов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетОплатаПоставщикам.Контрагент,
	|	АвансовыйОтчетОплатаПоставщикам.Сумма,
	|	АвансовыйОтчетОплатаПоставщикам.СуммаВзаиморасчетов,
	|	АвансовыйОтчетОплатаПоставщикам.Комментарий КАК Содержание,
	|	АвансовыйОтчетОплатаПоставщикам.НомерВходящегоДокумента,
	|	АвансовыйОтчетОплатаПоставщикам.ДатаВходящегоДокумента,
	|	АвансовыйОтчетОплатаПоставщикам.Заказ КАК Заказ,
	|	АвансовыйОтчетОплатаПоставщикам.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсВалюты.Курс, 1) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсВалюты.Кратность, 1) КАК КратностьВзаиморасчетов
	|ИЗ
	|	ВТОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсВалюты
	|		ПО АвансовыйОтчетОплатаПоставщикам.ВалютаВзаиморасчетов = КурсВалюты.Валюта";
	
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("Валюта", ДанныеИБ.Валюта);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("ПрочиеРасходы", ДанныеИБ.ПрочиеРасходы);
		Запрос.УстановитьПараметр("ОплатаПоставщикам", ДанныеИБ.ОплатаПоставщикам);
	Иначе
		Запрос.УстановитьПараметр("ПрочиеРасходы", ДанныеИБ.ПрочиеРасходы.Выгрузить());
		Запрос.УстановитьПараметр("ОплатаПоставщикам", ДанныеИБ.ОплатаПоставщикам.Выгрузить());
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДанныеОперации = РезультатыЗапроса[0].Выбрать();
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсДокумента", ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьДокумента", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	
	ТабПрочее = РезультатыЗапроса[3].Выгрузить(); 
	ТабПрочее.Колонки.Добавить("ПодразделениеЗатрат");
	ТабПрочее.Колонки.Добавить("СчетЗатрат");
	ТабПрочее.Колонки.Добавить("СтатьяЗатрат");
	Для Каждого СтрокаПрочее Из ТабПрочее Цикл
		Если ЗначениеЗаполнено(СтрокаПрочее.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаПрочее.Подразделение);
			СтрокаПрочее.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
	
		СчетЗатрат = СчетУчетаПоСтатье(СтрокаПрочее.СтатьяРасходов, ДанныеИБ.Организация, СтрокаПрочее.Подразделение, СтрокаПрочее.СчетУчета);
	
		Если ТипЗнч(СтрокаПрочее.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаПрочее.СтатьяЗатрат = СтрокаПрочее.СтатьяРасходов;
		КонецЕсли;
		СтрокаПрочее.СчетЗатрат = СчетЗатрат;
	КонецЦикла;
	ДанныеXDTO.Вставить("ПрочиеРасходы", ТабПрочее);
	
	ТабОплатаПоставщикам = РезультатыЗапроса[4].Выгрузить(); 
	// Заполнение договора
	ТабОплатаПоставщикам.Колонки.Добавить("Договор");
	Для Каждого СтрокаТаблицы Из ТабОплатаПоставщикам Цикл
		ТекДоговор = Неопределено;
		РасчетыВУсловныхЕдиницах = Ложь;
		Соглашение = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ТекДоговор = СтрокаТаблицы.Заказ;
			КонецЕсли;
				
			Если ТекДоговор = Неопределено Тогда
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					ТекДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Договор");
				Иначе
					// Не удалось определить договор из заказа. Договор будет вычислен позже.
					ТекДоговор = Неопределено;
				КонецЕсли;
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено Тогда
					Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Соглашение");
				Иначе
					// Не удалось определить соглашение из заказа. Соглашение будет вычислено позже.
					Соглашение = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТекДоговор <> Неопределено И ЗначениеЗаполнено(ТекДоговор) Тогда
			СтрокаТаблицы.Договор = ТекДоговор;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.ВидДоговора = "СПоставщиком";
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент = СтрокаТаблицы.Контрагент;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", СтрокаТаблицы.Заказ, Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЦикла;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.АвансовыйОтчет.ОплатаКонтрагентам") Тогда
		ДанныеXDTO.Вставить("ОплатаКонтрагентам", ТабОплатаПоставщикам);
	Иначе
		ДанныеXDTO.Вставить("ОплатаПоставщикам", ТабОплатаПоставщикам);
	КонецЕсли;
	
	//ВыданныеАвансы
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.ДокументОснование)Тогда
	
		ИмяПКО = "";
		Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
		ИначеЕсли ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяПКО) Тогда
			ТабАвансы = Новый ТаблицаЗначений;
			ТабАвансы.Колонки.Добавить("Документ");
			ТабАвансы.Колонки.Добавить("Сумма");
			Инструкция = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО);
			
			Стр = ТабАвансы.Добавить();
			Стр.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "СуммаДокумента");
			Стр.Документ = Инструкция;
			
			ДанныеXDTO.Вставить("ВыданныеАвансы", ТабАвансы);
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	ДанныеXDTO.Вставить("Сумма", ТабПрочее.Итог("Сумма") + ТабОплатаПоставщикам.Итог("Сумма"));
	
	Если ДанныеИБ.Свойство("Ссылка")
		И Не ДанныеИБ.Свойство("ВыгружатьУдалениеПоСсылке") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_АктВыполненныхРабот_Отправка
Процедура ДобавитьПКО_Документ_АктВыполненныхРабот_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АктВыполненныхРабот_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АктВыполненныхРабот;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АктВыполненныхРабот";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Заказ", 1, "Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Договор",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "У" + Сред(ДанныеИБ.Номер, 7));
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ГлавныйБухгалтер, "ФизическоеЛицо"));
	ДанныеXDTO.Вставить("Руководитель",     ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Руководитель, "ФизическоеЛицо"));
	
	ДанныеXDTO.Вставить("Заказ", Неопределено);
	Если ЗначениеЗаполнено(ДанныеИБ.ЗаказКлиента) И ТипЗнч(ДанныеИБ.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ДанныеXDTO.Заказ = ДанныеИБ.ЗаказКлиента;
	КонецЕсли;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
	// Дополнительные свойства для поиска договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ЗаполнитьЗначенияСвойств(ПараметрыПоУмолчанию, ДанныеИБ);
		ПараметрыПоУмолчанию.ВидДоговора = "СПокупателем";
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = ВалютаРеглУчета И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.ЗаказКлиента, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ШапкаДокумента = "
	|ВЫБРАТЬ
	|	ДанныеШапкиДокумента.Валюта,
	|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов,
	|	ДанныеШапкиДокумента.Курс КАК КурсВзаиморасчетов,
	|	ДанныеШапкиДокумента.Кратность КАК КратностьВзаиморасчетов
	|ПОМЕСТИТЬ ДанныеШапкиДокумента
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеШапкиДокумента
	|ГДЕ
	|	ДанныеШапкиДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		ДанныеОперации = "
		|ВЫБРАТЬ
		|	ДанныеШапкиДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ДанныеШапкиДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ДанныеОперации = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Док.Валюта
		|					ИЗ
		|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		|		ПО ДанныеШапкиДокумента.Валюта = КурсВалютыДокумента.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	
	УслугиДокумента = "
	|ВЫБРАТЬ
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Содержание КАК Содержание,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Цена КАК Цена,
	|	Услуги.Сумма КАК Сумма,
	|	Услуги.СтавкаНДС КАК СтавкаНДС,
	|	Услуги.СуммаНДС КАК СуммаНДС,
	|	Услуги.НомерСтроки КАК НомерСтрокиДокумента
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШапкаДокумента + ДанныеОперации + УслугиДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",   ДанныеИБ.Дата);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОперации = РезультатЗапроса[1].Выбрать();
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсВзаиморасчетов",      ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	
	ТабУслуги = РезультатЗапроса[2].Выгрузить();
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
КонецПроцедуры
#КонецОбласти
#Область Документ_АктВыполненныхРаботРТУ_Отправка
Процедура ДобавитьПКО_Документ_АктВыполненныхРаботРТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АктВыполненныхРаботРТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АктВыполненныхРабот;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АктВыполненныхРаботРТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1, "ВидыОперацийРеализацияТоваров_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Заказ", 1, "Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Договор",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_АктВыполненныхРаботРТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "У" + Сред(ДанныеИБ.Номер, 7));
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ГлавныйБухгалтер, "ФизическоеЛицо"));
	ДанныеXDTO.Вставить("Руководитель",     ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Руководитель, "ФизическоеЛицо"));
	
	ДанныеXDTO.Вставить("Заказ", Неопределено);
	Если ЗначениеЗаполнено(ДанныеИБ.ЗаказКлиента) И ТипЗнч(ДанныеИБ.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ДанныеXDTO.Заказ = ДанныеИБ.ЗаказКлиента;
	КонецЕсли;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
	// Дополнительные свойства для поиска договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ЗаполнитьЗначенияСвойств(ПараметрыПоУмолчанию, ДанныеИБ);
		ПараметрыПоУмолчанию.ВидДоговора = "СПокупателем";
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = ВалютаРеглУчета И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.ЗаказКлиента, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ШапкаДокумента = "
	|ВЫБРАТЬ
	|	ДанныеШапкиДокумента.Валюта,
	|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов,
	|	ДанныеШапкиДокумента.Курс КАК КурсВзаиморасчетов,
	|	ДанныеШапкиДокумента.Кратность КАК КратностьВзаиморасчетов
	|ПОМЕСТИТЬ ДанныеШапкиДокумента
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеШапкиДокумента
	|ГДЕ
	|	ДанныеШапкиДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		ДанныеОперации = "
		|ВЫБРАТЬ
		|	ДанныеШапкиДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ДанныеШапкиДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ДанныеОперации = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Док.Валюта
		|					ИЗ
		|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		|		ПО ДанныеШапкиДокумента.Валюта = КурсВалютыДокумента.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	
	УслугиДокумента = "
	|ВЫБРАТЬ
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Содержание КАК Содержание,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Цена КАК Цена,
	|	Услуги.Сумма КАК Сумма,
	|	Услуги.СтавкаНДС КАК СтавкаНДС,
	|	Услуги.СуммаНДС КАК СуммаНДС,
	|	Услуги.НомерСтроки КАК НомерСтрокиДокумента
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШапкаДокумента + ДанныеОперации + УслугиДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",   ДанныеИБ.Дата);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОперации = РезультатЗапроса[1].Выбрать();
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсВзаиморасчетов",      ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	
	ТабУслуги = РезультатЗапроса[2].Выгрузить();
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
КонецПроцедуры
#КонецОбласти
#Область Документ_АннулированиеПС_Отправка
Процедура ДобавитьПКО_Документ_АннулированиеПС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АннулированиеПС_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АннулированиеПодарочныхСертификатов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АннулированиеПС_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Проведен",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПодарочныеСертификаты", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "ВидПодарочногоСертификата", "ВидПодарочногоСертификата", 1);
	ДобавитьПКС(СвойстваТЧ, "МагнитныйКод",              "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "Код",                       "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВВалютеСертификата",   "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "Штрихкод",                  "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_АннулированиеПС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	АннулированиеПодарочныхСертификатовПодарочныеСертификаты.СуммаВВалютеСертификата КАК Сумма,
		|	ПодарочныеСертификаты.Код КАК СерийныйНомер,
		|	ПодарочныеСертификаты.Штрихкод,
		|	ПодарочныеСертификаты.МагнитныйКод,
		|	ПодарочныеСертификаты.Владелец КАК ВидПодарочногоСертификатаСсылка
		|ИЗ
		|	Документ.АннулированиеПодарочныхСертификатов.ПодарочныеСертификаты КАК АннулированиеПодарочныхСертификатовПодарочныеСертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|		ПО АннулированиеПодарочныхСертификатовПодарочныеСертификаты.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
		|ГДЕ
		|	АннулированиеПодарочныхСертификатовПодарочныеСертификаты.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ПодарочныеСертификаты = Запрос.Выполнить().Выгрузить();
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		ПодарочныеСертификаты.Колонки.Добавить("ВидПодарочногоСертификата");
		Для Каждого ПС Из ПодарочныеСертификаты Цикл
			ПС.ВидПодарочногоСертификата = Новый Структура("Значение, ИмяПКО",
				ПС.ВидПодарочногоСертификатаСсылка, "Справочник_ВидыПодарочныхСертификатов");
		КонецЦикла;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВЗ_НашаОрганизация
Процедура ДобавитьПКО_Документ_ВЗ_НашаОрганизация(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВЗ_НашаОрганизация";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВзаимозачетЗадолженности;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВЗ_НашаОрганизация_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",              "КонтрагентДебитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",              "КонтрагентКредитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",              "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",              "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВЗ_НашаОрганизация_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "В" + Сред(ДанныеИБ.Номер, 7));
		Возврат;
	КонецЕсли;	
	
	СсылкаДебитор     = ДанныеИБ.КонтрагентДебитор;
	СсылкаКредитор    = ДанныеИБ.КонтрагентКредитор;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "В" + Сред(ДанныеИБ.Номер, 7));
	
	ДанныеXDTO.Вставить("ВидОперации", "ПроведениеВзаимозачета");
	ДанныеXDTO.Вставить("Валюта",      ВалютаРегламентированногоУчета(КомпонентыОбмена));
	
	ВыгрузитьКурсИКратностьДокумента(ДанныеXDTO, КомпонентыОбмена.ПараметрыКонвертации.ВалютаРегламентированногоУчета, ДанныеИБ.Дата);
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	КонтрагентДебитор = СсылкаДебитор;
	Если ТипЗнч(КонтрагентДебитор) = Тип("СправочникСсылка.Организации") Тогда
		КонтрагентДебитор = КонтрагентИзОрганизации(КонтрагентДебитор, КомпонентыОбмена);
	КонецЕсли;
	
	КонтрагентКредитор = СсылкаКредитор;
	Если ТипЗнч(КонтрагентКредитор) = Тип("СправочникСсылка.Организации") Тогда
		КонтрагентКредитор = КонтрагентИзОрганизации(КонтрагентКредитор, КомпонентыОбмена);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("КонтрагентДебитор",  КонтрагентДебитор);
	ДанныеXDTO.Вставить("КонтрагентКредитор", КонтрагентКредитор);
	
	ТаблицаДЗ = ВыгрузитьТаблицуЗадолженности("ДебиторскаяЗадолженность",
		ДанныеИБ.Ссылка, ДанныеXDTO.КонтрагентДебитор, ДанныеИБ.Организация, , КомпонентыОбмена);
	ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ТаблицаДЗ);
	
	ТаблицаКЗ = ВыгрузитьТаблицуЗадолженности("КредиторскаяЗадолженность",
		ДанныеИБ.Ссылка, ДанныеXDTO.КонтрагентКредитор, ДанныеИБ.Организация, , КомпонентыОбмена);
	ДанныеXDTO.Вставить("КредиторскаяЗадолженность", ТаблицаКЗ);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВЗ_ОрганизацияДебитор
Процедура ДобавитьПКО_Документ_ВЗ_ОрганизацияДебитор(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВЗ_ОрганизацияДебитор";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВзаимозачетЗадолженности;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВЗ_ОрганизацияДебитор_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",              "КонтрагентДебитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",              "КонтрагентКредитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",              "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",              "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "СуммаДебиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",              "СуммаКредиторскойЗадолженности", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВЗ_ОрганизацияДебитор_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоВзаимозачетДвухОрганизаций = ДанныеИБ.ДополнительныеСвойства.Свойство("ВзаимозачетСУчастиемДвухОрганизаций");
		
	Если ЭтоВзаимозачетДвухОрганизаций Тогда
		СсылкаОрганизация = ДанныеИБ.ОрганизацияКредитор;
		СсылкаДебитор     = ДанныеИБ.Организация;
		СсылкаКредитор    = ДанныеИБ.КонтрагентКредитор;
		ВидОперации       = "ПроведениеВзаимозачета";
	Иначе
		СсылкаОрганизация = ДанныеИБ.КонтрагентДебитор;
		СсылкаДебитор     = ДанныеИБ.КонтрагентКредитор;
		СсылкаКредитор    = ДанныеИБ.Организация;
		ВидОперации       = "ПереносЗадолженности";
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "ВД" + Сред(ДанныеИБ.Номер, 8));
		ДанныеXDTO.Вставить("Организация", СсылкаОрганизация);
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "ВД" + Сред(ДанныеИБ.Номер, 8));
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", СсылкаОрганизация);
	
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	ДанныеXDTO.Вставить("Валюта", ВалютаРеглУчета);
	ВыгрузитьКурсИКратностьДокумента(ДанныеXDTO, ВалютаРеглУчета, ДанныеИБ.Дата);
	
	СуммаДебиторскойЗадолженности  = ДанныеИБ.ДебиторскаяЗадолженность.Итог("СуммаРегл");
	СуммаКредиторскойЗадолженности = ДанныеИБ.КредиторскаяЗадолженность.Итог("СуммаРегл");
	ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", СуммаДебиторскойЗадолженности);
	ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", СуммаКредиторскойЗадолженности);
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	Если ТипЗнч(СсылкаКредитор) = Тип("СправочникСсылка.Организации") Тогда
		СсылкаНаКонтрагента = КонтрагентИзОрганизации(СсылкаКредитор, КомпонентыОбмена);
		ДанныеXDTO.Вставить("КонтрагентКредитор", СсылкаНаКонтрагента);
	Иначе
		ДанныеXDTO.Вставить("КонтрагентКредитор", СсылкаКредитор);
	КонецЕсли;
	
	Если ТипЗнч(СсылкаДебитор) = Тип("СправочникСсылка.Организации") Тогда
		СсылкаНаКонтрагента = КонтрагентИзОрганизации(СсылкаДебитор, КомпонентыОбмена);
		ДанныеXDTO.Вставить("КонтрагентДебитор", СсылкаНаКонтрагента);
	Иначе
		ДанныеXDTO.Вставить("КонтрагентДебитор", СсылкаДебитор);
	КонецЕсли;
	
	КредиторскаяЗадолженность = ВыгрузитьТаблицуЗадолженности(
		?(ЭтоВзаимозачетДвухОрганизаций, "КредиторскаяЗадолженность", "ДебиторскаяЗадолженность"),
		ДанныеИБ.Ссылка,
		ДанныеXDTO.КонтрагентКредитор,
		СсылкаОрганизация,
		?(ЭтоВзаимозачетДвухОрганизаций, Неопределено, СсылкаКредитор),
		КомпонентыОбмена);
	ДанныеXDTO.Вставить("КредиторскаяЗадолженность", КредиторскаяЗадолженность);
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация              = СсылкаОрганизация;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ВалютаРеглУчета;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	ПараметрыПоУмолчанию.ВидДоговора              = "Прочее"; 
	ПараметрыПоУмолчанию.Контрагент               = ДанныеXDTO.КонтрагентДебитор;
	
	Если ЭтоВзаимозачетДвухОрганизаций Тогда
		ПараметрыПоУмолчанию.ВидДоговора = ВидДоговораПоОбъектуРасчетовИнтеркампани(СсылкаОрганизация,
			ДанныеИБ.ОбъектРасчетовИнтеркампани, "СПокупателем");
	КонецЕсли;
	
	ДебиторскаяЗадолженность = Новый ТаблицаЗначений;
	ДебиторскаяЗадолженность.Колонки.Добавить("Договор");
	ДебиторскаяЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("Сумма");
	ДебиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	
	ДебиторскаяЗадолженностьСтрока = ДебиторскаяЗадолженность.Добавить();
	ДебиторскаяЗадолженностьСтрока.КратностьВзаиморасчетов = 1;
	ДебиторскаяЗадолженностьСтрока.КурсВзаиморасчетов = 1;
	ДебиторскаяЗадолженностьСтрока.Сумма = СуммаДебиторскойЗадолженности;
	ДебиторскаяЗадолженностьСтрока.СуммаВзаиморасчетов = СуммаДебиторскойЗадолженности;
	ДебиторскаяЗадолженностьСтрока.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВЗ_ОрганизацияКредитор
Процедура ДобавитьПКО_Документ_ВЗ_ОрганизацияКредитор(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВЗ_ОрганизацияКредитор";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВзаимозачетЗадолженности;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВЗ_ОрганизацияКредитор_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",              "КонтрагентДебитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",              "КонтрагентКредитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",              "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",              "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "СуммаДебиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",              "СуммаКредиторскойЗадолженности", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВЗ_ОрганизацияКредитор_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоВзаимозачетДвухОрганизаций = ДанныеИБ.ДополнительныеСвойства.Свойство("ВзаимозачетСУчастиемДвухОрганизаций");
		
	Если ЭтоВзаимозачетДвухОрганизаций Тогда
		СсылкаОрганизация = ДанныеИБ.Организация;
		СсылкаДебитор     = ДанныеИБ.КонтрагентДебитор;
		СсылкаКредитор    = ДанныеИБ.ОрганизацияКредитор;
		ВидОперации       = "ПроведениеВзаимозачета";
	Иначе
		СсылкаОрганизация = ДанныеИБ.КонтрагентКредитор;
		СсылкаДебитор     = ДанныеИБ.Организация;
		СсылкаКредитор    = ДанныеИБ.КонтрагентДебитор;
		ВидОперации       = "ПереносЗадолженности";
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "ВК" + Сред(ДанныеИБ.Номер, 8));
		ДанныеXDTO.Вставить("Организация", СсылкаОрганизация);
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "ВК" + Сред(ДанныеИБ.Номер, 8));
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", СсылкаОрганизация);
	
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	ДанныеXDTO.Вставить("Валюта", ВалютаРеглУчета);
	ВыгрузитьКурсИКратностьДокумента(ДанныеXDTO, ВалютаРеглУчета, ДанныеИБ.Дата);
	
	СуммаДебиторскойЗадолженности  = ДанныеИБ.ДебиторскаяЗадолженность.Итог("СуммаРегл");
	СуммаКредиторскойЗадолженности = ДанныеИБ.КредиторскаяЗадолженность.Итог("СуммаРегл");
	ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", СуммаДебиторскойЗадолженности);
	ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", СуммаКредиторскойЗадолженности);
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	Если ТипЗнч(СсылкаДебитор) = Тип("СправочникСсылка.Организации") Тогда
		СсылкаНаКонтрагента = КонтрагентИзОрганизации(СсылкаДебитор, КомпонентыОбмена);
		ДанныеXDTO.Вставить("КонтрагентДебитор", СсылкаНаКонтрагента);
	Иначе
		ДанныеXDTO.Вставить("КонтрагентДебитор", СсылкаДебитор);
	КонецЕсли;
	
	Если ТипЗнч(СсылкаКредитор) = Тип("СправочникСсылка.Организации") Тогда
		СсылкаНаКонтрагента = КонтрагентИзОрганизации(СсылкаКредитор, КомпонентыОбмена);
		ДанныеXDTO.Вставить("КонтрагентКредитор", СсылкаНаКонтрагента);
	Иначе
		ДанныеXDTO.Вставить("КонтрагентКредитор", СсылкаКредитор);
	КонецЕсли;
	
	ДебиторскаяЗадолженность = ВыгрузитьТаблицуЗадолженности(
		?(ЭтоВзаимозачетДвухОрганизаций, "ДебиторскаяЗадолженность", "КредиторскаяЗадолженность"),
		ДанныеИБ.Ссылка,
		ДанныеXDTO.КонтрагентДебитор,
		СсылкаОрганизация,
		?(ЭтоВзаимозачетДвухОрганизаций, Неопределено, СсылкаДебитор),
		КомпонентыОбмена);
	ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность);
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация              = СсылкаОрганизация;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ВалютаРеглУчета;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	ПараметрыПоУмолчанию.ВидДоговора              = "Прочее"; 
	ПараметрыПоУмолчанию.Контрагент               = ДанныеXDTO.КонтрагентКредитор;
	
	Если ЭтоВзаимозачетДвухОрганизаций Тогда
		ПараметрыПоУмолчанию.ВидДоговора = ВидДоговораПоОбъектуРасчетовИнтеркампани(СсылкаОрганизация,
			ДанныеИБ.ОбъектРасчетовИнтеркампани, "СПоставщиком");
	КонецЕсли;
	
	КредиторскаяЗадолженность = Новый ТаблицаЗначений;
	КредиторскаяЗадолженность.Колонки.Добавить("Договор");
	КредиторскаяЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
	КредиторскаяЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
	КредиторскаяЗадолженность.Колонки.Добавить("Сумма");
	КредиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	
	КредиторскаяЗадолженностьСтрока = КредиторскаяЗадолженность.Добавить();
	КредиторскаяЗадолженностьСтрока.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	КредиторскаяЗадолженностьСтрока.КратностьВзаиморасчетов = 1;
	КредиторскаяЗадолженностьСтрока.КурсВзаиморасчетов = 1;
	КредиторскаяЗадолженностьСтрока.Сумма = СуммаКредиторскойЗадолженности;
	КредиторскаяЗадолженностьСтрока.СуммаВзаиморасчетов = СуммаКредиторскойЗадолженности;
	ДанныеXDTO.Вставить("КредиторскаяЗадолженность", КредиторскаяЗадолженность);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнесениеДСВКассуККМ_Отправка
Процедура ДобавитьПКО_Документ_ВнесениеДСВКассуККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнесениеДСВКассуККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВнесениеДенежныхСредствВКассуККМ;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВнесениеДСВКассуККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнесениеДСВКассуККМ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Кассир", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",          "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "НомерКассовойСмены", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнесениеДСВКассуККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураСостояниеКассовойСмены = ПолучитьРеквизитыКассовойСменыНаДату(ДанныеИБ.КассаККМ, ДанныеИБ.Дата);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("НомерКассовойСмены", СтруктураСостояниеКассовойСмены.НомерКассовойСмены);
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКассовойСмены", СтруктураСостояниеКассовойСмены.НомерКассовойСмены);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутреннееПотребление_ВПроизводство_Отпр
Процедура ДобавитьПКО_Документ_ВнутреннееПотребление_ВПроизводство_Отпр(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнутреннееПотребление_ВПроизводство_Отпр";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнутреннееПотребление_ВПроизводство_Отпр_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнутреннееПотребление_ВПроизводство_Отпр_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.СобственныеТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутреннееПотребление_ВСписание_Отпр
Процедура ДобавитьПКО_Документ_ВнутреннееПотребление_ВСписание_Отпр(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнутреннееПотребление_ВСписание_Отпр";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнутреннееПотребление_ВСписание_Отпр_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнутреннееПотребление_ВСписание_Отпр_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "Т" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.КомиссионныеТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр
Процедура ДобавитьПКО_Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "Т" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.КомиссионныеТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра
Процедура ДобавитьПКО_Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеНазначенияИспользования", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеСпособаОтраженияРасходов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокЭксплуатации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Номенклатура,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СтатьяРасходов.Наименование КАК СтатьяРасходовНаименование,
		|	КатегорияЭксплуатации.Наименование КАК КатегорияЭксплуатацииНаименование,
		|	СтатьяРасходов.КорреспондирующийСчет КАК СтатьяРасходовКорСчет,
		|	Количество КАК Количество,
		|	ФизическоеЛицо,
		|	КатегорияЭксплуатации.СрокЭксплуатации КАК СрокЭксплуатации,
		|	""СобственныеТовары"" КАК ТипЗапасов,
		|	NULL КАК НомерГТД,
		|	NULL КАК СтранаПроисхождения
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ТаблицаТовары.Колонки.Добавить("НаименованиеНазначенияИспользования");
	ТаблицаТовары.Колонки.Добавить("НаименованиеСпособаОтраженияРасходов");
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		Строка.НаименованиеНазначенияИспользования = Строка.КатегорияЭксплуатацииНаименование;
		Строка.НаименованиеСпособаОтраженияРасходов = Строка.СтатьяРасходовНаименование;
	
		Если ЗначениеЗаполнено(Строка.СтатьяРасходовКорСчет) Тогда
			НаименованиеСпособаОтраженияРасходов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	    		НСтр("ru='%1 счет( %2)'"),
	    		СокрЛП(Строка.НаименованиеСпособаОтраженияРасходов),
	    		Строка.СтатьяРасходовКорСчет);
			Строка.НаименованиеСпособаОтраженияРасходов = НаименованиеСпособаОтраженияРасходов;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка
Процедура ДобавитьПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвизоПоМПЗВходящее";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "ОрганизацияОтправитель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",      "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	// Тип запасов для получения хранится в другой кололнке таблицы.
	ТабТовары = ДанныеИБ.ДополнительныеСвойства.Товары.Скопировать();
	Для Каждого СтрТовары Из ТабТовары Цикл
		Если ЗначениеЗаполнено(СтрТовары.ТипЗапасовПолучателя) Тогда
			СтрТовары.ТипЗапасов = СтрТовары.ТипЗапасовПолучателя;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка
Процедура ДобавитьПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвизоПоМПЗИсходящее";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "ОрганизацияПолучатель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",      "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "СкладПолучатель", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПС_Отправка
Процедура ДобавитьПКО_Документ_ВозвратПС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратПС_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратПодарочныхСертификатов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратПС_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "ОтчетОРозничныхПродажах", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Склад", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",                      "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорЭквайринга", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ЭквайринговыйТерминал", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПодарочныеСертификаты", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "ВидПодарочногоСертификата", "ВидПодарочногоСертификата", 1);
	ДобавитьПКС(СвойстваТЧ, "МагнитныйКод",              "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "Код",                       "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                     "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "Штрихкод",                  "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратПС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(ПодарочныеСертификаты.Код, """") КАК СерийныйНомер,
	                      |	ЕСТЬNULL(ПодарочныеСертификаты.Штрихкод, """") КАК Штрихкод,
	                      |	ЕСТЬNULL(ПодарочныеСертификаты.МагнитныйКод, """") КАК МагнитныйКод,
	                      |	ЕСТЬNULL(ПодарочныеСертификаты.Владелец, ЗНАЧЕНИЕ(Справочник.ВидыПодарочныхСертификатов.ПустаяСсылка)) КАК ВидПодарочногоСертификатаСсылка,
	                      |	ВозвратПодарочныхСертификатовПодарочныеСертификаты.Сумма КАК Сумма
	                      |ИЗ
	                      |	Документ.ВозвратПодарочныхСертификатов.ПодарочныеСертификаты КАК ВозвратПодарочныхСертификатовПодарочныеСертификаты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	                      |		ПО ВозвратПодарочныхСертификатовПодарочныеСертификаты.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	                      |ГДЕ
	                      |	ВозвратПодарочныхСертификатовПодарочныеСертификаты.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) КАК Ссылка
	                      |ИЗ
	                      |	Документ.ВозвратПодарочныхСертификатов КАК ВозвратПодарочныхСертификатов
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	                      |		ПО ВозвратПодарочныхСертификатов.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
	                      |ГДЕ
	                      |	ВозвратПодарочныхСертификатов.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(КассыККМ.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад
	                      |ИЗ
	                      |	Документ.ВозвратПодарочныхСертификатов КАК ВозвратПодарочныхСертификатов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	                      |		ПО ВозвратПодарочныхСертификатов.КассаККМ = КассыККМ.Ссылка
	                      |ГДЕ
	                      |	ВозвратПодарочныхСертификатов.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК СуммаОплаты,
	                      |	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерКарты,
	                      |	ЕСТЬNULL(ЭквайринговыеТерминалы.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)) КАК БанковскийСчетОрганизации,
	                      |	ЕСТЬNULL(ЭквайринговыеТерминалы.Эквайер, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Эквайрер,
	                      |	ЕСТЬNULL(ЭквайринговыеТерминалы.Код, """") КАК Номер,
	                      |	ЕСТЬNULL(ЭквайринговыеТерминалы.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)) КАК ЭквайринговыйТерминал
	                      |ИЗ
	                      |	Документ.ВозвратПодарочныхСертификатов.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	                      |		ПО ОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ЭквайринговыеТерминалы.Ссылка
	                      |ГДЕ
	                      |	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
	                      |	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
	                      |	ЕСТЬNULL(ЭквайринговыеТерминалы.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)),
	                      |	ЕСТЬNULL(ЭквайринговыеТерминалы.Эквайер, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	                      |	ЕСТЬNULL(ЭквайринговыеТерминалы.Код, """"),
	                      |	ЕСТЬNULL(ЭквайринговыеТерминалы.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВозвратПодарочныхСертификатов.РеализацияПодарочныхСертификатов.Ссылка КАК Ссылка,
	                      |	ВозвратПодарочныхСертификатов.РеализацияПодарочныхСертификатов.Дата КАК Дата,
	                      |	ВозвратПодарочныхСертификатов.РеализацияПодарочныхСертификатов.Номер КАК Номер,
	                      |	ВозвратПодарочныхСертификатов.РеализацияПодарочныхСертификатов.Организация КАК Организация
	                      |ИЗ
	                      |	Документ.ВозвратПодарочныхСертификатов КАК ВозвратПодарочныхСертификатов
	                      |ГДЕ
	                      |	ВозвратПодарочныхСертификатов.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПодарочныеСертификаты = РезультатЗапроса[0].Выгрузить();
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		ПодарочныеСертификаты.Колонки.Добавить("ВидПодарочногоСертификата");
		Для Каждого ПС Из ПодарочныеСертификаты Цикл
			ПС.ВидПодарочногоСертификата = Новый Структура("Значение, ИмяПКО",
				ПС.ВидПодарочногоСертификатаСсылка, "Справочник_ВидыПодарочныхСертификатов");
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
	
	//Определяется отчет о розничных продажах, в рамках которого осуществлена операция
	Инструкция = Новый Структура();
	Инструкция.Вставить("ИмяПКО", "Документ_ОтчетОРозничныхПродажах_Отправка");
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Если Выборка.Следующий() Тогда
		Инструкция.Вставить("Значение", Выборка.Ссылка);
	    ДанныеXDTO.Вставить("ОтчетОРозничныхПродажах", Инструкция);
	КонецЕсли;
	
	//Определяется склад документа
	Выборка = РезультатЗапроса[2].Выбрать();
	Если Выборка.Следующий() Тогда
		СкладДляВыгрузки = Выборка.Склад;
	Иначе
		СкладДляВыгрузки = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	ИнструкцияСклад = Новый Структура();
	ИнструкцияСклад.Вставить("ИмяПКО", "Справочник_Склады_Отправка");
	ИнструкцияСклад.Вставить("Значение", СкладДляВыгрузки(СкладДляВыгрузки, КомпонентыОбмена.ПараметрыКонвертации, Истина));
	ДанныеXDTO.Вставить("Склад", ИнструкцияСклад);
	
	//Подготавливаются сведения об оплате картами
	ТабОплатаКартами = РезультатЗапроса[3].Выгрузить();
	ТабОплатаКартами.Колонки.Добавить("ДоговорЭквайринга");
	
	ИндексЭквайрера = ТабОплатаКартами.Индексы.Добавить("Эквайрер");
	//Определяются параметры виртуального договора
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	ПараметрыПоУмолчанию.ВидДоговора              = "Прочее"; 
	
	Для Каждого Строка Из ТабОплатаКартами Цикл
	 
		ПараметрыПоУмолчанию.Контрагент               = Строка.Эквайрер;
		
		//Формируем инструкцию для выгрузки эквайрингового терминала
		Инструкция = Новый Структура();
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
			Инструкция.Вставить("Номер",  СокрЛП(Строка.Номер));
			Инструкция.Вставить("Ссылка", Строка.ЭквайринговыйТерминал);
		Иначе
			Инструкция.Вставить("Значение", Строка.ЭквайринговыйТерминал);
			Инструкция.Вставить("ИмяПКО",   "Справочник_ЭквайринговыеТерминалы_Отправка")
		КонецЕсли; 
	
		Строка.ЭквайринговыйТерминал = Инструкция;
		Строка.ДоговорЭквайринга     = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ТабОплатаКартами);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтКлиента_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровОтКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",              "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "ВидОперации", , "ВидыОперацийВозвратОтПокупателя");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                      "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                      "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ПокупателемВыставляетсяСчетФактураНаВозврат", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	// Определим контрагента документа. Для возврата от розничного покупателя, контрагент в документе не заполняется.
	// Заполняется только партнер - Розничный покупатель.
	КонтрагентДокумента = ДанныеИБ.Контрагент;
	Если Не ЗначениеЗаполнено(КонтрагентДокумента)
		И ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		КонтрагентДокумента = Справочники.Контрагенты.РозничныйПокупатель;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", КонтрагентДокумента);
	
	// ВалютаВзаиморасчетов нужна для расчета курса и кратности.
	// РасчетыВУсловныхЕдиницах вычисляются параллельно, т.к. могут пригодиться если договор пустой.
	РасчетыВУсловныхЕдиницах = Ложь;
	ВалютаВзаиморасчетов     = ДанныеИБ.Валюта;
	
	Если Не (ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) Тогда
		
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				ВалютаВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов;
				РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ХозяйственнаяОперация) Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКлиента");
	КонецЕсли;
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	// Документ реализации
	ДокументРеализации = Неопределено;
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументРеализации) Тогда
		
		ДокументРеализации = ДанныеИБ.ДокументРеализации;
		
	ИначеЕсли Не ДанныеИБ.ВозвратПорчи Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|Товары.ДокументРеализации.Ссылка КАК Ссылка
			|ИЗ Документ.ВозвратТоваровОтКлиента.Товары КАК Товары
			|ГДЕ 
			|	Товары.Ссылка = &Ссылка";
	
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ДокументРеализации = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДокументРеализации");
	
	Если ДокументРеализации <> Неопределено Тогда
		
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
		
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
		КонецЕсли;
		
		ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДокументРеализации, ИмяПКО));
		
	КонецЕсли;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Ложь);
	Иначе	
		РеквизитыСчетФактуры = Неопределено;
		Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(ДанныеИБ.Ссылка, ДанныеИБ.Организация, РеквизитыСчетФактуры);
		ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", ЗначениеЗаполнено(РеквизитыСчетФактуры.Ссылка));
	КонецЕсли;
	
	// Товары
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Товары.Порча
		|			ТОГДА Товары.НоменклатураОприходование
		|		ИНАЧЕ Товары.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Товары.Порча
		|			ТОГДА Товары.НоменклатураОприходование
		|		ИНАЧЕ Товары.Номенклатура
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|";
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
			|		ИНАЧЕ ВидыЗапасов.НоменклатураОприходование
			|	КОНЕЦ КАК Номенклатура,
			|	ВидыЗапасов.Количество,
			|	ВидыЗапасов.СуммаСНДС,
			|	ВидыЗапасов.СтавкаНДС,
			|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
			|	ВидыЗапасов.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
			|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВидыЗапасов.Ссылка.ВозвратПереданнойМногооборотнойТары КАК ВозвратПереданнойМногооборотнойТары,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ КАК ТипЗапасов
			|ПОМЕСТИТЬ ВидыЗапасов
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ВидыЗапасов
			|ГДЕ
			|	ВидыЗапасов.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыЗапасов.Номенклатура,
			|	ВидыЗапасов.Количество,
			|	ВидыЗапасов.НомерГТД,
			|	ВидыЗапасов.СтранаПроисхождения,
			|	ВидыЗапасов.СтавкаНДС,
			|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
			|	ВЫРАЗИТЬ(ВЫБОР
			|				КОГДА ВидыЗапасов.ЦенаВключаетНДС
			|				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
			|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
			|			КОНЕЦ КАК ЧИСЛО(15, 2))
			|	 													КАК Цена,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ЦенаВключаетНДС
			|			ТОГДА ВидыЗапасов.СуммаСНДС
			|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				И ВидыЗапасов.ВозвратПереданнойМногооборотнойТары
			|			ТОГДА ""ВозвратнаяТара""
			|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) 
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ КАК ТипЗапасов,
			|	ПорядокСтрокТаблицыТовары.НомерСтроки
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	ВидыЗапасов КАК ВидыЗапасов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
			|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаТоваров.НомерГТД,
			|	ТаблицаТоваров.СтавкаНДС,
			|	ТаблицаТоваров.СтранаПроисхождения,
			|	ТаблицаТоваров.ТипЗапасов,
			|	ТаблицаТоваров.Цена,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиДокумента,
			|	СУММА(ТаблицаТоваров.Сумма) КАК Сумма,
			|	СУММА(ТаблицаТоваров.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Цена,
			|	ТаблицаТоваров.НомерГТД,
			|	ТаблицаТоваров.СтавкаНДС,
			|	ТаблицаТоваров.СтранаПроисхождения,
			|	ТаблицаТоваров.ТипЗапасов,
			|	ТаблицаТоваров.НомерСтроки";
			
	Иначе
			
		Запрос.Текст = Запрос.Текст + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
			|		ИНАЧЕ ВидыЗапасов.НоменклатураОприходование
			|	КОНЕЦ КАК Номенклатура,
			|	ВидыЗапасов.Количество,
			|	ВидыЗапасов.Ссылка.ДокументРеализации КАК ДокументРеализации,
			|	ВидыЗапасов.Ссылка.ВозвратПорчи КАК ВозвратПорчи,
			|	ВидыЗапасов.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|	ВидыЗапасов.СуммаСНДС,
			|	ВидыЗапасов.СуммаНДС,
			|	ВидыЗапасов.СтавкаНДС,
			|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
			|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВЫБОР КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ КАК ТипЗапасов,
			|	ВидыЗапасов.Ссылка.ВозвратПереданнойМногооборотнойТары КАК ВозвратПереданнойМногооборотнойТары
			|ПОМЕСТИТЬ ВидыЗапасов
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ВидыЗапасов
			|ГДЕ
			|	ВидыЗапасов.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыЗапасов.Номенклатура,
			|	ВидыЗапасов.Количество,
			|	ВидыЗапасов.СтавкаНДС,
			|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
			|	ВидыЗапасов.НомерГТД,
			|	ВидыЗапасов.СтранаПроисхождения,
			|	ПорядокСтрокТаблицыТовары.НомерСтроки,
			|	ВЫРАЗИТЬ(ВЫБОР
			|				КОГДА ВидыЗапасов.ЦенаВключаетНДС
			|						ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
			|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
			|				КОНЕЦ КАК ЧИСЛО(15, 2))
			|												КАК Цена,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ЦенаВключаетНДС
			|			ТОГДА ВидыЗапасов.СуммаСНДС
			|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ВозвратПорчи
			|				ИЛИ ВидыЗапасов.ДокументРеализации = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Себестоимость,
			|	ВЫБОР КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) И
			|		ВидыЗапасов.ВозвратПереданнойМногооборотнойТары ТОГДА
			|		""ВозвратнаяТара""
			|	ИНАЧЕ
			|		ВидыЗапасов.ТипЗапасов
			|	КОНЕЦ КАК ТипЗапасов
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	ВидыЗапасов КАК ВидыЗапасов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары
			|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Цена КАК Число(15,2)) КАК Цена,
			|	ТаблицаТоваров.СтавкаНДС,
			|	ТаблицаТоваров.НомерГТД,
			|	ТаблицаТоваров.СтранаПроисхождения,
			|	ТаблицаТоваров.ТипЗапасов,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиДокумента,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
			|	СУММА(ВЫРАЗИТЬ(ТаблицаТоваров.Сумма КАК Число(15,2))) КАК Сумма,
			|	СУММА(ТаблицаТоваров.Себестоимость) КАК Себестоимость,
			|	СУММА(ТаблицаТоваров.СуммаНДС) КАК СуммаНДС
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Цена,
			|	ТаблицаТоваров.СтавкаНДС,
			|	ТаблицаТоваров.НомерГТД,
			|	ТаблицаТоваров.СтранаПроисхождения,
			|	ТаблицаТоваров.ТипЗапасов,
			|	ТаблицаТоваров.НомерСтроки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.НомерСтроки";
	
	КонецЕсли;
	
	// Заказ клиента берем из табличной части "Расшифровка платежа"
	// Если там указано несколько заказов или в качестве заказа указан документ, не являющийся заказом, то ничего не далаем
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтКлиента.ДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ВозвратТоваровОтКлиента.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Заказ
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеXDTO.Вставить("Товары", Результат[3].Выгрузить());
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент               = КонтрагентДокумента;
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.Дата                     = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                    = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
	
		ПараметрыПоУмолчанию.ВидДоговора = ?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера,
			"СКомиссионером", "СПокупателем");
		
		ЗаказКлиента = Неопределено;
		
		Выборка = Результат[4].Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаказКлиента = Выборка.Заказ;
		КонецЕсли;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ЗаказКлиента, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "ВидОперации", , "ВидыОперацийВозвратПоставщику");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                          "ДокументПоступления", 1, "Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	// ВалютаВзаиморасчетов нужна для дальнейшего расчета курса и кратности.
	// РасчетыВУсловныхЕдиницах вычисляются параллельно, чтобы при необходимости не делать то же самое второй раз.
	РасчетыВУсловныхЕдиницах = Ложь;
	ВалютаВзаиморасчетов     = ДанныеИБ.Валюта;
	
	Если ДанныеИБ.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				ВалютаВзаиморасчетов     = ДанныеИБ.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов;
				РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ХозяйственнаяОперация) Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратПоставщику");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДокументПоступления", Неопределено);
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	// Товары
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВозвратТоваровПоставщикуТовары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщикуТовары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВидыЗапасов.СуммаНДС,
		|	ВидыЗапасов.СуммаСНДС,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|			ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВидыЗапасов.Ссылка.ВозвратПринятойМногооборотнойТары КАК ВозвратПринятойМногооборотнойТары,
		|	ВидыЗапасов.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И (Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Аналитика.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.Сумма,
		|	ВидыЗапасов.СуммаНДС,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И ВидыЗапасов.ВозвратПринятойМногооборотнойТары
		|			ТОГДА ""ВозвратнаяТара""
		|		КОГДА ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ВидыЗапасов.ВозвратПринятойМногооборотнойТары,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.ЕдиницаИзмерения,
		|	ТаблицаТоваров.СтавкаНДС,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Цена КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ТаблицаТоваров.НомерГТД,
		|	ТаблицаТоваров.СтранаПроисхождения,
		|	ТаблицаТоваров.ТипЗапасов,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
		|	СУММА(ВЫРАЗИТЬ(ТаблицаТоваров.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
		|	СУММА(ТаблицаТоваров.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.ЕдиницаИзмерения,
		|	ТаблицаТоваров.СтавкаНДС,
		|	ТаблицаТоваров.Цена,
		|	ТаблицаТоваров.НомерГТД,
		|	ТаблицаТоваров.СтранаПроисхождения,
		|	ТаблицаТоваров.ТипЗапасов,
		|	ТаблицаТоваров.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТоваров.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.ДокументПоступления.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
		|ГДЕ
		|	Товары.ДокументПоступления.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
		|	И Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасшифровкаПлатежа.Заказ
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",   ДанныеИБ.Дата);
	Результат = Запрос.ВыполнитьПакет();
	
	ТабТовары = Результат[3].Выгрузить();
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "НДСпоСтавкам4и2");
	ОпределитьСтавкуНДС_Отправка(ТабТовары, НДСПоСтавкам2и4);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументПоступления) Тогда
		ДанныеXDTO.Вставить("ДокументПоступления", ДанныеИБ.ДокументПоступления);
	Иначе
	
		Выборка = Результат[4].Выбрать();
	
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ДанныеXDTO.Вставить("ДокументПоступления", Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		// Заказ поставщику берем из табличной части "Расшифровка платежа"
		// Если там указано несколько заказов или в качестве заказа указан документ, не являющийся заказом, то ничего не далаем
		ТабЗаказов = Результат[5].Выгрузить();
		
		Если ТабЗаказов.Количество() = 1 И ТипЗнч(ТабЗаказов[0].Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ЗаказПоставщику = ТабЗаказов[0].Заказ;
		Иначе
			ЗаказПоставщику = Неопределено;
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент               = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.Дата                     = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                    = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		ПараметрыПоУмолчанию.ВидДоговора              = ?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту,
			"СКомитентом", "СПоставщиком");
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ЗаказПоставщику, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыемкаДСИзКассыККМ_Отправка
Процедура ДобавитьПКО_Документ_ВыемкаДСИзКассыККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВыемкаДСИзКассыККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВыемкаДСИзКассыККМ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Кассир", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",          "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "НомерКассовойСмены", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВыемкаДСИзКассыККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураСостояниеКассовойСмены = ПолучитьРеквизитыКассовойСменыНаДату(ДанныеИБ.КассаККМ, ДанныеИБ.Дата);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("НомерКассовойСмены", СтруктураСостояниеКассовойСмены.НомерКассовойСмены);
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКассовойСмены", СтруктураСостояниеКассовойСмены.НомерКассовойСмены);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказКлиента;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",   "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",  "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеИБ.Договор, "ПорядокОплаты, ВалютаВзаиморасчетов");
		
		ДанныеXDTO.Вставить("Договор",                  ДанныеИБ.Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", (СвойстваДоговора.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях));
		
		ВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.ХозяйственнаяОперация);
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		
		Если ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером" Тогда
			РасчетыВУсловныхЕдиницах = Ложь;
		Иначе
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", РасчетыВУсловныхЕдиницах);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	// Табличные части
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(НоменклатураСправочник.ВариантОформленияПродажи, ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.ПустаяСсылка)) КАК ВариантОформленияПродажи,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСправочник.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСправочник.Наименование
		|					ИНАЧЕ ХарактеристикаСправочник.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР
		|		КОГДА НоменклатураСправочник.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСправочник.Наименование
		|		ИНАЧЕ НоменклатураСправочник.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование,
		|	ЕСТЬNULL(НоменклатураСправочник.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И Товары.Ссылка.ВернутьМногооборотнуюТару
		|			ТОГДА ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	Товары.Содержание КАК Содержание,
		|	Товары.Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|				ИЛИ ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА ВЫБОР
		|					КОГДА Товары.Количество > 0
		|						ТОГДА ВЫБОР
		|								КОГДА Товары.Сумма / Товары.Количество < 0.01
		|										И &ВерсияФормата < 1.2
		|									ТОГДА 0.01
		|								ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА &ВерсияФормата < 1.2
		|								ТОГДА 0.01
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ Товары.Цена
		|	КОНЕЦ КАК Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС
		|ПОМЕСТИТЬ ЗаказанныеПозиции
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|		ПО Товары.Номенклатура = НоменклатураСправочник.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСправочник
		|		ПО Товары.Характеристика = ХарактеристикаСправочник.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Отменено = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.ЕдиницаИзмерения,
		|	ТаблицаТовары.ТипЗапасов,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.Сумма,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаТовары
		|ГДЕ
		|	(ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуги.НомерСтрокиДокумента,
		|	ТаблицаУслуги.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
		|				ИЛИ ТаблицаУслуги.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав)
		|			ТОГДА ТаблицаУслуги.Содержание
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаУслуги.ХарактеристикаНаименование = """"
		|					ТОГДА ТаблицаУслуги.НоменклатураНаименование
		|				ИНАЧЕ ТаблицаУслуги.НоменклатураНаименование + "" ("" + ТаблицаУслуги.ХарактеристикаНаименование + "")""
		|			КОНЕЦ
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаУслуги.Количество,
		|	ТаблицаУслуги.Цена,
		|	ТаблицаУслуги.Сумма,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаУслуги
		|ГДЕ
		|	(ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаУслуги.НомерСтрокиДокумента");
		
	Запрос.УстановитьПараметр("Ссылка",        ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеXDTO.Вставить("Товары", РезультатЗапроса[1].Выгрузить());
	ДанныеXDTO.Вставить("Услуги", РезультатЗапроса[2].Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",   "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",  "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеИБ.Договор, "ПорядокОплаты, ВалютаВзаиморасчетов");
		
		ДанныеXDTO.Вставить("Договор",                  ДанныеИБ.Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", (СвойстваДоговора.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях));
		
		ВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.ХозяйственнаяОперация);
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		
		Если ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером" Тогда
			РасчетыВУсловныхЕдиницах = Ложь;
		Иначе
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", РасчетыВУсловныхЕдиницах);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	// Табличные части
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(НоменклатураСправочник.ВариантОформленияПродажи, ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.ПустаяСсылка)) КАК ВариантОформленияПродажи,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСправочник.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСправочник.Наименование
		|					ИНАЧЕ ХарактеристикаСправочник.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР
		|		КОГДА НоменклатураСправочник.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСправочник.Наименование
		|		ИНАЧЕ НоменклатураСправочник.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование,
		|	ЕСТЬNULL(НоменклатураСправочник.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И Товары.Ссылка.ВернутьМногооборотнуюТару
		|			ТОГДА ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	Товары.Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС
		|ПОМЕСТИТЬ ЗаказанныеПозиции
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|		ПО Товары.Номенклатура = НоменклатураСправочник.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСправочник
		|		ПО Товары.Характеристика = ХарактеристикаСправочник.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Отменено = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.ЕдиницаИзмерения,
		|	ТаблицаТовары.ТипЗапасов,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.Сумма,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаТовары
		|ГДЕ
		|	(ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуги.НомерСтрокиДокумента,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество,
		|	ТаблицаУслуги.Цена,
		|	ТаблицаУслуги.Сумма,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаУслуги
		|ГДЕ
		|	(ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И НЕ ТаблицаУслуги.Сумма = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаУслуги.НомерСтрокиДокумента");
		
	Запрос.УстановитьПараметр("Ссылка",        ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеXDTO.Вставить("Товары", РезультатЗапроса[1].Выгрузить());
	ДанныеXDTO.Вставить("Услуги", РезультатЗапроса[2].Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаПереводДСВБюджет_Отправка
Процедура ДобавитьПКО_Документ_ЗаявкаНаПереводДСВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаявкаНаПереводДСВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаявкаНаПереводДСВБюджет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",               "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",    "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "ИдентификаторПлатежа");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Заметки");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                 "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "КтоРешил",                  "КтоРешил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статус",                    "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ОКАТО", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ПоказательДаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ПоказательКБК", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ПоказательНомера", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ПоказательОснования", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ПоказательПериода", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ПоказательТипа", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "СтатусСоставителя", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаПереводДСВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("СтатусСоставителя");
	ДанныеXDTO.Вставить("ПоказательКБК");
	ДанныеXDTO.Вставить("ОКАТО");
	ДанныеXDTO.Вставить("ПоказательОснования");
	ДанныеXDTO.Вставить("ПоказательПериода");
	ДанныеXDTO.Вставить("ПоказательНомера");
	ДанныеXDTO.Вставить("ПоказательДаты");
	ДанныеXDTO.Вставить("ПоказательТипа");
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ДанныеИБ.РасшифровкаПлатежа.Выгрузить(, "Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВнутренняяПередача";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",              "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",   "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Заметки");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "КтоРешил",                 "КтоРешил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",        "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель",    "ОрганизацияПолучатель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статус",                   "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",        "УтвержденнаяФормаОплаты", , "ФормыОплатыЗаявокНаРасходДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента КАК Сумма
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",              "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",   "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Заметки");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "КтоРешил",                 "КтоРешил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",        "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",            "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статус",                   "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",        "УтвержденнаяФормаОплаты", , "ФормыОплатыЗаявокНаРасходДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВедомости = ДанныеИБ.ДатаВедомостиНаВыплатуЗарплаты;
	НомерВедомости = ДанныеИБ.НомерВедомостиНаВыплатуЗарплаты;
	Если (Не ЗначениеЗаполнено(ДатаВедомости)
			Или Не ЗначениеЗаполнено(НомерВедомости))
		И (ДанныеИБ.РасшифровкаПлатежа.Количество() > 0
			И ЗначениеЗаполнено(ДанныеИБ.РасшифровкаПлатежа[0].Ведомость)) Тогда
		
		НомерДатаВедомости = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РасшифровкаПлатежа[0].Ведомость, "Номер, Дата");
		
		ДатаВедомости = НомерДатаВедомости.Дата;
		НомерВедомости = НомерДатаВедомости.Номер;		
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	ТабРасшифровка.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.ДатаВедомостиНаВыплатуЗарплаты = ДатаВедомости;
	НоваяСтрока.НомерВедомостиНаВыплатуЗарплаты = НомерВедомости;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСКонвВалюты_Отправка
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСКонвВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаявкаНаРасходДСКонвВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСКонвертацияВалюты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",              "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",   "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Заметки");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "КтоРешил",                 "КтоРешил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",        "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статус",                   "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",        "УтвержденнаяФормаОплаты", , "ФормыОплатыЗаявокНаРасходДС");

КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСПрочее_Отправка
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаявкаНаРасходДСПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСПрочее";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаявкаНаРасходДСПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",              "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",   "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Заметки");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "КтоРешил",                 "КтоРешил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",        "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статус",                   "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",        "УтвержденнаяФормаОплаты", , "ФормыОплатыЗаявокНаРасходДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяРасходов", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
					|	СУММА(РасшифровкаПлатежа.Сумма) КАК Сумма,
					|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
					|	ВЫРАЗИТЬ(РасшифровкаПлатежа.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов) КАК СтатьяРасходов
					|ИЗ
					|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
					|ГДЕ
					|	РасшифровкаПлатежа.Ссылка = &Ссылка
					|
					|СГРУППИРОВАТЬ ПО
					|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
					|	ВЫРАЗИТЬ(РасшифровкаПлатежа.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабРП = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",               "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",    "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "ИдентификаторПлатежа");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Заметки");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                 "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "КтоРешил",                  "КтоРешил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статус",                    "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыБезналичная",    "ЖелательнаяФормаОплатыБезналичные");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",         "УтвержденнаяФормаОплаты", , "ФормыОплатыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыНаличная",       "ЖелательнаяФормаОплатыНаличные");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыПлатежнаяКарта", "ЖелательнаяФормаОплатыПлатежнаяКарта");
	ДобавитьПКС(СвойстваШапки, "",                          "БанковскийСчет", 1, "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Контрагент", 1, "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		
		ДанныеКонтрагента = ПолучитьДанныеКонтрагентаПоБанкСчетуОрганизации(ДанныеИБ.БанковскийСчетПолучатель, КомпонентыОбмена);
	
		ДанныеXDTO.Вставить("Контрагент",     ДанныеКонтрагента.Контрагент);
		ДанныеXDTO.Вставить("БанковскийСчет", ДанныеКонтрагента.БанковскийСчетКонтрагента);
		
		КонтрагентСсылка = ДанныеКонтрагента.Контрагент;
		
	Иначе
		
		ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.БанковскийСчетКонтрагента);
		ДанныеXDTO.Вставить("Контрагент",     ДанныеИБ.Контрагент);
		
		КонтрагентСсылка = ДанныеИБ.Контрагент;
		
	КонецЕсли;
		
	ВидРасчетов = "";
	ХозОперацияДокумента = ДанныеИБ.ХозяйственнаяОперация;
	
	Если ХозОперацияДокумента = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или ХозОперацияДокумента = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ХозОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		Или ХозОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ХозОперацияДокумента = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		ВидРасчетов = "КредитыИЗаймы";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	РасшифровкаПлатежа.Сумма КАК Сумма,
		|	РасшифровкаПлатежа.Заказ,
		|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств Как СтатьяДДС,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтавкаНДС,
		|	РасшифровкаПлатежа.СуммаНДС
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	
	РасшифровкаПлатежа.Колонки.Добавить("Договор");
	РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
	
	Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			
			ТипЗаказа = ТипЗнч(СтрокаТаблицы.Заказ);
			
			Если ТипЗаказа = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				СтрокаТаблицы.Договор = СтрокаТаблицы.Заказ;
			Иначе
				
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				
					ТекДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Договор");
					
					Если ТипЗнч(ТекДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						СтрокаТаблицы.Договор = ТекДоговор;
					КонецЕсли;
					
				КонецЕсли;
				
				ИмяПКО = "";
				ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
				
				Если ТипЗаказа = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
					ИмяПКО = "Документ_ВозвратТоваровОтКлиента_Отправка";
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
					ИмяПКО = "Документ_ТаможеннаяДекларация_Отправка";
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
					ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
					ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
					ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
					ИмяПКО = "Документ_ПоступлениеУслугПрочихАктивов_Отправка";
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
					ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
					ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
					
				
						
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					ИмяПКО = "Документ_ЗаказПоставщику_Отправка";
					ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
					ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
					ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
					ИмяПКО = "Документ_РеализацияУслугПрочихАктивов_Отправка";
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
					ИмяПКО = "Документ_ОтчетКомитентуОСписании_Отправка";
					ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
					Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.АктВыполненныхРабот") Тогда
						ИмяПКО = "Документ_АктВыполненныхРабот_Отправка";
					Иначе
						ИмяПКО = "Документ_АктВыполненныхРаботРТУ_Отправка";
					КонецЕсли;
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
					ИмяПКО = "Документ_ОтчетКомиссионераОСписании_Отправка";
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ИмяПКО = "Документ_ЗаказКлиента_Отправка";
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
					ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Заказ, "Организация, ОрганизацияПолучатель");
					Если ОрганизацииИнтеркампани.Организация = КонтрагентСсылка Тогда
						ИмяПКО = "ПередачаМеждуОрганизациями_РТУ_Отправка";
					ИначеЕсли ОрганизацииИнтеркампани.ОрганизацияПолучатель = КонтрагентСсылка Тогда
						ИмяПКО = "ПередачаМеждуОрганизациями_ПТУ_Отправка";
						ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
					КонецЕсли;
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") Тогда
					ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Заказ, "Организация, Комиссионер");
					Если ОрганизацииИнтеркампани.Организация = КонтрагентСсылка Тогда
						ИмяПКО = "Документ_ОтчетКомиссияОрганизСписаниеКомитент";
						ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
					ИначеЕсли ОрганизацииИнтеркампани.Комиссионер = КонтрагентСсылка Тогда
						ИмяПКО = "Документ_ОтчетКомиссияОрганизСписаниеКомиссионер";
					КонецЕсли;
				ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
					ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Заказ, "Организация, Комиссионер");
					Если ОрганизацииИнтеркампани.Организация = КонтрагентСсылка Тогда
						ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ";
					ИначеЕсли ОрганизацииИнтеркампани.Комиссионер = КонтрагентСсылка Тогда
						ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка";
						ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПустаяСтрока(ИмяПКО) Тогда
					СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Заказ, ИмяПКО);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетыВУсловныхЕдиницах = Ложь;
		ВидДоговора = "";
	
		ПолучитьПараметрыДоговораПоЗаказу(СтрокаТаблицы.Заказ, ТипРасчетов, ВидДоговора, РасчетыВУсловныхЕдиницах);
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = СтрокаТаблицы.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		ПараметрыПоУмолчанию.ВидДоговора              = ВидДоговора; 
		ПараметрыПоУмолчанию.Контрагент               = КонтрагентСсылка;
		
		СтрокаТаблицы.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, СтрокаТаблицы.Заказ, ДанныеИБ.Ссылка);
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",               "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",    "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Заметки");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                 "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "КтоРешил",                  "КтоРешил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",           "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статус",                    "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",         "УтвержденнаяФормаОплаты", , "ФормыОплатыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидРасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
			"ВЫБРАТЬ
			|	СУММА(РасшифровкаПлатежа.Сумма) КАК Сумма,
			|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
			|ГДЕ
			|	РасшифровкаПлатежа.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабРП = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризационнаяОпись_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризационнаяОпись_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризационнаяОпись;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковокУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1, "Перечисление_ТипыЗапасов");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_КассоваяСменаЗакрытие_Отправка
Процедура ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КассоваяСменаЗакрытие_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Номер",                  "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "ОкончаниеКассовойСмены", "Дата");
	ДобавитьПКС(СвойстваШапки, "",                       "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                       "Кассир", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",                       "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",               "КассаККМ", 1);

КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИмяПКО = "Справочник_КассыККМ_Отправка";
	КассаККМ = ДанныеИБ.ДополнительныеСвойства.КассаККМ;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("КассаККМ", Новый Структура("Значение, ИмяПКО", КассаККМ, ИмяПКО));
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("КассаККМ", Новый Структура("Значение, ИмяПКО", КассаККМ, ИмяПКО));
	Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "ВалютаДенежныхСредств");
	ДанныеXDTO.Вставить("Валюта", Новый Структура("Значение, ИмяПКО", Валюта, "Справочник_Валюты"));
	
	//Найдем отчет о розничных продажах
	ОтчетОРозничныхПродажах = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", ДанныеИБ.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетОРозничныхПродажах = Выборка.Ссылка;
		ДанныеXDTO.Вставить("Сумма", ОтчетОРозничныхПродажах.СуммаДокумента);
		ДанныеXDTO.Вставить("Кассир", Новый Структура("Значение, ИмяПКО", ОтчетОРозничныхПродажах.Ответственный, "Справочник_Пользователи"));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КассоваяСменаОткрытие_Отправка
Процедура ДобавитьПКО_Документ_КассоваяСменаОткрытие_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КассоваяСменаОткрытие_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КассоваяСменаОткрытие_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены", "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",               "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Номер",               "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",            "КассаККМ", 1);

КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаОткрытие_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИмяПКО = "Справочник_КассыККМ_Отправка";
	КассаККМ = ДанныеИБ.ДополнительныеСвойства.КассаККМ;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("КассаККМ", Новый Структура("Значение, ИмяПКО", КассаККМ, ИмяПКО));
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("КассаККМ", Новый Структура("Значение, ИмяПКО", КассаККМ, ИмяПКО));
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Оприходование
Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Оприходование(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступления_Оприходование";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПриобретения;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Оприходование_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_Оприходование_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "КП" + Сред(ДанныеИБ.Номер, 8));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "ЭтоГруппа") = Ложь Тогда
		ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("Основание", ОснованиеКорректировкиПоступления(ДанныеИБ));
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.ТоварыКОприходованию);
	ДанныеXDTO.Вставить("Сумма",  ДанныеИБ.ДополнительныеСвойства.ТоварыКОприходованию.Итог("Сумма"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступления_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПриобретения;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                  "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",    "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ВосстановитьНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Грузоотправитель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                        "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                        "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ИсправляемыйДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	// Склад
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	Если НЕ ДанныеИБ.Склад.ЭтоГруппа Тогда
		ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.ВидКорректировки = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
		ДанныеXDTO.Вставить("ВидОперации", "СогласованноеИзменение");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ИсправлениеОшибки");
	КонецЕсли;
	ЗаполнитьДанныеКорректировкиПоступленияТоваров(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеИБ.СуммаДокумента = 0 И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаВзаиморасчетов);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Списание
Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Списание(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступления_Списание";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПриобретения;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Списание_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_Списание_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "КП" + Сред(ДанныеИБ.Номер, 8));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "ЭтоГруппа") = Ложь Тогда
		ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("Основание", ОснованиеКорректировкиПоступления(ДанныеИБ));
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.ТоварыКСписанию);
	ДанныеXDTO.Вставить("Сумма",  ДанныеИБ.ДополнительныеСвойства.ТоварыКСписанию.Итог("Сумма"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_СписаниеЗапасов
Процедура ДобавитьПКО_Документ_КорректировкаПоступления_СписаниеЗапасов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступления_СписаниеЗапасов";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПриобретения;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_СписаниеЗапасов_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_СписаниеЗапасов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "КП" + Сред(ДанныеИБ.Номер, 8));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "ЭтоГруппа") = Ложь Тогда
		ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("Основание", ОснованиеКорректировкиПоступления(ДанныеИБ));
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.ТоварыКСписанию);
	ДанныеXDTO.Вставить("Сумма",  ДанныеИБ.ДополнительныеСвойства.ТоварыКСписанию.Итог("Сумма"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Оприходование
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Оприходование(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализации_Оприходование";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Оприходование_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Оприходование_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "КР" + Сред(ДанныеИБ.Номер, 8));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "ЭтоГруппа") = Ложь Тогда
		ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("Основание", ОснованиеКорректировкиРеализации(ДанныеИБ));
		
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.ТоварыКОприходованиюВБухгалтерии);
	ДанныеXDTO.Вставить("Сумма",  ДанныеИБ.ДополнительныеСвойства.ТоварыКОприходованиюВБухгалтерии.Итог("Сумма"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                          "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ИсправляемыйДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Данные исходного документа реализации
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.ДокументОснование);
	Запрос.УстановитьПараметр("МоментВремени", ДанныеИБ.МоментВремени());
	Запрос.УстановитьПараметр("РеализацияУслуг", 
		ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ДанныеИБ.ЦенаВключаетНДС);
	
	// Данные исходного документа реализации
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Док.ЗаказКлиента,
	|	Док.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару
	|ПОМЕСТИТЬ ДанныеДокументаРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.ЗаказКлиента,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.ЗаказКлиента.Ссылка КАК Ссылка,
	|	Док.ЗаказКлиента.Дата КАК Дата,
	|	Док.ЗаказКлиента.Организация КАК Организация,
	|	Док.ЗаказКлиента.Номер КАК Номер
	|ИЗ
	|	ДанныеДокументаРеализации КАК Док
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Ссылка на исправляемый документ
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.МоментВремени,
	|	ЛОЖЬ КАК ЭтоДокументОснование
	|ПОМЕСТИТЬ ПоследовательностьДокументов
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокументОснование
	|	И Док.МоментВремени <= &МоментВремени
	|	И Док.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.ДокументОснование,
	|	Док.ДокументОснование.МоментВремени,
	|	ИСТИНА
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Док.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследовательностьДокументов.Ссылка,
	|	ПоследовательностьДокументов.МоментВремени,
	|	ПоследовательностьДокументов.ЭтоДокументОснование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СчетФактураВыданный.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Корректировочный
	|ПОМЕСТИТЬ ПараметрыДокументовПоследовательности
	|ИЗ
	|	ПоследовательностьДокументов КАК ПоследовательностьДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ПоследовательностьДокументов.Ссылка = СчетФактураВыданный.ДокументОснование
	|			И (СчетФактураВыданный.Корректировочный)
	|			И (НЕ СчетФактураВыданный.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоследовательностьДокументов.Ссылка,
	|	ПоследовательностьДокументов.МоментВремени,
	|	ПоследовательностьДокументов.ЭтоДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоследовательностьДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Параметры1.Ссылка,
	|	Параметры1.Корректировочный,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Параметры1.Корректировочный
	|					И НЕ Параметры2.Корректировочный
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИсходныйКорректировочный
	|ПОМЕСТИТЬ ПараметрыОтбора
	|ИЗ
	|	ПараметрыДокументовПоследовательности КАК Параметры1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыДокументовПоследовательности КАК Параметры2
	|		ПО (Параметры1.Ссылка = &Ссылка)
	|			И (Параметры2.Ссылка <> &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Параметры1.Ссылка,
	|	Параметры1.Корректировочный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Параметры1.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсправляемыеДокументы.Ссылка,
	|	ИсправляемыеДокументы.МоментВремени
	|ПОМЕСТИТЬ ИсправляемыйДокумент
	|ИЗ
	|	ПараметрыДокументовПоследовательности КАК ИсправляемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОтбора КАК ПараметрыОтбора
	|		ПО (ИсправляемыеДокументы.Корректировочный = ПараметрыОтбора.Корректировочный
	|				ИЛИ ПараметрыОтбора.ИсходныйКорректировочный
	|				ИЛИ ИсправляемыеДокументы.ЭтоДокументОснование)
	|			И ИсправляемыеДокументы.Ссылка <> ПараметрыОтбора.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсправляемыеДокументы.МоментВремени УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсправляемыйДокумент.Ссылка КАК Ссылка,
	|	ИсправляемыйДокумент.Ссылка.Дата КАК Дата,
	|	ИсправляемыйДокумент.Ссылка.Организация КАК Организация,
	|	ИсправляемыйДокумент.Ссылка.Номер КАК Номер
	|ИЗ
	|	ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Вид операции
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	ПараметрыОтбора.ИсходныйКорректировочный
	|ИЗ
	|	ПараметрыОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Ссылка на основание исправления (корректировки) и документ до корректировки
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсправляемыеДокументы.Ссылка КАК Ссылка,
	|	ИсправляемыеДокументы.Ссылка.Дата КАК Дата,
	|	ИсправляемыеДокументы.Ссылка.Организация КАК Организация,
	|	ИсправляемыеДокументы.Ссылка.Номер КАК Номер
	|ИЗ
	|	ПараметрыДокументовПоследовательности КАК ИсправляемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОтбора КАК ПараметрыОтбора
	|		ПО (ИсправляемыеДокументы.Корректировочный = ПараметрыОтбора.Корректировочный
	|				ИЛИ ИсправляемыеДокументы.ЭтоДокументОснование)
	
	|			И ИсправляемыеДокументы.Ссылка <> ПараметрыОтбора.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсправляемыеДокументы.ЭтоДокументОснование,
	|	ИсправляемыеДокументы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсправляемыеДокументы.Ссылка,
	|	ИсправляемыеДокументы.МоментВремени
	|ПОМЕСТИТЬ ДокументДоКорректировки
	|ИЗ
	|	ПараметрыДокументовПоследовательности КАК ИсправляемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОтбора КАК ПараметрыОтбора
	|		ПО ПараметрыОтбора.Корректировочный И Не ПараметрыОтбора.ИсходныйКорректировочный
	|			И ИсправляемыеДокументы.Корректировочный = Ложь
	|			И ИсправляемыеДокументы.Ссылка <> ПараметрыОтбора.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсправляемыеДокументы.ЭтоДокументОснование,
	|	ИсправляемыеДокументы.МоментВремени УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Товары исходной реализации
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	Товары.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	Товары.СтавкаНДС,
	|	Товары.НомерГТД,
	|	Товары.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	СУММА(Товары.Количество) КАК Количество,
	|	СУММА(Товары.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТоварыИсходнойРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И (Товары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ Товары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.АналитикаУчетаНоменклатуры.Номенклатура,
	|	Товары.СтавкаНДС,
	|	Товары.НомерГТД,
	|	Товары.ВидЗапасов.ТипЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Изменения в товарах
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	КорректировкаВыручки.Ссылка,
	|	КорректировкаВыручки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	КорректировкаВыручки.НомерГТД,
	|	КорректировкаВыручки.СтавкаНДС,
	|	КорректировкаВыручки.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	0 КАК Количество,
	|	КорректировкаВыручки.СуммаНДС КАК СуммаНДС,
	|	КорректировкаВыручки.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ИзмененияВТоварахНеФильтрованые
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовКорректировкаВыручки КАК КорректировкаВыручки,
	|		ДанныеДокументаРеализации КАК ДанныеДокументаРеализации
	|ГДЕ
	|	КорректировкаВыручки.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ КорректировкаВыручки.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И НЕ ДанныеДокументаРеализации.ВернутьМногооборотнуюТару
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКОприходованию.Ссылка,
	|	ТоварыКОприходованию.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТоварыКОприходованию.НомерГТД,
	|	ТоварыКОприходованию.СтавкаНДС,
	|	ТоварыКОприходованию.ВидЗапасов.ТипЗапасов,
	|	-ТоварыКОприходованию.Количество,
	|	-ТоварыКОприходованию.СуммаНДС,
	|	-ТоварыКОприходованию.СуммаСНДС
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовОприходование КАК ТоварыКОприходованию,
	|		ДанныеДокументаРеализации КАК ДанныеДокументаРеализации
	|ГДЕ
	|	ТоварыКОприходованию.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ ТоварыКОприходованию.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И НЕ ДанныеДокументаРеализации.ВернутьМногооборотнуюТару
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКСписанию.Ссылка,
	|	ТоварыКСписанию.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТоварыКСписанию.НомерГТД,
	|	ТоварыКСписанию.СтавкаНДС,
	|	ТоварыКСписанию.ВидЗапасов.ТипЗапасов,
	|	ТоварыКСписанию.Количество,
	|	ТоварыКСписанию.СуммаНДС,
	|	ТоварыКСписанию.СуммаСНДС
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовСписание КАК ТоварыКСписанию,
	|		ДанныеДокументаРеализации КАК ДанныеДокументаРеализации
	|ГДЕ
	|	ТоварыКСписанию.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ ТоварыКСписанию.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И НЕ ДанныеДокументаРеализации.ВернутьМногооборотнуюТару
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Изменения.Номенклатура,
	|	Изменения.НомерГТД,
	|	Изменения.СтавкаНДС,
	|	Изменения.ТипЗапасов,
	|	Изменения.Количество,
	|	Изменения.СуммаНДС,
	|	Изменения.СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НЕ Последовательность.Корректировочный
	|				И Последовательность.МоментВремени <= ДокументДоКорректировки.МоментВремени
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзмененияДоКорректировки,
	|	ВЫБОР
	|		КОГДА Последовательность.МоментВремени <= ИсправляемыйДокумент.МоментВремени
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзмененияДоИсправления
	|ПОМЕСТИТЬ ИзмененияВТоварах
	|ИЗ
	|	ИзмененияВТоварахНеФильтрованые КАК Изменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыДокументовПоследовательности КАК Последовательность
	|		ПО (НЕ Последовательность.ЭтоДокументОснование)
	|			И Изменения.Ссылка = Последовательность.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументДоКорректировки КАК ДокументДоКорректировки
	|		ПО (ИСТИНА),
	|	ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Табличные части Товары (до корректировки, до исправления, после исправления)
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	ТоварыИсходнойРеализации.Номенклатура,
	|	ТоварыИсходнойРеализации.СтавкаНДС,
	|	ТоварыИсходнойРеализации.НомерГТД,
	|	ТоварыИсходнойРеализации.ТипЗапасов,
	|	ТоварыИсходнойРеализации.Количество,
	|	ТоварыИсходнойРеализации.СуммаСНДС,
	|	ТоварыИсходнойРеализации.СуммаНДС
	|ПОМЕСТИТЬ ТоварыДоКорректировкиРазвернутые
	|ИЗ
	|	ТоварыИсходнойРеализации КАК ТоварыИсходнойРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзмененияВТоварах.Номенклатура,
	|	ИзмененияВТоварах.СтавкаНДС,
	|	ИзмененияВТоварах.НомерГТД,
	|	ИзмененияВТоварах.ТипЗапасов,
	|	ИзмененияВТоварах.Количество,
	|	ИзмененияВТоварах.СуммаСНДС,
	|	ИзмененияВТоварах.СуммаНДС
	|ИЗ
	|	ИзмененияВТоварах КАК ИзмененияВТоварах
	|ГДЕ
	|	ИзмененияВТоварах.ИзмененияДоКорректировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДоКорректировкиРазвернутые.Номенклатура КАК Номенклатура,
	|	ТоварыДоКорректировкиРазвернутые.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыДоКорректировкиРазвернутые.НомерГТД КАК НомерГТД,
	|	ТоварыДоКорректировкиРазвернутые.ТипЗапасов КАК ТипЗапасов,
	|	СУММА(ТоварыДоКорректировкиРазвернутые.Количество) КАК Количество,
	|	СУММА(ТоварыДоКорректировкиРазвернутые.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(ТоварыДоКорректировкиРазвернутые.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТоварыДоКорректировки
	|ИЗ
	|	ТоварыДоКорректировкиРазвернутые КАК ТоварыДоКорректировкиРазвернутые
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДоКорректировкиРазвернутые.Номенклатура,
	|	ТоварыДоКорректировкиРазвернутые.СтавкаНДС,
	|	ТоварыДоКорректировкиРазвернутые.НомерГТД,
	|	ТоварыДоКорректировкиРазвернутые.ТипЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СтавкаНДС,
	|	НомерГТД,
	|	ТипЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИсходнойРеализации.Номенклатура,
	|	ТоварыИсходнойРеализации.СтавкаНДС,
	|	ТоварыИсходнойРеализации.НомерГТД,
	|	ТоварыИсходнойРеализации.ТипЗапасов,
	|	ТоварыИсходнойРеализации.Количество,
	|	ТоварыИсходнойРеализации.СуммаСНДС,
	|	ТоварыИсходнойРеализации.СуммаНДС
	|ПОМЕСТИТЬ ТоварыДоИсправленияРазвернутые
	|ИЗ
	|	ТоварыИсходнойРеализации КАК ТоварыИсходнойРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзмененияВТоварах.Номенклатура,
	|	ИзмененияВТоварах.СтавкаНДС,
	|	ИзмененияВТоварах.НомерГТД,
	|	ИзмененияВТоварах.ТипЗапасов,
	|	ИзмененияВТоварах.Количество,
	|	ИзмененияВТоварах.СуммаСНДС,
	|	ИзмененияВТоварах.СуммаНДС
	|ИЗ
	|	ИзмененияВТоварах КАК ИзмененияВТоварах
	|ГДЕ
	|	ИзмененияВТоварах.ИзмененияДоИсправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДоИсправленияРазвернутые.Номенклатура КАК Номенклатура,
	|	ТоварыДоИсправленияРазвернутые.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыДоИсправленияРазвернутые.НомерГТД КАК НомерГТД,
	|	ТоварыДоИсправленияРазвернутые.ТипЗапасов КАК ТипЗапасов,
	|	СУММА(ТоварыДоИсправленияРазвернутые.Количество) КАК Количество,
	|	СУММА(ТоварыДоИсправленияРазвернутые.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(ТоварыДоИсправленияРазвернутые.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТоварыДоИсправления
	|ИЗ
	|	ТоварыДоИсправленияРазвернутые КАК ТоварыДоИсправленияРазвернутые
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДоИсправленияРазвернутые.Номенклатура,
	|	ТоварыДоИсправленияРазвернутые.СтавкаНДС,
	|	ТоварыДоИсправленияРазвернутые.НомерГТД,
	|	ТоварыДоИсправленияРазвернутые.ТипЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СтавкаНДС,
	|	НомерГТД,
	|	ТипЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИсходнойРеализации.Номенклатура,
	|	ТоварыИсходнойРеализации.СтавкаНДС,
	|	ТоварыИсходнойРеализации.НомерГТД,
	|	ТоварыИсходнойРеализации.ТипЗапасов,
	|	ТоварыИсходнойРеализации.Количество,
	|	ТоварыИсходнойРеализации.СуммаСНДС,
	|	ТоварыИсходнойРеализации.СуммаНДС
	|ПОМЕСТИТЬ ТоварыКонечныеРазвернутые
	|ИЗ
	|	ТоварыИсходнойРеализации КАК ТоварыИсходнойРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзмененияВТоварах.Номенклатура,
	|	ИзмененияВТоварах.СтавкаНДС,
	|	ИзмененияВТоварах.НомерГТД,
	|	ИзмененияВТоварах.ТипЗапасов,
	|	ИзмененияВТоварах.Количество,
	|	ИзмененияВТоварах.СуммаСНДС,
	|	ИзмененияВТоварах.СуммаНДС
	|ИЗ
	|	ИзмененияВТоварах КАК ИзмененияВТоварах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКонечныеРазвернутые.Номенклатура КАК Номенклатура,
	|	ТоварыКонечныеРазвернутые.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыКонечныеРазвернутые.НомерГТД КАК НомерГТД,
	|	ТоварыКонечныеРазвернутые.ТипЗапасов КАК ТипЗапасов,
	|	СУММА(ТоварыКонечныеРазвернутые.Количество) КАК Количество,
	|	СУММА(ТоварыКонечныеРазвернутые.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(ТоварыКонечныеРазвернутые.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТоварыКонечные
	|ИЗ
	|	ТоварыКонечныеРазвернутые КАК ТоварыКонечныеРазвернутые
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКонечныеРазвернутые.Номенклатура,
	|	ТоварыКонечныеРазвернутые.СтавкаНДС,
	|	ТоварыКонечныеРазвернутые.НомерГТД,
	|	ТоварыКонечныеРазвернутые.ТипЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СтавкаНДС,
	|	НомерГТД,
	|	ТипЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Результирующая табличная часть Товары
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	"""" КАК Содержание,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ НомераСтрокРазвернутые
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|		ПО Товары.Ссылка = ИсправляемыйДокумент.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	Услуги.Содержание,
	|	Услуги.НомерСтроки
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК Услуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|		ПО Услуги.Ссылка = ИсправляемыйДокумент.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.НомерСтроки
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|		ПО Товары.Ссылка = ИсправляемыйДокумент.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераСтрокРазвернутые.Номенклатура,
	|	НомераСтрокРазвернутые.Содержание,
	|	МАКСИМУМ(НомераСтрокРазвернутые.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ НомераСтрок
	|ИЗ
	|	НомераСтрокРазвернутые КАК НомераСтрокРазвернутые
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераСтрокРазвернутые.Номенклатура,
	|	НомераСтрокРазвернутые.Содержание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомераСтрокРазвернутые.Номенклатура,
	|	НомераСтрокРазвернутые.Содержание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.СтавкаНДС,
	|	Т.НомерГТД,
	|	Т.ТипЗапасов,
	|	МАКСИМУМ(Т.ТоварыИсправляемогоДокумента_Количество) КАК ТоварыИсправляемогоДокумента_Количество,
	|	МАКСИМУМ(Т.ТоварыИсправляемогоДокумента_Сумма) КАК ТоварыИсправляемогоДокумента_Сумма,
	|	МАКСИМУМ(Т.ТоварыИсправляемогоДокумента_СуммаНДС) КАК ТоварыИсправляемогоДокумента_СуммаНДС,
	|	МАКСИМУМ(Т.ТоварыИсправляемогоДокумента_СуммаСНДС) КАК ТоварыИсправляемогоДокумента_СуммаСНДС,
	|	МАКСИМУМ(Т.ТоварыИсправительногоДокумента_Количество) КАК ТоварыИсправительногоДокумента_Количество,
	|	МАКСИМУМ(Т.ТоварыИсправительногоДокумента_Сумма) КАК ТоварыИсправительногоДокумента_Сумма,
	|	МАКСИМУМ(Т.ТоварыИсправительногоДокумента_СуммаНДС) КАК ТоварыИсправительногоДокумента_СуммаНДС,
	|	МАКСИМУМ(Т.ТоварыИсправительногоДокумента_СуммаСНДС) КАК ТоварыИсправительногоДокумента_СуммаСНДС,
	|	МАКСИМУМ(Т.ТоварыДокументаДоКорректировки_Количество) КАК ТоварыДокументаДоКорректировки_Количество,
	|	МАКСИМУМ(Т.ТоварыДокументаДоКорректировки_Сумма) КАК ТоварыДокументаДоКорректировки_Сумма,
	|	МАКСИМУМ(Т.ТоварыДокументаДоКорректировки_СуммаНДС) КАК ТоварыДокументаДоКорректировки_СуммаНДС,
	|	МАКСИМУМ(Т.ТоварыДокументаДоКорректировки_СуммаСНДС) КАК ТоварыДокументаДоКорректировки_СуммаСНДС
	|ПОМЕСТИТЬ РезультатСопоставленияТоваровВрем
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыИсправляемогоДокумента.Номенклатура КАК Номенклатура,
	|		ТоварыИсправляемогоДокумента.СтавкаНДС КАК СтавкаНДС,
	|		ТоварыИсправляемогоДокумента.НомерГТД КАК НомерГТД,
	|		ТоварыИсправляемогоДокумента.ТипЗапасов КАК ТипЗапасов,
	|		ТоварыИсправляемогоДокумента.Количество КАК ТоварыИсправляемогоДокумента_Количество,
	|		ВЫБОР КОГДА &ЦенаВключаетНДС Тогда
	|			ТоварыИсправляемогоДокумента.СуммаСНДС
	|		ИНАЧЕ
	|			ТоварыИсправляемогоДокумента.СуммаСНДС - ТоварыИсправляемогоДокумента.СуммаНДС
	|		КОНЕЦ КАК ТоварыИсправляемогоДокумента_Сумма,
	|		ТоварыИсправляемогоДокумента.СуммаНДС КАК ТоварыИсправляемогоДокумента_СуммаНДС,
	|		ТоварыИсправляемогоДокумента.СуммаСНДС КАК ТоварыИсправляемогоДокумента_СуммаСНДС,
	|		NULL КАК ТоварыИсправительногоДокумента_Количество,
	|		NULL КАК ТоварыИсправительногоДокумента_Сумма,
	|		NULL КАК ТоварыИсправительногоДокумента_СуммаСНДС,
	|		NULL КАК ТоварыИсправительногоДокумента_СуммаНДС,
	|		NULL КАК ТоварыДокументаДоКорректировки_Количество,
	|		NULL КАК ТоварыДокументаДоКорректировки_Сумма,
	|		NULL КАК ТоварыДокументаДоКорректировки_СуммаНДС,
	|		NULL КАК ТоварыДокументаДоКорректировки_СуммаСНДС
	|	ИЗ
	|		ТоварыДоИсправления КАК ТоварыИсправляемогоДокумента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыИсправительногоДокумента.Номенклатура,
	|		ТоварыИсправительногоДокумента.СтавкаНДС,
	|		ТоварыИсправительногоДокумента.НомерГТД,
	|		ТоварыИсправительногоДокумента.ТипЗапасов,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ТоварыИсправительногоДокумента.Количество,
	|		ВЫБОР КОГДА &ЦенаВключаетНДС Тогда
	|			ТоварыИсправительногоДокумента.СуммаСНДС
	|		ИНАЧЕ
	|			ТоварыИсправительногоДокумента.СуммаСНДС - ТоварыИсправительногоДокумента.СуммаНДС
	|		КОНЕЦ,
	|		ТоварыИсправительногоДокумента.СуммаСНДС,
	|		ТоварыИсправительногоДокумента.СуммаНДС,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ТоварыКонечные КАК ТоварыИсправительногоДокумента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыДокументаДоКорректировки.Номенклатура,
	|		ТоварыДокументаДоКорректировки.СтавкаНДС,
	|		ТоварыДокументаДоКорректировки.НомерГТД,
	|		ТоварыДокументаДоКорректировки.ТипЗапасов,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ТоварыДокументаДоКорректировки.Количество,
	|		ВЫБОР КОГДА &ЦенаВключаетНДС Тогда
	|			ТоварыДокументаДоКорректировки.СуммаСНДС
	|		ИНАЧЕ
	|			ТоварыДокументаДоКорректировки.СуммаСНДС - ТоварыДокументаДоКорректировки.СуммаНДС
	|		КОНЕЦ,
	|		ТоварыДокументаДоКорректировки.СуммаНДС,
	|		ТоварыДокументаДоКорректировки.СуммаСНДС
	|	ИЗ
	|		ТоварыДоКорректировки КАК ТоварыДокументаДоКорректировки) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.СтавкаНДС,
	|	Т.НомерГТД,
	|	Т.ТипЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	СтавкаНДС,
	|	НомерГТД,
	|	ВЫБОР
	|		КОГДА ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ""ТоварыНаСкладе""
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетУчета,
	|	ТоварыДокументаДоКорректировки_Количество КАК КоличествоДоКорректировки,
	|	ТоварыДокументаДоКорректировки_СуммаСНДС - Выбор Когда &ЦенаВключаетНДС Тогда 0 Иначе ТоварыДокументаДоКорректировки_СуммаНДС Конец КАК СуммаДоКорректировки,
	|	ТоварыДокументаДоКорректировки_СуммаНДС КАК СуммаНДСДоКорректировки,
	|	ТоварыИсправляемогоДокумента_Количество КАК КоличествоДоИзменения,
	|	ТоварыИсправляемогоДокумента_СуммаСНДС - Выбор Когда &ЦенаВключаетНДС Тогда 0 Иначе ТоварыИсправляемогоДокумента_СуммаНДС Конец КАК СуммаДоИзменения,
	|	ТоварыИсправляемогоДокумента_СуммаНДС КАК СуммаНДСДоИзменения,
	|	ТоварыИсправительногоДокумента_СуммаСНДС КАК СуммаСНДС,
	|	ТоварыИсправительногоДокумента_Количество КАК Количество,
	|	ТоварыИсправительногоДокумента_СуммаСНДС - Выбор Когда &ЦенаВключаетНДС Тогда 0 Иначе ТоварыИсправительногоДокумента_СуммаНДС Конец КАК Сумма,
	|	ТоварыИсправительногоДокумента_СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТоварыИсправляемогоДокумента_СуммаСНДС ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВДокументеПоступленияРеализации
	|ПОМЕСТИТЬ РезультатСопоставленияТоваров
	|ИЗ
	|	РезультатСопоставленияТоваровВрем КАК РезультатСопоставленияТоваровВрем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатСопоставления.Номенклатура,
	|	РезультатСопоставления.СтавкаНДС,
	|	РезультатСопоставления.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	РезультатСопоставления.НомерГТД.Код КАК НомерГТД,
	|	РезультатСопоставления.НомерГТД.Код КАК НомерГТДДоИзменения,
	|	РезультатСопоставления.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РезультатСопоставления.НомерГТД.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
	|	РезультатСопоставления.КоличествоДоКорректировки,
	|	РезультатСопоставления.КоличествоДоИзменения,
	|	РезультатСопоставления.Количество,
	|	РезультатСопоставления.СуммаДоКорректировки,
	|	РезультатСопоставления.СуммаДоИзменения,
	|	РезультатСопоставления.Сумма,
	|	РезультатСопоставления.СуммаНДСДоИзменения,
	|	РезультатСопоставления.СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезультатСопоставления.КоличествоДоКорректировки, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РезультатСопоставления.СуммаДоКорректировки / РезультатСопоставления.КоличествоДоКорректировки < 0.01
	|					ТОГДА 0.01
	|				ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.СуммаДоКорректировки / РезультатСопоставления.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаДоКорректировки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезультатСопоставления.КоличествоДоИзменения, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РезультатСопоставления.СуммаДоИзменения / РезультатСопоставления.КоличествоДоИзменения < 0.01
	|					ТОГДА 0.01
	|				ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.СуммаДоИзменения / РезультатСопоставления.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезультатСопоставления.Количество, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РезультатСопоставления.Сумма / РезультатСопоставления.Количество < 0.01
	|					ТОГДА 0.01
	|				ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.Сумма / РезультатСопоставления.Количество КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	РезультатСопоставления.ЕстьВДокументеПоступленияРеализации
	|ИЗ
	|	РезультатСопоставленияТоваров КАК РезультатСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераСтрок КАК НомераСтрок
	|		ПО РезультатСопоставления.Номенклатура = НомераСтрок.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезультатСопоставления.ЕстьВДокументеПоступленияРеализации УБЫВ,
	|	НомераСтрок.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Табличные части Услуги (до корректировки, до исправления, после исправления)
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	"""" КАК Содержание,
	|	Товары.СтавкаНДС,
	|	Товары.Количество,
	|	Товары.Сумма,
	|	Товары.СуммаНДС
	|ПОМЕСТИТЬ УслугиДоКорректировкиРазвернутые
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументДоКорректировки КАК ДокументДоКорректировки
	|		ПО Товары.Ссылка = ДокументДоКорректировки.Ссылка
	|			И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Номенклатура,
	|	Услуги.Содержание,
	|	Услуги.СтавкаНДС,
	|	Услуги.Количество,
	|	Услуги.Сумма,
	|	Услуги.СуммаНДС
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК Услуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументДоКорректировки КАК ДокументДоКорректировки
	|		ПО Услуги.Ссылка = ДокументДоКорректировки.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПустаяНоменклатура,
	|	Услуги.Содержание,
	|	Услуги.СтавкаНДС,
	|	Услуги.Количество,
	|	Услуги.Сумма,
	|	Услуги.СуммаНДС
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Услуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументДоКорректировки КАК ДокументДоКорректировки
	|		ПО Услуги.Ссылка = ДокументДоКорректировки.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.СтавкаНДС,
	|	Товары.Количество,
	|	Товары.Сумма,
	|	Товары.СуммаНДС
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументДоКорректировки КАК ДокументДоКорректировки
	|		ПО Товары.Ссылка = ДокументДоКорректировки.Ссылка
	|			И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|				ИЛИ &РеализацияУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиДоКорректировкиРазвернутые.Номенклатура,
	|	УслугиДоКорректировкиРазвернутые.Содержание,
	|	УслугиДоКорректировкиРазвернутые.СтавкаНДС,
	|	СУММА(УслугиДоКорректировкиРазвернутые.Количество) КАК Количество,
	|	СУММА(УслугиДоКорректировкиРазвернутые.Сумма) КАК Сумма,
	|	СУММА(УслугиДоКорректировкиРазвернутые.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ УслугиДоКорректировки
	|ИЗ
	|	УслугиДоКорректировкиРазвернутые КАК УслугиДоКорректировкиРазвернутые
	|
	|СГРУППИРОВАТЬ ПО
	|	УслугиДоКорректировкиРазвернутые.Номенклатура,
	|	УслугиДоКорректировкиРазвернутые.Содержание,
	|	УслугиДоКорректировкиРазвернутые.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	"""" КАК Содержание,
	|	Товары.СтавкаНДС,
	|	Товары.Количество,
	|	Товары.Сумма,
	|	Товары.СуммаСНДС,
	|	Товары.СуммаНДС
	|ПОМЕСТИТЬ УслугиДоИсправленияРазвернутые
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|		ПО Товары.Ссылка = ИсправляемыйДокумент.Ссылка
	|			И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Номенклатура,
	|	Услуги.Содержание,
	|	Услуги.СтавкаНДС,
	|	Услуги.Количество,
	|	Услуги.Сумма,
	|	Услуги.СуммаСНДС,
	|	Услуги.СуммаНДС
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК Услуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|		ПО Услуги.Ссылка = ИсправляемыйДокумент.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПустаяНоменклатура,
	|	Услуги.Содержание,
	|	Услуги.СтавкаНДС,
	|	Услуги.Количество,
	|	Услуги.Сумма,
	|	Услуги.СуммаСНДС,
	|	Услуги.СуммаНДС
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Услуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|		ПО Услуги.Ссылка = ИсправляемыйДокумент.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.СтавкаНДС,
	|	Товары.Количество,
	|	Товары.Сумма,
	|	Товары.СуммаСНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|		ПО Товары.Ссылка = ИсправляемыйДокумент.Ссылка
	|			И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|				ИЛИ &РеализацияУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиДоИсправленияРазвернутые.Номенклатура,
	|	УслугиДоИсправленияРазвернутые.Содержание,
	|	УслугиДоИсправленияРазвернутые.СтавкаНДС,
	|	СУММА(УслугиДоИсправленияРазвернутые.Количество) КАК Количество,
	|	СУММА(УслугиДоИсправленияРазвернутые.Сумма) КАК Сумма,
	|	СУММА(УслугиДоИсправленияРазвернутые.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(УслугиДоИсправленияРазвернутые.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ УслугиДоИсправления
	|ИЗ
	|	УслугиДоИсправленияРазвернутые КАК УслугиДоИсправленияРазвернутые
	|
	|СГРУППИРОВАТЬ ПО
	|	УслугиДоИсправленияРазвернутые.Номенклатура,
	|	УслугиДоИсправленияРазвернутые.Содержание,
	|	УслугиДоИсправленияРазвернутые.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.СтавкаНДС,
	|	СУММА(Товары.Количество) КАК Количество,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Товары.СуммаСНДС) КАК СуммаСНДС
	|ПОМЕСТИТЬ УслугиКонечные
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		ИЛИ &РеализацияУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
		
	// Результирующая табличная часть Услуги
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.Содержание,
	|	Т.СтавкаНДС,
	|	МАКСИМУМ(Т.УслугиИсправляемогоДокумента_Количество) КАК УслугиИсправляемогоДокумента_Количество,
	|	МАКСИМУМ(Т.УслугиИсправляемогоДокумента_Сумма) КАК УслугиИсправляемогоДокумента_Сумма,
	|	МАКСИМУМ(Т.УслугиИсправляемогоДокумента_СуммаНДС) КАК УслугиИсправляемогоДокумента_СуммаНДС,
	|	МАКСИМУМ(Т.УслугиИсправительногоДокумента_Количество) КАК УслугиИсправительногоДокумента_Количество,
	|	МАКСИМУМ(Т.УслугиИсправительногоДокумента_Сумма) КАК УслугиИсправительногоДокумента_Сумма,
	|	МАКСИМУМ(Т.УслугиИсправительногоДокумента_СуммаНДС) КАК УслугиИсправительногоДокумента_СуммаНДС,
	|	МАКСИМУМ(Т.УслугиИсправительногоДокумента_СуммаСНДС) КАК УслугиИсправительногоДокумента_СуммаСНДС,
	|	МАКСИМУМ(Т.УслугиДокументаДоКорректировки_Количество) КАК УслугиДокументаДоКорректировки_Количество,
	|	МАКСИМУМ(Т.УслугиДокументаДоКорректировки_Сумма) КАК УслугиДокументаДоКорректировки_Сумма,
	|	МАКСИМУМ(Т.УслугиДокументаДоКорректировки_СуммаНДС) КАК УслугиДокументаДоКорректировки_СуммаНДС
	|ПОМЕСТИТЬ РезультатСопоставленияУслугВрем
	|ИЗ
	|	(ВЫБРАТЬ
	|		УслугиИсправляемогоДокумента.Номенклатура КАК Номенклатура,
	|		УслугиИсправляемогоДокумента.Содержание КАК Содержание,
	|		УслугиИсправляемогоДокумента.СтавкаНДС КАК СтавкаНДС,
	|		NULL КАК УслугиИсправляемогоДокумента_Количество,
	|		NULL КАК УслугиИсправляемогоДокумента_Сумма,
	|		NULL КАК УслугиИсправляемогоДокумента_СуммаНДС,
	|		УслугиИсправляемогоДокумента.Количество КАК УслугиИсправительногоДокумента_Количество,
	|		УслугиИсправляемогоДокумента.Сумма КАК УслугиИсправительногоДокумента_Сумма,
	|		УслугиИсправляемогоДокумента.СуммаСНДС КАК УслугиИсправительногоДокумента_СуммаСНДС,
	|		УслугиИсправляемогоДокумента.СуммаНДС КАК УслугиИсправительногоДокумента_СуммаНДС,
	|		NULL КАК УслугиДокументаДоКорректировки_Количество,
	|		NULL КАК УслугиДокументаДоКорректировки_Сумма,
	|		NULL КАК УслугиДокументаДоКорректировки_СуммаНДС
	|	ИЗ
	|		УслугиКонечные КАК УслугиИсправляемогоДокумента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УслугиИсправительногоДокумента.Номенклатура,
	|		УслугиИсправительногоДокумента.Содержание,
	|		УслугиИсправительногоДокумента.СтавкаНДС,
	|		УслугиИсправительногоДокумента.Количество,
	|		УслугиИсправительногоДокумента.Сумма,
	|		УслугиИсправительногоДокумента.СуммаНДС,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		УслугиДоИсправления КАК УслугиИсправительногоДокумента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УслугиДокументаДоКорректировки.Номенклатура,
	|		УслугиДокументаДоКорректировки.Содержание,
	|		УслугиДокументаДоКорректировки.СтавкаНДС,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		УслугиДокументаДоКорректировки.Количество,
	|		УслугиДокументаДоКорректировки.Сумма,
	|		УслугиДокументаДоКорректировки.СуммаНДС
	|	ИЗ
	|		УслугиДоКорректировки КАК УслугиДокументаДоКорректировки) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Содержание,
	|	Т.СтавкаНДС
	|;
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Содержание,
	|	СтавкаНДС,
	|	УслугиДокументаДоКорректировки_Количество КАК КоличествоДоКорректировки,
	|	УслугиДокументаДоКорректировки_Сумма КАК СуммаДоКорректировки,
	|	УслугиДокументаДоКорректировки_СуммаНДС КАК СуммаНДСДоКорректировки,
	|	УслугиИсправляемогоДокумента_Количество КАК КоличествоДоИзменения,
	|	УслугиИсправляемогоДокумента_Сумма КАК СуммаДоИзменения,
	|	УслугиИсправляемогоДокумента_СуммаНДС КАК СуммаНДСДоИзменения,
	|	УслугиИсправительногоДокумента_СуммаСНДС КАК СуммаСНДС,
	|	УслугиИсправительногоДокумента_Количество КАК Количество,
	|	УслугиИсправительногоДокумента_Сумма КАК Сумма,
	|	УслугиИсправительногоДокумента_СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА УслугиИсправляемогоДокумента_Сумма ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВДокументеРеализации
	|ПОМЕСТИТЬ РезультатСопоставленияУслуг
	|ИЗ
	|	РезультатСопоставленияУслугВрем КАК РезультатСопоставленияУслугВрем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатСопоставления.Номенклатура,
	|	РезультатСопоставления.Содержание,
	|	РезультатСопоставления.Содержание КАК СодержаниеДоИзменения,
	|	РезультатСопоставления.СтавкаНДС,
	|	РезультатСопоставления.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	РезультатСопоставления.КоличествоДоКорректировки,
	|	РезультатСопоставления.КоличествоДоИзменения,
	|	РезультатСопоставления.Количество,
	|	РезультатСопоставления.СуммаДоКорректировки,
	|	РезультатСопоставления.СуммаДоИзменения,
	|	РезультатСопоставления.Сумма КАК Сумма,
	|	РезультатСопоставления.СуммаНДСДоКорректировки,
	|	РезультатСопоставления.СуммаНДСДоИзменения,
	|	РезультатСопоставления.СуммаНДС КАК СуммаНДС,
	|	РезультатСопоставления.Номенклатура.Принципал 	КАК ПринципалСсылка,
	|	ВЫБОР КОГДА 
	|		РезультатСопоставления.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме)
	|		ИЛИ РезультатСопоставления.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером) ТОГДА
	|			""Агентские""
	|		ИНАЧЕ ""Собственные""
	|	КОНЕЦ КАК ТипУслуги,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезультатСопоставления.КоличествоДоКорректировки, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.СуммаДоКорректировки / РезультатСопоставления.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ЦенаДоКорректировки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезультатСопоставления.КоличествоДоИзменения, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.СуммаДоИзменения / РезультатСопоставления.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезультатСопоставления.Количество, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.Сумма / РезультатСопоставления.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена,
	|	РезультатСопоставления.ЕстьВДокументеРеализации
	|ИЗ
	|	РезультатСопоставленияУслуг КАК РезультатСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераСтрок КАК НомераСтрок
	|		ПО РезультатСопоставления.Номенклатура = НомераСтрок.Номенклатура
	|			И РезультатСопоставления.Содержание = НомераСтрок.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезультатСопоставления.ЕстьВДокументеРеализации УБЫВ,
	|	НомераСтрок.НомерСтроки";
	
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДанных = РезультатыЗапроса[6].Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаДанных.Ссылка) Тогда
			СтруктураКлючевыеСвойства = Новый Структура("Дата, Номер, Ссылка, Организация");
			ТипСсылки = ТипЗнч(ВыборкаДанных.Ссылка);
			ИмяПКО = "";
			Если ТипСсылки = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				ИмяПКО = "Документ_СчетФактураВыданный_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтКлиента_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
				ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				ИмяПКО = "Документ_АктВыполненныхРабот_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
				ИмяПКО = "Документ_РеализацияУслугПрочихАктивов_Отправка";
			КонецЕсли;
			
			Если ИмяПКО = "Документ_АктВыполненныхРабот_Отправка"
				И Не СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.АктВыполненныхРабот") Тогда
				ИмяПКО = "Документ_АктВыполненныхРаботРТУ_Отправка";
			КонецЕсли;
			
			Если ИмяПКО <> "" Тогда
				ЗаполнитьЗначенияСвойств(СтруктураКлючевыеСвойства, ВыборкаДанных);
				ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", СтруктураКлючевыеСвойства, ИмяПКО));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации");
	ДанныеXDTO.ВидОперации = ?(ДанныеИБ.ВидКорректировки = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок,
		"ИсправлениеОшибки", "СогласованноеИзменение");
	
	ВыборкаДанных = РезультатыЗапроса[8].Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаДанных.Ссылка) Тогда
			СтруктураКлючевыеСвойства = Новый Структура("Дата, Номер, Ссылка, Организация");
			ТипСсылки = ТипЗнч(ВыборкаДанных.Ссылка);
			ИмяПКО = "";
			Если ТипСсылки = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				ИмяПКО = "Документ_СчетФактураВыданный_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтКлиента_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
				ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				ИмяПКО = "Документ_АктВыполненныхРабот_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
				ИмяПКО = "Документ_РеализацияУслугПрочихАктивов_Отправка";
			КонецЕсли;
			
			Если ИмяПКО = "Документ_АктВыполненныхРабот_Отправка"
				И Не СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.АктВыполненныхРабот") Тогда
				ИмяПКО = "Документ_АктВыполненныхРаботРТУ_Отправка";
			КонецЕсли;
			
			Если ИмяПКО <> "" Тогда
				ЗаполнитьЗначенияСвойств(СтруктураКлючевыеСвойства, ВыборкаДанных);
				ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", Новый Структура("Значение, ИмяПКО", СтруктураКлючевыеСвойства, ИмяПКО));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НомерПоследнего = РезультатыЗапроса.Количество() - 1;
	ТаблицаТовары = РезультатыЗапроса[23].Выгрузить();
	ТаблицаУслуги = РезультатыЗапроса[НомерПоследнего].Выгрузить();
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	// Сумма документа.
	СуммаДокумента = 0;
	СуммаДокумента = СуммаДокумента + ТаблицаТовары.Итог("Сумма");
	СуммаДокумента = СуммаДокумента + ТаблицаУслуги.Итог("Сумма");
	Если НЕ ДанныеИБ.ЦенаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + ТаблицаТовары.Итог("СуммаНДС");
		СуммаДокумента = СуммаДокумента + ТаблицаУслуги.Итог("СуммаНДС");
	КонецЕсли;
	Если СуммаДокумента = 0 Тогда
		СуммаДокумента = -1;
	КонецЕсли;
	ДанныеXDTO.Вставить("Сумма", СуммаДокумента);
	
	ТаблицаУслугЗаполнитьПринципала(КомпонентыОбмена, ТаблицаУслуги);
	
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = "СПокупателем";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Выборка = РезультатыЗапроса[1].Выбрать();
		ЗаказКлиента = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ЗаказКлиента, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.БанковскийСчетОрганизации)
		И ДанныеИБ.БанковскийСчетОрганизации.Владелец <> ДанныеИБ.Организация Тогда
		ДанныеXDTO.Вставить("БанковскийСчетОрганизации", Неопределено);
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Списание
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Списание(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализации_Списание";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Списание_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Списание_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "КР" + Сред(ДанныеИБ.Номер, 8));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "ЭтоГруппа") = Ложь Тогда
		ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("Основание", ОснованиеКорректировкиРеализации(ДанныеИБ));
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.ТоварыКСписаниюВБухгалтерии);
	ДанныеXDTO.Вставить("Сумма",  ДанныеИБ.ДополнительныеСвойства.ТоварыКСписаниюВБухгалтерии.Итог("Сумма"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_СписаниеЗапасов
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_СписаниеЗапасов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализации_СписаниеЗапасов";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_СписаниеЗапасов_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_СписаниеЗапасов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "КР" + Сред(ДанныеИБ.Номер, 8));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "ЭтоГруппа") = Ложь Тогда
		ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("Основание", ОснованиеКорректировкиРеализации(ДанныеИБ));
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.ТоварыКСписаниюВБухгалтерии);
	ДанныеXDTO.Вставить("Сумма",  ДанныеИБ.ДополнительныеСвойства.ТоварыКСписаниюВБухгалтерии.Итог("Сумма"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_НачисленияКредитовИДепозитов_Отправка
Процедура ДобавитьПКО_Документ_НачисленияКредитовИДепозитов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_НачисленияКредитовИДепозитов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.НачисленияКредитовИДепозитов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.НачислениеКредитовДепозитов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_НачисленияКредитовИДепозитов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Начисления");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Дата", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКредитовИДепозитов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрочностьКредитаЗайма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипСуммыГрафика", 1);

КонецПроцедуры

Процедура ПКО_Документ_НачисленияКредитовИДепозитов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоКредитам Тогда
		ДанныеXDTO.Вставить("ВидОперации", "КредитыПолученные");
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоДепозитам Тогда
		ДанныеXDTO.Вставить("ВидОперации", "Депозиты");
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоЗаймамВыданным Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ЗаймыПолученные");
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НачисленияКредитовИДепозитовНачисления.Дата КАК Дата,
	                      |	НачисленияКредитовИДепозитовНачисления.Контрагент КАК КонтрагентСсылка,
	                      |	НачисленияКредитовИДепозитовНачисления.СуммаВзаиморасчетов КАК Сумма,
	                      |	НачисленияКредитовИДепозитовНачисления.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	                      |	НачисленияКредитовИДепозитовНачисления.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	                      |	ВЫБОР
	                      |		КОГДА НачисленияКредитовИДепозитовНачисления.ТипСуммыГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	                      |				ИЛИ НачисленияКредитовИДепозитовНачисления.ТипСуммыГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	                      |			ТОГДА ""Проценты""
	                      |		ИНАЧЕ ""Комиссия""
	                      |	КОНЕЦ КАК ТипСуммыГрафика,
	                      |	НачисленияКредитовИДепозитовНачисления.Договор КАК Договор,
	                      |	ВЫБОР
	                      |		КОГДА НачисленияКредитовИДепозитовНачисления.Договор.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	                      |			ТОГДА ""Долгосрочный""
	                      |		ИНАЧЕ ""Краткосрочный""
	                      |	КОНЕЦ КАК СрочностьКредитаЗайма
	                      |ИЗ
	                      |	Документ.НачисленияКредитовИДепозитов.Начисления КАК НачисленияКредитовИДепозитовНачисления
	                      |ГДЕ
	                      |	НачисленияКредитовИДепозитовНачисления.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	ТаблицаНачислений.Колонки.Добавить("Контрагент");
	
	Для Каждого Строка Из ТаблицаНачислений Цикл
		Если ЗначениеЗаполнено(Строка.КонтрагентСсылка) Тогда
	
			Если ТипЗнч(Строка.КонтрагентСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
				Строка.Контрагент = Новый Структура("Значение, ИмяПКО", Строка.КонтрагентСсылка, "Справочник_Контрагенты");
			Иначе
				Строка.Контрагент = Новый Структура("Значение, ИмяПКО", Строка.КонтрагентСсылка, "Справочник_ФизическиеЛица_Отправка");
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Начисления", ТаблицаНачислений);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте_Отправка
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОперацияПоПлатежнойКарте;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КодАвторизации",        "КодАвторизации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежнойКарты",   "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "ВидОперации", , "ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте");
	ДобавитьПКС(СвойстваШапки, "",                      "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Эквайрер", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "ЭквайринговыйТерминал", "ЭквайринговыйТерминал", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	// Эквайрер.
	ДанныеXDTO.Вставить("Эквайрер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "Эквайер"));
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3")
		И ЗначениеЗаполнено(ДанныеИБ.ЭквайринговыйТерминал)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.ЭквайринговыйТерминал) Тогда
		
		ДанныеЭТ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "Код, Ссылка");
		ЭквайринговыйТерминал = Новый Структура("Номер, Ссылка", СокрЛП(ДанныеЭТ.Код), ДанныеЭТ.Ссылка);
		ДанныеXDTO.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	КонецЕсли;
	
	#Область Подразделение
	БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "БанковскийСчет");
	
	Подразделение = ?(ЗначениеЗаполнено(БанковскийСчет),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Подразделение"), Неопределено);
	
	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		
		РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(Подразделение, ДанныеИБ.Организация);
		
		СтруктураДанныеПодразделения = Новый Структура(
			"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
			Подразделение.Наименование,
			РегистрацияПодразделенияВНалоговомОргане);
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", СтруктураДанныеПодразделения);
		Инструкция.Вставить("ИмяПКО", "Справочник_Подразделения_ИзСтруктуры");
		
		ДанныеXDTO.Вставить("Подразделение", Инструкция);
		
	Иначе
		ДанныеXDTO.Вставить("Подразделение", Неопределено);
	КонецЕсли;
	#КонецОбласти
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	РасшифровкаПлатежа.Сумма КАК Сумма,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасшифровкаПлатежа.Заказ КАК Заказ,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.СтавкаНДС,
		|	РасшифровкаПлатежа.СуммаНДС
		|ПОМЕСТИТЬ ДанныеТЧ
		|ИЗ
		|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТЧ.Сумма,
		|	ДанныеТЧ.СуммаВзаиморасчетов,
		|	ДанныеТЧ.ВалютаВзаиморасчетов,
		|	ДанныеТЧ.Заказ КАК ЗаказСсылка,
		|	ДанныеТЧ.СтатьяДДС,
		|	КурсыВалют.Курс КАК КурсВзаиморасчетов,
		|	КурсыВалют.Кратность КАК КратностьВзаиморасчетов,
		|	ДанныеТЧ.СтавкаНДС,
		|	ДанныеТЧ.СуммаНДС
		|ИЗ
		|	ДанныеТЧ КАК ДанныеТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ДанныеТЧ.ВалютаВзаиморасчетов
		|					ИЗ
		|						ДанныеТЧ)) КАК КурсыВалют
		|		ПО (КурсыВалют.Валюта = ДанныеТЧ.ВалютаВзаиморасчетов)";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	РасшифровкаПлатежа.Колонки.Добавить("Договор");
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	Для Каждого Строка Из РасшифровкаПлатежа Цикл
		// Вычисление договора.
		ВидДоговора = Неопределено;
		РасчетыВУЕ = Неопределено;
	
		Если НЕ ЗначениеЗаполнено(Строка.ЗаказСсылка) Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			Строка.Заказ = ЗначениеВИнструкциюПКО(КомпонентыОбмена, Строка.ЗаказСсылка);
			ТипЗаказа = ТипЗнч(Строка.ЗаказСсылка);
			ДоговорСсылка = Неопределено;
			Если ТипЗаказа = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорСсылка = Строка.ЗаказСсылка;
			ИначеЕсли Строка.ЗаказСсылка.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				ДоговорСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЗаказСсылка, "Договор");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
				Строка.Договор = Новый Структура("Значение, ИмяПКО",
					ДоговорСсылка, "Справочник_ДоговорыКонтрагентов");
				Продолжить;
			КонецЕсли;
		
			// Тип заказа может быть одним из следующих;
			//	- ДокументСсылка.ЗаказКлиента,
			//	- ДокументСсылка.РеализацияТоваровУслуг,
			//	- ДокументСсылка.АктВыполненныхРабот,
			//	- ДокументСсылка.ОтчетКомиссионера,
			//	- ДокументСсылка.ОтчетКомиссионераОСписании,
			//	- ДокументСсылка.ОтчетКомитенту,
			//	- ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями,
			//	- ДокументСсылка.ПередачаТоваровМеждуОрганизациями.
			
			Если ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				ВидДоговора = "СКомиссионером";
			ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
				или Строка.ЗаказСсылка.Метаданные().Реквизиты.Найти("Соглашение") = Неопределено Тогда
				ВидДоговора = "СПокупателем";
			Иначе
				
				// Соглашение может быть получено для всех вариантов операции.
				Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЗаказСсылка, "Соглашение");
				
				// Для продолжения анализа операции, необходимо определить вид договора.
				ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(Строка.ЗаказСсылка, Соглашение, ДанныеИБ.ХозяйственнаяОперация);
				ВидДоговора = ?(ЗначениеЗаполнено(ВидДоговора), ВидДоговора, "СПоставщиком");
				
				Если ВидДоговора = "СКомитентом" ИЛИ ВидДоговора = "СКомиссионером" Тогда
					// Договора по комиссии выгружаются без разделения по сделкам и заказам и всегда не в у.е.
					РасчетыВУЕ = Ложь;
				Иначе
					Если ЗначениеЗаполнено(Соглашение) Тогда
						РасчетыВУЕ = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если РасчетыВУЕ = Неопределено Тогда
			РасчетыВУЕ = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> Строка.ВалютаВзаиморасчетов;
		КонецЕсли;
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = Строка.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВидДоговора;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУЕ;
		Строка.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Строка.ЗаказСсылка, ДанныеИБ);
	КонецЦикла;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОперацияПоПлатежнойКарте;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "КонтрагентДебитор", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "СуммаДебиторскойЗадолженности");
	ДобавитьПКС(СвойстваШапки, "",               "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",               "КонтрагентКредитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",               "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",               "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = 	Лев(ДанныеИБ.Номер, 5) + "Э" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", "ПереносЗадолженности");
	ДанныеXDTO.Вставить("КонтрагентКредитор", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "Эквайер"));
	
	ВыгрузитьКурсИКратностьДокумента(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	// Подразделение
	БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "БанковскийСчет");
	
	Подразделение = ?(ЗначениеЗаполнено(БанковскийСчет),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Подразделение"), Неопределено);
	
	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(ДанныеИБ.Организация)  Тогда
		
		РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(Подразделение, ДанныеИБ.Организация);
		
		СтруктураДанныеПодразделения = Новый Структура(
			"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
			Подразделение.Наименование,
			РегистрацияПодразделенияВНалоговомОргане);
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", СтруктураДанныеПодразделения);
		Инструкция.Вставить("ИмяПКО", "Справочник_Подразделения_ИзСтруктуры");
		
		ДанныеXDTO.Вставить("Подразделение", Инструкция);
		
	Иначе
		ДанныеXDTO.Вставить("Подразделение", Неопределено);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|РасшифровкаПлатежа.Сумма,
	|РасшифровкаПлатежа.СуммаВзаиморасчетов,
	|РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|РасшифровкаПлатежа.Заказ
	|ПОМЕСТИТЬ ДанныеТЧ
	|ИЗ Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ Ссылка = &Ссылка
	|;
	|ВЫБРАТЬ
	|ДанныеТЧ.Сумма,
	|ДанныеТЧ.СуммаВзаиморасчетов,
	|ДанныеТЧ.ВалютаВзаиморасчетов,
	|ДанныеТЧ.Заказ,
	|КурсыВалют.Курс КАК КурсВзаиморасчетов,
	|КурсыВалют.Кратность КАК КратностьВзаиморасчетов
	|ИЗ ДанныеТЧ КАК ДанныеТЧ
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВалютаВзаиморасчетов ИЗ ДанныеТЧ)) КАК КурсыВалют
	|	ПО КурсыВалют.Валюта = ДанныеТЧ.ВалютаВзаиморасчетов";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	ТаблицаЗадолженность = Запрос.Выполнить().Выгрузить();
	ТаблицаЗадолженность.Колонки.Добавить("Договор");
	Для Каждого Строка Из ТаблицаЗадолженность Цикл
		// Вычисление договора
		ВидДоговора = Неопределено;
		РасчетыВУЕ = Неопределено;
	
		Если НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			ТипЗаказа = ТипЗнч(Строка.Заказ);
			ДоговорСсылка = Неопределено;
			Если ТипЗаказа = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорСсылка = Строка.Заказ;
			ИначеЕсли Строка.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				ДоговорСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Заказ, "Договор");
			КонецЕсли;	
			Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
				Строка.Договор = Новый Структура("Значение, ИмяПКО", ДоговорСсылка, "Справочник_ДоговорыКонтрагентов");
				Продолжить;
			КонецЕсли;
		
			// Тип заказа может быть одним из следующих:
			//	- ДокументСсылка.ЗаказКлиента;
			//	- ДокументСсылка.РеализацияТоваровУслуг;
			//	- ДокументСсылка.АктВыполненныхРабот;
			//	- ДокументСсылка.ОтчетКомиссионера;
			//	- ДокументСсылка.ОтчетКомиссионераОСписании;
			//	- ДокументСсылка.ОтчетКомитенту;
			//	- ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями;
			//	- ДокументСсылка.ПередачаТоваровМеждуОрганизациями.
			
			Если ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				ВидДоговора = "СКомиссионером";
			ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
				ВидДоговора = "СПокупателем";
			Иначе
			
				// Соглашение может быть получено для всех вариантов операции.
				Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Заказ, "Соглашение");
				
				// Для продолжения анализа операции, необходимо определить вид договора.
				ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(Строка.Заказ, Соглашение, ДанныеИБ.ХозяйственнаяОперация);
				ВидДоговора = ?(ЗначениеЗаполнено(ВидДоговора), ВидДоговора, "СПоставщиком");
				
				Если ВидДоговора = "СКомитентом" ИЛИ ВидДоговора = "СКомиссионером" Тогда
					// Договора по комиссии выгружаются без разделения по сделкам и заказам и всегда не в у.е.
					РасчетыВУЕ = Ложь;
				Иначе
					
					Если ЗначениеЗаполнено(Соглашение) Тогда
						РасчетыВУЕ = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если РасчетыВУЕ = Неопределено Тогда
			РасчетыВУЕ = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> Строка.ВалютаВзаиморасчетов;
		КонецЕсли;
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = Строка.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВидДоговора;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУЕ;
		Строка.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Строка.Заказ, ДанныеИБ);
	КонецЦикла;
	ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ТаблицаЗадолженность);
	
	// Со стороны Кредиторской задолженности показываем общую сумму и договор с эквайрером.
	ТаблицаЗадолженность = Новый ТаблицаЗначений;
	ТаблицаЗадолженность.Колонки.Добавить("Договор");
	ТаблицаЗадолженность.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТаблицаЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
	ТаблицаЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
	ТаблицаЗадолженность.Колонки.Добавить("Сумма");
	ТаблицаЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	СтрокаЗадолженность = ТаблицаЗадолженность.Добавить();
	СтрокаЗадолженность.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	СтрокаЗадолженность.КурсВзаиморасчетов = 1;
	СтрокаЗадолженность.КратностьВзаиморасчетов = 1;
	СтрокаЗадолженность.Сумма = ДанныеИБ.СуммаДокумента;
	СтрокаЗадолженность.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.Контрагент = ДанныеXDTO.КонтрагентКредитор;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	СтрокаЗадолженность.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("КредиторскаяЗадолженность", ТаблицаЗадолженность);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОперацияПоПлатежнойКарте;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "КонтрагентКредитор", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "СуммаКредиторскойЗадолженности");
	ДобавитьПКС(СвойстваШапки, "",               "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",               "КонтрагентДебитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",               "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",               "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "Э" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", "ПереносЗадолженности");
	ДанныеXDTO.Вставить("КонтрагентДебитор", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "Эквайер"));
	
	// Подразделение
	БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "БанковскийСчет");
	
	Подразделение = ?(ЗначениеЗаполнено(БанковскийСчет),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Подразделение"), Неопределено);
	
	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(ДанныеИБ.Организация)  Тогда
		
		РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(Подразделение, ДанныеИБ.Организация);
		
		СтруктураДанныеПодразделения = Новый Структура(
			"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
			Подразделение.Наименование,
			РегистрацияПодразделенияВНалоговомОргане);
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", СтруктураДанныеПодразделения);
		Инструкция.Вставить("ИмяПКО", "Справочник_Подразделения_ИзСтруктуры");
		
		ДанныеXDTO.Вставить("Подразделение", Инструкция);
		
	Иначе
		ДанныеXDTO.Вставить("Подразделение", Неопределено);
	КонецЕсли;
	
	ВыгрузитьКурсИКратностьДокумента(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|РасшифровкаПлатежа.Сумма,
	|РасшифровкаПлатежа.СуммаВзаиморасчетов,
	|РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|РасшифровкаПлатежа.Заказ
	|ПОМЕСТИТЬ ДанныеТЧ
	|ИЗ Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ Ссылка = &Ссылка
	|;
	|ВЫБРАТЬ
	|ДанныеТЧ.Сумма,
	|ДанныеТЧ.СуммаВзаиморасчетов,
	|ДанныеТЧ.ВалютаВзаиморасчетов,
	|ДанныеТЧ.Заказ,
	|КурсыВалют.Курс КАК КурсВзаиморасчетов,
	|КурсыВалют.Кратность КАК КратностьВзаиморасчетов
	|ИЗ ДанныеТЧ КАК ДанныеТЧ
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВалютаВзаиморасчетов ИЗ ДанныеТЧ)) КАК КурсыВалют
	|	ПО КурсыВалют.Валюта = ДанныеТЧ.ВалютаВзаиморасчетов";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	ТаблицаЗадолженность = Запрос.Выполнить().Выгрузить();
	ТаблицаЗадолженность.Колонки.Добавить("Договор");
	Для Каждого Строка Из ТаблицаЗадолженность Цикл
		// Вычисление договора
		ВидДоговора = Неопределено;
		РасчетыВУЕ = Неопределено;
	
		Если НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			ТипЗаказа = ТипЗнч(Строка.Заказ);
			ДоговорСсылка = Неопределено;
			Если ТипЗаказа = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорСсылка = Строка.Заказ;
			ИначеЕсли Строка.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				ДоговорСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Заказ, "Договор");
			КонецЕсли;	
			Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
				Строка.Договор = Новый Структура("Значение, ИмяПКО", ДоговорСсылка, "Справочник_ДоговорыКонтрагентов");
				Продолжить;
			КонецЕсли;
		
			// Тип заказа может быть одним из следующих:
			//	- ДокументСсылка.ЗаказКлиента;
			//	- ДокументСсылка.РеализацияТоваровУслуг;
			//	- ДокументСсылка.АктВыполненныхРабот;
			//	- ДокументСсылка.ОтчетКомиссионера;
			//	- ДокументСсылка.ОтчетКомиссионераОСписании;
			//	- ДокументСсылка.ОтчетКомитенту;
			//	- ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями;
			//	- ДокументСсылка.ПередачаТоваровМеждуОрганизациями.
			
			Если ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				ВидДоговора = "СКомиссионером";
			ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
				ВидДоговора = "СПокупателем";
			Иначе
			
				// Соглашение может быть получено для всех вариантов операции.
				Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Заказ, "Соглашение");
				
				// Для продолжения анализа операции, необходимо определить вид договора.
				ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(Строка.Заказ, Соглашение, ДанныеИБ.ХозяйственнаяОперация);
				ВидДоговора = ?(ЗначениеЗаполнено(ВидДоговора), ВидДоговора, "СПокупателем");
				
				Если ВидДоговора = "СКомитентом" ИЛИ ВидДоговора = "СКомиссионером" Тогда
					// Договора по комиссии выгружаются без разделения по сделкам и заказам и всегда не в у.е.
					РасчетыВУЕ = Ложь;
				Иначе
					
					Если ЗначениеЗаполнено(Соглашение) Тогда
						РасчетыВУЕ = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если РасчетыВУЕ = Неопределено Тогда
			РасчетыВУЕ = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> Строка.ВалютаВзаиморасчетов;
		КонецЕсли;
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = Строка.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВидДоговора;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУЕ;
		Строка.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Строка.Заказ, ДанныеИБ);
	КонецЦикла;
	ДанныеXDTO.Вставить("КредиторскаяЗадолженность", ТаблицаЗадолженность);
	
	// Со стороны Дебиторской задолженности показываем общую сумму и договор с эквайрером.
	ТаблицаЗадолженность = Новый ТаблицаЗначений;
	ТаблицаЗадолженность.Колонки.Добавить("Договор");
	ТаблицаЗадолженность.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТаблицаЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
	ТаблицаЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
	ТаблицаЗадолженность.Колонки.Добавить("Сумма");
	ТаблицаЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	СтрокаЗадолженность = ТаблицаЗадолженность.Добавить();
	СтрокаЗадолженность.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	СтрокаЗадолженность.КурсВзаиморасчетов = 1;
	СтрокаЗадолженность.КратностьВзаиморасчетов = 1;
	СтрокаЗадолженность.Сумма = ДанныеИБ.СуммаДокумента;
	СтрокаЗадолженность.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.Контрагент = ДанныеXDTO.КонтрагентДебитор;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	СтрокаЗадолженность.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ТаблицаЗадолженность);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",       "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Ссылка.Дата);
	Запрос.УстановитьПараметр("РегВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.Текст = "ВЫБРАТЬ
	   |	ОприходованиеТоваровТовары.Номенклатура КАК Номенклатура,
	   |	ОприходованиеТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	   |	ОприходованиеТоваровТовары.Количество КАК Количество,
	   |	ВЫРАЗИТЬ(ОприходованиеТоваровТовары.Цена * ВЫБОР
	   |		КОГДА &РегВалюта <> &УпрВалюта
	   |			ТОГДА ВЫБОР
	   |					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	   |						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	   |					ИНАЧЕ 1
	   |				КОНЕЦ
	   |		ИНАЧЕ 1
	   |	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	   |	ВЫРАЗИТЬ(ОприходованиеТоваровТовары.Сумма * ВЫБОР
	   |		КОГДА &РегВалюта <> &УпрВалюта
	   |			ТОГДА ВЫБОР
	   |					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	   |						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	   |					ИНАЧЕ 1
	   |				КОНЕЦ
	   |		ИНАЧЕ 1
	   |	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	   |	ВЫБОР КОГДА ОприходованиеТоваровТовары.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	   |			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
	   |		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
	   |	КОНЕЦ КАК ТипЗапасов,
	   |	ОприходованиеТоваровТовары.НомерГТД.КОд КАК НомерГТД,
	   |	ОприходованиеТоваровТовары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения
	   |ИЗ
	   |	Документ.ОприходованиеИзлишковТоваров.Товары КАК ОприходованиеТоваровТовары
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
	   |		ПО (ИСТИНА)
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
	   |		ПО (ИСТИНА)
	   |ГДЕ
	   |	ОприходованиеТоваровТовары.Ссылка = &Ссылка";
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДС_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиБезналичныхДС_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиБезналичныхДС_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидБанковскогоСчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиБезналичныхДС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВводОстатковБанковскиеСчета.БанковскийСчет КАК БанковскийСчет,
		|	ВводОстатковБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
		|	ВводОстатковБанковскиеСчета.Сумма КАК Сумма,
		|	ВводОстатковБанковскиеСчета.СуммаРегл КАК СуммаРегл
		|ИЗ
		|	Документ.ВводОстатков.БанковскиеСчета КАК ВводОстатковБанковскиеСчета
		|ГДЕ
		|	ВводОстатковБанковскиеСчета.Ссылка = &Ссылка");
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаДенежныеСредства = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("ДенежныеСредства", ТаблицаДенежныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиЗадолжПодотчетников_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиЗадолжПодотчетников_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиЗадолжПодотчетников_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиЗадолжПодотчетников_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиЗадолжПодотчетников_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаполнитьТаблицуОстатковПоРасчетамСПодотчетниками(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиКредитовЗаймов_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиКредитовЗаймов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиКредитовЗаймов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовПоКредитамЗаймам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиКредитовЗаймов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКредитовИДепозитов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиКредитовЗаймов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Контрагент КАК Контрагент,
	|	ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|			ТОГДА ВЫБОР
	|					КОГДА ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Договор.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|						ТОГДА ВЫБОР
	|								КОГДА ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
	|									ТОГДА ""ДолгосрочныеКредиты""
	|								ИНАЧЕ ""ДолгосрочныеЗаймы""
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
	|								ТОГДА ""КраткосрочныеКредиты""
	|							ИНАЧЕ ""КраткосрочныеЗаймы""
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|			ТОГДА ВЫБОР
	|					КОГДА ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Договор.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|						ТОГДА ВЫБОР
	|								КОГДА ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
	|									ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
	|								ИНАЧЕ ""ПроцентыПоДолгосрочнымЗаймам""
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
	|								ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
	|							ИНАЧЕ ""ПроцентыПоКраткосрочнымЗаймам""
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ""Комиссия""
	|	КОНЕЦ КАК ВидРасчетов,
	|	ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Сумма КАК Сумма
	|ИЗ
	|	Документ.ВводОстатков.РасчетыПоДоговорамКредитовИДепозитов КАК ВводОстатковРасчетыПоДоговорамКредитовИДепозитов
	|ГДЕ
	|	ВводОстатковРасчетыПоДоговорамКредитовИДепозитов.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаРасчеты = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Расчеты", ТаблицаРасчеты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиНаличныхДС_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиНаличныхДС_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНаличныхДС_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНаличныхДС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводОстатковКассы.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	СУММА(ВводОстатковКассы.Сумма) КАК Сумма,
	|	СУММА(ВводОстатковКассы.СуммаРегл) КАК СуммаРегл
	|ИЗ
	|	Документ.ВводОстатков.Кассы КАК ВводОстатковКассы
	|ГДЕ
	|	ВводОстатковКассы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводОстатковКассы.Касса.ВалютаДенежныхСредств");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаДС = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("ДенежныеСредства", ТаблицаДС);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетн_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетн_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиПерерасходаПодотчетн_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиПерерасходаПодотчетн_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиПерерасходаПодотчетн_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаполнитьТаблицуОстатковПоРасчетамСПодотчетниками(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПокупателямиАвансы_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчСПокупателямиАвансы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаполнитьТаблицуОстатковПоРасчетамСКонтрагентами(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "СПокупателем");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПокупателямиДолги_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиРасчСПокупателямиДолги_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчСПокупателямиДолги_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаполнитьТаблицуОстатковПоРасчетамСКонтрагентами(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "СПокупателем");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаполнитьТаблицуОстатковПоРасчетамСКонтрагентами(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "СПоставщиком");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПоставщикамиДолги_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчСПоставщикамиДолги_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаполнитьТаблицуОстатковПоРасчетамСКонтрагентами(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "СПоставщиком");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиСобственныхТМЦ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",       "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТМЦ");
	ДобавитьПКС(СвойстваТЧ, "", "ВидЗапасов", 1, "Перечисление_ТипыЗапасов");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос("ВЫБРАТЬ
	  |	ВводОстатковТовары.Номенклатура КАК Номенклатура,
	  |	ВводОстатковТовары.ВидЗапасов.ТипЗапасов КАК ВидЗапасов,
	  |	ВводОстатковТовары.Упаковка КАК Упаковка,
	  |	ВводОстатковТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	  |	ВЫБОР
	  |		КОГДА УпаковкиЕдиницыИзмерения.Ссылка ЕСТЬ NULL
	  |				ИЛИ УпаковкиЕдиницыИзмерения.Знаменатель = 0
	  |			ТОГДА ВводОстатковТовары.Количество
	  |		ИНАЧЕ ВЫРАЗИТЬ(ВводОстатковТовары.Количество * (УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель) КАК ЧИСЛО(18, 2))
	  |	КОНЕЦ КАК Количество,
	  |	ВводОстатковТовары.СтавкаНДС КАК СтавкаНДС,
	  |	ВЫБОР
	  |		КОГДА НЕ ВводОстатковТовары.СуммаБезНДС = 0
	  |			ТОГДА ВводОстатковТовары.СуммаБезНДС
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ВводОстатковТовары.Количество > 0
	  |					ТОГДА -0.01
	  |				ИНАЧЕ 0.01
	  |			КОНЕЦ
	  |	КОНЕЦ КАК СуммаБезНДС,
	  |	ВводОстатковТовары.СуммаНДС КАК СуммаНДС,
	  |	ВводОстатковТовары.НомерГТД.Код КАК НомерГТД,
	  |	ВводОстатковТовары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	  |	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	  |ИЗ
	  |	Документ.ВводОстатков.Товары КАК ВводОстатковТовары
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	  |		ПО ВводОстатковТовары.Номенклатура = СпрНоменклатура.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	  |		ПО ВводОстатковТовары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
	  |ГДЕ
	  |	ВводОстатковТовары.Ссылка = &Ссылка");
	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("ТМЦ", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПереданная_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиТараПереданная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТараПереданная_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТараПереданная";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТараПереданная_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Тара");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПереданная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводОстатковТовары.Номенклатура КАК Номенклатура,
	|	ВводОстатковТовары.Упаковка КАК Упаковка,
	|	ВводОстатковТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВводОстатковТовары.Количество КАК Количество,
	|	ВводОстатковТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВводОстатковТовары.СуммаБезНДС КАК СуммаБезНДС,
	|	ВводОстатковТовары.СуммаНДС КАК СуммаНДС,
	|	ВводОстатковТовары.НомерГТД.Код КАК НомерГТД,
	|	ВводОстатковТовары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ВводОстатков.Товары КАК ВводОстатковТовары
	|ГДЕ
	|	ВводОстатковТовары.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Тара", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПринятая_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиТараПринятая_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТараПринятая_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТараПринятая";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТараПринятая_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",       "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Тара");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПринятая_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводОстатковТовары.Номенклатура КАК Номенклатура,
	|	ВводОстатковТовары.Упаковка КАК Упаковка,
	|	ВводОстатковТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВводОстатковТовары.Количество КАК Количество,
	|	ВводОстатковТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВводОстатковТовары.СуммаБезНДС КАК СуммаБезНДС,
	|	ВводОстатковТовары.СуммаНДС КАК СуммаНДС,
	|	ВводОстатковТовары.НомерГТД.Код КАК НомерГТД,
	|	ВводОстатковТовары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ВводОстатков.Товары КАК ВводОстатковТовары
	|ГДЕ
	|	ВводОстатковТовары.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Тара", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомис_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТоваровПереданныхНаКомис_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводОстатковТовары.Номенклатура КАК Номенклатура,
	|	ВводОстатковТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВводОстатковТовары.Упаковка КАК Упаковка,
	|	ВводОстатковТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВводОстатковТовары.Количество КАК Количество,
	|	ВводОстатковТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВводОстатковТовары.СуммаБезНДС КАК СуммаБезНДС,
	|	ВводОстатковТовары.СуммаНДС КАК СуммаНДС,
	|	ВводОстатковТовары.НомерГТД.Код КАК НомерГТД,
	|	ВводОстатковТовары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ВводОстатков.Товары КАК ВводОстатковТовары
	|ГДЕ
	|	ВводОстатковТовары.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомис_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТоваровПринятыхНаКомис_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",     "Договор", , "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "Контрагент",  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",       "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводОстатковТовары.Номенклатура КАК Номенклатура,
	|	ВводОстатковТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВводОстатковТовары.Упаковка КАК Упаковка,
	|	ВводОстатковТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВводОстатковТовары.Количество КАК Количество,
	|	ВводОстатковТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВводОстатковТовары.СуммаБезНДС КАК СуммаБезНДС,
	|	ВводОстатковТовары.СуммаНДС КАК СуммаНДС,
	|	ВводОстатковТовары.НомерГТД.Код КАК НомерГТД,
	|	ВводОстатковТовары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ВводОстатков.Товары КАК ВводОстатковТовары
	|ГДЕ
	|	ВводОстатковТовары.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка
Процедура ДобавитьПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетБанкаПоОперациямЭквайринга;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",           "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяРасходов", "СтатьяРасходов", , "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаКомиссии",  "СуммаКомиссии");
	ДобавитьПКС(СвойстваШапки, "Эквайер",        "Эквайрер", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",               "ДоговорЭквайринга", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Возвраты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПлатежа", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Покупки");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПлатежа", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Реквизиты договора.
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
	ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Эквайер;
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	ДанныеXDTO.Вставить("ДоговорЭквайринга", ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//ТабличныеЧасти
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДатаПлатежа,
	|"""" КАК ВидКарты,
	|НомерПлатежнойКарты КАК НомерКарты,
	|Сумма
	|ИЗ Документ.ОтчетБанкаПоОперациямЭквайринга.Покупки
	|ГДЕ Ссылка = &Ссылка
	|;
	|ВЫБРАТЬ
	|ДатаПлатежа,
	|"""" КАК ВидКарты,
	|НомерПлатежнойКарты КАК НомерКарты,
	|Сумма
	|ИЗ Документ.ОтчетБанкаПоОперациямЭквайринга.Возвраты
	|ГДЕ Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗАпроса = Запрос.ВыполнитьПакет();
	ДанныеXDTO.Вставить("Покупки", РезультатЗапроса[0].Выгрузить());
	ДанныеXDTO.Вставить("Возвраты", РезультатЗапроса[1].Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомиссионера;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",      "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",     "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПроцентВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомиссионногоВознагражд");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",     "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "УдержатьВознаграждение",      "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "",                            "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                            "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",         "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Покупатели");
	ДобавитьПКС(СвойстваТЧ, "", "ВыставленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактура", 1, "Документ_СчетФактураВыданный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПередачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПередачи", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент               = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.Валюта;
		ПараметрыПоУмолчанию.ВидДоговора              = "СКомиссионером";
		ПараметрыПоУмолчанию.Дата                     = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                    = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
		
		Заказ = Новый Структура();
		Заказ.Вставить("Заказ",      Неопределено);
		Заказ.Вставить("Соглашение", ДанныеИБ.Соглашение);
		Заказ.Вставить("Сделка",     Неопределено);
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	// Увеличиваем суммы документа на модуль отрицательных сумм.
	ЗапросОтрицательныеСуммы = Новый Запрос("ВЫБРАТЬ
		|ВЫБОР
		|	КОГДА СуммаПродажи < 0 ТОГДА
		|		(-1)*СуммаПродажи 
		|	ИНАЧЕ 0 
		|КОНЕЦ КАК СуммаПродажи,
		|ВЫБОР 
		|	КОГДА СуммаВознаграждения < 0 ТОГДА
		|		(-1)*СуммаВознаграждения 
		|	ИНАЧЕ 0 
		|КОНЕЦ КАК СуммаВознаграждения
		|
		|ИЗ Документ.ОтчетКомиссионера.Товары
		|
		|ГДЕ Ссылка = &Ссылка
		|	И (СуммаПродажи < 0 ИЛИ СуммаВознаграждения < 0)
		|
		|ИТОГИ Сумма(СуммаПродажи), Сумма(СуммаВознаграждения) ПО ОБЩИЕ");
	
	ЗапросОтрицательныеСуммы.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = ЗапросОтрицательныеСуммы.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		
		ДанныеXDTO.Вставить("Сумма",               ДанныеИБ.СуммаДокумента + Выборка.СуммаПродажи);
		ДанныеXDTO.Вставить("СуммаВознаграждения", ДанныеИБ.СуммаВознаграждения + Выборка.СуммаВознаграждения);
		
	КонецЕсли;
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	
	// Табличные части
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Ссылка,
		|	Товары.Ссылка.Организация КАК Организация,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаПередачи,
		|	Товары.СуммаСНДС КАК СуммаПередачи,
		|	ВЫБОР
		|		КОГДА Товары.СуммаПродажи / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПродажи / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	Товары.СуммаПродажи КАК Сумма,
		|	Товары.СуммаПродажиНДС КАК СуммаНДС,
		|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ВЫБОР
		|		КОГДА Товары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА Товары.Ссылка.Контрагент
		|		ИНАЧЕ Товары.Покупатель
		|	КОНЕЦ КАК Покупатель,
		|	Товары.Покупатель КАК Покупатель_Исходный,
		|	ВЫБОР
		|		КОГДА Товары.ДатаСчетаФактурыКомиссионера = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(Товары.Ссылка.Дата, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Товары.ДатаСчетаФактурыКомиссионера, ДЕНЬ)
		|	КОНЕЦ КАК ДатаСФ,
		|	НАЧАЛОПЕРИОДА(Товары.ДатаСчетаФактурыКомиссионера, ДЕНЬ) КАК ДатаСФ_Исходная,
		|	Товары.НомерСчетаФактурыКомиссионера КАК НомерСФ
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ОтчетКомиссионера.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Количество > 0
		|   И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|СГРУППИРОВАТЬ ПО
		|	Товары.НомерСтроки,
		|	Товары.Ссылка,
		|	Товары.Ссылка.Организация,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	Товары.СуммаСНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаПродажи / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПродажи / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	Товары.СуммаПродажи,
		|	Товары.СуммаПродажиНДС,
		|	Товары.СуммаВознаграждения,
		|	ВЫБОР
		|		КОГДА Товары.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Товары.ДатаСчетаФактурыКомиссионера = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(Товары.Ссылка.Дата, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Товары.ДатаСчетаФактурыКомиссионера, ДЕНЬ)
		|	КОНЕЦ,
		|	НАЧАЛОПЕРИОДА(Товары.ДатаСчетаФактурыКомиссионера, ДЕНЬ),
		|	ВЫБОР
		|		КОГДА Товары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА Товары.Ссылка.Контрагент
		|		ИНАЧЕ Товары.Покупатель
		|	КОНЕЦ,
		|	Товары.Покупатель,
		|	Товары.НомерСчетаФактурыКомиссионера
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товары.Ссылка,
		|	Организация,
		|	Покупатель,
		|	ДатаСФ,
		|	НомерСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтрокиДокумента,
		|	Товары.Номенклатура,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Характеристика,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	Товары.ЦенаПередачи,
		|	Товары.СуммаПередачи,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СуммаНДС,
		|	Товары.СуммаВознаграждения,
		|	Товары.Покупатель,
		|	Товары.ДатаСФ,
		|	Товары.Покупатель_Исходный,
		|	Товары.ДатаСФ_Исходная,
		|	Товары.НомерСФ,
		|	ЛОЖЬ КАК ВидыЗапасовЗаполнены,
		|	1 КАК Коэффициент,
		|	1 КАК КлючСтроки,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	NULL КАК ТипЗапасов,
		|	0 КАК СуммаНДСВознаграждения
		|ИЗ
		|	Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сторно,
		|	ВидыЗапасов.ДатаСчетаФактурыКомиссионера КАК ДатаСФ,
		|	ВидыЗапасов.НомерСчетаФактурыКомиссионера КАК НомерСФ,
		|	ВидыЗапасов.Покупатель
		|ИЗ
		|	Документ.ОтчетКомиссионера.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И ВидыЗапасов.Количество > 0
		|   И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК КлючСтроки,
		|	Товары.Покупатель,
		|	Товары.ДатаСФ,
		|	ВЫБОР
		|		КОГДА Товары.НомерСФ = """"
		|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.НомерСчетаФактуры, """")
		|		ИНАЧЕ Товары.НомерСФ
		|	КОНЕЦ КАК НомерСФ,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СчетФактураВыданный.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ВыставленСФ,
		|	МАКСИМУМ(ЕСТЬNULL(СчетФактураВыданный.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка))) КАК СчетФактура,
		|	МИНИМУМ(Товары.НомерСтрокиДокумента) КАК ЗначениеУпорядочивания
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураКомиссионеру.Покупатели КАК СчетФактураВыданный
		|		ПО Товары.Ссылка = СчетФактураВыданный.Ссылка.ДокументОснование
		|			И Товары.Организация = СчетФактураВыданный.Ссылка.Организация
		|			И (Товары.ДатаСФ = НАЧАЛОПЕРИОДА(СчетФактураВыданный.Ссылка.Дата, ДЕНЬ)
		|				ИЛИ Товары.ДатаСФ = ДАТАВРЕМЯ(1, 1, 1))
		|			И (Товары.Покупатель = СчетФактураВыданный.Покупатель
		|				ИЛИ СчетФактураВыданный.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|			И (Товары.НомерСФ = СчетФактураВыданный.НомерСчетаФактуры
		|				ИЛИ СчетФактураВыданный.НомерСчетаФактуры = """")
		|			И (НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Покупатель,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Ссылка.Дата ЕСТЬ NULL 
		|			ТОГДА Товары.ДатаСФ
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(СчетФактураВыданный.Ссылка.Дата, ДЕНЬ)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Товары.НомерСФ = """"
		|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.НомерСчетаФактуры, """")
		|		ИНАЧЕ Товары.НомерСФ
		|	КОНЕЦ,
		|	Товары.ДатаСФ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначениеУпорядочивания");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыПоиска      = "Номенклатура, Характеристика, ДатаСФ_Исходная, Покупатель_Исходный, НомерСФ";
	ЗаполняемыеРеквизиты = "НомерГТД, СтранаПроисхождения, ТипЗапасов";
	
	ТабТовары = РезультатыЗапроса[1].Выгрузить();
	
	// Распределение НДС вознаграждения
	БазаРаспределенияПоСуммеВознаграждения = ТабТовары.ВыгрузитьКолонку("СуммаВознаграждения");
	
	РаспределениеНДСВознаграждения = 
		ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеИБ.СуммаНДСВознаграждения, БазаРаспределенияПоСуммеВознаграждения);
	
	Если ЗначениеЗаполнено(РаспределениеНДСВознаграждения) Тогда
		ТабТовары.ЗагрузитьКолонку(РаспределениеНДСВознаграждения, "СуммаНДСВознаграждения");
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(РеквизитыПоиска + ",ВидыЗапасовЗаполнены");
	ТабТовары.Индексы.Добавить(РеквизитыПоиска + ",ВидыЗапасовЗаполнены");
	
	ВидыЗапасов = РезультатыЗапроса[2].Выбрать();
	Пока ВидыЗапасов.Следующий() Цикл
	
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВидыЗапасов, "Номенклатура, Характеристика, НомерСФ");
		
		СтруктураПоиска.Покупатель_Исходный  = ВидыЗапасов.Покупатель;
		СтруктураПоиска.ДатаСФ_Исходная      = ВидыЗапасов.ДатаСФ;
		СтруктураПоиска.ВидыЗапасовЗаполнены = Ложь;
		
		НайденныеСтроки     = ТабТовары.НайтиСтроки(СтруктураПоиска);
		ОсталосьВидаЗапасов = ВидыЗапасов.Количество;
	
		Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
			
			Если ОсталосьВидаЗапасов = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаДокумента.Количество <= ОсталосьВидаЗапасов Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВидыЗапасов, ЗаполняемыеРеквизиты);
				СтрокаДокумента.ВидыЗапасовЗаполнены = Истина;
				ОсталосьВидаЗапасов = ОсталосьВидаЗапасов - СтрокаДокумента.Количество;
				
			Иначе
			
				// Выделение новой строки с заполненным видом запасов.
				НоваяСтрока = ТабТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				
				ДоляВидаЗапасовВСтрокеДокумента = ОсталосьВидаЗапасов / СтрокаДокумента.Количество;
				
				НоваяСтрока.Количество             = ОсталосьВидаЗапасов;
				НоваяСтрока.СуммаПередачи          = Окр(СтрокаДокумента.СуммаПередачи * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.Сумма                  = Окр(СтрокаДокумента.Сумма * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаНДС               = Окр(СтрокаДокумента.СуммаНДС * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаВознаграждения    = Окр(СтрокаДокумента.СуммаВознаграждения * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаНДСВознаграждения = Окр(СтрокаДокумента.СуммаНДСВознаграждения * ДоляВидаЗапасовВСтрокеДокумента, 2);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидыЗапасов, ЗаполняемыеРеквизиты);
				
				СтрокаДокумента.Количество             = СтрокаДокумента.Количество - НоваяСтрока.Количество;
				СтрокаДокумента.СуммаПередачи          = СтрокаДокумента.СуммаПередачи - НоваяСтрока.СуммаПередачи;
				СтрокаДокумента.Сумма                  = СтрокаДокумента.Сумма - НоваяСтрока.Сумма;
				СтрокаДокумента.СуммаНДС               = СтрокаДокумента.СуммаНДС - НоваяСтрока.СуммаНДС;
				СтрокаДокумента.СуммаВознаграждения    = СтрокаДокумента.СуммаВознаграждения - НоваяСтрока.СуммаВознаграждения;
				СтрокаДокумента.СуммаНДСВознаграждения = СтрокаДокумента.СуммаНДСВознаграждения - НоваяСтрока.СуммаНДСВознаграждения;
				ОсталосьВидаЗапасов = 0;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Таблица покупателей
	ТабПокупатели = РезультатыЗапроса[3].Выгрузить();
	СтруктураПоиска = Новый Структура("Покупатель, ДатаСФ, НомерСФ");
	
	Для Каждого Строка Из ТабПокупатели Цикл
		НайденныеСтроки = Новый Массив();
		Строка.КлючСтроки = ТабПокупатели.Индекс(Строка) + 1;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		НайденныеСтроки = ТабТовары.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
			СтрокаТоваров.КлючСтроки = Строка.КлючСтроки;
		КонецЦикла;
	КонецЦикла;
	
	ТабТовары.Сортировать("НомерСтрокиДокумента Возр");
	ДанныеXDTO.Вставить("Товары",     ТабТовары);
	ДанныеXDTO.Вставить("Покупатели", ТабПокупатели);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионераОСписании_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомиссионераОСписании_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссионераОСписании_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомиссионераОСписании;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионераОСписании_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                  "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                        "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                        "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "СпособРасчетаКомиссионногоВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Покупатели");
	ДобавитьПКС(СвойстваТЧ, "", "ВыставленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионераОСписании_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "С" + Сред(ДанныеИБ.Номер, 7));
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
		ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", Неопределено, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("СпособРасчетаКомиссионногоВознаграждения", "НеРассчитывается");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	Товары.СуммаСНДС КАК Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС,
		|	1 КАК КлючСтроки
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТабТовары = РезультатыЗапроса[0].Выгрузить();
	ТабТовары.Колонки.Добавить("НомерГТД");
	ТабТовары.Колонки.Добавить("СтранаПроисхождения");
	ТабТовары.Колонки.Добавить("СуммаНДСВознаграждения");
	ТабТовары.Колонки.Добавить("ТипЗапасов");
	ТабТовары.Индексы.Добавить("Номенклатура, Характеристика, НомерГТД");
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Неопределено);
	СтруктураПоиска.Вставить("Характеристика", Неопределено);
	СтруктураПоиска.Вставить("НомерГТД", Неопределено);
	ВидыЗапасов = РезультатыЗапроса[1].Выбрать();
	Пока ВидыЗапасов.Следующий() Цикл
		СтруктураПоиска.Номенклатура   = ВидыЗапасов.Номенклатура;
		СтруктураПоиска.Характеристика = ВидыЗапасов.Характеристика;
		НайденныеСтроки = ТабТовары.НайтиСтроки(СтруктураПоиска);
		ОсталосьВидаЗапасов = ВидыЗапасов.Количество;
		Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
			Если ОсталосьВидаЗапасов = 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаДокумента.Количество <= ОсталосьВидаЗапасов Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВидыЗапасов, "НомерГТД, СтранаПроисхождения, ТипЗапасов");
				ОсталосьВидаЗапасов = ОсталосьВидаЗапасов - СтрокаДокумента.Количество;
			Иначе
				// Выделяем из строки документа новую строку с определенным видом запасов
				НоваяСтрока = ТабТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				ДоляВидаЗапасовВСтрокеДокумента = ОсталосьВидаЗапасов / СтрокаДокумента.Количество;
				НоваяСтрока.Количество 					= ОсталосьВидаЗапасов;
				НоваяСтрока.Сумма      					= Окр(СтрокаДокумента.Сумма * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаНДС   					= Окр(СтрокаДокумента.СуммаНДС * ДоляВидаЗапасовВСтрокеДокумента, 2);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидыЗапасов, "НомерГТД, СтранаПроисхождения, ТипЗапасов");
				СтрокаДокумента.Количество				= СтрокаДокумента.Количество - НоваяСтрока.Количество;
				СтрокаДокумента.Сумма					= СтрокаДокумента.Сумма - НоваяСтрока.Сумма;
				СтрокаДокумента.СуммаНДС				= СтрокаДокумента.СуммаНДС - НоваяСтрока.СуммаНДС;
				СтрокаДокумента.КлючСтроки 				= 1;
				ОсталосьВидаЗапасов = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТабТовары.Сортировать("НомерСтрокиДокумента Возр");
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ТабПокупатели = Новый ТаблицаЗначений;
	ТабПокупатели.Колонки.Добавить("ВыставленСФ");
	ТабПокупатели.Колонки.Добавить("Покупатель");
	ТабПокупатели.Колонки.Добавить("КлючСтроки");
	НоваяСтрока = ТабПокупатели.Добавить();
	НоваяСтрока.ВыставленСФ	= Ложь;
	НоваяСтрока.Покупатель	= ДанныеИБ.Контрагент;
	НоваяСтрока.КлючСтроки	= 1;
	ДанныеXDTO.Вставить("Покупатели", ТабПокупатели);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссияОрганизСписаниеКомиссионер
Процедура ДобавитьПКО_Документ_ОтчетКомиссияОрганизСписаниеКомиссионер(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссияОрганизСписаниеКомиссионер";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссияОрганизСписаниеКомиссионер_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",           "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",               "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",               "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",               "СпособРасчетаКомиссионногоВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "",               "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Покупатели");
	ДобавитьПКС(СвойстваТЧ, "", "ВыставленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссияОрганизСписаниеКомиссионер_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ИС" + Сред(ДанныеИБ.Номер, 8);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("НомерВходящегоДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДок, Ложь, Истина));
	ДанныеXDTO.Вставить("СпособРасчетаКомиссионногоВознаграждения","НеРассчитывается");
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером";
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Комиссионер, КомпонентыОбмена);
	КонецЕсли;
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор", ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	// Табличные части
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	Товары.СуммаСНДС КАК Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС,
		|	1 КАК КлючСтроки
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТабТовары = РезультатыЗапроса[0].Выгрузить();
	ТабТовары.Колонки.Добавить("НомерГТД");
	ТабТовары.Колонки.Добавить("СтранаПроисхождения");
	ТабТовары.Колонки.Добавить("ТипЗапасов");
	ТабТовары.Индексы.Добавить("Номенклатура, Характеристика, НомерГТД");
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Неопределено);
	СтруктураПоиска.Вставить("Характеристика", Неопределено);
	СтруктураПоиска.Вставить("НомерГТД", Неопределено);
	ВидыЗапасов = РезультатыЗапроса[1].Выбрать();
	Пока ВидыЗапасов.Следующий() Цикл
		СтруктураПоиска.Номенклатура   = ВидыЗапасов.Номенклатура;
		СтруктураПоиска.Характеристика = ВидыЗапасов.Характеристика;
		НайденныеСтроки = ТабТовары.НайтиСтроки(СтруктураПоиска);
		ОсталосьВидаЗапасов = ВидыЗапасов.Количество;
		Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
			Если ОсталосьВидаЗапасов = 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаДокумента.Количество <= ОсталосьВидаЗапасов Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВидыЗапасов, "НомерГТД, СтранаПроисхождения, ТипЗапасов");
				ОсталосьВидаЗапасов = ОсталосьВидаЗапасов - СтрокаДокумента.Количество;
			Иначе
				// Выделяем из строки документа новую строку с определенным видом запасов.
				НоваяСтрока = ТабТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				ДоляВидаЗапасовВСтрокеДокумента = ОсталосьВидаЗапасов / СтрокаДокумента.Количество;
				НоваяСтрока.Количество 					= ОсталосьВидаЗапасов;
				НоваяСтрока.Сумма      					= Окр(СтрокаДокумента.Сумма * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаНДС   					= Окр(СтрокаДокумента.СуммаНДС * ДоляВидаЗапасовВСтрокеДокумента, 2);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидыЗапасов, "НомерГТД, СтранаПроисхождения, ТипЗапасов");
				СтрокаДокумента.Количество				= СтрокаДокумента.Количество - НоваяСтрока.Количество;
				СтрокаДокумента.Сумма					= СтрокаДокумента.Сумма - НоваяСтрока.Сумма;
				СтрокаДокумента.СуммаНДС				= СтрокаДокумента.СуммаНДС - НоваяСтрока.СуммаНДС;
				СтрокаДокумента.КлючСтроки 				= 1;
				ОсталосьВидаЗапасов = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТабТовары.Сортировать("НомерСтрокиДокумента Возр");
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ТабПокупатели = Новый ТаблицаЗначений;
	ТабПокупатели.Колонки.Добавить("ВыставленСФ");
	ТабПокупатели.Колонки.Добавить("Покупатель");
	ТабПокупатели.Колонки.Добавить("КлючСтроки");
	НоваяСтрока = ТабПокупатели.Добавить();
	НоваяСтрока.ВыставленСФ	= Ложь;
	НоваяСтрока.Покупатель	= ДанныеИБ.Контрагент;
	НоваяСтрока.КлючСтроки	= 1;
	ДанныеXDTO.Вставить("Покупатели", ТабПокупатели);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссияОрганизСписаниеКомитент
Процедура ДобавитьПКО_Документ_ОтчетКомиссияОрганизСписаниеКомитент(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссияОрганизСписаниеКомитент";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссияОрганизСписаниеКомитент_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комиссионер",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",               "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",               "СпособРасчетаКомиссионногоВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "",               "СтавкаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "",               "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссияОрганизСписаниеКомитент_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ИС" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Комиссионер;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	ПараметрыПоУмолчанию.ВидДоговора =	"СКомитентом";
	
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Организация, КомпонентыОбмена);
	КонецЕсли;
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор", ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	ДанныеXDTO.Вставить("СпособРасчетаКомиссионногоВознаграждения","НеРассчитывается");
	ДанныеXDTO.Вставить("СтавкаНДСВознаграждения","НДС18");
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	//Товары
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаПоступления,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	Товары.СуммаСНДС КАК СуммаПоступления,
		|	Товары.СуммаСНДС КАК Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомитенту_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомитенту;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПроцентВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомиссионногоВознагражд");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",     "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "УдержатьВознаграждение",      "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "Услуга",                      "УслугаПоВознаграждению", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                            "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                            "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",         "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
		ПараметрыПоУмолчанию.ВидДоговора = "СКомитентом";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", Неопределено, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	// Увеличиваем суммы документа на модуль отрицательных сумм
	ЗапросОтрицательныеСуммы = Новый Запрос;
	ЗапросОтрицательныеСуммы.Текст = "ВЫБРАТЬ
	|ВЫБОР КОГДА СуммаПродажи < 0 ТОГДА
	|	(-1)*СуммаПродажи 
	|ИНАЧЕ 0 КОНЕЦ КАК СуммаПродажи,
	|ВЫБОР КОГДА СуммаВознаграждения < 0 ТОГДА
	|	(-1)*СуммаВознаграждения 
	|ИНАЧЕ 0 КОНЕЦ КАК СуммаВознаграждения
	|ИЗ Документ.ОтчетКомитенту.Товары
	|ГДЕ Ссылка = &Ссылка
	|	И (СуммаПродажи < 0 ИЛИ СуммаВознаграждения < 0)
	|ИТОГИ Сумма(СуммаПродажи), Сумма(СуммаВознаграждения) ПО ОБЩИЕ";
	ЗапросОтрицательныеСуммы.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = ЗапросОтрицательныеСуммы.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента + Выборка.СуммаПродажи);
		ДанныеXDTO.Вставить("СуммаВознаграждения", ДанныеИБ.СуммаВознаграждения + Выборка.СуммаВознаграждения);
	КонецЕсли;
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтавкаНДСВознаграждения) Тогда
		ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", "БезНДС");
	КонецЕсли;
	
	//Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаПродажи / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПродажи / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаПоступления,
		|	ВЫБОР
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|				ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|			ТОГДА ВЫРАЗИТЬ(Товары.СуммаПродажи * 0.1 / 1.1 КАК ЧИСЛО(15, 2))
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|				ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|			ТОГДА ВЫРАЗИТЬ(Товары.СуммаПродажи * 0.18 / 1.18 КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	Товары.СуммаСНДС КАК СуммаПоступления,
		|	Товары.СуммаПродажи КАК Сумма,
		|	Товары.СуммаВознаграждения,
		|	ВЫРАЗИТЬ(&КоэффициентПересчета * Товары.СуммаВознаграждения КАК ЧИСЛО(15, 2)) КАК СуммаНДСВознаграждения,
		|	Товары.Покупатель,
		|	Товары.ДатаСчетаФактуры КАК ДатаРеализации
		|ИЗ
		|	Документ.ОтчетКомитенту.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("КоэффициентПересчета", ?(ДанныеИБ.СуммаВознаграждения = 0, 0, ДанныеИБ.СуммаНДСВознаграждения / ДанныеИБ.СуммаВознаграждения));
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитентуОСписании_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомитентуОСписании_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомитентуОСписании;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",               "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",               "СпособРасчетаКомиссионногоВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "",               "СтавкаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "",               "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "С" + Сред(ДанныеИБ.Номер, 7));
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
		ПараметрыПоУмолчанию.ВидДоговора = "СКомитентом";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", Неопределено, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("СпособРасчетаКомиссионногоВознаграждения", "НеРассчитывается");
	ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", "БезНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	
	//Товары
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаПоступления,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	Товары.СуммаСНДС КАК СуммаПоступления,
		|	Товары.СуммаСНДС КАК Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС
		|ИЗ
		|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидЦены",            "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",    "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                   "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "УчетВыручкиВОперационнойКассе", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорЭквайринга", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ЭквайринговыйТерминал", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартамиПодарочныхСертификатов");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорЭквайринга", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ЭквайринговыйТерминал", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1, "Справочник_ВидыПодарочныхСертификатов");
	ДобавитьПКС(СвойстваТЧ, "", "ДействителенДо", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыЗапроса = ДанныеИБ.ДополнительныеСвойства.РезультатыЗапроса;
	
	СуммаДокумента = ДанныеИБ.СуммаДокумента;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты") Тогда
		ПодарочныеСертификаты = РезультатыЗапроса[8].Выгрузить();
		СуммаДокумента = СуммаДокумента + ПодарочныеСертификаты.Итог("Сумма");
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Сумма", СуммаДокумента);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ТабТовары = РезультатыЗапроса[3].Выгрузить();
	
	Для Каждого СтрокаТовары Из ТабТовары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.Поставщик)
			И ТипЗнч(СтрокаТовары.Поставщик) = Тип("СправочникСсылка.Организации") Тогда
			СтрокаТовары.Поставщик = КонтрагентИзОрганизации(СтрокаТовары.Поставщик, КомпонентыОбмена);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ТабОплатаКартами = РезультатыЗапроса[4].Выгрузить();
	ТабОплатаКартами.Колонки.Добавить("ДоговорЭквайринга");
	ТабОплатаКартами.Колонки.Добавить("ЭквайринговыйТерминал");	
	Для Каждого Строка Из ТабОплатаКартами Цикл
	
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент               = Строка.Эквайрер;
		ПараметрыПоУмолчанию.ВидДоговора              = "Прочее";
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = Константы.ВалютаРегламентированногоУчета.Получить();
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;	
	
		Строка.ЭквайринговыйТерминал = Новый Структура("Номер, Ссылка", СокрЛП(Строка.Номер), Строка.Ссылка);
		Строка.ДоговорЭквайринга     = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);	
	
	КонецЦикла;
	ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ТабОплатаКартами);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ОплатаСертификатами") Тогда
		ОплатаСертификатами = РезультатыЗапроса[5].Выгрузить();
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
			ОплатаСертификатами.Колонки.Добавить("ВидПодарочногоСертификата");
			Для Каждого ОС Из ОплатаСертификатами Цикл
				ОС.ВидПодарочногоСертификата = Новый Структура("Значение, ИмяПКО",
					ОС.ВидПодарочногоСертификатаСсылка, "Справочник_ВидыПодарочныхСертификатов");
			КонецЦикла;
		КонецЕсли;
		ДанныеXDTO.Вставить("ОплатаСертификатами", ОплатаСертификатами);
	КонецЕсли;
	
	ТабУслуги = РезультатыЗапроса[6].Выгрузить();
	ТаблицаУслугЗаполнитьПринципала(КомпонентыОбмена, ТабУслуги);
	
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	
	// Оплата подарочных сертификатов платёжными картами.
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартамиПодарочныхСертификатов") Тогда
		
		ТабОплатаПСКартами = РезультатыЗапроса[9].Выгрузить();
		ТабОплатаПСКартами.Колонки.Добавить("ДоговорЭквайринга");
		ТабОплатаПСКартами.Колонки.Добавить("ЭквайринговыйТерминал");
	
		ИндексЭквайрера = ТабОплатаПСКартами.Индексы.Добавить("Эквайрер");
	
		Для Каждого Строка Из ТабОплатаПСКартами Цикл
	
			ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
			ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
			ПараметрыПоУмолчанию.Контрагент               = Строка.Эквайрер;
			ПараметрыПоУмолчанию.ВидДоговора              = "Прочее";
			ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = Константы.ВалютаРегламентированногоУчета.Получить();
			ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;	
	
			Строка.ЭквайринговыйТерминал = Новый Структура("Номер, Ссылка", СокрЛП(Строка.Номер), Строка.Ссылка);
			Строка.ДоговорЭквайринга     = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);	
			
		КонецЦикла;
	
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартамиПодарочныхСертификатов", ТабОплатаПСКартами);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		ДанныеXDTO.Вставить("УчетВыручкиВОперационнойКассе", Истина);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		// Символ "-" проставляем искуственно, если из БП загружен документ с пустым номером.
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
		
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ВыгрузитьРасшифровкуПлатежаКонвертацияВалюты(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ДанныеШапки.СБДС_Дата);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПоПлатежнымКартам_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		// Символ "-" проставляем искуственно, если из БП загружен документ с пустым номером.
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	// Однострочная расшифровка платежа
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	СтрокаРП.КурсВзаиморасчетов = ДанныеШапки.Валюта_Курс;
	СтрокаРП.КратностьВзаиморасчетов = ДанныеШапки.Валюта_Кратность;
	СтрокаРП.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
	ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
	ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	
	СтрокаРП.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		// Символ "-" проставляем искуственно если из БП загружен документ с пустым номером.
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		СчетУчетаРасчетов = "79.02";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет Тогда
		СчетУчетаРасчетов = "57.01";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета Тогда
		СчетУчетаРасчетов = "51";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		СчетУчетаРасчетов = "70";
	Иначе
		// Счет учета расчетов определяется из данных табличной части
		СчетУчетаРасчетов = "";
	КонецЕсли;
	
	РасшифровкаПлатежа = ДанныеИБ.ДополнительныеСвойства.РасшифровкаПлатежаРасширенная.Выгрузить();
	
	// Расшифровка платежа
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Сумма, СтатьяДДС");
			
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				НоваяСтрока.СчетУчетаРасчетов = Строка.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетУчетаРасчетов) Тогда
				Если ЗначениеЗаполнено(СчетУчетаРасчетов) Тогда
					НоваяСтрока.СчетУчетаРасчетов = СчетУчетаРасчетов;
				ИначеЕсли ЭтоУТ() Тогда
					НоваяСтрока.СчетУчетаРасчетов = СчетУчетаРасчетовПрочихОперацийДДС(Новый Структура("СтатьяДДС", Строка.СтатьяДДС));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.Сумма             = ДанныеИБ.СуммаДокумента;
		НоваяСтрока.СтатьяДДС         = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		Если ЗначениеЗаполнено(СчетУчетаРасчетов) Тогда
			НоваяСтрока.СчетУчетаРасчетов = СчетУчетаРасчетов;
		ИначеЕсли ЭтоУТ() Тогда
			НоваяСтрока.СчетУчетаРасчетов = СчетУчетаРасчетовПрочихОперацийДДС(Новый Структура("СтатьяДДС", ДанныеИБ.СтатьяДвиженияДенежныхСредств));
		КонецЕсли;
	КонецЕсли;	
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДоходов", 1, "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетДоходов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		// Символ "-" проставляем искуственно, если из БП загружен документ с пустым номером.
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ВыгрузитьРасшифровкуПлатежаПрочиеДоходы(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                  "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",  "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                        "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		// Символ "-" проставляем искуственно, если из БП загружен документ с пустым номером.
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	// Контрагент и банковский счет
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		ИЛИ  ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации Тогда
		ДанныеКонтрагента = ПолучитьДанныеКонтрагентаПоБанкСчетуОрганизации(ДанныеИБ.БанковскийСчетОтправитель, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Контрагент", ДанныеКонтрагента.Контрагент);
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеКонтрагента.БанковскийСчетКонтрагента);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеИБ.БанковскийСчетКонтрагента);
	КонецЕсли;
		
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	РасшифровкаПлатежаРасширенная = ДанныеИБ.ДополнительныеСвойства.РасшифровкаПлатежаРасширенная;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	АлгоритмКонвертации = АлгоритмВыгрузкиРасчетыСКонтрагентамиОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетСотрудника", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",           "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		// Символ "-" проставляем искуственно, если из БП загружен документ с пустым номером.
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого СтрокаТЧ Из ДанныеИБ.РасшифровкаПлатежа Цикл
			СтрокаРП = ТабРП.Добавить();
			СтрокаРП.Сумма = СтрокаТЧ.Сумма;
			СтрокаРП.СтатьяДДС = СтрокаТЧ.СтатьяДвиженияДенежныхСредств;
		КонецЦикла;
	Иначе
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель", "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",  "СкладПолучатель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "ПодразделениеОтправитель", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ПодразделениеПолучатель", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Подразделения.
	ДанныеXDTO.Вставить("ПодразделениеОтправитель", Неопределено);
	ДанныеXDTO.Вставить("ПодразделениеПолучатель",  Неопределено);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		
		СкладОтправитель                      = ДанныеИБ.СкладОтправитель;
		СкладПолучатель                       = ДанныеИБ.СкладПолучатель;
	    СоответствиеДляПолученияПодразделений = Неопределено;
	    ТекПодразделениеОтправитель           = Неопределено;
	    ТекПодразделениеПолучатель            = Неопределено;
	    ДополнитьСоответствие                 = Ложь;
	    
	    КомпонентыОбмена.ПараметрыКонвертации.Свойство("СоответствиеДляПолученияПодразделений", СоответствиеДляПолученияПодразделений);
	    
	    Если СоответствиеДляПолученияПодразделений = Неопределено Тогда
	    	СоответствиеДляПолученияПодразделений = Новый Соответствие;
	    	ДополнитьСоответствие = Истина;
	    Иначе 
	    	ТекПодразделениеОтправитель = СоответствиеДляПолученияПодразделений.Получить(СкладОтправитель);
	    	ТекПодразделениеПолучатель = СоответствиеДляПолученияПодразделений.Получить(СкладПолучатель);
	    КонецЕсли;
	
	    Если ТекПодразделениеОтправитель = Неопределено Тогда
	    	ТекПодразделениеОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "Подразделение");
	    	ДополнитьСоответствие = Истина;
	    КонецЕсли;
	
	    Если ТекПодразделениеПолучатель = Неопределено Тогда
	    	ТекПодразделениеПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "Подразделение");
	    	ДополнитьСоответствие = Истина;
	    КонецЕсли;
	
	    Если ЗначениеЗаполнено(ТекПодразделениеОтправитель) Тогда
	
	    	РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(ТекПодразделениеОтправитель, ДанныеИБ.Организация);
		
			СтруктураДанныеПодразделения = Новый Структура(
				"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
				Строка(ТекПодразделениеОтправитель),
				РегистрацияПодразделенияВНалоговомОргане);
			
			Инструкция = Новый Структура(
				"Значение, ИмяПКО",
				СтруктураДанныеПодразделения,
				"Справочник_Подразделения_ИзСтруктуры");
			
			ДанныеXDTO.Вставить("ПодразделениеОтправитель", Инструкция);
	
	    КонецЕсли;
	
	    Если ЗначениеЗаполнено(ТекПодразделениеПолучатель) Тогда
	
	    	РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(ТекПодразделениеПолучатель, ДанныеИБ.Организация);
		
			СтруктураДанныеПодразделения = Новый Структура(
				"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
				Строка(ТекПодразделениеПолучатель),
				РегистрацияПодразделенияВНалоговомОргане);
			
			Инструкция = Новый Структура(
				"Значение, ИмяПКО",
				СтруктураДанныеПодразделения,
				"Справочник_Подразделения_ИзСтруктуры");
			
			ДанныеXDTO.Вставить("ПодразделениеПолучатель", Инструкция);
	
	    КонецЕсли;
	
		Если ДополнитьСоответствие Тогда
	
			СоответствиеДляПолученияПодразделений.Вставить(СкладОтправитель, ТекПодразделениеОтправитель);
			СоответствиеДляПолученияПодразделений.Вставить(СкладПолучатель, ТекПодразделениеПолучатель);
			КомпонентыОбмена.ПараметрыКонвертации.Вставить("СоответствиеДляПолученияПодразделений", СоответствиеДляПолученияПодразделений);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеСкладаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.СкладПолучатель, "ТипСклада,РозничныйВидЦены");
	
	Если ДанныеСкладаПолучателя.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин
		И ЗначениеЗаполнено(ДанныеСкладаПолучателя.РозничныйВидЦены) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВидыЗапасов.Количество,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|			ТОГДА ""ВозвратнаяТара""
			|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ КАК ТипЗапасов,
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ВидыЗапасов
			|ГДЕ
			|	ВидыЗапасов.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаТоваров.Количество КАК Количество,
			|	ТаблицаТоваров.ТипЗапасов КАК ТипЗапасов,
			|	ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
			|	* ВЫБОР
			|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЦенаВРознице,
			|	ТаблицаТоваров.Номенклатура.СтавкаНДС КАК СтавкаНДСВРознице
			|ПОМЕСТИТЬ ПервичныеДанные
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Дата,
			|				ВидЦены = &ВидЦен
			|					И Номенклатура В
			|						(ВЫБРАТЬ
			|							ТаблицаТоваров.Номенклатура
			|						ИЗ
			|							ТаблицаТоваров КАК ТаблицаТоваров)
			|					И  (Характеристика В (ВЫБРАТЬ ТаблицаТоваров.Характеристика ИЗ ТаблицаТоваров КАК ТаблицаТоваров)
			|						ИЛИ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ТаблицаТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И ТаблицаТоваров.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
			|		ПО (ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ТаблицаТоваров.ТипЗапасов = ""СобственныеТовары""
			|	ИЛИ ТаблицаТоваров.ТипЗапасов = ""ВозвратнаяТара""
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.ЕдиницаИзмерения,
			|	ТаблицаТоваров.Количество,
			|	ТаблицаТоваров.ТипЗапасов,
			|	0,
			|	NULL
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.ТипЗапасов = ""КомиссионныеТовары""
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПервичныеДанные.Номенклатура,
			|	ПервичныеДанные.ЕдиницаИзмерения,
			|	ПервичныеДанные.Количество,
			|	ПервичныеДанные.ТипЗапасов,
			|	ВЫБОР
			|		КОГДА ПервичныеДанные.ЦенаВРознице < 0.01
			|			ТОГДА 0.01
			|		ИНАЧЕ ВЫРАЗИТЬ(ПервичныеДанные.ЦенаВРознице КАК ЧИСЛО(15, 2))
			|	КОНЕЦ КАК ЦенаВРознице,
			|	ПервичныеДанные.СтавкаНДСВРознице,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ПервичныеДанные.ЦенаВРознице < 0.01
			|				ТОГДА 0.01
			|			ИНАЧЕ ВЫРАЗИТЬ(ПервичныеДанные.ЦенаВРознице КАК ЧИСЛО(15, 2))
			|		КОНЕЦ * ПервичныеДанные.Количество КАК ЧИСЛО(15, 2)) КАК СуммаВРознице
			|ИЗ
			|	ПервичныеДанные КАК ПервичныеДанные";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТоваров.ЕдиницаИзмерения",
			"ТаблицаТоваров.Номенклатура"));
		
		Запрос.УстановитьПараметр("Дата",	КонецДня(ДанныеИБ.Дата));
		Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("ВидЦен", ДанныеСкладаПолучателя.РозничныйВидЦены);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
			|ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура 					КАК Номенклатура,
			|ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
			|ВидыЗапасов.Количество 					КАК Количество,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|			ТОГДА ""ВозвратнаяТара""
			|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ 									КАК ТипЗапасов
			|ИЗ
			|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ВидыЗапасов
			|ГДЕ
			|	ВидыЗапасов.Ссылка = &Ссылка
			|";
			
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВОприходование_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",       "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7));
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	
	ТаблицаТовары = ДанныеИБ.ДополнительныеСвойства.Товары;
	ТаблицаТовары.Колонки.Добавить("ТипЗапасов");
	ТаблицаТовары.ЗаполнитьЗначения("СобственныеТовары", "ТипЗапасов");
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	ДанныеXDTO.Вставить("Сумма", ТаблицаТовары.Итог("Сумма"));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВСписание_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7));
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	
	#Область Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВидыЗапасов.Количество,
	|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
	|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	1 КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	Документ.ПересортицаТоваров.ВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения,
	|	ВидыЗапасов.Коэффициент,
	|	ВидыЗапасов.НомерГТД,
	|	ВидыЗапасов.СтранаПроисхождения,
	|	ВидыЗапасов.ТипЗапасов,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	СУММА(ВидыЗапасов.Количество) КАК Количество
	|ИЗ
	|	ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
	|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения,
	|	ВидыЗапасов.Коэффициент,
	|	ВидыЗапасов.НомерГТД,
	|	ВидыЗапасов.СтранаПроисхождения,
	|	ВидыЗапасов.ТипЗапасов,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСтрокТаблицыТовары.НомерСтроки";
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВСписаниеЗапасов_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВСписаниеЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7));
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	
	#Область Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВидыЗапасов.Количество,
	|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
	|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	1 КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	Документ.ПересортицаТоваров.ВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения,
	|	ВидыЗапасов.Коэффициент,
	|	ВидыЗапасов.НомерГТД,
	|	ВидыЗапасов.СтранаПроисхождения,
	|	ВидыЗапасов.ТипЗапасов,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	СУММА(ВидыЗапасов.Количество) КАК Количество
	|ИЗ
	|	ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
	|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения,
	|	ВидыЗапасов.Коэффициент,
	|	ВидыЗапасов.НомерГТД,
	|	ВидыЗапасов.СтранаПроисхождения,
	|	ВидыЗапасов.ТипЗапасов,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСтрокТаблицыТовары.НомерСтроки";
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОВнутренняяПередача_Отправка
Процедура ДобавитьПКО_Документ_ПКОВнутренняяПередача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОВнутренняяПередача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОВнутренняяПередача";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОВнутренняяПередача_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_ПКОВнутренняяПередача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	
	ВыгрузитьРасшифровкуПлатежаКонвертацияВалюты(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ДанныеИБ.Дата);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "Инкассация");
	КонецЕсли;
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПоступлениеИзКассыККМ_Отправка
Процедура ДобавитьПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПоступлениеИзКассыККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПоступлениеИзКассыККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1, "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка Тогда
		// Операция конвертируется по этому правилу только при использовании формата "1.0.beta" и "1.0".
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС         = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма             = ДанныеИБ.СуммаДокумента;
		НоваяСтрока.СчетУчетаРасчетов = "57.01";
	Иначе
		// Выгружается документ с хоз. операцией "Прочее поступление денежных средств", 
		// в табличной части которого статьи доходов либо не заполнены,
		// либо в ней указаны только статьи активов/пассивов.
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
				Если ЭтоУТ() Тогда
					СчетРасчетов = СчетУчетаРасчетовПрочихОперацийДДС(Новый Структура("СтатьяДДС",Строка.СтатьяДвиженияДенежныхСредств));
				КонецЕсли;
	
				НоваяСтрока = ТабРасшифровка.Добавить();
				НоваяСтрока.СтатьяДДС         = Строка.СтатьяДвиженияДенежныхСредств;
				НоваяСтрока.Сумма             = Строка.Сумма;
				НоваяСтрока.СчетУчетаРасчетов = СчетРасчетов;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДоходов", 1, "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетДоходов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	
	ВыгрузитьРасшифровкуПлатежаПрочиеДоходы(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", 1, "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации Тогда
		КонтрагентСсылка = неопределено;
		ОрганизацияКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КассаОтправитель, "Владелец");
		КонтрагентСсылка = КонтрагентИзОрганизации(ОрганизацияКонтрагента, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	КонецЕсли;
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	АлгоритмКонвертации = АлгоритмВыгрузкиРасчетыСКонтрагентамиОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",    "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо", "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Отправка
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",   "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "ВыручкаНТТ", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КассаККМ, "Склад"), КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ДанныеXDTO.Вставить("ВыручкаНТТ", Ложь);
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриобретениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ЗакупкаПодДеятельность",    "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЗаказПоставщику",           "Заказ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Излишки");
	ДобавитьПКС(СвойстваТЧ, "", "ВариантОтражения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Недостачи");
	ДобавитьПКС(СвойстваТЧ, "", "ВариантОтражения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ПТиУ_РасширенныеДанныеИБ(ДанныеИБ);
	
	ДанныеXDTO.Вставить("КурсВзаиморасчетов",      РасширенныеДанныеИБ.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", РасширенныеДанныеИБ.КратностьВзаиморасчетов);
	
	// Склад
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	//Заказ
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3")
		И ЗначениеЗаполнено(ДанныеИБ.ЗаказПоставщику)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.ЗаказПоставщику) Тогда
		
		Инструкция = Новый Структура("Значение, ИмяПКО",
					ДанныеИБ.ЗаказПоставщику,
					"Документ_ЗаказПоставщику_Отправка");
		ДанныеXDTO.Вставить("Заказ", Инструкция);
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// ВидОперации
	// При выключенной ФО "Использовать комиссию при продаже" реквизит "Хозяйсвенная операция"
	// может быть не заполнен, что означает обычную реализацию.
	ДанныеXDTO.Вставить("ВидОперации");
	Если Не ЗначениеЗаполнено(ДанныеИБ.ХозяйственнаяОперация)
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда
		ДанныеXDTO.ВидОперации = "ПокупкаУПоставщика";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		ДанныеXDTO.ВидОперации = "ПриемНаКомиссию";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
		ДанныеXDTO.ВидОперации = "ЗакупкаПоИмпорту";
	КонецЕсли;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию,
			"СКомитентом", "СПоставщиком");
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов;
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка",  ДанныеИБ.ЗаказПоставщику, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "НДСпоСтавкам4и2");
	
	// Товары
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
	    ОпределитьСтавкуНДС_Отправка(Товары, НДСПоСтавкам2и4);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = РасширенныеДанныеИБ.Услуги;
	РасшифровкаДопРасходов = РасширенныеДанныеИБ.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	// Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура.
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = (РасшифровкаДопРасходов.Количество()=0);
	ТипСоставногоСвойства = Неопределено;
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		ИначеЕсли СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка = ДанныеИБ.Ссылка Тогда
			// Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки.
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
			Если ТипСоставногоСвойства = Неопределено Тогда
				ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПоступлениеТоваровУслуг_Отправка");
				ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
			КонецЕсли;
			СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
		Иначе
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_ПоступлениеТоваровУслуг_Отправка");
		КонецЕсли;
	КонецЦикла;
		
	Если НетБазыДляРаспределения Тогда
		Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
		РасшифровкаДопРасходов.Очистить();
	КонецЕсли;
	
	Если Услуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(Услуги, НДСПоСтавкам2и4);
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	// Излишки
	Излишки = РасширенныеДанныеИБ.Излишки;
	Если Излишки.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(Излишки, НДСПоСтавкам2и4);	
		ДанныеXDTO.Вставить("Излишки", Излишки);
	КонецЕсли;
	
	// Недостачи
	Недостачи = РасширенныеДанныеИБ.Недостачи;
	Если Недостачи.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(Недостачи, НДСПоСтавкам2и4);
		ДанныеXDTO.Вставить("Недостачи", Недостачи);
	КонецЕсли;
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеУслугПрочихАктивов_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеУслугПрочихАктивов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриобретениеУслугПрочихАктивов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ЗакупкаПодДеятельность",    "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1, "Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "У" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		ДанныеXDTO.Вставить("КурсВзаиморасчетов",      ДанныеИБ.Курс);
		ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеИБ.Кратность);
	Иначе
		ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	КонецЕсли;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = ВалютаРеглУчета И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов;
		КонецЕсли;
	
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент               = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора              = "СПоставщиком";
		ПараметрыПоУмолчанию.Дата                     = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                    = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", Неопределено, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	//Услуги
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Расходы.Содержание,
		|	ВЫБОР КОГДА Расходы.Количество = 0 ТОГДА 1 ИНАЧЕ Расходы.Количество КОНЕЦ КАК Количество,
		|	Расходы.Цена,
		|	Расходы.Сумма,
		|	Расходы.СтавкаНДС,
		|	Расходы.СуммаНДС,
		|	Расходы.СтатьяРасходов КАК СтатьяРасходов,
		|	Расходы.Подразделение КАК Подразделение,
		|	Расходы.СчетУчета КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА Расходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|			ТОГДА 0
		|		ИНАЧЕ Расходы.СуммаСНДС
		|	КОНЕЦ КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА Расходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоДопРасходы
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Услуги = Запрос.Выполнить().Выгрузить();
	Услуги.Колонки.Добавить("СчетЗатрат");
	Услуги.Колонки.Добавить("ПодразделениеЗатрат");
	Услуги.Колонки.Добавить("СтатьяЗатрат");
	
	// Заполнение счета затрат.
	Для Каждого СтрокаУслуги Из Услуги Цикл
		// Параметры №2,3 и 4 необходимы для вычисления счета затрат в УП/КА.
		СтрокаУслуги.СчетЗатрат = СчетУчетаПоСтатье(СтрокаУслуги.СтатьяРасходов, ДанныеИБ.Организация, СтрокаУслуги.Подразделение, СтрокаУслуги.СчетУчета);
		
		Если ЗначениеЗаполнено(СтрокаУслуги.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаУслуги.Подразделение);
			СтрокаУслуги.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУслуги.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаУслуги.СтатьяЗатрат = СтрокаУслуги.СтатьяРасходов;
		КонецЕсли;
		
	КонецЦикла;
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "НДСпоСтавкам4и2");
	ОпределитьСтавкуНДС_Отправка(Услуги, НДСПоСтавкам2и4);
	
	ДанныеXDTO.Вставить("Сумма", Услуги.Итог("Сумма"));
	
	РасшифровкаДопРасходов = ДоходыИРасходыСервер.ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров(ДанныеИБ.Ссылка);
	// Удаление строк с пустыми суммами из расшифровки.
	КоличествоСтрокДопРасходы = РасшифровкаДопРасходов.Количество();
	Для НомерСтроки = 1 По КоличествоСтрокДопРасходы Цикл
		Индекс = КоличествоСтрокДопРасходы - НомерСтроки;
		Если Окр(РасшифровкаДопРасходов[Индекс].Сумма,2) = 0 Тогда
			РасшифровкаДопРасходов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = (РасшифровкаДопРасходов.Количество()=0);
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступления) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетБазыДляРаспределения Тогда
		Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
		РасшифровкаДопРасходов.Очистить();
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Услуги", Услуги);
	ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПТУЧерезПодотчетноеЛицо_Отправка
Процедура ДобавитьПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПТУЧерезПодотчетноеЛицо_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриобретениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Валюта",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов", "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",     "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",     "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",      "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",       "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",      "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                     "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "Т" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ПТиУ_РасширенныеДанныеИБ(ДанныеИБ);
	
	ДанныеXDTO.Вставить("КурсДокумента",      РасширенныеДанныеИБ.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьДокумента", РасширенныеДанныеИБ.КратностьВзаиморасчетов);
	
	// Склад
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	Товары = РасширенныеДанныеИБ.Товары;
	Товары.Колонки.Добавить("Поставщик");
	Товары.Колонки.Добавить("ПредъявленСФ");
	Товары.Колонки.Добавить("ДатаСФ");
	Товары.Колонки.Добавить("НомерСФ");
	Товары.Колонки.Добавить("НомерВходящегоДокумента");
	Товары.Колонки.Добавить("ДатаВходящегоДокумента");
	
	Товары.ЗаполнитьЗначения(ДанныеИБ.Контрагент,              "Поставщик");
	Товары.ЗаполнитьЗначения(ДанныеИБ.НомерВходящегоДокумента, "НомерВходящегоДокумента");
	Товары.ЗаполнитьЗначения(ДанныеИБ.ДатаВходящегоДокумента,  "ДатаВходящегоДокумента");
	
	// Услуги
	Услуги = РасширенныеДанныеИБ.Услуги;
	Услуги.Колонки.Добавить("Поставщик");
	Услуги.Колонки.Добавить("ПредъявленСФ");
	Услуги.Колонки.Добавить("ДатаСФ");
	Услуги.Колонки.Добавить("НомерСФ");
	Услуги.Колонки.Добавить("НомерВходящегоДокумента");
	Услуги.Колонки.Добавить("ДатаВходящегоДокумента");
	Услуги.Колонки.Добавить("Содержание");
	
	Услуги.ЗаполнитьЗначения(ДанныеИБ.Контрагент,              "Поставщик");
	Услуги.ЗаполнитьЗначения(ДанныеИБ.НомерВходящегоДокумента, "НомерВходящегоДокумента");
	Услуги.ЗаполнитьЗначения(ДанныеИБ.ДатаВходящегоДокумента,  "ДатаВходящегоДокумента");
	
	Для Каждого Строка Из Услуги Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Содержание = ?(ЗначениеЗаполнено(Строка.Номенклатура.НаименованиеПолное), Строка.Номенклатура.НаименованиеПолное, Строка.Номенклатура.Наименование);
		
	КонецЦикла;
	
	// Счет-фактура.
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка.Номер КАК НомерСФ,
		|	Ссылка.ДатаСоставления КАК ДатаСФ
		|ИЗ Документ.СчетФактураПолученный.ДокументыОснования
		|ГДЕ ДокументОснование = &Ссылка
		|	И Ссылка.Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Товары.ЗаполнитьЗначения(Истина,          "ПредъявленСФ");
		Товары.ЗаполнитьЗначения(Выборка.ДатаСФ,  "ДатаСФ");
		Товары.ЗаполнитьЗначения(Выборка.НомерСФ, "НомерСФ");
		
		Услуги.ЗаполнитьЗначения(Истина,          "ПредъявленСФ");
		Услуги.ЗаполнитьЗначения(Выборка.ДатаСФ,  "ДатаСФ");
		Услуги.ЗаполнитьЗначения(Выборка.НомерСФ, "НомерСФ");
		
	Иначе
		Товары.ЗаполнитьЗначения(Ложь, "ПредъявленСФ");
		Услуги.ЗаполнитьЗначения(Ложь, "ПредъявленСФ");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары",        Товары);
	ДанныеXDTO.Вставить("ПрочиеРасходы", Услуги);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПУПАЧерезПодотчетноеЛицо_Отправка
Процедура ДобавитьПКО_Документ_ПУПАЧерезПодотчетноеЛицо_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПУПАЧерезПодотчетноеЛицо_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриобретениеУслугПрочихАктивов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПУПАЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов", "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",     "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",     "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",      "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",       "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",      "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                     "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПУПАЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "У" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		ДанныеXDTO.Вставить("КурсДокумента",      ДанныеИБ.Курс);
		ДанныеXDTO.Вставить("КратностьДокумента", ДанныеИБ.Кратность);
	Иначе
		ВыгрузитьКурсИКратностьДокумента(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Расходы.Ссылка.ДатаВходящегоДокумента 		КАК ДатаВходящегоДокумента,
	|	Расходы.Ссылка.НомерВходящегоДокумента		КАК НомерВходящегоДокумента,
	|	Расходы.Ссылка.Контрагент КАК Поставщик,
	|	ВЫБОР КОГДА СФ.Ссылка is null ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ 							КАК ПредъявленСФ,
	|	ВЫБОР КОГДА СФ.Ссылка is null ТОГДА
	|		""""
	|	ИНАЧЕ СФ.Ссылка.Номер КОНЕЦ 				КАК НомерСФ,
	|	ВЫБОР КОГДА СФ.Ссылка is null ТОГДА
	|		null
	|	ИНАЧЕ СФ.Ссылка.ДатаСоставления КОНЕЦ 		КАК ДатаСФ,
	|	Расходы.Содержание 							КАК Содержание,
	|	Расходы.Сумма 								КАК Сумма,
	|	Расходы.СтавкаНДС 							КАК СтавкаНДС,
	|	Расходы.СуммаНДС 							КАК СуммаНДС,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.СтатьяРасходов КАК СтатьяРасходов,
	|	Расходы.СчетУчета КАК СчетУчета
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Расходы
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
	|ПО СФ.ДокументОснование = Расходы.Ссылка
	|	И СФ.Ссылка.Проведен
	|ГДЕ
	|	Расходы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
	ТабПрочее = Запрос.Выполнить().Выгрузить();
	ТабПрочее.Колонки.Добавить("ПодразделениеЗатрат");
	ТабПрочее.Колонки.Добавить("СчетЗатрат");
	ТабПрочее.Колонки.Добавить("СтатьяЗатрат");
	Для Каждого СтрокаПрочее Из ТабПрочее Цикл
		Если ЗначениеЗаполнено(СтрокаПрочее.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаПрочее.Подразделение);
			СтрокаПрочее.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
	
		СчетЗатрат = СчетУчетаПоСтатье(СтрокаПрочее.СтатьяРасходов, ДанныеИБ.Организация, СтрокаПрочее.Подразделение, СтрокаПрочее.СчетУчета);
	
		Если ТипЗнч(СтрокаПрочее.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаПрочее.СтатьяЗатрат = СтрокаПрочее.СтатьяРасходов;
		КонецЕсли;
		
		СтрокаПрочее.СчетЗатрат = СчетЗатрат;
	КонецЦикла;
	ДанныеXDTO.Вставить("ПрочиеРасходы", ТабПрочее);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                          "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",                  "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации",      "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",           "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВариантОформленияПродажи",       "ВидЭД", , "ВидыЭД_Реализация_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",               "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",                "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПереходаПраваСобственности", "ДатаПереходаПраваСобственности");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",             "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",               "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЛицо",               "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",              "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                       "Продавец", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",             "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отпустил",                       "ОтпускПроизвел", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",          "ВидОперации", , "ВидыОперацийРеализацияТоваров_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                               "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                               "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                               "Заказ", 1, "Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                               "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                               "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииСтрокой = "";
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ХозяйственнаяОперация) Тогда
		ВидОперацииСтрокой = "РеализацияКлиенту";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
		
		Если ДанныеИБ.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ВПути Тогда
			ВидОперацииСтрокой = "ОтгрузкаБезПереходаПравСобственности_ВПути";
		Иначе
			ВидОперацииСтрокой = "ОтгрузкаБезПереходаПравСобственности_Реализовано"; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперацииСтрокой <> "" Тогда
		ДанныеXDTO.Вставить("ВидОперации", ВидОперацииСтрокой);
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ГлавныйБухгалтер.ФизическоеЛицо);
	ДанныеXDTO.Вставить("Руководитель",     ДанныеИБ.Руководитель.ФизическоеЛицо);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ЗаказКлиента) И ТипЗнч(ДанныеИБ.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ДанныеXDTO.Вставить("Заказ", ДанныеИБ.ЗаказКлиента);
	Иначе
		ДанныеXDTO.Вставить("Заказ", Неопределено);
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ЗаполнитьЗначенияСвойств(ПараметрыПоУмолчанию, ДанныеИБ);
		
		ПараметрыПоУмолчанию.ВидДоговора =
			?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию, "СКомиссионером", "СПокупателем");
			
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = ВалютаРеглУчета И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		КонецЕсли;
		
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.ЗаказКлиента, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	// Данные шапки документа необходимы для вычисления
	// курса и кратности взаиморасчетов.
	ШапкаДокумента = "ВЫБРАТЬ
		|	ДанныеШапкиДокумента.Валюта КАК Валюта,
		|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ДанныеШапкиДокумента.Курс КАК КурсВзаиморасчетов,
		|	ДанныеШапкиДокумента.Кратность КАК КратностьВзаиморасчетов
		|ПОМЕСТИТЬ ДанныеШапкиДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеШапкиДокумента
		|ГДЕ
		|	ДанныеШапкиДокумента.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		
		ДанныеОперации = "
			|ВЫБРАТЬ
			|	ДанныеШапкиДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ДанныеШапкиДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
			|ИЗ
			|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
		
	Иначе
		
		ДанныеОперации = "
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
			|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
			|ИЗ
			|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
			|				&Дата,
			|				Валюта В
			|					(ВЫБРАТЬ
			|						Док.Валюта
			|					ИЗ
			|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
			|		ПО ДанныеШапкиДокумента.Валюта = КурсВалютыДокумента.Валюта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
		
	КонецЕсли;
	
	ТоварыИУслугиДокумента = "
		|	ВЫБРАТЬ
		|		Товары.Номенклатура КАК Номенклатура,
		|	ВЫБОР КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА
		|		ВЫБОР КОГДА ХарактеристикаСпр.НаименованиеПолное = """" ТОГДА 
		|			ХарактеристикаСпр.Наименование
		|		ИНАЧЕ
		|			ХарактеристикаСпр.НаименованиеПолное
		|		КОНЕЦ
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР КОГДА НоменклатураСпр.НаименованиеПолное = """" ТОГДА
		|		НоменклатураСпр.Наименование
		|	ИНАЧЕ
		|		НоменклатураСпр.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС,
		|	Товары.Номенклатура.ТипНоменклатуры,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО НоменклатураСпр.Ссылка = Товары.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСпр
		|		ПО ХарактеристикаСпр.Ссылка = Товары.Характеристика
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВидыЗапасов.Ссылка.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|					ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|												КАК Цена,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура 				КАК Номенклатура,
		|	ВЫБОР КОГДА ТаблицаТовары.ХарактеристикаНаименование = """" ТОГДА
		|		ТаблицаТовары.НоменклатураНаименование
		|	ИНАЧЕ
		|		ТаблицаТовары.НоменклатураНаименование + "" ("" + ТаблицаТовары.ХарактеристикаНаименование + "")""
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаТовары.Номенклатура.Принципал 	КАК ПринципалСсылка,
		|	ВЫБОР КОГДА 
		|		ТаблицаТовары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме)
		|		ИЛИ ТаблицаТовары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером) ТОГДА
		|			""Агентские""
		|		ИНАЧЕ ""Собственные""
		|	КОНЕЦ КАК ТипУслуги,
		|	ТаблицаТовары.Количество 				КАК Количество,
		|	ТаблицаТовары.Цена 						КАК Цена,
		|	ТаблицаТовары.СтавкаНДС 				КАК СтавкаНДС,
		|	ТаблицаТовары.Сумма 					КАК Сумма,
		|	ТаблицаТовары.СуммаНДС 					КАК СуммаНДС
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.НоменклатураТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	ИЛИ ТаблицаТовары.НоменклатураТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицыТоварыПоМаксСтроке 			
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура		
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура 				КАК Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения 			КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.СтавкаНДС 					КАК СтавкаНДС,
		|	ВидыЗапасов.НомерГТД					КАК НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения 		КАК СтранаПроисхождения,
		|	ВЫБОР КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|		И ВидыЗапасов.ВернутьМногооборотнуюТару ТОГДА
		|		""ВозвратнаяТара""
		|	ИНАЧЕ ВидыЗапасов.ТипЗапасов КОНЕЦ		КАК ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки 	КАК НомерСтрокиДокумента,
		|	ВЫРАЗИТЬ(ВидыЗапасов.Цена КАК Число(15,2))         КАК Цена,
		|	СУММА(ВидыЗапасов.Количество) 			           КАК Количество,
		|	СУММА(ВЫРАЗИТЬ(ВидыЗапасов.Сумма КАК Число(15,2))) КАК Сумма,
		|	СУММА(ВидыЗапасов.СуммаНДС) 			           КАК СуммаНДС
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицыТоварыПоМаксСтроке КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|		
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения,
		|	ВЫБОР КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|		И ВидыЗапасов.ВернутьМногооборотнуюТару ТОГДА
		|		""ВозвратнаяТара""
		|	ИНАЧЕ ВидыЗапасов.ТипЗапасов КОНЕЦ,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШапкаДокумента
		+ ДанныеОперации
		+ ТоварыИУслугиДокумента;
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",   ДанныеИБ.Дата);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОперации = РезультатыЗапроса[1].Выбрать();
	
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсВзаиморасчетов",      ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	
	ТабУслуги = РезультатыЗапроса[4].Выгрузить();
	ТабТовары = РезультатыЗапроса[6].Выгрузить();
	
	ТаблицаУслугЗаполнитьПринципала(КомпонентыОбмена, ТабУслуги);
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияУслугПрочихАктивов_Отправка
Процедура ДобавитьПКО_Документ_РеализацияУслугПрочихАктивов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияУслугПрочихАктивов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияУслугПрочихАктивов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияУслугПрочихАктивов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",        "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",          "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЛицо",          "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",         "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ВидЭД", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетДоходов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияУслугПрочихАктивов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = 	Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	ДанныеXDTO.Вставить("ВидЭД", "ТОРГ12");
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ГлавныйБухгалтер.ФизическоеЛицо);
	ДанныеXDTO.Вставить("Руководитель", ДанныеИБ.Руководитель.ФизическоеЛицо);
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = "СПокупателем";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = ВалютаРеглУчета И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", Неопределено, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	// Данные шапки документа необходимы для вычисления
	// курса и кратности взаиморасчетов.
	ШапкаДокумента = 
		"ВЫБРАТЬ
		|	ДанныеШапкиДокумента.Валюта,
		|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов,
		|	ДанныеШапкиДокумента.Курс КАК КурсВзаиморасчетов,
		|	ДанныеШапкиДокумента.Кратность КАК КратностьВзаиморасчетов
		|ПОМЕСТИТЬ ДанныеШапкиДокумента
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеШапкиДокумента
		|ГДЕ
		|	ДанныеШапкиДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		ДанныеОперации = "
			|ВЫБРАТЬ
			|	ДанныеШапкиДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ДанныеШапкиДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
			|ИЗ
			|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ДанныеОперации = "
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
			|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
			|ИЗ
			|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
			|				&Дата,
			|				Валюта В
			|					(ВЫБРАТЬ
			|						Док.Валюта
			|					ИЗ
			|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
			|		ПО ДанныеШапкиДокумента.Валюта = КурсВалютыДокумента.Валюта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
		
	УслугиДокумента = "
		|ВЫБРАТЬ
		|	РеализацияУслугПрочихАктивовДоходы.Содержание КАК Содержание,
		|	РеализацияУслугПрочихАктивовДоходы.Количество КАК Количество,
		|	РеализацияУслугПрочихАктивовДоходы.Цена КАК Цена,
		|	РеализацияУслугПрочихАктивовДоходы.Сумма КАК Сумма,
		|	РеализацияУслугПрочихАктивовДоходы.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияУслугПрочихАктивовДоходы.СуммаНДС КАК СуммаНДС,
		|	РеализацияУслугПрочихАктивовДоходы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ВЫБОР
		|		КОГДА СтатьиДоходов.СчетУчета ЕСТЬ NULL
		|			ТОГДА """"
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатьиДоходов.СчетУчета) = ТИП(СТРОКА)
		|			ТОГДА СтатьиДоходов.СчетУчета
		|	КОНЕЦ КАК СчетДоходов
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК РеализацияУслугПрочихАктивовДоходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
		|		ПО РеализацияУслугПрочихАктивовДоходы.СтатьяДоходов = СтатьиДоходов.Ссылка
		|ГДЕ
		|	РеализацияУслугПрочихАктивовДоходы.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ШапкаДокумента
		+ ДанныеОперации
		+ УслугиДокумента;
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОперации = РезультатыЗапроса[1].Выбрать();
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсВзаиморасчетов",      ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	
	ТабУслуги = РезультатыЗапроса[2].Выгрузить();
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВнутренняяПередача_Отправка
Процедура ДобавитьПКО_Документ_РКОВнутренняяПередача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВнутренняяПередача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВнутренняяПередача";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВнутренняяПередача_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "ОрганизацияПолучатель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОВнутренняяПередача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("СуммаВзаиморасчетов");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
	КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.Валюта, ДанныеИБ.Дата);
	НоваяСтрока.КурсВзаиморасчетов = КурсИКратность.Курс;
	НоваяСтрока.КратностьВзаиморасчетов = КурсИКратность.Кратность;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыдачаВКассуККМ_Отправка
Процедура ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыдачаВКассуККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыдачаВКассуККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыдачаВКассуККМ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_РКОВыдачаВКассуККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Подразделение) Тогда
		ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	Иначе
		ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Отправка
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	ТабРасшифровка.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	ТабРасшифровка.Колонки.Добавить("Сотрудник");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	
	НоваяСтрока.ДатаВедомостиНаВыплатуЗарплаты = ДанныеИБ.ДатаВедомостиНаВыплатуЗарплаты;
	НоваяСтрока.НомерВедомостиНаВыплатуЗарплаты = ДанныеИБ.НомерВедомостиНаВыплатуЗарплаты;
		
	Если ЗначениеЗаполнено(ДанныеИБ.Ведомость)
		И (НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаВедомостиНаВыплатуЗарплаты) ИЛИ НЕ ЗначениеЗаполнено(НоваяСтрока.НомерВедомостиНаВыплатуЗарплаты)) Тогда
		ДанныеВедомость = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ведомость, "Дата, Номер");
		НоваяСтрока.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомость.Номер;
		НоваяСтрока.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомость.Дата;
	КонецЕсли;
		
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком Тогда
		НоваяСтрока.Сотрудник = ДанныеИБ.ПодотчетноеЛицо;
	КонецЕсли;	
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ДанныеИБ.Валюта = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
	ИначеЕсли ДанныеИБ.Валюта <> ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
	КонецЕсли;
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	СтрокаРП.ВалютаКонвертации = ДанныеИБ.ВалютаКонвертации;
	СтрокаРП.КурсКонвертации = ДанныеИБ.КурсКонвертации;
	// КурсЦБНаДатуКонвертации
	ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаКонвертации, ДанныеИБ.Дата);
	СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	// СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
		ДанныеИБ.КурсКонвертации, ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность, ДанныеИБ.ВалютаКонвертации);
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	Иначе
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыРег, ПараметрыВалютыКонв);
	КонецЕсли;
	//Договор
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаКонвертации;
	ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
	ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
	ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	
	СтрокаРП.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "ВидОперации", , "ВидыОперацийРКОНаБанковскийСчет");
	ДобавитьПКС(СвойстваШапки, "",                      "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		
		// Документ с операцией "Выдача денежных средств в кассу ККМ" выгружается как прочая выдача.
		// Табличная часть "РасшифровкаПлатежа" для данной операции не заполняется,
		// поэтому выгружаем с одной строчкой и предустановленным счетом учета.
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС         = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма             = ДанныеИБ.СуммаДокумента;
		Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
			НоваяСтрока.СчетУчетаРасчетов = "50.02";
		Иначе
			НоваяСтрока.СчетУчетаРасчетов = "57.01";
		КонецЕсли;
	Иначе
		// Выгружается документ с операцией "Прочая выдача денежных средств", 
		// в табличной части "РасшифровкаПлатежа" которого, не указано ни одной статьи расходов.
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
				Если ЭтоУТ() Тогда
					СчетРасчетов = СчетУчетаРасчетовПрочихОперацийДДС(Новый Структура("СтатьяДДС", Строка.СтатьяДвиженияДенежныхСредств));
				КонецЕсли;
				
				НоваяСтрока = ТабРасшифровка.Добавить();
				НоваяСтрока.СтатьяДДС         = Строка.СтатьяДвиженияДенежныхСредств;
				НоваяСтрока.Сумма             = Строка.Сумма;
				НоваяСтрока.СчетУчетаРасчетов = СчетРасчетов;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяРасходов", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетРасходов", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	
	ВыгрузитьРасшифровкуПлатежаПрочиеРасходы(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", 1, "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидРасчетов", ДанныеШапки.ВидРасчетов);
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		// Поиск контрагента, соответствующего Организации.
		ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КассаПолучатель, "Владелец");
		КонтрагентСсылка = КонтрагентИзОрганизации(ОрганизацияПолучатель, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	КонецЕсли;
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",          "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо", "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Касса");
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидРасчетов", ДанныеШапки.ВидРасчетов);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",        "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ДанныеИБ.Валюта = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
	ИначеЕсли ДанныеИБ.Валюта <> ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
	КонецЕсли;
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	СтрокаРП.ВалютаКонвертации = ДанныеИБ.ВалютаКонвертации;
	СтрокаРП.КурсКонвертации = ДанныеИБ.КурсКонвертации;
	// КурсЦБНаДатуКонвертации
	ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаКонвертации, ДанныеИБ.Дата);
	СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	// СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
		ДанныеИБ.КурсКонвертации, ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность, ДанныеИБ.ВалютаКонвертации);
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	Иначе
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыРег, ПараметрыВалютыКонв);
	КонецЕсли;
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаКонвертации;
	Иначе 
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	КонецЕсли;
	ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
	ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
	ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	
	СтрокаРП.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",               "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",     "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",     "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",        "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",       "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",   "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                         "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗаработнойПлаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	
	ДатаВедомости = ДанныеИБ.ДатаВедомостиНаВыплатуЗарплаты;
	НомерВедомости = ДанныеИБ.НомерВедомостиНаВыплатуЗарплаты;
	Если (Не ЗначениеЗаполнено(ДатаВедомости)
			Или Не ЗначениеЗаполнено(НомерВедомости))
		И (ДанныеИБ.РасшифровкаПлатежа.Количество() > 0
			И ЗначениеЗаполнено(ДанныеИБ.РасшифровкаПлатежа[0].Ведомость)) Тогда
		
		НомерДатаВедомости = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РасшифровкаПлатежа[0].Ведомость, "Номер, Дата");
		
		ДатаВедомости = НомерДатаВедомости.Дата;
		НомерВедомости = НомерДатаВедомости.Номер;		
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	ТабРасшифровка.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.ДатаВедомостиНаВыплатуЗарплаты = ДатаВедомости;
	НоваяСтрока.НомерВедомостиНаВыплатуЗарплаты = НомерВедомости;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПРаботнику_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗПРаботнику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗПРаботнику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗПРаботнику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",        "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",           "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПРаботнику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	
	ДатаВедомости = ДанныеИБ.ДатаВедомостиНаВыплатуЗарплаты;
	НомерВедомости = ДанныеИБ.НомерВедомостиНаВыплатуЗарплаты;
	Если (Не ЗначениеЗаполнено(ДатаВедомости)
			Или Не ЗначениеЗаполнено(НомерВедомости))
		И (ДанныеИБ.РасшифровкаПлатежа.Количество() > 0
			И ЗначениеЗаполнено(ДанныеИБ.РасшифровкаПлатежа[0].Ведомость)) Тогда
		
		НомерДатаВедомости = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РасшифровкаПлатежа[0].Ведомость, "Номер, Дата");
		
		ДатаВедомости = НомерДатаВедомости.Дата;
		НомерВедомости = НомерДатаВедомости.Номер;		
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	ТабРасшифровка.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.ДатаВедомостиНаВыплатуЗарплаты = ДатаВедомости;
	НоваяСтрока.НомерВедомостиНаВыплатуЗарплаты = НомерВедомости;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "Код");
	ДобавитьПКС(СвойстваШапки, "КодБК",                     "ПоказательКБК");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",                  "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",        "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",          "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования",       "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",         "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "ПоказательТипа",            "ПоказательТипа");
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",         "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ПоказательДаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	
	ПоказательДаты = ДанныеИБ.ПоказательДаты;
	Если ЗначениеЗаполнено(ПоказательДаты) И ПоказательДаты <> "0" Тогда
		ПоказательДаты = Формат(СтроковыеФункцииКлиентСервер.СтрокаВДату(ПоказательДаты), "ДЛФ=D");
	КонецЕсли;
	ДанныеXDTO.Вставить("ПоказательДаты", ПоказательДаты);
	
	ПоказательНомера = ДанныеИБ.ПоказательНомера;
	Если ЗначениеЗаполнено(ПоказательНомера) И СтрДлина(ПоказательНомера) > 15
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда
		ДанныеXDTO.Вставить("ПоказательНомера", Лев(ПоказательНомера, 15));
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",        "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидОперации", ДанныеШапки.ВидОперацииПрочее);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	СчетРасчетов = "";
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
	
		СчетРасчетов = "57.01";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		Если ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			СчетРасчетов = "55.03";
		Иначе
			СчетРасчетов = "55.23";
		КонецЕсли; 	
	КонецЕсли;
	
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
			
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС         = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма             = Строка.Сумма;
			// Выгружается документ с операцией "ПрочаяВыдачаДенежныхСредств",
			// в котором указаны только статьи активов/пассивов.
			Если ЗначениеЗаполнено(СчетРасчетов) Тогда
				НоваяСтрока.СчетУчетаРасчетов = СчетРасчетов;
			ИначеЕсли ЭтоУТ() Тогда
				НоваяСтрока.СчетУчетаРасчетов = СчетУчетаРасчетовПрочихОперацийДДС(Новый Структура("СтатьяДДС", Строка.СтатьяДвиженияДенежныхСредств));
	        КонецЕсли;
			
		КонецЦикла;
	Иначе
	
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС         = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма             = ДанныеИБ.СуммаДокумента;
		Если ЗначениеЗаполнено(СчетРасчетов) Тогда
			НоваяСтрока.СчетУчетаРасчетов = СчетРасчетов;
		ИначеЕсли ЭтоУТ() Тогда
			НоваяСтрока.СчетУчетаРасчетов = СчетУчетаРасчетовПрочихОперацийДДС(Новый Структура("СтатьяДДС", ДанныеИБ.СтатьяДвиженияДенежныхСредств));
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",        "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяРасходов", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетРасходов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	
	ВыгрузитьРасшифровкуПлатежаПрочиеРасходы(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                  "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",              "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",    "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",      "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",  "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                        "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		
		ДанныеКонтрагента = ПолучитьДанныеКонтрагентаПоБанкСчетуОрганизации(ДанныеИБ.БанковскийСчетПолучатель, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Контрагент", ДанныеКонтрагента.Контрагент);
		ДанныеXDTO.Вставить("БанковскийСчет", ДанныеКонтрагента.БанковскийСчетКонтрагента);
		КонтрагентСсылка = ДанныеКонтрагента.Контрагент;
	Иначе
		ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.БанковскийСчетКонтрагента);
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидРасчетов", ДанныеШапки.ВидРасчетов);
	
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",        "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",           "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидРасчетов", ДанныеШапки.ВидРасчетов);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров
Процедура ДобавитьПКО_Документ_СборкаТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СборкаТоваров";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СборкаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СборкаТоваров_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Количество",         "Количество");
	ДобавитьПКС(СвойстваШапки, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",       "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Характеристика",     "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                   "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ТипЗапасов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &НоменклатураСсылка
		|;
		|////////////////////////////////////////////////////////////////////////////////";
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		
		ДанныеXDTO.Вставить("ВидОперации", "Сборка");
		ДанныеXDTO.Вставить("ТипЗапасов",  "СобственныеТовары");
		
		ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБРАТЬ
			|	ЕСТЬNULL(КлючиАналитикиУчетаНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
			|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
			|	ВидыЗапасов.Количество КАК Количество,
			|	ЕСТЬNULL(НомераГТД.Код, """") КАК НомерГТД,
			|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаПроисхождения,
			|	ВЫРАЗИТЬ(СборкаТоваровТовары.ДоляСтоимости * ВидыЗапасов.Количество / СборкаТоваровТовары.Количество КАК ЧИСЛО(10, 0)) КАК ДоляСтоимости,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
			|	КОНЕЦ КАК ТипЗапасов
			|ИЗ
			|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.ВидыЗапасовСписание КАК ВидыЗапасов
			|		ПО СборкаТоваровТовары.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
			|			И СборкаТоваровТовары.Ссылка = ВидыЗапасов.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
			|		ПО (ВидыЗапасов.НомерГТД = НомераГТД.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
			|		ПО СборкаТоваровТовары.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО (КлючиАналитикиУчетаНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка)
			|ГДЕ
			|	СборкаТоваровТовары.Ссылка = &Ссылка";
		
	Иначе
		
		ДанныеXDTO.Вставить("ВидОперации", "Разборка");
		
		ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБРАТЬ
			|	ЕСТЬNULL(КлючиАналитикиУчетаНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
			|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
			|	ВидыЗапасов.Количество КАК Количество,
			|	ЕСТЬNULL(НомераГТД.Код, """") КАК НомерГТД,
			|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаПроисхождения,
			|	ВЫРАЗИТЬ(СборкаТоваровТовары.ДоляСтоимости * ВидыЗапасов.Количество / СборкаТоваровТовары.Количество КАК ЧИСЛО(10, 0)) КАК ДоляСтоимости,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
			|	КОНЕЦ КАК ТипЗапасов
			|ИЗ
			|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.ВидыЗапасовОприходование КАК ВидыЗапасов
			|		ПО СборкаТоваровТовары.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
			|			И СборкаТоваровТовары.Ссылка = ВидыЗапасов.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
			|		ПО (ВидыЗапасов.НомерГТД = НомераГТД.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
			|		ПО СборкаТоваровТовары.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО (КлючиАналитикиУчетаНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка)
			|ГДЕ
			|	СборкаТоваровТовары.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВЫБОР
			|		КОГДА ВидыЗапасовСписание.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
			|	КОНЕЦ КАК ТипЗапасов
			|ИЗ
			|	Документ.СборкаТоваров.ВидыЗапасовСписание КАК ВидыЗапасовСписание
			|ГДЕ
			|	ВидыЗапасовСписание.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",             ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("НоменклатураСсылка", ДанныеИБ.Номенклатура);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеНоменклатуры = РезультатЗапроса[0].Выбрать();
	Если ДанныеНоменклатуры.Следующий() Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ДанныеНоменклатуры.ЕдиницаИзмерения);
	Иначе
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		
		ДанныеВидовЗапасов = РезультатЗапроса[2].Выбрать();
		
		Если ДанныеВидовЗапасов.Следующий() Тогда
			ДанныеXDTO.Вставить("ТипЗапасов", ДанныеВидовЗапасов.ТипЗапасов);
		Иначе
			ДанныеXDTO.Вставить("ТипЗапасов", "СобственныеТовары");
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", РезультатЗапроса[1].Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_СЗ_КорректировкаДолга
Процедура ДобавитьПКО_Документ_СЗ_КорректировкаДолга(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СЗ_КорректировкаДолга";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеЗадолженности;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СЗ_КорректировкаДолга_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",            "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",            "КонтрагентДебитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",            "КонтрагентКредитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",            "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",            "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СтатьяДоходов", 1, "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваШапки, "",            "СтатьяРасходов", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваШапки, "",            "СуммаДебиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СуммаКредиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СчетДт", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СчетКт", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СЗ_КорректировкаДолга_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидОперации",        "СписаниеЗадолженности");
	ДанныеXDTO.Вставить("Валюта",             ВалютаРегламентированногоУчета(КомпонентыОбмена));
	ДанныеXDTO.Вставить("КурсДокумента",      1);
	ДанныеXDTO.Вставить("КратностьДокумента", 1);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "С" + Сред(ДанныеИБ.Номер, 7));
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.РасчетыМеждуОрганизациями И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		ОрганизацияКонтрагента = ДанныеИБ.Контрагент;
		ВыгружаемыйКонтрагент = КонтрагентИзОрганизации(ОрганизацияКонтрагента, КомпонентыОбмена);
	Иначе
		ВыгружаемыйКонтрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	ДанныеЗадолженность = ВыгрузитьТаблицуЗадолженности("Задолженность",
		ДанныеИБ.Ссылка, ВыгружаемыйКонтрагент, ДанныеИБ.Организация, , КомпонентыОбмена);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности Тогда
		ДанныеXDTO.Вставить("КонтрагентКредитор",             ВыгружаемыйКонтрагент);
		ДанныеXDTO.Вставить("КонтрагентДебитор",              Справочники.Контрагенты.ПустаяСсылка());
		ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности",  0);
		ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", ДанныеИБ.Задолженность.Итог("Сумма"));
		ДанныеXDTO.Вставить("КредиторскаяЗадолженность",      ДанныеЗадолженность);
		
		СчетУчета = СчетУчетаПоСтатье(ДанныеИБ.СтатьяДоходов, ДанныеИБ.Организация, ДанныеИБ.Подразделение, ДанныеИБ.СчетУчета);
		ДанныеXDTO.Вставить("СчетДт", Неопределено);
		ДанныеXDTO.Вставить("СчетКт", СчетУчета);
		
		СтатьяДоходов = Неопределено;
		Если ТипЗнч(ДанныеИБ.СтатьяДоходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
			СтатьяДоходов = ДанныеИБ.СтатьяДоходов;
		КонецЕсли;
		
		ДанныеXDTO.Вставить("СтатьяДоходов", СтатьяДоходов);
		ДанныеXDTO.Вставить("СтатьяРасходов", Неопределено);
	Иначе
		ДанныеXDTO.Вставить("КонтрагентДебитор",  ВыгружаемыйКонтрагент);
		ДанныеXDTO.Вставить("КонтрагентКредитор", Справочники.Контрагенты.ПустаяСсылка());
		ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", ДанныеИБ.Задолженность.Итог("Сумма"));
		ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", 0);
		ДанныеXDTO.Вставить("ДебиторскаяЗадолженность",  ДанныеЗадолженность);
		
		СчетУчета = СчетУчетаПоСтатье(ДанныеИБ.СтатьяРасходов, ДанныеИБ.Организация, ДанныеИБ.Подразделение, ДанныеИБ.СчетУчета);
		ДанныеXDTO.Вставить("СчетДт", СчетУчета);
		ДанныеXDTO.Вставить("СчетКт", Неопределено);
		
		СтатьяРасходов = Неопределено;
		Если ТипЗнч(ДанныеИБ.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтатьяРасходов = ДанныеИБ.СтатьяРасходов;
		КонецЕсли;
		
		ДанныеXDTO.Вставить("СтатьяДоходов", Неопределено);
		ДанныеXDTO.Вставить("СтатьяРасходов", СтатьяРасходов);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостачТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеНедостачТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеНедостачТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеНедостачТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Инвентаризация", 1, "Документ_ИнвентаризационнаяОпись_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_Подразделения_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеНедостачТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА ""ВозвратнаяТара""
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.СписаниеНедостачТоваров.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаТоварыПоМаксСтроке
		|ИЗ
		|	Документ.СписаниеНедостачТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ВидыЗапасов.Количество) КАК Количество,
		|	0 КАК Сумма,
		|	0 КАК Цена,
		|	ПорядокСтрокТаблицыТовары.Характеристика КАК Характеристика
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоварыПоМаксСтроке КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения,
		|	ВидыЗапасов.ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки,
		|	ПорядокСтрокТаблицыТовары.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Инвентаризация", 1, "Документ_ИнвентаризационнаяОпись_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_Подразделения_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА ""ВозвратнаяТара""
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.СписаниеНедостачТоваров.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицыТовары.Номенклатура КАК Номенклатура,
		|	ТаблицыТовары.Характеристика КАК Характеристика,
		|	МАКСИМУМ(ТаблицыТовары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.СписаниеНедостачТоваров.Товары КАК ТаблицыТовары
		|ГДЕ
		|	ТаблицыТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицыТовары.Номенклатура,
		|	ТаблицыТовары.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ВидыЗапасов.Количество) КАК Количество,
		|	0 КАК Сумма,
		|	0 КАК Цена,
		|	ПорядокСтрокТаблицыТовары.Характеристика КАК Характеристика
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения,
		|	ВидыЗапасов.ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки,
		|	ПорядокСтрокТаблицыТовары.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплату_Отправка
Процедура ДобавитьПКО_Документ_СчетНаОплату_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетНаОплату_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетНаОплатуКлиенту;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетПокупателю";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплату_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Договор", 1, "Справочник_ДоговорыКонтрагентов");

КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплату_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеИБ.Договор, "ПорядокОплаты, ВалютаВзаиморасчетов");
		
		ДанныеXDTO.Вставить("Договор",                  ДанныеИБ.Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", (СвойстваДоговора.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях));
		
		ВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
		
	Иначе
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент               = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.Дата                     = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                    = ДанныеИБ.Номер;
	 	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
		ПараметрыПоУмолчанию.ВидДоговора
			= ВзаиморасчетыСервер.ВидДоговораКонтрагента(ДанныеИБ.Ссылка, Неопределено, Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.Ссылка, Неопределено, Неопределено);
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, ДанныеИБ.ДокументОснование, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",      "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "Исправление",          "Исправление");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",      "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",     "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "СчетФактураОснование", "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Выставлен", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "ДатаИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                     "НомерИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "НомерИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "",                     "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "СуммаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерИсходногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокумента", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера")
		Или ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
		И ДанныеИБ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Организация") Тогда
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", НачалоДня(ДанныеИБ.Дата));
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидСчетаФактуры", ?(ДанныеИБ.Корректировочный, "Корректировочный", "НаРеализацию"));
	
	КонтрагентСсылка = Неопределено;
	ТипОснования = ТипЗнч(ДанныеИБ.ДокументОснование);
	Если (ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		Или ТипОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"))
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "РасчетыЧерезОтдельногоКонтрагента") Тогда
		
		ОрганизацияПолучатель = Неопределено;
		Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			ОрганизацияПолучатель = ДанныеИБ.Контрагент;
		Иначе
			ОрганизацияОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Организация");
			Если ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
				Или ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
				
				Если ДанныеИБ.Организация = ОрганизацияОснования Тогда
					ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ОрганизацияПолучатель");
				Иначе
					ОрганизацияПолучатель = ОрганизацияОснования;
				КонецЕсли;
				
			Иначе
				
				Если ДанныеИБ.Организация = ОрганизацияОснования Тогда
					ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Комиссионер");
				Иначе
					ОрганизацияПолучатель = ОрганизацияОснования;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КонтрагентСсылка = КонтрагентИзОрганизации(ОрганизацияПолучатель, КомпонентыОбмена);
			
	ИначеЕсли ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Контрагент");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	
	ДанныеXDTO.Вставить("Выставлен", ЗначениеЗаполнено(ДанныеИБ.ДатаВыставления));
	ВыгрузитьСпособВыставленияСчетаФактуры(ДанныеXDTO, ДанныеИБ.ВыставленВЭлектронномВиде);
	
	Если ДанныеИБ.Корректировочный 
		И ДанныеИБ.Исправление 
		И ЗначениеЗаполнено(ДанныеИБ.СчетФактураОснование) Тогда
		
		ДанныеXDTO.Вставить("ДатаИсправляемогоКорректировочногоДокумента", ДанныеИБ.СчетФактураОснование.Дата);
		ДанныеXDTO.Вставить("НомерИсправляемогоКорректировочногоДокумента", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.СчетФактураОснование.Номер, Ложь, Истина));
	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаИсправленияИсходногоДокумента",  Неопределено);
	ДанныеXDTO.Вставить("НомерИсправленияИсходногоДокумента", Неопределено);
	ДанныеXDTO.Вставить("НомерИсходногоДокумента",            Неопределено);
	ДанныеXDTO.Вставить("ДатаИсходногоДокумента",             Неопределено);
	
	// Итоговые суммы и ставка НДС.
	МассивСФ = Новый Массив;
	МассивСФ.Добавить(ДанныеИБ.Ссылка);
	
	ПараметрыПечати = Новый Структура("ПечатьВВалюте, ВыводитьНаборы", ДанныеИБ.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить(), Ложь);
	ДанныеДляПечати = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивСФ);
	Если ДанныеДляПечати.Свойство("РезультатПоТабличнойЧасти") Тогда
		РезультатЗапроса = ДанныеДляПечати.РезультатПоТабличнойЧасти;
		Сумма = 0; СуммаНДС = 0; СтавкаНДС = Неопределено; ВыводитьСтавкуНДС = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				Сумма = Выборка.СуммаСНДС;
				СуммаНДС = Выборка.СуммаНДС;
			ИначеЕсли  Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
				Если ВыводитьСтавкуНДС И ЗначениеЗаполнено(Выборка.СтавкаНДС) Тогда
					Если СтавкаНДС = Неопределено Тогда
						СтавкаНДС = Выборка.СтавкаНДС;
					ИначеЕсли СтавкаНДС <> Выборка.СтавкаНДС Тогда
						СтавкаНДС = Неопределено;
						ВыводитьСтавкуНДС = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеXDTO.Вставить("Сумма", Сумма);
		ДанныеXDTO.Вставить("СуммаНДС", СуммаНДС);
		ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДС);
	КонецЕсли;
	
	// Документы-основания - заполненность проверяется при выполнении ПОД.
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Док.ДокументОснование КАК ДокументОснованиеСсылка,
		|	Док.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
		|	Док.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
		|	Док.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	Док.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДокументыОснования = Запрос.Выполнить().Выгрузить();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	
	Для Каждого СтрокаОснование Из ДокументыОснования Цикл
		
		Если ЗначениеЗаполнено(СтрокаОснование.ДатаИсходногоДокумента) Тогда
			ДанныеXDTO.Вставить("ДатаИсходногоДокумента", СтрокаОснование.ДатаИсходногоДокумента);
		Иначе
			Если Не ДанныеИБ.Корректировочный И ДанныеИБ.Исправление Тогда
				ДатаСчетФактурыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СчетФактураОснование, "Дата");
				ДанныеXDTO.Вставить("ДатаИсходногоДокумента", ДатаСчетФактурыОснования);  
				СтрокаОснование.ДатаИсходногоДокумента = ДатаСчетФактурыОснования;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОснование.НомерИсходногоДокумента) Тогда
			ДанныеXDTO.Вставить("НомерИсходногоДокумента", СтрокаОснование.НомерИсходногоДокумента);
		Иначе
			Если Не ДанныеИБ.Корректировочный И ДанныеИБ.Исправление Тогда
				НомерСчетФактурыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СчетФактураОснование, "Номер");
				НомерИсходногоДокумента   =	ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерСчетФактурыОснования, Ложь, Истина);
				ДанныеXDTO.Вставить("НомерИсходногоДокумента", НомерИсходногоДокумента); 
				СтрокаОснование.НомерИсходногоДокумента = НомерИсходногоДокумента;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОснование.НомерИсправленияИсходногоДокумента) Тогда
			ДанныеXDTO.Вставить("НомерИсправленияИсходногоДокумента", СтрокаОснование.НомерИсправленияИсходногоДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОснование.ДатаИсправленияИсходногоДокумента) Тогда
			ДанныеXDTO.Вставить("ДатаИсправленияИсходногоДокумента", СтрокаОснование.ДатаИсправленияИсходногоДокумента);
		КонецЕсли;
	
		ИмяПКО = ИмяПКОДляОбъектаДанных(КомпонентыОбмена, СтрокаОснование.ДокументОснованиеСсылка, ДанныеИБ.Организация);
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",СтрокаОснование.ДокументОснованиеСсылка,ИмяПКО);
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	Руководитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Руководитель");
	ДанныеXDTO.Вставить("Руководитель", Руководитель.ФизическоеЛицо);
	ГлавныйБухгалтер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ГлавныйБухгалтер");
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтер.ФизическоеЛицо);
	
	ПлатРасчДокументы = Новый ТаблицаЗначений;
	ПлатРасчДокументы.Колонки.Добавить("ДатаДокумента");
	ПлатРасчДокументы.Колонки.Добавить("НомерДокумента");
	Если НЕ (ДанныеИБ.Корректировочный И ДанныеИБ.ПлатежноРасчетныеДокументы.Количество() = 0) Тогда
		Для Каждого СтрокаДокумента Из ДанныеИБ.ПлатежноРасчетныеДокументы Цикл
			СтрокаПлатРасчДокумент = ПлатРасчДокументы.Добавить();
			СтрокаПлатРасчДокумент.ДатаДокумента = СтрокаДокумента.ДатаПлатежноРасчетногоДокумента;
			СтрокаПлатРасчДокумент.НомерДокумента = СтрокаДокумента.НомерПлатежноРасчетногоДокумента;
		КонецЦикла;
	КонецЕсли;
	
	Если ПлатРасчДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатРасчДокументы);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданныйАванс_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураВыданныйАванс_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураВыданныйАванс_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураВыданныйАванс;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданныйАванс_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                             "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",                  "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежноРасчетногоДокумента",  "ДатаПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                            "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежноРасчетногоДокумента", "НомерПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Сумма",                            "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                         "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "",                                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                                 "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "Выставлен", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                 "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                                 "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                                 "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                 "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",                  "КодВидаОперации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокумента", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданныйАванс_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ОрганизацияКонтрагента = ДанныеИБ.Контрагент;
		СсылкаНаКонтрагента = КонтрагентИзОрганизации(ОрганизацияКонтрагента, КомпонентыОбмена);
	ИначеЕсли ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		СсылкаНаКонтрагента = ДанныеИБ.Контрагент;
	Иначе
		СсылкаНаКонтрагента = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.КодВидаОперации) Тогда
		ДанныеXDTO.Вставить("КодВидаОперации", "02");
	КонецЕсли;
	
	Если ДанныеИБ.ВыставленВЭлектронномВиде Тогда
		ДанныеXDTO.Вставить("СпособВыставления", "ВЭлектронномВиде");
	Иначе
		ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	КонецЕсли; 
	
	ДанныеXDTO.Вставить("Контрагент",       СсылкаНаКонтрагента);
	ДанныеXDTO.Вставить("Выставлен",        ЗначениеЗаполнено(ДанныеИБ.ДатаВыставления));
	ДанныеXDTO.Вставить("Руководитель",     ДанныеИБ.Руководитель.ФизическоеЛицо);
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ГлавныйБухгалтер.ФизическоеЛицо);
	ДанныеXDTO.Вставить("Валюта",           Константы.ВалютаРегламентированногоУчета.Получить());
	ДанныеXDTO.Вставить("ВидСчетаФактуры",  "НаАванс");
	
	// Получение информации из документа-основания.
	ДокументОснование_ВалютаВзаиморасчетов     = Неопределено;
	ДокументОснование_ДоговорСсылка            = Неопределено;
	ДокументОснование_РасчетыВУсловныхЕдиницах = Ложь;
	ДокументОснование_ИмяПКО                   = "";
	
	Заказ = Новый Структура("Заказ, Соглашение, Сделка");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.ДокументОснование);
	
	ТипЗначенияДокументаОснования = ТипЗнч(ДанныеИБ.ДокументОснование);
	
	Если ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		Или ТипЗначенияДокументаОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		Или ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипЗначенияДокументаОснования = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		Или ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
			|	РасшифровкаПлатежа.Заказ,
			|	РасшифровкаПлатежа.Заказ.Соглашение КАК Соглашение,
			|	РасшифровкаПлатежа.Заказ.Сделка КАК Сделка,
			|	РасшифровкаПлатежа.ВалютаВзаиморасчетов
			|ПОМЕСТИТЬ ДанныеДоговора
			|ИЗ
			|	Документ." + ДанныеИБ.ДокументОснование.Метаданные().Имя + ".РасшифровкаПлатежа КАК РасшифровкаПлатежа
			|ГДЕ
			|	РасшифровкаПлатежа.Ссылка = &Ссылка
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Заказ
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.ВалютаВзаиморасчетов
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Соглашение
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Сделка
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора";
		
		ДанныеДоговора = Запрос.ВыполнитьПакет();
		
		СверткаПоЗаказам = ДанныеДоговора[1].Выгрузить();
	
		Если СверткаПоЗаказам.Количество() = 1 Тогда
			
			ЗаказКлиента = СверткаПоЗаказам[0].Заказ;
			
			Если ОбщегоНазначения.СсылкаСуществует(ЗаказКлиента) Тогда
				Если ТипЗнч(ЗаказКлиента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					ДокументОснование_ДоговорСсылка = ЗаказКлиента;
				ИначеЕсли ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					Заказ.Заказ = ЗаказКлиента;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СверткаПоВалютеВзаиморасчетов = ДанныеДоговора[2].Выгрузить();
		Если СверткаПоВалютеВзаиморасчетов.Количество() = 1 Тогда
			ДокументОснование_ВалютаВзаиморасчетов = СверткаПоВалютеВзаиморасчетов[0].ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СверткаПоСоглашениям = ДанныеДоговора[3].Выгрузить();
		Если СверткаПоСоглашениям.Количество() = 1 Тогда
			Заказ.Соглашение = СверткаПоСоглашениям[0].Соглашение;
		КонецЕсли;
		
		СверткаПоСделкам = ДанныеДоговора[4].Выгрузить();
		Если СверткаПоСделкам.Количество() = 1 Тогда
			Заказ.Сделка = СверткаПоСделкам[0].Сделка;
		КонецЕсли;
		
		Если ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			ДокументОснование_ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
		ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
				ДокументОснование_ИмяПКО = "Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка";
			Иначе
				ДокументОснование_ИмяПКО = "Документ_ОперацияПоПлатежнойКартеПриход_Отправка";
			КонецЕсли;
		ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
			ДокументОснование_ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
		ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ДокументОснование_ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";	
		ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			ДокументОснование_ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
			|	РасшифровкаПлатежа.Ссылка.Соглашение КАК Соглашение,
			|	РасшифровкаПлатежа.Ссылка.Соглашение.Валюта КАК ВалютаСоглашения,
			|	РасшифровкаПлатежа.Ссылка.Сделка КАК Сделка,
			|	РасшифровкаПлатежа.Заказ,
			|	РасшифровкаПлатежа.ВалютаВзаиморасчетов
			|ПОМЕСТИТЬ ДанныеДоговора
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.РасшифровкаПлатежа КАК РасшифровкаПлатежа
			|ГДЕ
			|	РасшифровкаПлатежа.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДанныеДоговора.Соглашение,
			|	ДанныеДоговора.Сделка,
			|	ДанныеДоговора.ВалютаВзаиморасчетов,
			|	ДанныеДоговора.ВалютаСоглашения
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Заказ
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора";
		
		ДанныеДоговора = Запрос.ВыполнитьПакет();
		
		ОсновныеРеквизиты = ДанныеДоговора[1].Выгрузить();
	
		Если ОсновныеРеквизиты.Количество() > 0 Тогда
			
			Заказ.Соглашение = ОсновныеРеквизиты[0].Соглашение;
			
			Если ЗначениеЗаполнено(ОсновныеРеквизиты[0].ВалютаСоглашения) Тогда
				ДокументОснование_ВалютаВзаиморасчетов = ОсновныеРеквизиты[0].ВалютаСоглашения;
			Иначе
				ДокументОснование_ВалютаВзаиморасчетов = ОсновныеРеквизиты[0].ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
	
		СверткаПоЗаказам = ДанныеДоговора[2].Выгрузить();
		Если СверткаПоЗаказам.Количество() = 1 Тогда
			
			ЗаказКлиента = СверткаПоЗаказам[0].Заказ;
			Если ТипЗнч(ЗаказКлиента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДокументОснование_ДоговорСсылка = ЗаказКлиента;
			ИначеЕсли ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Заказ.Заказ = ЗаказКлиента;
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОснование_ИмяПКО = "Документ_ВозвратТоваровОтКлиента_Отправка";
			
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		
		ИмяТЧ                    = "ДебиторскаяЗадолженность";
		ТипРасчетов              = "РасчетыСКлиентом";
		ДокументОснование_ИмяПКО = "Документ_ВЗ_НашаОрганизация";
		
		Если ДанныеИБ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "КонтрагентКредитор") Тогда
			ИмяТЧ = "КредиторскаяЗадолженность";
			ТипРасчетов = "РасчетыСПоставщиком";
			
			ДокументОснование_ИмяПКО = "Документ_ВЗ_ОрганизацияКредитор";
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ТабДок.Заказ,
			|	ТабДок.Заказ.Соглашение КАК Соглашение,
			|	ТабДок.Заказ.Сделка КАК Сделка,
			|	ТабДок.ВалютаВзаиморасчетов
			|ПОМЕСТИТЬ ДанныеДоговора
			|ИЗ
			|	Документ.ВзаимозачетЗадолженности." + ИмяТЧ + " КАК ТабДок
			|ГДЕ
			|	ТабДок.Ссылка = &Ссылка
			|	И ТабДок.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами." + ТипРасчетов + ")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Заказ
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.ВалютаВзаиморасчетов
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Соглашение
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Сделка
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора";
		
		ДанныеДоговора = Запрос.ВыполнитьПакет();
		
		СверткаПоЗаказам = ДанныеДоговора[1].Выгрузить();
		Если СверткаПоЗаказам.Количество() = 1 Тогда
			
			ЗаказКлиента = СверткаПоЗаказам[0].Заказ;
			Если ТипЗнч(ЗаказКлиента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДокументОснование_ДоговорСсылка = ЗаказКлиента;
			ИначеЕсли ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Заказ.Заказ = ЗаказКлиента;
			КонецЕсли;
			
		КонецЕсли;
		
		СверткаПоВалютеВзаиморасчетов = ДанныеДоговора[2].Выгрузить();
		Если СверткаПоВалютеВзаиморасчетов.Количество() = 1 Тогда
			ДокументОснование_ВалютаВзаиморасчетов = СверткаПоВалютеВзаиморасчетов[0].ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СверткаПоСоглашениям = ДанныеДоговора[3].Выгрузить();
		Если СверткаПоСоглашениям.Количество() = 1 Тогда
			Заказ.Соглашение = СверткаПоСоглашениям[0].Соглашение;
		КонецЕсли;
		
		СверткаПоСделкам = ДанныеДоговора[4].Выгрузить();
		Если СверткаПоСделкам.Количество() = 1 Тогда
			Заказ.Сделка = СверткаПоСделкам[0].Сделка;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.СписаниеЗадолженности") Тогда
		
		ДокументОснование_ИмяПКО = "Документ_СЗ_КорректировкаДолга";
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ТабДок.Заказ,
			|	ТабДок.Заказ.Соглашение КАК Соглашение,
			|	ТабДок.Заказ.Сделка КАК Сделка,
			|	ТабДок.ВалютаВзаиморасчетов
			|ПОМЕСТИТЬ ДанныеДоговора
			|ИЗ
			|	Документ.СписаниеЗадолженности.Задолженность КАК ТабДок
			|ГДЕ
			|	ТабДок.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Заказ
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.ВалютаВзаиморасчетов
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Соглашение
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Сделка
			|ИЗ
			|	ДанныеДоговора КАК ДанныеДоговора";
		
		ДанныеДоговора = Запрос.ВыполнитьПакет();
		
		СверткаПоЗаказам = ДанныеДоговора[1].Выгрузить();
		Если СверткаПоЗаказам.Количество() = 1 Тогда
			
			ЗаказКлиента = СверткаПоЗаказам[0].Заказ;
			Если ТипЗнч(ЗаказКлиента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДокументОснование_ДоговорСсылка = ЗаказКлиента;
			ИначеЕсли ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Заказ.Заказ = ЗаказКлиента;
			КонецЕсли;
			
		КонецЕсли;
		
		СверткаПоВалютеВзаиморасчетов = ДанныеДоговора[2].Выгрузить();
		Если СверткаПоВалютеВзаиморасчетов.Количество() = 1 Тогда
			ДокументОснование_ВалютаВзаиморасчетов = СверткаПоВалютеВзаиморасчетов[0].ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СверткаПоСоглашениям = ДанныеДоговора[3].Выгрузить();
		Если СверткаПоСоглашениям.Количество() = 1 Тогда
			Заказ.Соглашение = СверткаПоСоглашениям[0].Соглашение;
		КонецЕсли;
		
		СверткаПоСделкам = ДанныеДоговора[4].Выгрузить();
		Если СверткаПоСделкам.Количество() = 1 Тогда
			Заказ.Сделка = СверткаПоСделкам[0].Сделка;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
			|	Док.Валюта
			|ИЗ
			|	Документ.ВозвратТоваровМеждуОрганизациями КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасшифровкаПлатежа.ВалютаВзаиморасчетов
			|ИЗ
			|	Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК РасшифровкаПлатежа
			|ГДЕ
			|	РасшифровкаПлатежа.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	РасшифровкаПлатежа.НомерСтроки";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();	
		ДанныеШапки              = РезультатЗапроса[0].Выгрузить()[0];
		ДанныеРасшифровкиПлатежа = РезультатЗапроса[1].Выгрузить();
		
		Если ДанныеРасшифровкиПлатежа.Количество() = 1 Тогда
			ДокументОснование_ВалютаВзаиморасчетов = ДанныеРасшифровкиПлатежа[0].ВалютаВзаиморасчетов;
			ДокументОснование_РасчетыВУсловныхЕдиницах = (ДанныеШапки.Валюта = Константы.ВалютаРегламентированногоУчета.Получить()
				И ДанныеШапки.Валюта <> ДанныеРасшифровкиПлатежа[0].ВалютаВзаиморасчетов);
		Иначе
			ДокументОснование_ВалютаВзаиморасчетов = ДанныеШапки.Валюта;
		КонецЕсли;
		
		ДокументОснование_ИмяПКО = "ВозвратМеждуОрганизациями_ОтПокупателя_Отправка";
		
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ДокументОснование_ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
		ДанныеВалют = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДокументОснование, "Валюта, ВалютаВзаиморасчетов");
	
		ДокументОснование_ВалютаВзаиморасчетов = ДанныеВалют.ВалютаВзаиморасчетов;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОснование_ВалютаВзаиморасчетов) Тогда
		ДокументОснование_ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование_ДоговорСсылка) Тогда
		ДанныеXDTO.Вставить("Договор", ДокументОснование_ДоговорСсылка);
	Иначе
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент           = ДанныеXDTO.Контрагент;
		ПараметрыПоУмолчанию.Организация          = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДокументОснование_ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора          = "СПокупателем";
		ПараметрыПоУмолчанию.Дата                 = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                = ДанныеИБ.Номер;
		
		Если Не ДокументОснование_РасчетыВУсловныхЕдиницах Тогда
			ДокументОснование_РасчетыВУсловныхЕдиницах = (ДанныеXDTO.Валюта = Константы.ВалютаРегламентированногоУчета.Получить()
				И ДанныеXDTO.Валюта <> ДокументОснование_ВалютаВзаиморасчетов);
		КонецЕсли;
		
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = ДокументОснование_РасчетыВУсловныхЕдиницах;
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	//ТабличныеЧасти
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура,
		|	Содержание,
		|	Сумма,
		|	СтавкаНДС,
		|	СуммаНДС
		|ИЗ Документ.СчетФактураВыданныйАванс.Авансы
		|ГДЕ Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ДанныеXDTO.Вставить("Авансы", Результат.Выгрузить());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ДокументыОснования = Новый ТаблицаЗначений();
		ДокументыОснования.Колонки.Добавить("ДокументОснование");
		СтрокаОснование = ДокументыОснования.Добавить();
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",
			ДанныеИБ.ДокументОснование, ДокументОснование_ИмяПКО);
		ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДатаПлатежноРасчетногоДокумента)
		И ЗначениеЗаполнено(ДанныеИБ.НомерПлатежноРасчетногоДокумента) Тогда
		ПлатРасчДокументы = Новый ТаблицаЗначений;
		ПлатРасчДокументы.Колонки.Добавить("ДатаДокумента");
		ПлатРасчДокументы.Колонки.Добавить("НомерДокумента");
		СтрокаПлатРасчДокумент = ПлатРасчДокументы.Добавить();
		СтрокаПлатРасчДокумент.ДатаДокумента = ДанныеИБ.ДатаПлатежноРасчетногоДокумента;
		СтрокаПлатРасчДокумент.НомерДокумента = ДанныеИБ.НомерПлатежноРасчетногоДокумента;
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатРасчДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураКомиссионеру_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураКомиссионеру_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураКомиссионеру_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураКомиссионеру;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураКомиссионеру_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",      "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "Исправление",          "Исправление");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",      "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",     "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетФактураОснование", "ИсправляемыйСчетФактура", , "Документ_СчетФактураКомиссионеру_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Выставлен", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                     "НомерСчетаФактурыКомиссионера", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураКомиссионеру_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Организация") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", НачалоДня(ДанныеИБ.Дата));
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаРеализацию");
	ДанныеXDTO.Вставить("Выставлен", ЗначениеЗаполнено(ДанныеИБ.ДатаВыставления));
	
	Руководитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Руководитель");
	ДанныеXDTO.Вставить("Руководитель", Руководитель.ФизическоеЛицо);
	ГлавныйБухгалтер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ГлавныйБухгалтер");
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтер.ФизическоеЛицо);
	
	ДанныеXDTO.Вставить("СпособВыставления", ?(ДанныеИБ.ВыставленВЭлектронномВиде,"ВЭлектронномВиде", "НаБумажномНосителе"));
	
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("НомерСчетаФактурыКомиссионера", Неопределено);
	Если ДанныеИБ.Покупатели.Количество() > 0 Тогда
		ДанныеXDTO.НомерСчетаФактурыКомиссионера = ДанныеИБ.Покупатели[0].НомерСчетаФактуры;
		КонтрагентСсылка = ДанныеИБ.Покупатели[0].Покупатель;
	Иначе
		КонтрагентСсылка = Неопределено;
		Если ТипЗнч(ДанныеИБ.Комиссионер) = Тип("СправочникСсылка.Контрагенты") Тогда
			КонтрагентСсылка = ДанныеИБ.Комиссионер;
		ИначеЕсли ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") 
				И ДанныеИБ.ДокументОснование.РасчетыЧерезОтдельногоКонтрагента Тогда
			КонтрагентСсылка = ДанныеИБ.ДокументОснование.Контрагент;
		ИначеЕсли ТипЗнч(ДанныеИБ.Комиссионер) = Тип("СправочникСсылка.Организации") Тогда 
			КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Комиссионер, КомпонентыОбмена);
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	
	ДокументыОснования = Новый ТаблицаЗначений;
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	СтрокаОснование = ДокументыОснования.Добавить();
	ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
	Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ";
	КонецЕсли;
	СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДанныеИБ.ДокументОснование,ИмяПКО);
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	ПлатРасчДокументы = Новый ТаблицаЗначений;
	ПлатРасчДокументы.Колонки.Добавить("ДатаДокумента");
	ПлатРасчДокументы.Колонки.Добавить("НомерДокумента");
	Для Каждого СтрокаДокумента Из ДанныеИБ.ПлатежноРасчетныеДокументы Цикл
		СтрокаПлатРасчДокумент = ПлатРасчДокументы.Добавить();
		СтрокаПлатРасчДокумент.ДатаДокумента = СтрокаДокумента.ДатаПлатежноРасчетногоДокумента;
		СтрокаПлатРасчДокумент.НомерДокумента = СтрокаДокумента.НомерПлатежноРасчетногоДокумента;
	КонецЦикла;
	Если ПлатРасчДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатРасчДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураКомитента_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураКомитента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураКомитента_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураКомитента;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураКомитента_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",             "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",  "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаСоставления",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Исправление",      "Исправление");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",  "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комитент",         "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления", "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",         "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаСНДС",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                 "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ДанныеРеализацииКонечныйПокупатель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                 "ДанныеРеализацииСубкомиссионер", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                 "ДанныеРеализацииСчетФактураВыставленный", 1, "Документ_СчетФактураВыданный_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "СпособВыставления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СчетаФактурыВыданныеПокупателям");
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Субкомиссионер", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактураВыданный", 1, "Документ_СчетФактураВыданный_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураКомитента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаПоступление");
	Если ДанныеИБ.ПолученВЭлектронномВиде Тогда
		ДанныеXDTO.Вставить("СпособВыставления", "ВЭлектронномВиде");
	Иначе
		ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Сведения о счетах фактурах выставленных
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
		|	Субкомиссионер КАК СубкомиссионерСсылка,
		|	Покупатель КАК Покупатель,
		|	СчетФактураВыданный КАК СчетФактураВыданный,
		|	СуммаСНДС КАК Сумма,
		|	СуммаНДС КАК СуммаНДС
		|ИЗ Документ.СчетФактураКомитента.Покупатели
		|ГДЕ Ссылка = &Ссылка
		|";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	СчетаФактурыВыданные = Запрос.Выполнить().Выгрузить();
	СчетаФактурыВыданные.Колонки.Добавить("Субкомиссионер");
	Для Каждого СтрокаСФ Из СчетаФактурыВыданные Цикл
		Если ЗначениеЗаполнено(СтрокаСФ.СубкомиссионерСсылка) Тогда
			Если ТипЗнч(СтрокаСФ.СубкомиссионерСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтрокаСФ.Субкомиссионер = СтрокаСФ.СубкомиссионерСсылка;
			ИначеЕсли ТипЗнч(СтрокаСФ.СубкомиссионерСсылка) = Тип("СправочникСсылка.Организации") Тогда
				СтрокаСФ.Субкомиссионер = КонтрагентИзОрганизации(СтрокаСФ.СубкомиссионерСсылка, КомпонентыОбмена);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	ДанныеXDTO.Вставить("СчетаФактурыВыданныеПокупателям", СчетаФактурыВыданные);
	
	// Счет фактура выставленный в шапке
	ДанныеXDTO.Вставить("ДанныеРеализацииСубкомиссионер", Неопределено);
	ДанныеXDTO.Вставить("ДанныеРеализацииКонечныйПокупатель", Неопределено);
	ДанныеXDTO.Вставить("ДанныеРеализацииСчетФактураВыставленный", Неопределено);
	Если СчетаФактурыВыданные.Количество() > 0 Тогда
		ДанныеXDTO.ДанныеРеализацииСубкомиссионер = СчетаФактурыВыданные[0].Субкомиссионер;
		ДанныеXDTO.ДанныеРеализацииКонечныйПокупатель = СчетаФактурыВыданные[0].Покупатель;
		ДанныеXDTO.ДанныеРеализацииСчетФактураВыставленный = СчетаФактурыВыданные[0].СчетФактураВыданный;
	КонецЕсли;
	
	// Документы основания
	МассивСФ = СчетаФактурыВыданные.ВыгрузитьКолонку("СчетФактураВыданный");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка КАК ДокументОснование,
		|	Ссылка.Договор КАК Договор
		|ИЗ Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары
		|	ГДЕ СчетФактураВыставленныйКомиссионера В (&МассивСФ)
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	И Ссылка.СуммаДокумента > 0
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка КАК ДокументОснование,
		|	Ссылка.Договор КАК Договор
		|ИЗ Документ.ОтчетКомитенту.Товары
		|	ГДЕ СчетФактураВыставленный В (&МассивСФ)
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	И Ссылка.СуммаДокумента > 0
		|";
	
	Запрос.УстановитьПараметр("МассивСФ", МассивСФ);
	ВыборкаТЧ = Запрос.Выполнить().Выбрать();
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	
	Пока ВыборкаТЧ.Следующий() Цикл
		ДокументОснование = ВыборкаТЧ.ДокументОснование;
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
	
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
		Иначе
			ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка";
		КонецЕсли;
		СтрокаОснование = ДокументыОснования.Добавить();
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДокументОснование,ИмяПКО);
		
		Договор = ВыборкаТЧ.Договор;
		Если ЗначениеЗаполнено(Договор) Тогда
			Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
				ДанныеXDTO.Вставить("Договор", Неопределено);
			Иначе
				ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Договор, "Справочник_ДоговорыКонтрагентов"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	Если НЕ ДанныеXDTO.Свойство("Договор") Тогда
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Комитент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
		ПараметрыПоУмолчанию.ВидДоговора = "СКомитентом";
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",      "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаСоставления",      "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Исправление",          "Исправление");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",      "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",     "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетФактураОснование", "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ДатаИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "НомерИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "НомерИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Документ основание
	Запрос = Новый ЗАпрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ДокументОснование
		|ИЗ 
		|	Документ.СчетФактураПолученный.ДокументыОснования
		|ГДЕ 
		|	Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ВыборкаТЧ = Запрос.Выполнить().Выбрать();
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	
	Пока ВыборкаТЧ.Следующий() Цикл
		
		ДокументОснование = ВыборкаТЧ.ДокументОснование;
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
	
		ИмяПКО = ИмяПКОДляОбъектаДанных(КомпонентыОбмена, ДокументОснование, ДанныеИБ.Организация);
			
		СтрокаОснование = ДокументыОснования.Добавить();
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДокументОснование, ИмяПКО);
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	ДанныеXDTO.Вставить("ВидСчетаФактуры",    "НаПоступление");
	
	Если ДанныеИБ.Корректировочный Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
	КонецЕсли;	
		
	// Используются данные первой строки таблицы документов-оснований.
	Для Каждого ДокументыОснованияСтрока Из ДанныеИБ.ДокументыОснования Цикл
		ДанныеXDTO.Вставить("ДатаИсходногоДокумента",  ДокументыОснованияСтрока.ДатаИсходногоДокумента);
		ДанныеXDTO.Вставить("НомерИсходногоДокумента", ДокументыОснованияСтрока.НомерИсходногоДокумента);
		ДанныеXDTO.Вставить("ДатаИсправленияИсходногоДокумента",  ДокументыОснованияСтрока.ДатаИсправленияИсходногоДокумента);
		ДанныеXDTO.Вставить("НомерИсправленияИсходногоДокумента", ДокументыОснованияСтрока.НомерИсправленияИсходногоДокумента);
		Прервать;
	КонецЦикла;
	
	ВыгрузитьСпособВыставленияСчетаФактуры(ДанныеXDTO, ДанныеИБ.ПолученВЭлектронномВиде);
	
	#Область ВычислениеИтоговыхСумм
	
	СуммаДокумента = 0;
	СуммаНДС       = 0;
	
	МассивДокументовОснований = ДанныеИБ.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументовОснований", МассивДокументовОснований);
	Запрос.Текст = "ВЫБРАТЬ
		|	Док.СуммаНДСВознаграждения КАК СуммаНДСДокумента,
		|	Док.СуммаВознаграждения КАК СуммаДокумента
		|ПОМЕСТИТЬ ТаблицаСумм
		|ИЗ Документ.ОтчетКомиссионера КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС КАК СуммаНДСДокумента,
		|	Док.СуммаСНДС КАК СуммаДокумента
		|ИЗ Документ.ОтчетКомитенту.Товары КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.ВозвратТоваровПоставщику.Товары КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.ПриобретениеТоваровУслуг.Товары КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.АктВыполненныхРабот.Услуги КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.ВозвратТоваровОтКлиента.Товары КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.КорректировкаПриобретения.Товары КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Док.СуммаНДС,
		|	Док.СуммаСНДС
		|ИЗ Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК Док
		|ГДЕ Док.Ссылка В (&МассивДокументовОснований)
		|;
		|ВЫБРАТЬ
		|СУММА(СуммаНДСДокумента) КАК СуммаНДСДокумента,
		|СУММА(СуммаДокумента) КАК СуммаДокумента
		|ИЗ ТаблицаСумм
		|ИТОГИ ПО Общие";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаНДС       = Выборка.СуммаНДСДокумента;
	КонецЕсли;
	
	#КонецОбласти
	
	ДанныеXDTO.Вставить("Сумма",    СуммаДокумента);
	ДанныеXDTO.Вставить("СуммаНДС", СуммаНДС);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученныйАванс_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученныйАванс_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученныйАванс_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученныйАванс;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученныйАванс_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаСоставления", "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации", "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Сумма",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",        "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                "СпособВыставления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученныйАванс_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.ПолученВЭлектронномВиде Тогда
		ДанныеXDTO.Вставить("СпособВыставления", "ВЭлектронномВиде");
	Иначе
		ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			
		ОрганизацияКонтрагента = ДанныеИБ.Контрагент;
		СсылкаНаКонтрагента = КонтрагентИзОрганизации(ОрганизацияКонтрагента, КомпонентыОбмена);
			
	ИначеЕсли ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		СсылкаНаКонтрагента = ДанныеИБ.Контрагент;
	Иначе
		СсылкаНаКонтрагента = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.2") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", СсылкаНаКонтрагента);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", СсылкаНаКонтрагента);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаАванс");
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	
	// Вычисляем валюту документа-основания
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ВалютаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Валюта");
		Если ЗначениеЗаполнено(ВалютаДокументаОснования) Тогда
			ДанныеXDTO.Вставить("Валюта", ВалютаДокументаОснования);
		Иначе
			ДанныеXDTO.Вставить("Валюта", ВалютаРеглУчета);
		КонецЕсли;
	Иначе
		ДанныеXDTO.Вставить("Валюта", ВалютаРеглУчета);
	КонецЕсли;
	
	// Получение информации из документа-основания.
	ДокументОснование_ВалютаВзаиморасчетов = ВалютаРеглУчета;
	ДокументОснование_ДоговорСсылка = Неопределено;
	ДокументОснование_РасчетыВУсловныхЕдиницах = Ложь;
	ДокументОснование_ИмяПКО = "";
	
	Заказ = Новый Структура("Заказ, Соглашение, Сделка");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.ДокументОснование);
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаКонтрагента);
	ТипЗначенияДокументаОснования = ТипЗнч(ДанныеИБ.ДокументОснование);
	
	Если ТипЗначенияДокументаОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		Или ТипЗначенияДокументаОснования = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.Заказ,
		|	РасшифровкаПлатежа.Заказ.Соглашение КАК Соглашение,
		|	РасшифровкаПлатежа.ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ДанныеДоговора
		|ИЗ
		|	Документ." + ДанныеИБ.ДокументОснование.Метаданные().Имя + ".РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Соглашение
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Заказ
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.ВалютаВзаиморасчетов
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора";
		
		ДанныеДоговора = Запрос.ВыполнитьПакет();
		
		СверткаПоСоглашениям = ДанныеДоговора[1].Выгрузить();
		Если СверткаПоСоглашениям.Количество() = 1 Тогда
			Заказ.Соглашение = СверткаПоСоглашениям[0].Соглашение;
		КонецЕсли;
			
		СверткаПоЗаказам = ДанныеДоговора[2].Выгрузить();
		Если СверткаПоЗаказам.Количество() = 1 Тогда
			
			ЗаказПоставщику = СверткаПоЗаказам[0].Заказ;
			Если ТипЗнч(ЗаказПоставщику) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДокументОснование_ДоговорСсылка = ЗаказПоставщику;
			ИначеЕсли ТипЗнч(ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Заказ.Заказ = ЗаказПоставщику;
			КонецЕсли;
			
		КонецЕсли;
		
		СверткаПоВалютеВзаиморасчетов = ДанныеДоговора[3].Выгрузить();
		Если СверткаПоВалютеВзаиморасчетов.Количество() = 1 Тогда
			ДокументОснование_ВалютаВзаиморасчетов = СверткаПоВалютеВзаиморасчетов[0].ВалютаВзаиморасчетов;
		КонецЕсли;
		
		Если ТипЗначенияДокументаОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ДокументОснование_ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
		Иначе
			ДокументОснование_ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.Ссылка.Соглашение КАК Соглашение,
		|	РасшифровкаПлатежа.Ссылка.Соглашение.Валюта КАК ВалютаСоглашения,
		|	РасшифровкаПлатежа.Заказ,
		|	РасшифровкаПлатежа.ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ДанныеДоговора
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДоговора.Соглашение,
		|	ДанныеДоговора.ВалютаВзаиморасчетов,
		|	ДанныеДоговора.ВалютаСоглашения
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Заказ
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора";
		
		ДанныеДоговора = Запрос.ВыполнитьПакет();
		
		ОсновныеРеквизиты = ДанныеДоговора[1].Выгрузить();
		Если ОсновныеРеквизиты.Количество() > 0 Тогда
			Заказ.Соглашение = ОсновныеРеквизиты[0].Соглашение;
			
			Если ЗначениеЗаполнено(Заказ.Соглашение) Тогда
				ДокументОснование_ВалютаВзаиморасчетов = ОсновныеРеквизиты[0].ВалютаСоглашения;
			КонецЕсли;
		КонецЕсли;
		
		СверткаПоЗаказам = ДанныеДоговора[2].Выгрузить();
		Если СверткаПоЗаказам.Количество() = 1 Тогда
			ЗаказПоставщику = СверткаПоЗаказам[0].Заказ;
			Если ТипЗнч(ЗаказПоставщику) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДокументОснование_ДоговорСсылка = ЗаказПоставщику;
			ИначеЕсли ТипЗнч(ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Заказ.Заказ = ЗаказПоставщику;
			КонецЕсли;
		КонецЕсли;
		ДокументОснование_ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда	
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОплатаПоставщикам.ВалютаВзаиморасчетов,
		|	ОплатаПоставщикам.Заказ.Соглашение КАК Соглашение,
		|	ОплатаПоставщикам.Заказ КАК Заказ
		|ПОМЕСТИТЬ ДанныеДоговора
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
		|ГДЕ
		|	ОплатаПоставщикам.Ссылка = &Ссылка
		|	И ОплатаПоставщикам.Контрагент = &Контрагент
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Соглашение
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Заказ
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.ВалютаВзаиморасчетов
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора";
		
	
		ДанныеДоговора = Запрос.ВыполнитьПакет();
		
		СверткаПоСоглашениям = ДанныеДоговора[1].Выгрузить();
		Если СверткаПоСоглашениям.Количество() = 1 Тогда
			Заказ.Соглашение = СверткаПоСоглашениям[0].Соглашение;
		КонецЕсли;
		
		СверткаПоЗаказам = ДанныеДоговора[2].Выгрузить();
		Если СверткаПоЗаказам.Количество() = 1 Тогда
			
			ЗаказПоставщику = СверткаПоЗаказам[0].Заказ;
			Если ТипЗнч(ЗаказПоставщику) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДокументОснование_ДоговорСсылка = ЗаказПоставщику;
			ИначеЕсли ТипЗнч(ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Заказ.Заказ = ЗаказПоставщику;
			КонецЕсли;
			
		КонецЕсли;
		
		СверткаПоВалютеВзаиморасчетов = ДанныеДоговора[3].Выгрузить();
		Если СверткаПоВалютеВзаиморасчетов.Количество() = 1 Тогда
			ДокументОснование_ВалютаВзаиморасчетов = СверткаПоВалютеВзаиморасчетов[0].ВалютаВзаиморасчетов;
		КонецЕсли;
		ДокументОснование_ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		
		ИмяТЧ = "КредиторскаяЗадолженность";
		ТипРасчетов = "РасчетыСПоставщиком";
		
		Если ДанныеИБ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "КонтрагентКредитор") Тогда
			ИмяТЧ = "ДебиторскаяЗадолженность";
			ТипРасчетов = "РасчетыСКлиентом";
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТабДок.Заказ,
		|	ТабДок.ВалютаВзаиморасчетов,
		|	ТабДок.Заказ.Соглашение КАК Соглашение
		|ПОМЕСТИТЬ ДанныеДоговора
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности." + ИмяТЧ + " КАК ТабДок
		|ГДЕ
		|	ТабДок.Ссылка = &Ссылка
		|	И ТабДок.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами." + ТипРасчетов + ")
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Соглашение
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Заказ
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.ВалютаВзаиморасчетов
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора";
		
		ДанныеДоговора = Запрос.ВыполнитьПакет();
		
		СверткаПоСоглашениям = ДанныеДоговора[1].Выгрузить();
		Если СверткаПоСоглашениям.Количество() = 1 Тогда
			Заказ.Соглашение = СверткаПоСоглашениям[0].Соглашение;
		КонецЕсли;  
			
		СверткаПоЗаказам = ДанныеДоговора[2].Выгрузить();
		Если СверткаПоЗаказам.Количество() = 1 Тогда
			
			ЗаказПоставщику = СверткаПоЗаказам[0].Заказ;
			Если ТипЗнч(ЗаказПоставщику) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДокументОснование_ДоговорСсылка = ЗаказПоставщику;
			ИначеЕсли ТипЗнч(ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Заказ.Заказ = ЗаказПоставщику;
			КонецЕсли;
			
		КонецЕсли;
		
		СверткаПоВалютеВзаиморасчетов = ДанныеДоговора[3].Выгрузить();
		Если СверткаПоВалютеВзаиморасчетов.Количество() = 1 Тогда
			ДокументОснование_ВалютаВзаиморасчетов = СверткаПоВалютеВзаиморасчетов[0].ВалютаВзаиморасчетов;
		КонецЕсли;
		ДокументОснование_ИмяПКО = "Документ_ВЗ_НашаОрганизация";
	ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Валюта
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасшифровкаПлатежа.ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасшифровкаПлатежа.НомерСтроки";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();	
		ДанныеШапки              = РезультатЗапроса[0].Выгрузить()[0];
		ДанныеРасшифровкиПлатежа = РезультатЗапроса[1].Выгрузить();
		
		Если ДанныеРасшифровкиПлатежа.Количество() = 1 Тогда
			ДокументОснование_ВалютаВзаиморасчетов = ДанныеРасшифровкиПлатежа[0].ВалютаВзаиморасчетов;
			ДокументОснование_РасчетыВУсловныхЕдиницах = ДанныеШапки.Валюта = ВалютаРеглУчета
				И ДанныеШапки.Валюта <> ДанныеXDTO.Валюта;
		КонецЕсли;
		ДокументОснование_ИмяПКО = "ВозвратМеждуОрганизациями_Поставщику_Отправка";
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДокументОснование_ДоговорСсылка) Тогда
		ДанныеXDTO.Вставить("Договор", ДокументОснование_ДоговорСсылка);
	Иначе
		Если Не ЗначениеЗаполнено(ДокументОснование_ВалютаВзаиморасчетов) Тогда
			ДокументОснование_ВалютаВзаиморасчетов = ДанныеXDTO.Валюта;
		КонецЕсли;
		Если НЕ ЗНачениеЗаполнено(ДокументОснование_РасчетыВУсловныхЕдиницах) Тогда
			Если ЗначениеЗаполнено(Заказ.Соглашение) Тогда
				ДокументОснование_РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Заказ.Соглашение);
			Иначе
				ДокументОснование_РасчетыВУсловныхЕдиницах = ДанныеXDTO.Валюта = ВалютаРеглУчета
					И ДанныеXDTO.Валюта <> ДокументОснование_ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = СсылкаНаКонтрагента;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДокументОснование_ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = "СПоставщиком";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = ДокументОснование_РасчетыВУсловныхЕдиницах;
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	СтрокаОснование = ДокументыОснования.Добавить();	
	СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",
		ДанныеИБ.ДокументОснование, ДокументОснование_ИмяПКО);
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ Документ.СчетФактураПолученныйАванс.Авансы
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДанныеXDTO.Вставить("Авансы", Результат.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученныйИК_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученныйИК_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученныйИК_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученныйИК_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",             "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "Исправление",      "Исправление");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",  "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления", "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "",                 "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ДатаПолучения", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Контрагент", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "НомерИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученныйИК_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Ложь, Истина));
	Если СтекВыгрузки.Количество() > 1
		И (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0")) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	ДатаИсходногоДокумента = Неопределено;
	НомерИсходногоДокумента = Неопределено;
	Для Каждого СтрокаОснование Из ДанныеИБ.ДокументыОснования Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОснование.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		ТипДокументаОснования = ТипЗнч(СтрокаОснование.ДокументОснование);
		Если (ТипДокументаОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			Или ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
			Или ТипДокументаОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"))
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДокументОснование, "РасчетыЧерезОтдельногоКонтрагента") Тогда
			ДокументОснование = СтрокаОснование.ДокументОснование;
			Если ЗначениеЗаполнено(СтрокаОснование.ДатаИсходногоДокумента) Тогда
				ДатаИсходногоДокумента = СтрокаОснование.ДатаИсходногоДокумента;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОснование.НомерИсходногоДокумента) Тогда
				НомерИсходногоДокумента = СтрокаОснование.НомерИсходногоДокумента;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		Организация = ДанныеИБ.Контрагент;
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование, "РасчетыЧерезОтдельногоКонтрагента, Контрагент, Организация");
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование, "РасчетыЧерезОтдельногоКонтрагента, Контрагент, Организация, Комиссионер");
		Если ДанныеИБ.Организация = РеквизитыДокументаОснования.Организация Тогда
			Организация = РеквизитыДокументаОснования.Комиссионер;
		Иначе
			Организация = РеквизитыДокументаОснования.Организация;
		КонецЕсли;
	Иначе
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование, "РасчетыЧерезОтдельногоКонтрагента, Контрагент, Организация, ОрганизацияПолучатель");
	
		Организация = РеквизитыДокументаОснования.ОрганизацияПолучатель;
	КонецЕсли;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		ДанныеXDTO.Вставить("Организация", Организация);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Организация);
	КонецЕсли;
	
	// Контрагент
	Если РеквизитыДокументаОснования.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = РеквизитыДокументаОснования.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(РеквизитыДокументаОснования.Организация, КомпонентыОбмена);
	КонецЕсли;
	КонтрагентИнструкция = Новый Структура("Значение, ИмяПКО", КонтрагентСсылка, "Справочник_Контрагенты");
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.2") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", КонтрагентИнструкция);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", КонтрагентИнструкция);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ДатаПолучения", КонецДня(ДанныеИБ.Дата));
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаПоступление");
	ДанныеXDTO.Вставить("ДатаИсходногоДокумента", ДатаИсходногоДокумента);
	ДанныеXDTO.Вставить("НомерИсходногоДокумента", НомерИсходногоДокумента);
	
	Если ДанныеИБ.ВыставленВЭлектронномВиде Тогда
		ДанныеXDTO.Вставить("СпособВыставления", "ВЭлектронномВиде");
	Иначе
		ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	КонецЕсли;
	
	// Суммы
	СуммаДокумента = 0;
	СуммаНДСДокумента = 0;
	
	Если ТипДокументаОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
		И ДанныеИБ.Организация = РеквизитыДокументаОснования.Организация Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СУММА(ДокТовары.СуммаПродажи) КАК СуммаДокумента,
			|	СУММА(ДокТовары.СуммаПродажиНДС) КАК СуммаНДСДокумента
			|ИЗ
			|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ДокТовары
			|ГДЕ
			|	ДокТовары.Ссылка = &Ссылка
			|	И ДокТовары.ДатаСчетаФактурыКомиссионера = &Дата
			|	И ДокТовары.Покупатель = &Покупатель
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокТовары.Покупатель");
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("Дата", НачалоДня(ДанныеИБ.Дата));
		Запрос.УстановитьПараметр("Покупатель", КонтрагентСсылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СуммаДокумента    = Результат.СуммаДокумента;
			СуммаНДСДокумента = Результат.СуммаНДСДокумента;
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("Сумма", СуммаДокумента);	
	ДанныеXDTO.Вставить("СуммаНДС", СуммаНДСДокумента);
	
	// Документы основания
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	
	ИмяПКО = "";
	Если ТипДокументаОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ИмяПКО = "ПередачаМеждуОрганизациями_ПТУ_Отправка";
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		ИмяПКО = "ВозвратМеждуОрганизациями_ОтПокупателя_Отправка";
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		Если ДанныеИБ.Организация = РеквизитыДокументаОснования.Организация Тогда
			ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка";
		Иначе
			ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ";
		КонецЕсли;
	КонецЕсли;
	СтрокаОснование = ДокументыОснования.Добавить();
	
	СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДокументОснование,ИмяПКО);
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученныйИКК_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученныйИКК_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученныйИКК_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураКомиссионеру;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученныйИКК_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",             "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "Исправление",      "Исправление");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",  "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления", "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "",                 "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ДатаПолучения", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                 "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "НомерИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СчетаФактурыВыданныеПокупателям");
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактураВыданный", 1, "Документ_СчетФактураВыданный_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученныйИКК_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Определение Входящего номера документа.
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", 
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Ложь, Истина));
	
	Если СтекВыгрузки.Количество() > 1
		И (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0")) Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокументаОснования = ТипЗнч(ДанныеИБ.ДокументОснование);
	
	// Определение Организации выгружаемого документа.
	РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеИБ.ДокументОснование, "Организация, Комиссионер");
		
	Если ДанныеИБ.Организация = РеквизитыДокументаОснования.Организация Тогда
		Организация = РеквизитыДокументаОснования.Комиссионер;
	Иначе
		Организация = РеквизитыДокументаОснования.Организация;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		ДанныеXDTO.Вставить("Организация", Организация);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Организация);
	КонецЕсли;
	
	// Определение Контрагента выгружаемого документа.
	Если ТипЗнч(ДанныеИБ.Комиссионер) = Тип("СправочникСсылка.Организации") Тогда
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Комиссионер, КомпонентыОбмена);
	Иначе
		КонтрагентСсылка = ДанныеИБ.Комиссионер;
	КонецЕсли;
	
	КонтрагентИнструкция = Новый Структура("Значение, ИмяПКО", КонтрагентСсылка, "Справочник_Контрагенты");
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.2") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", КонтрагентИнструкция);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", КонтрагентИнструкция);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Прочие реквзиты счет-фактуры
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаПоступление");
	ДанныеXDTO.Вставить("ДатаПолучения",   КонецДня(ДанныеИБ.Дата));
	
	Если ДанныеИБ.Исправление
		И ЗначениеЗаполнено(ДанныеИБ.СчетФактураОснование)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.СчетФактураОснование) Тогда
		
		РеквизитыСчетФактурыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.СчетФактураОснование, "Дата, Номер");
		ДанныеXDTO.Вставить("ДатаИсходногоДокумента",  РеквизитыСчетФактурыОснования.Дата);
		ДанныеXDTO.Вставить("НомерИсходногоДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			РеквизитыСчетФактурыОснования.Номер, Ложь, Истина));
	Иначе
		ДанныеXDTO.Вставить("ДатаИсходногоДокумента",  Дата(1, 1, 1));
		ДанныеXDTO.Вставить("НомерИсходногоДокумента", 0);
	КонецЕсли;
	
	Если ДанныеИБ.ВыставленВЭлектронномВиде Тогда
		ДанныеXDTO.Вставить("СпособВыставления", "ВЭлектронномВиде");
	Иначе
		ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	КонецЕсли;
	
	// Определение Суммы счет-фактуры.
	СуммаДокумента    = 0;
	СуммаНДСДокумента = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОтчетПоКомиссииМеждуОрганизациямиТовары.СчетФактураВыставленныйКомиссионера КАК СчетФактура,
		|	ОтчетПоКомиссииМеждуОрганизациямиТовары.СуммаПродажиНДС КАК НДС,
		|	ОтчетПоКомиссииМеждуОрганизациямиТовары.СуммаПродажи КАК Сумма,
		|	СчетФактураКомиссионеруПокупатели.Покупатель КАК Покупатель
		|ИЗ
		|	Документ.СчетФактураКомиссионеру.Покупатели КАК СчетФактураКомиссионеруПокупатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ОтчетПоКомиссииМеждуОрганизациямиТовары
		|		ПО СчетФактураКомиссионеруПокупатели.Ссылка.ДокументОснование = ОтчетПоКомиссииМеждуОрганизациямиТовары.Ссылка
		|			И СчетФактураКомиссионеруПокупатели.Покупатель = ОтчетПоКомиссииМеждуОрганизациямиТовары.Покупатель
		|			И СчетФактураКомиссионеруПокупатели.НомерСчетаФактуры = ОтчетПоКомиссииМеждуОрганизациямиТовары.СчетФактураВыставленныйКомиссионера.Номер
		|ГДЕ
		|	СчетФактураКомиссионеруПокупатели.Ссылка = &Ссылка
		|ИТОГИ
		|	СУММА(НДС),
		|	СУММА(Сумма)
		|ПО
		|	ОБЩИЕ");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДокумента    = Выборка.Сумма;
		СуммаНДСДокумента = Выборка.НДС;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Сумма",    СуммаДокумента);
	ДанныеXDTO.Вставить("СуммаНДС", СуммаНДСДокумента);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0.beta") Тогда
		
		// Определение таб. части покупатели.
		СчетаФактурыВыданныеПокупателям = Новый ТаблицаЗначений();
		СчетаФактурыВыданныеПокупателям.Колонки.Добавить("Покупатель");
		СчетаФактурыВыданныеПокупателям.Колонки.Добавить("Сумма");
		СчетаФактурыВыданныеПокупателям.Колонки.Добавить("СуммаНДС");
		СчетаФактурыВыданныеПокупателям.Колонки.Добавить("СчетФактураВыданный");
		
		ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
		Если ТаблицаСчетовФактур.Количество() > 0 Тогда
			
			ТаблицаСчетовФактур.Удалить(ТаблицаСчетовФактур[0]);
			
			Для Каждого СтрокаТаблицы Из ТаблицаСчетовФактур Цикл
				НоваяСтрока = СчетаФактурыВыданныеПокупателям.Добавить();
				НоваяСтрока.СчетФактураВыданный = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.СчетФактура, "Документ_СчетФактураВыданный_Отправка");
				НоваяСтрока.СуммаНДС            = Новый Структура("Значение",         СтрокаТаблицы.НДС);
				НоваяСтрока.Сумма               = Новый Структура("Значение",         СтрокаТаблицы.Сумма);
				НоваяСтрока.Покупатель          = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Покупатель, "Справочник_Контрагенты");
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеXDTO.Вставить("СчетаФактурыВыданныеПокупателям", СчетаФактурыВыданныеПокупателям);
		
	КонецЕсли;
	
	// Генерирование табличной части документов основания.
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	
	ИмяПКО = "";
	Если ТипДокументаОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		Если ДанныеИБ.Организация = РеквизитыДокументаОснования.Организация Тогда
			ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка";
		Иначе
			ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаОснование = ДокументыОснования.Добавить();
	СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО);
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Отправка
Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ТаможеннаяДекларацияИмпорт;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерДекларации", "НомерДекларации");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйСбор",  "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйШтраф", "ТаможенныйШтраф");
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",                "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Разделы");
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1, "Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);

КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Данные шапки документа необходимы для вычисления
	// курса и кратности взаиморасчетов.
	ШапкаДокумента = 
		"ВЫБРАТЬ
		|	ДанныеШапкиДокумента.Валюта,
		|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ДанныеШапкиДокумента
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеШапкиДокумента
		|ГДЕ
		|	ДанныеШапкиДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Док.ВалютаВзаиморасчетов
		|					ИЗ
		|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		|		ПО ДанныеШапкиДокумента.ВалютаВзаиморасчетов = КурсВалютыДокумента.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Запрос = Новый Запрос;
	Запрос.Текст = ШапкаДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", Выборка.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", Выборка.КратностьВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсДокумента", Выборка.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьДокумента", Выборка.КратностьВзаиморасчетов);
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
		
		ПравилоДоговоры = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ДоговорыКонтрагентов_Отправка", "Имя");
		Если Не ПравилоДоговоры = Неопределено Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБ.Договор, 
				ПравилоДоговоры);
		КонецЕсли;
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", Неопределено, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	// Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	НомерРаздела КАК НомерРаздела,
		|   Номенклатура КАК Номенклатура,
		|   ДокументПоступления КАК ДокументПоступления,
		|   Количество КАК Количество,
		|   ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
		|   СуммаНДС КАК СуммаНДС,
		|   СуммаПошлины КАК СуммаПошлины,
		|   СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ДанныеТовары
		|ГДЕ
		|	ДанныеТовары.Ссылка = &Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НомерРаздела КАК НомерРаздела,
		|   ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
		|	СтавкаНДС КАК СтавкаНДС,
		|   СуммаНДС КАК СуммаНДС,
		|	ВЫРАЗИТЬ(СтавкаПошлины КАК ЧИСЛО(10,2)) КАК СтавкаПошлины,
		|	СуммаПошлины КАК СуммаПошлины
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ДанныеРазделы
		|ГДЕ
		|	ДанныеРазделы.Ссылка = &Ссылка
		|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	Выборка = Запрос.ВыполнитьПакет();
	ДанныеXDTO.Вставить("Товары", Выборка[0].Выгрузить());
	ДанныеXDTO.Вставить("Разделы", Выборка[1].Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",        "ТипЦен", 1, "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Цена",         "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка
Процедура ДобавитьПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Файлы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла", "ВладелецФайла", , "Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Имя");
	ДобавитьПКС(СвойстваШапки, "Описание",      "Описание");
	ДобавитьПКС(СвойстваШапки, "Расширение",    "Расширение");
	ДобавитьПКС(СвойстваШапки, "",              "ХранимыйФайл", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СертификатыШифрования");
	ДобавитьПКС(СвойстваТЧ, "", "Сертификат", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ЭлектронныеПодписи");
	ДобавитьПКС(СвойстваТЧ, "", "Подпись", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сертификат", 1);

КонецПроцедуры

Процедура ПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ХранимыйФайл = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("ХранимыйФайл", ХранимыйФайл);
	
	ТЗЭлПодписи = Новый ТаблицаЗначений();
	ТЗЭлПодписи.Колонки.Добавить("Подпись");
	ТЗЭлПодписи.Колонки.Добавить("Сертификат");
	
	МассивЭлектронныхПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеИБ.Ссылка);
	Для Каждого ПодписьСтруктура из МассивЭлектронныхПодписей Цикл
		СтрТЗ = ТЗЭлПодписи.Добавить();
		Если ТипЗнч(ПодписьСтруктура.Подпись) = Тип("ХранилищеЗначения") Тогда
			СтрТЗ.Подпись = ПодписьСтруктура.Подпись.Получить();
		Иначе
			СтрТЗ.Подпись = ПодписьСтруктура.Подпись;
		КонецЕсли;
		Если ТипЗнч(ПодписьСтруктура.Сертификат) = Тип("ХранилищеЗначения") Тогда
			СтрТЗ.Сертификат = ПодписьСтруктура.Сертификат.Получить();
		Иначе
			СтрТЗ.Сертификат = ПодписьСтруктура.Сертификат;
		КонецЕсли;
	КонецЦикла;
	Если ТЗЭлПодписи.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ЭлектронныеПодписи", ТЗЭлПодписи);
	КонецЕсли;	
	
	ТЗСертификаты = Новый ТаблицаЗначений();
	ТЗСертификаты.Колонки.Добавить("Сертификат");
	МассивСертификатовШифрования = ЭлектроннаяПодпись.СертификатыШифрования(ДанныеИБ.Ссылка);
	Для Каждого СертификатСтруктура из МассивСертификатовШифрования Цикл
		СтрТЗ = ТЗСертификаты.Добавить();
		Если ТипЗнч(СертификатСтруктура.Сертификат) = Тип("ХранилищеЗначения") Тогда
			СтрТЗ.Сертификат = СертификатСтруктура.Сертификат.Получить();
		Иначе
			СтрТЗ.Сертификат = СертификатСтруктура.Сертификат;
		КонецЕсли;
	КонецЦикла;
	Если ТЗСертификаты.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("СертификатыШифрования", ТЗСертификаты);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ
Процедура ДобавитьПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Валюта",                      "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПроцентВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомиссионногоВознагражд");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",     "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",         "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьВознаграждение",      "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "",                            "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                            "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                            "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Покупатели");
	ДобавитьПКС(СвойстваТЧ, "", "ВыставленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактура", 1, "Документ_СчетФактураВыданный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПередачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПередачи", 1);

КонецПроцедуры

Процедура ПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("НомерВходящегоДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДок, Ложь, Истина));
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером";
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах =Ложь;
		
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Комиссионер, КомпонентыОбмена);
	КонецЕсли;
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор", ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	// Табличные части
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Ссылка,
		|	Товары.Ссылка.Организация КАК Организация,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаПередачи,
		|	Товары.СуммаСНДС КАК СуммаПередачи,
		|	ВЫБОР
		|		КОГДА Товары.СуммаПродажи / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПродажи / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	Товары.СуммаПродажи КАК Сумма,
		|	Товары.СуммаПродажиНДС КАК СуммаНДС,
		|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
		|	Товары.Покупатель КАК Покупатель,
		|	Товары.ДатаСчетаФактурыКомиссионера КАК ДатаСФ,
		|	ВидНоменклатурыСпр.ВариантОказанияУслуг,
		|	НоменклатураСпр.ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСпр.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСпр.Наименование
		|					ИНАЧЕ ХарактеристикаСпр.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР
		|		КОГДА НоменклатураСпр.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСпр.Наименование
		|		ИНАЧЕ НоменклатураСпр.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО (НоменклатураСпр.Ссылка = Товары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидНоменклатурыСпр
		|		ПО (ВидНоменклатурыСпр.Ссылка = НоменклатураСпр.ВидНоменклатуры)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСпр
		|		ПО (ХарактеристикаСпр.Ссылка = Товары.Характеристика)
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Количество > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.НомерСтроки,
		|	Товары.Ссылка,
		|	Товары.Ссылка.Организация,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	Товары.СуммаСНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаПродажи / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПродажи / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	Товары.СуммаПродажи,
		|	Товары.СуммаПродажиНДС,
		|	Товары.СуммаВознаграждения,
		|	ВЫБОР
		|		КОГДА Товары.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Товары.Покупатель,
		|	Товары.ДатаСчетаФактурыКомиссионера,
		|	ВидНоменклатурыСпр.ВариантОказанияУслуг,
		|	НоменклатураСпр.ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСпр.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСпр.Наименование
		|					ИНАЧЕ ХарактеристикаСпр.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НоменклатураСпр.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСпр.Наименование
		|		ИНАЧЕ НоменклатураСпр.НаименованиеПолное
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товары.Ссылка,
		|	Организация,
		|	Покупатель,
		|	ДатаСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРаспределения.НомерСтрокиДокумента,
		|	ТаблицаРаспределения.Номенклатура,
		|	ТаблицаРаспределения.Характеристика,
		|	ТаблицаРаспределения.ЕдиницаИзмерения,
		|	ТаблицаРаспределения.СтавкаНДС,
		|	ТаблицаРаспределения.СуммаВознаграждения,
		|	ТаблицаРаспределения.Покупатель,
		|	ТаблицаРаспределения.ДатаСФ,
		|	ТаблицаРаспределения.ТипНоменклатуры,
		|	0 КАК СуммаНДСВознаграждения
		|ИЗ
		|	Товары КАК ТаблицаРаспределения
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтрокиДокумента,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	Товары.ЦенаПередачи,
		|	Товары.СуммаПередачи,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СуммаНДС,
		|	Товары.СуммаВознаграждения,
		|	Товары.Покупатель,
		|	Товары.ДатаСФ,
		|	ЛОЖЬ КАК ВидыЗапасовЗаполнены,
		|	1 КАК Коэффициент,
		|	1 КАК КлючСтроки,
		|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(50)) КАК ТипЗапасов,
		|	"""" КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	0 КАК СуммаНДСВознаграждения
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.НомерСтрокиДокумента,
		|	Услуги.Номенклатура,
		|	Услуги.Характеристика,
		|	ВЫБОР
		|		КОГДА Услуги.ХарактеристикаНаименование = """"
		|			ТОГДА Услуги.НоменклатураНаименование
		|		ИНАЧЕ Услуги.НоменклатураНаименование + "" ("" + Услуги.ХарактеристикаНаименование + "")""
		|	КОНЕЦ КАК Содержание,
		|	Услуги.Количество,
		|	Услуги.СтавкаНДС,
		|	Услуги.Цена,
		|	Услуги.Сумма,
		|	Услуги.СуммаНДС,
		|	Услуги.СуммаВознаграждения,
		|	Услуги.Покупатель,
		|	Услуги.ДатаСФ,
		|	1 КАК КлючСтроки,
		|	0 КАК СуммаНДСВознаграждения
		|ИЗ
		|	Товары КАК Услуги
		|ГДЕ
		|	Услуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И (Услуги.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером)
		|			ИЛИ Услуги.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации
		|			ТОГДА ВЫБОР
		|					КОГДА ВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|						ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|					ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|				КОНЕЦ
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сторно,
		|	ВидыЗапасов.ДатаСчетаФактурыКомиссионера КАК ДатаСФ,
		|	ВидыЗапасов.Покупатель,
		|	Аналитика.Номенклатура,
		|	Аналитика.Характеристика
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И ВидыЗапасов.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК КлючСтроки,
		|	ВЫБОР
		|		КОГДА Товары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА Товары.Ссылка.Контрагент
		|		ИНАЧЕ Товары.Покупатель
		|	КОНЕЦ КАК Покупатель,
		|	ВЫБОР
		|		КОГДА Товары.ДатаСФ = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА СчетФактураВыданный.Дата
		|		ИНАЧЕ Товары.ДатаСФ
		|	КОНЕЦ КАК ДатаСФ,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СчетФактураВыданный.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ВыставленСФ,
		|	МАКСИМУМ(ЕСТЬNULL(СчетФактураВыданный.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка))) КАК СчетФактура,
		|	МИНИМУМ(Товары.НомерСтрокиДокумента) КАК ЗначениеУпорядочивания
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО Товары.Ссылка = СчетФактураВыданный.ДокументОснование
		|			И Товары.Организация = СчетФактураВыданный.Организация
		|			И (Товары.ДатаСФ = НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ)
		|				ИЛИ Товары.ДатаСФ = ДАТАВРЕМЯ(1, 1, 1))
		|			И Товары.Покупатель = СчетФактураВыданный.Контрагент
		|			И (НЕ СчетФактураВыданный.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Товары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА Товары.Ссылка.Контрагент
		|		ИНАЧЕ Товары.Покупатель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Товары.ДатаСФ = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА СчетФактураВыданный.Дата
		|		ИНАЧЕ Товары.ДатаСФ
		|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Выгружаем таблицы из запроса
	
	ТабРаспределния = РезультатыЗапроса[1].Выгрузить();
	ТабТовары       = РезультатыЗапроса[2].Выгрузить();
	ТабУслуги       = РезультатыЗапроса[3].Выгрузить();
	ВидыЗапасов     = РезультатыЗапроса[4].Выбрать();
	ТабПокупатели   = РезультатыЗапроса[5].Выгрузить();
	
	РеквизитыПоиска = "Номенклатура,Характеристика,ДатаСФ,Покупатель";
	
	// Распределение НДС вознаграждения
	
	БазаРаспределенияПоСуммеВознаграждения = ТабРаспределния.ВыгрузитьКолонку("СуммаВознаграждения");
	РаспределениеНДСВознаграждения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеИБ.СуммаНДСВознаграждения, 
		БазаРаспределенияПоСуммеВознаграждения);
	
	Если ЗначениеЗаполнено(РаспределениеНДСВознаграждения) Тогда
		ТабРаспределния.ЗагрузитьКолонку(РаспределениеНДСВознаграждения, "СуммаНДСВознаграждения");
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(РеквизитыПоиска + ",СтавкаНДС");
	ЗаполняемыеРеквизиты = "СуммаНДСВознаграждения";
	
	ТабТовары.Индексы.Добавить(РеквизитыПоиска + ",СтавкаНДС");
	
	Для Каждого СтрокаТаблицыРаспределения Из ТабРаспределния Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицыРаспределения);
		
		Если СтрокаТаблицыРаспределения.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			НайденныеСтроки = ТабТовары.НайтиСтроки(СтруктураПоиска);
		ИначеЕсли СтрокаТаблицыРаспределения.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			НайденныеСтроки = ТабУслуги.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТаблицыРаспределения, ЗаполняемыеРеквизиты);
		КонецЦикла;
		
	КонецЦикла;
	
	// Распределение товаров по видам запасов
	
	СтруктураПоиска = Новый Структура(РеквизитыПоиска + ",ВидыЗапасовЗаполнены");
	ЗаполняемыеРеквизиты = "НомерГТД,СтранаПроисхождения,ТипЗапасов";
	
	ТабТовары.Индексы.Добавить(РеквизитыПоиска + ",ВидыЗапасовЗаполнены");
	
	Пока ВидыЗапасов.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВидыЗапасов, РеквизитыПоиска);
		СтруктураПоиска.ВидыЗапасовЗаполнены = Ложь;
		
		НайденныеСтроки = ТабТовары.НайтиСтроки(СтруктураПоиска);
		
		ОсталосьВидаЗапасов = ВидыЗапасов.Количество;
		Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
			
			Если ОсталосьВидаЗапасов = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаДокумента.Количество <= ОсталосьВидаЗапасов Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВидыЗапасов, ЗаполняемыеРеквизиты);
				СтрокаДокумента.ВидыЗапасовЗаполнены = Истина;
				
				ОсталосьВидаЗапасов = ОсталосьВидаЗапасов - СтрокаДокумента.Количество;
				
			Иначе
				
				// Выделение новой строки с заполненным видом запасов.
				НоваяСтрока = ТабТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				
				ДоляВидаЗапасовВСтрокеДокумента = ОсталосьВидаЗапасов / СтрокаДокумента.Количество;
				
				НоваяСтрока.Количество             = ОсталосьВидаЗапасов;
				НоваяСтрока.СуммаПередачи          = Окр(СтрокаДокумента.СуммаПередачи * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.Сумма                  = Окр(СтрокаДокумента.Сумма * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаНДС               = Окр(СтрокаДокумента.СуммаНДС * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаВознаграждения    = Окр(СтрокаДокумента.СуммаВознаграждения * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаНДСВознаграждения = Окр(СтрокаДокумента.СуммаНДСВознаграждения * ДоляВидаЗапасовВСтрокеДокумента, 2);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидыЗапасов, ЗаполняемыеРеквизиты);
				
				СтрокаДокумента.Количество             = СтрокаДокумента.Количество - НоваяСтрока.Количество;
				СтрокаДокумента.СуммаПередачи          = СтрокаДокумента.СуммаПередачи - НоваяСтрока.СуммаПередачи;
				СтрокаДокумента.Сумма                  = СтрокаДокумента.Сумма - НоваяСтрока.Сумма;
				СтрокаДокумента.СуммаНДС               = СтрокаДокумента.СуммаНДС - НоваяСтрока.СуммаНДС;
				СтрокаДокумента.СуммаВознаграждения    = СтрокаДокумента.СуммаВознаграждения - НоваяСтрока.СуммаВознаграждения;
				СтрокаДокумента.СуммаНДСВознаграждения = СтрокаДокумента.СуммаНДСВознаграждения - НоваяСтрока.СуммаНДСВознаграждения;
				
				ОсталосьВидаЗапасов = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабТовары.Сортировать("НомерСтрокиДокумента Возр");
	ТабУслуги.Сортировать("НомерСтрокиДокумента Возр");
	
	// Установление связей между таблицей покупателей и таблицами товаров и услуг.
	
	СтруктураПоиска = Новый Структура("Покупатель,ДатаСФ");
	ЗаполняемыеРеквизиты = "КлючСтроки";
	
	Для Каждого Строка Из ТабПокупатели Цикл
		
		Строка.КлючСтроки = ТабПокупатели.Индекс(Строка) + 1;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		
		НайденныеСтрокиТоваров = ТабТовары.НайтиСтроки(СтруктураПоиска);
		НайденныеСтрокиУслуг   = ТабУслуги.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТоваров Из НайденныеСтрокиТоваров Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Строка, ЗаполняемыеРеквизиты);
		КонецЦикла;
		
		Для Каждого СтрокаУслуг Из НайденныеСтрокиУслуг Цикл
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, Строка, ЗаполняемыеРеквизиты);
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Покупатели", ТабПокупатели);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка
Процедура ДобавитьПКО_ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комиссионер",                 "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПроцентВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомиссионногоВознагражд");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",     "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",         "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьВознаграждение",      "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "Услуга",                      "УслугаПоВознаграждению", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                            "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                            "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                            "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ПКО_ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтавкаНДСВознаграждения) Тогда
		ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", "БезНДС");
	КонецЕсли;
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Комиссионер;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	ПараметрыПоУмолчанию.ВидДоговора =	"СКомитентом";
	
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Организация, КомпонентыОбмена);
	КонецЕсли;
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор", ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	
	// Табличная часть
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	НомерСтроки 					КАК НомерСтрокиДокумента,
	|	Номенклатура 					КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
	|   Количество 						КАК Количество,
	|	ВЫБОР
	|		КОГДА Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СуммаСНДС / Количество < 0.01
	|					ТОГДА 0.01
	|				ИНАЧЕ ВЫРАЗИТЬ(СуммаСНДС / Количество КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ                           КАК ЦенаПоступления,
	|   СуммаСНДС 						КАК СуммаПоступления,
	|	ВЫБОР
	|		КОГДА Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СуммаПродажи / Количество < 0.01
	|					ТОГДА 0.01
	|				ИНАЧЕ ВЫРАЗИТЬ(СуммаПродажи / Количество КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ                           КАК Цена,
	|   СуммаПродажи 					КАК Сумма,
	|   СуммаПродажиНДС 				КАК СуммаНДС,
	|   СтавкаНДС 						КАК СтавкаНДС,
	|   СуммаВознаграждения 			КАК СуммаВознаграждения,
	|   СуммаНДСВознаграждения 			КАК СуммаНДСВознаграждения,
	|   ДатаСчетаФактурыКомиссионера 	КАК ДатаРеализации,
	|   Покупатель 						КАК Покупатель
	|ИЗ Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары
	|ГДЕ Ссылка = &Ссылка";
	Товары = Запрос.Выполнить().Выгрузить();
	
	Если Товары.Итог("СуммаНДСВознаграждения") <> ДанныеИБ.СуммаНДСВознаграждения Тогда
		
		БазаРаспределенияПоСуммеВознаграждения = Товары.ВыгрузитьКолонку("СуммаВознаграждения");
		РаспределениеНДСВознаграждения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеИБ.СуммаНДСВознаграждения, 
			БазаРаспределенияПоСуммеВознаграждения);
			
		Если ЗначениеЗаполнено(РаспределениеНДСВознаграждения) Тогда
			Товары.ЗагрузитьКолонку(РаспределениеНДСВознаграждения, "СуммаНДСВознаграждения");
		КонецЕсли;
			
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ПередачаМеждуОрганизациями_ПТУ_Отправка
Процедура ДобавитьПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПередачаМеждуОрганизациями_ПТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                      "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "Налогообложение", 1, "Перечисления_ТипыНалогообложенияНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДатаДок  = НачалоДня(ДанныеИБ.Дата);
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата",  ДатаДок);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ВалютаРеглУчета  = Константы.ВалютаРегламентированногоУчета.Получить();
	НомерВхДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДок, Ложь, Истина);
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);	
	
	ДанныеXDTO.Вставить("НомерВходящегоДокумента", НомерВхДокумента);
	ДанныеXDTO.Вставить("Склад",                   СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.ОрганизацияПолучатель;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
		
		ДанныеXDTO.Вставить("ВидОперации",          "ПокупкаУПоставщика");
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.ВалютаВзаиморасчетов);
		
		Если ДанныеИБ.ПередачаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			ДанныеXDTO.Вставить("Налогообложение", "ПродажаОблагаетсяЕНВД");
		КонецЕсли;
		
		Если ДанныеИБ.Валюта = ВалютаРеглУчета
			Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			
			ДанныеXDTO.Вставить("КурсВзаиморасчетов",      ДанныеИБ.Курс);
			ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеИБ.Кратность);
			
		Иначе
			ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
		КонецЕсли;
		
		ПараметрыПоУмолчанию.ВидДоговора              = "СПоставщиком";
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = ВалютаРеглУчета И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		
	Иначе
		
		ДанныеXDTO.Вставить("ВидОперации",          "ПриемНаКомиссию");
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.Валюта);
		
		Если ДанныеИБ.Валюта <> ВалютаРеглУчета Тогда
			ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
		Иначе
			ДанныеXDTO.Вставить("КурсВзаиморасчетов",      1);
			ДанныеXDTO.Вставить("КратностьВзаиморасчетов", 1);
		КонецЕсли;
		
		ПараметрыПоУмолчанию.ВидДоговора              = "СКомитентом";
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.Валюта;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	
	КонецЕсли;
	
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Организация, КомпонентыОбмена);
	КонецЕсли;
	
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор",    ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	// Табличные части
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.НомерГТД.Код КАК НомерГТД,
		|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	Товары.СтатьяРасходов КАК СтатьяРасходов,
		|	Товары.СуммаСНДС КАК СуммаСНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Номенклатура.Наименование КАК Содержание,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.Цена КАК Цена,
		|	ВременнаяТаблицаТовары.Сумма КАК Сумма,
		|	ВременнаяТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	(ВременнаяТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ ВременнаяТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|			ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаТоварыПоМаксСтроке
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ТаблицаТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена КАК Цена,
		|	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ВидыЗапасов.Количество) КАК Количество,
		|	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
		|	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоварыПоМаксСтроке КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.СтранаПроисхождения,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары     = РезультатыЗапроса[4].Выгрузить();
	
	ТаблицаТовары.Колонки.Добавить("ТипЗапасов");
	
	Если ДанныеXDTO.ВидОперации = "ПриемНаКомиссию" Тогда
		ТаблицаТовары.ЗаполнитьЗначения("КомиссионныеТовары", "ТипЗапасов");
	Иначе
		ТаблицаТовары.ЗаполнитьЗначения("СобственныеТовары", "ТипЗапасов");
		// Услуги выгружаются только для операции реализации в другую организацию.
		ДанныеXDTO.Вставить("Услуги", РезультатыЗапроса[1].Выгрузить());
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ПередачаМеждуОрганизациями_РТУ_Отправка
Процедура ДобавитьПКО_ПередачаМеждуОрганизациями_РТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПередачаМеждуОрганизациями_РТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",        "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",          "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЛицо",          "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",         "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРеглУчета  = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ГлавныйБухгалтер, "ФизическоеЛицо"));
	ДанныеXDTO.Вставить("Руководитель",     ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Руководитель, "ФизическоеЛицо"));
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
		
		ДанныеXDTO.Вставить("ВидОперации",          "РеализацияКлиенту");
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.ВалютаВзаиморасчетов);
	
		Если ДанныеИБ.Валюта = ВалютаРеглУчета
			Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			
			ДанныеXDTO.Вставить("КурсВзаиморасчетов",      ДанныеИБ.Курс);
			ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеИБ.Кратность);
			
		Иначе
			ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
		КонецЕсли;
		
		ПараметрыПоУмолчанию.ВидДоговора              = "СПокупателем";
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = ВалютаРеглУчета И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов;
	
	Иначе
		
		ДанныеXDTO.Вставить("ВидОперации",          "ПередачаНаКомиссию");
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.Валюта);
	
		Если ДанныеИБ.Валюта <> ВалютаРеглУчета Тогда
			ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
		Иначе
			
			ДанныеXDTO.Вставить("КурсВзаиморасчетов",      1);
			ДанныеXDTO.Вставить("КратностьВзаиморасчетов", 1);
			
		КонецЕсли;
		
		ПараметрыПоУмолчанию.ВидДоговора              = "СКомиссионером";
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.Валюта;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	
	КонецЕсли;
	
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.ОрганизацияПолучатель, КомпонентыОбмена);
	КонецЕсли;
	
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор",    ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	// Табличные части
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	       |	Товары.Номенклатура КАК Номенклатура,
	       |	ВЫБОР
	       |		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	       |			ТОГДА ВЫБОР
	       |					КОГДА ХарактеристикаСпр.НаименованиеПолное = """"
	       |						ТОГДА ХарактеристикаСпр.Наименование
	       |					ИНАЧЕ ХарактеристикаСпр.НаименованиеПолное
	       |				КОНЕЦ
	       |		ИНАЧЕ """"
	       |	КОНЕЦ КАК ХарактеристикаНаименование,
	       |	ВЫБОР
	       |		КОГДА НоменклатураСпр.НаименованиеПолное = """"
	       |			ТОГДА НоменклатураСпр.Наименование
	       |		ИНАЧЕ НоменклатураСпр.НаименованиеПолное
	       |	КОНЕЦ КАК НоменклатураНаименование,
	       |	Товары.Количество КАК Количество,
	       |	Товары.Цена КАК Цена,
	       |	Товары.Сумма КАК Сумма,
	       |	Товары.СтавкаНДС КАК СтавкаНДС,
	       |	Товары.СуммаНДС КАК СуммаНДС,
	       |	НоменклатураСпр.ТипНоменклатуры КАК НоменклатураТипНоменклатуры,
	       |	Товары.НомерСтроки КАК НомерСтроки,
	       |	ВидНоменклатурыСпр.ВариантОказанияУслуг КАК ВариантОказанияУслуг,
	       |	НоменклатураСпр.Контрагент КАК Контрагент,
	       |	НоменклатураСпр.Принципал КАК Партнер
	       |ПОМЕСТИТЬ ТаблицаТовары
	       |ИЗ
	       |	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Товары
	       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	       |		ПО (НоменклатураСпр.Ссылка = Товары.Номенклатура)
	       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидНоменклатурыСпр
	       |		ПО (ВидНоменклатурыСпр.Ссылка = НоменклатураСпр.ВидНоменклатуры)
	       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСпр
	       |		ПО (ХарактеристикаСпр.Ссылка = Товары.Характеристика)
	       |ГДЕ
	       |	Товары.Ссылка = &Ссылка
	       |
	       |ИНДЕКСИРОВАТЬ ПО
	       |	Номенклатура";
	Запрос.Выполнить();
	
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
	       |	ТаблицаТовары.Номенклатура КАК Номенклатура,
	       |	ВЫБОР
	       |		КОГДА ТаблицаТовары.ХарактеристикаНаименование = """"
	       |			ТОГДА ТаблицаТовары.НоменклатураНаименование
	       |		ИНАЧЕ ТаблицаТовары.НоменклатураНаименование + "" ("" + ТаблицаТовары.ХарактеристикаНаименование + "")""
	       |	КОНЕЦ КАК Содержание,
	       |	ТаблицаТовары.Номенклатура.Принципал КАК ПринципалСсылка,
	       |	ВЫБОР
	       |		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме)
	       |				ИЛИ ТаблицаТовары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером)
	       |			ТОГДА ""Агентские""
	       |		ИНАЧЕ ""Собственные""
	       |	КОНЕЦ КАК ТипУслуги,
	       |	ТаблицаТовары.Количество КАК Количество,
	       |	ТаблицаТовары.Цена КАК Цена,
	       |	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	       |	ТаблицаТовары.Сумма КАК Сумма,
	       |	ТаблицаТовары.СуммаНДС КАК СуммаНДС
	       |ИЗ
	       |	ТаблицаТовары КАК ТаблицаТовары
	       |ГДЕ
	       |	(ТаблицаТовары.НоменклатураТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	       |				И ТаблицаТовары.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПродавцом)
	       |			ИЛИ ТаблицаТовары.НоменклатураТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	Аналитика.Номенклатура КАК Номенклатура,
	       |	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	       |	ВидыЗапасов.Количество КАК Количество,
	       |	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	       |	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
	       |	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
	       |	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	       |	ВЫРАЗИТЬ(ВЫБОР
	       |			КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	       |				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
	       |			ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
	       |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	       |	ВЫБОР
	       |		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	       |			ТОГДА ВидыЗапасов.СуммаСНДС
	       |		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
	       |	КОНЕЦ КАК Сумма,
	       |	ВЫБОР
	       |		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	       |			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	       |		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	       |	КОНЕЦ КАК ТипЗапасов
	       |ПОМЕСТИТЬ ВидыЗапасов
	       |ИЗ
	       |	Документ.ПередачаТоваровМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	       |		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	       |ГДЕ
	       |	ВидыЗапасов.Ссылка = &Ссылка
	       |	И Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	       |
	       |ИНДЕКСИРОВАТЬ ПО
	       |	Номенклатура
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	ТаблицаТовары.Номенклатура КАК Номенклатура,
	       |	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки
	       |ПОМЕСТИТЬ ТаблицаТоварыПоМаксСтроке
	       |ИЗ
	       |	ТаблицаТовары КАК ТаблицаТовары
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	ТаблицаТовары.Номенклатура
	       |
	       |ИНДЕКСИРОВАТЬ ПО
	       |	Номенклатура
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	ВидыЗапасов.Номенклатура КАК Номенклатура,
	       |	ВидыЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	       |	ВидыЗапасов.Цена КАК Цена,
	       |	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	       |	ВидыЗапасов.НомерГТД КАК НомерГТД,
	       |	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
	       |	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
	       |	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
	       |	СУММА(ВидыЗапасов.Количество) КАК Количество,
	       |	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
	       |	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС
	       |ИЗ
	       |	ВидыЗапасов КАК ВидыЗапасов
	       |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоварыПоМаксСтроке КАК ПорядокСтрокТаблицыТовары
	       |		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	ВидыЗапасов.Номенклатура,
	       |	ВидыЗапасов.ЕдиницаИзмерения,
	       |	ВидыЗапасов.Цена,
	       |	ВидыЗапасов.СтавкаНДС,
	       |	ВидыЗапасов.НомерГТД,
	       |	ВидыЗапасов.СтранаПроисхождения,
	       |	ВидыЗапасов.ТипЗапасов,
	       |	ПорядокСтрокТаблицыТовары.НомерСтроки
	       |
	       |УПОРЯДОЧИТЬ ПО
	       |	ПорядокСтрокТаблицыТовары.НомерСтроки";
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТабУслуги = РезультатыЗапроса[0].Выгрузить();
		ТаблицаУслугЗаполнитьПринципала(КомпонентыОбмена, ТабУслуги);
	
		ДанныеXDTO.Вставить("Услуги", ТабУслуги);
		ДанныеXDTO.Вставить("Товары", РезультатыЗапроса[3].Выгрузить());
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
	       |	Аналитика.Номенклатура КАК Номенклатура,
	       |	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	       |	ВидыЗапасов.Количество КАК Количество,
	       |	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	       |	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
	       |	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
	       |	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	       |	ВЫБОР
	       |		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	       |			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	       |		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	       |	КОНЕЦ КАК ТипЗапасов,
	       |	ВЫРАЗИТЬ(ВЫБОР
	       |			КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	       |				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
	       |			ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
	       |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	       |	ВЫБОР
	       |		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	       |			ТОГДА ВидыЗапасов.СуммаСНДС
	       |		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
	       |	КОНЕЦ КАК Сумма
	       |ПОМЕСТИТЬ ВидыЗапасов
	       |ИЗ
	       |	Документ.ПередачаТоваровМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	       |		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	       |ГДЕ
	       |	ВидыЗапасов.Ссылка = &Ссылка
	       |
	       |ИНДЕКСИРОВАТЬ ПО
	       |	Номенклатура
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	ТаблицаТовары.Номенклатура КАК Номенклатура,
	       |	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки
	       |ПОМЕСТИТЬ ТаблицаТоварыПоМаксСтроке
	       |ИЗ
	       |	ТаблицаТовары КАК ТаблицаТовары
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	ТаблицаТовары.Номенклатура
	       |
	       |ИНДЕКСИРОВАТЬ ПО
	       |	Номенклатура
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	ВидыЗапасов.Номенклатура КАК Номенклатура,
	       |	ВидыЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	       |	ВидыЗапасов.Цена КАК Цена,
	       |	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	       |	ВидыЗапасов.НомерГТД КАК НомерГТД,
	       |	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
	       |	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
	       |	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
	       |	СУММА(ВидыЗапасов.Количество) КАК Количество,
	       |	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
	       |	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС
	       |ИЗ
	       |	ВидыЗапасов КАК ВидыЗапасов
	       |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоварыПоМаксСтроке КАК ПорядокСтрокТаблицыТовары
	       |		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	ВидыЗапасов.Номенклатура,
	       |	ВидыЗапасов.ЕдиницаИзмерения,
	       |	ВидыЗапасов.Цена,
	       |	ВидыЗапасов.СтавкаНДС,
	       |	ВидыЗапасов.НомерГТД,
	       |	ВидыЗапасов.СтранаПроисхождения,
	       |	ВидыЗапасов.ТипЗапасов,
	       |	ПорядокСтрокТаблицыТовары.НомерСтроки
	       |
	       |УПОРЯДОЧИТЬ ПО
	       |	ПорядокСтрокТаблицыТовары.НомерСтроки";
		
		ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Банки_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Банки_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Банки";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "SWIFT", 1);
	ДобавитьПКС(СвойстваШапки, "", "Адрес", 1);
	ДобавитьПКС(СвойстваШапки, "", "БИК", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИностранныйБанк", 1);
	ДобавитьПКС(СвойстваШапки, "", "КоррСчет", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "СВИФТБИК", 1);

КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "",                      "Владелец", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
			Инструкция.ИмяПКО = "Справочник_КонтрагентыИзФизЛиц_Отправка";
		Иначе
			Инструкция.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	Если СтрДлина(ДанныеИБ.НомерСчета) >  20 
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда
		// Обход ограничения на длину номера счета в формате.
		НомерСчета = Лев(ДанныеИБ.НомерСчета,20);
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.НомерСчета = НомерСчета;
		Иначе
			ДанныеXDTO.НомерСчета = НомерСчета;
		КонецЕсли;
	КонецЕсли;	
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресБанка",                   "АдресБанка");
	ДобавитьПКС(СвойстваШапки, "АдресБанкаДляРасчетов",        "АдресБанкаДляРасчетов");
	ДобавитьПКС(СвойстваШапки, "Банк",                         "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",              "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БИКБанка",                     "БИКБанка");
	ДобавитьПКС(СвойстваШапки, "БИКБанкаДляРасчетов",          "БИКБанкаДляРасчетов");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",        "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Владелец",                     "Владелец", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВыводитьСуммуБезКопеек",       "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ГородБанка",                   "ГородБанка");
	ДобавитьПКС(СвойстваШапки, "ГородБанкаДляРасчетов",        "ГородБанкаДляРасчетов");
	ДобавитьПКС(СвойстваШапки, "КоррСчетБанка",                "КоррСчетБанка");
	ДобавитьПКС(СвойстваШапки, "КоррСчетБанкаДляРасчетов",     "КоррСчетБанкаДляРасчетов");
	ДобавитьПКС(СвойстваШапки, "Наименование",                 "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеБанка",            "НаименованиеБанка");
	ДобавитьПКС(СвойстваШапки, "НаименованиеБанкаДляРасчетов", "НаименованиеБанкаДляРасчетов");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",          "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",              "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "ТелефоныБанка",                "ТелефоныБанка");
	ДобавитьПКС(СвойстваШапки, "ТелефоныБанкаДляРасчетов",     "ТелефоныБанкаДляРасчетов");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",                   "НомерСчета", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтрДлина(ДанныеИБ.НомерСчета) >  20 
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда
		// Обход ограничение на длину номера счета в формате.
		НомерСчета = Лев(ДанныеИБ.НомерСчета,20);
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.НомерСчета = НомерСчета;
		Иначе
			ДанныеXDTO.НомерСчета = НомерСчета;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВыводитьМесяцПрописью", (ДанныеИБ.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыАлкогольнойПродукции_Отправка
Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыАлкогольнойПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "КлючевыеСвойстваВидыАлкогольнойПродукции";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидЛицензии", 1);
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыПодарочныхСертификатов
Процедура ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыПодарочныхСертификатов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыПодарочныхСертификатов_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                     "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номинал",                    "Номинал");
	ДобавитьПКС(СвойстваШапки, "ЧастичнаяОплата",            "РазрешитьЧастичнуюОплату");
	ДобавитьПКС(СвойстваШапки, "КоличествоПериодовДействия", "КоличествоПериодовДействия", 1);
	ДобавитьПКС(СвойстваШапки, "ПериодДействия",             "ТипПериодаДействия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ШаблоныКодов");
	ДобавитьПКС(СвойстваТЧ, "", "ДлинаМагнитногоКода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДлинаШтрихкода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КонецДиапазонаМагнитногоКода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КонецДиапазонаШтрихкода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоДиапазонаМагнитногоКода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоДиапазонаШтрихкода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ШаблонМагнитнойКарты", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ВидыПодарочныхСертификатов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ТипПериодаДействия = Неопределено;
	КоличествоПериодовДействия = Неопределено;
	Если ДанныеИБ.ПериодДействия = Перечисления.Периодичность.День Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия;
	ИначеЕсли ДанныеИБ.ПериодДействия = Перечисления.Периодичность.Неделя Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 7;
	ИначеЕсли ДанныеИБ.ПериодДействия = Перечисления.Периодичность.Декада Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 10;
	ИначеЕсли ДанныеИБ.ПериодДействия = Перечисления.Периодичность.Месяц Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия;
	ИначеЕсли ДанныеИБ.ПериодДействия = Перечисления.Периодичность.Квартал Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 3;
	ИначеЕсли ДанныеИБ.ПериодДействия = Перечисления.Периодичность.Полугодие Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 6;
	ИначеЕсли ДанныеИБ.ПериодДействия = Перечисления.Периодичность.Год Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 12;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипПериодаДействия) И ЗначениеЗаполнено(КоличествоПериодовДействия) Тогда
		ДанныеXDTO.Вставить("ТипПериодаДействия", ТипПериодаДействия);
		ДанныеXDTO.Вставить("КоличествоПериодовДействия", КоличествоПериодовДействия);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.НомерСтроки КАК НомерСтроки,
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода КАК ДлинаШтрихкода,
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода КАК НачалоДиапазонаШтрихкода,
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода КАК КонецДиапазонаШтрихкода,
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода КАК ДлинаМагнитногоКода,
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода КАК НачалоДиапазонаМагнитногоКода,
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода КАК КонецДиапазонаМагнитногоКода,
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.ШаблонМагнитнойКарты КАК ШаблонМагнитнойКарты
		|ПОМЕСТИТЬ втШаблоныКодовПС
		|ИЗ
		|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов
		|ГДЕ
		|	ВидыПодарочныхСертификатовШаблоныКодовПодарочныхСертификатов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты КАК ШаблонМагнитнойКарты,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.ДоступностьДорожки1 КАК ДоступностьДорожки,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.Префикс1 КАК Префикс,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.Суффикс1 КАК Суффикс,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.ДлинаКода1 КАК ДлинаКода,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.РазделительБлоков1 КАК РазделительБлоков,
		|	ШаблоныМагнитныхКартПоляДорожки1.Поле КАК Поле,
		|	ШаблоныМагнитныхКартПоляДорожки1.НомерБлока КАК НомерБлока,
		|	ШаблоныМагнитныхКартПоляДорожки1.НомерПервогоСимволаПоля КАК НомерПервогоСимволаПоля,
		|	ШаблоныМагнитныхКартПоляДорожки1.ДлинаПоля КАК ДлинаПоля,
		|	""Дорожка1"" КАК Дорожка
		|ИЗ
		|	втШаблоныКодовПС КАК втШаблоныКодовПС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныМагнитныхКарт.ПоляДорожки1 КАК ШаблоныМагнитныхКартПоляДорожки1
		|		ПО втШаблоныКодовПС.ШаблонМагнитнойКарты = ШаблоныМагнитныхКартПоляДорожки1.Ссылка
		|			И (втШаблоныКодовПС.ШаблонМагнитнойКарты.ДоступностьДорожки1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.ДоступностьДорожки2,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.Префикс2,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.Суффикс2,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.ДлинаКода2,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.РазделительБлоков2,
		|	ШаблоныМагнитныхКартПоляДорожки2.Поле,
		|	ШаблоныМагнитныхКартПоляДорожки2.НомерБлока,
		|	ШаблоныМагнитныхКартПоляДорожки2.НомерПервогоСимволаПоля,
		|	ШаблоныМагнитныхКартПоляДорожки2.ДлинаПоля,
		|	""Дорожка2""
		|ИЗ
		|	втШаблоныКодовПС КАК втШаблоныКодовПС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныМагнитныхКарт.ПоляДорожки2 КАК ШаблоныМагнитныхКартПоляДорожки2
		|		ПО втШаблоныКодовПС.ШаблонМагнитнойКарты = ШаблоныМагнитныхКартПоляДорожки2.Ссылка
		|			И (втШаблоныКодовПС.ШаблонМагнитнойКарты.ДоступностьДорожки2)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.ДоступностьДорожки3,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.Префикс3,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.Суффикс3,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.ДлинаКода3,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты.РазделительБлоков3,
		|	ШаблоныМагнитныхКартПоляДорожки3.Поле,
		|	ШаблоныМагнитныхКартПоляДорожки3.НомерБлока,
		|	ШаблоныМагнитныхКартПоляДорожки3.НомерПервогоСимволаПоля,
		|	ШаблоныМагнитныхКартПоляДорожки3.ДлинаПоля,
		|	""Дорожка3""
		|ИЗ
		|	втШаблоныКодовПС КАК втШаблоныКодовПС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныМагнитныхКарт.ПоляДорожки3 КАК ШаблоныМагнитныхКартПоляДорожки3
		|		ПО втШаблоныКодовПС.ШаблонМагнитнойКарты = ШаблоныМагнитныхКартПоляДорожки3.Ссылка
		|			И (втШаблоныКодовПС.ШаблонМагнитнойКарты.ДоступностьДорожки3)
		|ИТОГИ ПО
		|	ШаблонМагнитнойКарты,
		|	Дорожка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втШаблоныКодовПС.НомерСтроки КАК НомерСтроки,
		|	втШаблоныКодовПС.ДлинаШтрихкода КАК ДлинаШтрихкода,
		|	втШаблоныКодовПС.НачалоДиапазонаШтрихкода КАК НачалоДиапазонаШтрихкода,
		|	втШаблоныКодовПС.КонецДиапазонаШтрихкода КАК КонецДиапазонаШтрихкода,
		|	втШаблоныКодовПС.ДлинаМагнитногоКода КАК ДлинаМагнитногоКода,
		|	втШаблоныКодовПС.НачалоДиапазонаМагнитногоКода КАК НачалоДиапазонаМагнитногоКода,
		|	втШаблоныКодовПС.КонецДиапазонаМагнитногоКода КАК КонецДиапазонаМагнитногоКода,
		|	втШаблоныКодовПС.ШаблонМагнитнойКарты КАК ШаблонМагнитнойКартыСсылка
		|ИЗ
		|	втШаблоныКодовПС КАК втШаблоныКодовПС";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шаблоны = Новый Соответствие;
	СтруктураШаблонов = Новый Структура("Дорожка1, Дорожка2, Дорожка3");
	
	
	ВыборкаШаблоны = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаШаблоны.Следующий() Цикл
		ВыборкаДорожки = ВыборкаШаблоны.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДорожки.Следующий() Цикл
			ПоляДорожки 		= Новый Массив;
			СтруктураДорожки 	= Новый Структура("ДоступностьДорожки, Префикс, Суффикс, ДлинаКода, РазделительБлоков, ПоляДорожки");
			
			ЗаполнитьЗначенияСвойств(СтруктураДорожки, ВыборкаДорожки);
			
			ВыборкаПоляДорожки = ВыборкаДорожки.Выбрать();
			Пока ВыборкаПоляДорожки.Следующий() Цикл
				СтруктураПолейДорожки 	= Новый Структура("Поле, НомерБлока, НомерПервогоСимволаПоля, ДлинаПоля");
				ЗаполнитьЗначенияСвойств(СтруктураПолейДорожки, ВыборкаПоляДорожки);
				ПоляДорожки.Добавить(СтруктураПолейДорожки);
			КонецЦикла;
			
			СтруктураДорожки.ПоляДорожки = ПоляДорожки;
			
			СтруктураШаблонов[ВыборкаДорожки.Дорожка] = СтруктураДорожки;
		КонецЦикла;
		
		Шаблоны.Вставить(ВыборкаШаблоны.ШаблонМагнитнойКарты, СтруктураШаблонов);
	КонецЦикла;
	
	ШаблоныКодов = Результат[2].Выгрузить();
	ШаблоныКодов.Колонки.Добавить("ШаблонМагнитнойКарты");
	Для Каждого Строка Из ШаблоныКодов Цикл
		Если ЗначениеЗаполнено(Строка.ШаблонМагнитнойКартыСсылка) Тогда
			Если Шаблоны[Строка.ШаблонМагнитнойКартыСсылка] <> Неопределено  Тогда
				Строка.ШаблонМагнитнойКарты = ЗначениеВСтрокуВнутр(Шаблоны[Строка.ШаблонМагнитнойКартыСсылка]);
			Иначе
				Строка.ШаблонМагнитнойКарты = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ШаблоныКодов", ШаблоныКодов);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГруппыФинУчетаНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ГруппыФинУчетаНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ГруппыФинУчетаНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ГруппыФинансовогоУчетаНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ГруппыНастроекФинансовогоУчетаНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ГруппыФинУчетаНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",     "Описание");
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаВПути", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаВыручкиОтПродаж", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаНаСкладе", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаНДСВПути", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаНДСПриЗакупке", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаНДСПриПродаже", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаПередачиНаКомиссию", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаСебестоимостиПродаж", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ГруппыФинУчетаНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("СчетУчетаВПути",               "");
	ДанныеXDTO.Вставить("СчетУчетаВыручкиОтПродаж",     "");
	ДанныеXDTO.Вставить("СчетУчетаНаСкладе",            "");
	ДанныеXDTO.Вставить("СчетУчетаНДСПриЗакупке",       "");
	ДанныеXDTO.Вставить("СчетУчетаНДСПриПродаже",       "");
	ДанныеXDTO.Вставить("СчетУчетаПередачиНаКомиссию",  "");
	ДанныеXDTO.Вставить("СчетУчетаСебестоимостиПродаж", "");
	ДанныеXDTO.Вставить("СчетУчетаНДСВПути",            "");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГрФинансовогоУчетаРасчетов_Отправка
Процедура ДобавитьПКО_Справочник_ГрФинансовогоУчетаРасчетов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ГрФинансовогоУчетаРасчетов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ГруппыНастроекФинансовогоУчетаРасчетов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ГрФинансовогоУчетаРасчетов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",     "Описание");
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаАвансовВыданных", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаАвансовПолученных", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаРасчетовПоПретензиям", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаРасчетовСКлиентами", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаРасчетовСКлиентамиТара", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаРасчетовСПоставщиками", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СчетУчетаРасчетовСПоставщикамиТара", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ГрФинансовогоУчетаРасчетов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("СчетУчетаАвансовВыданных",           "");
	ДанныеXDTO.Вставить("СчетУчетаАвансовПолученных",         "");
	ДанныеXDTO.Вставить("СчетУчетаРасчетовПоПретензиям",      "");
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКлиентами",        "");
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКлиентамиТара",    "");
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСПоставщиками",     "");
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСПоставщикамиТара", "");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияДействия",     "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "УчетАгентскогоНДС",         "УчетАгентскогоНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	
	Если ДанныеИБ.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях Тогда
		ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах = Истина;
	КонецЕсли;
	
	ИнструкцияВидДоговора = Новый Структура;
	ИнструкцияВидДоговора.Вставить("ИмяПКО",   "Перечисление_ТипыДоговоров_Отправка");
	ИнструкцияВидДоговора.Вставить("Значение", ДанныеИБ.ТипДоговора);
	
	Если ДанныеИБ.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
		|ГДЕ
		|	ТаможеннаяДекларацияИмпорт.Договор = &Договор
		|	И ТаможеннаяДекларацияИмпорт.Проведен");
		Запрос.УстановитьПараметр("Договор", ДанныеИБ.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", "Прочее");
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", ИнструкцияВидДоговора);
		КонецЕсли;
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", ИнструкцияВидДоговора);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.2") Тогда
		ДанныеXDTO.КлючевыеСвойства.Наименование = СокрЛП(ДанныеИБ.Наименование);
	ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.0.beta")
		И СтрДлина(СокрЛП(ДанныеИБ.Наименование)) > 50 Тогда
		ДанныеXDTO.Наименование = Лев(СокрЛП(ДанныеИБ.Наименование), 50);
	Иначе
		ДанныеXDTO.Наименование = СокрЛП(ДанныеИБ.Наименование);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ВидДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") И ДанныеИБ.Свойство("ДополнительныеРеквизиты")
		И ТипЗнч(ДанныеИБ.ДополнительныеРеквизиты) = Тип("ТаблицаЗначений") Тогда
	
		Если ДанныеИБ.ДополнительныеРеквизиты.КОличество() > 0 Тогда
			ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ДанныеИБ.ДополнительныеРеквизиты);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКредитовИДепозитов_Отправка
Процедура ДобавитьПКО_Справочник_ДоговорыКредитовИДепозитов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКредитовИДепозитов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКредитовИДепозитов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКредитовИДепозитов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "ВидДоговора", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКредитовИДепозитов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", "Прочее");
	ДанныеXDTO.КлючевыеСвойства.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыдачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КемВыдан", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПодразделения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокДействия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ПериодОтбор",         ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	ДанныеXDTO.Вставить("ВидДокументаОтбор",   ДанныеИБ.Отбор.ВидДокумента.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ТаблицаЗаписи.Колонки.Добавить("ФизическоеЛицо");
	
	Для Каждого СтрокаЗаписи Из ТаблицаЗаписи Цикл
		СтрокаЗаписи.ФизическоеЛицо = СтрокаЗаписи.Физлицо;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Отправка
Процедура ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КассыККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.КассыККМ";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер", "РегистрационныйНомер");
	ДобавитьПКС(СвойстваШапки, "Склад",                "Склад", , "Справочник_Склады_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДополнительнаяИнформация",  "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                 "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбособленноеПодразделение", "ОбособленноеПодразделение");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",      "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",         "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "",                          "ГоловнойКонтрагент", 1, "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ГоловнойКонтрагент) И ДанныеИБ.ГоловнойКонтрагент <> ДанныеИБ.Ссылка Тогда
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", ДанныеИБ.ГоловнойКонтрагент);
	Иначе
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", Неопределено);
	КонецЕсли;
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыИзФизЛиц_Отправка
Процедура ДобавитьПКО_Справочник_КонтрагентыИзФизЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтрагентыИзФизЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтрагентыИзФизЛиц_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "ЮридическоеФизическоеЛицо", 1);

КонецПроцедуры

Процедура ПКО_Справочник_КонтрагентыИзФизЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ЮридическоеФизическоеЛицо", "ФизическоеЛицо");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлкПрод_Отправка
Процедура ДобавитьПКО_Справочник_ЛицензииПоставщиковАлкПрод_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЛицензииПоставщиковАлкПрод_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЛицензии",   "ВидЛицензии", , "Перечисление_ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "Владелец",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "КемВыдана",     "КемВыдана");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Наименование");

КонецПроцедуры

Процедура ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",                   "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                                "Артикул");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция",          "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                                    "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОбъемДАЛ",                               "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "ПроизводительИмпортерДляДекларацийАлко", "ПроизводительИмпортер", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Родитель",                               "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                              "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                        "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "",                                       "ВидАлкогольнойПродукции", 1, "Справочник_ВидыАлкогольнойПродукции_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                       "ГруппаАналитическогоУчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                                       "КодОКВЭД", 1);
	ДобавитьПКС(СвойстваШапки, "",                                       "КодОКП", 1);
	ДобавитьПКС(СвойстваШапки, "",                                       "КодТНВЭД", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                       "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                     "НаименованиеПолное", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		
		ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796",,,Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);	
		Если ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
			ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("шт", Истина,,Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);
		КонецЕсли;
		
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаПоУмолчанию);
	
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ГруппыАналитическогоУчетаНоменклатуры")
		И ЗначениеЗаполнено(ДанныеИБ.ГруппаАналитическогоУчета) Тогда
		ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеИБ.ГруппаАналитическогоУчета));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукции) Тогда
		СтруктураВидАП = Новый Структура("Код, Наименование, ВидЛицензии");
		ЗаполнитьЗначенияСвойств(СтруктураВидАП, ДанныеИБ.ВидАлкогольнойПродукции);
		Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии) Тогда
			ВидЛицензии = "";
			Если ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво Тогда
				ВидЛицензии = "Пиво";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция Тогда
				ВидЛицензии = "АлкогольнаяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяПищеваяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяНеПищеваяПродукция";
			КонецЕсли;
			СтруктураВидАП.Вставить("ВидЛицензии", ВидЛицензии);
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", СтруктураВидАП);
	Иначе
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", Неопределено);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		//Код ТНВЭД
		Если ЗначениеЗаполнено(ДанныеИБ.КодТНВЭД)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодТНВЭД) Тогда
		
			ДанныеXDTO.Вставить("КодТНВЭД", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодТНВЭД, "Код, Наименование"));
		КонецЕсли;
		
		//Код КодОКВЭД
		Если ЗначениеЗаполнено(ДанныеИБ.КодОКВЭД)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодОКВЭД) Тогда
		
			ДанныеXDTO.Вставить("КодОКВЭД", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодОКВЭД, "Код, Наименование"));
		КонецЕсли;
		
		//Код КодОКП
		Если ЗначениеЗаполнено(ДанныеИБ.КодОКП)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодОКП) Тогда
		
			ДанныеXDTO.Вставить("КодОКП", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодОКП, "Код, Наименование"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИндивидуальныйПредприниматель", "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИНН",                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                     "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",       "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                          "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",       "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",       "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",     "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "",                              "КПП", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "ОКАТО", 1);
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",           "ГоловнаяОрганизация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураКлючевыхСвойств = ДанныеXDTO.КлючевыеСвойства;
	Если СтекВыгрузки.Количество() > 1 Тогда
		СтруктураКлючевыхСвойств = ДанныеXDTO;
	КонецЕсли;
	
	Если ДанныеИБ.ГоловнаяОрганизация = ДанныеИБ.Ссылка Тогда
		СтруктураКлючевыхСвойств.Вставить("ГоловнаяОрганизация", Неопределено);
	КонецЕсли;
	
	КодОКАТО = "";
	КПП = ДанныеИБ.КПП;
	Если ЗначениеЗаполнено(ДанныеИБ.РегистрацияВНалоговомОргане) Тогда
		РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РегистрацияВНалоговомОргане, "КодПоОКАТО, КПП");
		
		КодОКАТО = РеквизитыРегистрации.КодПоОКАТО;
		
		Если Не ЗначениеЗаполнено(КПП) Тогда
			КПП = РеквизитыРегистрации.КПП;
		КонецЕсли;
	КонецЕсли;
	СтруктураКлючевыхСвойств.Вставить("КПП", КПП);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	ДанныеXDTO.Вставить("ОКАТО", КодОКАТО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОтветственныеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ОтветственныеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ОтветственныеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ОтветственныеЛицаОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ОтветственныеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ОтветственныеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",          "ОрганизацияОтбор", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОтветственноеЛицо", "ВидОтветственногоЛицаОтбор", , "ВидыОтветственныхЛиц");
	ДобавитьПКС(СвойстваШапки, "",                  "УполномоченноеЛицоОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокументаПравоПодписи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВидОтветственногоЛица", 1, "ВидыОтветственныхЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ВидОтветственногоЛицаСтрокой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаДокументаПраваПодписи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаНачала", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаОкончания", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Должность", 1, "Справочник_Должности_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокументаПраваПодписи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредставлениеДокументаПраваПодписи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РегистрацияВНалоговомОргане", 1);
	ДобавитьПКС(СвойстваТЧ, "", "УполномоченноеЛицо", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ОтветственныеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("УполномоченноеЛицоОтбор", (ДанныеИБ.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Владелец КАК Организация,
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ВидОтветственногоЛица,
		|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизаций.ОтветственноеЛицо) КАК ВидОтветственногоЛицаСтрокой,
		|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УполномоченноеЛицо,
		|	ОтветственныеЛицаОрганизаций.ДатаНачала КАК ДатаНачала,
		|	ОтветственныеЛицаОрганизаций.ДатаОкончания КАК ДатаОкончания,
		|	ОтветственныеЛицаОрганизаций.НомерДокументаПраваПодписи КАК НомерДокументаПраваПодписи,
		|	ОтветственныеЛицаОрганизаций.ДатаДокументаПраваПодписи КАК ДатаДокументаПраваПодписи,
		|	ОтветственныеЛицаОрганизаций.ДокументПраваПодписи КАК ПредставлениеДокументаПраваПодписи,
		|	ОтветственныеЛицаОрганизаций.ДолжностьСсылка КАК Должность,
		|	ОтветственныеЛицаОрганизаций.ДокументПраваПодписи КАК ВидДокументаПравоПодписи
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственныеЛицаОрганизаций.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Записи = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Запись Из Записи Цикл
		Если ПустаяСтрока(Запись.ВидДокументаПравоПодписи) Тогда
			Запись.ВидДокументаПравоПодписи = НСтр("ru = 'Приказ'");
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Подразделения_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "РегистрацияПодразделенияВНалоговомОргане", , "Справочник_РегистрацииВНалоговомОргане");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизитДанныхИБ(ДанныеИБ, "ДополнительныеРеквизиты") Тогда
		ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",             "Группа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "ТекущийОтветственный", "МОЛ", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ТипСклада",            "ТипСклада", , "ТипыСкладов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "Подразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	//Подразделение
	Если ЗначениеЗаполнено(ДанныеИБ.Подразделение) Тогда
		СтруктураДанныеПодразделения = Новый Структура("Наименование, РегистрацияПодразделенияВНалоговомОргане", 
									ДанныеИБ.Подразделение.Наименование, Неопределено);
		ДанныеXDTO.Вставить("Подразделение", Новый Структура("Значение, ИмяПКО", СтруктураДанныеПодразделения, "Справочник_Подразделения_ИзСтруктуры"));
	Иначе
		ДанныеXDTO.Вставить("Подразделение", Неопределено);	
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "ДатаРегистрации", 1);
	ДобавитьПКС(СвойстваШапки, "",             "Имя", 1);
	ДобавитьПКС(СвойстваШапки, "",             "МестоРождения", 1);
	ДобавитьПКС(СвойстваШапки, "",             "НаименованиеСлужебное", 1);
	ДобавитьПКС(СвойстваШапки, "",             "Отчество", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СтраховойНомерПФР", 1);
	ДобавитьПКС(СвойстваШапки, "",             "УточнениеНаименования", 1);
	ДобавитьПКС(СвойстваШапки, "",             "Фамилия", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ФИО", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область ФИО
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО");
	
	Если ЕстьРеквизитДанныхИБ(ДанныеИБ, "ФИО") Тогда
		ДанныеXDTO.КлючевыеСвойства.ФИО = ДанныеИБ.ФИО;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ФИО)
		Или (Не СокрЛП(ДанныеXDTO.КлючевыеСвойства.ФИО) = СокрЛП(ДанныеИБ.Наименование)) Тогда
		ДанныеXDTO.КлючевыеСвойства.ФИО = ДанныеИБ.Наименование;
	КонецЕсли;
	#КонецОбласти
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.КлючевыеСвойства.Фамилия")
		И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.КлючевыеСвойства.Имя")
		И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.КлючевыеСвойства.Отчество") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Фамилия");
		ДанныеXDTO.КлючевыеСвойства.Вставить("Имя");
		ДанныеXDTO.КлючевыеСвойства.Вставить("Отчество");
	
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаРегистрации");
	ДанныеXDTO.Вставить("МестоРождения");
	ДанныеXDTO.Вставить("НаименованиеСлужебное");
	ДанныеXDTO.Вставить("СтраховойНомерПФР");
	ДанныеXDTO.Вставить("УточнениеНаименования");
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ШтрихкодОтбор",         ДанныеИБ.Отбор.Штрихкод.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы_Отправка
Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЭквайринговыеТерминалы";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Код",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "Эквайер",        "Эквайер", , "Справочник_Контрагенты");

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу
Процедура ДобавитьПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПрочееОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",        "", 1, "Справочник_Валюты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",            "", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",      "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

КонецПроцедуры

Процедура ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации; 
	
	#Область Товары
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика",      "Характеристика");
		ПравилаЗаполнения.Вставить("Упаковка",            "Упаковка");
		ПравилаЗаполнения.Вставить("Количество",          "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок",  "КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Цена",                "Цена");
		ПравилаЗаполнения.Вставить("Сумма",               "Сумма");
		ПравилаЗаполнения.Вставить("ФизическоеЛицо",      "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("СчетУчета",           "СчетУчета");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.Валюта) Тогда
		ДанныеДляЗаписиВИБ.Валюта = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	КонецЕсли;
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
			Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_АвансовыйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_АвансовыйОтчет";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов", "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",     "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",     "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",      "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",        "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПоставщикам", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",    "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Заказ",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Комментарий",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Контрагент",              "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПрочиеРасходы",     "");
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Комментарий",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Контрагент",              "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Подразделение",           "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",               "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область ОплатаПоставщикам
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Контрагент",              "Контрагент");
	ПравилаЗаполнения.Вставить("Сумма",                   "Сумма");
	ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
	ПравилаЗаполнения.Вставить("Содержание",              "Комментарий");
	ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	
	МассивСтрокОплатаПоставщикам = Новый Массив;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.АвансовыйОтчет.ОплатаКонтрагентам") Тогда
		ИмяСвойстваОплатаПоставщикам = "ОплатаКонтрагентам";
	Иначе
		ИмяСвойстваОплатаПоставщикам = "ОплатаПоставщикам";
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство(ИмяСвойстваОплатаПоставщикам)
		И ЗначениеЗаполнено(ДанныеXDTO[ИмяСвойстваОплатаПоставщикам]) Тогда
		
		Для Каждого Строка Из ДанныеXDTO[ИмяСвойстваОплатаПоставщикам] Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Валюта взаиморасчетов
			Если ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) Тогда
				Если ТипЗнч(Строка.ВалютаВзаиморасчетов) = Тип("Структура")
					И Не Строка.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
					ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
				Иначе
					ИмяПКО = "Справочник_Валюты";
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", Строка.ВалютаВзаиморасчетов, ИмяПКО));
			КонецЕсли;
			
			// Договор
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура")
					И Не Строка.Договор.Свойство("Ссылка") Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
				Иначе
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
			КонецЕсли;
	
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокОплатаПоставщикам.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплатаПоставщикам);
	КонецЕсли;
	#КонецОбласти
	
	#Область Прочее
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Содержание",              "Комментарий");
	ПравилаЗаполнения.Вставить("Поставщик",               "Контрагент");
	ПравилаЗаполнения.Вставить("Сумма",                   "Сумма");
	ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
	ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ПодразделениеЗатрат",     "Подразделение");
	ПравилаЗаполнения.Вставить("СтатьяЗатрат",            "СтатьяЗатрат");
	
	МассивСтрокПрочее = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ПрочиеРасходы")
		И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("СтатьяЗатрат")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.СтатьяЗатрат) Тогда
				СтруктураДанныхСтроки.Вставить("СтатьяРасходов",
					Новый Структура("ИмяПКО, Значение", "Справочник_СтатьиРасходов", СтруктураДанныхСтроки.СтатьяЗатрат));
			КонецЕсли;
			
			СуммаСНДС = СтруктураДанныхСтроки.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И ЗначениеЗаполнено(СтруктураДанныхСтроки.СуммаНДС) Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС;
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			
			МассивСтрокПрочее.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокПрочее.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПрочиеРасходы", МассивСтрокПрочее);
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Заполним статус документа по умолчанию.
	Если ((ДанныеИБ <> Неопределено И Не ЗначениеЗаполнено(ДанныеИБ.Статус)) Или ДанныеИБ = Неопределено) Тогда
		ПолученныеДанные.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	Иначе
		ПолученныеДанные.Статус = ДанныеИБ.Статус;
	КонецЕсли;
	
	Для Каждого Строка Из ПолученныеДанные.ОплатаПоставщикам Цикл
	
		Если ЗначениеЗаполнено(Строка.Поставщик) 
			ИЛИ НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
			
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Строка.Контрагент);
		
		Если Не ЗначениеЗаполнено(Партнер) Тогда
			Партнер = Справочники.Партнеры.НеизвестныйПартнер;
		КонецЕсли;
	
		Строка.Поставщик = Партнер;
		
	КонецЦикла;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
	
	Если ДанныеИБ.ПрочиеРасходы.Количество() > 0 Тогда
		// Прочее
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Комментарий");
		МассивКлючевыхПолей.Добавить("Контрагент");
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
		МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("СуммаСНДС");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.ПрочиеРасходы,
			ДанныеИБ.ПрочиеРасходы,
			МассивКлючевыхПолей,
			"СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов, Подразделение, СчетУчета, Субконто1, Субконто2, Субконто3");
	КонецЕсли;
	
	ДанныеИБ.ПрочиеРасходы.Загрузить(ПолученныеДанные.ПрочиеРасходы.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_АннулированиеПС_Получение
Процедура ДобавитьПКО_Документ_АннулированиеПС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_АннулированиеПС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.АннулированиеПодарочныхСертификатов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_АннулированиеПС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АннулированиеПС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПодарочныеСертификаты", "");
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВВалютеСертификата", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_АннулированиеПС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// ПодарочныеСертификаты
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
			
			СтруктураПодарочногоСертификата = Новый Структура;
			СтруктураПодарочногоСертификата.Вставить("Штрихкод",                  Строка.Штрихкод);
			СтруктураПодарочногоСертификата.Вставить("МагнитныйКод",              Строка.МагнитныйКод);
			СтруктураПодарочногоСертификата.Вставить("СерийныйНомер",             Строка.СерийныйНомер);
			
			// Готовим инструкцию для конвертации подарочного сертификата.
			Инструкция = Новый Структура;
			
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
				СтруктураПодарочногоСертификата.Вставить("ВидПодарочногоСертификата", Строка.ВидПодарочногоСертификата);
				Инструкция.Вставить("ИмяПКО", "Справочник_ПодарочныеСертификаты");
			Иначе
				Инструкция.Вставить("ИмяПКО", "Справочник_ПодарочныеСертификатыБезВладельца");	
			КонецЕсли;
			
			Инструкция.Вставить("Значение", СтруктураПодарочногоСертификата);
	
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("СуммаВВалютеСертификата", Строка.Сумма);
			СтруктураДанныхСтроки.Вставить("ПодарочныйСертификат",    Инструкция);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодарочныеСертификаты", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_АннулированиеПС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Табличные части
	ДанныеИБ.ПодарочныеСертификаты.Загрузить(ПолученныеДанные.ПодарочныеСертификаты.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнесениеДСВКассуККМ_Получение
Процедура ДобавитьПКО_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВнесениеДСВКассуККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВнесениеДенежныхСредствВКассуККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВнесениеДСВКассуККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КассаПоВалютеИОрганизации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Кассир", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",          "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Касса",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",       "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутреннееПотреблениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ВнутреннееПотреблениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВнутреннееПотреблениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВнутреннееПотреблениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВнутреннееПотреблениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",      "", 1, "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ВнутреннееПотреблениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию; 
	
	#Область Товары
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",          "Количество");
	ПравилаЗаполнения.Вставить("ФизическоеЛицо",      "ФизическоеЛицо");
	ПравилаЗаполнения.Вставить("СчетУчета",           "СчетУчета");
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ВнутреннееПотреблениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
			Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПС_Получение
Процедура ДобавитьПКО_Документ_ВозвратПС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратПС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратПодарочныхСертификатов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратПС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратПС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПлатежнымиКартами", "");
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежнойКарты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПодарочныеСертификаты",   "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "Сумма", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратПС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Статус   = Перечисления.СтатусыЧековККМ.Пробит;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ОтчетОРОзничныхПродажах = Неопределено;
	Если ДанныеXDTO.Свойство("ОтчетОРОзничныхПродажах") Тогда
		ОтчетОРОзничныхПродажах = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ДанныеXDTO.ОтчетОРОзничныхПродажах,
			ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ОтчетОРозничныхПродажах_Получение"), 
			"ПолучитьСсылку");
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОтчетОРОзничныхПродажах", ОтчетОРОзничныхПродажах);
	
	Склад = Справочники.Склады.ПустаяСсылка();
	Если ДанныеXDTO.Свойство("Склад") Тогда
		Склад = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ДанныеXDTO.Склад,
			ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Склады_Получение"), 
			"ПолучитьСсылку");
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Склад", Склад);
	
	// ПодарочныеСертификаты
	МассивСтрокПС = Новый Массив;
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
	
			СтруктураПодарочногоСертификата = Новый Структура;
			СтруктураПодарочногоСертификата.Вставить("Штрихкод",                  Строка.Штрихкод);
			СтруктураПодарочногоСертификата.Вставить("МагнитныйКод",              Строка.МагнитныйКод);
			СтруктураПодарочногоСертификата.Вставить("СерийныйНомер",             Строка.СерийныйНомер);
			
			// Готовим инструкцию для конвертации подарочного сертификата.
			Инструкция = Новый Структура;
			
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
				СтруктураПодарочногоСертификата.Вставить("ВидПодарочногоСертификата", Строка.ВидПодарочногоСертификата);
				Инструкция.Вставить("ИмяПКО",   "Справочник_ПодарочныеСертификаты");
			Иначе
				Инструкция.Вставить("ИмяПКО", "Справочник_ПодарочныеСертификатыБезВладельца");	
			КонецЕсли;
			
			Инструкция.Вставить("Значение", СтруктураПодарочногоСертификата);
			
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма",                Строка.Сумма);
			СтруктураДанныхСтроки.Вставить("ПодарочныйСертификат", Инструкция);
			
			МассивСтрокПС.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодарочныеСертификаты", МассивСтрокПС);
	
	//Оплата платежными картами
	МассивСтрокОплатаПК = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
			СтруктураДанныхСтроки.Вставить("НомерПлатежнойКарты", Строка.НомерКарты);
		
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
			    Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
			    	Эквайрер = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
						КомпонентыОбмена,
						Строка.Эквайрер,
						ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение"), 
						"ПолучитьСсылку");
						
					Если ТипЗнч(Эквайрер) = Тип("СправочникОбъект.Контрагенты") Тогда
						Эквайрер = Эквайрер.Ссылка;
					КонецЕсли;	
				
					Терминал = НайтиТерминалПоЭквайреруИОрганизации(ПолученныеДанные.Организация,
						Эквайрер);
					СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Терминал);
			    КонецЕсли;
			Иначе 
				СтруктураЭТ = ?(ТипЗнч(Строка.ЭквайринговыйТерминал) = Тип("Структура"), Строка.ЭквайринговыйТерминал, Новый Структура("Номер, Ссылка"));
				СтруктураЭТ.Вставить("БанковскийСчетОрганизации", Строка.БанковскийСчетОрганизации);
				СтруктураЭТ.Вставить("Эквайрер", Строка.Эквайрер);
				
				// Готовим инструкцию для конвертации Эквайрингового терминала.
				Инструкция = Новый Структура;
				Инструкция.Вставить("Значение", СтруктураЭТ);
				
				Если ЗначениеЗаполнено(СтруктураЭТ.Номер) Тогда
					Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
				ИначеЕсли ЗначениеЗаполнено(СтруктураЭТ.БанковскийСчетОрганизации) И ЗначениеЗаполнено(СтруктураЭТ.Эквайрер) Тогда
					Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайрингТермБезНомера_Получение_КлючСв");
				Иначе
					Инструкция = Неопределено;
				КонецЕсли;
				
				СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			КонецЕсли;
			
			МассивСтрокОплатаПК.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", МассивСтрокОплатаПК);	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратПС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка),
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
		
	ОРП   = ПолученныеДанные.ДополнительныеСвойства.ОтчетОРОзничныхПродажах;
	Склад = ПолученныеДанные.ДополнительныеСвойства.Склад;
	
	// В случае наличия объекта в базе он и будет записан (а не ПолученныеДанные).
	// Шапка и табличная часть предварительно переносятся из ПолученныеДанные в ДанныеИБ:
	// шапка - в составке свойств из ПКС, табличная часть - полностью берется из полученных данных.
	Если ДанныеИБ <> Неопределено Тогда
		
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ДанныеИБ.ПодарочныеСертификаты.Загрузить(ПолученныеДанные.ПодарочныеСертификаты.Выгрузить());
		
		Если ДанныеИБ.ОплатаПлатежнымиКартами.Итог("Сумма") <> ПолученныеДанные.ОплатаПлатежнымиКартами.Итог("Сумма")
			Или ПолученныеДанные.ОплатаПлатежнымиКартами.Количество() <> ДанныеИБ.ОплатаПлатежнымиКартами.Количество() Тогда
			ДанныеИБ.ОплатаПлатежнымиКартами.Загрузить(ПолученныеДанные.ОплатаПлатежнымиКартами.Выгрузить());
		КонецЕсли;
	
		ПолученныеДанные   = Неопределено;
		ДанныеДляЗаписиВИБ = ДанныеИБ;
		
	Иначе
		ДанныеДляЗаписиВИБ = ПолученныеДанные;
	КонецЕсли;
	
	Для Каждого СтрокаОплаты Из ДанныеДляЗаписиВИБ.ОплатаПлатежнымиКартами Цикл
		Если Не ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
			СтрокаОплаты.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ДанныеДляЗаписиВИБ.Организация);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.РеализацияПодарочныхСертификатов) Тогда
		//Добавить в табл заполнения
		ДокументСсылка = ?(ДанныеИБ = Неопределено, ДанныеДляЗаписиВИБ.ПолучитьСсылкуНового(), ДанныеДляЗаписиВИБ.Ссылка);
		КомпонентыОбмена.ПараметрыКонвертации.МассивВозвратыПСЗаполнитьОснование.Добавить(ДокументСсылка);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОРП) Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.КассаККМ) или Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.КассоваяСмена) Тогда
			НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами.Добавить();
			НоваяСтрока.ДокументСсылка   = ?(ДанныеИБ = Неопределено, ДанныеДляЗаписиВИБ.ПолучитьСсылкуНового(), ДанныеДляЗаписиВИБ.Ссылка);
			НоваяСтрока.ДатаДокумента    = ДанныеДляЗаписиВИБ.Дата;
			НоваяСтрока.ОчередьДокумента = 3;
			Если ТипЗнч(ОРП) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
				НоваяСтрока.ОРП          = ОРП.Ссылка;
			Иначе
				НоваяСтрока.ОРП          = ОРП;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.КассаККМ) Тогда
			Склад = СкладДляЗагрузки(Склад, КомпонентыОбмена.ПараметрыКонвертации);
			
			СтруктураПоискаКассыККМ = Новый Структура("Организация, Валюта, КассаККМ");
			СтруктураПоискаКассыККМ.Вставить("Склад", Склад);
			ЗаполнитьЗначенияСвойств(СтруктураПоискаКассыККМ, ДанныеДляЗаписиВИБ, "Организация, Валюта, КассаККМ");
			
			ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(СтруктураПоискаКассыККМ, КомпонентыОбмена);
			
			ДанныеДляЗаписиВИБ.КассаККМ = СтруктураПоискаКассыККМ.КассаККМ;
			
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.КассоваяСмена) Тогда
			
			НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами.Добавить();
			НоваяСтрока.ДокументСсылка   = ?(ДанныеИБ = Неопределено, ДанныеДляЗаписиВИБ.ПолучитьСсылкуНового(), ДанныеДляЗаписиВИБ.Ссылка);
			НоваяСтрока.ДатаДокумента    = ДанныеДляЗаписиВИБ.Дата;
			НоваяСтрока.ОчередьДокумента = 2;
			НоваяСтрока.КассаККМ         = ДанныеДляЗаписиВИБ.КассаККМ;
			НоваяСтрока.Организация      = ДанныеДляЗаписиВИБ.Организация;
			НоваяСтрока.Валюта           = ДанныеДляЗаписиВИБ.Валюта;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДокументРеализации",    "ДокументРеализации", , "Документ_РеализацияТоваровУслуг_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Менеджер",              "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                 "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "ВидОперации", , "ВидыОперацийВозвратОтПокупателя");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Договор",               "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
		
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБСклад = ДанныеИБ.Склад;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
		// Восстанавливаем склад из первоначального документа.
		ДанныеИБ.Склад = ДанныеИБСклад;
	КонецЕсли;
	
	// Табличные части
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "ВидОперации", , "ВидыОперацийВозвратПоставщику");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Договор",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособКомпенсации",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, ПолученныеДанные.Контрагент, КомпонентыОбмена.ПараметрыКонвертации);
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Партнер) Тогда
		ПолученныеДанные.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБСклад = ДанныеИБ.Склад;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
		// Восстанавливаем склад из первоначального документа.
		ДанныеИБ.Склад = ДанныеИБСклад;
	КонецЕсли;
	
	// Табличные части
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыемкаДСИзКассыККМ_Получение
Процедура ДобавитьПКО_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВыемкаДСИзКассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Кассир", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",          "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",       "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Получение
Процедура ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказКлиента_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказКлиента;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаказыПоставщикуКлиента";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",             "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "ГруппаФинансовогоУчета",     "ГруппаНастроекФинансовогоУчетаРасчетов", , "Справочник_ГрФинансовогоУчетаРасчетов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                       "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПоДаннымКлиента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                 "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                      "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПоДаннымКлиента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",              "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                      "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",             "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",            "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Автор",                      "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",              "", 1);
	ДобавитьПКС(СвойстваШапки, "АдресДоставкиЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваШапки, "Валюта",                     "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Договор",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Партнер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ПорядокОплаты",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ПорядокРасчетов",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Приоритет",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Соглашение",                 "", 1, "Справочник_ДоговорыВСоглашенияСПоставщик_Получение");
	ДобавитьПКС(СвойстваШапки, "СпособДоставки",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",      "", 1, "ВидыОпераций_ПТиУ_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Валюта,Контрагент,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.Проведен    = Истина;
	ПолученныеДанные.Согласован  = Истина;
	ПолученныеДанные.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары
	ПравилаЗаполнения.Вставить("Содержание", "Содержание"); 
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;		
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Товары
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Характеристика");
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		
		ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			Неопределено,
			"Количество, Упаковка, КоличествоУпаковок, Цена, Сумма, СуммаНДС, СуммаСНДС, Содержание,
			|ПроцентРучнойСкидки, СуммаРучнойСкидки, ПроцентАвтоматическойСкидки, СуммаАвтоматическойСкидки,
			|Отменено, ПричинаОтмены");
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ПорядокРасчетов) Тогда
		ДанныеДляЗаписиВИБ.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ДанныеДляЗаписиВИБ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.Статус) Тогда
		ФОЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
		Если ФОЗаказыКлиентов Тогда
			ДанныеДляЗаписиВИБ.Статус  = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		Иначе
			ДанныеДляЗаписиВИБ.Статус  = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СпособДоставки) Тогда
		ДанныеДляЗаписиВИБ.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ПорядокОплаты) Тогда
		ДанныеДляЗаписиВИБ.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Получение
Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаказыПоставщикуКлиента";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",             "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "ГруппаФинансовогоУчета",     "ГруппаНастроекФинансовогоУчетаРасчетов", , "Справочник_ГрФинансовогоУчетаРасчетов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                       "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                 "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                      "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",              "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                      "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",             "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",            "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Автор",                      "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",              "", 1);
	ДобавитьПКС(СвойстваШапки, "АдресДоставкиЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваШапки, "Валюта",                     "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Договор",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ЗакупкаПодДеятельность",     "", 1, "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Партнер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ПорядокОплаты",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ПорядокРасчетов",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Приоритет",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Соглашение",                 "", 1, "Справочник_ДоговорыВСоглашенияСПоставщик_Получение");
	ДобавитьПКС(СвойстваШапки, "СпособДоставки",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",      "", 1, "ВидыОпераций_ПТиУ_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.Проведен    = Истина;
	ПолученныеДанные.Согласован  = Истина;
	ПолученныеДанные.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам") Тогда
		ПолученныеДанные.Статус  = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
	Иначе
		ПолученныеДанные.Статус  = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",      "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика",    "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",          "Упаковка");
	ПравилаЗаполнения.Вставить("Количество",        "Количество");
	ПравилаЗаполнения.Вставить("Сумма",             "Сумма");
	ПравилаЗаполнения.Вставить("Цена",              "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",         "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",          "СуммаНДС");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок",
				 ?(ЗначениеЗаполнено(Строка.КоличествоУпаковок), Строка.КоличествоУпаковок, Строка.Количество));
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, ПолученныеДанные.Контрагент, КомпонентыОбмена.ПараметрыКонвертации);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары с другим видом запасов.
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, ПолученныеДанные.Контрагент, КомпонентыОбмена.ПараметрыКонвертации);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Товары
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Характеристика");
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		
		ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			Неопределено,
			"Количество, Упаковка, КоличествоУпаковок, Цена, Сумма, СуммаНДС, СуммаСНДС,
			|ПроцентРучнойСкидки, СуммаРучнойСкидки, Отменено");
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ПорядокРасчетов) Тогда
		ДанныеДляЗаписиВИБ.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ДанныеДляЗаписиВИБ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СпособДоставки) Тогда
		ДанныеДляЗаписиВИБ.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ПорядокОплаты) Тогда
		ДанныеДляЗаписиВИБ.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаПереводДСВБюджет_Получение
Процедура ДобавитьПКО_Документ_ЗаявкаНаПереводДСВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаПереводДСВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаПереводДСВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                  "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Валюта",                 "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",            "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа", "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",              "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация",            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",          "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Статус",                 "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",         "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидПеречисленияВБюджет", "", 1);
	ДобавитьПКС(СвойстваШапки, "ПеречислениеВБюджет",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипНалога",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Сумма", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаПереводДСВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	ПолученныеДанные.ПриоритетОплаты = Справочники.ПриоритетыОплаты.ПолучитьПриоритетПоУмолчанию(Неопределено);
	
	ПолученныеДанные.Проведен = Истина;
	
	ПолученныеДанные.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;
	ПолученныеДанные.ФормаОплатыНаличная = Ложь;
	ПолученныеДанные.ФормаОплатыБезналичная = Истина;
	ПолученныеДанные.ФормаОплатыПлатежнаяКарта = Ложь;
	
	ПолученныеДанные.ПеречислениеВБюджет = Истина;
	ПолученныеДанные.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
	ПолученныеДанные.ТипНалога = Перечисления.ТипыНалогов.НДФЛ;
	
	РасшифровкаПлатежаXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
		И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
		
		МассивРасшифровкаПлатежа = Новый Массив;
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		Для Каждого СтрокаРасшифровкаПлатежаXDTO Из РасшифровкаПлатежаXDTO Цикл
			СтрокаРасшифровкаПлатежа = ДанныеКоллекцииВВидеСтруктуры(СтрокаРасшифровкаПлатежаXDTO, ПравилаЗаполнения);
			
			МассивРасшифровкаПлатежа.Добавить(СтрокаРасшифровкаПлатежа);
		КонецЦикла;
		
		Если МассивРасшифровкаПлатежа.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивРасшифровкаПлатежа);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                           "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",       "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",                     "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                       "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                   "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Статус",                          "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыБезналичная",          "ЖелательнаяФормаОплатыБезналичные");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",               "УтвержденнаяФормаОплаты", , "ФормыОплатыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыНаличная",             "ЖелательнаяФормаОплатыНаличные");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыПлатежнаяКарта",       "ЖелательнаяФормаОплатыПлатежнаяКарта");
	ДобавитьПКС(СвойстваШапки, "ДатаВедомостиНаВыплатуЗарплаты",  "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВедомостиНаВыплатуЗарплаты", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",   "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперацияПоЗарплате", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЛицевыеСчетаСотрудников", "");
	ДобавитьПКС(СвойстваТЧ, "ЛицевойСчет",    "", 1, "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо", "", 1, "Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа",      "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВедомостиНаВыплатуЗарплаты,НомерВедомостиНаВыплатуЗарплаты,Организация,ХозяйственнаяОперация,ХозяйственнаяОперацияПоЗарплате");
КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты;
	ПолученныеДанные.ПриоритетОплаты = Справочники.ПриоритетыОплаты.ПолучитьПриоритетПоУмолчанию(Неопределено);
	
	ПолученныеДанные.Проведен = Истина;
	
	Если ПолученныеДанные.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
		ПолученныеДанные.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу;	
	ИначеЕсли ПолученныеДанные.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		// Необходимым и достаточным условием того, что это зарплатный проект, считаем заполненность свойств Контрагент и Банковский счет.
		Если ДанныеXDTO.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеXDTO.Контрагент)
			И ДанныеXDTO.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
			
			ПолученныеДанные.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
		Иначе
			ПолученныеДанные.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.СтатьяДвиженияДенежныхСредств = 
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			?(ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты,
				ПолученныеДанные.ХозяйственнаяОперацияПоЗарплате, ПолученныеДанные.ХозяйственнаяОперация));
	
	НомерВедомостиНаВыплатуЗарплаты	= "";
	ДатаВедомостиНаВыплатуЗарплаты	= '00010101';
	
	РасшифровкаПлатежаXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
		И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
		
		МассивРасшифровкаПлатежа = Новый Массив;
		
		Если ПолученныеДанные.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
			МассивЛицевыеСчетаСотрудников = Новый Массив;
			
			ПравилаЗаполнения = Новый Структура;
			ПравилаЗаполнения.Вставить("Сотрудник", "ФизическоеЛицо");
			ПравилаЗаполнения.Вставить("БанковскийСчет", "ЛицевойСчет");
			ПравилаЗаполнения.Вставить("Сумма", "Сумма");
			
			СуммаИтого = 0;
			Для Каждого СтрокаРасшифровкаПлатежаXDTO Из РасшифровкаПлатежаXDTO Цикл
				СтрокаРасшифровкаПлатежа = ДанныеКоллекцииВВидеСтруктуры(СтрокаРасшифровкаПлатежаXDTO, ПравилаЗаполнения);		
				МассивЛицевыеСчетаСотрудников.Добавить(СтрокаРасшифровкаПлатежа);
				
				НомерВедомостиНаВыплатуЗарплаты	= СтрокаРасшифровкаПлатежаXDTO.НомерВедомостиНаВыплатуЗарплаты;
				ДатаВедомостиНаВыплатуЗарплаты	= СтрокаРасшифровкаПлатежаXDTO.ДатаВедомостиНаВыплатуЗарплаты;
				
				СуммаИтого = СуммаИтого + СтрокаРасшифровкаПлатежа.Сумма;
			КонецЦикла;
			
			Если МассивЛицевыеСчетаСотрудников.Количество() > 0 Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("ЛицевыеСчетаСотрудников", МассивЛицевыеСчетаСотрудников);
			КонецЕсли; 
			
			СтрокаРасшифровкаПлатежа = Новый Структура("Сумма", СуммаИтого);
			МассивРасшифровкаПлатежа.Добавить(СтрокаРасшифровкаПлатежа);
		Иначе
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Сумма", "Сумма");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
			
			Для Каждого СтрокаРасшифровкаПлатежаXDTO Из РасшифровкаПлатежаXDTO Цикл
				СтрокаРасшифровкаПлатежа = ДанныеКоллекцииВВидеСтруктуры(СтрокаРасшифровкаПлатежаXDTO, ПравилаЗаполнения);		
				МассивРасшифровкаПлатежа.Добавить(СтрокаРасшифровкаПлатежа);
				
				НомерВедомостиНаВыплатуЗарплаты	= СтрокаРасшифровкаПлатежаXDTO.НомерВедомостиНаВыплатуЗарплаты;
				ДатаВедомостиНаВыплатуЗарплаты	= СтрокаРасшифровкаПлатежаXDTO.ДатаВедомостиНаВыплатуЗарплаты;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивРасшифровкаПлатежа.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивРасшифровкаПлатежа);
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты",	НомерВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты",	ДатаВедомостиНаВыплатуЗарплаты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаявкаНаРасходДСРасчетыСКонтр";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",               "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",    "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "ИдентификаторПлатежа");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Заметки");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КтоЗаявил",                 "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "КтоРешил",                  "КтоРешил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Статус",                    "Статус", , "СтатусыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыБезналичная",    "ЖелательнаяФормаОплатыБезналичные");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",         "УтвержденнаяФормаОплаты", , "ФормыОплатыЗаявокНаРасходДС");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыНаличная",       "ЖелательнаяФормаОплатыНаличные");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыПлатежнаяКарта", "ЖелательнаяФормаОплатыПлатежнаяКарта");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",          "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "Заказ",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику;
	
	ВозможныеХозоперации = Перечисления.ХозяйственныеОперации;
	ВидРасчетов = ДанныеXDTO.ВидРасчетов.Значение;
	Если ВидРасчетов = "СПоставщиком" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = ВозможныеХозоперации.ОплатаПоставщику;
	ИначеЕсли ВидРасчетов = "СПокупателем" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = ВозможныеХозоперации.ВозвратОплатыКлиенту;
	ИначеЕсли ВидРасчетов = "КредитыИЗаймы" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = ВозможныеХозоперации.ОплатаПоКредитам;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = ВозможныеХозоперации.ПрочаяВыдачаДенежныхСредств;
	КонецЕсли;
	
	ПолученныеДанные.СтатьяДвиженияДенежныхСредств = 
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ПолученныеДанные.ХозяйственнаяОперация);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область РасшифровкаПлатежа
	
	ЗаполнятьДоговор = (ВидРасчетов = "СПокупателем" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами)
					ИЛИ (ВидРасчетов = "СПоставщиком" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	
	МассивСтрокРасшифровка = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		//ВалютаКонвертации
		ВалютаВзаиморасчетов = Строка.ВалютаВзаиморасчетов;
		Если ТипЗнч(ВалютаВзаиморасчетов) = Тип("Структура")
			И ВалютаВзаиморасчетов.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
		Инструкция = Новый Структура("Значение, ИмяПКО", ВалютаВзаиморасчетов, ИмяПКО);
		СтруктураДанныхСтроки.Вставить("ВалютаВзаиморасчетов", Инструкция);
		Если ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
			ТипДокументаОснования = Строка.ДокументРасчетов.ТипЗначения;
			ИмяПКО = "";
			Если Найти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
				ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ТаможеннаяДекларация") > 0 Тогда
				ИмяПКО = "Документ_ТаможеннаяДекларация_Получение";
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяПКО) Тогда
				Заказ = Новый Структура("Значение, ИмяПКО", Строка.ДокументРасчетов, ИмяПКО);
				СтруктураДанныхСтроки.Вставить("Заказ", Заказ);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Строка.Договор) Тогда
			ДобавитьДоговорВРасшифровкуПлатежа(ЗаполнятьДоговор, СтруктураДанныхСтроки, Строка);
		КонецЕсли;
		МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	
	#КонецОбласти
	
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.РасшифровкаПлатежа Цикл
			Строка.СтатьяДвиженияДенежныхСредств = 
				Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
					ПолученныеДанные.ХозяйственнаяОперация);
		КонецЦикла;
	
		ПолученныеДанные.ПриоритетОплаты = Справочники.ПриоритетыОплаты.ПолучитьПриоритетПоУмолчанию(Неопределено);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризационнаяОпись_Получение
Процедура ДобавитьПКО_Документ_ИнвентаризационнаяОпись_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ИнвентаризационнаяОпись_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ИнвентаризационнаяОпись;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ИнвентаризационнаяОпись_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ИнвентаризационнаяОпись_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризационнаяОпись_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризационнаяОпись_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ИсточникИнформацииОЦенахДляПечати) Тогда
		ИсточникИзСклада = Справочники.Склады.ИсточникИнформацииОЦенахДляПечати(ДанныеДляЗаписиВИБ.Склад);
		ДанныеДляЗаписиВИБ.ИсточникИнформацииОЦенахДляПечати = ?(ЗначениеЗаполнено(ИсточникИзСклада),
			ИсточникИзСклада,
			Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КассоваяСменаЗакрытие_Получение
Процедура ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаЗакрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Номер",                  "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "ОкончаниеКассовойСмены", "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                 "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("КассаККМ,Номер");
КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	СтруктураПолученияККМ = Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.КассаККМ, "Справочник_КассыККМ_Получение");
	ПолученныеДанные.ДополнительныеСвойства.Вставить("КассаККМ", СтруктураПолученияККМ);
	ПолученныеДанные.Статус = Перечисления.СтатусыКассовойСмены.Закрыта;
КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
		ПолученныеДанные.Дата = ПолученныеДанные.ОкончаниеКассовойСмены;
	Иначе
		ПолученныеДанные.Организация = ДанныеИБ.Организация;	
		ПолученныеДанные.Дата = ДанныеИБ.Дата;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КассоваяСменаОткрытие_Получение
Процедура ДобавитьПКО_Документ_КассоваяСменаОткрытие_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаОткрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                "Дата");
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены", "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",               "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",            "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("КассаККМ,Номер");
КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	СтруктураПолученияККМ = Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.КассаККМ, "Справочник_КассыККМ_Получение");
	ПолученныеДанные.ДополнительныеСвойства.Вставить("КассаККМ", СтруктураПолученияККМ);
КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
	
	Если ((ДанныеИБ <> Неопределено И Не ЗначениеЗаполнено(ДанныеИБ.Статус)) Или ДанныеИБ = Неопределено) Тогда
		ПолученныеДанные.Статус = Перечисления.СтатусыКассовойСмены.Открыта;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_НачисленияКредитовИДепозитов_Получение
Процедура ДобавитьПКО_Документ_НачисленияКредитовИДепозитов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_НачисленияКредитовИДепозитов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.НачисленияКредитовИДепозитов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.НачислениеКредитовДепозитов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_НачислениеКредитовДепозитов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",            "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",         "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Начисления", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Дата",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Договор",              "", 1, "Справочник_ДоговорыКредитов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",           "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипСуммыГрафика",      "", 1);

КонецПроцедуры

Процедура ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен    = Истина;
	
	ХарактерДоговора = Неопределено;
	Если ДанныеXDTO.Свойство("ВидОперации") и ЗначениеЗаполнено(ДанныеXDTO.ВидОперации) Тогда
		ВидОперации = ДанныеXDTO.ВидОперации.Значение;
		Если ВидОперации = "КредитыПолученные" Тогда
			ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм;
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоКредитам;
		ИначеЕсли ВидОперации = "Депозиты" Тогда
			ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.Депозит;
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоДепозитам;
		ИначеЕсли ВидОперации = "ЗаймыПолученные" Тогда
			ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный;
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоЗаймамВыданным;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеХарактераТипаДоговора = Новый Соответствие;
	СоответствиеХарактераТипаДоговора.Вставить(Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм,
		Перечисления.ТипыДоговораКредитовИДепозитов.КредитВБанке);
	СоответствиеХарактераТипаДоговора.Вставить(Перечисления.ХарактерДоговораКредитовИДепозитов.Депозит,
		Перечисления.ТипыДоговораКредитовИДепозитов.ДепозитВБанке);
	СоответствиеХарактераТипаДоговора.Вставить(Перечисления.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный,
		Перечисления.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм);
	
	Если ДанныеXDTO.Свойство("Начисления") и ЗначениеЗаполнено(ДанныеXDTO.Начисления) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Дата", "Дата");
		ПравилаЗаполнения.Вставить("Контрагент",           "Контрагент");
		ПравилаЗаполнения.Вставить("Договор",              "Договор");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",  "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
		
		МассивСтрокНачисления = Новый Массив;
		Для Каждого Строка Из ДанныеXDTO.Начисления Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ТипСуммыГрафика = Строка.ТипСуммыГрафика.Значение;
			Если ТипСуммыГрафика = "Проценты" Тогда
				СтруктураДанныхСтроки.Вставить("ТипСуммыГрафика", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты);
			ИначеЕсли ТипСуммыГрафика = "Комиссия" Тогда
				СтруктураДанныхСтроки.Вставить("ТипСуммыГрафика", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия);
			Иначе
				СтруктураДанныхСтроки.Вставить("ТипСуммыГрафика", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг);
			КонецЕсли;
			
			Если СтруктураДанныхСтроки.Свойство("Договор") Тогда
				Если ЗначениеЗаполнено(Строка.СрочностьКредитаЗайма) Тогда
					Если Строка.СрочностьКредитаЗайма.Значение = "Краткосрочный" Тогда
						ТипСрочности = Перечисления.ТипыСрочностиКредитовИДепозитов.Краткосрочный;
					Иначе
						ТипСрочности = Перечисления.ТипыСрочностиКредитовИДепозитов.Долгосрочный;
					КонецЕсли;
					СтруктураДанныхСтроки.Договор.Вставить("ТипСрочности", ТипСрочности);
				КонецЕсли;
				Если ЗначениеЗаполнено(ХарактерДоговора) Тогда
					СтруктураДанныхСтроки.Договор.Вставить("ХарактерДоговора", ХарактерДоговора);
					ТипДоговора = СоответствиеХарактераТипаДоговора.Получить(ХарактерДоговора);
					СтруктураДанныхСтроки.Договор.Вставить("ТипДоговора", ТипДоговора);
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьВалютуВРасшифровкуПлатежа(СтруктураДанныхСтроки, Строка);	
			
			МассивСтрокНачисления.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Начисления", МассивСтрокНачисления);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Начисления
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Дата");
		МассивКлючевыхПолей.Добавить("Контрагент");
		МассивКлючевыхПолей.Добавить("Договор");
		МассивКлючевыхПолей.Добавить("ТипСуммыГрафика");
		МассивКлючевыхПолей.Добавить("ВалютаВзаиморасчетов");
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Начисления,
			ДанныеИБ.Начисления,
			МассивКлючевыхПолей,
			"СуммаВзаиморасчетов");
		ДанныеИБ.Начисления.Загрузить(ПолученныеДанные.Начисления.Выгрузить());
	
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Стр из ДанныеДляЗаписиВИБ.Начисления Цикл
		Если НЕ ЗначениеЗаполнено(Стр.СтатьяДоходовРасходов)
			и ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ХозяйственнаяОперация) Тогда
			
			Если ДанныеДляЗаписиВИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоКредитам Тогда
				Стр.СтатьяДоходовРасходов = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяРасходовКредиты");
			Иначе
				Стр.СтатьяДоходовРасходов = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяДоходовКредитыДепозиты");
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",       "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",       "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область Товары
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Цена",                "Цена");
		ПравилаЗаполнения.Вставить("Характеристика",      "Характеристика");
		ПравилаЗаполнения.Вставить("Сумма",               "Сумма");
		ПравилаЗаполнения.Вставить("НомерГТД",            "НомерГТД");
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",          "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДС_Получение
Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиБезналичныхДС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ДополнятьНомера", "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "БанковскиеСчета", "");
	ДобавитьПКС(СвойстваТЧ, "БанковскийСчет", "", 1, "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,ТипОперации,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах;
	
	#Область БанковскиеСчета
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма",          "Сумма");
	ПравилаЗаполнения.Вставить("БанковскийСчет", "БанковскийСчет");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.ДенежныеСредства Цикл
	
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("БанковскиеСчета", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиЗадолжПодотчетников_Получение
Процедура ДобавитьПКО_Документ_ОстаткиЗадолжПодотчетников_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиЗадолжПодотчетников_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиЗадолжПодотчетников_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиЗадолжПодотчетников_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиЗадолжПодотчетников";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ДополнятьНомера", "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПодотчетниками", "");
	ДобавитьПКС(СвойстваТЧ, "Валюта",          "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ПодотчетноеЛицо", "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиЗадолжПодотчетников_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников;
	
	#Область РасчетыСПодотчетниками
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма",                "Сумма");
	ПравилаЗаполнения.Вставить("СуммаРегл",            "СуммаРегл");
	ПравилаЗаполнения.Вставить("ФизическоеЛицо",       "ПодотчетноеЛицо");
	ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов", "Валюта");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
	
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПодотчетниками", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиЗадолжПодотчетников_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиКредитовЗаймов_Получение
Процедура ДобавитьПКО_Документ_ОстаткиКредитовЗаймов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиКредитовЗаймов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовПоКредитамЗаймам";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиКредитовЗаймов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиКредитовЗаймов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиКредитовИЗаймов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный", "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыПоДоговорамКредитовИДепозитов", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",    "", 1, "Справочник_ДоговорыКредитов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Контрагент", "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУпр",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипСуммы",   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиКредитовЗаймов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен      = Истина;
	ПолученныеДанные.ТипОперации   = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов;
	
	#Область РасчетыПоДоговорамКредитовИДепозитов
	
	Проценты     = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты;
	ОсновнойДолг = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг;
	
	ПравилаКонвертацииТиповСумм = Новый Соответствие;
	ПравилаКонвертацииТиповСумм.Вставить("КраткосрочныеКредиты", ОсновнойДолг);
	ПравилаКонвертацииТиповСумм.Вставить("КраткосрочныеЗаймы",   ОсновнойДолг);
	ПравилаКонвертацииТиповСумм.Вставить("ДолгосрочныеКредиты",  ОсновнойДолг);
	ПравилаКонвертацииТиповСумм.Вставить("ДолгосрочныеЗаймы",    ОсновнойДолг);
	ПравилаКонвертацииТиповСумм.Вставить("ПроцентыПоКраткосрочнымКредитам", Проценты);
	ПравилаКонвертацииТиповСумм.Вставить("ПроцентыПоКраткосрочнымЗаймам",   Проценты);
	ПравилаКонвертацииТиповСумм.Вставить("ПроцентыПоДолгосрочнымКредитам",  Проценты);
	ПравилаКонвертацииТиповСумм.Вставить("ПроцентыПоДолгосрочнымЗаймам",    Проценты);
	
	Краткосрочный = Перечисления.ТипыСрочностиКредитовИДепозитов.Краткосрочный;
	Долгосрочный  = Перечисления.ТипыСрочностиКредитовИДепозитов.Долгосрочный;
	
	ПравилаКонвертацииТипыСрочности = Новый Соответствие;
	ПравилаКонвертацииТипыСрочности.Вставить("КраткосрочныеКредиты",            Краткосрочный);
	ПравилаКонвертацииТипыСрочности.Вставить("КраткосрочныеЗаймы",              Краткосрочный);
	ПравилаКонвертацииТипыСрочности.Вставить("ПроцентыПоКраткосрочнымКредитам", Краткосрочный);
	ПравилаКонвертацииТипыСрочности.Вставить("ПроцентыПоКраткосрочнымЗаймам",   Краткосрочный);
	ПравилаКонвертацииТипыСрочности.Вставить("ДолгосрочныеКредиты",             Долгосрочный);
	ПравилаКонвертацииТипыСрочности.Вставить("ДолгосрочныеЗаймы",               Долгосрочный);
	ПравилаКонвертацииТипыСрочности.Вставить("ПроцентыПоДолгосрочнымКредитам",  Долгосрочный);
	ПравилаКонвертацииТипыСрочности.Вставить("ПроцентыПоДолгосрочнымЗаймам",    Долгосрочный);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма",      "Сумма");
	ПравилаЗаполнения.Вставить("СуммаРегл",  "СуммаРегл");
	ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
	
	КурсВалютыУпр = Неопределено;
	
	КодВалютыРегл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВалютаРегламентированногоУчета(КомпонентыОбмена),
		"Код");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		СтруктураДанныхСтроки.Вставить("СуммаУпр", Строка.Сумма);
		СтруктураДанныхСтроки.Вставить("ТипСуммы", ПравилаКонвертацииТиповСумм.Получить(Строка.ВидРасчетов.Значение));
		
		ДанныеДоговора = Новый Структура;
		ДанныеДоговора.Вставить("ТипСрочности", ПравилаКонвертацииТипыСрочности.Получить(Строка.ВидРасчетов.Значение));
		ДанныеДоговора.Вставить("Организация",  ДанныеXDTO.Организация);
		ДанныеДоговора.Вставить("Контрагент",   Строка.Контрагент);
		ДанныеДоговора.Вставить("Дата",         ДанныеXDTO.Дата);
		ДанныеДоговора.Вставить("Номер",        НСтр("ru = 'б/н'"));
		ДанныеДоговора.Вставить("Наименование", НСтр("ru = 'Кредит или займ полученный'"));
		ДанныеДоговора.Вставить("ВалютаВзаиморасчетов", Строка.ВалютаВзаиморасчетов);
		
		СтруктураДанныхСтроки.Вставить("Договор", ДанныеДоговора);
		
		Если Строка.ВалютаВзаиморасчетов.Код <> КодВалютыРегл Тогда
			Если КурсВалютыУпр = Неопределено Тогда
				КурсВалютыУпр = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(), КонецДня(ДанныеXDTO.Дата));
			КонецЕсли;
			
			Если КурсВалютыУпр.Кратность <> 0 Тогда
				СтруктураДанныхСтроки.Вставить("СуммаРегл", Окр(СтруктураДанныхСтроки.Сумма * КурсВалютыУпр.Курс / КурсВалютыУпр.Кратность, 2));
			КонецЕсли;
		Иначе
			СтруктураДанныхСтроки.Вставить("СуммаРегл", СтруктураДанныхСтроки.Сумма);
		КонецЕсли;
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыПоДоговорамКредитовИДепозитов", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиКредитовЗаймов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиНаличныхДС_Получение
Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиНаличныхДС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиНаличныхДС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиНаличныхДС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "");
	ДобавитьПКС(СвойстваШапки, "ДополнятьНомера", "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Кассы", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл", "СуммаРегл", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,ТипОперации,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНаличныхДС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВКассах;
	
	#Область Кассы
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма",     "Сумма");
	ПравилаЗаполнения.Вставить("СуммаРегл", "СуммаРегл");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.ДенежныеСредства Цикл
	
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		Если СтруктураДанныхСтроки.Свойство("Сумма") И СтруктураДанныхСтроки.Сумма <= 0
			Или СтруктураДанныхСтроки.Свойство("СуммаРегл") И СтруктураДанныхСтроки.СуммаРегл <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Валюта = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена,
	        Строка.Валюта,
	        ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Валюты"), 
	        "ПолучитьСсылку");
		
		СтруктураДанныхСтроки.Вставить("Валюта", Валюта);		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Кассы", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНаличныхДС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьКассуТабличнойЧастиПоВалютеИОрганизации(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетн_Получение
Процедура ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиПерерасходаПодотчетн_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиПерерасходаПодотчетнЛиц";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ДополнятьНомера", "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Префикс",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПартнерами",     "");
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПодотчетниками", "");
	ДобавитьПКС(СвойстваТЧ, "Валюта",          "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ПодотчетноеЛицо", "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств;
	
	#Область РасчетыСПодотчетниками
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма",                "Сумма");
	ПравилаЗаполнения.Вставить("СуммаРегл",            "СуммаРегл");
	ПравилаЗаполнения.Вставить("ФизическоеЛицо",       "ПодотчетноеЛицо");
	ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов", "Валюта");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
	
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПодотчетниками", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПокупателямиАвансы_Получение
Процедура ДобавитьПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиРасчСПокупателямиАвансы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиРасчетовСПокупАвансы";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный", "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипОперации",   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПартнерами", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",     "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ДатаПлатежа",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаРасчетногоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументРасчетов",         "", 1, "Документ_ПервичныйДокументИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерРасчетногоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ОбъектРасчетов",           "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен      = Истина;
	ПолученныеДанные.ТипОперации   = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов;
	
	#Область РасчетыСПартнерами
	ПравилаЗаполнения = ПравилаЗаполненияОстатковРасчетов(КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами);
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		ПервичныйДокумент = ПодготовитьСтруктуруДанныхПервичногоДокумента(ДанныеXDTO, Строка);	
		ПервичныйДокумент.Вставить("ТипПервичногоДокумента",  Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента);
		
		СтруктураДанныхСтроки.Вставить("ДокументРасчетов", ПервичныйДокумент);
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПартнерами", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнятьДоговор = КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами;
	ЗаполнитьОбъектРасчетовВОстатках(ПолученныеДанные, ЗаполнятьДоговор, Перечисления.ТипыДоговоров.СПокупателем);
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПокупателямиДолги_Получение
Процедура ДобавитьПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиРасчСПокупателямиДолги_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиРасчетовСПокупДолги";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный", "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипОперации",   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПартнерами", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",     "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ДатаПлатежа",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаРасчетногоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументРасчетов",         "", 1, "Документ_ПервичныйДокументИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерРасчетногоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ОбъектРасчетов",           "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен      = Истина;
	ПолученныеДанные.ТипОперации   = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов;
	
	#Область РасчетыСПартнерами
	ПравилаЗаполнения = ПравилаЗаполненияОстатковРасчетов(КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами);
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		ПервичныйДокумент = ПодготовитьСтруктуруДанныхПервичногоДокумента(ДанныеXDTO, Строка);	
		ПервичныйДокумент.Вставить("ТипПервичногоДокумента",  Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту);
		
		СтруктураДанныхСтроки.Вставить("ДокументРасчетов", ПервичныйДокумент);
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
	
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПартнерами", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнятьДоговор = (КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами);
	ЗаполнитьОбъектРасчетовВОстатках(ПолученныеДанные, ЗаполнятьДоговор, Перечисления.ТипыДоговоров.СПокупателем);
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПоставщикамиАвансы_Получение
Процедура ДобавитьПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиРасчСПоставщикамиАвансы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиРасчетовСПоставщАвансы";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипОперации",   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПартнерами", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов", "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ДатаПлатежа",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументРасчетов",     "", 1, "Документ_ПервичныйДокументИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",           "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ОбъектРасчетов",       "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",            "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен      = Истина;
	ПолученныеДанные.ТипОперации   = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам;
	
	#Область РасчетыСПартнерами
	ПравилаЗаполнения = ПравилаЗаполненияОстатковРасчетов(КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		ПервичныйДокумент = ПодготовитьСтруктуруДанныхПервичногоДокумента(ДанныеXDTO, Строка);
		ПервичныйДокумент.Вставить("ТипПервичногоДокумента",  Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику);	
		
		СтруктураДанныхСтроки.Вставить("ДокументРасчетов", ПервичныйДокумент);
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПартнерами", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнятьДоговор = (КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	ЗаполнитьОбъектРасчетовВОстатках(ПолученныеДанные, ЗаполнятьДоговор, Перечисления.ТипыДоговоров.СПоставщиком);
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчСПоставщикамиДолги_Получение
Процедура ДобавитьПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиРасчСПоставщикамиДолги_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиРасчетовСПоставщДолги";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный", "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипОперации",   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПартнерами", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",     "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ДатаПлатежа",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаРасчетногоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументРасчетов",         "", 1, "Документ_ПервичныйДокументИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерРасчетногоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ОбъектРасчетов",           "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен      = Истина;
	ПолученныеДанные.ТипОперации   = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками;
	
	#Область РасчетыСПартнерами
	ПравилаЗаполнения = ПравилаЗаполненияОстатковРасчетов(КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		ПервичныйДокумент = ПодготовитьСтруктуруДанныхПервичногоДокумента(ДанныеXDTO, Строка);
		ПервичныйДокумент.Вставить("ТипПервичногоДокумента",  Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика);	
		
		СтруктураДанныхСтроки.Вставить("ДокументРасчетов", ПервичныйДокумент);
			
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПартнерами", МассивСтрокТЧ);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнятьДоговор = (КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	ЗаполнитьОбъектРасчетовВОстатках(ПолученныеДанные, ЗаполнятьДоговор, Перечисления.ТипыДоговоров.СПоставщиком);
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ_Получение
Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиСобственныхТМЦ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",              "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",             "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДополнятьНомера",    "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НДСРегл",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",           "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБезНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,Склад,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ЦенаВключаетНДС = Ложь;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров;
	ПолученныеДанные.Валюта          = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьТЧТоварыВводОстатков(ПолученныеДанные, ДанныеXDTO.ТМЦ);
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПереданная_Получение
Процедура ДобавитьПКО_Документ_ОстаткиТараПереданная_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиТараПереданная_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиТараПереданная";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиТараПереданная_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиТараПереданная_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиТараПереданная";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ДополнятьНомера", "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НДСРегл",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",           "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБезНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Организация,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПереданная_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ЦенаВключаетНДС = Ложь;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам;
	
	ЗаполнитьТЧТоварыВводОстатков(ПолученныеДанные, ДанныеXDTO.Тара);
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПереданная_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПринятая_Получение
Процедура ДобавитьПКО_Документ_ОстаткиТараПринятая_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиТараПринятая_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиТараПринятая";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиТараПринятая_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиТараПринятая_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиТараПринятая";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",              "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",             "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "", 1, "Перечисления_ТипыНалогообложенияНДС");
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НДСРегл",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",           "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБезНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Склад,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПринятая_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ЦенаВключаетНДС = Ложь;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков;
	ПолученныеДанные.Валюта          = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьТЧТоварыВводОстатков(ПолученныеДанные, ДанныеXDTO.Тара);
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПринятая_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомис_Получение
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиТоваровПереданныхНаКомис_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиТоваровПереданНаКомис";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СоглашениеСКомиссионером", "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НДСРегл",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",           "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБезНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию;
	ПолученныеДанные.ЦенаВключаетНДС = Ложь;
	ПолученныеДанные.Валюта          = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	
	ЗаполнитьТЧТоварыВводОстатков(ПолученныеДанные, ДанныеXDTO.Товары);
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
	
	#Область Соглашение_с_комиссионером
	Если ДанныеИБ = Неопределено Или Не ЗначениеЗаполнено(ДанныеИБ.СоглашениеСКомиссионером) Тогда
		
		Если Не ЗначениеЗаполнено(ПолученныеДанные.СоглашениеСКомиссионером) Тогда
	
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|	ВЫБРАТЬ ПЕРВЫЕ 1
				|		СоглашенияСКлиентами.Ссылка
				|	ИЗ
				|		Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
				|	ГДЕ
				|		СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
				|		И НЕ СоглашенияСКлиентами.Типовое
				|		И НЕ СоглашенияСКлиентами.ПометкаУдаления
				|		И СоглашенияСКлиентами.Контрагент = &Контрагент
				|		И СоглашенияСКлиентами.Организация = &Организация
				|		И СоглашенияСКлиентами.Валюта = &Валюта
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ ПЕРВЫЕ 1
				|		СоглашенияСКлиентами.Ссылка
				|	ИЗ
				|		Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
				|	ГДЕ
				|		СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
				|		И СоглашенияСКлиентами.Типовое
				|		И НЕ СоглашенияСКлиентами.ПометкаУдаления
				|		И СоглашенияСКлиентами.Валюта = &Валюта";
				
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			Запрос.УстановитьПараметр("Контрагент", ПолученныеДанные.Контрагент);
			Запрос.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
			Запрос.УстановитьПараметр("Валюта", ПолученныеДанные.Валюта);
			
			СоглашениеСКомиссионером = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СоглашениеСКомиссионером = Выборка.Ссылка;
			Иначе
				Соглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
				Соглашение.Наименование          = НСтр("ru='С комиссионером (по умолчанию)'");
				Соглашение.Организация           = ПолученныеДанные.Организация;
				Соглашение.Контрагент            = ПолученныеДанные.Контрагент;
				Соглашение.Партнер               = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(ПолученныеДанные.Контрагент);
				Соглашение.НалогообложениеНДС    = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				Соглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
				Соглашение.Валюта                = ПолученныеДанные.Валюта;
				
				Если Соглашение.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
					Соглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
				Иначе
					Соглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
				КонецЕсли;
				Соглашение.Статус = Перечисления.СтатусыСоглашенийСклиентами.Действует;
				Соглашение.Согласован = Истина;
				Соглашение.Комментарий = НСтр("ru='БП -> ERP 2.0'");
				Соглашение.Менеджер = ПараметрыСеанса.ТекущийПользователь;
				Соглашение.Записать();
				
				// Синхронизация значения соответствующей функциональной опции.
				ТекущееЗначениеКонстанты = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
				НовоеЗначениеКонстанты = Неопределено;
				Если ТекущееЗначениеКонстанты = Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
					НовоеЗначениеКонстанты = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения;
				ИначеЕсли ТекущееЗначениеКонстанты = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения Тогда
					НовоеЗначениеКонстанты = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения;
				КонецЕсли;
				Если НовоеЗначениеКонстанты <> Неопределено Тогда
					Константы.ИспользованиеСоглашенийСКлиентами.Установить(НовоеЗначениеКонстанты);
				КонецЕсли;				
				
				СоглашениеСКомиссионером = Соглашение.Ссылка;
			КонецЕсли;
			
			ПолученныеДанные.СоглашениеСКомиссионером = СоглашениеСКомиссионером;
			Если ДанныеИБ <> Неопределено Тогда
				ДанныеИБ.СоглашениеСКомиссионером = СоглашениеСКомиссионером;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомис_Получение
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиТоваровПринятыхНаКомис_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОстаткиТоваровПринятыхНаКомис";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",         "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",           "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",          "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НДСРегл",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",           "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБезНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Склад,ТипОперации");
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ДополнятьНомера = Ложь;
	ПолученныеДанные.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
	ПолученныеДанные.Проведен        = Истина;
	ПолученныеДанные.ТипОперации     = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию;
	ПолученныеДанные.ЦенаВключаетНДС = Ложь;
	ПолученныеДанные.Валюта          = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	
	ЗаполнитьТЧТоварыВводОстатков(ПолученныеДанные, ДанныеXDTO.Товары);
КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",         "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",   "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",           "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Валюта",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПлатежнымиКартами", "");
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежнойКарты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПодарочныеСертификаты",   "");
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидЦены) И ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.ВидЦены = ПолученныеДанные.Склад.РозничныйВидЦены;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	// Услуги загружаются в ТЧ Товары
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	//Оплата платежными картами
	МассивСтрокОплатаПК = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
			СтруктураДанныхСтроки.Вставить("НомерПлатежнойКарты", Строка.НомерКарты);
		
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
			    Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
			    	Эквайрер = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
						КомпонентыОбмена,
						Строка.Эквайрер,
						ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение"), 
						"ПолучитьСсылку");
						
					Если ТипЗнч(Эквайрер) = Тип("СправочникОбъект.Контрагенты") Тогда
						Эквайрер = Эквайрер.Ссылка;
					КонецЕсли;	
				
					Терминал = НайтиТерминалПоЭквайреруИОрганизации(ПолученныеДанные.Организация,
						Эквайрер);
					СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Терминал);
			    КонецЕсли;
			ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда  
				СтруктураЭТ = ?(ТипЗнч(Строка.ЭквайринговыйТерминал) = Тип("Структура"), Строка.ЭквайринговыйТерминал, Новый Структура("Номер, Ссылка"));
				СтруктураЭТ.Вставить("БанковскийСчетОрганизации", Строка.БанковскийСчетОрганизации);
				СтруктураЭТ.Вставить("Эквайрер", Строка.Эквайрер);
				
				// Готовим инструкцию для конвертации Эквайрингового терминала.
				Инструкция = Новый Структура;
				Инструкция.Вставить("Значение", СтруктураЭТ);
				
				Если ЗначениеЗаполнено(СтруктураЭТ.Номер) Тогда
					Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайрингТерм_Получение_КлючСв");
				ИначеЕсли ЗначениеЗаполнено(СтруктураЭТ.БанковскийСчетОрганизации) И ЗначениеЗаполнено(СтруктураЭТ.Эквайрер) Тогда
					Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайрингТермБезНомера_Получение_КлючСв");
				Иначе
					Инструкция = Неопределено;
				КонецЕсли;
				
				СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			Иначе //Версия 1.4 и выше
				Инструкция = Новый Структура;
				Инструкция.Вставить("Значение", Строка.ЭквайринговыйТерминал);
				Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
				
				СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			КонецЕсли;
			
			МассивСтрокОплатаПК.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", МассивСтрокОплатаПК);	
	КонецЕсли;
	
	//Подарочные сертификаты
	МассивСтрокПС = Новый Массив; 
	
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		
		Для каждого Строка из ДанныеXDTO.ОплатаСертификатами Цикл
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);
			
			// Готовим инструкцию для конвертации подарочного сертификата.
			Инструкция = Новый Структура;
			СтруктураПодарочногоСертификата = Новый Структура;
			СтруктураПодарочногоСертификата.Вставить("Штрихкод", Строка.Штрихкод);
			СтруктураПодарочногоСертификата.Вставить("МагнитныйКод", Строка.МагнитныйКод);
			СтруктураПодарочногоСертификата.Вставить("СерийныйНомер", Строка.СерийныйНомер);
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
				Инструкция.Вставить("ИмяПКО", "Справочник_ПодарочныеСертификаты");
				СтруктураПодарочногоСертификата.Вставить("ВидПодарочногоСертификата", Строка.ВидПодарочногоСертификата);
			Иначе
				Инструкция.Вставить("ИмяПКО", "Справочник_ПодарочныеСертификатыБезВладельца");	
			КонецЕсли;
					
			Инструкция.Вставить("Значение", СтруктураПодарочногоСертификата);
			СтруктураДанныхСтроки.Вставить("ПодарочныйСертификат", Инструкция);
			
			МассивСтрокПС.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодарочныеСертификаты", МассивСтрокПС);	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Для Каждого Строка Из ПолученныеДанные.Товары Цикл
		Строка.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	КонецЦикла;
	
	// Подразделение
	ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	// В случае наличия объекта в базе он и будет записан (а не ПолученныеДанные).
	// Шапка и табличная часть предварительно переносятся из ПолученныеДанные в ДанныеИБ:
	// шапка - в составе свойств из ПКС, табличная часть - полностью берется из полученных данных.
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБСклад = ДанныеИБ.Склад;
	
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
			// Восстанавливаем склад из первоначального документа.
			ДанныеИБ.Склад = ДанныеИБСклад;
		КонецЕсли;
	
		// Табличные части
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		ПолученныеДанные = Неопределено;
		ДанныеДляЗаписиВИБ = ДанныеИБ;
	Иначе
		ДанныеДляЗаписиВИБ = ПолученныеДанные;
	КонецЕсли;
	
	ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(ДанныеДляЗаписиВИБ, КомпонентыОбмена);
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.КассоваяСмена) Тогда
		НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами.Добавить();
		НоваяСтрока.ДокументСсылка = ?(ДанныеИБ = Неопределено, ДанныеДляЗаписиВИБ.ПолучитьСсылкуНового(), ДанныеДляЗаписиВИБ.Ссылка);
		НоваяСтрока.ДатаДокумента = ДанныеДляЗаписиВИБ.Дата;
		НоваяСтрока.ОчередьДокумента = 1;
		НоваяСтрока.КассаККМ = ДанныеДляЗаписиВИБ.КассаККМ;
		НоваяСтрока.Организация = ДанныеДляЗаписиВИБ.Организация;
		НоваяСтрока.Валюта = ДанныеДляЗаписиВИБ.Валюта;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",     "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаКонвертации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "КурсКонвертации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаКонвертации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов", "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗаполнитьДатуИНомерВходящегоДокумента(ПолученныеДанные);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	// ХозяйственнаяОперация
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
	
	// КурсКонвертации
	ПолученныеДанные.КурсКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].КурсКонвертации;
	
	// СтатьяДвиженияДенежныхСредств
	Инструкция = Новый Структура("Значение", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Инструкция);
	
	// ВалютаКонвертации
	ВалютаКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].ВалютаКонвертации;
	Если ТипЗнч(ВалютаКонвертации) = Тип("Структура")
		И ВалютаКонвертации.Свойство("Ссылка") = Ложь Тогда
		ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
	Иначе
		ИмяПКО = "Справочник_Валюты";
	КонецЕсли;
	Инструкция = Новый Структура("Значение, ИмяПКО", ВалютаКонвертации, ИмяПКО);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", Инструкция);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область РасшифровкаПлатежа
	
	МассивСтрокРасшифровка = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СуммаВал", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		//ВалютаКонвертации
		ВалютаВзаиморасчетов = Строка.ВалютаКонвертации;
		Если ТипЗнч(ВалютаВзаиморасчетов) = Тип("Структура")
			И ВалютаВзаиморасчетов.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
		Инструкция = Новый Структура("Значение, ИмяПКО", ВалютаВзаиморасчетов, ИмяПКО);
		СтруктураДанныхСтроки.Вставить("ВалютаВзаиморасчетов", Инструкция);
	
		МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",     "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа",      "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗаполнитьДатуИНомерВходящегоДокумента(ПолученныеДанные);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// РасшифровкаПлатежа
	МассивСтрокРасшифровка = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		ДобавитьВалютуВРасшифровкуПлатежа(СтруктураДанныхСтроки, Строка);
		МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		Если ДанныеXDTO.РасшифровкаПлатежа.Количество() = 1 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Строка.СтатьяДДС);
		КонецЕсли;
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",     "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗаполнитьДатуИНомерВходящегоДокумента(ПолученныеДанные);
	
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
	
	СчетУчетаРасчетов = Неопределено;
	Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СчетУчетаРасчетов") <> Неопределено Тогда
		СчетУчетаРасчетов = ДанныеXDTO.РасшифровкаПлатежа[0].СчетУчетаРасчетов;
	КонецЕсли;
	Если ЗначениеЗаполнено(СчетУчетаРасчетов) Тогда
		Если Найти(СчетУчетаРасчетов, "51") > 0 Тогда
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета;
		ИначеЕсли Найти(СчетУчетаРасчетов, "79.02") > 0 Тогда
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств;
		ИначеЕсли Найти(СчетУчетаРасчетов, "57.01") > 0 Тогда
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
		ИначеЕсли Найти(СчетУчетаРасчетов, "70") > 0 Тогда
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС;
		КонецЕсли;
	КонецЕсли;
	
	#Область РасшифровкаПлатежа
	
	МассивСтрокРасшифровка = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	
	#КонецОбласти
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДоходов",                 "", 1, "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗаполнитьДатуИНомерВходящегоДокумента(ПолученныеДанные);
	
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	// ХозяйственнаяОперация
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область РасшифровкаПлатежа
	
	МассивСтрокРасшифровка = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтатьяДоходов", "СтатьяДоходов");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",     "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",          "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "Заказ",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "ОснованиеПлатежа",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗаполнитьДатуИНомерВходящегоДокумента(ПолученныеДанные);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	// ХозяйственнаяОперация
	СоответствиеЗначений = Новый Соответствие;
	СоответствиеЗначений.Вставить("СПокупателем",  Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	СоответствиеЗначений.Вставить("СПоставщиком",  Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	СоответствиеЗначений.Вставить("КредитыИЗаймы", Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
	СоответствиеЗначений.Вставить("Прочее",        Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
	
	ПолученныеДанные.ХозяйственнаяОперация = СоответствиеЗначений.Получить(ДанныеXDTO.ВидРасчетов.Значение);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// РасшифровкаПлатежа
	ЗаполнятьДоговор = (ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами)
					ИЛИ (ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	
	МассивСтрокРасшифровка = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		ДобавитьВалютуВРасшифровкуПлатежа(СтруктураДанныхСтроки, Строка);
		ДобавитьДоговорВРасшифровкуПлатежа(ЗаполнятьДоговор, СтруктураДанныхСтроки, Строка, "ОснованиеПлатежа");
		МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",     "", 1, "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",               "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗаполнитьДатуИНомерВходящегоДокумента(ПолученныеДанные);
	
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	// ХозяйственнаяОперация
	ВидРасчетов = ДанныеXDTO.ВидРасчетов.Значение;
	Если ВидРасчетов = "Подотчет" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника;
		// В этом случае необходимо заполнить расшифровку платежа.
		#Область РасшифровкаПлатежа
	
		МассивСтрокРасшифровка = Новый Массив;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Сумма", "Сумма");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		#КонецОбласти
	Иначе
		// В том числе, если "Займы"
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
	КонецЕсли;
	
	// ПодотчетноеЛицо
	Если ВидРасчетов = "Подотчет" Тогда
		Инструкция = Новый Структура("Значение", ДанныеXDTO.Сотрудник);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодотчетноеЛицо", Инструкция);
	КонецЕсли;
	
	// СтатьяДДС
	Инструкция = Новый Структура("Значение", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Инструкция);
	
	#Область БанковскийСчетКонтрагента
	Если ДанныеXDTO.Свойство("БанковскийСчетСотрудника") Тогда
		Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника Тогда
		
			// Банковский счет контрагента, содержащийся в объекте формата, загружается в справочник
			// "Банковские счета контрагентов" и привязывается к контрагенту. Для этого документа нужен банковский
			// счет, привязанный к физическому лицу. Создаем и заполняем эти счета после загрузки всех данных.
			// Для этого запоминаем номер счета, чтобы после загрузки всех данных заполнить счет физического лица.
			ПолученныеДанные.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента_Номер",
				ДанныеXDTO.БанковскийСчетСотрудника.НомерСчета);
		Иначе
			Инструкция = Новый Структура("Значение", ДанныеXDTO.БанковскийСчетСотрудника);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента", Инструкция);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	// Контрагент
	Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств
		И ДанныеXDTO.Свойство("БанковскийСчетСотрудника") Тогда
		Инструкция = Новый Структура("Значение", ДанныеXDTO.БанковскийСчетСотрудника.Владелец);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		// Выравнивание суммы в расшифровке и в шапке
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() = 1 Тогда
			ДанныеИБ.РасшифровкаПлатежа[0].Сумма = ДанныеИБ.СуммаДокумента;
		КонецЕсли; 
	
		#Область БанковскийСчетКонтрагента
		
		// Проверяем, что номер счета указан верно, если совпадает, то оставляем текущее значение.
		Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
			И Не ЗначениеЗаполнено(ДанныеИБ.БанковскийСчетКонтрагента)
			И ПолученныеДанные.ДополнительныеСвойства.Свойство("БанковскийСчетКонтрагента_Номер") Тогда
			
			НомерСчетаИсточник = ПолученныеДанные.ДополнительныеСвойства.БанковскийСчетКонтрагента_Номер;
			НомерСчетаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДанныеИБ.БанковскийСчетКонтрагента, "НомерСчета");
			
			Если НомерСчетаИсточник <> НомерСчетаПриемник Тогда
				
				ДанныеИБ.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
				ДанныеИБ.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента_Номер", НомерСчетаИсточник);
				
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
	
	Мержевание_ПБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПервичныйДокументИзСтруктуры_Получение
Процедура ДобавитьПКО_Документ_ПервичныйДокументИзСтруктуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПервичныйДокументИзСтруктуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПервичныйДокумент;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПервичныйДокументИзСтруктуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПервичныйДокумент";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                  "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваШапки, "Договор",                 "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",             "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаРегл",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипПервичногоДокумента",  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Договор,Контрагент,НомерВходящегоДокумента,Организация,ТипПервичногоДокумента");
КонецПроцедуры

Процедура ПКО_Документ_ПервичныйДокументИзСтруктуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ДатаВходящегоДокумента") Тогда
		ПолученныеДанные.ДатаВходящегоДокумента = ДанныеXDTO.КлючевыеСвойства.ДатаВходящегоДокумента;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("НомерВходящегоДокумента") Тогда
		ПолученныеДанные.НомерВходящегоДокумента = ДанныеXDTO.КлючевыеСвойства.НомерВходящегоДокумента;
	КонецЕсли;
	ПолученныеДанные.СуммаДокумента = ДанныеXDTO.КлючевыеСвойства.СуммаДокумента;
	ПолученныеДанные.ТипПервичногоДокумента = ДанныеXDTO.КлючевыеСвойства.ТипПервичногоДокумента;
	
	ДополнительныеСвойства = ПолученныеДанные.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Организация", ДанныеXDTO.КлючевыеСвойства.Организация);
	ДополнительныеСвойства.Вставить("Контрагент", ДанныеXDTO.КлючевыеСвойства.Контрагент);
	ДополнительныеСвойства.Вставить("Договор", ДанныеXDTO.КлючевыеСвойства.Договор);
	ДополнительныеСвойства.Вставить("Валюта", ДанныеXDTO.КлючевыеСвойства.Валюта);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаРаспоряжения",      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",      "СкладОтправитель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "СкладПолучатель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ПолученныеДанные.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область Товары
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Характеристика",                 "Характеристика");
		ПравилаЗаполнения.Вставить("Упаковка",                       "Упаковка");
		ПравилаЗаполнения.Вставить("Номенклатура",                   "Номенклатура");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок",             "КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Количество",                     "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		Если НЕ (СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") И СтруктураДанныхСтроки.КоличествоУпаковок <> 0) Тогда
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
		КонецЕсли;
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОВнутренняяПередача_Получение
Процедура ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОВнутренняяПередача";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",                  "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",              "", 1, "Справочник_ОтветственныеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",             "ДокументВыдачиДС", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа",      "");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	СтрокаРасшифровки = ДанныеXDTO.РасшифровкаПлатежа[0];
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаРасшифровки.СтатьяДДС);
	
	Если ДанныеXDTO.Свойство("ГлавныйБухгалтер") И ЗначениеЗаполнено(ДанныеXDTO.ГлавныйБухгалтер) Тогда
		
		ГлавныйБухгалтерСтруктура = Новый Структура;
		ГлавныйБухгалтерСтруктура.Вставить("Владелец", ПолученныеДанные.Организация);
		ГлавныйБухгалтерСтруктура.Вставить("ФизическоеЛицо", ДанныеXDTO.ГлавныйБухгалтер);
		ГлавныйБухгалтерСтруктура.Вставить("Должность", НСтр("ru = 'Главный бухгалтер'"));
		ГлавныйБухгалтерСтруктура.Вставить("Наименование", НСтр("ru = 'Главный бухгалтер'"));
		ГлавныйБухгалтерСтруктура.Вставить("ОтветственноеЛицо", "ГлавныйБухгалтер");
		ГлавныйБухгалтерСтруктура.Вставить("ДатаНачала", Дата(1980,1,1));
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтерСтруктура);
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ДанныеXDTO.ДокументВыдачиДС);
	
	СтруктураДанныхСтроки = Новый Структура;
	СтруктураДанныхСтроки.Вставить("Сумма", ДанныеXDTO.Сумма);
	СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Новый УникальныйИдентификатор);
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
КонецПроцедуры

Процедура ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",                  "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаКонвертации",             "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "КурсКонвертации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	СтрокаРасшифровки = ДанныеXDTO.РасшифровкаПлатежа[0];
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаРасшифровки.СтатьяДДС);
	ПолученныеДанные.КурсКонвертации = СтрокаРасшифровки.КурсКонвертации;
	//ВалютаКонвертации
	ВалютаКонвертации = СтрокаРасшифровки.ВалютаКонвертации;
	Если ТипЗнч(ВалютаКонвертации) = Тип("Структура")
		И ВалютаКонвертации.Свойство("Ссылка") = Ложь Тогда
		ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
	Иначе
		ИмяПКО = "Справочник_Валюты";
	КонецЕсли;
	Инструкция = Новый Структура("Значение, ИмяПКО", ВалютаКонвертации, ИмяПКО);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", Инструкция);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка;
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПоступлениеИзКассыККМ_Получение
Процедура ДобавитьПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПоступлениеИзКассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПоступлениеИзКассыККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Касса",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗаполнитьКассуПоВалютеИОрганизации(ПолученныеДанные, КомпонентыОбмена);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ЗаполнитьКассуККМПоВалютеПодразделениюИОрганизации(ПолученныеДанные);
	
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",                  "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
	
	СтрокаРасшифровки = ДанныеXDTO.РасшифровкаПлатежа[0];
	Если ДанныеXDTO.РасшифровкаПлатежа.Количество() = 1 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаРасшифровки.СтатьяДДС);
	КонецЕсли;
	
	СчетУчетаРасчетов = "";
	Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СчетУчетаРасчетов") <> Неопределено Тогда
		СчетУчетаРасчетов = СтрокаРасшифровки.СчетУчетаРасчетов;
	КонецЕсли;
	Если Найти(СчетУчетаРасчетов, "57.01") Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокРасшифровка = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",                  "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДоходов",                 "", 1, "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	СтрокаРасшифровки = ДанныеXDTO.РасшифровкаПлатежа[0];
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаРасшифровки.СтатьяДДС);
	
	Т_РП = Новый Соответствие;
	Т_РП.Вставить("Сумма", "Сумма");
	Т_РП.Вставить("СуммаВзаиморасчетов", "Сумма");
	Т_РП.Вставить("СтатьяДоходов", "СтатьяДоходов");
	Т_РП.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		СтруктураДанныхСтроки = Новый Структура;
		ЗаполнитьСтруктуруДанныхСтроки(Т_РП, СтрокаXDTO, СтруктураДанныхСтроки);
		МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Заказ",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "ОснованиеПлатежа",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Заполнение данных шапки
	ПолученныеДанные.Проведен = Истина;
	
	ВидРасчетов = "СПокупателем";
	Если ДанныеXDTO.Свойство("ВидРасчетов") Тогда
		ВидРасчетов = ДанныеXDTO.ВидРасчетов.Значение;
	КонецЕсли;
	
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
	Если ВидРасчетов = "СПокупателем" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ИначеЕсли ВидРасчетов = "СПоставщиком" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Расшифровка платежа
	ЗаполнятьДоговор = (ВидРасчетов = "СПокупателем" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами)
					ИЛИ (ВидРасчетов = "СПоставщиком" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
	
		Т_РП = Новый Соответствие;
		Т_РП.Вставить("Сумма", "Сумма");
		Т_РП.Вставить("СуммаВзаиморасчетов", "Сумма");
		Т_РП.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
		Т_РП.Вставить("СуммаНДС", "СуммаНДС");
		Т_РП.Вставить("СтавкаНДС", "СтавкаНДС");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_РП, СтрокаXDTO, СтруктураДанныхСтроки);
			ДобавитьВалютуВРасшифровкуПлатежа(СтруктураДанныхСтроки, СтрокаXDTO);
			ДобавитьДоговорВРасшифровкуПлатежа(ЗаполнятьДоговор, СтруктураДанныхСтроки, СтрокаXDTO, "ОснованиеПлатежа");
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
			ВидРасчетовРасширенный = СтрокаXDTO.ВидРасчетовРасширенный;
			Если Найти(НРЕГ(ВидРасчетовРасширенный), "займ") > 0 И ВидРасчетов = "КредитыИЗаймы" Тогда
				ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным;
			КонецЕсли;
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",                  "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",               "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ВидРасчетов = "Подотчет";
	Если ДанныеXDTO.Свойство("ВидРасчетов") Тогда
		ВидРасчетов = ДанныеXDTO.ВидРасчетов.Значение;
	КонецЕсли;
	
	Если ВидРасчетов = "Подотчет" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
		// Плательщик заполняется значением контрагента - его надо будет найти по ссылке.
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтрагентСсылка", ДанныеXDTO.Сотрудник.Ссылка.Значение);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтрагентНаименование", ДанныеXDTO.Сотрудник.ФИО);
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Расшифровка платежа
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	
		Т_РП = Новый Соответствие;
		Т_РП.Вставить("Сумма", "Сумма");
		Т_РП.Вставить("СуммаВзаиморасчетов", "Сумма");
		Т_РП.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_РП, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Заполнение контрагента.
	Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		КонтрагентСсылка = КонтрагентИзДопСвойствПолученныхДанных(ПолученныеДанные);  
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			ПолученныеДанные.Контрагент = КонтрагентСсылка;
		КонецЕсли;
	КонецЕсли;
	
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Склад_Наименование", "");
	Если ДанныеXDTO.Свойство("Склад") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Склад_Наименование", ДанныеXDTO.Склад.Наименование);
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.Склад_Наименование) Тогда
		ЗаполнитьКассуККМПоВалютеПодразделениюИОрганизации(ПолученныеДанные);
	Иначе
		ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(ПолученныеДанные,
			КомпонентыОбмена, ПолученныеДанные.ДополнительныеСвойства.Склад_Наименование);
	КонецЕсли;
	
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриобретениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ЗаказПоставщику",           "Заказ", , "Документ_ЗаказПоставщику_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВзаиморасчетов",       "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "ВидОперации", , "ВидыОпераций_ПТиУ_Получение");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Договор",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Согласован",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",           "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",               "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                  "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",              "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Валюта,Контрагент,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.Проведен    = Истина;
	ПолученныеДанные.Согласован  = Истина;
	ПолученныеДанные.ДатаПлатежа = ПолученныеДанные.Дата;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	Если ИспользоватьЗаказыПоставщикам
		И ДанныеXDTO.Свойство("Заказ")
		И ЗначениеЗаполнено(ДанныеXDTO.Заказ) Тогда
		ПолученныеДанные.ПоступлениеПоЗаказам = Истина;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("Склад",        "Склад");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код, СтранаПроисхождения", Строка.НомерГТД, Строка.СтранаПроисхождения));
			КонецЕсли;
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, ПолученныеДанные.Контрагент, КомпонентыОбмена.ПараметрыКонвертации);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары с другим видом запасов.
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, ПолученныеДанные.Контрагент, КомпонентыОбмена.ПараметрыКонвертации);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПТиУ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПТУЧерезПодотчетноеЛицо_Получение
Процедура ДобавитьПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПТУЧерезПодотчетноеЛицо_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриобретениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов",    "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",        "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",        "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",         "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Валюта",                  "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",    "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",      "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Согласован",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособДоставки",          "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВзаиморасчетов",     "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",           "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",               "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                  "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",              "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.Проведен               = Истина;
	ПолученныеДанные.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ПолученныеДанные.Согласован             = Истина;
	ПолученныеДанные.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	ПолученныеДанные.СпособДоставки 		= Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	
	ПолученныеДанные.ДатаПлатежа = ПолученныеДанные.Дата;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СуммаВключаетНДС", ДанныеXDTO.СуммаВключаетНДС);
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	//Товары 
	СуммаДокумента = 0;
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				КлючевыеСвойстваГТД = Новый Структура("Код, СтранаПроисхождения", Строка.НомерГТД, Строка.СтранаПроисхождения);
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Значение, ИмяПКО", КлючевыеСвойстваГТД, "Справочник_НомерГТД_Получение"));
			КонецЕсли;
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			СуммаДокумента = СуммаДокумента + СуммаСНДС;
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
	
			Если ЗначениеЗаполнено(Строка.Поставщик) И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("Контрагент") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагент", Строка.Поставщик);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерВходящегоДокумента) И НЕ ЗначениеЗаполнено(ПолученныеДанные.НомерВходящегоДокумента) Тогда
				ПолученныеДанные.НомерВходящегоДокумента = Строка.НомерВходящегоДокумента;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ДатаВходящегоДокумента) И НЕ ЗначениеЗаполнено(ПолученныеДанные.ДатаВходящегоДокумента) Тогда
				ПолученныеДанные.ДатаВходящегоДокумента = Строка.ДатаВходящегоДокумента;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ПредъявленСФ) 
				И ЗначениеЗаполнено(Строка.ДатаСФ)
				И ЗначениеЗаполнено (Строка.НомерСФ) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("ДатаСФ") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаСФ", Строка.ДатаСФ);
				ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерСФ", Строка.НомерСФ);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.СуммаДокумента = СуммаДокумента;
	ПолученныеДанные.СуммаВзаиморасчетов = СуммаДокумента;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ВалютаВзаиморасчетов = ПолученныеДанные.Валюта;
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДатаСФ") Тогда
		СФПолученные = КомпонентыОбмена.ПараметрыКонвертации.СФПолученныеПоЗагруженнымАвансовымОтчетам;
		СтрокаСФ = СФПолученные.Добавить();
		СтрокаСФ.ДокументОснование = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
		СтрокаСФ.ДатаСФ = ПолученныеДанные.ДополнительныеСвойства.ДатаСФ;
		СтрокаСФ.НомерСФ = ПолученныеДанные.ДополнительныеСвойства.НомерСФ;
		СтрокаСФ.Контрагент = ПолученныеДанные.Контрагент;
		СтрокаСФ.Организация = ПолученныеДанные.Организация;
		СтрокаСФ.Валюта = ПолученныеДанные.Валюта;
	КонецЕсли;
	ПТиУ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияПС_Получение
Процедура ДобавитьПКО_Документ_РеализацияПС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияПС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияПодарочныхСертификатов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияПС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияПС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",         "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПлатежнымиКартами", "");
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежнойКарты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПодарочныеСертификаты",   "");
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат", "", 1, "Справочник_ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РеализацияПС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если Не (ДанныеXDTO.Свойство("ПодарочныеСертификаты") И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты)) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Склад = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
		КомпонентыОбмена,
		ДанныеXDTO.Склад,
		ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Склады_Получение"), 
		"ПолучитьСсылку");
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Склад", Склад);
	
	// ПодарочныеСертификаты
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
		
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);
			
			// Готовим инструкцию для конвертации подарочного сертификата.
			Инструкция = Новый Структура;
			Инструкция.Вставить("ИмяПКО", "Справочник_ПодарочныеСертификаты");
			
			СтруктураПодарочногоСертификата = Новый Структура;
			СтруктураПодарочногоСертификата.Вставить("Штрихкод", Строка.Штрихкод);
			СтруктураПодарочногоСертификата.Вставить("МагнитныйКод", Строка.МагнитныйКод);
			СтруктураПодарочногоСертификата.Вставить("СерийныйНомер", Строка.СерийныйНомер);
			СтруктураПодарочногоСертификата.Вставить("ВидПодарочногоСертификата", Строка.ВидПодарочногоСертификата);
			
			Инструкция.Вставить("Значение", СтруктураПодарочногоСертификата);
			
			СтруктураДанныхСтроки.Вставить("ПодарочныйСертификат", Инструкция);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодарочныеСертификаты", МассивСтрокТовары);
	
	// ПлатежныеКарты.
	МассивСтрокОплатаПК = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартамиПодарочныхСертификатов")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов Цикл
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
			СтруктураДанныхСтроки.Вставить("НомерПлатежнойКарты", Строка.НомерКарты);
		
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
			    Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
			    	Эквайрер = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
						КомпонентыОбмена,
						Строка.Эквайрер,
						ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение"), 
						"ПолучитьСсылку");
						
					Если ТипЗнч(Эквайрер) = Тип("СправочникОбъект.Контрагенты") Тогда
						Эквайрер = Эквайрер.Ссылка;
					КонецЕсли;	
				
					Терминал = НайтиТерминалПоЭквайреруИОрганизации(ПолученныеДанные.Организация,
						Эквайрер);
					СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Терминал);
			    КонецЕсли;
			ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда  
				СтруктураЭТ = ?(ТипЗнч(Строка.ЭквайринговыйТерминал) = Тип("Структура"), Строка.ЭквайринговыйТерминал, Новый Структура("Номер, Ссылка"));
				СтруктураЭТ.Вставить("БанковскийСчетОрганизации", Строка.БанковскийСчетОрганизации);
				СтруктураЭТ.Вставить("Эквайрер", Строка.Эквайрер);
				
				// Готовим инструкцию для конвертации Эквайрингового терминала.
				Инструкция = Новый Структура;
				Инструкция.Вставить("Значение", СтруктураЭТ);
				
				Если ЗначениеЗаполнено(СтруктураЭТ.Номер) Тогда
					Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайрингТерм_Получение_КлючСв");
				ИначеЕсли ЗначениеЗаполнено(СтруктураЭТ.БанковскийСчетОрганизации) И ЗначениеЗаполнено(СтруктураЭТ.Эквайрер) Тогда
					Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайрингТермБезНомера_Получение_КлючСв");
				Иначе
					Инструкция = Неопределено;
				КонецЕсли;
				
				СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			Иначе //Версия 1.4 и выше
				Инструкция = Новый Структура;
				Инструкция.Вставить("Значение", Строка.ЭквайринговыйТерминал);
				Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
				
				СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			КонецЕсли;
			
			МассивСтрокОплатаПК.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", МассивСтрокОплатаПК);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РеализацияПС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Склад = ПолученныеДанные.ДополнительныеСвойства.Склад;
	
	// В случае наличия объекта в базе он и будет записан (а не ПолученныеДанные).
	// Шапка и табличная часть предварительно переносятся из ПолученныеДанные в ДанныеИБ:
	// шапка - в составке свойств из ПКС, табличная часть - полностью берется из полученных данных.
	Если ДанныеИБ <> Неопределено Тогда
	
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		// Табличные части
		ДанныеИБ.ПодарочныеСертификаты.Загрузить(ПолученныеДанные.ПодарочныеСертификаты.Выгрузить());
		Если ДанныеИБ.ОплатаПлатежнымиКартами.Итог("Сумма") <> ПолученныеДанные.ОплатаПлатежнымиКартами.Итог("Сумма")
			Или ПолученныеДанные.ОплатаПлатежнымиКартами.Количество() <> ДанныеИБ.ОплатаПлатежнымиКартами.Количество() Тогда
			ДанныеИБ.ОплатаПлатежнымиКартами.Загрузить(ПолученныеДанные.ОплатаПлатежнымиКартами.Выгрузить());
		КонецЕсли;
	
		ПолученныеДанные   = Неопределено;
		ДанныеДляЗаписиВИБ = ДанныеИБ;
		
	Иначе
		ДанныеДляЗаписиВИБ = ПолученныеДанные;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.КассаККМ) Тогда
		
		СтруктураПоискаКассыККМ = Новый Структура("Организация, Валюта, КассаККМ");
		СтруктураПоискаКассыККМ.Вставить("Склад", Склад);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаКассыККМ, ДанныеДляЗаписиВИБ, "Организация, Валюта, КассаККМ");
	
		ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(СтруктураПоискаКассыККМ, КомпонентыОбмена);
		
		ДанныеДляЗаписиВИБ.КассаККМ = СтруктураПоискаКассыККМ.КассаККМ;
		
	КонецЕсли;
	
	Для Каждого СтрокаОплаты Из ДанныеДляЗаписиВИБ.ОплатаПлатежнымиКартами Цикл
		Если Не ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
			СтрокаОплаты.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ДанныеДляЗаписиВИБ.Организация);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.КассоваяСмена) Тогда
		
		НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами.Добавить();
		НоваяСтрока.ДокументСсылка   = ?(ДанныеИБ = Неопределено, ДанныеДляЗаписиВИБ.ПолучитьСсылкуНового(), ДанныеДляЗаписиВИБ.Ссылка);
		НоваяСтрока.ДатаДокумента    = ДанныеДляЗаписиВИБ.Дата;
		НоваяСтрока.ОчередьДокумента = 2;
		НоваяСтрока.КассаККМ         = ДанныеДляЗаписиВИБ.КассаККМ;
		НоваяСтрока.Организация      = ДанныеДляЗаписиВИБ.Организация;
		НоваяСтрока.Валюта           = ДанныеДляЗаписиВИБ.Валюта;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РеализацияТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                          "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",                  "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации",      "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",               "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",                "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПереходаПраваСобственности", "ДатаПереходаПраваСобственности");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",             "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",               "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЛицо",               "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",              "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Менеджер",                       "Продавец", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Отпустил",                       "ОтпускПроизвел", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                  "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                          "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",          "ВидОперации", , "ВидыОперацийРеализацияТоваров_Получение");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Валюта",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаРаспоряжения",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Договор",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "Согласован",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",              "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	// Руководитель и главный бухгалтер
	Если ДанныеXDTO.Свойство("Руководитель") И ЗначениеЗаполнено(ДанныеXDTO.Руководитель) Тогда
		
		РуководительСтруктура = Новый Структура;
		РуководительСтруктура.Вставить("Владелец", ПолученныеДанные.Организация);
		РуководительСтруктура.Вставить("ФизическоеЛицо", ДанныеXDTO.Руководитель);
		РуководительСтруктура.Вставить("Должность", НСтр("ru = 'Руководитель'"));
		РуководительСтруктура.Вставить("Наименование", НСтр("ru = 'Руководитель'"));
		РуководительСтруктура.Вставить("ОтветственноеЛицо", "Руководитель");
		РуководительСтруктура.Вставить("ДатаНачала", Дата(1980,1,1));
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Руководитель", РуководительСтруктура);
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ГлавныйБухгалтер") И ЗначениеЗаполнено(ДанныеXDTO.ГлавныйБухгалтер) Тогда
		
		ГлавныйБухгалтерСтруктура = Новый Структура;
		ГлавныйБухгалтерСтруктура.Вставить("Владелец", ПолученныеДанные.Организация);
		ГлавныйБухгалтерСтруктура.Вставить("ФизическоеЛицо", ДанныеXDTO.ГлавныйБухгалтер);
		ГлавныйБухгалтерСтруктура.Вставить("Должность", НСтр("ru = 'Главный бухгалтер'"));
		ГлавныйБухгалтерСтруктура.Вставить("Наименование", НСтр("ru = 'Главный бухгалтер'"));
		ГлавныйБухгалтерСтруктура.Вставить("ОтветственноеЛицо", "ГлавныйБухгалтер");
		ГлавныйБухгалтерСтруктура.Вставить("ДатаНачала", Дата(1980,1,1));
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтерСтруктура);
		
	КонецЕсли;
	
	ПолученныеДанные.Проведен    = Истина;
	ПолученныеДанные.ДатаПлатежа = ПолученныеДанные.Дата;
	ПолученныеДанные.Согласован  = Истина;
	
	ПолученныеДанные.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
		И Не ЗначениеЗаполнено(ПолученныеДанные.ДатаПереходаПраваСобственности) Тогда
		ПолученныеДанные.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ВПути;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("Склад",        "Склад");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары 
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;		
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Партнер) Тогда
		ПолученныеДанные.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	
	// Подразделение
	ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные.ДатаРаспоряжения = ПолученныеДанные.Дата;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
	
		ДанныеИБСклад = ДанныеИБ.Склад;
	
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
			// Восстанавливаем склад из первоначального документа.
			ДанныеИБ.Склад = ДанныеИБСклад;
		КонецЕсли;
	
		// Табличные части
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		Для Каждого Строка Из ДанныеИБ.Товары Цикл
			Строка.Склад = ДанныеИБ.Склад;
		КонецЦикла;
	
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.Номенклатура = ЭлементПоУмолчанию(КомпонентыОбмена, "НоменклатураУслуга");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВнутренняяПередача_Получение
Процедура ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВнутренняяПередача";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",                          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                          "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель",           "ОрганизацияПолучатель", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                       "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                   "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",                      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВариантОтправкиЭлектронногоЧека", "", 1);
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",                "", 1, "Справочник_ОтветственныеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Руководитель",                    "", 1, "Справочник_ОтветственныеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств;
	ПолученныеДанные.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПолученныеДанные.СтатьяДвиженияДенежныхСредств = 
		ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ПолученныеДанные.ХозяйственнаяОперация);
	
	СтрокаРасшифровки = ДанныеXDTO.РасшифровкаПлатежа[0];
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаРасшифровки.СтатьяДДС);
	
	// Руководитель и главный бухгалтер
	Если ДанныеXDTO.Свойство("Руководитель") И ЗначениеЗаполнено(ДанныеXDTO.Руководитель) Тогда
		
		РуководительСтруктура = Новый Структура;
		РуководительСтруктура.Вставить("Владелец", ПолученныеДанные.Организация);
		РуководительСтруктура.Вставить("ФизическоеЛицо", ДанныеXDTO.Руководитель);
		РуководительСтруктура.Вставить("Должность", НСтр("ru = 'Руководитель'"));
		РуководительСтруктура.Вставить("Наименование", НСтр("ru = 'Руководитель'"));
		РуководительСтруктура.Вставить("ОтветственноеЛицо", "Руководитель");
		РуководительСтруктура.Вставить("ДатаНачала", Дата(1980,1,1));
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Руководитель", РуководительСтруктура);
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ГлавныйБухгалтер") И ЗначениеЗаполнено(ДанныеXDTO.ГлавныйБухгалтер) Тогда
		
		ГлавныйБухгалтерСтруктура = Новый Структура;
		ГлавныйБухгалтерСтруктура.Вставить("Владелец", ПолученныеДанные.Организация);
		ГлавныйБухгалтерСтруктура.Вставить("ФизическоеЛицо", ДанныеXDTO.ГлавныйБухгалтер);
		ГлавныйБухгалтерСтруктура.Вставить("Должность", НСтр("ru = 'Главный бухгалтер'"));
		ГлавныйБухгалтерСтруктура.Вставить("Наименование", НСтр("ru = 'Главный бухгалтер'"));
		ГлавныйБухгалтерСтруктура.Вставить("ОтветственноеЛицо", "ГлавныйБухгалтер");
		ГлавныйБухгалтерСтруктура.Вставить("ДатаНачала", Дата(1980,1,1));
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтерСтруктура);
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ДанныеXDTO.ДокументВыдачиДС);
КонецПроцедуры

Процедура ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Заполнение кассы-получателя.
	ПараметрыОтбора = Новый Структура(
		"Валюта, Организация, Подразделение",
		ПолученныеДанные.Валюта,
		ПолученныеДанные.ОрганизацияПолучатель,
		Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ПолученныеДанные.КассаПолучатель = КассаПоУмолчанию(ПараметрыОтбора, КомпонентыОбмена);
	
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыдачаВКассуККМ_Получение
Процедура ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВыдачаВКассуККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВыдачаВКассуККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Касса",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ;
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗаполнитьКассуПоВалютеИОрганизации(ПолученныеДанные, КомпонентыОбмена);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ЗаполнитьКассуККМПоВалютеПодразделениюИОрганизации(ПолученныеДанные);
	
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",                          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                       "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",                      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВедомостиНаВыплатуЗарплаты",  "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВедомостиНаВыплатуЗарплаты", "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",                 "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",   "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыплатаЗаработнойПлаты", "");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо", "", 1, "Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа",     "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	МассивСтрокВыплаты         = Новый Массив;
	МассивСтрокРасшифровки     = Новый Массив;
	ПерваяЗаполненнаяСтатьяДДС = Неопределено;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(Строка.Сотрудник) Тогда
			СтруктураДанныхСтроки = Новый Структура("ФизическоеЛицо,Сумма");
			СтруктураДанныхСтроки.ФизическоеЛицо = Строка.Сотрудник;
			СтруктураДанныхСтроки.Сумма = Строка.Сумма;
			
			МассивСтрокВыплаты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
		
		СтруктураРасшифровки = Новый Структура("Сумма,СтатьяДвиженияДенежныхСредств,СуммаВзаиморасчетов");
		СтруктураРасшифровки.СтатьяДвиженияДенежныхСредств = Строка.СтатьяДДС;
		СтруктураРасшифровки.Сумма = Строка.Сумма;
		СтруктураРасшифровки.СуммаВзаиморасчетов = Строка.Сумма;
		МассивСтрокРасшифровки.Добавить(СтруктураРасшифровки);
		
		Если ПерваяЗаполненнаяСтатьяДДС = Неопределено И ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
			ПерваяЗаполненнаяСтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.СтатьяДДС,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
				"ПолучитьСсылку");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.НомерВедомостиНаВыплатуЗарплаты) И Не ЗначениеЗаполнено(ПолученныеДанные.НомерВедомостиНаВыплатуЗарплаты) Тогда
			ПолученныеДанные.НомерВедомостиНаВыплатуЗарплаты = Строка.НомерВедомостиНаВыплатуЗарплаты;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДатаВедомостиНаВыплатуЗарплаты) И Не ЗначениеЗаполнено(ПолученныеДанные.ДатаВедомостиНаВыплатуЗарплаты) Тогда
		    ПолученныеДанные.ДатаВедомостиНаВыплатуЗарплаты = Строка.ДатаВедомостиНаВыплатуЗарплаты;
		КонецЕсли;
			
	КонецЦикла;
	
	Если МассивСтрокВыплаты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыплатаЗаработнойПлаты", МассивСтрокВыплаты);
	КонецЕсли;
	
	Если МассивСтрокРасшифровки.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровки);
	КонецЕсли;
	
	#Область Шапка
	
	ПолученныеДанные.Проведен = Истина;
	
	// ХозяйственнаяОперация
	Если МассивСтрокВыплаты.Количество() = 1 Тогда
	
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику;
		ПолученныеДанные.ПодотчетноеЛицо = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					МассивСтрокВыплаты[0].ФизическоеЛицо,
					ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ФизическиеЛица_Получение"),
					"ПолучитьСсылку");
		
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу;
	КонецЕсли;
	
	// СтатьяДДС
	Если ЗначениеЗаполнено(ПерваяЗаполненнаяСтатьяДДС) Тогда
		ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ПерваяЗаполненнаяСтатьяДДС;
	КонецЕсли;	
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.ВыплатаЗаработнойПлаты.Загрузить(ПолученныеДанные.ВыплатаЗаработнойПлаты.Выгрузить());
	КонецЕсли;
	
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаКонвертации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "КурсКонвертации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаПослеКонвертации",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПерваяЗаполненнаяСтатьяДДС = Неопределено;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		Если ПерваяЗаполненнаяСтатьяДДС = Неопределено И ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
			ПерваяЗаполненнаяСтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.СтатьяДДС,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
				"ПолучитьСсылку");
		КонецЕсли;	
	КонецЦикла;
	
	#Область Шапка
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	// СтатьяДДС
	ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ПерваяЗаполненнаяСтатьяДДС;
	
	#КонецОбласти
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область РасшифровкаПлатежа
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		//ВалютаКонвертации
		ВалютаКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].ВалютаКонвертации;
		Если ЗначениеЗаполнено(ВалютаКонвертации) Тогда
			Если ТипЗнч(ВалютаКонвертации) = Тип("Структура")
				И Не ВалютаКонвертации.Свойство("Ссылка") Тогда
				ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
			Иначе
				ИмяПКО = "Справочник_Валюты";
			КонецЕсли;
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", Новый Структура("Значение, ИмяПКО", ВалютаКонвертации, ИмяПКО));
		КонецЕсли;
		ПолученныеДанные.КурсКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].КурсКонвертации;
		ПолученныеДанные.СуммаПослеКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].СуммаВал;
		Т_РП = Новый Соответствие;
		Т_РП.Вставить("Сумма", "Сумма");
		Т_РП.Вставить("СуммаВзаиморасчетов", "Сумма");
	
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_РП, СтрокаXDTO, СтруктураДанныхСтроки);
			
			СтруктураДанныхСтроки.Вставить("ВалютаВзаиморасчетов", ПолученныеДанные.ДополнительныеСвойства.Валюта);
			
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Заполнение кассы-получателя.
	ПараметрыОтбора = Новый Структура(
		"Валюта,Организация, Подразделение",
		ПолученныеДанные.ВалютаКонвертации,
		ПолученныеДанные.Организация,
		Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ПолученныеДанные.КассаПолучатель = КассаПоУмолчанию(ПараметрыОтбора, КомпонентыОбмена);
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.ВыплатаЗаработнойПлаты.Загрузить(ПолученныеДанные.ВыплатаЗаработнойПлаты.Выгрузить());
	КонецЕсли;
	
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "ВидОперации", , "ВидыОперацийРКОНаБанковскийСчет");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	#Область Шапка
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	#КонецОбласти
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Комментарий",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПерваяЗаполненнаяСтатьяДДС = Неопределено;
	СчетУчетаРасчетов = "";
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		Если ПерваяЗаполненнаяСтатьяДДС = Неопределено И ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
			ПерваяЗаполненнаяСтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.СтатьяДДС,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
				"ПолучитьСсылку");
		КонецЕсли;
		Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СчетУчетаРасчетов") <> Неопределено
			И ЗначениеЗаполнено(Строка.СчетУчетаРасчетов) Тогда
			СчетУчетаРасчетов = Строка.СчетУчетаРасчетов;
		КонецЕсли;
	КонецЦикла;
	
	#Область Шапка
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
	Если Найти(СчетУчетаРасчетов, "57.01") Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк;
	ИначеЕсли Найти(СчетУчетаРасчетов, "50.02") Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	// СтатьяДДС
	ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ПерваяЗаполненнаяСтатьяДДС;
	
	#КонецОбласти
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область РасшифровкаПлатежа
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
	
		Т_РП = Новый Соответствие;
		Т_РП.Вставить("Сумма", "Сумма");
		Т_РП.Вставить("СуммаВзаиморасчетов", "Сумма");
		Т_РП.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_РП, СтрокаXDTO, СтруктураДанныхСтроки);
			
			СтруктураДанныхСтроки.Вставить("ВалютаВзаиморасчетов", ПолученныеДанные.ДополнительныеСвойства.Валюта);
			
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",                "", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	#Область Шапка
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	#КонецОбласти
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область РасшифровкаПлатежа
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
	
		Т_РП = Новый Соответствие;
		Т_РП.Вставить("Сумма", "Сумма");
		Т_РП.Вставить("СуммаВзаиморасчетов", "Сумма");
		Т_РП.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
		Т_РП.Вставить("СтатьяРасходов", "СтатьяРасходов");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_РП, СтрокаXDTO, СтруктураДанныхСтроки);
			
			СтруктураДанныхСтроки.Вставить("ВалютаВзаиморасчетов", ПолученныеДанные.ДополнительныеСвойства.Валюта);
			
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для Каждого СтрокаРП Из ПолученныеДанные.РасшифровкаПлатежа Цикл
		СтрокаРП.ПериодВозникновенияРасхода = ПолученныеДанные.Дата;
	КонецЦикла;
	
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Заказ",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	#Область Шапка
	
	ПолученныеДанные.Проведен = Истина;
	
	ВидРасчетов = "СПоставщиком";
	Если ДанныеXDTO.Свойство("ВидРасчетов") Тогда
		ВидРасчетов = ДанныеXDTO.ВидРасчетов.Значение;
	КонецЕсли;
	
	Если ВидРасчетов = "СПоставщиком" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	ИначеЕсли ВидРасчетов = "СПокупателем" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
	КонецЕсли;
	
	// СтатьяДвиженияДенежныхСредств
	Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		// СтатьяДвиженияДенежныхСредств
		Инструкция = Новый Структура("Значение", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Инструкция);
	КонецЕсли;
		
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	#КонецОбласти
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область РасшифровкаПлатежа
	ЗаполнятьДоговор = (ВидРасчетов = "СПокупателем" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами)
					ИЛИ (ВидРасчетов = "СПоставщиком" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
	
		Т_РП = Новый Соответствие;
		Т_РП.Вставить("Сумма", "Сумма");
		Т_РП.Вставить("СуммаВзаиморасчетов", "Сумма");
		Т_РП.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
		Т_РП.Вставить("СтавкаНДС", "СтавкаНДС");
		Т_РП.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_РП, СтрокаXDTO, СтруктураДанныхСтроки);
			ДобавитьВалютуВРасшифровкуПлатежа(СтруктураДанныхСтроки, СтрокаXDTO);
			ДобавитьДоговорВРасшифровкуПлатежа(ЗаполнятьДоговор, СтруктураДанныхСтроки, СтрокаXDTO);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Кассир",                        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",               "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПерваяЗаполненнаяСтатьяДДС = Неопределено;
	Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		Если ПерваяЗаполненнаяСтатьяДДС = Неопределено И ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
			ПерваяЗаполненнаяСтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.СтатьяДДС,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
				"ПолучитьСсылку");
		КонецЕсли;	
	КонецЦикла;
	
	#Область Шапка
	
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	// ХозяйственнаяОперация
	
	ВидРасчетов = СокрЛП(ДанныеXDTO.ВидРасчетов.Значение);
	Если ВидРасчетов = "Займы" Тогда
		// Прочая выдача
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
		// Плательщик заполняется значением контрагента - его надо будет найти по ссылке.
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтрагентСсылка", ДанныеXDTO.Сотрудник.Ссылка.Значение);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтрагентНаименование", ДанныеXDTO.Сотрудник.ФИО);
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику;
	КонецЕсли;
	// СтатьяДДС
	ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ПерваяЗаполненнаяСтатьяДДС;
	
	#КонецОбласти
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область РасшифровкаПлатежа
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
	
		Т_РП = Новый Соответствие;
		Т_РП.Вставить("Сумма", "Сумма");
		Т_РП.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_РП, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// В случае прочей выдачи заполняется контрагент.
	Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		КонтрагентСсылка = КонтрагентИзДопСвойствПолученныхДанных(ПолученныеДанные);  
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			ПолученныеДанные.Контрагент = КонтрагентСсылка;
		КонецЕсли;
	КонецЕсли;
	
	ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ЗаполнитьСрокВозвратаДСПриВыдачеПодотчетнику(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель",      "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "Очередность");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаКонвертации",             "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "КурсКонвертации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаПослеКонвертации",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
	ПолученныеДанные.ПроведеноБанком = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	// СтатьяДвиженияДенежныхСредств
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	
	// ВалютаКонвертации
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", ДанныеXDTO.РасшифровкаПлатежа[0].ВалютаКонвертации);
	
	ПолученныеДанные.СуммаПослеКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].СуммаВал;
	ПолученныеДанные.КурсКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].КурсКонвертации;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_ПБДС_Получение
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПереводНаДругойСчет_ПБДС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОтправитель", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ПРоведен = Истина;
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.Номер = Лев(Номер, 5) + "С" + Сред(Номер, 7);
	ЗаполнитьДатуИНомерВходящегоДокумента(ПолученныеДанные);
	
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",               "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",     "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",        "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",       "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",   "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ПРоведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	Если ПолученныеДанные.ОчередностьПлатежа = 0 Тогда
		ПолученныеДанные.ОчередностьПлатежа = 1;
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗП_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗП_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗП_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗП_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗП_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                  "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",       "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                      "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",          "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",            "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",               "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",         "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",              "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",          "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВедомостиНаВыплатуЗарплаты",  "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВедомостиНаВыплатуЗарплаты", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Ведомость",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗП_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИспользуетсяНачислениеЗарплаты = Ложь;
	#Область Шапка
	Если ДанныеXDTO.Свойство("ДатаВыписки") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВыписки", ДанныеXDTO.ДатаВыписки);
	КонецЕсли;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
	
	// СтатьяДвиженияДенежныхСредств
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Если Не ИспользуетсяНачислениеЗарплаты Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты",
			ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты",
			ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	#КонецОбласти
	
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗП_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПНаЛС_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗПНаЛС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                  "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                      "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",          "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",            "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",            "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",               "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",         "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",              "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",                 "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",          "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",       "", 1, "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВедомостиНаВыплатуЗарплаты",  "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВедомостиНаВыплатуЗарплаты", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",   "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИспользуетсяНачислениеЗарплаты = Ложь;
	#Область Шапка
	
	ПолученныеДанные.Проведен = Истина;
	Если ДанныеXDTO.Свойство("ДатаВыписки") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВыписки", ДанныеXDTO.ДатаВыписки);
	КонецЕсли;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета;
	
	// СтатьяДвиженияДенежныхСредств
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Если Не ИспользуетсяНачислениеЗарплаты Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты",
			ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты",
			ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	КонецЕсли;
	
	#Область БанковскийСчетКонтрагента
	
	// Банковский счет контрагента, содержащийся в объекте формата, загружается в справочник
	// "Банковские счета контрагентов" и привязывается к контрагенту. Для этого документа нужен банковский
	// счет, привязанный к физическому лицу. Создаем и заполняем эти счета после загрузки всех данных.
	// Для этого запоминаем номер счета, чтобы после загрузки всех данных заполнить счет физического лица.
	Если ДанныеXDTO.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента_Номер",
			ДанныеXDTO.БанковскийСчет.НомерСчета);
	КонецЕсли;		
	
	#КонецОбласти
	
	#КонецОбласти
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		
		#Область БанковскийСчетКонтрагента
		
		// Проверяем, что номер счета указан верно, если совпадает, то оставляем текущее значение.
		Если Не ЗначениеЗаполнено(ДанныеИБ.БанковскийСчетКонтрагента)
			И ПолученныеДанные.ДополнительныеСвойства.Свойство("БанковскийСчетКонтрагента_Номер") Тогда
			
			НомерСчетаИсточник = ПолученныеДанные.ДополнительныеСвойства.БанковскийСчетКонтрагента_Номер;
			НомерСчетаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДанныеИБ.БанковскийСчетКонтрагента, "НомерСчета");
			
			Если НомерСчетаИсточник <> НомерСчетаПриемник Тогда
				
				ДанныеИБ.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
				ДанныеИБ.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента_Номер", НомерСчетаИсточник);
				
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
	
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",     "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",          "Код");
	ДобавитьПКС(СвойстваШапки, "КодБК",                         "ПоказательКБК");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",                      "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПоказательДаты",                "ПоказательДаты");
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",              "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования",           "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",             "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",             "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ПеречислениеВБюджет",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СчетУчета",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	
	ПолученныеДанные.ПеречислениеВБюджет = ?(ЗначениеЗаполнено(ПолученныеДанные.КодБК), Истина, Ложь);
	
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	Если Найти(ПолученныеДанные.Комментарий, НСтр("ru = '#Таможенный платеж'") + " ") Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	// СтатьяДДС, СчетУчета
	Если  ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		МассивСтрокРасшифровка = Новый Массив;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		
		Если  ДанныеXDTO.РасшифровкаПлатежа.Количество() = 1 Тогда
			Инструкция = Новый Структура("Значение", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Инструкция);
			
			СчетУчета = ДанныеXDTO.РасшифровкаПлатежа[0].СчетУчетаРасчетов;
			Если ЗначениеЗаполнено(СчетУчета) Тогда
				СчетУчетаПоКоду = СчетУчета;
				ПолученныеДанные.СчетУчета = СчетУчетаПоКоду;
			КонецЕсли;
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Неопределено);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СчетУчета", Неопределено);
		КонецЕсли;
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Заполняем упраздненный реквизит значением по умолчанию.
	// Заполнять нужно только в новых загруженных документах.
	ПолученныеДанные.ПоказательТипа = "0";
	
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",     "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",          "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "ВидОперации", , "ВидыОперацийСБДСПрочее_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	// Уточнение вида операции
	
	СчетУчетаРасчетов = Неопределено;
	Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СчетУчетаРасчетов") <> Неопределено Тогда
		СчетУчетаРасчетов = ДанныеXDTO.РасшифровкаПлатежа[0].СчетУчетаРасчетов;
	КонецЕсли;
	Если ЗначениеЗаполнено(СчетУчетаРасчетов) Тогда
		Если Найти(СчетУчетаРасчетов, "57.01") > 0 Тогда
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	// СтатьяДДС
	Если  ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		МассивСтрокРасшифровка = Новый Массив;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		Если  ДанныеXDTO.РасшифровкаПлатежа.Количество() = 1 Тогда
			Инструкция = Новый Структура("Значение", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Инструкция);
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Неопределено);
		КонецЕсли;
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",        "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",                "", 1, "Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	// Прочие расходы отражаются под видом операции ПрочаяВыдача.
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	// СтатьяДДС
	Если  ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтатьяРасходов", "СтатьяРасходов");
	
		МассивСтрокРасшифровка = Новый Массив;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		Если  ДанныеXDTO.РасшифровкаПлатежа.Количество() = 1 Тогда
			Инструкция = Новый Структура("Значение", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Инструкция);
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Неопределено);
		КонецЕсли;
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",     "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",          "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",        "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "Валюта",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВалютаВзаиморасчетов",          "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "Заказ",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ВидРасчетов = "СПоставщиком";
	Если ДанныеXDTO.Свойство("ВидРасчетов") Тогда
		ВидРасчетов = ДанныеXDTO.ВидРасчетов.Значение;
	КонецЕсли;
	
	Если ВидРасчетов = "СПоставщиком" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	ИначеЕсли ВидРасчетов = "СПокупателем" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
	КонецЕсли;
	// Другие значения; ОплатаПоКредитам, ВыплатаПоДепозитам, ВыплатаПоЗаймамВыданным - по ТЧ РасшифровкаПлатежа.
	Если ДанныеXDTO.РасшифровкаПлатежа.Количество() = 1 Тогда
		ВидРасчетовРасширенный = ДанныеXDTO.РасшифровкаПлатежа[0].ВидРасчетовРасширенный;
		Если Найти(НРЕГ(ВидРасчетовРасширенный), "займ") > 0 Тогда
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов;
		КонецЕсли;
		Если Найти(НРЕГ(ВидРасчетовРасширенный), "кредит") > 0 Тогда
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам;
		КонецЕсли;
	КонецЕсли;
	
	// СтатьяДвиженияДенежныхСредств
	Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ДанныеXDTO.РасшифровкаПлатежа.Количество() = 1 Тогда
		// СтатьяДвиженияДенежныхСредств
		Инструкция = Новый Структура("Значение", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Инструкция);
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Неопределено);
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Расшифровка платежа
	ЗаполнятьДоговор = (ВидРасчетов = "СПокупателем" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами)
					ИЛИ (ВидРасчетов = "СПоставщиком" И КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками);
	
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
	ПравилаЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	
	Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		СтруктураДанныхСтроки = Новый Структура;
		ЗаполнитьСтруктуруДанныхСтроки(ПравилаЗаполнения, СтрокаXDTO, СтруктураДанныхСтроки);
		ДобавитьВалютуВРасшифровкуПлатежа(СтруктураДанныхСтроки, СтрокаXDTO);
		ДобавитьДоговорВРасшифровкуПлатежа(ЗаполнятьДоговор, СтруктураДанныхСтроки, СтрокаXDTO);
		МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПроведенияБанком",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",      "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",        "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",           "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипПлатежногоДокумента",    "ТипПлатежногоДокумента", , "Перечисление_ТипыПлатежныхДокументов");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "", 1, "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроведеноБанком",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ПроведеноБанком = ЗначениеЗаполнено(ПолученныеДанные.ДатаПроведенияБанком);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	Если ДанныеXDTO.ВидРасчетов.Значение = "Подотчет" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику;
	Иначе
		// Займ 
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента", Неопределено);
	Если ДанныеXDTO.Свойство("БанковскийСчет") Тогда
		Если ДанныеXDTO.ВидРасчетов.Значение = "Подотчет" Тогда
			// В формате передан банковский счет контрагента,
			// а в документе должен быть банковский счет от сотрудника.
			// Банковский счет будет заполнен после загрузки всех данных.
			ПолученныеДанные.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента_Номер", ДанныеXDTO.БанковскийСчет.НомерСчета);
		Иначе
			// И в формате, и в документе указывается банковский счет контрагента.
			ПолученныеДанные.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента", ДанныеXDTO.БанковскийСчет);
		КонецЕсли;
	КонецЕсли;
	
		
	// СтатьяДДС
	Если  ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Сумма", "Сумма");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		Если  ДанныеXDTO.РасшифровкаПлатежа.Количество() = 1 Тогда
			Инструкция = Новый Структура("Значение", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Инструкция);
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Неопределено);
		КонецЕсли;
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		
		Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
			И ПолученныеДанные.ДополнительныеСвойства.Свойство("БанковскийСчетКонтрагента_Номер") Тогда
			НомерСчетаИсточник = ПолученныеДанные.ДополнительныеСвойства.БанковскийСчетКонтрагента_Номер;
			ДанныеИБ.ДополнительныеСвойства.Вставить("БанковскийСчетКонтрагента_Номер", НомерСчетаИсточник);
	 
			Если ЗначениеЗаполнено(ДанныеИБ.БанковскийСчетКонтрагента) Тогда
				
				НомерСчетаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДанныеИБ.БанковскийСчетКонтрагента, "НомерСчета");
				ВладелецСчетаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДанныеИБ.БанковскийСчетКонтрагента, "Владелец");
				Если НомерСчетаИсточник <> НомерСчетаПриемник ИЛИ ВладелецСчетаПриемник <> ПолученныеДанные.ПодотчетноеЛицо Тогда
					
					ДанныеИБ.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ЗаполнитьСрокВозвратаДСПриВыдачеПодотчетнику(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Получение
Процедура ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СборкаТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СборкаТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СборкаТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Количество",            "Количество");
	ДобавитьПКС(СвойстваШапки, "КоличествоУпаковок",    "КоличествоУпаковок");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",          "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                 "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Упаковка",              "Упаковка", , "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "Характеристика",        "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "Статус",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДоляСтоимости",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
	
	#Область Товары
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Упаковка",            "Упаковка");
		ПравилаЗаполнения.Вставить("Характеристика",      "Характеристика");
		ПравилаЗаполнения.Вставить("Количество",          "Количество");
		ПравилаЗаполнения.Вставить("ДоляСтоимости",       "ДоляСтоимости");
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок",  "КоличествоУпаковок");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостачТоваров_Получение
Процедура ДобавитьПКО_Документ_СписаниеНедостачТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеНедостачТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеНедостачТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеНедостачТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеНедостачТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область Товары
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Характеристика",      "Характеристика");
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",          "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_СписаниеНедостачТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Или Не ЗначениеЗаполнено(ДанныеИБ.СтатьяРасходов) Или Не ЗначениеЗаполнено(ПолученныеДанные.СтатьяРасходов) Тогда
		
		СтатьяРасходов = Неопределено;
		Если ДанныеИБ <> Неопределено Тогда
			СтатьяРасходов = ДанныеИБ.СтатьяРасходов;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда
			СтатьяРасходов = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяРасходовСписаниеТоваров");
		КонецЕсли;
			
		ПолученныеДанные.СтатьяРасходов = СтатьяРасходов;
		Если ДанныеИБ <> Неопределено Тогда
			ДанныеИБ.СтатьяРасходов = СтатьяРасходов;
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Получение
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                              "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                             "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                       "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                     "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                             "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ИсточникИнформацииОЦенахДляПечати", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область Товары
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Характеристика",      "Характеристика");
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",          "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Или Не ЗначениеЗаполнено(ДанныеИБ.СтатьяРасходов) Или Не ЗначениеЗаполнено(ПолученныеДанные.СтатьяРасходов) Тогда
		
		СтатьяРасходов = Неопределено;
		Если ДанныеИБ <> Неопределено Тогда
			СтатьяРасходов = ДанныеИБ.СтатьяРасходов;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда
			СтатьяРасходов = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяРасходовСписаниеТоваров");
		КонецЕсли;
			
		ПолученныеДанные.СтатьяРасходов = СтатьяРасходов;
		Если ДанныеИБ <> Неопределено Тогда
			ДанныеИБ.СтатьяРасходов = СтатьяРасходов;
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплату_Получение
Процедура ДобавитьПКО_Документ_СчетНаОплату_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетНаОплату_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетНаОплатуКлиенту;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетПокупателю";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетНаОплату_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетНаОплату_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Менеджер",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",         "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Договор",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Партнер",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплату_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен    = Истина;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплату_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.Партнер) Тогда
		ДанныеДляЗаписиВИБ.Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(ДанныеДляЗаписиВИБ.Контрагент);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Получение
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураПолученный_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаСоставления", "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВходящегоДокумента");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Получение
Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ТаможеннаяДекларацияИмпорт;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ТаможеннаяДекларацияУП";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Менеджер",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерДекларации",      "НомерДекларации");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",        "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйСбор",       "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйШтраф",      "ТаможенныйШтраф");
	ДобавитьПКС(СвойстваШапки, "Валюта",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВариантОформления",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Договор",              "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Разделы", "");
	ДобавитьПКС(СвойстваТЧ, "НомерДляСФ",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерРаздела",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаПошлины",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПошлины",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТаможеннаяСтоимость", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",  "");
	ДобавитьПКС(СвойстваТЧ, "ДокументПоступления", "", 1, "Документ_ПоступлениеТоваровУслуг_Получение");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерРаздела",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПошлины",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТаможеннаяСтоимость", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВариантОформления = Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно;
	ПолученныеДанные.Статус = Перечисления.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO,,"ВалютаВзаиморасчетов");
	
	Если ДанныеXDTO.Свойство("ДоговорРегл") И ЗначениеЗаполнено(ДанныеXDTO.ДоговорРегл) Тогда
		ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ДоговорРегл");
	Иначе
		ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Товары 
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("НомерРаздела", "НомерРаздела");
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ТаможеннаяСтоимость");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
	ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	ПравилаЗаполнения.Вставить("ДокументПоступления", "ДокументПоступления");
	
	МассивСтрокТовары = Новый Массив;
	СуммаДокумента = 0;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			
			Если ЗначениеЗаполнено(ДанныеXDTO.НомерДекларации) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код, СтранаПроисхождения", ДанныеXDTO.НомерДекларации, Строка.СтранаПроисхождения));
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Если Не СтруктураДанныхСтроки.Свойство("СуммаПошлины") Тогда
				СтруктураДанныхСтроки.Вставить("СуммаПошлины", 0);
			КонецЕсли;
			Если Не СтруктураДанныхСтроки.Свойство("СуммаНДС") Тогда
				СтруктураДанныхСтроки.Вставить("СуммаНДС", 0);
			КонецЕсли;
	
			СуммаДокумента = СуммаДокумента + СтруктураДанныхСтроки.СуммаПошлины + СтруктураДанныхСтроки.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	// Разделы 
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("НомерРаздела", "НомерРаздела");
	ПравилаЗаполнения.Вставить("СтавкаПошлины", "СтавкаПошлины");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ТаможеннаяСтоимость");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
	МассивСтрокРазделы = Новый Массив;
	Если ДанныеXDTO.Свойство("Разделы")
		И ЗначениеЗаполнено(ДанныеXDTO.Разделы) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Разделы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("НомерДляСФ", ДанныеXDTO.НомерДекларации);
	
			// Страна происхождения - из раздела Товары
			Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
				Если СтрокаТовары.НомерРаздела = Строка.НомерРаздела Тогда
					СтруктураДанныхСтроки.Вставить("СтранаПроисхождения", СтрокаТовары.СтранаПроисхождения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			МассивСтрокРазделы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокРазделы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Разделы", МассивСтрокРазделы);
	КонецЕсли;
	
	ПолученныеДанные.СуммаДокумента = СуммаДокумента + ПолученныеДанные.ТаможенныйСбор + ПолученныеДанные.ТаможенныйШтраф;
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		ТекПартнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Партнер = ТекПартнер;
	Иначе
		ДанныеИБ.Партнер = ТекПартнер;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВидыЦен", "");
	ДобавитьПКС(СвойстваТЧ, "ВидЦены", "", 1, "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",  "");
	ДобавитьПКС(СвойстваТЧ, "ВидЦены",             "", 1, "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаИзмененаВручную", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("ВидЦены", ДанныеXDTO.ТипЦен);
			СтруктураДанныхСтроки.Вставить("ЦенаИзмененаВручную", Истина);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	МассивВидыЦен = Новый Массив;
	МассивВидыЦен.Добавить(Новый Структура("ВидЦены", ДанныеXDTO.ТипЦен));
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидыЦен", МассивВидыЦен);
КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ЗаявкаНаРасходованиеДенежныхСредствПФ_Получение
Процедура ДобавитьПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ЗаявкаНаРасходованиеДенежныхСредствПФ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Файлы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Имя");
	ДобавитьПКС(СвойстваШапки, "Описание",      "Описание");
	ДобавитьПКС(СвойстваШапки, "Расширение",    "Расширение");
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла", "", 1);

КонецПроцедуры

Процедура ПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ВладелецФайла = Неопределено;
	Если ДанныеXDTO.Свойство("ВладелецФайла", ВладелецФайла) Тогда
		ИнструкцияВладелецФайла = ЗначениеВИнструкциюПКО(КомпонентыОбмена, ВладелецФайла);
		Если Не ИнструкцияВладелецФайла = Неопределено Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВладелецФайла", ИнструкцияВладелецФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчетаКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Владелец
	// Выбираем ПКО в зависимости от типа владельца.
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		Если Найти(Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		КонецЕсли;	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
		
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчетаОрганизаций_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                   "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",        "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Владелец",               "Владелец", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ВыводитьСуммуБезКопеек", "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",             "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",    "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",        "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",  "", 1);
	ДобавитьПКС(СвойстваШапки, "ВариантВыводаМесяца",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерСчета");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                  "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",   "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "СпособУстановкиКурса", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыАлкогольнойПродукции_Получение
Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыАлкогольнойПродукции_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЛицензии",  "", 1);
	ДобавитьПКС(СвойстваШапки, "Код",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидЛицензии,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		ПолученныеДанные.Код = ДанныеXDTO.КлючевыеСвойства.Код;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Наименование") Тогда
		ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.Наименование;
	Иначе
		ПолученныеДанные.Наименование = НСтр("ru='Вид алкогольной продукции по умолчанию'")
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидЛицензии") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидЛицензии",
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВидЛицензии, "Перечисление_ВидыЛицензийАлкогольнойПродукции"));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыПодарочныхСертификатов_Получение
Процедура ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыПодарочныхСертификатов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыПодарочныхСертификатов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВидыПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВидыПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                     "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номинал",                    "Номинал");
	ДобавитьПКС(СвойстваШапки, "ЧастичнаяОплата",            "РазрешитьЧастичнуюОплату");
	ДобавитьПКС(СвойстваШапки, "КоличествоПериодовДействия", "", 1);
	ДобавитьПКС(СвойстваШапки, "ПериодДействия",             "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипКарты",                   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШаблоныКодовПодарочныхСертификатов", "");
	ДобавитьПКС(СвойстваТЧ, "ДлинаМагнитногоКода",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДлинаШтрихкода",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КонецДиапазонаМагнитногоКода",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "КонецДиапазонаШтрихкода",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "НачалоДиапазонаМагнитногоКода", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НачалоДиапазонаШтрихкода",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ШаблонМагнитнойКарты",          "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Валюта,Номинал");
КонецПроцедуры

Процедура ПКО_Справочник_ВидыПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПериодаДействия") и ДанныеXDTO.Свойство("КоличествоПериодовДействия") Тогда
		Если ДанныеXDTO.ТипПериодаДействия = "День" Тогда
			Если ДанныеXDTO.КоличествоПериодовДействия % 10 = 0 Тогда
			    ПолученныеДанные.ПериодДействия = Перечисления.Периодичность.Декада;
			    ПолученныеДанные.КоличествоПериодовДействия = ДанныеXDTO.КоличествоПериодовДействия / 10;
			ИначеЕсли ДанныеXDTO.КоличествоПериодовДействия % 7 = 0 Тогда
			    ПолученныеДанные.ПериодДействия = Перечисления.Периодичность.Неделя;
			    ПолученныеДанные.КоличествоПериодовДействия = ДанныеXDTO.КоличествоПериодовДействия / 7;
			Иначе
			    ПолученныеДанные.ПериодДействия = Перечисления.Периодичность.День;
			    ПолученныеДанные.КоличествоПериодовДействия = ДанныеXDTO.КоличествоПериодовДействия;
			КонецЕсли;
		Иначе // ТипПериодаДействия = "Месяц"
			Если ДанныеXDTO.КоличествоПериодовДействия % 12 = 0 Тогда
			    ПолученныеДанные.ПериодДействия = Перечисления.Периодичность.Год;
			    ПолученныеДанные.КоличествоПериодовДействия = ДанныеXDTO.КоличествоПериодовДействия / 12;
			ИначеЕсли ДанныеXDTO.КоличествоПериодовДействия % 6 = 0 Тогда
			    ПолученныеДанные.ПериодДействия = Перечисления.Периодичность.Полугодие;
			    ПолученныеДанные.КоличествоПериодовДействия = ДанныеXDTO.КоличествоПериодовДействия / 6;
			ИначеЕсли ДанныеXDTO.КоличествоПериодовДействия % 3 = 0 Тогда
			    ПолученныеДанные.ПериодДействия = Перечисления.Периодичность.Квартал;
			    ПолученныеДанные.КоличествоПериодовДействия = ДанныеXDTO.КоличествоПериодовДействия / 3;
			Иначе
			    ПолученныеДанные.ПериодДействия = Перечисления.Периодичность.Месяц;
			    ПолученныеДанные.КоличествоПериодовДействия = ДанныеXDTO.КоличествоПериодовДействия;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ШаблоныКодов") И ДанныеXDTO.ШаблоныКодов.Количество() > 0 Тогда
		ШаблоныКодов = Новый Массив;
		ЕстьДанныеШтрихкода = Ложь;
		ЕстьДанныеМагнитные = Ложь;
		Для Каждого Строка Из ДанныеXDTO.ШаблоныКодов Цикл
			СтруктураКодов = Новый Структура("ШаблонМагнитнойКарты, НачалоДиапазонаШтрихкода, НачалоДиапазонаМагнитногоКода, КонецДиапазонаШтрихкода, КонецДиапазонаМагнитногоКода, ДлинаШтрихкода, ДлинаМагнитногоКода");
			Если ЗначениеЗаполнено(Строка.ШаблонМагнитнойКарты) Тогда
				СтруктураКодов.ШаблонМагнитнойКарты = ШаблонМагнитнойКарты(ЗначениеИзСтрокиВнутр(Строка.ШаблонМагнитнойКарты), КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу);
			КонецЕсли;
			Если Строка.НачалоДиапазонаШтрихКода = 0 Тогда
				СтруктураКодов.НачалоДиапазонаШтрихКода = "0";
			Иначе
				СтруктураКодов.НачалоДиапазонаШтрихКода = СтрЗаменить(Строка.НачалоДиапазонаШтрихКода, " ", "");
			КонецЕсли;
			Если Строка.НачалоДиапазонаМагнитногоКода = 0 Тогда
				СтруктураКодов.НачалоДиапазонаМагнитногоКода = "0";
			Иначе
				СтруктураКодов.НачалоДиапазонаМагнитногоКода = СтрЗаменить(Строка.НачалоДиапазонаМагнитногоКода, " ", "");
			КонецЕсли;
			СтруктураКодов.КонецДиапазонаМагнитногоКода = СтрЗаменить(Строка.КонецДиапазонаМагнитногоКода, " ", "");
			СтруктураКодов.КонецДиапазонаШтрихКода      = СтрЗаменить(Строка.КонецДиапазонаШтрихКода, " ", "");
			СтруктураКодов.ДлинаШтрихкода               = Строка.ДлинаШтрихкода;
			СтруктураКодов.ДлинаМагнитногоКода          = Строка.ДлинаМагнитногоКода;
			
			ЕстьДанныеШтрихкода = ЕстьДанныеШтрихкода ИЛИ ЗначениеЗаполнено(СтруктураКодов.ДлинаШтрихкода);
			ЕстьДанныеМагнитные = ЕстьДанныеМагнитные ИЛИ ЗначениеЗаполнено(СтруктураКодов.ДлинаМагнитногоКода);
			
			ШаблоныКодов.Добавить(СтруктураКодов);
		КонецЦикла;
		Если ЕстьДанныеШтрихкода И ЕстьДанныеМагнитные Тогда
			ПолученныеДанные.ТипКарты = Перечисления.ТипыКарт.Смешанная;
		ИначеЕсли ЕстьДанныеМагнитные Тогда
			ПолученныеДанные.ТипКарты = Перечисления.ТипыКарт.Магнитная;
		Иначе
			ПолученныеДанные.ТипКарты = Перечисления.ТипыКарт.Штриховая;
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ШаблоныКодовПодарочныхСертификатов", ШаблоныКодов);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ВидыПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
									ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	// В случае наличия объекта в базе он и будет записан (а не ПолученныеДанные).
	// Шапка и табличная часть предварительно переносятся из ПолученныеДанные в ДанныеИБ:
	// шапка - в составе свойств из ПКС, табличная часть - полностью берется из полученных данных.
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		// Табличные части
		ДанныеИБ.ШаблоныКодовПодарочныхСертификатов.Загрузить(ПолученныеДанные.ШаблоныКодовПодарочныхСертификатов.Выгрузить());
	
		ПолученныеДанные = Неопределено;
		
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтатьяДоходов) Тогда
			ДанныеИБ.СтатьяДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ВыручкаОтПродаж;
		КонецЕсли;
	Иначе
		ПолученныеДанные.СтатьяДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ВыручкаОтПродаж;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГруппыФинУчетаНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_ГруппыФинУчетаНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ГруппыФинУчетаНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ГруппыФинансовогоУчетаНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыНастроекФинансовогоУчетаНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ГруппыФинУчетаНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ГруппыФинУчетаНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",                 "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",                     "Описание");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаВПути",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаВыручкиОтПродаж",     "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаНаСкладе",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаНДСВПути",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаНДСПриЗакупке",       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаНДСПриПродаже",       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаПередачиНаКомиссию",  "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаСебестоимостиПродаж", "", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ГруппыФинУчетаНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГрФинансовогоУчетаРасчетов_Получение
Процедура ДобавитьПКО_Справочник_ГрФинансовогоУчетаРасчетов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ГрФинансовогоУчетаРасчетов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыНастроекФинансовогоУчетаРасчетов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",                           "Описание");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаАвансовВыданных",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаАвансовПолученных",         "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовПоПретензиям",      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКлиентами",        "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКлиентамиТара",    "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСПоставщиками",     "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСПоставщикамиТара", "", 1);

КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыВСоглашенияСКлиентами_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыВСоглашенияСКлиентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СоглашенияСКлиентами;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СоглашенияСКлиентами";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ПорядокОплаты",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Валюта,Контрагент,Организация,Статус,ХозяйственнаяОперация");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.ВидДоговора = "СКомиссионером"  Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах Тогда
		ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
	КонецЕсли;
	ВалютаВзаиморасчетов = ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов;
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		Если ТипЗнч(ВалютаВзаиморасчетов) = Тип("Структура")
			И Не ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Новый Структура("Значение, ИмяПКО", ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ПорядокОплаты) Тогда
		Если ПолученныеДанные.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		Иначе
			ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыВСоглашенияСПоставщик_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыВСоглашенияСПоставщик_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СоглашенияСПоставщиками;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СоглашенияСПоставщиками";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ПорядокОплаты",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Валюта,Контрагент,Организация,Статус,ХозяйственнаяОперация");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.ВидДоговора = "СКомитентом"  Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах Тогда
		ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
	КонецЕсли;
	ВалютаВзаиморасчетов = ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов;
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		Если ТипЗнч(ВалютаВзаиморасчетов) = Тип("Структура")
			И Не ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Новый Структура("Значение, ИмяПКО", ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ПорядокОплаты) Тогда
		Если ПолученныеДанные.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		Иначе
			ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачалаДействия",    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияДействия", "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ТипДоговора",           "ВидДоговора", , "Перечисление_ТипыДоговоров_Получение");
	ДобавитьПКС(СвойстваШапки, "УчетАгентскогоНДС",     "УчетАгентскогоНДС");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",  "", 1);
	ДобавитьПКС(СвойстваШапки, "ПорядокОплаты",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Контрагент,Организация,ТипДоговора");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах Тогда
		ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПолученныеДанные.Наименование = НСтр("ru='Основной договор'");
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачалаДействия",        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияДействия",     "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ТипДоговора",               "ВидДоговора", , "Перечисление_ТипыДоговоров_Получение");
	ДобавитьПКС(СвойстваШапки, "УчетАгентскогоНДС",         "УчетАгентскогоНДС");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПорядокОплаты",             "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Дата,Контрагент,Наименование,Номер,Организация,ТипДоговора");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах Тогда
		ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКредитов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ДоговорыКредитов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКредитов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКредитовИДепозитов;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКредитов_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДоговорыКредитов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",          "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Согласован",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипДоговора",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипСрочности",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ХарактерДоговора",     "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Контрагент,Организация,ТипДоговора,ТипСрочности,ХарактерДоговора,Дата,Номер");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКредитов_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Согласован = Истина;
	ПолученныеДанные.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ХарактерДоговора")
		и ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ХарактерДоговора) Тогда
		ПолученныеДанные.ХарактерДоговора = ДанныеXDTO.КлючевыеСвойства.ХарактерДоговора;
	Иначе    
	    ПолученныеДанные.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипДоговора")
		и ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ТипДоговора) Тогда
		ПолученныеДанные.ТипДоговора = ДанныеXDTO.КлючевыеСвойства.ТипДоговора;
	Иначе    
	    ПолученныеДанные.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.КредитВБанке;
	КонецЕсли;
	
	ПолученныеДанные.ТипКомиссии = Перечисления.ТипыКомиссииКредитовИДепозитов.Нет;
	ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
	ПолученныеДанные.Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.Наименование;
	ПолученныеДанные.ТипСрочности = ДанныеXDTO.КлючевыеСвойства.ТипСрочности;
	
	ДополнительныеСвойства = ПолученныеДанные.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Организация", ДанныеXDTO.КлючевыеСвойства.Организация);
	ДополнительныеСвойства.Вставить("Контрагент", ДанныеXDTO.КлючевыеСвойства.Контрагент);
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Получение
Процедура ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КассыККМ";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",  "РегистрационныйНомер");
	ДобавитьПКС(СвойстваШапки, "Склад",                 "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипКассы",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,Склад");
КонецПроцедуры

Процедура ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные.ВалютаДенежныхСредств = (?(ДанныеИБ = Неопределено,
		ВалютаРегламентированногоУчета(КомпонентыОбмена), ДанныеИБ.ВалютаДенежныхСредств));
	
	ПолученныеДанные.ТипКассы = (?(ДанныеИБ = Неопределено,
		Перечисления.ТипыКассККМ.ККМOffline, ДанныеИБ.ТипКассы));
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторТНВЭД
Процедура ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторТНВЭД";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	МассивТНВЭД = КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД;
	МассивТНВЭД.Добавить(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(),
		ДанныеИБ.Ссылка));
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнойКонтрагент",        "ГоловнойКонтрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбособленноеПодразделение", "ОбособленноеПодразделение");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",      "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",         "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",                 "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ИсторияКПП",              "");
	ДобавитьПКС(СвойстваТЧ, "КПП",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Период", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ИсторияНаименований",     "");
	ДобавитьПКС(СвойстваТЧ, "НаименованиеПолное", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Период",             "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	ЗагрузитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	
	ДанныеКонтрагента = ДанныеКонтрагентаПоИсторическимПолямПоиска(ДанныеXDTO);
	Если Не ДанныеКонтрагента = Неопределено Тогда
		
		ИсходныеИсторическиеДанные = Новый Структура;
		Для Каждого Элемент Из ДанныеКонтрагента Цикл
			ИсходныеИсторическиеДанные.Вставить(Элемент.Ключ, ПолученныеДанные[Элемент.Ключ]);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ИсходныеИсторическиеДанные", ИсходныеИсторическиеДанные);
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, ДанныеКонтрагента);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ИсходныеИсторическиеДанные = Неопределено;
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ИсходныеИсторическиеДанные") Тогда
		
		Если ДанныеИБ = Неопределено Тогда
			// Принимаем данные из обмена.
			Для Каждого ЭлементДанных Из ИсходныеИсторическиеДанные Цикл
				ПолученныеДанные[ЭлементДанных.Ключ] = ЭлементДанных.Значение;
			КонецЦикла;
		Иначе
			// Восстанавливаем актуальные исторические значения реквизитов шапки из объека ИБ.
			АктуальныеДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ссылка, ИсходныеИсторическиеДанные);
			ЗаполнитьЗначенияСвойств(ПолученныеДанные, АктуальныеДанныеКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
	// Актуализация "среза последних" для исторических данных (при наличии).
	Если ДанныеИБ <> Неопределено Тогда
		
		ИсторическиеДанные = Новый Структура; // Ключ - имя ТЧ, значение - имя реквизита ТЧ
		ИсторическиеДанные.Вставить("ИсторияКПП",          "КПП");
		ИсторическиеДанные.Вставить("ИсторияНаименований", "НаименованиеПолное");
		
		Для Каждого ЭлементДанных Из ИсторическиеДанные Цикл
			ПолученныеДанные[ЭлементДанных.Ключ].Загрузить(ДанныеИБ[ЭлементДанных.Ключ].Выгрузить());
			
			АктуальнаяЗапись     = Неопределено;
			ЗначениеЕстьВИстории = Ложь;
			
			Для Каждого ИсторияЗначения Из ПолученныеДанные[ЭлементДанных.Ключ] Цикл
				Если Не ЗначениеЕстьВИстории
					И ИсторияЗначения[ЭлементДанных.Значение] = ПолученныеДанные[ЭлементДанных.Значение] Тогда
					ЗначениеЕстьВИстории = Истина;
				КонецЕсли;
				
				Если АктуальнаяЗапись = Неопределено Тогда
					АктуальнаяЗапись = ИсторияЗначения;
				ИначеЕсли АктуальнаяЗапись.Период < ИсторияЗначения.Период Тогда
					АктуальнаяЗапись = ИсторияЗначения;
				КонецЕсли;
			КонецЦикла;
			
			Если Не АктуальнаяЗапись = Неопределено
				И Не ЗначениеЕстьВИстории Тогда
				АктуальнаяЗапись[ЭлементДанных.Значение] = ПолученныеДанные[ЭлементДанных.Значение];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Если ДанныеИБ <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ГоловнойКонтрагент) Тогда
			ПолученныеДанные.ГоловнойКонтрагент = ДанныеИБ.ГоловнойКонтрагент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
			ПолученныеДанные.СтранаРегистрации = ДанныеИБ.СтранаРегистрации;
		КонецЕсли;
		Если ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			и ДанныеИБ.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель 
			или ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
			и ДанныеИБ.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			
			ПолученныеДанные.ЮрФизЛицо = ДанныеИБ.ЮрФизЛицо; 
		КонецЕсли;	
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлкПрод_Получение
Процедура ДобавитьПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЛицензииПоставщиковАлкПрод_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЛицензии",   "ВидЛицензии", , "Перечисление_ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "Владелец",      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "КемВыдана",     "КемВыдана");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидЛицензии,Владелец,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
									ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	// В случае наличия объекта в базе он и будет записан (а не ПолученныеДанные).
	// Шапка (в составе свойств из ПКС) предварительно переносится из ПолученныеДанные в ДанныеИБ:
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",                   "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                                "Артикул");
	ДобавитьПКС(СвойстваШапки, "ВидАлкогольнойПродукции",                "ВидАлкогольнойПродукции", , "Справочник_ВидыАлкогольнойПродукции_Получение");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                       "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция",          "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                                    "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД",                               "КодОКВЭД", , "Справочник_ОКВЭД");
	ДобавитьПКС(СвойстваШапки, "КодОКП",                                 "КодОКП", , "Справочник_ОКП");
	ДобавитьПКС(СвойстваШапки, "КодТНВЭД",                               "КодТНВЭД", , "Справочник_КлассификаторТНВЭД");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбъемДАЛ",                               "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "ПроизводительИмпортерДляДекларацийАлко", "ПроизводительИмпортер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",                               "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                              "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                        "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ГруппаАналитическогоУчета",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ГруппыАналитическогоУчетаНоменклатуры")
		И ДанныеXDTO.Свойство("ГруппаАналитическогоУчета")
		И ЗначениеЗаполнено(ДанныеXDTO.ГруппаАналитическогоУчета) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ГруппаАналитическогоУчета",
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ГруппаАналитическогоУчета, "Спр_ГруппыАналитическогоУчетаНоменклатуры"));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
		ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	Иначе
		ЗаполнитьРеквизиты(ПолученныеДанные, ДанныеИБ,
			"СтавкаНДС, ГруппаАналитическогоУчета");
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_НомерГТД_Получение
Процедура ДобавитьПКО_Справочник_НомерГТД_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НомерГТД_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,СтранаПроисхождения");
КонецПроцедуры

Процедура ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Код = ДанныеXDTO.КлючевыеСвойства.Код;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтранаПроисхождения", ДанныеXDTO.КлючевыеСвойства.СтранаПроисхождения);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОКВЭД
Процедура ДобавитьПКО_Справочник_ОКВЭД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ОКВЭД";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторВидовЭкономическойДеятельности;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОКП
Процедура ДобавитьПКО_Справочник_ОКП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ОКП";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ОбщероссийскийКлассификаторПродукции;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",           "ГоловнаяОрганизация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ИндивидуальныйПредприниматель", "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ИНН",                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",       "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                          "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",       "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",       "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",     "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",                     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ОКАТО") И ЗначениеЗаполнено(ДанныеXDTO.ОКАТО) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОКАТО", ДанныеXDTO.ОКАТО);
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("КПП") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.КПП) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КПП", ДанныеXDTO.КлючевыеСвойства.КПП);
	КонецЕсли;
	
	// ЮрФизЛицо
	Если ДанныеXDTO.КлючевыеСвойства.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо" Тогда
		ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Иначе
		ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	ЗагрузитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ДанныеИБ = Неопределено Тогда
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ОКАТО") Тогда
			ДанныеИБ.ДополнительныеСвойства.Вставить("ОКАТО", ПолученныеДанные.ДополнительныеСвойства.ОКАТО);
		КонецЕсли;
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("КПП") Тогда
			ДанныеИБ.ДополнительныеСвойства.Вставить("КПП", ПолученныеДанные.ДополнительныеСвойства.КПП);
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОтветственныеЛица_Получение
Процедура ДобавитьПКО_Справочник_ОтветственныеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ОтветственныеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ОтветственныеЛицаОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ОтветственныеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ОтветственныеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ОтветственныеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                   "ОрганизацияОтбор", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОтветственноеЛицо",          "ВидОтветственногоЛицаОтбор", , "ВидыОтветственныхЛиц");
	ДобавитьПКС(СвойстваШапки, "ДатаДокументаПраваПодписи",  "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументПраваПодписи",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Должность",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ДолжностьСсылка",            "", 1, "Справочник_Должности_Получение");
	ДобавитьПКС(СвойстваШапки, "НомерДокументаПраваПодписи", "", 1);
	ДобавитьПКС(СвойстваШапки, "ОснованиеПраваПодписи",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ОтветственноеЛицо",          "", 1, "ВидыОтветственныхЛиц");
	ДобавитьПКС(СвойстваШапки, "ПравоПодписиПоДоверенности", "", 1);
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо",             "", 1, "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,ДатаНачала,ОтветственноеЛицо");
КонецПроцедуры

Процедура ПКО_Справочник_ОтветственныеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("ФизическоеЛицо",             "ФизическоеЛицо");
	ПравилаЗаполнения.Вставить("Должность",            "ДолжностьСсылка");
	ПравилаЗаполнения.Вставить("ВидОтветственногоЛица",          "ОтветственноеЛицо");
	ПравилаЗаполнения.Вставить("УполномоченноеЛицо",         "УполномоченноеЛицо");
	ПравилаЗаполнения.Вставить("ДатаНачала",                 "ДатаНачала");
	ПравилаЗаполнения.Вставить("ДатаОкончания",              "ДатаОкончания");
	ПравилаЗаполнения.Вставить("ВидДокументаПравоПодписи",       "ДокументПраваПодписи");
	ПравилаЗаполнения.Вставить("ДатаДокументаПраваПодписи",  "ДатаДокументаПраваПодписи");
	ПравилаЗаполнения.Вставить("НомерДокументаПраваПодписи", "НомерДокументаПраваПодписи");
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		
		ДатаНачала = Неопределено;
		Для Каждого Строка Из ДанныеXDTO.Записи Цикл
		
			Если ДатаНачала <> Неопределено И Строка.ДатаНачала < ДатаНачала Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаНачала = Строка.ДатаНачала;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
		КонецЦикла;
		
		КлючиСтруктуры = Новый Структура("ДатаНачала, ДатаОкончания, НомерДокументаПраваПодписи, ДатаДокументаПраваПодписи, ДокументПраваПодписи, ФизическоеЛицо, ДолжностьСсылка, ОтветственноеЛицо, ПравоПодписиПоДоверенности");
		Для Каждого КлючЗначение Из КлючиСтруктуры Цикл
			Если Не СтруктураДанныхСтроки.Свойство(КлючЗначение.Ключ) Тогда
				СтруктураДанныхСтроки.Вставить(КлючЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Если ТипЗнч(СтруктураДанныхСтроки.ДокументПраваПодписи) = Тип("Структура")
			И СтруктураДанныхСтроки.ДокументПраваПодписи.Свойство("Значение") Тогда
			
			СтруктураДанныхСтроки.ДокументПраваПодписи = СтруктураДанныхСтроки.ДокументПраваПодписи.Значение;
		КонецЕсли;
		СтруктураДанныхСтроки.ПравоПодписиПоДоверенности = (СтруктураДанныхСтроки.ДокументПраваПодписи = "Доверенность");
		
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, СтруктураДанныхСтроки,
			"ДатаНачала, ДатаОкончания, НомерДокументаПраваПодписи, ДатаДокументаПраваПодписи, ДокументПраваПодписи, ПравоПодписиПоДоверенности");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо",    СтруктураДанныхСтроки.ФизическоеЛицо);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДолжностьСсылка",   СтруктураДанныхСтроки.ДолжностьСсылка);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОтветственноеЛицо", СтруктураДанныхСтроки.ОтветственноеЛицо);
		ОснованиеПраваПодписи = НСтр("ru = '%1 №%2 от %3'");
		ПолученныеДанные.ОснованиеПраваПодписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ОснованиеПраваПодписи,
													ПолученныеДанные.ДокументПраваПодписи,
													ПолученныеДанные.НомерДокументаПраваПодписи,
													ПолученныеДанные.ДатаДокументаПраваПодписи);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ОтветственныеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
									ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	// В случае наличия объекта в базе он и будет записан (а не ПолученныеДанные).
	// Шапка (в составе свойств из ПКС) предварительно переносится из ПолученныеДанные в ДанныеИБ:
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	ДанныеДляЗаполнения = ?(ПолученныеДанные = Неопределено, ДанныеИБ, ПолученныеДанные);
	Если ПустаяСтрока(ДанныеДляЗаполнения.Должность) И ЗначениеЗаполнено(ДанныеДляЗаполнения.ДолжностьСсылка) Тогда
		ДанныеДляЗаполнения.Должность = ДанныеДляЗаполнения.ДолжностьСсылка.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодарочныеСертификаты
Процедура ДобавитьПКО_Справочник_ПодарочныеСертификаты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ПодарочныеСертификаты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПодарочныеСертификаты;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПодарочныеСертификаты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "СерийныйНомер");
	ДобавитьПКС(СвойстваШапки, "МагнитныйКод", "МагнитныйКод");
	ДобавитьПКС(СвойстваШапки, "Штрихкод",     "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "ВидПодарочногоСертификата", 1, "Справочник_ВидыПодарочныхСертификатов_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Штрихкод,Владелец");
	ПравилоКонвертации.ПоляПоиска.Добавить("МагнитныйКод,Владелец");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодарочныеСертификатыБезВладельца
Процедура ДобавитьПКО_Справочник_ПодарочныеСертификатыБезВладельца(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ПодарочныеСертификатыБезВладельца";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПодарочныеСертификаты;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПодарочныеСертификаты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "СерийныйНомер");
	ДобавитьПКС(СвойстваШапки, "МагнитныйКод", "МагнитныйКод");
	ДобавитьПКС(СвойстваШапки, "Штрихкод",     "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "Наименование", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Штрихкод");
	ПравилоКонвертации.ПоляПоиска.Добавить("МагнитныйКод");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СтруктураПредприятия";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "", 1, "Справочник_Подразделения_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Родитель", Неопределено);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Подразделения.КлючевыеСвойства.ВышестоящееПодразделение")
		И ДанныеXDTO.Свойство("КлючевыеСвойства")
		И ДанныеXDTO.КлючевыеСвойства.Свойство("ВышестоящееПодразделение")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВышестоящееПодразделение) Тогда
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Родитель",
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВышестоящееПодразделение, "Справочник_Подразделения_Получение"));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ДанныеИБ = Неопределено Тогда
		Если НЕ ПолученныеДанные.ПолучитьСсылкуНового() = ДанныеИБ.Ссылка 
			И Не ПолученныеДанные.Родитель.Пустая()
			И Не ДанныеИБ.Родитель = ПолученныеДанные.Родитель Тогда
		
			ДанныеИБ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "ТипСклада",    "ТипСклада", , "ТипыСкладов_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ТипСклада");
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ФизЛица";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("СтраховойНомерПФР,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа,ДатаРождения");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	ЗагрузитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО") Тогда
		Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодробныеДанныеФИО", ДанныеXDTO.ДанныеФИО);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗагрузитьДополнительныеСведения(ФизЛицоСсылка, ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Штрихкод");
КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ШтрихкодОтбор", ДанныеXDTO.ШтрихкодОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Справочник_Номенклатура_Получение = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Номенклатура_Получение");
	Справочник_ХарактеристикиНоменклатуры = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ХарактеристикиНоменклатуры");
	Справочник_Упаковки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Упаковки");
	
	
	ПолученныеДанные.Отбор.Штрихкод.Значение = ПолученныеДанные.ДополнительныеСвойства.ШтрихкодОтбор;
	ПолученныеДанные.Отбор.Штрихкод.Использование = Истина;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Штрихкод = ПолученныеДанные.ДополнительныеСвойства.ШтрихкодОтбор;
			
			СтрокаЗаписи.Номенклатура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.Номенклатура, 
				Справочник_Номенклатура_Получение, 
				"ПолучитьСсылку").Ссылка;
				
			Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
				СтрокаЗаписи.Характеристика = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					Строка.Характеристика, 
					Справочник_ХарактеристикиНоменклатуры, 
					"ПолучитьСсылку").Ссылка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
				СтрокаЗаписи.Упаковка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					Строка.Упаковка, 
					Справочник_Упаковки, 
					"ПолучитьСсылку").Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы_Получение
Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Код",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "Эквайер",        "Эквайер", , "Справочник_Контрагенты_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("БанковскийСчет,Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайрингТерм_Получение_КлючСв
Процедура ДобавитьПКО_Справочник_ЭквайрингТерм_Получение_КлючСв(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЭквайрингТерм_Получение_КлючСв";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Код",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Эквайер",        "Эквайрер", , "Справочник_Контрагенты_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайрингТермБезНомера_Получение_КлючСв
Процедура ДобавитьПКО_Справочник_ЭквайрингТермБезНомера_Получение_КлючСв(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЭквайрингТермБезНомера_Получение_КлючСв";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЭквайринговыйТерминал";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Эквайер",        "Эквайрер", , "Справочник_Контрагенты_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("БанковскийСчет,Эквайер");
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Спр_ГруппыАналитическогоУчетаНоменклатуры
Процедура ДобавитьПКО_Спр_ГруппыАналитическогоУчетаНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Спр_ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ГруппыАналитическогоУчетаНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа
Процедура ДобавитьПКО_Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ГруппыАналитическогоУчетаНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Спр_ГруппыАналитическогоУчетаНоменклатурыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанкиГруппа
Процедура ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанкиГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Валюты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",   "ПараметрыПрописиНаРусском");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "КодМВД",       "КодМВД");
	ДобавитьПКС(СвойстваШапки, "КодПФР",       "КодПФР");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "ВидДокументаИзКлассификатора", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВидДокументаИзКлассификатора = "";
	
	Если ДанныеИБ.Предопределенный
		И ЗначениеЗаполнено(ДанныеИБ.ИмяПредопределенныхДанных) Тогда
		ВидДокументаИзКлассификатора = ДанныеИБ.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДокументаИзКлассификатора", ВидДокументаИзКлассификатора);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = ДанныеИБ.МеждународноеСокращение;
		Если Не ЗначениеЗаполнено(Код) Тогда
			Код = ДанныеИБ.Наименование;
		КонецЕсли;
		
		Код = Лев(Код, 4);
		
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	ДанныеДляЗаписиВИБ.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДополнительныхРеквизитов
Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
			"Код,
			|Наименование");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "",               "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "", 1, "Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("ФизическоеЛицо,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("ФизическоеЛицо", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФизическоеЛицо,"Справочник_ФизическиеЛица_Отправка"));
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФизическоеЛицо", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФизическоеЛицо,"Справочник_ФизическиеЛица_Отправка"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ФизЛицо = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.КлючевыеСвойства.ФизическоеЛицо;
	ИначеЕсли ДанныеXDTO.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.ФизическоеЛицо;
	КонецЕсли;
	Если ФизЛицо <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо", Новый Структура("Значение, ИмяПКО", ФизЛицо,"Справочник_ФизическиеЛица_Получение"));
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегистрацииВНалоговомОргане
Процедура ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДокументПредставителя",                    "ДокументПредставителя");
	ДобавитьПКС(СвойстваШапки, "Код",                                      "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                               "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКТМО",                               "ОКТМО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                      "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                             "КраткоеНаименованиеНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "НаименованиеИФНС",                         "НаименованиеИФНС");
	ДобавитьПКС(СвойстваШапки, "УполномоченноеЛицоПредставителя",          "УполномоченноеЛицоПредставителя");
	ДобавитьПКС(СвойстваШапки, "ЦифровойИндексОбособленногоПодразделения", "ЦифровойИндексОбособленногоПодразделения");
	ДобавитьПКС(СвойстваШапки, "",                                         "Доверенность", 1);
	ДобавитьПКС(СвойстваШапки, "",                                         "Организация", 1);
	ДобавитьПКС(СвойстваШапки, "",                                         "Представитель", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Доверенность",                             "", 1);
	ДобавитьПКС(СвойстваШапки, "НаименованиеОбособленногоПодразделения",   "НаименованиеОбособленногоПодразделения", 1);
	ДобавитьПКС(СвойстваШапки, "Представитель",                            "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Код,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Код");
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.РегистрацииВНалоговомОргане.КлючевыеСвойства.Организация")
		И СтекВыгрузки.Количество() = 1 Тогда	
		ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Организации_Отправка"));
	Иначе
		ДанныеXDTO.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Организации_Отправка"));
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		НаименованиеОбособленногоПодразделения = Неопределено;
		Если Не ДанныеXDTO.Свойство("НаименованиеОбособленногоПодразделения", НаименованиеОбособленногоПодразделения)
			Или Не ЗначениеЗаполнено(НаименованиеОбособленногоПодразделения) Тогда
			
			ДанныеXDTO.Вставить("НаименованиеОбособленногоПодразделения", ДанныеИБ.НаименованиеИФНС);
		КонецЕсли; 
	
		Возврат;
	КонецЕсли;
	
	НаименованиеОбособленногоПодразделения = Неопределено;
	Если Не ДанныеXDTO.КлючевыеСвойства.Свойство("НаименованиеОбособленногоПодразделения", НаименованиеОбособленногоПодразделения)
		Или Не ЗначениеЗаполнено(НаименованиеОбособленногоПодразделения) Тогда
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеОбособленногоПодразделения", ДанныеИБ.НаименованиеИФНС);
	КонецЕсли;
	
	ИмяПКОПредставитель = "Справочник_Контрагенты";
	Если ТипЗнч(ДанныеИБ.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКОПредставитель = "Справочник_ФизическиеЛица_Отправка";
	КонецЕсли;
	ДанныеXDTO.Вставить("Представитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Представитель, ИмяПКОПредставитель));
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3")
		И НЕ ЗначениеЗаполнено(ДанныеИБ.УполномоченноеЛицоПредставителя) Тогда
		ДанныеXDTO.Вставить("УполномоченноеЛицоПредставителя", "-");
		ДанныеXDTO.Вставить("ДокументПредставителя", "-");
		ДанныеXDTO.Вставить("Доверенность", "-");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Доверенность) Тогда
		Если ЭтоУТ() Тогда
			ДанныеXDTO.Вставить("Доверенность", ДанныеИБ.Доверенность);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Организация = Неопределено;
	Если ДанныеXDTO.Свойство("КлючевыеСвойства")
		И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.РегистрацииВНалоговомОргане.КлючевыеСвойства.Организация") Тогда
		ДанныеXDTO.КлючевыеСвойства.Свойство("Организация", Организация);
	Иначе
		ДанныеXDTO.Свойство("Организация", Организация);
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", Организация, "Справочник_Организации_Получение"));
	
	Если ДанныеXDTO.Свойство("Представитель")
		И ЗначениеЗаполнено(ДанныеXDTO.Представитель) Тогда
		ИмяПКО = "Справочник_Контрагенты_Получение";
		ТипПредставителя = ДанныеXDTO.Представитель.ТипЗначения;
		Если Найти(ТипПредставителя, "ФизическиеЛица") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Представитель", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Представитель, ИмяПКО));
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Доверенность")
		И ЗначениеЗаполнено(ДанныеXDTO.Доверенность) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоверенностьНаименование", ДанныеXDTO.Доверенность);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДоверенностьНаименование = "";
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДоверенностьНаименование", ДоверенностьНаименование) Тогда
		Если ЭтоУТ() Тогда
			ПолученныеДанные.Доверенность = ДоверенностьНаименование;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", 1, "Справочник_СтатьиДДС_Группа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НаименованиеДляВыгрузки = ДанныеИБ.Наименование;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		НаименованиеДляВыгрузки = Лев(ДанныеИБ.Наименование, 100)
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2") Тогда
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", ДанныеИБ.Родитель);
		Инструкция.Вставить("ИмяПКО", "Справочник_СтатьиДДС_Группа");
		
		ДанныеXDTO.Вставить("Группа", Инструкция);
		
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", НаименованиеДляВыгрузки);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Группа
Процедура ДобавитьПКО_Справочник_СтатьиДДС_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДС_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДСГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтатьиДДС_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДС_Группа");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДДС_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НаименованиеДляВыгрузки = ДанныеИБ.Наименование;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		НаименованиеДляВыгрузки = Лев(ДанныеИБ.Наименование, 100)
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", НаименованиеДляВыгрузки);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов
Процедура ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДоходов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НаименованиеДляВыгрузки = ДанныеИБ.Наименование;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		НаименованиеДляВыгрузки = Лев(ДанныеИБ.Наименование, 100)
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", НаименованиеДляВыгрузки);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов
Процедура ДобавитьПКО_Справочник_СтатьиРасходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиРасходов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                                     "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "",                                        "ВидДеятельностиДляНалоговогоУчетаЗатрат", 1);
	ДобавитьПКС(СвойстваШапки, "",                                        "ВидРасходовПоНеосновнойДеятельности", 1);
	ДобавитьПКС(СвойстваШапки, "",                                        "ВидРасходовПоОсновнойДеятельности", 1);
	ДобавитьПКС(СвойстваШапки, "ВидДеятельностиДляНалоговогоУчетаЗатрат", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПрочихРасходов",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидРасходов",                             "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",                            "Наименование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НаименованиеДляВыгрузки = ДанныеИБ.Наименование;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		НаименованиеДляВыгрузки = Лев(ДанныеИБ.Наименование, 100)
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", НаименованиеДляВыгрузки);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПередЗаписьюСтатьиРасходов(ДанныеИБ, ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ТипыЦен";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Идентификатор",            "Идентификатор");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОкруглятьВБольшуюСторону", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "ТочностьОкругления",       "ТочностьОкругления");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаЦены", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Идентификатор",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ИспользоватьПриПродаже",   "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособЗаданияЦены",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаЦены,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", ДанныеИБ.ВалютаЦены);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	ПолученныеДанные.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
	ПолученныеДанные.ИспользоватьПриПродаже = Истина;
	
	// Если идентификатор, сформированный по наименованию, занят, устанавливается автосгенерированный.
	ПолученныеДанные.Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(ПолученныеДанные.Наименование);
	Запрос = Новый Запрос();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ПолученныеДанные.Идентификатор);
	Если Не Запрос.Выполнить().Пустой() Тогда
		ПолученныеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаЦены")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаЦены) Тогда
	
		ЗначениеВалюты = ДанныеXDTO.КлючевыеСвойства.ВалютаЦены; 
		Если ЗначениеВалюты.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ЗначениеВалюты, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		
		// Идентификатор: логика "не перезаполнять".
		Если ЗначениеЗаполнено(ДанныеИБ.Идентификатор) Тогда
			ПолученныеДанные.Идентификатор = ДанныеИБ.Идентификатор;
		КонецЕсли;
		
		// СпособЗаданияЦены: логика "не перезаполнять".
		Если ЗначениеЗаполнено(ДанныеИБ.СпособЗаданияЦены) Тогда
			ПолученныеДанные.СпособЗаданияЦены = ДанныеИБ.СпособЗаданияЦены;
		КонецЕсли;
		
		// ИспользоватьПриПродаже: логика "не перезаполнять".
		ПолученныеДанные.ИспользоватьПриПродаже = ДанныеИБ.ИспользоватьПриПродаже;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Упаковки
Процедура ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Упаковки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Упаковки_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Высота",           "Высота");
	ДобавитьПКС(СвойстваШапки, "Глубина",          "Глубина");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Объем",            "Объем");
	ДобавитьПКС(СвойстваШапки, "Ширина",           "Ширина");
	ДобавитьПКС(СвойстваШапки, "",                 "Коэффициент", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ЕдиницаИзмерения,Коэффициент,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Коэффициент = ?(ДанныеИБ.Знаменатель = 0, ДанныеИБ.Числитель, Окр(ДанныеИБ.Числитель / ДанныеИБ.Знаменатель,3));
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Коэффициент", Коэффициент);
	Иначе
		ДанныеXDTO.Вставить("Коэффициент", Коэффициент);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры
Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) И ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
		Иначе
			ДанныеXDTO.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПартнера, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресНалоговогоОргана, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПартнера, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресСклада, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонНалоговогоОргана, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСклада, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОпераций_ПТиУ.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОпераций_ПТиУ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту, "ЗакупкаПоИмпорту");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию, "ПриемНаКомиссию");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийРеализацияТоваров_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийРеализацияТоваров_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию, "ПередачаНаКомиссию");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту, "РеализацияКлиенту");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет, "РеализацияКлиенту");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыЭД_Реализация_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыЭД_Реализация_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыОформленияПродажи;
		ПравилоКонвертации.ТипXDTO   = "ВидыЭД";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг, "ТОРГ12");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВариантОтраженияРасхождений_Излишки.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВариантОтраженияРасхождений_Излишки";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыОтраженияРасхождений;
		ПравилоКонвертации.ТипXDTO   = "ВариантыОтраженияИзлишковПриПоступлении";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтраженияРасхождений.ИзлишкиВПользуПоставщика, "ВПользуПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтраженияРасхождений.ИзлишкиНаПрочиеДоходы, "НаПрочиеДоходы");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВариантОтраженияРасхождений_Недостачи.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВариантОтраженияРасхождений_Недостачи";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыОтраженияРасхождений;
		ПравилоКонвертации.ТипXDTO   = "ВариантыОтраженияНедостачиПриПоступлении";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтраженияРасхождений.НедостачиЗаСчетПоставщика, "ЗаСчетПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтраженияРасхождений.НедостачиЗаСчетСтороннейКомпании, "ЗаСчетСтороннейКомпании");
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтраженияРасхождений.НедостачиНаПрочиеРасходы, "НаПрочиеРасходы");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыДоговоров_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыДоговоров_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыДоговоров;
		ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.ВвозИзЕАЭС, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.Импорт, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СДавальцем, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СКомиссионером, "СКомиссионером");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СКомитентом, "СКомитентом");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СПереработчиком, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СПоклажедателем, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СПокупателем, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СПоставщиком, "СПоставщиком");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыЗапасов.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыЗапасов";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыЗапасов;
		ПравилоКонвертации.ТипXDTO   = "ТипыЗапасов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыЗапасов.КомиссионныйТовар, "КомиссионныеТовары");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыЗапасов.Товар, "СобственныеТовары");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ТипыСкладов_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыСкладов_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
		ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.ОптовыйСклад, "Оптовый");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.РозничныйМагазин, "Розничный");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// ВидыОпераций_ПТиУ_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОпераций_ПТиУ_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ЗакупкаПоИмпорту", Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ЗначенияДляПолучения.Вставить("ПокупкаУПоставщика", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ЗначенияДляПолучения.Вставить("ПриемНаКомиссию", Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийРеализацияТоваров_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийРеализацияТоваров_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ПередачаНаКомиссию", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПравСобственности_ВПути", Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
		ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПравСобственности_Реализовано", Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
		ЗначенияДляПолучения.Вставить("РеализацияКлиенту", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийСБДСПрочее_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийСБДСПрочее_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийСБДСПрочее";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВнутренняяПередача", Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
		ЗначенияДляПолучения.Вставить("ПрочееСписание", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыЭД_Реализация_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыЭД_Реализация_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыОформленияПродажи;
		ПравилоКонвертации.ТипXDTO   = "ВидыЭД";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("АктНаПередачуПрав", Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав);
		ЗначенияДляПолучения.Вставить("ТОРГ12", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ТипыДоговоров_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыДоговоров_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыДоговоров;
		ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ТипыДоговоров.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ТипыДоговоров.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ТипыДоговоров.СКомитентом);
		ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ТипыДоговоров.СКомитентом);
		ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ТипыДоговоров.СПокупателем);
		ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ТипыДоговоров.СПоставщиком);
		ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ТипыДоговоров.СПоставщиком);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ЮрФизЛицо_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮрФизЛицо_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ТипыСкладов_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыСкладов_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
		ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСкладов.ОптовыйСклад);
		ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСкладов.РозничныйМагазин);
		ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСкладов.РозничныйМагазин);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ХозОперации_ПБДСРасчетыСКонтрагентами.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ХозОперации_ПБДСРасчетыСКонтрагентами";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовСКонтрагентами";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ХозОперации_ПБДСРасчетыССотрудниками.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ХозОперации_ПБДСРасчетыССотрудниками";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовССотрудниками";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника);
		ЗначенияДляПолучения.Вставить("Займы", Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// ВидыОперацийВозвратОтПокупателя.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийВозвратОтПокупателя";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийВозвратОтПокупателя";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера, "ВозвратОтКомиссионера");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя, "ВозвратОтРозничногоПокупателя");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента, "ВозвратОтКлиента");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратОтКомиссионера", Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	ЗначенияДляПолучения.Вставить("ВозвратОтРозничногоПокупателя", Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	ЗначенияДляПолучения.Вставить("ВозвратОтКлиента", Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийВозвратПоставщику.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийВозвратПоставщику";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийВозвратПоставщику";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту, "ВозвратКомитенту");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику, "ВозвратПоставщику");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратКомитенту", Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	ЗначенияДляПолучения.Вставить("ВозвратПоставщику", Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийВыпускаПродукции.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийВыпускаПродукции";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийВыпускаПродукции";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение, "ВыпускПродукцииВПодразделение");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад, "ВыпускПродукцииНаСклад");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой, "ВыпускПродукцииНаСклад");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства, "ВыпускПродукцииНаСклад");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВыпускПродукцииВПодразделение", Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение);
	ЗначенияДляПолучения.Вставить("ВыпускПродукцииНаСклад", Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад);
	ЗначенияДляПолучения.Вставить("ВыпускПродукцииНаСклад", Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой);
	ЗначенияДляПолучения.Вставить("ВыпускПродукцииНаСклад", Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКОНаБанковскийСчет.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийРКОНаБанковскийСчет";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийРКОНаБанковскийСчет";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк, "Инкассация");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк, "ВзносНаличными");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Инкассация", Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
	ЗначенияДляПолучения.Вставить("ВзносНаличными", Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОтветственныхЛиц.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОтветственныхЛиц";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ОтветственныеЛицаОрганизаций;
	ПравилоКонвертации.ТипXDTO   = "ВидыОтветственныхЛиц";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер, "ГлавныйБухгалтер");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель, "Исполнитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Кассир, "Кассир");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры, "ОтветственныйЗаБухгалтерскиеРегистры");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры, "ОтветственныйЗаНалоговыеРегистры");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, "Руководитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы, "РуководительКадровойСлужбы");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель, "УполномоченныйПредставитель");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	ЗначенияДляПолучения.Вставить("Исполнитель", Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель);
	ЗначенияДляПолучения.Вставить("Кассир", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
	ЗначенияДляПолучения.Вставить("ОтветственныйЗаБухгалтерскиеРегистры", Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	ЗначенияДляПолучения.Вставить("ОтветственныйЗаНалоговыеРегистры", Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры);
	ЗначенияДляПолучения.Вставить("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	ЗначенияДляПолучения.Вставить("РуководительКадровойСлужбы", Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы);
	ЗначенияДляПолучения.Вставить("УполномоченныйПредставитель", Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыЛицензийАлкогольнойПродукции.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыЛицензийАлкогольнойПродукции";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЛицензийАлкогольнойПродукции;
	ПравилоКонвертации.ТипXDTO   = "ВидыЛицензийАлкогольнойПродукции";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АлкогольнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "Пиво");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "СпиртосодержащаяНеПищеваяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "СпиртосодержащаяПищеваяПродукция");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АлкогольнаяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ЗначенияДляПолучения.Вставить("Пиво", Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяНеПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыРасчетаКомиссионногоВознагражд.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
	ПравилоКонвертации.ТипXDTO   = "СпособыРасчетаКомиссионногоВознаграждения";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммыПродажиИСуммыКомитента, "ПроцентОтРазницыСуммПродажиИПоступления");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеРассчитывается", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	ЗначенияДляПолучения.Вставить("ПроцентОтРазницыСуммПродажиИПоступления", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммыПродажиИСуммыКомитента);
	ЗначенияДляПолучения.Вставить("ПроцентОтСуммыПродажи", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СтавкиНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ТипыНоменклатуры.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
	ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара, "МногооборотнаяТара");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Работа, "Работа");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("МногооборотнаяТара", Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Работа);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Товар);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ТипыПлатежныхДокументов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыПлатежныхДокументов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыПлатежныхДокументов;
	ПравилоКонвертации.ТипXDTO   = "ТипыПлатежныхДокументов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПлатежныхДокументов.Аккредитив, "Аккредитив");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер, "БанковскийОрдер");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение, "ИнкассовоеПоручение");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение, "ПлатежноеПоручение");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование, "ПлатежноеТребование");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер, "ПлатежныйОрдер");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Аккредитив", Перечисления.ТипыПлатежныхДокументов.Аккредитив);
	ЗначенияДляПолучения.Вставить("БанковскийОрдер", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ЗначенияДляПолучения.Вставить("ИнкассовоеПоручение", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	ЗначенияДляПолучения.Вставить("ПлатежноеПоручение", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ЗначенияДляПолучения.Вставить("ПлатежноеТребование", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ЗначенияДляПолучения.Вставить("ПлатежныйОрдер", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисления_ТипыНалогообложенияНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисления_ТипыНалогообложенияНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНалогообложенияНДС;
	ПравилоКонвертации.ТипXDTO   = "Налогообложение";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС, "НалоговыйАгентПоНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию, "ПоФактическомуИспользованию");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт, "ПродажаНаЭкспорт");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, "ПродажаНеОблагаетсяНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД, "ПродажаОблагаетсяЕНВД");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, "ПродажаОблагаетсяНДС");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НалоговыйАгентПоНДС", Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС);
	ЗначенияДляПолучения.Вставить("ПоФактическомуИспользованию", Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию);
	ЗначенияДляПолучения.Вставить("ПродажаНаЭкспорт", Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	ЗначенияДляПолучения.Вставить("ПродажаНеОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	ЗначенияДляПолучения.Вставить("ПродажаОблагаетсяЕНВД", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	ЗначенияДляПолучения.Вставить("ПродажаОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СтатусыЗаявокНаРасходДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СтатусыЗаявокНаРасходДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ТипXDTO   = "СтатусыЗаявокНаРасходДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате, "КОплате");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована, "НеСогласована");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена, "Отклонена");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована, "Согласована");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("КОплате", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	ЗначенияДляПолучения.Вставить("НеСогласована", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	ЗначенияДляПолучения.Вставить("Отклонена", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	ЗначенияДляПолучения.Вставить("Согласована", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ФормыОплатыЗаявокНаРасходДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ФормыОплатыЗаявокНаРасходДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ФормыОплаты;
	ПравилоКонвертации.ТипXDTO   = "ФормыОплатыЗаявокНаРасходДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ФормыОплаты.Безналичная, "Безналичная");
	ЗначенияДляОтправки.Вставить(Перечисления.ФормыОплаты.Наличная, "Наличная");
	ЗначенияДляОтправки.Вставить(Перечисления.ФормыОплаты.ПлатежнаяКарта, "ПлатежнаяКарта");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Безналичная", Перечисления.ФормыОплаты.Безналичная);
	ЗначенияДляПолучения.Вставить("Наличная", Перечисления.ФормыОплаты.Наличная);
	ЗначенияДляПолучения.Вставить("ПлатежнаяКарта", Перечисления.ФормыОплаты.ПлатежнаяКарта);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоПлатежнойКарте";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту, "ВозвратОплатыКлиентуНаПлатежнуюКарту");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента, "ОплатаОтКлиентаПлатежнойКартой");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратОплатыКлиентуНаПлатежнуюКарту", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	ЗначенияДляПолучения.Вставить("ОплатаОтКлиентаПлатежнойКартой", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция АлгоритмВыгрузкиРасчетыСКонтрагентамиОтправка(ДанныеИБ)
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	АлгоритмКонвертации = "";
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда 
		АлгоритмКонвертации = "ОплатаОтПокупателя";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		АлгоритмКонвертации = "ОплатаОтПокупателяИнтеркампани";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте Тогда
		АлгоритмКонвертации = "ПрочееПоступление_ПрочиеРасчетыСКонтрагентами";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		АлгоритмКонвертации = "ВозвратОтПоставщика";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации Тогда
		АлгоритмКонвертации = "ВозвратОтПоставщикаИнтеркампани";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		Если Найти(ДанныеШапки.КорреспондирующийСчет, "66") > 0
			Или Найти(ДанныеШапки.КорреспондирующийСчет, "67") > 0 Тогда
			АлгоритмКонвертации = "ПрочееПоступление_РасчетыПоКредитамИЗаймам";
		ИначеЕсли Найти(ДанныеШапки.КорреспондирующийСчет, "60") > 0
			Или Найти(ДанныеШапки.КорреспондирующийСчет, "62") > 0
			Или Найти(ДанныеШапки.КорреспондирующийСчет, "76") > 0 Тогда
			АлгоритмКонвертации = "ПрочееПоступление_ПрочиеРасчетыСКонтрагентами";
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		Если ДанныеИБ.Валюта <> ВалютаРегламентированногоУчета
			И ДанныеИБ.ВалютаКонвертации <> ВалютаРегламентированногоУчета Тогда
			// Конвертацию одной валюты в другую выгружаем с видом операции "Прочие расчеты с контрагентами".
			АлгоритмКонвертации = "КонвертацияВалюты_ПрочиеРасчетыСКонтрагентами";
		КонецЕсли;
	ИначеЕсли ЭтоХозяйственнаяОперацияРасчетыПоКредитамЗаймам(ДанныеИБ.ХозяйственнаяОперация) Тогда
		АлгоритмКонвертации = "Кредиты_РасчетыПоКредитамИЗаймам";
	ИначеЕсли ЭтоХозяйственнаяОперацияРасчетыПоДепозитам(ДанныеИБ.ХозяйственнаяОперация) Тогда
		АлгоритмКонвертации = "Депозиты_ПрочиеРасчетыСКонтрагентами";
	КонецЕсли;
	
	Возврат АлгоритмКонвертации;
КонецФункции
Функция ВалютаРегламентированногоУчета(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВалютаРегламентированногоУчета) Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Возврат КомпонентыОбмена.ПараметрыКонвертации.ВалютаРегламентированногоУчета;
КонецФункции
Функция ВалютаУправленческогоУчета(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВалютаУправленческогоУчета) Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	
	Возврат КомпонентыОбмена.ПараметрыКонвертации.ВалютаУправленческогоУчета;
КонецФункции
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидДоговораПоОбъектуРасчетовИнтеркампани(Организация, ОбъектРасчетов, ВидДоговораПоУмолчанию)
	Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
		Если ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			Возврат ВидДоговораПоТипуДоговораИнтеркампани(Организация, ОбъектРасчетов);
		ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
			Или ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") Тогда
			
			ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "Организация, Комиссионер");
			Если ОрганизацииИнтеркампани.Организация = Организация Тогда
				Возврат "СКомиссионером";
			ИначеЕсли ОрганизацииИнтеркампани.Комиссионер = Организация Тогда
				Возврат "СКомиссионером";
			Иначе
				Возврат "Прочее";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			
			ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "Организация, ОрганизацияПолучатель");
			Если ОрганизацииИнтеркампани.Организация = Организация Тогда
				Возврат "СПокупателем";
			ИначеЕсли ОрганизацииИнтеркампани.ОрганизацияПолучатель = Организация Тогда
				Возврат "СПоставщиком";
			Иначе
				Возврат "Прочее";
			КонецЕсли;
			
		Иначе
			Возврат "Прочее";
		КонецЕсли;
	Иначе
		Возврат ВидДоговораПоУмолчанию;
	КонецЕсли;
КонецФункции
Функция ВидДоговораПоТипуДоговораИнтеркампани(Организация, ДоговорИнтеркампани)
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорИнтеркампани,
		"Организация, ОрганизацияПолучатель, ТипДоговора");
	
	Если ПараметрыДоговора.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа Тогда
		Если ПараметрыДоговора.Организация = Организация Тогда
			ВидДоговора = "СПокупателем";
		ИначеЕсли ПараметрыДоговора.ОрганизацияПолучатель = Организация Тогда
			ВидДоговора = "СПоставщиком";
		Иначе
			ВидДоговора = "Прочее";
		КонецЕсли;
	ИначеЕсли ПараметрыДоговора.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.Комиссионный Тогда
		Если ПараметрыДоговора.Организация = Организация Тогда
			ВидДоговора = "СКомиссионером";
		ИначеЕсли ПараметрыДоговора.ОрганизацияПолучатель = Организация Тогда
			ВидДоговора = "СКомитентом";
		Иначе
			ВидДоговора = "Прочее";
		КонецЕсли;
	Иначе
		ВидДоговора = "Прочее";
	КонецЕсли;
	
	Возврат ВидДоговора;
КонецФункции
Функция ВидКИПартнераПоВидуКИКонтрагента(ВидКИКонтрагента, ИспользоватьПартнеровКакКонтрагентов)
	ВидКиПартнера = Неопределено;
	
	Если ВидКИКонтрагента = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
		ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
	ИначеЕсли ВидКИКонтрагента = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
		ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	ИначеЕсли ВидКИКонтрагента = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
		ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	ИначеЕсли ЗначениеЗаполнено(ВидКИКонтрагента) И ИспользоватьПартнеровКакКонтрагентов Тогда
		Если Не (ОбщегоНазначения.СсылкаСуществует(ВидКИКонтрагента)
			И ТипЗнч(ВидКИКонтрагента) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Поиск или создание прочих видов КИ.
		ЗначенияРеквизитовВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидКИКонтрагента, "Тип, Наименование");
		
		ВидКИПартнера = ВидПользовательскойКонтактнойИнформации(ЗначенияРеквизитовВидаКИ.Наименование,
			Справочники.ВидыКонтактнойИнформации.СправочникПартнеры,
			ЗначенияРеквизитовВидаКИ.Тип);
		
	КонецЕсли;
	
	Возврат ВидКИПартнера;
КонецФункции
Функция ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ)
	ТекВидКИ = Неопределено;
		
	ПрефиксПользовательскойКИ = "ПользовательскаяКИ";
			
	Если СтрНачинаетсяС(ВидКИСтрокой, ПрефиксПользовательскойКИ) Тогда
	
		ИмяТипаКИ = СтрЗаменить(ВидКИСтрокой, ПрефиксПользовательскойКИ, "");
	
		ТекВидКИ  = ВидПользовательскойКонтактнойИнформации(НаименованиеКИ,
			ГруппаВидовКИ,
			Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ]);
		
	Иначе
	
		СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
		
		Если ГруппаВидовКИ = СправочникВидыКИ.СправочникКонтрагенты Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = СправочникВидыКИ.EmailКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ПочтовыйАдресКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ФактАдресКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ЮрАдресКонтрагента;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонКонтрагента;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = СправочникВидыКИ.ФаксКонтрагенты;
			КонецЕсли;
		ИначеЕсли ГруппаВидовКИ = СправочникВидыКИ.СправочникОрганизации Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = СправочникВидыКИ.EmailОрганизации;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ПочтовыйАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ФактАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ЮрАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонОрганизации;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = СправочникВидыКИ.ФаксОрганизации;
			КонецЕсли;
		ИначеЕсли ГруппаВидовКИ = СправочникВидыКИ.СправочникФизическиеЛица Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = СправочникВидыКИ.EMailФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.АдресДляИнформированияФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.АдресМестаПроживанияФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.АдресПоПропискеФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонМобильныйФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонДомашнийФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонРабочийФизическиеЛица;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекВидКИ;
КонецФункции
Функция ВидПользовательскойКонтактнойИнформации(НаименованиеКИ, ГруппаВидовКИ, ТипКИ)
	ТекВидКИ = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В ИЕРАРХИИ(&ГруппаВидовКИ)
	|	И ВидыКонтактнойИнформации.Наименование = &Наименование
	|	И ВидыКонтактнойИнформации.Тип = &ТипКИ
	|	И ВидыКонтактнойИнформации.Используется = ИСТИНА
	|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ");
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Наименование",  НаименованиеКИ);
	Запрос.УстановитьПараметр("ТипКИ",         ТипКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекВидКИ = Выборка.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекВидКИ) Тогда
		ТекВидКИ = НовыйВидКонтактнойИнформации(НаименованиеКИ, ГруппаВидовКИ, ТипКИ);
	КонецЕсли;
	
	Возврат ТекВидКИ;
КонецФункции
Функция ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации)
	Если АлгоритмКонвертации = "ОплатаОтПокупателя"
		Или АлгоритмКонвертации = "ОплатаОтПокупателяИнтеркампани" Тогда
		Возврат "СПокупателем";
	ИначеЕсли АлгоритмКонвертации = "ВозвратОтПоставщика"
		Или АлгоритмКонвертации = "ВозвратОтПоставщикаИнтеркампани" Тогда
		Возврат "СПоставщиком";
	ИначеЕсли АлгоритмКонвертации = "ПрочееПоступление_ПрочиеРасчетыСКонтрагентами"
		Или АлгоритмКонвертации = "ПрочееПоступление_ПрочиеРасчетыСКонтрагентами"
		Или АлгоритмКонвертации = "КонвертацияВалюты_ПрочиеРасчетыСКонтрагентами"
		Или АлгоритмКонвертации = "Депозиты_ПрочиеРасчетыСКонтрагентами" Тогда
		Возврат "Прочее";
	ИначеЕсли АлгоритмКонвертации = "ПрочееПоступление_РасчетыПоКредитамИЗаймам" Тогда
		Возврат "КредитыИЗаймы";
	ИначеЕсли АлгоритмКонвертации = "Кредиты_РасчетыПоКредитамИЗаймам" Тогда
		Возврат "КредитыИЗаймы";
	КонецЕсли;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Свойство КАК Свойство,
	|	Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеИБДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	
	
	// Дополнительные сведения типа Булево хранятся в регистре сведений "ДополнительныеСведения"
	// только со значением Истина. В связи с этим значения Ложь необходимо выгружать принудительно.
	Ссылка = ДанныеИБ.Ссылка;
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	
	ВидОбъектаМетаданных = ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка);
	
	ЯвляетсяГруппой = Ложь;
	Если ВидОбъектаМетаданных = "Справочник" Или ВидОбъектаМетаданных = "ПланВидовХарактеристик" Тогда
		Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(Ссылка) Тогда
			ЯвляетсяГруппой = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТЗДопСведенияБулево = ПолучитьТЗДопСведенияБулево(КомпонентыОбмена);
	Если НЕ ЯвляетсяГруппой Тогда
		ИмяЭлемента = ВидОбъектаМетаданных + "_" + ИмяОбъектаМетаданных;
		СтрокаДопСвойство = ТЗДопСведенияБулево.Найти(ИмяЭлемента, "ИмяПредопределенныхДанных");
		Если НЕ СтрокаДопСвойство = Неопределено Тогда
			Если ДанныеИБДополнительныеРеквизиты.Найти(СтрокаДопСвойство.Свойство, "Свойство") = Неопределено Тогда
				СтрокаДопРеквизиты = ДанныеИБДополнительныеРеквизиты.Добавить();
				СтрокаДопРеквизиты.Свойство = СтрокаДопСвойство.Свойство;
				СтрокаДопРеквизиты.Значение = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	Если ТаблицаДопРеквизитов.КОличество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, Валюта, НаДату)
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, НаДату);
	
	ДанныеXDTO.Вставить("КурсВзаиморасчетов",      СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
КонецПроцедуры
Процедура ВыгрузитьКурсИКратностьДокумента(ДанныеXDTO, Валюта, НаДату)
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, НаДату);
	
	ДанныеXDTO.Вставить("КурсДокумента",      СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
КонецПроцедуры
Процедура ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO, Подразделение = Неопределено)
	Если Подразделение = Неопределено Тогда
		Подразделение = ДанныеИБ.Подразделение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		
		РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(Подразделение, ДанныеИБ.Организация);
		
		СтруктураДанныеПодразделения = Новый Структура(
			"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
			Строка(Подразделение),
			РегистрацияПодразделенияВНалоговомОргане);
		
		Инструкция = Новый Структура(
			"Значение, ИмяПКО",
			СтруктураДанныеПодразделения,
			"Справочник_Подразделения_ИзСтруктуры");
		
		ДанныеXDTO.Вставить("Подразделение", Инструкция);
		
	Иначе	
		ДанныеXDTO.Вставить("Подразделение", Неопределено);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена,  ДанныеИБ, ДанныеXDTO, ИмяРеквизитаХраненияПодразделения)
	ДанныеXDTO.Вставить("Подразделение", Неопределено);
	Если ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		ИсточникДанныхОПодразделении = ДанныеИБ[ИмяРеквизитаХраненияПодразделения];
		Если ЗначениеЗаполнено(ИсточникДанныхОПодразделении) Тогда
		    СоответствиеДляПолученияПодразделений = Неопределено;
		    ТекПодразделение = Неопределено;
		    ДополнитьСоответствие = Истина;
		    КомпонентыОбмена.ПараметрыКонвертации.Свойство("СоответствиеДляПолученияПодразделений", СоответствиеДляПолученияПодразделений);
		    Если СоответствиеДляПолученияПодразделений = Неопределено Тогда
		    	СоответствиеДляПолученияПодразделений = Новый Соответствие;
		    Иначе 
		    	ТекПодразделение = СоответствиеДляПолученияПодразделений.Получить(ИсточникДанныхОПодразделении);
		    КонецЕсли;
		    Если ТекПодразделение = Неопределено Тогда
		    	ТекПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанныхОПодразделении, "Подразделение");
		    Иначе
		    	ДополнитьСоответствие = Ложь;
		    КонецЕсли;
		    ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO, ТекПодразделение);
			Если ДополнитьСоответствие Тогда
				СоответствиеДляПолученияПодразделений.Вставить(ИсточникДанныхОПодразделении, ТекПодразделение);
				КомпонентыОбмена.ПараметрыКонвертации.Вставить("СоответствиеДляПолученияПодразделений", СоответствиеДляПолученияПодразделений);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО") Тогда
		// Выгрузка данных о ФИО.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Период КАК НачалоПериода,
		|	Фамилия,
		|	Имя,
		|	Отчество
		|ИЗ РегистрСведений.ФИОФизическихЛиц
		|ГДЕ ФизическоеЛицо = &ФизическоеЛицо";
		Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации, КомпонентыОбмена)
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	РасшифровкаПлатежаРасширенная = ДанныеИБ.ДополнительныеСвойства.РасшифровкаПлатежаРасширенная;
	
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
		
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("Заказ");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	ТабРП.Колонки.Добавить("ВидРасчетовРасширенный");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	
	РП_ИБ = РасшифровкаПлатежаРасширенная.Выгрузить();
	
	Если Найти(АлгоритмКонвертации, "ОплатаОтПокупателя") > 0
		Или Найти(АлгоритмКонвертации, "ВозвратОтПоставщика") > 0
		Или АлгоритмКонвертации = "Кредиты_РасчетыПоКредитамИЗаймам"
		Или АлгоритмКонвертации = "Депозиты_ПрочиеРасчетыСКонтрагентами" Тогда
		// Многострочная расшифровка платежа.
	
		Для Каждого СтрокаРП_ИБ Из РП_ИБ Цикл
			СтрокаРП = ТабРП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРП, СтрокаРП_ИБ,
				"СтатьяДДС, Сумма, СуммаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов");
			
			// ВидРасчетовРасширенный и СчетУчетаРасчетовСКонтрагентом
			ЗаполнитьЗначенияСвойств(СтрокаРП, СтрокаРП_ИБ, "ВидРасчетовРасширенный, СчетУчетаРасчетовСКонтрагентом");
				
			Если Найти(АлгоритмКонвертации, "ОплатаОтПокупателя") > 0
				Или Найти(АлгоритмКонвертации, "ВозвратОтПоставщика") > 0 Тогда
				// Сумма НДС и СтавкаНДС
				ЗаполнитьЗначенияСвойств(СтрокаРП, СтрокаРП_ИБ, "СуммаНДС, СтавкаНДС");
			КонецЕсли;
			
			Если АлгоритмКонвертации = "Кредиты_РасчетыПоКредитамИЗаймам"
				Или АлгоритмКонвертации = "Депозиты_ПрочиеРасчетыСКонтрагентами" Тогда
				
				СтрокаРП.Договор = Новый Структура("Значение, ИмяПКО", 
					СтрокаРП_ИБ.ДоговорКредитаДепозита, "Справочник_ДоговорыКредитовИДепозитов_Отправка");
			Иначе
				ОснованиеИнтеркампани = Ложь;
				Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
					ТипЗаказа = ТипЗнч(СтрокаРП_ИБ.Заказ);
					
					ОснованиеИнтеркампани = (ТипЗаказа = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
						Или ТипЗаказа = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
						Или ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
						Или ТипЗаказа = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СтрокаРП_ИБ.Договор)
					И Не ОснованиеИнтеркампани Тогда
					
					СтрокаРП.Договор = СтрокаРП_ИБ.Договор;
				КонецЕсли;
				
				ДоговорСсылка = Неопределено;
				ВидДоговора   = "";
				РасчетыВУсловныхЕдиницах = Неопределено;
				
				Если Не ЗначениеЗаполнено(СтрокаРП.Договор) Тогда
					ДанныеОбъектаРасчетов = Новый Структура("Соглашение, Договор, Сделка");
					Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
						ЗаполнитьЗначенияСвойств(ДанныеОбъектаРасчетов, СтрокаРП_ИБ.Заказ);
					КонецЕсли;
					ДоговорСсылка = ДанныеОбъектаРасчетов.Договор;
					
					Если ЗначениеЗаполнено(ДоговорСсылка) И Не ОснованиеИнтеркампани Тогда
						СтрокаРП.Договор = ДоговорСсылка;
					Иначе
						Если Не ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ)
							И Не ЗначениеЗаполнено(ДанныеОбъектаРасчетов.Соглашение) Тогда
							
							Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
								ВидДоговора = "СПокупателем";
							Иначе
								ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(
									СтрокаРП_ИБ.Заказ,
									ДанныеОбъектаРасчетов.Соглашение,
									ДанныеИБ.ХозяйственнаяОперация);
							КонецЕсли;
						ИначеЕсли ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ)
							И ТипЗнч(СтрокаРП_ИБ.Заказ) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
							
							ВидДоговора = ВидДоговораПоТипуДоговораИнтеркампани(ДанныеИБ.Организация, СтрокаРП_ИБ.Заказ);
						Иначе
							ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(
								СтрокаРП_ИБ.Заказ,
								ДанныеОбъектаРасчетов.Соглашение,
								ДанныеИБ.ХозяйственнаяОперация);
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
							ВидДоговора = "Прочее";
						КонецЕсли;
						
						// Расчеты в условных единицах
						Если ЗначениеЗаполнено(ДанныеОбъектаРасчетов.Соглашение) Тогда
							РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеОбъектаРасчетов.Соглашение);
						Иначе
							РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = ВалютаРеглУчета
								И ДанныеИБ.Валюта <> СтрокаРП_ИБ.ВалютаВзаиморасчетов;
						КонецЕсли;
						
						ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
						ПараметрыПоУмолчанию.Контрагент = ДанныеXDTO.Контрагент;
						ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
						ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = СтрокаРП_ИБ.ВалютаВзаиморасчетов;
						ПараметрыПоУмолчанию.ВидДоговора = ВидДоговора;
						ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
						ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
						ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
						
						Заказ = Новый Структура("Заказ, Соглашение, Сделка", СтрокаРП_ИБ.Заказ, ДанныеОбъектаРасчетов.Соглашение, ДанныеОбъектаРасчетов.Сделка);
						СтрокаРП.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	
			// Заказ
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
				ИмяПКО = ИмяПКОДляОбъектаДанных(КомпонентыОбмена, СтрокаРП_ИБ.Заказ, ДанныеИБ.Организация);
				
				Если ЗначениеЗаполнено(ИмяПКО) Тогда
					СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Заказ, ИмяПКО);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли АлгоритмКонвертации = "ПрочееПоступление_РасчетыПоКредитамИЗаймам"
		Или АлгоритмКонвертации = "ПрочееПоступление_ПрочиеРасчетыСКонтрагентами"
		Или АлгоритмКонвертации = "КонвертацияВалюты_ПрочиеРасчетыСКонтрагентами" Тогда
		// Однострочная расшифровка платежа
		
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.КурсВзаиморасчетов = ДанныеШапки.Валюта_Курс;
		СтрокаРП.КратностьВзаиморасчетов = ДанныеШапки.Валюта_Кратность;
		СтрокаРП.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
		ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", СтрокаРП.Заказ, Неопределено, Неопределено);
		СтрокаРП.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена)
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств                       КАК СтатьяДДС,
	|	РасшифровкаПлатежа.Сумма                                               КАК Сумма,
	|	РасшифровкаПлатежа.СуммаНДС                                            КАК СуммаНДС,
	|	РасшифровкаПлатежа.СтавкаНДС                                           КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов                                 КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита                              КАК ДоговорКредитаДепозита,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА NULL
	|		ИНАЧЕ РасшифровкаПлатежа.Заказ
	|	КОНЕЦ                                                                  КАК Заказ,
	|	РасшифровкаПлатежа.Партнер                                             КАК Партнер,
	|	ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1)                                           КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1)                                      КАК КратностьВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов                                КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
	|			ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитСотруднику)
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|						ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга
	|								ТОГДА ""КраткосрочныеКредиты""
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов
	|								ИЛИ РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСКомиссии
	|								ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
	|						КОНЕЦ
	|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|						ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга
	|								ТОГДА ""ДолгосрочныеКредиты""
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов
	|								ИЛИ РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСКомиссии
	|								ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
	|				ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм)
	|				ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВкладСотрудника)
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|						ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга
	|								ТОГДА ""КраткосрочныеЗаймы""
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов
	|								ИЛИ РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСКомиссии
	|								ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
	|						КОНЕЦ
	|					КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|						ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга
	|								ТОГДА ""ДолгосрочныеЗаймы""
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов
	|								ИЛИ РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСКомиссии
	|								ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВидРасчетовРасширенный,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """"
	|				И &ЭтоУТ
	|			ТОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитСотруднику)
	|						ТОГДА ""58.03""
	|				КОГДА (РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
	|					ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм)
	|					ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВкладСотрудника))
	|					И РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи
	|						ТОГДА ""58.03""
	|				КОГДА (РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнутреннийЗайм)
	|						ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм)
	|						ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВкладСотрудника))
	|					ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга
	|								ТОГДА ВЫБОР
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|											ТОГДА ВЫБОР
	|													КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|														ТОГДА ""66.03""
	|													ИНАЧЕ ""66.23""
	|												КОНЕЦ
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|											ТОГДА ВЫБОР
	|													КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|														ТОГДА ""67.03""
	|													ИНАЧЕ ""67.23""
	|												КОНЕЦ
	|								КОНЕЦ
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов
	|									ИЛИ РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСКомиссии
	|								ТОГДА ВЫБОР
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|											ТОГДА ВЫБОР
	|													КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|														ТОГДА ""66.04""
	|													ИНАЧЕ ""66.43""
	|												КОНЕЦ
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|											ТОГДА ВЫБОР
	|													КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|														ТОГДА ""67.04""
	|													ИНАЧЕ ""67.43""
	|												КОНЕЦ
	|								КОНЕЦ
	|					КОНЕЦ
	|				КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке)
	|					ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга
	|								ТОГДА ВЫБОР
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|											ТОГДА ВЫБОР
	|													КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|														ТОГДА ""66.01""
	|													ИНАЧЕ ""66.21""
	|												КОНЕЦ
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|											ТОГДА ВЫБОР
	|													КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|														ТОГДА ""67.01""
	|													ИНАЧЕ ""67.21""
	|												КОНЕЦ
	|								КОНЕЦ
	|							КОГДА РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов
	|									ИЛИ РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСКомиссии
	|								ТОГДА ВЫБОР
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный)
	|											ТОГДА ВЫБОР
	|													КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|														ТОГДА ""66.02""
	|													ИНАЧЕ ""66.22""
	|												КОНЕЦ
	|										КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный)
	|											ТОГДА ВЫБОР
	|													КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|														ТОГДА ""67.02""
	|													ИНАЧЕ ""67.22""
	|												КОНЕЦ
	|								КОНЕЦ
	|					КОНЕЦ
	|				КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ДепозитВБанке)
	|					ИЛИ РасшифровкаПлатежа.ДоговорКредитаДепозита.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ДепозитВБанкеСКапитализацией)
	|					ТОГДА ВЫБОР
	|							КОГДА РасшифровкаПлатежа.ДоговорКредитаДепозита.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|								ТОГДА ""55.03""
	|							ИНАЧЕ ""55.23""
	|						КОНЕЦ
	|		КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентом
	|ИЗ
	|	Документ.%ИмяДокумента%.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|		ПО РасшифровкаПлатежа.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяДокумента%", ДанныеИБ.Ссылка.Метаданные().Имя);
	
	Запрос.УстановитьПараметр("Ссылка",          ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ЭтоУТ",           ЭтоУТ());
	Запрос.УстановитьПараметр("Дата",            ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	РП_ИБ = Запрос.Выполнить().Выгрузить();
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("Заказ");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	ТабРП.Колонки.Добавить("ВидРасчетовРасширенный");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	
	Для Каждого СтрокаРП_ИБ Из РП_ИБ Цикл
		СтрокаРП = ТабРП.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРП, СтрокаРП_ИБ,
			"СтатьяДДС,Сумма,СуммаВзаиморасчетов,КурсВзаиморасчетов,КратностьВзаиморасчетов");
		Если ДанныеXDTO.ВидРасчетов = "СПоставщиком"
			Или ДанныеXDTO.ВидРасчетов = "СПокупателем" Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРП, СтрокаРП_ИБ,"СтавкаНДС,СуммаНДС");
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаРП.СтатьяДДС) Тогда
			СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		// Договор
		ДоговорСсылка = СтрокаРП_ИБ.Договор;
		
		Если Не ЗначениеЗаполнено(ДоговорСсылка)
			И ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ)
			И СтрокаРП_ИБ.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
	
			ДоговорСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРП_ИБ.Заказ, "Договор");
		КонецЕсли;
		
		ОснованиеИнтеркампани = Ложь;
		Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
			
			ТипЗаказа = ТипЗнч(СтрокаРП_ИБ.Заказ);
			
			ОснованиеИнтеркампани = (ТипЗаказа = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
				Или ТипЗаказа = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
				Или ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
				Или ТипЗаказа = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
			
		КонецЕсли;
	
		Если ЭтоХозяйственнаяОперацияРасчетыПоКредитамЗаймам(ДанныеИБ.ХозяйственнаяОперация)
			Или ЭтоХозяйственнаяОперацияРасчетыПоДепозитам(ДанныеИБ.ХозяйственнаяОперация) Тогда
			
			СтрокаРП.Договор = Новый Структура("Значение, ИмяПКО",
				СтрокаРП_ИБ.ДоговорКредитаДепозита, "Справочник_ДоговорыКредитовИДепозитов_Отправка");
			
		ИначеЕсли ЗначениеЗаполнено(ДоговорСсылка) И Не ОснованиеИнтеркампани Тогда
			
			СтрокаРП.Договор = ДоговорСсылка
			
		Иначе
			
			ТекРасчетыУЕ   = Неопределено;
			ТекВидДоговора = "";
			Соглашение     = Неопределено;
			
			Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				
				ТекВидДоговора = "СПоставщиком";
				
				Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
					// Определяем тип значения, он может быть одним из следующих:
					//	- ДокументСсылка.ПередачаТоваровМеждуОрганизациями;
					//	- ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями;
					//	- СправочникСсылка.ДоговорыМеждуОрганизациями.
					Если ТипЗнч(СтрокаРП_ИБ.Заказ) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
						ТекВидДоговора = ?(ДанныеИБ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРП_ИБ.Заказ, "Организация"), "СКомиссионером", "СКомитентом");
						ТекРасчетыУЕ = Ложь;
					ИначеЕсли ТипЗнч(СтрокаРП_ИБ.Заказ) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
						ВидДоговора = ВидДоговораПоТипуДоговораИнтеркампани(ДанныеИБ.Организация, СтрокаРП_ИБ.Заказ);
					КонецЕсли;
				КонецЕсли;
					
			ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
					
				Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ)
					И ТипЗнч(СтрокаРП_ИБ.Заказ) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
					
					ВидДоговора = ВидДоговораПоТипуДоговораИнтеркампани(ДанныеИБ.Организация, СтрокаРП_ИБ.Заказ);
					
				Иначе
					
					ТекВидДоговора = "СПокупателем";
					
				КонецЕсли;
				
			ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю Тогда
				ТекВидДоговора = "Прочее";
			ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
				Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
				
				Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ)
					И СтрокаРП_ИБ.Заказ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено Тогда
					
					Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРП_ИБ.Заказ, "Соглашение");
				КонецЕсли;
				
				ТекВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(СтрокаРП_ИБ.Заказ, Соглашение, ДанныеИБ.ХозяйственнаяОперация);
				Если ТекВидДоговора = "СКомитентом"
					Или ТекВидДоговора = "СКомиссионером" Тогда
					ТекРасчетыУЕ = Ложь;
				Иначе
					Если ЗначениеЗаполнено(Соглашение) Тогда
						ТекРасчетыУЕ = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ДанныеXDTO.ВидРасчетов = "Прочее" Тогда
				ТекВидДоговора = "Прочее";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекВидДоговора) Тогда
				ТекВидДоговора = "СПоставщиком";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекРасчетыУЕ) Тогда
				Если ТекВидДоговора = "СКомитентом"
					Или ТекВидДоговора = "СКомиссионером" Тогда
					ТекРасчетыУЕ = Ложь;
				Иначе
					ТекРасчетыУЕ = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить()
						И ДанныеИБ.Валюта <> СтрокаРП_ИБ.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			ВалютаВзаиморасчетов = СтрокаРП_ИБ.ВалютаВзаиморасчетов;
			Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
				ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
			КонецЕсли;
			
			ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
			ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
			ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
			ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			ПараметрыПоУмолчанию.ВидДоговора = ТекВидДоговора;
			ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
			ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
			ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = ТекРасчетыУЕ;
			
			Заказ = Новый Структура("Заказ, Соглашение, Сделка", СтрокаРП_ИБ.Заказ, Соглашение, Неопределено);
			СтрокаРП.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		КонецЕсли;
		// Заказ
		Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
			ИмяПКО = ИмяПКОДляОбъектаДанных(КомпонентыОбмена, СтрокаРП_ИБ.Заказ, ДанныеИБ.Организация);
		    ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ИмяПКО, "ИмяПКО");
		
			Если ЗначениеЗаполнено(ИмяПКО) и НЕ ПравилоКонвертации = Неопределено Тогда
				СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Заказ, ИмяПКО);
			КонецЕсли;
		КонецЕсли;
		// ВидРасчетовРасширенный и СчетУчетаРасчетовСКонтрагентом
		СтрокаРП.ВидРасчетовРасширенный = СтрокаРП_ИБ.ВидРасчетовРасширенный;
		СтрокаРП.СчетУчетаРасчетовСКонтрагентом = СтрокаРП_ИБ.СчетУчетаРасчетовСКонтрагентом;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуПлатежаКонвертацияВалюты(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ДатаОперации)
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	
	ВалютаРегл          = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегл);
	
	ВалютаОперации = ?(ДанныеИБ.Валюта = ВалютаРегл, ДанныеИБ.ВалютаКонвертации, ДанныеИБ.Валюта);
	ПараметрыКурсаЦБНаДатуОперации = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаОперации, ДатаОперации);
	
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС            = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРП.ВалютаКонвертации    = ДанныеИБ.ВалютаКонвертации;
	СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперации.Кратность;
	СтрокаРП.КурсКонвертации      = ДанныеИБ.КурсКонвертации * СтрокаРП.КратностьКонвертации;
	СтрокаРП.Сумма                = ДанныеИБ.СуммаДокумента;
	СтрокаРП.СуммаВал             = ДанныеИБ.СуммаКонвертации;
	
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперации.Курс;
	
	// Договор
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Контрагент  = ДанныеИБ.Контрагент;
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
	ПараметрыПоУмолчанию.Дата        = ДанныеИБ.Дата;
	ПараметрыПоУмолчанию.Номер       = ДанныеИБ.Номер;
	
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.ВалютаКонвертации;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	
	СтрокаРП.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуПлатежаПрочиеДоходы(ДанныеИБ, ДанныеXDTO)
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СтатьяДоходов");
	ТабРасшифровка.Колонки.Добавить("СчетДоходов");
	
	Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
	
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС     = Строка.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма         = Строка.Сумма;
		НоваяСтрока.СтатьяДоходов = Строка.СтатьяДоходов;
		Если ЭтоУТ() Тогда
			НоваяСтрока.СчетДоходов = СчетУчетаРасчетовПрочихОперацийДДС(Новый Структура("СтатьяДДС, СтатьяДоходовРасходов", 
														Строка.СтатьяДвиженияДенежныхСредств, Строка.СтатьяДоходов));
		КонецЕсли;
	
	КонецЦикла;
	 
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуПлатежаПрочиеРасходы(ДанныеИБ, ДанныеXDTO)
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СтатьяРасходов");
	ТабРасшифровка.Колонки.Добавить("СчетРасходов");
	
	Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
		
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС      = Строка.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма          = Строка.Сумма;
		НоваяСтрока.СтатьяРасходов = Строка.СтатьяРасходов;
		
		Если ЭтоХозяйственнаяОперацияРасчетыПоДепозитам(ДанныеИБ.ХозяйственнаяОперация) Тогда
			НоваяСтрока.СчетРасходов = "55.03";
		ИначеЕсли ЭтоУТ() Тогда
			НоваяСтрока.СчетРасходов = СчетУчетаРасчетовПрочихОперацийДДС(Новый Структура("СтатьяДДС, СтатьяДоходовРасходов",  
																Строка.СтатьяДвиженияДенежныхСредств, Строка.СтатьяРасходов));
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ВыгрузитьСпособВыставленияСчетаФактуры(ДанныеXDTO, ВЭлектронномВиде)
	Если ВЭлектронномВиде Тогда
		ДанныеXDTO.Вставить("СпособВыставления", "ВЭлектронномВиде");
	Иначе
		ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	КонецЕсли;
КонецПроцедуры
Функция ВыгрузитьТаблицуЗадолженности(ИмяТЧ, Ссылка, ТекКонтрагент, ТекОрганизация, ОрганизацияДокумента = Неопределено, КомпонентыОбмена)
	ТекстЗапроса = "ВЫБРАТЬ
		|	Задолженность.Заказ КАК Заказ,
		|	Задолженность.ТипРасчетов КАК ТипРасчетов,
		|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	Задолженность.СуммаРегл КАК Сумма,
		|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЕстьNULL(КурсыВалют.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕстьNULL(КурсыВалют.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ Документ.%1.%2 КАК Задолженность
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок) КАК КурсыВалют
		|	ПО Задолженность.ВалютаВзаиморасчетов = КурсыВалют.Валюта 
		|ГДЕ
		|	Задолженность.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СписаниеЗадолженности") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Задолженность.СуммаРегл КАК",
			"ВЫРАЗИТЬ(Задолженность.Сумма * ЕСТЬNULL(КурсыВалют.Курс, 1) / ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК ЧИСЛО(15, 2)) КАК");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Задолженность.СуммаВзаиморасчетов КАК", "Задолженность.Сумма КАК");
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, Ссылка.Метаданные().Имя, ИмяТЧ);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДок", Ссылка.Дата);
	ДанныеЗадолженность = Запрос.Выполнить().Выгрузить();
	
	ДанныеЗадолженность.Колонки.Добавить("Договор");
	ДанныеЗадолженность.Колонки.Добавить("ДокументРасчетов");
	
	Для Каждого СтрокаТаблицы Из ДанныеЗадолженность Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			
			ТипЗаказа = ТипЗнч(СтрокаТаблицы.Заказ);
			
			Если ТипЗаказа = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				СтрокаТаблицы.Договор = СтрокаТаблицы.Заказ;
			Иначе
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					ТекДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Договор");
					Если ТипЗнч(ТекДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						СтрокаТаблицы.Договор = ТекДоговор;
					КонецЕсли;
				КонецЕсли;
				
				ИмяПКО = ИмяПКОДляОбъектаДанных(КомпонентыОбмена, СтрокаТаблицы.Заказ, ТекКонтрагент);
				
				Если Не ПустаяСтрока(ИмяПКО) Тогда
					СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Заказ, ИмяПКО);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
			Продолжить;
		КонецЕсли;
		
		ИнвертироватьПараметрыДоговора = Ложь;
		РасчетыВУсловныхЕдиницах       = Ложь;
		ВидДоговора                    = "";
		
		Если ЗначениеЗаполнено(ОрганизацияДокумента)
			И ОрганизацияДокумента <> ТекОрганизация Тогда
			ИнвертироватьПараметрыДоговора = Истина;
		КонецЕсли;
		
		ПолучитьПараметрыДоговораПоЗаказу(СтрокаТаблицы.Заказ, СтрокаТаблицы.ТипРасчетов,
			ВидДоговора, РасчетыВУсловныхЕдиницах, ИнвертироватьПараметрыДоговора);
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Организация              = ТекОрганизация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = СтрокаТаблицы.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		ПараметрыПоУмолчанию.ВидДоговора              = ВидДоговора; 
		ПараметрыПоУмолчанию.Контрагент               = ТекКонтрагент;
		
		СтрокаТаблицы.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, СтрокаТаблицы.Заказ, Ссылка);
		
	КонецЦикла;
	
	ДанныеЗадолженность.Колонки.Удалить("Заказ");
	ДанныеЗадолженность.Колонки.Удалить("ТипРасчетов");
	
	Возврат ДанныеЗадолженность;
КонецФункции
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура_Отправка";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ИмяПКО = "Справочник_Банки";
		ИмяПКОГруппа = "Справочник_БанкиГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Склады") Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
		ИмяПКОГруппа = "Справочник_СкладыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	ИначеЕсли ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		ИмяПКО = "Справочник_СтатьиДоходов";
	ИначеЕсли ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		ИмяПКО = "Справочник_СтатьиРасходов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ВидыЦен") Тогда
		ИмяПКО = "Справочник_ТипыЦен";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа_Отправка";
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ Из ДанныеИБДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Свойство) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			СтруктураДанныеПодразделения = Новый Структура(
				"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
				Строка(СтрокаТЧ.Значение), Неопределено);
	
			Инструкция = Новый Структура(
				"Значение, ИмяПКО",
				СтруктураДанныеПодразделения,
				"Справочник_Подразделения_ИзСтруктуры");
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = Инструкция;
			Продолжить;
		КонецЕсли;
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли; 	
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
	КонецЦикла;
КонецПроцедуры
Процедура ВыполнитьПроведениеДокументовВводаОстатков(КомпонентыОбмена)
	ДокументыДляОтложенногоПроведения = КомпонентыОбмена.ДокументыДляОтложенногоПроведения;
	Если ДокументыДляОтложенногоПроведения.Количество() = 0 Тогда
		Возврат // Нет документов в очереди.
	КонецЕсли;
	
	МассивУдаляемыхСтрок = Новый Массив;
	// Проведение ввода остатков выполняем особым образом.
	Для Каждого СтрокаТаблицы Из ДокументыДляОтложенногоПроведения Цикл
		
		Если СтрокаТаблицы.ДокументСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТаблицы.ДокументСсылка) = Тип("ДокументСсылка.ВводОстатков")
			Тогда
		
			ОбменДаннымиXDTOСервер.ВыполнитьПроведениеДокументаПриЗагрузке(КомпонентыОбмена, Объект, Истина);
			
			Если Не Объект.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ДокументыДляОтложенногоПроведения.Удалить(УдаляемаяСтрока);
	КонецЦикла;
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Функция ДанныеКонтрагентаПоИсторическимПолямПоиска(ДанныеXDTO)
	КлючевыеСвойства = Неопределено;
	Если Не ДанныеXDTO.Свойство("КлючевыеСвойства", КлючевыеСвойства) Тогда
		КлючевыеСвойства = ДанныеXDTO;
	КонецЕсли;
	
	// ИНН+КПП
	Если (КлючевыеСвойства.Свойство("ИНН") И ЗначениеЗаполнено(КлючевыеСвойства.ИНН))
		И (КлючевыеСвойства.Свойство("КПП") И ЗначениеЗаполнено(КлючевыеСвойства.КПП)) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК КонтрагентыИсторияКПП
		|		ПО (КонтрагентыИсторияКПП.Ссылка = Контрагенты.Ссылка)
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И КонтрагентыИсторияКПП.КПП = &КПП
		|	И КонтрагентыИсторияКПП.КПП <> Контрагенты.КПП");
		Запрос.УстановитьПараметр("ИНН", КлючевыеСвойства.ИНН);
		Запрос.УстановитьПараметр("КПП", КлючевыеСвойства.КПП);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Новый Структура("КПП");
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// НаименованиеПолное
	Если КлючевыеСвойства.Свойство("НаименованиеПолное")
		И ЗначениеЗаполнено(КлючевыеСвойства.НаименованиеПолное) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияНаименований КАК КонтрагентыИсторияНаименований
		|		ПО (КонтрагентыИсторияНаименований.Ссылка = Контрагенты.Ссылка)
		|ГДЕ
		|	КонтрагентыИсторияНаименований.НаименованиеПолное = &НаименованиеПолное
		|	И КонтрагентыИсторияНаименований.НаименованиеПолное <> Контрагенты.НаименованиеПолное");
		Запрос.УстановитьПараметр("НаименованиеПолное", КлючевыеСвойства.НаименованиеПолное);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Новый Структура("НаименованиеПолное");
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Процедура ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяСвойстваXDTO = "Валюта", ИмяДопСвойства = "Валюта")
	Если ДанныеXDTO.Свойство(ИмяСвойстваXDTO)
		И ЗначениеЗаполнено(ДанныеXDTO[ИмяСвойстваXDTO]) Тогда
		
		Если ДанныеXDTO[ИмяСвойстваXDTO].Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяДопСвойства, Новый Структура("Значение, ИмяПКО", ДанныеXDTO[ИмяСвойстваXDTO], ИмяПКО));
	
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьВалютуВРасшифровкуПлатежа(СтруктураДанныхСтроки, СтрокаXDTO)
	ВалютаВзаиморасчетов = СтрокаXDTO.ВалютаВзаиморасчетов;
	Если ТипЗнч(ВалютаВзаиморасчетов) = Тип("Структура")
		И ВалютаВзаиморасчетов.Свойство("Ссылка") = Ложь Тогда
		ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
	Иначе
		ИмяПКО = "Справочник_Валюты";
	КонецЕсли;
	Инструкция = Новый Структура("Значение, ИмяПКО", ВалютаВзаиморасчетов, ИмяПКО);
	СтруктураДанныхСтроки.Вставить("ВалютаВзаиморасчетов", Инструкция);
КонецПроцедуры
Процедура ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяСвойстваXDTO = "Договор")
	Если ДанныеXDTO.Свойство(ИмяСвойстваXDTO) И ЗначениеЗаполнено(ДанныеXDTO[ИмяСвойстваXDTO]) Тогда
		ЗначениеСвойстваXDTO = ДанныеXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("Структура")
			И ЗначениеСвойстваXDTO.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Договор", Новый Структура("Значение, ИмяПКО", ЗначениеСвойстваXDTO, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДоговорВРасшифровкуПлатежа(ЗаполнятьДоговор, СтруктураДанныхСтроки, СтрокаXDTO, ИмяСвойства = "")
	Если НЕ ЗаполнятьДоговор Тогда
		Возврат;
	КонецЕсли;
		
	Договор = СтрокаXDTO.Договор;
	Если ТипЗнч(Договор) = Тип("Структура")
		И Договор.Свойство("Ссылка") = Ложь Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
	Иначе
		ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
	КонецЕсли;
	Инструкция = Новый Структура("Значение, ИмяПКО", Договор, ИмяПКО);
	СтруктураДанныхСтроки.Вставить("Заказ", Инструкция);
	// В некоторых документах одно и то же значение необходимо заполнить в 2-х свойствах.
	Если ИмяСвойства <> "" Тогда
		СтруктураДанныхСтроки.Вставить(ИмяСвойства, Инструкция);
	КонецЕсли;
КонецПроцедуры
Функция ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ = Неопределено, ДанныеИБ = Неопределено)
	// Функция формирует и возвращает инструкция для выгрузки договора
	// по полученным параметрам и настройкам узла плана обмена.
	//
	// Функция, по сформированной инструкции, выполняет принудительную выгрузку договора в файл обмена.
	//
	// Перед вызовом этой функции выполняется проверка наличия договора в выгружаемом документе
	// или в объекте взаиморасчетов, если договор не найден, то выполняется вызов этой функции.
	
	СтруктураДанныеДоговора = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ДоговорЗаполнен = Ложь;
	СтруктураДанныеДоговора.ВидДоговора = ПараметрыПоУмолчанию.ВидДоговора;
	
	Если ЗначениеЗаполнено(Заказ)
		И ДанныеИБ <> Неопределено
		И Не ДопАналитикаПоДоговорам(КомпонентыОбмена).ДоговорВДоговор Тогда
		Если ТипЗнч(Заказ) = Тип("Структура") Тогда
			// Если в документе соглашение и заказ - 2 разных реквизита, то значения этих реквизитов передаются в структуре:
			// "Заказ" - Ссылка на Заказ клиента (поставщику).
			// "Соглашение" - Ссылка на Соглашение с клиентом (поставщиком).
			// "Сделки" - Ссылка на Сделку с клиентом.
			ЗаказСсылка      = Неопределено;
			СоглашениеСсылка = Неопределено;
			СделкаСсылка     = Неопределено;
			
			ЭтоЗаказ      = Заказ.Свойство("Заказ", ЗаказСсылка) И ЗначениеЗаполнено(ЗаказСсылка);
			ЭтоСоглашение = Заказ.Свойство("Соглашение", СоглашениеСсылка) И ЗначениеЗаполнено(СоглашениеСсылка);
			ЭтоСделка     = Заказ.Свойство("Сделка", СделкаСсылка) И ЗначениеЗаполнено(СделкаСсылка);
		Иначе
			// Подразумевается, что реквизит выгружаемого документа "Заказ" - имеет составной тип
			// и может быть Заказом, Соглашением, Сделкой или другим видом документа/справочника,
			// помимо этого у объекта, указанного в этом реквизите могут быть реквизиты "Соглашение" и/или "Сделка".
			ЗаказСсылка      = Заказ;
			СоглашениеСсылка = Заказ;
			СделкаСсылка     = Заказ;
			
			ЭтоЗаказ = ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКлиента")
				Или ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПоставщику");
			
			РеквизитыЗаказа = Новый Массив;
			Если Заказ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено Тогда
				РеквизитыЗаказа.Добавить("Соглашение");
			КонецЕсли;
			Если Заказ.Метаданные().Реквизиты.Найти("Сделка") <> Неопределено Тогда
				РеквизитыЗаказа.Добавить("Сделка");
			КонецЕсли;
			
			Если РеквизитыЗаказа.Количество() > 0 Тогда
				СтруктураЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, РеквизитыЗаказа);
			Иначе
				СтруктураЗаказа = Новый Структура;
			КонецЕсли;
			
			ЭтоСоглашение = ТипЗнч(Заказ) = Тип("СправочникСсылка.СоглашенияСКлиентами")
				Или ТипЗнч(Заказ) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
				Или (СтруктураЗаказа.Свойство("Соглашение", СоглашениеСсылка) И ЗначениеЗаполнено(СоглашениеСсылка));
				
			ЭтоСделка = ТипЗнч(Заказ) = Тип("СправочникСсылка.СделкиСКлиентами")
				Или (СтруктураЗаказа.Свойство("Сделка", СделкаСсылка) И ЗначениеЗаполнено(СделкаСсылка));
		КонецЕсли;
			
		Если ЭтоЗаказ Или ЭтоСоглашение Или ЭтоСделка Тогда
			Если ЭтоЗаказ И КомпонентыОбмена.ПараметрыКонвертации.НастройкиДопАналитикиПоДоговорам.ЗаказВДоговор Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
				
				Если ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗаказКлиента.Ссылка КАК Ссылка,
					|	ЗаказКлиента.Контрагент КАК Контрагент,
					|	ЗаказКлиента.Организация КАК Организация,
					|	ЗаказКлиента.Дата КАК Дата,
					|	ЗаказКлиента.Номер КАК Номер,
					|	ЗаказКлиента.Валюта КАК Валюта,
					|	ЗаказКлиента.Представление КАК Представление
					|ПОМЕСТИТЬ ВТ_Документ
					|ИЗ
					|	Документ.ЗаказКлиента КАК ЗаказКлиента
					|ГДЕ
					|	ЗаказКлиента.Ссылка = &Ссылка";
					Запрос.Выполнить();
				ИначеЕсли ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка КАК Ссылка,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Контрагент КАК Контрагент,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Организация КАК Организация,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Дата КАК Дата,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Номер КАК Номер,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта КАК Валюта,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Представление КАК Представление
					|ПОМЕСТИТЬ ВТ_Документ
					|ИЗ
					|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
					|ГДЕ
					|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = &Ссылка";
					Запрос.Выполнить();
				ИначеЕсли ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗаказПоставщику.Ссылка КАК Ссылка,
					|	ЗаказПоставщику.Контрагент КАК Контрагент,
					|	ЗаказПоставщику.Организация КАК Организация,
					|	ЗаказПоставщику.Дата КАК Дата,
					|	ЗаказПоставщику.Номер КАК Номер,
					|	ЗаказПоставщику.Валюта КАК Валюта,
					|	ЗаказПоставщику.Представление КАК Представление
					|ПОМЕСТИТЬ ВТ_Документ
					|ИЗ
					|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
					|ГДЕ
					|	ЗаказПоставщику.Ссылка = &Ссылка";
					Запрос.Выполнить();
				КонецЕсли;
				
				Если Запрос.МенеджерВременныхТаблиц.Таблицы.Количество() > 0 Тогда
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВТ_Документ.Ссылка КАК Ссылка,
					|	ВТ_Документ.Контрагент КАК Контрагент,
					|	ВТ_Документ.Организация КАК Организация,
					|	ВТ_Документ.Дата КАК Дата,
					|	ВТ_Документ.Номер КАК Номер,
					|	ВТ_Документ.Валюта КАК ВалютаВзаиморасчетов,
					|	ВТ_Документ.Представление КАК Наименование,
					|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
					|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
					|	КурсыВалютСрезПоследних.Валюта <> &ВалютаРегл КАК РасчетыВУсловныхЕдиницах
					|ИЗ
					|	ВТ_Документ КАК ВТ_Документ
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, ) КАК КурсыВалютСрезПоследних
					|		ПО ВТ_Документ.Валюта = КурсыВалютСрезПоследних.Валюта";
					Запрос.УстановитьПараметр("ДатаДок",    ДанныеИБ.Дата);
					Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегламентированногоУчета(КомпонентыОбмена));
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, Выборка);
						СтруктураДанныеДоговора.Наименование = ОбщегоНазначенияУТ.ПолучитьПредставлениеДокумента(ЗаказСсылка, Выборка.Номер, Выборка.Дата);
						ДоговорЗаполнен = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоСоглашение И ДопАналитикаПоДоговорам(КомпонентыОбмена).СоглашениеВДоговор Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				Запрос.УстановитьПараметр("Ссылка", СоглашениеСсылка);
				
				Если ТипЗнч(СоглашениеСсылка) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СоглашенияСКлиентами.Ссылка,
					|	СоглашенияСКлиентами.Контрагент,
					|	СоглашенияСКлиентами.Организация,
					|	СоглашенияСКлиентами.Дата,
					|	СоглашенияСКлиентами.Номер,
					|	СоглашенияСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
					|	СоглашенияСКлиентами.Наименование КАК Наименование,
					|	СоглашенияСКлиентами.Типовое КАК Типовое
					|ПОМЕСТИТЬ ВТ_Соглашение
					|ИЗ
					|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
					|ГДЕ
					|	СоглашенияСКлиентами.Ссылка = &Ссылка";
					Запрос.Выполнить();
				ИначеЕсли ТипЗнч(СоглашениеСсылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СоглашенияСПоставщиками.Ссылка,
					|	СоглашенияСПоставщиками.Контрагент,
					|	СоглашенияСПоставщиками.Организация,
					|	СоглашенияСПоставщиками.Дата,
					|	СоглашенияСПоставщиками.Номер,
					|	СоглашенияСПоставщиками.Валюта,
					|	СоглашенияСПоставщиками.Наименование,
					|	Ложь
					|ИЗ
					|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
					|ГДЕ
					|	СоглашенияСПоставщиками.Ссылка = &Ссылка";
					Запрос.Выполнить();
				КонецЕсли;
				
				Если Запрос.МенеджерВременныхТаблиц.Таблицы.Количество() > 0 Тогда
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
					|	СоглашенияСКлиентами.Контрагент КАК Контрагент,
					|	СоглашенияСКлиентами.Организация КАК Организация,
					|	СоглашенияСКлиентами.Дата КАК Дата,
					|	СоглашенияСКлиентами.Номер КАК Номер,
					|	СоглашенияСКлиентами.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
					|	СоглашенияСКлиентами.Наименование КАК Наименование,
					|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
					|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
					|	КурсыВалютСрезПоследних.Валюта <> &ВалютаРегл КАК РасчетыВУсловныхЕдиницах,
					|	СоглашенияСКлиентами.Типовое КАК Типовое
					|ИЗ
					|	ВТ_Соглашение КАК СоглашенияСКлиентами
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, ) КАК КурсыВалютСрезПоследних
					|		ПО СоглашенияСКлиентами.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта";
					Запрос.УстановитьПараметр("ДатаДок", ДанныеИБ.Дата);
					Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегламентированногоУчета(КомпонентыОбмена));
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, Выборка);
						
						Если Не ЗначениеЗаполнено(СтруктураДанныеДоговора.Контрагент) Тогда
							Если ЕстьРеквизитДанныхИБ(ДанныеИБ, "Контрагент") Тогда
								СтруктураДанныеДоговора.Контрагент = ДанныеИБ.Контрагент;
							Иначе
								СтруктураДанныеДоговора.Контрагент = ПараметрыПоУмолчанию.Контрагент;
							КонецЕсли;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(СтруктураДанныеДоговора.Организация) Тогда
							Если ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
								СтруктураДанныеДоговора.Организация = ДанныеИБ.Организация;
							Иначе
								СтруктураДанныеДоговора.Организация = ПараметрыПоУмолчанию.Организация;
							КонецЕсли;
						КонецЕсли;
						
						Если ТипЗнч(СоглашениеСсылка) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
							Наименование = ?(Выборка.Типовое, НСтр("ru = 'Типовое'"), НСтр("ru = 'Индивидуальное'")) + "; ";
						Иначе
						    Наименование = "";
						КонецЕсли;
						
						Наименование = Наименование + Выборка.Наименование
							+ " " + ?(ЗначениеЗаполнено(Выборка.Номер), "№" + Выборка.Номер, "")
							+ " " + ?(ЗначениеЗаполнено(Выборка.Дата), НСтр("ru = 'от'") + " " + Формат(Выборка.Дата, "ДЛФ=D"), "");
							
						СтруктураДанныеДоговора.Наименование = СокрЛП(Наименование);
						ДоговорЗаполнен = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭтоСделка И ДопАналитикаПоДоговорам(КомпонентыОбмена).СделкаВДоговор Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	СделкиСКлиентами.Ссылка,
				|	СделкиСКлиентами.Код КАК Номер,
				|	"""" КАК Контрагент,
				|	"""" КАК Организация,
				|	СделкиСКлиентами.ДатаНачала КАК Дата,
				|	КурсыВалютСрезПоследних.Валюта КАК ВалютаВзаиморасчетов,
				|	СделкиСКлиентами.Наименование КАК Наименование,
				|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
				|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
				|	ВалютаРегламентированногоУчета.Значение <> &Валюта КАК РасчетыВУсловныхЕдиницах
				|ИЗ
				|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
				|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами,
				|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
				|ГДЕ
				|	СделкиСКлиентами.Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка",  СделкаСсылка);
				Запрос.УстановитьПараметр("ДатаДок", ДанныеИБ.Дата);
				Запрос.УстановитьПараметр("Валюта",  ПараметрыПоУмолчанию.ВалютаВзаиморасчетов);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, Выборка);
					СтруктураДанныеДоговора.Организация = ДанныеИБ.Организация;
					Если ЕстьРеквизитДанныхИБ(ДанныеИБ, "Контрагент") Тогда
						СтруктураДанныеДоговора.Контрагент = ДанныеИБ.Контрагент;
					Иначе
						СтруктураДанныеДоговора.Контрагент = ПараметрыПоУмолчанию.Контрагент;
					КонецЕсли;
					СтруктураДанныеДоговора.Наименование = ?(ЗначениеЗаполнено(СделкаСсылка.Метаданные().ПредставлениеОбъекта),
						СделкаСсылка.Метаданные().ПредставлениеОбъекта, СделкаСсылка.Метаданные().Синоним)
							+ ?(ЗначениеЗаполнено(Выборка.Номер), " " + Выборка.Номер, "");
					ДоговорЗаполнен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДоговорЗаполнен Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ПараметрыПоУмолчанию, , "Дата, Номер");
		СтруктураДанныеДоговора.Наименование = НСтр("ru = 'Основной договор'");
	ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.3") Тогда
		СтруктураДанныеДоговора.ВнешнийИдентификатор = СтруктураДанныеДоговора.Наименование;
	КонецЕсли;
	
	ДопРеквизиты = Новый ТаблицаЗначений;
	ДопРеквизиты.Колонки.Добавить("Свойство");
	ДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
	
	СтрокаДопРеквизитов = ДопРеквизиты.Добавить();
	СтрокаДопРеквизитов.Свойство = Новый Структура("Наименование", "ВиртуальныйДоговор");
	СтрокаДопРеквизитов.ЗначениеСвойства = "ВиртуальныйДоговор";
	
	СтруктураДанныеДоговора.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
	
	Договор = Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ДоговорыКонтрагентов_Отправка", "Имя");
	Если Не ПравилоОбработки = Неопределено Тогда
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураДанныеДоговора, ПравилоОбработки);
	КонецЕсли;
	
	Возврат Договор;
КонецФункции
Функция ДоговорФиксированнаяСтруктураКлючей()
	ПараметрыПоУмолчанию = Новый Структура("Контрагент, Организация, ВалютаВзаиморасчетов, ВидДоговора, РасчетыВУсловныхЕдиницах, Наименование, Дата, Номер, ВнешнийИдентификатор");
	
	Возврат Новый ФиксированнаяСтруктура(ПараметрыПоУмолчанию);
КонецФункции
Процедура Документ_ОстаткиРасчетов_ОтложеннаяОбработкаПартне(Объект, ОбъектМодифицирован)
	Для Каждого Строка Из Объект.РасчетыСПартнерами Цикл
	
		Партнер = Неопределено;
		
		Если Не ЗначениеЗаполнено(Строка.Партнер) Тогда
			
			Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Строка.Контрагент);
			Если Не ЗначениеЗаполнено(Партнер) Тогда
				Партнер = Справочники.Партнеры.НеизвестныйПартнер;
			КонецЕсли;
			
			Строка.Партнер = Партнер;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура Документ_ОстаткиТМЦ_ОтложеннаяОбработкаПартнеров(Объект, ОбъектМодифицирован)
	Партнер = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
		Если Не ЗначениеЗаполнено(Партнер) Тогда
			Партнер = Справочники.Партнеры.НеизвестныйПартнер;
		КонецЕсли;
		
		Объект.Партнер = Партнер;
	КонецЕсли;
КонецПроцедуры
Функция ДопАналитикаПоДоговорам(КомпонентыОбмена)
	НастройкиДопАналитикиПоДоговорам = КомпонентыОбмена.ПараметрыКонвертации.НастройкиДопАналитикиПоДоговорам;
	Если НастройкиДопАналитикиПоДоговорам = Неопределено Тогда
		ПолучитьНастройкиВыгрузкиАналитикиПоДоговорам(НастройкиДопАналитикиПоДоговорам, КомпонентыОбмена);
		КомпонентыОбмена.ПараметрыКонвертации.НастройкиДопАналитикиПоДоговорам = НастройкиДопАналитикиПоДоговорам;
	КонецЕсли;
	
	Возврат НастройкиДопАналитикиПоДоговорам;
КонецФункции
Функция ЕстьРеквизитДанныхИБ(ДанныеИБ, ИмяРеквизита)
	УникальноеЗначение = Новый УникальныйИдентификатор;
	
	ДанныеИБСтруктура  = Новый Структура;
	ДанныеИБСтруктура.Вставить(ИмяРеквизита, УникальноеЗначение);
	
	ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
	
	Возврат Не (ДанныеИБСтруктура[ИмяРеквизита] = УникальноеЗначение);
КонецФункции
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если Не (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	МетаОбъект      = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаОбъект);
	
	ТипДанныхСтрокой = ИмяБазовогоТипа + "." + МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения  = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
	
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство       = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта     = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		// Проверка на простой тип.
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
			
			ДопРеквизитыСтрока.ТипЗначения = ТипЗнч(СтрокаТЧ.ЗначениеСвойства);
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО, ДопРеквизитыСтрока.ТипЗначения);
			
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если Не (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно.
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			
		КонецЕсли;
		
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если Не СтруктураДопСвойства.Свойство("ДополнительныеСведения")
		Или СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДополнительныеРеквизиты");
	
	Для Каждого СтрокаДопСведения Из СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку").Ссылка;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, СтрокаДопСведения.Значение.ИмяПКО);
			
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				СтрокаДопСведения.Значение.Значение, 
				ПКО_ЗначениеСвойства, 
				"ПолучитьСсылку").Ссылка;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект   = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;
		
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, ГруппаВидовКИ)
	Если Не (ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация)) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		ВидКИСтрокой   = СокрЛП(СтрокаXDTO.ВидКонтактнойИнформации.Значение);
		НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
		
		ТекВидКИ = ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ);
		
		Если Не ЗначениеЗаполнено(ТекВидКИ) Тогда
			Продолжить;
		КонецЕсли;
	
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО")
		И ПолученныеДанные.ДополнительныеСвойства.Свойство("ПодробныеДанныеФИО") Тогда	
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ПодробныеДанныеФИО Цикл
			НовЗапись = НаборЗаписейФИО.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаФИО);
			НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
			НовЗапись.Период = СтрокаФИО.НачалоПериода;
		КонецЦикла;
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
		
	Иначе 
		// Запись ФИО по наименованию физ.лица.
		ФИОСтрокой = ПолученныеДанные.Наименование;
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОСтрокой);
		ДанныеФИО = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(,Новый Структура("ФизическоеЛицо", ФизЛицоСсылка));
		Если ДанныеФИО.Количество() > 0 
			И ДанныеФИО[0].Фамилия = СтруктураФИО.Фамилия
			И ДанныеФИО[0].Имя = СтруктураФИО.Имя
			И ДанныеФИО[0].Отчество = СтруктураФИО.Отчество Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
	
		Если СтруктураФИО.Фамилия = Неопределено 
			И СтруктураФИО.Имя = Неопределено
			И СтруктураФИО.Отчество = Неопределено Тогда
			НаборЗаписейФИО.Записать();
			Возврат;
		КонецЕсли;
		НовЗапись = НаборЗаписейФИО.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СтруктураФИО, "Фамилия, Имя, Отчество");
		НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
		НовЗапись.Период = ТекущаяДатаСеанса();
		
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ТипЗначенияСвойства)
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "НоменклатураГруппа")>0 Тогда
		ИмяПКО = "Справочник_НоменклатураГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура");
	ИначеЕсли Найти(ТипЗначенияСвойства, "КонтрагентГруппа")>0 Тогда
		Возврат;
	ИначеЕсли Найти(ТипЗначенияСвойства, "Контрагент")>0 Тогда
		ИмяПКО = "Справочник_Контрагенты_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
	ИначеЕсли Найти(ТипЗначенияСвойства, "БанкГруппа")>0 Тогда
		ИмяПКО = "Справочник_БанкиГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Банк")>0 Тогда
		ИмяПКО = "Справочник_Банки";
		ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Валюта")>0 Тогда
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
			И ЗначениеСвойства.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
		ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Договор")>0 Тогда
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
			И ЗначениеСвойства.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
		КонецЕсли;
		ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЕдиницаИзмерения")>0 Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
		ТипЗначенияСвойства = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Организация")>0 Тогда
		ИмяПКО = "Справочник_Организации_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Организации");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Пользователь")>0 Тогда
		ИмяПКО = "Справочник_Пользователи";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Подразделение")>0 Тогда
		ИмяПКО = "Справочник_Подразделения_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтруктураПредприятия");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СкладГруппа")>0 Тогда
		ИмяПКО = "Справочник_СкладыГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Склад")>0 Тогда
		ИмяПКО = "Справочник_Склады_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Склады");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДДС")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДоходов")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДоходов";
		ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяРасходов")>0 Тогда
		ИмяПКО = "Справочник_СтатьиРасходов";
		ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтранаМира")>0 Тогда
		ИмяПКО = "Справочник_СтраныМира";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ТипЦен")>0 Тогда
		ИмяПКО = "Справочник_ТипыЦен";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ВидыЦен");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицоГруппа")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицо")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
КонецПроцедуры
Процедура ЗаписатьОшибкуВЖурналРегистрации(СсылкаНаОбъект, ОписаниеОшибки, КомпонентыОбмена, ОписаниеДействия = Неопределено, Уровень = Неопределено)
	// Процедура вызывается из исключений, при попытке записать или заблокировать объект в ИБ.
	
	Если ОписаниеДействия = Неопределено Тогда
		ОписаниеДействия = НСтр("ru = 'создать объект'");
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не удалось %1 %2.
							|%3'");
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ОписаниеДействия, СсылкаНаОбъект.Метаданные().Синоним, ОписаниеОшибки);
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(ТекстОшибки, КомпонентыОбмена, Уровень, СсылкаНаОбъект);
КонецПроцедуры
Процедура ЗаполнениеПартнераВРасшифровкеПлатежа(Объект)
	Партнер = Неопределено;
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
		
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
	
		Если Не ЗначениеЗаполнено(Партнер) Тогда
			Партнер = Справочники.Партнеры.НеизвестныйПартнер;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Партнер)
			Или Строка.Партнер <> Партнер Тогда
			Строка.Партнер = Партнер;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнениеПартнераВШапкеДокумента(Объект)
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Партнер = Справочники.Партнеры.НеизвестныйПартнер;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Партнер)
		Или Объект.Партнер <> Партнер Тогда
	
		Объект.Партнер = Партнер;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнениеСоглашенияСКлиентомВШапкеДокумента(Объект)
	// Необходимые проверки перед заполнением соглашения в шапке документа.
	// Проверка на использование соглашений по функциональным опциям
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на заполненность обязательных, для подбора соглашений реквизитов.
	// Если хотя бы один реквизит не заполнен, невозможно найти или создать соглашение.
	Если Не (ЗначениеЗаполнено(Объект.Партнер)
		И ОбщегоНазначения.СсылкаСуществует(Объект.Партнер)) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск подходящего соглашения.
	// 1. Проверить, заполнено ли соглашение в документе.
	//    Если соглашение в документе заполнено, тогда проверить соответствует ли реквизиты соглашения,
	//    реквизитам документа. При соответствии реквизитов соглашения реквизитам документа,
	//    изменять соглашение в документе не требуется.
	// 2. Если соглашение в документе не заполнено, или реквизиты соглашения не соответствуют
	//    реквизитам документа, осуществим подбор соглашения в документ из уже имеющихся в базе соглашений.
	// 3. Если подобрать соглашение не удалось, создаем новое соглашение.
	
	// Инициализируем ключевые свойства соглашения.
	ИспользоватьТиповыеСоглашения                  = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашения           = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьДоговорыКонтрагентов               = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ОтгрузкаБезПереходаПраваСобственности          = Ложь;
	СоглашениеСодержитДоговор                      = ИспользоватьДоговорыКонтрагентов И ЗначениеЗаполнено(Объект.Договор);
	ПорядокРасчетов                                = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	Иначе
		ХозОперацияСоглашения                 = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		ОтгрузкаБезПереходаПраваСобственности = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
	КонецЕсли;
	
	ВалютаВзаиморасчетовСоглашения = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаВзаиморасчетов", Объект.Метаданные()), 
		Объект.ВалютаВзаиморасчетов, Объект.Валюта);
		
	Если ВалютаВзаиморасчетовСоглашения = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ИначеЕсли ВалютаВзаиморасчетовСоглашения <> Объект.Валюта Тогда
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
	Иначе
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	КонецЕсли;
	
	Если СоглашениеСодержитДоговор Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВалютаВзаиморасчетов, ПорядокОплаты, ПорядокРасчетов");
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетовСоглашения = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПорядокОплаты) Тогда
			ПорядокОплаты = РеквизитыДоговора.ПорядокОплаты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПорядокРасчетов) Тогда
			ПорядокРасчетов = РеквизитыДоговора.ПорядокРасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализируем доп. условия для подбора соглашений.
	УсловиеПоОтгрузкеБезПереходаПраваСобственности = "";
	УсловиеПоИспользованиюДоговоровКонтрагентов    = "";
	ШаблонДополнительныхУсловий                    = "%1 %2";
	
	Если ОтгрузкаБезПереходаПраваСобственности Тогда
		УсловиеПоОтгрузкеБезПереходаПраваСобственности = "И СоглашенияСКлиентами.ВозможнаРеализацияБезПереходаПраваСобственности = ИСТИНА";
	КонецЕсли;
	
	Если СоглашениеСодержитДоговор Тогда
		УсловиеПоИспользованиюДоговоровКонтрагентов = "И СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов = ИСТИНА";
	КонецЕсли;
	
	ТекстДополнительныхУсловий = СтрШаблон(ШаблонДополнительныхУсловий,
		УсловиеПоОтгрузкеБезПереходаПраваСобственности, УсловиеПоИспользованиюДоговоровКонтрагентов);
	
	// Пункт 1. Проверим, является ли заполненное в объекте соглашение корректным для данного документа.
	// Если соглашение корректное, то дальнейшего подбора не требуется.
	СоглашениеЗаполненоКорректно = Ложь;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СоглашенияСКлиентами.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|ГДЕ
			|	СоглашенияСКлиентами.Ссылка = &СоглашениеВОбъекте
			|	И СоглашенияСКлиентами.Партнер = &Партнер
			|	И СоглашенияСКлиентами.Валюта = &Валюта
			|	И СоглашенияСКлиентами.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|	И СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозОперация
			|	И СоглашенияСКлиентами.Организация = &Организация
			|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	[ДополнительныеУсловия]
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СоглашенияСКлиентами.Ссылка
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|ГДЕ
			|	СоглашенияСКлиентами.Ссылка = &СоглашениеВОбъекте
			|	И СоглашенияСКлиентами.Партнер = &Партнер
			|	И СоглашенияСКлиентами.Валюта = &Валюта
			|	И СоглашенияСКлиентами.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|	И СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозОперация
			|	И СоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	[ДополнительныеУсловия]");
			
		Запрос.УстановитьПараметр("СоглашениеВОбъекте",   Объект.Соглашение);
		Запрос.УстановитьПараметр("Организация",          Объект.Организация);
		Запрос.УстановитьПараметр("Валюта",               Объект.Валюта);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовСоглашения);
		Запрос.УстановитьПараметр("Партнер",              Объект.Партнер);
		Запрос.УстановитьПараметр("ХозОперация",          ХозОперацияСоглашения);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ДополнительныеУсловия]", ТекстДополнительныхУсловий);
		СоглашениеЗаполненоКорректно = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Если СоглашениеЗаполненоКорректно Тогда
		Возврат;
	КонецЕсли;
	
	// Пункт 2. Попробуем подобрать подходящий элемент по умолчанию, среди уже имеющихся в базе соглашений.
	// При формировании наименования по умолчанию, платформенное представление объектов применять нельзя,
	// т.к. организация, партнер или валюта могут отсутствовать в базе,
	// и платформа сформирует представление: «Объект не найден».
	// Необходимо формировать наименование с учетом данного поведения платформы.
	// Если один из объектов формирующих наименование по умолчанию отсутствует в базе,
	// то его наименование должно быть заменено пустой строкой.
	ШаблонНаименованияСоглашенияПоУмолчанию = НСтр("ru = '%1 , %2, %3, %4 (по умолчанию)'");
	
	НаименованиеОрганизации = "";
	НаименованиеПартнера    = "";
	НаименованиеВалюты      = "";
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		НаименованиеПартнера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Партнер, "Наименование");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовСоглашения) Тогда
		НаименованиеВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаВзаиморасчетовСоглашения, "Наименование");
	КонецЕсли;
	
	НаименованиеСоглашенияПоУмолчанию = СтрШаблон(ШаблонНаименованияСоглашенияПоУмолчанию,
		НаименованиеПартнера, ХозОперацияСоглашения, НаименованиеОрганизации, НаименованиеВалюты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("Валюта",                  Объект.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",    ВалютаВзаиморасчетовСоглашения);
	Запрос.УстановитьПараметр("Партнер",                 Объект.Партнер);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",   ХозОперацияСоглашения);
	Запрос.УстановитьПараметр("ТолькоТиповые",           ИспользоватьТиповыеСоглашения И Не ИспользоватьИндивидуальныеСоглашения);
	Запрос.УстановитьПараметр("ТолькоИндивидуальные",    Не ИспользоватьТиповыеСоглашения И ИспользоватьИндивидуальныеСоглашения);
	Запрос.УстановитьПараметр("НаименованиеПоУмолчанию", НаименованиеСоглашенияПоУмолчанию);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
		|	СоглашенияСКлиентами.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА СоглашенияСКлиентами.Наименование = &НаименованиеПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЗначениеПоУмолчанию
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И СоглашенияСКлиентами.Валюта = &Валюта
		|	И СоглашенияСКлиентами.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И (СоглашенияСКлиентами.Организация = &Организация
		|		ИЛИ СоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|	И НЕ СоглашенияСКлиентами.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &ТолькоТиповые = ИСТИНА
		|					И &ТолькоИндивидуальные = ЛОЖЬ
		|					И (СоглашенияСКлиентами.Типовое
		|						И (СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|							ИЛИ СоглашенияСКлиентами.СегментПартнеров В
		|								(ВЫБРАТЬ
		|									ПартнерыСегмента.Сегмент
		|								ИЗ
		|									РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|								ГДЕ
		|									ПартнерыСегмента.Партнер = &Партнер)))
		|				ТОГДА ИСТИНА
		|			КОГДА &ТолькоИндивидуальные = ИСТИНА
		|					И НЕ &ТолькоТиповые = ИСТИНА
		|					И (НЕ СоглашенияСКлиентами.Типовое
		|						И (СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|							ИЛИ СоглашенияСКлиентами.СегментПартнеров В
		|								(ВЫБРАТЬ
		|									ПартнерыСегмента.Сегмент
		|								ИЗ
		|									РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|								ГДЕ
		|									ПартнерыСегмента.Партнер = &Партнер)))
		|					И (&Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|						ИЛИ СоглашенияСКлиентами.Партнер = &Партнер)
		|				ТОГДА ИСТИНА
		|			КОГДА &ТолькоТиповые = ЛОЖЬ
		|					И &ТолькоИндивидуальные = ЛОЖЬ
		|					И (СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|						ИЛИ СоглашенияСКлиентами.СегментПартнеров В
		|							(ВЫБРАТЬ
		|								ПартнерыСегмента.Сегмент
		|							ИЗ
		|								РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|							ГДЕ
		|								ПартнерыСегмента.Партнер = &Партнер))
		|					И (&Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|						ИЛИ СоглашенияСКлиентами.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|						ИЛИ СоглашенияСКлиентами.Партнер = &Партнер)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	[ДополнительныеУсловия]
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЗначениеПоУмолчанию УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ДополнительныеУсловия]", ТекстДополнительныхУсловий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоздатьСоглашение = Истина;
	
	Если Выборка.Количество() = 1 Тогда
		// Только один подходящий - его подставим.
		Выборка.Следующий();
		СоздатьСоглашение = Ложь;
		Объект.Соглашение = Выборка.Ссылка;
	Иначе
		// Поиск уже созданного ранее соглашения по умолчанию.
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоЗначениеПоУмолчанию Тогда
				СоздатьСоглашение = Ложь;
				Объект.Соглашение = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не СоздатьСоглашение Тогда
		// Соглашение подобрано, создавать новое не требуется.
		Возврат;
	КонецЕсли;
	
	// Создадим соглашение по умолчанию.
	НовоеСоглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
	НовоеСоглашение.Наименование                                    = НаименованиеСоглашенияПоУмолчанию;
	НовоеСоглашение.Статус                                          = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
	НовоеСоглашение.ХозяйственнаяОперация                           = ХозОперацияСоглашения;
	НовоеСоглашение.Валюта                                          = Объект.Валюта;
	НовоеСоглашение.ВалютаВзаиморасчетов                            = ВалютаВзаиморасчетовСоглашения;
	НовоеСоглашение.Организация                                     = Объект.Организация;
	НовоеСоглашение.Согласован                                      = Истина;
	НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов                = СоглашениеСодержитДоговор;
	НовоеСоглашение.ВозможнаРеализацияБезПереходаПраваСобственности = ОтгрузкаБезПереходаПраваСобственности;
	НовоеСоглашение.НалогообложениеНДС                              = Справочники.Организации.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
	НовоеСоглашение.ПорядокОплаты                                   = ПорядокОплаты;
	НовоеСоглашение.ПорядокРасчетов                                 = ПорядокРасчетов;
	
	Если ИспользоватьТиповыеСоглашения И Не ИспользоватьИндивидуальныеСоглашения Тогда
		
		НовоеСоглашение.Типовое = Истина;
		
		// Определим сегмент партнера
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПартнерыСегмента.Сегмент
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|ГДЕ
			|	ПартнерыСегмента.Партнер = &Партнер";
			
		Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НовоеСоглашение.СегментПартнеров = Выборка.Сегмент;
		КонецЕсли;
		
	Иначе 
		НовоеСоглашение.Типовое    = Ложь;
		НовоеСоглашение.Партнер    = Объект.Партнер;
		НовоеСоглашение.Контрагент = Объект.Контрагент;
	КонецЕсли;
	
	НовоеСоглашение.Записать();
	Объект.Соглашение = НовоеСоглашение.Ссылка;
КонецПроцедуры
Процедура ЗаполнениеСоглашенияСПоставщикомВШапкеДокумента(Объект, ПараметрыКонвертации)
	// Необходимые проверки перед заполнением соглашения в шапке документа.
	// Проверка на использование соглашений по функциональным опциям
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на заполненность обязательных, для подбора соглашений реквизитов.
	// Если хотя бы один реквизит не заполнен, невозможно найти или создать соглашение.
	Если Не (ЗначениеЗаполнено(Объект.Партнер)
		И ОбщегоНазначения.СсылкаСуществует(Объект.Партнер)) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск подходящего соглашения.
	// 1. Проверить, заполнено ли соглашение в документе.
	//    Если соглашение в документе заполнено, тогда проверить соответствует ли реквизиты соглашения,
	//    реквизитам документа. При соответствии реквизитов соглашения реквизитам документа,
	//    изменять соглашение в документе не требуется.
	// 2. Если соглашение в документе не заполнено, или реквизиты соглашения не соответствуют
	//    реквизитам документа, осуществим подбор соглашения в документ из уже имеющихся в базе соглашений.
	// 3. Если подобрать соглашение не удалось, создаем новое соглашение.
	
	// Инициализируем ключевые свойства соглашения.
	ИспользоватьСоглашения                = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	ИспользоватьДоговорыКонтрагентов      = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	СоглашениеСодержитДоговор             = ИспользоватьДоговорыКонтрагентов И ЗначениеЗаполнено(Объект.Договор);
	ПорядокРасчетов                       = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту Тогда
		ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
		ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
	Иначе
		ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	КонецЕсли;
	
	ВалютаВзаиморасчетовСоглашения = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаВзаиморасчетов", Объект.Метаданные()), 
		Объект.ВалютаВзаиморасчетов, Объект.Валюта);
		
	Если ВалютаВзаиморасчетовСоглашения = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ИначеЕсли ВалютаВзаиморасчетовСоглашения <> Объект.Валюта Тогда
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
	Иначе
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	КонецЕсли;
	
	Если СоглашениеСодержитДоговор Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВалютаВзаиморасчетов, ПорядокОплаты, ПорядокРасчетов");
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетовСоглашения = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПорядокОплаты) Тогда
			ПорядокОплаты = РеквизитыДоговора.ПорядокОплаты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПорядокРасчетов) Тогда
			ПорядокРасчетов = РеквизитыДоговора.ПорядокРасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализируем доп. условия для подбора соглашений.
	УсловиеПоИспользованиюДоговоровКонтрагентов    = "";
	ШаблонДополнительныхУсловий                    = "%1";
	
	Если СоглашениеСодержитДоговор Тогда
		УсловиеПоИспользованиюДоговоровКонтрагентов = "И СоглашенияСПоставщиками.ИспользуютсяДоговорыКонтрагентов = ИСТИНА";
	КонецЕсли;
	
	ТекстДополнительныхУсловий = СтрШаблон(ШаблонДополнительныхУсловий, УсловиеПоИспользованиюДоговоровКонтрагентов);
	
	// Пункт 1. Проверим, является ли заполненное в объекте соглашение корректным для данного документа.
	// Если соглашение корректное, то дальнейшего подбора не требуется.
	СоглашениеЗаполненоКорректно = Ложь;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СоглашенияСПоставщиками.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
			|ГДЕ
			|	СоглашенияСПоставщиками.Ссылка = &СоглашениеВОбъекте
			|	И СоглашенияСПоставщиками.Партнер = &Партнер
			|	И СоглашенияСПоставщиками.Валюта = &Валюта
			|	И СоглашенияСПоставщиками.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = &ХозОперация
			|	И СоглашенияСПоставщиками.Организация = &Организация
			|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	[ДополнительныеУсловия]
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СоглашенияСПоставщиками.Ссылка
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
			|ГДЕ
			|	СоглашенияСПоставщиками.Ссылка = &СоглашениеВОбъекте
			|	И СоглашенияСПоставщиками.Партнер = &Партнер
			|	И СоглашенияСПоставщиками.Валюта = &Валюта
			|	И СоглашенияСПоставщиками.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = &ХозОперация
			|	И СоглашенияСПоставщиками.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	[ДополнительныеУсловия]");
			
		Запрос.УстановитьПараметр("СоглашениеВОбъекте",   Объект.Соглашение);
		Запрос.УстановитьПараметр("Организация",          Объект.Организация);
		Запрос.УстановитьПараметр("Валюта",               Объект.Валюта);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовСоглашения);
		Запрос.УстановитьПараметр("Партнер",              Объект.Партнер);
		Запрос.УстановитьПараметр("ХозОперация",          ХозОперацияСоглашения);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ДополнительныеУсловия]", ТекстДополнительныхУсловий);
		СоглашениеЗаполненоКорректно = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Если СоглашениеЗаполненоКорректно Тогда
		Возврат;
	КонецЕсли;
	
	// Пункт 2. Попробуем подобрать подходящий элемент по умолчанию, среди уже имеющихся в базе соглашений.
	// При формировании наименования по умолчанию, платформенное представление объектов применять нельзя,
	// т.к. организация, партнер или валюта могут отсутствовать в базе,
	// и платформа сформирует представление: «Объект не найден».
	// Необходимо формировать наименование с учетом данного поведения платформы.
	// Если один из объектов формирующих наименование по умолчанию отсутствует в базе,
	// то его наименование должно быть заменено пустой строкой.
	ШаблонНаименованияСоглашенияПоУмолчанию = НСтр("ru = '%1 , %2, %3, %4 (по умолчанию)'");
	
	НаименованиеОрганизации = "";
	НаименованиеПартнера    = "";
	НаименованиеВалюты      = "";
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		НаименованиеПартнера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Партнер, "Наименование");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовСоглашения) Тогда
		НаименованиеВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаВзаиморасчетовСоглашения, "Наименование");
	КонецЕсли;
	
	НаименованиеСоглашенияПоУмолчанию = СтрШаблон(ШаблонНаименованияСоглашенияПоУмолчанию,
		НаименованиеПартнера, ХозОперацияСоглашения, НаименованиеОрганизации, НаименованиеВалюты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("Валюта",                  Объект.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",    ВалютаВзаиморасчетовСоглашения);
	Запрос.УстановитьПараметр("Партнер",                 Объект.Партнер);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",   ХозОперацияСоглашения);
	Запрос.УстановитьПараметр("НаименованиеПоУмолчанию", НаименованиеСоглашенияПоУмолчанию);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СоглашенияСПоставщиками.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Наименование = &НаименованиеПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЗначениеПоУмолчанию
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И СоглашенияСПоставщиками.Валюта = &Валюта
		|	И СоглашенияСПоставщиками.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И СоглашенияСПоставщиками.Организация = &Организация
		|	И СоглашенияСПоставщиками.Партнер = &Партнер
		|	И НЕ СоглашенияСПоставщиками.ПометкаУдаления
		|	[ДополнительныеУсловия]
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СоглашенияСПоставщиками.Ссылка,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Наименование = &НаименованиеПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И СоглашенияСПоставщиками.Валюта = &Валюта
		|	И СоглашенияСПоставщиками.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И СоглашенияСПоставщиками.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СоглашенияСПоставщиками.Партнер = &Партнер
		|	И НЕ СоглашенияСПоставщиками.ПометкаУдаления
		|	[ДополнительныеУсловия]
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЗначениеПоУмолчанию УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ДополнительныеУсловия]", ТекстДополнительныхУсловий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоздатьСоглашение = Истина;
	
	Если Выборка.Количество() = 1 Тогда
		// Только один подходящий - его подставим.
		Выборка.Следующий();
		СоздатьСоглашение = Ложь;
		Объект.Соглашение = Выборка.Ссылка;
	Иначе
		// Поиск уже созданного ранее соглашения по умолчанию.
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоЗначениеПоУмолчанию Тогда
				СоздатьСоглашение = Ложь;
				Объект.Соглашение = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не СоздатьСоглашение Тогда
		// Соглашение подобрано, создавать новое не требуется.
		Возврат;
	КонецЕсли;
	
	// Создадим соглашение по умолчанию.
	НовоеСоглашение = Справочники.СоглашенияСПоставщиками.СоздатьЭлемент();
	НовоеСоглашение.Наименование                     = НаименованиеСоглашенияПоУмолчанию;
	НовоеСоглашение.Статус                           = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
	НовоеСоглашение.ХозяйственнаяОперация            = ХозОперацияСоглашения;
	НовоеСоглашение.Валюта                           = Объект.Валюта;
	НовоеСоглашение.ВалютаВзаиморасчетов             = ВалютаВзаиморасчетовСоглашения;
	НовоеСоглашение.Организация                      = Объект.Организация;
	НовоеСоглашение.Согласован                       = Истина;
	НовоеСоглашение.ВариантПриемкиТоваров            = Константы.ВариантПриемкиТоваров.Получить();
	НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов = СоглашениеСодержитДоговор;
	НовоеСоглашение.Партнер                          = Объект.Партнер;
	НовоеСоглашение.Контрагент                       = Объект.Контрагент;
	НовоеСоглашение.ПорядокОплаты                    = ПорядокОплаты;
	НовоеСоглашение.ПорядокРасчетов                  = ПорядокРасчетов;
	
	Если ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту 
		Или ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
		НовоеСоглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе	
		НовоеСоглашение.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Объект.Организация);;
	КонецЕсли;
	
	НовоеСоглашение.Записать();
	Объект.Соглашение = НовоеСоглашение.Ссылка;
КонецПроцедуры
Процедура ЗаполнениеСтатьиДДСВДокументе(Объект)
	// Если нет хоз операции - невозможно заполнить статью.
	Если НЕ ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Возврат;
	КонецЕсли;
		
	СтатьяДДСВШапкеЗаполнена = ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств);
	СтатьяДДСВРасшифровкеЗаполнена = Объект.РасшифровкаПлатежа.Количество() <> 0;
	Для Каждого СтрокаРасшифровка Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровка.СтатьяДвиженияДенежныхСредств) Тогда
			СтатьяДДСВРасшифровкеЗаполнена = Ложь;
		КонецЕсли;
	КонецЦикла;
	// Если статья заполнена в шапке или во всех строках ТЧ - ничего не делаем.
	Если СтатьяДДСВШапкеЗаполнена ИЛИ СтатьяДДСВРасшифровкеЗаполнена Тогда
		Возврат; 
	КонецЕсли;
	
	// Вычисление статьи ДДС по умолчанию.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2
	|	ТабХозОперации.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА ТабХозОперации.Ссылка.Наименование = &НаименованиеСтатьиПоУмолчанию ТОГДА
	|		2 
	|	КОГДА ТабХозОперации.Ссылка.Предопределенный ТОГДА 1
	|	ИНАЧЕ 0 КОНЕЦ КАК ЗначениеУпорядочивания
	|ИЗ Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК ТабХозОперации
	|ГДЕ ТабХозОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|Упорядочить ПО ЗначениеУпорядочивания УБЫВ";
	
	ОперацииПоВыплатеЗарплаты = Новый СписокЗначений;
	ОперацииПоВыплатеЗарплаты.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	ОперацииПоВыплатеЗарплаты.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	ОперацииПоВыплатеЗарплаты.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	ОперацииПоВыплатеЗарплаты.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
	ОперацииПоВыплатеЗарплаты.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
	ОперацииПоВыплатеЗарплаты.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
	
	Если ОперацииПоВыплатеЗарплаты.НайтиПоЗначению(Объект.ХозяйственнаяОперация) = Неопределено Тогда
		ХозОперация = Объект.ХозяйственнаяОперация;
		НаименованиеСтатьиПоУмолчанию = "" + СокрЛП(Объект.ХозяйственнаяОперация) + " "+ НСтр("ru='(по умолчанию)'");
		ВидДвиженияДС = "";
		Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам)
			Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам)
			Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным)
			Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы) Тогда
			ВидДвиженияДС = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности;
		ИначеЕсли (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
			Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте) Тогда
			ВидДвиженияДС = Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков;
		ИначеЕсли (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы) Тогда
			ВидДвиженияДС = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности;
		КонецЕсли;
	Иначе
		ХозОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты;
		НаименованиеСтатьиПоУмолчанию = "" + СокрЛП(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты) + " " + НСтр("ru='(по умолчанию)'");
		ВидДвиженияДС = Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТруда;
	КонецЕсли;
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозОперация);
	Запрос.УстановитьПараметр("НаименованиеСтатьиПоУмолчанию", НаименованиеСтатьиПоУмолчанию);
	Выборка = Запрос.Выполнить().Выбрать();
	НеобходимоСоздатьСтатью = Ложь;
	Если Выборка.Следующий() Тогда
		Если Выборка.Количество() = 1 ИЛИ Выборка.ЗначениеУпорядочивания > 0 Тогда
			СтатьяДДСПоУмолчанию = Выборка.Ссылка;
		Иначе
			НеобходимоСоздатьСтатью = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьСтатью = Истина;
	КонецЕсли;
	Если НеобходимоСоздатьСтатью Тогда
		НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		НовыйЭлемент.Наименование = НаименованиеСтатьиПоУмолчанию;
		НовыйЭлемент.ВидДвиженияДенежныхСредств = ВидДвиженияДС;
		
		СтрокаТабличнойЧастиХозяйственныеОперации = НовыйЭлемент.ХозяйственныеОперации.Добавить();
		СтрокаТабличнойЧастиХозяйственныеОперации.ХозяйственнаяОперация = ХозОперация;
		
		НовыйЭлемент.Записать();
		СтатьяДДСПоУмолчанию = НовыйЭлемент.Ссылка;
	КонецЕсли;
	Если НЕ СтатьяДДСВШапкеЗаполнена Тогда
		Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоУмолчанию;
	КонецЕсли;
		
	Для Каждого СтрокаРасшифровка Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровка.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаРасшифровка.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьБанковскийСчетПоВалютеОрганизации(Объект)
	РеквизитыРасчетногоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств,Владелец");
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
		ИЛИ РеквизитыРасчетногоСчета.ВалютаДенежныхСредств <> Объект.Валюта ИЛИ РеквизитыРасчетногоСчета.Владелец <> Объект.Организация Тогда
		
		Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
		|	И БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
		|	И БанковскиеСчетаОрганизаций.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("Владелец", Объект.Организация);
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.Валюта);
		ТабРасчетныеСчета = Запрос.Выполнить().Выгрузить();
	
		Если ТабРасчетныеСчета.Количество() = 1 Тогда
			Объект.БанковскийСчет = ТабРасчетныеСчета[0].Ссылка;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьБанковскийСчетФизическогоЛица(Объект)
	Если НЕ Объект.ДополнительныеСвойства.Свойство("БанковскийСчетКонтрагента_Номер") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчетаКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Владелец = &ФизическоеЛицо
	|	И БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчетаКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчетаКонтрагентов.Владелец) = ТИП(Справочник.Контрагенты)
	|	И БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета";
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("НомерСчета", Объект.ДополнительныеСвойства.БанковскийСчетКонтрагента_Номер);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.БанковскийСчетКонтрагента = Выборка.Ссылка;
	Иначе
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Если Выборка.Следующий() Тогда
			
			СчетФизЛица = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СчетФизЛица, Выборка.Ссылка,, "Родитель");
			СчетФизЛица.УстановитьНовыйКод();
			СчетФизЛица.Владелец = Объект.ПодотчетноеЛицо;
			СчетФизЛица.ОбменДанными.Загрузка = Истина;
			СчетФизЛица.Записать();
			
			Объект.БанковскийСчетКонтрагента = СчетФизЛица.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO)
	// Дата и номер входящего документа
	Если ДанныеИБ.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента) Тогда
			ДанныеXDTO.Вставить("ДатаВходящегоДокумента", ДанныеИБ.Дата);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.НомерВходящегоДокумента) Тогда
			ДанныеXDTO.Вставить("НомерВходящегоДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Ложь, Истина));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДанныеКорректировкиПоступленияТоваров(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена)
	Запрос = Новый Запрос;
	
	// Данные исходного документа поступления.
	Запрос.Текст = "ВЫБРАТЬ
		|	Док.ЗаказПоставщику КАК ЗаказПоставщику,
		|	Док.Грузоотправитель КАК Грузоотправитель,
		|	ВЫБОР
		|		КОГДА Док.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЕНВД,
		|	Док.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару
		|ПОМЕСТИТЬ ДанныеДокументаПоступления
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Док.ЗаказПоставщику КАК ЗаказПоставщику,
		|	Док.Грузоотправитель КАК Грузоотправитель,
		|	Док.ЭтоЕНВД КАК ЭтоЕНВД,
		|	Док.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару
		|ИЗ
		|	ДанныеДокументаПоступления КАК Док";
	
	// Ссылка на исправляемый документ.
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + "ВЫБРАТЬ
		|	Док.Ссылка,
		|	Док.МоментВремени,
		|	ЛОЖЬ КАК ЭтоДокументОснование
		|ПОМЕСТИТЬ ПоследовательностьДокументов
		|ИЗ
		|	Документ.КорректировкаПриобретения КАК Док
		|ГДЕ
		|	Док.ДокументОснование = &ДокументОснование
		|	И Док.МоментВремени <= &МоментВремени
		|	И Док.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Док.ДокументОснование,
		|	Док.ДокументОснование.МоментВремени,
		|	ИСТИНА
		|ИЗ
		|	Документ.КорректировкаПриобретения КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследовательностьДокументов.Ссылка,
		|	ПоследовательностьДокументов.МоментВремени,
		|	ПоследовательностьДокументов.ЭтоДокументОснование,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК Корректировочный
		|ПОМЕСТИТЬ ПараметрыДокументовПоследовательности
		|ИЗ
		|	ПоследовательностьДокументов КАК ПоследовательностьДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
		|		ПО ПоследовательностьДокументов.Ссылка = СчетФактураПолученный.ДокументОснование
		|			И (СчетФактураПолученный.Ссылка.Корректировочный)
		|			И (СчетФактураПолученный.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоследовательностьДокументов.Ссылка,
		|	ПоследовательностьДокументов.МоментВремени,
		|	ПоследовательностьДокументов.ЭтоДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПоследовательностьДокументов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Параметры1.Ссылка,
		|	Параметры1.Корректировочный,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА Параметры1.Корректировочный
		|					И НЕ Параметры2.Корректировочный
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ИсходныйКорректировочный
		|ПОМЕСТИТЬ ПараметрыОтбора
		|ИЗ
		|	ПараметрыДокументовПоследовательности КАК Параметры1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыДокументовПоследовательности КАК Параметры2
		|		ПО (Параметры1.Ссылка = &Ссылка)
		|			И (Параметры2.Ссылка <> &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Параметры1.Ссылка,
		|	Параметры1.Корректировочный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Параметры1.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсправляемыеДокументы.Ссылка
		|ПОМЕСТИТЬ ИсправляемыйДокумент
		|ИЗ
		|	ПараметрыДокументовПоследовательности КАК ИсправляемыеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОтбора КАК ПараметрыОтбора
		|		ПО (ИсправляемыеДокументы.Корректировочный = ПараметрыОтбора.Корректировочный
		|				ИЛИ ПараметрыОтбора.ИсходныйКорректировочный
		|				ИЛИ ИсправляемыеДокументы.ЭтоДокументОснование)
		|			И ИсправляемыеДокументы.Ссылка <> ПараметрыОтбора.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсправляемыеДокументы.МоментВремени УБЫВ
		|;
		|
		// Собственно исправляемый документ
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсправляемыйДокумент.Ссылка КАК Ссылка,
		|	ИсправляемыйДокумент.Ссылка.Дата КАК Дата,
		|	ИсправляемыйДокумент.Ссылка.Номер КАК Номер
		|ИЗ
		|	ИсправляемыйДокумент КАК ИсправляемыйДокумент";
	
	// Ссылка на основание исправления (корректировки) и документ до корректировки.
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсправляемыеДокументы.Ссылка КАК Ссылка,
		|	ИсправляемыеДокументы.Ссылка.Дата КАК Дата,
		|	ИсправляемыеДокументы.Ссылка.Номер КАК Номер
		|ИЗ
		|	ПараметрыДокументовПоследовательности КАК ИсправляемыеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОтбора КАК ПараметрыОтбора
		|		ПО (ИсправляемыеДокументы.Корректировочный = ПараметрыОтбора.Корректировочный
		|				ИЛИ ИсправляемыеДокументы.ЭтоДокументОснование)
		|			И ИсправляемыеДокументы.Ссылка <> ПараметрыОтбора.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсправляемыеДокументы.ЭтоДокументОснование,
		|	ИсправляемыеДокументы.МоментВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсправляемыеДокументы.Ссылка
		|ПОМЕСТИТЬ ДокументДоКорректировки
		|ИЗ
		|	ПараметрыДокументовПоследовательности КАК ИсправляемыеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОтбора КАК ПараметрыОтбора
		|		ПО ПараметрыОтбора.Корректировочный И Не ПараметрыОтбора.ИсходныйКорректировочный
		|			И ИсправляемыеДокументы.Корректировочный = Ложь
		|			И ИсправляемыеДокументы.Ссылка <> ПараметрыОтбора.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсправляемыеДокументы.ЭтоДокументОснование,
		|	ИсправляемыеДокументы.МоментВремени УБЫВ";
	
	// Табличные части Товары и Услуги исправляемого документа.
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + "ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	"""" КАК Содержание,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД,
		|	Товары.Количество,
		|	Товары.Сумма,
		|	Товары.СуммаНДС,
		|	Товары.СуммаСНДС,
		|	Товары.СтатьяРасходов,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ ТоварыУслугиИсправляемогоДокументаРазвернутые
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка В
		|			(ВЫБРАТЬ
		|				ИсправляемыйДокумент.Ссылка
		|			ИЗ
		|				ИсправляемыйДокумент КАК ИсправляемыйДокумент)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|	Расходы.Содержание,
		|	Расходы.СтавкаНДС,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
		|	Расходы.Количество,
		|	Расходы.Сумма,
		|	Расходы.СуммаНДС,
		|	Расходы.СуммаСНДС,
		|	Расходы.СтатьяРасходов,
		|	Расходы.НомерСтроки
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Ссылка В
		|			(ВЫБРАТЬ
		|				ИсправляемыйДокумент.Ссылка
		|			ИЗ
		|				ИсправляемыйДокумент КАК ИсправляемыйДокумент)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Содержание,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД,
		|	Товары.Количество,
		|	Товары.Сумма,
		|	Товары.СуммаНДС,
		|	Товары.СуммаСНДС,
		|	Товары.СтатьяРасходов,
		|	Товары.НомерСтроки
		|ИЗ
		|	Документ.КорректировкаПриобретения.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка В
		|			(ВЫБРАТЬ
		|				ИсправляемыйДокумент.Ссылка
		|			ИЗ
		|				ИсправляемыйДокумент КАК ИсправляемыйДокумент)";
	
	// Табличные части Товары и Услуги документа до корректировки.
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + "ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	"""" КАК Содержание,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД,
		|	Товары.Количество,
		|	Товары.Сумма,
		|	Товары.СуммаНДС,
		|	Товары.СуммаСНДС,
		|	Товары.СтатьяРасходов,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ ТоварыУслугиДокументаДоКорректировкиРазвернутые
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка В
		|			(ВЫБРАТЬ
		|				ДокументДоКорректировки.Ссылка
		|			ИЗ
		|				ДокументДоКорректировки КАК ДокументДоКорректировки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|	Расходы.Содержание,
		|	Расходы.СтавкаНДС,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
		|	Расходы.Количество,
		|	Расходы.Сумма,
		|	Расходы.СуммаНДС,
		|	Расходы.СуммаСНДС,
		|	Расходы.СтатьяРасходов,
		|	Расходы.НомерСтроки
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Ссылка В
		|			(ВЫБРАТЬ
		|				ДокументДоКорректировки.Ссылка
		|			ИЗ
		|				ДокументДоКорректировки КАК ДокументДоКорректировки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Содержание,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД,
		|	Товары.Количество,
		|	Товары.Сумма,
		|	Товары.СуммаНДС,
		|	Товары.СуммаСНДС,
		|	Товары.СтатьяРасходов,
		|	Товары.НомерСтроки
		|ИЗ
		|	Документ.КорректировкаПриобретения.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка В
		|			(ВЫБРАТЬ
		|				ДокументДоКорректировки.Ссылка
		|			ИЗ
		|				ДокументДоКорректировки КАК ДокументДоКорректировки)";
	
	
	// Результирующие табличные части Товары и Услуги.
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + "ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД,
		|	СУММА(Товары.Количество) КАК Количество,
		|	СУММА(Товары.Сумма) КАК Сумма,
		|	СУММА(Товары.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ТоварыИсправляемогоДокумента
		|ИЗ
		|	ТоварыУслугиИсправляемогоДокументаРазвернутые КАК Товары,
		|	ДанныеДокументаПоступления КАК ДанныеДокументаПоступления
		|ГДЕ
		|	(Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И НЕ ДанныеДокументаПоступления.ВернутьМногооборотнуюТару)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД,
		|	СУММА(Товары.Количество) КАК Количество,
		|	СУММА(Товары.Сумма) КАК Сумма,
		|	СУММА(Товары.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ТоварыДокументаДоКорректировки
		|ИЗ
		|	ТоварыУслугиДокументаДоКорректировкиРазвернутые КАК Товары,
		|	ДанныеДокументаПоступления КАК ДанныеДокументаПоступления
		|ГДЕ
		|	(Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И НЕ ДанныеДокументаПоступления.ВернутьМногооборотнуюТару)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД,
		|	СУММА(Товары.Количество) КАК Количество,
		|	СУММА(Товары.Сумма) КАК Сумма,
		|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(Товары.СуммаСНДС) КАК СуммаСНДС
		|ПОМЕСТИТЬ ТоварыИсправительногоДокумента
		|ИЗ
		|	Документ.КорректировкаПриобретения.Товары КАК Товары,
		|	ДанныеДокументаПоступления КАК ДанныеДокументаПоступления
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И НЕ ДанныеДокументаПоступления.ВернутьМногооборотнуюТару)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.СтавкаНДС,
		|	Товары.НомерГТД
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура,
		|	Т.СтавкаНДС,
		|	Т.НомерГТД,
		|	МАКСИМУМ(Т.ТоварыИсправляемогоДокумента_Количество) КАК ТоварыИсправляемогоДокумента_Количество,
		|	МАКСИМУМ(Т.ТоварыИсправляемогоДокумента_Сумма) КАК ТоварыИсправляемогоДокумента_Сумма,
		|	МАКСИМУМ(Т.ТоварыИсправляемогоДокумента_СуммаНДС) КАК ТоварыИсправляемогоДокумента_СуммаНДС,
		|	МАКСИМУМ(Т.ТоварыИсправительногоДокумента_Количество) КАК ТоварыИсправительногоДокумента_Количество,
		|	МАКСИМУМ(Т.ТоварыИсправительногоДокумента_Сумма) КАК ТоварыИсправительногоДокумента_Сумма,
		|	МАКСИМУМ(Т.ТоварыИсправительногоДокумента_СуммаНДС) КАК ТоварыИсправительногоДокумента_СуммаНДС,
		|	МАКСИМУМ(Т.ТоварыИсправительногоДокумента_СуммаСНДС) КАК ТоварыИсправительногоДокумента_СуммаСНДС,
		|	МАКСИМУМ(Т.ТоварыДокументаДоКорректировки_Количество) КАК ТоварыДокументаДоКорректировки_Количество,
		|	МАКСИМУМ(Т.ТоварыДокументаДоКорректировки_Сумма) КАК ТоварыДокументаДоКорректировки_Сумма,
		|	МАКСИМУМ(Т.ТоварыДокументаДоКорректировки_СуммаНДС) КАК ТоварыДокументаДоКорректировки_СуммаНДС
		|ПОМЕСТИТЬ РезультатСопоставленияТоваровВрем
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыИсправляемогоДокумента.Номенклатура КАК Номенклатура,
		|		ТоварыИсправляемогоДокумента.СтавкаНДС КАК СтавкаНДС,
		|		ТоварыИсправляемогоДокумента.НомерГТД КАК НомерГТД,
		|		ТоварыИсправляемогоДокумента.Количество КАК ТоварыИсправляемогоДокумента_Количество,
		|		ТоварыИсправляемогоДокумента.Сумма КАК ТоварыИсправляемогоДокумента_Сумма,
		|		ТоварыИсправляемогоДокумента.СуммаНДС КАК ТоварыИсправляемогоДокумента_СуммаНДС,
		|		NULL КАК ТоварыИсправительногоДокумента_Количество,
		|		NULL КАК ТоварыИсправительногоДокумента_Сумма,
		|		NULL КАК ТоварыИсправительногоДокумента_СуммаСНДС,
		|		NULL КАК ТоварыИсправительногоДокумента_СуммаНДС,
		|		NULL КАК ТоварыДокументаДоКорректировки_Количество,
		|		NULL КАК ТоварыДокументаДоКорректировки_Сумма,
		|		NULL КАК ТоварыДокументаДоКорректировки_СуммаНДС
		|	ИЗ
		|		ТоварыИсправляемогоДокумента КАК ТоварыИсправляемогоДокумента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыИсправительногоДокумента.Номенклатура,
		|		ТоварыИсправительногоДокумента.СтавкаНДС,
		|		ТоварыИсправительногоДокумента.НомерГТД,
		|		NULL,
		|		NULL,
		|		NULL,
		|		ТоварыИсправительногоДокумента.Количество,
		|		ТоварыИсправительногоДокумента.Сумма,
		|		ТоварыИсправительногоДокумента.СуммаСНДС,
		|		ТоварыИсправительногоДокумента.СуммаНДС,
		|		NULL,
		|		NULL,
		|		NULL
		|	ИЗ
		|		ТоварыИсправительногоДокумента КАК ТоварыИсправительногоДокумента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыДокументаДоКорректировки.Номенклатура,
		|		ТоварыДокументаДоКорректировки.СтавкаНДС,
		|		ТоварыДокументаДоКорректировки.НомерГТД,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		ТоварыДокументаДоКорректировки.Количество,
		|		ТоварыДокументаДоКорректировки.Сумма,
		|		ТоварыДокументаДоКорректировки.СуммаНДС
		|	ИЗ
		|		ТоварыДокументаДоКорректировки КАК ТоварыДокументаДоКорректировки) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура,
		|	Т.СтавкаНДС,
		|	Т.НомерГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатСопоставленияТоваровВрем.Номенклатура,
		|	РезультатСопоставленияТоваровВрем.СтавкаНДС,
		|	РезультатСопоставленияТоваровВрем.НомерГТД,
		|	РезультатСопоставленияТоваровВрем.ТоварыДокументаДоКорректировки_Количество КАК КоличествоДоКорректировки,
		|	РезультатСопоставленияТоваровВрем.ТоварыДокументаДоКорректировки_Сумма КАК СуммаДоКорректировки,
		|	РезультатСопоставленияТоваровВрем.ТоварыДокументаДоКорректировки_СуммаНДС КАК СуммаНДСДоКорректировки,
		|	РезультатСопоставленияТоваровВрем.ТоварыИсправляемогоДокумента_Количество КАК КоличествоДоИзменения,
		|	РезультатСопоставленияТоваровВрем.ТоварыИсправляемогоДокумента_Сумма КАК СуммаДоИзменения,
		|	РезультатСопоставленияТоваровВрем.ТоварыИсправляемогоДокумента_СуммаНДС КАК СуммаНДСДоИзменения,
		|	РезультатСопоставленияТоваровВрем.ТоварыИсправительногоДокумента_Количество КАК Количество,
		|	РезультатСопоставленияТоваровВрем.ТоварыИсправительногоДокумента_Сумма КАК Сумма,
		|	РезультатСопоставленияТоваровВрем.ТоварыИсправительногоДокумента_СуммаНДС КАК СуммаНДС,
		|	РезультатСопоставленияТоваровВрем.ТоварыИсправительногоДокумента_СуммаСНДС КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РезультатСопоставленияТоваровВрем.ТоварыДокументаДоКорректировки_Сумма, РезультатСопоставленияТоваровВрем.ТоварыИсправляемогоДокумента_Сумма) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВДокументеПоступленияРеализации
		|ПОМЕСТИТЬ РезультатСопоставленияТоваров
		|ИЗ
		|	РезультатСопоставленияТоваровВрем КАК РезультатСопоставленияТоваровВрем
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РезультатСопоставленияТоваровВрем.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Содержание КАК Содержание,
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ НомерСтрок
		|ИЗ
		|	ТоварыУслугиИсправляемогоДокументаРазвернутые КАК Товары
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Содержание
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Содержание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатСопоставления.Номенклатура,
		|	РезультатСопоставления.СтавкаНДС,
		|	РезультатСопоставления.СтавкаНДС КАК СтавкаНДСДоИзменения,
		|	РезультатСопоставления.НомерГТД.Код КАК НомерГТД,
		|	РезультатСопоставления.НомерГТД.Код КАК НомерГТДДоИзменения,
		|	РезультатСопоставления.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	РезультатСопоставления.НомерГТД.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
		|	РезультатСопоставления.КоличествоДоКорректировки,
		|	РезультатСопоставления.СуммаДоКорректировки,
		|	РезультатСопоставления.СуммаНДСДоКорректировки,
		|	РезультатСопоставления.КоличествоДоИзменения,
		|	РезультатСопоставления.СуммаДоИзменения,
		|	РезультатСопоставления.СуммаНДСДоИзменения,
		|	РезультатСопоставления.Количество,
		|	РезультатСопоставления.Сумма,
		|	РезультатСопоставления.СуммаНДС,
		|	РезультатСопоставления.СуммаСНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РезультатСопоставления.КоличествоДоКорректировки, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РезультатСопоставления.СуммаДоКорректировки / РезультатСопоставления.КоличествоДоКорректировки < 0.01
		|					ТОГДА 0.01
		|				ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.СуммаДоКорректировки / РезультатСопоставления.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаДоКорректировки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РезультатСопоставления.КоличествоДоИзменения, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РезультатСопоставления.СуммаДоИзменения / РезультатСопоставления.КоличествоДоИзменения < 0.01
		|					ТОГДА 0.01
		|				ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.СуммаДоИзменения / РезультатСопоставления.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаДоИзменения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РезультатСопоставления.Количество, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РезультатСопоставления.Сумма / РезультатСопоставления.Количество < 0.01
		|					ТОГДА 0.01
		|				ИНАЧЕ ВЫРАЗИТЬ(РезультатСопоставления.Сумма / РезультатСопоставления.Количество КАК ЧИСЛО(15, 2))
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	РезультатСопоставления.ЕстьВДокументеПоступленияРеализации
		|ИЗ
		|	РезультатСопоставленияТоваров КАК РезультатСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ НомерСтрок КАК НомерСтрок
		|		ПО РезультатСопоставления.Номенклатура = НомерСтрок.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	РезультатСопоставления.ЕстьВДокументеПоступленияРеализации УБЫВ,
		|	НомерСтрок.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.Номенклатура,
		|	Услуги.Содержание,
		|	Услуги.СтавкаНДС,
		|	Услуги.СтатьяРасходов КАК СтатьяРасходов,
		|	СУММА(Услуги.Количество) КАК Количество,
		|	СУММА(Услуги.Сумма) КАК Сумма,
		|	СУММА(Услуги.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ УслугиИсправляемогоДокумента
		|ИЗ
		|	ТоварыУслугиИсправляемогоДокументаРазвернутые КАК Услуги
		|ГДЕ
		|	(Услуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ Услуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ИЛИ &ПоступлениеУслуг)
		|
		|СГРУППИРОВАТЬ ПО
		|	Услуги.Номенклатура,
		|	Услуги.Содержание,
		|	Услуги.СтавкаНДС,
		|	Услуги.СтатьяРасходов
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.Номенклатура,
		|	Услуги.Содержание,
		|	Услуги.СтавкаНДС,
		|	Услуги.СтатьяРасходов КАК СтатьяРасходов,
		|	СУММА(Услуги.Количество) КАК Количество,
		|	СУММА(Услуги.Сумма) КАК Сумма,
		|	СУММА(Услуги.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ УслугиДокументаДоКорректировки
		|ИЗ
		|	ТоварыУслугиДокументаДоКорректировкиРазвернутые КАК Услуги
		|ГДЕ
		|	(Услуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ Услуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ИЛИ &ПоступлениеУслуг)
		|
		|СГРУППИРОВАТЬ ПО
		|	Услуги.Номенклатура,
		|	Услуги.Содержание,
		|	Услуги.СтавкаНДС,
		|	Услуги.СтатьяРасходов
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаПоступленияТовары.Содержание КАК Содержание,
		|	КорректировкаПоступленияТовары.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаПоступленияТовары.СтатьяРасходов КАК СтатьяРасходов,
		|	СУММА(КорректировкаПоступленияТовары.Количество) КАК Количество,
		|	СУММА(КорректировкаПоступленияТовары.Сумма) КАК Сумма,
		|	СУММА(КорректировкаПоступленияТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(КорректировкаПоступленияТовары.СуммаСНДС) КАК СуммаСНДС
		|ПОМЕСТИТЬ УслугиИсправительногоДокумента
		|ИЗ
		|	Документ.КорректировкаПриобретения.Товары КАК КорректировкаПоступленияТовары
		|ГДЕ
		|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
		|	И (КорректировкаПоступленияТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ КорректировкаПоступленияТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ИЛИ &ПоступлениеУслуг)
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПоступленияТовары.Номенклатура,
		|	КорректировкаПоступленияТовары.Содержание,
		|	КорректировкаПоступленияТовары.СтавкаНДС,
		|	КорректировкаПоступленияТовары.СтатьяРасходов
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура,
		|	Т.Содержание,
		|	Т.СтавкаНДС,
		|	Т.СтатьяРасходов,
		|	МАКСИМУМ(Т.УслугиИсправляемогоДокумента_Количество) КАК УслугиИсправляемогоДокумента_Количество,
		|	МАКСИМУМ(Т.УслугиИсправляемогоДокумента_Сумма) КАК УслугиИсправляемогоДокумента_Сумма,
		|	МАКСИМУМ(Т.УслугиИсправляемогоДокумента_СуммаНДС) КАК УслугиИсправляемогоДокумента_СуммаНДС,
		|	МАКСИМУМ(Т.УслугиИсправительногоДокумента_Количество) КАК УслугиИсправительногоДокумента_Количество,
		|	МАКСИМУМ(Т.УслугиИсправительногоДокумента_Сумма) КАК УслугиИсправительногоДокумента_Сумма,
		|	МАКСИМУМ(Т.УслугиИсправительногоДокумента_СуммаНДС) КАК УслугиИсправительногоДокумента_СуммаНДС,
		|	МАКСИМУМ(Т.УслугиИсправительногоДокумента_СуммаСНДС) КАК УслугиИсправительногоДокумента_СуммаСНДС,
		|	МАКСИМУМ(Т.УслугиДокументаДоКорректировки_Количество) КАК УслугиДокументаДоКорректировки_Количество,
		|	МАКСИМУМ(Т.УслугиДокументаДоКорректировки_Сумма) КАК УслугиДокументаДоКорректировки_Сумма,
		|	МАКСИМУМ(Т.УслугиДокументаДоКорректировки_СуммаНДС) КАК УслугиДокументаДоКорректировки_СуммаНДС
		|ПОМЕСТИТЬ РезультатСопоставленияУслугВрем
		|ИЗ
		|	(ВЫБРАТЬ
		|		УслугиИсправляемогоДокумента.Номенклатура КАК Номенклатура,
		|		УслугиИсправляемогоДокумента.Содержание КАК Содержание,
		|		УслугиИсправляемогоДокумента.СтавкаНДС КАК СтавкаНДС,
		|		УслугиИсправляемогоДокумента.СтатьяРасходов КАК СтатьяРасходов,
		|		УслугиИсправляемогоДокумента.Количество КАК УслугиИсправляемогоДокумента_Количество,
		|		УслугиИсправляемогоДокумента.Сумма КАК УслугиИсправляемогоДокумента_Сумма,
		|		УслугиИсправляемогоДокумента.СуммаНДС КАК УслугиИсправляемогоДокумента_СуммаНДС,
		|		NULL КАК УслугиИсправительногоДокумента_Количество,
		|		NULL КАК УслугиИсправительногоДокумента_Сумма,
		|		NULL КАК УслугиИсправительногоДокумента_СуммаСНДС,
		|		NULL КАК УслугиИсправительногоДокумента_СуммаНДС,
		|		NULL КАК УслугиДокументаДоКорректировки_Количество,
		|		NULL КАК УслугиДокументаДоКорректировки_Сумма,
		|		NULL КАК УслугиДокументаДоКорректировки_СуммаНДС
		|	ИЗ
		|		УслугиИсправляемогоДокумента КАК УслугиИсправляемогоДокумента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УслугиИсправительногоДокумента.Номенклатура,
		|		УслугиИсправительногоДокумента.Содержание,
		|		УслугиИсправительногоДокумента.СтавкаНДС,
		|		УслугиИсправительногоДокумента.СтатьяРасходов,
		|		NULL,
		|		NULL,
		|		NULL,
		|		УслугиИсправительногоДокумента.Количество,
		|		УслугиИсправительногоДокумента.Сумма,
		|		УслугиИсправительногоДокумента.СуммаСНДС,
		|		УслугиИсправительногоДокумента.СуммаНДС,
		|		NULL,
		|		NULL,
		|		NULL
		|	ИЗ
		|		УслугиИсправительногоДокумента КАК УслугиИсправительногоДокумента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УслугиДокументаДоКорректировки.Номенклатура,
		|		УслугиДокументаДоКорректировки.Содержание,
		|		УслугиДокументаДоКорректировки.СтавкаНДС,
		|		УслугиДокументаДоКорректировки.СтатьяРасходов,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		УслугиДокументаДоКорректировки.Количество,
		|		УслугиДокументаДоКорректировки.Сумма,
		|		УслугиДокументаДоКорректировки.СуммаНДС
		|	ИЗ
		|		УслугиДокументаДоКорректировки КАК УслугиДокументаДоКорректировки) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура,
		|	Т.Содержание,
		|	Т.СтавкаНДС,
		|	Т.СтатьяРасходов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатСопоставленияУслугВрем.Номенклатура,
		|	РезультатСопоставленияУслугВрем.Содержание,
		|	РезультатСопоставленияУслугВрем.СтавкаНДС,
		|	РезультатСопоставленияУслугВрем.СтатьяРасходов,
		|	РезультатСопоставленияУслугВрем.УслугиДокументаДоКорректировки_Количество КАК КоличествоДоКорректировки,
		|	РезультатСопоставленияУслугВрем.УслугиДокументаДоКорректировки_Сумма КАК СуммаДоКорректировки,
		|	РезультатСопоставленияУслугВрем.УслугиДокументаДоКорректировки_СуммаНДС КАК СуммаНДСДоКорректировки,
		|	РезультатСопоставленияУслугВрем.УслугиИсправляемогоДокумента_Количество КАК КоличествоДоИзменения,
		|	РезультатСопоставленияУслугВрем.УслугиИсправляемогоДокумента_Сумма КАК СуммаДоИзменения,
		|	РезультатСопоставленияУслугВрем.УслугиИсправляемогоДокумента_СуммаНДС КАК СуммаНДСДоИзменения,
		|	РезультатСопоставленияУслугВрем.УслугиИсправительногоДокумента_Количество КАК Количество,
		|	РезультатСопоставленияУслугВрем.УслугиИсправительногоДокумента_Сумма КАК Сумма,
		|	РезультатСопоставленияУслугВрем.УслугиИсправительногоДокумента_СуммаНДС КАК СуммаНДС,
		|	РезультатСопоставленияУслугВрем.УслугиИсправительногоДокумента_СуммаСНДС КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РезультатСопоставленияУслугВрем.УслугиИсправляемогоДокумента_Сумма, РезультатСопоставленияУслугВрем.УслугиДокументаДоКорректировки_Сумма) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВДокументеПоступленияРеализации
		|ПОМЕСТИТЬ РезультатСопоставленияУслуг
		|ИЗ
		|	РезультатСопоставленияУслугВрем КАК РезультатСопоставленияУслугВрем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатСопоставления.Номенклатура,
		|	РезультатСопоставления.Содержание,
		|	РезультатСопоставления.Содержание КАК СодержаниеДоИзменения,
		|	РезультатСопоставления.СтавкаНДС,
		|	РезультатСопоставления.СтавкаНДС КАК СтавкаНДСДоИзменения,
		|	РезультатСопоставления.КоличествоДоКорректировки,
		|	РезультатСопоставления.СуммаДоКорректировки,
		|	РезультатСопоставления.СуммаНДСДоКорректировки,
		|	РезультатСопоставления.КоличествоДоИзменения,
		|	РезультатСопоставления.СуммаДоИзменения,
		|	РезультатСопоставления.СуммаНДСДоИзменения,
		|	РезультатСопоставления.Количество,
		|	РезультатСопоставления.Сумма,
		|	РезультатСопоставления.СуммаНДС,
		|	РезультатСопоставления.СуммаСНДС,
		|	ВЫБОР
		|		КОГДА НЕ(РезультатСопоставления.Количество ЕСТЬ NULL 
		|					ИЛИ РезультатСопоставления.Количество = 0)
		|			ТОГДА ВЫРАЗИТЬ(РезультатСопоставления.Сумма / РезультатСопоставления.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА НЕ(РезультатСопоставления.КоличествоДоИзменения ЕСТЬ NULL 
		|					ИЛИ РезультатСопоставления.КоличествоДоИзменения = 0)
		|			ТОГДА ВЫРАЗИТЬ(РезультатСопоставления.СуммаДоИзменения / РезультатСопоставления.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЦенаДоИзменения,
		|	ВЫБОР
		|		КОГДА НЕ(РезультатСопоставления.КоличествоДоКорректировки ЕСТЬ NULL 
		|					ИЛИ РезультатСопоставления.КоличествоДоКорректировки = 0)
		|			ТОГДА ВЫРАЗИТЬ(РезультатСопоставления.СуммаДоКорректировки / РезультатСопоставления.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЦенаДоКорректировки,
		|	РезультатСопоставления.СтатьяРасходов,
		|	РезультатСопоставления.СтатьяРасходов.КорреспондирующийСчет КАК СчетЗатрат,
		|	РезультатСопоставления.СтатьяРасходов.КорреспондирующийСчет КАК СчетЗатратНУ,
		|	РезультатСопоставления.ЕстьВДокументеПоступленияРеализации КАК ЕстьВДокументеПоступленияРеализации,
		|	НомерСтрок.НомерСтроки КАК НомерСтрокиДокумента
		|ИЗ
		|	РезультатСопоставленияУслуг КАК РезультатСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ НомерСтрок КАК НомерСтрок
		|		ПО РезультатСопоставления.Номенклатура = НомерСтрок.Номенклатура
		|			И РезультатСопоставления.Содержание = НомерСтрок.Содержание
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕстьВДокументеПоступленияРеализации УБЫВ,
		|	НомерСтрок.НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.ДокументОснование);
	Запрос.УстановитьПараметр("МоментВремени",     ДанныеИБ.МоментВремени());
	Запрос.УстановитьПараметр("ПоступлениеУслуг",  ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	Запрос.УстановитьПараметр("Ссылка",            ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ЗаказПоставщику = Неопределено;
	ДанныеXDTO.Вставить("Грузоотправитель");
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеXDTO.Грузоотправитель = Выборка.Грузоотправитель;
		ЗаказПоставщику             = Выборка.ЗаказПоставщику;
	КонецЕсли;
	
	ВыборкаДанных = РезультатыЗапроса[6].Выбрать();
	Если ВыборкаДанных.Следующий()
		И ЗначениеЗаполнено(ВыборкаДанных.Ссылка) Тогда
			
		ИмяПКО = ИмяПКОДляОбъектаДанных(КомпонентыОбмена, ВыборкаДанных.Ссылка, ВыборкаДанных.Ссылка.Организация);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ДокументПоступления", Новый Структура("Значение, ИмяПКО", ВыборкаДанных.Ссылка, ИмяПКО));
		КонецЕсли;
		
	КонецЕсли;
	
	ИсправляемыйДокументЭтоКорректировкаПоступления = Ложь;
	
	ВыборкаДанных = РезультатыЗапроса[7].Выбрать();
	Если ВыборкаДанных.Следующий()
		И ЗначениеЗаполнено(ВыборкаДанных.Ссылка) Тогда
			
		ИсправляемыйДокументЭтоКорректировкаПоступления = (ТипЗнч(ВыборкаДанных.Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения"));
		
		ИмяПКО = ИмяПКОДляОбъектаДанных(КомпонентыОбмена, ВыборкаДанных.Ссылка, ВыборкаДанных.Ссылка.Организация);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ИсправляемыйДокументПоступления", Новый Структура("Значение, ИмяПКО", ВыборкаДанных.Ссылка, ИмяПКО));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеXDTO.ВидОперации = "СогласованноеИзменение"
		Или ИсправляемыйДокументЭтоКорректировкаПоступления Тогда
		ДанныеXDTO.Вставить("ВосстановитьНДС", Истина);
	Иначе
		ДанныеXDTO.Вставить("ВосстановитьНДС", Ложь);
	КонецЕсли;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		
		РасчетыВУсловныхЕдиницах = Ложь;
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		КонецЕсли;
	
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент               = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора              = "СПоставщиком";
		ПараметрыПоУмолчанию.Дата                     = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                    = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ЗаказПоставщику, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	ТаблицаТовары = РезультатыЗапроса[17].Выгрузить();
	ТаблицаУслуги = РезультатыЗапроса[23].Выгрузить();
	
	ДанныеXDTO.Вставить("Сумма", ТаблицаТовары.Итог("СуммаСНДС") + ТаблицаУслуги.Итог("СуммаСНДС"));
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "НДСпоСтавкам4и2");
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4);	
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги, НДСПоСтавкам2и4);	
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДатуИНомерВходящегоДокумента(Объект)
	Если Не ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
		Объект.ДатаВходящегоДокумента = Объект.Дата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		Объект.НомерВходящегоДокумента = НСтр("ru = 'Б/Н'");
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьЗакупкуПодДеятельностьПоУмолчанию(Объект, ИмяРеквизитаДляЗаполнения)
	Если Не ЗначениеЗаполнено(Объект[ИмяРеквизитаДляЗаполнения]) Тогда
		Объект[ИмяРеквизитаДляЗаполнения] = Справочники.Организации.ЗакупкаПодДеятельность(Объект.Организация, Объект.Склад, Объект.Дата);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьЗаявкуНаРасходованиеДС(Объект)
	Если Не ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
		И Не ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Заявка,
	|	Заявка.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТЗаявкиНаРасходованиеДС
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|ГДЕ
	|	Заявка.Проведен
	|	И Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|	И Заявка.Дата <= &Дата
	|	И Заявка.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И Заявка.СуммаДокумента = &СуммаДокумента
	|	И Заявка.Валюта = &Валюта
	|	И Заявка.Организация = &Организация
	|	И &ДополнительныеУсловия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка,
	|	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТОстаткиПоЗаявкам
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(
	|			,
	|			ЗаявкаНаРасходованиеДенежныхСредств В
	|				(ВЫБРАТЬ
	|					ВТЗаявкиНаРасходованиеДС.Заявка
	|				ИЗ
	|					ВТЗаявкиНаРасходованиеДС)) КАК ДенежныеСредстваКВыплатеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗаявкиНаРасходованиеДС.Заявка КАК Заявка
	|ИЗ
	|	ВТЗаявкиНаРасходованиеДС КАК ВТЗаявкиНаРасходованиеДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстаткиПоЗаявкам КАК ВТОстаткиПоЗаявкам
	|		ПО (ВТОстаткиПоЗаявкам.Заявка = ВТЗаявкиНаРасходованиеДС.Заявка)
	|			И (ВТОстаткиПоЗаявкам.СуммаОстаток = -ВТЗаявкиНаРасходованиеДС.СуммаДокумента)");
	
	ТекстДополнительныеУсловия = "ИСТИНА";
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		ТекстДополнительныеУсловия = ТекстДополнительныеУсловия + "
		|	И Заявка.ФормаОплатыБезналичная
		|	И Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)";
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
			
			ТекстДополнительныеУсловия = ТекстДополнительныеУсловия + "
			|	И Заявка.БанковскийСчетПолучатель = &БанковскийСчетПолучатель";
			Запрос.УстановитьПараметр("БанковскийСчетПолучатель", Объект.БанковскийСчетПолучатель);
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
			
			ТекстДополнительныеУсловия = ТекстДополнительныеУсловия + "
			|	И Заявка.ПодотчетноеЛицо = &ПодотчетноеЛицо";
			Запрос.УстановитьПараметр("ПодотчетноеЛицо", Объект.ПодотчетноеЛицо);
		Иначе
			ТекстДополнительныеУсловия = ТекстДополнительныеУсловия + "
			|	И Заявка.Контрагент = &Контрагент
			|	И Заявка.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента";
			Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
			Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", Объект.БанковскийСчетКонтрагента);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		ТекстДополнительныеУсловия = ТекстДополнительныеУсловия + "
		|	И Заявка.ФормаОплатыНаличная
		|	И Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)";
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
			
			ТекстДополнительныеУсловия = ТекстДополнительныеУсловия + "
			|	И Заявка.КассаПолучатель = &КассаПолучатель";
			Запрос.УстановитьПараметр("КассаПолучатель", Объект.КассаПолучатель);
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
			
			ТекстДополнительныеУсловия = ТекстДополнительныеУсловия + "
			|	И Заявка.ПодотчетноеЛицо = &ПодотчетноеЛицо";
			Запрос.УстановитьПараметр("ПодотчетноеЛицо", Объект.ПодотчетноеЛицо);
		Иначе
			ТекстДополнительныеУсловия = ТекстДополнительныеУсловия + "
			|	И Заявка.Контрагент = &Контрагент";
			Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеУсловия", ТекстДополнительныеУсловия);
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СуммаДокумента", Объект.СуммаДокумента);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ЗаявкаНаРасходованиеДенежныхСредств = Выборка.Заявка;
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			СтрокаРасшифровки.ЗаявкаНаРасходованиеДенежныхСредств = Выборка.Заявка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКассуККМПоВалютеПодразделениюИОрганизации(ПолученныеДанные)
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "ВалютаДенежныхСредств, Владелец");
	
	Если РеквизитыКассыККМ.ВалютаДенежныхСредств <> ПолученныеДанные.Валюта 
		Или РеквизитыКассыККМ.Владелец <> ПолученныеДанные.Организация Тогда
		
		КассаККМ = Неопределено;
		Валюта = ПолученныеДанные.Валюта;
		Организация = ПолученныеДанные.Организация;
		Подразделение = ПолученныеДанные.Подразделение;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Валюта", Валюта);
		ПараметрыОтбора.Вставить("Организация", Организация);
		ПараметрыОтбора.Вставить("Подразделение", Подразделение);
	
		НеобходимоСоздатьЭлемент = Ложь;
	
		Если ОбщегоНазначения.СсылкаСуществует(Организация) И ОбщегоНазначения.СсылкаСуществует(Валюта) Тогда
			НаименованиеЭлементаДляОбменаПоУмолчанию = СокрЛП(Организация) + " (" + СокрЛП(Валюта) + ")";
		Иначе
			НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Основная касса ККМ'");
		КонецЕсли;
		
		СписокПодразделений = Новый СписокЗначений();
		СписокПодразделений.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
		СписокПодразделений.Добавить(Подразделение);
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
			|	Кассы.Ссылка КАК Касса,
			|	ВЫБОР
			|		КОГДА Кассы.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена,
			|	Кассы.Склад КАК Склад
			|ИЗ
			|	Справочник.КассыККМ КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|	И Кассы.Владелец = &Организация
			|	И Кассы.ВалютаДенежныхСредств = &Валюта
			|	И Кассы.Подразделение В(&СписокПодразделений)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ,
			|	Склад УБЫВ");
	
		Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				КассаККМ = Выборка.Касса;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		// Создание элемента для обмена с заданными параметрами
		Если НеобходимоСоздатьЭлемент Тогда
			КассаОбъект = Справочники.КассыККМ.СоздатьЭлемент();
			КассаОбъект.Наименование			= НаименованиеЭлементаДляОбменаПоУмолчанию;
			КассаОбъект.ВалютаДенежныхСредств	= Валюта;
			КассаОбъект.Владелец				= Организация;
			КассаОбъект.Подразделение			= Подразделение;
			КассаОбъект.ТипКассы                = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
			Попытка
				КассаОбъект.Записать();
				КассаККМ = КассаОбъект.Ссылка;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Создание элемента КассыККМ'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
	       			УровеньЖурналаРегистрации.Ошибка,,,
	       			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
				КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
			КонецПопытки
		КонецЕсли;
		
		ПолученныеДанные.КассаККМ = КассаККМ;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(ПолученныеДанные, КомпонентыОбмена, НаименованиеСклада = "")
	Если ЗначениеЗаполнено(НаименованиеСклада) Тогда
		Склад = Справочники.Склады.НайтиПоНаименованию(НаименованиеСклада);
	Иначе
		Склад = ПолученныеДанные.Склад;
	КонецЕсли;
		
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "ВалютаДенежныхСредств, Владелец, Склад");
	
	Если РеквизитыКассыККМ.ВалютаДенежныхСредств <> ПолученныеДанные.Валюта 
		Или РеквизитыКассыККМ.Владелец <> ПолученныеДанные.Организация
		ИЛИ (КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам И РеквизитыКассыККМ.Склад <> Склад) Тогда
		
		КассаККМ = Неопределено;
		Валюта = ПолученныеДанные.Валюта;
		Организация = ПолученныеДанные.Организация;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Валюта", Валюта);
		ПараметрыОтбора.Вставить("Организация", Организация);
		ПараметрыОтбора.Вставить("Склад", Склад);
	
		НеобходимоСоздатьЭлемент = Ложь;
	
		Если ОбщегоНазначения.СсылкаСуществует(Организация) И ОбщегоНазначения.СсылкаСуществует(Валюта) Тогда
			НаименованиеЭлементаДляОбменаПоУмолчанию = СокрЛП(Организация) + " (" + СокрЛП(Валюта) + ")";
		Иначе
			НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Основная касса ККМ'");
		КонецЕсли;
		
		СписокСкладов = Новый СписокЗначений();
		СписокСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
		СписокСкладов.Добавить(Склад);
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
			|	Кассы.Ссылка КАК Касса,
			|	ВЫБОР
			|		КОГДА Кассы.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена,
			|	Кассы.Склад КАК Склад
			|ИЗ
			|	Справочник.КассыККМ КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|	И Кассы.Владелец = &Организация
			|	И Кассы.ВалютаДенежныхСредств = &Валюта
			|	И Кассы.Склад В(&СписокСкладов)
	
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ,
			|	Склад УБЫВ");
	
		Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				КассаККМ = Выборка.Касса;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	
		// Создание элемента для обмена с заданными параметрами
		Если НеобходимоСоздатьЭлемент Тогда
			КассаОбъект = Справочники.КассыККМ.СоздатьЭлемент();
			КассаОбъект.Наименование			= НаименованиеЭлементаДляОбменаПоУмолчанию;
			КассаОбъект.ВалютаДенежныхСредств	= Валюта;
			КассаОбъект.Владелец				= Организация;
			КассаОбъект.Склад					= Склад;
			КассаОбъект.ТипКассы                = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
			Попытка
				КассаОбъект.Записать();
				КассаККМ = КассаОбъект.Ссылка;
			Исключение
				КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(КассаККМ, ИнформацияОбОшибке(), КомпонентыОбмена);
			КонецПопытки
		КонецЕсли;
		
		ПолученныеДанные.КассаККМ = КассаККМ;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКассуПоВалютеИОрганизации(ПолученныеДанные, КомпонентыОбмена, НаименованиеПодразделения = "")
	Если ЗначениеЗаполнено(НаименованиеПодразделения) Тогда
		Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(НаименованиеПодразделения);
	Иначе
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
		
	РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Касса, "ВалютаДенежныхСредств, Владелец, Подразделение");
	
	Если РеквизитыКассы.ВалютаДенежныхСредств <> ПолученныеДанные.Валюта 
		Или РеквизитыКассы.Владелец <> ПолученныеДанные.Организация
		Или ?(ЗначениеЗаполнено(Подразделение), РеквизитыКассы.Подразделение <> Подразделение,Ложь) Тогда
		
		ПараметрыОтбора = Новый Структура(
			"Валюта,Организация,Подразделение",
			ПолученныеДанные.Валюта,
			ПолученныеДанные.Организация,
			Подразделение);
		
		ПолученныеДанные.Касса = КассаПоУмолчанию(ПараметрыОтбора, КомпонентыОбмена);
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКассуТабличнойЧастиПоВалютеИОрганизации(ПолученныеДанные, КомпонентыОбмена, НаименованиеПодразделения = "")
	Если ЗначениеЗаполнено(НаименованиеПодразделения) Тогда
		Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(НаименованиеПодразделения);
	Иначе
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого Строка Из ПолученныеДанные.Кассы Цикл
		
		// Получаем валюту из исходной строки из дополнительных свойств. Валюту необходимо конвертировать в объект базы.
		Валюта = ПолученныеДанные.ДополнительныеСвойства.Кассы.Получить(Индекс).Валюта;
		
		РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Касса, "ВалютаДенежныхСредств, Владелец, Подразделение");
		
		Если РеквизитыКассы.ВалютаДенежныхСредств <> Валюта 
			Или РеквизитыКассы.Владелец <> ПолученныеДанные.Организация
			Или ?(ЗначениеЗаполнено(Подразделение), РеквизитыКассы.Подразделение <> Подразделение, Ложь) Тогда
			
			ПараметрыОтбора = Новый Структура(
				"Валюта,Организация,Подразделение",
				Валюта,
				ПолученныеДанные.Организация,
				Подразделение);
			
			Строка.Касса = КассаПоУмолчанию(ПараметрыОтбора, КомпонентыОбмена);
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКонтрагентаНашеПредприятие(ПолученныеДанные, ПараметрыКонвертации, ЗаполнятьБанковскийСчет = Ложь)
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыКонвертации.КонтрагентНашеПредприятие) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		  | Контрагенты.Ссылка КАК КонтрагентНашеПредприятие
		  |ИЗ
		  | Справочник.Контрагенты КАК Контрагенты
		  |ГДЕ
		  | Контрагенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)");
		  
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		 	
		ПараметрыКонвертации.КонтрагентНашеПредприятие = Выборка.КонтрагентНашеПредприятие;
	КонецЕсли;
	
	ПолученныеДанные.Контрагент = ПараметрыКонвертации.КонтрагентНашеПредприятие;
	
	Если ЗаполнятьБанковскийСчет Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыКонвертации.КонтрагентНашеПредприятиеБанковскийСчет) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		  	| БанкСчета.Ссылка КАК БанковскийСчет
		  	|ИЗ
		  	| Справочник.БанковскиеСчетаКонтрагентов КАК БанкСчета
		  	|ГДЕ
		 	| БанкСчета.Владелец = &НашеПредприятие И БанкСчета.ВалютаДенежныхСредств = &Валюта");
			Запрос.УстановитьПараметр("НашеПредприятие", ПараметрыКонвертации.КонтрагентНашеПредприятие);
			Запрос.УстановитьПараметр("Валюта", ПолученныеДанные.Валюта);
			Выборка = Запрос.Выполнить().Выбрать();
			Если НЕ Выборка.Следующий() Тогда
				Возврат;
			КонецЕсли;
			ПараметрыКонвертации.КонтрагентНашеПредприятиеБанковскийСчет = Выборка.БанковскийСчет;
		КонецЕсли;
		ПолученныеДанные.БанковскийСчетКонтрагента = ПараметрыКонвертации.КонтрагентНашеПредприятиеБанковскийСчет;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO)
	// Заполняем в НалогообложениеНДС документе по полученным из формата данным.
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НалогообложениеНДС",
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Налогообложение, "Перечисления_ТипыНалогообложенияНДС"));
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьОбъектРасчетовВОстатках(ПолученныеДанные, ЗаполнятьДоговор = Ложь, ОбъектРасчетовПоУмолчанию = Неопределено)
	Для Каждого Строка Из ПолученныеДанные.РасчетыСПартнерами Цикл
		
		Строка.ДатаПлатежа = ПолученныеДанные.Дата;
		
		Если Не ЗаполнятьДоговор или НЕ ЗначениеЗаполнено(Строка.ОбъектРасчетов) Тогда
			Если ЗначениеЗаполнено(ОбъектРасчетовПоУмолчанию) Тогда
				Строка.ОбъектРасчетов = ОбъектРасчетовПоУмолчанию;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ОбъектРасчетов) И ТипЗнч(Строка.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
			СтруктураДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ОбъектРасчетов, "Номер,Дата,Наименование");
			Строка.НомерРасчетногоДокумента = СтруктураДоговора.Номер;
			Строка.ДатаРасчетногоДокумента  = СтруктураДоговора.Дата;			
			
			ПозицияОт = Найти(СтруктураДоговора.Наименование, " от ");
			
			Если ПозицияОт > 0 Тогда
				
				Если Не ЗначениеЗаполнено(Строка.НомерРасчетногоДокумента) Тогда
					Строка.НомерРасчетногоДокумента = СокрЛП(Лев(СтруктураДоговора.Наименование, ПозицияОт));
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Строка.ДатаРасчетногоДокумента) Тогда
					Строка.ДатаРасчетногоДокумента = СокрЛП(Прав(СтруктураДоговора.Наименование, 
						СтрДлина(СтруктураДоговора.Наименование)-ПозицияОт));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабРасчетыСПартнерами = ПолученныеДанные.РасчетыСПартнерами.Выгрузить();
	ТабРасчетыСПартнерами.Свернуть("Партнер, Контрагент, ВалютаВзаиморасчетов, ОбъектРасчетов, НомерРасчетногоДокумента, ДатаРасчетногоДокумента, ДатаПлатежа, ДокументРасчетов", "Сумма, СуммаРегл");
	
	ПолученныеДанные.РасчетыСПартнерами.Загрузить(ТабРасчетыСПартнерами);
КонецПроцедуры
Процедура ЗаполнитьПараметрыДоставки(Объект)
	Если Не ЕстьРеквизитДанныхИБ(Объект, "СпособДоставки") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
			Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПодразделениеВРасшифровкеПлатежа(Объект, КомпонентыОбмена)
	ПодразделениеПоУмолчанию = Неопределено;
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
		Если Не ЗначениеЗаполнено(Строка.Подразделение) Тогда
			Если ПодразделениеПоУмолчанию = Неопределено Тогда
				ПодразделениеПоУмолчанию = ЭлементПоУмолчанию(КомпонентыОбмена, "Подразделение");
			КонецЕсли;
			Строка.Подразделение = ПодразделениеПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		Возврат;
	ИначеЕсли ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.Подразделение) Тогда
		// Подразделение было заполнено в данных ИБ - поместим его в ПолученныеДанные чтобы не затерлось.
		ПолученныеДанные.Подразделение = ДанныеИБ.Подразделение;
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Подразделение = ЭлементПоУмолчанию(КомпонентыОбмена, "Подразделение");
КонецПроцедуры
Процедура ЗаполнитьРазделУчетаВводаОстатков(ПолученныеДанные)
	ПолученныеДанные.ОтражатьВОперативномУчете = Истина;
	
КонецПроцедуры
Процедура ЗаполнитьРеквизиты(ДанныеПриемник, ДанныеИсточник, СтрокаРеквизиты, Перезаполнять = Ложь)
	Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРеквизиты, ",", Истина, Истина);
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначенияПриемник = Новый Структура(Реквизит);
		ЗаполнитьЗначенияСвойств(ЗначенияПриемник, ДанныеПриемник);
		
		ЗначенияИсточник = Новый Структура(Реквизит);
		ЗаполнитьЗначенияСвойств(ЗначенияИсточник, ДанныеИсточник);
		
		Если ЗначениеЗаполнено(ЗначенияИсточник[Реквизит])
			И (Не ЗначениеЗаполнено(ЗначенияПриемник[Реквизит]) или Перезаполнять)  Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПриемник, ЗначенияИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСрокВозвратаДСПриВыдачеПодотчетнику(ПолученныеДанные, ДанныеИБ)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		Возврат;
	КонецЕсли;
	// Если срок не указан, то заполняется как при интерактивном вводе: по умолчанию "Через неделю".
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ДатаАвансовогоОтчета) Тогда
		ДанныеДляЗаписиВИБ.ДатаАвансовогоОтчета = ДанныеДляЗаписиВИБ.Дата + 7 * 24 * 3600;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСтруктуруДанныхСтроки(СоответствиеРеквизитовТЧ, СтрокаXDTO, СтруктураДанныхСтроки)
	Для Каждого ЭлементСоответствия Из СоответствиеРеквизитовТЧ Цикл
		ЗначениеРеквизитаТЧ = СтрокаXDTO[ЭлементСоответствия.Значение];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить(ЭлементСоответствия.Ключ,ЗначениеРеквизитаТЧ); 
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьТаблицуОстатковПоРасчетамСКонтрагентами(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ВидДоговораПоУмолчанию)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводОстатковРасчетыСПартнерами.Контрагент КАК Контрагент,
	|	ВводОстатковРасчетыСПартнерами.Сумма КАК Сумма,
	|	ВводОстатковРасчетыСПартнерами.СуммаРегл КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ВводОстатковРасчетыСПартнерами.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВводОстатковРасчетыСПартнерами.ОбъектРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументРасчетовКакДоговор,
	|	ВЫБОР
	|		КОГДА ВводОстатковРасчетыСПартнерами.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВводОстатковРасчетыСПартнерами.ОбъектРасчетов.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	ВводОстатковРасчетыСПартнерами.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
	|	ВводОстатковРасчетыСПартнерами.ОбъектРасчетов КАК ДокументРасчетов
	|ИЗ
	|	Документ.ВводОстатков.РасчетыСПартнерами КАК ВводОстатковРасчетыСПартнерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, ) КАК КурсыВалютСрезПоследних
	|		ПО ВводОстатковРасчетыСПартнерами.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ВводОстатковРасчетыСПартнерами.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",    ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза", ДанныеИБ.Дата);
	
	ТаблицаРасчеты = Запрос.Выполнить().Выгрузить();
	ТаблицаРасчеты.Колонки.Добавить("Договор");
	
	Для Каждого СтрокаРасчеты Из ТаблицаРасчеты Цикл
		Если ЗначениеЗаполнено(СтрокаРасчеты.ДокументРасчетовКакДоговор) Тогда
			СтрокаРасчеты.Договор = СтрокаРасчеты.ДокументРасчетовКакДоговор;
		Иначе
		
			ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
			ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
			ПараметрыПоУмолчанию.Контрагент  = СтрокаРасчеты.Контрагент;
			
			ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
			ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = СтрокаРасчеты.ВалютаВзаиморасчетов;
			ПараметрыПоУмолчанию.ВидДоговора = ВидДоговораПоУмолчанию;
			
			СтрокаРасчеты.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
			
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Расчеты", ТаблицаРасчеты);
КонецПроцедуры
Процедура ЗаполнитьТаблицуОстатковПоРасчетамСПодотчетниками(ДанныеИБ, ДанныеXDTO)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводОстатковРасчетыСПодотчетниками.ПодотчетноеЛицо КАК ФизическоеЛицо,
	|	ВводОстатковРасчетыСПодотчетниками.Валюта КАК ВалютаВзаиморасчетов,
	|	ВводОстатковРасчетыСПодотчетниками.Сумма КАК Сумма,
	|	ВводОстатковРасчетыСПодотчетниками.СуммаРегл КАК СуммаРегл
	|ИЗ
	|	Документ.ВводОстатков.РасчетыСПодотчетниками КАК ВводОстатковРасчетыСПодотчетниками
	|ГДЕ
	|	ВводОстатковРасчетыСПодотчетниками.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаРасчеты = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Расчеты", ТаблицаРасчеты);
КонецПроцедуры
Процедура ЗаполнитьТаблицуСтатьиДДСИХозОперации(Объект, СтатьиДДСИХозОперации)
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		
		Для Каждого Строка Из Объект.ОплатаПоставщикам Цикл
		
			Если ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
				СтрокаТаблицы.СтатьяДДС   = Объект.СтатьяДвиженияДенежныхСредств;
				СтрокаТаблицы.ХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо; 
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка Из Объект.ПрочиеРасходы Цикл
		
			Если ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
				СтрокаТаблицы.СтатьяДДС   = Объект.СтатьяДвиженияДенежныхСредств;
				СтрокаТаблицы.ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходыПодотчетногоЛица; 
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтатьяДвиженияДенежныхСредств", Объект.Метаданные())
			И ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		
			СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
			СтрокаТаблицы.СтатьяДДС   = Объект.СтатьяДвиженияДенежныхСредств;
			СтрокаТаблицы.ХозОперация = Перечисления.ХозяйственныеОперации.РеализацияВРозницу; 
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		
		Если ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств)
			И ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		
			СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
			СтрокаТаблицы.СтатьяДДС = Объект.СтатьяДвиженияДенежныхСредств;
			СтрокаТаблицы.ХозОперация = Объект.ХозяйственнаяОперация; 
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		
		Если ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
			Если ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
			
				СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
				СтрокаТаблицы.СтатьяДДС = Объект.СтатьяДвиженияДенежныхСредств;
				СтрокаТаблицы.ХозОперация = Объект.ХозяйственнаяОперация; 
			КонецЕсли;
			
			Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			
				Если ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда
					СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
					СтрокаТаблицы.СтатьяДДС = СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств;
					СтрокаТаблицы.ХозОперация = Объект.ХозяйственнаяОперация; 
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Процедура ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект)
	Если ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		// Значение в объекте заполнено, изменять не надо.
		Возврат;
	КонецЕсли;
	
	ТипМетаданныхОбъекта = Объект.Метаданные();
	
	Если ТипМетаданныхОбъекта = Метаданные.Документы.ОтчетОРозничныхПродажах Тогда
		
		Объект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
			Объект.Организация,
			Объект.Склад,
			Объект.Дата); 
	
	ИначеЕсли ТипМетаданныхОбъекта <> Метаданные.Документы.ВводОстатков
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		И (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
		Или Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		
	ИначеЕсли ТипМетаданныхОбъекта <> Метаданные.Документы.ВводОстатков
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		
	ИначеЕсли ТипМетаданныхОбъекта <> Метаданные.Документы.ВводОстатков
		И ((Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
		Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		И Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		
	Иначе
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
			// Для документов:
			// Реализация товаров и услуг, Возврат товаров от клиента, 
			// Ввод остатков переданных на комиссию
			Если (ТипМетаданныхОбъекта = Метаданные.Документы.РеализацияТоваровУслуг
				Или ТипМетаданныхОбъекта = Метаданные.Документы.ВозвратТоваровОтКлиента
				Или ТипМетаданныхОбъекта = Метаданные.Документы.ЗаказКлиента)
				И ЗначениеЗаполнено(Объект.Соглашение) Тогда
				Объект.НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "НалогообложениеНДС");
			ИначеЕсли ТипМетаданныхОбъекта = Метаданные.Документы.ВводОстатков
				И Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию Тогда
				Объект.НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеСКомиссионером, "НалогообложениеНДС");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
			// Для документов:
			// Ввод остатков товаров принятых на комиссию, Поступление товаров и услуг, 
			// Возврат товаров поставщику
			Если (ТипМетаданныхОбъекта = Метаданные.Документы.ПриобретениеТоваровУслуг
				Или ТипМетаданныхОбъекта = Метаданные.Документы.ВозвратТоваровПоставщику
				Или ТипМетаданныхОбъекта = Метаданные.Документы.ЗаказПоставщику)
				И ЗначениеЗаполнено(Объект.Соглашение) Тогда
				Объект.НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "НалогообложениеНДС");
			ИначеЕсли ТипМетаданныхОбъекта = Метаданные.Документы.ВводОстатков
				И Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию Тогда
				Объект.НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеСКомитентом, "НалогообложениеНДС");
			КонецЕсли;
			
		КонецЕсли;
		
		// Если не удалось заполнить "НалогообложениеНДС" из соглашения, заполняем 
		// значением по умолчанию на дату документа в соответствии со складом и организацией.
		Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
			Объект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
				Объект.Организация, Объект.Склад, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТЧТоварыВводОстатков(ПолученныеДанные, ДанныеТЧXDTO, ПравилаЗаполнения = Неопределено)
	Если ПравилаЗаполнения = Неопределено Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СуммаБезНДС",        "СуммаБезНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",           "СуммаНДС");
		ПравилаЗаполнения.Вставить("Номенклатура",       "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",         "Количество");
		ПравилаЗаполнения.Вставить("СтавкаНДС",          "СтавкаНДС");
		ПравилаЗаполнения.Вставить("НомерГТД",           "НомерГТД");
	КонецЕсли;
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеТЧXDTO Цикл
	
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		//Обход ограничения формата
		Если ЗначениеЗаполнено(Строка.СуммаБезНДС)
			и Строка.СуммаБезНДС = 0.01 * ?(Строка.Количество > 0, -1, 1) Тогда
			Строка.СуммаБезНДС = 0;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.СуммаНДС) Тогда
			Строка.СуммаНДС = 0;
		КонецЕсли;
		
		Если Строка.Количество <> 0 Тогда
			СтруктураДанныхСтроки.Вставить("Цена", Окр(Строка.СуммаБезНДС / Строка.Количество, 2));
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить("Сумма",     		 Строка.СуммаБезНДС);
		СтруктураДанныхСтроки.Вставить("СуммаРегл",     	 Строка.СуммаБезНДС);
		СтруктураДанныхСтроки.Вставить("СуммаСНДС",     	 Строка.СуммаБезНДС + Строка.СуммаНДС);
		СтруктураДанныхСтроки.Вставить("НДСРегл",     		 Строка.СуммаНДС);
		СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", Строка.Количество);
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТЧ);
КонецПроцедуры
Процедура ЗаполнитьЦенуСписаниеОприходование(ТаблицаТовары, КомпонентыОбмена)
	ОграничениеНулевойЦены = (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3"));
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		Цена = 0;
		Если Не СтрокаТовары.Количество = 0 Тогда
			Цена = Окр(СтрокаТовары.Сумма / СтрокаТовары.Количество, 2);
		КонецЕсли;
		
		Если Цена < 0.01
			И ОграничениеНулевойЦены Тогда
			СтрокаТовары.Цена = -1;
		Иначе
			СтрокаТовары.Цена = Цена;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ЗначениеВИнструкциюПКО(КомпонентыОбмена, Значение, ЭтоПростойТип = Ложь, ПравилоНайдено = Ложь)
	// Параметры:
	// КомпонентыОбмена - структура компонентов обмена в рамках текущего сеанса;
	// Значение - значение, которое необходимо поместить в свойство объекта XDTO;
	// ЭтоПростойТип - исходящий параметр. Указывает, является ли тип переданного значения примитивным (Число, Строка, Булево, Дата);
	// ПравилоНайдено - определяет, было ли найдено правило конвертации. Если правило найдено, но Результат = Неопределено, значит, было найдено более одного ПКО для значения.
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоОтправка		= (КомпонентыОбмена.НаправлениеОбмена = "Отправка");
	ЭтоПолучение	= (КомпонентыОбмена.НаправлениеОбмена = "Получение");
	
	ТипЗначенияСвойства = ТипЗнч(Значение);
	
	Если ЭтоПолучение
		И ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Ссылка") Тогда
		
		ТипЗначенияСвойства = Значение.Ссылка.ТипЗначенияXDTO;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("ИмяПКО") Тогда
		
		Возврат Новый Структура("Значение, ИмяПКО", Значение, Значение.ИмяПКО);
	КонецЕсли;
	
	Если ТипЗначенияСвойства = Тип("Число") 
		Или ТипЗначенияСвойства = Тип("Строка")
		Или ТипЗначенияСвойства = Тип("Булево")
		Или ТипЗначенияСвойства = Тип("Дата") Тогда
		
		Результат = Значение;
		ЭтоПростойТип = Истина;
	Иначе
		СтрокиПКО = Новый Массив;
		
		Если ЭтоОтправка Тогда	
			СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипДанных", ТипЗначенияСвойства));
		ИначеЕсли ЭтоПолучение Тогда
			СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
		КонецЕсли;
	
		// Ищем только однозначное соответствие.
		// Если правил будет найдено больше одного, считаем, что конвертация не выполнена.
		ЭтоГруппа = Неопределено;
				
		Для Каждого СтрокаПКО Из СтрокиПКО Цикл
			Если ЭтоОтправка Тогда
				Если СтрокаПКО.ЭтоСправочник Тогда
					Если ЭтоГруппа = Неопределено
						И СтрокаПКО.ОбъектДанных.Иерархический
						И СтрокаПКО.ОбъектДанных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
						ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "ЭтоГруппа");
					Иначе
						ЭтоГруппа = Ложь;
					КонецЕсли;
					
					Если ЭтоГруппа
							И Не СтрокаПКО.ПравилоДляГруппыСправочника
						Или Не ЭтоГруппа
							И СтрокаПКО.ПравилоДляГруппыСправочника Тогда
						
						Продолжить;					
					КонецЕсли;			
				Иначе
					// Прочие варианты проверок						
				КонецЕсли;
			КонецЕсли;
			
			Если ПравилоНайдено Тогда
				Результат = Неопределено;
				Прервать;
			Иначе
				Результат = Новый Структура("Значение, ИмяПКО", Значение, СтрокаПКО.ИмяПКО);
				ПравилоНайдено = Истина;
			КонецЕсли;		
		КонецЦикла;			
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция ИмяПКОДляОбъектаДанных(КомпонентыОбмена, Объект, Организация)
	ИмяПКО = "";
		
	ТипСсылки = ТипЗнч(Объект);
	
	Если ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ИмяПКО = ?(СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.АктВыполненныхРабот"),
			"Документ_АктВыполненныхРабот_Отправка",
			"Документ_АктВыполненныхРаботРТУ_Отправка");
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ИмяПКО = "Документ_ВозвратТоваровОтКлиента_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ИмяПКО = "Документ_ЗаказПоставщику_Отправка";	
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ИмяПКО = "Документ_ЗаказКлиента_Отправка";	
	
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		
		ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
		
	
	
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		
		ИмяПКО = "Документ_ОтчетКомиссионераОСписании_Отправка";	
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		
		ИмяПКО = "Документ_ОтчетКомитентуОСписании_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ХозяйственнаяОперация");
		
		ИмяПКО = ?(ХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо,
			"Документ_ПТУЧерезПодотчетноеЛицо_Отправка",
			"Документ_ПоступлениеТоваровУслуг_Отправка");
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		
		ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ХозяйственнаяОперация");
		
		ИмяПКО = ?(ХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо,
			"Документ_ПУПАЧерезПодотчетноеЛицо_Отправка",
			"Документ_ПоступлениеУслугПрочихАктивов_Отправка");
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		
		ИмяПКО = "Документ_РеализацияУслугПрочихАктивов_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда	
		
		ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Организация, ОрганизацияПолучатель");
		
		Если ОрганизацииИнтеркампани.Организация = Организация Тогда
			ИмяПКО = "ВозвратМеждуОрганизациями_Поставщику_Отправка";
		ИначеЕсли ОрганизацииИнтеркампани.ОрганизацияПолучатель = Организация Тогда
			ИмяПКО = "ВозвратМеждуОрганизациями_ОтПокупателя_Отправка";
		КонецЕсли;
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Организация, ОрганизацияПолучатель");
		
		Если ОрганизацииИнтеркампани.Организация = Организация Тогда
			ИмяПКО = "ПередачаМеждуОрганизациями_РТУ_Отправка";
		ИначеЕсли ОрганизацииИнтеркампани.ОрганизацияПолучатель = Организация Тогда
			ИмяПКО = "ПередачаМеждуОрганизациями_ПТУ_Отправка";
		КонецЕсли;
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") Тогда
		
		ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Организация, Комиссионер");
		
		Если ОрганизацииИнтеркампани.Организация = Организация Тогда
			ИмяПКО = "Документ_ОтчетКомиссияОрганизСписаниеКомитент";
		ИначеЕсли ОрганизацииИнтеркампани.Комиссионер = Организация Тогда
			ИмяПКО = "Документ_ОтчетКомиссияОрганизСписаниеКомиссионер";
		КонецЕсли;
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		
		ОрганизацииИнтеркампани = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Организация, Комиссионер");
		
		Если ОрганизацииИнтеркампани.Организация = Организация Тогда
			ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ";
		ИначеЕсли ОрганизацииИнтеркампани.Комиссионер = Организация Тогда
			ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка";
		КонецЕсли;
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ИмяПКО = "Документ_СчетФактураПолученный_Отправка";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		
		ИмяПКО = "Документ_ТаможеннаяДекларация_Отправка";
		
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция КассаККМФискальноеУстройство(Объект)
	ФискальноеУстройство = Неопределено;
	КассаККМ             = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КассыККМ") Тогда
		
		КассаККМ = Объект;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КассыККМ.ПодключаемоеОборудование КАК ФискальноеУстройство,
		|	ВЫБОР
		|		КОГДА КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.КассаККМ = &КассаККМ
		|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
		
		Запрос.УстановитьПараметр("КассаККМ",     КассаККМ);
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда	
			ФискальноеУстройство = Выборка.ФискальноеУстройство;
		КонецЕсли;
		
	Иначе
		
		ФискальноеУстройство = Объект;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КассыККМ.КассаККМ КАК КассаККМ,
		|	ВЫБОР
		|		КОГДА КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.ПодключаемоеОборудование = &ФискальноеУстройство
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
	
		Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
		Запрос.УстановитьПараметр("РабочееМесто",         МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда	
			КассаККМ = Выборка.КассаККМ;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ФискальноеУстройство", ФискальноеУстройство);
	ВозвращаемоеЗначение.Вставить("КассаККМ",             КассаККМ);
	
	Возврат ВозвращаемоеЗначение;
КонецФункции
Функция КассаПоУмолчанию(ПараметрыОтбора, КомпонентыОбмена)
	Валюта = ПараметрыОтбора.Валюта;
	Организация = ПараметрыОтбора.Организация;
	Подразделение = ПараметрыОтбора.Подразделение;
	
	НеобходимоСоздатьЭлемент = Ложь;
	
	Если ОбщегоНазначения.СсылкаСуществует(Организация) И ОбщегоНазначения.СсылкаСуществует(Валюта) Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = СокрЛП(Организация) + " (" + СокрЛП(Валюта) + ")";
	Иначе
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Основная касса'");
	КонецЕсли;
	
	СписокПодразделений = Новый СписокЗначений();
	СписокПодразделений.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	СписокПодразделений.Добавить(Подразделение);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	Кассы.Ссылка КАК Касса,
		|	ВЫБОР
		|		КОГДА Кассы.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена,
		|	Кассы.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	НЕ Кассы.ПометкаУдаления
		|	И Кассы.Владелец = &Организация
		|	И Кассы.ВалютаДенежныхСредств = &Валюта
		|	И Кассы.Подразделение В(&СписокПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ,
		|	Подразделение УБЫВ");
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
			Касса = Выборка.Касса;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьЭлемент = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами
	Если НеобходимоСоздатьЭлемент Тогда
		КассаОбъект = Справочники.Кассы.СоздатьЭлемент();
		КассаОбъект.Наименование			= НаименованиеЭлементаДляОбменаПоУмолчанию;
		КассаОбъект.ВалютаДенежныхСредств	= Валюта;
		КассаОбъект.Владелец				= Организация;
		КассаОбъект.Подразделение			= Подразделение;
		Попытка
			КассаОбъект.Записать();
			Касса = КассаОбъект.Ссылка;
		Исключение
			Касса = Справочники.Кассы.ПустаяСсылка();
			ЗаписатьОшибкуВЖурналРегистрации(Касса,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
		КонецПопытки
	КонецЕсли;
		
	Возврат Касса;
КонецФункции
Функция КонтрагентИзДопСвойствПолученныхДанных(ПолученныеДанные)
	КонтрагентСсылка = Неопределено;
	
	УИД = Новый УникальныйИдентификатор(СокрЛП(ПолученныеДанные.ДополнительныеСвойства.КонтрагентСсылка));
	КонтрагентСсылка = Справочники.Контрагенты.ПолучитьСсылку(УИД);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(КонтрагентСсылка) Тогда
		// Поиск по наименованию.
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоНаименованию(ПолученныеДанные.ДополнительныеСвойства.КонтрагентНаименование);
		Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			НовыйКонтрагент.Наименование = ПолученныеДанные.ДополнительныеСвойства.КонтрагентНаименование;
			НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
			НовыйКонтрагент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку(УИД));
			НовыйКонтрагент.Записать();
			КонтрагентСсылка = НовыйКонтрагент.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтрагентСсылка;
КонецФункции
Функция КонтрагентИзОрганизации(Знач ОрганизацияДляСозданияКонтрагента, КомпонентыОбмена)
	// Проверим, есть ли в базе контрагент, созданный по организации, если нет, то создадим его и выгрузим.
	СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(ОрганизацияДляСозданияКонтрагента.УникальныйИдентификатор());
	Если НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) ИЛИ СсылкаНаКонтрагента.ПолучитьОбъект() = Неопределено Тогда
		
		ЗапросКонтр = Новый Запрос;
		ЗапросКонтр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
		|ИЗ Справочник.Контрагенты
		|ГДЕ Наименование = &Наименование 
		|	И ИНН = &ИНН
		|	И КПП = &КПП
		|	И ЮридическоеФизическоеЛицо = &ЮридическоеФизическоеЛицо";
		ЗапросКонтр.УстановитьПараметр("Наименование", ОрганизацияДляСозданияКонтрагента.Наименование);
		ЗапросКонтр.УстановитьПараметр("ИНН", ОрганизацияДляСозданияКонтрагента.ИНН);
		ЗапросКонтр.УстановитьПараметр("КПП", ОрганизацияДляСозданияКонтрагента.КПП);
		ЗапросКонтр.УстановитьПараметр("ЮридическоеФизическоеЛицо", ОрганизацияДляСозданияКонтрагента.ЮридическоеФизическоеЛицо);
		Выборка = ЗапросКонтр.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СсылкаНаКонтрагента = Выборка.Ссылка;
			Возврат СсылкаНаКонтрагента;
		КонецЕсли;
		
		СоздаваемыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СоздаваемыйКонтрагент, ОрганизацияДляСозданияКонтрагента,
			"ПометкаУдаления,ИНН,КодПоОКПО,КПП,НаименованиеПолное,ЮрФизЛицо,Наименование,ОбособленноеПодразделение");
		
		Если СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
			Или СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			СоздаваемыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			
		ИначеЕсли СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
			Или СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			
			СоздаваемыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			
		КонецЕсли;
		
		Если СоздаваемыйКонтрагент.ОбособленноеПодразделение Тогда
			ОрганизацияДляСозданияКонтрагента = ОрганизацияДляСозданияКонтрагента.ГоловнаяОрганизация;
			ГоловнойКонтрагент = КонтрагентИзОрганизации(ОрганизацияДляСозданияКонтрагента, КомпонентыОбмена);
			СоздаваемыйКонтрагент.ГоловнойКонтрагент = ГоловнойКонтрагент;
		Иначе
			СоздаваемыйКонтрагент.ГоловнойКонтрагент = СсылкаНаКонтрагента;
		КонецЕсли;
		
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
		СинхронизироватьДанныеПартнераСДаннымиКонтрагента(ПартнерОбъект, СоздаваемыйКонтрагент, КомпонентыОбмена);
		СоздаваемыйКонтрагент.Партнер = ПартнерОбъект.Ссылка;
		
		СоздаваемыйКонтрагент.УстановитьСсылкуНового(СсылкаНаКонтрагента);
		СоздаваемыйКонтрагент.ОбменДанными.Загрузка = Истина;
		СоздаваемыйКонтрагент.Записать();
		
		КомпонентыОбмена.ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты.Добавить(СоздаваемыйКонтрагент.Ссылка);
		
		СсылкаНаКонтрагента = СоздаваемыйКонтрагент.Ссылка;
	КонецЕсли;
	Возврат СсылкаНаКонтрагента;
КонецФункции
Процедура Мержевание_ПБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБ_КонтрагентДоИзменения = ДанныеИБ.Контрагент;
	
	#Область Шапка
	
	// Заполнение контрагента, если он не заполнен.
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
			ПолученныеДанные.Контрагент = ДанныеИБ.Контрагент;
		Иначе
			ЗаполнитьКонтрагентаНашеПредприятие(ПолученныеДанные, КомпонентыОбмена.ПараметрыКонвертации);
		КонецЕсли;
	КонецЕсли;
	
	// При операциях "интеркампани", некоторые реквизиты объекта ИБ имеют больший приоритет.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, ДанныеИБ,
			"Контрагент,БанковскийСчетКонтрагента,ХозяйственнаяОперация");
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,
				"Сумма,
				|СуммаВзаиморасчетов,
				|ВалютаВзаиморасчетов");
			
			Если ЗначениеЗаполнено(СтрокаИсточник.ОснованиеПлатежа) Тогда
				СтрокаПриемник.ОснованиеПлатежа = СтрокаИсточник.ОснованиеПлатежа;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Заказ) Тогда
				СтрокаПриемник.Заказ = СтрокаИсточник.Заказ;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДоходов) Тогда
				СтрокаПриемник.СтатьяДоходов = СтрокаИсточник.СтатьяДоходов;
			КонецЕсли;
					
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Подразделение) Тогда
				СтрокаПриемник.Подразделение = СтрокаИсточник.Подразделение;
			КонецЕсли;
				
			// Изменение контрагента обновляет зависимую от него аналитику.
			Если ДанныеИБ.Контрагент <> ДанныеИБ_КонтрагентДоИзменения Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,
					"Партнер, ОснованиеПлатежа, Заказ");
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБ_КонтрагентДоИзменения = ДанныеИБ.Контрагент;
	
	#Область Шапка
	
	// При операциях "интеркампани", некоторые реквизиты объекта ИБ имеют больший приоритет.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, ДанныеИБ,
			"Контрагент,ХозяйственнаяОперация");
	КонецЕсли;
	
	// Заполнение контрагента в особых случаях, когда для него нет ПКС.
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		ДанныеИБ.Контрагент = ПолученныеДанные.Контрагент;
	КонецЕсли;
	
	// Заполнение кассы ККМ (для нее нет ПКС).
	Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		ДанныеИБ.КассаККМ = ПолученныеДанные.КассаККМ;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,
				"Сумма,
				|СуммаВзаиморасчетов,
				|ВалютаВзаиморасчетов");
				
			Если ЗначениеЗаполнено(СтрокаИсточник.ОснованиеПлатежа) Тогда
				СтрокаПриемник.ОснованиеПлатежа = СтрокаИсточник.ОснованиеПлатежа;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Заказ) Тогда
				СтрокаПриемник.Заказ = СтрокаИсточник.Заказ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДоходов) Тогда
				СтрокаПриемник.СтатьяДоходов = СтрокаИсточник.СтатьяДоходов;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Подразделение) Тогда
				СтрокаПриемник.Подразделение = СтрокаИсточник.Подразделение;
			КонецЕсли;
			
			// Изменение контрагента обновляет зависимую от него аналитику.
			Если ДанныеИБ.Контрагент <> ДанныеИБ_КонтрагентДоИзменения Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,
					"Партнер, ОснованиеПлатежа, Заказ");
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБ_КонтрагентДоИзменения = ДанныеИБ.Контрагент;
	
	#Область Шапка
	
	// При операциях "интеркампани", некоторые реквизиты объекта ИБ имеют больший приоритет.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, ДанныеИБ,
			"Контрагент,ХозяйственнаяОперация");
	КонецЕсли;
	
	// Заполнение контрагента в особых случаях, когда для него нет ПКС.
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		ДанныеИБ.Контрагент = ПолученныеДанные.Контрагент;
	КонецЕсли;
	
	// Заполнение банковского счета по операциям Инкассации и Взноса наличных.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.БанковскийСчет) Тогда
			ПолученныеДанные.БанковскийСчет = ДанныеИБ.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Заполнение кассы-получателя.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КассаПолучатель, "ВалютаДенежныхСредств, Владелец");
		Если РеквизитыКассы.ВалютаДенежныхСредств <> ПолученныеДанные.ВалютаКонвертации 
			Или РеквизитыКассы.Владелец <> ПолученныеДанные.Организация Тогда
			ДанныеИБ.КассаПолучатель = ПолученныеДанные.КассаПолучатель;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,
				"Сумма,
				|СуммаВзаиморасчетов,
				|ВалютаВзаиморасчетов");
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Заказ) Тогда
				СтрокаПриемник.Заказ = СтрокаИсточник.Заказ;
			КонецЕсли;	
					
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяРасходов) Тогда
				СтрокаПриемник.СтатьяРасходов = СтрокаИсточник.СтатьяРасходов;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Подразделение) Тогда
				СтрокаПриемник.Подразделение = СтрокаИсточник.Подразделение;
			КонецЕсли;
			
			// Изменение контрагента обновляет зависимую от него аналитику.
			Если ДанныеИБ.Контрагент <> ДанныеИБ_КонтрагентДоИзменения Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, "Партнер, Заказ");
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура Мержевание_СБДС(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБ_КонтрагентДоИзменения = ДанныеИБ.Контрагент;
	
	#Область Шапка
	
	// Очередность платежа.
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ОчередностьПлатежа) Тогда
		ПолученныеДанные.ОчередностьПлатежа = ДанныеИБ.ОчередностьПлатежа;
	КонецЕсли;
	
	// Заполнение контрагента, если он не заполнен.
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
			ПолученныеДанные.Контрагент = ДанныеИБ.Контрагент;
		Иначе
			ЗаполнитьКонтрагентаНашеПредприятие(ПолученныеДанные, КомпонентыОбмена.ПараметрыКонвертации);
		КонецЕсли;
	КонецЕсли;
	
	// При операциях "интеркампани", некоторые реквизиты объекта ИБ имеют больший приоритет.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, ДанныеИБ,
			"Контрагент,БанковскийСчетКонтрагента,ХозяйственнаяОперация");
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,
				"Сумма,
				|СуммаВзаиморасчетов,
				|ВалютаВзаиморасчетов");
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Заказ) Тогда
				СтрокаПриемник.Заказ = СтрокаИсточник.Заказ;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяРасходов) Тогда
				СтрокаПриемник.СтатьяРасходов = СтрокаИсточник.СтатьяРасходов;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			
			// Изменение контрагента обновляет зависимую от него аналитику.
			Если ДанныеИБ.Контрагент <> ДанныеИБ_КонтрагентДоИзменения Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, "Партнер, Заказ");
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	// Синхронизация суммы в расшифровке и в шапке.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() = 1 Тогда
			ДанныеИБ.РасшифровкаПлатежа[0].Сумма = ДанныеИБ.СуммаДокумента;
		КонецЕсли; 
	
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Функция НайтиТерминалПоЭквайреруИОрганизации(Организация, Эквайер)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	запрос.УстановитьПараметр("Эквайер", Эквайер);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	               |ГДЕ
	               |	ЭквайринговыеТерминалы.Эквайер = &Эквайер
	               |	И ЭквайринговыеТерминалы.БанковскийСчет.Владелец = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		//Неоднозначное представление
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции
Функция НовыйВидКонтактнойИнформации(Наименование, Родитель, ТипКИ)
	ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
	ВидКИОбъект.Родитель     = Родитель;
	ВидКИОбъект.Наименование = Наименование;
	ВидКИОбъект.Тип          = ТипКИ;
	ВидКИОбъект.Используется = Истина;
	ВидКИОбъект.Записать();
	
	Возврат ВидКИОбъект.Ссылка;
КонецФункции
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого СтрокаДопРеквизиты Из ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			// На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			// 1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
				|ГДЕ ЭтоГруппа = Ложь И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
							СтрокаДопРеквизиты.Свойство, 
							ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
							"ПолучитьСсылку").Ссылка;
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		// Проверка типа свойства.
		Если ЗначениеЗаполнено(СтрокаДопРеквизиты.ТипЗначения) Тогда
			ТипЗначенияСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ТипЗначения");
			ДопЗначенияИспользуются = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ДополнительныеЗначенияИспользуются");
			ИсключитьТипДопЗначения = Ложь;
	
			// Для нового свойства по умолчанию автоматически может установиться тип "ЗначенияСвойствОбъектов".
			// Его надо сбросить, если этот тип не соответствует типу значения.
			Если ТипЗначенияСвойства <> Неопределено 
				// Признак "правомерно" установленного типа "ЗначенияСвойствОбъектов".
				И НЕ ДопЗначенияИспользуются 
				И ТипЗначенияСвойства.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
					СвойствоОбъект.ОбменДанными.Загрузка = Истина;
					СвойствоОбъект.Записать();
					Продолжить;
				Иначе
					Если ТипЗначенияСвойства.Типы().Количество() = 1 Тогда
						ТипЗначенияСвойства = Неопределено;
					Иначе
						ИсключитьТипДопЗначения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗначенияСвойства = Неопределено) 
				ИЛИ НЕ ТипЗначенияСвойства.СодержитТип(СтрокаДопРеквизиты.ТипЗначения) Тогда
				// Следует дополнить тип свойства.
				СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(СтрокаДопРеквизиты.ТипЗначения);
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
				КонецЕсли;
				Если ТипЗначенияСвойства <> Неопределено 
					И ТипЗначенияСвойства.Типы().Количество() > 0 Тогда
					// Составной тип.
					Для Каждого ТекТип Из ТипЗначенияСвойства.Типы() Цикл
						Если ИсключитьТипДопЗначения И ТекТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
							Продолжить;
						КонецЕсли;
						МассивТипов.Добавить(ТекТип);
					КонецЦикла;
				КонецЕсли;
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СвойствоОбъект.ОбменДанными.Загрузка = Истина;
				СвойствоОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;	
	КонецЦикла;
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора Из СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОбработатьЗагруженныеСтатьиДДСИХозОперации(КомпонентыОбмена)
	СтатьиДДСИХозОперации = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации;
	СтатьиДДСИХозОперации.Свернуть("СтатьяДДС, ХозОперация");
	СтатьиДДСИХозОперации.Сортировать("СтатьяДДС");
	
	СтатьяДДССсылка = Неопределено;
	МассивХозОпераций = Новый Массив;
	СтатьиДДСКОбработке = Новый Соответствие;
	
	ЗаписыватьСтатьюДДС = Ложь;
	Для Каждого СтрокаТаб Из СтатьиДДСИХозОперации Цикл
		Если СтатьяДДССсылка = Неопределено Тогда
			// Первая строка таблицы.
			СтатьяДДССсылка = СтрокаТаб.СтатьяДДС;
		ИначеЕсли СтатьяДДССсылка <> СтрокаТаб.СтатьяДДС Тогда
			// Обработка перехода к новой статье ДДС.
			Если МассивХозОпераций.Количество() > 0 Тогда
				СтатьиДДСКОбработке.Вставить(СтатьяДДССсылка, МассивХозОпераций);
			КонецЕсли;
			СтатьяДДССсылка = СтрокаТаб.СтатьяДДС;
			МассивХозОпераций = Новый Массив;
		КонецЕсли;
		Если НЕ (ЗначениеЗаполнено(СтатьяДДССсылка) И ОбщегоНазначения.СсылкаСуществует(СтатьяДДССсылка)) Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтатьяДДССсылка.ХозяйственныеОперации.Найти(СтрокаТаб.ХозОперация, "ХозяйственнаяОперация") = Неопределено Тогда
			МассивХозОпераций.Добавить(СтрокаТаб.ХозОперация);
		КонецЕсли;
	КонецЦикла;
	// Обработка последней статьи ДДС.
	Если МассивХозОпераций.Количество() > 0 Тогда
		СтатьиДДСКОбработке.Вставить(СтатьяДДССсылка, МассивХозОпераций);
	КонецЕсли;
	// Изменение статей ДДС.
	Для Каждого ДанныеКОбработке Из СтатьиДДСКОбработке Цикл
		// Необходимо добавить хоз операции в статью ДДС
		ОбъектЗаблокирован = Истина;
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ДанныеКОбработке.Ключ);
		Исключение
			ОбъектЗаблокирован = Ложь;
			ЗаписатьОшибкуВЖурналРегистрации(ДанныеКОбработке.Ключ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена, НСтр("ru = 'заблокировать объект'"));
		КонецПопытки;
		Если ОбъектЗаблокирован Тогда
			СтатьяОбъект = ДанныеКОбработке.Ключ.ПолучитьОбъект();
			СтатьяОбъект.ОбменДанными.Загрузка = Истина;
			Для Каждого ХозяйственнаяОперация Из ДанныеКОбработке.Значение Цикл
				СтатьяОбъект.ХозяйственныеОперации.Добавить().ХозяйственнаяОперация = ХозяйственнаяОперация;
			КонецЦикла;
			СтатьяОбъект.Записать();
			СтатьяОбъект.Разблокировать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO, ОбработатьСуммуВШапке = Ложь)
	// Обход ограничения формата, которое будет устранено в следующей версии.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда 
		Если ОбработатьСуммуВШапке И Не ЗначениеЗаполнено(ДанныеXDTO.Сумма) Тогда
			ДанныеXDTO.Сумма = -1;
		КонецЕсли;
		
		Если ДанныеXDTO.Свойство("Товары") Тогда
			Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
				Если СтрокаТовары.Цена = 0 Тогда
					СтрокаТовары.Цена = -1;
				КонецЕсли;
				Если СтрокаТовары.Сумма = 0 Тогда
					СтрокаТовары.Сумма = -1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьПоставщиковСЛьготнойСтавкойНДС(МассивПоставщиков)
	// Выполняется после конвертации. 
	// Устанавливает признак НДСпоСтавкам4и2 для контрагентов, входящих в переданный массив.
	Если МассивПоставщиков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|Ссылка
	|ИЗ Справочник.Контрагенты
	|ГДЕ НДСпоСтавкам4и2 = ЛОЖЬ И Ссылка В (&МассивКонтрагентов)";
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивПоставщиков);	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонтрагентОбъект.НДСпоСтавкам4и2 = Истина;
		КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
		КонтрагентОбъект.Записать();
	КонецЦикла;
КонецПроцедуры
Процедура ОбработатьСтавкуНДСПриПолучении(СтрокаXDTO, СтруктураДанныхСтроки, КонтрагентСсылка, ПараметрыКонвертации)
	Если НЕ ЗначениеЗаполнено(СтрокаXDTO.СтавкаНДС) 
		ИЛИ НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		Возврат;
	КонецЕсли;
	ЗначениеСтавкиНДС = СтрокаXDTO.СтавкаНДС.Значение;
	Если ЗначениеСтавкиНДС = "НДС2" Тогда
		СтруктураДанныхСтроки.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли ЗначениеСтавкиНДС = "НДС2_102" Тогда
		СтруктураДанныхСтроки.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли ЗначениеСтавкиНДС = "НДС4" Тогда
	    СтруктураДанныхСтроки.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли ЗначениеСтавкиНДС = "НДС4_102" Тогда
		СтруктураДанныхСтроки.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
	Иначе
		Возврат;
	КонецЕсли;
	Если ПараметрыКонвертации.ПоставщикиЛьготнаяСтавкаНДС.Найти(КонтрагентСсылка) = Неопределено Тогда
		ПараметрыКонвертации.ПоставщикиЛьготнаяСтавкаНДС.Добавить(КонтрагентСсылка);
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьСФПолученныеПоЗагруженнымАО(КомпонентыОбмена)
	СФПолученные = КомпонентыОбмена.ПараметрыКонвертации.СФПолученныеПоЗагруженнымАвансовымОтчетам;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка.Контрагент КАК Контрагент,
	|	Ссылка.Организация КАК Организация,
	|	Ссылка.Номер КАК Номер,
	|	Ссылка.ДатаСоставления КАК Дата,
	|	Ссылка.Валюта КАК Валюта,
	|	Ссылка КАК Ссылка
	|ИЗ Документ.СчетФактураПолученный.ДокументыОснования
	|ГДЕ ДокументОснование = &Ссылка И НЕ Ссылка.ПометкаУдаления";
	Для Каждого СтрокаСФ Из СФПолученные Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", СтрокаСФ.ДокументОснование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Организация = СтрокаСФ.Организация
				И Выборка.Контрагент = СтрокаСФ.Контрагент
				И Выборка.Номер = СтрокаСФ.НомерСФ
				И Выборка.Дата = СтрокаСФ.ДатаСФ 
				И Выборка.Валюта = СтрокаСФ.Валюта Тогда
				Продолжить;
			КонецЕсли;
			СФОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			СФОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
			ОснованиеСФ = СФОбъект.ДокументыОснования.Добавить();
			ОснованиеСФ.ДокументОснование = СтрокаСФ.ДокументОснование;
			СФОбъект.КодВидаОперации = "01";
			СФОбъект.Дата = СтрокаСФ.ДокументОснование.Дата;
		КонецЕсли;
		СФОбъект.Организация = СтрокаСФ.Организация;
		СФОбъект.Контрагент = СтрокаСФ.Контрагент;
		СФОбъект.ДатаСоставления = СтрокаСФ.ДатаСФ;
		СФОбъект.Номер = СтрокаСФ.НомерСФ;
		СФОбъект.Валюта = СтрокаСФ.Валюта;
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(СФОбъект, Ложь, Ложь, КомпонентыОбмена.УзелКорреспондента);
		Если НЕ СФОбъект.Проведен Тогда
			СФОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		ОбменДаннымиXDTOСервер.ВыполнитьПроведениеДокументаПриЗагрузке(КомпонентыОбмена, СФОбъект, Истина);
	КонецЦикла;
КонецПроцедуры
Функция ОпределитьРегистрациюВНалоговомОргане(Подразделение, Организация)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК Ссылка
		|ИЗ
		|	РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Подразделение = &Подразделение
		|	И РегистрацииВНалоговомОргане.Организация = &Организация");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
Процедура ОпределитьСтавкуНДС_Отправка(ТабличнаяЧасть, НДСПоСтавкам2и4)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Строка.СтавкаНДССтрокой = "НДС0";
		ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Строка.СтавкаНДССтрокой = "БезНДС";
		Иначе
			Если НДСПоСтавкам2и4 Тогда
				Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
					Строка.СтавкаНДССтрокой = "НДС4";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
					Строка.СтавкаНДССтрокой = "НДС4_104";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
					Строка.СтавкаНДССтрокой = "НДС2";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
					Строка.СтавкаНДССтрокой = "НДС2_102";
				КонецЕсли;
			Иначе
				Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
					Строка.СтавкаНДССтрокой = "НДС18";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
					Строка.СтавкаНДССтрокой = "НДС18_118";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
					Строка.СтавкаНДССтрокой = "НДС10";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
					Строка.СтавкаНДССтрокой = "НДС10_110";
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
	ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
КонецПроцедуры
Функция ОснованиеКорректировкиПоступления(ДанныеИБ)
	НомерДляОснования = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Ложь, Ложь);
	ДатаДляОснования  = Формат(ДанныеИБ.Дата, "ДЛФ=ДД");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Корректировка поступления № %1 от %2'"),
		НомерДляОснования,
		ДатаДляОснования);
КонецФункции
Функция ОснованиеКорректировкиРеализации(ДанныеИБ)
	НомерДляОснования = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Ложь, Ложь);
	ДатаДляОснования  = Формат(ДанныеИБ.Дата, "ДЛФ=ДД");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Корректировка реализации № %1 от %2'"),
		НомерДляОснования,
		ДатаДляОснования);
КонецФункции
Процедура ОтложеннаяОбработка_АвансовыйОтчет(Объект, КомпонентыОбмена)
	Для Каждого Строка Из Объект.ПрочиеРасходы Цикл
		Если Не ЗначениеЗаполнено(Строка.СтатьяРасходов) Тогда
			Строка.СтатьяРасходов = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяРасходовАвансовыйОтчет");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.Подразделение) Тогда
			Строка.Подразделение = Объект.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьТаблицуСтатьиДДСИХозОперации(Объект, КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации);
	
	Если Не ЗначениеЗаполнено(Объект.ЗакупкаПодДеятельность) Тогда
		Объект.ЗакупкаПодДеятельность = Справочники.Организации.ЗакупкаПодДеятельность(Объект.Организация, , Объект.Дата);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Валюты(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.СпособУстановкиКурса) Тогда
		Объект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(Объект, ОбъектМодифицирован)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСКлиентомВШапкеДокумента(Объект);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Если ЗначениеЗаполнено(Объект.Соглашение)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")) Тогда
			
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение);
			
			Если Не ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
				Или Не УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
				Объект.ПорядокОплаты = УсловияПродаж.ПорядокОплаты;
			Иначе
				Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Договор)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")) Тогда
			Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.Валюта, , Объект.Валюта);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) И НЕ ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Объект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровПоставщику(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСПоставщикомВШапкеДокумента(Объект, КомпонентыОбмена.ПараметрыКонвертации);
	ЗаполнитьПараметрыДоставки(Объект);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Если ЗначениеЗаполнено(Объект.Соглашение)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")) Тогда
			
			УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Объект.Соглашение);
			
			Если Не ЗначениеЗаполнено(УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов) 
				Или Не УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
				Объект.ПорядокОплаты = УсловияЗакупок.ПорядокОплаты;
			Иначе
				Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Договор)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")) Тогда
			Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		ВалютаОплаты         = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(, Объект.БанковскийСчетОрганизации);
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.Валюта,
			Объект.НалогообложениеНДС,
			ВалютаОплаты);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ГруппыФинУчетаНоменклатуры(Объект)
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДоговорыКонтрагентов(Объект)
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Если Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		Иначе
			Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		КонецЕсли;
	КонецЕсли;
	
	Если СокрЛП(Объект.Наименование) = "" Тогда
		НаименованиеПоУмолчанию = "" + СокрЛП(Объект.ТипДоговора) + ", " + НРег(СокрЛП(Объект.ВалютаВзаиморасчетов));
		Если Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях Тогда   
			НаименованиеПоУмолчанию = НаименованиеПоУмолчанию + " (у.е.)";
		КонецЕсли;
		Объект.Наименование = НаименованиеПоУмолчанию;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Объект.ХозяйственнаяОперация = Справочники.ДоговорыКонтрагентов.ХозяйственнаяОперация(Объект.ТипДоговора, Объект.ВариантОформленияЗакупок);
	КонецЕсли;
	
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Объект.Дата)
		И ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(Объект);
	Иначе
		Объект.ИдентификаторПлатежа = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Объект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантОформленияЗакупок) Тогда
		Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДоговорыКредитов(Объект, ОбъектМодифицирован)
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Партнер = Справочники.Партнеры.НеизвестныйПартнер;
	КонецЕсли;
	
	Объект.Партнер = Партнер;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Объект.ПорядокОплаты = ?(Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить(),
			Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях,
			Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС(Объект, КомпонентыОбмена)
	// Заполнение аналитики по партнеру при необходимости.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ЗаполнениеПартнераВРасшифровкеПлатежа(Объект);
	КонецЕсли;
	
	// Заполнение банковского счета физического лица при необходимости.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			ЗаполнитьБанковскийСчетФизическогоЛица(Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение кассы при необходимости.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
			
		РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаПолучатель, "ВалютаДенежныхСредств, Владелец");
	
		Если РеквизитыКассы.ВалютаДенежныхСредств <> Объект.Валюта 
			Или РеквизитыКассы.Владелец <> Объект.Организация Тогда
			
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
			ПараметрыОтбора = Новый Структура(
				"Валюта,Организация,Подразделение",
				Объект.Валюта,
				Объект.Организация,
				Подразделение);
			
			Объект.КассаПолучатель = КассаПоУмолчанию(ПараметрыОтбора, КомпонентыОбмена);
			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Не ЗначениеЗаполнено(Объект.ТипНалога) Тогда
		Если Не ЗначениеЗаполнено(Объект.ТипНалога) Тогда
			Объект.ТипНалога = Перечисления.ТипыНалогов.ПрочиеНалогиИСборы;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПеречислениеВБюджет", Объект.Метаданные())
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидПеречисленияВБюджет", Объект.Метаданные())
		И Объект.ПеречислениеВБюджет
		И Не ЗначениеЗаполнено(Объект.ВидПеречисленияВБюджет) Тогда
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
		Иначе
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнениеСтатьиДДСВДокументе(Объект);
	ЗаполнитьТаблицуСтатьиДДСИХозОперации(Объект, КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации);
	ЗаполнитьЗаявкуНаРасходованиеДС(Объект);
	
	СтрокаДокумента = ТаблицаСБДСПолучитьИзПараметров(КомпонентыОбмена).Найти(Объект.Ссылка, "ДокументСсылка");
	Если СтрокаДокумента <> Неопределено Тогда
		СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(СтрокаДокумента.ФизическоеЛицо.УникальныйИдентификатор());
		Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) Тогда
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			НовыйКонтрагент.Наименование              = СтрокаДокумента.ФизическоеЛицо.Наименование;
			НовыйКонтрагент.ИНН                       = СтрокаДокумента.ФизическоеЛицо.ИНН;
			НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			НовыйКонтрагент.ЮрФизЛицо                 = Перечисления.ЮрФизЛицо.ФизЛицо;
			НовыйКонтрагент.НаименованиеПолное        = СтрокаДокумента.ФизическоеЛицо.Наименование;
			НовыйКонтрагент.ГоловнойКонтрагент        = СсылкаНаКонтрагента;
			
			НовыйКонтрагент.УстановитьСсылкуНового(СсылкаНаКонтрагента);
			НовыйКонтрагент.Записать();
			СсылкаНаКонтрагента = НовыйКонтрагент.Ссылка;
		КонецЕсли;
		Объект.Контрагент = СсылкаНаКонтрагента;
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчетаКонтрагентов.Ссылка КАК СсылкаНаСчет
			|ИЗ
			|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
			|		ПО БанковскиеСчетаКонтрагентов.НомерСчета = БанковскиеСчета.НомерСчета
			|ГДЕ
			|	БанковскиеСчета.Ссылка = &БанковскийСчет
			|	И БанковскиеСчетаКонтрагентов.Владелец = &Владелец");
			
		Запрос.УстановитьПараметр("БанковскийСчет", СтрокаДокумента.БанковскийСчет);
		Запрос.УстановитьПараметр("Владелец",       СсылкаНаКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			БанковскийСчет = Выборка.СсылкаНаСчет;
		Иначе
			НовыйБанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйБанковскийСчет, СтрокаДокумента.БанковскийСчет,, "Владелец, Родитель, Код");
			
			НовыйБанковскийСчет.Владелец = СсылкаНаКонтрагента;
			НовыйБанковскийСчет.УстановитьНовыйКод();
			НовыйБанковскийСчет.Записать();
			БанковскийСчет = НовыйБанковскийСчет.Ссылка;
		КонецЕсли;
		Объект.БанковскийСчетКонтрагента = БанковскийСчет;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС(Объект, КомпонентыОбмена)
	// Заполнение аналитики по партнеру при необходимости.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ЗаполнениеПартнераВРасшифровкеПлатежа(Объект);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк Тогда
		ЗаполнитьБанковскийСчетПоВалютеОрганизации(Объект);
	КонецЕсли;
	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			
			Объект.Касса = Объект.ДокументОснование.КассаПолучатель;
			Объект.КассаОтправитель = Объект.ДокументОснование.Касса;
	
			Объект.СтатьяДвиженияДенежныхСредств = Объект.ДокументОснование.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Касса) Тогда
			ПараметрыОтбора = Новый Структура(
				"Валюта,Организация,Подразделение",
				Объект.Валюта,
				Объект.Организация,
				Справочники.СтруктураПредприятия.ПустаяСсылка());
			
			Объект.Касса = КассаПоУмолчанию(ПараметрыОтбора, КомпонентыОбмена);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
			Объект.СтатьяДвиженияДенежныхСредств =
				ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
		КонецЕсли;
	Иначе
		ЗаполнитьКассуПоВалютеИОрганизации(Объект, КомпонентыОбмена);
	
		ЗаполнениеСтатьиДДСВДокументе(Объект);
	
		ЗаполнитьТаблицуСтатьиДДСИХозОперации(Объект, КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаказыПоставщикуКлиента(Объект, КомпонентыОбмена)
	ЭтоЗаказПоставщику = (Объект.Метаданные().Реквизиты.Найти("ЗакупкаПодДеятельность") <> Неопределено);
	Если ЭтоЗаказПоставщику И Не ЗначениеЗаполнено(Объект.ЗакупкаПодДеятельность) Тогда
		ЗаполнитьЗакупкуПодДеятельностьПоУмолчанию(Объект, "ЗакупкаПодДеятельность")
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Приоритет) Тогда
		Объект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Неопределено);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Если ЭтоЗаказПоставщику Тогда
			ЗаполнениеСоглашенияСПоставщикомВШапкеДокумента(Объект, КомпонентыОбмена.ПараметрыКонвертации);
		Иначе
			ЗаполнениеСоглашенияСКлиентомВШапкеДокумента(Объект);
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.АдресДоставкиЗначенияПолей)
		И ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		ОбщегоНазначенияУТВызовСервера.ЗаполнитьЗначенияПолейКИПоПредставлению(Объект.АдресДоставки, Объект.АдресДоставкиЗначенияПолей);
	КонецЕсли;
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,
			"ЗаданГрафикИсполнения");
	КонецЕСли;
	
	Если ЭтоЗаказПоставщику Тогда
		Для Каждого Стр из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				Стр.Склад = Объект.Склад;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
			Объект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Объект.Договор);
		КонецЕсли;
		
		//ТребуетсяЗалогЗаТару
		Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи
			Или Не Объект.ВернутьМногооборотнуюТару)
			И Объект.ТребуетсяЗалогЗаТару Тогда
			Объект.ТребуетсяЗалогЗаТару = Ложь;
		КонецЕсли;
		
		//Даты поступления
		Если Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
			ИЛИ Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
			
			Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
				ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
			Иначе
				ДатаПоступления = Объект.Дата;
			КонецЕсли;
			
			Если НЕ Объект.ПоступлениеОднойДатой Тогда
				Для Каждого СтрокаТЧ Из Объект.Товары Цикл
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
						СтрокаТЧ.ДатаПоступления = ДатаПоступления;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если НЕ ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
					Объект.ДатаПоступления = ДатаПоступления;
				КонецЕсли;
				Для Каждого СтрокаТЧ Из Объект.Товары Цикл
					СтрокаТЧ.ДатаПоступления = Объект.ДатаПоступления;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;
		
		//ЭтапыГрафикаОплаты
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи
			Или Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
			Или ГрафикИсполненияВДоговоре Тогда
			
			Объект.ЭтапыГрафикаОплаты.Очистить();
			Объект.СуммаАвансаДоПодтверждения = 0;
			Объект.СуммаПредоплатыДоПоступления = 0;
			
		Иначе
			
			Если Не Объект.ТребуетсяЗалогЗаТару Тогда
				Для Каждого ЭтапОплаты Из Объект.ЭтапыГрафикаОплаты Цикл
					ЭтапОплаты.СуммаЗалогаЗаТару = 0;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаЭтапов = Объект.ЭтапыГрафикаОплаты.Выгрузить(, "ВариантОплаты, СуммаПлатежа, СуммаЗалогаЗаТару");
			ТаблицаЭтапов.Свернуть("ВариантОплаты", "СуммаПлатежа,СуммаЗалогаЗаТару");
			
			СтрокаАвансаДоПодтверждения = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения,"ВариантОплаты");
			
			Если СтрокаАвансаДоПодтверждения = Неопределено Тогда
				Объект.СуммаАвансаДоПодтверждения = 0;
			Иначе
				Объект.СуммаАвансаДоПодтверждения = СтрокаАвансаДоПодтверждения.СуммаПлатежа + СтрокаАвансаДоПодтверждения.СуммаЗалогаЗаТару;
			КонецЕсли;
			
			СтрокаПредоплатыДоПоступления = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления,"ВариантОплаты");
			
			Если СтрокаПредоплатыДоПоступления = Неопределено Тогда
				Объект.СуммаПредоплатыДоПоступления = 0;
			Иначе
				Объект.СуммаПредоплатыДоПоступления = СтрокаПредоплатыДоПоступления.СуммаПлатежа + СтрокаПредоплатыДоПоступления.СуммаЗалогаЗаТару;
			КонецЕсли;
			
			СуммаЭтаповОплаты   = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			СуммаЗалогаПоЭтапам = Объект.ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
			КоличествоЭтапов    = Объект.ЭтапыГрафикаОплаты.Количество();
			
			КоличествоЭтапов    = Объект.ЭтапыГрафикаОплаты.Количество();
			СуммаЗаказано       = Объект.ПолучитьСуммуЗаказанныхСтрок();
			СуммаЗалогаЗаТару   = Объект.ПолучитьСуммуЗаказанныхСтрок(Истина);
			
			Если СуммаЗаказано = 0 И СуммаЗалогаЗаТару = 0 И КоличествоЭтапов > 0 Тогда
				Объект.ЭтапыГрафикаОплаты.Очистить();
			ИначеЕсли СуммаЗаказано <> СуммаЭтаповОплаты Или СуммаЗалогаЗаТару <> СуммаЗалогаПоЭтапам Тогда
				
				ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение)
					И ЗакупкиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
					
				Если КоличествоЭтапов = 0 Тогда
					
					Если Не ГрафикСоглашенияЗаполнен Тогда
						
						ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
							Объект,
							ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления"),
							Объект.ЖелаемаяДатаПоступления,
							СуммаЗаказано,
							СуммаЗалогаЗаТару);
						
					Иначе
						ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаЗакупки(
							Объект,
							ГрафикСоглашенияЗаполнен,
							СуммаЗаказано,
							СуммаЗалогаЗаТару);
					КонецЕсли;
					
				Иначе
					
					ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
						Объект.ЭтапыГрафикаОплаты,
						СуммаЗаказано,
						СуммаЗалогаЗаТару);
					
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	Иначе
		//Заказ клиента
		СтруктураДействий = Новый Структура;
		ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Объект.Соглашение, Объект.Статус);
		
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения,
			Объект.ЖелаемаяДатаОтгрузки);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		
		ФОЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
		Для Каждого Стр из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(Стр.ВариантОбеспечения) Тогда
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Стр, СтруктураДействий, Неопределено);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				Стр.Склад = Объект.Склад;
			КонецЕсли;
		КонецЦикла;
		
		Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			Или Не Объект.ВернутьМногооборотнуюТару)
			И Объект.ТребуетсяЗалогЗаТару Тогда
			Объект.ТребуетсяЗалогЗаТару = Ложь;
		КонецЕсли;
	
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			Или Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
			Или ГрафикИсполненияВДоговоре Тогда
			
			Объект.ЭтапыГрафикаОплаты.Очистить();
			Объект.СуммаАвансаДоОбеспечения = 0;
			Объект.СуммаПредоплатыДоОтгрузки = 0;
			
		Иначе
			
			Если Не Объект.ТребуетсяЗалогЗаТару Тогда
				Для Каждого ЭтапОплаты Из Объект.ЭтапыГрафикаОплаты Цикл
					ЭтапОплаты.СуммаЗалогаЗаТару = 0;
				КонецЦикла;
			КонецЕсли;
			
			ПродажиСервер.ЗаполнитьСуммыАвансаПредоплаты(Объект);
			
			СуммаЭтаповОплаты       = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			СуммаЗалогаПоЭтапам     = Объект.ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
			СуммаОтклоненияПоЭтапам = Объект.ЭтапыГрафикаОплаты.Итог("СуммаОтклоненияМерныхТоваров");
			
			СуммаОтклоненияПоОплате = ?(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам = 0,
			                            0,
			                            Окр(СуммаОтклоненияПоЭтапам * СуммаЭтаповОплаты 
			                                /(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам),2));
			
			КоличествоЭтапов    = Объект.ЭтапыГрафикаОплаты.Количество();
			СуммаЗаказано       = Объект.ПолучитьСуммуЗаказанныхСтрок();
			СуммаЗалогаЗаТару   = Объект.ПолучитьСуммуЗаказанныхСтрок(Истина);
			
			ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
			ИспользоватьГрафикиОплаты        = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
			
			Если СуммаЗаказано = 0 И СуммаЗалогаЗаТару = 0 И КоличествоЭтапов > 0 Тогда
				Объект.ЭтапыГрафикаОплаты.Очистить();
			ИначеЕсли СуммаЗаказано - СуммаОтклоненияПоОплате <> СуммаЭтаповОплаты
				ИЛИ СуммаЗалогаЗаТару-(СуммаОтклоненияПоЭтапам - СуммаОтклоненияПоОплате) <> СуммаЗалогаПоЭтапам Тогда
				
				ГрафикСоглашенияЗаполнен = ИспользоватьСоглашенияСКлиентами
					И ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
				ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты);
				
				Если КоличествоЭтапов = 0 Тогда
					Если Не (ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен) Тогда
					
						ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
							Объект,
							Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки,
							Объект.ЖелаемаяДатаОтгрузки,
							СуммаЗаказано,
							СуммаЗалогаЗаТару);
							
					Иначе
						ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
							Объект,
							ГрафикСоглашенияЗаполнен,
							ГрафикЗаполнен,
							СуммаЗаказано,
							СуммаЗалогаЗаТару);
					КонецЕсли;
				Иначе
					
					ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
						Объект.ЭтапыГрафикаОплаты,
						СуммаЗаказано,
						СуммаЗалогаЗаТару);
					
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	                                      
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаполнениеКассовыхСмен(КомпонентыОбмена)
	ДокументыСПС = КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами;
	ТаблицаДляОтложенногоПроведения = КомпонентыОбмена.ДокументыДляОтложенногоПроведения;
		
	Если ТипЗнч(ДокументыСПС) = Тип("ТаблицаЗначений") И ДокументыСПС.Количество() > 0 Тогда
		ДокументыСПС.Индексы.Добавить("ОчередьДокумента");
		ДокументыОРП = ДокументыСПС.Скопировать(Новый Структура("ОчередьДокумента", 1));
		Если ДокументыОРП.Количество() > 0 Тогда
		
			ДокументыОРП.Сортировать("ДатаДокумента");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ЕСТЬNULL(ДокКассоваяСмена.ОкончаниеКассовойСмены, НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ))) КАК НачалоКассовойСмены,
				|	ОтчетОРозничныхПродажах.Ссылка КАК ОРП,
				|	ОтчетОРозничныхПродажах.Валюта КАК Валюта,
				|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
				|	ОтчетОРозничныхПродажах.Дата КАК ОкончаниеКассовойСмены,
				|	ОтчетОРозничныхПродажах.Дата КАК Дата,
				|	ОтчетОРозничныхПродажах.Организация КАК Организация,
				|	ОтчетОРозничныхПродажах.Склад КАК Склад,
				|	ОтчетОРозничныхПродажах.ВидЦены КАК ВидЦены,
				|	ОтчетОРозничныхПродажах.НалогообложениеНДС КАК НалогообложениеНДС,
				|	ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Закрыта) КАК Статус,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА ЕСТЬNULL(ДокКассоваяСмена.ОкончаниеКассовойСмены, ДАТАВРЕМЯ(1, 1, 1)) = ОтчетОРозничныхПродажах.Дата
				|					И НЕ ОтчетОРозничныхПродажах.Дата = ДАТАВРЕМЯ(1, 1, 1)
				|				ТОГДА ДокКассоваяСмена.Ссылка
				|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.КассоваяСмена.ПустаяСсылка)
				|		КОНЕЦ) КАК КассоваяСмена
				|ИЗ
				|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК ДокКассоваяСмена
				|		ПО ОтчетОРозничныхПродажах.КассаККМ = ДокКассоваяСмена.КассаККМ
				|			И ОтчетОРозничныхПродажах.Организация = ДокКассоваяСмена.Организация
				|			И (НЕ ДокКассоваяСмена.ПометкаУдаления)
				|			И (ДокКассоваяСмена.ОкончаниеКассовойСмены = ОтчетОРозничныхПродажах.Дата
				|				ИЛИ НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ) <= ДокКассоваяСмена.НачалоКассовойСмены
				|					И ДокКассоваяСмена.ОкончаниеКассовойСмены < ОтчетОРозничныхПродажах.Дата)
				|ГДЕ
				|	ОтчетОРозничныхПродажах.Ссылка В(&МассивСсылок)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтчетОРозничныхПродажах.Ссылка,
				|	ОтчетОРозничныхПродажах.Валюта,
				|	ОтчетОРозничныхПродажах.КассаККМ,
				|	ОтчетОРозничныхПродажах.Дата,
				|	ОтчетОРозничныхПродажах.Организация,
				|	ОтчетОРозничныхПродажах.Склад,
				|	ОтчетОРозничныхПродажах.ВидЦены,
				|	ОтчетОРозничныхПродажах.НалогообложениеНДС,
				|	ОтчетОРозничныхПродажах.Дата
				|
				|УПОРЯДОЧИТЬ ПО
				|	Организация,
				|	Склад,
				|	Валюта,
				|	КассаККМ,
				|	ОкончаниеКассовойСмены";
			
			Запрос.УстановитьПараметр("МассивСсылок", ДокументыОРП.ВыгрузитьКолонку("ДокументСсылка"));
			
			Организация = Неопределено;
			Склад = Неопределено;
			Валюта = Неопределено;
			КассаККМ = Неопределено;
	
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОРПОбъект = Выборка.ОРП.ПолучитьОбъект();
				Если ЗначениеЗаполнено(Выборка.КассоваяСмена) Тогда
					ОРПОбъект.КассоваяСмена = Выборка.КассоваяСмена;
				Иначе
					Если Организация <> Выборка.Организация ИЛИ КассаККМ <> Выборка.КассаККМ
						Или Склад <> Выборка.Склад ИЛИ Валюта <> Выборка.Валюта Тогда
						
						Организация = Выборка.Организация;
						КассаККМ = Выборка.КассаККМ;
						Склад = Выборка.Склад;
						Валюта = Выборка.Валюта;
						НачалоСмены = Выборка.НачалоКассовойСмены;
						
					КонецЕсли;
					
					НовыйДокумент = Документы.КассоваяСмена.СоздатьДокумент();
					НачалоСмены = НачалоСмены + ?(НачалоСмены = НачалоДня(НачалоСмены), 0, 1);
					ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка);
					НовыйДокумент.Дата = НачалоСмены;
					НовыйДокумент.НачалоКассовойСмены = НачалоСмены;
					ПолученныеДанныеСсылка = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
						Строка(Выборка.ОРП.УникальныйИдентификатор()),
						Тип("ДокументСсылка.КассоваяСмена"),
						КомпонентыОбмена);
					НовыйДокумент.УстановитьСсылкуНового(ПолученныеДанныеСсылка);
					НовыйДокумент.ОбменДанными.Загрузка = Истина;
					НовыйДокумент.Записать();
					
					ОРПОбъект.КассоваяСмена = НовыйДокумент.Ссылка;
				КонецЕсли;
				ОРПОбъект.ОбменДанными.Загрузка = Истина;
				ОРПОбъект.Записать();
				НачалоСмены = Выборка.ОкончаниеКассовойСмены;
			КонецЦикла;
		КонецЕсли;
		ДокументыРПС = ДокументыСПС.Скопировать(Новый Структура("ОчередьДокумента", 2));
		Если ДокументыРПС.Количество() > 0 Тогда
			ДокументыРПС.Сортировать("ДатаДокумента");
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ВозвратПодарочныхСертификатов.Ссылка КАК Ссылка,
				|	ВозвратПодарочныхСертификатов.Организация КАК Организация,
				|	ВозвратПодарочныхСертификатов.Валюта КАК Валюта,
				|	ВозвратПодарочныхСертификатов.КассаККМ КАК КассаККМ,
				|	ВозвратПодарочныхСертификатов.Дата КАК Дата
				|ПОМЕСТИТЬ ВТ_РеализацияВозвратПС
				|ИЗ
				|	Документ.ВозвратПодарочныхСертификатов КАК ВозвратПодарочныхСертификатов
				|ГДЕ
				|	ВозвратПодарочныхСертификатов.Ссылка В(&МассивСсылок)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	РеализацияПодарочныхСертификатов.Ссылка,
				|	РеализацияПодарочныхСертификатов.Организация,
				|	РеализацияПодарочныхСертификатов.Валюта,
				|	РеализацияПодарочныхСертификатов.КассаККМ,
				|	РеализацияПодарочныхСертификатов.Дата
				|ИЗ
				|	Документ.РеализацияПодарочныхСертификатов КАК РеализацияПодарочныхСертификатов
				|ГДЕ
				|	РеализацияПодарочныхСертификатов.Ссылка В(&МассивСсылок)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Организация,
				|	Валюта,
				|	КассаККМ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КассоваяСмена.Ссылка КАК КассоваяСменаСсылка,
				|	ВТ_РеализацияВозвратПС.Ссылка КАК Ссылка,
				|	КассоваяСмена.НачалоКассовойСмены КАК НачалоКассовойСмены
				|ИЗ
				|	ВТ_РеализацияВозвратПС КАК ВТ_РеализацияВозвратПС
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
				|		ПО ВТ_РеализацияВозвратПС.Организация = КассоваяСмена.Организация
				|			И ВТ_РеализацияВозвратПС.КассаККМ = КассоваяСмена.КассаККМ
				|			И ВТ_РеализацияВозвратПС.Дата >= КассоваяСмена.НачалоКассовойСмены
				|			И ВТ_РеализацияВозвратПС.Дата <= КассоваяСмена.ОкончаниеКассовойСмены";
			
			Запрос.УстановитьПараметр("МассивСсылок", ДокументыРПС.ВыгрузитьКолонку("ДокументСсылка"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				РПСОбъект = Выборка.Ссылка.ПолучитьОбъект();
				РПСОбъект.Дата = Выборка.НачалоКассовойСмены;
				РПСОбъект.КассоваяСмена = Выборка.КассоваяСменаСсылка;
				РПСОбъект.ОбменДанными.Загрузка = Истина;
				РПСОбъект.Записать();
				
				НайденнаяСтрока = ТаблицаДляОтложенногоПроведения.Найти(Выборка.Ссылка, "ДокументСсылка");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ДатаДокумента  = Выборка.НачалоКассовойСмены;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаВПС = ДокументыСПС.Скопировать(Новый Структура("ОчередьДокумента", 3));
		Если ТаблицаВПС.Количество() > 0 Тогда
			ТаблицаВПС.Сортировать("ДатаДокумента");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	ТаблицаВПС.ДокументСсылка КАК ВозвратПС,
							|	ТаблицаВПС.ОРП КАК ОРП
							|ПОМЕСТИТЬ втВПС
							|ИЗ
							|	&ТаблицаВПС КАК ТаблицаВПС
							|;
							|
							|////////////////////////////////////////////////////////////////////////////////
							|ВЫБРАТЬ
							|	ВозвратПодарочныхСертификатов.Ссылка КАК ВозвратПС,
							|	ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена,
							|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ
							|ИЗ
							|	втВПС КАК втВПС
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратПодарочныхСертификатов КАК ВозвратПодарочныхСертификатов
							|		ПО втВПС.ВозвратПС = ВозвратПодарочныхСертификатов.Ссылка
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
							|		ПО втВПС.ОРП = ОтчетОРозничныхПродажах.Ссылка";
			
			Запрос.УстановитьПараметр("ТаблицаВПС", ТаблицаВПС);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ВПСОбъект = Выборка.ВозвратПС.ПолучитьОбъект();
				ВПСОбъект.КассоваяСмена = Выборка.КассоваяСмена;
				ВПСОбъект.КассаККМ = Выборка.КассаККМ;
				ВПСОбъект.ОбменДанными.Загрузка = Истина;
				ВПСОбъект.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаполнитьВозвратыПС(КомпонентыОбмена)
	МассивВозвратыПС = КомпонентыОбмена.ПараметрыКонвертации.МассивВозвратыПСЗаполнитьОснование;
	
	Если МассивВозвратыПС.Количество() > 0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВозвратПодарочныхСертификатовПодарочныеСертификаты.Ссылка КАК ВозвратПС,
		                      |	МАКСИМУМ(РеализацияПодарочныхСертификатовПодарочныеСертификаты.Ссылка) КАК РеализацияПС,
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияПодарочныхСертификатовПодарочныеСертификаты.Ссылка) КАК КоличествоРеализацийПС
		                      |ИЗ
		                      |	Документ.ВозвратПодарочныхСертификатов.ПодарочныеСертификаты КАК ВозвратПодарочныхСертификатовПодарочныеСертификаты
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияПодарочныхСертификатов.ПодарочныеСертификаты КАК РеализацияПодарочныхСертификатовПодарочныеСертификаты
		                      |		ПО ВозвратПодарочныхСертификатовПодарочныеСертификаты.Ссылка.КассоваяСмена = РеализацияПодарочныхСертификатовПодарочныеСертификаты.Ссылка.КассоваяСмена
		                      |			И ВозвратПодарочныхСертификатовПодарочныеСертификаты.ПодарочныйСертификат = РеализацияПодарочныхСертификатовПодарочныеСертификаты.ПодарочныйСертификат
		                      |ГДЕ
		                      |	ВозвратПодарочныхСертификатовПодарочныеСертификаты.Ссылка В(&МассивВозвратыПС)
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ВозвратПодарочныхСертификатовПодарочныеСертификаты.Ссылка");
		
		Запрос.УстановитьПараметр("МассивВозвратыПС", МассивВозвратыПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоРеализацийПС = 1 Тогда
				ВозвратПСОбъект = Выборка.ВозвратПС.ПолучитьОбъект();
				ВозвратПСОбъект.РеализацияПодарочныхСертификатов = Выборка.РеализацияПС;
				ВозвратПСОбъект.ОбменДанными.Загрузка = Истина;
				ВозвратПСОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаполнитьКлассификаторТНВЭД(КомпонентыОбмена)
	МассивТНВЭД = КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД;
	
	Если МассивТНВЭД.Количество() > 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	КлассификаторТНВЭД.Ссылка КАК Ссылка,
		|	КлассификаторТНВЭД.Код КАК СсылкаКод
		|ПОМЕСТИТЬ втТНВЭД
		|ИЗ
		|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
		|ГДЕ
		|	КлассификаторТНВЭД.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	И КлассификаторТНВЭД.Ссылка В(&МассивТНВЭД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Код КАК Код,
		|	Т.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод
		|ПОМЕСТИТЬ ТаблицаКлассификатора
		|ИЗ
		|	&ТаблицаКлассификатора КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТНВЭД.Ссылка КАК Ссылка,
		|	Единицы.Ссылка КАК ЕдиницаИзмерения
		|ИЗ
		|	втТНВЭД КАК втТНВЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКлассификатора КАК ТаблицаКлассификатора
		|		ПО втТНВЭД.СсылкаКод = ТаблицаКлассификатора.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Единицы
		|		ПО (ТаблицаКлассификатора.ЕдиницаИзмеренияКод = Единицы.Код)
		|			И (Единицы.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения))";
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТаблицаКлассификатора", Справочники.КлассификаторТНВЭД.ТаблицаКлассификатора(0));
		Запрос.УстановитьПараметр("МассивТНВЭД", МассивТНВЭД);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если Не ЗначениеЗаполнено(СправочникОбъект.ЕдиницаИзмерения) И ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
				СправочникОбъект.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				Попытка
					СправочникОбъект.Записать();
				Исключение
					ЗаписатьОшибкуВЖурналРегистрации(СправочникОбъект,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
				КонецПопытки
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаявкаНаРасходДСРасчетыСКонтр(Объект, КомпонентыОбмена)
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная
		Или Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПлатежнаяКарта
		Или Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПодарочныйСертификат
		Или Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.БонусныеБаллы Тогда
		ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС(Объект, КомпонентыОбмена);
	Иначе
		ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС(Объект, КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КассаПоВалютеИОрганизации(Объект, КомпонентыОбмена)
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		
	РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Касса, "ВалютаДенежныхСредств, Владелец, Подразделение");
	
	Если РеквизитыКассы.ВалютаДенежныхСредств <> Объект.Валюта 
		Или РеквизитыКассы.Владелец <> Объект.Организация Тогда
		
		ПараметрыОтбора = Новый Структура(
			"Валюта,Организация,Подразделение",
			Объект.Валюта,
			Объект.Организация,
			Подразделение);
		
		Объект.Касса = КассаПоУмолчанию(ПараметрыОтбора, КомпонентыОбмена);
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КассаРасчетыСКонтрагентами(Объект, КомпонентыОбмена)
	ЗаполнитьКассуПоВалютеИОрганизации(Объект, КомпонентыОбмена);
	ЗаполнениеСтатьиДДСВДокументе(Объект);
	ЗаполнениеПартнераВРасшифровкеПлатежа(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Контрагенты(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.Наименование) И ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.Наименование = Объект.НаименованиеПолное;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.СтранаРегистрации) или Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент) Тогда
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;	
	 
	Если ЗначениеЗаполнено(Объект.СтранаРегистрации) и НЕ Объект.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ЮрФизЛицо) И ЗначениеЗаполнено(Объект.ЮридическоеФизическоеЛицо) Тогда
		Объект.ЮрФизЛицо = ?(Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			Перечисления.ЮрФизЛицо.ФизЛицо,
			Перечисления.ЮрФизЛицо.ЮрЛицо);
	КонецЕсли;	  
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	ПартнерОбъект = ?(ЗначениеЗаполнено(Объект.Партнер),
		Объект.Партнер.ПолучитьОбъект(),
		Справочники.Партнеры.СоздатьЭлемент());
		
	Если ПартнерОбъект.ЭтоНовый() Тогда
		ПартнерОбъект.ДатаРегистрации = Дата('19800101');
		ПартнерОбъект.Клиент          = Истина;
		ПартнерОбъект.Поставщик       = Истина;
		ПартнерОбъект.ПрочиеОтношения = Истина;
		ПартнерОбъект.УстановитьНовыйКод(ОбменДаннымиСервер.ПрефиксИнформационнойБазы());
		
		ПартнерОбъект.ГруппаДоступа   = ЭлементПоУмолчанию(КомпонентыОбмена, "ГруппаДоступаПартнера");
	КонецЕсли;
	
	// Синхронизация свойств контрагента и партнера.
	Если ПартнерОбъект <> Справочники.Партнеры.НеизвестныйПартнер
		И (ПартнерОбъект.ЭтоНовый() Или ИспользоватьПартнеровКакКонтрагентов) Тогда
		ПартнерОбъект.Наименование       = Объект.Наименование;
		ПартнерОбъект.НаименованиеПолное = Объект.НаименованиеПолное;
		
		ПартнерОбъект.ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо,
			Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо,
			Перечисления.КомпанияЧастноеЛицо.Компания);
		
		Для Каждого СтрокаКИКонтрагента Из Объект.КонтактнаяИнформация Цикл
			ВидКИПартнера = ВидКИПартнераПоВидуКИКонтрагента(СтрокаКИКонтрагента.Вид, ИспользоватьПартнеровКакКонтрагентов);
			Если ВидКИПартнера = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиКИПартнера = ПартнерОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ВидКИПартнера));
			Для Каждого СтрокаКИПартнера Из СтрокиКИПартнера Цикл
				ПартнерОбъект.КонтактнаяИнформация.Удалить(СтрокаКИПартнера);
			КонецЦикла;
			
			СтрокаКИПартнера = ПартнерОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКИПартнера, СтрокаКИКонтрагента);
			СтрокаКИПартнера.Вид = ВидКИПартнера;
		КонецЦикла;
		
		БылаПометкаУдаления = ПартнерОбъект.ПометкаУдаления;
		ПартнерОбъект.ПометкаУдаления = Ложь;
		
		ПартнерОбъект.ОбменДанными.Загрузка = Истина;
		ПартнерОбъект.Записать();
		
		Если БылаПометкаУдаления Тогда
			ПараметрыКлюча = Новый Структура("Партнер", ПартнерОбъект.Ссылка);
			Справочники.КлючиАналитикиУчетаПоПартнерам.УстановитьПометкуУдаления(ПараметрыКлюча, Ложь);
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(ПартнерОбъект.Ссылка);
		Если Объект.Партнер <> ПартнерОбъект.Ссылка Тогда
			Объект.Партнер = ПартнерОбъект.Ссылка;
		Иначе
			ОбъектМодифицирован = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_НачислениеКредитовДепозитов(Объект)
	Партнер = Неопределено;
	
	Для Каждого Строка Из Объект.Начисления Цикл
		
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Строка.Контрагент);
	
		Если Не ЗначениеЗаполнено(Партнер) Тогда
			Партнер = Справочники.Партнеры.НеизвестныйПартнер;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Партнер)
			Или Строка.Партнер <> Партнер Тогда
			Строка.Партнер = Партнер;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Номенклатура(Объект, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = ЭлементПоУмолчанию(КомпонентыОбмена, "ГруппаДоступаНоменклатуры");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Качество) Тогда
		Объект.Качество = Перечисления.ГрадацииКачества.Новый;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВариантОформленияПродажи) Тогда
		Объект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИспользованиеХарактеристик) Тогда
		Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	КонецЕсли;
	
	#Область ВидНоменклатуры
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И ЗначениеЗаполнено(Объект.ТипНоменклатуры) Тогда
		// Вид номенклатуры подбирается по типу и по признаку алкогольной продукции.
		ВидНоменклатуры = Неопределено;
		
		ПараметрыПоиска = Новый Структура("ТипНоменклатуры, АлкогольнаяПродукция");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Объект);
		НайдСтроки = КомпонентыОбмена.ПараметрыКонвертации.ВидыНоменклатурыПоУмолчанию.НайтиСтроки(ПараметрыПоиска);
		НайдСтрока = ?(НайдСтроки.Количество() = 0, Неопределено, НайдСтроки[0]);
	
		Если НайдСтрока = Неопределено Тогда
	
			НеобходимоСоздатьЭлемент = Ложь;
	
			Если ПараметрыПоиска.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Товар'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
			ИначеЕсли ПараметрыПоиска.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Услуга'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
			КонецЕсли;
			
			Если ПараметрыПоиска.АлкогольнаяПродукция Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НаименованиеЭлементаДляОбменаПоУмолчанию + "; Алк";
			КонецЕсли;
	
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
			|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатуры.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
			|ИЗ
			|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|ГДЕ
			|	НЕ ВидыНоменклатуры.ПометкаУдаления
			|	И ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры
			|	И ВидыНоменклатуры.АлкогольнаяПродукция = &АлкогольнаяПродукция
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
	
			Запрос.УстановитьПараметр("ТипНоменклатуры", ПараметрыПоиска.ТипНоменклатуры);
			Запрос.УстановитьПараметр("АлкогольнаяПродукция", ПараметрыПоиска.АлкогольнаяПродукция);
			Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
			РезультатЗапроса = Запрос.Выполнить();
	
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
					ВидНоменклатуры = Выборка.ВидНоменклатуры;
				Иначе
					НеобходимоСоздатьЭлемент = Истина;
				КонецЕсли;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
	
			// Создание элемента для обмена с заданными параметрами
			Если НеобходимоСоздатьЭлемент Тогда
				
				ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
				
				ЗаполнитьЗначенияСвойств(ВидНоменклатурыОбъект, ПараметрыПоиска);
				
				ВидНоменклатурыОбъект.Наименование                            = НаименованиеЭлементаДляОбменаПоУмолчанию;
				ВидНоменклатурыОбъект.Описание                                = НСтр("ru = '#Создан автоматически при обмене на основе универсального формата данных'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
				ВидНоменклатурыОбъект.ВариантОформленияПродажи                = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
				ВидНоменклатурыОбъект.ИспользованиеХарактеристик              = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
				ВидНоменклатурыОбъект.НастройкаИспользованияСерий             = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара;
				ВидНоменклатурыОбъект.ТочностьУказанияСрокаГодностиСерии      = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней;
				ВидНоменклатурыОбъект.ШаблонНаименованияДляПечатиНоменклатуры = "[Наименование]";
				ВидНоменклатурыОбъект.ШаблонНаименованияДляПечатиНоменклатуры = "[Наименование]";
				ВидНоменклатурыОбъект.ИспользованиеХарактеристик              = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
				
				// Заполнение группы доступа
				Если Не ЗначениеЗаполнено(ВидНоменклатурыОбъект.ГруппаДоступа)
					И ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
					ВидНоменклатурыОбъект.ГруппаДоступа = Объект.ГруппаДоступа;
				КонецЕсли;
				
				Попытка
					ВидНоменклатурыОбъект.Записать();
					ВидНоменклатуры = ВидНоменклатурыОбъект.Ссылка;
				Исключение
					ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
					ЗаписатьОшибкуВЖурналРегистрации(ВидНоменклатуры,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
				КонецПопытки
			КонецЕсли;
			
			НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ВидыНоменклатурыПоУмолчанию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПоиска);
			НоваяСтрока.ВидНоменклатуры = ВидНоменклатуры;
			
		Иначе
			ВидНоменклатуры = НайдСтрока.ВидНоменклатуры;
		КонецЕсли;	
		Объект.ВидНоменклатуры = ВидНоменклатуры;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
Процедура ОтложеннаяОбработка_Организации(Объект)
	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ОбособленноеПодразделение = (Не Объект.ГоловнаяОрганизация = Объект.Ссылка);
	Иначе
		Объект.ОбособленноеПодразделение = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация)
		И Не Объект.ОбособленноеПодразделение Тогда
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Объект.РайонныйКоэффициент = 1;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиБезналичныхДС(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Для Каждого СтрокаДокумента Из Объект.БанковскиеСчета Цикл
		
		РеквизитыБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(СтрокаДокумента.БанковскийСчет);
		ВалютаБанковскогоСчета    = РеквизитыБанковскогоСчета.Валюта;
		
		Если Не ЗначениеЗаполнено(ВалютаБанковскогоСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыРеглИУпр = ПересчетСуммыВРеглИУпр(КомпонентыОбмена,ВалютаБанковскогоСчета, Объект.Дата, СтрокаДокумента.Сумма);
	
		СтрокаДокумента.СуммаРегл = СуммыРеглИУпр.СуммаРегл;
		СтрокаДокумента.СуммаУпр  = СуммыРеглИУпр.СуммаУпр;
		
		ОбъектМодифицирован = Истина;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиЗадолжПодотчетников(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Для Каждого СтрокаДокумента Из Объект.РасчетыСПодотчетниками Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Валюта) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыРеглИУпр = ПересчетСуммыВРеглИУпр(КомпонентыОбмена, СтрокаДокумента.Валюта, Объект.Дата, СтрокаДокумента.Сумма);
	
		СтрокаДокумента.СуммаРегл = СуммыРеглИУпр.СуммаРегл;
		СтрокаДокумента.СуммаУпр  = СуммыРеглИУпр.СуммаУпр;
		
		ОбъектМодифицирован = Истина;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиКредитовИЗаймов(Объект, ОбъектМодифицирован)
	Для Каждого Строка Из Объект.РасчетыПоДоговорамКредитовИДепозитов Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Партнер) Тогда
			
			Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Строка.Контрагент);
			Если Не ЗначениеЗаполнено(Партнер) Тогда
				Партнер = Справочники.Партнеры.НеизвестныйПартнер;
			КонецЕсли;
		
			Строка.Партнер = Партнер;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиНаличныхДС(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Для Каждого СтрокаДокумента Из Объект.Кассы Цикл
		
		ВалютаКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДокумента.Касса, "ВалютаДенежныхСредств");
		
		Если Не ЗначениеЗаполнено(ВалютаКассы) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыРеглИУпр = ПересчетСуммыВРеглИУпр(КомпонентыОбмена, ВалютаКассы, Объект.Дата, СтрокаДокумента.Сумма);
	
		СтрокаДокумента.СуммаРегл = СуммыРеглИУпр.СуммаРегл;
		СтрокаДокумента.СуммаУпр  = СуммыРеглИУпр.СуммаУпр;
		
		ОбъектМодифицирован = Истина;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиПерерасходаПодотчетнЛиц(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Для Каждого СтрокаДокумента Из Объект.РасчетыСПодотчетниками Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Валюта) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыРеглИУпр = ПересчетСуммыВРеглИУпр(КомпонентыОбмена, СтрокаДокумента.Валюта, Объект.Дата, СтрокаДокумента.Сумма);
	
		СтрокаДокумента.СуммаРегл = СуммыРеглИУпр.СуммаРегл;
		СтрокаДокумента.СуммаУпр  = СуммыРеглИУпр.СуммаУпр;
		
		ОбъектМодифицирован = Истина;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиРасчетовСПокупАвансы(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Документ_ОстаткиРасчетов_ОтложеннаяОбработкаПартне(Объект, ОбъектМодифицирован);
	
	Для Каждого СтрокаДокумента Из Объект.РасчетыСПартнерами Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВалютаВзаиморасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыРеглИУпр = ПересчетСуммыВРеглИУпр(КомпонентыОбмена, СтрокаДокумента.ВалютаВзаиморасчетов, Объект.Дата, СтрокаДокумента.Сумма);
	
		СтрокаДокумента.СуммаРегл = СуммыРеглИУпр.СуммаРегл;
		СтрокаДокумента.СуммаУпр  = СуммыРеглИУпр.СуммаУпр;
		
		ОбъектМодифицирован = Истина;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиРасчетовСПокупДолги(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Документ_ОстаткиРасчетов_ОтложеннаяОбработкаПартне(Объект, ОбъектМодифицирован);
	
	Для Каждого СтрокаДокумента Из Объект.РасчетыСПартнерами Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВалютаВзаиморасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыРеглИУпр = ПересчетСуммыВРеглИУпр(КомпонентыОбмена, СтрокаДокумента.ВалютаВзаиморасчетов, Объект.Дата, СтрокаДокумента.Сумма);
	
		СтрокаДокумента.СуммаРегл = СуммыРеглИУпр.СуммаРегл;
		СтрокаДокумента.СуммаУпр  = СуммыРеглИУпр.СуммаУпр;
		
		ОбъектМодифицирован = Истина;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиРасчетовСПоставщАвансы(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Документ_ОстаткиРасчетов_ОтложеннаяОбработкаПартне(Объект, ОбъектМодифицирован);
	
	Для Каждого СтрокаДокумента Из Объект.РасчетыСПартнерами Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВалютаВзаиморасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыРеглИУпр = ПересчетСуммыВРеглИУпр(КомпонентыОбмена, СтрокаДокумента.ВалютаВзаиморасчетов, Объект.Дата, СтрокаДокумента.Сумма);
	
		СтрокаДокумента.СуммаРегл = СуммыРеглИУпр.СуммаРегл;
		СтрокаДокумента.СуммаУпр  = СуммыРеглИУпр.СуммаУпр;
		
		ОбъектМодифицирован = Истина;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиРасчетовСПоставщДолги(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Документ_ОстаткиРасчетов_ОтложеннаяОбработкаПартне(Объект, ОбъектМодифицирован);
	
	Для Каждого СтрокаДокумента Из Объект.РасчетыСПартнерами Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВалютаВзаиморасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыРеглИУпр = ПересчетСуммыВРеглИУпр(КомпонентыОбмена, СтрокаДокумента.ВалютаВзаиморасчетов, Объект.Дата, СтрокаДокумента.Сумма);
	
		СтрокаДокумента.СуммаРегл = СуммыРеглИУпр.СуммаРегл;
		СтрокаДокумента.СуммаУпр  = СуммыРеглИУпр.СуммаУпр;
		
		ОбъектМодифицирован = Истина;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиСобственныхТМЦ(Объект, ОбъектМодифицирован)
	Документ_ОстаткиТМЦ_ОтложеннаяОбработкаПартнеров(Объект, ОбъектМодифицирован);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиТараПереданная(Объект, ОбъектМодифицирован)
	Документ_ОстаткиТМЦ_ОтложеннаяОбработкаПартнеров(Объект, ОбъектМодифицирован);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиТараПринятая(Объект, ОбъектМодифицирован)
	Документ_ОстаткиТМЦ_ОтложеннаяОбработкаПартнеров(Объект, ОбъектМодифицирован);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиТоваровПереданНаКомис(Объект, ОбъектМодифицирован)
	Документ_ОстаткиТМЦ_ОтложеннаяОбработкаПартнеров(Объект, ОбъектМодифицирован);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОстаткиТоваровПринятыхНаКомис(Объект, ОбъектМодифицирован)
	Документ_ОстаткиТМЦ_ОтложеннаяОбработкаПартнеров(Объект, ОбъектМодифицирован);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетОРозничныхПродажах(Объект)
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПервичныйДокумент(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Партнер = Справочники.Партнеры.НеизвестныйПартнер;
	КонецЕсли;
	
	Объект.Партнер = Партнер;
	
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	Если Объект.Валюта = ВалютаРеглУчета или НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ВалютаРеглУчета;
		Объект.СуммаРегл = Объект.СуммаДокумента;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Объект.Валюта, ВалютаРеглУчета, Объект.Дата);
		Объект.СуммаРегл = Окр(Объект.СуммаДокумента * КоэффициентПересчета, 2, 1);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПеремещениеТоваров(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Если Объект.ПеремещениеПоЗаказам и Объект.Товары.Количество() > 0 Тогда
			Объект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Объект.Товары[0].ЗаказНаПеремещение);
		Иначе
			Объект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПодарочныеСертификаты(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		СтрокаНаименования = Строка(Объект.Владелец)
			                     + ?(ЗначениеЗаполнено(Объект.Штрихкод), " " + Строка(Объект.Штрихкод), "")
			                     + ?(ЗначениеЗаполнено(Объект.МагнитныйКод), " " + Строка(Объект.МагнитныйКод), "");
	
		Объект.Наименование = СтрокаНаименования;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеТоваровУслуг(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСПоставщикомВШапкеДокумента(Объект, КомпонентыОбмена.ПараметрыКонвертации);
	ЗаполнитьПараметрыДоставки(Объект);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
	ЗаполнитьЗакупкуПодДеятельностьПоУмолчанию(Объект, "ЗакупкаПодДеятельность");
	
	// Перезаполнение вида договора для операции закупки по импорту.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
	
		ДоговорСсылка = Объект.Договор;
	
		Если ЗначениеЗаполнено(ДоговорСсылка)
			И ОбщегоНазначения.СсылкаСуществует(ДоговорСсылка) Тогда
			
			ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорСсылка, "ТипДоговора, ХозяйственнаяОперация");
			
			ТипДоговораИмпортТребуется = Перечисления.ТипыДоговоров.Импорт;
			ХозяйственнаяОперацияТребуется = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
			
			Если ДанныеДоговора.ТипДоговора <> ТипДоговораИмпортТребуется
				Или ДанныеДоговора.ХозяйственнаяОперация <> ХозяйственнаяОперацияТребуется Тогда
				
				ДоговорОбъект = ДоговорСсылка.ПолучитьОбъект();
				
				ДоговорОбъект.ТипДоговора           = ТипДоговораИмпортТребуется;
				ДоговорОбъект.ХозяйственнаяОперация = ХозяйственнаяОперацияТребуется;
				
				УзелОбмена = ?(КомпонентыОбмена.ЭтоОбменЧерезПланОбмена, КомпонентыОбмена.УзелКорреспондента, Неопределено);
				ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ДоговорОбъект, Истина, Ложь, УзелОбмена);
				
				ДоговорОбъект.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Если ЗначениеЗаполнено(Объект.Соглашение)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")) Тогда
			
			УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Объект.Соглашение, Истина, Истина);
			
			Если Не ЗначениеЗаполнено(УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов) 
				Или Не УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
				Объект.ПорядокОплаты = УсловияЗакупок.ПорядокОплаты;
			Иначе
				Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Договор)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")) Тогда
			Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации);
		
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,
			Объект.НалогообложениеНДС,
			ВалютаОплаты);
	КонецЕсли;
	
	// Подразделение в ТЧ Товары для услуг
	Подразделение = ЭлементПоУмолчанию(КомпонентыОбмена, "Подразделение");
	
	// Заполнение пустой статьи расходов и подразделения для услуг
	СтатьяРасходов = Неопределено;
	Для Каждого Строка Из Объект.Товары Цикл
		Если (Строка.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
				Или Строка.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа) Тогда
			Если Не ЗначениеЗаполнено(Строка.СтатьяРасходов) Тогда
				Если СтатьяРасходов = Неопределено Тогда
					СтатьяРасходов = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяРасходовПоступлениеУслуг");
				КонецЕсли;
				Строка.СтатьяРасходов = СтатьяРасходов;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Подразделение) Тогда
				Строка.Подразделение = Подразделение; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьТаблицуСтатьиДДСИХозОперации(Объект, КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Объект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Объект.Договор);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияТоваровУслуг(Объект, ОбъектМодифицирован)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСКлиентомВШапкеДокумента(Объект);
	ЗаполнитьПараметрыДоставки(Объект);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Если ЗначениеЗаполнено(Объект.Соглашение)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")) Тогда
			
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение, Истина, Истина);
			
			Если Не ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
				Или Не УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
				Объект.ПорядокОплаты = УсловияПродаж.ПорядокОплаты;
			Иначе
				Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Договор)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")) Тогда
			Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации, Объект.Касса);
		
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,
			Объект.НалогообложениеНДС,
			ВалютаОплаты);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СборкаТоваров(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.СборкаПодДеятельность) Тогда
		СборкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Дата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Объект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Склады(Объект)
	Если Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВыборГруппы) Тогда
			Объект.ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.РозничныйВидЦены) Тогда
		НаименованиеТипаЦен = НСтр("ru='Розничная цена'");
	
		ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию(НаименованиеТипаЦен);
	
		Если Не ЗначениеЗаполнено(ВидЦены)
			И Объект.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			
			ВидОбъект = Справочники.ВидыЦен.СоздатьЭлемент();
			ВидОбъект.Наименование          = НаименованиеТипаЦен;
			ВидОбъект.ВалютаЦены            = Константы.ВалютаУправленческогоУчета.Получить();
			ВидОбъект.СпособЗаданияЦены     = Перечисления.СпособыЗаданияЦен.Вручную;
			ВидОбъект.СхемаКомпоновкиДанных = "ЦеныПоступленияПредопределенный";
			ВидОбъект.ИспользоватьПриПродаже = Истина;
			ВидОбъект.Записать();
			ВидЦены = ВидОбъект.Ссылка;
			
		КонецЕсли;
	
		Объект.РозничныйВидЦены = ВидЦены;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ИсточникИнформацииОЦенахДляПечати) Тогда
		Объект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СоглашенияСКлиентами(Объект)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус                           = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		Объект.Согласован                       = Истина;
		Объект.ИспользуютсяДоговорыКонтрагентов = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		Объект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Объект.Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		Объект.ВалютаВзаиморасчетов = Объект.Валюта;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СоглашенияСПоставщиками(Объект)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус                           = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
		Объект.ДоступноДляПродажиКлиентам       = Ложь;
		Объект.ИспользуютсяДоговорыКонтрагентов = Истина;
		Объект.Согласован                       = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДС)
		И Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту 
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
			НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		Иначе
			Объект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Объект.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		Объект.ВалютаВзаиморасчетов = Объект.Валюта;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СтруктураПредприятия(Объект)
	МетаданныеОбъекта = Объект.Метаданные();
	
	Если Не ЗначениеЗаполнено(Объект.ВариантОбособленногоУчетаТоваров) Тогда	
		Объект.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.НеВедется;
	КонецЕсли;
	
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТаможеннаяДекларацияУП(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	// Если партнера не удалось заполнить по данным документа поступления
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	
	// заполнение поставщика и склада из документа поступления
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоступления,
	|	ПоступлениеТоваровУслуг.Склад,
	|	ПоступлениеТоваровУслуг.Партнер,
	|	ПоступлениеТоваровУслуг.Контрагент
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&ДокументыПоступления)");
	Запрос.УстановитьПараметр("ДокументыПоступления", Объект.Товары.ВыгрузитьКолонку("ДокументПоступления"));
	
	РеквизитыПоступлений = Запрос.Выполнить().Выгрузить();
	РеквизитыПоступлений.Индексы.Добавить("ДокументПоступления");
	
	ТекПоставщик = Неопределено;
	ТекКонтрагентПоставщика = Неопределено;
	Для Каждого Строка Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.ДокументПоступления) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыПоступления = РеквизитыПоступлений.Найти(Строка.ДокументПоступления, "ДокументПоступления");
		
		Если Не РеквизитыПоступления = Неопределено Тогда
			ТекПоставщик = РеквизитыПоступления.Партнер;
			ТекКонтрагентПоставщика = РеквизитыПоступления.Контрагент;
			Строка.Склад = РеквизитыПоступления.Склад;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Поставщик = ТекПоставщик;
	Объект.КонтрагентПоставщика = ТекКонтрагентПоставщика;
	
	Если Объект.ТаможенныйСбор <> 0 И Не ЗначениеЗаполнено(Объект.СтатьяРасходовСбор) Тогда
		Объект.СтатьяРасходовСбор = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяРасходовТаможенныйСбор");
	КонецЕсли;
	Если Объект.ТаможенныйШтраф <> 0 И Не ЗначениеЗаполнено(Объект.СтатьяРасходовШтраф) Тогда
		Объект.СтатьяРасходовШтраф = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяРасходовТаможенныйШтраф");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации);
			
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,
			ВалютаОплаты);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТипыЦен(Объект)
	Если Не ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.СтатусыДействияВидовЦен.Действует;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_УстановкаЦенНоменклатуры(Объект, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ФизЛица(Объект, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = ЭлементПоУмолчанию(КомпонентыОбмена, "ГруппаДоступаФизЛица");
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЭквайринговыйТерминал(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = НСтр("ru='Создан автоматически'");
	КонецЕсли;
КонецПроцедуры
Процедура ОчиститьИспользованиеПКО(ИспользованиеПКО)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО.Удалить(Правило.Ключ);
	КонецЦикла;
КонецПроцедуры
Процедура ПередЗаписьюСтатьиРасходов(ДанныеИБ, ПолученныеДанные)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		ПолученныеДанные.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
	КонецЕсли;
КонецПроцедуры
Процедура ПередКонвертациейУТКАУП(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
			ПараметрыКонвертации.Вставить("ИспользоватьСоглашенияСПоставщиками", Истина);
			
			// Виды  номенклатуры по умолчанию.
			ВидыНоменклатурыПоУмолчанию = Новый ТаблицаЗначений;
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ТипНоменклатуры");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("АлкогольнаяПродукция");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ВидНоменклатуры");
			ПараметрыКонвертации.Вставить("ВидыНоменклатурыПоУмолчанию", ВидыНоменклатурыПоУмолчанию);
	
			// Установка признака применения ставок НДС 4% и 2%.
			ПараметрыКонвертации.Вставить("ПоставщикиЛьготнаяСтавкаНДС", Новый Массив);
			
			// Установка признаков использования договоров контрагентов.
			ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСПоставщиками", ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками"));
			ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСКлиентами",    ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами"));
			
			// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
			ДопРеквизитыИСведения = Новый ТаблицаЗначений;
			ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
			ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
			ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
			ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
			
			// Инициализация таблицы для заполнения хоз.операций в загруженных статьях ДДС.
			СтатьиДДСИХозОперации = Новый ТаблицаЗначений;
			СтатьиДДСИХозОперации.Колонки.Добавить("СтатьяДДС");
			СтатьиДДСИХозОперации.Колонки.Добавить("ХозОперация");
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации = СтатьиДДСИХозОперации;
	
			// Инициализация таблицы для формирования счетов-фактур полученных, по загруженным авансовым отчетам. 
			СФПолученные = Новый ТаблицаЗначений;
			СФПолученные.Колонки.Добавить("ДокументОснование");
			СФПолученные.Колонки.Добавить("ДатаСФ");
			СФПолученные.Колонки.Добавить("НомерСФ");
			СФПолученные.Колонки.Добавить("Контрагент");
			СФПолученные.Колонки.Добавить("Организация");
			СФПолученные.Колонки.Добавить("Валюта");
			КомпонентыОбмена.ПараметрыКонвертации.СФПолученныеПоЗагруженнымАвансовымОтчетам = СФПолученные;
			
			ДокументыСПС = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
			МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратПодарочныхСертификатов"));
			МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияПодарочныхСертификатов"));
			ДокументыСПС.Колонки.Добавить("ДокументСсылка", Новый ОписаниеТипов(МассивТипов));
			ДокументыСПС.Колонки.Добавить("ДатаДокумента");
			// 1 - ОтчетОРозничныхПродажах, 2 - РеализацияПС, ВозвратПС.
			// 3 - ВозвратыПС, для которых явно указан ОРП
			ДокументыСПС.Колонки.Добавить("ОчередьДокумента");
			ДокументыСПС.Колонки.Добавить("КассаККМ");
			ДокументыСПС.Колонки.Добавить("Организация");
			ДокументыСПС.Колонки.Добавить("Валюта");
			ДокументыСПС.Колонки.Добавить("ОРП", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
			КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами = ДокументыСПС;
			
		
			//Инициализируем массив КлассификатораТНВЭД
			//для заполнения единицы измерения
			МассивТНВЭД = Новый Массив;
			КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД = МассивТНВЭД;
			
			//Инициализируем массив документов "ВозвратПодарочныхСертификатов"
			//для заполнения реквизита "РеализацияПодарочныхСертификатов"
			МассивВозвратыПС = Новый Массив; 
			КомпонентыОбмена.ПараметрыКонвертации.МассивВозвратыПСЗаполнитьОснование = МассивВозвратыПС;
	
		ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
			Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
				ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты = Новый Массив;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КомпонентыОбмена.НаправлениеОбмена = "Получение"
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "ВариантНастройки") = "ОбменУТБП"
			И КомпонентыОбмена.КоличествоОбъектовКЗагрузке > 0 Тогда
			
			КомпонентыОбмена.ФлагОшибки = Истина;
			КомпонентыОбмена.ПравилаОбработкиДанных.Очистить();
			
			ВызватьИсключение НСтр("ru = 'Загрузка данных из ""Бухгалтерия предприятия, редакция 3.0"" не предусмотрена.'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = Неопределено Тогда
			ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = Истина;
		КонецЕсли;
	
		Если ПараметрыКонвертации.СкладПоУмолчанию = Неопределено Тогда
			ПараметрыКонвертации.СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	
		Если ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Неопределено Тогда
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Ложь;
		КонецЕсли;
	
	Иначе
		// Заполнение параметров из узла обмена.
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"ВыгружатьАналитикуПоСкладам,СкладПоУмолчанию");
		ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = РеквизитыУзлаОбмена.ВыгружатьАналитикуПоСкладам;
		ПараметрыКонвертации.СкладПоУмолчанию = РеквизитыУзлаОбмена.СкладПоУмолчанию;
		
		Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
	
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Ложь;
			ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию = Ложь;
			
			ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты = Новый Массив;
	
		Иначе
	
			// Заполнение параметров из узла обмена.
			РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				КомпонентыОбмена.УзелКорреспондента,
				"ИспользоватьОтборПоОрганизациям,ВыгружатьУправленческуюОрганизацию");
	
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = РеквизитыУзлаОбмена.ИспользоватьОтборПоОрганизациям;
			ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию = РеквизитыУзлаОбмена.ВыгружатьУправленческуюОрганизацию;
	
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.Организации.ВыгрузитьКолонку("Организация"));
			ПараметрыКонвертации.Вставить("Организации", СписокОрганизаций);
	
			ВидыЦенНоменклатуры = Новый СписокЗначений;
			ВидыЦенНоменклатуры.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.ВидыЦенНоменклатуры.ВыгрузитьКолонку("ВидЦенНоменклатуры"));
			ПараметрыКонвертации.Вставить("ВидыЦенНоменклатуры", ВидыЦенНоменклатуры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПередМержеванием_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	// Загрузка дополнительных сведений.
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	// Загрузка дополнительных сведений.
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура ПередМержеванием_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	// Загрузка дополнительных сведений.
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура ПередМержеванием_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура ПередОтложеннымЗаполнениемУТКАУП(КомпонентыОбмена)
	//В конфигурации УТ, данные обработчик может быть пустой.
	
КонецПроцедуры
Функция ПересчетСуммыВРеглИУпр(КомпонентыОбмена, Валюта, ДатаПересчета, Сумма)
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	ВалютаУпрУчета  = ВалютаУправленческогоУчета(КомпонентыОбмена);
	
	СуммыВВалютахРеглИУпр = Новый Структура("СуммаУпр, СуммаРегл");
	
	Если Валюта = ВалютаРеглУчета Тогда
		СуммыВВалютахРеглИУпр.СуммаРегл = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаРеглУчета, ДатаПересчета);
		СуммыВВалютахРеглИУпр.СуммаРегл = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Если Валюта = ВалютаУпрУчета Тогда
		СуммыВВалютахРеглИУпр.СуммаУпр = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаУпрУчета, ДатаПересчета);
		СуммыВВалютахРеглИУпр.СуммаУпр = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Возврат СуммыВВалютахРеглИУпр;
КонецФункции
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ Из ДанныеИБ.КонтактнаяИнформация Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование, Предопределенный, ХранитьИсториюИзменений");
		Если СвойстваВидаКИ.ХранитьИсториюИзменений = Истина Тогда
			НайденныеСтроки = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИ.Вид));
			Если НайденныеСтроки.Количество() > 1 Тогда
				АктуальнаяВерсия = Истина;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока <> СтрокаКИ И НайденнаяСтрока.ДействуетС > СтрокаКИ.ДействуетС Тогда
						АктуальнаяВерсия = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не АктуальнаяВерсия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
		Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты Тогда
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
	
		Иначе
	
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПодготовитьСтруктуруДанныхПервичногоДокумента(ДанныеXDTO, Строка)
	ПервичныйДокумент = Новый Структура;
	Если ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
	    ПервичныйДокумент.Вставить("Дата",                    Строка.ДокументРасчетов.Дата);
		ПервичныйДокумент.Вставить("ДатаВходящегоДокумента",  Строка.ДокументРасчетов.Дата);
		ПервичныйДокумент.Вставить("НомерВходящегоДокумента", Строка.ДокументРасчетов.Номер);
	ИначеЕсли ЗначениеЗаполнено(Строка.Договор)
		и Строка.Договор.Свойство("Дата") и Строка.Договор.Свойство("Номер") Тогда
		
		ПервичныйДокумент.Вставить("Дата",                    Строка.Договор.Дата);
		ПервичныйДокумент.Вставить("ДатаВходящегоДокумента",  Строка.Договор.Дата);
		ПервичныйДокумент.Вставить("НомерВходящегоДокумента", Строка.Договор.Номер);
	Иначе
		ПервичныйДокумент.Вставить("Дата",                    ДанныеXDTO.Дата);
	КонецЕсли;
	ПервичныйДокумент.Вставить("СуммаДокумента",          Строка.Сумма);
	ПервичныйДокумент.Вставить("Организация",             ДанныеXDTO.Организация);
	ПервичныйДокумент.Вставить("Контрагент",              Строка.Контрагент);
	ПервичныйДокумент.Вставить("Договор",                 Строка.Договор);
	ПервичныйДокумент.Вставить("Валюта",                  Строка.ВалютаВзаиморасчетов);
	
	Возврат ПервичныйДокумент;
КонецФункции
Функция ПолучитьДанныеКонтрагентаПоБанкСчетуОрганизации(БанковскийСчетОрганизации, КомпонентыОбмена)
	СтруктураВозврат = Новый Структура("Контрагент, БанковскийСчетКонтрагента");
	Если НЕ ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		Возврат СтруктураВозврат; 
	КонецЕсли;
	// Поиск контрагента, соответствующего Организации.
	Контрагент = КонтрагентИзОрганизации(БанковскийСчетОрганизации.Владелец, КомпонентыОбмена);
	СтруктураВозврат.Контрагент = Контрагент;
	
	// Заполнение банковского счета.
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчетаКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Владелец = &Владелец
	|	И БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета");
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("НомерСчета", БанковскийСчетОрганизации.НомерСчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврат.БанковскийСчетКонтрагента = Выборка.Ссылка;
	Иначе
		
		// Создаем новый банковский счет.
		БанкСчетОбъект = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		БанкСчетОбъект.Владелец = Контрагент;
		ЗаполнитьЗначенияСвойств(БанкСчетОбъект, БанковскийСчетОрганизации,,"Владелец, Родитель");
		БанкСчетОбъект.Записать();
		
		КомпонентыОбмена.ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты.Добавить(БанкСчетОбъект.Ссылка);
		
		СтруктураВозврат.БанковскийСчетКонтрагента = БанкСчетОбъект.Ссылка;
		
	КонецЕсли;
	Возврат СтруктураВозврат;
КонецФункции
Процедура ПолучитьНастройкиВыгрузкиАналитикиПоДоговорам(НастройкиДопАналитикиПоДоговорам, КомпонентыОбмена)
	АналитикаВзаиморасчетов = "";
	
	НастройкиДопАналитикиПоДоговорам = Новый Структура;
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И КомпонентыОбмена.УзелКорреспондента.Метаданные().Реквизиты.Найти("ПравилаСозданияДоговоровКонтрагентов") <> Неопределено Тогда
		АналитикаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "ПравилаСозданияДоговоровКонтрагентов");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АналитикаВзаиморасчетов) Тогда
		АналитикаВзаиморасчетов = "БезРазделения";
	КонецЕсли;
	
	
	НастройкиДопАналитикиПоДоговорам.Вставить("ЗаказВДоговор",      АналитикаВзаиморасчетов = "ПоЗаказам");
	НастройкиДопАналитикиПоДоговорам.Вставить("СоглашениеВДоговор", АналитикаВзаиморасчетов = "ПоСоглашениям");
	НастройкиДопАналитикиПоДоговорам.Вставить("СделкаВДоговор",     АналитикаВзаиморасчетов = "ПоСделкам");
	НастройкиДопАналитикиПоДоговорам.Вставить("ДоговорВДоговор",    АналитикаВзаиморасчетов = "БезРазделения");
КонецПроцедуры
Процедура ПолучитьПараметрыДоговораПоЗаказу(Заказ, ТипРасчетов, ВидДоговора, РасчетыВУсловныхЕдиницах, Инвертировать = Ложь)
	Если ЗначениеЗаполнено(Заказ) Тогда
		ТипЗаказа = ТипЗнч(Заказ);
		
		Если ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			ВидДоговора = ?(ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком, "СКомитентом", "СКомиссионером");
		КонецЕсли;
		
		Соглашение = Неопределено;
		Если Заказ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено Тогда
			Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Соглашение");
			
			// Для продолжения анализа операции, необходимо определить вид договора
			Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
				ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(Заказ, Соглашение, Неопределено);
			КонецЕсли;
		КонецЕсли;
		
		// Для продолжения анализа операции, необходимо определить вид договора
		Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
			ВидДоговора = ?(ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком, "СПоставщиком", "СПокупателем");
		КонецЕсли;
		
		Если ВидДоговора = "СКомитентом" ИЛИ ВидДоговора = "СКомиссионером" Тогда
			// Договора по комиссии выгружаются без разделения по сделкам и заказам и всегда не в у.е.
			РасчетыВУсловныхЕдиницах = Ложь;
		Иначе
			Если ЗначениеЗаполнено(Соглашение) Тогда
				РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
			ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗаказа = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "Валюта,ВалютаВзаиморасчетов");
				РасчетыВУсловныхЕдиницах = ДанныеЗаказа.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеЗаказа.Валюта <> ДанныеЗаказа.ВалютаВзаиморасчетов;
			Иначе
				РасчетыВУсловныхЕдиницах = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РасчетыВУсловныхЕдиницах = Ложь;
		ВидДоговора = ?(ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком, "СПоставщиком", "СПокупателем");
	КонецЕсли;
	
	Если Инвертировать Тогда
		Если ВидДоговора = "СПоставщиком" Тогда
			ВидДоговора = "СПокупателем";
		ИначеЕсли ВидДоговора = "СПокупателем" Тогда
			ВидДоговора = "СПоставщиком";
		КонецЕсли;
		
		Если ВидДоговора = "СКомитентом" Тогда
			ВидДоговора = "СКомиссионером";
		ИначеЕсли ВидДоговора = "СКомиссионером" Тогда
			ВидДоговора = "СКомитентом";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ПолучитьРеквизитыКассовойСменыНаДату(Объект, ДатаВремя)
	КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка КАК КассоваяСмена,
	|	КассоваяСмена.Статус КАК СтатусКассовойСмены,
	|	КассоваяСмена.СтатусРегламентныхОпераций КАК СтатусРегламентныхОпераций,
	|	КассоваяСмена.Организация КАК Организация,
	|	КассоваяСмена.КассаККМ КАК КассаККМ,
	|	КассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство,
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И (КассоваяСмена.КассаККМ = &КассаККМ
	|				И &КассаККМ <> НЕОПРЕДЕЛЕНО
	|			ИЛИ КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство
	|				И &ФискальноеУстройство <> НЕОПРЕДЕЛЕНО)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ДатаВремя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатуса УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ",             КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
	
	Запрос.УстановитьПараметр("ДатаВремя",            ДатаВремя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НомерКассовойСмены");
	СтруктураРеквизитов.Вставить("КассоваяСмена");
	СтруктураРеквизитов.Вставить("СтатусКассовойСмены");
	СтруктураРеквизитов.Вставить("СтатусРегламентныхОпераций");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("ФискальноеУстройство");
	СтруктураРеквизитов.Вставить("СменаОткрыта", Ложь);
	СтруктураРеквизитов.Вставить("ДатаИзмененияСтатуса");
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		
	КонецЕсли;
		
	Возврат СтруктураРеквизитов;
КонецФункции
Функция ПолучитьТЗДопСведенияБулево(КомпонентыОбмена)
	ТЗДопСведенияБулево = КомпонентыОбмена.ПараметрыКонвертации.ТЗДопСведенияБулево;
	Если ТЗДопСведенияБулево = Неопределено Тогда
		
		ТЗДопСведенияБулево = Новый ТаблицаЗначений;
		ТЗДопСведенияБулево.Колонки.Добавить("ИмяПредопределенныхДанных", Новый ОписаниеТипов("Строка"));
		ТЗДопСведенияБулево.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
		               |	ДополнительныеРеквизитыИСведения.НаборСвойств.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		               |	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
		               |ИЗ
		               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		               |ГДЕ
		               |	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
		               |	И НЕ ДополнительныеРеквизитыИСведения.НаборСвойств.ИмяПредопределенныхДанных = """"";
	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
				 СтрокаДопСведения = ТЗДопСведенияБулево.Добавить();
				 ЗаполнитьЗначенияСвойств(СтрокаДопСведения, Выборка);
			КонецЕсли;
		КонецЦикла;
		
		КомпонентыОбмена.ПараметрыКонвертации.ТЗДопСведенияБулево = ТЗДопСведенияБулево;
		
	КонецЕсли;	
	
	Возврат ТЗДопСведенияБулево;
КонецФункции
Процедура ПослеКонвертацииУТКАУП(КомпонентыОбмена)
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			
			СозданныеПриВыгрузкеОбъекты = КомпонентыОбмена.ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты;
			Если СозданныеПриВыгрузкеОбъекты.Количество() > 0 Тогда
				
				УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
				НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелКорреспондента, "НомерОтправленного") + 1;
				
				ВыборкаИзменений = ОбменДаннымиСервер.ВыбратьИзменения(
					УзелКорреспондента,
					НомерОтправленного,
					КомпонентыОбмена.ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты);
				
				Пока ВыборкаИзменений.Следующий() Цикл
					
					Данные = ВыборкаИзменений.Получить();
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Данные);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
	
			ПараметрыПослеЗагрузкиДанных = ОбменДаннымиУТ.ПараметрыПослеЗагрузкиДанных();
	
			Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
				ПараметрыПослеЗагрузкиДанных.ПроверятьНаИспользованиеДоговоров = Ложь;
			КонецЕсли;
	
			ОбменДаннымиУТ.ПослеЗагрузкиДанных(ПараметрыПослеЗагрузкиДанных);
		
			// Установка признака применения льготных ставок НДС у контрагентов.
			ОбработатьПоставщиковСЛьготнойСтавкойНДС(КомпонентыОбмена.ПараметрыКонвертации.ПоставщикиЛьготнаяСтавкаНДС);
	
			Если Не ЭтоУТ() Тогда
				ВыполнитьПроведениеДокументовВводаОстатков(КомпонентыОбмена);
			КонецЕсли;
			
			ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
			ОбработатьЗагруженныеСтатьиДДСИХозОперации(КомпонентыОбмена);
			ОбработатьСФПолученныеПоЗагруженнымАО(КомпонентыОбмена);
			ОтложеннаяОбработка_ЗаполнениеКассовыхСмен(КомпонентыОбмена);
			ОтложеннаяОбработка_ЗаполнитьКлассификаторТНВЭД(КомпонентыОбмена);
			ОтложеннаяОбработка_ЗаполнитьВозвратыПС(КомпонентыОбмена);
	
		КонецЕсли;
	
	ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			
			СозданныеПриВыгрузкеОбъекты = КомпонентыОбмена.ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты;
			Если СозданныеПриВыгрузкеОбъекты.Количество() > 0 Тогда
				
				УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
				НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелКорреспондента, "НомерОтправленного") + 1;
				
				ВыборкаИзменений = ОбменДаннымиСервер.ВыбратьИзменения(
					УзелКорреспондента,
					НомерОтправленного,
					КомпонентыОбмена.ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты);
				
				Пока ВыборкаИзменений.Следующий() Цикл
					
					Данные = ВыборкаИзменений.Получить();
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Данные);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПослеМержевания_ПБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	// Тип платежного документа.
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ТипПлатежногоДокумента) Тогда
		ДанныеДляЗаписиВИБ.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
	КонецЕсли;
	
	// Пересчет суммы конвертации.
	Если ДанныеДляЗаписиВИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		Если ДанныеДляЗаписиВИБ.КурсКонвертации <> 0 И ДанныеДляЗаписиВИБ.СуммаДокумента <> 0 Тогда
			Если ДанныеДляЗаписиВИБ.ВалютаКонвертации = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				ДанныеДляЗаписиВИБ.СуммаКонвертации = ДанныеДляЗаписиВИБ.СуммаДокумента * ДанныеДляЗаписиВИБ.КурсКонвертации;
			Иначе
				ДанныеДляЗаписиВИБ.СуммаКонвертации = ДанныеДляЗаписиВИБ.СуммаДокумента / ДанныеДляЗаписиВИБ.КурсКонвертации;
			КонецЕсли;
		Иначе
			ДанныеДляЗаписиВИБ.СуммаКонвертации = 0;
		КонецЕсли;
	
	КонецЕсли;
		
	// Расшифровка платежа. Статья доходов и подразделение.
	Если ДанныеДляЗаписиВИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
		ЗаполнитьПодразделениеВРасшифровкеПлатежа(ДанныеДляЗаписиВИБ, КомпонентыОбмена);
		
		Для Каждого СтрокаРП Из ДанныеДляЗаписиВИБ.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРП.СтатьяДоходов) Тогда
				СтрокаРП.СтатьяДоходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеАктивы;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	// Расшифровка платежа. Статья доходов и подразделение.
	Если ДанныеДляЗаписиВИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
		ЗаполнитьПодразделениеВРасшифровкеПлатежа(ДанныеДляЗаписиВИБ, КомпонентыОбмена);
		
		Для Каждого СтрокаРП Из ДанныеДляЗаписиВИБ.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРП.СтатьяДоходов) Тогда
				СтрокаРП.СтатьяДоходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеАктивы;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПослеМержевания_РКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	// Расшифровка платежа. Статья расходов и подразделение.
	Если ДанныеДляЗаписиВИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		
		ЗаполнитьПодразделениеВРасшифровкеПлатежа(ДанныеДляЗаписиВИБ, КомпонентыОбмена);
		
		Для Каждого СтрокаРП Из ДанныеДляЗаписиВИБ.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРП.СтатьяРасходов) Тогда
				СтрокаРП.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПослеМержевания_СБДС(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	// Тип платежного документа.
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ТипПлатежногоДокумента) Тогда
		ДанныеДляЗаписиВИБ.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
	КонецЕсли;
	
	// Очередность платежа.
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ОчередностьПлатежа) Тогда
		ДанныеДляЗаписиВИБ.ОчередностьПлатежа = 5;
	КонецЕсли;
	
	// Расшифровка платежа. Статья расходов и подразделение.
	Если ДанныеДляЗаписиВИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ДанныеДляЗаписиВИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ЗаполнитьПодразделениеВРасшифровкеПлатежа(ДанныеДляЗаписиВИБ, КомпонентыОбмена);
		
		Для Каждого СтрокаРП Из ДанныеДляЗаписиВИБ.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРП.СтатьяРасходов) Тогда
				СтрокаРП.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры
Функция ПравилаЗаполненияОстатковРасчетов(ЗаполнятьДоговор)
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма",                "Сумма");
	ПравилаЗаполнения.Вставить("СуммаРегл",            "СуммаРегл");
	ПравилаЗаполнения.Вставить("Контрагент",           "Контрагент");
	ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	
	Если ЗаполнятьДоговор Тогда
		ПравилаЗаполнения.Вставить("Договор", "ОбъектРасчетов");
	КонецЕсли;
	
	Возврат ПравилаЗаполнения;
КонецФункции
Функция ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ)
	Если ДанныеИБ = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		НомерСчета = Прав(СокрЛП(ПолученныеДанные.НомерСчета), 4);
		Если  ЗначениеЗаполнено(ПолученныеДанные.Банк) Тогда
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 в %2 (%3).'"), НомерСчета, ПолученныеДанные.Банк,
						Строка(ПолученныеДанные.ВалютаДенежныхСредств)); 
		Иначе
			СтрокаНаименования = НомерСчета + "(" + Строка(ПолученныеДанные.ВалютаДенежныхСредств) + ")"; 
		КонецЕсли;
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
	
		ПолученныеДанные.Наименование = СтрокаНаименования;
	Иначе
		ПолученныеДанные.Наименование = ДанныеИБ.Наименование;
	КонецЕсли;
КонецФункции
Процедура ПроверкаЗаполненияРеквизитовОбъектаИБ(ОбъектДанных, КомпонентыОбмена, ИспользованиеПКО, СинонимыРеквизитов = Неопределено, ДополнительноПроверяемыеРеквизиты = Неопределено)
	Возврат;
	
	Если ТипЗнч(ОбъектДанных) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СинонимыРеквизитов = Неопределено Тогда
		СинонимыРеквизитов = Новый Соответствие;
	КонецЕсли;
	
	Если ДополнительноПроверяемыеРеквизиты = Неопределено Тогда
		ДополнительноПроверяемыеРеквизиты = Новый Структура;
	КонецЕсли;
	
	ПроверяемыеСтандартныеРеквизиты = Новый Структура;
	
	ПроверяемыеСтандартныеРеквизиты.Вставить("Справочники", Новый Массив);
	ПроверяемыеСтандартныеРеквизиты["Справочники"].Добавить("Код");
	ПроверяемыеСтандартныеРеквизиты["Справочники"].Добавить("Наименование");
	ПроверяемыеСтандартныеРеквизиты["Справочники"].Добавить("Владелец");
	
	ПроверяемыеСтандартныеРеквизиты.Вставить("Документы", Новый Массив);
	ПроверяемыеСтандартныеРеквизиты["Документы"].Добавить("Номер");
	ПроверяемыеСтандартныеРеквизиты["Документы"].Добавить("Дата");
	
	ПроверяемыеСтандартныеРеквизиты.Вставить("ПланыВидовХарактеристик", Новый Массив);
	ПроверяемыеСтандартныеРеквизиты["ПланыВидовХарактеристик"].Добавить("Код");
	ПроверяемыеСтандартныеРеквизиты["ПланыВидовХарактеристик"].Добавить("Наименование");
	
	ПроверяемыеСтандартныеРеквизиты.Вставить("РегистрыСведений", Новый Массив);
	ПроверяемыеСтандартныеРеквизиты["РегистрыСведений"].Добавить("Период");
	ПроверяемыеСтандартныеРеквизиты["РегистрыСведений"].Добавить("Регистратор");
	
	МД = ОбъектДанных.Метаданные();
	ВидОбъекта = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МД);
	
	РеквизитыОбъекта            = МД.Реквизиты;
	СтандартныеРеквизитыОбъекта = МД.СтандартныеРеквизиты;
	
	ПроверяемыеСтандартныеРеквизитыОбъекта = Неопределено;
	Если Не ПроверяемыеСтандартныеРеквизиты.Свойство(ВидОбъекта, ПроверяемыеСтандартныеРеквизитыОбъекта) Тогда
		ПроверяемыеСтандартныеРеквизитыОбъекта = Новый Массив;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ИспользованиеПКО Цикл
		
		Если Не КлючЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
			
		ТекстОшибки    = "";
		ТекПКО         = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, КлючЗначение.Ключ);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип(КомпонентыОбмена.XMLСхема, ТекПКО.ОбъектФормата);
		
		ОбязательныеСвойстваФормата = Новый Массив;
		
		Для Каждого ТекСвойство Из ТипОбъектаXDTO.Свойства Цикл
			
			Если ТекСвойство.Имя = "КлючевыеСвойства" Или ТекСвойство.Имя = "ОбщиеДанные" Тогда
				
				Для Каждого КлючСвойство Из ТекСвойство.Тип.Свойства Цикл
					Если КлючСвойство.НижняяГраница > 0 Тогда
						ОбязательныеСвойстваФормата.Добавить(КлючСвойство.Имя);
					КонецЕсли
				КонецЦикла;
				
			ИначеЕсли ТекСвойство.НижняяГраница > 0 Тогда
				ОбязательныеСвойстваФормата.Добавить(ТекСвойство.Имя);
			КонецЕсли
			
		КонецЦикла;
		
		//Выполняем проверку свойств формата обязательных к заполнению,
		//заполняемые не с помощью алгоритма конвертации,
		//и имеющие прямое сопостовление реквзита конфигурации и свойства формата.
		//Дополнительно вызывается проверка реквизитов, которые переданны отдельно
		//в структуре ДополнительноПроверяемыеРеквизиты 
		Для Каждого ТекПКС Из ТекПКО.Свойства Цикл
			
			Если (Не ТекПКС.ИспользуетсяАлгоритмКонвертации
				И ЗначениеЗаполнено(ТекПКС.СвойствоКонфигурации)
				И СтрНайти(ТекПКС.СвойствоКонфигурации, ".") = 0
				И ОбязательныеСвойстваФормата.Найти(ТекПКС.СвойствоФормата) <> Неопределено)
				Или ДополнительноПроверяемыеРеквизиты.Свойство(ТекПКС.СвойствоКонфигурации) Тогда
				
				Если (ПроверяемыеСтандартныеРеквизитыОбъекта.Найти(ТекПКС.СвойствоКонфигурации) <> Неопределено
						Или ОбщегоНазначения.ЭтоСтандартныйРеквизит(СтандартныеРеквизитыОбъекта, ТекПКС.СвойствоКонфигурации))
					И Не ЗначениеЗаполнено(ОбъектДанных[ТекПКС.СвойствоКонфигурации]) Тогда
					
					МДРеквизиты = СтандартныеРеквизитыОбъекта;
							
				ИначеЕсли РеквизитыОбъекта.Найти(ТекПКС.СвойствоКонфигурации) <> Неопределено
					И (РеквизитыОбъекта[ТекПКС.СвойствоКонфигурации].ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку
						Или ДополнительноПроверяемыеРеквизиты.Свойство(ТекПКС.СвойствоКонфигурации))
					И Не ЗначениеЗаполнено(ОбъектДанных[ТекПКС.СвойствоКонфигурации]) Тогда
					
					МДРеквизиты = РеквизитыОбъекта;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				ПредставлениеРеквизита = МДРеквизиты[ТекПКС.СвойствоКонфигурации].Синоним;
				
				Если Не ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда 
					ПредставлениеРеквизита = МДРеквизиты[ТекПКС.СвойствоКонфигурации].Имя;
				КонецЕсли;
				
				ТекстОшибки = ТекстОшибки + Символы.ПС + "- "
					+ ?(СинонимыРеквизитов[ТекПКС.СвойствоКонфигурации] <> Неопределено,
						СинонимыРеквизитов[ТекПКС.СвойствоКонфигурации], ПредставлениеРеквизита) + ",";
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ТекстОшибки = Сред(ТекстОшибки, 1, СтрДлина(ТекстОшибки)-1) + ".";
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В объекте %1 не заполнены реквизиты:'"), ОбъектДанных) + ТекстОшибки;
			ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(ТекстОшибки, КомпонентыОбмена, , ОбъектДанных.Ссылка);
			
			ИспользованиеПКО[КлючЗначение.Ключ] = Ложь;
			
			КомпонентыОбмена.ФлагОшибки = Истина;
			КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПТиУ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Партнер) Тогда
		ПолученныеДанные.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
	
		ДанныеИБСклад = ДанныеИБ.Склад;
	
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
			// Восстанавливаем склад из первоначального документа
			ДанныеИБ.Склад = ДанныеИБСклад;
		КонецЕсли;
	
		// Товары
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Склад");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("КоличествоУпаковок");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("Цена");
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("НомерГТД");
		МассивКлючевыхПолей.Добавить("СуммаСНДС");
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"Подразделение, СтатьяРасходов, АналитикаРасходов, ЗаказПоставщику, Сертификат, НомерПаспорта, СписатьНаРасходы");
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		Для Каждого Строка Из ДанныеИБ.Товары Цикл
			Строка.Склад = ДанныеИБ.Склад;
		КонецЦикла;
	
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.Номенклатура = ЭлементПоУмолчанию(КомпонентыОбмена, "НоменклатураУслуга");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ПТиУ_РасширенныеДанныеИБ(ДанныеИБ)
	Результат = Новый Структура;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	#Область ФрагментЗапросаШапкаДокумента
	// Данные шапки документа необходимы для вычисления курса и кратности
	// взаиморасчетов и для вычисления розничных цен товаров.
	ШапкаДокумента = 
		"ВЫБРАТЬ
		|	ДанныеШапкиДокумента.Склад.РозничныйВидЦены КАК РозничныйВидЦены,
		|	ДанныеШапкиДокумента.Валюта,
		|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов,
		|	ДанныеШапкиДокумента.Курс КАК КурсВзаиморасчетов,
		|	ДанныеШапкиДокумента.Кратность КАК КратностьВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ДанныеШапкиДокумента.ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасовПоВидуОперации
		|ПОМЕСТИТЬ ДанныеШапкиДокумента
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДанныеШапкиДокумента
		|ГДЕ
		|	ДанныеШапкиДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	
	#Область ФрагментЗапросаДанныеОперации
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		ДанныеОперации = "
		|ВЫБРАТЬ
		|	ДанныеШапкиДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ДанныеШапкиДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ДанныеОперации = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Док.Валюта
		|					ИЗ
		|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		|		ПО ДанныеШапкиДокумента.Валюта = КурсВалютыДокумента.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	#КонецОбласти
	
	#Область ФрагментЗапросаТоварыДокумента
	// Услуги всегда получаются из ТЧ Товары, а товары - в зависимости от признака расхождений.
	// Если нет расхождений - из ТЧ Товары, если есть - из ТЧ ТоварыПоДаннымПоставщика.
	ТоварыДокумента = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                                     КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура                                    КАК Номенклатура,
		|	Товары.Характеристика                                  КАК Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения                   КАК ЕдиницаИзмерения,
		|	Товары.Количество                                      КАК Количество,
		|	Товары.Сумма                                           КАК Сумма,
		|	ВЫБОР КОГДА Товары.Цена > 0
		|			И Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) < 0.01
		|		ТОГДА 0.01
		|		ИНАЧЕ Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
		|	КОНЕЦ                                                  КАК ЦенаЗаЕдиницу,
		|	Товары.Упаковка                                        КАК Упаковка,
		|	Товары.КоличествоУпаковок                              КАК КоличествоУпаковок,
		|	Товары.СтавкаНДС                                       КАК СтавкаНДС,
		|	Товары.СуммаНДС                                        КАК СуммаНДС,
		|	Товары.СтатьяРасходов                                  КАК СтатьяРасходов,
		|	Товары.НомерГТД.Код  								   КАК НомерГТД,
		|	Товары.НомерГТД.СтранаПроисхождения  		           КАК СтранаПроисхождения,
		|	Товары.СтатьяРасходов.КорреспондирующийСчет            КАК КорреспондирующийСчет,
		|	Товары.Ссылка.ВернутьМногооборотнуюТару                КАК ВернутьМногооборотнуюТару,
		|	Товары.Номенклатура.ТипНоменклатуры                    КАК ТипНоменклатуры
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга);
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаЦеныВРознице
	// Информация о розничных ценах по розничному виду цен, установленному для склада.
	ЦеныВРознице = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЦеныВРознице.Цена 
		|	/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|	* ВЫБОР
		|		КОГДА ДанныеШапкиДокумента.Валюта = &ВалютаРег И ДанныеШапкиДокумента.ВалютаВзаиморасчетов = &ВалютаРег
		|			ТОГДА ЕСТЬNULL(КурсыВалютВидовЦены.Курс, 1) / ЕСТЬNULL(КурсыВалютВидовЦены.Кратность, 1)
		|		КОГДА ДанныеШапкиДокумента.Валюта = &ВалютаРег ИЛИ ДанныеШапкиДокумента.ВалютаВзаиморасчетов = &ВалютаРег
		|			ТОГДА ЕСТЬNULL(КурсыВалютВидовЦены.Курс, 1) * ЕСТЬNULL(ДанныеШапкиДокумента.КратностьВзаиморасчетов, 1) / (ЕСТЬNULL(КурсыВалютВидовЦены.Кратность, 1) * ЕСТЬNULL(ДанныеШапкиДокумента.КурсВзаиморасчетов, 1))
		|		КОГДА ЕСТЬNULL(КурсыВалютДокументаЦБ.Кратность, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютДокументаЦБ.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютВидовЦены.Кратность, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютВидовЦены.Курс, 0) > 0
		|			ТОГДА КурсыВалютВидовЦены.Курс * КурсыВалютДокументаЦБ.Кратность / (КурсыВалютВидовЦены.Кратность * КурсыВалютДокументаЦБ.Курс)
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧИСЛО(15,2))      КАК Цена,
		|	ЦеныВРознице.Номенклатура   КАК Номенклатура,
		|	ЦеныВРознице.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ЦеныВРознице
		|ИЗ                                      
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ВидЦены В
		|					(ВЫБРАТЬ
		|						ДанныеШапкиДокумента.РозничныйВидЦены
		|					ИЗ
		|						ДанныеШапкиДокумента КАК ДанныеШапкиДокумента)
		|				И Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТоварыДокумента.Номенклатура
		|					ИЗ
		|						ТоварыДокумента КАК ТоварыДокумента)
		|				И Характеристика В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТоварыДокумента.Характеристика
		|					ИЗ
		|						ТоварыДокумента КАК ТоварыДокумента)) КАК ЦеныВРознице
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютВидовЦены
		|		ПО ЦеныВРознице.Валюта = КурсыВалютВидовЦены.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокументаЦБ
		|		ПО ДанныеШапкиДокумента.Валюта = КурсыВалютДокументаЦБ.Валюта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаТоварыДокументаСЦенамиРозницы
	ТоварыДокументаСЦенамиРозницы = "
		|ВЫБРАТЬ
		|	ТоварыДокумента.НомерСтрокиДокумента      КАК НомерСтрокиДокумента,
		|	ТоварыДокумента.Номенклатура              КАК Номенклатура,
		|	ТоварыДокумента.Характеристика            КАК Характеристика,
		|	ТоварыДокумента.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ТоварыДокумента.Количество                КАК Количество,
		|	ТоварыДокумента.Сумма                     КАК Сумма,
		|	ТоварыДокумента.ЦенаЗаЕдиницу             КАК Цена,
		|	ТоварыДокумента.Упаковка                  КАК Упаковка,
		|	ТоварыДокумента.КоличествоУпаковок        КАК КоличествоУпаковок,
		|	ТоварыДокумента.СтавкаНДС                 КАК СтавкаНДС,
		|	ТоварыДокумента.СуммаНДС                  КАК СуммаНДС,
		|	ТоварыДокумента.НомерГТД                  КАК НомерГТД,
		|	ТоварыДокумента.СтранаПроисхождения       КАК СтранаПроисхождения,
		|	ТоварыДокумента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ТоварыДокумента.ТипНоменклатуры           КАК ТипНоменклатуры,
		|
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныВРознице.Цена < 0.01
		|				ТОГДА 0.01
		|			ИНАЧЕ ВЫРАЗИТЬ(ЦеныВРознице.Цена КАК ЧИСЛО(15, 2))
		|		КОНЕЦ, 0)                             КАК ЦенаВРознице,
		|
		|	ТоварыДокумента.Количество 
		|	* ЕСТЬNULL(ЦеныВРознице.Цена, 0)		  КАК СуммаВРознице
		|
		|ПОМЕСТИТЬ ТоварыДокументаСЦенамиРозницы
		|ИЗ
		|	ТоварыДокумента КАК ТоварыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныВРознице КАК ЦеныВРознице
		|		ПО ТоварыДокумента.Номенклатура = ЦеныВРознице.Номенклатура
		|			И ТоварыДокумента.Характеристика = ЦеныВРознице.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	// В выборку попадает как товар, так и многооборотная тара (возвратная и не возвратная).
	#КонецОбласти
	#Область ФрагментЗапросаДанныеТаблицыТовары
	ДанныеТаблицыТовары = "
		|ВЫБРАТЬ
		|	ТоварыДокументаРозн.НомерСтрокиДокумента      КАК НомерСтрокиДокумента,
		|	ТоварыДокументаРозн.Номенклатура              КАК Номенклатура,
		|	ТоварыДокументаРозн.Характеристика            КАК Характеристика,
		|	ТоварыДокументаРозн.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ТоварыДокументаРозн.Количество                КАК Количество,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.СуммаВРознице КАК ЧИСЛО(15,2)) КАК СуммаВРознице,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.Сумма КАК ЧИСЛО(15,2))        КАК Сумма,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.Цена КАК ЧИСЛО(15,2))         КАК Цена,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.ЦенаВРознице КАК ЧИСЛО(15,2)) КАК ЦенаВРознице,
		|	ТоварыДокументаРозн.Упаковка                  КАК Упаковка,
		|	ТоварыДокументаРозн.КоличествоУпаковок        КАК КоличествоУпаковок,
		|	ТоварыДокументаРозн.СтавкаНДС                 КАК СтавкаНДС,
		|	ТоварыДокументаРозн.СуммаНДС                  КАК СуммаНДС,
		|	ТоварыДокументаРозн.НомерГТД                  КАК НомерГТД,
		|	ТоварыДокументаРозн.СтранаПроисхождения       КАК СтранаПроисхождения,
		|	ТоварыДокументаРозн.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ТоварыДокументаРозн.ТипНоменклатуры           КАК ТипНоменклатуры,
		|	ВЫБОР КОГДА ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|		И ТоварыДокументаРозн.ВернутьМногооборотнуюТару ТОГДА
		|		""ВозвратнаяТара""
		|	ИНАЧЕ
		|		ДанныеШапкиДокумента.ТипЗапасовПоВидуОперации
		|	КОНЕЦ                                         КАК ТипЗапасов
		|
		|ИЗ
		|	ТоварыДокументаСЦенамиРозницы КАК ТоварыДокументаРозн
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		ИЛИ ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыДокументаРозн.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаДанныеТаблицыУслуги
	// Работы и услуги.
	// Допрасходы - это услуги и работы со статьей расходов, распределяемых на себестоимость.
	// Обмен не учитывает расхождения при поступлении работ и услуг, поэтому данные получаем из ТЧ Товары.
	ДанныеТаблицыУслуги = "
		|ВЫБРАТЬ
		|	Товары.Номенклатура                                    КАК Номенклатура,
		|	Товары.Количество                                      КАК Количество,
		|	Товары.Сумма                                           КАК Сумма,
		|	ВЫБОР КОГДА Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) < 0.01
		|		ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 2)) 
		|	КОНЕЦ                                                  КАК Цена,
		|	Товары.СтавкаНДС                                       КАК СтавкаНДС,
		|	Товары.СуммаНДС                                        КАК СуммаНДС,
		|   Товары.СтатьяРасходов                                  КАК СтатьяЗатрат,
		|   Товары.Подразделение                                   КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Товары.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                  КАК ЭтоДопРасходы
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|		ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	ТекстЗапроса = ШапкаДокумента
		+ ДанныеОперации
		+ ТоварыДокумента
		+ ЦеныВРознице
		+ ТоварыДокументаСЦенамиРозницы
		+ ДанныеТаблицыТовары
		+ ДанныеТаблицыУслуги;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныВРознице.Упаковка",
		"ЦеныВРознице.Номенклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",    ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",      ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВалютаДок", ДанныеИБ.Валюта);
	Запрос.УстановитьПараметр("ВалютаРег", ВалютаРеглУчета);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОперации = РезультатыЗапроса[1].Выбрать();
	
	Результат.Вставить("КурсВзаиморасчетов",      1);
	Результат.Вставить("КратностьВзаиморасчетов", 1);
	
	Если ДанныеОперации.Следующий() Тогда
		Результат.КурсВзаиморасчетов      = ДанныеОперации.КурсВзаиморасчетов;
		Результат.КратностьВзаиморасчетов = ДанныеОперации.КратностьВзаиморасчетов;
	КонецЕсли;
	
	ТаблицаТовары = РезультатыЗапроса[5].Выгрузить();
	ТаблицаУслуги = РезультатыЗапроса[6].Выгрузить();
	
	// Счет расходов для услуг.
	ТаблицаУслуги.Колонки.Добавить("СчетЗатрат");
	ТаблицаУслуги.Колонки.Добавить("ПодразделениеЗатрат");
	Для Каждого СтрокаУслуги Из ТаблицаУслуги Цикл
		Если ЗначениеЗаполнено(СтрокаУслуги.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаУслуги.Подразделение);
			СтрокаУслуги.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаУслуги.СтатьяЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУслуги.СчетЗатрат = СчетУчетаПоСтатье(СтрокаУслуги.СтатьяЗатрат, ДанныеИБ.Организация, СтрокаУслуги.Подразделение);
	КонецЦикла;
	
	Результат.Вставить("Товары",    ТаблицаТовары);
	Результат.Вставить("Услуги",    ТаблицаУслуги);
	Результат.Вставить("Излишки",   Новый ТаблицаЗначений);
	Результат.Вставить("Недостачи", Новый ТаблицаЗначений);
	
	// РасшифровкаДопРасходов
	// Номенклатура, Количество, СтоимостьТоваров, Сумма, СуммаНДС, ДокументПоступления.
	РасшифровкаДопРасходов = ДоходыИРасходыСервер.ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров(ДанныеИБ.Ссылка);
	
	// Удаление строк с пустыми суммами из расшифровки.
	КоличествоСтрокДопРасходы = РасшифровкаДопРасходов.Количество();
	Для НомерСтроки = 1 По КоличествоСтрокДопРасходы Цикл
		Индекс = КоличествоСтрокДопРасходы - НомерСтроки;
		Если Окр(РасшифровкаДопРасходов[Индекс].Сумма,2) = 0 Тогда
			РасшифровкаДопРасходов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	
	// Данные ГТД при поступлении по импорту
	#Область ПоступлениеПоИмпорту
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДвиженияДокумента.Организация КАК Организация,
		|	ДвиженияДокумента.Поставщик КАК Поставщик,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Склад КАК Склад,
		|	ДвиженияДокумента.ВидЗапасов КАК ВидЗапасов,
		|	СУММА(ДвиженияДокумента.Количество) КАК Количество
		|ПОМЕСТИТЬ ДвиженияДокумента
		|ИЗ
		|	РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций КАК ДвиженияДокумента
		|ГДЕ
		|	ДвиженияДокумента.Регистратор = &Ссылка
		|	И ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияДокумента.Организация,
		|	ДвиженияДокумента.Поставщик,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Характеристика,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Склад,
		|	ДвиженияДокумента.ВидЗапасов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Характеристика,
		|	Номенклатура,
		|	ВидЗапасов,
		|	Поставщик,
		|	Склад,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиНеоформленныхТоваров.Организация,
		|	ОстаткиНеоформленныхТоваров.Поставщик,
		|	ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Склад КАК Склад,
		|	ОстаткиНеоформленныхТоваров.ВидЗапасов,
		|	ОстаткиНеоформленныхТоваров.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Остатки(&Дата, ) КАК ОстаткиНеоформленныхТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияДокумента КАК ДвиженияДокумента
		|		ПО ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Характеристика = ДвиженияДокумента.Характеристика
		|			И ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Номенклатура = ДвиженияДокумента.Номенклатура
		|			И ОстаткиНеоформленныхТоваров.ВидЗапасов = ДвиженияДокумента.ВидЗапасов
		|			И ОстаткиНеоформленныхТоваров.Поставщик = ДвиженияДокумента.Поставщик
		|			И ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Склад = ДвиженияДокумента.Склад
		|			И ОстаткиНеоформленныхТоваров.Организация = ДвиженияДокумента.Организация
		|ГДЕ
		|	ОстаткиНеоформленныхТоваров.КоличествоОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОформлениеГТД.Организация,
		|	ОформлениеГТД.Поставщик,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Склад КАК Склад,
		|	ОформлениеГТД.ВидЗапасов,
		|	СУММА(ОформлениеГТД.Количество) КАК Количество,
		|	ОформлениеГТД.Период КАК Период,
		|	ОформлениеГТД.НомерГТД.Код КАК НомерГТД,
		|	ОформлениеГТД.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций КАК ОформлениеГТД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияДокумента КАК ДвиженияДокумента
		|		ПО ОформлениеГТД.АналитикаУчетаНоменклатуры.Характеристика = ДвиженияДокумента.Характеристика
		|			И ОформлениеГТД.АналитикаУчетаНоменклатуры.Номенклатура = ДвиженияДокумента.Номенклатура
		|			И ОформлениеГТД.ВидЗапасов = ДвиженияДокумента.ВидЗапасов
		|			И ОформлениеГТД.Поставщик = ДвиженияДокумента.Поставщик
		|			И ОформлениеГТД.Организация = ДвиженияДокумента.Организация
		|ГДЕ
		|	ОформлениеГТД.МоментВремени > &Дата
		|	И ОформлениеГТД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОформлениеГТД.Организация,
		|	ОформлениеГТД.Поставщик,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Характеристика,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Склад,
		|	ОформлениеГТД.ВидЗапасов,
		|	ОформлениеГТД.Период,
		|	ОформлениеГТД.НомерГТД.Код,
		|	ОформлениеГТД.НомерГТД.СтранаПроисхождения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата",   ДанныеИБ.МоментВремени());
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТабТоварыДокумента = ТаблицаТовары.Скопировать();
		ТабТоварыДокумента.Колонки.Добавить("ЕстьНомерГТД", Новый ОписаниеТипов("Булево"));
		ТабТоварыДокумента.Колонки.Добавить("НетКоличества", Новый ОписаниеТипов("Булево"));
		
		ТабОстаткиНеоформленныхТоваров = РезультатыЗапроса[1].Выгрузить();
		ТабОстаткиНеоформленныхТоваров.Колонки.Добавить("ОстаткиЗакрыты", Новый ОписаниеТипов("Булево"));
	
		// Распределение номеров ГТД
		ВыборкаОформлениеГТДКРаспределению = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаОформлениеГТДКРаспределению.Следующий() Цикл
			
			КоличествоКРаспределению = ВыборкаОформлениеГТДКРаспределению.Количество;
			
			СтруктураОтбора = Новый Структура("Организация,Поставщик,Номенклатура,Характеристика,Склад,ВидЗапасов,ОстаткиЗакрыты");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаОформлениеГТДКРаспределению);
			СтруктураОтбора.ОстаткиЗакрыты = Ложь;
			
			ОстаткиНеоформленногоТовараЗакрыты = Истина;
			НеоформленныеТовары = ТабОстаткиНеоформленныхТоваров.НайтиСтроки(СтруктураОтбора);
			Для Каждого Строка Из НеоформленныеТовары Цикл
				
				КоличествоКСписанию = Мин(Строка.Количество, КоличествоКРаспределению);
				Строка.Количество = Строка.Количество - КоличествоКСписанию;
				КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКСписанию;
				
				Если Строка.Количество = 0 Тогда
					Строка.ОстаткиЗакрыты = Истина;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураОтбораСтрокДокумента = Новый Структура;
			СтруктураОтбораСтрокДокумента.Вставить("Номенклатура",		СтруктураОтбора.Номенклатура);
			СтруктураОтбораСтрокДокумента.Вставить("Характеристика",	СтруктураОтбора.Характеристика);
			СтруктураОтбораСтрокДокумента.Вставить("ЕстьНомерГТД",		Ложь);
			СтруктураОтбораСтрокДокумента.Вставить("НетКоличества",		Ложь);
			
			СтрокиДокумента = ТабТоварыДокумента.НайтиСтроки(СтруктураОтбораСтрокДокумента);
			
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоКСписанию = Мин(СтрокаДокумента.Количество, КоличествоКРаспределению);
				КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКСписанию;
				
				СуммаКСписанию = ?(СтрокаДокумента.Количество <= КоличествоКСписанию,
				СтрокаДокумента.Сумма, Окр(СтрокаДокумента.Сумма / СтрокаДокумента.Количество * КоличествоКСписанию));
				
				СтрокаДокумента.Количество = СтрокаДокумента.Количество - КоличествоКСписанию;
				СтрокаДокумента.Сумма = СтрокаДокумента.Сумма - СуммаКСписанию;
				
				СтрокаДокументаГТД = ТабТоварыДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокументаГТД, СтрокаДокумента);
				
				СтрокаДокументаГТД.Количество          = КоличествоКСписанию;
				СтрокаДокументаГТД.Сумма               = СуммаКСписанию;
				СтрокаДокументаГТД.СуммаВРознице       = КоличествоКСписанию * СтрокаДокументаГТД.ЦенаВРознице;
				СтрокаДокументаГТД.НомерГТД            = ВыборкаОформлениеГТДКРаспределению.НомерГТД;
				СтрокаДокументаГТД.СтранаПроисхождения = ВыборкаОформлениеГТДКРаспределению.СтранаПроисхождения;
				СтрокаДокументаГТД.ЕстьНомерГТД        = Истина;
				
				Если СтрокаДокумента.Количество = 0 Тогда
					СтрокаДокумента.НетКоличества = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
		СтруктураОтбора = Новый Структура("НетКоличества", Ложь);
		ТабТовары = ТабТоварыДокумента.Скопировать(СтруктураОтбора);
		ТабТовары.Сортировать("НомерСтрокиДокумента, НомерГТД");
		
		// Переопределение таблицы товаров
		Результат.Вставить("Товары", ТабТовары);
	КонецЕсли;
	#КонецОбласти
	
	Возврат Результат;
КонецФункции
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	Результат = Ложь;
	
	ПространствоИмен = КомпонентыОбмена.XMLСхема;
	
	Если ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяСвойства, ПространствоИмен)) <> Неопределено Тогда
		Результат = Истина;
	Иначе
		МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяСвойства);
		
		Если МассивСтрок.Количество() > 1 Тогда
			ИмяОбъекта = МассивСтрок[0] + "." + МассивСтрок[1];
			ТипФабрики = ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяОбъекта, ПространствоИмен));
			Если ТипФабрики <> Неопределено Тогда
				Для Сч = 2 По МассивСтрок.Количество() - 1 Цикл
					ИмяТекОбъекта = МассивСтрок[Сч];
					Если ТипЗнч(ТипФабрики) = Тип("СвойствоXDTO") Тогда
						ТипФабрики = ТипФабрики.Тип.Свойства.Получить(ИмяТекОбъекта);
					Иначе
						ТипФабрики = ТипФабрики.Свойства.Получить(ИмяТекОбъекта);
					КонецЕсли;
					Если ТипФабрики = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли
				КонецЦикла;
				Результат = ТипФабрики <> Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура СинхронизироватьДанныеПартнераСДаннымиКонтрагента(ПартнерОбъект, Контрагент, КомпонентыОбмена)
	Если ПартнерОбъект.ЭтоНовый() Тогда
		ПартнерОбъект.ДатаРегистрации = Дата('19800101');
		ПартнерОбъект.Клиент          = Истина;
		ПартнерОбъект.Поставщик       = Истина;
		ПартнерОбъект.ПрочиеОтношения = Истина;
		ПартнерОбъект.ГруппаДоступа   = ЭлементПоУмолчанию(КомпонентыОбмена, "ГруппаДоступаПартнера");
		
		ПартнерОбъект.УстановитьНовыйКод(ОбменДаннымиСервер.ПрефиксИнформационнойБазы());
	КонецЕсли;
	
	// Синхронизация свойств контрагента и партнера.
	Если ПартнерОбъект.Ссылка <> Справочники.Партнеры.НеизвестныйПартнер Тогда
		
		ПартнерОбъект.Наименование        = Контрагент.Наименование;
		ПартнерОбъект.НаименованиеПолное  = Контрагент.НаименованиеПолное;
		
		Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		
		ПартнерОбъект.КонтактнаяИнформация.Очистить();
		Для Каждого СтрокаКИКонтрагента Из Контрагент.КонтактнаяИнформация Цикл
			
			Если СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			ИначеЕсли СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			ИначеЕсли СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Иначе
				Продолжить;
			КонецЕсли;
			
			СтрокаКиПартнера = ПартнерОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКИПартнера, СтрокаКиКонтрагента);
			СтрокаКИПартнера.Вид = ВидКиПартнера;
			
		КонецЦикла;
		
		БылаПометкаУдаления = ПартнерОбъект.ПометкаУдаления;
		ПартнерОбъект.ПометкаУдаления = Ложь;
		
		ПартнерОбъект.ОбменДанными.Загрузка = Истина;
		ПартнерОбъект.Записать();
		
		Если БылаПометкаУдаления Тогда
			ПараметрыКлюча = Новый Структура("Партнер", ПартнерОбъект.Ссылка);
			Справочники.КлючиАналитикиУчетаПоПартнерам.УстановитьПометкуУдаления(ПараметрыКлюча, Ложь);
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(ПартнерОбъект.Ссылка);
		
	КонецЕсли;
КонецПроцедуры
Функция СкладДляВыгрузки(СкладИсходный, ПараметрыКонвертации, ПроверятьНаГруппу = Ложь)
	Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = ЛОЖЬ Тогда
		// отправляем пустой склад
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		Если ПроверятьНаГруппу И СкладИсходный.ЭтоГруппа Тогда
			Возврат Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СкладДляЗагрузки(СкладИсходный, ПараметрыКонвертации)
	Если ЗначениеЗаполнено(ПараметрыКонвертации.СкладПоУмолчанию) И НЕ ЗначениеЗаполнено(СкладИсходный) Тогда
		// Относим хозоперацию на склад по умолчанию
		Возврат ПараметрыКонвертации.СкладПоУмолчанию;
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СчетУчетаПоСтатье(Статья, Организация = Неопределено, Подразделение = Неопределено, СчетУчета = Неопределено)
	Если Не ЗначениеЗаполнено(Статья) Тогда
		Возврат "";
	КонецЕсли;
	
	
	Если ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов")
		Или ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		
		Если ЭтоУТ() Тогда
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "КорреспондирующийСчет");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
КонецФункции
Функция СчетУчетаРасчетовПрочихОперацийДДС(СтруктураПараметров)
	СтатьяДоходовРасходов = Неопределено;
	СтруктураПараметров.Свойство("СтатьяДоходовРасходов", СтатьяДоходовРасходов);
	
	Организация = Неопределено;
	СтруктураПараметров.Свойство("Организация", Организация);
	
	Подразделение = Неопределено;
	СтруктураПараметров.Свойство("Подразделение", Подразделение);
	
	Если ЗначениеЗаполнено(СтатьяДоходовРасходов) Тогда
		
		Возврат СчетУчетаПоСтатье(СтатьяДоходовРасходов, Организация, Подразделение, "");
	КонецЕсли;
	
	СтатьяДДС = Неопределено;
	СтруктураПараметров.Свойство("СтатьяДДС", СтатьяДДС);
	
	Если ЭтоУТ() И ЗначениеЗаполнено(СтатьяДДС) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДДС, "КорреспондирующийСчет");
	КонецЕсли;
	
	Возврат "";
КонецФункции
Функция ТаблицаСБДСПолучитьИзПараметров(КомпонентыОбмена)
	ТаблицаСБДС = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаСБДСДляСозданияКонтрагентов;
	Если ТаблицаСБДС = Неопределено Тогда
		ТаблицаСБДС = Новый ТаблицаЗначений;
		ТаблицаСБДС.Колонки.Добавить("ДокументСсылка");
		ТаблицаСБДС.Колонки.Добавить("ФизическоеЛицо");
		ТаблицаСБДС.Колонки.Добавить("БанковскийСчет");
		КомпонентыОбмена.ПараметрыКонвертации.ТаблицаСБДСДляСозданияКонтрагентов = ТаблицаСБДС;
	КонецЕсли;
	
	Возврат ТаблицаСБДС;
КонецФункции
Процедура ТаблицаУслугЗаполнитьПринципала(КомпонентыОбмена, ТабУслуги)
	ТабУслуги.Колонки.Добавить("Принципал");
	Для Каждого СтрокаУслуги Из ТабУслуги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаУслуги.ПринципалСсылка) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаУслуги.ПринципалСсылка) = Тип("СправочникСсылка.Организации") Тогда
			СтрокаУслуги.Принципал = КонтрагентИзОрганизации(СтрокаУслуги.ПринципалСсылка, КомпонентыОбмена);
		ИначеЕсли ТипЗнч(СтрокаУслуги.ПринципалСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			СтрокаУслуги.Принципал = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(СтрокаУслуги.ПринципалСсылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция УправленческаяОрганизация()
	Возврат ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация");
КонецФункции
Процедура УстановитьИспользованиеПКО(ИспользованиеПКО, Режим)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО[Правило.Ключ] = Режим;
	КонецЦикла;
КонецПроцедуры
Функция ШаблонМагнитнойКарты(ПараметрыШаблона, СоздатьЭлемент)
	Если ТипЗнч(ПараметрыШаблона) = Тип("Структура") Тогда
		СтруктураШаблонов = Новый Структура("Дорожка1, Дорожка2, Дорожка3");
		СтруктураДорожки = Новый Структура("ДоступностьДорожки, Префикс, Суффикс, ДлинаКода, РазделительБлоков, ПоляДорожки");
		СтруктураПолейДорожки = Новый Структура("Поле, НомерБлока, НомерПервогоСимволаПоля, ДлинаПоля");
		Для Каждого КлючИЗначение Из СтруктураШаблонов Цикл
			Если ПараметрыШаблона.Свойство(КлючИЗначение.Ключ)
				И ТипЗнч(ПараметрыШаблона[КлючИЗначение.Ключ]) = Тип("Структура") Тогда // ДорожкаN
				Для Каждого КлючИЗначение1 Из СтруктураДорожки Цикл
					Если ПараметрыШаблона[КлючИЗначение.Ключ].Свойство(КлючИЗначение1.Ключ) Тогда
						Если КлючИЗначение1.Ключ = "ПоляДорожки" Тогда
							Если ТипЗнч(ПараметрыШаблона[КлючИЗначение.Ключ][КлючИЗначение1.Ключ]) = Тип("Массив") Тогда
								Для Каждого ПолеДорожки Из ПараметрыШаблона[КлючИЗначение.Ключ][КлючИЗначение1.Ключ] Цикл
									Если ТипЗнч(ПолеДорожки) = Тип("Структура") Тогда
										Для Каждого КлючИЗначение2 Из СтруктураПолейДорожки Цикл
											Если НЕ ПолеДорожки.Свойство(КлючИЗначение2.Ключ) Тогда
												Возврат Неопределено;
											КонецЕсли;
										КонецЦикла;
									Иначе
										Возврат Неопределено;
									КонецЕсли;
								КонецЦикла;
							Иначе
								Возврат Неопределено;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Возврат Неопределено;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ШаблоныМагнитныхКарт.Ссылка
			|ИЗ
			|	Справочник.ШаблоныМагнитныхКарт КАК ШаблоныМагнитныхКарт
			|ГДЕ
			|	ШаблоныМагнитныхКарт.ДоступностьДорожки1 = &ДоступностьДорожки1
			|	И ШаблоныМагнитныхКарт.ДоступностьДорожки2 = &ДоступностьДорожки2
			|	И ШаблоныМагнитныхКарт.ДоступностьДорожки3 = &ДоступностьДорожки3
			|	И ШаблоныМагнитныхКарт.ДлинаКода1 = &ДлинаКода1
			|	И ШаблоныМагнитныхКарт.ДлинаКода2 = &ДлинаКода2
			|	И ШаблоныМагнитныхКарт.ДлинаКода3 = &ДлинаКода3
			|	И ШаблоныМагнитныхКарт.Префикс1 ПОДОБНО &Префикс1
			|	И ШаблоныМагнитныхКарт.Префикс2 ПОДОБНО &Префикс2
			|	И ШаблоныМагнитныхКарт.Префикс3 ПОДОБНО &Префикс3
			|	И ШаблоныМагнитныхКарт.Суффикс1 ПОДОБНО &Суффикс1
			|	И ШаблоныМагнитныхКарт.Суффикс2 ПОДОБНО &Суффикс2
			|	И ШаблоныМагнитныхКарт.Суффикс3 ПОДОБНО &Суффикс3
			|	И ШаблоныМагнитныхКарт.РазделительБлоков1 = &РазделительБлоков1
			|	И ШаблоныМагнитныхКарт.РазделительБлоков2 = &РазделительБлоков2
			|	И ШаблоныМагнитныхКарт.РазделительБлоков3 = &РазделительБлоков3");
		Запрос.УстановитьПараметр("ДлинаКода1", Число(ПараметрыШаблона.Дорожка1.ДлинаКода));
		Запрос.УстановитьПараметр("ДлинаКода2", Число(ПараметрыШаблона.Дорожка2.ДлинаКода));
		Запрос.УстановитьПараметр("ДлинаКода3", Число(ПараметрыШаблона.Дорожка3.ДлинаКода));
		Запрос.УстановитьПараметр("ДоступностьДорожки1", ПараметрыШаблона.Дорожка1.ДоступностьДорожки);
		Запрос.УстановитьПараметр("ДоступностьДорожки2", ПараметрыШаблона.Дорожка2.ДоступностьДорожки);
		Запрос.УстановитьПараметр("ДоступностьДорожки3", ПараметрыШаблона.Дорожка3.ДоступностьДорожки);
		Запрос.УстановитьПараметр("Префикс1", ПараметрыШаблона.Дорожка1.Префикс + "%");
		Запрос.УстановитьПараметр("Префикс2", ПараметрыШаблона.Дорожка2.Префикс + "%");
		Запрос.УстановитьПараметр("Префикс3", ПараметрыШаблона.Дорожка3.Префикс + "%");
		Запрос.УстановитьПараметр("Суффикс1", ПараметрыШаблона.Дорожка1.Суффикс + "%");
		Запрос.УстановитьПараметр("Суффикс2", ПараметрыШаблона.Дорожка2.Суффикс + "%");
		Запрос.УстановитьПараметр("Суффикс3", ПараметрыШаблона.Дорожка3.Суффикс + "%");
		Запрос.УстановитьПараметр("РазделительБлоков1", ПараметрыШаблона.Дорожка1.РазделительБлоков);
		Запрос.УстановитьПараметр("РазделительБлоков2", ПараметрыШаблона.Дорожка2.РазделительБлоков);
		Запрос.УстановитьПараметр("РазделительБлоков3", ПараметрыШаблона.Дорожка3.РазделительБлоков);
		Выборка = Запрос.Выполнить().Выбрать();
		
		СписокШаблонов = Новый Массив;
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		ИначеЕсли СоздатьЭлемент Тогда
			ШаблонКарты = Справочники.ШаблоныМагнитныхКарт.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ШаблонКарты, Запрос.Параметры);
			Для Сч = 1 По 3 Цикл
				ПоляДорожки = ПараметрыШаблона["Дорожка" + Сч]["ПоляДорожки"];
				Для Каждого ПолеДорожки Из ПоляДорожки Цикл
					СтрокаПоля = ШаблонКарты["ПоляДорожки" + Сч].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоля, ПолеДорожки);
				КонецЦикла;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблонКарты);
			Возврат ШаблонКарты.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Функция ЭлементПоУмолчанию(КомпонентыОбмена, ВидЭлемента)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
		
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ЭлементыПоУмолчанию) Тогда
		ПараметрыКонвертации.ЭлементыПоУмолчанию = Новый Структура;
	КонецЕсли;
	
	ЗначениеЭлемента = Неопределено;
	Если ПараметрыКонвертации.ЭлементыПоУмолчанию.Свойство(ВидЭлемента, ЗначениеЭлемента) Тогда
		Возврат ЗначениеЭлемента;
	КонецЕсли;
	
	Если ВидЭлемента = "ГруппаДоступаНоменклатуры" Тогда
	
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Группа доступа по умолчанию'");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ГруппыДоступаНоменклатуры.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ГруппыДоступаНоменклатуры.Наименование = &НаименованиеЭлементаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ГруппыДоступаНоменклатуры КАК ГруппыДоступаНоменклатуры
		|ГДЕ
		|	НЕ ГруппыДоступаНоменклатуры.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		Запрос.УстановитьПараметр("НаименованиеЭлементаПоУмолчанию", НаименованиеЭлементаПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1
				Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЗначениеЭлемента = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		Если НеобходимоСоздатьЭлемент Тогда
			ГруппаДоступаОбъект = Справочники.ГруппыДоступаНоменклатуры.СоздатьЭлемент();
			ГруппаДоступаОбъект.Наименование = НаименованиеЭлементаПоУмолчанию;
			
			ГруппаДоступаОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ГруппаДоступаОбъект.Записать();
				ЗначениеЭлемента = ГруппаДоступаОбъект.Ссылка;
			Исключение
				ЗначениеЭлемента = Справочники.ГруппыДоступаНоменклатуры.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(ЗначениеЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = "ГруппаДоступаФизЛица" Тогда
			
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Группа доступа по умолчанию'");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ГруппыДоступаФизЛиц.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ГруппыДоступаФизЛиц.Наименование = &НаименованиеЭлементаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ГруппыДоступаФизическихЛиц КАК ГруппыДоступаФизЛиц
		|ГДЕ
		|	НЕ ГруппыДоступаФизЛиц.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		Запрос.УстановитьПараметр("НаименованиеЭлементаПоУмолчанию", НаименованиеЭлементаПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1
			Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЗначениеЭлемента = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		Если НеобходимоСоздатьЭлемент Тогда
			ГруппаДоступаОбъект = Справочники.ГруппыДоступаФизическихЛиц.СоздатьЭлемент();
			ГруппаДоступаОбъект.Наименование = НаименованиеЭлементаПоУмолчанию;
			
			ГруппаДоступаОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ГруппаДоступаОбъект.Записать();
				ЗначениеЭлемента = ГруппаДоступаОбъект.Ссылка;
			Исключение
				ЗначениеЭлемента = Справочники.ГруппыДоступаФизическихЛиц.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(ЗначениеЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = "ГруппаДоступаПартнера" Тогда
			
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Группа доступа по умолчанию'");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ГруппыДоступаПартнеров.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ГруппыДоступаПартнеров.Наименование = &НаименованиеЭлементаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ГруппыДоступаПартнеров КАК ГруппыДоступаПартнеров
		|ГДЕ
		|	НЕ ГруппыДоступаПартнеров.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		Запрос.УстановитьПараметр("НаименованиеЭлементаПоУмолчанию", НаименованиеЭлементаПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1
				Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЗначениеЭлемента = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		Если НеобходимоСоздатьЭлемент Тогда
			ГруппаДоступаОбъект = Справочники.ГруппыДоступаПартнеров.СоздатьЭлемент();
			ГруппаДоступаОбъект.Наименование = НаименованиеЭлементаПоУмолчанию;
			
			ГруппаДоступаОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ГруппаДоступаОбъект.Записать();
				ЗначениеЭлемента = ГруппаДоступаОбъект.Ссылка;
			Исключение
				ЗначениеЭлемента = Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(ЗначениеЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = "НоменклатураУслуга" Тогда
	
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Услуга'");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Номенклатура.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Номенклатура.Наименование = &НаименованиеЭлементаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		Запрос.УстановитьПараметр("НаименованиеЭлементаПоУмолчанию", НаименованиеЭлементаПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1
				Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЗначениеЭлемента = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		Если НеобходимоСоздатьЭлемент Тогда
			ЭлементПоУмолчаниюОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			ЭлементПоУмолчаниюОбъект.Наименование       = НаименованиеЭлементаПоУмолчанию;
			ЭлементПоУмолчаниюОбъект.НаименованиеПолное = НаименованиеЭлементаПоУмолчанию;
			
			ЭлементПоУмолчаниюОбъект.ТипНоменклатуры   = Перечисления.ТипыНоменклатуры.Услуга;
			ЭлементПоУмолчаниюОбъект.СтавкаНДС         = Перечисления.СтавкиНДС.НДС18;
			ЭлементПоУмолчаниюОбъект.ЕдиницаИзмерения  = ЭлементПоУмолчанию(КомпонентыОбмена, "ЕдиницаИзмерения");
			ЭлементПоУмолчаниюОбъект.ЕдиницаДляОтчетов = ЭлементПоУмолчанию(КомпонентыОбмена, "ЕдиницаИзмерения");
			
			ЭлементПоУмолчаниюОбъект.КоэффициентЕдиницыДляОтчетов  = 1;
			ЭлементПоУмолчаниюОбъект.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
			
			ЭлементПоУмолчаниюОбъект.ОбменДанными.Загрузка = Истина;
			
			ОтложеннаяОбработка_Номенклатура(ЭлементПоУмолчаниюОбъект, КомпонентыОбмена);
			
			Попытка
				ЭлементПоУмолчаниюОбъект.Записать();
				ЗначениеЭлемента = ЭлементПоУмолчаниюОбъект.Ссылка;
			Исключение
				ЗначениеЭлемента = Справочники.Номенклатура.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(ЗначениеЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = "ЕдиницаИзмерения" Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
		|	И УпаковкиЕдиницыИзмерения.Код = ""796""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка,
		|	0
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
		|	И УпаковкиЕдиницыИзмерения.Наименование = ""шт""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ");
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗначениеЭлемента = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = "СтатьяРасходовСписаниеТоваров"
		Или ВидЭлемента = "СтатьяРасходовАвансовыйОтчет"
		Или ВидЭлемента = "СтатьяРасходовПоступлениеУслуг"
		Или ВидЭлемента = "СтатьяРасходовТаможенныйСбор"
		Или ВидЭлемента = "СтатьяРасходовТаможенныйШтраф"
		Или ВидЭлемента = "СтатьяРасходовКредиты" Тогда
	
		НеобходимоСоздатьЭлемент = Ложь;
		
		Если ВидЭлемента = "СтатьяРасходовСписаниеТоваров" Тогда
			НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Статья расходов по умолчанию'");
		ИначеЕсли ВидЭлемента = "СтатьяРасходовАвансовыйОтчет" Тогда
			НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Статья расходов авансовый отчет по умолчанию'");
		ИначеЕсли ВидЭлемента = "СтатьяРасходовПоступлениеУслуг" Тогда
			НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Статья расходов поступление услуг по умолчанию'");
		ИначеЕсли ВидЭлемента = "СтатьяРасходовТаможенныйСбор" Тогда
			НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Статья расходов таможенный сбор по умолчанию'");
		ИначеЕсли ВидЭлемента = "СтатьяРасходовТаможенныйШтраф" Тогда
			НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Статья расходов таможенный штраф по умолчанию'");
		ИначеЕсли ВидЭлемента = "СтатьяРасходовКредиты" Тогда
			НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Статья расходов кредиты по умолчанию'");
		КонецЕсли;
	
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	СтатьиРасходов.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА СтатьиРасходов.Наименование = &НаименованиеЭлементаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
			|ИЗ
			|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
			|ГДЕ
			|	НЕ СтатьиРасходов.ПометкаУдаления
			|	И ВЫБОР
			|			КОГДА &ДоговорыКредитовИДепозитов
			|				ТОГДА СтатьиРасходов.ДоговорыКредитовИДепозитов
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		Запрос.УстановитьПараметр("НаименованиеЭлементаПоУмолчанию", НаименованиеЭлементаПоУмолчанию);
		ДоговорыКредитовИДепозитов = ВидЭлемента = "СтатьяРасходовКредиты";
		Запрос.УстановитьПараметр("ДоговорыКредитовИДепозитов", ДоговорыКредитовИДепозитов);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1
				Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЗначениеЭлемента = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	
		Если НеобходимоСоздатьЭлемент Тогда
			СтатьяРасходовОбъект = ПланыВидовХарактеристик.СтатьиРасходов.СоздатьЭлемент();
			СтатьяРасходовОбъект.Наименование = НаименованиеЭлементаПоУмолчанию;
			Если ВидЭлемента = "СтатьяРасходовСписаниеТоваров" Тогда
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров;
			Иначе
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			КонецЕсли;
			Попытка
				СтатьяРасходовОбъект.Записать();
				ЗначениеЭлемента = СтатьяРасходовОбъект.Ссылка;
			Исключение
				ЗначениеЭлемента = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(ЗначениеЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
			КонецПопытки
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = "СтатьяДоходовКредитыДепозиты" Тогда
		
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаПоУмолчанию = НСтр("ru = 'Статья доходов кредиты и депозиты по умолчанию'");
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	СтатьиДоходов.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СтатьиДоходов.Наименование = &НаименованиеЭлементаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
		|ГДЕ
		|	НЕ СтатьиДоходов.ПометкаУдаления
		|	И СтатьиДоходов.ДоговорыКредитовИДепозитов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		Запрос.УстановитьПараметр("НаименованиеЭлементаПоУмолчанию", НаименованиеЭлементаПоУмолчанию);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1
				Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЗначениеЭлемента = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	
		Если НеобходимоСоздатьЭлемент Тогда
			СтатьяДоходовОбъект = ПланыВидовХарактеристик.СтатьиДоходов.СоздатьЭлемент();
			СтатьяДоходовОбъект.Наименование = НаименованиеЭлементаПоУмолчанию;
			Попытка
				СтатьяДоходовОбъект.Записать();
				ЗначениеЭлемента = СтатьяДоходовОбъект.Ссылка;
			Исключение
				ЗначениеЭлемента = ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(ЗначениеЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
			КонецПопытки
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = "Подразделение" Тогда
		
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаПоУмолчанию = НСтр("ru = '<Подразделение по умолчанию>'");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Наименование = &НаименованиеЭлементаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		Запрос.УстановитьПараметр("НаименованиеЭлементаПоУмолчанию", НаименованиеЭлементаПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1
				Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЗначениеЭлемента = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		Если НеобходимоСоздатьЭлемент Тогда
			ПодразделениеОбъект = Справочники.СтруктураПредприятия.СоздатьЭлемент();
			ПодразделениеОбъект.Наименование = НаименованиеЭлементаПоУмолчанию;
			ПодразделениеОбъект.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.НеВедется;
			
			ПодразделениеОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ПодразделениеОбъект.Записать();
				ЗначениеЭлемента = ПодразделениеОбъект.Ссылка;
			Исключение
				ЗначениеЭлемента = Справочники.СтруктураПредприятия.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(ЗначениеЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
			КонецПопытки;
		КонецЕсли;
	
	ИначеЕсли ВидЭлемента = "ФизическоеЛицо" Тогда
		
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаПоУмолчанию = НСтр("ru = '<Физическое лицо по умолчанию>'");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ФизическиеЛица.Наименование = &НаименованиеЭлементаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		Запрос.УстановитьПараметр("НаименованиеЭлементаПоУмолчанию", НаименованиеЭлементаПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1
				Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЗначениеЭлемента = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		Если НеобходимоСоздатьЭлемент Тогда
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФизЛицоОбъект.Наименование = НаименованиеЭлементаПоУмолчанию;
			
			ФизЛицоОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ФизЛицоОбъект.Записать();
				ЗначениеЭлемента = ФизЛицоОбъект.Ссылка;
			Исключение
				ЗначениеЭлемента = Справочники.ФизическиеЛица.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(ЗначениеЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КомпонентыОбмена);
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;
	
	ПараметрыКонвертации.ЭлементыПоУмолчанию.Вставить(ВидЭлемента, ЗначениеЭлемента);
	
	Возврат ЗначениеЭлемента;
КонецФункции
Функция ЭтоУТ()
	Возврат ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
КонецФункции
Функция ЭтоХозяйственнаяОперацияРасчетыПоДепозитам(ХозОперация)
	Возврат (ХозОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		Или ХозОперация = Перечисления.ХозяйственныеОперации.ПереоценкаКредитовИДепозитов
		Или ХозОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
КонецФункции
Функция ЭтоХозяйственнаяОперацияРасчетыПоКредитамЗаймам(ХозОперация)
	Возврат ХозОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		Или ХозОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		Или ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или ХозОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВыгружатьАналитикуПоСкладам");
	ПараметрыКонвертации.Вставить("ВыгружатьУправленческуюОрганизацию");
	ПараметрыКонвертации.Вставить("ИспользоватьОтборПоОрганизациям");
	ПараметрыКонвертации.Вставить("КонтрагентРозничныйПокупатель");
	ПараметрыКонвертации.Вставить("Организации");
	ПараметрыКонвертации.Вставить("СкладПоУмолчанию");
	ПараметрыКонвертации.Вставить("КонтрагентНашеПредприятие");
	ПараметрыКонвертации.Вставить("КонтрагентНашеПредприятиеБанковскийСчет");
	ПараметрыКонвертации.Вставить("СозданныеПриВыгрузкеОбъекты");
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ЗагруженныеСтатьиДДСИХозОперации");
	ПараметрыКонвертации.Вставить("СФПолученныеПоЗагруженнымАвансовымОтчетам");
	ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСПоставщиками");
	ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСКлиентами");
	ПараметрыКонвертации.Вставить("ВидыЦенНоменклатуры");
	ПараметрыКонвертации.Вставить("ДокументыСПодарочнымиСертификатами");
	ПараметрыКонвертации.Вставить("НастройкиДопАналитикиПоДоговорам");
	ПараметрыКонвертации.Вставить("ТаблицаСБДСДляСозданияКонтрагентов");
	ПараметрыКонвертации.Вставить("ИспользуемыйВидПлановыхЦенВПроизводстве");
	ПараметрыКонвертации.Вставить("ВалютаРегламентированногоУчета");
	ПараметрыКонвертации.Вставить("ЭлементыПоУмолчанию");
	ПараметрыКонвертации.Вставить("ВалютаУправленческогоУчета");
	ПараметрыКонвертации.Вставить("ПолученныеДенежныеДокументы");
	ПараметрыКонвертации.Вставить("МассивТНВЭД");
	ПараметрыКонвертации.Вставить("МассивВозвратыПСЗаполнитьОснование");
	ПараметрыКонвертации.Вставить("ТЗДопСведенияБулево");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_АктВыполненныхРабот_ПриОбработке" Тогда 
		ПОД_Документ_АктВыполненныхРабот_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВводОстатков_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВводОстатков_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВЗ_КорректировкаДолга_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВЗ_КорректировкаДолга_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВнесениеДСВКассуККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВнесениеДСВКассуККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВнутреннееПотреблениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВнутреннееПотреблениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратПС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратПС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВыемкаДСИзКассыККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВыемкаДСИзКассыККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаявкаНаРасходДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаявкаНаРасходДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаРеализации_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаРеализации_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_НачисленияКредитовИДепозитов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_НачисленияКредитовИДепозитов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетКомиссияМеждуОрганизациямиОСписании_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетКомиссияМеждуОрганизациямиОСписании_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетПоКомиссииМеждуОрганизациями_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетПоКомиссииМеждуОрганизациями_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныйКассовыйОрдер_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныйКассовыйОрдер_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПрочееОприходованиеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПрочееОприходованиеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходныйКассовыйОрдер_ПриОбработке" Тогда 
		ПОД_Документ_РасходныйКассовыйОрдер_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеБезналичныхДенежныхСредств_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеБезналичныхДенежныхСредств_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетНаОплату_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетНаОплату_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураКомиссионеру_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураКомиссионеру_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Спр_ГруппыАналитическогоУчетаНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Спр_ГруппыАналитическогоУчетаНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ГруппыФинУчетаНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ГруппыФинУчетаНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЛицензииПоставщиковАлкПрод_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЛицензииПоставщиковАлкПрод_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ОтветственныеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ОтветственныеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФИОФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФИОФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаявкаНаПереводДСВБюджет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаявкаНаПереводДСВБюджет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаявкаНаРасходДСРасчетыССотр_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризационнаяОпись_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризационнаяОпись_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	
	
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Файлы_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Файлы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр_ПриОтправкеДанных" Тогда 
		ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Отпр_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ПрочееОприходование_ВыпускПродукции_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Док_ПрочееОприходование_ВыпускПродукции_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчетИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчетИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктВыполненныхРаботРТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АктВыполненныхРаботРТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АннулированиеПС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АннулированиеПС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВЗ_НашаОрганизация_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВЗ_НашаОрганизация_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВЗ_ОрганизацияДебитор_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВЗ_ОрганизацияДебитор_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВЗ_ОрганизацияКредитор_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВЗ_ОрганизацияКредитор_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнесениеДСВКассуККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнесениеДСВКассуККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутреннееПотребление_ВПроизводство_Отпр_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнутреннееПотребление_ВПроизводство_Отпр_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутреннееПотребление_ВСписание_Отпр_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнутреннееПотребление_ВСписание_Отпр_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнутреннееПотребление_ВСписаниеЗапас_Отпр_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнутреннееПотребление_ВЭксплуатацию_Отпра_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратПС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратПС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыемкаДСИзКассыККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВыемкаДСИзКассыККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	
	
	
	
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаПереводДСВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаявкаНаПереводДСВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСВнутрПередача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыССотр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаОткрытие_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КассоваяСменаОткрытие_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Оприходование_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Оприходование_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Списание_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Списание_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_СписаниеЗапасов_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_СписаниеЗапасов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Оприходование_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Оприходование_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Списание_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Списание_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_СписаниеЗапасов_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_СписаниеЗапасов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачисленияКредитовИДепозитов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_НачисленияКредитовИДепозитов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКартеПриходКД_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКартеРасходКД_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиЗадолжПодотчетников_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиЗадолжПодотчетников_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиКредитовЗаймов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиКредитовЗаймов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиПерерасходаПодотчетн_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиПерерасходаПодотчетн_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПереданная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТараПереданная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПринятая_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТараПринятая_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОСписании_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионераОСписании_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссияОрганизСписаниеКомиссионер_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссияОрганизСписаниеКомиссионер_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссияОрганизСписаниеКомитент_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссияОрганизСписаниеКомитент_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	
	
	
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПУПАЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПУПАЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияУслугПрочихАктивов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияУслугПрочихАктивов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыдачаВКассуККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыдачаВКассуККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПРаботнику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПРаботнику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СборкаТоваров_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СЗ_КорректировкаДолга_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СЗ_КорректировкаДолга_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостачТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеНедостачТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплату_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплату_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданныйАванс_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданныйАванс_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураКомиссионеру_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураКомиссионеру_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураКомитента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураКомитента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученныйАванс_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученныйАванс_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученныйИК_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученныйИК_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученныйИКК_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученныйИКК_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ОтчетКомиссияМеждуОрганизациями_Комитент_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыПодарочныхСертификатов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыПодарочныхСертификатов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ГруппыФинУчетаНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ГруппыФинУчетаНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ГрФинансовогоУчетаРасчетов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ГрФинансовогоУчетаРасчетов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКредитовИДепозитов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКредитовИДепозитов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентыИзФизЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтрагентыИзФизЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОтветственныеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ОтветственныеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Док_ПрочееОприходование_ВозвратИзЭксплуатации_Полу_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АннулированиеПС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АннулированиеПС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АннулированиеПС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АннулированиеПС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутреннееПотреблениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВнутреннееПотреблениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутреннееПотреблениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВнутреннееПотреблениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратПС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратПС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратПС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратПС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаПереводДСВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаПереводДСВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонтр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризационнаяОпись_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ИнвентаризационнаяОпись_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризационнаяОпись_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ИнвентаризационнаяОпись_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиЗадолжПодотчетников_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиЗадолжПодотчетников_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиЗадолжПодотчетников_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиЗадолжПодотчетников_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиКредитовЗаймов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиКредитовЗаймов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиКредитовЗаймов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиКредитовЗаймов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиНаличныхДС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	
	
	
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиПерерасходаПодотчетн_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиРасчСПокупателямиАвансы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиРасчСПокупателямиДолги_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиРасчСПоставщикамиАвансы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиРасчСПоставщикамиДолги_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПереданная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиТараПереданная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПереданная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиТараПереданная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПринятая_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиТараПринятая_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПринятая_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиТараПринятая_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПереданныхНаКомис_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомис_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПервичныйДокументИзСтруктуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПервичныйДокументИзСтруктуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПоступлениеИзКассыККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияПС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияПС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияПС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияПС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_ПБДС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗП_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗП_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗП_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗП_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостачТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеНедостачТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостачТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеНедостачТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплату_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетНаОплату_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплату_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетНаОплату_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ЗаявкаНаРасходованиеДенежныхСредствПФ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВидыПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ГруппыФинУчетаНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ГруппыФинУчетаНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКредитов_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКредитов_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ЛицензииПоставщиковАлкПрод_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОтветственныеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ОтветственныеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОтветственныеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ОтветственныеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "Документ_ОстаткиРасчетов_ОтложеннаяОбработкаПартне" Тогда 
		Документ_ОстаткиРасчетов_ОтложеннаяОбработкаПартне(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "Документ_ОстаткиТМЦ_ОтложеннаяОбработкаПартнеров" Тогда 
		Документ_ОстаткиТМЦ_ОтложеннаяОбработкаПартнеров(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_АвансовыйОтчет" Тогда 
		ОтложеннаяОбработка_АвансовыйОтчет(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Валюты" Тогда 
		ОтложеннаяОбработка_Валюты(
			Параметры.Объект);
	
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровПоставщику" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровПоставщику(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ГруппыФинУчетаНоменклатуры" Тогда 
		ОтложеннаяОбработка_ГруппыФинУчетаНоменклатуры(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДоговорыКонтрагентов" Тогда 
		ОтложеннаяОбработка_ДоговорыКонтрагентов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДоговорыКредитов" Тогда 
		ОтложеннаяОбработка_ДоговорыКредитов(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС" Тогда 
		ОтложеннаяОбработка_ДокументыДвиженияБезналичныхДС(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС" Тогда 
		ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЗаказыПоставщикуКлиента" Тогда 
		ОтложеннаяОбработка_ЗаказыПоставщикуКлиента(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЗаявкаНаРасходДСРасчетыСКонтр" Тогда 
		ОтложеннаяОбработка_ЗаявкаНаРасходДСРасчетыСКонтр(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КассаПоВалютеИОрганизации" Тогда 
		ОтложеннаяОбработка_КассаПоВалютеИОрганизации(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КассаРасчетыСКонтрагентами" Тогда 
		ОтложеннаяОбработка_КассаРасчетыСКонтрагентами(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Контрагенты" Тогда 
		ОтложеннаяОбработка_Контрагенты(
			Параметры.Объект, Параметры.КомпонентыОбмена, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_НачислениеКредитовДепозитов" Тогда 
		ОтложеннаяОбработка_НачислениеКредитовДепозитов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Номенклатура" Тогда 
		ОтложеннаяОбработка_Номенклатура(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Организации" Тогда 
		ОтложеннаяОбработка_Организации(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиБезналичныхДС" Тогда 
		ОтложеннаяОбработка_ОстаткиБезналичныхДС(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиЗадолжПодотчетников" Тогда 
		ОтложеннаяОбработка_ОстаткиЗадолжПодотчетников(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиКредитовИЗаймов" Тогда 
		ОтложеннаяОбработка_ОстаткиКредитовИЗаймов(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиНаличныхДС" Тогда 
		ОтложеннаяОбработка_ОстаткиНаличныхДС(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиПерерасходаПодотчетнЛиц" Тогда 
		ОтложеннаяОбработка_ОстаткиПерерасходаПодотчетнЛиц(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиРасчетовСПокупАвансы" Тогда 
		ОтложеннаяОбработка_ОстаткиРасчетовСПокупАвансы(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиРасчетовСПокупДолги" Тогда 
		ОтложеннаяОбработка_ОстаткиРасчетовСПокупДолги(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиРасчетовСПоставщАвансы" Тогда 
		ОтложеннаяОбработка_ОстаткиРасчетовСПоставщАвансы(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиРасчетовСПоставщДолги" Тогда 
		ОтложеннаяОбработка_ОстаткиРасчетовСПоставщДолги(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиСобственныхТМЦ" Тогда 
		ОтложеннаяОбработка_ОстаткиСобственныхТМЦ(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиТараПереданная" Тогда 
		ОтложеннаяОбработка_ОстаткиТараПереданная(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиТараПринятая" Тогда 
		ОтложеннаяОбработка_ОстаткиТараПринятая(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиТоваровПереданНаКомис" Тогда 
		ОтложеннаяОбработка_ОстаткиТоваровПереданНаКомис(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОстаткиТоваровПринятыхНаКомис" Тогда 
		ОтложеннаяОбработка_ОстаткиТоваровПринятыхНаКомис(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетОРозничныхПродажах(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПервичныйДокумент" Тогда 
		ОтложеннаяОбработка_ПервичныйДокумент(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПеремещениеТоваров" Тогда 
		ОтложеннаяОбработка_ПеремещениеТоваров(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПодарочныеСертификаты" Тогда 
		ОтложеннаяОбработка_ПодарочныеСертификаты(
			Параметры.Объект);
	
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеТоваровУслуг" Тогда 
		ОтложеннаяОбработка_ПоступлениеТоваровУслуг(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияТоваровУслуг" Тогда 
		ОтложеннаяОбработка_РеализацияТоваровУслуг(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СборкаТоваров" Тогда 
		ОтложеннаяОбработка_СборкаТоваров(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Склады" Тогда 
		ОтложеннаяОбработка_Склады(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СоглашенияСКлиентами" Тогда 
		ОтложеннаяОбработка_СоглашенияСКлиентами(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СоглашенияСПоставщиками" Тогда 
		ОтложеннаяОбработка_СоглашенияСПоставщиками(
			Параметры.Объект);
	
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СтруктураПредприятия" Тогда 
		ОтложеннаяОбработка_СтруктураПредприятия(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТаможеннаяДекларацияУП" Тогда 
		ОтложеннаяОбработка_ТаможеннаяДекларацияУП(
			Параметры.Объект, Параметры.КомпонентыОбмена, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТипыЦен" Тогда 
		ОтложеннаяОбработка_ТипыЦен(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры" Тогда 
		ОтложеннаяОбработка_УстановкаЦенНоменклатуры(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ФизЛица" Тогда 
		ОтложеннаяОбработка_ФизЛица(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЭквайринговыйТерминал" Тогда 
		ОтложеннаяОбработка_ЭквайринговыйТерминал(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
