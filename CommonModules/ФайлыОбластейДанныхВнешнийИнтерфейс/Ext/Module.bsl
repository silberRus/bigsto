
#Область ПрограммныйИнтерфейс
    
// Возвращает описание данных логического хранилища.
//
// Параметры:
//  ИдентификаторХранилища - Строка - идентификатор логического хранилища.
//  ИдентификаторДанных    - Строка - идентификатор данных хранилища.
// 
// Возвращаемое значение:
//  - Структура - описание данных хранилища.
//      - ИмяФайла - Строка - имя файла.
//      - Размер - Число - размер файла в байтах.
//      - Данные - ДвоичныеДанные, Строка - двоичные данные файла или расположение файла на диске.
//
Функция Описание(ИдентификаторХранилища, ИдентификаторДанных) Экспорт
	
	Результат = Неопределено;
	
	Если ИдентификаторХранилища = ИдентификаторХранилища() Тогда
        Результат = РегистрыСведений.ФайлыОбластейДанных.ОписаниеФайла(ИдентификаторДанных);
        Результат.Вставить("ИмяФайла", Результат.Имя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Возвращает данные логического хранилища.
//  
// Параметры:
//  ОписаниеДанных - Структура - описание данных хранилища.
//  
// Возвращаемое значение:
//  - ДвоичныеДанные, Строка - двоичные данные файла или расположение файла на диске.
//
Функция Данные(ОписаниеДанных) Экспорт
    
    Если ЗначениеЗаполнено(ОписаниеДанных.ПолноеИмя) Тогда
        Возврат ОписаниеДанных.ПолноеИмя;
    Иначе
        Возврат ОписаниеДанных.Данные;
    КонецЕсли; 
	
КонецФункции

// Записывает данные в логическое хранилище.
// 
// Параметры:
//  Структура - описание данных хранилища.
//    - ИмяФайла - Строка - имя файла.
//    - Размер - Число - размер файла в байтах.
//    - Данные - ДвоичныеДанные, Строка - двоичные данные файла или расположение файла на диске.
// 
// Возвращаемое значение:
//   - Строка - идентификатор данных хранилища.
//   
Функция Загрузить(ОписаниеДанных) Экспорт
    
    Если ТипЗнч(ОписаниеДанных.Данные) = Тип("ДвоичныеДанные") Тогда
        Идентификатор = РегистрыСведений.ФайлыОбластейДанных.Загрузить(ОписаниеДанных.ИмяФайла, ОписаниеДанных.Данные);
    Иначе
        Идентификатор = РегистрыСведений.ФайлыОбластейДанных.Загрузить(ОписаниеДанных.ИмяФайла,, ОписаниеДанных.Данные);
    КонецЕсли; 
    
	Возврат Строка(Идентификатор);
	
КонецФункции

// Возвращает идентификатор хранилища в виде строки.
// 
// Возвращаемое значение:
//   - Строка - идентификатор хранилища. 
//
Функция ИдентификаторХранилища() Экспорт
	
	Возврат "files";
	
КонецФункции

// Обработчик регламентного задания "УдалениеВременныхФайловОбластейДанных".
//
Процедура УдалениеВременныхФайловОбластейДанных() Экспорт
    
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
        Метаданные.РегламентныеЗадания.УдалениеВременныхФайловОбластейДанных);
        
    Запрос = Новый Запрос;
    Запрос.Текст = 
    	"ВЫБРАТЬ
        |   ФайлыОбластейДанных.Идентификатор КАК Идентификатор
        |ИЗ
        |   РегистрСведений.ФайлыОбластейДанных КАК ФайлыОбластейДанных
        |ГДЕ
        |   ФайлыОбластейДанных.Временный
        |   И ФайлыОбластейДанных.ДатаФайла < &ГраницаХранения";
    Запрос.УстановитьПараметр("ГраницаХранения", ТекущаяУниверсальнаяДата() - 86400); // Сутки
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        РегистрыСведений.ФайлыОбластейДанных.Удалить(Выборка.Идентификатор);
    КонецЦикла;
     
КонецПроцедуры

#КонецОбласти 
