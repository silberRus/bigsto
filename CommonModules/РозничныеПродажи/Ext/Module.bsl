
#Область ПрограммныйИнтерфейс

#Область ФискальныеОперации

Функция СтруктураДанныеФискальнойОперации() Экспорт
	
	ДанныеФискальнойОперации = Новый Структура;
	ДанныеФискальнойОперации.Вставить("ОтправлятьEmailЧерезОФД",          Константы.ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД.Получить());
	ДанныеФискальнойОперации.Вставить("ОтправлятьSMSЧерезОФД",            Константы.ОтправлятьЭлектронныеЧекиПоSMSЧерезОФД.Получить());
	ДанныеФискальнойОперации.Вставить("НеПечататьФискальныйЧек",          ПолучитьФункциональнуюОпцию("НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю"));
	ДанныеФискальнойОперации.Вставить("ОтправительEmail");
	ДанныеФискальнойОперации.Вставить("ВариантОтправкиЭлектронногоЧека");
	ДанныеФискальнойОперации.Вставить("КонтактныеДанныеЭлектронногоЧека");
	
	ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации);
	
	Возврат ДанныеФискальнойОперации;
	
КонецФункции

Процедура ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации) Экспорт
	
	ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ПустаяСсылка();
	ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = "";
	
КонецПроцедуры

Функция СистемаНалогообложенияФискальнойОперации(Организация, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.УчетнаяПолитика.СистемаНалогообложения КАК СистемаНалогообложения,
	|	Т.УчетнаяПолитика.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ТекущаяДата, Организация = &Организация) КАК Т
	|");
	
	Если Дата = Неопределено Тогда
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Иначе
		Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ДанныеСистемыНалогообложения = Запрос.Выполнить().Выбрать();
	ДанныеСистемыНалогообложения.Следующий();
	
	Если ДанныеСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		
		СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
		
	ИначеЕсли ДанныеСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		Если ДанныеСистемыНалогообложения.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
			
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
			
		ИначеЕсли ДанныеСистемыНалогообложения.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
			
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыВнесенияИВыемкиДС

// Создает документ ВнесениеДенежныхСредствВКассуККМ.
//
// Параметры:
//  ВходныеДанные - Структура - Структура данных с реквизитами создаваемого документа.
//
// Возвращаемое значение:
//  ДокументСсылка.ВнесениеДенежныхСредствВКассуККМ - Созданный документ.
//
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные) Экспорт
	
	НовыйДокумент = Документы.ВнесениеДенежныхСредствВКассуККМ.СоздатьДокумент();
	
	НовыйДокумент.Дата              = ТекущаяДатаСеанса();
	НовыйДокумент.Организация       = ВходныеДанные.Организация;
	НовыйДокумент.Касса             = ВходныеДанные.Касса;
	НовыйДокумент.КассаККМ          = ВходныеДанные.КассаККМ;
	НовыйДокумент.СуммаДокумента    = ВходныеДанные.СуммаДокумента;
	НовыйДокумент.Валюта            = ВходныеДанные.Валюта;
	НовыйДокумент.ДокументОснование = ВходныеДанные.ДокументОснование;
	НовыйДокумент.Кассир            = Пользователи.ТекущийПользователь();
	
	НовыйДокумент.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(НовыйДокумент.Организация);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

// Создает документ ВыемкаДенежныхСредствИзКассыККМ.
//
// Параметры:
//  ВходныеДанные - Структура - Структура данных с реквизитами создаваемого документа.
//
// Возвращаемое значение:
//  ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ - Созданный документ.
//
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные) Экспорт
	
	НовыйДокумент = Документы.ВыемкаДенежныхСредствИзКассыККМ.СоздатьДокумент();
	
	НовыйДокумент.Дата           = ТекущаяДатаСеанса();
	НовыйДокумент.Организация    = ВходныеДанные.Организация;
	НовыйДокумент.Валюта         = ВходныеДанные.Валюта;
	НовыйДокумент.КассаККМ       = ВходныеДанные.КассаККМ;
	НовыйДокумент.СуммаДокумента = ВходныеДанные.СуммаДокумента;
	НовыйДокумент.Кассир         = Пользователи.ТекущийПользователь();
	
	НовыйДокумент.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(НовыйДокумент.Организация);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Перегруппировать кнопки формы
//
// Параметры:
//  Форма - УправляемаяФорма - Форма
//  ЭлементыНаПерегруппировку - Массив - Массив элементов формы на перегруппировку
//
Процедура ПерегруппироватьКнопкиФормы(Форма, ЭлементыНаПерегруппировку) Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельОперацииНадЧеком",   Новый Массив);
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельКонтекстныеКоманды", Новый Массив);
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельОплата",             Новый Массив);
	
	Для Каждого Элемент Из ЭлементыНаПерегруппировку Цикл
		Для Каждого КлючИЗначение Из Соответствие Цикл
			Если Найти(Элемент.Родитель.Имя, КлючИЗначение.Ключ) Тогда
				КлючИЗначение.Значение.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		// Удаление добавленных ранее элементов формы
		Дубль = Форма.Элементы.Найти(Элемент.Имя + "Дубль");
		Если Дубль <> Неопределено Тогда
			Форма.Элементы.Удалить(Дубль);
		КонецЕсли;
		Декорация = Форма.Элементы.Найти(Элемент.Имя + "Декорация" + "Дубль");
		Если Декорация <> Неопределено Тогда
			Форма.Элементы.Удалить(Декорация);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Соответствие Цикл
	
		Индекс = 0;
		НомерГруппы = 1;
		ИзмененыЭлементы = Ложь;
		Для Каждого Элемент Из КлючИЗначение.Значение Цикл
			
			Если Не Элемент.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			Если Индекс = 2  Тогда
				НомерГруппы = НомерГруппы + 1;
				Индекс = 0;
			КонецЕсли;
			
			СозданныйЭлемент = ДобавитьЭлемент(Форма, Элемент.Имя, КлючИЗначение.Ключ, НомерГруппы);
			СозданныйЭлемент.ИмяКоманды = Элемент.ИмяКоманды;
			СозданныйЭлемент.Ширина = Элемент.Ширина;
			СозданныйЭлемент.Высота = Элемент.Высота;
			СозданныйЭлемент.ЦветФона = Элемент.ЦветФона;
			СозданныйЭлемент.Видимость = Элемент.Видимость;
			
			Элемент.Видимость = Ложь;
			
			ИзмененыЭлементы = Истина;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Если ИзмененыЭлементы И Индекс < 2 Тогда
			СозданныйЭлемент = ДобавитьЭлемент(Форма, Элемент.Имя + "Декорация", КлючИЗначение.Ключ, НомерГруппы);
			СозданныйЭлемент.ИмяКоманды = Элемент.ИмяКоманды;
			СозданныйЭлемент.Ширина = Элемент.Ширина;
			СозданныйЭлемент.Высота = Элемент.Высота;
			СозданныйЭлемент.ЦветФона = Элемент.ЦветФона;
			СозданныйЭлемент.Видимость = Истина;
			СозданныйЭлемент.Доступность = Ложь;
			СозданныйЭлемент.Заголовок = " ";
		КонецЕсли;
		
		Если Не ИзмененыЭлементы Тогда
			Дельта = 0;
		Иначе
			Дельта = 1;
		КонецЕсли;
		
		Если НомерГруппы < 4 Тогда
			Для Индекс = НомерГруппы + Дельта По 4 Цикл
				ИмяЭлемента = КлючИЗначение.Ключ + Индекс;
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
					Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НомерГруппы + Дельта = 1 Тогда
			ИмяЭлемента = "Разделитель" + КлючИЗначение.Ключ;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
				Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьКомандыПечатиВоВсеДействия(ГруппаФормы, КнопкиПечати)
	
	Для Каждого КнопкаПечати Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(КнопкаПечати) = Тип("ГруппаФормы") Тогда
			ПоместитьКомандыПечатиВоВсеДействия(КнопкаПечати, КнопкиПечати);
		Иначе
			КнопкиПечати.Добавить(КнопкаПечати);
			КнопкаПечати.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Настроить команды печати
//
// Параметры:
//  Форма - УправляемаяФорма - Форма
//
Процедура НастроитьКомандыПечати(Форма) Экспорт
	
	КнопкиПечати = Новый Массив;
	ПоместитьКомандыПечатиВоВсеДействия(Форма.Элементы.ПодменюПечать, КнопкиПечати);
	
	КомандыПечати = Новый Массив;
	Для Каждого КнопкаПечати Из КнопкиПечати Цикл
		КомандыПечати.Добавить(
			Новый Структура("Заголовок, ИмяКоманды", Форма.Команды[КнопкаПечати.ИмяКоманды].Заголовок, КнопкаПечати.ИмяКоманды));
	КонецЦикла;
	Форма.АдресКомандПечатиВоВременномХранилище = ПоместитьВоВременноеХранилище(КомандыПечати, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Настроить быстрые товары и горячие клавиши
//
// Параметры:
//  Форма - УправляемаяФорма - Форма
//  Выборка - Выборка - Выборка из результата запроса
//
Процедура НастроитьБыстрыеТоварыИГорячиеКлавиши(Форма, Выборка) Экспорт
	
	Если Форма.ГорячиеКлавишиНастроены Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "БыстрыеТовары")
		И Форма.БыстрыеТовары.Количество() = 0 Тогда
		
		БыстрыеТовары = Выборка.БыстрыеТовары.Получить();
		
		Если БыстрыеТовары.Количество() > 0 Тогда
			
			Для Каждого СтрокаТЧ Из БыстрыеТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					
					ИмяКнопки = "БыстрыйТовар_" + БыстрыеТовары.Индекс(СтрокаТЧ);
					
					НоваяКоманда = Форма.ЭтотОбъект.Команды.Добавить(ИмяКнопки);
					НоваяКоманда.Действие = "ВыбранБыстрыйТовар";
					Если ЗначениеЗаполнено(СтрокаТЧ.Заголовок) Тогда
						НоваяКоманда.Заголовок = СтрокаТЧ.Заголовок;
					Иначе
						НоваяКоманда.Заголовок = Строка(СтрокаТЧ.Номенклатура);
					КонецЕсли;
					НоваяКоманда.Отображение               = ОтображениеКнопки.Текст;
					НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
					НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша[СтрокаТЧ.Клавиша], СтрокаТЧ.Alt, СтрокаТЧ.Ctrl, СтрокаТЧ.Shift);
					
					НоваяКнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Форма.Элементы.ФормаГорячиеКлавишиБыстрыеТовары);
					НоваяКнопка.ТолькоВоВсехДействиях = Истина;
					НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
					
					НовыйТовар = Форма.БыстрыеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйТовар, СтрокаТЧ);
					НовыйТовар.ИмяКоманды = НоваяКоманда.Имя;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗапросДополнительныеДанныеОБыстрыхТоварах = Новый Запрос(
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка");
			
			ЗапросДополнительныеДанныеОБыстрыхТоварах.УстановитьПараметр("Товары", Форма.БыстрыеТовары.Выгрузить(,"Номенклатура"));
			
			ВыборкаДополнительныеДанныеОБыстрыхТоварах = ЗапросДополнительныеДанныеОБыстрыхТоварах.Выполнить().Выбрать();
			
			Пока ВыборкаДополнительныеДанныеОБыстрыхТоварах.Следующий() Цикл
				
				Отбор = Новый Структура("Номенклатура", ВыборкаДополнительныеДанныеОБыстрыхТоварах.Номенклатура);
				НайденныеСтрокиБыстрыеТовары = Форма.БыстрыеТовары.НайтиСтроки(Отбор);
				Для Каждого СтрокаБыстрогоТовара Из НайденныеСтрокиБыстрыеТовары Цикл
					СтрокаБыстрогоТовара.ТипНоменклатуры = ВыборкаДополнительныеДанныеОБыстрыхТоварах.ТипНоменклатуры;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормыСКомандами = Новый ТаблицаЗначений;
	ЭлементыФормыСКомандами.Колонки.Добавить("Элемент");
	ЭлементыФормыСКомандами.Колонки.Добавить("ИмяКоманды");
	Для каждого ЭлементФормы Из Форма.Элементы Цикл
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ЭлементФормы, "ИмяКоманды") И ЗначениеЗаполнено(ЭлементФормы.ИмяКоманды) Тогда
			НоваяСтрока = ЭлементыФормыСКомандами.Добавить();
			НоваяСтрока.Элемент = ЭлементФормы;
			НоваяСтрока.ИмяКоманды = ЭлементФормы.ИмяКоманды;
		КонецЕсли;
	КонецЦикла;
	
	КомандыФормы = Выборка.КомандыФормы.Получить();
	Для Каждого СтрокаТЧ Из КомандыФормы Цикл
		
		Команда = Форма.Команды.Найти(СтрокаТЧ.Команда);
		Если Команда = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеСочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[СтрокаТЧ.Клавиша], СтрокаТЧ.Alt, СтрокаТЧ.Ctrl, СтрокаТЧ.Shift);
		СтароеСочетаниеКлавишПредставление = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(Команда.СочетаниеКлавиш);
		НовоеСочетаниеКлавишПредставление  = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(НовоеСочетаниеКлавиш);
		
		НоваяКоманда = Команда;
		Если НовоеСочетаниеКлавишПредставление <> СтароеСочетаниеКлавишПредставление Тогда
			
			НоваяКоманда = Форма.ЭтотОбъект.Команды.Добавить(СтрокаТЧ.Команда + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_"));
			НоваяКоманда.Действие                  = Команда.Действие;
			НоваяКоманда.ИзменяетСохраняемыеДанные = Команда.ИзменяетСохраняемыеДанные;
			НоваяКоманда.Картинка                  = Команда.Картинка;
			НоваяКоманда.Отображение               = Команда.Отображение;
			НоваяКоманда.Подсказка                 = Команда.Подсказка;
			НоваяКоманда.Заголовок                 = СтрЗаменить(Команда.Заголовок, СтароеСочетаниеКлавишПредставление, НовоеСочетаниеКлавишПредставление);
			НоваяКоманда.СочетаниеКлавиш           = НовоеСочетаниеКлавиш;
			
			НайденныеЭлементыФормы = ЭлементыФормыСКомандами.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
			Для Каждого ЭлементФормы Из НайденныеЭлементыФормы Цикл
				ЭлементФормы.ИмяКоманды = НоваяКоманда.Имя;
				ЭлементФормы.Элемент.ИмяКоманды = НоваяКоманда.Имя;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаТЧ.Скрывать Тогда
			
			НайденныеЭлементыФормы = ЭлементыФормыСКомандами.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
			Для Каждого ЭлементФормы Из НайденныеЭлементыФормы Цикл
				ЭлементФормы.Элемент.Видимость = Ложь;
			КонецЦикла;
			
			ИмяКнопки = "ГорячаяКлавиша_" + КомандыФормы.Индекс(СтрокаТЧ);
			
			НоваяКнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Форма.Элементы.ФормаГорячиеКлавиши);
			НоваяКнопка.ТолькоВоВсехДействиях = Истина;
			НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
			НоваяКоманда.Заголовок = СтрЗаменить(Команда.Заголовок, СтароеСочетаниеКлавишПредставление, "");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ГорячиеКлавишиНастроены = Истина;
	
КонецПроцедуры

// Процедура - Подписать горячие клавиши на кнопках
//
// Параметры:
//  Форма - УправляемаяФорма - Форма
//
Процедура ПодписатьГорячиеКлавишиНаКнопках(Форма) Экспорт
	
	Для каждого Команда Из Форма.Команды Цикл
		ПредставлениеСочетанияКлавиш = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(Команда.СочетаниеКлавиш);
		Если СтрНайти(Команда.Заголовок, ПредставлениеСочетанияКлавиш) = 0 Тогда
			Команда.Заголовок = Команда.Заголовок + Символы.ПС + ПредставлениеСочетанияКлавиш;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает документ ВыемкаДенежныхСредствИзКассыККМ
//
// Параметры:
//  ЧекККМ  - ДокументСсылка.ЧекККМ - Чек ККМ, для которого требуется получить отчет о розничных продажах
//
// Возвращаемое значение:
//   ДокументСсылка.ОтчетОРозничныхПродажах - Найденный документ или пустая ссылка на отчет о розничных продажах.
//
Функция ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ЧекККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ЧекККМ.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЧекККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументРеализации;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Проверить корректность заполнения алкогольной продукции
//
// Параметры:
//  ДанныеДляЕГАИС - Массив - Данные для ЕГАИС
//  Объект - ДокументОбъект - Проверяемый объект
//  Отказ - Булево - Признак отказа
//
Процедура ПроверитьЗаполнениеАкцизныхМарокЧека(Объект, Отказ) Экспорт
	
	РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС = ИнтеграцияЕГАИСВызовСервера.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.Номенклатура,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Количество,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ИдентификаторСтроки
	|ПОМЕСТИТЬ АкцизныеМарки
	|ИЗ
	|	&АкцизныеМарки КАК АкцизныеМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.Номенклатура,
	|	Товары.НоменклатураЕГАИС,
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.ОбъемДАЛ * 10
	|	ИНАЧЕ
	|		Товары.НоменклатураЕГАИС.Объем
	|	КОНЕЦ КАК Объем,
	|	Товары.Количество,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ МаркируемаяПродукция
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|	ИНАЧЕ
	|		Товары.НоменклатураЕГАИС.ВидПродукции.Маркируемый
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ИдентификаторСтроки,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ АкцизныеМаркиКоличество
	|ИЗ
	|	АкцизныеМарки КАК АкцизныеМарки
	|
	|СГРУППИРОВАТЬ ПО
	|	АкцизныеМарки.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркируемаяПродукция.НомерСтроки                КАК НомерСтроки,
	|	МаркируемаяПродукция.Номенклатура               КАК Номенклатура,
	|	МаркируемаяПродукция.НоменклатураЕГАИС          КАК НоменклатураЕГАИС,
	|	МаркируемаяПродукция.Объем                      КАК Объем,
	|	МаркируемаяПродукция.Количество                 КАК Количество,
	|	ЕСТЬNULL(АкцизныеМаркиКоличество.Количество, 0) КАК КоличествоАкцизныхМарок
	|ИЗ
	|	МаркируемаяПродукция КАК МаркируемаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ АкцизныеМаркиКоличество КАК АкцизныеМаркиКоличество
	|		ПО МаркируемаяПродукция.ИдентификаторСтроки = АкцизныеМаркиКоличество.ИдентификаторСтроки
	|ГДЕ
	|	Не МаркируемаяПродукция.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|");
	
	Запрос.УстановитьПараметр("Товары",        Объект.Товары.Выгрузить(, "Номенклатура, НоменклатураЕГАИС, ИдентификаторСтроки, Количество, НомерСтроки"));
	Запрос.УстановитьПараметр("АкцизныеМарки", Объект.АкцизныеМарки.Выгрузить(, "ИдентификаторСтроки"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС
			И Не ЗначениеЗаполнено(Выборка.НоменклатураЕГАИС) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Позиция номенклатуры %1 не сопоставлена с элементом классификатора алкогольной продукции ЕГАИС в строке %2 списка ""Товары"".'"),
					Выборка.Номенклатура,
					Выборка.НомерСтроки),
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.Объем) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Не заполнен объем для алкогольной продукции %1 в строке %2 списка ""Товары"".'"),
					Выборка.Номенклатура,
					Выборка.НомерСтроки),
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.Количество <> Выборка.КоличествоАкцизныхМарок Тогда
			
			ТекстОшибки = НСтр("ru = 'В строке %1 для %2 должно быть указано акцизных марок - %3, а указано - %4.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки,
			                        Выборка.НомерСтроки,
			                        Выборка.Номенклатура,
			                        Выборка.Количество,
			                        Выборка.КоличествоАкцизныхМарок);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "КоличествоУпаковок"),,
					Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сопоставить алкогольную продукцию с номенклатурой.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  ИмяКолонки - Строка - Имя колонки с номенклатурой ЕГАИС.
//  ЗаписыватьСправку2 - Булево - признак сопоставления по справке 2.
//  СопоставлятьПоИдентификаторуУпаковки - Булево - признак сопоставления по идентификатору.
//
Процедура СопоставитьАлкогольнуюПродукциюСНоменклатурой(Объект, ИмяКолонки = "НоменклатураЕГАИС", ЗаписыватьСправку2 = Ложь, СопоставлятьПоИдентификаторуУпаковки = Ложь, СопоставлятьПоСерии = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкиДляВыгрузки = ИмяКолонки + ", " + "Номенклатура, Характеристика";
	Если СопоставлятьПоСерии Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Серия";
	КонецЕсли;
	Если СопоставлятьПоИдентификаторуУпаковки Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", ИдентификаторУпаковки";
	КонецЕсли;
	Если ЗаписыватьСправку2 Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Справка2";
	КонецЕсли;
	Данные = Объект.Товары.Выгрузить(, КолонкиДляВыгрузки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ИмяКолонкиАлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ИмяКолонкиСерия КАК Серия,
	|	&ИмяКолонкиИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	&ИмяКолонкиСправка2 КАК Справка2
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Таблица.Справка2 КАК Справка2,
	|	Сопоставлено.АлкогольнаяПродукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок,ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок,0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И Сопоставлено.Справка2 = Таблица.Справка2
	|		 И Сопоставлено.Серия = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И СопоставленоБЕЗСерии.Справка2 = Таблица.Справка2
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяСсылкаНоменклатура
	|	И (Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|		ИЛИ Сопоставлено.АлкогольнаяПродукция <> Таблица.АлкогольнаяПродукция)
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.Справка2,
	|	Сопоставлено.АлкогольнаяПродукция
	|");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяСсылкаНоменклатура", ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустаяСправка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиАлкогольнаяПродукция", ИмяКолонки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиИдентификаторУпаковки",
		?(СопоставлятьПоИдентификаторуУпаковки, "Т.ИдентификаторУпаковки", "&ПустаяСтрока"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСерия",
		?(СопоставлятьПоСерии, "Т.Серия", "&ПустаяСерия"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСправка2",
		?(ЗаписыватьСправку2, "Т.Справка2", "&ПустаяСправка2"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
		НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
		НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура   = Выборка.Номенклатура;
		НоваяЗапись.Характеристика = Выборка.Характеристика;
		
		ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(НоваяЗапись, РегистрыСведений.СоответствиеНоменклатурыЕГАИС);
		ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		НоваяЗапись.Серия                 = Выборка.Серия;
		НоваяЗапись.АлкогольнаяПродукция  = Выборка.АлкогольнаяПродукция;
		НоваяЗапись.ИдентификаторУпаковки = Выборка.ИдентификаторУпаковки;
		НоваяЗапись.Справка2              = Выборка.Справка2;
		НоваяЗапись.Порядок               = Выборка.Порядок + 1;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет информацию о сопоставлении алкогольной продукции в табличной части
//
// Параметры:
//  ТабличнаяЧастьТовары	 - ДанныеФормыСтруктура - Табличная часть документа
//  ТабличнаяЧастьСерии	 - ДанныеФормыСтруктура - Табличная часть документа
//
Процедура ЗаполнитьАлкогольнуюПродукцию(ТабличнаяЧастьТовары, ТабличнаяЧастьСерии) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Серия КАК Серия,
	|	Серии.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.НоменклатураЕГАИС КАК АлкогольнаяПродукция,
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия) КАК Серия,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыССериями
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Серия = Серии.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТоварыССериями КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыЕГАИС.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыЕГАИС.Серия = ТабличнаяЧасть.Серия ИЛИ СоответствиеНоменклатурыЕГАИС.Серия = &ПустаяСерия)
	|ГДЕ
	|	НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
	|ИТОГИ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|;");
	
	Запрос.УстановитьПараметр("Товары", ТабличнаяЧастьТовары.Выгрузить(,"НомерСтроки, НоменклатураЕГАИС, Номенклатура, Характеристика, Серия"));
	Запрос.УстановитьПараметр("Серии", ТабличнаяЧастьСерии.Выгрузить(,"Номенклатура, Характеристика, Серия"));
	Запрос.УстановитьПараметр("ПустаяСерия", ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Имя));
	
	ВыборкаСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтроки.Следующий() Цикл
		
		СтрокаТЧ = ТабличнаяЧастьТовары.Получить(ВыборкаСтроки.НомерСтроки - 1);
		
		ВыборкаАлкогольнаяПродукция = ВыборкаСтроки.Выбрать();
		КоличествоСопоставлено = ВыборкаАлкогольнаяПродукция.Количество();
		Если КоличествоСопоставлено > 1 Тогда
			СтрокаТЧ.СопоставлениеАлкогольнаяПродукция = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), КоличествоСопоставлено);
		ИначеЕсли КоличествоСопоставлено = 1 Тогда
			СтрокаТЧ.СопоставлениеАлкогольнаяПродукция = "";
		Иначе
			СтрокаТЧ.СопоставлениеАлкогольнаяПродукция = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		Пока ВыборкаАлкогольнаяПродукция.Следующий() Цикл
			СтрокаТЧ.НоменклатураДляВыбора.Добавить(ВыборкаАлкогольнаяПродукция.АлкогольнаяПродукция);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Получает организацию ЕГАИС по складу/организации.
//
// Параметры:
//  Склад		 - СправочникСсылка.Склады - склад документа.
//  Организация	 - СправочникСсылка.Организации - организация документа.
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация ЕГАИС.
//
Функция ПолучитьОрганизациюЕГАИС(Склад, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &Склад
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Организация";
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура АрхивированиеЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АрхивированиеЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.СтатусРегламентныхОпераций В (ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчет))
	|");
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное архивирование чеков ККМ.'"));
			
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ЗаписыватьВЖурналРегистрации", Истина);
		ПараметрыЗадания.Вставить("КассоваяСмена",                Результат.Выгрузить().ВыгрузитьКолонку("КассоваяСмена"));
		ПараметрыЗадания.Вставить("ОбработкаВыполнена",           Ложь);
		
		ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончено регламентное архивирование чеков ККМ.'"));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Дата < &ДатаХраненияЧеков
	|	И КассоваяСмена.СтатусРегламентныхОпераций В (ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчет),
	|                                                 ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы))
	|";
	
	КоличествоДнейХраненияЧеков = Константы.КоличествоДнейХраненияЗаархивированныхЧеков.Получить() * 86400;
	ДатаХраненияЧеков = ТекущаяДатаСеанса() - КоличествоДнейХраненияЧеков;
	
	Запрос.УстановитьПараметр("ДатаХраненияЧеков", ДатаХраненияЧеков);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное удаление чеков ККМ.'"));
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ЗаписыватьВЖурналРегистрации", Истина);
		ПараметрыЗадания.Вставить("КассоваяСмена", Результат.Выгрузить().ВыгрузитьКолонку("КассоваяСмена"));
		ПараметрыЗадания.Вставить("ОбработкаВыполнена", Ложь);
		
		ВыполнитьУдалениеЧековККМ(ПараметрыЗадания);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончено регламентное удаление чеков ККМ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеОтложенныхЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеОтложенныхЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Начато регламентное удаление отложенных чеков ККМ.'"));
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = ВыбратьОтложенныеЧекиККМДляУдаления();
		Пока Выборка.Следующий() Цикл
			
			ОписаниеОшибки = "";
			
			ЧекККМОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		                         УровеньЖурналаРегистрации.Ошибка, , ,
		                         НСтр("ru = 'Во время регламентного удаления отложенных чеков ККМ произошла ошибка.'")
		                         + Символы.ПС + ОписаниеОшибки);
		Возврат;
		
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Закончено регламентное удаление отложенных чеков ККМ.'"));
	
КонецПроцедуры

// Выполняет архивацию чеков ККМ по кассовой смене.
//
// Параметры:
//  ПараметрыЗадания  - Структура - Параметры регламентного задания
//  АдресХранилища - Строка - Адрес во временном хранилище
//
Процедура ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания, АдресХранилища="") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.КассоваяСмена КАК КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.Архивный
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМ.КассоваяСмена В(&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.Архивный
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМВозврат.КассоваяСмена В(&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) КАК Ссылка,
	|	ДокументКассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК ДокументКассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ДокументКассоваяСмена.Ссылка = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ДокументКассоваяСмена.Ссылка В (&КассоваяСмена)
	|
	|ИТОГИ ПО
	|	КассоваяСмена");
	
	Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыЗадания.КассоваяСмена);
	ВыборкаКассовыхСмен = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКассовыхСмен.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Отказ = Ложь;
			
			// Первый этап. Статус смены - Закрыта, чеки заархивированы.
			КассоваяСменаОбъект = ВыборкаКассовыхСмен.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.СтатусРегламентныхОпераций = Перечисления.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы;
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			// Второй этап. Архивирование чеков и полное проведение отчета о розничных продажах.
			ВыборкаДокументов = ВыборкаКассовыхСмен.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ДенежныеСредстваВКассахККМ.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ДенежныеСредстваВПути.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				БлокировкаДанных.Заблокировать();
				
			КонецЦикла;
			
			ВыборкаДокументов.Сбросить();
			Пока ВыборкаДокументов.Следующий() Цикл
				Если НЕ ВыборкаДокументов.Ссылка.Пустая() Тогда
					ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
					Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ")
						ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
						
						ДокументОбъект.Архивный = Истина;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						
					ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
						ДокументОбъект.ПометкаУдаления = Ложь;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				Иначе
					Отказ = Истина;
					ОписаниеОшибки = НСтр("ru='По кассовой смене %КассоваяСмена% не создан Отчет о розничных продажах'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КассоваяСмена%", ВыборкаДокументов.КассоваяСмена);
					Если ПараметрыЗадания.Свойство("ЗаписыватьВЖурналРегистрации") И ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка, , ,
							НСтр("ru = 'Во время регламентного архивирования чеков ККМ произошла ошибка.'")
							+ Символы.ПС + ОписаниеОшибки);
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					КонецЕсли;
				КонецЕсли
			КонецЦикла;
			
			Если Отказ Тогда
				ОтменитьТранзакцию();
				Результат = Ложь;
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При архивации чеков ККМ произошла ошибка.
			                      |Архивация чеков ККМ не выполнена.
			                      |Дополнительное описание:
			                      |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
			Если ПараметрыЗадания.Свойство("ЗаписыватьВЖурналРегистрации") И ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , ,
					НСтр("ru = 'Во время регламентного архивирования чеков ККМ произошла ошибка.'")
					+ Символы.ПС + ОписаниеОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	ПараметрыЗадания.ОбработкаВыполнена = Результат;
	
	Если НЕ ПустаяСтрока(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление чеков ККМ по кассовой смене.
//
// Параметры:
//  ПараметрыЗадания  - Структура - Параметры регламентного задания
//  АдресХранилища - Строка - Адрес во временном хранилище
//
Процедура ВыполнитьУдалениеЧековККМ(ПараметрыЗадания, АдресХранилища = "") Экспорт
	
	ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания, АдресХранилища);
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалениеВыполнено = ПараметрыЗадания.ОбработкаВыполнена;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка,
		|	ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
		|	ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.КассоваяСмена В(&КассоваяСмена)
		|	И ОтчетОРозничныхПродажах.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМ.Ссылка КАК Ссылка,
		|	ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Проведен
		|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ЧекККМ.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.Ссылка,
		|	ЧекККМВозврат.КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	ЧекККМВозврат.Проведен
		|	И ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМВозврат.КассоваяСмена В(&КассоваяСмена)
		|	И ЧекККМВозврат.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|ИТОГИ ПО
		|	КассоваяСмена");

	Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыЗадания.КассоваяСмена);
	Результат = Запрос.Выполнить();
	
	ВыборкаКассовыхСмен =Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКассовыхСмен.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// Первый этап. Удаление чеков, отчетов о розничных продажах, чеков из возвратов.
			ВыборкаДокументов = ВыборкаКассовыхСмен.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") ТОгда
					
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ЧекККМ = Неопределено;
					ДокументОбъект.Записать();
					
				ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
					
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.КассоваяСмена = Неопределено;
					ДокументОбъект.Записать();
					
				ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") 
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
					
					ДокументОбъект.Удалить();
					
				КонецЕсли;
			КонецЦикла;
			
			// Второй этап. Удаление кассовых смен.
			КассоваяСменаОбъект = ВыборкаКассовыхСмен.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.Удалить();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОписаниеОшибки = НСтр("ru = 'При удалении чеков ККМ произошла ошибка.
			                      |Удаление чеков ККМ не выполнено.
			                      |Дополнительное описание:
			                      |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
			Если ПараметрыЗадания.Свойство("ЗаписыватьВЖурналРегистрации") И ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , ,
					НСтр("ru = 'Во время регламентного удаления чеков ККМ произошла ошибка.'")
					+ Символы.ПС + ОписаниеОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
			УдалениеВыполнено = Ложь;
			
		КонецПопытки;
	КонецЦикла;
	
	ПараметрыЗадания.ОбработкаВыполнена = УдалениеВыполнено;
	
	Если НЕ ПустаяСтрока(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОткрытияИЗакрытияКассовойСмены

// Выполняет открытие кассовой смены.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Параметры регламентного задания
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  Булево - Истина, Если операция выполнена успешно
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если СтруктураСостояниеКассовойСмены.Ошибка24Часа Тогда
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = ОписаниеОшибки24Часа();
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		НоваяКассоваяСмена.Заполнить(Новый Структура("КассаККМ", КассаККМ));
		
		НоваяКассоваяСмена.Организация            = СтруктураСостояниеКассовойСмены.Организация;
		НоваяКассоваяСмена.КассаККМ               = КассаККМ;
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус                 = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = ПолучитьТекстОшибкиЗаполненияОтчета();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет закрытие кассовой смены.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Касса ККМ.
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  ДокументСссылка.КассоваяСмена, Неопределено - Закрытая кассовая смена.
//
Функция ЗакрытьКассовуюСмену(Объект, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(Объект);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта
		Или (СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Закрыта
		  И  СтруктураСостояниеКассовойСмены.СтатусРегламентныхОпераций = Перечисления.СтатусыРегламентныхОперацийКассовойСмены.ПустаяСсылка()) Тогда
		
		Если СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса <= ТекущаяДатаСеанса() Тогда
		
			КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.Статус                     = Перечисления.СтатусыКассовойСмены.Закрыта;
			КассоваяСменаОбъект.СтатусРегламентныхОпераций = Перечисления.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчет;
			КассоваяСменаОбъект.ОкончаниеКассовойСмены     = ТекущаяДатаСеанса();
			Попытка
				КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				Результат = Ложь;
				
				ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
				                            |Дополнительное описание:
				                            |%ДополнительноеОписание%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
				
			КонецПопытки;
			
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Дополнительное описание:
			                            |Дата закрытия кассовой смены меньше даты последнего изменения статуса кассовой смены.'");
		КонецЕсли;
		
	Иначе
		
		// Смена не открыта.
		
	КонецЕсли;
	
	Возврат ?(Результат, СтруктураСостояниеКассовойСмены.КассоваяСмена, Неопределено);
	
КонецФункции

// Выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
// Параметры:
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Кассовая смена
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхПродажах - Ссылка на отчет, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск отчета о розничных продажах
	ОтчетОРозничныхПродажах = НайтиОтчетОРозничныхПродажах(КассоваяСмена);
	Если ОтчетОРозничныхПродажах = Неопределено Тогда
		ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Иначе
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, КассоваяСмена, ОписаниеОшибки);
	
КонецФункции

// Выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
// Параметры:
//  ОтчетОРозничныхПродажахОбъект - ДокументОбъект.ОтчетОРозничныхПродажах - Заполняемый документ
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Кассовая смена
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхПродажах - Ссылка на отчет, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение отчета о розничных продажах
	Попытка
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Подготовка данных.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка                    КАК Ссылка,
		|	ЧекККМТовары.КлючСвязи                 КАК КлючСвязи,
		|	ЧекККМТовары.НоменклатураНабора        КАК НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора      КАК ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура              КАК Номенклатура,
		|	ЧекККМТовары.Характеристика            КАК Характеристика,
		|	ЧекККМТовары.Серия                     КАК Серия,
		|	ЧекККМТовары.Упаковка                  КАК Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА
		|			ЧекККМТовары.СуммаРучнойСкидки + ЧекККМТовары.СуммаАвтоматическойСкидки = 0
		|			ИЛИ ЧекККМТовары.КоличествоУпаковок = 0
		|		ТОГДА
		|			ЧекККМТовары.Цена
		|		ИНАЧЕ
		|			ЧекККМТовары.Сумма / ЧекККМТовары.КоличествоУпаковок
		|	КОНЕЦ КАК Число(15,2)) КАК Цена,
		|	ЧекККМТовары.СтавкаНДС                 КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок        КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество                КАК Количество,
		|	ЧекККМТовары.Сумма                     КАК Сумма,
		|	ЧекККМТовары.СуммаНДС                  КАК СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад              КАК Склад,
		|	ЧекККМТовары.Ссылка.Партнер            КАК Партнер,
		|	ЧекККМТовары.Помещение                 КАК Помещение,
		|	ЧекККМТовары.Продавец                  КАК Продавец,
		|	ЧекККМТовары.Ссылка.Валюта             КАК Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены            КАК ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ           КАК КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация        КАК Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС
		|	
		|ПОМЕСТИТЬ Товары
		|	
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка,
		|	0,
		|	ЧекККМТовары.НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Серия,
		|	ЧекККМТовары.Упаковка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.СтавкаНДС,
		|	-ЧекККМТовары.КоличествоУпаковок,
		|	-ЧекККМТовары.Количество,
		|	-ЧекККМТовары.Сумма,
		|	-ЧекККМТовары.СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад,
		|	ЧекККМТовары.Ссылка.Партнер,
		|	ЧекККМТовары.Помещение,
		|	ЧекККМТовары.Продавец,
		|	ЧекККМТовары.Ссылка.Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка               КАК Ссылка,
		|	ЧекККМТовары.НоменклатураНабора   КАК НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура       КАК Номенклатура,
		|	ЧекККМТовары.Характеристика     КАК Характеристика,
		|	ЧекККМТовары.Серия              КАК Серия,
		|	ЧекККМТовары.Упаковка           КАК Упаковка,
		|	ЧекККМТовары.Цена               КАК Цена,
		|	ЧекККМТовары.СтавкаНДС          КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество         КАК Количество,
		|	ЧекККМТовары.Сумма              КАК Сумма,
		|	ЧекККМТовары.СуммаНДС           КАК СуммаНДС,
		|	ЧекККМТовары.Склад              КАК Склад,
		|	ЧекККМТовары.Партнер            КАК Партнер,
		|	ЧекККМТовары.Помещение          КАК Помещение,
		|	ЧекККМТовары.Продавец           КАК Продавец,
		|	ЧекККМТовары.Валюта             КАК Валюта,
		|	ЧекККМТовары.ВидЦены            КАК ВидЦены,
		|	ЧекККМТовары.КассаККМ           КАК КассаККМ,
		|	ЧекККМТовары.Организация        КАК Организация,
		|	ЧекККМТовары.НалогообложениеНДС КАК НалогообложениеНДС
		|	
		|ПОМЕСТИТЬ СписокТоваров
		|ИЗ
		|	Товары КАК ЧекККМТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЧекиККМ
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекиККМ.Ссылка КАК Ссылка
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|	СписокТоваров.Склад КАК Склад
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.НоменклатураНабора   КАК НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Серия КАК Серия,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
		|Из
		|	Документ.КассоваяСмена КАК КассоваяСмена
		|ГДЕ КассоваяСмена.Ссылка = &КассоваяСмена
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Формирование таблиц индексов по аналитике и номенклатуре
		ТаблицаИндексовПоАналитике = МассивРезультатов[4].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоАналитике,"Индекс");
		
		ТаблицаИндексовПоНоменклатуре = МассивРезультатов[5].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоНоменклатуре,"Индекс");
		
		ВыборкаРеквизитыКассовойСмены = МассивРезультатов[6].Выбрать();
		ВыборкаРеквизитыКассовойСмены.Следующий();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоАналитике,
		|	ТаблицаИндексов.Валюта КАК Валюта,
		|	ТаблицаИндексов.ВидЦены КАК ВидЦены,
		|	ТаблицаИндексов.КассаККМ КАК КассаККМ,
		|	ТаблицаИндексов.Организация КАК Организация,
		|	ТаблицаИндексов.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ТаблицаИндексов.Склад КАК Склад
		|ПОМЕСТИТЬ ИндексыПоАналитике
		|ИЗ
		|	&ТаблицаИндексовПоАналитике КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта,
		|	ВидЦены,
		|	КассаККМ,
		|	Организация,
		|	НалогообложениеНДС,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоНоменклатуре,
		|	ТаблицаИндексов.НоменклатураНабора   КАК НоменклатураНабора,
		|	ТаблицаИндексов.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ТаблицаИндексов.Номенклатура КАК Номенклатура,
		|	ТаблицаИндексов.Характеристика КАК Характеристика,
		|	ТаблицаИндексов.Серия КАК Серия,
		|	ТаблицаИндексов.Упаковка КАК Упаковка,
		|	ТаблицаИндексов.Цена КАК Цена,
		|	ТаблицаИндексов.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ИндексыПоНоменклатуре
		|ИЗ
		|	&ТаблицаИндексовПоНоменклатуре КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураНабора,
		|	ХарактеристикаНабора,
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Упаковка,
		|	Цена,
		|	СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокТоваров.НоменклатураНабора   КАК НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Серия КАК Серия,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.Партнер КАК Партнер,
		|	СписокТоваров.Помещение КАК Помещение,
		|	СписокТоваров.Продавец КАК Продавец,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(СписокТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(СписокТоваров.Количество) КАК Количество,
		|	СУММА(СписокТоваров.Сумма) КАК Сумма,
		|	СУММА(СписокТоваров.СуммаНДС) КАК СуммаНДС,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре КАК ИндексПоНоменклатуре,
		|	СписокТоваров.Склад КАК Склад,
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокТоваров.НоменклатураНабора   КАК НоменклатураНабора,
		|		СписокТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|		СписокТоваров.Номенклатура КАК Номенклатура,
		|		СписокТоваров.Характеристика КАК Характеристика,
		|		СписокТоваров.Серия КАК Серия,
		|		СписокТоваров.Упаковка КАК Упаковка,
		|		СписокТоваров.Цена КАК Цена,
		|		СписокТоваров.Партнер КАК Партнер,
		|		СписокТоваров.Помещение КАК Помещение,
		|		СписокТоваров.Продавец КАК Продавец,
		|		СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|		СписокТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
		|		СписокТоваров.Количество КАК Количество,
		|		СписокТоваров.Сумма КАК Сумма,
		|		СписокТоваров.СуммаНДС КАК СуммаНДС,
		|		СписокТоваров.Склад КАК Склад,
		|		СписокТоваров.Валюта КАК Валюта,
		|		СписокТоваров.ВидЦены КАК ВидЦены,
		|		СписокТоваров.КассаККМ КАК КассаККМ,
		|		СписокТоваров.Организация КАК Организация,
		|		СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС
		|	ИЗ
		|		СписокТоваров КАК СписокТоваров) КАК СписокТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО СписокТоваров.Склад = ИндексыПоАналитике.Склад
		|			И СписокТоваров.Валюта = ИндексыПоАналитике.Валюта
		|			И СписокТоваров.ВидЦены = ИндексыПоАналитике.ВидЦены
		|			И СписокТоваров.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И СписокТоваров.Организация = ИндексыПоАналитике.Организация
		|			И СписокТоваров.НалогообложениеНДС = ИндексыПоАналитике.НалогообложениеНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоНоменклатуре КАК ИндексыПоНоменклатуре
		|		ПО СписокТоваров.Номенклатура = ИндексыПоНоменклатуре.Номенклатура
		|			И СписокТоваров.НоменклатураНабора = ИндексыПоНоменклатуре.НоменклатураНабора
		|			И СписокТоваров.ХарактеристикаНабора = ИндексыПоНоменклатуре.ХарактеристикаНабора
		|			И СписокТоваров.Характеристика = ИндексыПоНоменклатуре.Характеристика
		|			И СписокТоваров.Серия = ИндексыПоНоменклатуре.Серия
		|			И СписокТоваров.Упаковка = ИндексыПоНоменклатуре.Упаковка
		|			И СписокТоваров.Цена = ИндексыПоНоменклатуре.Цена
		|			И СписокТоваров.СтавкаНДС = ИндексыПоНоменклатуре.СтавкаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокТоваров.НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура,
		|	СписокТоваров.Характеристика,
		|	СписокТоваров.Серия,
		|	СписокТоваров.СтавкаНДС,
		|	СписокТоваров.Упаковка,
		|	СписокТоваров.Цена,
		|	СписокТоваров.Партнер,
		|	СписокТоваров.Помещение,
		|	СписокТоваров.Продавец,
		|	ИндексыПоНоменклатуре.СтавкаНДС,
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре,
		|	СписокТоваров.Склад,
		|	СписокТоваров.Валюта,
		|	СписокТоваров.ВидЦены,
		|	СписокТоваров.КассаККМ,
		|	СписокТоваров.Организация,
		|	СписокТоваров.НалогообложениеНДС
		|ИТОГИ
		|	МАКСИМУМ(НоменклатураНабора),
		|	МАКСИМУМ(ХарактеристикаНабора),
		|	МАКСИМУМ(Номенклатура),
		|	МАКСИМУМ(Характеристика),
		|	МАКСИМУМ(Серия),
		|	МАКСИМУМ(Упаковка),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Партнер),
		|	МАКСИМУМ(Помещение),
		|	МАКСИМУМ(Продавец),
		|	МАКСИМУМ(СтавкаНДС),
		|	МАКСИМУМ(КоличествоУпаковок),
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(СуммаНДС),
		|	МАКСИМУМ(Склад),
		|	МАКСИМУМ(Валюта),
		|	МАКСИМУМ(ВидЦены),
		|	МАКСИМУМ(КассаККМ),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(НалогообложениеНДС)
		|ПО
		|	ИндексПоАналитике,
		|	ИндексПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.КодАвторизации КАК КодАвторизации,
		|	ОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|		ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|		ЧекККМОплатаПлатежнымиКартами.КодАвторизации КАК КодАвторизации,
		|		ЧекККМОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Организация КАК Организация,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Склад КАК Склад,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Валюта КАК Валюта,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВидЦены КАК ВидЦены
		|	ИЗ
		|		Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ЧекККМОплатаПлатежнымиКартами
		|	ГДЕ
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.КодАвторизации,
		|		-ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассаККМ,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Организация,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Склад,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Валюта,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВидЦены
		|	ИЗ
		|		Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК ЧекККМВозвратОплатаПлатежнымиКартами
		|	ГДЕ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ОплатаОтменена
		|		И ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)) КАК ОплатаПлатежнымиКартами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО ОплатаПлатежнымиКартами.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И ОплатаПлатежнымиКартами.Организация = ИндексыПоАналитике.Организация
		|			И ОплатаПлатежнымиКартами.Склад = ИндексыПоАналитике.Склад
		|			И ОплатаПлатежнымиКартами.Валюта = ИндексыПоАналитике.Валюта
		|			И ОплатаПлатежнымиКартами.ВидЦены = ИндексыПоАналитике.ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Помещение                      КАК Помещение,
		|	Серии.Серия                          КАК Серия,
		|	Серии.Номенклатура                   КАК Номенклатура,
		|	Серии.Характеристика                 КАК Характеристика,
		|	СУММА(Серии.Количество)              КАК Количество,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМСерии.Помещение КАК Помещение,
		|		ЧекККМСерии.Серия КАК Серия,
		|		ЧекККМСерии.Номенклатура КАК Номенклатура,
		|		ЧекККМСерии.Характеристика КАК Характеристика,
		|		ЧекККМСерии.Количество КАК Количество,
		|		ЧекККМСерии.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМСерии.Ссылка.Организация КАК Организация,
		|		ЧекККМСерии.Ссылка.Склад КАК Склад,
		|		ЧекККМСерии.Ссылка.Валюта КАК Валюта,
		|		ЧекККМСерии.Ссылка.ВидЦены КАК ВидЦены
		|	ИЗ
		|		Документ.ЧекККМ.Серии КАК ЧекККМСерии
		|	ГДЕ
		|		ЧекККМСерии.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратСерии.Помещение,
		|		ЧекККМВозвратСерии.Серия,
		|		ЧекККМВозвратСерии.Номенклатура,
		|		ЧекККМВозвратСерии.Характеристика,
		|		-ЧекККМВозвратСерии.Количество,
		|		ЧекККМВозвратСерии.Ссылка.КассаККМ,
		|		ЧекККМВозвратСерии.Ссылка.Организация,
		|		ЧекККМВозвратСерии.Ссылка.Склад,
		|		ЧекККМВозвратСерии.Ссылка.Валюта,
		|		ЧекККМВозвратСерии.Ссылка.ВидЦены
		|	ИЗ
		|		Документ.ЧекККМВозврат.Серии КАК ЧекККМВозвратСерии
		|	ГДЕ
		|		ЧекККМВозвратСерии.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)) КАК Серии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО Серии.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И Серии.Организация = ИндексыПоАналитике.Организация
		|			И Серии.Склад = ИндексыПоАналитике.Склад
		|			И Серии.Валюта = ИндексыПоАналитике.Валюта
		|			И Серии.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	Серии.Помещение,
		|	Серии.Серия,
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	ИндексыПоАналитике.ИндексПоАналитике
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодарочныеСертификаты.ПодарочныйСертификат           КАК ПодарочныйСертификат,
		|	СУММА(ПодарочныеСертификаты.Количество)              КАК Количество,
		|	СУММА(ПодарочныеСертификаты.Сумма)                   КАК Сумма,
		|	СУММА(ПодарочныеСертификаты.СуммаВВалютеСертификата) КАК СуммаВВалютеСертификата,
		|	ИндексыПоАналитике.ИндексПоАналитике                 КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМПодарочныеСертификаты.ПодарочныйСертификат    КАК ПодарочныйСертификат,
		|		1                                                   КАК Количество,
		|		ЧекККМПодарочныеСертификаты.Сумма                   КАК Сумма,
		|		ЧекККМПодарочныеСертификаты.СуммаВВалютеСертификата КАК СуммаВВалютеСертификата,
		|		ЧекККМПодарочныеСертификаты.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМПодарочныеСертификаты.Ссылка.Организация КАК Организация,
		|		ЧекККМПодарочныеСертификаты.Ссылка.Склад КАК Склад,
		|		ЧекККМПодарочныеСертификаты.Ссылка.Валюта КАК Валюта,
		|		ЧекККМПодарочныеСертификаты.Ссылка.ВидЦены КАК ВидЦены
		|	ИЗ
		|		Документ.ЧекККМ.ПодарочныеСертификаты КАК ЧекККМПодарочныеСертификаты
		|	ГДЕ
		|		ЧекККМПодарочныеСертификаты.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)) КАК ПодарочныеСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО ПодарочныеСертификаты.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И ПодарочныеСертификаты.Организация = ИндексыПоАналитике.Организация
		|			И ПодарочныеСертификаты.Склад = ИндексыПоАналитике.Склад
		|			И ПодарочныеСертификаты.Валюта = ИндексыПоАналитике.Валюта
		|			И ПодарочныеСертификаты.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ПодарочныеСертификаты.ПодарочныйСертификат,
		|	ИндексыПоАналитике.ИндексПоАналитике
		|ИМЕЮЩИЕ(СУММА(ПодарочныеСертификаты.Количество) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике          КАК ИндексПоАналитике,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности     КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления                  КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                    КАК ДатаСписания,
		|	БонусныеБаллы.Партнер                         КАК Партнер,
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов)      КАК СуммаБонусныхБаллов
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	БонусныеБаллы.Ссылка.КассаККМ    КАК КассаККМ,
		|	БонусныеБаллы.Ссылка.Организация КАК Организация,
		|	БонусныеБаллы.Ссылка.Склад       КАК Склад,
		|	БонусныеБаллы.Ссылка.Валюта      КАК Валюта,
		|	БонусныеБаллы.Ссылка.ВидЦены     КАК ВидЦены,
		|	БонусныеБаллы.Ссылка.Партнер     КАК Партнер,
		
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления              КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                КАК ДатаСписания,
		|	БонусныеБаллы.СуммаБонусныхБаллов         КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМ.БонусныеБаллы КАК БонусныеБаллы
		|ГДЕ
		|	БонусныеБаллы.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БонусныеБаллы.Ссылка.КассаККМ    КАК КассаККМ,
		|	БонусныеБаллы.Ссылка.Организация КАК Организация,
		|	БонусныеБаллы.Ссылка.Склад       КАК Склад,
		|	БонусныеБаллы.Ссылка.Валюта      КАК Валюта,
		|	БонусныеБаллы.Ссылка.ВидЦены     КАК ВидЦены,
		|	БонусныеБаллы.Ссылка.Партнер     КАК Партнер,
		
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления              КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                КАК ДатаСписания,
		|	-БонусныеБаллы.СуммаБонусныхБаллов        КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМВозврат.БонусныеБаллы КАК БонусныеБаллы
		|ГДЕ
		|	БонусныеБаллы.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|) КАК БонусныеБаллы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО БонусныеБаллы.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И БонусныеБаллы.Организация = ИндексыПоАналитике.Организация
		|			И БонусныеБаллы.Склад = ИндексыПоАналитике.Склад
		|			И БонусныеБаллы.Валюта = ИндексыПоАналитике.Валюта
		|			И БонусныеБаллы.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	БонусныеБаллы.ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.Партнер
		|ИМЕЮЩИЕ
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике          КАК ИндексПоАналитике,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности     КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаОплаты                  КАК ДатаОплаты,
		|	БонусныеБаллы.Партнер                         КАК Партнер,
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов)      КАК СуммаБонусныхБаллов
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	Таблица.Ссылка.КассаККМ    КАК КассаККМ,
		|	Таблица.Ссылка.Организация КАК Организация,
		|	Таблица.Ссылка.Склад       КАК Склад,
		|	Таблица.Ссылка.Валюта      КАК Валюта,
		|	Таблица.Ссылка.ВидЦены     КАК ВидЦены,
		|	Таблица.Ссылка.Партнер     КАК Партнер,
		|
		|	Таблица.Ссылка.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	Таблица.Ссылка.Дата                                                 КАК ДатаОплаты,
		|	Таблица.СуммаБонусныхБалловКСписанию                                КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.КассаККМ    КАК КассаККМ,
		|	ЧекККМВозврат.Организация КАК Организация,
		|	ЧекККМВозврат.Склад       КАК Склад,
		|	ЧекККМВозврат.Валюта      КАК Валюта,
		|	ЧекККМВозврат.ВидЦены     КАК ВидЦены,
		|	ЧекККМВозврат.Партнер     КАК Партнер,
		
		|	ЧекККМВозврат.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	ЧекККМВозврат.Дата                                                 КАК ДатаОплаты,
		|	-ЧекККМВозврат.СуммаБонусныхБалловКВозврату                        КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	БонусныеБаллы.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|
		|) КАК БонусныеБаллы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО БонусныеБаллы.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И БонусныеБаллы.Организация = ИндексыПоАналитике.Организация
		|			И БонусныеБаллы.Склад = ИндексыПоАналитике.Склад
		|			И БонусныеБаллы.Валюта = ИндексыПоАналитике.Валюта
		|			И БонусныеБаллы.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	БонусныеБаллы.ДатаОплаты,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.Партнер
		|ИМЕЮЩИЕ
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов) <> 0;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	АкцизныеМарки.Справка2               КАК Справка2,
		|	АкцизныеМарки.АкцизнаяМарка          КАК АкцизнаяМарка
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		Таблица.Ссылка.КассаККМ    КАК КассаККМ,
		|		Таблица.Ссылка.Организация КАК Организация,
		|		Таблица.Ссылка.Склад       КАК Склад,
		|		Таблица.Ссылка.Валюта      КАК Валюта,
		|		Таблица.Ссылка.ВидЦены     КАК ВидЦены,
		|		Таблица.Справка2           КАК Справка2,
		|		Таблица.АкцизнаяМарка      КАК АкцизнаяМарка,
		|		1                          КАК КоличествоАкцизов
		|	ИЗ
		|		Документ.ЧекККМ.АкцизныеМарки КАК Таблица
		|	ГДЕ
		|		Таблица.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Таблица.Ссылка.КассаККМ    КАК КассаККМ,
		|		Таблица.Ссылка.Организация КАК Организация,
		|		Таблица.Ссылка.Склад       КАК Склад,
		|		Таблица.Ссылка.Валюта      КАК Валюта,
		|		Таблица.Ссылка.ВидЦены     КАК ВидЦены,
		|		Таблица.Справка2           КАК Справка2,
		|		Таблица.АкцизнаяМарка      КАК АкцизнаяМарка,
		|		-1                         КАК КоличествоАкцизов
		|	ИЗ
		|		Документ.ЧекККМВозврат.АкцизныеМарки КАК Таблица
		|	ГДЕ
		|		Таблица.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|
		|	) КАК АкцизныеМарки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО АкцизныеМарки.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И АкцизныеМарки.Организация = ИндексыПоАналитике.Организация
		|			И АкцизныеМарки.Склад = ИндексыПоАналитике.Склад
		|			И АкцизныеМарки.Валюта = ИндексыПоАналитике.Валюта
		|			И АкцизныеМарки.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	АкцизныеМарки.Справка2,
		|	АкцизныеМарки.АкцизнаяМарка
		|ИМЕЮЩИЕ
		|	СУММА(АкцизныеМарки.КоличествоАкцизов) > 0;
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаИндексовПоАналитике", ТаблицаИндексовПоАналитике);
		Запрос.УстановитьПараметр("ТаблицаИндексовПоНоменклатуре", ТаблицаИндексовПоНоменклатуре);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ОплатаПлатежнымиКартами = Результат[3].Выгрузить();
		Серии                   = Результат[4].Выгрузить();
		ПодарочныеСертификаты   = Результат[5].Выгрузить();
		БонусныеБаллы           = Результат[6].Выгрузить();
		ОплатаБонуснымиБаллами  = Результат[7].Выгрузить();
		АкцизныеМарки           = Результат[8].Выгрузить();
	
		ОплатаПлатежнымиКартами.Индексы.Добавить("ИндексПоАналитике");
		Серии.Индексы.Добавить("ИндексПоАналитике");
		ПодарочныеСертификаты.Индексы.Добавить("ИндексПоАналитике");
		БонусныеБаллы.Индексы.Добавить("ИндексПоАналитике");
		ОплатаБонуснымиБаллами.Индексы.Добавить("ИндексПоАналитике");
		АкцизныеМарки.Индексы.Добавить("ИндексПоАналитике");
		
		ВыборкаПоАналитике = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоАналитике.Количество() > 1 Тогда
			ВызватьИсключение НСтр("ru = 'По кассовой смене зарегистрировано несколько аналитик. Создание отчета о розничных продажах невозможно'");
		КонецЕсли;
		
		// Очистим табличные части документа.
		ОтчетОРозничныхПродажахОбъект.Товары.Очистить();
		ОтчетОРозничныхПродажахОбъект.Серии.Очистить();
		ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Очистить();
		ОтчетОРозничныхПродажахОбъект.ВидыЗапасов.Очистить();
		ОтчетОРозничныхПродажахОбъект.ПодарочныеСертификаты.Очистить();
		ОтчетОРозничныхПродажахОбъект.НачислениеБонусныхБаллов.Очистить();
		ОтчетОРозничныхПродажахОбъект.ОплатаБонуснымиБаллами.Очистить();
		ОтчетОРозничныхПродажахОбъект.АкцизныеМарки.Очистить();
	
		Пока ВыборкаПоАналитике.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажахОбъект, ВыборкаПоАналитике);
			
			ВыборкаПоАналитикеНоменклатуры = ВыборкаПоАналитике.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоАналитикеНоменклатуры.Следующий() Цикл
				
				ВыборкаДетальныеЗаписи = ВыборкаПоАналитикеНоменклатуры.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.Количество <> 0 Тогда
						
						СтрокаТабличнойЧастиТовары = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТовары, ВыборкаДетальныеЗаписи);
						СтрокаТабличнойЧастиТовары.Цена = Окр(СтрокаТабличнойЧастиТовары.Сумма / СтрокаТабличнойЧастиТовары.КоличествоУпаковок, 15, 2);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Заполнение табличной части "Оплата платежными картами".
			МассивСтрок = ОплатаПлатежнымиКартами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "Серии".
			МассивСтрок = Серии.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Количество <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "Подарочные сертификаты".
			МассивСтрок = ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ПодарочныеСертификаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "БонусныеБаллы".
			МассивСтрок = БонусныеБаллы.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.НачислениеБонусныхБаллов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			// Заполнение табличной части "ОплатаБонуснымиБаллами".
			МассивСтрок = ОплатаБонуснымиБаллами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаБонуснымиБаллами.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			// Заполнение табличной части "АкцизныеМарки".
			МассивСтрок = АкцизныеМарки.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.АкцизныеМарки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			ОтчетОРозничныхПродажахОбъект.Дата            = ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены;
			ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС = ОтчетОРозничныхПродажахОбъект.ВидЦены.ЦенаВключаетНДС;
			ОтчетОРозничныхПродажахОбъект.КассоваяСмена   = КассоваяСмена;
			ОтчетОРозничныхПродажахОбъект.СуммаДокумента  = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажахОбъект.Товары, ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС);
			
			ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОтчетОРозничныхПродажахОбъект);
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
				ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
				ОтчетОРозничныхПродажахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхПродажахОбъект.Ответственный, ОтчетОРозничныхПродажахОбъект.Подразделение);
			КонецЕсли;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект, ПараметрыУказанияСерий);
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС) Тогда
				ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
					ОтчетОРозничныхПродажахОбъект.Организация,
					ОтчетОРозничныхПродажахОбъект.Склад,
					ОтчетОРозничныхПродажахОбъект.Дата);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.ОрганизацияЕГАИС) Тогда
				ОтчетОРозничныхПродажахОбъект.ОрганизацияЕГАИС = РозничныеПродажи.ПолучитьОрганизациюЕГАИС(
					ОтчетОРозничныхПродажахОбъект.Склад,
					ОтчетОРозничныхПродажахОбъект.Организация);
			КонецЕсли;
			
			Если ОтчетОРозничныхПродажахОбъект.Проведен Тогда
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
		
		// По кассовой смене не продано товара
		Если ВыборкаПоАналитике.Количество() = 0 Тогда
			
			ОтчетОРозничныхПродажахОбъект.Дата           = ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены;
			ОтчетОРозничныхПродажахОбъект.КассоваяСмена  = КассоваяСмена;
			
			ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОтчетОРозничныхПродажахОбъект);
			
			// Заполняет отчет о розничных продажах данными по текущей кассовой смене.
			РеквизитыКассовойСмены = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассоваяСмена, "КассаККМ, ФискальноеУстройство");
			Если ЗначениеЗаполнено(РеквизитыКассовойСмены.КассаККМ) Тогда
				СтруктуруСостояниеКассовойСмены = ПолучитьРеквизитыКассовойСменыНаДату(РеквизитыКассовойСмены.КассаККМ, ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены);
			Иначе
				СтруктуруСостояниеКассовойСмены = ПолучитьРеквизитыКассовойСменыНаДату(РеквизитыКассовойСмены.ФискальноеУстройство, ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажахОбъект, СтруктуруСостояниеКассовойСмены, , "КассоваяСмена");
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
				ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
				ОтчетОРозничныхПродажахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхПродажахОбъект.Ответственный, ОтчетОРозничныхПродажахОбъект.Подразделение);
			КонецЕсли;
			
			ОтчетОРозничныхПродажахОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажахОбъект.Товары, ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС);
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект, ПараметрыУказанияСерий);
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС) Тогда
				ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
					ОтчетОРозничныхПродажахОбъект.Организация,
					ОтчетОРозничныхПродажахОбъект.Склад,
					ОтчетОРозничныхПродажахОбъект.Дата);
			КонецЕсли;
			
			Если ОтчетОРозничныхПродажахОбъект.Проведен Тогда
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ОтчетОРозничныхПродажахОбъект.Ссылка;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru = 'При создании отчета о розничных продажах произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		Возврат ?(ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ссылка), ОтчетОРозничныхПродажахОбъект.Ссылка, Неопределено);
		
	КонецПопытки;
	
КонецФункции 

// Выполняет закрытие кассовой смены.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Касса ККМ.
//  ОшибкаПриСнятииZОтчета - Булево - Флаг, при закрытии смены возникла ошибка.
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  Массив - Массив созданных отчетов о розничных продажах.
//
Функция ВыполнитьОперациюЗакрытияКассовойСмены(Объект, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "") Экспорт
	
	МассивДокументов = Новый Массив;
	
	КассаККМФискальноеУстройство = РозничныеПродажи.КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	// Закрытие кассовой смены
	НачатьТранзакцию();
	Попытка
		
		КассоваяСмена = ЗакрытьКассовуюСмену(Объект, ОписаниеОшибки);
		Если КассоваяСмена = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат МассивДокументов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КассаККМ) Тогда
			ИнкассацияВыполнена = ВыполнитьАвтоматическуюИнкассациюДС(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки);
			Если Не ИнкассацияВыполнена Тогда
				ОтменитьТранзакцию();
				Возврат МассивДокументов;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат МассивДокументов;
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		// Удаление отложенных и чеков, по которым был зарезервирован товар.
		УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки);
		
		// Заполнение отчета о розничных продажах
		ОтчетОРозничныхПродажах = ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки);
		Если ОтчетОРозничныхПродажах = Неопределено Тогда
			Возврат МассивДокументов;
		КонецЕсли;
		
		// Архивация чеков ККМ
		Если Константы.ОперацияПриЗакрытииКассовойСмены.Получить() = Перечисления.ОперацииПриЗакрытииКассовойСмены.АрхивацияЧековККМ Тогда
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("КассоваяСмена", КассоваяСмена);
			ПараметрыЗадания.Вставить("ОбработкаВыполнена", Ложь);
			
			ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания);
			
		КонецЕсли;
		
		// Удаление чеков ККМ
		Если Константы.ОперацияПриЗакрытииКассовойСмены.Получить() = Перечисления.ОперацииПриЗакрытииКассовойСмены.УдалениеЧековККМ Тогда
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("КассоваяСмена", КассоваяСмена);
			ПараметрыЗадания.Вставить("ОбработкаВыполнена", Ложь);
			
			ВыполнитьУдалениеЧековККМ(ПараметрыЗадания);
			
		КонецЕсли;
		
		МассивДокументов.Добавить(ОтчетОРозничныхПродажах);
		
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

#КонецОбласти

#Область ФункцииПроверкиСостоянияКассовойСмены

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Ссылка на кассу ККМ
//
// Возвращаемое значение:
//  Структура - Структура описания кассовой смены.
//
Функция ПолучитьСостояниеКассовойСмены(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер                      КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка                     КАК КассоваяСмена,
	|	КассоваяСмена.Статус                     КАК СтатусКассовойСмены,
	|	КассоваяСмена.СтатусРегламентныхОпераций КАК СтатусРегламентныхОпераций,
	|	
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ",             КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		
		Если (ТекущаяДатаСеанса() - ОписаниеКассовойСмены.ДатаИзмененияСтатуса >= 86400)
			И Выборка.СменаОткрыта Тогда
			ОписаниеКассовойСмены.Ошибка24Часа = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ЗаполнитьОписаниеКассовойСменыПоКассеККМ(ОписаниеКассовойСмены, КассаККМ);
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция возвращает структуру, характеризующую состояние кассовой смены на дату.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Ссылка на кассу ККМ
//  ДатаВремя - Дата - Дата, на которую необходимо получить описание кассовой смены
//
// Возвращаемое значение:
//  Структура - Структура описания кассовой смены.
//
Функция ПолучитьРеквизитыКассовойСменыНаДату(Объект, ДатаВремя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер  КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка КАК КассоваяСмена,
	|	КассоваяСмена.Статус                     КАК СтатусКассовойСмены,
	|	КассоваяСмена.СтатусРегламентныхОпераций КАК СтатусРегламентныхОпераций,
	|	
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ) КАК ДатаИзмененияСтатуса,
	|		КассоваяСмена.КассаККМ КАК КассаККМ,
	|		КассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство
	|	ИЗ
	|		Документ.КассоваяСмена КАК КассоваяСмена
	|	ГДЕ
	|		КассоваяСмена.Проведен
	|		И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|		ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|		И ВЫБОР
	|				КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ <= &ДатаВремя
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КассоваяСмена.КассаККМ,
	|		КассоваяСмена.ФискальноеУстройство) КАК КассовыеСмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО КассовыеСмены.КассаККМ = КассоваяСмена.КассаККМ
	|		 И КассовыеСмены.ФискальноеУстройство = КассоваяСмена.ФискальноеУстройство
	|			И КассоваяСмена.Проведен 
	|			И (КассовыеСмены.ДатаИзмененияСтатуса = ВЫБОР
	|				КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ)
	|";
	
	Запрос.УстановитьПараметр("КассаККМ",             КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
	
	Запрос.УстановитьПараметр("ДатаВремя",            ДатаВремя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ЗаполнитьОписаниеКассовойСменыПоКассеККМ(ОписаниеКассовойСмены, КассаККМ);
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Ссылка на кассу ККМ
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Ссылка на кассовую смену,
//                если указана, то проверяется наличие любой другой кассовой смены
//  НачалоКассовойСмены - Дата - Дата начала кассовой смены
//  ОкончаниеКассовойСмены - Дата - Дата окончания кассовой смены
//
// Возвращаемое значение:
//  ДокументСсылка.КассоваяСмена - Открытая кассовая смена на заданный период. Или неопределено если открытой смены нет.
//
Функция ПолучитьОткрытуюКассовуюСмену(Объект, КассоваяСмена, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство",   ФискальноеУстройство);
	
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
// Параметры:
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Ссылка на кассовую смену
//  Дата - Дата - Дата проверки
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  Булево - Истина, если на указанную дату кассовая смена открыта.
//
Функция СменаОткрыта(КассоваяСмена, Дата, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Статус                 КАК СтатусКассовойСмены,
	|	КассоваяСмена.НачалоКассовойСмены    КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = ОписаниеОшибки24Часа();
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтатусКассовойСмены) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'Кассовая смена закрыта.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru = 'Кассовая смена не открыта.'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонтрактнойИнформациейФЗ54

// Заполнить параметры отправки электронного чека по партнеру.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма (ФормаОплатыНаличными или ФормаСмешаннойОплаты).
//
Процедура ЗаполнитьПараметрыОтправкиЭлектронногоЧекаПоПартнеру(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Форма.Партнер) Тогда
		
		ВариантОтправкиЭлектронногоЧекаПартнера = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ПустаяСсылка();
		ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
		
	Иначе
		
		ВариантОтправкиЭлектронногоЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Партнер, "ВариантОтправкиЭлектронногоЧека");
		
		Форма.ВариантОтправкиЭлектронногоЧекаПартнера = ВариантОтправкиЭлектронногоЧека;
		Если Не ЗначениеЗаполнено(ВариантОтправкиЭлектронногоЧека) Тогда
			ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
		КонецЕсли;
		
		ИсточникиКонтактнойИнформации = Новый Массив;
		ИсточникиКонтактнойИнформации.Добавить(Форма.Партнер);
		
		ВидыКонтактнойИнформации = Новый Массив;
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
		
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ИсточникиКонтактнойИнформации,, ВидыКонтактнойИнформации, ТекущаяДатаСеанса());
		
		Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформацияОбъекта Цикл
			
			Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
				Форма.Телефон10Знаков = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ЭлементКонтактнойИнформации.Представление);
				Форма.Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Форма.Телефон10Знаков);
				Форма.Элементы.Телефон.СписокВыбора.Добавить(Форма.Телефон);
			КонецЕсли;
			
			Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
				Форма.Email = ЭлементКонтактнойИнформации.Представление;
				Форма.Элементы.Email.СписокВыбора.Добавить(Форма.Email);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Форма.Элементы.Телефон.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Телефон.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
		Если Форма.Элементы.Email.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Email.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	РозничныеПродажиКлиентСервер.УстановитьВариантОтправкиЭлектронногоЧека(Форма, ВариантОтправкиЭлектронногоЧека);
	
КонецПроцедуры

// Обработать данные электронного чека.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма (ФормаОплатыНаличными или ФормаСмешаннойОплаты).
// 
// Возвращаемое значение:
//  Структура - Данные электронного чека, см. функцию СтруктураДанныеЭлектронногоЧека().
//
Функция ОбработатьДанныеЭлектронногоЧека(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
	
		ДанныеЭлектронногоЧека = РозничныеПродажиКлиентСервер.ДанныеЭлектронногоЧека(Форма);
		РезультатПроверки = РозничныеПродажиКлиентСервер.ПроверитьНеобходимостьОбработкиДанныхЭлектронногоЧека(Форма);
		
		Если РезультатПроверки.ТребуетсяСоздатьПартнера Тогда
			
			ДанныеЭлектронногоЧека.Партнер = СоздатьПартнераВладельцаКонтактнойИнформацииЭлектронногоЧека(ДанныеЭлектронногоЧека);
			ОбновитьКонтактнуюИнформациюПартнера(ДанныеЭлектронногоЧека);
			
		Иначе
			
			Если РезультатПроверки.ТребуетсяОбновитьКонтактнуюИнформацию Тогда
				
				ОбновитьКонтактнуюИнформациюПартнера(ДанныеЭлектронногоЧека);
				
			КонецЕсли;
			
			Если РезультатПроверки.ТребуетсяОбновитьВариантОтправкиЭлектронногоЧекаПартнера Тогда
				
				ПартнерОбъект = ДанныеЭлектронногоЧека.Партнер.ПолучитьОбъект();
				ПартнерОбъект.ВариантОтправкиЭлектронногоЧека = ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека;
				ПартнерОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ДанныеЭлектронногоЧека;
	
КонецФункции

// Процедура создает партнера с 
// наименованием "Держатель карты лояльности" на основании
// переданной структуры с данными карты лояльности.
//
// Параметры:
//  СтруктураДанныхКарты - Данные карты лояльности, см. функцию КартыЛояльностиСервер.ПолучитьСтруктуруДанныхКартыЛояльности().
//
// Возвращаемое значение:
//  СправочникСсылка.Партнеры - Партнер.
//
Функция СоздатьПартнераВладельцаКонтактнойИнформацииЭлектронногоЧека(ДанныеЭлектронногоЧека)
	
	ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	
	Если ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail Тогда
		
		ПартнерОбъект.Наименование = СтрШаблон(
			НСтр("ru = 'Владелец E-mail %1'"),
			ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека);
		
	ИначеЕсли ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS Тогда
		
		ПартнерОбъект.Наименование = СтрШаблон(
			НСтр("ru = 'Владелец телефона %1'"),
			РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(
				ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека));
		
	КонецЕсли;
	
	ПартнерОбъект.НаименованиеПолное = ПартнерОбъект.Наименование;
	ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	ПартнерОбъект.Клиент = Истина;
	ПартнерОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
	ПартнерОбъект.ВариантОтправкиЭлектронногоЧека = ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека;
	ПартнерОбъект.Записать();
	
	Возврат ПартнерОбъект.Ссылка;
	
КонецФункции

Процедура ОбновитьКонтактнуюИнформациюПартнера(ДанныеЭлектронногоЧека)
	
	Замещать = Истина;
	
	Если ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail Тогда
		
		ДобавитьКонтактнуюИнформацию(
			ДанныеЭлектронногоЧека.Партнер,
			ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека,
			Справочники.ВидыКонтактнойИнформации.EmailПартнера,,
			Замещать);
		
	ИначеЕсли ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS Тогда
		
		ДобавитьКонтактнуюИнформацию(
			ДанныеЭлектронногоЧека.Партнер,
			РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(
				ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека),
			Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,,
			Замещать);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыВнесенияИВыемкиДс

Функция ВыполнитьАвтоматическуюИнкассациюДС(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "")
	
	Результат = Истина;
	
	Если Не ОшибкаПриСнятииZОтчета Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиРМККассыККМ.КассаККМ.Владелец                      КАК Организация,
		|	НастройкиРМККассыККМ.КассаККМ.ВалютаДенежныхСредств         КАК Валюта,
		|	НастройкиРМККассыККМ.КассаККМ                               КАК КассаККМ,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК СуммаДокумента,
		|	НастройкиРМККассыККМ.АвтоматическаяИнкассация               КАК АвтоматическаяИнкассация
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК НастройкиРМККассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО ДенежныеСредстваВКассахККМОстатки.КассаККМ = НастройкиРМККассыККМ.КассаККМ
		|ГДЕ
		|	НастройкиРМККассыККМ.КассаККМ = &КассаККМ
		|	И НастройкиРМККассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() И Выборка.АвтоматическаяИнкассация И Выборка.СуммаДокумента > 0 Тогда
			СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОткрытияИЗакрытияКассовойСмены

// Функция возвращает текст описания ошибки заполнения отчета о розничных продажах.
//
Функция ПолучитьТекстОшибкиЗаполненияОтчета()
	
	Возврат НСтр("ru = 'Проверьте настройки розничного склада и кассы ККМ.'");
	
КонецФункции

// Функция выполняет поиск отчета о розничных продажах по кассовой смене.
//
Функция НайтиОтчетОРозничныхПродажах(КассоваяСмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетОРозничныхПродажах = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетОРозничныхПродажах = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ОтчетОРозничныхПродажах;
	
КонецФункции

// Функция выполняет удаление отложенных чеков.
//
Функция УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	НачатьТранзакцию();
	Попытка
		
		ВыборкаЧековККМ = ВыбратьОтложенныеЧекиККМДляУдаления(КассоваяСмена);
		
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Результат = Ложь;
		
		ОписаниеОшибки = НСтр("ru = 'При удалении отложенных чеков произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФункцииПроверкиСостоянияКассовойСмены

Функция КассаККМФискальноеУстройство(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФискальноеУстройство = Неопределено;
	КассаККМ             = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КассыККМ") Тогда
		
		КассаККМ = Объект;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КассыККМ.ПодключаемоеОборудование КАК ФискальноеУстройство
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.КассаККМ = &КассаККМ
		|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
		|	И КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|");
		
		Запрос.УстановитьПараметр("КассаККМ",     КассаККМ);
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ФискальноеУстройство = Выборка.ФискальноеУстройство;
		
	Иначе
		
		ФискальноеУстройство = Объект;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КассыККМ.КассаККМ КАК КассаККМ
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.ПодключаемоеОборудование = &ФискальноеУстройство
		|	И КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|");
		
		Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
		Запрос.УстановитьПараметр("РабочееМесто",         МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		КассаККМ = Выборка.КассаККМ;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ФискальноеУстройство", ФискальноеУстройство);
	ВозвращаемоеЗначение.Вставить("КассаККМ",             КассаККМ);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьОписаниеКассовойСменыПоКассеККМ(ОписаниеКассовойСмены, КассаККМ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе,
	|	КассыККМ.ВалютаДенежныхСредств                              КАК Валюта,
	|	КассыККМ.ВалютаДенежныхСредств.Представление                КАК ВалютаПредставление,
	|	КассыККМ.Склад                                  КАК Склад,
	|	КассыККМ.Склад.РозничныйВидЦены                 КАК ВидЦены,
	|	КассыККМ.Склад.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КассыККМ.Владелец                               КАК Организация
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
	|		ПО (ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка)
	|ГДЕ
	|	КассыККМ.Ссылка = &КассаККМ");
		
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ОписаниеКассовойСмены.КассаККМ            = КассаККМ;
	ОписаниеКассовойСмены.Склад               = Выборка.Склад;
	ОписаниеКассовойСмены.ВидЦены             = Выборка.ВидЦены;
	ОписаниеКассовойСмены.ЦенаВключаетНДС     = Выборка.ЦенаВключаетНДС;
	ОписаниеКассовойСмены.Организация         = Выборка.Организация;
	ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
	ОписаниеКассовойСмены.Валюта              = Выборка.Валюта;
	ОписаниеКассовойСмены.ВалютаПредставление = Выборка.ВалютаПредставление;
	
	ОписаниеКассовойСмены.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
		Выборка.Организация,
		Выборка.Склад,
		ТекущаяДатаСеанса());
	
	ОписаниеКассовойСмены.СведенияООрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, ТекущаяДатаСеанса());
	ОписаниеКассовойСмены.АдресСклада          = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Склад, Справочники.ВидыКонтактнойИнформации.АдресСклада);
	
	Если ОписаниеКассовойСмены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		ОписаниеКассовойСмены.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	Иначе
		ОписаниеКассовойСмены.СистемаНалогообложения = РозничныеПродажи.СистемаНалогообложенияФискальнойОперации(Выборка.Организация);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустую структуру состояния кассовой смены.
//
Функция ПолучитьСтруктуруОписанияКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("СтатусРегламентныхОпераций");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	СостояниеКассовойСмены.Вставить("Ошибка24Часа", Ложь);
	СостояниеКассовойСмены.Вставить("ОписаниеОшибки", "");
	
	// Описание реквизитов кассовой смены
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("ФискальноеУстройство");
	
	СостояниеКассовойСмены.Вставить("Валюта");
	СостояниеКассовойСмены.Вставить("ВалютаПредставление");
	СостояниеКассовойСмены.Вставить("ВидЦены");
	СостояниеКассовойСмены.Вставить("Кассир");
	СостояниеКассовойСмены.Вставить("Склад");
	СостояниеКассовойСмены.Вставить("АдресСклада", "");
	СостояниеКассовойСмены.Вставить("ЦенаВключаетНДС");
	СостояниеКассовойСмены.Вставить("НалогообложениеНДС");
	
	// Прочее
	СостояниеКассовойСмены.Вставить("СведенияООрганизации");
	СостояниеКассовойСмены.Вставить("СерийныйНомерККМ",       "");
	СостояниеКассовойСмены.Вставить("СистемаНалогообложения", Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка());
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции

// Описание ошибки24 часа
// 
// Возвращаемое значение:
//  Строка - Описание ошибки
//
Функция ОписаниеОшибки24Часа() Экспорт
	
	Возврат НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены.'");
	
КонецФункции

#КонецОбласти

#Область Прочее

// Заполнить реквизит формы "РеквизитыКассира".
//
// Параметры:
//  Кассир - Справочник.Пользователи - Кассир.
//
Функция РеквизитыКассира(Кассир) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Пользователи.ФизическоеЛицо.ИНН, """") КАК ИНН,
	|	ЕСТЬNULL(Пользователи.ФизическоеЛицо.Наименование, """") КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Кассир");
	Запрос.УстановитьПараметр("Кассир", Кассир);
	
	РеквизитыКассира = Новый Структура;
	РеквизитыКассира.Вставить("ИНН", "");
	РеквизитыКассира.Вставить("Наименование", НСтр("ru = 'Администратор'"));
	
	ВыборкаРеквизитыКассира = Запрос.Выполнить().Выбрать();
	Если ВыборкаРеквизитыКассира.Следующий() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаРеквизитыКассира.Наименование) Тогда
			РеквизитыКассира.Наименование = ВыборкаРеквизитыКассира.Наименование;
		КонецЕсли;
		
		РеквизитыКассира.ИНН = ВыборкаРеквизитыКассира.ИНН;
		
	КонецЕсли;
	
	Возврат РеквизитыКассира;
	
КонецФункции

Функция ДобавитьЭлемент(Форма, ИмяКоманды, Родитель, Индекс)
	
	НоваяКнопка = Форма.Элементы.Добавить(ИмяКоманды + "Дубль", Тип("КнопкаФормы"), Форма.Элементы[Родитель + Индекс]);
	
	Возврат НоваяКнопка;
	
КонецФункции

Функция ВыбратьОтложенныеЧекиККМДляУдаления(КассоваяСмена = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.ОтложенДо КАК ОтложенДо,
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Дата,
	|	Документ.КассоваяСмена.ОкончаниеКассовойСмены,
	|	Документ.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ОтложенДо <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЧекККМ.ОтложенДо < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение > 0
	|	И ДОБАВИТЬКДАТЕ(ЧекККМ.Дата, ДЕНЬ, КоличествоДнейХраненияОтложенныхЧеков.Значение) < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение = 0
	|	И ЧекККМ.КассоваяСмена.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)");
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	Запрос.УстановитьПараметр("ТекущееВремя",  ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции

Функция ПредставлениеУстройства(СтрокаТЧ)
	
	Представление = "";
	
	Если СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Представление = НСтр("ru = 'Весы с печатью этикеток'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя Тогда
		Представление = НСтр("ru = 'Дисплей покупателя'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн Тогда
		Представление = НСтр("ru = 'ККМ Offline'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода Тогда
		Представление = НСтр("ru = 'Сканер штрихкода'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт Тогда
		Представление = НСтр("ru = 'Считыватель магнитных карт'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных Тогда
		Представление = НСтр("ru = 'Терминал сбора данных'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
		Представление = НСтр("ru = 'Фискальный регистратор'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
		Представление = НСтр("ru = 'Эквайринговый терминал'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы Тогда
		Представление = НСтр("ru = 'Электронные весы'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Заполнить таблицу оборудование на форме
//
// Параметры:
//  Форма - УправляемаяФорма - Форма
//  ПоддерживаемыеТипыПодключаемогоОборудования - Строка - Поддерживаемые типы оборудования
//
Процедура ЗаполнитьТаблицуОборудование(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ТипыПО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоддерживаемыеТипыПодключаемогоОборудования, ",", Истина, Истина);
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	СписокОборудования = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(
		ТипыПО,
		Неопределено,
		РабочееМесто);
	
	Для Каждого СтрокаТЧ Из СписокОборудования Цикл
		Если СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор
			Или СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ
			Или СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Форма.Оборудование.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Подключено    = 1;
		НоваяСтрока.Представление = ПредставлениеУстройства(НоваяСтрока);
	КонецЦикла;
	
	Если ТипыПО.Найти("ФискальныйРегистратор") <> Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КассыККМ.КассаККМ КАК Объект,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
		|	КассыККМ.ПодключаемоеОборудование КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|	И КассыККМ.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
		|	И Не КассыККМ.ИспользоватьБезПодключенияОборудования
		|");
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Форма.Оборудование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Подключено    = 1;
			НоваяСтрока.Представление = ПредставлениеУстройства(НоваяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ВременныеФункцииИзБСП2_3_5_44

// Добавляет контактную информацию к объекту по представлению или XML.
//
// Параметры:
//  СсылкаИлиОбъект          - Произвольный - Ссылка или объект владельца содержащего контактную информацию.
//                                            Для ссылки после добавления контактной информации владелец будет записан.
//                                            Если передан объект, то контактная информация будет добавлена без записи.
//                                            Для сохранения изменений объект необходимо будет записать отдельно.
//  ЗначениеИлиПредставление - Строка - Представление или значения полей в виде XML.
//  ВидКонтактнойИнформации  - СправочникСсылка.ВидыКонтактнойИнформации - Вид добавляемой контактной информации.
//  Дата                     - Дата - Необязательный. Дата, с которой будет действовать запись контактной информации.
//                                    Требуется для контактной информации, у которой хранится история изменений.
//                                    Если значение не указано, то принимается текущая дата сеанса.
//  Замещать                 - Булево - Необязательный. Значение по умолчанию Истина.
//                                      Если Истина, то будет заменена вся контактная информация по
//                                      переданном виду контактной информации.
//                                      Если Ложь, то запись будет добавлена. Если вид контактной информации не разрешает
//                                      ввод нескольких значений, а контактная информация объекта уже содержит запись,
//                                      то запись не будет добавлена.
//
Процедура ДобавитьКонтактнуюИнформацию(СсылкаИлиОбъект, ЗначениеИлиПредставление, ВидКонтактнойИнформации, Дата = Неопределено, Замещать = Истина) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СсылкаИлиОбъект)) Тогда
		Объект = СсылкаИлиОбъект.ПолучитьОбъект();
		Записывать = Истина;
	Иначе
		Объект = СсылкаИлиОбъект;
		Записывать = Ложь;
	КонецЕсли;
	КонтактнаяИнформация = Объект.КонтактнаяИнформация;
	ЭтоКонтактнаяИнформацияВXML = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначениеИлиПредставление);
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	Если МетаданныеОбъекта = Неопределено
		Или МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Добавление контактной информации невозможно, у объекта нет таблицы с контактной информацией.'");;
	КонецЕсли;
	
	ФорматКонтактнойИнформации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидКонтактнойИнформации, "Тип, ВключатьСтрануВПредставление, ПроверятьПоФИАС");
	Если ЭтоКонтактнаяИнформацияВXML Тогда
		ФорматКонтактнойИнформации.Вставить("ФорматАдреса", ?(ФорматКонтактнойИнформации.ПроверятьПоФИАС, "ФИАС", "КЛАДР"));
		Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(ЗначениеИлиПредставление, ФорматКонтактнойИнформации);
		ЗначенияПолей = ЗначениеИлиПредставление;
	Иначе
		КонтактнаяИнформацияXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(ЗначениеИлиПредставление, ВидКонтактнойИнформации);
		ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
		Представление = ЗначениеИлиПредставление;
	КонецЕсли;
	
	Если Замещать Тогда
		НайденныеСтроки = НайтиСтрокиКонтактнойИнформации(ВидКонтактнойИнформации, Дата, КонтактнаяИнформация);
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			КонтактнаяИнформация.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();
	Иначе
		Если ЭтоКонтактнаяИнформацияВXML Тогда
			СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Найти(ЗначениеИлиПредставление, "ЗначенияПолей")
		Иначе
			СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Найти(ЗначениеИлиПредставление, "Представление")
		КонецЕсли;
		Если СтрокаКонтактнойИнформации = Неопределено Тогда
			Если ЗапрещенВводНесколькихЗначений(ВидКонтактнойИнформации, КонтактнаяИнформация) Тогда
				Возврат;
			КонецЕсли;
			СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКонтактнойИнформации.Представление  = Представление;
	СтрокаКонтактнойИнформации.ЗначенияПолей  = ЗначенияПолей;
	СтрокаКонтактнойИнформации.Вид            = ВидКонтактнойИнформации;
	СтрокаКонтактнойИнформации.Тип            = ФорматКонтактнойИнформации.Тип;
	Если ЗначениеЗаполнено(Дата) Тогда
		СтрокаКонтактнойИнформации.ДействуетС = Дата;
	КонецЕсли;
	
	ОбъектКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКонтактнойИнформации.ЗначенияПолей, ВидКонтактнойИнформации);
	ЗаполнитьТехническиеПоляКонтактнойИнформации(СтрокаКонтактнойИнформации, ОбъектКонтактнойИнформации, ФорматКонтактнойИнформации.Тип);
	
	Если Записывать Тогда
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	Телефон = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если Телефон <> Неопределено И Телефон.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		КодСтраны     = Телефон.КодСтраны;
		КодГорода     = Телефон.КодГорода;
		НомерТелефона = Телефон.Номер;
		
		Если СтрНачинаетсяС(КодСтраны, "+") Тогда
			КодСтраны = Сред(КодСтраны, 2);
		КонецЕсли;
		
		Поз = СтрНайти(НомерТелефона, ",");
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		Поз = СтрНайти(НомерТелефона, Символы.ПС);
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
		СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	КонецЕсли;
	
КонецПроцедуры

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

Функция НайтиСтрокиКонтактнойИнформации(ВидКонтактнойИнформации, Дата, КонтактнаяИнформация)
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
		Отбор.Вставить("ДействуетС", Дата);
	КонецЕсли;
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
	Возврат НайденныеСтроки;

КонецФункции

Процедура ЗаполнитьТехническиеПоляКонтактнойИнформации(СтрокаКонтактнойИнформации, Объект, ТипКонтактнойИнформации)
	
	// Заполнение дополнительных реквизитов ТЧ.
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКонтактнойИнформации, Объект);
		
	КонецЕсли;

КонецПроцедуры

Функция ЗапрещенВводНесколькихЗначений(ВидКонтактнойИнформации, КонтактнаяИнформация)
	
	Если ВидКонтактнойИнформации.РазрешитьВводНесколькихЗначений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецОбласти
