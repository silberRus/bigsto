
#Область ПрограммныйИнтерфейс

#Область ПолученияСтруктурКэшируемыхЗначений

// Возвращает структуру, содержащую поля кэшируемых значений.
//
// Возвращаемое значение:
//	Структура - структура кэшируемых значений со следующими полями:
//		* КоэффициентыУпаковок - Соответствие - используется для хранения значений коэффициентов упаковок товара.
//		* ОбъемУпаковок - Соответствие - используется для хранения значений объема упаковок товара.
//		* ВесУпаковок - Соответствие - используется для хранения значений веса упаковок товара.
//		* Штрихкоды - Соответствие - используется для хранения значений штрихкодов упаковок товара.
//		* КонтролироватьЗаполнениеАналитикиРасходов - Соответствие - используется для хранения значений коэффициентов упаковок товара.
//		* РаспределятьНДСпоСтатьеРасходов - Соответствие - используется для хранения признаков распределения НДС по 
//			статьям расходов.
//		* КонтролироватьЗаполнениеАналитикиДоходов - Соответствие - используется для хранения признаков контроля заполнения 
//			по аналитике доходов.
//		* ИспользоватьРучныеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется расчет скидок вручную.
//		* ИспользоватьАвтоматическиеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется 
//			автоматический расчет скидок.
//		* ПравоРегистрацииШтрихкодовНоменклатурыДоступно - Неопределено, Булево - Истина - пользователю разрешено 
//			регистрировать штрихкоды номенклатуры.
//		* ПринимаетсяКНУ - Соответствие - используется для хранения признаков контроля принятия статей расходов к
//			налоговому учету.
//		* ПризнакиКатегорииЭксплуатации - Соответствие - используется для хранения признаков категории эксплуатации:
//			** Ключ - СправочникСсылка.КатегорииЭксплуатации - значение категории эксплуатации.
//			** Значение - Структура - структура признаков эксплуатации, со следующими полями.
//				*** ИнвентарныйУчет - Булево - Истина - используется инвентарный учет.
//				*** СпособПогашенияСтоимостиБУ - ПеречислениеСсылка.СпособыПогашенияСтоимостиТМЦ - способ погашения стоимости ТМЦ.
//				*** СрокЭксплуатации - Число - срок эксплуатации.
//				*** СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - статья расходов.
//		* ПризнакиПартииТМЦВЭксплуатации - Соответствие - используется для хранения признаков партий ТМЦ, находящихся 
//			в эксплуатации:
//			** Ключ - СправочникСсылка.ПартииТМЦВЭксплуатации - значение партии ТМЦ, находящейся в эксплуатации.
//			** Значение - Структура - структура признаков эксплуатации, со следующими полями.
//				*** ИнвентарныйУчет - Булево - Истина - используется инвентарный учет.
//
Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбъемУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("ВесУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",				Новый Соответствие);
	КэшированныеЗначения.Вставить("СвойстваНазначений",		Новый Соответствие);
	КэшированныеЗначения.Вставить("СвойстваСкладов",		Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиРасходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("РаспределятьНДСпоСтатьеРасходов",			Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиДоходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьАналитикуАктивовПассивов",		Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",			Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах",	Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",			Неопределено);  
	КэшированныеЗначения.Вставить("ПравоРегистрацииШтрихкодовНоменклатурыДоступно",	Неопределено);
	КэшированныеЗначения.Вставить("ПринимаетсяКНУ", Новый Соответствие);
	
	КэшированныеЗначения.Вставить("ПризнакиКатегорииЭксплуатации", Новый Соответствие);
	СтруктураПустойКатегории = Новый Структура;
	СтруктураПустойКатегории.Вставить("СрокЭксплуатации", 0);
	СтруктураПустойКатегории.Вставить("СтатьяРасходов", ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка"));
	КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Вставить(ПредопределенноеЗначение("Справочник.КатегорииЭксплуатации.ПустаяСсылка"), СтруктураПустойКатегории);
	
	
	
	КэшированныеЗначения.Вставить("ОбработанныеСтроки", Новый Массив);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначения()

// Возвращает структуру, содержащую поля кэшируемой информации, получаемой по штрихкоду товара.
//
// Возвращаемое значение:
//	Структура - структура кэшируемых данных товара, получаемая по штрихкоду товара, со следующими полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - информация о товаре.
//		* ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип товара.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//		* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товара.
//		* ПодакцизныйТовар - Булево - Истина - товар является подакцизным.
//		* МаркируемаяАлкогольнаяПродукция - Булево - Истина - товар является маркируемой алкогольной продукцией.
//		* ХарактеристикиИспользуются - Булево - Истина - признак использования характеристик.
//		* Коэффициент - Число - коэффициент упаковки.
//		* ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения товара.
//		* ЕдиничнаяУпаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - единичная упаковка товара.
//		* НесколькоЕдиничныхУпаковок - Булево - Истина - товар имеет несколько видов единичных упаковок.
//		* УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист.
//		* НеизвестныйШтрихкод - Булево - Истина - в информационной базе отсутствуют данные по штрихкоду.
//		* Штрихкод - Строка - штрихкод товара.
//		* КоличествоПоШтрихкоду - Число - количество товара (в единицах хранения) по штрихкоду.
//		* КоличествоУпаковок - Число - количество упаковок товара.
//		* ШтрихкодНеИзКэша - Неопредлено, Булево - Истина - штрихкод не из кэша памяти.
//		* НоменклатураНабора - СправочникСсылка.Номенклатура - информация по набору.
//		* ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика набора.
//		* ВариантРасчетаЦеныНабора - ПеречислениеСсылка.ВариантыРасчетаЦенНаборов - вариант расчета цены набора.
//		* ВыполненныеДействия - Структура - структура действий, произведенных со строкой товара в табличной части документа:
//			** Добавлено - Булево - Истина - строка по товару добавлена.
//			** Изменено - Булево - Истина - строка по товару изменена.
//		* Назначения - Неопределено, СправочникСсылка.Назначения - назначение товара.
//
Функция СтуктураКешируемойИнформацииПоШтрихкоду() Экспорт
	
	ИнформацияПоШтрихкоду = Новый Структура;
	
	ИнформацияПоШтрихкоду.Вставить("Номенклатура");
	ИнформацияПоШтрихкоду.Вставить("ТипНоменклатуры");
	ИнформацияПоШтрихкоду.Вставить("Характеристика");
	ИнформацияПоШтрихкоду.Вставить("Упаковка");
	ИнформацияПоШтрихкоду.Вставить("ПодакцизныйТовар");
	ИнформацияПоШтрихкоду.Вставить("МаркируемаяАлкогольнаяПродукция", Ложь);
	ИнформацияПоШтрихкоду.Вставить("ХарактеристикиИспользуются");
	ИнформацияПоШтрихкоду.Вставить("Коэффициент",              1);
	ИнформацияПоШтрихкоду.Вставить("ЕдиницаИзмерения");
	ИнформацияПоШтрихкоду.Вставить("ЕдиничнаяУпаковка");
	ИнформацияПоШтрихкоду.Вставить("НесколькоЕдиничныхУпаковок");
	ИнформацияПоШтрихкоду.Вставить("УпаковочныйЛист",          ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("НеизвестныйШтрихкод",      Истина);
	ИнформацияПоШтрихкоду.Вставить("Штрихкод",                 "");
	ИнформацияПоШтрихкоду.Вставить("КоличествоПоШтрихкоду",    0);
	ИнформацияПоШтрихкоду.Вставить("КоличествоУпаковок",       1);
	ИнформацияПоШтрихкоду.Вставить("ШтрихкодНеИзКэша",         Неопределено);
	ИнформацияПоШтрихкоду.Вставить("НоменклатураНабора",       ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ХарактеристикаНабора",     ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ВариантРасчетаЦеныНабора", ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ВыполненныеДействия",      Новый Структура("Добавлено, Изменено", Ложь, Ложь));
	ИнформацияПоШтрихкоду.Вставить("Назначения",               Неопределено);
	
	Возврат ИнформацияПоШтрихкоду;
	
КонецФункции

// Возвращает структуру, содержащую поля кэшируемых значений услуги.
//
// Возвращаемое значение:
//	Структура - структура кэшируемых данных услуг, со следующими полями:
//		* ПроцентыСтавокНДС - Соответствие - используется для хранения процентов ставок НДС.
//		* Штрихкоды - Соответствие - используется для хранения значений штрихкодов услуг.
//		* ИспользоватьРучныеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется расчет скидок вручную.
//		* ИспользоватьАвтоматическиеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется 
//			автоматический расчет скидок.
//		* ИспользоватьРучныеСкидкиВЗакупках - Неопределено, Булево - Истина - в закупках используется расчет скидок вручную.
//
Функция ПолучитьСтруктуруКэшируемыеЗначенияУслуг() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("ПроцентыСтавокНДС",    Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",            Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",         Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",         Неопределено);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначенияУслуг()

#КонецОбласти

#Область ПолучениеСтруктурПараметровДляОбработкиТабличнойЧастиТовары

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен в строках табличой части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен в табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//
Функция ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для пересчета сумм НДС в строках табличной части 
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для пересчета сумм НДС в табличной части документа:
//		* ЦенаВключаетНДС - Булево - Истина - НДС включен в цену товара.
//		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение документа.
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"НалогообложениеНДС") Тогда
		СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен закупки в строках табличной части 
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен закупки в строках табличной части документа:
//		* Соглашение -СправочникСсылка.Соглашение<> - соглашение по документу.
//		* Партнер - СправочникСсылка.Партнеры - партнер по документу.
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* ВидЦеныПоставщика - СправочникСсылка.ВидыЦенПоставщиков - валюта документа.
//
Функция ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура("Соглашение,Партнер,Дата,Валюта,Соглашение,Партнер,Дата,Валюта,ВидЦеныПоставщика");
	ЗаполнитьЗначенияСвойств(СтруктураЗаполненияЦены,Объект);
	Если Не ЗначениеЗаполнено(СтруктураЗаполненияЦены.ВидЦеныПоставщика) Тогда
		СтруктураЗаполненияЦены.Удалить("ВидЦеныПоставщика");
		// Оставляем только для документов, у которых ВидЦеныПоставщика в шапке и заполнен
	КонецЕсли;
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения условий продаж в строках табличной части 
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения условий продаж в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* Соглашение -СправочникСсылка.Соглашение - соглашение по документу.
//		* Ссылка - ДокументСсылка.ИмяДокумента - ссылка документа.
//
Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	СтруктураЗаполненияЦены.Вставить("Ссылка",     Объект.Ссылка);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен розницы в строках табличной части 
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен розницы в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* ВидЦены - СправочникСсылка.ВидыЦен - вид цен по документу.
//
Функция ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен по ассортименту в строках табличной 
// части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен по ассортименту в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* Склад - СправочникСсылка.Склады - склад по документу.
//
Функция ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Склад", 	Объект.Склад);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для пересчета цены скидки продажи в строках
//  табличной части документа.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - данные документа.
//  ПередачаНаКомиссию	 - Булево				 - Истина если осуществляется передача на комиссию.
//  ИмяКоличества		 - Строка				 - имя поля количества в табличной части документа.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для пересчета цены скидки продажи в строках табличной части документа:
//  * ИспользоватьРучныеСкидки - Булево - Истина - в продажах расчет скидок осуществляется вручную.
//  * ИспользоватьАвтоматическиеСкидки - Булево - Истина если в продажах используется автоматический расчет скидок.
//  * ИмяКоличества - Строка - имя поля количества в табличной части документа.
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, ПередачаНаКомиссию = Ложь, ИмяКоличества = "КоличествоУпаковок") Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	Если Не ПередачаНаКомиссию Тогда
		СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
		СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
	КонецЕсли;
	
	СтруктураЗаполненияЦены.Вставить("ИмяКоличества", ИмяКоличества);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для пересчета цены скидки закупки в строках
//  табличной части документа.
//
// Параметры:
//  Объект			 - ДанныеФормыСтруктура	 - данные документа.
//  ПриемНаКомиссию	 - Булево				 - Истина если осуществляется прием на комиссию.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для пересчета цены скидки закупки в строках табличной части документа:
//  * ИспользоватьРучныеСкидки - Булево - Истина если расчет скидок осуществляется вручную.
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект, ПриемНаКомиссию) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	Если Не ПриемНаКомиссию Тогда
		СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для проверки сопоставленной номенклатуры поставщика с
//  номенклатурой склада в строках табличной части документа.
//
// Параметры:
//  Объект								 - ДанныеФормыСтруктура	 - данные документа.
//  НеВыполнятьПроверкуДляПользователя	 - Булево				 - Истина если не нужно проверку для текущего пользователя.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для проверки сопоставленной номенклатуры поставщика с номенклатурой склада в
//  строках табличной части документа:
//  * Ссылка - ДокументСсылка.ИмяДокумента - ссылка на документ.
//  * Партнер - СправочникСсылка.Партнеры - партнер по документу.
//  * НеВыполнятьПроверкуДляПользователя - Булево - Истина если не осуществлять проверку для текущего пользователя.
//
Функция ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуДляПользователя) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка",                             Объект.Ссылка);
	СтруктураПараметров.Вставить("Партнер",                            Объект.Партнер);
	СтруктураПараметров.Вставить("НеВыполнятьПроверкуДляПользователя", НеВыполнятьПроверкуДляПользователя);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения сведений о складе в строках
//  табличной части документа.
//
// Параметры:
//  Объект		 - ДанныеФормыСтруктура	 - данные документа.
//  СкладГруппа	 - Булево				 - Истина, если склад является иерархическим.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для заполнения сведений о складе в строках табличной части документа:
//  * Склад - СправочникСсылка.Склады - склад по документу.
//  * СкладГруппа - Булево - Истина - склад является иерархическим.
//
Функция ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Склад",       Объект.Склад);
	СтруктураПараметров.Вставить("СкладГруппа", СкладГруппа);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения сведений об услугах в строках
//  табличной части документа.
//
// Параметры:
//  Объект					 - ДанныеФормыСтруктура	 - данные документа.
//  ЗаполнятьДляВсехУслуг	 - Булево				 - Если Истина, то заполнять сведения об услугах во всей табличной части документа.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для заполнения сведений об услугах в строках табличной части документа:
//  * ЗаполнятьДляВсехУслуг - Булево - Истина - заполнять сведения об услугах во всей табличной части документа.
//  * УслугиПоПереработкеДавальческогоСырья - Булево - Истина - осущетсляется предоставление услуг по переработке
//  давальческого сырья.
//
Функция ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, ЗаполнятьДляВсехУслуг) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
	
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для пересчета суммы НДС по товару в строках
//  табличной части документа.
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура	 - данные документа.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для пересчета суммы НДС по товару в строках табличной части документа:
//  * ЦенаВключаетНДС - Булево - Истина - сумма по НДС включена в цену товара.
//		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение документа.
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"НалогообложениеНДС") Тогда
		СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения ставки НДС в строках 
// табличной части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения ставки НДС в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Организация - СправочникСсылка.Организации - организация по документу, осуществляющая хозяйственную операцию.
//
Функция ПолучитьСтруктуруЗаполненияСтавкиНДС(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Дата"       , Объект.Дата);
	Результат.Вставить("Организация", Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения признаков идентификации безвозвратной
//  многооборотной тары в строках табличной части документа.
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура	 - данные документа.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для заполнения признаков идентификации безвозвратной многооборотной тары в
//  строках табличной части документа:
//  * ВернутьМногооборотнуюТару - Булево - Истина - осуществлять возврат многооборотной тары.
//
Функция ПолучитьСтруктуруЗаполненияПризнакаБезВозвратнойТары(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВернутьМногооборотнуюТару" , Объект.ВернутьМногооборотнуюТару);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПересчетаИЗаполненияКлиентСервер

// Заполняет поля, используемые для отражения расхождений, в текущей строке табличной 
// части документа "АктОРасхожденияхПослеПеремещения".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьРасхождения(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу;
	ТекущаяСтрока.ЕстьРасхождения               = (ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля, используемые для отражения расхождений, в текущей строке табличной 
// части документа "АктОРасхожденияхПослеОтгрузки".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьРасхожденияПослеОтгрузки(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля, используемые для отражения расхождений, в текущей строке табличной 
// части документа "АктОРасхожденияхПослеПриемки".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьРасхожденияПослеПриемки(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
		ТекущаяСтрока.ПоВинеСтороннейКомпании = Ложь;
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля признаков использования комментариев в текущей строке табличной 
// части документа "АктОРасхожденияхПослеПриемки".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьПризнакНаличияКомментарияПриемка(ТекущаяСтрока, СтруктураДействий) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментарияПриемка") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийПоставщика = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийПоставщика);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

// Заполняет поля признаков использования комментариев в текущей строке табличной 
// части документа "АктОРасхожденияхПослеОтгрузки".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьПризнакНаличияКомментарияОтгрузка(ТекущаяСтрока, СтруктураДействий) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментарияОтгрузка") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийКлиента = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийКлиента);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

// Заполняет поля признаков использования комментариев в текущей строке табличной 
// части документа "АктОРасхожденияхПослеПеремещения".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьПризнакНаличияКомментария(ТекущаяСтрока, СтруктураДействий) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментария") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийПолучателя = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийПолучателя);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

// Заполняет признак необходимости обработки строки табличной части документа "ПриходныйОрдерНаТовары".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока.Штрихкод)
			И ТекущаяСтрока.ШтрихкодНеОпределен
			И (ТекущаяСтрока.ЭтоУпаковочныйЛист И Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист)
				Или Не ТекущаяСтрока.ЭтоУпаковочныйЛист И Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура))
		Или ТекущаяСтрока.ЭтоУпаковочныйЛист
			И ТекущаяСтрока.КоличествоЗаполненныхПодчиненныхПозиций = 0
		Или ТекущаяСтрока.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста Тогда
		ТекущаяСтрока.ТребуетсяОбработка = 1;
	Иначе
		ТекущаяСтрока.ТребуетсяОбработка = 0;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую поля для пересчета суммы в табличной части документа
//
// Параметры:
//  Реквизиты - Строка - Содержит имена полей, заданных через запятую,
//  ЗависимыеРеквизиты - Структура - структура, каждое элемент которой есть структура с именами реквизитов без префикса,
//                       ключ элемента содержит префикс. Например Новый Структура("Тара", "Сумма, СуммаНДС") означает
//                       наличие реквизитов: "СуммаТара" и "СуммаНДСТара".
//  ИмяПоляКоличество     - Строка - Имя поля, по которому считается коэффициент пропорциональности.
//  РазрядностиОкругления - Структура - структура, в формате ИмяПоля => Количество знаков дробной части, которая будет
//                                      использоваться при пересчете реквизитов.
//
// Возвращаемое значение:
//  Структура - Структура со следующими полями:
//              Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Функция СтруктураПересчетаСуммы(Реквизиты, ЗависимыеРеквизиты = Неопределено, ИмяПоляКоличество = "Количество", РазрядностиОкругления = Неопределено) Экспорт

	Поля = Новый Структура(Реквизиты);
	Если ЗависимыеРеквизиты <> Неопределено Тогда
		
		Для Каждого ПолеСтруктуры Из ЗависимыеРеквизиты цикл

			Реквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Поле Из Реквизиты цикл
				Поля.Вставить(Поле.Ключ + ПолеСтруктуры.Ключ);
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Поля);
	Результат.Вставить("Строки", Новый Массив());
	Результат.Вставить("ИтогКоличество", 0);
	Результат.Вставить("ИмяПоляКоличество", ИмяПоляКоличество);
	Результат.Вставить("РазрядностиОкругления", РазрядностиОкругления);

	Возврат Результат;

КонецФункции

// Инициализирует структуру для пересчета суммы в табличной части документа
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура подлежащая инициализации, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//  ДанныеЗаполнения - ДанныеФормыЭлементКоллекции - строка, содержащая значения суммовых показателей,
//                     которые необходимо будет распределить между строками при пересчете сумм.
//
// Возвращаемое значение:
//  Структура - Структура со следующими полями:
//              Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Процедура ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ДанныеЗаполнения) Экспорт

	ЗаполнитьЗначенияСвойств(СтруктураПересчетаСуммы.Поля, ДанныеЗаполнения);

	СтруктураПересчетаСуммы.ИтогКоличество = 0;
	СтруктураПересчетаСуммы.Строки.Очистить();

КонецПроцедуры

// Добавляет строку для пересчета суммы в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//  Строка - ДанныеФормыЭлементКоллекции - строка, для которой необходимо рассчитать значения сумм.
//
Процедура ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, Строка) Экспорт

	СтруктураПересчетаСуммы.Строки.Добавить(Строка);
	СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество + Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

Конецпроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы) Экспорт
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Пересчитывает количество неотгружаемых упаковок товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		Если ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковокВДокументе - ТекущаяСтрока.КоличествоУпаковокВДокументеНеотгружаемые Тогда
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок - (ТекущаяСтрока.КоличествоУпаковокВДокументе - ТекущаяСтрока.КоличествоУпаковокВДокументеНеотгружаемые);
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает фактическое количество упаковок товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковокФакт;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает количество товара (в единицах хранения) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем УпаковкаНоменклатура;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", УпаковкаНоменклатура) Тогда
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура);
		ДанныеУпаковки = ПолучитьКоэффициентУпаковки(ПараметрыПересчета.Упаковка, КэшированныеЗначения, ПараметрыПересчета.Номенклатура);
		Количество = ТекущаяСтрока.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;

		Если ДанныеУпаковки.НужноОкруглятьКоличество
			И ПараметрыПересчета.НужноОкруглять Тогда
			ТекущаяСтрока.Количество = Окр(Количество, 0 ,РежимОкругления.Окр15как20);	
		Иначе
			ТекущаяСтрока.Количество = Количество;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

// Пересчитывает количество товара (в единицах хранения), имеющего заданный признак, в текущей строке табличной 
// части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ПараметрыПересчетаСуффикс;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаСуффикс) Тогда
		
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчетаСуффикс);
		ДанныеУпаковки = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура);
		
		Количество = ТекущаяСтрока["КоличествоУпаковок" + ПараметрыПересчета.Суффикс] * ДанныеУпаковки.Коэффициент;
		
		Если ДанныеУпаковки.НужноОкруглятьКоличество
			И ПараметрыПересчета.НужноОкруглять Тогда
			ТекущаяСтрока["Количество" + ПараметрыПересчета.Суффикс] = Окр(Количество, 0 ,РежимОкругления.Окр15как20);	
		Иначе
			ТекущаяСтрока["Количество" + ПараметрыПересчета.Суффикс] = Количество;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает количество упаковок товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		Если ТекущаяСтрока.Количество = 0 Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
		Иначе
			Коэффициент = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
			Если Коэффициент <> 0 Тогда
				ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество / Коэффициент;
			Иначе
				ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);
				
				ТекущаяСтрока.Количество = 0;
				ТекущаяСтрока.КоличествоУпаковок = 0;
				ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает количество упаковок товара, имеющего заданный признак, в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем ПараметрыПересчетаСуффикс;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",ПараметрыПересчетаСуффикс) Тогда
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчетаСуффикс);
		Если ТекущаяСтрока["Количество" + ПараметрыПересчета.Суффикс] = 0 Тогда
			ТекущаяСтрока["КоличествоУпаковок" + ПараметрыПересчета.Суффикс] = 0;
		Иначе
			Коэффициент = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
			Если Коэффициент <> 0 Тогда
				ТекущаяСтрока["КоличествоУпаковок" + ПараметрыПересчета.Суффикс] = ТекущаяСтрока["Количество" + ПараметрыПересчета.Суффикс] / Коэффициент;
			Иначе
				ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);
				
				ТекущаяСтрока["Количество" + ПараметрыПересчета.Суффикс] = 0;
				ТекущаяСтрока["КоличествоУпаковок" + ПараметрыПересчета.Суффикс] = 0;
				ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает отклонения по количеству упаковок товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоОтклонение(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем ЕстьУпаковки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение", ЕстьУпаковки) Тогда
		ТекущаяСтрока.КоличествоОтклонение = ТекущаяСтрока.КоличествоФакт - ТекущаяСтрока.Количество;
		Если ЕстьУпаковки Тогда
			ТекущаяСтрока.КоличествоУпаковокОтклонение = ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает отклонения по количеству упаковок товара, имеющего заданный признак, в текущей строке 
// табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт 
	
	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока["КоличествоУпаковок"] + ТекущаяСтрока["КоличествоУпаковокОтклонение"];
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену за упаковку товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену заказа за упаковку товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.ЦенаЗаказа = ТекущаяСтрока.ЦенаЗаказа
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

// Заполняет значение ставки НДС возвратной тары в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ЭтоВозвратнаяТара;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара)
		И ЭтоВозвратнаяТара И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает процент ручной скидки от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму ручной скидки на товар в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", ИмяКоличества) Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"; 
		КонецЕсли;
			
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"
		Конецесли;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму товара, имеющего заданный признак, в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСуффикс", Суффикс) Тогда
		Если Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = ""
		Конецесли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока["Сумма" + Суффикс] = ТекущаяСтрока.Цена * ТекущаяСтрока["КоличествоУпаковок" + Суффикс];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуВСтрокеТЧРасхождения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ТекущаяСтрока.КоличествоУпаковокПоДокументу = 0 Тогда
				ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			Иначе
				ДоляРасхождения = ТекущаяСтрока.КоличествоУпаковок / ТекущаяСтрока.КоличествоУпаковокПоДокументу;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаПоДокументу * ДоляРасхождения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


// Пересчитывает цену скидки в текущей строке.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества",ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
		КонецЕсли;
	#КонецЕсли
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И ТекущаяСтрока.Цена = 0 Тогда
					ТекущаяСтрока.СуммаРучнойСкидки = 0;
					ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				ИначеЕсли ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
		// Storverk Тюняков "ЦенаСоСкидкой"		
		ПересчитатьЦенуСоСкидкой(ТекущаяСтрока, ИмяКоличества); 
		// Storverk Тюняков "ЦенаСоСкидкой"
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену и сумму ручной скидки от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества",ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
		КонецЕсли;
	#КонецЕсли
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				
				Если ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Пересчитывает цену продажи товара от суммы продажи в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи") Тогда
		
		ТекущаяСтрока.ЦенаПродажи = ?(ТекущаяСтрока.КоличествоУпаковок <> 0, Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока.КоличествоУпаковок, 2, 1), 0);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара с учетом скидки в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
			ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
		// Storverk Тюняков "ЦенаСоСкидкой"		
		ПересчитатьЦенуСоСкидкой(ТекущаяСтрока); 
		// Storverk Тюняков "ЦенаСоСкидкой"
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает стоимость товара с учетом ручной скидки в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуРучнойСкидки = Неопределено;
		ИмяКоличества = Неопределено;
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуРучнойСкидки", ПересчитыватьСуммуРучнойСкидки);
			СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества);
			
			Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуРучнойСкидки = Ложь Тогда
			
		Иначе
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
			
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
		// Storverk Тюняков "ЦенаСоСкидкой"		
		ПересчитатьЦенуСоСкидкой(ТекущаяСтрока); 
		// Storverk Тюняков "ЦенаСоСкидкой"
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает стоимость товара с учетом скидки по бонусным баллам в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами", СтруктураПараметровДействия) Тогда
		
		Скидка = ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает стоимость товара с НДС в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуСНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара с НДС, имеющего заданный признак, в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуСНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Суффикс = "";
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДССуффикс", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			
			Суффикс = "";
			
		КонецЕсли;
		
		ТекущаяСтрока["СуммаСНДС" + Суффикс] = ТекущаяСтрока["Сумма" + Суффикс] + 
			?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока["СуммаНДС" + Суффикс]);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара без НДС в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ПересчитатьСуммуБезНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС;
	
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара в валюте регламентированного учета в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем КоэффициентПересчетаИзВалютыУпрВРегл;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл) Тогда
		ТекущаяСтрока.СуммаРегл = Окр(ТекущаяСтрока.СуммаБезНДС * КоэффициентПересчетаИзВалютыУпрВРегл, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму постоянной разницы в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуПРВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПР") И НЕ ТекущаяСтрока.ПринимаетсяКНУ Тогда
		ТекущаяСтрока.СуммаПР = ТекущаяСтрока.СуммаРегл;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму НДС в валюте регламентированного учета в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьНДСРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		НДСпоСтавкам4и2 = СтруктураПараметровДействия <> Неопределено
				И СтруктураПараметровДействия.Свойство("НДСпоСтавкам4и2")
				И СтруктураПараметровДействия.НДСпоСтавкам4и2;
		
		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС, НДСпоСтавкам4и2);
		ТекущаяСтрока.НДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.СуммаРегл, ТекПроцентНДС, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму продажи товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.ЦенаПродажи * ТекущаяСтрока.КоличествоУпаковок;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму продажи НДС товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуПродажиНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия = Неопределено Или Не СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		НДСпоСтавкам4и2 = СтруктураПараметровДействия <> Неопределено
				И СтруктураПараметровДействия.Свойство("НДСпоСтавкам4и2")
				И СтруктураПараметровДействия.НДСпоСтавкам4и2;
		
		ТекущийПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС, НДСпоСтавкам4и2);
		ТекущаяСтрока.СуммаПродажиНДС = Окр(ТекущаяСтрока.СуммаПродажи * ТекущийПроцентНДС / (1 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЕсли;

КонецПроцедуры

// Устанавливает признак активности строки в табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура УстановитьАктивностьСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		ТекущаяСтрока.Активность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле назначения товара (услуги) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПроверитьЗаполнитьНазначениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Назначение = Неопределено;
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение", Назначение) Тогда
		
		ТекущаяСтрока.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		
		Если Назначение <> Неопределено Тогда
			
			Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				
				ТекущаяСтрока.Назначение = Назначение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля, используемые для отражения расхождений и излишков по товару в текущей строке табличной 
// части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьФлагиРасхождениеИИзлишекПорча(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда
		ТекущаяСтрока.Расхождение = (ТекущаяСтрока.КоличествоУпаковок <> ТекущаяСтрока.КоличествоУпаковокФакт);		
	КонецЕсли;
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда
		ТекущаяСтрока.КоличествоУпаковокОтклонение = ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		ТекущаяСтрока.ИзлишекПорча = Истина;		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает нулевое значение в поле суммы взаиморасчетов по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		ТекущаяСтрока.СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает нулевое значение для процента и суммы скидки по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает нулевое значение для суммы вознаграждения по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ОчиститьСуммуВознагражденияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаВознаграждения = 0;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет поле партнера предопределенным значением в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьПартнера(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьПартнера") Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
			ТекущаяСтрока.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак безвозвратной тары в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьПризнакБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.БезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак отмены заказа по безвозвратной таре в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьПризнакОтмененоБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.ОтмененоБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И ТекущаяСтрока.Отменено;
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак активности строки безвозвратной тары в табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьПризнакАктивностьБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.АктивностьБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И ТекущаяСтрока.Активность;
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля дубликатов зависимых реквизитов в табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьДубликатыЗависимыхРеквизитов(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	Если Не СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", ПараметрСтруктурыДействий) Тогда
		Возврат;
	КонецЕсли;
	
	// ПараметрСтруктурыДействий - Структура
	// 		Ключ: Имя реквизита флага активности
	// 		Значение: Строка с перечислением через запятую имен зависимых реквизитов
	
	Для Каждого ПолеСтруктуры Из ПараметрСтруктурыДействий Цикл
		
		ИмяФлагаАктивности = ПолеСтруктуры.Ключ;
		ЗначениеФлагаАктивности = ТекущаяСтрока[ИмяФлагаАктивности];
		
		ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
		Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
			ТекущаяСтрока[Реквизит.Ключ+ИмяФлагаАктивности] = ?(
				ЗначениеФлагаАктивности,
				ТекущаяСтрока[Реквизит.Ключ],
				0);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Пересчитывает сумму сверх заказа по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуСверхЗаказаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа", СтруктураПараметровДействия) Тогда
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "СуммаСверхЗаказа") Тогда
			Если СтруктураПараметровДействия.РеализацияПоступлениеПоЗаказу И ТекущаяСтрока.КодСтроки = 0 Тогда
				Если СтруктураПараметровДействия.Свойство("ТребуетсяЗалогЗаТару")
					И СтруктураПараметровДействия.ТребуетсяЗалогЗаТару Тогда
					ТекущаяСтрока.СуммаСверхЗаказа = ТекущаяСтрока.СуммаСНДС;
				Иначе
					ТекущаяСтрока.СуммаСверхЗаказа = ТекущаяСтрока.СуммаСНДСБезВозвратнойТары;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.СуммаСверхЗаказа = 0;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле варианта отражения корректировки реализации в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьВариантОтраженияКорректировкиРеализации(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем Операция;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации", Операция) Тогда
		
		Если (ТекущаяСтрока.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			И ТекущаяСтрока.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			ИЛИ ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			
			Если Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара") Тогда
				ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьВыручку");
			ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара") Тогда
				ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьВыручку");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из обработчика реквизита "Номенклатура" табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - текущая строка табличной части.
//	СтруктураДействий - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - Структура - Кэшированные значения табличной части.
//
Процедура НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("НоменклатураПриИзмененииПереопределяемый", ПараметрыДействия) Тогда
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		МодификацияКонфигурацииПереопределяемый.НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	#Иначе
		МодификацияКонфигурацииКлиентПереопределяемый.НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из обработчика реквизита "Характеристика" табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - текущая строка табличной части.
//	СтруктураДействий - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - Структура - Кэшированные значения табличной части.
//
Процедура ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ХарактеристикаПриИзмененииПереопределяемый", ПараметрыДействия) Тогда
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		МодификацияКонфигурацииПереопределяемый.ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	#Иначе
		МодификацияКонфигурацииКлиентПереопределяемый.ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признаки категории эксплуатации в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - Кэшированные значения табличной части.
//
Процедура ЗаполнитьПризнакиКатегорииЭксплуатации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		
		СтруктураПризнаков = КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Получить(
			ТекущаяСтрока.КатегорияЭксплуатации);
			
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если СтруктураПризнаков = Неопределено Тогда
			СтруктураПризнаков = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущаяСтрока.КатегорияЭксплуатации,
				"ИнвентарныйУчет, СпособПогашенияСтоимостиБУ, СрокЭксплуатации, СтатьяРасходов");
			КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Вставить(
				ТекущаяСтрока.КатегорияЭксплуатации,
				СтруктураПризнаков);
		КонецЕсли;
	#КонецЕсли
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПризнаков);
		
	КонецЕсли;
	
КонецПроцедуры


// Очищает значения полей аналитики и статьи расходов в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - Кэшированные значения табличной части.
//
Процедура ПроверитьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяРасходов) Тогда
			ТекущаяСтрока.СтатьяРасходов = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.АналитикаРасходов) Тогда
			ТекущаяСтрока.АналитикаРасходов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет служебные реквизиты в строке списка товаров "ДатаОтгрузкиОбязательна" и "СкладОбязателен".
//
// Параметры:
//  ТекущаяСтрока		 - ДанныеФормыЭлементКоллекции, Структура	 - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура								 - если содержит свойство "ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
//  								то обработка данных строки будет произведена. Структура с ключами:
//  								*ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения - Структура - структура с полями:
//  									**ЕстьРаботы - Булеов - если значение свойства "Истина", значит в списке могут быть работы или услуги.
//  									**ЕстьОтменено - Булево - если значение свойства "Истина" значит в списке могут быть отмененные строки.
//  									**ДоступноОбеспечение - Булево - если значение свойства "Ложь", то вариант обеспечения "К обеспечению" не формирует потребность,
//	  									например, если документ не согласован.
//
Процедура ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		
		ПараметрыДействия = СтруктураДействий.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения;
		Отменено = ПараметрыДействия.ЕстьОтменено И ТекущаяСтрока.Отменено;
		ЭтоРабота = ПараметрыДействия.ЕстьРаботы
			И(ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
				Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
				
		ДоступноОбеспечение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДействия, "ДоступноОбеспечение", Истина);
		
		ДатаОтгрузкиВСтрокеОбязательна = ОбеспечениеКлиентСервер.ДатаОтгрузкиОбязательна(
											ТекущаяСтрока, ДоступноОбеспечение, ПараметрыДействия.ЕстьОтменено);
		
		ТекущаяСтрока.ДатаОтгрузкиОбязательна = ?(ДатаОтгрузкиВСтрокеОбязательна, 1, 0);
		
		ЭтоПроизводство = ПараметрыДействия.Свойство("ЭтоПроизводство"); // Устанавливается в заказе материалов в производство, нарушает логику проверки склада.
		ТекущаяСтрока.СкладОбязателен = ?(Не ЭтоРабота И Не Отменено 
											И (ТекущаяСтрока.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
		                                		Или ЭтоПроизводство), 1, 0);
		
	КонецЕсли;
	
КонецПроцедуры


// Заполняет служебные реквизиты в строке на основании выбранного склада
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьТипСклада(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем ПараметрыЗаполнения;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьТипСклада", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока[ПараметрыЗаполнения.Склад]) Тогда
		ТипСклада = КэшированныеЗначения.СвойстваСкладов.Получить(ТекущаяСтрока[ПараметрыЗаполнения.Склад]); 
		Если ТипСклада = Неопределено Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока[ПараметрыЗаполнения.Склад], "ТипСклада");
				КэшированныеЗначения.СвойстваСкладов.Вставить(ТекущаяСтрока[ПараметрыЗаполнения.Склад], ТипСклада);
			#Иначе
				ТекстИсключения = НСтр("ru = 'Попытка заполнения служебных реквизитов на основании выбранного склада на клиенте.'");
				ВызватьИсключение ТекстИсключения;
			#КонецЕсли
		КонецЕсли;
	Иначе
		ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ПустаяСсылка");
	КонецЕсли;
	
	ТекущаяСтрока[ПараметрыЗаполнения.ТипСклада] = ТипСклада;
	
КонецПроцедуры

// Заполняет способ определения себестоимости строкой
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия.
//
Процедура ЗаполнитьСпособОпределенияСебестоимостиСтрокой(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем СтруктураПараметров;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСпособОпределенияСебестоимостиСтрокой", СтруктураПараметров)
		И ТекущаяСтрока.Свойство("СпособОпределенияСебестоимостиСтрокой") Тогда
		
		Если ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимости.ИзТекущегоДокумента") Тогда
			Представление = НСтр("ru='Равна сумме в данной строке'");
		ИначеЕсли ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимости.ИзДокументаПродажи") Тогда
			Представление = НСтр("ru='Определяется из документа продажи'");
		ИначеЕсли ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимости.Вручную") Тогда
			Если СтруктураПараметров.ИспользоватьРеглУчет Тогда
				Если СтруктураПараметров.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС") Тогда
					Представление = НСтр("ru='Упр. с НДС: %1%(%2%), Регл. без НДС: %3%(%4%)'");
				Иначе
					Представление = НСтр("ru='Упр.: %1%(%2%), Регл.: %3%(%4%)'");
				КонецЕсли;
			Иначе
				Если СтруктураПараметров.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС") Тогда
					Представление = НСтр("ru='Упр. с НДС: %1%(%2%)'");
				Иначе
					Представление = НСтр("ru='Упр.: %1%(%2%)'");
				КонецЕсли;
			КонецЕсли; 
			Представление = СтрЗаменить(Представление, "%1%", Формат(ТекущаяСтрока.Себестоимость, "ЧДЦ=2; ЧН=0"));
			Представление = СтрЗаменить(Представление, "%2%", СтруктураПараметров.ВалютаУправленческогоУчета);
			Представление = СтрЗаменить(Представление, "%3%", Формат(ТекущаяСтрока.СебестоимостьРегл, "ЧДЦ=2; ЧН=0"));
			Представление = СтрЗаменить(Представление, "%4%", СтруктураПараметров.ВалютаРегламентированногоУчета);
		КонецЕсли;
		ТекущаяСтрока.СпособОпределенияСебестоимостиСтрокой = Представление;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет способ определения себестоимости строкой
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия.
//
Процедура ЗаполнитьСпособОпределенияСебестоимости(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем СпособОпределенияСебестоимости;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСпособОпределенияСебестоимости", СпособОпределенияСебестоимости)
		И ТекущаяСтрока.Свойство("СпособОпределенияСебестоимости") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументРеализации) Тогда
			ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимости.ИзДокументаПродажи")
		Иначе
			ТекущаяСтрока.СпособОпределенияСебестоимости = СпособОпределенияСебестоимости;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму налогового учета в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуНУВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНУ") Тогда
		ТекущаяСтрока.СуммаНУ = ТекущаяСтрока.СуммаРегл - ТекущаяСтрока.СуммаПР
			- ?(СтруктураДействий.Свойство("ПересчитатьСуммуВР"), 0, ТекущаяСтрока.СуммаВР);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму временной разницы в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуВРВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуВР") Тогда
		ТекущаяСтрока.СуммаВР = ТекущаяСтрока.СуммаРегл - ТекущаяСтрока.СуммаНУ - ТекущаяСтрока.СуммаПР;
	КонецЕсли;
	
КонецПроцедуры

// Storverk Тюняков "ЦенаСоСкидкой"
Процедура ПересчитатьЦенуСоСкидкой(ТекущаяСтрока, Знач ИмяКоличества = Неопределено) Экспорт

	Если ИмяКоличества = Неопределено Тогда
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли; 
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "ЦенаСоСкидкой") Тогда
		
		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Цена;
		
		СуммаСкидки = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если ТекущаяСтрока[ИмяКоличества]<>0
			И СуммаСкидки <> 0 Тогда
			
			ТекущаяСтрока.ЦенаСоСкидкой	= Окр(ТекущаяСтрока.Цена - СуммаСкидки / ТекущаяСтрока[ИмяКоличества], 2);		
			
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрочиеПроцедуры

Процедура ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока)
	
	ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу;
	ТекущаяСтрока.СуммаРасхождения              = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаПоДокументу;
	ТекущаяСтрока.СуммаНДСРасхождения           = ТекущаяСтрока.СуммаНДС - ТекущаяСтрока.СуммаНДСПоДокументу;
	ТекущаяСтрока.СуммаСНДСРасхождения          = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаСНДСПоДокументу;
	ТекущаяСтрока.ЕстьРасхождения               = (ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0);
	
КонецПроцедуры

Функция НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура) Экспорт
	
	Если УпаковкаНоменклатура = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		Упаковка = ТекущаяСтрока.Упаковка;
		НужноОкруглять = Истина;
		
	ИначеЕсли ТипЗнч(УпаковкаНоменклатура) = Тип("Структура") Тогда
		
		Если УпаковкаНоменклатура.Свойство("Упаковка") Тогда
			Упаковка = УпаковкаНоменклатура.Упаковка;
		Иначе
			Упаковка = ТекущаяСтрока.Упаковка;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("Номенклатура") Тогда
			Номенклатура = УпаковкаНоменклатура.Номенклатура;
		Иначе
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = УпаковкаНоменклатура.НужноОкруглять;
		Иначе
			НужноОкруглять = Истина;
		КонецЕсли;
		
	Иначе
		Упаковка = УпаковкаНоменклатура;	
		Номенклатура = ТекущаяСтрока.Номенклатура;
		НужноОкруглять = Истина;
	КонецЕсли;

	Возврат Новый Структура("Номенклатура,Упаковка,НужноОкруглять", Номенклатура, Упаковка, НужноОкруглять); 
	
КонецФункции

Функция НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчета) Экспорт
	
	Суффикс = "";
	НужноОкруглять = Истина;
	
	Если ТипЗнч(ПараметрыПересчета) = Тип("Структура") Тогда
		
		Если ПараметрыПересчета.Свойство("Суффикс") Тогда
			Суффикс = ПараметрыПересчета.Суффикс;
		КонецЕсли;
		
		Если ПараметрыПересчета.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = ПараметрыПересчета.НужноОкруглять;
		КонецЕсли;
	Иначе
		Суффикс = ПараметрыПересчета;
	КонецЕсли;

	Если Суффикс = Неопределено Тогда
		Суффикс = "";
	КонецЕсли;
	
	Возврат Новый Структура("Суффикс,НужноОкруглять", Суффикс, НужноОкруглять); 
	
КонецФункции

Функция ПолучитьКоэффициентУпаковки(ТекУпаковка, КэшированныеЗначения, ТекНоменклатура = Неопределено) Экспорт

	Результат = Новый Структура("Коэффициент,НужноОкруглятьКоличество");
	
	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		КлючКоэффициента = КлючКэшаУпаковки(ТекНоменклатура, ТекУпаковка); 
		Кэш = КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента];
		Если Кэш = Неопределено Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ЗначенияРеквизитов = ОбработкаТабличнойЧастиСервер.ДанныеОбУпаковке(ТекНоменклатура, ТекУпаковка, КэшированныеЗначения);
				Результат.Коэффициент    		   =  ЗначенияРеквизитов.Коэффициент;
				Результат.НужноОкруглятьКоличество =  ЗначенияРеквизитов.НужноОкруглятьКоличество;
			#Иначе
				ТекстИсключения = НСтр("ru = 'Попытка получения коэффициента упаковки на клиенте.'");
				ВызватьИсключение ТекстИсключения;
			#КонецЕсли
		Иначе
			Результат = Кэш;
		КонецЕсли;
	Иначе
		Результат.Коэффициент = 1;
		Результат.НужноОкруглятьКоличество = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ПересчитатьКоличествоУпаковокПоВесу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу", Суффикс) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока.Вес *
			ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияВеса, КэшированныеЗначения).Коэффициент /
			ТекущаяСтрока.ВесУпаковки;
		ТекущаяСтрока["Количество" + Суффикс] = ТекущаяСтрока["КоличествоУпаковок" + Суффикс]
			* ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
		ОбъемЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияОбъема, КэшированныеЗначения).Коэффициент;
		Если ОбъемЕдиницыИзмерения<>0 Тогда
			ТекущаяСтрока.Объем = ТекущаяСтрока["КоличествоУпаковок" + Суффикс] *
				ТекущаяСтрока.ОбъемУпаковки /
				ОбъемЕдиницыИзмерения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокПоОбъему(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему", Суффикс) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока.Объем *
			ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияОбъема, КэшированныеЗначения).Коэффициент /
			ТекущаяСтрока.ОбъемУпаковки;
		ТекущаяСтрока["Количество" + Суффикс] = ТекущаяСтрока["КоличествоУпаковок" + Суффикс]
			* ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
		ВесЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияВеса, КэшированныеЗначения).Коэффициент;
		Если ВесЕдиницыИзмерения<>0 Тогда
			ТекущаяСтрока.Вес = ТекущаяСтрока["КоличествоУпаковок" + Суффикс] *
				ТекущаяСтрока.ВесУпаковки /
				ВесЕдиницыИзмерения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьВесОбъемВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем", Суффикс) Тогда
		ВесЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияВеса, КэшированныеЗначения).Коэффициент;
		Если ВесЕдиницыИзмерения * ТекущаяСтрока.ВесУпаковки <> 0 Тогда
			ТекущаяСтрока.Вес = ТекущаяСтрока["КоличествоУпаковок" + Суффикс] *
				ТекущаяСтрока.ВесУпаковки /
				ВесЕдиницыИзмерения;
		КонецЕсли;
		ОбъемЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияОбъема, КэшированныеЗначения).Коэффициент;
		Если ОбъемЕдиницыИзмерения * ТекущаяСтрока.ОбъемУпаковки<>0 Тогда
			ТекущаяСтрока.Объем = ТекущаяСтрока["КоличествоУпаковок" + Суффикс] *
				ТекущаяСтрока.ОбъемУпаковки /
				ОбъемЕдиницыИзмерения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция КлючКэшаУпаковки(Номенклатура, Упаковка) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		КлючНоменклатура = Строка(Номенклатура.УникальныйИдентификатор());
	Иначе
		КлючНоменклатура = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		КлючУпаковка = Строка(Упаковка.УникальныйИдентификатор());
	Иначе
		КлючУпаковка = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючНоменклатура + КлючУпаковка;
	
КонецФункции

Процедура ПриИзмененииНазначенияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		
		ТекущаяСтрока.НазначениеОтправителя = ТекущаяСтрока.Назначение;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму автоматической скидки на товар в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуАвтоматическойСкидки", ИмяКоличества) Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"; 
		КонецЕсли;
			
		ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена
		                                              * ТекущаяСтрока.ПроцентАвтоматическойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
