
#Область ПрограммныйИнтерфейс

// Преобразует строку в значение типа Дата. При неудаче возвращает пустую дату.
//
// Параметры:
//    Источник - Строка - Преобразуемое значение
//
// Возвращаемое значение:
//    Дата - Полученная дата
//
Функция ПолучитьДатуИзСтроки(Знач Источник) Экспорт
	
	Приемник = '00010101';
	
	Если ПустаяСтрока(Источник) Тогда
		Возврат Приемник;
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Источник);
		
	Исключение
	
		Буфер = Источник;
		
		ПозицияТочки = СтрНайти(Буфер, ".");
		
		Если ПозицияТочки = 0 Тогда
			Возврат Приемник;
		КонецЕсли;
		
		ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
		Буфер = Сред(Буфер, ПозицияТочки + 1);
		
		ПозицияТочки = СтрНайти(Буфер, ".");
		
		Если ПозицияТочки = 0 Тогда
			Возврат Приемник;
		КонецЕсли;
		
		МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
		ГодДаты = Сред(Буфер, ПозицияТочки + 1);
		
		Попытка
			
			Если СтрДлина(ГодДаты) = 2 Тогда
			
				Если Число(ГодДаты) < 50 Тогда
					ГодДаты = "20" + ГодДаты;
				Иначе
					ГодДаты = "19" + ГодДаты;
				КонецЕсли;
			
			КонецЕсли;
			
		Исключение
			Возврат Приемник;
		КонецПопытки;
		
		Попытка
			
			Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
			
		Исключение
			
			Возврат Приемник;
			
		КонецПопытки;
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

// Преобразует строку в значение числового типа. При неудаче возвращает Неопределено.
//
// Параметры:
//    Источник - Строка - Преобразуемое значение
//
// Возвращаемое значение:
//    Число - Полученное число
//
Функция ПреобразоватьВЧисло(Знач Буфер) Экспорт
	
	Буфер = СокрЛП(СтрЗаменить(Буфер, " ", ""));
	Если Не ПустаяСтрока(Буфер)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		Результат = Число(Буфер);
		Если Результат < 0 Тогда
			Результат = - Результат;
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные файла выписки
//
// Параметры :
//    СтрокиВыписки - Массив - Массив строк файла выписки
//    ЧитатьДокументы - Булево - Признак чтения всей выписки, включая документы
//
// Возвращаемое значение:
//    Структура - Данные выписки
//
Функция РазобратьФайлВыписки(СтрокиВыписки, ЧитатьДокументы = Истина) Экспорт
	
	Если ТипЗнч(СтрокиВыписки) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
	ЗаголовокВыписки        = Неопределено;
	СписокСчетовВыписки     = Новый Массив;
	РасчетныеСчетаВыписки   = Новый Массив;
	ДокументыВыписки        = Новый Массив;
	ОшибкиРазбора           = Новый Массив;
	
	Попытка
	
	КоличествоСтрок = СтрокиВыписки.Количество();
	ТекущаяСтрока = 1;
	Пока ТекущаяСтрока < КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки);
		
		Значение = "";
		Тег = "";
		РазобратьТеговуюСтроку(Стр, Тег, Значение);
		
		Если Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Если Не ЧитатьДокументы Тогда
				Прервать;
			КонецЕсли;
			
			ТегиСтрокиДокумента = ТегиСтрокиДокумента();
			ТегиСтрокиДокумента.Операция = Значение;
			
			ЗагрузитьСекциюДокумента(ТегиСтрокиДокумента, ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки);
			
			ДокументыВыписки.Добавить(ТегиСтрокиДокумента);
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтруктураРССчет = ЗагрузитьСекциюРасчСчета(ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки);
			Если СтруктураРССчет <> Неопределено Тогда
				РасчетныеСчетаВыписки.Добавить(СтруктураРССчет);
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда
			
			Значение = "";
			Тег      = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			Если Тег = "РАСЧСЧЕТ" Тогда
				Если СписокСчетовВыписки.Найти(Значение) = Неопределено Тогда
					СписокСчетовВыписки.Добавить(Значение);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			Прервать;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			Продолжить;
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр, ТекущаяСтрока, ЗаголовокВыписки);
			
		КонецЕсли;
	КонецЦикла;
	
	Результат.Заголовок        = ЗаголовокВыписки;
	Результат.СписокСчетов     = СписокСчетовВыписки;
	Результат.РасчетныеСчета   = РасчетныеСчетаВыписки;
	Результат.ОшибкиРазбора    = ОшибкиРазбора;
	Результат.ДокументыВыписки = ДокументыВыписки;
	
	Исключение
		
		ОшибкиРазбора.Добавить(НСтр("ru = 'Структура файла не соответствует поддерживаемому формату.'"));
		
		Результат.Заголовок        = ЗаголовокВыписки;
		Результат.СписокСчетов     = СписокСчетовВыписки;
		Результат.РасчетныеСчета   = РасчетныеСчетаВыписки;
		Результат.ОшибкиРазбора    = ОшибкиРазбора;
		Результат.ДокументыВыписки = ДокументыВыписки;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Проверка корректности банковского счета
//
// Параметры:
//  Номер        - Строка - Номер банковского счета.
//  ВалютныйСчет - Булево - Признак, является ли счет валютным.
//  ТекстОшибки  - Строка - Текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Булево
//  Истина - контрольный ключ верен
//  Ложь - контрольный ключ не верен
//
Функция ПроверитьКорректностьНомераСчета(Знач Номер, ВалютныйСчет = Ложь, ТекстОшибки = "") Экспорт
	
	Результат = Истина;
	Номер = СокрЛП(Номер);
	Если ПустаяСтрока(Номер) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ДлинаНомера = СтрДлина(Номер);
	Если Не ВалютныйСчет И Не (ДлинаНомера = 20 Или ДлинаНомера = 11) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			СтрШаблон(НСтр("ru = 'Номер счета должен состоять из 20 или 11 цифр. Введено %1 цифр'"), ДлинаНомера);
		Результат = Ложь;
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В номере банковского счета присутствуют не только цифры.
				|Возможно, номер указан неверно.'");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПлатежныйКалендарь

Процедура ПересчитатьПодчиненныеСтрокиДерева(СтрокаДерева, ДнейПланирования) Экспорт
	
	Если СтрокаДерева.ВидСтроки = 0 Тогда // Остаток в валюте ДС, либо в валюте платежа
		
		НачальныйОстаток = СтрокаДерева.Остаток;
		Для Инд = 0 По ДнейПланирования Цикл
			СтрокаДерева["День" + Инд] = НачальныйОстаток + СтрокаДерева["День" + Инд + "ВВалюте"];
			НачальныйОстаток = СтрокаДерева["День" + Инд];
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.ВидСтроки = 2 Тогда // Остаток в одной валюте
		
		СтрокаДерева.Остаток = СтрокаДерева.ОстатокВОднойВалюте;
		НачальныйОстаток = СтрокаДерева.ОстатокВОднойВалюте;
		Для Инд = 0 По ДнейПланирования Цикл
			СтрокаДерева["День" + Инд] = НачальныйОстаток + СтрокаДерева["День" + Инд + "ВОднойВалюте"];
			НачальныйОстаток = СтрокаДерева["День" + Инд];
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.ВидСтроки = 1 Тогда // Оборот в валюте ДС, либо в валюте платежа
		
		Для Инд = 0 По ДнейПланирования Цикл
			СтрокаДерева["День" + Инд] = СтрокаДерева["День" + Инд + "ВВалюте"];
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.ВидСтроки = 3 Тогда // Оборот в одной валюте
		
		Для Инд = 0 По ДнейПланирования Цикл
			СтрокаДерева["День" + Инд] = СтрокаДерева["День" + Инд + "ВОднойВалюте"];
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Строки = СтрокаДерева.ПолучитьЭлементы();
	Иначе
		Строки = СтрокаДерева.Строки;
	КонецЕсли;
		
	Для каждого СтрокаДерева Из Строки Цикл
		ПересчитатьПодчиненныеСтрокиДерева(СтрокаДерева, ДнейПланирования);
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаПлатежа(ПланироватьСДаты, День) Экспорт
	
	Возврат ПланироватьСДаты + 86400 * (День - 1);
	
КонецФункции

Функция ДеньПлатежа(ПланироватьСДаты, ДатаПлатежа) Экспорт
	
	Если ПланироватьСДаты > ДатаПлатежа Тогда
		Возврат 0;
	Иначе
		Возврат (ДатаПлатежа - ПланироватьСДаты)/86400 + 1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РазборВыписки

Процедура ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, ТекущаяСтрока, ЗаголовокВыписки)
	
	Если ТипЗнч(ЗаголовокВыписки) = Тип("Неопределено") Тогда
		ЗаголовокВыписки = Новый Структура(
			ВРЕГ("ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца"));
	КонецЕсли;
	
	Значение = ""; Тег = "";
	
	Если РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение) Тогда
		Если ЗаголовокВыписки.Свойство(Тег) Тогда
			
			ЗаголовокВыписки[Тег] = Значение;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьСекциюРасчСчета(ТекущаяСтрока, КоличествоСтрок, МассивСтрок)
	
	ТегиРасчетногоСчета = ТегиРасчетногоСчета();
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок);
	
	Значение = ""; Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета.Свойство(Тег) Тогда
			
			ТегиРасчетногоСчета[Тег] = Значение;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок);
		
		Значение = ""; Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат ТегиРасчетногоСчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьСекциюДокумента(СтрокаДокумента, ТекущаяСтрока, КоличествоСтрок, МассивСтрок)
	
	СекцияДокумента = "СЕКЦИЯДОКУМЕНТ=" + СтрокаДокумента.Операция + Символы.ПС;
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок);
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		Тег      = "";
		Значение = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			СекцияДокумента = СекцияДокумента + СтрокаРазбора + Символы.ПС;
			
			Если СтрокаДокумента.Свойство(Тег) Тогда
				
				Если ЗначениеЗаполнено(Значение) И НЕ ЗначениеЗаполнено(СтрокаДокумента[Тег]) Тогда
					СтрокаДокумента[Тег] = Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок);
		
	КонецЦикла;
	
	СтрокаДокумента.ДанныеВыписки = СекцияДокумента + "КОНЕЦДОКУМЕНТА";
	
КонецПроцедуры

Функция ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер) ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если ТекущаяСтрока > КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		
		Буфер = МассивСтрок[ТекущаяСтрока - 1];
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Функция ТегиРасчетногоСчета()
	
	Возврат Новый Структура("ДатаНачала, ДатаКонца, РасчСчет, НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток");
	
КонецФункции

Функция ТегиСтрокиДокумента()
	
	Возврат Новый Структура(
		"Номер, Дата, Сумма,
		|ВидПлатежа, ВидОплаты, Операция,
		|КвитанцияДата, КвитанцияВремя, КвитанцияСодержание,
		|ДатаСписано, ДатаПоступило,
		|ПлательщикСчет, Плательщик, ПлательщикИНН, Плательщик1,
		|ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,
		|Плательщик2, Плательщик3, Плательщик4,
		|ПолучательСчет, Получатель, ПолучательИНН, Получатель1,
		|ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет,
		|Получатель2, Получатель3, Получатель4,
		|СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ОКТМО,
		|ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа,
		|Код,
		|НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6,
		|СрокПлатежа, Очередность,
		|УсловиеОплаты1, УсловиеОплаты2, УсловиеОплаты3,
		|СрокАкцепта, ВидАккредитива, ПлатежПоПредст, ДополнУсловия, НомерСчетаПоставщика, ДатаОтсылкиДок,
		|ДанныеВыписки
		|");
	
КонецФункции

#КонецОбласти

#КонецОбласти