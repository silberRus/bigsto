
////////////////////////////////////////////////////////////////////////////////
// В модуле "СТ_Общий" содержится сферический говнокод, но он
// может быть использован в старых внешних обработках, поэтому пусть живет.
// Новых процедур и функций сюда НЕ ДОБАВЛЯТЬ!!!
//
////////////////////////////////////////////////////////////////////////////////



/// Права досутпа

&НаСервере
Функция ЭтоСклад() Экспорт
	Результ = Ложь;
	
	
	сПольз = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",сПольз);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыДоступаПользователи.Ссылка,
	               |	ГруппыДоступаПользователи.Ссылка.Наименование   Наименование
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |ГДЕ
	               |	ГруппыДоступаПользователи.Пользователь = &Пользователь";
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Если Рез.Наименование = "Склад" Тогда
			Результ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат Результ;	
КонецФункции
//

//ЗаполнитьУсловияПродажВСтрокеТЧ

&НаСервере
Функция ПолучитьПр_ль(Номенклатура) экспорт
	Результ = "";
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда	
		Для Каждого Стр из  Номенклатура.ДополнительныеРеквизиты Цикл
			Если Стр.Свойство.Заголовок = "Пр_ль" Тогда
				Результ = Стр.Значение;
				BREAK;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СокрЛП(Результ);	
КонецФункции

&НаСервере
Функция ПолучитьМассивДопСвойств(НаименованиеСвойства) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заголовок",НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыИСведения.Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Заголовок = &Заголовок
	               |
	               |	И ДополнительныеРеквизитыИСведения.ПометкаУдаления = Ложь";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции


&НаСервере
Функция ПолучитьПрайсовуюЦену(Номенклатура,Поставщик,Ссылка = "") экспорт
	Результ = 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатурыПоставщиковСрезПоследних.УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика,
	               |	ЦеныНоменклатурыПоставщиковСрезПоследних.Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	               |			&Дата,
	               |			Регистратор <> &Ссылка
	               |				И Соглашение В
	               |					(ВЫБРАТЬ
	               |						Справочник.СоглашенияСПоставщиками.Ссылка
	               |					ИЗ
	               |						Справочник.СоглашенияСПоставщиками
	               |					ГДЕ
	               |						Справочник.СоглашенияСПоставщиками.Партнер = &Поставщик)
	               |				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УсловиеЦеныПоставщика";
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Если Строка(Рез.УсловиеЦеныПоставщика) = "" Тогда
			Результ = Рез.Цена;
		КонецЕсли;
	КонеццИкла;
	
	Возврат Результ;	
КонецФункции

//////////////////////***************************
//////////////////////***************************
//		Аналоги
//////////////////////***************************

&НаСервере  
Функция УстановитьАналоги(Номенклатура,СтрАналоги,Множество = Ложь) Экспорт
	Разделитель0= ", ";
	Разделитель = ",";
	МАналоги = Новый Массив;
	Если Множество Тогда
		
		МнСтр=СтрЗаменить( СтрЗаменить(СтрАналоги,Разделитель0,Разделитель)
							,Разделитель
							,Символы.ПС);
		Для н=1 По СтрЧислоСтрок(МнСтр) Цикл
			МАналоги.Добавить(СтрПолучитьСтроку(МнСтр,н));
		КонецЦикла;
	Иначе
		МАналоги.Добавить(Лев(СокрЛП(СтрАналоги),99));
	КонецЕсли;
	
	/// Определяем текущие анаоги
	Обр = Обработки.СТ_РедактированиеАналогов.Создать();
	Если Множество Тогда
		МДейств = Обр.ПолучитьМассивАналогов(Номенклатура);
		/// Отменяем ранее действующие которых нету
		Для Каждого Аналог Из МДейств Цикл
			Если МАналоги.Найти(Аналог)=Неопределено Тогда
				Обр.ДобавитьИзменитьЗапись(Номенклатура,Аналог,Ложь);
			КонецЕсли;   			
		КонецЦикла;
		/// Добовляем новые
		Для Каждого Аналог Из МАналоги Цикл
			Если МДейств.Найти(Аналог)=Неопределено Тогда
				Обр.ДобавитьИзменитьЗапись(Номенклатура,Аналог,Истина);
			КонецЕсли;   			
		КонецЦикла;
		
	Иначе
		Обр.ДобавитьИзменитьЗапись(Номенклатура,СтрАналоги,Истина);
	КонецЕсли;
	
	
КонецФункции


&НаСервере
Функция ПолучитьСтрокуАналогов(Номенклатура) экспорт
	Результат = "";
	//Обр = Обработки.СТ_РедактированиеАналогов.Создать();
	МАналоги = ПолучитьМассивАналогов(Номенклатура);
	Для Каждого Аналог из МАналоги Цикл
		Результат = Результат + Аналог + ",";
	КонецЦикла;
	Если Прав(Результат,1)="," Тогда
		Результат = Лев(Результат,СтрДлина(Результат)-1);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьМассивАналогов(Номенклатура) Экспорт
	
	Результ = Новый Массив;
	
	Отбор = Новый Структура("Номенклатура");
	Отбор.Номенклатура = Номенклатура; 

	Выборка = РегистрыСведений.СТ_Аналоги.СрезПоследних(,Отбор);	
	Для Каждого Стр Из  Выборка Цикл
		Если Стр.Действует Тогда
			Результ.Добавить(СокрЛП(Стр.Аналог));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результ;                            
КонецФункции


//////////////////////***************************
//////////////////////***************************
//		Обновить ХЭШ поиска
//////////////////////***************************
&НаСервере
Функция ОбновитьХЭШПоискаНоменклатура(НоменклатураСсылка) Экспорт
	
	Если 1 =2 Тогда НоменклатураСсылка = Справочники.Номенклатура.ПустаяСсылка(); КонецЕсли;
	
	ОбновитьХЭШПоиска("Номенклатура",НоменклатураСсылка,"Артикул",НоменклатураСсылка.Артикул);
	ОбновитьХЭШПоиска("Номенклатура",НоменклатураСсылка,"Код",НоменклатураСсылка.Код);
	ОбновитьХЭШПоиска("Номенклатура",НоменклатураСсылка,"Наименование",НоменклатураСсылка.Наименование);
	ОбновитьХЭШПоиска("Номенклатура",НоменклатураСсылка,"Производитель",НоменклатураСсылка.Производитель);
	
	МСвойство = ПолучитьМассивДопСвойств("Пр_ль");
	
	НЗ = РегистрыСведений.СТ_ХЭШПоиска.СоздатьНаборЗаписей();
	НЗ.Отбор.Тип.Установить("Номенклатура");
	НЗ.Отбор.Объект.Установить(НоменклатураСсылка);
	НЗ.Прочитать();
	НЗ.Записать(истина);

	Для Каждого Эл из МСвойство Цикл
		ПараметрыОтбора = Новый Структура("Свойство",Эл);
		ССтр = НоменклатураСсылка.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
		Если ССтр.Количество() >0 тогда			
			ОбновитьХЭШПоиска("Номенклатура",НоменклатураСсылка,""+ССтр[0].Свойство.Заголовок,ССтр[0].Значение);  			
		КонецЕсли;		
		
	КонецЦикла;	
КонецФункции

&НаСервере
Функция ОбновитьХЭШПоиска(Тип,Объект,Ключ,Значение) Экспорт
	
	нКлючь = ПодготовитьСтроку(Ключ);
	нЗначение = ПодготовитьСтроку(Значение);
	НЗ = РегистрыСведений.СТ_ХЭШПоиска.СоздатьНаборЗаписей();
	НЗ.Отбор.Тип.Установить(Тип);
	НЗ.Отбор.Объект.Установить(Объект);
	НЗ.Отбор.Ключ.Установить(нКлючь);
	//НЗ.Отбор.Период.Установить(Дата(2014,01,01));

	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		Стр = НЗ.Добавить();
	Иначе
		Стр = НЗ.Получить(0);
	КонецЕсли;
	
	Стр.Тип = Тип;		
	Стр.Объект = Объект;
	Стр.Ключ = нКлючь; 
	Стр.Значение = нЗначение; 
	Стр.ОригинальноеЗначение = СокрЛП(Значение);
	
	НЗ.Записать(истина);	
КонецФункции


//////////////////////***************************
//////////////////////***************************
//		Поиск номенклатуры
//////////////////////***************************

&НаСервере
Функция ПолучитьНоменклатуруСервер(Значение,Пр,ПолеПоиска)экспорт	
	Результ = Справочники.Номенклатура.ПустаяСсылка();
	
	Сообщить("Процедура СТ_Общий.ПолучитьНоменклатуруСервер не актуальна после перехода с Пр_ль на Артикул.", СтатусСообщения.Информация);
	
	Возврат Результ;
	
	Запрос = Новый Запрос;		
	Запрос.УстановитьПараметр("Ключ",ПодготовитьСтроку(ПолеПоиска));  	
	Запрос.УстановитьПараметр("Знач",ПодготовитьСтроку(Значение));  	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТНомен.Объект КАК Ссылка,
	               |	ТНомен.ОригинальноеЗначение
	               |ИЗ
	               |	РегистрСведений.СТ_ХЭШПоиска КАК ТНомен
	               |ГДЕ
	               |	ТНомен.Ключ = &Ключ
	               |	И ТНомен.Значение = &Знач"
				   ;
	Рез = Запрос.Выполнить().Выбрать();
	//Попробуем проверить на оригинальное значение
	Пока Рез.Следующий() Цикл		
		Результ = Рез.Ссылка;
		Если Рез.ОригинальноеЗначение = СокрЛП(Значение) Тогда
			BREAK;
		КонецЕсли;
	КонецЦикла;
	Возврат Результ;
	
	//Старый вариант
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Знач",СокрЛП(Значение));
	Если ПолеПоиска = "Пр_ль" тогда
		МассивСвойств = Новый Массив;
		Выборка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если(НЕ Выборка.ПометкаУдаления)И(Выборка.Заголовок = ПолеПоиска)Тогда
				МассивСвойств.Добавить(Выборка.Ссылка);			
			КонецЕсли
		КонецЦикла;  
		Запрос.УстановитьПараметр("МассивСвойств",МассивСвойств);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТДопРекв.Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТДопРекв
		               |ГДЕ     ТДопРекв.Свойство В(&МассивСвойств) и 
		               |	ТДопРекв.Значение = &Знач";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	номен.Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура КАК номен
		               |ГДЕ
		               |	номен.Код = &Знач";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"номен.Код","номен."+ПолеПоиска);
	КонецЕсли;
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Результ = Рез.Ссылка;
	КонецЕсли;
	Возврат Результ;
	
КонецФункции


&НаКлиенте
Процедура СТ_СтрокаПоискаОкончаниеВводаТекста(Список,Элемент,МНомен,ЛевоеЗначение,Текст) экспорт
	
	ЭлементОтбора = неопределено;
	Для Каждого Элемент из Список.Отбор.Элементы Цикл
		Если Строка(ТипЗнч(Элемент)) = "Элемент отбора группа компоновки данных" Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(Элемент.ЛевоеЗначение)=ЛевоеЗначение Тогда
			ЭлементОтбора = Элемент;
		КонецЕсли;
	КонецЦикла;	

	Если ЭлементОтбора = неопределено Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Если МНомен = неопределено Тогда
		ЭлементОтбора.Использование = Ложь;
	Иначе
		//ЭлементОтбора.Использование = ЗначениеЗаполнено(Текст);
		ЭлементОтбора.Использование = истина;
		ЭлементОтбора.ПравоеЗначение = МНомен;
	КонецЕсли;
КонецПроцедуры

&НаСервере   
Функция ПоискНоменклатуры(СтрокаПоиска="") экспорт   
	 Если НЕ СтрокаПоиска = неопределено Тогда
		//Проверим на не хэшированные(новые) позиции
		Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	Номен.Ссылка
		//               |ИЗ
		//               |	Справочник.Номенклатура КАК Номен
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СТ_ХЭШПоиска КАК Хэш
		//               |		ПО (Хэш.Объект = Номен.Ссылка)
		//               |			И (Хэш.Ключ = ""Код"")
		//               |ГДЕ
		//               |	Хэш.Объект ЕСТЬ NULL ";
		//Рез = Запрос.Выполнить().Выбрать();
		//Пока Рез.Следующий() Цикл
		//	ОбновитьХЭШПоискаНоменклатура(Рез.Ссылка);
		//КонецЦикла;
		
		//Поиск
		Запрос = Новый Запрос;		
		Запрос.УстановитьПараметр("СтрокаПоиска","%"+ПодготовитьСтроку(СтрокаПоиска)+"%");  	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТНомен.Объект КАК Ссылка
		               |ИЗ
		               |	РегистрСведений.СТ_ХЭШПоиска КАК ТНомен
		               |ГДЕ
		               |	ТНомен.Значение ПОДОБНО &СтрокаПоиска //И Ключ В(""Пр_ль"",""Код"",""Наименование"")
		               |";
		Рез1 = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		//Запрос.УстановитьПараметр("СтрокаПоиска",""+ПодготовитьСтроку(СтрокаПоиска)+"%");  	
		Запрос.Текст = "ВЫБРАТЬ
		               |	СТ_АналогиСрезПоследних.Номенклатура КАК Ссылка
		               |ИЗ
		               |	РегистрСведений.СТ_Аналоги.СрезПоследних(, АналогДляПоиска ПОДОБНО &СтрокаПоиска) КАК СТ_АналогиСрезПоследних
		               |ГДЕ 1=1
		               |	//И СТ_АналогиСрезПоследних.АналогДляПоиска ПОДОБНО &СтрокаПоиска
		               |	И СТ_АналогиСрезПоследних.Действует = ИСТИНА"
					   ;
		Рез2 = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого Эл из Рез1 Цикл
			Рез2.Добавить(Эл);
		КонецЦикла;
		Возврат Рез2; 
	Иначе
		Возврат неопределено;
	КонецЕсли;
	

	//Старый вариант
	
	МассивСвойств = Новый Массив;
	Выборка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если(НЕ Выборка.ПометкаУдаления)И
			( (Выборка.Заголовок = "Бренд")
			ИЛИ
			  (Выборка.Заголовок = "Пр_ль")
			)
			
			Тогда
			МассивСвойств.Добавить(Выборка.Ссылка);			
		КонецЕсли
	КонецЦикла;   
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивСвойств",МассивСвойств);
	Запрос.УстановитьПараметр("СтрокаПоиска","%"+ПодготовитьСтроку(СтрокаПоиска)+"%");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТНомен.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК ТНомен
	               |ГДЕ
	               |	(ТНомен.Наименование ПОДОБНО &СтрокаПоиска
	               |			ИЛИ ТНомен.НаименованиеПолное ПОДОБНО &СтрокаПоиска ИЛИ ТНомен.Код ПОДОБНО &СтрокаПоиска)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СТ_АналогиСрезПоследних.Номенклатура
	               |ИЗ
	               |	РегистрСведений.СТ_Аналоги.СрезПоследних КАК СТ_АналогиСрезПоследних
	               |ГДЕ
	               |	СТ_АналогиСрезПоследних.Аналог ПОДОБНО &СтрокаПоиска
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТДопРекв.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТДопРекв
	               |ГДЕ
	               |	ТДопРекв.Свойство В(&МассивСвойств)
	               |	И (ТДопРекв.Значение ПОДОБНО &СтрокаПоиска
	               |			ИЛИ ТДопРекв.Значение.Наименование ПОДОБНО &СтрокаПоиска)"
				   ;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


//////////////////////***************************
//////////////////////***************************
//		Проверка ролей
//////////////////////***************************
Процедура ИсточникОповещенияПриЗаписи(Источник, Отказ) Экспорт
КонецПроцедуры


//////////////////////***************************
//////////////////////***************************
//		Доп. расходы 
//////////////////////***************************
&НаСервере
Функция ПодготовитьСтроку(вхСтрока)экспорт
	лСтр = вхСтрока; 
	лСтр = СтрЗаменить(лСтр,".","");
	лСтр = СтрЗаменить(лСтр,".","");
	лСтр = СтрЗаменить(лСтр,"_","");
	лСтр = СтрЗаменить(лСтр,"/","");
	лСтр = СтрЗаменить(лСтр,"-","");
	лСтр = СтрЗаменить(лСтр,"+","");
	лСтр = СтрЗаменить(лСтр,",","");
	//лСтр = СтрЗаменить(лСтр,"=","");
	лСтр = СтрЗаменить(лСтр,"№","");
	лСтр = СтрЗаменить(лСтр,"#","");
	лСтр = СтрЗаменить(лСтр,"&","");
	лСтр = СтрЗаменить(лСтр,"?","");
	лСтр = СтрЗаменить(лСтр,";","");
	лСтр = СтрЗаменить(лСтр,":","");
	лСтр = СтрЗаменить(лСтр,"!","");
	
	лСтр = СтрЗаменить(лСтр,"		","");
	лСтр = СтрЗаменить(лСтр,"	","");
	лСтр = СтрЗаменить(лСтр,"	","");
	лСтр = СтрЗаменить(лСтр,"  ","");
	лСтр = СтрЗаменить(лСтр," ","");
	лСтр = СтрЗаменить(лСтр," ","");
	
	Возврат СокрЛП(лСтр);
КонецФункции

&НаКлиенте
Функция СоздатьДопРасходы(Форма) экспорт //Форма - ПоступлениеТоваровУслуг
	мФорма = ПолучитьФорму("Документ.ПриобретениеТоваровУслуг.ФормаОбъекта");
	мФорма.Объект.Организация = Форма.Объект.Организация;
	Стр = мФорма.Объект.Товары.Добавить();
	Стр.Номенклатура = СТ_Общий.ПолучитьУслугу();
	Стр.СписатьНаРасходы = Истина;
	Стр.СтатьяРасходов = СТ_Общий.ПолучитьСтатьюРасходов(); 
	Стр.АналитикаРасходов = Форма.Объект.Ссылка;
	Стр.Подразделение = СТ_Общий.ПолучитьПодразделение();
	Стр.Количество = 1;
	мФорма.Открыть();                        
КонецФункции
&НаСервере
Функция ПолучитьУслугу() экспорт
	возврат Справочники.Номенклатура.НайтиПоНаименованию("Доп.расходы");	
КонецФункции
&НаСервере
Функция ПолучитьСтатьюРасходов() экспорт
	возврат ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("#Перенос данных из ТиС (таможенные сборы)");	
КонецФункции
&НаСервере
Функция ПолучитьПодразделение() экспорт
	возврат Справочники.СтруктураПредприятия.НайтиПоНаименованию("Неизвестное подразделение");	
КонецФункции


////////////////********* ДЛЯ Печати
&НаСервере
Функция ПолучитьРуководителя() ЭКСПОРТ
	Результ = "";
	Поль=ПараметрыСеанса.ТекущийПользователь;
	Физ =Поль.ФизическоеЛицо;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтветственныеЛицаОрганизаций.Представление  ,ссылка
	               |ИЗ
	               |	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	               |ГДЕ
	               |	ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
	               |	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо";
	Запрос.УстановитьПараметр("ФизическоеЛицо",Физ);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Результ =рез.ссылка;// Строка(Рез.Представление);
	КонецЕсли;
	
	Возврат Результ;	
КонецФункции


&НаСервере
Функция ПолучитьОтпустил() экспорт
	Поль=ПараметрыСеанса.ТекущийПользователь;
	Физ =Поль.ФизическоеЛицо;
	Возврат Физ;	
КонецФункции
&НаСервере
Функция ПолучитьГБ() ЭКСПОРТ
	Результ = "";
	Поль=ПараметрыСеанса.ТекущийПользователь;
	Физ =Поль.ФизическоеЛицо;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтветственныеЛицаОрганизаций.Представление
				   |	,ОтветственныеЛицаОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	               |ГДЕ
	               |	ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
	               |	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо";
	Запрос.УстановитьПараметр("ФизическоеЛицо",Физ);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Результ = Рез.Ссылка;//Строка(Рез.Представление);
	КонецЕсли;
	
	Возврат Результ;	
КонецФункции
 

////*********


////***********
//------- ©  YF --------------------
 
// Устанавливает отбор в динамическом списке
 // Параметры:
 
//    _список                        : динамический список отбор в котором хотим установить
 //    _имяОтбора                    : имя реквизита для отбора
 
//    _видСравнения                : вид сравнения
 //    _значениеОтбора                : значение по которому хотим установить отбор
 
//     _отборПоПустомуЗначению    : Если истина, то при передаче пустого значения в качестве значения отбора
 //                                 по нему и устанавливается отбор, если Ложь, то при передаче пустого значения в качестве значения отбора
 
//                                 отбор отключается
 //
 
// Отбор устанавливается только на равенство (во всяком случае пока)
Процедура УстановитьОтборВСписке(_список, _имяОтбора, _видСравнения = Неопределено, _значениеОтбора, _отборПоПустомуЗначению = Ложь, _скрытьОтбор = Ложь) Экспорт
	// Если вид сравнения не передавали, то установим сравнение по равенству
	
	Если _видСравнения = Неопределено Тогда
		_видСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;//_видСравнения = Неопределено
	
	//
	
	элементОтбора_    = Неопределено;
	// Поищем а есть ли уже элемент отбора по указанному реквизиту
	
	Для каждого элемент_ из _список.Отбор.Элементы Цикл
		Если ВреГ(элемент_.ЛевоеЗначение)    = ВреГ(_имяОтбора) Тогда
			элементОтбора_ = элемент_;
			Прервать;
		КонецЕсли;//ВреГ(элемент_.ЛевоеЗначение)    = ВреГ(_имяОтбора)
		
	КонецЦикла;//каждого элемент_ из Список.Отбор.Элементы
	
	// Установим отбор по реквизиту
	
	Если элементОтбора_ = Неопределено Тогда    
		элементОтбора_                    = _список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		элементОтбора_.ВидСравнения        = _видСравнения;
		элементОтбора_.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(_имяОтбора);
	КонецЕсли;//элементОтбора_ = Неопределено
	
	элементОтбора_.ПравоеЗначение    = _значениеОтбора;
	// Если значение для отбора не заполнено, значит нужно убрать отбор по
	
	//данному реквизиту
	
	Если ЗначениеЗаполнено(_значениеОтбора) Тогда
		элементОтбора_.Использование     = Истина;
	ИначеЕсли _отборПоПустомуЗначению Тогда
		элементОтбора_.Использование     = Истина;    
	Иначе
		элементОтбора_.Использование     = Ложь;
	КонецЕсли;//ЗначениеЗаполнено(_значениеОтбора)
	
	// Если нужно - скроем от пользователя отбор
	
	Если _скрытьОтбор Тогда
		элементОтбора_.РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;//_скрытьОтбор
	
КонецПроцедуры//УстановитьОтборвСписке