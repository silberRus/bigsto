
#Область СлужебныйПрограммныйИнтерфейс

// Только для внутреннего использования.
// Вызывается из: ПодготовитьСообщенияКПередаче
Функция ВозможнаОтправкаПодтверждения(СсылкиДокументов) Экспорт
	
	Отказ = Ложь;
	
	СтатусыПроверкиИПодбора = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъектов(СсылкиДокументов, "СтатусПроверкиИПодбора");
	
	КоличествоПроверенныхДокументов = 0;
	
	Для Каждого КлючЗначение Из СтатусыПроверкиИПодбора Цикл
		Если ЗавершенаПроверкаИПодбор(КлючЗначение.Значение) Тогда
			КоличествоПроверенныхДокументов = КоличествоПроверенныхДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПроверенныхДокументов <> СсылкиДокументов.Количество() Тогда
		Если КоличествоПроверенныхДокументов = 0 Тогда
			Если СсылкиДокументов.Количество() = 1 Тогда
				СообщениеПользователю = НСтр("ru = 'В указанном документе не выполнена проверка поступившей алкогольной продукции.'");
			Иначе
				СообщениеПользователю = НСтр("ru = 'В указанных документах не выполнена проверка поступившей алкогольной продукции.'");
			КонецЕсли;
		Иначе
			СообщениеПользователю = НСтр("ru = 'Не во всех указанных документах выполнена проверка поступившей алкогольной продукции.'");
		КонецЕсли;
		СообщениеПользователю = СообщениеПользователю + " " + НСтр("ru = 'Отправка подтверждения возможна только после завершения проверки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,,,, Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Только для внутреннего использования.
Функция ЗавершенаПроверкаИПодбор(СтатусПроверкиИПодбора) Экспорт
	
	Возврат СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораЕГАИС.Завершено");
	
КонецФункции

// Только для внутреннего использования.
Функция ВыполняетсяПроверкаИПодбор(СтатусПроверкиИПодбора) Экспорт
	
	Возврат СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораЕГАИС.Выполняется");
	
КонецФункции

// Только для внутреннего использования.
Функция НоваяСтруктураСписокВходящихДокументов(ДанныеОбработки, ТекстОшибки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеОбработки", ДанныеОбработки);
	Результат.Вставить("ТекстОшибки",     ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования.
Функция СледующаяПорцияДанных(Данные)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КОбработке");
	ВозвращаемоеЗначение.Вставить("Отложено", Новый Массив);
	
	Если Данные.Количество() = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Индекс = 1;
	Для Каждого ЭлементДанных Из Данные Цикл
		
		Если Индекс = 1 Тогда
			ВозвращаемоеЗначение.КОбработке = ЭлементДанных;
		Иначе
			ВозвращаемоеЗначение.Отложено.Добавить(ЭлементДанных);
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Только для внутреннего использования.
// Вызывается из: ИнтеграцияЕГАИСКлиент.ПроверитьВходящиеДокументы.
//
// Параметры:
//  Результат - Структура - Структура со свойствами:
//   * ТекстОшибки
//   * ДанныеОбработки
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПроверитьВходящиеДокументы_ОбработатьСписокВходящихДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстОшибки = Результат.ТекстОшибки;
	
	Для Каждого СтрокаТЧ Из Результат.ДанныеОбработки Цикл
		ДополнительныеПараметры.АдресаURLВходящихДокументов.Добавить(СтрокаТЧ);
	КонецЦикла;
	
	Результат = НоваяСтруктураСписокВходящихДокументов(
		ДополнительныеПараметры.АдресаURLВходящихДокументов,
		ТекстОшибки);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	
КонецПроцедуры

// Только для внутреннего использования.
// Вызывается из: ПослеЗавершенияОбмена
Процедура ОткрытьРезультатВыполненияОбменаЕГАИС(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Изменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.РезультатВыполненияОбменаЕГАИС", ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования.
// Вызывается из: ОповещениеПослеЗавершенииОбмена
Процедура ПослеЗавершенияОбмена(Изменения, ДополнительныеПараметры) Экспорт
	
	СоответствиеДокументыОснования  = Новый Соответствие;
	СоответствиеДокументыСтатусы    = Новый Соответствие;
	СоответствиеИзмененныеДокументы = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
		
		СоответствиеДокументыОснования.Вставить(ЭлементДанных.Объект, ЭлементДанных.ДокументОснование);
		СоответствиеДокументыСтатусы.Вставить(ЭлементДанных.Объект, ЭлементДанных.НовыйСтатус);
		Если ЭлементДанных.ОбъектИзменен Тогда
			СоответствиеИзмененныеДокументы.Вставить(ЭлементДанных.Объект, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументыОснования Цикл
		
		ОбъектИзменен = СоответствиеИзмененныеДокументы.Получить(КлючИЗначение.Ключ);
		Если ОбъектИзменен = Неопределено Тогда
			ОбъектИзменен = Ложь;
		КонецЕсли;
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",        КлючИЗначение.Ключ);
		ПараметрОповещения.Вставить("Основание",     КлючИЗначение.Значение);
		ПараметрОповещения.Вставить("ОбъектИзменен", ОбъектИзменен);
		
		Оповестить("ИзменениеСостоянияЕГАИС", ПараметрОповещения);
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры.Контекст) = Тип("ТаблицаФормы") Тогда
		
		// Выполнено действие из динамического списка
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Для %1 из %2 выделенных в списке документов выполнено действие: %3'"),
			СоответствиеДокументыСтатусы.Количество(),
			ДополнительныеПараметры.Контекст.ВыделенныеСтроки.Количество(),
			ДополнительныеПараметры.ДальнейшееДействие);
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнено действие'"),,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.Контекст) Тогда
		
		// Выполнено действие из формы документа
		Для Каждого КлючИЗначение Из СоответствиеДокументыСтатусы Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Для документа %1 изменен статус ЕГАИС: %2.'"),
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Выполнено действие'"),
				ПолучитьНавигационнуюСсылку(КлючИЗначение.Ключ),
				ТекстСообщения,
				БиблиотекаКартинок.Информация32);
			
		КонецЦикла;
		
	Иначе
		
		// Выполнен обмен с ЕГАИС
		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыОснования", СоответствиеДокументыОснования);
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыСтатусы",   СоответствиеДокументыСтатусы);
		ДополнительныеПараметрыОповещения.Вставить("Изменения",                      Изменения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Изменено объектов: %1'"), СоответствиеДокументыСтатусы.Количество());
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнен обмен с ЕГАИС'"),
			Новый ОписаниеОповещения("ОткрытьРезультатВыполненияОбменаЕГАИС", ИнтеграцияЕГАИССлужебныйКлиент, ДополнительныеПараметрыОповещения),
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Изменения);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПодготовитьСообщенияКПередачеПодтверждениеПроведения(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(Контекст.НепроведенныеДокументы);
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2'");
	НепроведенныеДокументы = Новый Массив;
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
				ИнформацияОДокументе.Ссылка);
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	Контекст.МассивДокументов = ОбщегоНазначенияКлиентСервер.СократитьМассив(Контекст.МассивДокументов, НепроведенныеДокументы);
	
	// Оповещаем открытые формы о том, что были проведены документы.
	ТипыПроведенныхДокументов = Новый Соответствие;
	Для Каждого ПроведенныйДокумент Из Контекст.МассивДокументов Цикл
		ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
	КонецЦикла;
	Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
		ОповеститьОбИзменении(Тип.Ключ);
	КонецЦикла;
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		// Спрашиваем пользователя о необходимости продолжения создания на основании при наличии непроведенных документов.
		ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
		
		КнопкиДиалога = Новый СписокЗначений;
		Если Контекст.МассивДокументов.Количество() = 0 Тогда
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК'"));
		Иначе
			ТекстДиалога = ТекстДиалога + " " + НСтр("ru = 'Продолжить?'");
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения", ЭтотОбъект, Контекст);
		ПоказатьВопрос(Обработчик, ТекстДиалога, КнопкиДиалога);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПодготовкуСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Пропустить Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПодготовкуСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПродолжитьПодготовкуСообщенияКПередаче(Контекст)
	
	ИнтеграцияЕГАИСКлиент.ПодготовитьСообщенияКПередачеЗавершение(Контекст);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте) Экспорт
	
	СообщенияXMLКПередаче = ДанныеДляВыполненияОбменаНаКлиенте.СообщенияXMLКПередаче;
	
	Если СообщенияXMLКПередаче.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РезультатыПередачиСообщенийПоОрганизациямЕГАИС", Новый Соответствие);
		ДополнительныеПараметры.Вставить("НастройкиОбменаЕГАИС",                           ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбменаЕГАИС);
		ДополнительныеПараметры.Вставить("Изменения",                                      ДанныеДляВыполненияОбменаНаКлиенте.Изменения);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",                        ОповещениеПриЗавершении);
		
		ПередатьСообщенияВУТМ(
			СообщенияXMLКПередаче,
			ДополнительныеПараметры);
		
	Иначе
		
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте.Изменения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПередатьСообщенияВУТМ(СообщенияXML, Контекст)
	
	ПорцияДанных = СледующаяПорцияДанных(СообщенияXML);
	Если ПорцияДанных.КОбработке <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СообщенияXML",            ПорцияДанных.Отложено);
		ДополнительныеПараметры.Вставить("ДополнительныеПараметры", Контекст);
		ДополнительныеПараметры.Вставить("СообщениеXML",            ПорцияДанных.КОбработке);
		
		НастройкаОбменаНаКлиенте = Контекст.НастройкиОбменаЕГАИС.Получить(ПорцияДанных.КОбработке.ОрганизацияЕГАИС);
		
		ПараметрыHTTPЗапроса = ИнтеграцияЕГАИСКлиентСервер.ПараметрыHTTPЗапроса(
			ПорцияДанных.КОбработке.ТекстСообщенияXML,
			ПорцияДанных.КОбработке.АдресЗапроса);
		
		ОтправитьHTTPЗапрос(
			Новый ОписаниеОповещения("ПослеПередачиСообщенияВУТМ", ИнтеграцияЕГАИССлужебныйКлиент, ДополнительныеПараметры),
			НастройкаОбменаНаКлиенте,
			ПараметрыHTTPЗапроса);
		
	Иначе
		
		Если Контекст.РезультатыПередачиСообщенийПоОрганизациямЕГАИС.Количество() = 0 Тогда
			
			Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Изменения);
			КонецЕсли;
			
		Иначе
			
			Изменения = ИнтеграцияЕГАИСВызовСервера.ПриЗавершенииПередачиДанных(
				Контекст.РезультатыПередачиСообщенийПоОрганизациямЕГАИС);
			
			Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
				
				РезультатВыполнения = Контекст.Изменения;
				Для Каждого ЭлементДанных Из Изменения Цикл
					РезультатВыполнения.Добавить(ЭлементДанных);
				КонецЦикла;
				
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПолучитьСпискиВходящихДокументов(ОрганизацииЕГАИС, Контекст) Экспорт
	
	ПорцияДанных = СледующаяПорцияДанных(ОрганизацииЕГАИС);
	Если ПорцияДанных.КОбработке <> Неопределено Тогда
		
		ИнтеграцияЕГАИСКлиент.ОбновитьДатуПоследнегоЗапускаОбменаНаКлиентеПоРасписанию(ПорцияДанных.КОбработке);
		
		НастройкаОбменаНаКлиенте = Контекст.НастройкиОбменаЕГАИС.Получить(ПорцияДанных.КОбработке);
		Если НастройкаОбменаНаКлиенте.ЗагружатьВходящиеДокументы Тогда
			
			ПараметрыHTTPЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET", "/opt/out");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОрганизацииЕГАИС",        ПорцияДанных.Отложено);
			ДополнительныеПараметры.Вставить("ДополнительныеПараметры", Контекст);
			ДополнительныеПараметры.Вставить("ОрганизацияЕГАИС",        ПорцияДанных.КОбработке);
			
			ОтправитьHTTPЗапрос(
				Новый ОписаниеОповещения("ПослеПолученияСпискаВходящихДокументов", ИнтеграцияЕГАИССлужебныйКлиент, ДополнительныеПараметры),
				НастройкаОбменаНаКлиенте,
				ПараметрыHTTPЗапроса);
			
		Иначе
			
			ПолучитьСпискиВходящихДокументов(
				ПорцияДанных.Отложено, // Организации ЕГАИС
				Контекст);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ИнтеграцияЕГАИССлужебныйКлиент.НоваяСтруктураСписокВходящихДокументов(
			ИнтеграцияЕГАИСКлиентСервер.ОбработатьОтветНаЗапросПолученияДокументов(Контекст.Результат),
			Контекст.ТекстОшибки);
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПолучитьВходящиеДокументы(ДанныеДокументовКПолучению, Контекст)
	
	ПорцияДанных = СледующаяПорцияДанных(ДанныеДокументовКПолучению);
	Если ПорцияДанных.КОбработке <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КОбработке",              ПорцияДанных.Отложено);
		ДополнительныеПараметры.Вставить("ДополнительныеПараметры", Контекст);
		ДополнительныеПараметры.Вставить("ДанныеКПолучению",        ПорцияДанных.КОбработке);
		
		НастройкаОбменаНаКлиенте = Контекст.НастройкиОбменаЕГАИС.Получить(ПорцияДанных.КОбработке.ОрганизацияЕГАИС);
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПорцияДанных.КОбработке.АдресURL);
		
		ПараметрыHTTPЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET", СтруктураURI.ПутьНаСервере);
		
		ОтправитьHTTPЗапрос(
			Новый ОписаниеОповещения("ПослеПолученияВходящегоДокумента", ИнтеграцияЕГАИССлужебныйКлиент, ДополнительныеПараметры),
			НастройкаОбменаНаКлиенте,
			ПараметрыHTTPЗапроса);
		
	Иначе
		
		Если Контекст.ДокументыКЗагрузке.Количество() = 0 Тогда
			
			Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Изменения);
			КонецЕсли;
			
		Иначе
			
			Результат = ИнтеграцияЕГАИСВызовСервера.ОбработатьВходящиеДокументы(Контекст.ДокументыКЗагрузке);
			
			ДокументыКУдалению = Новый Массив;
			Для Каждого ЭлементДанных Из Результат.Изменения Цикл
				
				Контекст.Изменения.Добавить(ЭлементДанных);
				
				Для Каждого Данные Из ЭлементДанных.СлужебныеДанные Цикл
					ДокументыКУдалению.Добавить(Данные);
				КонецЦикла;
				
			КонецЦикла;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("НастройкиОбменаЕГАИС",    Контекст.НастройкиОбменаЕГАИС);
			ДополнительныеПараметры.Вставить("Изменения",               Контекст.Изменения);
			ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Контекст.ОповещениеПриЗавершении);
			
			УдалитьЗагруженныеДокументы(ДокументыКУдалению, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура УдалитьЗагруженныеДокументы(ДанныеДокументовКУдалению, Контекст)
	
	ПорцияДанных = СледующаяПорцияДанных(ДанныеДокументовКУдалению);
	Если ПорцияДанных.КОбработке <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КОбработке",              ПорцияДанных.Отложено);
		ДополнительныеПараметры.Вставить("ДополнительныеПараметры", Контекст);
		ДополнительныеПараметры.Вставить("ДанныеКПолучению",        ПорцияДанных.КОбработке);
		
		НастройкаОбменаНаКлиенте = Контекст.НастройкиОбменаЕГАИС.Получить(ПорцияДанных.КОбработке.ОрганизацияЕГАИС);
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПорцияДанных.КОбработке.АдресЗапроса);
		
		ПараметрыHTTPЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE", СтруктураURI.ПутьНаСервере);
		
		ОтправитьHTTPЗапрос(
			Новый ОписаниеОповещения("ПослеУдаленияЗагруженногоДокумента", ИнтеграцияЕГАИССлужебныйКлиент, ДополнительныеПараметры),
			НастройкаОбменаНаКлиенте,
			ПараметрыHTTPЗапроса);
		
	Иначе
		
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Изменения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеОбработкиОчередиПередачиДанных(Изменения, Контекст) Экспорт
	
	ПараметрыОбработкиСпискаВходящихДокументов = Новый Структура;
	ПараметрыОбработкиСпискаВходящихДокументов.Вставить("НастройкиОбменаЕГАИС",    Контекст.НастройкиОбменаЕГАИС);
	ПараметрыОбработкиСпискаВходящихДокументов.Вставить("Изменения",               Изменения);
	ПараметрыОбработкиСпискаВходящихДокументов.Вставить("ОповещениеПриЗавершении", Контекст.ОповещениеПриЗавершении);
	
	ОповещениеПриЗавершенииПолученияСпискаВходящихДокументов = Новый ОписаниеОповещения(
		"ОбработатьСписокВходящихДокументов",
		ИнтеграцияЕГАИССлужебныйКлиент,
		ПараметрыОбработкиСпискаВходящихДокументов);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Результат",               Новый Соответствие);
	ДополнительныеПараметры.Вставить("ТекстОшибки",             "");
	ДополнительныеПараметры.Вставить("НастройкиОбменаЕГАИС",    Контекст.НастройкиОбменаЕГАИС);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершенииПолученияСпискаВходящихДокументов);
	
	ОрганизацииЕГАИС = ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(Контекст.НастройкиОбменаЕГАИС);
	
	ПолучитьСпискиВходящихДокументов(
		ОрганизацииЕГАИС,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбработатьСписокВходящихДокументов(ДанныеОбработкиТекстОшибки, Контекст) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументыКЗагрузке",      Новый Соответствие);
	ДополнительныеПараметры.Вставить("НастройкиОбменаЕГАИС",    Контекст.НастройкиОбменаЕГАИС);
	ДополнительныеПараметры.Вставить("Изменения",               Контекст.Изменения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Контекст.ОповещениеПриЗавершении);
	
	ПолучитьВходящиеДокументы(ДанныеОбработкиТекстОшибки.ДанныеОбработки, ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеПередачиСообщенияВУТМ(РезультатОтправкиHTTPЗапроса, Контекст) Экспорт
	
	ЭлементДанных = Новый Структура;
	ЭлементДанных.Вставить("ИсходящееСообщение",           Контекст.СообщениеXML.Ссылка);
	ЭлементДанных.Вставить("РезультатОтправкиHTTPЗапроса", ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса));
	
	ОрганизацияЕГАИС = Контекст.СообщениеXML.ОрганизацияЕГАИС;
	
	РезультатыПередачиСообщений = Контекст.ДополнительныеПараметры.РезультатыПередачиСообщенийПоОрганизациямЕГАИС.Получить(ОрганизацияЕГАИС);
	Если РезультатыПередачиСообщений = Неопределено Тогда
		РезультатыПередачиСообщений = Новый Массив;
		Контекст.ДополнительныеПараметры.РезультатыПередачиСообщенийПоОрганизациямЕГАИС.Вставить(
			ОрганизацияЕГАИС, РезультатыПередачиСообщений);
	КонецЕсли;
	
	Контекст.ДополнительныеПараметры.РезультатыПередачиСообщенийПоОрганизациямЕГАИС[ОрганизацияЕГАИС].Добавить(ЭлементДанных);
	
	ПередатьСообщенияВУТМ(
		Контекст.СообщенияXML,
		Контекст.ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеПолученияСпискаВходящихДокументов(РезультатОтправкиHTTPЗапроса, Контекст) Экспорт
	
	ОрганизацияЕГАИС = Контекст.ОрганизацияЕГАИС;
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса);
	
	Если РезультатОперации.ТекстСообщенияXMLПолучен Тогда
	
		РезультатПолученияДокументов = Контекст.ДополнительныеПараметры.Результат.Получить(ОрганизацияЕГАИС);
		Если РезультатПолученияДокументов = Неопределено Тогда
			РезультатПолученияДокументов = Новый Массив;
			Контекст.ДополнительныеПараметры.Результат.Вставить(
				ОрганизацияЕГАИС, РезультатПолученияДокументов);
		КонецЕсли;
		
		Контекст.ДополнительныеПараметры.Результат[ОрганизацияЕГАИС].Добавить(
			РезультатОперации.ТекстВходящегоСообщенияXML);
		
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить список входящих документов организации %1:
			           |По причине:
			           |%2'"),
			ОрганизацияЕГАИС,
			РезультатОперации.ТекстОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
		Если ЗначениеЗаполнено(Контекст.ДополнительныеПараметры.ТекстОшибки) Тогда
			Контекст.ДополнительныеПараметры.ТекстОшибки = Контекст.ДополнительныеПараметры.ТекстОшибки
			                                             + Символы.ПС + ТекстОшибки;
		Иначе
			Контекст.ДополнительныеПараметры.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьСпискиВходящихДокументов(
		Контекст.ОрганизацииЕГАИС,
		Контекст.ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеПолученияВходящегоДокумента(РезультатОтправкиHTTPЗапроса, Контекст) Экспорт
	
	ОрганизацияЕГАИС = Контекст.ДанныеКПолучению.ОрганизацияЕГАИС;
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса);
	
	Если РезультатОперации.ТекстСообщенияXMLПолучен Тогда
		
		ДокументыКЗагрузке = Контекст.ДополнительныеПараметры.ДокументыКЗагрузке.Получить(ОрганизацияЕГАИС);
		Если ДокументыКЗагрузке = Неопределено Тогда
			ДокументыКЗагрузке = Новый Массив;
			Контекст.ДополнительныеПараметры.ДокументыКЗагрузке.Вставить(
				ОрганизацияЕГАИС, ДокументыКЗагрузке);
		КонецЕсли;
		
		Контекст.ДополнительныеПараметры.ДокументыКЗагрузке[ОрганизацияЕГАИС].Добавить(
			ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента(
				ОрганизацияЕГАИС,
				Контекст.ДанныеКПолучению.ИдентификаторЗапроса,
				Контекст.ДанныеКПолучению.АдресURL,
				РезультатОперации.ТекстВходящегоСообщенияXML));
		
	КонецЕсли;
	
	ПолучитьВходящиеДокументы(
		Контекст.КОбработке,
		Контекст.ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеУдаленияЗагруженногоДокумента(РезультатОтправкиHTTPЗапроса, Контекст) Экспорт
	
	ОрганизацияЕГАИС = Контекст.ДанныеКПолучению.ОрганизацияЕГАИС;
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса);
	
	УдалитьЗагруженныеДокументы(
		Контекст.КОбработке,
		Контекст.ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОтправитьHTTPЗапрос(ОповещениеПриЗавершении, НастройкаОбменаНаКлиенте, ПараметрыHTTPЗапроса)
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			ОповещениеПриЗавершении,
			НастройкаОбменаНаКлиенте,
			ПараметрыHTTPЗапроса,
			Ложь);
	#Иначе
		РезультатОтправкиHTTPЗапроса = ИнтеграцияЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(
			НастройкаОбменаНаКлиенте,
			ПараметрыHTTPЗапроса);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОтправкиHTTPЗапроса);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти
