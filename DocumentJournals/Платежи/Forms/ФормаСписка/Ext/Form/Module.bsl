
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьРеквизиты();
	УстановитьВидимость();
	УстановитьКонстантыСписков();
	
	УстановитьПараметрыЖурналаПлатежей();
	УстановитьОтборЖурналаПлатежей();
	
	УстановитьОтборКПоступлениюКОплате("КПоступлению");
	УстановитьОтборКПоступлениюКОплате("КОплате");
	
	ОбновитьПодвалНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанками.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "КПоступлению.Дата", Элементы.КПоступлениюДата.Имя);
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "КОплате.Дата", Элементы.КОплатеДата.Имя);
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ЖурналПлатежей.Дата", Элементы.ЖурналПлатежейДата.Имя);
	
	СохранитьРабочиеЗначенияПолейФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер"
		Или ИмяСобытия = "Загрузка_ОбменСБанками" Тогда
		
		ОбновитьПодвалНаСервере();
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКОплате Тогда
			Элементы.КОплате.Обновить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Загрузка_ОбменСБанками" Тогда
		
		ОбновитьПодвалНаСервере();
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
			Элементы.КПоступлению.Обновить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеСчетаОрганизаций"
		Или ИмяСобытия = "Запись_Кассы" Тогда
		
		ПерезаполнитьСписокКассБанковскихСчетов();
		
	ИначеЕсли ИмяСобытия = "ОтправленоDirectBank" Тогда
		
		ОбработатьЗавершениеВыгрузкиПрямойОбмен(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	Если ОрганизацияСохраненноеЗначение <> Организация Тогда
		
		ОрганизацияОтборПриИзмененииНаСервере();
		
		ЗаполнитьПредставлениеСпискаКассБанковскихСчетов();
		ОрганизацияСохраненноеЗначение = Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОтборПриИзмененииНаСервере()
	
	СписокКассБанковскихСчетов = СписокКассБанковскихСчетов(Организация);
	
	УстановитьОтборДинамическихСписков();
	УстановитьОтборЖурналаПлатежей();
	
	ОбновитьПодвалНаСервере();
	
	СохранитьРабочиеЗначенияПолейФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаЖурналПлатежей Тогда
		Элементы.ЖурналПлатежей.Обновить();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
		Элементы.КПоступлению.Обновить();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКОплате Тогда
		Элементы.КОплате.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовСпискаПлатежей

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоПериода)
		И ЗначениеЗаполнено(КонецПериода)
		И НачалоПериода > КонецПериода Тогда
		НачалоПериода = КонецПериода;
	КонецЕсли;
	УстановитьПараметрыЖурналаПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоПериода)
		И ЗначениеЗаполнено(КонецПериода)
		И КонецПериода < НачалоПериода Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
	УстановитьПараметрыЖурналаПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиВыбратьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"ПлатежиВыбратьПериодЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		ЭтаФорма,
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "КонецПериода"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрыЖурналаПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ЖурналДокументов.Платежи.Форма.ФормаВыбораИзСписка",
		Новый Структура("Список, Заголовок", СписокТипыДокументов, НСтр("ru = 'Отбор по типу документов'")),
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокТипыДокументов.ЗаполнитьПометки(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"Тип",
		СписокТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"ТипПлатежногоДокумента",
		,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		СписокТипыДокументов = ВыбранноеЗначение;
		
		СписокТипыДокументовПредставление = "";
		Для Каждого ЭлементСписка Из СписокТипыДокументов Цикл
			Если ЭлементСписка.Пометка Тогда
				СписокТипыДокументовПредставление = СписокТипыДокументовПредставление +
					?(ЗначениеЗаполнено(СписокТипыДокументовПредставление), ", ", "") + ЭлементСписка.Представление;
			КонецЕсли;
		КонецЦикла;
		
		ТипДокументаОтборИзменениеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипДокументаОтборИзменениеНаСервере()
	
	МассивТиповПоступления = ТипыПлатежногоДокументаПоступления();
	МассивТиповСписания = ТипыПлатежногоДокументаСписания();
	ТипПоступлениеБезналичныхДС = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств");
	ТипСписаниеБезналичныхДС = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
	
	СписокВыбранныхТиповДокументов = Новый СписокЗначений();

	МассивВыбранныхТиповПлатежногоДокумента = Новый Массив;
	Для Каждого ЭлементСписка Из СписокТипыДокументов Цикл
		Если ЭлементСписка.Пометка Тогда
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("Тип") Тогда
				
				СписокВыбранныхТиповДокументов.Добавить(ЭлементСписка.Значение);
				
			ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("ПеречислениеСсылка.ТипыПлатежныхДокументов") Тогда
				
				МассивВыбранныхТиповПлатежногоДокумента.Добавить(ЭлементСписка.Значение);
				Если МассивТиповПоступления.Найти(ЭлементСписка.Представление) <> Неопределено
					И СписокВыбранныхТиповДокументов.НайтиПоЗначению(ТипПоступлениеБезналичныхДС) = Неопределено Тогда
					СписокВыбранныхТиповДокументов.Добавить(ТипПоступлениеБезналичныхДС);
				ИначеЕсли МассивТиповСписания.Найти(ЭлементСписка.Представление) <> Неопределено
					И СписокВыбранныхТиповДокументов.НайтиПоЗначению(ТипСписаниеБезналичныхДС) = Неопределено Тогда
					СписокВыбранныхТиповДокументов.Добавить(ТипСписаниеБезналичныхДС);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"Тип",
		СписокВыбранныхТиповДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		СписокВыбранныхТиповДокументов.Количество() > 0);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"ТипПлатежногоДокумента",
		МассивВыбранныхТиповПлатежногоДокумента,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		МассивВыбранныхТиповПлатежногоДокумента.Количество() > 0);
		
КонецПроцедуры

&НаКлиенте
Процедура КассаБанковскийСчетОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ЖурналДокументов.Платежи.Форма.ФормаВыбораИзСписка",
		Новый Структура("Список, Заголовок", СписокКассБанковскихСчетов, НСтр("ru = 'Кассы, Банковские счета'")),
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаБанковскийСчетОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокКассБанковскихСчетов.ЗаполнитьПометки(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"БанковскийСчетКасса",
		СписокКассБанковскихСчетов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаБанковскийСчетОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		СписокКассБанковскихСчетов = ВыбранноеЗначение;
		ЗаполнитьПредставлениеСпискаКассБанковскихСчетов();
		КассаБанковскийСчетОтборИзменениеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КассаБанковскийСчетОтборИзменениеНаСервере()
	
	УстановитьОтборЖурналаПлатежей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаКПоступлению

&НаКлиенте
Процедура КПоступлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКПоступлениюОтборПриИзменении(Элемент)
	
	ДатаКПоступлениюОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаКПоступлениюОтборПриИзмененииНаСервере()
	
	УстановитьОтборКПоступлениюКОплате("КПоступлению");
	ОбновитьКПоступлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций, Заголовок", СписокОперацийПоступления, НСтр("ru = 'Основания платежа'")), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийПоступления.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийПоступления = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ОбластиПланированияПлатежей") Тогда
		
		Для Каждого ЭлементСписка Из СписокОперацийПоступления Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийПоступленияПредставление = СписокОперацийПредставление(СписокОперацийПоступления);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыКПоступлениюОтборПриИзменении(Элемент)
	
	СписокФормОплаты = Новый Списокзначений;
	
	Если ЗначениеЗаполнено(ФормаОплатыКПоступлениюОтбор) Тогда
		СписокФормОплаты.Добавить(ФормаОплатыКПоступлениюОтбор);
		СписокФормОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КПоступлению,
		"ФормаОплаты",
		СписокФормОплаты,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(ФормаОплатыКПоступлениюОтбор));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаКОплате

&НаКлиенте
Процедура КОплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элементы.КОплате.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКОплатеОтборПриИзменении(Элемент)
	
	ДатаКОплатеОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаКОплатеОтборПриИзмененииНаСервере()
	
	УстановитьОтборКПоступлениюКОплате("КОплате");
	ОбновитьКОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций, Заголовок", СписокОперацийОплаты, НСтр("ru = 'Основания платежа'")), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийОплаты.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийОплаты = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ОбластиПланированияПлатежей") Тогда
		
		Для Каждого ЭлементСписка Из СписокОперацийОплаты Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийОплатыПредставление = СписокОперацийПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыКОплатеОтборПриИзменении(Элемент)
	
	СписокФормОплаты = Новый Списокзначений;
	
	Если ЗначениеЗаполнено(ФормаОплатыКОплатеОтбор) Тогда
		СписокФормОплаты.Добавить(ФормаОплатыКОплатеОтбор);
		СписокФормОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОплате,
		"ФормаОплаты",
		СписокФормОплаты,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(ФормаОплатыКОплатеОтбор));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЖурналаПлатежей

&НаКлиенте
Процедура ЖурналПлатежейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "Состояние" Тогда
		ОбменСБанкамиКлиент.ПриНажатииНаГиперссылку(ВыбраннаяСтрока, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПлатежейПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандСпискаПлатежей

&НаКлиенте
Процедура СоздатьПоступлениеОтКлиентаНал(Команда)
	СоздатьПриходныйКассовыйОрдер(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОтКлиентаБезнал(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОтКлиентаПлатежнаяКарта(Команда)
	СоздатьЭквайринговуюОперацию(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"))
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуПоставщикуНал(Команда)
	СоздатьРасходныйКассовыйОрдер(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуПоставщикуБезнал(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПКО(Команда)
	СоздатьПриходныйКассовыйОрдер();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРКО(Команда)
	СоздатьРасходныйКассовыйОрдер();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛистКассовойКниги(Команда)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("Организация", Организация));
	ОткрытьФорму("Документ.ЛистКассовойКниги.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручениеВходящее(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнкассовоеПоручениеВходящее(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеТребованиеВходящее(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежныйОрдерВходящий(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручениеИсходящее(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнкассовоеПоручениеИсходящее(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеТребованиеИсходящее(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежныйОрдерИсходящий(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийОрдерИсходящий(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.БанковскийОрдер"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратОплатыКлиентуЭквайринг(Команда)
	СоздатьЭквайринговуюОперацию(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту"))
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчетБанкаПоЭквайрингу(Команда)
	ОткрытьФорму("Документ.ОтчетБанкаПоОперациямЭквайринга.ФормаОбъекта", , Элементы.ЖурналПлатежей);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВБанк(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ВыгрузкаВБанк",
		,
		Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВыписки(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ЗагрузкаВыписки",
		,
		Элементы.ЖурналПлатежей);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
&НаКлиенте
Процедура ЗагрузитьОплатыИзЯндексКассы(Команда)
	
	ОповещениеПолученияОперацийПоЯндексКассе = Новый ОписаниеОповещения(
		"ОбработкаПолученияОперацийПоЯндексКассе", ЭтотОбъект);
		
	ИнтеграцияСЯндексКассойКлиент.ПолучитьОперацииПоЯндексКассе(ОповещениеПолученияОперацийПоЯндексКассе,,, Ложь);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура ПроведеноБанком(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ЖурналПлатежей);
	ДокументыКПроведению = УдалитьЛишниеДокументы(ВыделенныеСтроки);
	Если ДокументыКПроведению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПриУстановкеПроведенияБанком = Новый ОписаниеОповещения("ПриУстановкеПроведенияБанком", ЭтаФорма, ДокументыКПроведению);
	ПоказатьВводДаты(ПриУстановкеПроведенияБанком, ТекущаяДата(), НСтр("ru = 'Укажите дату проведения банком'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаСервере
Функция УдалитьЛишниеДокументы(МассивДокументов)
	
	ДокументыКПроведению = Новый Массив;
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	
	Для каждого ДокументСсылка из МассивДокументов Цикл
		Если МассивТиповДокументов.Найти(ТипЗнч(ДокументСсылка)) <> Неопределено Тогда
			ДокументыКПроведению.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыКПроведению;
	
КонецФункции

&НаКлиенте
Процедура ПриУстановкеПроведенияБанком(ДатаПроведенияБанком, МассивДокументов) Экспорт
	
	Если ДатаПроведенияБанком <> Неопределено Тогда
		
		КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
			МассивДокументов,
			"ПроведеноБанком",
			Новый Структура("ДатаПроведенияБанком", ДатаПроведенияБанком));
		
		Элементы.ЖурналПлатежей.Обновить();
		ОбновитьПодвалНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстаткиИДвиженияДенежныхСредств(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	
	Отбор = Новый Структура;
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	Отбор.Вставить("ПериодОтчета", ПериодОтчета);
	
	ТипыДенежныхСредств = Новый СписокЗначений;
	ТипыДенежныхСредств.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные"));
	ТипыДенежныхСредств.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные"));
	Отбор.Вставить("ТипДенежныхСредств", ТипыДенежныхСредств);
	
	Отбор.Вставить("МестоХраненияДенежныхСредств_ЭтоКассаККМ", ЛОЖЬ);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Журнал.Платежи");
	ПараметрыФормы.Вставить("КлючВарианта", "ВедомостьПоДенежнымСредствам");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ВедомостьПоДенежнымСредствам.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКонтрольДенежныхСредств(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ПараметрыФормы.КлючНазначенияИспользования = "КонтрольОперацийСДенежнымиСредствами";
	ПараметрыФормы.КлючВарианта = "КонтрольОперацийСДенежнымиСредствами";
	
	ОткрытьФорму("Отчет.КонтрольОперацийСДенежнымиСредствами.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		);
		
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ЖурналПлатежей);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ЖурналПлатежей, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ЖурналПлатежей);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандКОплате

&НаКлиенте
Процедура ОплатитьДокументНаличными(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КОплате, "РасходныйКассовыйОрдер");
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьДокументПоБезналичномуРасчету(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КОплате, "СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуНаличными(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КПоступлению, "ПриходныйКассовыйОрдер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуПоБезналичномуРасчету(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КПоступлению, "ПоступлениеБезналичныхДенежныхСредств");
	
КонецПроцедуры

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда, ЭтаФорма, Элементы.ЖурналПлатежей);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.ЖурналПлатежей);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСБанками
&НаКлиенте
Процедура СинхронизироватьСБанком(Команда)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбменСБанкамиКлиент.СинхронизироватьСБанком(Организация);
	Иначе
		ОбменСБанкамиКлиент.СинхронизироватьСБанком();
	КонецЕсли;
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСБанками

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КПоступлениюДатаПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КПоступлению.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КОплатеДатаПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КОплате.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизиты()
	
	Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	СписокТипыДокументов            = СписокТипыДокументов();
	СписокКассБанковскихСчетов      = СписокКассБанковскихСчетов(Организация);
	ИнициализироватьСписокОперацийОплаты();
	ИнициализироватьСписокОперацийПоступления();
	
	ОрганичениеДатыБудущихПлатежей = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоМесяца);
	ДатаКПоступлению = ОрганичениеДатыБудущихПлатежей.Дата;
	ДатаКОплате = ОрганичениеДатыБудущихПлатежей.Дата;
	
	ОписаниеОтборов = Новый Соответствие;
	ОписаниеОтборов.Вставить("Организация", Тип("СправочникСсылка.Организации"));
	УправлениеДоступом.НастроитьОтборыДинамическогоСписка(ЖурналПлатежей, ОписаниеОтборов);
	УправлениеДоступом.НастроитьОтборыДинамическогоСписка(КПоступлению, ОписаниеОтборов);
	УправлениеДоступом.НастроитьОтборыДинамическогоСписка(КОплате, ОписаниеОтборов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОрганизацияОтбор");
	МассивЭлементов.Добавить("ЖурналПлатежейОрганизация");
	МассивЭлементов.Добавить("КПоступлениюОрганизация");
	МассивЭлементов.Добавить("КОплатеОрганизация");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("КПоступлениюСоздатьДокументПоступленияНаОснованииПлатежнаяКарта");
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаПлатежнаяКарта");
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаПлатежнаяКартаПрочее");
	МассивЭлементов.Добавить("СоздатьВозвратОплатыКлиентуЭквайринг");
	МассивЭлементов.Добавить("СоздатьОтчетБанкаПоЭквайрингу");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЖурналПлатежейВалюта");
	МассивЭлементов.Добавить("КПоступлениюВалюта");
	МассивЭлементов.Добавить("КОплатеВалюта");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаНал");
	МассивЭлементов.Добавить("КПоступлениюСоздатьДокументПоступленияНаОснованииНаличные");
	МассивЭлементов.Добавить("СоздатьПКО");
	МассивЭлементов.Добавить("СоздатьЛистКассовойКниги");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СоздатьОплатуПоставщикуНал");
	МассивЭлементов.Добавить("КОплатеСоздатьДокументОплатыНаОснованииНаличные");
	МассивЭлементов.Добавить("СоздатьРКО");
	МассивЭлементов.Добавить("СоздатьЛистКассовойКниги");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПравоДоступа("Добавление", Метаданные.Документы.РасходныйКассовыйОрдер));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаПлатежнаяКарта");
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаПлатежнаяКартаПрочее");
	МассивЭлементов.Добавить("СоздатьВозвратОплатыКлиентуЭквайринг");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПравоДоступа("Добавление", Метаданные.Документы.ОперацияПоПлатежнойКарте)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами"));
	
	Для Каждого ЭлементСоответствия из ВидимостьЭлементов Цикл
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			ЭлементСоответствия.Ключ,
			"Видимость",
			ЭлементСоответствия.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеСписками

&НаСервере
Функция МассивДинамическихСписков()
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить(ЖурналПлатежей);
	МассивСписков.Добавить(КПоступлению);
	МассивСписков.Добавить(КОплате);
	
	Возврат МассивСписков;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ДинамическийСписок Из МассивДинамическихСписков() Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок,
			"Организация",
			СписокОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(Организация));
	КонецЦикла;
	
	ОбластиПланирования = Новый Массив;
	Для каждого ЭлементСписка Из СписокОперацийПоступления Цикл
		Если ЭлементСписка.Пометка Тогда
			ОбластиПланирования.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КПоступлению,
		"ОбластьПланирования",
		ОбластиПланирования,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ОбластиПланирования.Количество());
		
	ОбластиПланирования = Новый Массив;
	Для каждого ЭлементСписка Из СписокОперацийОплаты Цикл
		Если ЭлементСписка.Пометка Тогда
			ОбластиПланирования.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОплате,
		"ОбластьПланирования",
		ОбластиПланирования,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ОбластиПланирования.Количество());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКонстантыСписков()
	
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ЛистКассовойКниги", НСтр("ru = 'Лист кассовой книги'"));
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ОтчетБанкаПоЭквайрингу", НСтр("ru = 'Отчет банка по эквайрингу'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЖурналаПлатежей()
	
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("КонецПериода", ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецПериода));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЖурналаПлатежей()
	
	МассивВыбранныхКассБанковскихСчетов = Новый Массив;
	Для Каждого ЭлементСписка Из СписокКассБанковскихСчетов Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивВыбранныхКассБанковскихСчетов.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"БанковскийСчетКасса",
		МассивВыбранныхКассБанковскихСчетов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		МассивВыбранныхКассБанковскихСчетов.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборКПоступлениюКОплате(ИмяСписка)
	
	ПараметрДата = Дата('39990101');
	Если ИмяСписка = "КПоступлению" Тогда
		ПараметрДата = ДатаКПоступлению;
	ИначеЕсли ИмяСписка = "КОплате" Тогда
		ПараметрДата = ДатаКОплате;
	КонецЕсли;
	
	Журнал = Этаформа[ИмяСписка];
	Граница = ?(ЗначениеЗаполнено(ПараметрДата), КонецДня(ПараметрДата), Дата('39990101'));
	Журнал.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКПоступлению()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	РасчетыСКлиентами.КОплатеОстаток КАК СуммаКПоступлению
	|	
	|ПОМЕСТИТЬ СуммыКПоступлению
	|	
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаПлатежа, ЗаказКлиента <> НЕОПРЕДЕЛЕНО) КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|ГДЕ
	|	РасчетыСКлиентами.КОплатеОстаток > 0
	|	И (КлючиАналитики.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Валюта,
	|	РасчетыСПоставщиками.КОплатеОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа, ЗаказПоставщику ССЫЛКА Документ.ВозвратТоваровПоставщику) КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|ГДЕ
	|	РасчетыСПоставщиками.КОплатеОстаток > 0
	|	И (КлючиАналитики.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ДатаПлатежа,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.СуммаОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВПути.Остатки(&ДатаПлатежа,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И ВидПереводаДенежныхСредств В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ИнкассацияИзБанка),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПеремещениеВДругуюКассу),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ИнкассацияВБанк),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПеречислениеНаДругойСчет))
	|		) КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.СуммаОстаток > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(СуммыКПоступлению.СуммаКПоступлению
	|	* (ЕСТЬNULL(КурсВалюты.Курс, 1) / ЕСТЬNULL(КурсВалюты.Кратность, 1))
	|	* (ЕСТЬNULL(КурсВалютыОтчета.Кратность, 1) / ЕСТЬNULL(КурсВалютыОтчета.Курс, 1))) КАК СуммаКПоступлению
	|ИЗ
	|	СуммыКПоступлению КАК СуммыКПоступлению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних() КАК КурсВалюты
	|	ПО
	|		КурсВалюты.Валюта = СуммыКПоступлению.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсВалютыОтчета
	|	ПО
	|		ИСТИНА
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаПлатежа",
		Новый Граница(?(ЗначениеЗаполнено(ДатаКПоступлению), КонецДня(ДатаКПоступлению), ДатаКПоступлению), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаКПоступлению = Выборка.СуммаКПоступлению;
	Иначе
		СуммаКПоступлению = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКОплате()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(-РасчетыСПоставщиками.КОплатеОстаток
	|	* (ЕСТЬNULL(КурсВалюты.Курс, 1) / ЕСТЬNULL(КурсВалюты.Кратность, 1))
	|	* (ЕСТЬNULL(КурсВалютыОтчета.Кратность, 1) / ЕСТЬNULL(КурсВалютыОтчета.Курс, 1))) КАК СуммаКОплате
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И ЗаказПоставщику <> НЕОПРЕДЕЛЕНО) КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(, ЗаказПоставщику <> НЕОПРЕДЕЛЕНО) КАК ОстаткиЗадолженности
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = ОстаткиЗадолженности.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщиками.ЗаказПоставщику = ОстаткиЗадолженности.ЗаказПоставщику
	|			И РасчетыСПоставщиками.Валюта = ОстаткиЗадолженности.Валюта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.КурсыВалют.СрезПоследних() КАК КурсВалюты
	|		ПО
	|			КурсВалюты.Валюта = РасчетыСПоставщиками.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсВалютыОтчета
	|		ПО
	|			ИСТИНА
	|ГДЕ
	|	РасчетыСПоставщиками.КОплатеОстаток < 0
	|	И (РегистрАналитикаУчетаПоПартнерам.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаПлатежа",
		Новый Граница(?(ЗначениеЗаполнено(ДатаКОплате), КонецДня(ДатаКОплате), ДатаКОплате), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаКОплате = Выборка.СуммаКОплате;
	Иначе
		СуммаКОплате = 0;
	КонецЕсли;
	
	СуммаОжидаемая = СуммаВсего - СуммаКОплате;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиДенежныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ДенежныеСредстваБезналичные.КСписаниюОстаток
	|	* (ЕСТЬNULL(КурсВалюты.Курс, 1) / ЕСТЬNULL(КурсВалюты.Кратность, 1))
	|	* (ЕСТЬNULL(КурсВалютыОтчета.Кратность, 1) / ЕСТЬNULL(КурсВалютыОтчета.Курс, 1))), 0) КАК СуммаКСписанию
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК ДенежныеСредстваБезналичные
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних() КАК КурсВалюты
	|	ПО
	|		КурсВалюты.Валюта = ДенежныеСредстваБезналичные.БанковскийСчет.ВалютаДенежныхСредств
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсВалютыОтчета
	|	ПО
	|		ИСТИНА
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваНаличные.СуммаУпрОстаток        КАК СуммаВКассах
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК ДенежныеСредстваНаличные
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаУпрОстаток     КАК СуммаНаСчетах
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК ДенежныеСредстваБезналичные
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[1].Выбрать();
	Выборка.Следующий();
	СуммаДоступныйОстатокВКассах = Выборка.СуммаВКассах;
	
	Выборка = Результат[2].Выбрать();
	Выборка.Следующий();
	СуммаДоступныйОстатокНаСчетах = Выборка.СуммаНаСчетах;
	
	СуммаВсего = СуммаДоступныйОстатокНаСчетах + СуммаДоступныйОстатокВКассах;
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДоступныйОстатокНаСчетах = СуммаДоступныйОстатокНаСчетах + Выборка.СуммаКСписанию;
		СуммаВсего = СуммаВсего + Выборка.СуммаКСписанию;
	КонецЕсли;
	
	СуммаОжидаемая = СуммаВсего - СуммаКОплате;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалНаСервере()
	
	ОбновитьОстаткиДенежныхСредств();
	ОбновитьКОплате();
	ОбновитьКПоступлению();
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаКлиенте
Процедура СоздатьПриходныйКассовыйОрдер(ХозяйственнаяОперация = Неопределено)

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивКасс = МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, "Касса");
	Если МассивКасс.Количество() = 1 Тогда
		ДанныеЗаполнения.Вставить("Касса", МассивКасс[0]);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходныйКассовыйОрдер(ХозяйственнаяОперация = Неопределено)

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивКасс = МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, "Касса");
	Если МассивКасс.Количество() = 1 Тогда
		ДанныеЗаполнения.Вставить("Касса", МассивКасс[0]);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеБезналичныхДенежныхСредств(ХозяйственнаяОперация = Неопределено, ТипПлатежногоДокумента = Неопределено)

	Если Не ЗначениеЗаполнено(ТипПлатежногоДокумента) Тогда
		ТипПлатежногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение");
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("ТипПлатежногоДокумента", ТипПлатежногоДокумента);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивБанковскихСчетов = МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, "БанковскийСчет");
	Если МассивБанковскихСчетов.Количество() = 1 Тогда
		ДанныеЗаполнения.Вставить("БанковскийСчет", МассивБанковскихСчетов[0]);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.ПоступлениеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеБезналичныхДенежныхСредств(ХозяйственнаяОперация = Неопределено, ТипПлатежногоДокумента = Неопределено)

	Если Не ЗначениеЗаполнено(ТипПлатежногоДокумента) Тогда
		ТипПлатежногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение");
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("ТипПлатежногоДокумента", ТипПлатежногоДокумента);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивБанковскихСчетов = МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, "БанковскийСчет");
	Если МассивБанковскихСчетов.Количество() = 1 Тогда
		ДанныеЗаполнения.Вставить("БанковскийСчет", МассивБанковскихСчетов[0]);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭквайринговуюОперацию(ХозяйственнаяОперация = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.ОперацияПоПлатежнойКарте.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ЗаполнитьПредставлениеСпискаКассБанковскихСчетов()
	
	СписокКассБанковскихСчетовПредставление = "";
	Для Каждого ЭлементСписка Из СписокКассБанковскихСчетов Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокКассБанковскихСчетовПредставление = СписокКассБанковскихСчетовПредставление +
				?(ЗначениеЗаполнено(СписокКассБанковскихСчетовПредставление), ", ", "") + ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТипыДокументов()
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"),                НСтр("ru = 'Приходный кассовый ордер'"));
	Список.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"),                НСтр("ru = 'Расходный кассовый ордер'"));
	Список.Добавить(Тип("ДокументСсылка.ЛистКассовойКниги"),                     НСтр("ru = 'Лист кассовой книги'"));
	
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение,     НСтр("ru = 'Платежное поручение входящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение,    НСтр("ru = 'Инкассовое поручение входящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование,    НСтр("ru = 'Платежное требование входящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер,         НСтр("ru = 'Платежный ордер входящий'"));
	
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение,     НСтр("ru = 'Платежное поручение исходящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение,    НСтр("ru = 'Инкассовое поручение исходящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование,    НСтр("ru = 'Платежное требование исходящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер,         НСтр("ru = 'Платежный ордер исходящий'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер,        НСтр("ru = 'Банковский ордер исходящий'"));

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Список.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"),              НСтр("ru = 'Эквайринговая операция'"));
		Список.Добавить(Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга"),       НСтр("ru = 'Отчет банка по эквайрингу'"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыПлатежногоДокументаПоступления()
	
	МассивТиповПоступления = Новый Массив;
	МассивТиповПоступления.Добавить(НСтр("ru = 'Платежное поручение входящее'"));
	МассивТиповПоступления.Добавить(НСтр("ru = 'Инкассовое поручение входящее'"));
	МассивТиповПоступления.Добавить(НСтр("ru = 'Платежное требование входящее'"));
	МассивТиповПоступления.Добавить(НСтр("ru = 'Платежный ордер входящий'"));
	
	Возврат МассивТиповПоступления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыПлатежногоДокументаСписания()
	
	МассивТиповСписания = Новый Массив;
	МассивТиповСписания.Добавить(НСтр("ru = 'Платежное поручение исходящее'"));
	МассивТиповСписания.Добавить(НСтр("ru = 'Инкассовое поручение исходящее'"));
	МассивТиповСписания.Добавить(НСтр("ru = 'Платежное требование исходящее'"));
	МассивТиповСписания.Добавить(НСтр("ru = 'Платежный ордер исходящий'"));
	МассивТиповСписания.Добавить(НСтр("ru = 'Банковский ордер исходящий'"));
	
	Возврат МассивТиповСписания;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокКассБанковскихСчетов(Организация)
	
	Список = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КассыБанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|(ВЫБРАТЬ
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	НЕ Кассы.ПометкаУдаления
	|	И (Кассы.Владелец = &Организация
	|		ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|	И (БанковскиеСчетаОрганизаций.Владелец = &Организация
	|		ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|) КАК КассыБанковскиеСчета
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Список.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСписокОперацийПоступления()
	
	СписокОперацийПоступления.Очистить();
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.РасчетыСКлиентами);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.ВозвратыОтПоставщиков);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.ДенежныеСредстваВПути);
	
	Элементы.СписокОперацийКПоступлениюОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийПоступления Цикл
		Элементы.СписокОперацийКПоступлениюОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокОперацийОплаты()
	
	СписокОперацийОплаты.Очистить();
	СписокОперацийОплаты.Добавить(Перечисления.ОбластиПланированияПлатежей.РасчетыСПоставщиками);
	СписокОперацийОплаты.Добавить(Перечисления.ОбластиПланированияПлатежей.ВозвратыКлиентам);
	
	Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокОперацийПредставление(СписокОпераций)
	
	СписокОперацийПредставление = "";
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОперацийПредставление = СписокОперацийПредставление
				+ ?(ЗначениеЗаполнено(СписокОперацийПредставление), ", ", "")
				+ ?(ЗначениеЗаполнено(ЭлементСписка.Представление), ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОперацийПредставление;
	
КонецФункции

&НаСервере
Процедура СохранитьРабочиеЗначенияПолейФормы(СохранитьНеопределено = Ложь)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяОрганизация", "", ?(СохранитьНеопределено, Неопределено, Организация));
	
	БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущийБанковскийСчет", "", ?(СохранитьНеопределено, Неопределено, БанковскийСчет));
	
	Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяКасса", "", ?(СохранитьНеопределено, Неопределено, Касса));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, БанковскийСчетКасса)
	
	МассивВыбранныхКассБанковскихСчетов = Новый Массив;
	
	ФильтрПоТипу = "";
	Если БанковскийСчетКасса = "БанковскийСчет" Тогда
		ФильтрПоТипу = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций");
	ИначеЕсли БанковскийСчетКасса = "Касса" Тогда
		ФильтрПоТипу = Тип("СправочникСсылка.Кассы");
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокКассБанковскихСчетов Цикл
		Если ЭлементСписка.Пометка И ФильтрПоТипу = ТипЗнч(ЭлементСписка.Значение) Тогда
			МассивВыбранныхКассБанковскихСчетов.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВыбранныхКассБанковскихСчетов;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьСписокКассБанковскихСчетов()
	
	ОбновленныйСписок = СписокКассБанковскихСчетов(Организация);
	Для каждого ЭлементСписка из СписокКассБанковскихСчетов Цикл
		Элемент = ОбновленныйСписок.НайтиПоЗначению(ЭлементСписка.Значение);
		Если Элемент <> Неопределено Тогда
			Элемент.Пометка = ЭлементСписка.Пометка;
		КонецЕсли;
	КонецЦикла;
	
	СписокКассБанковскихСчетов = ОбновленныйСписок;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеВыгрузкиПрямойОбмен(Платежи)
	
	ДенежныеСредстваСервер.ЗаписатьДатуВыгрузкиПлатежей(Платежи);
	
КонецПроцедуры

#КонецОбласти

// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
#Область ОбработкаПолученияОперацийПоЯндексКассе

&НаКлиенте
Процедура ОбработкаПолученияОперацийПоЯндексКассе(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОбработкаЗавершенияСозданияОпераций", ЭтотОбъект);

	
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Создание операций по Яндекс.Кассе'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		
		ОбработкаПолученияОперацийПоЯндексКассеЗавершение = Новый ОписаниеОповещения(
			"ОбработкаПолученияОперацийПоЯндексКассеЗавершение", ЭтотОбъект,
			Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении));
			
		ДлительнаяОперация = СоздатьОперацииПоЯндексКассеВФоне(Результат, УникальныйИдентификатор);
		
		Если ДлительнаяОперация = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
			ОбработкаПолученияОперацийПоЯндексКассеЗавершение,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьОперацииПоЯндексКассеВФоне(Знач АдресРезультата, Знач УникальныйИдентификатор)
	
	ДанныеОпераций = Новый Массив;
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) Тогда
			ДанныеОпераций = Результат;
		КонецЕсли;
	КонецЕсли;

	Если Не ДанныеОпераций.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура();
	ПараметрыЗадания.Вставить("ДанныеОпераций", ДанныеОпераций);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание операций по Яндекс.Кассе'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияСЯндексКассойПереопределяемый.ОбработатьПолучениеОперацийПоЯндексКассе", 
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПолученияОперацийПоЯндексКассеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // Отменено пользователем.
		Возврат;
	КонецЕсли;
	
	ВывестиРезультатФоновойОперации(Результат, ДополнительныеПараметры.ОповещениеОЗавершении);
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатФоновойОперации(Результат, ОповещениеОЗавершении)
	
	Если Результат.Свойство("Сообщения") Тогда
		Для Каждого Сообщение из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат.АдресРезультата);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = Результат.ПодробноеПредставлениеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"), ОбщегоНазначенияКлиент.ДатаСеанса(), ТекстСообщения));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗавершенияСозданияОпераций(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) И ЭтоАдресВременногоХранилища(Результат) Тогда
			
		СчетчикДокументов = ПолучитьИзВременногоХранилища(Результат);
		Если СчетчикДокументов = Неопределено Тогда
			СчетчикДокументов = 0;
		КонецЕсли;
		
		ШаблонСообщения = ?(СчетчикДокументов, НСтр("ru = 'Операций по Яндекс.Кассе загружено: %1'"),
			НСтр("ru = 'Новых операций по Яндекс.Кассе не было'"));
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СчетчикДокументов);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка завершена'"), "e1cib/list/ЖурналДокументов.Платежи", ТекстСообщения);
		Оповестить("ЗавершенаЗагрузкаОперацииПоЯндексКассе");
		
		Если СчетчикДокументов Тогда
			ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой

#КонецОбласти
