
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСпискиДействий();
	
	Если ЗначениеЗаполнено(Параметры.ТоварыИсходная) тогда
		ТоварыИсходная.Загрузить(Параметры.ТоварыИсходная.Выгрузить(, "НомерСтроки,Номенклатура,Количество,Цена"));				
	КонецЕсли;	
	
	ИнициализироватьТабличныйДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	АдресФайла = "";
	НачальноеИмяФайла = Объект.ИмяФайлаДанных;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуИзФормыЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла, НачальноеИмяФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ИмяСпискаДействий = ПолучитьСписокДействий(ТекДанные.ТипСтроки);
	Иначе
		ИмяСпискаДействий = ПолучитьСписокДействий(0);
	КонецЕсли; 
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ЭтаФорма[ИмяСпискаДействий].ВыгрузитьЗначения());
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ПерваяСтрокаЗаполнена = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C3").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C4").Текст);
			
	Если Не ПерваяСтрокаЗаполнена Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	
	ЗаполнитьТоварыИзФайла();
	
	ЗаполнитьТоварыСверка();
	
	//СопоставитьДанныеТабличногоДокументаСДаннымиИБ();

	Элементы.ТоварыДокумент.Заголовок	 = "В документе ("+Формат(КоличествоСтрокДокумент, "ЧДЦ=; ЧГ=0")+")";
	Элементы.ТоварыФайл.Заголовок		 = "В файле ("+Формат(КоличествоСтрокФайл, "ЧДЦ=; ЧГ=0")+")";
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Сверка;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЧтениеИсточника;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИЗакрыть(Команда)	
	Перем СтруктураВыбора;
	
	ОчиститьСообщения();
	
	Если ПроверитьКорректностьЗаполнения() Тогда
		
		Закрыть();
		
		СтруктураВыбора = Новый Структура();
		СтруктураВыбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыВХранилище());
		
		ОповеститьОВыборе(СтруктураВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьКорректностьЗаполнения()

	ВсёЗаполненоКорректно = Истина;
	
	ОшибкиПользователю = Неопределено;
	
	Для Каждого СтрокаТовары Из Объект.ТоварыСверка Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
			И СтрокаТовары.Действие = "Взять из файла" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю,
				"Объект.ТоварыСверка[%1].Номенклатура",
				"Поле ""Номенклатура"" не заполнено",
				"Объект.ТоварыСверка.Номенклатура", 
				СтрокаТовары.НомерСтроки,
				"Поле ""Номенклатура"" в строке %1 не заполнено",
				СтрокаТовары.НомерСтроки-1);
				
			ВсёЗаполненоКорректно = Ложь;	
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Действие) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю,
				"Объект.ТоварыСверка[%1].Действие",
				"Поле ""Действие"" не заполнено",
				"Объект.ТоварыСверка.Действие", 
				СтрокаТовары.НомерСтроки,
				"Поле ""Действие"" в строке %1 не заполнено",
				СтрокаТовары.НомерСтроки-1);
				
			ВсёЗаполненоКорректно = Ложь;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю);
	
	Возврат ВсёЗаполненоКорректно;

КонецФункции // ПроверитьКорректностьЗаполнения()
 
&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	СтрокаНачала = 2;
	КолонкаИдентификатор = 1;
	КолонкаНаименование = 2;
	КолонкаКоличество = 3;
	КолонкаЦена = 4;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	МакетЗаполненияПоВнешнемуИсточнику = ОбработкаОбъект.ПолучитьМакет("МакетЗагрузкиДанных");
	ТабличныйДокумент.Очистить();
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Идентификатор");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Номенклатура");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Цена");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
		
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзФормыЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(НСтр("ru = 'Выполняется чтение файла. Пожалуйста, подождите...'"));
		Объект.ИмяФайлаДанных = ВыбранноеИмяФайла;
		ВыполнитьЗагрузкуНаСервере(Адрес, ВыбранноеИмяФайла);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуНаСервере(АдресФайла, ИмяФайлаДляРасширения)
		
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	
	АдресНаСервере = ПолучитьИмяВременногоФайла(РасширениеФайла(ИмяФайлаДляРасширения));
	
	ДвоичныеДанные.Записать(АдресНаСервере);	
	
	ТабличныйДокумент.Очистить();
	
    Попытка
        ТабличныйДокумент.Прочитать(АдресНаСервере, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
    Исключение
        Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
   		Возврат;
    КонецПопытки;

	
	Объект.ИмяВременногоФайла = АдресНаСервере;
	
	//ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	//ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Объект);
	//ОбъектДляСервера.ВыполнитьЗагрузку();
	
	Попытка
		
		Если Не ПустаяСтрока(АдресНаСервере) Тогда
			УдалитьФайлы(АдресНаСервере);
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	//ОбъектДляСервера.Параметры.Очистить();
	//ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");	
	
КонецПроцедуры

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

&НаСервере
Функция ПоместитьТоварыВХранилище()

	Товары = Объект.ТоварыСверка.Выгрузить();
		
	Возврат ПоместитьВоВременноеХранилище(Товары);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыСверка()
	
	Объект.ТоварыСверка.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыИсходная.НомерСтроки,
		|	ТоварыИсходная.Номенклатура,
		|	ТоварыИсходная.Количество,
		|	ТоварыИсходная.Цена
		|ПОМЕСТИТЬ втТоварыИсходная
		|ИЗ
		|	&ТоварыИсходная КАК ТоварыИсходная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТоварыИсходная.НомерСтроки КАК НомерСтрокиИсходный,
		|	втТоварыИсходная.Номенклатура,
		|	втТоварыИсходная.Количество,
		|	втТоварыИсходная.Цена,
		|	втТоварыИсходная.Номенклатура.Артикул КАК Идентификатор,
		|	1 КАК ТипСтроки
		|ИЗ
		|	втТоварыИсходная КАК втТоварыИсходная";
		
	Запрос.УстановитьПараметр("ТоварыИсходная", ТоварыИсходная.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаТоварыИсходная = РезультатЗапроса.Выбрать();
	
	КоличествоСтрокДокумент = 0;	
	Пока ВыборкаТоварыИсходная.Следующий() Цикл
		
		НоваяСтрока = Объект.ТоварыСверка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыИсходная);
		
		КоличествоСтрокДокумент = КоличествоСтрокДокумент + 1;
		
	КонецЦикла;
	
	Для Каждого СтрокаИзФайла Из ТоварыИзФайла Цикл
		
		СтрокаИзФайлаОпределена = Ложь;
		
		Для Каждого СтрокаСверка Из Объект.ТоварыСверка Цикл			
			Если СтрокаСверка.Идентификатор = СтрокаИзФайла.Идентификатор Тогда
				
				СтрокаИзФайлаОпределена = Истина;
				
				СтрокаСверка.Наименование_Файл	 = СтрокаИзФайла.Наименование;	
				СтрокаСверка.Количество_Файл	 = СтрокаИзФайла.Количество;	
				СтрокаСверка.Цена_Файл			 = СтрокаИзФайла.Цена;					
				СтрокаСверка.ТипСтроки			 = 0;
				
			    Прервать;
				
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ СтрокаИзФайлаОпределена Тогда
			СтрокаСверка = Объект.ТоварыСверка.Добавить();
			
			СтрокаСверка.Идентификатор		 = СтрокаИзФайла.Идентификатор;	
			СтрокаСверка.Номенклатура		 = СтрокаИзФайла.Номенклатура;	
			СтрокаСверка.Наименование_Файл	 = СтрокаИзФайла.Наименование;	
			СтрокаСверка.Количество_Файл	 = СтрокаИзФайла.Количество;	
			СтрокаСверка.Цена_Файл			 = СтрокаИзФайла.Цена;
			СтрокаСверка.ТипСтроки			 = 2;
			
		КонецЕсли;
	
	КонецЦикла;
	
	УстановитьДействияПоУмолчанию();
		
КонецПроцедуры // ЗаполнитьТоварыСверка()

&НаСервере
Процедура ЗаполнитьТоварыИзФайла()
	
	ТоварыИзФайла.Очистить();
	
	НомерСтроки = СтрокаНачала;
	Пока ОбязательнаяКолонкаЗаполнена(НомерСтроки) Цикл
		
		СтрокаТаблицы = ТоварыИзФайла.Добавить();
		СтрокаТаблицы.Идентификатор	 = ЗначениеЯчейкиТабДока(НомерСтроки, "Идентификатор");
		СтрокаТаблицы.Наименование	 = ЗначениеЯчейкиТабДока(НомерСтроки, "Наименование");
		СтрокаТаблицы.Количество	 = ЗначениеЯчейкиТабДока(НомерСтроки, "Количество");
		СтрокаТаблицы.Цена			 = ЗначениеЯчейкиТабДока(НомерСтроки, "Цена");
				
		НомерСтроки = НомерСтроки + 1; 	
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыИзФайла.Идентификатор,
		|	ТоварыИзФайла.Наименование,
		|	ТоварыИзФайла.Количество,
		|	ТоварыИзФайла.Цена
		|ПОМЕСТИТЬ втТоварыИзФайла
		|ИЗ
		|	&ТоварыИзФайла КАК ТоварыИзФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыИзФайла.Идентификатор,
		|	ТоварыИзФайла.Наименование,
		|	ТоварыИзФайла.Количество,
		|	ТоварыИзФайла.Цена,
		|	ЕСТЬNULL(СпрНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
		|ИЗ
		|	втТоварыИзФайла КАК ТоварыИзФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СпрНоменклатура.Артикул = ТоварыИзФайла.Идентификатор)
		|			И (НЕ СпрНоменклатура.ПометкаУдаления)";
		
	Запрос.УстановитьПараметр("ТоварыИзФайла", ТоварыИзФайла.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаТоварыИзФайла = РезультатЗапроса.Выбрать();
	
	ТоварыИзФайла.Очистить();
	
	КоличествоСтрокФайл = 0;	
	Пока ВыборкаТоварыИзФайла.Следующий() Цикл
		
		НоваяСтрока = ТоварыИзФайла.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыИзФайла);
		
		КоличествоСтрокФайл = КоличествоСтрокФайл + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТоварыСверка()

&НаСервере
Процедура УстановитьДействияПоУмолчанию()
	
	ДействияПоУмолчанию = Новый Соответствие;
	
	ТипСтроки = 0; // Строки сопоставлены
	СписокВыбораДействийПоТипу = ЭтотОбъект[ПолучитьСписокДействий(ТипСтроки)];
	ДействиеПоУмолчанию = СписокВыбораДействийПоТипу[0].Значение;
	Для каждого СтрокаДействия Из СписокВыбораДействийПоТипу Цикл
		Если СтрокаДействия.Пометка Тогда
			ДействиеПоУмолчанию = СтрокаДействия.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	ДействияПоУмолчанию.Вставить(ТипСтроки, ДействиеПоУмолчанию);
	
	ТипСтроки = 1; // Строки нет в файле
	СписокВыбораДействийПоТипу = ЭтотОбъект[ПолучитьСписокДействий(ТипСтроки)];
	ДействиеПоУмолчанию = СписокВыбораДействийПоТипу[0].Значение;
	Для каждого СтрокаДействия Из СписокВыбораДействийПоТипу Цикл
		Если СтрокаДействия.Пометка Тогда
			ДействиеПоУмолчанию = СтрокаДействия.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	ДействияПоУмолчанию.Вставить(ТипСтроки, ДействиеПоУмолчанию);
	
	ТипСтроки = 2; // Строки нет в документе
	СписокВыбораДействийПоТипу = ЭтотОбъект[ПолучитьСписокДействий(ТипСтроки)];
	ДействиеПоУмолчанию = СписокВыбораДействийПоТипу[0].Значение;
	Для каждого СтрокаДействия Из СписокВыбораДействийПоТипу Цикл
		Если СтрокаДействия.Пометка Тогда
			ДействиеПоУмолчанию = СтрокаДействия.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	ДействияПоУмолчанию.Вставить(ТипСтроки, ДействиеПоУмолчанию);
	
	Для Каждого СтрокаСверка Из Объект.ТоварыСверка Цикл
		СтрокаСверка.Действие = ДействияПоУмолчанию[СтрокаСверка.ТипСтроки]; 
		Если СтрокаСверка.ТипСтроки = 0
			И СтрокаСверка.Количество = СтрокаСверка.Количество_Файл
			И СтрокаСверка.Цена = СтрокаСверка.Цена_Файл Тогда
		    // В этой строе всё хорошо - ничего изменять не нужно
			СтрокаСверка.Действие = "<Оставить без изменений>";		
		
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры // УстановитьДействияПоУмолчанию()

&НаСервере
Функция ЗначениеЯчейкиТабДока(НомерСтроки, ИмяКолонки)
	
	ЗначениеЯчейки = Неопределено;
	
	Ячейка = ТабличныйДокумент.Область("R"+НомерСтроки+"C"+ЭтотОбъект["Колонка"+ИмяКолонки]);
	
	Если Ячейка.СодержитЗначение Тогда
		ЗначениеЯчейки = Ячейка.Значение;
	Иначе
		ЗначениеЯчейки = СокрЛП(Ячейка.Текст);
	КонецЕсли; 
	
	Возврат ЗначениеЯчейки;

КонецФункции // ЗначениеЯчейкиТабДока()
 
&НаСервере
Функция ОбязательнаяКолонкаЗаполнена(НомерСтроки)

	ЗначениеОбязательнойКолонки = ЗначениеЯчейкиТабДока(НомерСтроки, "Идентификатор");
	
	Возврат ЗначениеЗаполнено(ЗначениеОбязательнойКолонки);

КонецФункции // ОбязательнаяКолонкаЗаполнена()

&НаСервере
Процедура ЗаполнитьСпискиДействий()

	ЭтоЗначениеПоУмолчанию = Истина;
	
	//ТипСтроки = 0; Строки сопоставлены
	СписокДействий.Добавить("<Оставить без изменений>");
	СписокДействий.Добавить("Взять из файла", , ЭтоЗначениеПоУмолчанию);
	СписокДействий.Добавить("Удалить строку");
	
	//ТипСтроки = 1; Строки нет в файле
	СписокДействийНетВФайле.Добавить("<Оставить без изменений>");
	СписокДействийНетВФайле.Добавить("Удалить строку", , ЭтоЗначениеПоУмолчанию);
	
	//ТипСтроки = 2; Строки нет в документе
	СписокДействийНетВДокументе.Добавить("<Оставить без изменений>");
	СписокДействийНетВДокументе.Добавить("Взять из файла", , ЭтоЗначениеПоУмолчанию);

КонецПроцедуры // ЗаполнитьСпискиДействий()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокДействий(ТипСтроки = Неопределено)

	//ТипСтроки = 0; Строки сопоставлены
	//ТипСтроки = 1; Строки нет в файле
	//ТипСтроки = 2; Строки нет в документе
	
	Если ТипСтроки = 1 Тогда
		Возврат "СписокДействийНетВФайле";	
	ИначеЕсли ТипСтроки = 2 Тогда
		Возврат "СписокДействийНетВДокументе";	
	Иначе	
		Возврат "СписокДействий";
	КонецЕсли; 

КонецФункции // ПолучитьСписокДействий()

#КонецОбласти

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхИзВременногоХранилища(Отказ, АдресВременногоХранилища)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
	
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Интерактивно)
	
	Перем ВыбранноеИмяФайла;
	Перем АдресВременногоХранилища;
	
	Если ПоместитьФайл(АдресВременногоХранилища, Объект.ИмяФайлаДанных, ВыбранноеИмяФайла, Интерактивно, УникальныйИдентификатор) Тогда
		
		Отказ = Ложь;
		
		// вызов сервера
		ВыполнитьЗагрузкуДанныхИзВременногоХранилища(Отказ, АдресВременногоХранилища);
		
		Если Отказ Тогда
			Предупреждение(НСтр("ru = 'Указан неправильный файл товаров от поставщика!'"));
			Возврат;
		КонецЕсли;
		
		Если Интерактивно Тогда
			
			Объект.ИмяФайлаДанных = ВыбранноеИмяФайла;
			
		Иначе
			
			Предупреждение(НСтр("ru = 'Файл поставщика загружен успешно.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПриИзменении(Элемент)
	Файл = Новый Файл(Объект.ИмяФайлаДанных);
	
	Если    Не Файл.Существует()
		ИЛИ Не Файл.ЭтоФайл() Тогда
		
		Предупреждение(НСтр("ru = 'Имя файла указано неправильно!'"));
		Возврат;
	КонецЕсли;
	
	ВыбратьФайл(Ложь);
	
КонецПроцедуры


