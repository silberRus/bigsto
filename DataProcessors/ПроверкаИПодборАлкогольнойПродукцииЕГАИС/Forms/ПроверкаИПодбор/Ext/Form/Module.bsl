&НаКлиенте
Перем СоответствиеШтрихкодовСтрокДерева;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьДанныеФормы();
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПересчитатьВсеИтогиФормы();
	
	ИнтеграцияЕГАИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	СобытияФормЕГАИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева();
	
КонецПроцедуры

&НаСервере
Функция СоответствиеШтрихкодовСтрокДерева()
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимПроверки = Настройки.Получить("РежимПроверки");
	Если РежимПроверки <> Неопределено Тогда
		ПредставлениеРежимаПроверки = ПредставлениеРежимаПроверки(РежимПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыполняетсяЗакрытие Тогда
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Все несохраненные результаты проверки будут потеряны. Все равно закрыть?'");
			ОписаниеОповещенияПослеВопросаПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеВопросаПриЗакрытииФормы", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещенияПослеВопросаПриЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	СобытияФормЕГАИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(ОповещениеПриЗавершении, 
	                                                       ЭтотОбъект, 
	                                                       Источник, 
	                                                       Событие, 
	                                                       Данные,
	                                                       ПараметрыСканированияАкцизныхМарок());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияИнформацияТребуетсяПеремаркировкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьОтборТребуетсяПеремаркировка" Тогда
		
		УстановленОтборТребуетсяПеремаркировать = Не УстановленОтборТребуетсяПеремаркировать;
		
		Если УстановленОтборТребуетсяПеремаркировать Тогда
			УстановитьОтборПоТребующимПеремаркировкиНаСервере();
		Иначе
			ОтобразитьИнформациюОНеобходимостиПеремаркировки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРежимаПроверкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьРежимПроверки" Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("РежимПроверки", РежимПроверки);
		
		ОповещениеОИзмененииРежимаПроверки = Новый ОписаниеОповещения("ПослеИзмененияРежимаПроверки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ИзменениеРежимаПроверки", ПараметрыОткрытия, ЭтотОбъект, 
		             УникальныйИдентификатор,,, ОповещениеОИзмененииРежимаПроверки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередУдалением(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
		
		Если Не РежимПодбораСуществующихУпаковок Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Удалять можно только строки в статусе ""Не числилось"".'"),
			                                                  ,
			                                                  ,"ДеревоМаркированнойПродукции"
			                                                  ,
			                                                  Отказ);
			
			Возврат;
			
		Иначе
			
			РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
			
			Если ТекущиеДанные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки")
				Или (РодительскаяСтрока <> Неопределено
				     И РодительскаяСтрока.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки")) Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Удалять можно только строки в статусе ""Не числилось"", упаковки верхнего уровня и бутылки без упаковки.'"),
				                                                  ,
				                                                  ,"ДеревоМаркированнойПродукции"
				                                                  ,
				                                                  Отказ);
			
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		АлкогольнаяПродукцияУдаляемойСтроки  = ТекущиеДанные.АлкогольнаяПродукция;
		Справка2УдаляемойСтроки              = ТекущиеДанные.Справка2;
		
	КонецЕсли;
	
	РодительскаяСтрока        = ТекущиеДанные.ПолучитьРодителя();
	
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если РодительскаяСтрока <> Неопределено Тогда
		
		ИдентификаторРодителяУдаляемойСтроки = РодительскаяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Если ИдентификаторТекущейСтроки = ИдентификаторТекущейПроверяемойУпаковки Тогда
		
		ИдентификаторТекущейПроверяемойУпаковки = ИдентификаторРодителяУдаляемойСтроки;
		
	КонецЕсли;
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		КоличествоУдаляемыхТребующихПеремаркировки = ?(ТекущиеДанные.ТребуетсяПеремаркировка, 1, 0);
		ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(ТекущиеДанные.ПолучитьЭлементы(), КоличествоУдаляемыхТребующихПеремаркировки);
		
		Если КоличествоУдаляемыхТребующихПеремаркировки > 0 Тогда
			КоличествоУпаковокКоторыеНеобходимоПеремаркировать = КоличествоУпаковокКоторыеНеобходимоПеремаркировать - КоличествоУдаляемыхТребующихПеремаркировки;
			ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		Для Каждого СтрокаТаблицы Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			
			ДобавитьСтрокуСПодчиненнымиВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаТаблицы);
			
		КонецЦикла 
		
	Иначе
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ТекущиеДанные, - 1);
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева.Удалить(ТекущиеДанные.ЗначениеШтрихкода);
	УдалитьИзСоответствияШтрихкодовДляКоллекции(ТекущиеДанные.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда
			
			УстановитьСтатусОтсутствуетДляПодчиненных(ТекущиеДанные);
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущиеДанные, Ложь);
			
		КонецЕсли;
		
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущиеДанные);
		УстановитьИндексКартинкиСтатусаПроверки(ТекущиеДанные);
		УстановитьДоступностьУпаковкиДляПроверки(ТекущиеДанные, ДоступныеДляПроверкиУпаковки);
		
		ПроверитьСоответствиеОтборуПриИзмененииСтроки(ТекущиеДанные);
		ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ТекущиеДанные);
		
		Если ПроверитьНеобходимостьПеремаркировкиПриИзмененииСтатусаПроверки Тогда
			
			ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные) Тогда
			
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение <> ТекущиеДанные.СтатусПроверки 
		И (ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует")
		Или ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует")) Тогда
		
		ПроверитьНеобходимостьПеремаркировкиПриИзмененииСтатусаПроверки = Истина;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует")
		И ТекущиеДанные.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда
		
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ТекущиеДанные, - 1);
		
	ИначеЕсли ВыбранноеЗначение <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует")
		И ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда

		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ТекущиеДанные, 1);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПослеУдаления(Элемент)
	
	Если ИдентификаторРодителяУдаляемойСтроки <> - 1 Тогда
		
		СтрокаДляПересчета = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторРодителяУдаляемойСтроки);
		Если СтрокаДляПересчета <> Неопределено Тогда
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДляПересчета, Ложь);
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДляПересчета);
			ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторРодителяУдаляемойСтроки, Истина);
		КонецЕсли;
		
		ИдентификаторРодителяУдаляемойСтроки = - 1;
		
	КонецЕсли;
	
	Если ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки
		Или ТаблицаИзмененийАлкогольнойПродукции.Количество() > 0 Тогда
		ОтобразитьИнформациюОНеобходимостиПеремаркировки();
		ОбработатьТаблицуИзмененияАлкогольнойПродукции();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПриАктивизацииСтроки(Элемент)
	
	ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовПодобраннаяПродукция

&НаКлиенте
Процедура АлкогольнаяПродукцияКОпределениюСправок2ПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.АлкогольнаяПродукцияКОпределениюСправок2.ТекущиеДанные;
	
	Если ТекущиеДанные.Маркируемая
		Или ТекущиеДанные.Количество > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Удалять можно только строки с немаркируемой алкогольной продукцией с нулевым количеством.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКОпределениюСправок2ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКОпределениюСправок2ПослеУдаления(Элемент)
	
	КоличествоСтрокПодобраннойАлкогольнойПродукции = АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Количество();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область ПереносРезультатовВДокументОснование

&НаКлиенте
Процедура СохранитьПромежуточныеРезультатыПроверки(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		Если РезультатыПроверкиУспешноСохранены() Тогда
			Модифицированность = Ложь;
			Оповестить("ПредварительноеСохранениеРезультатовСканированияАлкогольнойПродукции", ПроверяемыйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗавершена(Команда)
	
	КоличествоНепроверенных = 0;
	КоличествоОтложенных    = 0;
	КоличествоВсего         = 0;
	
	КоличествоСтрокНеМаркированнойВсего       = 0;
	КоличествоСтрокНеМаркированнойОтсутствует = 0;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		КоличествоНепроверенных = КоличествоНепроверенных + СтрокаДерева.КоличествоПодчиненныхНеПроверялось;
		КоличествоОтложенных    = КоличествоОтложенных + СтрокаДерева.КоличествоПодчиненныхОтложено;
		КоличествоВсего         = КоличествоВсего + СтрокаДерева.КоличествоПодчиненныхВсего;
		
		Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась") Тогда
			
			КоличествоНепроверенных = КоличествоНепроверенных + 1;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена") Тогда
			
			КоличествоОтложенных = 1;
			
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
	КонецЦикла;
	
	Если РежимПодбораСуществующихУпаковок Тогда
		
		Для Каждого СтрокаПродукции Из АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы() Цикл
			
			Если СтрокаПродукции.Маркируемая Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоСтрокНеМаркированнойВсего = КоличествоСтрокНеМаркированнойВсего + СтрокаПродукции.Количество;
			КоличествоСтрокНеМаркированнойОтсутствует = КоличествоСтрокНеМаркированнойОтсутствует + СтрокаПродукции.Количество 
			                                            - СтрокаПродукции.КоличествоРаспределено;
		
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаНеМаркируемой Из ТаблицаНеМаркируемойПродукции Цикл
		
			КоличествоСтрокНеМаркированнойВсего = КоличествоСтрокНеМаркированнойВсего + СтрокаНеМаркируемой.КоличествоПоДокументу;
			КоличествоСтрокНеМаркированнойОтсутствует = КоличествоСтрокНеМаркированнойОтсутствует + СтрокаНеМаркируемой.КоличествоПоДокументу 
			                                            - СтрокаНеМаркируемой.КоличествоФактическое;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если КоличествоНепроверенных > 0
		Или КоличествоОтложенных > 0
		Или КоличествоСтрокНеМаркированнойОтсутствует > 0 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("КоличествоНепроверенных",                   КоличествоНепроверенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоОтложенных",                      КоличествоОтложенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоВсего",                           КоличествоВсего);
		ПараметрыОткрытияФормы.Вставить("КоличествоСтрокНеМаркированнойВсего",       КоличествоСтрокНеМаркированнойВсего);
		ПараметрыОткрытияФормы.Вставить("КоличествоСтрокНеМаркированнойОтсутствует", КоличествоСтрокНеМаркированнойОтсутствует);
		
		ОписаниеОповещенияПослеОтветаНаВопрос = Новый ОписаниеОповещения("ОтветНаВопросПриЗавершенииПроверки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ВопросПередСохранениемРезультатовПроверки",
		             ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,,
		             ОписаниеОповещенияПослеОтветаНаВопрос, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПересчитатьХешСуммыВсехУпаковок();
		Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Есть упаковки, которые требуют перемаркировки.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;

		ЗавершитьПроверку(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискНечитаемойАкцизнойМарки(Команда)
	
	ОповещениеОЗакрытииПоискаНечитаемойАкцизнойМарки = Новый ОписаниеОповещения("ПоискНечитаемойАкцизнойМаркиПослеЗакрытия", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПоискНесчитываемойАкцизнойМарки",,ЭтотОбъект,,,,
	             ОповещениеОЗакрытииПоискаНечитаемойАкцизнойМарки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСУпаковками

&НаКлиенте
Процедура ДобавитьМаркированнуюУпаковку(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	
	ОповещениеПослеГенерацииШтрихкодаУпаковки = Новый ОписаниеОповещения("ПослеГенерацииШтрихкодаДляНовойУпаковки", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ПараметрыОткрытияФормы, ЭтотОбъект,,,,
	             ОповещениеПослеГенерацииШтрихкодаУпаковки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркироватьУпаковку(Команда)
	
	СтрокаСУпаковкойДляПеремаркировки = СтрокаСУпаковкойДляПеремаркировки();
	
	Если СтрокаСУпаковкойДляПеремаркировки = Неопределено Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'Спозиционируйтесь на упаковке, которую хотите перемаркировать.'"));
		Возврат;
		
	КонецЕсли;
	
	ДанныеУпаковки = ДанныеУпаковкиДляПеремаркировки(СтрокаСУпаковкойДляПеремаркировки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаСУпаковкойДляПеремаркировки.ПолучитьИдентификатор());
	
	ОповещениеПослеПеремаркировкиУпаковки = Новый ОписаниеОповещения("ПослеПеремаркировкиУпаковки",
	                                                                 ЭтотОбъект, 
	                                                                 ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ДанныеУпаковки, ЭтотОбъект,,,,
	             ОповещениеПослеПеремаркировкиУпаковки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискНечитаемойАкцизнойМарки

&НаКлиенте
Процедура ПоискНечитаемойАкцизнойМаркиПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		ДанныеШтрихкода = Новый Структура;
		ДанныеШтрихкода.Вставить("Штрихкод", Результат);
		ДанныеШтрихкода.Вставить("Количество", 1);
		
		АкцизныеМаркиЕГАИСКлиент.ОбработатьДанныеШтрихкода(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект),
		                                                   ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканированияАкцизныхМарок());
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СоответствиеШтрихкодовСтрокДереваКлиент() Экспорт
	
	Возврат СоответствиеШтрихкодовСтрокДерева;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура СкрытьПроверенные(Команда)
	
	СкрытьПроверенные = Не СкрытьПроверенные;
	Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = СкрытьПроверенные;
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенныеНаСервере();
	Иначе
		ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьПризнакУстановкиОтбораВДереве(Форма)
	
	Если Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0 Тогда
		Форма.УстановленОтборТребуетсяПеремаркировать = Ложь;
	КонецЕсли;
	
	Форма.УстановленОтбор = (Форма.СкрытьПроверенные Или Форма.УстановленОтборТребуетсяПеремаркировать);

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеНоменклатурыЕГАИСКлиентПереопределяемый.ПоказатьВводШтрихкода(
		Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуЗаново(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещенияПослеОтвета = Новый ОписаниеОповещения("ПослеВопросаОНачалеПроверкиЗаново", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Результаты проверки будут очищены. Продолжить?'");
	
	ПоказатьВопрос(ОписаниеОповещенияПослеОтвета, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаСтатуса

&НаКлиенте
Процедура УстановитьСтатусПроверкиВНаличии(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиНеПроверялась(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтложена(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтсутствует(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует"));
	
КонецПроцедуры

#КонецОбласти

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаОтбора

&НаСервере
Процедура СкрытьПроверенныеНаСервере()

	Если УстановленОтборТребуетсяПеремаркировать Тогда
		
		УстановленОтборТребуетсяПеремаркировать = Ложь;
		ОтобразитьИнформациюОНеобходимостиПеремаркировки();
		
	КонецЕсли;
	
	Если СкрытьПроверенные Тогда
	
		СтрокиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			СоответствуетОтбору = Ложь;
			СкрытьПроверенныеВСтрокеДерева(СтрокаДерева, СоответствуетОтбору);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = СкрытьПроверенные;
	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура СкрытьПроверенныеВСтрокеДерева(Знач СтрокаДерева, СоответствуетОтбору)

	Если ТипЗнч(СтрокаДерева) = Тип("Число") Тогда
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(СтрокаДерева);
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();

	ТекущаяСтрокаСоотвествуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		СкрытьПроверенныеВСтрокеДерева(ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоотвествуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ТекущаяСтрокаСоотвествуетОтбору Тогда
		
		ТекущаяСтрокаСоотвествуетОтбору = СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии")
		                              И СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась");
		
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоотвествуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеОтборуПриИзмененииСтроки(СтрокаДерева)
	
	Если Не СкрытьПроверенные Тогда
		Возврат;
	КонецЕсли;
	
	СоответствуетОтбору = Ложь;
	
	СкрытьПроверенныеВСтрокеДерева(СтрокаДерева.ПолучитьИдентификатор(), СоответствуетОтбору);
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			РодительскаяСтрока.НеСоответствуетОтбору = Истина;
			Если Не ПодчиненнаяСтрока.НеСоответствуетОтбору Тогда
				РодительскаяСтрока.НеСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатуса

&НаКлиенте
Процедура УстановитьСтатусДляВыделенныхСтрок(ВыделенныеСтроки, НовыйСтатус)
	
	КоличествоКОбработке = ВыделенныеСтроки.Количество();
	КоличествоОбработанныхСтрок = 0;
	МассивУпаковокСИзменившимсяСоставом = Новый Массив;
	
	Для Каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = НовыйСтатус Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда
			
			Если Не УстановкаСтатусаОтсутствуетВозможна(ДанныеСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			УстановитьСтатусОтсутствуетДляПодчиненных(ДанныеСтроки);
			
			ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(ДанныеСтроки, МассивУпаковокСИзменившимсяСоставом);
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ДанныеСтроки, -1);
			
		Иначе
			
			РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
			Если РодительскаяСтрока <> Неопределено 
				И РодительскаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда
				
				ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(ДанныеСтроки, МассивУпаковокСИзменившимсяСоставом);
				ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ДанныеСтроки, +1);
				
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			
		КонецЕсли;
		
		УстановитьИндексКартинкиСтатусаПроверки(ДанныеСтроки);
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ДанныеСтроки);
		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
	КонецЦикла;
	
	Если СкрытьПроверенные 
		И КоличествоОбработанныхСтрок > 0 Тогда
		СкрытьПроверенныеНаСервере();
	КонецЕсли;
	
	Если МассивУпаковокСИзменившимсяСоставом.Количество() > 0
		Или ТаблицаИзмененийАлкогольнойПродукции.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивУпаковокСИзменившимсяСоставом, Истина);
	КонецЕсли;
	
	ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанныхСтрок, КоличествоКОбработке);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляПодчиненных(СтрокаДерева)
	 
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляСтрокиДерева(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена") Тогда
		СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует");
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева, -1);
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные)
	
	УстановкаВозможна = Истина;
	
	Для Каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ПодчиненнаяСтрока) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьСтрокуКакНайденную(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии")
		Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии");
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтрокуКакОтложенную(СтрокаДерева)

	СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена");
	СтрокаДерева.НомерСтикераОтложено = СтрШаблон(НСтр("ru = 'под номером - %1'"), СледующийСтикерОтложено);
	СледующийСтикерОтложено = СледующийСтикерОтложено + 1;
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанных, КоличествоВсего)

	ШаблонЗаголовкаОбработано   = НСтр("ru='Статус проверки ""%1"" установлен'");
	ШаблонСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке строк установлен статус проверки ""%3""'");
	ШаблонЗаголовкаНеОбработано = НСтр("ru='Статус проверки ""%1"" не установлен'");
	ШаблонСообщенияНеОбработано = НСтр("ru='Статус проверки ""%1"" не установлен ни для одной строки.'");;
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаОбработано, НовыйСтатус);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияОбработано,
		                           КоличествоОбработанных,
		                           КоличествоВсего,
		                           НовыйСтатус);
		
	Иначе
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаНеОбработано, НовыйСтатус);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияНеОбработано, НовыйСтатус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетИтогов

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции)
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Истина);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхБутылок       = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
			
		КонецЕсли;
		
		Если ПересчитыватьПодчиненные Тогда
		
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
		
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхБутылок  = СтрокаДерева.КоличествоПодчиненныхБутылок + 1;
			
		Иначе
			
			СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоПодчиненныхБутылок       = СтрокаДерева.КоличествоПодчиненныхБутылок       + ПодчиненнаяСтрока.КоличествоПодчиненныхБутылок ;
		СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
		
		СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
		СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
		СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
		СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
		СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхБутылок;

	
	СтрокаДерева.ВсяУпаковкаПроверена = Не СтрокаДерева.НеСодержитсяВДанныхДокумента
	                                    И (СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхБутылок = СтрокаДерева.КоличествоПодчиненныхВНаличии)
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки");
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	ИнтеграцияЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева)
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительскаяСтрока, Ложь);
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма, ТекущиеДанные)

	Элементы = Форма.Элементы;
	
	Если ТекущиеДанные = Неопределено
		Или Не ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		Форма.ВыводимоеПредставлениеПроверкиСодержимого = "";
		Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхАвто;
		
	Иначе
		
		Форма.ВыводимоеПредставлениеПроверкиСодержимого = ТекущиеДанные.ПредставлениеПроверкиПодчиненных;
		
		Если ТекущиеДанные.КоличествоПодчиненныхОтсутствует > 0 Тогда
			
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхКрасный;
			
		ИначеЕсли ТекущиеДанные.КоличествоПодчиненныхОтложено > 0 Тогда
		
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхЖелтый;
			
		Иначе
			
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхАвто;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОпределениеТипаУпаковки

&НаСервере
Процедура ОпределитьТипыВсехУпаковок()
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ОпределитьТипУпаковки(СтрокаДерева, Истина);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТипУпаковки(СтрокаДерева, ВключаяПодчиненные)
	
	АлкогольнаяПродукцияУпаковки = Новый Массив;
	НоменклатураУпаковки         = Новый Массив;
	ХарактеристикаУпаковки       = Новый Массив;
	Серии                        = Новый Массив;
	Справки2                     = Новый Массив;
	
	ВУпаковкеРазныеСерии                = Ложь;
	ВУпаковкеРазнаяНоменклатура         = Ложь;
	ВУпаковкеРазныеХарактеристики       = Ложь;
	ВУпаковкеРазнаяАлкогольнаяПродукция = Ложь;
	ВУпаковкеРазныеСправки2             = Ложь;
	
	ВсеСправки2Указаны           = Истина;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			Если ВключаяПодчиненные Тогда
				
				ОпределитьТипУпаковки(ПодчиненнаяСтрока, ВключаяПодчиненные);
				
			КонецЕсли;
			
			Если Не ПодчиненнаяСтрока.ВсеСправки2Указаны Тогда
				ВсеСправки2Указаны = Ложь;
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Справка2) Тогда
				
				ВсеСправки2Указаны = Ложь;
				ПодчиненнаяСтрока.ВсеСправки2Указаны = Ложь;
				
			Иначе
				
				ПодчиненнаяСтрока.ВсеСправки2Указаны = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не РежимПодбораСуществующихУпаковок 
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Справка2", СтрокаДерева.Справка2);
			
			НайденныеСтроки = Справки2СопоставленнаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаДерева.Номенклатура   = НайденныеСтроки.Номенклатура;
				СтрокаДерева.Характеристика = НайденныеСтроки.Характеристика;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазнаяАлкогольнаяПродукция Тогда
			ВУпаковкеРазнаяАлкогольнаяПродукция = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазнаяНоменклатура Тогда
			ВУпаковкеРазнаяНоменклатура = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеХарактеристики Тогда
			ВУпаковкеРазныеХарактеристики = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеСправки2 Тогда
			ВУпаковкеРазныеСправки2 = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеСерии Тогда
			ВУпаковкеРазныеСерии = Истина;
		КонецЕсли;
		
		ДобавитьУникальноеЗначениеВМассив(АлкогольнаяПродукцияУпаковки, ПодчиненнаяСтрока.АлкогольнаяПродукция);
		ДобавитьУникальноеЗначениеВМассив(НоменклатураУпаковки,         ПодчиненнаяСтрока.Номенклатура);
		ДобавитьУникальноеЗначениеВМассив(ХарактеристикаУпаковки,       ПодчиненнаяСтрока.Характеристика);
		ДобавитьУникальноеЗначениеВМассив(Справки2,                     ПодчиненнаяСтрока.Справка2);
		ДобавитьУникальноеЗначениеВМассив(Серии,                        ПодчиненнаяСтрока.Серия);
		
	КонецЦикла;
	
	СтрокаДерева.ВсеСправки2Указаны = ВсеСправки2Указаны;
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева, 
	                              "АлкогольнаяПродукция", 
	                              "ВУпаковкеРазнаяАлкогольнаяПродукция", 
	                              АлкогольнаяПродукцияУпаковки,
	                              ВУпаковкеРазнаяАлкогольнаяПродукция);
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева, 
	                              "Номенклатура", 
	                              "ВУпаковкеРазнаяНоменклатура", 
	                              НоменклатураУпаковки,
	                              ВУпаковкеРазнаяНоменклатура);
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева, 
	                              "Характеристика", 
	                              "ВУпаковкеРазныеХарактеристики", 
	                              ХарактеристикаУпаковки,
	                              ВУпаковкеРазныеХарактеристики);
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева, 
	                              "Справка2", 
	                              "ВУпаковкеРазныеСправки2", 
	                              Справки2,
	                              ВУпаковкеРазныеСправки2);
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева, 
	                              "Серия", 
	                              "ВУпаковкеРазныеСерии", 
	                              Серии,
	                              ВУпаковкеРазныеСерии);
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	Иначе
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьУникальноеЗначениеВМассив(Массив, Значение)
	
	Если Массив.Найти(Значение) = Неопределено Тогда
		Массив.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеДляУпаковки(СтрокаДерева,
	                                    ИмяКолонкиЗначения, 
	                                    ИмяКолонкиЕстьРазличные, 
	                                    МассивЗначений, 
	                                    ЕстьРазличныеБезусловно)
	
	Если ЕстьРазличныеБезусловно Тогда
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Истина;
		
	ИначеЕсли МассивЗначений.Количество() = 0 Тогда
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Ложь;
		
	ИначеЕсли МассивЗначений.Количество() = 1 Тогда
		
		СтрокаДерева[ИмяКолонкиЗначения]      = МассивЗначений[0];
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Ложь;
		
	Иначе
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТипУпаковкиПриИзмененииСтроки(ИдентификаторИзмененойСтроки)

	ИзмененнаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		
		ОпределитьТипУпаковки(ИзмененнаяСтрока, Ложь);
		
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		ОпределитьТипУпаковки(РодительИзмененнойСтроки, Ложь);
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТипУпаковкиДляМассиваСтрок(МассивСтрок)
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(СтрокаМассива);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеНоменклатурыПоСправкам2Документа(МассивСправок2, ПроверяемыйДокумент)

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТипУпаковки",    Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
	СтруктураВозврата.Вставить("Номенклатура",   Неопределено);
	СтруктураВозврата.Вставить("Характеристика", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ТТНВходящаяЕГАИСТовары.Номенклатура   КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ПроверяемыйДокумент
	|	И ТТНВходящаяЕГАИСТовары.Справка2 В(&МассивСправок2)";
	
	Запрос.УстановитьПараметр("МассивСправок2",      МассивСправок2);
	Запрос.УстановитьПараметр("ПроверяемыйДокумент", ПроверяемыйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		
		СтруктураВозврата.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		
	Иначе
		
		Если Выборка.Следующий() Тогда
			
			СтруктураВозврата.Номенклатура =  Выборка.Номенклатура;
			СтруктураВозврата.Характеристика = Выборка.Характеристика;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции 

#КонецОбласти

#Область ХешСуммы

&НаСервере
Процедура ПересчитатьХешСуммыВсехУпаковок(СтрокаСУпаковкой = Неопределено)

	Если НЕ ПроверятьНеобходимостьПеремаркировки Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаХешСумм = ПустаяТаблицаХешСумм();
	Если СтрокаСУпаковкой = Неопределено Тогда
		КоллекцияСтрок = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	Иначе
		КоллекцияСтрок = СтрокаСУпаковкой.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьНеобходимостьПеремаркировки(ТаблицаХешСумм, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, ВключаяПодчиненные)
	
	ДанныеДляРасчетаХешСуммы = Новый СписокЗначений;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			Если ВключаяПодчиненные Тогда
				РассчитатьХешСуммыУпаковки(ПодчиненнаяСтрока, ТаблицаХешСумм, ВключаяПодчиненные);
			КонецЕсли;
			
			ДанныеДляРасчетаХешСуммы.Добавить(ПодчиненнаяСтрока.ХешСумма);
			
		Иначе
			
			ДанныеДляРасчетаХешСуммы.Добавить(ПодчиненнаяСтрока.ЗначениеШтрихкода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
	
	СтрокаТаблицыХешСуммы = ТаблицаХешСумм.Добавить();
	СтрокаТаблицыХешСуммы.ХешСумма               = СтрокаДерева.ХешСумма;
	СтрокаТаблицыХешСуммы.ЗначениеШтрихкода = СтрокаДерева.ЗначениеШтрихкода;
	СтрокаТаблицыХешСуммы.ИдентификаторВДереве   = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Функция ПустаяТаблицаХешСумм()

	ТаблицаХешСумм = Новый ТаблицаЗначений;
	ТаблицаХешСумм.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаХешСумм.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаХешСумм.Колонки.Добавить("ИдентификаторВДереве", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат ТаблицаХешСумм;

КонецФункции

#КонецОбласти

#Область Перемаркировка

&НаКлиенте
Процедура ПослеГенерацииШтрихкодаДляНовойУпаковки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьКорректностьШтрихкодаПриДобавлении(Результат.Штрихкод, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	ДобавитьНовуюУпаковку(Результат.Штрихкод, Результат.ТипУпаковки);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПеремаркировкиУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьКорректностьШтрихкодаПриДобавлении(Результат.Штрихкод, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	ПеремаркироватьУпаковку(Результат.Штрихкод, ДополнительныеПараметры.ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьШтрихкодаПриДобавлении(Штрихкод, Отказ)

	Если ПустаяСтрока(Штрихкод) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Упаковке не может быть назначен пустой Штрихкод.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(Штрихкод);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Штрихкодом %1 уже маркирована другая упаковка. Маркируйте данную упаковку другим штрихкодом.'"),
		                           ИнтеграцияЕГАИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод));
		
		ПоказатьПредупреждение(,ТекстСообщения); 
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеремаркироватьУпаковку(Штрихкод, ИдентификаторСтрокиУпаковки)
	
	СтрокаСУпаковкой = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиУпаковки);
	
	Если СтрокаСУпаковкой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьШтрихКодВСпискахУпаковок(ЭтотОбъект,СтрокаСУпаковкой.ЗначениеШтрихкода, Штрихкод);
	СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаСУпаковкой.ЗначениеШтрихкода);
	СтрокаСУпаковкой.ЗначениеШтрихкода = Штрихкод;
	СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаСУпаковкой.ЗначениеШтрихкода, ИдентификаторСтрокиУпаковки);
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаСУпаковкой);
	
	ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтрокиУпаковки, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьШтрихКодВСпискахУпаковок(Форма, СтарыйШтрихкод, НовыйШтрихкод)

	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.ДобавленныеУпаковки);
	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.ДоступныеДляПроверкиУпаковки);
	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.УпаковкиДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, СписокШтрихкодов)
	
	НайденныйЭлемент = СписокШтрихкодов.НайтиПоЗначению(СтарыйШтрихкод);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		
		СписокШтрихкодов.Удалить(НайденныйЭлемент);
		СписокШтрихКодов.Добавить(НовыйШтрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтрокиУпаковки, ПроверятьТипУпаковки)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторСтрокиУпаковки);
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		ОпределитьТипУпаковкиПриИзмененииСтроки(ИдентификаторСтрокиУпаковки);
	КонецЕсли;
	
	ОбработатьТаблицуИзмененияАлкогольнойПродукции();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрок, ПроверятьТипУпаковки)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		ПроверитьНеобходимостьМаркировкиДляМассиваСтрок(МассивСтрок);
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		ОпределитьТипУпаковкиДляМассиваСтрок(МассивСтрок);
	КонецЕсли;

	ОбработатьТаблицуИзмененияАлкогольнойПродукции();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьПеремаркировки(ТаблицаХешСумм, ЭтоВыборочнаяПроверка)
	
	Если ТаблицаХешСумм.Количество() = 0 Тогда
		ОтобразитьИнформациюОНеобходимостиПеремаркировки();
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоВыборочнаяПроверка Тогда
		
		КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаХешСумм.ХешСумма               КАК ХешСумма,
	|	ТаблицаХешСумм.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ТаблицаХешСумм.ИдентификаторВДереве   КАК ИдентификаторВДереве
	|ПОМЕСТИТЬ ПроверяемыеУпаковки
	|ИЗ
	|	&ТаблицаХешСумм КАК ТаблицаХешСумм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеУпаковки.ИдентификаторВДереве КАК ИдентификаторВДереве,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ТребуетсяПеремаркировка
	|ИЗ
	|	ПроверяемыеУпаковки КАК ПроверяемыеУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ПроверяемыеУпаковки.ЗначениеШтрихкода = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|			И ПроверяемыеУпаковки.ХешСумма <> ШтрихкодыУпаковокТоваров.ХешСумма
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеУпаковки.ИдентификаторВДереве";
		
	Запрос.УстановитьПараметр("ТаблицаХешСумм", ТаблицаХешСумм);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Выборка.ИдентификаторВДереве);
		
		Если СтрокаДерева <> Неопределено Тогда
			
			Если ЭтоВыборочнаяПроверка Тогда
				
				Если СтрокаДерева.ТребуетсяПеремаркировка 
					И Не Выборка.ТребуетсяПеремаркировка Тогда
					
					КоличествоУпаковокКоторыеНеобходимоПеремаркировать = КоличествоУпаковокКоторыеНеобходимоПеремаркировать - 1; 
					
				ИначеЕсли Не СтрокаДерева.ТребуетсяПеремаркировка 
					И Выборка.ТребуетсяПеремаркировка Тогда
					
					КоличествоУпаковокКоторыеНеобходимоПеремаркировать = КоличествоУпаковокКоторыеНеобходимоПеремаркировать + 1;
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.ТребуетсяПеремаркировка Тогда
					
					КоличествоУпаковокКоторыеНеобходимоПеремаркировать = КоличествоУпаковокКоторыеНеобходимоПеремаркировать + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДерева.ТребуетсяПеремаркировка = Выборка.ТребуетсяПеремаркировка;
			СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
			Если ЭтоВыборочнаяПроверка Тогда
				ПроверитьСоответствиеОтборуТребуетсяМаркировкаПриИзмененииСтроки(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ОтобразитьИнформациюОНеобходимостиПеремаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюОНеобходимостиПеремаркировки()
	
	Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		
		ТекстТребуется = СтрШаблон(НСтр("ru = 'Требуется перемаркировка упаковок - %1.'"), КоличествоУпаковокКоторыеНеобходимоПеремаркировать);
		СтрокаТребуется = Новый ФорматированнаяСтрока(ТекстТребуется,, ЦветаСтиля.ЦветТекстаТребуетВниманияГИСМ);
		
		Если УстановленОтборТребуетсяПеремаркировать Тогда
			ТескстОтбор = НСтр("ru = '(снять отбор)'");
		Иначе
			ТескстОтбор = НСтр("ru = '(установить отбор)'");
		КонецЕсли;
		
		СтрокаОтбор = Новый ФорматированнаяСтрока(ТескстОтбор,, ЦветаСтиля.ЦветГиперссылкиГИСМ,, "ИзменитьОтборТребуетсяПеремаркировка");
		
		Элементы.ДекорацияИнформацияТребуетсяПеремаркировка.Заголовок = 
			Новый ФорматированнаяСтрока(СтрокаТребуется, " ", СтрокаОтбор);
			
		Элементы.СтраницыПеремаркировка.ТекущаяСтраница = Элементы.СтраницаТребуетсяПеремаркировка;
		
	Иначе
		
		Элементы.СтраницыПеремаркировка.ТекущаяСтраница = Элементы.СтраницаНеТребуетсяПеремаркировка;
		
	КонецЕсли;
	
	ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки = Ложь;
	
	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТребующимПеремаркировкиНаСервере()
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенные = Ложь;
		Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = Ложь;
	КонецЕсли;
		
	
	СтрокиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СоответствуетОтбору = Ложь;
		УстановитьОтборПоТребующимПеремаркировкиВСтрокеДерева(СтрокаДерева, СоответствуетОтбору);
		
	КонецЦикла;
	
	ОтобразитьИнформациюОНеобходимостиПеремаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеОтборуТребуетсяМаркировкаПриИзмененииСтроки(СтрокаДерева)
	
	Если Не УстановленОтборТребуетсяПеремаркировать Тогда
		Возврат;
	КонецЕсли;
	
	СоответствуетОтбору = Ложь;
	
	УстановитьОтборПоТребующимПеремаркировкиВСтрокеДерева(СтрокаДерева.ПолучитьИдентификатор(), СоответствуетОтбору);
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			РодительскаяСтрока.НеСоответствуетОтбору = Истина;
			Если Не ПодчиненнаяСтрока.НеСоответствуетОтбору Тогда
				РодительскаяСтрока.НеСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТребующимПеремаркировкиВСтрокеДерева(Знач СтрокаДерева, СоответствуетОтбору)

	Если ТипЗнч(СтрокаДерева) = Тип("Число") Тогда
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(СтрокаДерева);
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();

	ТекущаяСтрокаСоотвествуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		УстановитьОтборПоТребующимПеремаркировкиВСтрокеДерева(ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоотвествуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ТекущаяСтрокаСоотвествуетОтбору Тогда
		
		ТекущаяСтрокаСоотвествуетОтбору = СтрокаДерева.ТребуетсяПеремаркировка;
		
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоотвествуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторИзмененойСтроки)

	ИзмененнаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаХешСумм = ПустаяТаблицаХешСумм();
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		
		РассчитатьХешСуммыУпаковки(ИзмененнаяСтрока, ТаблицаХешСумм, Ложь);
		
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		РассчитатьХешСуммыУпаковки(РодительИзмененнойСтроки, ТаблицаХешСумм, Ложь);
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
	ПроверитьНеобходимостьПеремаркировки(ТаблицаХешСумм, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьМаркировкиДляМассиваСтрок(МассивСтрок)
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(СтрокаМассива);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаСУпаковкойДляПеремаркировки()
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Спозиционируйтесь на упаковке, которую хотите перемаркировать.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		Возврат ТекущиеДанные;
		
	Иначе
		
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(РодительскаяСтрока.ТипУпаковки) Тогда
			
			Возврат РодительскаяСтрока;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДанныеУпаковкиДляПеремаркировки(СтрокаДерева)
	
	ДанныеДляПеремаркировки = Новый Структура;
	ДанныеДляПеремаркировки.Вставить("ТипУпаковки",               СтрокаДерева.ТипУпаковки);
	ДанныеДляПеремаркировки.Вставить("Штрихкод",                  СтрокаДерева.ЗначениеШтрихкода);
	ДанныеДляПеремаркировки.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	
	ДанныеДляПеремаркировки.Вставить("КоличествоВложенныхЕдиниц", 0);
	ДанныеДляПеремаркировки.Вставить("Характеристика",            ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ДанныеДляПеремаркировки.Вставить("Номенклатура",              ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка") Тогда
		
		НоменклатураОпределена = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаДерева.Справка2) Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Справка2", СтрокаДерева.Справка2);
			
			НайденныеСтроки = Справки2СопоставленнаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ДанныеДляПеремаркировки.Номенклатура   = НайденныеСтроки[0].Номенклатура;
				ДанныеДляПеремаркировки.Характеристика = НайденныеСтроки[0].Характеристика;
				
				НоменклатураОпределена = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоменклатураОпределена Тогда
			
			Для Каждого СтрокаСодержимого Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если СтрокаСодержимого.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
					
					ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц = ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц + 1;
					
				КонецЕсли;
				
			КонецЦикла
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляПеремаркировки;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(СтрокиДерева, КоличествоТребующихПеремаркировки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ТребуетсяПеремаркировка Тогда
			КоличествоТребующихПеремаркировки = КоличествоТребующихПеремаркировки + 1;
		КонецЕсли;
		
		Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда 
			ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), КоличествоТребующихПеремаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(СтрокаДерева, МассивУпаковокСИзменившимсяСоставом)
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();

	Если СтрокаРодитель <> Неопределено
		И ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(СтрокаРодитель.ТипУпаковки) Тогда
		
		ИденитификаторСтрокиРодителя = СтрокаРодитель.ПолучитьИдентификатор();
		
		Если МассивУпаковокСИзменившимсяСоставом.Найти(ИденитификаторСтрокиРодителя) = Неопределено Тогда
			
			МассивУпаковокСИзменившимсяСоставом.Добавить(ИденитификаторСтрокиРодителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеПолейДереваМаркированнойПродукции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 5;
	
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  0;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда

		СтрокаДерева.ИндексКартинкиСтатусПроверки =  1;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  2;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  3;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  4;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева)
	
	ВсегоПодчиненных = СтрокаДерева.КоличествоПодчиненныхБутылок + СтрокаДерева.КоличествоПодчиненныхУпаковок;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является упаковкой>'");
		
	ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки")
		Или СтрокаДерева.НеСодержитсяВДанныхДокумента Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>'");
	
	ИначеЕсли ВсегоПодчиненных = 0 Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустая упаковка>'");
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтсутствует = 0
		И СтрокаДерева.КоличествоПодчиненныхОтложено = 0 
		И СтрокаДерева.КоличествоПодчиненныхНеЧислилось = 0 Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2'"),
		                                                 СтрокаДерева.КоличествоПодчиненныхВНаличии,
		                                                 ВсегоПодчиненных);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтложено = 0
		      И СтрокаДерева.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3'"),
		                                                 КоличествоПроверено,
		                                                 ВсегоПодчиненных,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтсутствует);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтсутствует = 0
		      И СтрокаДерева.КоличествоПодчиненныхНеЧислилось = 0 Тогда  
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтложено;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3'"),
		                                                 КоличествоПроверено,
		                                                 ВсегоПодчиненных,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтложено);
		 
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтложено = 0
		      И СтрокаДерева.КоличествоПодчиненныхОтсутствует = 0 Тогда
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхНеЧислилось;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, не числилось - %3'"),
		                                                 КоличествоПроверено,
		                                                 ВсегоПодчиненных,
		                                                 СтрокаДерева.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтложено = 0 Тогда 
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтсутствует 
		                    + СтрокаДерева.КоличествоПодчиненныхНеЧислилось;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ВсегоПодчиненных,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтсутствует,
		                                                 СтрокаДерева.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтсутствует = 0 Тогда 
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтложено 
		                    + СтрокаДерева.КоличествоПодчиненныхНеЧислилось;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ВсегоПодчиненных,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтложено,
		                                                 СтрокаДерева.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтложено 
		                    + СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, отсутствует - %4'"),
		                                                 КоличествоПроверено,
		                                                 ВсегоПодчиненных,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтложено,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтсутствует);
		
	Иначе
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтложено 
		                    + СтрокаДерева.КоличествоПодчиненныхНеЧислилось + СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5'"),
		                                                 КоличествоПроверено,
		                                                 ВсегоПодчиненных,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтсутствует,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтложено,
		                                                 СтрокаДерева.КоличествоПодчиненныхНеЧислилось);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева)

	ВсегоПодчиненных = СтрокаДерева.КоличествоПодчиненныхБутылок + СтрокаДерева.КоличествоПодчиненныхУпаковок;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = Строка(СтрокаДерева.АлкогольнаяПродукция);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхБутылок = 0
		И СтрокаДерева.КоличествоПодчиненныхУпаковок = 0 Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>'");
		
		Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
			
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>'");
			
		КонецЕсли;
	
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхБутылок = 0 Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = 'упаковок - %1'"), СтрокаДерева.КоличествоПодчиненныхУпаковок);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхУпаковок = 0 Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = 'бутылок -  %1'"), СтрокаДерева.КоличествоПодчиненныхБутылок);
		
	Иначе 
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = 'упаковок - %1, бутылок -  %2'"),
		                  СтрокаДерева.КоличествоПодчиненныхУпаковок,
		                  СтрокаДерева.КоличествоПодчиненныхБутылок);
		
	КонецЕсли;
	
	Если СтрокаДерева.ТребуетсяПеремаркировка Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '(требуется перемаркировка)'") + " " 
		                                               + СтрокаДерева.ПредставлениеСодержимоеУпаковки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаДерева)

	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
		СтрокаДерева.Представление = НСтр("ru = 'Бутылки без упаковки'");
	ИначеЕсли ПустаяСтрока(СтрокаДерева.ЗначениеШтрихкода) 
		И (СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
		Или СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")) Тогда
		
		СтрокаДерева.Представление = НСтр("ru = '<не маркирована>'");
		
	Иначе
		СтрокаДерева.Представление = СтрокаДерева.ЗначениеШтрихкода;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НачальноеЗаполнение

&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	ПроверкаНеПоДокументу                                  = Параметры.ПроверкаНеПоДокументу;
	ПроверяемыйДокумент                                    = Параметры.ПроверяемыйДокумент;
	РежимПодбораСуществующихУпаковок                       = Параметры.РежимПодбораСуществующихУпаковок;
	РедактированиеФормыНедоступно                          = Параметры.РедактированиеФормыНедоступно;
	ОрганизацияЕГАИС                                       = Параметры.ОрганизацияЕГАИС;
	РежимПросмотра                                         = Параметры.РежимПросмотра;
	КонтролироватьСканируемуюПродукциюПоДокументуОснованию = Параметры.КонтролироватьСканируемуюПродукциюПоДокументуОснованию;
	ПриЗавершенииСохранятьРезультатыПроверки               = Параметры.ПриЗавершенииСохранятьРезультатыПроверки;
	ПроверятьНеобходимостьПеремаркировки                   = Параметры.ПроверятьНеобходимостьПеремаркировки;
	НачальныйСтатусПроверки                                = ?(ЗначениеЗаполнено(Параметры.НачальныйСтатусПроверки),
	                                                           Параметры.НачальныйСтатусПроверки, 
	                                                           Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась);
	
	Если Не ПроверкаНеПоДокументу
		И Не ЗначениеЗаполнено(ПроверяемыйДокумент) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан документ для проверки.'"),,,,Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана организация ЕГАИС.'"),,,,Отказ);
		
	КонецЕсли;
	
	Если Не ПроверкаНеПоДокументу
		И ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС")
		И ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.АктСписанияЕГАИС")
		И ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.ТТНВходящаяЕГАИС")
		И ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
		И ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.ЧекЕГАИС")
		И ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В обработку передан документ некорректного типа.'"),,,,Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВспомогательныеТаблицыПоДаннымДокумента();
	ЗагрузитьАлкогольнуюПродукцию();
	УправлениеЭлементамиФормыПриСоздании();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	Если РежимПросмотра Тогда
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок                                  = НСтр("ru = 'Результаты подбора алкогольной продукции'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'");
		Иначе
			Заголовок                                  = НСтр("ru = 'Результаты проверки алкогольной продукции'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документе'");
		КонецЕсли;
		
		Элементы.ФормаПеренестиВДокумент.Видимость                                  = Ложь;
		Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость            = Ложь;
		Элементы.ГруппаМаркируемаяКоманднаяПанельТребуетсяПеремаркировать.Видимость = Ложь;
		Элементы.ДеревоМаркированнойПродукцииНачатьПроверкуЗаново.Видимость         = Ложь;
		Элементы.СтраницаНеМаркируемая.ТолькоПросмотр                               = Истина;
		Элементы.СтраницаПодобраннаяПродукция.ТолькоПросмотр                        = Истина;
		Элементы.ПоискПоШтрихкодуНеМаркируемая.Видимость                            = Ложь;
		Элементы.ДеревоМаркированнойПродукцииУказатьШтрихкод.Видимость              = Ложь;
		Элементы.ПоискПоШтрихкодуНеМаркируемая.Видимость                            = Ложь;
		Элементы.ПоискПоШтрихкодуПодобранная.Видимость                              = Ложь;
		Элементы.АлкогольнаяПродукцияКОпределениюСправок2Удалить.Видимость          = Ложь;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок                                  = НСтр("ru = 'Подбор и проверка алкогольной продукции'");
			Элементы.ФормаПеренестиВДокумент.Заголовок = НСтр("ru = 'Завершить подбор'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'")
		КонецЕсли;

		Если ПроверкаНеПоДокументу Тогда
			
			Элементы.ДеревоМаркированнойПродукцииНачатьПроверкуЗаново.Видимость = Ложь;
			
		КонецЕсли;
		
		Если ПроверкаНеПоДокументу Тогда
			Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ФормаЗакрыть.Видимость = Ложь;
	
	КонецЕсли;
	
	Если ПроверкаНеПоДокументу Тогда
		
		Элементы.ПроверяемыйДокумент.Видимость = Ложь;
		
	КонецЕсли;
	
	УправлениеВидимостьюСтраницФормы();

КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюСтраницФормы()
	
	ЕстьДанныеВДереве = Ложь;
	СтрокиВерхнегоУровня = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	КоличествоСтрокВерхнегоУровня = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Количество();
	Если КоличествоСтрокВерхнегоУровня > 1 Тогда
		ЕстьДанныеВДереве = Истина;
	ИначеЕсли КоличествоСтрокВерхнегоУровня = 1 Тогда
		ЕдинственнаяСтрока = СтрокиВерхнегоУровня[0];
		Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ЕдинственнаяСтрока) Тогда
			ЕстьДанныеВДереве = Истина;
		ИначеЕсли ЕдинственнаяСтрока.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
			Если ЕдинственнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				ЕстьДанныеВДереве = Истина;
			КонецЕсли;
		Иначе
			ЕстьДанныеВДереве = Истина;
		КонецЕсли;
	КонецЕсли;
	КоличествоВидимыхСтраниц = 0;
	
	Если ПроверкаНеПоДокументу Тогда
		
		ЕстьМаркируемая   = Истина;
		ЕстьНеМаркируемая = Истина;
		
		Элементы.СтраницаМаркируемая.Видимость          = Истина;
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Истина;
		Элементы.СтраницаНеМаркируемая.Видимость        = Ложь;
		
		КоличествоВидимыхСтраниц = 2;
		
	ИначеЕсли РежимПросмотра Тогда
		
		Если ЕстьДанныеВДереве Тогда 
			Элементы.СтраницаМаркируемая.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		Иначе
			Элементы.СтраницаМаркируемая.Видимость = Ложь;
		КонецЕсли;
		
		Если РежимПодбораСуществующихУпаковок Тогда
			
			Элементы.СтраницаНеМаркируемая.Видимость        = Ложь;
			Элементы.СтраницаПодобраннаяПродукция.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
			
		Иначе
			
			Элементы.СтраницаПодобраннаяПродукция.Видимость = Ложь;
			
			Если ТаблицаНеМаркируемойПродукции.Количество() > 0 Тогда
				
				Элементы.СтраницаНеМаркируемая.Видимость = Истина;
				КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
				
			Иначе
				
				Элементы.СтраницаНеМаркируемая.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Не РежимПодбораСуществующихУпаковок Тогда
		
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Ложь;
		
		Если ЕстьДанныеВДереве 
			Или ПулНеизвестныхАкцизныхМарок.Количество() > 0 Тогда
			
			ЕстьМаркируемая   = Истина;
			Элементы.СтраницаМаркируемая.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
			
		Иначе
			
			Элементы.СтраницаМаркируемая.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Ложь;
			
		Если ТаблицаНеМаркируемойПродукции.Количество() > 0 Тогда
			
			ЕстьНеМаркируемая = Истина;
			Элементы.СтраницаНеМаркируемая.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
			
		Иначе
			
			Элементы.СтраницаНеМаркируемая.Видимость = Ложь;
			
		КонецЕсли;
	
	ИначеЕсли КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		
		НаличиеМаркированнойПродукции = ПроверяемыйДокумент.Метаданные().МодульМенеджера.НаличиеМаркируемойПродукции(ПроверяемыйДокумент);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НаличиеМаркированнойПродукции);
		
		Если НаличиеМаркированнойПродукции.ЕстьМаркируемая Тогда
			Элементы.СтраницаМаркируемая.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		Иначе
			Элементы.СтраницаМаркируемая.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.СтраницаНеМаркируемая.Видимость        = Ложь;
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Истина;
		КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		
	Иначе
		
		ЕстьМаркируемая   = Истина;
		ЕстьНеМаркируемая = Истина;
	
		Элементы.СтраницаМаркируемая.Видимость          = Истина;
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Истина;
		Элементы.СтраницаНеМаркируемая.Видимость        = Ложь;
		
		КоличествоВидимыхСтраниц = 2;
		
	КонецЕсли;
	
	Если КоличествоВидимыхСтраниц = 1 Тогда
		
		Элементы.СтраницыПродукция.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьАлкогольнуюПродукцию()
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресПредварительноСохраненныхРезультатовПроверки) Тогда
		ДанныеПроверки = ПолучитьИзВременногоХранилища(Параметры.АдресПредварительноСохраненныхРезультатовПроверки);
	Иначе
		ДанныеПроверки = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПроверки) <> Тип("Структура")
		Или Не ВосстановитьСохраненныеРезультатыПроверки(ДанныеПроверки) Тогда
		
		СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
		ЗагрузитьДанныеДокумента(СоответствиеШтрихкодовСтрокДерева, Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеДокумента(СоответствиеШтрихкодовСтрокДерева, ПомещатьВоВременноеХранилище)
	
	Если ПроверкаНеПоДокументу Тогда
		
		Если ЭтоАдресВременногоХранилища(Параметры.АдресДанныхПроверяемойАлкогольнойПродукции) Тогда
			
			ПроверяемыеДанные = ПолучитьИзВременногоХранилища(Параметры.АдресДанныхПроверяемойАлкогольнойПродукции);
			ЗаполнитьДеревоКОпределениюСправок2(ПроверяемыеДанные.ТаблицаАлкогольнойПродукцииКОпределениюСправок2);
			
			ЗагрузитьДеревоМаркированнойПродукции(ПроверяемыеДанные.ДеревоУпаковок, СоответствиеШтрихкодовСтрокДерева);
			
		Иначе
			
			ДобавленнаяСтрокаБутылкиБезКоробки();
		
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
	
		ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ПроверяемыйДокумент);
		
		ЗагрузитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, СоответствиеШтрихкодовСтрокДерева);
		ЗаполнитьТаблицуПартионнойПродукции(ДанныеПроверяемогоДокумента.ТоварыБезАкцизныхМарок);
		ЗаполнитьПулНеизвестныхАкцизныхМарок();
	
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС")
		Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.АктСписанияЕГАИС")
		Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
		Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ЧекЕГАИС")
		Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
		
		ДанныеПроверяемогоДокумента = Документы[ПроверяемыйДокумент.Метаданные().Имя].ШтрихкодыУпаковок(ПроверяемыйДокумент, Не РедактированиеФормыНедоступно);
		ЗагрузитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, СоответствиеШтрихкодовСтрокДерева);
		
	КонецЕсли;
	
	Если ПомещатьВоВременноеХранилище Тогда
		АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(СоответствиеШтрихкодовСтрокДерева, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДеревоМаркированнойПродукции(ДеревоПоДаннымДокумента, СоответствиеШтрихкодовСтрокДерева)
	
	КоллекцияСтрокПриемника = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	БутылкиБезУпаковкиДобавлены = Ложь;
	
	Для каждого СтрокаПоДаннымДокумента Из ДеревоПоДаннымДокумента.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПоДаннымДокумента, КоллекцияСтрокПриемника, СоответствиеШтрихкодовСтрокДерева);
		
	КонецЦикла;
	
	Если ИдентификаторСтрокиБутылкиБезУпаковки = - 1 Тогда
		
		ДобавленнаяСтрокаБутылкиБезКоробки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, СоответствиеШтрихкодовСтрокДерева)

	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
		
		НоваяСтрока = КоллекцияСтрокПриемника.Вставить(0);
		ИдентификаторСтрокиБутылкиБезУпаковки = НоваяСтрока.ПолучитьИдентификатор();
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		СтрокаБутылкиБезУпаковки = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
		Если СтрокаБутылкиБезУпаковки = Неопределено Тогда
			СтрокаБутылкиБезУпаковки = ДобавленнаяСтрокаБутылкиБезКоробки();
		КонецЕсли;
		
		НоваяСтрока = СтрокаБутылкиБезУпаковки.ПолучитьЭлементы().Добавить();
		НоваяСтрока.СтатусПроверки = НачальныйСтатусПроверки;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.ЗначениеШтрихкода, НоваяСтрока.ПолучитьИдентификатор());
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		УпаковкиДокумента.Добавить(НоваяСтрока.ЗначениеШтрихкода);
	КонецЕсли;
	
	ОпределениеСправок2ПриДобавленииСтроки(ЭтотОбъект, НоваяСтрока);

	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокДобавленнойСтроки, СоответствиеШтрихкодовСтрокДерева);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПартионнойПродукции(ДанныеПартионнойПродукции)
	
	Для Каждого СтрокаТаблицы Из ДанныеПартионнойПродукции Цикл
		
		НоваяСтрока = ТаблицаНеМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КоличествоПоДокументу = СтрокаТаблицы.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПулНеизвестныхАкцизныхМарок()

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2 КАК Справка2,
	|	ДанныеПартионнойПродукции.КоличествоПоДокументу КАК Количество,
	|	ДанныеПартионнойПродукции.КоличествоФактическое КАК КоличествоФактическое
	|ПОМЕСТИТЬ ДанныеПартионнойПродукции
	|ИЗ
	|	&ДанныеПартионнойПродукции КАК ДанныеПартионнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2             КАК Справка2,
	|	СУММА(ДанныеПартионнойПродукции.Количество)    КАК Количество
	|ИЗ
	|	ДанныеПартионнойПродукции КАК ДанныеПартионнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ДанныеПартионнойПродукции.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	ВидыАлкогольнойПродукции.Маркируемый
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2";
	
	Запрос.УстановитьПараметр("ДанныеПартионнойПродукции", ТаблицаНеМаркируемойПродукции.Выгрузить());
	
	ПулНеизвестныхАкцизныхМарок.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ДобавленнаяСтрокаБутылкиБезКоробки()

	НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Вставить(0);
	НоваяСтрока.ТипУпаковки            = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки;
	НоваяСтрока.Представление          = НСтр("ru = 'Бутылки без упаковки'");
	НоваяСтрока.ИндексКартинкиШтрихкод = 2;
	
	ИдентификаторСтрокиБутылкиБезУпаковки = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Процедура ПослеВопросаОНачалеПроверкиЗаново(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ДанныеСопоставленияШтрихкодовСтрокДерева = Новый Соответствие;
		НачатьПроверкуЗановоНаСервере(ДанныеСопоставленияШтрихкодовСтрокДерева);
		СоответствиеШтрихкодовСтрокДерева = ДанныеСопоставленияШтрихкодовСтрокДерева;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьСохраненныеРезультатыПроверки(ДанныеПроверки)
	
	ДеревоМаркированнойПродукцииОбъект = РеквизитФормыВЗначение("ДеревоМаркированнойПродукции");
	ДеревоМаркированнойПродукцииОбъект = ДанныеПроверки.ДеревоМаркированнойПродукции;
	
	Попытка
		ЗначениеВРеквизитФормы(ДеревоМаркированнойПродукцииОбъект, "ДеревоМаркированнойПродукции");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	АлкогольнаяПродукцияКОпределениюСправок2Объект = РеквизитФормыВЗначение("АлкогольнаяПродукцияКОпределениюСправок2");
	АлкогольнаяПродукцияКОпределениюСправок2Объект = ДанныеПроверки.АлкогольнаяПродукцияКОпределениюСправок2;
	
	Попытка
		ЗначениеВРеквизитФормы(АлкогольнаяПродукцияКОпределениюСправок2Объект, "АлкогольнаяПродукцияКОпределениюСправок2");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева);
	
	ПулНеизвестныхАкцизныхМарок.Загрузить(ДанныеПроверки.ПулНеизвестныхАкцизныхМарок);
	ТаблицаНеМаркируемойПродукции.Загрузить(ДанныеПроверки.ТаблицаНеМаркируемойПродукции);
	
	УпаковкиДокумента                       = ДанныеПроверки.УпаковкиДокумента;
	ДобавленныеУпаковки                     = ДанныеПроверки.ДобавленныеУпаковки;
	ДоступныеДляПроверкиУпаковки            = ДанныеПроверки.ДоступныеДляПроверкиУпаковки;
	СледующийСтикерОтложено                 = ДанныеПроверки.СледующийСтикерОтложено;
	
	ШтрихкодТекущейПроверяемойУпаковки = ДанныеПроверки.ШтрихкодТекущейПроверяемойУпаковки;
	Если ЗначениеЗаполнено(ШтрихкодТекущейПроверяемойУпаковки) Тогда
		
		ИдентификаторТекущейПроверяемойУпаковки = СоответствиеШтрихкодовСтрокДерева.Получить(ШтрихкодТекущейПроверяемойУпаковки);
		Если ИдентификаторТекущейПроверяемойУпаковки <> Неопределено Тогда
			Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторТекущейПроверяемойУпаковки;
			ДанныеТекущейСтроки = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
			ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ДанныеТекущейСтроки);
		Иначе
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДереваМаркированнойПродукции Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаДереваМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
			
			ИдентификаторСтрокиБутылкиБезУпаковки = СтрокаДереваМаркированнойПродукции.ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПроверки.ДанныеРанееСгенерированныхШтрихкодов <> Неопределено Тогда
		
		АдресПредыдущихШтрихкодов = ПоместитьВоВременноеХранилище(ДанныеПроверки.ДанныеРанееСгенерированныхШтрихкодов,
		                                                          УникальныйИдентификатор);
		
	КонецЕсли;
	
	АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(СоответствиеШтрихкодовСтрокДерева,
	                                                                              УникальныйИдентификатор);
	
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(КоллекцияСтрок, СоответствиеШтрихкодовСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если Не СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
			СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаДерева.ЗначениеШтрихкода, СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
			
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы(РежимОчистки = Ложь)

	ИдентификаторТекущейПроверяемойУпаковки    = -1;
	ИдентификаторРодителяУдаляемойСтроки       = -1;
	ИдентификаторСтрокиБутылкиБезУпаковки      = -1;
	СледующийСтикерОтложено                    = 1;
	
	Если РежимОчистки Тогда
		
		ДеревоМаркированнойПродукции.ПолучитьЭлементы().Очистить();
		ДобавленныеУпаковки.Очистить();
		ДоступныеДляПроверкиУпаковки.Очистить();
		ПулНеизвестныхАкцизныхМарок.Очистить();
		ТаблицаНеМаркируемойПродукции.Очистить();
		УпаковкиДокумента.Очистить();
		АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВсеИтогиФормы()
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
	ПересчитатьХешСуммыВсехУпаковок();
	ОпределитьТипыВсехУпаковок();
	
	КоличествоСтрокПодобраннойАлкогольнойПродукции = АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Количество();
	КоличествоСтрокНеМаркируемойПродукции          = ТаблицаНеМаркируемойПродукции.Количество();
	
	Если Не ЗначениеЗаполнено(РежимПроверки) Тогда
		ПредставлениеРежимаПроверки = ПредставлениеРежимаПроверки(РежимПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеТаблицыПоДаннымДокумента()
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
	
		ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТаблицуШтрихкодовНеМаркируемойПродукцииТТН_ЕГАИС(ПроверяемыйДокумент,
		                                                                                          ТаблицаШтрихкодовНеМаркируемойПродукции);
		
		ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТаблицуСопоставленныхСправок2ТТН_ЕГАИС(ПроверяемыйДокумент,
		                                                                                Справки2СопоставленнаяНоменклатура);
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		
		ТаблицаКОпределениюСправок2 = Документы.АктПостановкиНаБалансЕГАИС.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ПроверяемыйДокумент);
		ЗаполнитьДеревоКОпределениюСправок2(ТаблицаКОпределениюСправок2);
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		
		ТаблицаКОпределениюСправок2 = Документы.АктСписанияЕГАИС.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ПроверяемыйДокумент);
		ЗаполнитьДеревоКОпределениюСправок2(ТаблицаКОпределениюСправок2);
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		ТаблицаКОпределениюСправок2 = Документы.ТТНИсходящаяЕГАИС.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ПроверяемыйДокумент);
		ЗаполнитьДеревоКОпределениюСправок2(ТаблицаКОпределениюСправок2);
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ЧекЕГАИС") Тогда
		
		ТаблицаКОпределениюСправок2 = Документы.ЧекЕГАИС.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ПроверяемыйДокумент);
		ЗаполнитьДеревоКОпределениюСправок2(ТаблицаКОпределениюСправок2);
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
		
		ТаблицаКОпределениюСправок2 = Документы.ЧекЕГАИС.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ПроверяемыйДокумент);
		ЗаполнитьДеревоКОпределениюСправок2(ТаблицаКОпределениюСправок2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПроверкуЗановоНаСервере(СоответствиеШтрихкодовСтрокДерева)

	ИнициализироватьДанныеФормы(Истина);
	
	ЗаполнитьВспомогательныеТаблицыПоДаннымДокумента();
	
	ЗагрузитьДанныеДокумента(СоответствиеШтрихкодовСтрокДерева, Истина);
	
	ПересчитатьВсеИтогиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКОпределениюСправок2(ТаблицаКОпределениюСправок2)

	Для Каждого СтрокаТаблицы Из ТаблицаКОпределениюСправок2 Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.АлкогольнаяПродукция)
			И Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		ОпределитьИндексКартинкиСостояниеПодбораАкцизныхМарок(НоваяСтрока);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева)

	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрокаДерева.ТипУпаковки) Тогда
		
		Возврат ТекущаяСтрокаДерева.НеСодержитсяВДанныхДокумента;
		
	ИначеЕсли ТекущаяСтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева.ПолучитьРодителя());
		
	КонецЕсли;

КонецФункции

#Область РезультатыПроверки

&НаКлиенте
Процедура ЗавершитьПроверку(СтатусПроверки)
	
	Результат = РезультатСканированияАлкогольнойПродукции(СтатусПроверки, ВладелецФормы.УникальныйИдентификатор);
	
	Если Результат.ЕстьОшибки Тогда
		
		ПоказатьПредупреждение(, Результат.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ВыполняетсяЗакрытие = Истина;
	Закрыть(Результат.АдресВоВременномХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПриЗавершенииПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ПеречислениеСсылка.СтатусыПроверкиНаличияАлкогольнойПродукции") Тогда
		ЗавершитьПроверку(Результат);
	ИначеЕсли Результат = Истина Тогда
		ЗавершитьПроверку(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатыПроверкиУспешноСохранены()

	ДокументОснованиеОбъект = ПроверяемыйДокумент.ПолучитьОбъект();
	
	Попытка
		
		ДокументОснованиеОбъект.Заблокировать();
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), , "ПроверяемыйДокумент");
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументОснованиеОбъект.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеРезультатовПроверки());
	
	Если ПроверяемыйДокумент.Метаданные().Реквизиты.Найти("СтатусПроверкиИПодбора") <> Неопределено Тогда
		ДокументОснованиеОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Выполняется;
	КонецЕсли;
	
	ДокументОснованиеОбъект.Записать(?(ДокументОснованиеОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	
	Возврат Истина;
	
КонецФункции 

&НаСервере
Функция ДанныеРезультатовПроверки()
	
	ДанныеРезультатовСканированияАлкогольнойПродукции = Новый Структура;
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДеревоМаркированнойПродукции",             РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ТаблицаНеМаркируемойПродукции",            РеквизитФормыВЗначение("ТаблицаНеМаркируемойПродукции"));
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ПулНеизвестныхАкцизныхМарок",              РеквизитФормыВЗначение("ПулНеизвестныхАкцизныхМарок"));
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("АлкогольнаяПродукцияКОпределениюСправок2", РеквизитФормыВЗначение("АлкогольнаяПродукцияКОпределениюСправок2"));
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("УпаковкиДокумента",                        УпаковкиДокумента);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДобавленныеУпаковки",                      ДобавленныеУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",             ДоступныеДляПроверкиУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СледующийСтикерОтложено",                  СледующийСтикерОтложено);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ШтрихкодТекущейПроверяемойУпаковки",       ШтрихкодТекущейПроверяемойУпаковки());
	
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеРанееСгенерированныхШтрихкодов",     ?(ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов),
	                                                                                                       ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов),
	                                                                                                       Неопределено));
	
	Возврат ДанныеРезультатовСканированияАлкогольнойПродукции;
	
КонецФункции

&НаСервере
Функция ШтрихкодТекущейПроверяемойУпаковки()

	Если ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		Возврат "";
	Иначе
		СтрокаСПроверяемойУпаковкой = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
		
		Если СтрокаСПроверяемойУпаковкой = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат СтрокаСПроверяемойУпаковкой.ЗначениеШтрихкода;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

&НаСервере
Функция ТаблицаРезультатаСканированияНеМаркируемойПродукции()

	ТаблицаНеМаркируемойАлкогольнойПродукции = Новый ТаблицаЗначений;
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Номенклатура");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Характеристика");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("АлкогольнаяПродукция");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Серия");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Справка2");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Количество");
	
	Для Каждого СтрокаВерхнегоУровня Из АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаВерхнегоУровня.Маркируемая Тогда
			
			НоваяСтрока = ТаблицаНеМаркируемойАлкогольнойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВерхнегоУровня);
			НоваяСтрока.Количество = СтрокаВерхнегоУровня.КоличествоРаспределено
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНеМаркируемойАлкогольнойПродукции;
	
КонецФункции

&НаСервере
Функция РезультатСканированияАлкогольнойПродукции(СтатусПроверки, УникальныйИдентификаторФормыВладельца)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьОшибки",                Ложь);
	СтруктураВозврата.Вставить("ТекстОшибки",               "");
	СтруктураВозврата.Вставить("АдресВоВременномХранилище", "");
	
	ОписаниеТиповТипУпаковки = Новый ОписаниеТипов;
	ОписаниеТиповТипУпаковки.Типы().Добавить(Тип("ПеречислениеСсылка.ТипыУпаковок"));
	ОписаниеТиповТипУпаковки.Типы().Добавить(Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаАлкогольнойПродукции"));
	
	Если СтатусПроверки <> Неопределено Тогда
		
		Для Каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
			ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаПроверяемого, СтатусПроверки, Ложь);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПересчитатьВсеИтогиФормы();
	
	Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		
		СтруктураВозврата.ЕстьОшибки = Истина;
		СтруктураВозврата.ТекстОшибки = НСтр("ru = 'Есть упаковки требующие перемаркировки'");
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
	ВозвращаемоеДерево = Новый ДеревоЗначений;
	ВозвращаемоеДерево.Колонки.Добавить("ЗначениеШтрихкода",       ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ВозвращаемоеДерево.Колонки.Добавить("ТипУпаковки",             ОписаниеТиповТипУпаковки);
	ВозвращаемоеДерево.Колонки.Добавить("АлкогольнаяПродукция");
	ВозвращаемоеДерево.Колонки.Добавить("Номенклатура");
	ВозвращаемоеДерево.Колонки.Добавить("Характеристика");
	ВозвращаемоеДерево.Колонки.Добавить("Серия");
	ВозвращаемоеДерево.Колонки.Добавить("Справка2");
	ВозвращаемоеДерево.Колонки.Добавить("ВсеСправки2Указаны");
	ВозвращаемоеДерево.Колонки.Добавить("СтатусПроверки",          Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияАлкогольнойПродукции"));
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоАкцизныхМарок", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ВозвращаемоеДерево.Колонки.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуВРезультирующееДерево(СтрокаПроверяемого, ВозвращаемоеДерево.Строки);
		
	КонецЦикла;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ДеревоМаркируемойПродукции",    ВозвращаемоеДерево);
	Если РежимПодбораСуществующихУпаковок Тогда
		РезультатПроверки.Вставить("ТаблицаНеМаркируемойПродукции", ТаблицаРезультатаСканированияНеМаркируемойПродукции());
	Иначе
		РезультатПроверки.Вставить("ТаблицаНеМаркируемойПродукции", ТаблицаНеМаркируемойПродукции.Выгрузить());
	КонецЕсли;
	
	Если ПриЗавершенииСохранятьРезультатыПроверки Тогда
		РезультатПроверки.Вставить("АдресДанныхРезультатаПроверки", 
		                           ПоместитьВоВременноеХранилище(ДанныеРезультатовПроверки(), УникальныйИдентификаторФормыВладельца));
	КонецЕсли;
	
	СтруктураВозврата.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РезультатПроверки, УникальныйИдентификаторФормыВладельца);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаДерева, СтатусПроверки, УстанавливатьБезусловно)
	
	Если УстанавливатьБезусловно Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	ИначеЕсли ЗначениеЗаполнено(СтатусПроверки)
		И СтрокаДерева.ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки
		И (СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась
		  Или СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена) Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстанавливатьБезусловно =  ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
		                           И СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует;
		
		ИзменитьСтатусПроверкиВСтрокеДерева(ПодчиненнаяСтрока, СтатусПроверки, УстанавливатьБезусловно);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВРезультирующееДерево(СтрокаИсточник, КоллекцияСтрокПриемника)
	
	Если СтрокаИсточник.ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки
		И СтрокаИсточник.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	
	Для Каждого ПодчиненнаяСтрокаИсточник Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуВРезультирующееДерево(ПодчиненнаяСтрокаИсточник, НоваяСтрока.Строки);
		
	КонецЦикла;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Возврат ;
		
	КонецЕсли;
	
	НоваяСтрока.АлкогольнаяПродукция = ?(СтрокаИсточник.ВУпаковкеРазнаяАлкогольнаяПродукция, Неопределено, СтрокаИсточник.АлкогольнаяПродукция);
	НоваяСтрока.Номенклатура         = ?(СтрокаИсточник.ВУпаковкеРазнаяНоменклатура,         Неопределено, СтрокаИсточник.Номенклатура);
	НоваяСтрока.Характеристика       = ?(СтрокаИсточник.ВУпаковкеРазныеХарактеристики,       Неопределено, СтрокаИсточник.Характеристика);
	НоваяСтрока.Серия                = ?(СтрокаИсточник.ВУпаковкеРазныеСерии,                Неопределено, СтрокаИсточник.Серия);
	НоваяСтрока.Справка2             = ?(СтрокаИсточник.ВУпаковкеРазныеСправки2,             Неопределено, СтрокаИсточник.Справка2);
	
	Для Каждого ПодчиненнаяСтрока Из НоваяСтрока.Строки Цикл
		
		Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			НоваяСтрока.КоличествоАкцизныхМарок = НоваяСтрока.КоличествоАкцизныхМарок + ПодчиненнаяСтрока.КоличествоАкцизныхМарок;
			
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки =  Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока.КоличествоАкцизныхМарок = НоваяСтрока.КоличествоАкцизныхМарок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СканированиеШтрихкодаИОбработка

&НаКлиенте
Функция ИдентификаторСтрокиДереваПоШтрихкоду(ЗначениеШтрихкода)

	НайденныйИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(ЗначениеШтрихкода);
	
	Если НайденныйИдентификаторСтроки = Неопределено Тогда
		
		НайденныйИдентификаторСтроки = -1;
		
	КонецЕсли;
	
	Возврат НайденныйИдентификаторСтроки;

КонецФункции

&НаКлиенте
Функция ПараметрыСканированияАкцизныхМарок()
	
	ПараметрыСканированияАкцизныхМарок = АкцизныеМаркиКлиентСервер.ПараметрыСканированияАкцизныхМарок(ВладелецФормы);
	ПараметрыСканированияАкцизныхМарок.СоздаватьШтрихкодУпаковки      = Ложь;
	ПараметрыСканированияАкцизныхМарок.АдресСоответствияАкцизныхМарок = Неопределено;
	ПараметрыСканированияАкцизныхМарок.ЗапрашиватьНоменклатуру        = РежимПодбораСуществующихУпаковок;
	
	Возврат ПараметрыСканированияАкцизныхМарок;
	
КонецФункции

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	АкцизныеМаркиЕГАИСКлиент.ОбработатьДанныеШтрихкода(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект),
	                                                   ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканированияАкцизныхМарок());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУспешногоОбнаруженияОтсканированногоШтрихкодаВДереве(НайденнаяСтрокаДерева, 
	                                                                ТекущаяСтрокаДерева,
	                                                                РодительНайденнойСтроки,
	                                                                ТребуетсяОткрытиеФормыВыбораДействия,
	                                                                ТипУпаковкиГдеНашли)
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(НайденнаяСтрокаДерева.ТипУпаковки) Тогда
		
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Истина);
		
		Если НайденнаяСтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
			
			СнятьПризнакПроверкиУпаковки(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
		
			Если НайденнаяСтрокаДерева = ТекущаяСтрокаДерева Тогда
			
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				ИзменитьСостояниеПроверкиУпаковки(НайденнаяСтрокаДерева);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			Иначе
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь);
		
		Если (РодительНайденнойСтроки = Неопределено 
			Или РодительНайденнойСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки"))
			И ИдентификаторТекущейПроверяемойУпаковки = -1 Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
		
		ИначеЕсли РодительНайденнойСтроки.ПолучитьИдентификатор() = ИдентификаторТекущейПроверяемойУпаковки Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		Иначе
			
			Если (РодительНайденнойСтроки.НеСодержитсяВДанныхДокумента
				Или РодительНайденнойСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки"))
				И (СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
				Или СтрокаПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки")) Тогда
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				ПереместитьБутылку(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаПроверяемойУпаковки <> Неопределено Тогда
		ТипУпаковкиГдеНашли = СтрокаПроверяемойУпаковки.ТипУпаковки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода, ТекущаяСтрокаДерева, ИдентификаторНайденнойСтроки)

	ТребуетсяОткрытиеФормыВыбораДействия = Истина;
	
	НайденнаяСтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторНайденнойСтроки);
		
	Если НайденнаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьРодителя();
	ТипУпаковкиГдеНашли     = Неопределено;
	
	ПослеУспешногоОбнаруженияОтсканированногоШтрихкодаВДереве(НайденнаяСтрокаДерева, 
	                                                          ТекущаяСтрокаДерева,
	                                                          РодительНайденнойСтроки,
	                                                          ТребуетсяОткрытиеФормыВыбораДействия,
	                                                          ТипУпаковкиГдеНашли);
	
	Если Не ТребуетсяОткрытиеФормыВыбораДействия = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ЗначениеШтрихкода",                ДанныеШтрихкода.Штрихкод);
	ПараметрыОткрытияФормы.Вставить("ШтрихкодНайден",                   Истина);
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",            НайденнаяСтрокаДерева.ТипУпаковки);
	ПараметрыОткрытияФормы.Вставить("СледующийСтикерОтложено",          СледующийСтикерОтложено);
	ПараметрыОткрытияФормы.Вставить("НомерСтикераОтложено",             НайденнаяСтрокаДерева.НомерСтикераОтложено);
	ПараметрыОткрытияФормы.Вставить("РежимПроверки",                    РежимПроверки);
	ПараметрыОткрытияФормы.Вставить("РежимПодбораСуществующихУпаковок", РежимПодбораСуществующихУпаковок);
	ПараметрыОткрытияФормы.Вставить("СтатусПроверки",                   НайденнаяСтрокаДерева.СтатусПроверки);
	ПараметрыОткрытияФормы.Вставить("НеСодержитсяВДанныхДокумента",     НайденнаяСтрокаДерева.НеСодержитсяВДанныхДокумента);
	ПараметрыОткрытияФормы.Вставить("ШтрихкодУпаковкиГдеДолжноБыть",    ?(РодительНайденнойСтроки = Неопределено, "", РодительНайденнойСтроки.ЗначениеШтрихкода));
	
	ПараметрыОткрытияФормы.Вставить("ДобавленныеУпаковки",              ДобавленныеУпаковки);
	ПараметрыОткрытияФормы.Вставить("ДоступныеДляПроверкиУпаковки",     ДоступныеДляПроверкиУпаковки);
	ПараметрыОткрытияФормы.Вставить("УпаковкиДокумента",                УпаковкиДокумента);
	
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиГдеДолжноНаходиться",   ?(РодительНайденнойСтроки = Неопределено, Неопределено, РодительНайденнойСтроки.ТипУпаковки));
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",            НайденнаяСтрокаДерева.ТипУпаковки); 
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиГдеНашли",              ТипУпаковкиГдеНашли);
	
	ДополнительныеПараметры = Новый  Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторНайденнойСтроки", ИдентификаторНайденнойСтроки);
	
	ОповещениеПослеВыбораДействия = Новый ОписаниеОповещения("ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ВыборДействияПоРезультатамВводаШтрихкода", ПараметрыОткрытияФормы, 
	             ЭтотОбъект, УникальныйИдентификатор, , ,ОповещениеПослеВыбораДействия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНеНайденныйВДеревеШтрихКод(ДанныеШтрихкода, ТекущаяСтрокаДерева)

	Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix") Тогда
		Возврат;
	Иначе
		ЭтоШтрихкодАлкогольнойПродукции = (ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417"));
	КонецЕсли;
	
	Если РежимПодбораСуществующихУпаковок
		И ЭтоШтрихкодАлкогольнойПродукции Тогда
		
		ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
		
		ПараметрыСканированияАкцизныхМарок = АкцизныеМаркиКлиентСервер.ПараметрыСканированияАкцизныхМарок(ВладелецФормы);
		
		Если ПараметрыСканированияАкцизныхМарок.ДоступныеСтатусы.Найти(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка")) = Неопределено Тогда
			
			ДанныеШтрихкода.Вставить("ЕстьОшибки", Истина);
			ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Запрещено добавлять алкогольную продукцию с неопределенным статусом акцизной марки'"));
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ДанныеШтрихКода", ДанныеШтрихкода);
			
			ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы,
			             ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция) Тогда
			
			ДанныеШтрихкода.Вставить("ЕстьОшибки", Истина);
			ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось идентифицировать алкогольную продукцию'"));
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ДанныеШтрихКода", ДанныеШтрихкода);
			
			ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы,
			             ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		КонецЕсли;
		
		ОшибкаКонтроля = Ложь;
		
		ОпределениеСправок2ПриДобавленииСтроки(ЭтотОбъект, ДанныеШтрихкода, ОшибкаКонтроля);
		
		Если ОшибкаКонтроля Тогда
			
			ЧастиТекстаОшибки = Новый Массив;
			
			ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Не удалось сопоставить данным документа следующие данные: '"));
			
			ЧастиТекстаОшибки.Добавить(СтрШаблон(НСтр("ru = 'номеклатура - %1'"),?(ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура), 
			                                                                ДанныеШтрихкода.Номенклатура, 
			                                                                НСтр("ru = 'Не определена'"))));
			ЧастиТекстаОшибки.Добавить(?(ЗначениеЗаполнено(ДанныеШтрихкода.Характеристика),
			                       ", " + СтрШаблон(НСтр("ru = 'Характеристика - %1'"), ДанныеШтрихкода.Характеристика),
			                       ""));
			ЧастиТекстаОшибки.Добавить(?(ЗначениеЗаполнено(ДанныеШтрихкода.Серия),
			                     ", " + СтрШаблон(НСтр("ru = 'Серия - %1'"), ДанныеШтрихкода.Серия),
			                     ""));
			
			ДанныеШтрихкода.Вставить("ЕстьОшибки", Истина);
			ДанныеШтрихкода.Вставить("ТекстОшибки", СтрСоединить(ЧастиТекстаОшибки));
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ДанныеШтрихКода", ДанныеШтрихкода);
			
			ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы,
			             ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		Иначе
			
			ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода);
			Возврат;
			
		КонецЕсли;
			
			
	Иначе
	
		НайденнаяСправка2             = Неопределено;
		НайденнаяАлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		
		Если ЭтоШтрихкодАлкогольнойПродукции
			И ЗначениеЗаполнено(НайденнаяАлкогольнаяПродукция)
			И ПулНеизвестныхАкцизныхМарок.Количество() > 0 Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("АлкогольнаяПродукция", НайденнаяАлкогольнаяПродукция);
			
			МассивСтрокПулаПоАлкогольнойПродукции = ПулНеизвестныхАкцизныхМарок.НайтиСтроки(ПараметрыПоиска);
			Если МассивСтрокПулаПоАлкогольнойПродукции.Количество() > 0 Тогда
				
				Для Каждого СтрокаПула Из МассивСтрокПулаПоАлкогольнойПродукции Цикл
					
					Если СтрокаПула.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НайденнаяСправка2 = СтрокаПула.Справка2;
					ДанныеШтрихкода.Вставить("Справка2", НайденнаяСправка2);
					
					Если РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейАлкогольнойПродукции.ОставлятьТамГдеНайдены") Тогда
						
						ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода);
						Возврат;
						
					Иначе
						
						СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь);
						Если СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
							Или СтрокаПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
							
							ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода);
							Возврат;
							
						КонецЕсли;
					
					КонецЕсли;
					
				КонецЦикла
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	ТипУпаковкиНайденного = ?(ЭтоШтрихкодАлкогольнойПродукции,
	                          ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар"),
	                          ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")); 
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ЗначениеШтрихкода",                    ДанныеШтрихкода.Штрихкод);
	ПараметрыОткрытияФормы.Вставить("АдресПулаНеизвестныхАкцизныхМарок",    ДанныеПулаНеизвестныхАкцизныхМарок());
	ПараметрыОткрытияФормы.Вставить("ШтрихкодНайден",                       Ложь);
	ПараметрыОткрытияФормы.Вставить("НайденнаяАлкогольнаяПродукция",        НайденнаяАлкогольнаяПродукция);
	ПараметрыОткрытияФормы.Вставить("НайденнаяСправка2",                    НайденнаяСправка2);
	ПараметрыОткрытияФормы.Вставить("РежимПроверки",                        РежимПроверки);
	ПараметрыОткрытияФормы.Вставить("ЭтоШтрихкодАлкогольнойПродукции",      ЭтоШтрихкодАлкогольнойПродукции);
	ПараметрыОткрытияФормы.Вставить("УпаковкаНеСодержитсяВДанныхДокумента", УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева));
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",                ТипУпаковкиНайденного);
	ПараметрыОткрытияФормы.Вставить("РежимПодбораСуществующихУпаковок",     РежимПодбораСуществующихУпаковок);
	
	ОповещениеПослеВыбораДействия = Новый ОписаниеОповещения("ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ВыборДействияПоРезультатамВводаШтрихкода", ПараметрыОткрытияФормы, 
	             ЭтотОбъект, УникальныйИдентификатор, , ,ОповещениеПослеВыбораДействия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкодВДеревеМаркированнойПродукции(ДанныеШтрихкода)
	
	ТекущаяСтрокаДерева       = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	РодительскаяСтрокаТекущей = ТекущаяСтрокаДерева.ПолучитьРодителя();
	
	ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкоду(ДанныеШтрихкода.Штрихкод);
	
	Если ИдентификаторНайденнойСтроки <> -1 Тогда
		
		ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода, 
		                                                 ТекущаяСтрокаДерева, 
		                                                 ИдентификаторНайденнойСтроки);
		
	ИначеЕсли РежимПодбораСуществующихУпаковок 
		      И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		ДобавитьДанныеСуществующейУпаковкиВДеревоМаркированнойПродукции(ДанныеШтрихкода.ШтрихкодУпаковки,
		                                                                СоответствиеШтрихкодовСтрокДерева);
		
	Иначе
		
		ОбработатьНеНайденныйВДеревеШтрихКод(ДанныеШтрихкода,
		                                     ТекущаяСтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкодВТаблицеНеМаркированнойПродукции(ДанныеШтрихкода, ШтрихкодОбработан)

	Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417")
		Или ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимПодбораСуществующихУпаковок Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		     И Не ЗначениеЗаполнено(ДанныеШтрихкода.ТипУпаковки) Тогда
			
			ОтработатьСканированиеНеМаркированнойПродукцииВДеревеПодобраннойПродукции(ЭтотОбъект,
			                                                                          ДанныеШтрихкода,
			                                                                          ШтрихКодОбработан);
			
		КонецЕсли;
		
	Иначе
		
		Если ТаблицаШтрихкодовНеМаркируемойПродукции.Количество() = 0 Тогда
		
			Возврат;
		
		КонецЕсли;
	
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Штрихкод", ДанныеШтрихкода.Штрихкод);
		
		НайденныеСтроки = ТаблицаШтрихкодовНеМаркируемойПродукции.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() <> 1
			Или Не ЗначениеЗаполнено(НайденныеСтроки[0].АлкогольнаяПродукция) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("АлкогольнаяПродукция", НайденныеСтроки[0].АлкогольнаяПродукция);
		
		НайденныеСтроки = ТаблицаНеМаркируемойПродукции.НайтиСтроки(ПараметрыПоиска);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		ОбрабатываемаяСтрока = 1;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НайденнаяСтрока.КоличествоФактическое < НайденнаяСтрока.КоличествоПоДокументу Тогда
				
				НайденнаяСтрока.КоличествоФактическое =  НайденнаяСтрока.КоличествоФактическое + 1;
				
			ИначеЕсли ОбрабатываемаяСтрока = КоличествоНайденныхСтрок Тогда
				
				НайденнаяСтрока.КоличествоФактическое =  НайденнаяСтрока.КоличествоФактическое + 1;
				
			КонецЕсли;
			
			ОбрабатываемаяСтрока = ОбрабатываемаяСтрока + 1;
			
			ШтрихкодОбработан = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодОбработан = Ложь;
	
	Если ЕстьНеМаркируемая
		Или Не КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		
		ПроверитьШтрихкодВТаблицеНеМаркированнойПродукции(ДанныеШтрихкода, ШтрихкодОбработан);
		
	КонецЕсли;
	
	Если (ЕстьМаркируемая
		Или РежимПодбораСуществующихУпаковок)
		И Не ШтрихкодОбработан Тогда
		
		ПроверитьШтрихкодВДеревеМаркированнойПродукции(ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если Результат.ВидДействия = "ДобавлениеАлкогольнойПродукции" Тогда
		
		ДобавитьНовуюАлкогольнуюПродукциюВДерево(Результат);
	
	ИначеЕсли Результат.ВидДействия = "ПереместитьУпаковкуВДругуюУпаковку" Тогда
		
		ПереместитьУпаковкуВДругуюУпаковку(ДополнительныеПараметры.ИдентификаторНайденнойСтроки, 
		                                   Результат.ШтрихкодУпаковкиНазначения,
		                                   Результат.СтатусПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьБутылкуВДругуюУпаковку" Тогда
		
		ПереместитьБутылкуВДругуюУпаковку(ДополнительныеПараметры.ИдентификаторНайденнойСтроки, 
		                                  Результат.ШтрихкодУпаковкиНазначения,
		                                  Результат.СтатусПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьВБутылкиБезУпаковки" Тогда
		
		ПереместитьВБутылкиБезУпаковки(ДополнительныеПараметры.ИдентификаторНайденнойСтроки,
		                               ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии"),
		                               Результат.ИзменятьКонтекстПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПоместитьНовуюВБутылкиБезУпаковки" Тогда
		
		ПоместитьНовуюВБутылкиБезУпаковки(Результат);
		
	ИначеЕсли Результат.ВидДействия = "ОтложитьНайденноеВДругоеМесте" Тогда
		
		ТекущиеДанныеДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторНайденнойСтроки);
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			
			ОтметитьСтрокуКакОтложенную(ТекущиеДанныеДерева);
			
		КонецЕсли;
		
	ИначеЕсли Результат.ВидДействия = "ИзменитьКонтекстПроверки" Тогда
		
		ТекущиеДанныеДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторНайденнойСтроки);
		
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			
			ОтметитьСтрокуКакНайденную(ТекущиеДанныеДерева);
			ИзменитьКонтекстПроверки(ТекущиеДанныеДерева.ПолучитьРодителя());
			
		КонецЕсли;
		
	ИначеЕсли Результат.ВидДействия = "ДобавитьНовуюУпаковку" Тогда
		
		ДобавитьНовуюУпаковку(Результат.Штрихкод,
		                      ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПулНеизвестныхАкцизныхМарок

&НаКлиенте
Функция ДанныеПулаНеизвестныхАкцизныхМарок()
	
	Если ПулНеизвестныхАкцизныхМарок.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат АдресПулаНеизвестныхАкцизныхМарок(ПулНеизвестныхАкцизныхМарок, УникальныйИдентификатор);
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция АдресПулаНеизвестныхАкцизныхМарок(Знач ПулНеизвестныхАкцизныхМарок, Знач УникальныйИдентификатор)
	
	Возврат ПоместитьВоВременноеХранилище(ПулНеизвестныхАкцизныхМарок.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивСтрокПулаПоАлкогольнойПродукции(ПулНеизвестныхАкцизныхМарок, АлкогольнаяПродукция)

	МассивСтрок = Новый Массив;
	
	Для Каждого СтрокаПула Из ПулНеизвестныхАкцизныхМарок Цикл
		
		Если СтрокаПула.АлкогольнаяПродукция = АлкогольнаяПродукция
			И СтрокаПула.Количество > 0 Тогда
			
			МассивСтрок.Добавить(СтрокаПула);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтрок;

КонецФункции

&НаКлиенте
Функция СоответствиеПулаАкцизныхМарок(ЗначениеШтрихкода)
	
	СоответствиеПулаАкцизныхМарок = Новый Соответствие;
	
	Если Лев(ЗначениеШтрихкода, 1) = "0" Тогда
		КоличествоСтрокТаблицыКРассмотрению = 0;
	ИначеЕсли Лев(ЗначениеШтрихкода, 1) = "1" Тогда
		КоличествоСтрокТаблицыКРассмотрению = 1;
	Иначе
		КоличествоСтрокТаблицыКРассмотрению = ПулНеизвестныхАкцизныхМарок.Количество();
	КонецЕсли;
	
	ОбработаноСтрок = 0;
	
	Для Каждого СтрокаНеизвестнаяМарка Из ПулНеизвестныхАкцизныхМарок Цикл
		
		Если ОбработаноСтрок = КоличествоСтрокТаблицыКРассмотрению Тогда
			Прервать;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаНеизвестнаяМарка.АлкогольнаяПродукция) 
			И ЗначениеЗаполнено(СтрокаНеизвестнаяМарка.Справка2)
			И СтрокаНеизвестнаяМарка.Количество > 0 Тогда
			
			МассивСправок = СоответствиеПулаАкцизныхМарок.Получить(СтрокаНеизвестнаяМарка.АлкогольнаяПродукция);
			
			Если МассивСправок = Неопределено Тогда
				МассивСправок = Новый Массив;
			КонецЕсли;
			
			Если МассивСправок.Найти(СтрокаНеизвестнаяМарка.Справка2) = Неопределено Тогда
				МассивСправок.Добавить(СтрокаНеизвестнаяМарка.Справка2);
			КонецЕсли;
			
			СоответствиеПулаАкцизныхМарок.Вставить(СтрокаНеизвестнаяМарка.АлкогольнаяПродукция, МассивСправок);
			
		КонецЕсли;
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
	КонецЦикла;
	
	Возврат СоответствиеПулаАкцизныхМарок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьДанныеПулаАлкогольнойПродукции(Форма, АлкогольнаяПродукция, Справка2, Добавить)

	СтруктураПоиска = Новый Структура;
	
	СтруктураПоиска.Вставить("АлкогольнаяПродукция", АлкогольнаяПродукция);
	СтруктураПоиска.Вставить("Справка2", Справка2);
	
	НайденныеСтроки = Форма.ПулНеизвестныхАкцизныхМарок.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если Добавить Тогда
			
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
			Прервать;
			
		Иначе
			
			Если НайденнаяСтрока.Количество > 0 Тогда
				
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - 1;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьДанныеНеМаркированнойПродукции(Форма, АлкогольнаяПродукция, Справка2, Добавить);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьДанныеНеМаркированнойПродукции(Форма, АлкогольнаяПродукция, Справка2, Добавить)
	
	СтруктураПоиска = Новый Структура;
	
	СтруктураПоиска.Вставить("АлкогольнаяПродукция", АлкогольнаяПродукция);
	СтруктураПоиска.Вставить("Справка2", Справка2);
	
	НайденныеСтроки = Форма.ТаблицаНеМаркируемойПродукции.НайтиСтроки(СтруктураПоиска);
	
	СтрокаНайдена = Ложь;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если Добавить Тогда
			
			НайденнаяСтрока.КоличествоПоДокументу = НайденнаяСтрока.КоличествоПоДокументу + 1;
			СтрокаНайдена = Истина;
			Прервать;
			
		Иначе
			
			НайденнаяСтрока.КоличествоПоДокументу = НайденнаяСтрока.КоличествоПоДокументу - 1;
			
			Если НайденнаяСтрока.КоличествоПоДокументу = 0 Тогда
				
				Форма.ТаблицаНеМаркируемойПродукции.Удалить(НайденнаяСтрока);
				Форма.КоличествоСтрокНеМаркируемойПродукции = Форма.КоличествоСтрокНеМаркируемойПродукции -1;
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Добавить
		И Не СтрокаНайдена Тогда
		
		НоваяСтрока = Форма.ТаблицаНеМаркируемойПродукции.Добавить();
		НоваяСтрока.АлкогольнаяПродукция            = АлкогольнаяПродукция;
		НоваяСтрока.Справка2                        = Справка2;
		НоваяСтрока.КоличествоПоДокументу           = 1;
		Форма.КоличествоСтрокНеМаркируемойПродукции = Форма.КоличествоСтрокНеМаркируемойПродукции + 1;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РежимПроверки

&НаСервере
Функция ПредставлениеРежимаПроверки(РежимПроверки)
	
	Если Не ЗначениеЗаполнено(РежимПроверки) Тогда
		
		РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейАлкогольнойПродукции.ОставлятьТамГдеНайдены");
		
	КонецЕсли;
	
	ТекстВступление = НСтр("ru = 'При выявлении некорректного содержимого'");
	
	Если РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейАлкогольнойПродукции.ОставлятьТамГдеНайдены") Тогда
		
		ТекстДействие = НСтр("ru = 'оставлять там, где найдено.'");
		
	ИначеЕсли РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейАлкогольнойПродукции.ПеремещатьТудаГдеДолжныБыть") Тогда
		
		ТекстДействие = НСтр("ru = 'перемещать в упаковку, где должно находиться.'");
		
	КонецЕсли;
	
	СтрокаДействие = Новый ФорматированнаяСтрока(ТекстДействие,, ЦветаСтиля.ЦветГиперссылкиГИСМ,, "ИзменитьРежимПроверки");
	
	Возврат Новый ФорматированнаяСтрока(ТекстВступление, " ", СтрокаДействие);
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияРежимаПроверки(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) 
		И Результат <> РежимПроверки Тогда
		
		РежимПроверки = Результат;
		ПредставлениеРежимаПроверки = ПредставлениеРежимаПроверки(РежимПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеДобавлениеБутылокИУпаковок

&НаКлиенте
Процедура ДобавитьНовуюУпаковку(ЗначениеШтрихкода, ТипУпаковки, СпозиционироватьсяНаДобавленной = Истина)
	
	УпаковкаНеСодержитсяВДанныхДокумента = Ложь;
	
	Если ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		
		ТекущаяПроверяемаяУпаковка = Неопределено;
		
	Иначе
		
		ТекущаяПроверяемаяУпаковка = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
		Если Не ТекущаяПроверяемаяУпаковка = Неопределено Тогда
			УпаковкаНеСодержитсяВДанныхДокумента = ТекущаяПроверяемаяУпаковка.НеСодержитсяВДанныхДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	ИначеЕсли РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейАлкогольнойПродукции.ПеремещатьТудаГдеДолжныБыть")
		И (Не УпаковкаНеСодержитсяВДанныхДокумента) Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		НоваяСтрока = ТекущаяПроверяемаяУпаковка.ПолучитьЭлементы().Добавить();
		
	КонецЕсли;
	
	НоваяСтрока.ЗначениеШтрихкода            = ЗначениеШтрихкода;
	НоваяСтрока.ТипУпаковки                  = ?(ЗначениеЗаполнено(ТипУпаковки), ТипУпаковки, ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	НоваяСтрока.ИндексКартинкиШтрихкод       = 0;
	НоваяСтрока.СтатусПроверки               = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась");
	
	ДобавленныеУпаковки.Добавить(ЗначениеШтрихкода);
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь);
	УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	ИзменитьКонтекстПроверки(НоваяСтрока);
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);
	
	Если СпозиционироватьсяНаДобавленной Тогда
		
		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
		
	КонецЕсли;
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.ЗначениеШтрихкода, ИдентификаторСтроки);
	ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтроки, Истина);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоместитьНовуюВБутылкиБезУпаковки(ДанныеШтрихкода)
	
	СтрокаБутылкиБезУпаковки = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
	
	ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода, СтрокаБутылкиБезУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода, ДобавлятьВУпаковку = Неопределено)

	Если ДобавлятьВУпаковку = Неопределено Тогда
		
		Если ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
			
			ДобавлятьВУпаковку = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
			
		Иначе
			
			ДобавлятьВУпаковку = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
			
			Если ДобавлятьВУпаковку = Неопределено Тогда
				ДобавлятьВУпаковку = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока = ДобавлятьВУпаковку.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	НоваяСтрока.ЗначениеШтрихкода            = ДанныеШтрихкода.Штрихкод;
	НоваяСтрока.ТипУпаковки                  = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	НоваяСтрока.СтатусПроверки               = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась");
	
	ИнтеграцияЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	
	СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);
	
	ИзменитьДанныеПулаАлкогольнойПродукции(ЭтотОбъект, ДанныеШтрихкода.АлкогольнаяПродукция, ДанныеШтрихкода.Справка2, Ложь);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.ЗначениеШтрихкода, ИдентификаторСтроки);
	Если ДобавлятьВУпаковку.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВБутылкиБезУпаковки(ИдентификаторСтрокиПеремещаемойБутылки, СтатусПроверки = Неопределено, ИзменятьКонтекстПроверки = Ложь)
	
	СтрокаНазначения   = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
	ПеремещаемаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиПеремещаемойБутылки);
	
	ПереместитьБутылку(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	
	Если ИзменятьКонтекстПроверки Тогда
		ИзменитьКонтекстПроверки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьБутылкуВДругуюУпаковку(ИдентификаторСтрокиПеремещаемойБутылки, ШтрихкодУпаковкиНазначения, СтатусПроверки = Неопределено)
	
	ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкоду(ШтрихкодУпаковкиНазначения);
	
	СтрокаНазначения   = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиУпаковкиНазначения);
	ПеремещаемаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиПеремещаемойБутылки);
	
	ПереместитьБутылку(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	ИзменитьКонтекстПроверки(СтрокаНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьБутылку(СтрокаСБутылкой, НоваяУпаковка, СтатусПроверки = Неопределено)

	ТекущаяУпаковка = СтрокаСБутылкой.ПолучитьРодителя();
	
	НоваяСтрока = НоваяУпаковка.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСБутылкой);
	Если СтатусПроверки <> Неопределено Тогда
		НоваяСтрока.СтатусПроверки = СтатусПроверки;
		УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	КонецЕсли;
	
	ТекущаяУпаковка.ПолучитьЭлементы().Удалить(СтрокаСБутылкой);
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущаяУпаковка, Ложь);
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущаяУпаковка);
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);
	
	МассивСтрокИзменившихсяУпаковок = Новый Массив;
	МассивСтрокИзменившихсяУпаковок.Добавить(НоваяУпаковка.ПолучитьИдентификатор());
	МассивСтрокИзменившихсяУпаковок.Добавить(ТекущаяУпаковка.ПолучитьИдентификатор());
	
	ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзменившихсяУпаковок, Истина);
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.ЗначениеШтрихкода, НоваяСтрока.ПолучитьИдентификатор());
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУпаковкуВДругуюУпаковку(ИдентификаторСтрокиПеремещаемойУпаковки, ШтрихкодУпаковкиНазначения, СтатусПроверки = Неопределено)
	
	ИдентификаторПеремещеннойСтроки = -1;
	ПеремещаемаяСтрока              = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиПеремещаемойУпаковки);
	РодительПеремещаемойСтроки      = ПеремещаемаяСтрока.ПолучитьРодителя();
	
	Если СтатусПроверки <> Неопределено Тогда
		ПеремещаемаяСтрока.СтатусПроверки = СтатусПроверки;
	КонецЕсли;
	
	МассивСтрокИзмененыхУпаковок = Новый Массив;
	
	Если ШтрихкодУпаковкиНазначения <> Неопределено Тогда
		
		ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкоду(ШтрихкодУпаковкиНазначения);
		
		СтрокаНазначения = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиУпаковкиНазначения);
		
		Если ИдентификаторСтрокиУпаковкиНазначения <> - 1 Тогда
			
			ПереместитьЭлементДерева(СтрокаНазначения,
			                         ПеремещаемаяСтрока,
			                         ИдентификаторПеремещеннойСтроки);
			
		КонецЕсли;
		
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаНазначения, Истина);
		МассивСтрокИзмененыхУпаковок.Добавить(СтрокаНазначения.ПолучитьИдентификатор());
	
	Иначе
		
		ПереместитьЭлементДерева(Неопределено,
		                         ПеремещаемаяСтрока,
		                         ИдентификаторПеремещеннойСтроки);
	
	КонецЕсли;
	
	ИзменитьКонтекстПроверки(СтрокаНазначения);
	
	Если РодительПеремещаемойСтроки <> Неопределено Тогда
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительПеремещаемойСтроки, Истина);
		МассивСтрокИзмененыхУпаковок.Добавить(РодительПеремещаемойСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если МассивСтрокИзмененыхУпаковок.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзмененыхУпаковок, Истина);
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторПеремещеннойСтроки;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементДерева(СтрокаНазначение, ПеремещаемаяСтрока, ИдентификаторПеремещеннойСтроки, УдалятьПослеДобавления = Истина)
	
	Если Не ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаНазначение = Неопределено Тогда
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = СтрокаНазначение.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.ЗначениеШтрихкода, НоваяСтрока.ПолучитьИдентификатор());
	
	Для каждого Элемент Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		ПереместитьЭлементДерева(НоваяСтрока, Элемент, ИдентификаторПеремещеннойСтроки, Ложь);
	КонецЦикла;
	
	Если УдалятьПослеДобавления Тогда
		
		РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
		Если РодительПеремещаемойСтроки <> Неопределено Тогда
			КоллекцияЭлементов = РодительПеремещаемойСтроки.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементов = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементов.Удалить(ПеремещаемаяСтрока);
		ИдентификаторПеремещеннойСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока)
	
	Если ПеремещаемаяСтрока = СтрокаНазначение Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПеремещаемаяСтрока.ПолучитьРодителя() = СтрокаНазначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока = СтрокаНазначение Тогда
			Возврат Ложь;
		КонецЕсли;
		
		РезультатПроверкиПодчиненнойСтроки = ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПодчиненнаяСтрока);
		
		Если НЕ РезультатПроверкиПодчиненнойСтроки Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаБутылкиБезУпаковки(Форма)
	
	Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторСтрокиБутылкиБезУпаковки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТекущейПроверяемойУпаковки(Форма, ЭтоУпаковка)
	
	Если Форма.ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		
		Если ЭтоУпаковка Тогда
			Возврат Неопределено;
		Иначе
			Возврат СтрокаБутылкиБезУпаковки(Форма);
		КонецЕсли;
		
	Иначе
		
		Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СканированиеСуществующихУпаковокИАлкогольнойПродукции

&НаСервере
Процедура ДобавитьДанныеСуществующейУпаковкиВДеревоМаркированнойПродукции(ШтрихкодУпаковки, СоответствиеШтрихкодовСтрокДерева)

	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкодыУпаковок(ШтрихкодУпаковки, ОрганизацияЕГАИС);
	
	Если ДанныеУпаковки.ДеревоУпаковок.Строки.Количество() = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, 
	                                                             ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(ШтрихкодУпаковки.ТипУпаковки));
	
	Если СтрокаПроверяемойУпаковки = Неопределено Тогда
		
		КоллекцияСтрокПриемника = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Иначе
		
		КоллекцияСтрокПриемника   = СтрокаПроверяемойУпаковки.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Если СтрокаПроверяемойУпаковки <> Неопределено Тогда
		СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась;
	Иначе
		СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии;
	КонецЕсли;
	
	ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(ДанныеУпаковки.ДеревоУпаковок.Строки[0], 
	                                                                 КоллекцияСтрокПриемника,
	                                                                 СоответствиеШтрихкодовСтрокДерева,
	                                                                 СтатусПроверки,
	                                                                 Истина);
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> -1 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторТекущейПроверяемойУпаковки, Истина);
	КонецЕсли;
	
	КоличествоСтрокПодобраннойАлкогольнойПродукции = АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Количество();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(СтрокаИсточника,
	                                                                       КоллекцияСтрокПриемника, 
	                                                                       СоответствиеШтрихкодовСтрокДерева, 
	                                                                       СтатусПроверки, 
	                                                                       ЭтоПерваяДобавляемаяСтрока)

	НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
	НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	ИдентификаторДобавленнойСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.ЗначениеШтрихкода, ИдентификаторДобавленнойСтроки);
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	НоваяСтрока.СтатусПроверки = СтатусПроверки;
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		УпаковкиДокумента.Добавить(НоваяСтрока.ЗначениеШтрихкода);
	КонецЕсли;

	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(ПодчиненнаяСтрокаИсточника,
		                                                                 КоллекцияСтрокДобавленнойСтроки,
		                                                                 СоответствиеШтрихкодовСтрокДерева,
		                                                                 Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась,
		                                                                 Ложь);
		
	КонецЦикла;
	
	ОпределениеСправок2ПриДобавленииСтроки(ЭтотОбъект, НоваяСтрока);
	
	УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ИнтеграцияЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь);
	СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	
	Если ЭтоПерваяДобавляемаяСтрока Тогда

		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеСправок2АлкогольнойПродукции

&НаСервере
Процедура ОпределениеСправок2ПриУдаленииСтроки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАлкогольнойПродукцииНайдена           = Ложь;
	НайденнаяСтрокаСПустойАлкогольнойПродукцией = Неопределено;
	
	Для Каждого СтрокаАлкогольнойПродукции Из АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И СтрокаДерева.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И СтрокаДерева.АлкогольнаяПродукция = СтрокаАлкогольнойПродукции.АлкогольнаяПродукция
			И СтрокаДерева.Серия = СтрокаАлкогольнойПродукции.Серия Тогда
			
			СтрокаАлкогольнойПродукцииНайдена = Истина;
			
			УменьшитьКоличествоОпределеннойСправки2(СтрокаАлкогольнойПродукции, 
			                                        СтрокаДерева,
			                                        АлкогольнаяПродукцияКОпределениюСправок2);
			
			Возврат;
			
		ИначеЕсли СтрокаДерева.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И СтрокаДерева.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И СтрокаДерева.Серия = СтрокаАлкогольнойПродукции.Серия
			И Не ЗначениеЗаполнено(СтрокаАлкогольнойПродукции.АлкогольнаяПродукция) Тогда
			
			НайденнаяСтрокаСПустойАлкогольнойПродукцией = СтрокаАлкогольнойПродукции;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденнаяСтрокаСПустойАлкогольнойПродукцией <> Неопределено Тогда
		
		УменьшитьКоличествоОпределеннойСправки2(НайденнаяСтрокаСПустойАлкогольнойПродукцией, 
		                                        СтрокаДерева,
		                                        АлкогольнаяПродукцияКОпределениюСправок2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УменьшитьКоличествоОпределеннойСправки2(СтрокаАлкогольнойПродукции, СтрокаДерева, АлкогольнаяПродукцияКОпределениюСправок2)

	СтрокаАлкогольнойПродукции.КоличествоРаспределено = СтрокаАлкогольнойПродукции.КоличествоРаспределено - 1;
	ОпределитьИндексКартинкиСостояниеПодбораАкцизныхМарок(СтрокаАлкогольнойПродукции);
		
	СтрокаРаспределенияСправка2Найдена = Ложь;
		
	Для Каждого СтрокаРаспределения Из СтрокаАлкогольнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаРаспределения.Справка2 = СтрокаДерева.Справка2 Тогда
			
			СтрокаРаспределенияСправка2Найдена = Истина;
			СтрокаРаспределения.КоличествоРаспределено = СтрокаРаспределения.КоличествоРаспределено - 1;
			
			Если СтрокаРаспределения.КоличествоРаспределено = 0 Тогда
				
				СтрокаАлкогольнойПродукции.ПолучитьЭлементы().Удалить(СтрокаРаспределения);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаАлкогольнойПродукции.КоличествоРаспределено = 0 
		И СтрокаАлкогольнойПродукции.Количество = 0 Тогда
		
		АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Удалить(СтрокаАлкогольнойПродукции);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределениеСправок2ПриДобавленииСтроки(Форма, СтрокаДерева, ОшибкаКонтроля = Ложь)
	
	Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАлкогольнойПродукцииНайдена           = Ложь;
	НайденнаяСтрокаСПустойАлкогольнойПродукцией = Неопределено;
	
	Для Каждого СтрокаАлкогольнойПродукции Из Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И СтрокаДерева.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И СтрокаДерева.АлкогольнаяПродукция = СтрокаАлкогольнойПродукции.АлкогольнаяПродукция
			И СтрокаДерева.Серия = СтрокаАлкогольнойПродукции.Серия Тогда
			
			СтрокаАлкогольнойПродукцииНайдена = Истина;
			
			ДобавитьКоличествоОпределеннойСправки2(СтрокаАлкогольнойПродукции, СтрокаДерева);
			
			Прервать;
			
		ИначеЕсли СтрокаДерева.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И СтрокаДерева.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И СтрокаДерева.Серия = СтрокаАлкогольнойПродукции.Серия
			И Не ЗначениеЗаполнено(СтрокаАлкогольнойПродукции.АлкогольнаяПродукция) Тогда
			
			НайденнаяСтрокаСПустойАлкогольнойПродукцией = СтрокаАлкогольнойПродукции;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаАлкогольнойПродукцииНайдена
		И НайденнаяСтрокаСПустойАлкогольнойПродукцией <> Неопределено Тогда
		
		СтрокаАлкогольнойПродукцииНайдена = Истина;
		
		ДобавитьКоличествоОпределеннойСправки2(НайденнаяСтрокаСПустойАлкогольнойПродукцией, СтрокаДерева);
		
	КонецЕсли;
	
	Если Не СтрокаАлкогольнойПродукцииНайдена Тогда
		
		Если Не Форма.КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		
			НоваяСтрока = Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.Справка2               = ПредопределенноеЗначение("Справочник.Справки2ЕГАИС.ПустаяСсылка");
			НоваяСтрока.КоличествоРаспределено = 1;
			НоваяСтрока.Маркируемая            = Истина;
			
			СтрокаРаспределения = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаДерева);
			СтрокаРаспределения.КоличествоРаспределено = 1;
			
			ОпределитьИндексКартинкиСостояниеПодбораАкцизныхМарок(НоваяСтрока);
			
		Иначе
			
			ОшибкаКонтроля = Истина;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьКоличествоОпределеннойСправки2(СтрокаАлкогольнойПродукции, СтрокаДерева)

	СтрокаАлкогольнойПродукции.КоличествоРаспределено = СтрокаАлкогольнойПродукции.КоличествоРаспределено + 1;
	ОпределитьИндексКартинкиСостояниеПодбораАкцизныхМарок(СтрокаАлкогольнойПродукции);
	
	СтрокаРаспределенияСправка2Найдена = Ложь;
	
	Для Каждого СтрокаРаспределения Из СтрокаАлкогольнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаРаспределения.Справка2 = СтрокаДерева.Справка2 Тогда
			
			СтрокаРаспределенияСправка2Найдена = Истина;
			СтрокаРаспределения.КоличествоРаспределено = СтрокаРаспределения.КоличествоРаспределено + 1;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаРаспределенияСправка2Найдена Тогда
		
		СтрокаРаспределения = СтрокаАлкогольнойПродукции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаДерева);
		СтрокаРаспределения.Количество             = 0;
		СтрокаРаспределения.КоличествоРаспределено = СтрокаРаспределения.КоличествоРаспределено + 1;
		СтрокаРаспределения.Маркируемая            = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуИзмененияАлкогольнойПродукции()

	Для Каждого СтрокаТаблицы Из ТаблицаИзмененийАлкогольнойПродукции Цикл
		
		Если СтрокаТаблицы.Изменение = 1 Тогда
			
			Если РежимПодбораСуществующихУпаковок Тогда
				
				ОпределениеСправок2ПриДобавленииСтроки(ЭтотОбъект, СтрокаТаблицы);
				
			Иначе
				
				ИзменитьДанныеПулаАлкогольнойПродукции(ЭтотОбъект, 
				                                       СтрокаТаблицы.АлкогольнаяПродукция, 
				                                       СтрокаТаблицы.Справка2,
				                                       Ложь);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.Изменение = - 1 Тогда
			
			Если РежимПодбораСуществующихУпаковок Тогда
			
				ОпределениеСправок2ПриУдаленииСтроки(СтрокаТаблицы);
				
			Иначе
				
				ИзменитьДанныеПулаАлкогольнойПродукции(ЭтотОбъект, 
					                                   СтрокаТаблицы.АлкогольнаяПродукция, 
					                                   СтрокаТаблицы.Справка2,
					                                   Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрокПодобраннойАлкогольнойПродукции = АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Количество();
	
	ТаблицаИзмененийАлкогольнойПродукции.Очистить();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева, Изменение)
	
	НоваяСтрока = ТаблицаИзмененийАлкогольнойПродукции.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
	НоваяСтрока.Изменение = Изменение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуСПодчиненнымиВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева)
	
	ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева, - 1);
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ПодчиненнаяСтрока, - 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтработатьСканированиеНеМаркированнойПродукцииВДеревеПодобраннойПродукции(Форма,
	                                                                                ДанныеШтрихкода,
	                                                                                ШтрихКодОбработан)

	СтрокаАлкогольнойПродукцииНайдена = Ложь;
	
	КоллекцияСтрок = Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы();
	
	Для Каждого СтрокаАлкогольнойПродукции Из КоллекцияСтрок Цикл
		
		Если ДанныеШтрихкода.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И ДанныеШтрихкода.Характеристика = СтрокаАлкогольнойПродукции.Характеристика Тогда
			
			СтрокаАлкогольнойПродукции.КоличествоРаспределено = СтрокаАлкогольнойПродукции.КоличествоРаспределено + 1;
			
			СтрокаАлкогольнойПродукцииНайдена = Истина;
			ШтрихКодОбработан                 = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаАлкогольнойПродукцииНайдена 
		И Не Форма.КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		
		НоваяСтрока = КоллекцияСтрок.Добавить();
		НоваяСтрока.Номенклатура           = ДанныеШтрихкода.Номенклатура;
		НоваяСтрока.Характеристика         = ДанныеШтрихкода.Характеристика;
		НоваяСтрока.Маркируемая            = Ложь;
		НоваяСтрока.КоличествоРаспределено = 1;
		
		ШтрихКодОбработан          = Истина;
		
		Форма.КоличествоСтрокПодобраннойАлкогольнойПродукции = КоллекцияСтрок.Количество();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьИндексКартинкиСостояниеПодбораАкцизныхМарок(СтрокаДерева)
	
	Если СтрокаДерева.Маркируемая Тогда
		
		Если СтрокаДерева.КоличествоРаспределено >= СтрокаДерева.Количество Тогда
			
			СтрокаДерева.ИндексАкцизнойМарки = 1;
			
		Иначе
			
			СтрокаДерева.ИндексАкцизнойМарки = 2;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаДерева.ИндексАкцизнойМарки = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПризнакПроверкиУпаковки

&НаКлиенте
Процедура ИзменитьСостояниеПроверкиУпаковки(СтрокаДерева)

	Если Не ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
		
		СнятьПризнакПроверкиУпаковки(СтрокаДерева);
		
	Иначе
		
		УстановитьПризнакПроверкиУпаковки(СтрокаДерева);
		
	КонецЕсли;
	
	ИнтеграцияЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура СнятьПризнакПроверкиУпаковки(СтрокаДерева, ВключаяРодителей = Ложь)
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Ложь;
	Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	ИнтеграцияЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			СнятьПризнакПроверкиУпаковки(ПодчиненнаяСтрока);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева.КоличествоПодчиненныхВсего  > 6
		И СтрокаДерева.КоличествоПодчиненныхНеПроверялось < 4 Тогда
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась") Тогда
				
				ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует");
				
				УстановитьСтатусОтсутствуетДляПодчиненных(ПодчиненнаяСтрока);
				
			КонецЕсли;
			
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если ВключаяРодителей Тогда
		
		Пока СтрокаРодитель <> Неопределено Цикл
			
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Ложь;
			ИнтеграцияЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаРодитель);
			Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаРодитель.ПолучитьИдентификатор());
			СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
			
		КонецЦикла;
		
		ИдентификаторТекущейПроверяемойУпаковки = -1;
		
	Иначе
		
		Если СтрокаРодитель = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		Иначе
			ИдентификаторТекущейПроверяемойУпаковки = СтрокаРодитель.ПолучитьИдентификатор();
		КонецЕсли;

	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПроверкиУпаковки(СтрокаДерева)

	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Если СтрокаРодитель.ИдетПроверкаДаннойУпаковки Тогда
			Прервать;
		Иначе
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Истина;
			ИнтеграцияЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
		КонецЕсли;
		
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Истина;
	Модифицированность                      = Истина;
	ИнтеграцияЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	ИдентификаторТекущейПроверяемойУпаковки = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКонтекстПроверки(НоваяПроверяемаяУпаковка)
	
	Если НоваяПроверяемаяУпаковка = Неопределено Тогда
		ИдентификаторНовойПроверяемойУпаковки = -1;
	Иначе
		ИдентификаторНовойПроверяемойУпаковки = НоваяПроверяемаяУпаковка.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ИдентификаторНовойПроверяемойУпаковки = ИдентификаторТекущейПроверяемойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПроверяемаяУпаковка = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
	Если ТекущаяПроверяемаяУпаковка <> Неопределено Тогда
		СнятьПризнакПроверкиУпаковки(ТекущаяПроверяемаяУпаковка, Истина);
	КонецЕсли;
	
	Если НоваяПроверяемаяУпаковка <> Неопределено Тогда
		УстановитьПризнакПроверкиУпаковки(НоваяПроверяемаяУпаковка);
		ИдентификаторТекущейПроверяемойУпаковки = ИдентификаторНовойПроверяемойУпаковки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки)

	Если НЕ ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = ДоступныеДляПроверкиУпаковки.НайтиПоЗначению(СтрокаДерева.ЗначениеШтрихкода);
	
	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии")
		Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена")
		Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
		
		Если ЭлементСписка = Неопределено Тогда
			ДоступныеДляПроверкиУпаковки.Добавить(СтрокаДерева.ЗначениеШтрихкода);
		КонецЕсли;
		
	Иначе
		
		Если ЭлементСписка <> Неопределено Тогда
			ДоступныеДляПроверкиУпаковки.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПослеВопросаПриЗакрытииФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область СтатусПроверки

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииОбменСГИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверке);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимПросмотра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти

#Область ПроверкаСодержимого

	НепроверяемыеТипыУпаковок = Новый СписокЗначений;
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки);

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхБутылок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтложено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверке);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = НепроверяемыеТипыУпаковок;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСодержитсяВДанныхДокумента");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ВсяУпаковкаПроверена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииОбменСГИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеПроверялось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВНаличии.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтсутствует.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеЧислилось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтложено.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВсего.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаНеТребуетВниманияЕГАИС);
	
#КонецОбласти

#Область СодержимоеУпаковки

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхБутылок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТребуетсяПеремаркировка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
#КонецОбласти

#Область НомерСтикераОтолжена

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НомерСтикераОтложено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не помечена>'"));

#КонецОбласти

#Область Отборы

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УстановленОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтбору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

#КонецОбласти

#Область ПодобраннаяПродукция

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2КоличествоРаспределено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.Маркируемая");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2Характеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.Характеристика");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2АлкогольнаяПродукция.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.АлкогольнаяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не сопоставлена>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2Номенклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не сопоставлена>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
#КонецОбласти

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпозиционироватьсяНаСтрокеДерева(Форма, СтрокаДерева)
	
	Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСоответствияШтрихкодовДляКоллекции(КоллекцияСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		
		СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаДерева.ЗначениеШтрихкода);
		УдалитьИзСоответствияШтрихкодовДляКоллекции(СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
