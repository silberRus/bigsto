&НаКлиенте
Перем СоздаватьМаршрутныеЛисты, ЗадаватьВопрос; 

&НаСервере
Процедура СоздатьМаршрутныеЗаданияНаСервере(МассивСообщений)
	
	ТЗМЗ=Новый ТаблицаЗначений;
	ТЗМЗ.Колонки.Добавить("МЗ");
	ТЗМЗ.Колонки.Добавить("Курьер");
	///////////////////////////////////////////
	//Мироненко Д.С 02.11.2016 15:15:48 НАЧАЛО
	//Комментарий: Добавлен порядок объеезда из Максоптра
	ТЗМЗ.Колонки.Добавить("ПорядкаОбъезда");
	//Мироненко Д.С 02.11.2016 15:16:23 КОНЕЦ
	///////////////////////////////////////////
	
	//Создадим машрутные задания
	Для Каждого СтрокаТаблицыАдресов из ТаблицаАдресов цикл		
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыАдресов.Курьер) тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТаблицыАдресов.ДокументОснование) = Тип("ДокументСсылка.МегаЛогист_МаршрутноеЗадание") тогда
			МЗ=СтрокаТаблицыАдресов.ДокументОснование.ПолучитьОбъект();
			МЗ.Курьер=СтрокаТаблицыАдресов.Курьер;
			МЗ.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.КВыполнению;
			МЗ.Записать(РежимЗаписиДокумента.Проведение);
		иначе	
			МЗ=Документы.МегаЛогист_МаршрутноеЗадание.СоздатьДокумент();
			
			МЗ.Заполнить(Неопределено);
			
			МЗ.Дата=ТекущаяДата();
			МЗ.АдресДоставки=СтрокаТаблицыАдресов.АдресДоставки;
			МЗ.ВремяДоставкиПо=СтрокаТаблицыАдресов.ВремяДоставкиПо;
			МЗ.ВремяДоставкиС=СтрокаТаблицыАдресов.ВремяДоставкиС;
			МЗ.ДатаДоставки=ДатаДоставки;
			МЗ.ДокументОснование=СтрокаТаблицыАдресов.ДокументОснование;
			МЗ.КомментарийКДоставке=СтрокаТаблицыАдресов.Комментарий;
			МЗ.Контрагент=СтрокаТаблицыАдресов.Контрагент;
			МЗ.Курьер=СтрокаТаблицыАдресов.Курьер;
			МЗ.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.КВыполнению;
			МЗ.ТипЗадания=СтрокаТаблицыАдресов.ТипЗадания;
			Если ЗначениеЗаполнено(МЗ.Контрагент) тогда
				Если МЗ.Контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо
					или МЗ.Контрагент.ЮрФизЛицо=Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо тогда
					КонтактноеЛицо=МЗ.Контрагент.Наименование + " тел.:"
					+ ФормированиеПечатныхФорм.ПолучитьТелефонИзКонтактнойИнформации(МЗ.Контрагент);
				иначе
					КонтактноеЛицо=МЗ.ДокументОснование.КонтактноеЛицо.Наименование + " тел.:"
					+ МегаЛогист_Общий.ПолучитьТелефонИзКонтактнойИнформации(МЗ.ДокументОснование.КонтактноеЛицо);
				КонецЕсли;	
			КонецЕсли;	
			Если МЗ.ТипЗадания=Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ДоставкаВТК тогда
				КонтактноеЛицо=МегаЛогист_Общий.ПолучитьКонтактноеЛицо(МЗ.ДокументОснование.ПеревозчикПартнер);
				КонтактноеЛицо=КонтактноеЛицо.Наименование + " тел.:"
				+ МегаЛогист_Общий.ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо);
			КонецЕсли;
			//+АТ Терентьев
			Если ТипЗнч(СтрокаТаблицыАдресов.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				КонтактноеЛицо = АТ_ПолучитьКонтактноеЛицо(СтрокаТаблицыАдресов.ДокументОснование);
			КонецЕсли;
			Если ТипЗнч(СтрокаТаблицыАдресов.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				КонтактноеЛицо = "";
			КонецЕсли;
			//-АТ Терентьев
			МЗ.КонтактноеЛицо=КонтактноеЛицо;
			МЗ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
		
		НоваяСтрока=ТЗМЗ.Добавить();
		НоваяСтрока.МЗ=МЗ.Ссылка;
		НоваяСтрока.Курьер=МЗ.Курьер;
		///////////////////////////////////////////
		//Мироненко Д.С 02.11.2016 15:15:48 НАЧАЛО
		//Комментарий: Добавлен порядок объеезда из Максоптра
		НоваяСтрока.ПорядкаОбъезда = СтрокаТаблицыАдресов.ПорядкаОбъезда;
		//Мироненко Д.С 02.11.2016 15:16:23 КОНЕЦ
		///////////////////////////////////////////
		
	КонецЦикла;
	
	//Если ТЗМЗ.Количество()=0 тогда		
	//	ТекстСообщения="Выберите адреса и курьеров для создания маршрутных листов";
	//	МассивСообщений.Добавить(ТекстСообщения);		
	//КонецЕсли;	
	
	//Создадим машрутные листы
	ТЗКурьеров=ТЗМЗ.Скопировать();
	ТЗКурьеров.Свернуть("Курьер");
	Для Каждого СтрокаКурьера из ТЗКурьеров цикл
		
		МЛ=Документы.МегаЛогист_МаршрутныйЛист.СоздатьДокумент();
		
		МЛ.Заполнить(Неопределено);
		
		МЛ.Дата=ТекущаяДата();
		МЛ.ДатаОтправки=ДатаДоставки;
		МЛ.Курьер=СтрокаКурьера.Курьер;
		МЛ.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.КВыполнению;
		
		//Транспорт
		НайденныеСтроки=ТаблицаКурьеров.НайтиСтроки(Новый Структура("Курьер",СтрокаКурьера.Курьер));
		Если НайденныеСтроки.Количество() > 0 Тогда
			МЛ.Транспорт=НайденныеСтроки[0].Транспорт;
			///////////////////////////////////////////
			//Мироненко Д.С 13.04.2018 10:24:04 НАЧАЛО
			//Комментарий: Запись плановых реквизитов
			
			МЛ.ПлановаяСтоимостьРейса 		= НайденныеСтроки[0].ПлановаяСтоимостьРейса; 
			МЛ.ПлановыйПробег 				= НайденныеСтроки[0].ПлановыйПробег; 
			МЛ.ПлановаяПродолжительность 	= НайденныеСтроки[0].ПлановаяПродолжительность; 
			
			
			//Мироненко Д.С 13.04.2018 10:24:19 КОНЕЦ
			///////////////////////////////////////////
		КонецЕсли;	
		//Маршрутные задания
		НайденныеСтроки=ТЗМЗ.НайтиСтроки(Новый Структура("Курьер",СтрокаКурьера.Курьер));
		Для Каждого НайденнаяСтрока из НайденныеСтроки цикл
			НоваяСтрока=МЛ.МаршрутныеЗадания.Добавить();
			НоваяСтрока.МаршрутноеЗадание=НайденнаяСтрока.МЗ;
			///////////////////////////////////////////
			//Мироненко Д.С 02.11.2016 15:15:48 НАЧАЛО
			//Комментарий: Добавлен порядок объеезда из Максоптра
			НоваяСтрока.ПорядкаОбъезда = НайденнаяСтрока.ПорядкаОбъезда;
			//Мироненко Д.С 02.11.2016 15:16:23 КОНЕЦ
			///////////////////////////////////////////
		КонецЦикла;
		
		МЛ.Последовательность();
		МЛ.Записать(РежимЗаписиДокумента.Проведение);
			
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Создан Маршрутный лист №%1 на %2 для курьера %3'"), МЛ.Номер, МЛ.ДатаОтправки,МЛ.Курьер);
		МассивСообщений.Добавить(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьТаблицуКурьеров()
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	МегаЛогист_Маркеры.Ссылка КАК Маркер,
	             |	МегаЛогист_Маркеры.ЦветПолиЛинии
	             |ИЗ
	             |	Справочник.МегаЛогист_Маркеры КАК МегаЛогист_Маркеры
	             |ГДЕ
	             |	МегаЛогист_Маркеры.Активный = ИСТИНА
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	МегаЛогист_Маркеры.Наименование";
	Результат=Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		НоваяСтрока=ТаблицаКурьеров.Добавить();
		НоваяСтрока.Маркер=Результат.Маркер;
		НоваяСтрока.Маркер1=ПолучитьНавигационнуюСсылку(НоваяСтрока.Маркер,"Маркер1");
		НоваяСтрока.Маркер2=ПолучитьНавигационнуюСсылку(НоваяСтрока.Маркер,"Маркер2");
		НоваяСтрока.ЦветПолиЛинии=Результат.ЦветПолиЛинии;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщения(МассивСообщений)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.ИдентификаторНазначения=ЭтаФорма.ВладелецФормы.УникальныйИдентификатор;
	Для Каждого ТекстСообщения из МассивСообщений цикл
		Сообщение.Текст = ТекстСообщения;
	    Сообщение.Сообщить();
	КонецЦикла;	
	
КонецПроцедуры	

#Область ПроцедурыПоляHTMLДокумента

&НаКлиенте
Процедура КартаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Event.srcElement.id = "callback_1C" Тогда
		МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеСобытия.Event.srcElement.title, "<se_param>", Истина, Истина);
		Если ДанныеСобытия.Event.srcElement.innerHTML = "SearchError" Тогда
			
			СтруктураОтбора = Новый Структура("Ид", Число(МассивПараметров[0]));
			МассивСтрок = ТаблицаАдресов.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			СтрокаТаблицы = МассивСтрок[0];
			Если МассивПараметров.Количество() > 1 И Найти(МассивПараметров[1], "#2") <> 0 Тогда
			
				Сообщить("Не удалось поставить маркер по адресу: """ + СтрокаТаблицы.АдресДоставки +""" (номер строки: " + (ТаблицаАдресов.Индекс(СтрокаТаблицы) + 1) + "). Попробуйте нанести адрес на карту еще раз.");
			
			Иначе
			
				Сообщить("При установке маркера по адресу: """ + СтрокаТаблицы.АдресДоставки +""" (номер строки: " + (ТаблицаАдресов.Индекс(СтрокаТаблицы) + 1) + ") произошла ошибка сервера или геокодирования");
			
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Event.srcElement.innerHTML = "SearchOverBoundary" Тогда
			
			СтруктураОтбора = Новый Структура("Ид", Число(МассивПараметров[0]));
			МассивСтрок = ТаблицаАдресов.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			СтрокаТаблицы = МассивСтрок[0];
			Сообщить("При установке маркера по адресу: """ + СтрокаТаблицы.АдресДоставки +""" (номер строки: " + (ТаблицаАдресов.Индекс(СтрокаТаблицы) + 1) + ") был найден за пределами ограничительного прямоугольника");
			
		ИначеЕсли ДанныеСобытия.Event.srcElement.innerHTML = "UpdateSelected" Тогда
			МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеСобытия.Event.srcElement.title, ",", Истина, Истина);
			Для каждого СтрокаТЧ Из ТаблицаАдресов Цикл
			
				СтрокаТЧ.СтрокаВыбранаНаКарте = Ложь;
			
			КонецЦикла;
			Для каждого СтрокаМассива Из МассивПараметров Цикл
				
				Попытка
				
					СтруктураОтбора = Новый Структура("Ид", Число(СтрокаМассива));
					МассивСтрок = ТаблицаАдресов.НайтиСтроки(СтруктураОтбора);
					Если МассивСтрок.Количество() = 0 Тогда
						Возврат;
					КонецЕсли;
					СтрокаТаблицы = МассивСтрок[0];
					СтрокаТаблицы.СтрокаВыбранаНаКарте = Истина;
				
				Исключение
					Продолжить;
				КонецПопытки;
			
			КонецЦикла;
		ИначеЕсли ДанныеСобытия.Event.srcElement.innerHTML = "EndSetMarkerManually" Тогда
			МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеСобытия.Event.srcElement.title, "<se_param>", Истина, Истина);
			СтруктураОтбора = Новый Структура("Ид", Число(МассивПараметров[0]));
			МассивСтрок = ТаблицаАдресов.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			СтрокаТаблицы = МассивСтрок[0];
			СтрокаТаблицы.Широта 	= МассивПараметров[1];
			СтрокаТаблицы.Долгота 	= МассивПараметров[2];
			
			//Запись в регистр "Сохраненные адреса"
			//ЗаписатьАдресВРегистр(СтрокаТаблицы.АдресДоставкиПриведенный, МассивПараметров[1],МассивПараметров[2]);
		ИначеЕсли ДанныеСобытия.Event.srcElement.innerHTML = "CoordsFineded" Тогда
			МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеСобытия.Event.srcElement.title, "<se_param>", Истина, Истина);
			Если МассивПараметров[0] = "900000" Тогда  // Обработка поиска координат склада
				ШиротаСклада 	= МассивПараметров[1];
				ДолготаСклада 	= МассивПараметров[2];
			Иначе
			КонецЕсли;
			СтруктураОтбора = Новый Структура("Ид", Число(МассивПараметров[0]));
			МассивСтрок = ТаблицаАдресов.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			СтрокаТаблицы = МассивСтрок[0];
			СтрокаТаблицы.Широта 	= МассивПараметров[1];
			СтрокаТаблицы.Долгота 	= МассивПараметров[2];
			
			Если ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.МегаЛогист_МаршрутноеЗадание")  Тогда
				
				ЗаписатьМаршрутноеЗаданиеСервер(СтрокаТаблицы.ДокументОснование, СтрокаТаблицы.Широта, СтрокаТаблицы.Долгота, СтрокаТаблицы.Вес, СтрокаТаблицы.Объем);
			
			КонецЕсли;
		Иначе
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьМаршрутноеЗаданиеСервер(Ссылка, Широта, Долгота, Вес, Объем)

	Документ = Ссылка.ПолучитьОбъект();
	Документ.Широта 	= Широта;
	Документ.Долгота 	= Долгота;
	Документ.Вес 		= Вес;
	Документ.Объем 		= Объем;
	Документ.Записать();

КонецПроцедуры


&НаКлиенте
Процедура КартаHTMLДокументСформирован(Элемент)
	
	Если Не ПервыйВызов Тогда
	
		ПервыйВызов = Истина;
		Возврат;
	
	КонецЕсли; 
	
	Попытка
	    Если Не КартаИнициализирована Тогда
			
			СтрокаИнициализации = ПолучитьСтрокуИнициализацииСервер();
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИнициализации, ",", Истина);
			Если МассивСтрок.Количество() <> 25 Тогда
			
				Сообщить("Карта не может быть отображена. Проверьте настройки инициализации карты");
				Возврат;
			
			КонецЕсли;
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_initialize(МассивСтрок[0], 
			//														МассивСтрок[1], 
			//														МассивСтрок[2], 
			//														МассивСтрок[3], 
			//														МассивСтрок[4], 
			//														МассивСтрок[5],
			//														МассивСтрок[6],
			//														МассивСтрок[7],
			//														МассивСтрок[8],
			//														МассивСтрок[9],
			//														МассивСтрок[10],
			//														МассивСтрок[11],
			//														МассивСтрок[12],
			//														МассивСтрок[13],
			//														МассивСтрок[14],
			//														МассивСтрок[15],
			//														МассивСтрок[16],
			//														МассивСтрок[17],
			//														МассивСтрок[18],
			//														ПолучитьИмяГеокодера());
			МегаЛогист_Служебный.Инициализация(Элементы, МассивСтрок, ПолучитьИмяГеокодера(), ПолучитьКлючАПИ());
			КартаИнициализирована = Истина;
			ПодключитьОбработчикОжидания("ЗаполнитьМаркерыНаКарте", 1, Истина);
			
		КонецЕсли;
	Исключение
	
	КонецПопытки;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючАПИ()

	Возврат МегаЛогист_Служебный.ПолучитьКлючАПИ();

КонецФункции

#КонецОбласти

#Область Служебные

&НаСервере
Функция ПолучитьСтрокуИнициализацииСервер()

	Возврат Константы.МегаЛогист_ПараметрыИнициализацииOSM.Получить();

КонецФункции

&НаСервере
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты = "") 

	Возврат Константы[ИмяКонстанты].Получить();

КонецФункции // ПолучитьЗначениеКонстанты()

&НаКлиенте
Функция ПолучитьУИДПоНавигационнойСсылке(Ссылка)
	GUID = Неопределено;
	ПозицияНачало = Найти(Ссылка, "?ref=");
	Если ПозицияНачало <> 0 Тогда      
		Уид = Сред(Ссылка, ПозицияНачало+5, 32);
		УидСтрока = Прав(Уид, 8)
		+ "-" + Сред(Уид, 21, 4)
		+ "-" + Сред(Уид, 17, 4)
		+ "-" + Лев(Уид, 4)
		+ "-" + Сред(Уид, 5, 12);
		GUID = Новый УникальныйИдентификатор(УидСтрока);
	КонецЕсли;
	Возврат(GUID);
КонецФункции

&НаСервере
Функция ВыгрузитьКартинкуСервер(Маркер, ИмяКартинки, ИмяРеквизита)
 
	Если ТипЗнч(Маркер) = Тип("УникальныйИдентификатор") Тогда
	
		Маркер = Справочники.МегаЛогист_Маркеры.ПолучитьСсылку(Маркер);
	
	КонецЕсли;
	Картинка = Маркер[ИмяРеквизита].Получить();
	Картинка.Записать(КаталогВременныхФайлов() + ИмяКартинки);
	
	Двоичное 	= Новый ДвоичныеДанные(КаталогВременныхФайлов() + ИмяКартинки);
	Адрес 		= ПоместитьВоВременноеХранилище(Двоичное, ЭтаФорма.УникальныйИдентификатор);
	Возврат Адрес;

КонецФункции // ВыгрузитьКартинкуСервер()

// Функция приводит навигационную ссылку к временному имени маркера
//
// Параметры
//  СтрокаПриведения  - Строка - <описание параметра>
//
// Возвращаемое значение:
//   СТрока   - <описание возвращаемого значения>
//
Функция ПривестиИмяМаркера(Знач СтрокаПриведения, Знач Реквизит)

	ПозицияСимвола = Найти(СтрокаПриведения, "?ref=") + 5;
	//СтрокаВозврата = СтрЗаменить(СтрокаПриведения, "/", "");
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "\", "");
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "?", "");
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата, ".", "");
	СтрокаВозврата = Сред(СтрокаПриведения, ПозицияСимвола, СтрДлина(СтрокаПриведения) - (ПозицияСимвола - 1));
	
	Возврат "" + Реквизит + "_" + СтрокаВозврата + ".png";

КонецФункции // ПривестиИмяМаркера()

&НаКлиенте
Процедура ЗаполнитьМаркерыНаКарте()

	Для каждого СтрокаТаблицы Из ТаблицаАдресов Цикл
		
		СписокКПереносуНаКарту.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	//Отобразим склад
	АдресСклада = ПолучитьАдресСклада(Склад);
	Если АдресСклада <> Неопределено Тогда

		СтрокаТаблицы = Новый Структура("АдресДоставкиПриведенный, ТипЗадания");
		СтрокаТаблицы.Вставить("АдресДоставкиПриведенный",АдресСклада); 
		СтрокаТаблицы.Вставить("ТипЗадания", "Курьеры");
		//МегаЛогист_Служебный.ДобавитьМаркерАдрес(Элементы, СтруктураВозврата, СтрокаТаблицы, 9999, "warehouse.png", "", "", "", "transport");
		МегаЛогист_Служебный.ДобавитьМаркерАдрес(Элементы, СтрокаТаблицы, 900000,"warehouse.png", "");
		                                                                                        
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресСклада(Склад)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|ГДЕ
	|	СкладыКонтактнаяИнформация.Ссылка = &Склад
	|	И СкладыКонтактнаяИнформация.Тип = &Тип
	|	И СкладыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресСклада);
	
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Представление;
		
	Иначе
		Сообщить("У выбранного склада отсутствует адрес в справочнике складов. Заполните адрес, иначе склад не будет показан на карте!");
		Возврат Неопределено;
	
	КонецЕсли;
	
КонецФункции // ПолучитьАдресСклада()


&НаСервере
Процедура ЗаписатьАдресВРегистр(Адрес, Широта, Долгота)

	МенеджерЗаписи = РегистрыСведений.МегаЛогист_СохраненныеАдреса.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПредставлениеАдреса = Адрес;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ПредставлениеАдреса 	= Адрес;
	МенеджерЗаписи.Широта 								= Широта;
	МенеджерЗаписи.Долгота 								= Долгота;
	МенеджерЗаписи.Записать();	

КонецПроцедуры

&НаСервере 
// производится проверка переданного адреса по регистру "Сохраненные адреса"
//
// Параметры
//  Адрес - Строка
//
// Возвращаемое значение:
//   Структура   - структура возврата
//
Функция ПроверитьВнесениеАдреса(Адрес)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МегаЛогист_СохраненныеАдреса.Широта,
	|	МегаЛогист_СохраненныеАдреса.Долгота
	|ИЗ
	|	РегистрСведений.МегаЛогист_СохраненныеАдреса КАК МегаЛогист_СохраненныеАдреса
	|ГДЕ
	|	МегаЛогист_СохраненныеАдреса.ПредставлениеАдреса = &ПредставлениеАдреса";
	
	Запрос.УстановитьПараметр("ПредставлениеАдреса", Адрес);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("Широта, Долгота", Выборка.Широта, Выборка.Долгота)
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли; 	

КонецФункции // ПроверитьВнесениеАдреса()

&НаКлиенте
Процедура ПроверитьИСохранитьАдреса()

	Если АдресаСохранены Тогда
	
		Возврат;
	
	КонецЕсли;
	//Сохранение установленных вручную адресов
	СохранятьАдреса = Истина;
	НуженВопрос = ПолучитьЗначениеКонстанты("МегаЛогист_ЗапрашиватьПодтверждениеСохранениеАдреса");
	Если НуженВопрос Тогда
		//Если Вопрос("Вы хотите сохранить адреса, установленные вручную?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		//	СохранятьАдреса = Ложь;
		//КонецЕсли;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьИСохранитьАдресаОтветНаВопрос",ЭтаФорма),"Вы хотите сохранить адреса, установленные вручную?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	АдресаСохранены = Истина;
	ПроверитьИСохранитьАдресаПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИСохранитьАдресаПродолжение()

	Для каждого СтрокаТаблицыАдресов Из ТаблицаАдресов Цикл
		Если 	ЗначениеЗаполнено(СтрокаТаблицыАдресов.Широта) 
			И 	ЗначениеЗаполнено(СтрокаТаблицыАдресов.Долгота)
			И СтрокаТаблицыАдресов.УстановленВручную Тогда
			
			ЗаписатьАдресВРегистр(СтрокаТаблицыАдресов.АдресДоставкиПриведенный, СтрокаТаблицыАдресов.Широта, СтрокаТаблицыАдресов.Долгота); 
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИСохранитьАдресаОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		ПроверитьИСохранитьАдресаПродолжение();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура ЦиклПереносаНаКарту()

	Если СписокКПереносуНаКарту.Количество() > 0 Тогда
		
		Идентификатор = Число(СписокКПереносуНаКарту[0].Значение);
		СписокКПереносуНаКарту.Удалить(0);
	
	Иначе
	
		Возврат;
	
	КонецЕсли;
	
	Попытка
		
		СтрокаТаблицы = ТаблицаАдресов.НайтиПоИдентификатору(Идентификатор);
		СтруктураВозврата = ПроверитьВнесениеАдреса(СтрокаТаблицы.АдресДоставкиПриведенный);
		Если СтруктураВозврата = Неопределено Тогда
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForAddr(
			//СтрокаТаблицы.Ид, 
			//"" + СтрокаТаблицы.АдресДоставкиПриведенный, 
			//"" + СтрокаТаблицы.ТипЗадания, 
			//"default1.png");
			МегаЛогист_Служебный.ДобавитьМаркерАдрес(Элементы, СтрокаТаблицы, СтрокаТаблицы.Ид);
			
		Иначе
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForLocation(
			//СтрокаТаблицы.Ид,
			//"" + СтруктураВозврата.Широта,
			//"" + СтруктураВозврата.Долгота,
			//"" + СтрокаТаблицы.АдресДоставкиПриведенный, 
			//"" + СтрокаТаблицы.ТипЗадания, 
			//"default1.png");
			МегаЛогист_Служебный.ДобавитьМаркерЛокация(Элементы, СтруктураВозврата, СтрокаТаблицы, СтрокаТаблицы.Ид);
			
		КонецЕсли;
		
	Исключение
		
		Сообщить("Ошибка: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);

КонецПроцедуры

&НаСервере 
Функция ПолучитьИмяГеокодера()

	
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПолучитьИмяГеокодера()

КонецФункции


&НаКлиенте
Процедура ВыгрузитьВMaxoptra(Команда)
	
	ВыгрузитьВMaxoptraСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВMaxoptraСервер()
	
	ИДСессии = МегаЛогист_РаботаСМакоптра.Авторазация();
	Если ИДСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОграничений = Новый Массив;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	КС = Новый КвалификаторыСтроки();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблицаЗначений.Колонки.Добавить("performerName", ОписаниеТиповС);
	ТаблицаЗначений.Колонки.Добавить("vehicleName", ОписаниеТиповС);
	Для каждого СтрокаТЗ Из ТаблицаКурьеров Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Курьер) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.performerName 	= Строка(СтрокаТЗ.Курьер);
		НоваяСтрока.vehicleName 	= Строка(СтрокаТЗ.Транспорт);
	    МассивОграничений.Добавить(СтрокаТЗ.Транспорт.Код);
		
	КонецЦикла;
	
	Отказ = Ложь;	
	МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(МассивОграничений), Отказ);
	МегаЛогист_РаботаСМакоптра.importPerformers(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоВодителям(), Отказ);
	МегаЛогист_РаботаСМакоптра.assignPerformersToVehicles(ИДСессии, ТаблицаЗначений, Отказ);
	Если Не Отказ Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выгрузка данных успешно завершена";
		Сообщение.Сообщить();
	
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	//УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКурьеров.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаКурьеров.Транспорт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаКурьеров.Свободно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаКурьеров.СвободноОбъем");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьТаблицуКурьеров();
	ТаблицаАдресов.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыАдресов));
	
	Склад = Параметры.Склад;
	ДатаДоставки=Параметры.ДатаДоставки;
	//Заполним вес/объем
	Для каждого СтрокаТаблицыАдресов Из ТаблицаАдресов Цикл
		СчитаемВесОбъем=Истина;
		Если ТипЗнч(СтрокаТаблицыАдресов.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
			Для Каждого СтрокаОснование из СтрокаТаблицыАдресов.ДокументОснование.Товары цикл
				Если ТипЗнч(СтрокаОснование.Назначение.Заказ)=Тип("ДокументСсылка.ЗаказКлиента") тогда
					
					НайденныеСтроки=ТаблицаАдресов.НайтиСтроки(Новый Структура("ДокументОснование",СтрокаОснование.Назначение.Заказ));
					Если НайденныеСтроки.Количество()>0 тогда
						СчитаемВесОбъем=Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
		Если СчитаемВесОбъем тогда
			ВесОбъем=МегаЛогист_Общий.ПолучитьВесОбъем(СтрокаТаблицыАдресов.ДокументОснование,ДатаДоставки);
			СтрокаТаблицыАдресов.Вес=ВесОбъем.Вес;
			СтрокаТаблицыАдресов.Объем=ВесОбъем.Объем;
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ОкноРазгрузкиПоУмолчаниюС,
		               |	МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ОкноРазгрузкиПоУмолчаниюПо,
		               |	МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ВремяРазгрузкиПогрузки
		               |ИЗ
		               |	РегистрСведений.МегаЛогист_ПродолжительностьРазгрузкиПогрузки КАК МегаЛогист_ПродолжительностьРазгрузкиПогрузки
		               |ГДЕ
		               |	МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ТипМаршрутногоЗадания = &ТипМаршрутногоЗадания";
			
		Запрос.УстановитьПараметр("ТипМаршрутногоЗадания", СтрокаТаблицыАдресов.ТипЗадания);
			
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
			
		Если Выборка.Следующий() Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицыАдресов.ВремяДоставкиС) ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицыАдресов.ВремяДоставкиПо) Тогда	
				СтрокаТаблицыАдресов.ВремяДоставкиС = ?(Не ЗначениеЗаполнено(СтрокаТаблицыАдресов.ВремяДоставкиС), Выборка.ОкноРазгрузкиПоУмолчаниюС, СтрокаТаблицыАдресов.ВремяДоставкиС);
				СтрокаТаблицыАдресов.ВремяДоставкиПо = ?(Не ЗначениеЗаполнено(СтрокаТаблицыАдресов.ВремяДоставкиПо), Выборка.ОкноРазгрузкиПоУмолчаниюПо, СтрокаТаблицыАдресов.ВремяДоставкиПо);
			КонецЕсли;	
		    СтрокаТаблицыАдресов.ВремяРазгрузкиПогрузки = Выборка.ВремяРазгрузкиПогрузки;		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыАдресов.Контрагент) Тогда
			Продолжить;			
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.Мегалогист_ПовышающийКоэффициентПогрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Контрагент = СтрокаТаблицыАдресов.Контрагент;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			Коэф = 1;
		Иначе
			Коэф = МенеджерЗаписи.Коэффициент;
		КонецЕсли;
		
		РасчетноеВремя = СтрокаТаблицыАдресов.ВремяРазгрузкиПогрузки * Коэф;  
		СтрокаТаблицыАдресов.ВремяРазгрузкиПогрузки = РасчетноеВремя;
		
	КонецЦикла;
		
	///////////////////////////////////////////
	//Мироненко Д.С 05.06.2015 6:38:48 НАЧАЛО
	//Комментарий: Карта
	
	#Если ВебКлиент Тогда
			
	#Иначе
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПутьККарте = Параметры.ПутьККарте;
	КартаHTML = Обработка.ПутьККарте;
	
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	#КонецЕсли
	//Мироненко Д.С 05.06.2015 6:38:51 КОНЕЦ
	///////////////////////////////////////////
	
	ЗадержкаОтправкиЗапроса = ?(Константы.МегаЛогист_ЗадержкаОтправкиЗапроса.Получить() = 0, 0.1, Константы.МегаЛогист_ЗадержкаОтправкиЗапроса.Получить());
	
	Элементы.ПоказатьМаршруты.Пометка = Ложь;
	
	
	ВыполняетсяЗакрытие = Ложь;
	АдресаСохранены = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		
		КартаHTML = "<!DOCTYPE html>
                     |<html>
                     |<head>
                     |	<title>Map Leaflet</title>
                     |	<meta charset=""utf-8"" />
                     |	<meta http-equiv=""X-UA-Compatible"" content=""IE=8"" >
                     |
                     |
                     |	<script type=''text/javascript''>
					 |		window.onload = function(){ window.open('" + ПолучитьАдресПубликации() + "/leaflet_web_2.html', '_self'); }
                     |
                     |	</script>
                     |</head>
                     |<body>
                     |
                     |</body>
                     |</html>";
		
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ЗакрытьФорму И Не ВыполняетсяЗакрытие тогда
		ТекстВопроса = НСтр("ru = 'Данные не будут сохранены. Продолжить?'");
		//Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение",ЭтаФорма), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПроверитьИСохранитьАдреса();
		ВыполняетсяЗакрытие = Истина;
		ОчиститьДанныеМаксоптра();
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура СоздатьМаршрутныеЛисты(Команда)	
	
	СоздаватьМаршрутныеЛисты=Истина;
	
	НайденныеСтроки=ТаблицаАдресов.НайтиСтроки(Новый Структура("Курьер",ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка")));
	Если НайденныеСтроки.Количество() > 0 Тогда
			
		//Ответ = Вопрос(НСтр("ru='В таблице остались адреса, для которых не назначены курьеры. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьМаршрутныеЛистыОтветНаВопрос1",ЭтаФорма),НСтр("ru='В таблице остались адреса, для которых не назначены курьеры. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;	
	
	СоздатьМаршрутныеЛистыПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутныеЛистыОтветНаВопрос1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		СоздаватьМаршрутныеЛисты=Ложь;
	КонецЕсли;

	СоздатьМаршрутныеЛистыПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутныеЛистыПродолжение() Экспорт

	ЗадаватьВопрос=Ложь;
	ТекстВопроса="Для следующих курьеров: "+Символы.ПС;
	Для Каждого СтрокаКурьера из ТаблицаКурьеров цикл
		Если ЗначениеЗаполнено(СтрокаКурьера.Транспорт) тогда
			Если СтрокаКурьера.Свободно <0 или СтрокаКурьера.СвободноОбъем<0 тогда
				ТекстВопроса=ТекстВопроса+СтрокаКурьера.Курьер+Символы.ПС;
				ЗадаватьВопрос=Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЗадаватьВопрос тогда
		ТекстВопроса=ТекстВопроса+"Превышена грузоподъемность/вместимость ТС. Продолжить?";	
		//Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьМаршрутныеЛистыОтветНаВопрос2",ЭтаФорма),ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	СоздатьМаршрутныеЛистыПродолжение2()

КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутныеЛистыОтветНаВопрос2(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		СоздаватьМаршрутныеЛисты=Ложь;
	КонецЕсли;

	СоздатьМаршрутныеЛистыПродолжение2();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутныеЛистыПродолжение2() Экспорт
	
	Если СоздаватьМаршрутныеЛисты тогда
		
		ОчиститьСообщения();
		
		ПроверитьИСохранитьАдреса();
		
		МассивСообщений=Новый Массив;
		СоздатьМаршрутныеЗаданияНаСервере(МассивСообщений);
		ВывестиСообщения(МассивСообщений);
		
		ОчиститьДанныеМаксоптра();
		Оповестить("Создать_МаршрутныеЛисты");
		ЗакрытьФорму = Истина;
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеМаксоптра(БезВодителей = Ложь)

	ИДСессии = МегаЛогист_РаботаСМакоптра.Авторазация();
	Если ИДСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	МегаЛогист_РаботаСМакоптра.importSchedules(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоНазначениям(), ДатаДоставки, Отказ);
	МегаЛогист_РаботаСМакоптра.delete(ИДСессии, Склад, ДатаДоставки);
	//МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(), Отказ);
	Если Не БезВодителей Тогда
		МегаЛогист_РаботаСМакоптра.importPerformers(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоВодителям(), Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВесОбъем()

	Для Каждого СтрокаКурьера из ТаблицаКурьеров цикл
				
		Вес=0;
		Объем=0;
		
		ТекКурьер=СтрокаКурьера.Курьер;
		
		Если НЕ ЗначениеЗаполнено(ТекКурьер) тогда
			Продолжить;
		КонецЕсли;	
		
		НайденныеСтроки=ТаблицаАдресов.НайтиСтроки(Новый Структура("Курьер",ТекКурьер));
		Для Каждого НайденнаяСтрока из НайденныеСтроки цикл
			Вес=Вес+НайденнаяСтрока.Вес;
			Объем=Объем+НайденнаяСтрока.Объем;
		КонецЦикла;
	
		СтрокаКурьера.Вес=Вес;
		СтрокаКурьера.Объем=Объем;
		
		ПересчитатьГрузоподъемность(СтрокаКурьера);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрепитьЗаКурьером(Команда)
	
	СтрокаКурьеров = Элементы.ТаблицаКурьеров.ТекущиеДанные;
	Если СтрокаКурьеров = Неопределено Тогда
		Сообщить("Не выбран курьер !");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаКурьеров.Транспорт) тогда
		Если ВесВыделенных>СтрокаКурьеров.Грузоподъемность
			или ОбъемВыделенных >СтрокаКурьеров.Вместимость тогда
			ТекстВопроса = НСтр("ru='Превышена грузоподъемность/вместимость ТС. Продолжить?'");
			//Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрепитьЗаКурьеромВопрос1", ЭтаФорма), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакрепитьЗаКурьеромПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрепитьЗаКурьеромВопрос1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрепитьЗаКурьеромПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрепитьЗаКурьеромПродолжение() Экспорт
	
	СтрокаКурьеров = Элементы.ТаблицаКурьеров.ТекущиеДанные;
	
	Для каждого СтрокаТЧ Из ТаблицаАдресов Цикл
		
		СтрокаТЧ.СтрокаВыбранаНаКарте = Ложь;
		
	КонецЦикла;

			
	ТекКурьер=СтрокаКурьеров.Курьер;
	////ИмяКартинки =  "Curier" +  + СтрокаТЧ.Курьер + ".png";
	//ИмяКартинки =  "Adress1" + ТекКурьер + СтрокаКурьеров.ПолучитьИдентификатор() + ".png";
	#Если Не ВебКлиент Тогда
	Адрес = ВыгрузитьКартинкуСервер(СтрокаКурьеров.Маркер, ПривестиИмяМаркера(СтрокаКурьеров.Маркер1, "Маркер1"), "Маркер1");
	Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ПривестиИмяМаркера(СтрокаКурьеров.Маркер1, "Маркер1"), Адрес);
	МассивОписаний=Новый Массив;
	МассивОписаний.Добавить(Описание);
	ПолучитьФайлы(МассивОписаний,,,Ложь);
	//ИмяКартинки =  "Adress2" + ТекКурьер + СтрокаКурьеров.ПолучитьИдентификатор() + ".png";
	Адрес = ВыгрузитьКартинкуСервер(СтрокаКурьеров.Маркер, ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"), "Маркер2");
	Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"), Адрес);
	МассивОписаний=Новый Массив;
	МассивОписаний.Добавить(Описание);
	ПолучитьФайлы(МассивОписаний,,,Ложь);
	#КонецЕсли
	//Получение списка выделенных маркеров
	//ПЕРЕНОС
	//СтрокаОтвета = Элементы.КартаHTML.Документ.parentWindow.eval("map_selectedMarker()");
	СтрокаОтвета = МегаЛогист_Служебный.ВозвратМаркеров(Элементы);
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтвета, ",", Истина);
	
	Если МассивСтрок.Количество() > 0 Тогда
	
		
		Для Каждого СтрокаМассива из МассивСтрок цикл
			СтруктураОтбора = Новый Структура("Ид", Число(СтрокаМассива));
			НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = НайденныеСтроки[0];
			СтрокаТаблицы.Курьер=СтрокаКурьеров.Курьер;
			СтрокаТаблицы.Маркер1=СтрокаКурьеров.Маркер1;
			СтрокаТаблицы.Маркер2=СтрокаКурьеров.Маркер2;
			//Изменение маркера по курьеру
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_changeIconMarker(СтрокаТаблицы.Ид, ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"));
			МегаЛогист_Служебный.ИзменениеМаркера(Элементы, СтрокаТаблицы.Ид, ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"));  
		КонецЦикла;
	
	Иначе
	
		Для Каждого ВыделеннаяСтрока из Элементы.ТаблицаАдресов.ВыделенныеСтроки цикл
			СтрокаТаблицы = ТаблицаАдресов.НайтиПоИдентификатору(ВыделеннаяСтрока);
			СтрокаТаблицы.Курьер=СтрокаКурьеров.Курьер;
			СтрокаТаблицы.Маркер1=СтрокаКурьеров.Маркер1;
			СтрокаТаблицы.Маркер2=СтрокаКурьеров.Маркер2;
			//Изменение маркера по курьеру
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_changeIconMarker(СтрокаТаблицы.Ид, ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"));
			МегаЛогист_Служебный.ИзменениеМаркера(Элементы, СтрокаТаблицы.Ид, ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"));
		КонецЦикла;
	
	КонецЕсли;
	
	ОбновитьВесОбъем();
	
	//ПЕРЕНОС
	//Элементы.КартаHTML.Документ.parentWindow.map_clearSelect();
	МегаЛогист_Служебный.ОчиститьВыделение(Элементы);
	МегаЛогист_Служебный.ОчиститьПолилинии(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьКурьера(Команда)
	
	//Получение списка выделенных маркеров
	//ПЕРЕНОС
	//СтрокаОтвета = Элементы.КартаHTML.Документ.parentWindow.eval("map_selectedMarker()");
	СтрокаОтвета = МегаЛогист_Служебный.ВозвратМаркеров(Элементы);
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтвета, ",", Истина);
	Если МассивСтрок.Количество() > 0 Тогда
	
		
		Для Каждого СтрокаМассива из МассивСтрок цикл
			СтруктураОтбора = Новый Структура("Ид", Число(СтрокаМассива));
			НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			СтрокаТаблицы = НайденныеСтроки[0];
			СтрокаТаблицы.Курьер = Неопределено;
			СтрокаТаблицы.Маркер1="";
			СтрокаТаблицы.Маркер2="";
			СтрокаТаблицы.ПорядкаОбъезда = 0;
			//Изменение маркера по курьеру
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_changeIconMarker(Число(СтрокаМассива), "default1.png");
			МегаЛогист_Служебный.ИзменениеМаркера(Элементы, Число(СтрокаМассива), "default1.png");
		КонецЦикла;
		
	Иначе
	
		Для Каждого ВыделеннаяСтрока из Элементы.ТаблицаАдресов.ВыделенныеСтроки цикл
			СтрокаТаблицы = ТаблицаАдресов.НайтиПоИдентификатору(ВыделеннаяСтрока);
			СтрокаТаблицы.Курьер = Неопределено;
			СтрокаТаблицы.Маркер1="";
			СтрокаТаблицы.Маркер2="";
			СтрокаТаблицы.ПорядкаОбъезда = 0;
			//Изменение маркера по курьеру
			//ПЕРЕНО
			//Элементы.КартаHTML.Документ.parentWindow.map_changeIconMarker(СтрокаТаблицы.Ид, "default1.png");
			МегаЛогист_Служебный.ИзменениеМаркера(Элементы, СтрокаТаблицы.Ид, "default1.png");
		КонецЦикла;
	
	КонецЕсли;
	
	ОбновитьВесОбъем();
	
	//ПЕРЕНОС
	//Элементы.КартаHTML.Документ.parentWindow.map_clearSelect();
	МегаЛогист_Служебный.ОчиститьВыделение(Элементы);
	МегаЛогист_Служебный.ОчиститьПолилинии(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресовПриАктивизацииСтроки(Элемент)
	
	ВыделятьМаркерПриВыделенииСтроки = ПолучитьЗначениеКонстанты("МегаЛогист_ВыделятьМаркерПриВыделенииСтроки");
	
	СтрокаКурьеров = Элементы.ТаблицаКурьеров.ТекущиеДанные;
	
	Если ВыделятьМаркерПриВыделенииСтроки тогда
		Для каждого СтрокаТЧ Из ТаблицаАдресов Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Маркер1) Тогда
				ИмяКартинки = "default1.png";
			Иначе
				ИмяКартинки  = ПривестиИмяМаркера(СтрокаТЧ.Маркер1, "Маркер1");
				#Если Не ВебКлиент Тогда
				УИД = ПолучитьУИДПоНавигационнойСсылке(СтрокаТЧ.Маркер1);
				//ИмяКартинки =  "Adress1" + СтрокаКурьеров.Курьер  + СтрокаКурьеров.ПолучитьИдентификатор() + ".png";
				Адрес = ВыгрузитьКартинкуСервер(УИД, ИмяКартинки, "Маркер1");
				Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ИмяКартинки, Адрес);
				МассивОписаний=Новый Массив;
				МассивОписаний.Добавить(Описание);
				ПолучитьФайлы(МассивОписаний,,,Ложь);
				#КонецЕсли
				
			КонецЕсли;
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_changeIconMarker(СтрокаТЧ.Ид, ИмяКартинки);
			Если КартаИнициализирована Тогда
				
				МегаЛогист_Служебный.ИзменениеМаркера(Элементы, СтрокаТЧ.Ид, ИмяКартинки);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
	ВесВыделенных=0;
	ОбъемВыделенных=0;
	
	Для каждого Идентификатор Из Элемент.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТаблицаАдресов.НайтиПоИдентификатору(Идентификатор);
		
		Если ВыделятьМаркерПриВыделенииСтроки тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Маркер2) Тогда
				ИмяКартинки = "default2.png";
			Иначе
				ИмяКартинки  = ПривестиИмяМаркера(СтрокаТаблицы.Маркер2, "Маркер2");
				#Если Не ВебКлиент Тогда
				УИД = ПолучитьУИДПоНавигационнойСсылке(СтрокаТаблицы.Маркер2);
				//ИмяКартинки =  "Adress2" + СтрокаКурьеров.Курьер  + СтрокаКурьеров.ПолучитьИдентификатор()  + ".png";
				Адрес = ВыгрузитьКартинкуСервер(УИД, ИмяКартинки, "Маркер2");
				Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ИмяКартинки, Адрес);
				МассивОписаний=Новый Массив;
				МассивОписаний.Добавить(Описание);
				ПолучитьФайлы(МассивОписаний,,,Ложь);
				#КонецЕсли
			КонецЕсли;
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_changeIconMarker(СтрокаТаблицы.Ид, ИмяКартинки);
			Если КартаИнициализирована Тогда
			
				МегаЛогист_Служебный.ИзменениеМаркера(Элементы, СтрокаТаблицы.Ид, ИмяКартинки);
			
			КонецЕсли;
		КонецЕсли;
		
		ВесВыделенных=ВесВыделенных+СтрокаТаблицы.Вес;
		ОбъемВыделенных=ОбъемВыделенных+СтрокаТаблицы.Объем;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМаркерВручную(Команда)
	
	СтрокаКурьеров = Элементы.ТаблицаКурьеров.ТекущиеДанные;
	СтрокаТаблицы = ТаблицаАдресов.НайтиПоИдентификатору(Элементы.ТаблицаАдресов.ТекущаяСтрока);
	СтрокаТаблицы.УстановленВручную = Истина;
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Маркер2) Тогда
		ИмяКартинки = "default2.png";
	Иначе
		ИмяКартинки  = ПривестиИмяМаркера(СтрокаТаблицы.Маркер2, "Маркер2");
		#Если Не ВебКлиент Тогда
		УИД = ПолучитьУИДПоНавигационнойСсылке(СтрокаТаблицы.Маркер2);
		//ИмяКартинки =  "Adress2" + СтрокаКурьеров.Курьер  + СтрокаКурьеров.ПолучитьИдентификатор()  + ".png";
		Адрес = ВыгрузитьКартинкуСервер(УИД, ИмяКартинки, "Маркер2");
		Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ИмяКартинки, Адрес);
		МассивОписаний=Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний,,,Ложь);
		#КонецЕсли
	КонецЕсли;
	//ПЕРЕНОС
	//Элементы.КартаHTML.Документ.parentWindow.map_setMarkerManually(	СтрокаТаблицы.Ид,
	//																СтрокаТаблицы.АдресДоставки,
	//																Строка(СтрокаТаблицы.ТипЗадания),
	//																ИмяКартинки);
	МегаЛогист_Служебный.УстановкаМаркера(Элементы, СтрокаТаблицы, ИмяКартинки);
	АдресаСохранены = Ложь;
КонецПроцедуры

Функция ПолучитьСведенияОТранспорте(Транспорт)
	
	Структура=Новый Структура();
	
	Грузоподъемность=Транспорт.ГрузоподъемностьВТоннах*1000;
	Вместимость=Транспорт.ВместимостьВКубическихМетрах;
	
	Структура.Вставить("Грузоподъемность",Грузоподъемность);
	Структура.Вставить("Вместимость",Вместимость);
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьГрузоподъемность(ТекущиеДанные)
	
	Пеший = НЕ ЗначениеЗаполнено(ТекущиеДанные.Транспорт);
	Если Пеший тогда
		ТекущиеДанные.Грузоподъемность=0;
		ТекущиеДанные.Свободно=0;
		ТекущиеДанные.ОтносительнаяЗагруженность=0;
		
		ТекущиеДанные.Вместимость=0;
		ТекущиеДанные.СвободноОбъем=0;
		ТекущиеДанные.ОтносительнаяЗагруженностьОбъем=0;
		
	иначе
		СведенияОТранспорте=ПолучитьСведенияОТранспорте(ТекущиеДанные.Транспорт);
		
		ТекущиеДанные.Грузоподъемность=СведенияОТранспорте.Грузоподъемность;
		ТекущиеДанные.Вместимость=СведенияОТранспорте.Вместимость;
		
    	ТекущиеДанные.Свободно=ТекущиеДанные.Грузоподъемность-ТекущиеДанные.Вес;
		ТекущиеДанные.СвободноОбъем=ТекущиеДанные.Вместимость-ТекущиеДанные.Объем;
		    	
		Если ТекущиеДанные.Свободно<0 тогда
			ТекущиеДанные.ОтносительнаяЗагруженность=100;
		иначе	
			ТекущиеДанные.ОтносительнаяЗагруженность=?(ТекущиеДанные.Грузоподъемность=0,100,ТекущиеДанные.Вес/ТекущиеДанные.Грузоподъемность*100);
		КонецЕсли;	
		
		Если ТекущиеДанные.СвободноОбъем<0 тогда
			ТекущиеДанные.ОтносительнаяЗагруженностьОбъем=100;
		иначе	
			ТекущиеДанные.ОтносительнаяЗагруженностьОбъем=?(ТекущиеДанные.Вместимость=0,100,ТекущиеДанные.Объем/ТекущиеДанные.Вместимость*100);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресовПередУдалением(Элемент, Отказ)
	
	//Отказ = Истина;
	Для каждого Идентификатор Из Элемент.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТаблицаАдресов.НайтиПоИдентификатору(Идентификатор);
		//ПЕРЕНОС
		//Элементы.КартаHTML.Документ.parentWindow.map_deleteMarker(СтрокаТаблицы.Ид);
		МегаЛогист_Служебный.УдилитьМаркер(Элементы, СтрокаТаблицы.Ид);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКурьеровКурьерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаКурьеров.ТекущиеДанные;
	ТекущиеДанные.Транспорт=ПолучитьТранспорт(ТекущиеДанные.Курьер);
	
	ПересчитатьГрузоподъемность(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКурьеровТранспортПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаКурьеров.ТекущиеДанные;
	
	ПересчитатьГрузоподъемность(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГрузоподъемность(Транспорт)
	
	Грузоподъемность=Транспорт.ГрузоподъемностьВТоннах*1000;
	
	Возврат Грузоподъемность;
	
КонецФункции

&НаСервере
Функция ПолучитьТранспорт(Курьер)
	
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Курьер",Курьер);
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	МегаЛогист_ТранспортныеСредстваКурьеров.ТранспортноеСредство
	             |ИЗ
	             |	Справочник.МегаЛогист_ТранспортныеСредстваКурьеров КАК МегаЛогист_ТранспортныеСредстваКурьеров
	             |ГДЕ
	             |	МегаЛогист_ТранспортныеСредстваКурьеров.Курьер = &Курьер";
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() тогда
		Возврат Результат.ТранспортноеСредство;
	КонецЕсли;
	
	Возврат Справочники.ТранспортныеСредства.ПустаяСсылка();
	
КонецФункции

&НаСервере 
Функция ПолучитьАдресПубликации()
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПолучитьАдресПубликации()
КонецФункции

&НаСервере
Процедура СпланироватьМаршрутыНаСервере(Отказ)
	
	ИДСессии = МегаЛогист_РаботаСМакоптра.Авторазация();
	Если ИДСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеМаксоптра(Истина);
	
	МассивОграничений = Новый Массив;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	КС = Новый КвалификаторыСтроки();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблицаЗначений.Колонки.Добавить("performerName", 	ОписаниеТиповС);
	ТаблицаЗначений.Колонки.Добавить("vehicleName", 	ОписаниеТиповС);
	Для каждого СтрокаТЗ Из ТаблицаКурьеров Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Курьер) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.performerName 	= Строка(СтрокаТЗ.Курьер);
		НоваяСтрока.vehicleName 	= Строка(СтрокаТЗ.Транспорт);
	    МассивОграничений.Добавить(СтрокаТЗ.Транспорт.Код);
		
	КонецЦикла;
	
	Если Отказ Тогда Возврат; КонецЕсли;
	МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(МассивОграничений, Ложь), Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	ТаблицаВодителей = ТаблицаКурьеров.Выгрузить(, "Курьер");
	МегаЛогист_РаботаСМакоптра.importPerformers(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоВодителям(,ТаблицаВодителей), Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	МегаЛогист_РаботаСМакоптра.assignPerformersToVehicles(ИДСессии, ТаблицаЗначений, Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	
	МассивОграничений = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаАдресов Цикл
	
		МассивОграничений.Добавить(СтрокаТЗ.ДокументОснование);
		
	КонецЦикла;
	
	МегаЛогист_РаботаСМакоптра.save(ИДСессии, ПодготовитьТаблицу(), Отказ);
	
	Если Не Отказ Тогда
	
		МегаЛогист_РаботаСМакоптра.start(ИДСессии, Отказ, Склад, ДатаДоставки);
	
	КонецЕсли;
	Если Не Отказ Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выгрузка данных успешно завершена. Планирование начато...";
		Сообщение.Сообщить();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицу()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ТипМаршрутногоЗадания,
	               |	МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ЗаборТовара,
	               |	МегаЛогист_ПродолжительностьРазгрузкиПогрузки.ВремяРазгрузкиПогрузки
	               |ИЗ
	               |	РегистрСведений.МегаЛогист_ПродолжительностьРазгрузкиПогрузки КАК МегаЛогист_ПродолжительностьРазгрузкиПогрузки";
	
	
	Результат = Запрос.Выполнить();
	ТаблицаВремениОпераций = Результат.Выгрузить();

	
	ТаблицаВозврата = ТаблицаАдресов.Выгрузить();
	//ТаблицаВозврата.Колонки.ДокументОснование.Имя 	= "orderReference";
	ТаблицаВозврата.Колонки.Добавить("orderReference");
	//ТаблицаВозврата.Колонки.Склад.Имя 				= "areaOfControl";
	ТаблицаВозврата.Колонки.Добавить("areaOfControl");
	ТаблицаВозврата.Колонки.Добавить("date");
	//ТаблицаВозврата.Колонки.Контрагент.Имя 			= "name";
	ТаблицаВозврата.Колонки.Добавить("name");
	ТаблицаВозврата.Колонки.Комментарий.Имя 		= "contactPerson";
	ТаблицаВозврата.Колонки.АдресДоставки.Имя 		= "locationName";
	ТаблицаВозврата.Колонки.Добавить("address");
	ТаблицаВозврата.Колонки.Широта.Имя 				= "latitude";
	ТаблицаВозврата.Колонки.Долгота.Имя 			= "longitude";
	ТаблицаВозврата.Колонки.ВремяДоставкиС.Имя 		= "start";
	ТаблицаВозврата.Колонки.ВремяДоставкиПо.Имя 	= "end";
	ТаблицаВозврата.Колонки.Добавить("durationDrop");
	ТаблицаВозврата.Колонки.Вес.Имя 				= "capacity";
	ТаблицаВозврата.Колонки.Объем.Имя 				= "volume";
	ТаблицаВозврата.Колонки.Добавить("collection");
	
	НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоРеквизиту("Склад", Склад);
	
	Для каждого СтрокаТЗ Из ТаблицаВозврата Цикл
	
		СтрокаТЗ.orderReference = "" + СтрЗаменить(ТипЗнч(СтрокаТЗ.ДокументОснование), "ДокументСсылка.", "") + СтрокаТЗ.ДокументОснование.Номер;
		СтрокаТЗ.areaOfControl	= ?(ЗначениеЗаполнено(НайденныйЭлемент),НайденныйЭлемент.Наименование,  Строка(Склад));
		СтрокаТЗ.date = ДатаДоставки;
		СтрокаТЗ.name	= Строка(СтрокаТЗ.Контрагент);
		СтрокаТЗ.address	= СтрокаТЗ.locationName;
		НайденнаяСтрока = ТаблицаВремениОпераций.Найти(СтрокаТЗ.ТипЗадания, "ТипМаршрутногоЗадания");
		Если НайденнаяСтрока = Неопределено Тогда
			СтрокаТЗ.durationDrop = 20;
		Иначе
			СтрокаТЗ.durationDrop = СтрокаТЗ.ВремяРазгрузкиПогрузки;
			СтрокаТЗ.collection		= НайденнаяСтрока.ЗаборТовара;
		КонецЕсли;
		
		//Если СтрокаТЗ.durationDrop < СтрокаТЗ.ВремяРазгрузкиПогрузки Тогда
		//	СтрокаТЗ.durationDrop = СтрокаТЗ.ВремяРазгрузкиПогрузки;
		//КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаВозврата;
КонецФункции // ПодготовитьТаблицу()

&НаКлиенте
Процедура СпланироватьМаршруты(Команда)
	
	Отказ = Ложь;
	СпланироватьМаршрутыНаСервере(Отказ);
	Если Не Отказ Тогда
		ПодключитьОбработчикОжидания("ОтразитьСтатус", 10, Истина);
		Элементы.ПоказатьМаршруты.Пометка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьСтатус()
	Отказ = Ложь;
	СтруктураВозврата 	= Неопределено;
	СтрокаТаблицы 		= Неопределено;
	ПродолжатьВывод		= Ложь;
	ОтразитьСтатусСервер(СтруктураВозврата, СтрокаТаблицы, ПродолжатьВывод, Отказ);
	Если ПродолжатьВывод Тогда
	
		ПодключитьОбработчикОжидания("ОтразитьСтатус", 10, Истина);
	
	Иначе 
	     Если Не Отказ Тогда
		 
			ОбновитьОтображениеКарты();
			ОбновитьВесОбъем();
		 
		 КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтразитьСтатусСервер(СтруктураВозврата, СтрокаТаблицы, ПродолжатьВывод, Отказ)
	
	ИДСессии = МегаЛогист_РаботаСМакоптра.Авторазация();
	Если ИДСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Ложь;
	СтруктураОтвета = МегаЛогист_РаботаСМакоптра.mx_status(ИДСессии, Отказ);
	Если СтруктураОтвета.scheduling.operationNumber = "2" Тогда
		Элементы.Статус.Видимость = Истина;
		Элементы.Статус.Заголовок = "Расчет матрицы";
		Статус = Число(СтруктураОтвета.scheduling.progress);
		ПродолжатьВывод = Истина;
	ИначеЕсли СтруктураОтвета.scheduling.operationNumber = "1" Тогда
		Элементы.Статус.Видимость = Истина;
		Элементы.Статус.Заголовок = "Идёт планирование";
		Статус = Число(СтруктураОтвета.scheduling.progress);
		ПродолжатьВывод = Истина;
	Иначе
		ПродолжатьВывод = Ложь;
		Элементы.Статус.Видимость = Ложь;
		Если СтруктураОтвета.scheduling.requestStatus = "false" Тогда
			
			//Обработка Структуры возврата
			//МегаЛогист_РаботаСМакоптра.delete(ИДСессии);
			//Отказ = Истина;
			//МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(), Отказ);
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = СокрЛП(СтрЗаменить(СтруктураОтвета.scheduling.message, "<br />", ""));
			//Сообщение.Сообщить();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Расписание не найдено";
			Сообщение.Сообщить();
			
		Иначе
			//Вывод склада
			//НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоРеквизиту("Склад", Склад);
			//Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			//	
			//	СтруктураВозврата = Новый Структура("Широта, Долгота", НайденныйЭлемент.Широта, НайденныйЭлемент.Долгота);
			//	СтрокаТаблицы = Новый Структура("АдресДоставкиПриведенный, ТипЗадания", "", "Курьеры");
			//	//МегаЛогист_Служебный.ДобавитьМаркерЛокация(Элементы, СтруктураВозврата, СтрокаТаблицы, 9999, "warehouse.png", "", "", "", "transport");
			//	
			//КонецЕсли;
			СтруктураРасписания = МегаЛогист_РаботаСМакоптра.getScheduleByAOCOnDate(ИДСессии,Склад, ДатаДоставки);
			//Попытка
			//
			//	//Сообщить(СтруктураРасписания.error.errorMessage);
			//	//МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(), Отказ);
			//	//МегаЛогист_РаботаСМакоптра.delete(ИДСессии);
			//	//Возврат;
			//
			//Исключение
			//
			//КонецПопытки;
			Попытка
			
				Если ТипЗнч(СтруктураРасписания.scheduleResponse.vehicles.vehicle) = Тип("ОбъектXDTO") Тогда
					РазобратьРасписание(СтруктураРасписания.scheduleResponse.vehicles.vehicle);
				Иначе 
					Для каждого ОбъектРассписания Из СтруктураРасписания.scheduleResponse.vehicles.vehicle Цикл
						
						РазобратьРасписание(ОбъектРассписания);
						
					КонецЦикла;
				КонецЕсли;
				//МегаЛогист_РаботаСМакоптра.delete(ИДСессии);
				Отказ = Ложь;
				Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = "Планирование завершено. " + СокрЛП(СтрЗаменить(СтруктураОтвета.scheduling.message, "<br />", ""));
				Сообщение.Текст = "Планирование завершено.";
				Сообщение.Сообщить();
			
			Исключение
			
			КонецПопытки;
			
		КонецЕсли;
		
		//ОчиститьДанныеМаксоптра();
		
	КонецЕсли;
	
	//Типа правильное завершение
	
	//СтруктураРасписания = МегаЛогист_РаботаСМакоптра.getScheduleByAOCOnDate(ИДСессии,Склад, ДатаДоставки);
	//Если ТипЗнч(СтруктураРасписания.scheduleResponse.vehicles.vehicle) = Тип("ОбъектXDTO") Тогда
	//	РазобратьРасписание(СтруктураРасписания.scheduleResponse.vehicles.vehicle);
	//Иначе 
	//	Для каждого ОбъектРассписания Из СтруктураРасписания.scheduleResponse.vehicles.vehicle Цикл
	//	
	//		РазобратьРасписание(ОбъектРассписания);
	//	
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура РазобратьРасписание(ОбъектРасписания)

	//поиск курьера
	Курьер = Справочники.ФизическиеЛица.НайтиПоНаименованию(ОбъектРасписания.driverExternalID);
	Если Не ЗначениеЗаполнено(Курьер) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найден курьер. Привязка не возможна";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	///////////////////////////////////////////
	//Мироненко Д.С 13.04.2018 10:13:48 НАЧАЛО
	//Комментарий: Запись плановых показателей
	
	СтруктураОтбора = Новый Структура("Курьер", Курьер);
	СтрокиКурьеров = ТаблицаКурьеров.НайтиСтроки(СтруктураОтбора);
	Если СтрокиКурьеров.Количество() > 0 Тогда
	
		СтрокиКурьеров[0].ПлановаяСтоимостьРейса 	= ОбъектРасписания.run.cost;
		СтрокиКурьеров[0].ПлановыйПробег 			= ОбъектРасписания.run.planDistance;
		СтрокиКурьеров[0].ПлановаяПродолжительность = ОбъектРасписания.run.planDuration;
	
	КонецЕсли;
	
	//Мироненко Д.С 13.04.2018 10:14:31 КОНЕЦ
	///////////////////////////////////////////
	Если ТипЗнч(ОбъектРасписания.run.location) = Тип("ОбъектXDTO") Тогда
		ЗаполнитьТаблицуАдресов(Курьер, ОбъектРасписания.run.location)
	Иначе 
		Для каждого Локация Из ОбъектРасписания.run.location Цикл
		
			ЗаполнитьТаблицуАдресов(Курьер, Локация)
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуАдресов(Курьер, Локация)
	
	Для каждого СтрокаАдреса Из ТаблицаАдресов Цикл
		
		Попытка
			Если ТипЗнч(Локация.order) = Тип("СписокXDTO") Тогда
			
				Для каждого Заказ Из Локация.order Цикл
				
					Если Найти(Заказ.orderReference, СтрокаАдреса.ДокументОснование.Номер) > 0 И Найти(Заказ.orderReference, СтрЗаменить(ТипЗнч(СтрокаАдреса.ДокументОснование), "ДокументСсылка.", ""))>0 Тогда
						
						СтрокаАдреса.Курьер 		= Курьер;
						СтрокаАдреса.ПорядкаОбъезда = Локация.number;
						
					КонецЕсли;
				
				КонецЦикла;
			
			Иначе
			
				Если Найти(Локация.order.orderReference, СтрокаАдреса.ДокументОснование.Номер) > 0 И Найти(Локация.order.orderReference, СтрЗаменить(ТипЗнч(СтрокаАдреса.ДокументОснование), "ДокументСсылка.", ""))>0 Тогда
						
					СтрокаАдреса.Курьер 		= Курьер;
					СтрокаАдреса.ПорядкаОбъезда = Локация.number;
					
				КонецЕсли;
			
			КонецЕсли;
		Исключение
			Прервать;
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоПланированию(Команда)
	
	//СтруктураВозврата 	= Неопределено;
	//СтрокаТаблицы 		= Неопределено;
	//ОтразитьСтатусСервер(СтруктураВозврата, СтрокаТаблицы);
	////МегаЛогист_Служебный.ДобавитьМаркерЛокация(Элементы, СтруктураВозврата, СтрокаТаблицы, 9999, "warehouse.png", "", "", "", "transport");
	//ОбновитьОтображениеКарты();
	НарисоватьПолилинии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКарты()
		
	Для Каждого СтрокаТаблицы из ТаблицаАдресов Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Курьер) Тогда
			Продолжить;
		КонецЕсли;
		//Поиск строки курьеров
		СтруктураПоиска = Новый Структура("Курьер", СтрокаТаблицы.Курьер);
		НайденныеСтроки = ТаблицаКурьеров.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКурьеров = НайденныеСтроки[0];
		#Если Не ВебКлиент Тогда
		Адрес = ВыгрузитьКартинкуСервер(СтрокаКурьеров.Маркер, ПривестиИмяМаркера(СтрокаКурьеров.Маркер1, "Маркер1"), "Маркер1");
		Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ПривестиИмяМаркера(СтрокаКурьеров.Маркер1, "Маркер1"), Адрес);
		МассивОписаний=Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний,,,Ложь);
		Адрес = ВыгрузитьКартинкуСервер(СтрокаКурьеров.Маркер, ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"), "Маркер2");
		Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"), Адрес);
		МассивОписаний=Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний,,,Ложь);
		#КонецЕсли
		СтрокаТаблицы.Курьер=СтрокаКурьеров.Курьер;
		СтрокаТаблицы.Маркер1=СтрокаКурьеров.Маркер1;
		СтрокаТаблицы.Маркер2=СтрокаКурьеров.Маркер2;
		МегаЛогист_Служебный.ИзменениеМаркера(Элементы, СтрокаТаблицы.Ид, ПривестиИмяМаркера(СтрокаКурьеров.Маркер2, "Маркер2"));
	КонецЦикла;
	
	
	МегаЛогист_Служебный.ОчиститьВыделение(Элементы);
	МегаЛогист_Служебный.ОчиститьПолилинии(Элементы);
	
	НарисоватьПолилинии();

КонецПроцедуры

&НаКлиенте
Процедура НарисоватьПолилинии()

	ТаблицаАдресов.Сортировать("ПорядкаОбъезда");
	//ТабКурьеров = ТаблицаАдресов.Выгрузить(,"Курьер");
	//ТабКурьеров.Свернуть("Курьер");
	
	//НайденныйЭлемент = НайтиСклад();
	МассивКоординат = "";
	
	Для каждого СтрокаТЗ Из ТаблицаКурьеров Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Курьер) Тогда
			Продолжить;
		КонецЕсли;
		//Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		Если ЗначениеЗаполнено(ШиротаСклада) И ЗначениеЗаполнено(ДолготаСклада) Тогда
			МассивКоординат = ШиротаСклада + "," + ДолготаСклада + ";";
		КонецЕсли;
		СтруктураПоиска = Новый Структура("Курьер", СтрокаТЗ.Курьер);
		НайденнеыеСтроки = ТаблицаАдресов.НайтиСтроки(СтруктураПоиска);
		Для каждого ЭлементМассива Из НайденнеыеСтроки Цикл
			
			Если ЭлементМассива.ПорядкаОбъезда = 0  Тогда
				Продолжить;
			КонецЕсли;
			//МассивКоордината = Новый Массив;
			//МассивКоордината.Добавить(ЭлементМассива.Широта);
			//МассивКоордината.Добавить(ЭлементМассива.Долгота);
			//МассивКоординат.Добавить(МассивКоордината);
			МассивКоординат = МассивКоординат + ЭлементМассива.Широта + "," + ЭлементМассива.Долгота + ";";
		
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ШиротаСклада) И ЗначениеЗаполнено(ДолготаСклада) Тогда
			МассивКоординат = МассивКоординат + ШиротаСклада + "," + ДолготаСклада;
		КонецЕсли;
		МегаЛогист_Служебный.НарисоватьПолиЛинию(Элементы, МассивКоординат, СтрокаТЗ.ЦветПолиЛинии);
	
	КонецЦикла;

КонецПроцедуры

Функция НайтиСклад()

	НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоРеквизиту("Склад", Склад);
	
	Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
	
		Возврат Новый Структура("Широта, Долгота", НайденныйЭлемент.Широта, НайденныйЭлемент.Долгота);
	
	Иначе
	
		Возврат Неопределено;
	
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПоказатьМаршруты(Команда)
	
	Элементы.ПоказатьМаршруты.Пометка = Не Элементы.ПоказатьМаршруты.Пометка;
	Если Элементы.ПоказатьМаршруты.Пометка Тогда
		НарисоватьПолилинии();
	Иначе
		МегаЛогист_Служебный.ОчиститьПолилинии(Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресовВесПриИзменении(Элемент)
	ОбновитьВесОбъем();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресовОбъемПриИзменении(Элемент)
	ОбновитьВесОбъем();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМаршрутыНаСервере()
	
	ИДСессии = МегаЛогист_РаботаСМакоптра.Авторазация();
	Если ИДСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРасписания = МегаЛогист_РаботаСМакоптра.getScheduleByAOCOnDate(ИДСессии,Склад, ДатаДоставки);
	
	Попытка
		
		Если ТипЗнч(СтруктураРасписания.scheduleResponse.vehicles.vehicle) = Тип("ОбъектXDTO") Тогда
			РазобратьРасписание(СтруктураРасписания.scheduleResponse.vehicles.vehicle);
		Иначе 
			Для каждого ОбъектРассписания Из СтруктураРасписания.scheduleResponse.vehicles.vehicle Цикл
				
				РазобратьРасписание(ОбъектРассписания);
				
			КонецЦикла;
		КонецЕсли;
		
		Отказ = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Загрузка завершена.";
		Сообщение.Сообщить();
			

	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМаршруты(Команда)
	
	ЗагрузитьМаршрутыНаСервере();
	
	Элементы.ПоказатьМаршруты.Пометка = Истина;
		
	ОбновитьОтображениеКарты();
	ОбновитьВесОбъем();
		
КонецПроцедуры

#КонецОбласти

//+АТ Терентьев
&НаСервереБезКонтекста
Функция АТ_ПолучитьКонтактноеЛицо(СсылкаРеализация)
	
	Результат = "";
	
	Если ЗначениеЗаполнено(СсылкаРеализация) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиентаДокумент
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|			ПО ЗаказКлиентаДокумент.КонтактноеЛицо = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
		|				И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|		ПО РеализацияТоваровУслуг.ЗаказКлиента = ЗаказКлиентаДокумент.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вид";
		Запрос.УстановитьПараметр("Ссылка", СсылкаРеализация);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Результат = Строка(Выборка.Ссылка) + " тел.:" + Выборка.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции