&НаКлиенте
Перем ИдетВывод, МаштабированиеОтключено;

&НаКлиенте
Процедура ПечатьДокумента(Команда) //печать по кнопке в режиме отладки
	
	//КартаHTML.Печать();
	Элементы.КартаHTML.Документ.parentWindow.print();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуИнициализацииСервер()

	Возврат Константы.МегаЛогист_ПараметрыИнициализацииOSM.Получить();

КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_Маркеры.Ссылка
	               |ИЗ
	               |	Справочник.МегаЛогист_Маркеры КАК МегаЛогист_Маркеры
	               |ГДЕ
	               |	МегаЛогист_Маркеры.ПоУмолчанию = ЛОЖЬ
	               |	И МегаЛогист_Маркеры.Активный = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МегаЛогист_Маркеры.Наименование";
	
	Результат = Запрос.Выполнить();
	ВыборкаМаркеров = Результат.Выбрать();
	
	//Поиск маркера по умолчанию
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_Маркеры.Ссылка
	               |ИЗ
	               |	Справочник.МегаЛогист_Маркеры КАК МегаЛогист_Маркеры
	               |ГДЕ
	               |	МегаЛогист_Маркеры.ПоУмолчанию = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МегаЛогист_Маркеры.Наименование";
	
	Результат = Запрос.Выполнить();
	ВыборкаПоУмолчанию = Результат.Выбрать();
	Если ВыборкаПоУмолчанию.Следующий() Тогда
	
		МаркерПоУмолчанию = ВыборкаПоУмолчанию.Ссылка;
	
	КонецЕсли;
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Маркеры.Ссылка
	//               |ИЗ
	//               |	Справочник.Маркеры КАК Маркеры
	//               |ГДЕ
	//               |	Маркеры.ВидМаркера = ЗНАЧЕНИЕ(Перечисление.ВидыМаркеров.МаркерТС)
	//               |	И Маркеры.ПоУмолчанию = ЛОЖЬ";
	//
	//Результат = Запрос.Выполнить();
	//ВыборкаМаркеровТС = Результат.Выбрать();
	
	ТаблицаАдресов.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыАдресов));
	ТаблицаМаркеров = Новый ТаблицаЗначений;
	ТаблицаМаркеров.Колонки.Добавить("МаршрутныйЛист");
	ТаблицаМаркеров.Колонки.Добавить("Маркер");
	ТаблицаМаркеров.Колонки.Добавить("ТекНомер");
	
	МассивКурьеров = Новый Массив;
	
	Для каждого СтрокаТЗ Из ТаблицаАдресов Цикл
		
		//Продолжение инициализации
		СтрокаТЗ.Статус = СтрокаТЗ.ДокументОснование.Статус;
		
		//Найдем маршрутный лист
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	МаршрутныйЛистМаршрутныеЗадания.Ссылка,
		               |	МаршрутныйЛистМаршрутныеЗадания.НомерСтроки
		               |ИЗ
		               |	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
		               |ГДЕ
		               |	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание = &МаршрутноеЗадание
		               |	И МаршрутныйЛистМаршрутныеЗадания.Ссылка.Проведен = ИСТИНА
		               |	И МаршрутныйЛистМаршрутныеЗадания.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("МаршрутноеЗадание", СтрокаТЗ.ДокументОснование);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НайденнаяСтрока = ТаблицаМаркеров.Найти(Выборка.Ссылка, "МаршрутныйЛист");
			Если НайденнаяСтрока = Неопределено Тогда
				
				Если ВыборкаМаркеров.Следующий() Тогда
				
					СтрокаТЗ.Маркер1 = ВыборкаМаркеров.Ссылка;
					НоваяСтрока = ТаблицаМаркеров.Добавить();
					НоваяСтрока.МаршрутныйЛист 	= Выборка.Ссылка;
					НоваяСтрока.Маркер 			= ВыборкаМаркеров.Ссылка;
					НоваяСтрока.ТекНомер 		= 1;
					
					Если ЗначениеЗаполнено(СтрокаТЗ.Курьер) И МассивКурьеров.Найти(СтрокаТЗ.Курьер) = Неопределено  Тогда
						МассивКурьеров.Добавить(СтрокаТЗ.Курьер);
						НоваяСтрока = ТаблицаКурьеров.Добавить();
						НоваяСтрока.Курьер = СтрокаТЗ.Курьер;
						НоваяСтрока.Маркер =ВыборкаМаркеров.Ссылка;
						
					КонецЕсли;
					
				КонецЕсли;
				СтрокаТЗ.НомерВМЗ = Выборка.НомерСтроки;
			Иначе
				СтрокаТЗ.Маркер1 = НайденнаяСтрока.Маркер;
				НайденнаяСтрока.ТекНомер = НайденнаяСтрока.ТекНомер + 1;
				СтрокаТЗ.НомерВМЗ = Выборка.НомерСтроки;
				
				Если ЗначениеЗаполнено(СтрокаТЗ.Курьер) И МассивКурьеров.Найти(СтрокаТЗ.Курьер) = Неопределено  Тогда
					МассивКурьеров.Добавить(СтрокаТЗ.Курьер);
					НоваяСтрока = ТаблицаКурьеров.Добавить();
					НоваяСтрока.Курьер = СтрокаТЗ.Курьер;
					НоваяСтрока.Маркер = НайденнаяСтрока.Маркер;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе 
			
			СтрокаТЗ.НомерВМЗ = "";
			
		КонецЕсли; 
		
	КонецЦикла;
	

	#Если Не ВебКлиент Тогда
		Обработка = РеквизитФормыВЗначение("Объект");
		Обработка.ПутьККарте = Параметры.ПутьККарте;
		КартаHTML = Обработка.ПутьККарте;
	#КонецЕсли
	ТекущееВремя = Параметры.ТекущееВремя;
	
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	
	ЗадержкаОтправкиЗапроса = ?(Константы.МегаЛогист_ЗадержкаОтправкиЗапроса.Получить() = 0, 0.1, Константы.МегаЛогист_ЗадержкаОтправкиЗапроса.Получить());
	
	//ВремяНачала = Дата("20160308145930");
	
	ЧастотаПроверкиИзмененияКоординат = ?(Константы.МегаЛогист_ЧастотаПроверкиИзмененияКоординат.Получить() = 0, 1, Константы.МегаЛогист_ЧастотаПроверкиИзмененияКоординат.Получить());
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьКартинкуСервер(Маркер, ИмяКартинки, ИмяРеквизита)
 
	Если ТипЗнч(Маркер) = Тип("УникальныйИдентификатор") Тогда
	
		Маркер = Справочники.МегаЛогист_Маркеры.ПолучитьСсылку(Маркер);
	
	КонецЕсли;
	Картинка = Маркер[ИмяРеквизита].Получить();
	Картинка.Записать(КаталогВременныхФайлов() + ИмяКартинки);
	
	Двоичное 	= Новый ДвоичныеДанные(КаталогВременныхФайлов() + ИмяКартинки);
	Адрес 		= ПоместитьВоВременноеХранилище(Двоичное, ЭтаФорма.УникальныйИдентификатор);
	Возврат Адрес;

КонецФункции // ВыгрузитьКартинкуСервер()

// Функция приводит навигационную ссылку к временному имени маркера
//
// Параметры
//  СтрокаПриведения  - Строка - <описание параметра>
//
// Возвращаемое значение:
//   СТрока   - <описание возвращаемого значения>
//
Функция ПривестиИмяМаркера(Знач СтрокаПриведения, Знач Реквизит)

	ПозицияСимвола = Найти(СтрокаПриведения, "?ref=") + 5;
	//СтрокаВозврата = СтрЗаменить(СтрокаПриведения, "/", "");
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "\", "");
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "?", "");
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата, ".", "");
	СтрокаВозврата = Сред(СтрокаПриведения, ПозицияСимвола, СтрДлина(СтрокаПриведения) - (ПозицияСимвола - 1));
	
	Возврат "" + Реквизит + "_" + СтрокаВозврата + ".png";

КонецФункции // ПривестиИмяМаркера()


#Область ПроцедурыПоляHTMLДокумента

&НаКлиенте
Процедура КартаHTMLДокументСформирован(Элемент)
	
	Если Не ПервыйВызов Тогда
	
		ПервыйВызов = Истина;
		Возврат;
	
	КонецЕсли; 
	
	Попытка
	    Если Не КартаИнициализирована Тогда
			
			СтрокаИнициализации = ПолучитьСтрокуИнициализацииСервер();
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИнициализации, ",", Истина);
			Если МассивСтрок.Количество() <> 25 Тогда
			
				Сообщить("Карта не может быть отображена. Проверьте настройки инициализации карты");
				Возврат;
			
			КонецЕсли;
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_initialize(МассивСтрок[0], 
			//														МассивСтрок[1], 
			//														МассивСтрок[2], 
			//														МассивСтрок[3], 
			//														МассивСтрок[4], 
			//														МассивСтрок[5],
			//														МассивСтрок[6],
			//														МассивСтрок[7],
			//														МассивСтрок[8],
			//														МассивСтрок[9],
			//														МассивСтрок[10],
			//														МассивСтрок[11],
			//														МассивСтрок[12],
			//														МассивСтрок[13],
			//														МассивСтрок[14],
			//														МассивСтрок[15],
			//														МассивСтрок[16],
			//														МассивСтрок[17],
			//														МассивСтрок[18],
			//														ПолучитьИмяГеокодера());
			МегаЛогист_Служебный.Инициализация(Элементы, МассивСтрок, ПолучитьИмяГеокодера(), ПолучитьКлючАПИ());
			КартаИнициализирована = Истина;
			ПодключитьОбработчикОжидания("ЗаполнитьМаркерыНаКарте", 1, Истина);
			
			ВоспроизвестиМаршрут();
			
		КонецЕсли;
	Исключение
	
	КонецПопытки;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючАПИ()

	Возврат МегаЛогист_Служебный.ПолучитьКлючАПИ();

КонецФункции

#КонецОбласти

&НаСервере 
// производится проверка переданного адреса по регистру "Сохраненные адреса"
//
// Параметры
//  Адрес - Строка
//
// Возвращаемое значение:
//   Структура   - структура возврата
//
Функция ПроверитьВнесениеАдреса(Адрес)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МегаЛогист_СохраненныеАдреса.Широта,
	|	МегаЛогист_СохраненныеАдреса.Долгота
	|ИЗ
	|	РегистрСведений.МегаЛогист_СохраненныеАдреса КАК МегаЛогист_СохраненныеАдреса
	|ГДЕ
	|	МегаЛогист_СохраненныеАдреса.ПредставлениеАдреса = &ПредставлениеАдреса";
	
	Запрос.УстановитьПараметр("ПредставлениеАдреса", Адрес);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("Широта, Долгота", Выборка.Широта, Выборка.Долгота)
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли; 	

КонецФункции // ПроверитьВнесениеАдреса()

&НаКлиенте
Процедура ЗаполнитьМаркерыНаКарте()

	Если ИдетВывод Тогда
	
		Возврат;
		
	Иначе 
		
		ИдетВывод = Истина;
	
	КонецЕсли;
	Для каждого СтрокаТаблицы Из ТаблицаАдресов Цикл
		
		Если ПроверкаСтутусов Тогда
			
			Если ПроверитьИзмениеСтатуса(СтрокаТаблицы.ДокументОснование, СтрокаТаблицы.Статус) Тогда
			
				СписокКПереносуНаКарту.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
			
			КонецЕсли;
		
		Иначе
			СписокКПереносуНаКарту.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;

	
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);
	
	ПроверкаСтутусов = Ложь;
	
КонецПроцедуры

&НаКлиенте 
Процедура ЦиклПереносаНаКарту()

	Если СписокКПереносуНаКарту.Количество() > 0 Тогда
		
		Идентификатор = Число(СписокКПереносуНаКарту[0].Значение);
		СписокКПереносуНаКарту.Удалить(0);
	
	Иначе
		
		Если Не МаштабированиеОтключено Тогда
		
			МегаЛогист_Служебный.ЗапретитьМаштабирование(Элементы, Истина);
			МаштабированиеОтключено =  Истина;
		
		КонецЕсли;
		ИдетВывод = Ложь;
		Возврат;
	
	КонецЕсли;
	
	Попытка
		
		СтрокаТаблицы = ТаблицаАдресов.НайтиПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Маркер1) Тогда
		
			//ИмяФайла = ПривестиИмяМаркера(СтрокаТаблицы.Маркер1.УникальныйИдентификатор(), "Маркер1");
			ИмяФайла = ПривестиИмяМаркера(ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Маркер1,"Маркер1"), "Маркер1");
			#Если Не ВебКлиент Тогда
			Адрес = ВыгрузитьКартинкуСервер(СтрокаТаблицы.Маркер1, ИмяФайла, "Маркер1");
			Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ИмяФайла, Адрес);
			МассивОписаний=Новый Массив;
			МассивОписаний.Добавить(Описание);
			ПолучитьФайлы(МассивОписаний,,,Ложь);
		    #КонецЕсли
		Иначе
		
			ИмяФайла = "default1.png";
		
		КонецЕсли;
		СтруктураВозврата = ПроверитьВнесениеАдреса(СтрокаТаблицы.АдресДоставкиПриведенный);
		Если СтруктураВозврата = Неопределено Тогда
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForAddr(
			//СтрокаТаблицы.Ид, 
			//"" + СтрокаТаблицы.АдресДоставкиПриведенный, 
			//"" + СтрокаТаблицы.ТипЗадания, 
			//ИмяФайла);
			МегаЛогист_Служебный.ДобавитьМаркерАдрес(	Элементы, 
											СтрокаТаблицы, 
											СтрокаТаблицы.Ид, 
											ИмяФайла, 
											СтрокаТаблицы.НомерВМЗ, 
											ПолучитьСтатус(СтрокаТаблицы.ДокументОснование), 
											ПолучитьЦветМаркераСервер(СтрокаТаблицы.ДокументОснование));
			
		Иначе
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForLocation(
			//СтрокаТаблицы.Ид,
			//"" + СтруктураВозврата.Широта,
			//"" + СтруктураВозврата.Долгота,
			//"" + СтрокаТаблицы.АдресДоставкиПриведенный, 
			//"" + СтрокаТаблицы.ТипЗадания, 
			//ИмяФайла);
			МегаЛогист_Служебный.ДобавитьМаркерЛокация(	Элементы, 
												СтруктураВозврата, 
												СтрокаТаблицы, 
												СтрокаТаблицы.Ид, 
												ИмяФайла, 
												СтрокаТаблицы.НомерВМЗ, 
												ПолучитьСтатус(СтрокаТаблицы.ДокументОснование), 
												ПолучитьЦветМаркераСервер(СтрокаТаблицы.ДокументОснование)); 
			
		КонецЕсли;
		//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForAddr(
		//СтрокаТаблицы.Ид, 
		//"" + СтрокаТаблицы.АдресДоставкиПриведенный, 
		//"" + СтрокаТаблицы.ТипЗадания, 
		//"default1.png");
		
	Исключение
		
		Сообщить("Ошибка: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);

КонецПроцедуры

&НаСервере
Функция ПолучитьЦветМаркераСервер(ДокументОснование)
	
	Статус = ДокументОснование.Статус;
	Если Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено ИЛИ Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено Тогда
		Возврат "cancel";
	Иначе
		Возврат "done";
	КонецЕсли;
	
КонецФункции


&НаСервере 
Функция ПолучитьИмяГеокодера()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПолучитьИмяГеокодера()

КонецФункции

&НаСервере
Функция ПолучитьСтатус(ДокументОснование)

	Возврат ?(	ДокументОснование.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполнено 
				ИЛИ ДокументОснование.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено
				ИЛИ ДокументОснование.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено, "" + ДокументОснование.Статус, "");

КонецФункции // ПолучитьСтатус()

&НаСервере
Функция ПроверитьИзмениеСтатуса(ДокументОснование, ТекущийСтатус)

	Возврат ?(	ДокументОснование.Статус = ТекущийСтатус, Ложь, Истина);

КонецФункции // ПолучитьСтатус()

&НаКлиенте
Процедура ВоспроизвестиМаршрут()
	
	//НомерМаркера = 100;
	ТекущееВремя = ?(ЗначениеЗаполнено(ТекущееВремя), ТекущееВремя, ТекущаяДата());
	//Найдем запись с которой нужно начать воспроизведение
	МассивКурьеров = Новый Массив;
	Для каждого СтрокаТЧ Из ТаблицаАдресов Цикл
	
		Если МассивКурьеров.Найти(СтрокаТЧ.Курьер) = Неопределено  Тогда
			МассивКурьеров.Добавить(СтрокаТЧ.Курьер);
		КонецЕсли;
	
	КонецЦикла;
	ПоискСледующейТочки(МассивКурьеров);
	
	Для каждого СтрокаТЗ Из ПередвижениеКурьеров Цикл
		
		СтруктураОтбора = Новый Структура("Курьер", СтрокаТЗ.Курьер);
		НайденныеСтроки = ТаблицаКурьеров.НайтиСтроки(СтруктураОтбора);
		
		СтруктураВозврата = ПолучитьИмяКурьераСервер(СтрокаТЗ.Курьер);
		Если СтруктураВозврата = Неопределено Тогда
			ИмяВодителя = "";
		Иначе
			ИмяВодителя = СтруктураВозврата.Имя;
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
		
			//ИмяФайла = "default1.png";
			Если СтруктураВозврата <> Неопределено И СтруктураВозврата.Пеший Тогда 
				
				ИмяРеквизита = "ПешийКурьер";
				
			Иначе 
				
				ИмяРеквизита = "Маркер3";
				
			КонецЕсли;
			Попытка
			
				//ИмяФайла = ПривестиИмяМаркера(НайденныеСтроки[0].Маркер.УникальныйИдентификатор(), ИмяРеквизита);
				ИмяФайла = ПривестиИмяМаркера(ПолучитьНавигационнуюСсылку(МаркерПоУмолчанию,ИмяРеквизита), ИмяРеквизита);
				#Если Не ВебКлиент Тогда
				Адрес = ВыгрузитьКартинкуСервер(МаркерПоУмолчанию, ИмяФайла, ИмяРеквизита);
				Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ИмяФайла, Адрес);
				МассивОписаний=Новый Массив;
				МассивОписаний.Добавить(Описание);
				ПолучитьФайлы(МассивОписаний,,,Ложь);
			    #КонецЕсли
			Исключение
				Сообщить("Не удалось загрузить иконку: " + МаркерПоУмолчанию);
			КонецПопытки;
		
		Иначе
			
			Если СтруктураВозврата <> Неопределено И СтруктураВозврата.Пеший Тогда 
				
				ИмяРеквизита = "ПешийКурьер";
				
			Иначе 
				
				ИмяРеквизита = "Маркер3";
				
			КонецЕсли;
			Попытка
			
				//ИмяФайла = ПривестиИмяМаркера(НайденныеСтроки[0].Маркер.УникальныйИдентификатор(), ИмяРеквизита);
				ИмяФайла = ПривестиИмяМаркера(ПолучитьНавигационнуюСсылку(НайденныеСтроки[0].Маркер,ИмяРеквизита), ИмяРеквизита);
				#Если Не ВебКлиент Тогда
				Адрес = ВыгрузитьКартинкуСервер(НайденныеСтроки[0].Маркер, ИмяФайла, ИмяРеквизита);
				Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ИмяФайла, Адрес);
				МассивОписаний=Новый Массив;
				МассивОписаний.Добавить(Описание);
				ПолучитьФайлы(МассивОписаний,,,Ложь);
			    #КонецЕсли
			Исключение
				Сообщить("Не удалось загрузить иконку: " + НайденныеСтроки[0].Маркер);
			КонецПопытки;
			
		
		КонецЕсли;
		
		//ПЕРЕНОС
		//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForLocation(
		//	100 + СтрокаТЗ.ПолучитьИдентификатор(), 
		//	СтрокаТЗ.Широта,
		//	СтрокаТЗ.Долгота,
		//	"Вася П.",
		//	"Прочее", 
		//	ИмяФайла,
		//	"true");
		
		СтруктураВывода = Новый Структура("АдресДоставкиПриведенный, ТипЗадания", "", "Курьеры");
		МегаЛогист_Служебный.ДобавитьМаркерЛокация(	
								Элементы, 
								СтрокаТЗ, 
								СтруктураВывода, 
								100 + СтрокаТЗ.ПолучитьИдентификатор(), 
								ИмяФайла, 
								"", 
								ИмяВодителя,
								"",
								?(ИмяРеквизита = "ПешийКурьер", "footer", "transport"));
	    СтрокаТЗ.ПервыйВывод = Ложь;
	КонецЦикла;
		
	ПодключитьОбработчикОжидания("ВывестиДвижение", ЧастотаПроверкиИзмененияКоординат, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДвижение()

	ПроверкаСтутусов = Истина;
	ЗаполнитьМаркерыНаКарте();
	
	//Найдем запись с которой нужно начать воспроизведение
	МассивКурьеров = Новый Массив;
	Для каждого СтрокаТЧ Из ТаблицаАдресов Цикл
	
		Если МассивКурьеров.Найти(СтрокаТЧ.Курьер) = Неопределено  Тогда
			МассивКурьеров.Добавить(СтрокаТЧ.Курьер);
		КонецЕсли;
	
	КонецЦикла;
	ТекущееВремя = ТекущееВремя + ?(ЗначениеЗаполнено(ПриростВремениВоспроизведения), ПриростВремениВоспроизведения, ЧастотаПроверкиИзмененияКоординат);
	ПоискСледующейТочки(МассивКурьеров, ТекущееВремя);
	
	
	Для каждого СтрокаТЗ Из ПередвижениеКурьеров Цикл
		
		Если СтрокаТЗ.ПервыйВывод Тогда
		
			СтруктураОтбора = Новый Структура("Курьер", СтрокаТЗ.Курьер);
			НайденныеСтроки = ТаблицаКурьеров.НайтиСтроки(СтруктураОтбора);
			
			СтруктураВозврата = ПолучитьИмяКурьераСервер(СтрокаТЗ.Курьер);
			Если СтруктураВозврата = Неопределено Тогда
				ИмяВодителя = "";
			Иначе
				ИмяВодителя = СтруктураВозврата.Имя;
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ИмяФайла = "default1.png";
				
			Иначе
				
				Если СтруктураВозврата <> Неопределено И СтруктураВозврата.Пеший Тогда 
					
					ИмяРеквизита = "ПешийКурьер";
					
				Иначе 
					
					ИмяРеквизита = "Маркер3";
					
				КонецЕсли;
				Попытка
					
					//ИмяФайла = ПривестиИмяМаркера(НайденныеСтроки[0].Маркер.УникальныйИдентификатор(), ИмяРеквизита);
					ИмяФайла = ПривестиИмяМаркера(ПолучитьНавигационнуюСсылку(НайденныеСтроки[0].Маркер,ИмяРеквизита), ИмяРеквизита);
					#Если Не ВебКлиент Тогда
					Адрес = ВыгрузитьКартинкуСервер(НайденныеСтроки[0].Маркер, ИмяФайла, ИмяРеквизита);
					Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ИмяФайла, Адрес);
					МассивОписаний=Новый Массив;
					МассивОписаний.Добавить(Описание);
					ПолучитьФайлы(МассивОписаний,,,Ложь);
					#КонецЕсли
				Исключение
					Сообщить("Не удалось загрузить иконку: " + НайденныеСтроки[0].Маркер);
				КонецПопытки;
				
				
			КонецЕсли;
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForLocation(
			//	100 + СтрокаТЗ.ПолучитьИдентификатор(), 
			//	СтрокаТЗ.Широта,
			//	СтрокаТЗ.Долгота,
			//	"Вася П.",
			//	"Прочее", 
			//	ИмяФайла,
			//	"true");
			
			СтруктураВывода = Новый Структура("АдресДоставкиПриведенный, ТипЗадания", "", "Курьеры");
			МегаЛогист_Служебный.ДобавитьМаркерЛокация(	
			Элементы, 
			СтрокаТЗ, 
			СтруктураВывода, 
			100 + СтрокаТЗ.ПолучитьИдентификатор(), 
			ИмяФайла, 
			"", 
			ИмяВодителя,
			"",
			?(ИмяРеквизита = "ПешийКурьер", "footer", "transport"));
			СтрокаТЗ.ПервыйВывод = Ложь;
			
			Продолжить;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.Широта2) И ЗначениеЗаполнено(СтрокаТЗ.Долгота2) Тогда
			
			//СтруктураОтбора = Новый Структура("Курьер", СтрокаТЗ.Курьер);
			//НайденныеСтроки = ТаблицаКурьеров.НайтиСтроки(СтруктураОтбора);
			//
			//Если НайденныеСтроки.Количество() = 0 Тогда
			//	
			//	ИмяФайла = "default1.png";
			//	
			//Иначе
			//	
			//	ИмяФайла = ПривестиИмяМаркера(НайденныеСтроки[0].Маркер.УникальныйИдентификатор(), "Маркер1");
			//	Адрес = ВыгрузитьКартинкуСервер(НайденныеСтроки[0].Маркер, ИмяФайла, "Маркер1");
			//	Описание=Новый ОписаниеПередаваемогоФайла(КаталогВременныхФайлов() + "source\" + ИмяФайла, Адрес);
			//	МассивОписаний=Новый Массив;
			//	МассивОписаний.Добавить(Описание);
			//	ПолучитьФайлы(МассивОписаний,,,Ложь);
			//	
			//	
			//КонецЕсли;

			
			//Элементы.КартаHTML.Документ.parentWindow.map_deleteMarker(100 + СтрокаТЗ.ПолучитьИдентификатор());
			//
			////НомерМаркера = НомерМаркера + 1;
			//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForLocation(
			//100 + СтрокаТЗ.ПолучитьИдентификатор(), 
			//СтрокаТЗ.Широта2,
			//СтрокаТЗ.Долгота2,
			//"Вася П.",
			//"Прочее", 
			//ИмяФайла,
			//"true");
			МегаЛогист_Служебный.ДвижениеМаркера(Элементы, 100 + СтрокаТЗ.ПолучитьИдентификатор(), СтрокаТЗ);
		КонецЕсли;
		
	
	КонецЦикла;


КонецПроцедуры

&НаСервере
Функция ПолучитьИмяКурьераСервер(Курьер)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_ТранспортныеСредстваКурьеров.ИмяКурьераНаКарте,
	               |	МегаЛогист_ТранспортныеСредстваКурьеров.Пеший
	               |ИЗ
	               |	Справочник.МегаЛогист_ТранспортныеСредстваКурьеров КАК МегаЛогист_ТранспортныеСредстваКурьеров
	               |ГДЕ
	               |	МегаЛогист_ТранспортныеСредстваКурьеров.Курьер = &Курьер";
	
	Запрос.УстановитьПараметр("Курьер", Курьер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("Имя, Пеший", Выборка.ИмяКурьераНаКарте, Выборка.Пеший);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции // ПолучитьИмяКурьераСервер()


&НаСервере
Процедура ПоискСледующейТочки(МассивКурьеров, Период = Неопределено)

	ГраничноеРасстояние = Константы.МегаЛогист_ГраничноеРасстояниеДляGPS.Получить();
	
	ПерваяОшибка = Истина;
	Инициализация = Ложь;
	
	Если Период = Неопределено Тогда
		Период = ТекущееВремя;
		Инициализация = Истина;
	КонецЕсли;
	
	Для каждого ЭлементМассива Из МассивКурьеров Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	МегаЛогист_ПеремещенияКурьеров.Период КАК Период,
		               |	МегаЛогист_ПеремещенияКурьеров.Курьер КАК Курьер,
		               |	МегаЛогист_ПеремещенияКурьеров.НомерПровайдера,
		               |	МегаЛогист_ПеремещенияКурьеров.Долгота,
		               |	МегаЛогист_ПеремещенияКурьеров.Широта,
		               |	МегаЛогист_ПеремещенияКурьеров.Скорость,
		               |	МегаЛогист_ПеремещенияКурьеров.Направление,
		               |	МегаЛогист_ПеремещенияКурьеров.ИмяПровайдера
		               |ИЗ
		               |	РегистрСведений.МегаЛогист_ПеремещенияКурьеров КАК МегаЛогист_ПеремещенияКурьеров
		               |ГДЕ
					   |	МегаЛогист_ПеремещенияКурьеров.Период >= &НачалоПериода
					   |	И МегаЛогист_ПеремещенияКурьеров.Период <= &КонецПериода
		               |	И МегаЛогист_ПеремещенияКурьеров.Курьер = &Курьер
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период УБЫВ";
					   
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период));
		Запрос.УстановитьПараметр("КонецПериода", Период);
		Запрос.УстановитьПараметр("Курьер", ЭлементМассива);
		
		Результат 	= Запрос.Выполнить();
		Выборка 	= Результат.Выбрать();
		
		НайденныеСтроки = Новый Массив;
		//Поиск курьера в Таблице
		Если ПередвижениеКурьеров.Количество() > 0 Тогда
		
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Курьер", ЭлементМассива);
			НайденныеСтроки = ПередвижениеКурьеров.НайтиСтроки(СтруктураОтбора);
			
		КонецЕсли;
				
		//Если ПередвижениеКурьеров.Количество() = 0 ИЛИ НайденныеСтроки.Количество() = 0 Тогда
		Если НайденныеСтроки.Количество() = 0 Тогда
		
			Если Выборка.Следующий() Тогда
			
				НоваяСтрока = ПередвижениеКурьеров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Скорость = 0;
				НоваяСтрока.ПервыйВывод = Истина;
			
			КонецЕсли;
		
		Иначе
			
			СтрокаДляОбработки = НайденныеСтроки[0];
			Если ЗначениеЗаполнено(СтрокаДляОбработки.Долгота2) И  ЗначениеЗаполнено(СтрокаДляОбработки.Широта2) Тогда
			
				//Отчистим предыдущую точку 
				СтрокаДляОбработки.Широта 	= СтрокаДляОбработки.Широта2;
				СтрокаДляОбработки.Широта2 	= 0;
				СтрокаДляОбработки.Долгота 	= СтрокаДляОбработки.Долгота2;
				СтрокаДляОбработки.Долгота2 = 0;
				СтрокаДляОбработки.Скорость = 0;
				СтрокаДляОбработки.Период 	= СтрокаДляОбработки.Период2;
				СтрокаДляОбработки.Период2 	= Дата("00010101000000");
			
			КонецЕсли;
			
			//Проверка данных о местоположении курьера
			Если Результат.Пустой() И Инициализация Тогда
			
				Если ПерваяОшибка Тогда
				
					Сообщить("Отсутствует GPS-сигнал. Не удается определить местоположение курьеров (водителей):");
					ПерваяОшибка = Ложь;
				
				КонецЕсли;
				    Сообщить(ЭлементМассива);
			
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				//Нет необходимости обрабатывать строки которые получили раньше текущей 
				Если Выборка.Период <= СтрокаДляОбработки.Период  Тогда
					Продолжить;
				КонецЕсли;
				//Проверка граничного расстояния
				Попытка
				
					РасстояниеМеждуТочками = (acos(sin(СтрокаДляОбработки.Широта)*sin(Выборка.Широта) + cos(СтрокаДляОбработки.Широта)*cos(Выборка.Широта)*cos(СтрокаДляОбработки.Долгота - Выборка.Долгота))) * 111.1 * 1000;
				
				Исключение
					
					РасстояниеМеждуТочками = 0;
					
				КонецПопытки;
				Если РасстояниеМеждуТочками < ГраничноеРасстояние Тогда
					Продолжить;
				КонецЕсли;
				//Точка найдена заполним параметры
				СтрокаДляОбработки.Широта2 	= Выборка.Широта;
				СтрокаДляОбработки.Долгота2 = Выборка.Долгота;
				СтрокаДляОбработки.Скорость = ?(Выборка.Скорость = 0, РасстояниеМеждуТочками / (СтрокаДляОбработки.Период - Выборка.Период), Выборка.Скорость);
				СтрокаДляОбработки.Период2	= Выборка.Период;
				Прервать;
			КонецЦикла;

		
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		
		КартаHTML = "<!DOCTYPE html>
                     |<html>
                     |<head>
                     |	<title>Map Leaflet</title>
                     |	<meta charset=""utf-8"" />
                     |	<meta http-equiv=""X-UA-Compatible"" content=""IE=8"" >
                     |
                     |
                     |	<script type=''text/javascript''>
					 |		window.onload = function(){ window.open('" + ПолучитьАдресПубликации() + "/leaflet_web_2.html', '_self'); }
                     |
                     |	</script>
                     |</head>
                     |<body>
                     |
                     |</body>
                     |</html>";
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьАдресПубликации()
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПолучитьАдресПубликации()
КонецФункции


//&НаКлиенте
//Процедура ВремяНачалаПриИзменении(Элемент)
//	
//	ТекущееВремя = ВремяНачала;
//	ВоспроизвестиМаршрут();
//	
//КонецПроцедуры

ИдетВывод = Ложь;
МаштабированиеОтключено = Ложь;