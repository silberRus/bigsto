&НаСервере
Функция ПолучитьФильтрИспользуемыхТиповЗаданий()
	
	МассивИспользуемыхТиповЗаданий=Новый Массив;
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	МегаЛогист_НастройкиТиповЗаданий.ТипЗадания
	             |ИЗ
	             |	РегистрСведений.МегаЛогист_НастройкиТиповЗаданий КАК МегаЛогист_НастройкиТиповЗаданий
	             |ГДЕ
	             |	МегаЛогист_НастройкиТиповЗаданий.Использовать = Истина";
				 
	МассивИспользуемыхТиповЗаданий=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипЗадания");
	
	Возврат МассивИспользуемыхТиповЗаданий
	
КонецФункции

&НаСервере
Функция ПолучитьФильтрСтатусов()
	
	МассивСтатусов=Новый Массив;
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	МегаЛогист_НастройкаСтатусов.Статус
	             |ИЗ
	             |	РегистрСведений.МегаЛогист_НастройкаСтатусов КАК МегаЛогист_НастройкаСтатусов";
				 
	МассивСтатусов=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статус");
	
	Возврат МассивСтатусов
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СписокУсловноеОформление = МаршрутныеЗадания.КомпоновщикНастроек.Настройки.УсловноеОформление;
		
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Выделение цветом состояния "Отменен"
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния ""Отменен""'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Ложь, Истина, ));
	
	// Выделение цветом состояния "Выполнен, Не выполнен"
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния ""Выполнен""'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокСтатусов=Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполнено);
	СписокСтатусов.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено);
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);

	СписокУсловноеОформление = МаршрутныеЛисты.КомпоновщикНастроек.Настройки.УсловноеОформление;
		
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Выделение цветом состояния "Отменен"
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния ""Отменен""'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.Отменен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Ложь, Истина, ));
	
	// Выделение цветом состояния "Выполнен, Не выполнен"
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния ""Выполнен, Не выполнен""'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокСтатусов=Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.Выполнен);
	СписокСтатусов.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.НеВыполнен);
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьАдресаВХранилище(ВходящаяСтрока = "")
	
	ТаблицаАдресов = РеквизитФормыВЗначение("НераспределенныеАдреса").СкопироватьКолонки();
	ТаблицаАдресов.Колонки.Добавить("Ид");
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВходящаяСтрока, ",", Истина);
	Если МассивСтрок.Количество() > 0 Тогда
		
		Ид = 1;
		Для Каждого СтрокаМассива из МассивСтрок цикл
			
			///////////////////////////////////////////
			//Мироненко Д.С 16.06.2015 22:36:57 НАЧАЛО
			//Комментарий: Необходимо использовать индекс
			
			//СтрокаТаблицы = НераспределенныеАдреса.НайтиПоИдентификатору(Число(СтрокаМассива));
			//НоваяСтрока=ТаблицаАдресов.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			
			Попытка
			
				НоваяСтрока=ТаблицаАдресов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,НераспределенныеАдреса[Число(СтрокаМассива) - 1]);
				НоваяСтрока.Ид = Ид;
				Ид = Ид + 1;
			
			Исключение
				//Строки уже нет в таблице
				
			КонецПопытки;
			
			//Мироненко Д.С 16.06.2015 22:37:10 КОНЕЦ
			///////////////////////////////////////////
			
		КонецЦикла;		
	
	Иначе
		
		Ид = 1;
		 
		Для Каждого ВыделеннаяСтрока из Элементы.НераспределенныеАдреса.ВыделенныеСтроки цикл
			
			СтрокаТаблицы = НераспределенныеАдреса.НайтиПоИдентификатору(ВыделеннаяСтрока);
			НоваяСтрока=ТаблицаАдресов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			НоваяСтрока.Ид = Ид;
			Ид = Ид + 1;
			
		КонецЦикла;	
	
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаАдресов, УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбновитьНаСервере();
	
	ПустаяДата = Дата(1, 1, 1);
	ВремяДоставкиПоФ=?(ВремяДоставкиПо=ПустаяДата,Дата(1,1,1,23,59,59),ВремяДоставкиПо);
	
	Если ВремяДоставкиС>ВремяДоставкиПоФ Тогда
		Сообщить("Некорректно задан период фильтрации");
		Возврат;
	КонецЕсли;
	
	НераспределенныеАдреса.Очистить();
	
	МассивИспользуемыхТиповЗаданий=ПолучитьФильтрИспользуемыхТиповЗаданий();
	Если МассивИспользуемыхТиповЗаданий.Количество() = 0 тогда
		Сообщить("Не выбран ни один из типов заданий для вывода в табличную часть");
	КонецЕсли;
	
	Запрос=Новый Запрос();
	
	//+АТ ТерентьевЕМ
	
	ХранилищеНастроекМегалогист = АТ_ОбщегоНазначения.ПолучитьНастройку("Мегалогист");
	ДатаНачалаЭксплуатации = НачалоДня(ДатаДоставки);
	СписокЗон = Новый Массив;
	ОтборДней = 0;
	Если ТипЗнч(ХранилищеНастроекМегалогист) = Тип("Структура") Тогда
		ХранилищеНастроекМегалогист.Свойство("ДатаНачалаЭксплуатации", ДатаНачалаЭксплуатации);
		ХранилищеНастроекМегалогист.Свойство("ОтборДней", ОтборДней);
		Если ХранилищеНастроекМегалогист.Свойство("ЗоныСкладов") Тогда
			ТаблицаЗон = ХранилищеНастроекМегалогист.ЗоныСкладов.Скопировать(Новый Структура("Склад", Склад));
			СписокЗон = ТаблицаЗон.ВыгрузитьКолонку("ЗонаДоставки");
		КонецЕсли;
	КонецЕсли;
	
	ОтборПоЗонамВключая = Ложь;
	ОтборПоЗонамИсключая = Ложь;
	
	Если ОтборПоЗонам = 1 Тогда
		ОтборПоЗонамВключая = Истина;
	ИначеЕсли ОтборПоЗонам = 2 Тогда
		ОтборПоЗонамИсключая = Истина;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтборПоЗонамВключая", ОтборПоЗонамВключая);
	Запрос.УстановитьПараметр("ОтборПоЗонамИсключая", ОтборПоЗонамИсключая);
	Запрос.УстановитьПараметр("СписокЗон", СписокЗон);
	Запрос.УстановитьПараметр("ДатаНачалаЭксплуатации", ДатаНачалаЭксплуатации);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ДатаДоставки) - 24*60*60 * ОтборДней);
	Запрос.УстановитьПараметр("НачПериодаМаршрутногоЛиста", НачалоДня(ДатаДоставки) - 24*60*60 * (ОтборДней + 50));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ДатаДоставки));
	Запрос.УстановитьПараметр("Склад", Склад);
	
	//-АТ ТерентьевЕМ
	
	//Запрос.УстановитьПараметр("НачПериода", НачалоДня(ДатаДоставки));
	//Запрос.УстановитьПараметр("КонПериода", КонецДня(ДатаДоставки));
	//Запрос.УстановитьПараметр("Склад", Склад);
	
	Запрос.УстановитьПараметр("ВремяДоставкиС", ВремяДоставкиС);
	Запрос.УстановитьПараметр("ВремяДоставкиПо", ВремяДоставкиПо);
	
	МассивСпособовДоставкиИсключить=Новый Массив;
	МассивСпособовДоставкиИсключить.Добавить(Перечисления.СпособыДоставки.Самовывоз);
	МассивСпособовДоставкиИсключить.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчика);
	//+АТ ТерентьевЕМ
	МассивСпособовДоставкиИсключить.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
	МассивСпособовДоставкиИсключить.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
	//-АТ ТерентьевЕМ
	Запрос.УстановитьПараметр("МассивСпособовДоставкиИсключить",МассивСпособовДоставкиИсключить);
	
	МассивСтатусов=ПолучитьФильтрСтатусов();
	Запрос.УстановитьПараметр("МассивСтатусов",МассивСтатусов);
	Запрос.УстановитьПараметр("КРаспределению",Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.КРаспределению);	
	
	Запрос.УстановитьПараметр("МегаЛогист_ИспользоватьАдресаПартнеров",Константы.МегаЛогист_ИспользоватьАдресаПартнеров.Получить());
	
	// silber {
	
	СпособАдресПеревозчика = Новый Массив;
	СпособАдресПеревозчика.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	СпособАдресПеревозчика.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	СпособАдресПеревозчика.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчика);
	СпособАдресПеревозчика.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
	СпособАдресПеревозчика.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	СпособАдресПеревозчика.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	Запрос.УстановитьПараметр("СпособАдресПеревозчика", СпособАдресПеревозчика);
	
	Если ПолучитьФункциональнуюОпцию("АТ_Мультидоставка") Тогда
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Реал.Ссылка, Пер.Ссылка) 			ДокументОснование,
		|	ВЫБОР
		|		КОГДА Рег.СпособДоставки В(&СпособАдресПеревозчика)
		|			ТОГДА Рег.АдресДоставкиПеревозчик
		|		ИНАЧЕ Рег.АдресДоставки
		|	КОНЕЦ 										АдресДоставки,
		|	Рег.ВремяДоставкиС							ВремяДоставкиС,
		|	Рег.ВремяДоставкиПо							ВремяДоставкиПо,
		|	Объект.Контрагент							Контрагент,
		|	Отправитель						 			Склад,
		|	Рег.ЗонаДоставки							ЗонаДоставки,
		|	Рег.СпособДоставки							СпособДоставки,
		|	Перевозчик									ТранспортнаяКомпания,
		|	ВЫРАЗИТЬ(Рег.Комментарий КАК СТРОКА(1000))	Комментарий,
		|	null 										АдресДоставкиЗначенияПолей
		|
		|ПОМЕСТИТЬ	РаспоряженияНаДоставку
		|ИЗ			РегистрСведений.АТ_МаршрутДоставки Рег
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 	Документ.РеализацияТоваровУслуг КАК Реал
		|ПО					Рег.Объект = Реал.ЗаказКлиента
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 	Документ.ПеремещениеТоваров КАК Пер
		|ПО					Рег.Объект = Пер.ЗаказНаПеремещение
		|	
		|ГДЕ
		|	Отправитель = &Склад И
		|	Отправитель = ЕСТЬNULL(Пер.СкладОтправитель, Объект.Склад) И
		|	ЕСТЬNULL(Пер.Статус, Объект.Статус) В(&МассивСтатусов) И
		|	ЕСТЬNULL(Реал.Дата, Пер.Дата) МЕЖДУ &НачПериода И &КонПериода И
		|	ЕСТЬNULL(Реал.Дата, Пер.Дата) >= &ДатаНачалаЭксплуатации И
		|	НЕ Рег.СпособДоставки В (&МассивСпособовДоставкиИсключить) И
		|	ЕСТЬNULL(Реал.Проведен, ЕСТЬNULL(Пер.Проведен, ЛОЖЬ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПоставщикуТовары.Ссылка,
		|	ЗаказПоставщикуТовары.Ссылка.АдресДоставки,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ВЫБОР
		|		КОГДА &МегаЛогист_ИспользоватьАдресаПартнеров
		|			ТОГДА ЗаказПоставщикуТовары.Ссылка.Партнер
		|		ИНАЧЕ ЗаказПоставщикуТовары.Ссылка.Контрагент
		|	КОНЕЦ,
		|	ЗаказПоставщикуТовары.Склад,
		|	ЗаказПоставщикуТовары.Ссылка.ЗонаДоставки,
		|	ЗаказПоставщикуТовары.Ссылка.ПеревозчикПартнер,
		|	ЗаказПоставщикуТовары.Ссылка.СпособДоставки,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка.Дата >= &ДатаНачалаЭксплуатации
		|	И ЗаказПоставщикуТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ЗаказПоставщикуТовары.Ссылка.Склад = &Склад
		|	И ЗаказПоставщикуТовары.Отменено = ЛОЖЬ
		|	И НЕ ЗаказПоставщикуТовары.Ссылка.СпособДоставки В (&МассивСпособовДоставкиИсключить)
		|	И ЗаказПоставщикуТовары.Ссылка.Статус В(&МассивСтатусов)
		|	И ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МегаЛогист_МаршрутноеЗадание.Ссылка,
		|	МегаЛогист_МаршрутноеЗадание.АдресДоставки,
		|	МегаЛогист_МаршрутноеЗадание.ВремяДоставкиС,
		|	МегаЛогист_МаршрутноеЗадание.ВремяДоставкиПо,
		|	МегаЛогист_МаршрутноеЗадание.Контрагент,
		|	АТ_Склад,
		|	АТ_ЗонаДоставки,
		|	NULL,
		|	NULL,
		|	ВЫРАЗИТЬ(МегаЛогист_МаршрутноеЗадание.Комментарий КАК СТРОКА(500)),
		|	ВЫРАЗИТЬ(МегаЛогист_МаршрутноеЗадание.АдресДоставкиЗначенияПолей КАК СТРОКА(700))
		|ИЗ
		|	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
		|ГДЕ
		|	МегаЛогист_МаршрутноеЗадание.ДатаДоставки МЕЖДУ &НачПериода И &КонПериода
		|	И МегаЛогист_МаршрутноеЗадание.АТ_Склад = &Склад
		|	И МегаЛогист_МаршрутноеЗадание.Статус = &КРаспределению
		|	И МегаЛогист_МаршрутноеЗадание.Проведен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспоряженияНаДоставку.ДокументОснование КАК ДокументОснование,
		|	РаспоряженияНаДоставку.АдресДоставки КАК АдресДоставки,
		|	РаспоряженияНаДоставку.ВремяДоставкиС КАК ВремяДоставкиС,
		|	РаспоряженияНаДоставку.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	РаспоряженияНаДоставку.Контрагент КАК Контрагент,
		|	РаспоряженияНаДоставку.Склад КАК Склад,
		|	РаспоряженияНаДоставку.ЗонаДоставки КАК ЗонаДоставки,
		|	РаспоряженияНаДоставку.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
		|	РаспоряженияНаДоставку.СпособДоставки КАК СпособДоставки,
		|	РаспоряженияНаДоставку.Комментарий КАК Комментарий,
		|	РаспоряженияНаДоставку.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей
		|ИЗ
		|	РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
		|		ПО РаспоряженияНаДоставку.ДокументОснование = МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование
		|			И (НЕ МаршрутныйЛистМаршрутныеЗадания.Ссылка.ПометкаУдаления)
		|			И (МаршрутныйЛистМаршрутныеЗадания.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЛиста.Отменен))
		|			И (МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено))
		|			И (МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ПометкаУдаления = ЛОЖЬ)
		|			И (МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДатаДоставки МЕЖДУ &НачПериодаМаршрутногоЛиста И &КонПериода)
		|			И (МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование <> НЕОПРЕДЕЛЕНО)
		|ГДЕ
		|	МаршрутныйЛистМаршрутныеЗадания.Ссылка ЕСТЬ NULL
		|	И (&ОтборПоЗонамВключая = ЛОЖЬ
		|			ИЛИ &ОтборПоЗонамВключая = ИСТИНА
		|				И РаспоряженияНаДоставку.ЗонаДоставки В (&СписокЗон))
		|	И (&ОтборПоЗонамИсключая = ЛОЖЬ
		|			ИЛИ &ОтборПоЗонамИсключая = ИСТИНА
		|				И НЕ РаспоряженияНаДоставку.ЗонаДоставки В (&СписокЗон))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗонаДоставки";
		
	Иначе
	
	// } silber
	
		//+АТ ТерентьевЕМ
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаСиноним.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА ЗаказКлиентаСиноним.АдресДоставкиПеревозчика
		|		ИНАЧЕ ЗаказКлиентаСиноним.АдресДоставки
		|	КОНЕЦ КАК АдресДоставки,
		|	ЗаказКлиентаСиноним.ВремяДоставкиС КАК ВремяДоставкиС,
		|	ЗаказКлиентаСиноним.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	ВЫБОР
		|		КОГДА &МегаЛогист_ИспользоватьАдресаПартнеров
		|			ТОГДА ЗаказКлиентаСиноним.Партнер
		|		ИНАЧЕ ЗаказКлиентаСиноним.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ЗаказКлиентаСиноним.Склад КАК Склад,
		|	ЗаказКлиентаСиноним.ЗонаДоставки КАК ЗонаДоставки,
		|	ЗаказКлиентаСиноним.ПеревозчикПартнер КАК ТранспортнаяКомпания,
		|	ЗаказКлиентаСиноним.СпособДоставки КАК СпособДоставки,
		|	ВЫРАЗИТЬ(ЗаказКлиентаСиноним.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(500)) КАК Комментарий,
		|	ВЫРАЗИТЬ(ЗаказКлиентаСиноним.АдресДоставкиЗначенияПолей КАК СТРОКА(700)) КАК АдресДоставкиЗначенияПолей
		|ПОМЕСТИТЬ РаспоряженияНаДоставку
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиентаСиноним
		|		ПО РеализацияТоваровУслуг.ЗаказКлиента = ЗаказКлиентаСиноним.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата >= &ДатаНачалаЭксплуатации
		|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ЗаказКлиентаСиноним.Склад = &Склад
		|	И ЗаказКлиентаСиноним.Статус В(&МассивСтатусов)
		|	И НЕ ЗаказКлиентаСиноним.СпособДоставки В (&МассивСпособовДоставкиИсключить)
		|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА РеализацияТоваровУслуг.АдресДоставкиПеревозчика
		|		ИНАЧЕ РеализацияТоваровУслуг.АдресДоставки
		|	КОНЕЦ,
		|	РеализацияТоваровУслуг.ВремяДоставкиС,
		|	РеализацияТоваровУслуг.ВремяДоставкиПо,
		|	ВЫБОР
		|		КОГДА &МегаЛогист_ИспользоватьАдресаПартнеров
		|			ТОГДА РеализацияТоваровУслуг.Партнер
		|		ИНАЧЕ РеализацияТоваровУслуг.Контрагент
		|	КОНЕЦ,
		|	РеализацияТоваровУслуг.Склад,
		|	РеализацияТоваровУслуг.ЗонаДоставки,
		|	РеализацияТоваровУслуг.ПеревозчикПартнер,
		|	РеализацияТоваровУслуг.СпособДоставки,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(500)),
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.АдресДоставкиЗначенияПолей КАК СТРОКА(700))
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата >= &ДатаНачалаЭксплуатации
		|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И РеализацияТоваровУслуг.Склад = &Склад
		|	И РеализацияТоваровУслуг.Статус В(&МассивСтатусов)
		|	И НЕ РеализацияТоваровУслуг.СпособДоставки В (&МассивСпособовДоставкиИсключить)
		|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПоставщикуТовары.Ссылка,
		|	ЗаказПоставщикуТовары.Ссылка.АдресДоставки,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ВЫБОР
		|		КОГДА &МегаЛогист_ИспользоватьАдресаПартнеров
		|			ТОГДА ЗаказПоставщикуТовары.Ссылка.Партнер
		|		ИНАЧЕ ЗаказПоставщикуТовары.Ссылка.Контрагент
		|	КОНЕЦ,
		|	ЗаказПоставщикуТовары.Склад,
		|	ЗаказПоставщикуТовары.Ссылка.ЗонаДоставки,
		|	ЗаказПоставщикуТовары.Ссылка.ПеревозчикПартнер,
		|	ЗаказПоставщикуТовары.Ссылка.СпособДоставки,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка.Дата >= &ДатаНачалаЭксплуатации
		|	И ЗаказПоставщикуТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ЗаказПоставщикуТовары.Ссылка.Склад = &Склад
		|	И ЗаказПоставщикуТовары.Отменено = ЛОЖЬ
		|	И НЕ ЗаказПоставщикуТовары.Ссылка.СпособДоставки В (&МассивСпособовДоставкиИсключить)
		|	И ЗаказПоставщикуТовары.Ссылка.Статус В(&МассивСтатусов)
		|	И ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказНаПеремещениеСиноним.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА ЗаказНаПеремещениеСиноним.АдресДоставкиПеревозчика
		|		ИНАЧЕ ЗаказНаПеремещениеСиноним.АдресДоставки
		|	КОНЕЦ,
		|	ЗаказНаПеремещениеСиноним.ВремяДоставкиС,
		|	ЗаказНаПеремещениеСиноним.ВремяДоставкиПо,
		|	NULL,
		|	ЗаказНаПеремещениеСиноним.СкладОтправитель,
		|	ЗаказНаПеремещениеСиноним.ЗонаДоставки,
		|	ЗаказНаПеремещениеСиноним.ПеревозчикПартнер,
		|	ЗаказНаПеремещениеСиноним.СпособДоставки,
		|	ВЫРАЗИТЬ(ЗаказНаПеремещениеСиноним.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(500)),
		|	ВЫРАЗИТЬ(ЗаказНаПеремещениеСиноним.АдресДоставкиЗначенияПолей КАК СТРОКА(700))
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещениеСиноним
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО (ЗаказНаПеремещениеСиноним.Ссылка = ПеремещениеТоваров.ЗаказНаПеремещение)
		|ГДЕ
		|	ПеремещениеТоваров.Дата >= &ДатаНачалаЭксплуатации
		|	И ПеремещениеТоваров.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И НЕ ЗаказНаПеремещениеСиноним.СпособДоставки В (&МассивСпособовДоставкиИсключить)
		|	И ЗаказНаПеремещениеСиноним.СкладОтправитель = &Склад
		|	И ПеремещениеТоваров.Статус В(&МассивСтатусов)
		|	И ПеремещениеТоваров.Проведен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПеремещениеТоваров.Ссылка,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА ПеремещениеТоваров.АдресДоставкиПеревозчика
		|		ИНАЧЕ ПеремещениеТоваров.АдресДоставки
		|	КОНЕЦ,
		|	ПеремещениеТоваров.ВремяДоставкиС,
		|	ПеремещениеТоваров.ВремяДоставкиПо,
		|	NULL,
		|	ПеремещениеТоваров.СкладОтправитель,
		|	ПеремещениеТоваров.ЗонаДоставки,
		|	ПеремещениеТоваров.ПеревозчикПартнер,
		|	ПеремещениеТоваров.СпособДоставки,
		|	ВЫРАЗИТЬ(ПеремещениеТоваров.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(500)),
		|	ВЫРАЗИТЬ(ПеремещениеТоваров.АдресДоставкиЗначенияПолей КАК СТРОКА(700))
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Дата >= &ДатаНачалаЭксплуатации
		|	И ПеремещениеТоваров.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ПеремещениеТоваров.Ссылка.СкладОтправитель = &Склад
		|	И НЕ ПеремещениеТоваров.СпособДоставки В (&МассивСпособовДоставкиИсключить)
		|	И ПеремещениеТоваров.Ссылка.Статус В(&МассивСтатусов)
		|	И ПеремещениеТоваров.Ссылка.Проведен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МегаЛогист_МаршрутноеЗадание.Ссылка,
		|	МегаЛогист_МаршрутноеЗадание.АдресДоставки,
		|	МегаЛогист_МаршрутноеЗадание.ВремяДоставкиС,
		|	МегаЛогист_МаршрутноеЗадание.ВремяДоставкиПо,
		|	МегаЛогист_МаршрутноеЗадание.Контрагент,
		|	АТ_Склад,
		|	АТ_ЗонаДоставки,
		|	NULL,
		|	NULL,
		|	ВЫРАЗИТЬ(МегаЛогист_МаршрутноеЗадание.Комментарий КАК СТРОКА(500)),
		|	ВЫРАЗИТЬ(МегаЛогист_МаршрутноеЗадание.АдресДоставкиЗначенияПолей КАК СТРОКА(700))
		|ИЗ
		|	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
		|ГДЕ
		|	МегаЛогист_МаршрутноеЗадание.ДатаДоставки МЕЖДУ &НачПериода И &КонПериода
		|	И МегаЛогист_МаршрутноеЗадание.АТ_Склад = &Склад
		|	И МегаЛогист_МаршрутноеЗадание.Статус = &КРаспределению
		|	И МегаЛогист_МаршрутноеЗадание.Проведен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспоряженияНаДоставку.ДокументОснование КАК ДокументОснование,
		|	РаспоряженияНаДоставку.АдресДоставки КАК АдресДоставки,
		|	РаспоряженияНаДоставку.ВремяДоставкиС КАК ВремяДоставкиС,
		|	РаспоряженияНаДоставку.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	РаспоряженияНаДоставку.Контрагент КАК Контрагент,
		|	РаспоряженияНаДоставку.Склад КАК Склад,
		|	РаспоряженияНаДоставку.ЗонаДоставки КАК ЗонаДоставки,
		|	РаспоряженияНаДоставку.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
		|	РаспоряженияНаДоставку.СпособДоставки КАК СпособДоставки,
		|	РаспоряженияНаДоставку.Комментарий КАК Комментарий,
		|	РаспоряженияНаДоставку.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей
		|ИЗ
		|	РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
		|		ПО РаспоряженияНаДоставку.ДокументОснование = МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование
		|			И (НЕ МаршрутныйЛистМаршрутныеЗадания.Ссылка.ПометкаУдаления)
		|			И (МаршрутныйЛистМаршрутныеЗадания.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЛиста.Отменен))
		|			И (МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено))
		|			И (МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ПометкаУдаления = ЛОЖЬ)
		|			И (МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДатаДоставки МЕЖДУ &НачПериодаМаршрутногоЛиста И &КонПериода)
		|			И (МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование <> НЕОПРЕДЕЛЕНО)
		|ГДЕ
		|	МаршрутныйЛистМаршрутныеЗадания.Ссылка ЕСТЬ NULL
		|	И (&ОтборПоЗонамВключая = ЛОЖЬ
		|			ИЛИ &ОтборПоЗонамВключая = ИСТИНА
		|				И РаспоряженияНаДоставку.ЗонаДоставки В (&СписокЗон))
		|	И (&ОтборПоЗонамИсключая = ЛОЖЬ
		|			ИЛИ &ОтборПоЗонамИсключая = ИСТИНА
		|				И НЕ РаспоряженияНаДоставку.ЗонаДоставки В (&СписокЗон))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗонаДоставки";
		
	КонецЕсли;
	
	//-АТ ТерентьевЕМ
	
	
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ВЗ.ДокументОснование,
	//|	ВЗ.АдресДоставки,
	//|	ВЗ.ВремяДоставкиС,
	//|	ВЗ.ВремяДоставкиПо,
	//|	ВЗ.Контрагент,
	//|	ВЗ.Склад,
	//|	ВЗ.Комментарий,
	//|	ВЗ.АдресДоставкиЗначенияПолей
	//|ИЗ
	//|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|		ЗаказКлиентаТовары.Ссылка КАК ДокументОснование,
	//|		ВЫБОР
	//|			КОГДА ЗаказКлиентаТовары.Ссылка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	//|				ТОГДА ЗаказКлиентаТовары.Ссылка.АдресДоставкиПеревозчика
	//|			ИНАЧЕ ЗаказКлиентаТовары.Ссылка.АдресДоставки
	//|		КОНЕЦ КАК АдресДоставки,
	//|		ЗаказКлиентаТовары.Ссылка.ВремяДоставкиС КАК ВремяДоставкиС,
	//|		ЗаказКлиентаТовары.Ссылка.ВремяДоставкиПо КАК ВремяДоставкиПо,
	//|		ВЫБОР
	//|			КОГДА &МегаЛогист_ИспользоватьАдресаПартнеров
	//|				ТОГДА ЗаказКлиентаТовары.Ссылка.Партнер
	//|			ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Контрагент
	//|		КОНЕЦ КАК Контрагент,
	//|		ЗаказКлиентаТовары.Ссылка.Склад КАК Склад,
	//|		ВЫРАЗИТЬ(ЗаказКлиентаТовары.Ссылка.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(500)) КАК Комментарий,
	//|		ВЫРАЗИТЬ(ЗаказКлиентаТовары.Ссылка.АдресДоставкиЗначенияПолей КАК СТРОКА(700)) КАК АдресДоставкиЗначенияПолей
	//|	ИЗ
	//|		Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	//|	ГДЕ
	//|		ЗаказКлиентаТовары.ДатаОтгрузки МЕЖДУ &НачПериода И &КонПериода
	//|		И ЗаказКлиентаТовары.Ссылка.Склад = &Склад
	//|		И ЗаказКлиентаТовары.Отменено = ЛОЖЬ
	//|		И ЗаказКлиентаТовары.Ссылка.Статус В(&МассивСтатусов)
	//|		И НЕ ЗаказКлиентаТовары.Ссылка.СпособДоставки В (&МассивСпособовДоставкиИсключить)
	//|		И ЗаказКлиентаТовары.Ссылка.Проведен = ИСТИНА
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|		РеализацияТоваровУслугТовары.Ссылка,
	//|		ВЫБОР
	//|			КОГДА РеализацияТоваровУслугТовары.Ссылка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	//|				ТОГДА РеализацияТоваровУслугТовары.Ссылка.АдресДоставкиПеревозчика
	//|			ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.АдресДоставки
	//|		КОНЕЦ,
	//|		РеализацияТоваровУслугТовары.Ссылка.ВремяДоставкиС,
	//|		РеализацияТоваровУслугТовары.Ссылка.ВремяДоставкиПо,
	//|		ВЫБОР
	//|			КОГДА &МегаЛогист_ИспользоватьАдресаПартнеров
	//|				ТОГДА РеализацияТоваровУслугТовары.Ссылка.Партнер
	//|			ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Контрагент
	//|		КОНЕЦ,
	//|		РеализацияТоваровУслугТовары.Ссылка.Склад,
	//|		ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(500)),
	//|		ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.АдресДоставкиЗначенияПолей КАК СТРОКА(700))
	//|	ИЗ
	//|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//|	ГДЕ
	//|		РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	//|		И РеализацияТоваровУслугТовары.Ссылка.Склад = &Склад
	//|		И РеализацияТоваровУслугТовары.Ссылка.Статус В(&МассивСтатусов)
	//|		И НЕ РеализацияТоваровУслугТовары.Ссылка.СпособДоставки В (&МассивСпособовДоставкиИсключить)
	//|		И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|		ЗаказПоставщикуТовары.Ссылка,
	//|		ЗаказПоставщикуТовары.Ссылка.АдресДоставки,
	//|		ДАТАВРЕМЯ(1, 1, 1),
	//|		ДАТАВРЕМЯ(1, 1, 1),
	//|		ВЫБОР
	//|			КОГДА &МегаЛогист_ИспользоватьАдресаПартнеров
	//|				ТОГДА ЗаказПоставщикуТовары.Ссылка.Партнер
	//|			ИНАЧЕ ЗаказПоставщикуТовары.Ссылка.Контрагент
	//|		КОНЕЦ,
	//|		ЗаказПоставщикуТовары.Склад,
	//|		NULL,
	//|		NULL
	//|	ИЗ
	//|		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	//|	ГДЕ
	//|		ЗаказПоставщикуТовары.ДатаПоступления МЕЖДУ &НачПериода И &КонПериода
	//|		И ЗаказПоставщикуТовары.Ссылка.Склад = &Склад
	//|		И ЗаказПоставщикуТовары.Отменено = ЛОЖЬ
	//|		И ЗаказПоставщикуТовары.Ссылка.Статус В(&МассивСтатусов)
	//|		И ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|		ПеремещениеТоваров.Ссылка,
	//|		ВЫБОР
	//|			КОГДА ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	//|				ТОГДА ПеремещениеТоваров.АдресДоставкиПеревозчика
	//|			ИНАЧЕ ПеремещениеТоваров.АдресДоставки
	//|		КОНЕЦ,
	//|		ПеремещениеТоваров.ВремяДоставкиС,
	//|		ПеремещениеТоваров.ВремяДоставкиПо,
	//|		NULL,
	//|		ПеремещениеТоваров.СкладОтправитель,
	//|		ВЫРАЗИТЬ(ПеремещениеТоваров.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(500)),
	//|		ВЫРАЗИТЬ(ПеремещениеТоваров.АдресДоставкиЗначенияПолей КАК СТРОКА(700))
	//|	ИЗ
	//|		Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	//|			ПОЛНОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	//|			ПО ЗаказНаПеремещениеТовары.Ссылка = ПеремещениеТоваров.ЗаказНаПеремещение
	//|	ГДЕ
	//|		ЗаказНаПеремещениеТовары.НачалоОтгрузки МЕЖДУ &НачПериода И &КонПериода
	//|		И ПеремещениеТоваров.Ссылка.СкладОтправитель = &Склад
	//|		И ПеремещениеТоваров.Ссылка.Статус В(&МассивСтатусов)
	//|		И ПеремещениеТоваров.Ссылка.Проведен = ИСТИНА
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		МегаЛогист_МаршрутноеЗадание.Ссылка,
	//|		МегаЛогист_МаршрутноеЗадание.АдресДоставки,
	//|		МегаЛогист_МаршрутноеЗадание.ВремяДоставкиС,
	//|		МегаЛогист_МаршрутноеЗадание.ВремяДоставкиПо,
	//|		МегаЛогист_МаршрутноеЗадание.Контрагент,
	//|		NULL,
	//|		ВЫРАЗИТЬ(МегаЛогист_МаршрутноеЗадание.Комментарий КАК СТРОКА(500)),
	//|		ВЫРАЗИТЬ(МегаЛогист_МаршрутноеЗадание.АдресДоставкиЗначенияПолей КАК СТРОКА(700))
	//|	ИЗ
	//|		Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	//|	ГДЕ
	//|		МегаЛогист_МаршрутноеЗадание.ДатаДоставки МЕЖДУ &НачПериода И &КонПериода
	//|		И МегаЛогист_МаршрутноеЗадание.Статус = &КРаспределению
	//|		И МегаЛогист_МаршрутноеЗадание.Проведен = ИСТИНА) КАК ВЗ
	//|ГДЕ
	//|	НЕ ВЗ.ДокументОснование В
	//|				(ВЫБРАТЬ
	//|					МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование
	//|				ИЗ
	//|					Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
	//|				ГДЕ
	//|					МаршрутныйЛистМаршрутныеЗадания.Ссылка.ПометкаУдаления = ЛОЖЬ
	//|					И МаршрутныйЛистМаршрутныеЗадания.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЛиста.Отменен)
	//|					И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ПометкаУдаления = ЛОЖЬ
	//|					И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено)
	//|					И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДатаДоставки МЕЖДУ &НачПериода И &КонПериода
	//|					И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование <> НЕОПРЕДЕЛЕНО)";
	
	Результат=Запрос.Выполнить().Выбрать();
	НомерСтроки=0;
	Пока Результат.Следующий() Цикл
		
		ТипЗадания=Неопределено;
		// Наложим фильтр по настройке типов используемых заданий
		Если ТипЗнч(Результат.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") или
			ТипЗнч(Результат.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
			Если Результат.СпособДоставки=Перечисления.СпособыДоставки.ДоКлиента тогда
				ТипЗадания=Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ДоставкаДоКлиента;
			ИначеЕсли Результат.СпособДоставки=Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу тогда
				ТипЗадания=Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ДоставкаВТК;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Результат.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
			ТипЗадания=Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ЗаборУПоставщика;
		ИначеЕсли ТипЗнч(Результат.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") тогда
			ТипЗадания=Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ПеремещениеТовара;
		ИначеЕсли ТипЗнч(Результат.ДокументОснование) = Тип("ДокументСсылка.МегаЛогист_МаршрутноеЗадание") тогда
			ТипЗадания=Результат.ДокументОснование.ТипЗадания;
		КонецЕсли;
		
		Если МассивИспользуемыхТиповЗаданий.Найти(ТипЗадания)=Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		//фильтры по времени
		ВремяДоставкиПоЗ = ?(Результат.ВремяДоставкиПо = ПустаяДата, Дата(1,1,1,23,59,59), Результат.ВремяДоставкиПо);
		
		Если (Результат.ВремяДоставкиС>=ВремяДоставкиС) И (Результат.ВремяДоставкиС<ВремяДоставкиПоФ)
			Или (ВремяДоставкиС>=Результат.ВремяДоставкиС) И (ВремяДоставкиС<ВремяДоставкиПоЗ) Тогда 
		Иначе	
			Продолжить;
		КонецЕсли;
		
		//Заполняем таблицу нераспределенных адресов
		НоваяСтрока=НераспределенныеАдреса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
		Если ТипЗнч(Результат.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
			НоваяСтрока.АдресДоставки=ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Результат.Контрагент,?(Константы.МегаЛогист_ИспользоватьАдресаПартнеров.Получить(),"","Фактический"));
		КонецЕсли;
		
		Если ТипЗнч(Результат.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") тогда
			Если Результат.ДокументОснование.СпособДоставки=Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу тогда
				НоваяСтрока.Контрагент=Результат.ДокументОснование.ПеревозчикПартнер;
			КонецЕсли;	
		КонецЕсли;		
				
		НоваяСтрока.ТипЗадания=ТипЗадания;
		Если ТипЗадания=Неопределено тогда
			Сообщить("Для документа: "+Результат.ДокументОснование+" не определен тип задания");
		КонецЕсли;	
		
		НомерСтроки=НомерСтроки+1;
		НоваяСтрока.НомерСтроки=НомерСтроки;
		НоваяСтрока.АдресДоставкиПриведенный = ПривестиАдресСервер(НоваяСтрока.АдресДоставки, НоваяСтрока.АдресДоставкиЗначенияПолей);
		
		// silber {
		Если НоваяСтрока.ВремяДоставкиС = '00010101' И НоваяСтрока.ВремяДоставкиПо = '00010101' И ЗначениеЗаполнено(Результат.Контрагент) Тогда
			ПериодРаботы = РегистрыСведений.АТ_ГрафикРаботы.ПолучитьВремяРаботыДня(Результат.Контрагент.Партнер, ДатаДоставки);
			Если ПериодРаботы <> Неопределено Тогда
				НоваяСтрока.ВремяДоставкиС 	= ПериодРаботы.ДатаНачала;
				НоваяСтрока.ВремяДоставкиПо = ПериодРаботы.ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
		// } silber
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметры();
	
	МаршрутныеЗадания.Параметры.УстановитьЗначениеПараметра("ИнтервалДо",ИнтервалДо);
	МаршрутныеЗадания.Параметры.УстановитьЗначениеПараметра("ИнтервалПосле",ИнтервалПосле);
	МаршрутныеЗадания.Параметры.УстановитьЗначениеПараметра("ТекущаяДата",ТекущаяДата());
	МаршрутныеЗадания.Параметры.УстановитьЗначениеПараметра("ИспользоватьИнтервалы",ИспользоватьИнтервалы);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьИнтервалы()
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	МегаЛогист_ИнтервалыПредупреждений.ИспользоватьИнтервалы,
	             |	МегаЛогист_ИнтервалыПредупреждений.ИнтервалДо,
	             |	МегаЛогист_ИнтервалыПредупреждений.ИнтервалПосле
	             |ИЗ
	             |	РегистрСведений.МегаЛогист_ИнтервалыПредупреждений КАК МегаЛогист_ИнтервалыПредупреждений
	             |ГДЕ
	             |	МегаЛогист_ИнтервалыПредупреждений.ИспользоватьИнтервалы = Истина";
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		ИспользоватьИнтервалы=Истина;
		ИнтервалДо=Результат.ИнтервалДо;
		ИнтервалПосле=Результат.ИнтервалПосле;
	КонецЕсли;		
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Создать_МаршрутныеЛисты" Тогда
		ОбновитьНаСервере();
	КонецЕсли;

КонецПроцедуры

#Область Служебные

&НаСервере
Функция ПолучитьФайлНаСервере(СтрокаПоиска, Идентификатор, ИмяРеквизита = "",Отказ)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ВернутьФайл(СтрокаПоиска, Идентификатор, ИмяРеквизита,Отказ);
	
КонецФункции

&НаСервере
Функция ПривестиАдресСервер(Знач АдресДоставки, Знач АдресДоставкиЗначенияПолей)

	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПривестиАдресДляПоиска(АдресДоставки, АдресДоставкиЗначенияПолей)

КонецФункции // ПривестиАдресСервер()

&НаСервере
Функция ПолучитьДеревоЗначенийИзXMLСтроки(XMLСтрока)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLСтрока);
	ЧтениеXML.Прочитать();
	РезультатДерево = Новый ДеревоЗначений;
	РезультатДерево.Колонки.Добавить("НазваниеУзла");
	РезультатДерево.Колонки.Добавить("ЗначениеУзла");
	МассивОткрытыхСтрок = Новый Массив;
	ПоследняяОткрытаяСтрока = Неопределено;
	Пока ЧтениеXML.Прочитать() Цикл
 	 	Если ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
 	 		Если МассивОткрытыхСтрок.Количество() Тогда
 	 			_Родитель = МассивОткрытыхСтрок[МассивОткрытыхСтрок.Количество()-1];
			Иначе
 	 			_Родитель = РезультатДерево;
			КонецЕсли;
			ПоследняяОткрытаяСтрока = _Родитель.Строки.Добавить();
			ПоследняяОткрытаяСтрока.НазваниеУзла = ЧтениеXML.Имя;
			МассивОткрытыхСтрок.Добавить(ПоследняяОткрытаяСтрока);
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
 	 		ПоследняяОткрытаяСтрока.ЗначениеУзла = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
 	 		Если МассивОткрытыхСтрок.Количество() Тогда
 	 			МассивОткрытыхСтрок.Удалить(МассивОткрытыхСтрок.Количество()-1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатДерево; 
КонецФункции 

&НаСервере
Функция ПолучитьСтрокуИнициализацииСервер()

	Возврат Константы.МегаЛогист_ПараметрыИнициализацииOSM.Получить();

КонецФункции

&НаСервере 
// производится проверка переданного адреса по регистру "Сохраненные адреса"
//
// Параметры
//  Адрес - Строка
//
// Возвращаемое значение:
//   Структура   - структура возврата
//
Функция ПроверитьВнесениеАдреса(Адрес)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МегаЛогист_СохраненныеАдреса.Широта,
	|	МегаЛогист_СохраненныеАдреса.Долгота
	|ИЗ
	|	РегистрСведений.МегаЛогист_СохраненныеАдреса КАК МегаЛогист_СохраненныеАдреса
	|ГДЕ
	|	МегаЛогист_СохраненныеАдреса.ПредставлениеАдреса = &ПредставлениеАдреса";
	
	Запрос.УстановитьПараметр("ПредставлениеАдреса", Адрес);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("Широта, Долгота", Выборка.Широта, Выборка.Долгота)
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли; 	

КонецФункции // ПроверитьВнесениеАдреса()

&НаКлиенте 
Процедура ЦиклПереносаНаКарту()

	Если СписокКПереносуНаКарту.Количество() > 0 Тогда
		
		Идентификатор = Число(СписокКПереносуНаКарту[0].Значение);
		СписокКПереносуНаКарту.Удалить(0);
	
	Иначе
	
		Возврат;
	
	КонецЕсли;
	
	СтрокаТаблицы = НераспределенныеАдреса.НайтиПоИдентификатору(Идентификатор);
	
	Попытка
		
		СтруктураВозврата = ПроверитьВнесениеАдреса(СтрокаТаблицы.АдресДоставкиПриведенный);
		Если СтруктураВозврата = Неопределено Тогда
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForAddr(
			//НераспределенныеАдреса.Индекс(СтрокаТаблицы) + 1, 
			//"" + СтрокаТаблицы.АдресДоставкиПриведенный, 
			//"" + СтрокаТаблицы.ТипЗадания, 
			//"default1.png");
			МегаЛогист_Служебный.ДобавитьМаркерАдрес(Элементы, СтрокаТаблицы, НераспределенныеАдреса.Индекс(СтрокаТаблицы) + 1);
			
		Иначе
			
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForLocation(
			//НераспределенныеАдреса.Индекс(СтрокаТаблицы) + 1, 
			//"" + СтруктураВозврата.Широта,
			//"" + СтруктураВозврата.Долгота,
			//"" + СтрокаТаблицы.АдресДоставкиПриведенный,
			//"" + СтрокаТаблицы.ТипЗадания, 
			//"default1.png");
			МегаЛогист_Служебный.ДобавитьМаркерЛокация(Элементы, СтруктураВозврата, СтрокаТаблицы, НераспределенныеАдреса.Индекс(СтрокаТаблицы) + 1);
			
		КонецЕсли;
		
	Исключение
		
		Сообщить("Ошибка геокодинга");
		
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);

КонецПроцедуры

&НаСервере 
Функция ПолучитьИмяГеокодера()

	
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПолучитьИмяГеокодера()

КонецФункции

&НаСервере 
Функция ПолучитьАдресПубликации()
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПолучитьАдресПубликации()
КонецФункции

#КонецОбласти

#Область ПроцедурыПоляHTMLДокумента

&НаКлиенте
Процедура КартаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Event.srcElement.id = "callback_1C" Тогда
		МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеСобытия.Event.srcElement.title, "<se_param>", Истина, Истина);
		Если ДанныеСобытия.Event.srcElement.innerHTML = "SearchError" Тогда
		
			СтрокаТаблицы = НераспределенныеАдреса[Число(МассивПараметров[0]) - 1];
			Если МассивПараметров.Количество() > 1 И Найти(МассивПараметров[1], "#2") <> 0 Тогда
			
				Сообщить("Не удалось поставить маркер по адресу: """ + СтрокаТаблицы.АдресДоставки +""" (номер строки: " + (Число(МассивПараметров[0])) + "). Попробуйте нанести адрес на карту еще раз.");
			
			Иначе
			
				Сообщить("При установке маркера по адресу: """ + СтрокаТаблицы.АдресДоставки +""" (номер строки: " + (Число(МассивПараметров[0])) + ") произошла ошибка сервера или геокодирования");
			
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Event.srcElement.innerHTML = "SearchOverBoundary" Тогда
			
			СтрокаТаблицы = НераспределенныеАдреса[Число(МассивПараметров[0]) - 1];
			Сообщить("При установке маркера по адресу: """ + СтрокаТаблицы.АдресДоставки +""" (номер строки: " + (Число(МассивПараметров[0])) + ") был найден за пределами ограничительного прямоугольника");
			
		Иначе
		
			
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаHTMLДокументСформирован(Элемент)
	
	Если Не ПервыйВызов Тогда
	
		ПервыйВызов = Истина;
		Возврат;
	
	КонецЕсли; 
	
	Попытка
	    Если Не КартаИнициализирована Тогда
			
			СтрокаИнициализации = ПолучитьСтрокуИнициализацииСервер();
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИнициализации, ",", Истина);
			Если МассивСтрок.Количество() <> 25 Тогда
			
				Сообщить("Карта не может быть отображена. Проверьте настройки инициализации карты");
				Возврат;
			
			КонецЕсли;
			//ПЕРЕНОС
			//Элементы.КартаHTML.Документ.parentWindow.map_initialize(МассивСтрок[0], 
			//														МассивСтрок[1], 
			//														МассивСтрок[2], 
			//														МассивСтрок[3], 
			//														МассивСтрок[4], 
			//														МассивСтрок[5],
			//														МассивСтрок[6],
			//														МассивСтрок[7],
			//														МассивСтрок[8],
			//														МассивСтрок[9],
			//														МассивСтрок[10],
			//														МассивСтрок[11],
			//														МассивСтрок[12],
			//														МассивСтрок[13],
			//														МассивСтрок[14],
			//														МассивСтрок[15],
			//														МассивСтрок[16],
			//														МассивСтрок[17],
			//														МассивСтрок[18],
			//														ПолучитьИмяГеокодера());
			МегаЛогист_Служебный.Инициализация(Элементы, МассивСтрок, ПолучитьИмяГеокодера(), ПолучитьКлючАПИ());
			КартаИнициализирована = Истина;
		
		КонецЕсли;
	Исключение
	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючАПИ()

	Возврат МегаЛогист_Служебный.ПолучитьКлючАПИ();

КонецФункции

#КонецОбласти 

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура НераспределенныеАдресаПослеУдаления(Элемент)
	
	//ПЕРЕНОС
	//Элементы.КартаHTML.Документ.parentWindow.map_clearMap();
	МегаЛогист_Служебный.ОчиститьКарту(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКарту(Команда)
	//ПЕРЕНОС
	//Элементы.КартаHTML.Документ.parentWindow.map_clearMap();
	МегаЛогист_Служебный.ОчиститьКарту(Элементы);
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаКарту(Команда)
	
	Если СписокКПереносуНаКарту.Количество() <> 0 Тогда
	
		Сообщить("Предидущий перенос на карту не закончен");
	
	КонецЕсли;
	
	Для каждого Идентификатор Из Элементы.НераспределенныеАдреса.ВыделенныеСтроки Цикл
		
		СписокКПереносуНаКарту.Добавить(Идентификатор);
	
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.МаршрутныеЗаданияМаршрутныйЛист Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элементы.МаршрутныеЗадания.ТекущиеДанные.МаршрутныйЛист);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	//ПЕРЕНОС
	//Элементы.КартаHTML.Документ.parentWindow.map_clearMap();
	МегаЛогист_Служебный.ОчиститьКарту(Элементы);
				 
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКурьеров(Команда)
	
	ОчиститьСообщения();
	
	//Проверить выделенные маркеры
	//ПЕРЕНОС
	//СтрокаОтвета = Элементы.КартаHTML.Документ.parentWindow.eval("map_selectedMarker()");
	СтрокаОтвета = МегаЛогист_Служебный.ВозвратМаркеров(Элементы);
	
	АдресТаблицыАдресов = ПоместитьАдресаВХранилище(СтрокаОтвета);
	ПараметрыФормы = Новый Структура("ДатаДоставки, АдресТаблицыАдресов, Склад",
							ДатаДоставки, АдресТаблицыАдресов, Склад);
	///////////////////////////////////////////
	//Мироненко Д.С 05.06.2015 9:15:37 НАЧАЛО
	//Комментарий: Передача пути к хтмл файлу
	
	ПараметрыФормы.Вставить("ПутьККарте", Объект.ПутьККарте);
	
	//Мироненко Д.С 05.06.2015 9:15:47 КОНЕЦ
	///////////////////////////////////////////
	ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.РаспределениеАдресовПоКурьерам", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПоместитьАдресаВХранилищеМЗ(ПроверкаНаТекущуюДату = Ложь, ВыводитьНеВыполненные = Ложь)
	
	ТаблицаАдресов = РеквизитФормыВЗначение("НераспределенныеАдреса").СкопироватьКолонки();
	ТаблицаАдресов.Колонки.Добавить("Ид");
	ТаблицаАдресов.Колонки.Добавить("Курьер");
	
	Ид = 1;
	ПерваяОшибка = Истина;
	
	Для Каждого ВыделеннаяСтрока из Элементы.МаршрутныеЗадания.ВыделенныеСтроки цикл
		
		Если ВыводитьНеВыполненные Тогда
		
			Если ВыделеннаяСтрока.Ссылка.ПометкаУдаления  Тогда
				Продолжить;
			КонецЕсли;
		
		Иначе
		
			Если ВыделеннаяСтрока.Ссылка.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено
				ИЛИ ВыделеннаяСтрока.Ссылка.ПометкаУдаления  Тогда
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ПроверкаНаТекущуюДату Тогда
			Если НачалоДня(ВыделеннаяСтрока.Ссылка.ДатаДоставки) <> НачалоДня(ТекущаяДата()) Тогда
			
				Если ПерваяОшибка Тогда
					Сообщить("Перечисленные ниже маршрутные задания не показаны на карте, т.к. дата доставки не совпадает с текущей ("+ Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") +"):");
					ПерваяОшибка = Ложь
				КонецЕсли;
				Сообщить("" + ВыделеннаяСтрока.Ссылка.Номер + " (курьер: " + ВыделеннаяСтрока.Ссылка.Курьер + ", дата доставки: " + Формат(ВыделеннаяСтрока.Ссылка.ДатаДоставки, "ДФ=dd.MM.yyyy") + ")");
				
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;		
		НоваяСтрока=ТаблицаАдресов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыделеннаяСтрока);
		НоваяСтрока.ДокументОснование = ВыделеннаяСтрока.Ссылка;
		НоваяСтрока.АдресДоставкиЗначенияПолей = ВыделеннаяСтрока.АдресДоставкиЗначенияПолей;
		НоваяСтрока.АдресДоставкиПриведенный = ПривестиАдресСервер(НоваяСтрока.АдресДоставки, НоваяСтрока.АдресДоставкиЗначенияПолей);
		НоваяСтрока.Ид = Ид;
		Ид = Ид + 1;
		
	КонецЦикла;	
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаАдресов, УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ПоказатьНаКарте(Команда)
	
	АдресТаблицыАдресов = ПоместитьАдресаВХранилищеМЗ();
	ПараметрыФормы = Новый Структура("АдресТаблицыАдресов",
							АдресТаблицыАдресов);
	ПараметрыФормы.Вставить("ПутьККарте", Объект.ПутьККарте);
	
	ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаЗЛ", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МониторингКурьеров(Команда)
	
	//АдресТаблицыАдресов = ПоместитьАдресаВХранилищеМЗ(Истина);
	АдресТаблицыАдресов = ПоместитьАдресаВХранилищеМЗ(Истина, Истина);
	ПараметрыФормы = Новый Структура("АдресТаблицыАдресов",
							АдресТаблицыАдресов);
	ПараметрыФормы.Вставить("ПутьККарте", Объект.ПутьККарте);
	ДатаВвода = Неопределено;
	//ВвестиДату(ДатаВвода);
	ПараметрыФормы.Вставить("ТекущееВремя", ДатаВвода);
	
	
	ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаМониторингКурьеров", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры


#КонецОбласти

#Область СобытияФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	#Если ВебКлиент Тогда
		
		КартаHTML = "<!DOCTYPE html>
                     |<html>
                     |<head>
                     |	<title>Map Leaflet</title>
                     |	<meta charset=""utf-8"" />
                     |	<meta http-equiv=""X-UA-Compatible"" content=""IE=8"" >
                     |
                     |
                     |	<script type=''text/javascript''>
					 |		window.onload = function(){ window.open('" + ПолучитьАдресПубликации() + "/leaflet_web_2.html', '_self'); }
                     |
                     |	</script>
                     |</head>
                     |<body>
                     |
                     |</body>
                     |</html>";
		
	#Иначе
	
	//получим архив
	Каталог = КаталогВременныхФайлов();
	
	//Архив = Обработка.ПолучитьМакет("Исходники");
	//Архив.Записать(Каталог + "arj.zip");
	
	Адрес = ПолучитьФайлНаСервере("Исходники", ЭтаФорма.УникальныйИдентификатор,,Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;	
	Описание=Новый ОписаниеПередаваемогоФайла(Каталог + "arj.zip", Адрес);
	МассивОписаний=Новый Массив;
	МассивОписаний.Добавить(Описание);
	ПолучитьФайлы(МассивОписаний,,,Ложь);
	ЧтениеАрхива = Новый ЧтениеZipФайла(Каталог + "arj.zip");
	ЧтениеАрхива.ИзвлечьВсе(Каталог+"source");
	Объект.ПутьККарте = Каталог+"source\leaflet.html";
	
	Адрес = ПолучитьФайлНаСервере("МаркерыПоУмолчанию", ЭтаФорма.УникальныйИдентификатор, "Маркер1",Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;	
	Описание=Новый ОписаниеПередаваемогоФайла(Каталог + "source\" + "default1.png", Адрес);
	МассивОписаний=Новый Массив;
	МассивОписаний.Добавить(Описание);
	ПолучитьФайлы(МассивОписаний,,,Ложь);

	Адрес = ПолучитьФайлНаСервере("МаркерыПоУмолчанию", ЭтаФорма.УникальныйИдентификатор, "Маркер2",Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	Описание=Новый ОписаниеПередаваемогоФайла(Каталог + "source\" + "default2.png", Адрес);
	МассивОписаний=Новый Массив;
	МассивОписаний.Добавить(Описание);
	ПолучитьФайлы(МассивОписаний,,,Ложь);
		
	КартаHTML = Объект.ПутьККарте;
	
	#КонецЕсли

	ДатаДоставки = ТекущаяДата();
	ЗаполнитьИнтервалы();
	УстановитьПараметры();
	ОбновитьНаСервере();
	ПодключитьОбработчикОжидания("УстановитьПараметры",60);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ОбработкаПолноеИмя = Обработка.Метаданные().ПолноеИмя();
	
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	УстановитьУсловноеОформление();
	
	ЗадержкаОтправкиЗапроса = ?(Константы.МегаЛогист_ЗадержкаОтправкиЗапроса.Получить() = 0, 0.1, Константы.МегаЛогист_ЗадержкаОтправкиЗапроса.Получить());

КонецПроцедуры

&НаСервере
Функция СформироватьСтруктураПараметровШаблона(МаршрутноеЗадание)

	СтруктураПараметровШаблона = Новый Структура;
	
	СтруктураПараметровШаблона.Вставить("МаршрутноеЗадание", МаршрутноеЗадание);
		
	Возврат СтруктураПараметровШаблона;

КонецФункции

&НаСервере
Функция СформироватьТекстСообщения(МаршрутноеЗадание)
	
	ТекстСообщенияSMS="";
	ШаблонСообщения=Константы.МегаЛогист_ШаблонСообщений.Получить();
	
	Если ШаблонСообщения.ШаблонПоВнешнейОбработке Тогда
		
		ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ШаблонСообщения.ВнешняяОбработка);
		УстановитьБезопасныйРежим(Истина);
		
		СтруктураСообщения = ВнешнийОбъект.СформироватьСообщениеПоШаблону(СформироватьСтруктураПараметровШаблона(МаршрутноеЗадание));
		
		ТекстСообщенияSMS = СтруктураСообщения.ТекстСообщенияSMS;
				
		УстановитьБезопасныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат ТекстСообщенияSMS
	
КонецФункции

&НаСервере
Процедура ОтправитьSMSНаСервере()

	Для Каждого ВыделеннаяСтрока из Элементы.МаршрутныеЗадания.ВыделенныеСтроки цикл
		СообщениеSMS = Документы.СообщениеSMS.СоздатьДокумент();
		
		СообщениеSMS.Дата                    = ТекущаяДатаСеанса();
		СообщениеSMS.Автор                   = Пользователи.ТекущийПользователь();

		СообщениеSMS.Ответственный           = Пользователи.ТекущийПользователь();
		СообщениеSMS.Важность                = Перечисления.ВариантыВажностиВзаимодействия.Обычная;

		СообщениеSMS.ВзаимодействиеОснование = Неопределено;
		СообщениеSMS.ТекстСообщения          = СформироватьТекстСообщения(ВыделеннаяСтрока);
		СообщениеSMS.Тема                    = "";
		СообщениеSMS.ОтправлятьВТранслите    = "";
		СообщениеSMS.Комментарий             = "";
		
		СообщениеSMS.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее");
		
		НоваяСтрока = СообщениеSMS.Адресаты.Добавить();
		
		ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Контакт=ВыделеннаяСтрока.Контрагент;
		нПредставление = ""; 
		нАдрес = "";
		
		ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
		             Контакт, нПредставление, нАдрес, ТипКонтактнойИнформации);
				
		НоваяСтрока.Контакт                = Контакт;
		НоваяСтрока.ПредставлениеКонтакта  = нПредставление;
		НоваяСтрока.КакСвязаться           = нАдрес;
		НоваяСтрока.НомерДляОтправки       = "";
		НоваяСтрока.ИдентификаторСообщения = "";
		НоваяСтрока.ТекстОшибки            = "";		
		
		НоваяСтрока.СостояниеСообщения = ПредопределенноеЗначение("Перечисление.СостоянияСообщенияSMS.Исходящее");
				
		СообщениеSMS.Записать();		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMS(Команда)	
	
	ОтправитьSMSНаСервере();
	Сообщить("SMS отправлено",СтатусСообщения.Информация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ОбновитьНаСервере();
	МегаЛогист_Служебный.ОчиститьКарту(Элементы);
КонецПроцедуры

#КонецОбласти

