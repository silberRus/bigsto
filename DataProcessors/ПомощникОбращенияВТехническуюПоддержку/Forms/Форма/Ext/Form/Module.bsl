#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяУдаление;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	РегНомер              = Константы.РегистрационныйНомерПрограммы.Получить();
	ВключеноОграничениеДоступаНаУровнеЗаписей = Константы.ОграничиватьДоступНаУровнеЗаписей.Получить();
	Организация           = Константы.ОрганизацияНаКоторуюЗарегистрированаПрограмма.Получить();
	НазваниеКонфигурации  = СокрЛП(Метаданные.Синоним);
	ВерсияКонфигурации    = СокрЛП(Метаданные.Версия);
	ПоставщикКонфигурации = СокрЛП(Метаданные.Поставщик);
	ЭтоФайловаяБаза       = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Если ЭтоФайловаяБаза Тогда
		Элементы.ГруппаТипСУБД.Видимость = Ложь;
		Элементы.АнкетаКоличествоБазНаСУБД.Видимость = Ложь;
		Элементы.ГруппаИспользованиеСерверов.Видимость = Ложь;
		Элементы.АнкетаПараметрыПроцессораИПамяти.Видимость = Ложь;
	КонецЕсли;
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПользователиКонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	АдресEMailДляОтветаПоУмолчанию = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		АдресEMailДляОтветаПоУмолчанию = СокрЛП(ВыборкаДетальныеЗаписи.АдресЭП);
	КонецЦикла;

	EMailОтправителяДляОтвета = АдресEMailДляОтветаПоУмолчанию;
	ИмяОтправителя = ТекПользователь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормы();
	УправлениеВидимостьюКоманд();
	ЗагрузитьСписокАдресовДляОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УчетныеЗаписиЭлектроннойПочты" Тогда
		ЗагрузитьСписокАдресовДляОтправки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбращениеПоИнымПричинамТекстОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ОбращениеПоИнымПричинамТекстОбращения",
		НСтр("ru = 'Текст Вашего обращения'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОПроблемахСБыстродействиемОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"СообщениеОПроблемахСБыстродействиемОписание",
		НСтр("ru = 'Описание проблемы'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОРаботеСПрограммойФормулировкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ВопросОРаботеСПрограммойФормулировка",
		НСтр("ru = 'Ваш вопрос'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюОписаниеЗадачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ПожеланияПоРазвитиюОписаниеЗадач",
		НСтр("ru = 'Описание задач'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдобствоРаботыЧтоВызываетТрудностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"УдобствоРаботыЧтоВызываетТрудности",
		НСтр("ru = 'Что неудобно?'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдобствоРаботыОжидаемоеПоведениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"УдобствоРаботыОжидаемоеПоведение",
		НСтр("ru = 'Ожидаемое поведение'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОписаниеОшибкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"СообщениеОбОшибкеОписаниеОшибки",
		НСтр("ru = 'Описание ошибки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюУдачныеПримерыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ПожеланияПоРазвитиюУдачныеПримеры",
		НСтр("ru = 'Удачные примеры реализации задач'"));
	
КонецПроцедуры

&НаКлиенте
Процедура АнкетаПараметрыПроцессораИПамятиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"АнкетаПараметрыПроцессораИПамяти",
		НСтр("ru = 'Характеристики серверов'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьЭПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если УчетнаяЗаписьЭП <> ВыбранноеЗначение Тогда
		УчетнаяЗаписьЭП = ВыбранноеЗначение;
		ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		ПараметрыОтбора = Новый Структура("УчетнаяЗапись", ЭлементСписка.Значение);
		МассивСтрок = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(ПараметрыОтбора);
		АдресПоУмолчанию = МассивСтрок[0].АдресЭлектроннойПочты;
		Если ЭлементСписка <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			УчетнаяЗаписьЭППредставление = ЭлементСписка.Представление;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьЭППредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельОбращенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельОбращенияПриИзменении(Элемент)
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюГотовДатьПоясненияПриИзменении(Элемент)
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВложенияВыборРасширениеПодключено",
		ЭтотОбъект,
		Новый Структура("ИмяФайла", Элемент.ТекущиеДанные.ИмяФайлаНаДиске));
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Удалить ""%1""?'"),
		ТекущиеДанные.Представление);
		
	Если Не ВыполняетсяУдаление Тогда
	    Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ВложенияПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ИндексСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Вложения.Удалить(ИндексСтроки);
		Если ТекущиеДанные.Расположение = "ВременноеХранилище"
			И ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
			УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОтобразитьКоличествоФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)

	ОчиститьСообщения();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация Тогда
		НеобходимаяИнформацияВведена = Истина;
		Если Не ЗначениеЗаполнено(РегНомер) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен регистрационный номер программы!'"), , "РегНомер");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено название организации, на которую зарегистрирована программа!'"),, "Организация");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИмяОтправителя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено имя отправителя!'"),, "ИмяОтправителя");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(EMailОтправителяДляОтвета) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен адрес электронной почты для ответа на обращение!'"),, "EMailОтправителяДляОтвета");
			НеобходимаяИнформацияВведена = Ложь;
		Иначе
			Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СокрЛП(EMailОтправителяДляОтвета)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не корректно заполнен адрес электронной почты для ответа на обращение!'"),, "EMailОтправителяДляОтвета");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РегионИГородОтправителя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен регион и город отправителя!'"),, "РегионИГородОтправителя");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если НеобходимаяИнформацияВведена Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение;
			СохранитьЗначенияКонстант(РегНомер, Организация);
		КонецЕсли;
		Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПустаяСсылка") Тогда
			ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке");
		КонецЕсли;
		УправлениеВидимостью();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		НеобходимаяИнформацияВведена = Истина;
		Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОбОшибке Тогда
			Если Не ЗначениеЗаполнено(СообщениеОбОшибкеОписаниеОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено описание ошибки!'"),, "СообщениеОбОшибкеОписаниеОшибки");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеОПовышенииУдобстваРаботы Тогда
			Если Не ЗначениеЗаполнено(УдобствоРаботыЧтоВызываетТрудности) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не описан функционал, работа с которым вызывает трудности!'"),, "УдобствоРаботыЧтоВызываетТрудности");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(УдобствоРаботыОжидаемоеПоведение) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не описано ожидаемое поведение программы!'"),, "УдобствоРаботыОжидаемоеПоведение");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеПоРазвитиюПрограммы Тогда
			Если Не ЗначениеЗаполнено(ПожеланияПоРазвитиюОписаниеЗадач) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не описаны задачи, которые не удается решить с помощью существующего функционала!'"),, "ПожеланияПоРазвитиюОписаниеЗадач");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ВопросОРаботеСПрограммой Тогда
			Если Не ЗначениеЗаполнено(ВопросОРаботеСПрограммойФормулировка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не сформулирован вопрос о работе с программой!'"),, "ВопросОРаботеСПрограммойФормулировка");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием Тогда
			Если Не ЗначениеЗаполнено(СообщениеОПроблемахСБыстродействиемОписание) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не описана проблема с быстродействием!'"),, "СообщениеОПроблемахСБыстродействиемОписание");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ОбращениеПоИнымПричинам Тогда
			Если Не ЗначениеЗаполнено(ОбращениеПоИнымПричинамТекстОбращения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен текст обращения!'"),, "ОбращениеПоИнымПричинамТекстОбращения");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НеобходимаяИнформацияВведена Тогда
			Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием Тогда
				Элементы.ШапкаЦельОбращения.ТекущаяСтраница = Элементы.ГруппаЦельОбращенияПраво;
				Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействиемАнкета;
			Иначе
				Элементы.Страницы.ТекущаяСтраница = Элементы.ИтоговыйТекст;
				УстановитьЗаголовокФормы();
				СформироватьТекстПисьма();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеВидимостьюКоманд();

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействиемАнкета Тогда
			Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием;
			Элементы.ШапкаЦельОбращения.ТекущаяСтраница = Элементы.ГруппаЦельОбращенияЛево;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация;
		КонецЕсли;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение;
	КонецЕсли;
	УстановитьЗаголовокФормы();
	УправлениеВидимостьюКоманд();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтИТС(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://its.1c.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУправлениеРегламентными(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://www.its.1c.ru/db/metod81#content:1622:1");
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://www.its.1c.ru/db/metod81#content:1551:1");
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭП) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Не выбрана учетная запись электронной почты для отправки письма'"),, "УчетнаяЗаписьЭППредставление");
		Возврат;
	КонецЕсли;
	НайденныеСтроки = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", УчетнаяЗаписьЭП));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Выбранная учетная запись не доступна для отправки писем'"),, "УчетнаяЗаписьЭППредставление");
		Возврат;
	Иначе
		Результат = ВыполнитьОтправкуСервер();
		Если Результат = "" Тогда
			ПоказатьОповещениеПользователя(НСтр("ru ='Письмо отправлено!'"),,,БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьПредупреждение(Неопределено, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПрикрепитьФайлРасширениеПодключено",
		ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресВременногоХранилищаФайла = "";
	ПолноеИмяФайла = "";
	НачатьПомещениеФайла(
		Новый ОписаниеОповещения("ПрикрепитьФайлЗавершение", ЭтотОбъект, Новый Структура("АдресВременногоХранилищаФайла, ПолноеИмяФайла", АдресВременногоХранилищаФайла, ПолноеИмяФайла)), 
		АдресВременногоХранилищаФайла,
		ПолноеИмяФайла,
		Истина,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлЗавершение(Результат, Адрес, ПолноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    Если Не Результат Тогда
        Возврат;
    КонецЕсли;
    
    Размер = РазмерФайлаВоВременномХранилище(Адрес);
    
    ИмяФайлаИнфо = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
    
    ВложенияСтрока = Вложения.Добавить();
    ВложенияСтрока.Ссылка = Неопределено;
    ВложенияСтрока.Представление = ИмяФайлаИнфо.Имя;
    ВложенияСтрока.ИмяФайла = ИмяФайлаИнфо.ИмяБезРасширения;
    ВложенияСтрока.ИмяФайлаНаДиске = ПолноеИмяФайла;
    
    ВложенияСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
    
    ВложенияСтрока.Размер = Размер;
    ВложенияСтрока.РазмерПредставление = РазмерСтрокой(Размер);
    ВложенияСтрока.Адрес = Адрес;
    
    ОтобразитьКоличествоФайлов();

КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиЭП(Команда)
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТехнологическийЖурнал(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://www.its.1c.ru/db/metod81#content:1501:1");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗамерПроизводительности(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://www.its.1c.ru/db/metod81#content:1553:1");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УчетнаяЗаписьЭППредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетнаяЗаписьЭППредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УчетнаяЗаписьЭППредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетнаяЗаписьЭППредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

#Область УправлениеВидимостьюИДоступностью

&НаКлиенте
Процедура УправлениеВидимостью()

	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПустаяСсылка")
		ИЛИ ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОбОшибке;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеОПовышенииУдобстваРаботы") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеОПовышенииУдобстваРаботы;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеПоРазвитиюПрограммы") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеПоРазвитиюПрограммы;
		Если ПожеланияПоРазвитиюГотовДатьПояснения Тогда
			Элементы.ГруппаДопПояснения.ТекущаяСтраница = Элементы.ГруппаДопКонтакты;
		Иначе
			Элементы.ГруппаДопПояснения.ТекущаяСтраница = Элементы.ГруппаПустая;
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ВопросОРаботеСПрограммой") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ВопросОРаботеСПрограммой;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОПроблемахСБыстродействием") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ОбращениеПоИнымПричинам") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ОбращениеПоИнымПричинам;
	КонецЕсли;
	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		ТекстПрикрепитьФайл = НСтр("ru ='Вы можете прикрепить к письму файлы с информацией об ошибке, например картинку экрана'");
	Иначе
		ТекстПрикрепитьФайл = НСтр("ru ='Вы можете прикрепить к письму файлы с дополнительной информацией'");
	КонецЕсли;
	
	УстановитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКоманд()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыТехИнфо;
		Элементы.ТехИнфоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыОбращение;
		Элементы.ОбращениеДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ИтоговыйТекст Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыОбращениеОтправить;
		Элементы.Отправить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеТекстаПисьма

&НаСервере
Процедура СформироватьТекстПисьма()
	
	ИмяФайлаXML   = ПолучитьИмяВременногоФайла(".xml");
	ТекстФайлаXML = Новый ЗаписьXML;
	ТекстФайлаXML.ОткрытьФайл(ИмяФайлаXML);
	ТекстФайлаXML.ЗаписатьОбъявлениеXML();
	ТекстФайлаXML.ЗаписатьНачалоЭлемента(НСтр("ru ='Корневой'"));
	
	//Формирование основного текста письма
	ТекстПисьма = НСтр("ru ='Тема:'") + " " + ЦельОбращения + Символы.ПС
		+ НСтр("ru ='Контактные данные:'") + " " + СокрЛП(ИмяОтправителя) + НСтр("ru =', ответ прошу прислать на адрес'") + " " + СокрЛП(EMailОтправителяДляОтвета) + Символы.ПС
		+ НСтр("ru ='Регион/город:'") + " " + СокрЛП(РегионИГородОтправителя) + Символы.ПС
		+ НСтр("ru ='Рег. номер:'") + " " + СокрЛП(РегНомер) + НСтр("ru =', продукт зарегистрирован на'") + " " + СокрЛП(Организация) + Символы.ПС + Символы.ПС
		+ НСтр("ru ='Текст обращения:'") + Символы.ПС + Символы.ПС;
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(ЦельОбращения), НСтр("ru ='ЦельОбращения'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(ИмяОтправителя), НСтр("ru ='ИмяОтправителя'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(EMailОтправителяДляОтвета), НСтр("ru ='EMailОтправителяДляОтвета'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(РегионИГородОтправителя), НСтр("ru ='РегионИГородОтправителя'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(РегНомер), НСтр("ru ='РегНомер'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(Организация), НСтр("ru ='Организация'"));
	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		ТекстПисьма = ТекстПисьма
			+ СокрЛП(СообщениеОбОшибкеОписаниеОшибки) + Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(СообщениеОбОшибкеОписаниеОшибки), НСтр("ru ='СообщениеОбОшибкеОписаниеОшибки'"));
		Если СообщениеОбОшибкеГдеВоспроизводится = 0 Тогда
			ТекстПисьма = ТекстПисьма + Символы.ПС
			+ НСтр("ru ='Согласно указанной последовательности действий ошибку можно воспроизвести на Демо-базе'")
			+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru ='На Демо-базе'"), НСтр("ru ='ОшибкаВоспроизводится'"));
		ИначеЕсли СообщениеОбОшибкеГдеВоспроизводится = 1 Тогда
			ТекстПисьма = ТекстПисьма + Символы.ПС
			+ НСтр("ru ='Согласно указанной последовательности действий ошибка воспроизводится на моей базе, которую могу предоставить в случае необходимости'")
			+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru ='На базе пользователя'"), НСтр("ru ='ОшибкаВоспроизводится'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеПоРазвитиюПрограммы") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='При планировании работ по развитию программы прошу учесть, что следующие задачи не удается решить с помощью существующего в данный момент функционала'")
			+ Символы.ПС + Символы.ПС
			+ СокрЛП(ПожеланияПоРазвитиюОписаниеЗадач) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ПожеланияПоРазвитиюОписаниеЗадач), НСтр("ru ='ПожеланияПоРазвитиюОписаниеЗадач'"));
		Если ЗначениеЗаполнено(ПожеланияПоРазвитиюУдачныеПримеры) Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='Мне известны следующие удачные примеры реализации указанных задач:'")+ Символы.ПС + Символы.ПС
			+ СокрЛП(ПожеланияПоРазвитиюУдачныеПримеры)
			+ Символы.ПС+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(ПожеланияПоРазвитиюУдачныеПримеры), НСтр("ru ='ПожеланияПоРазвитиюУдачныеПримеры'"));
		КонецЕсли;
		Если ПожеланияПоРазвитиюГотовДатьПояснения Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='При необходимости могу дать дополнительные пояснения по указанным задачам'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru ='Да'"), НСтр("ru ='ГотовДатьПояснения'"));
			Если ЗначениеЗаполнено(ДругиеСпособыСвязи) Тогда
				ТекстПисьма = ТекстПисьма
				+ НСтр("ru ='Мои дополнительные контакты:'") + " " + СокрЛП(ДругиеСпособыСвязи) + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, СокрЛП(ДругиеСпособыСвязи), НСтр("ru ='ДопКонтакты'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеОПовышенииУдобстваРаботы") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='Работа со следующим функицоналом вызывает трудности:'") + Символы.ПС + Символы.ПС
			+ СокрЛП(УдобствоРаботыЧтоВызываетТрудности) + Символы.ПС + Символы.ПС
			+ НСтр("ru ='Удобным видится следующее поведение программы:'") + Символы.ПС + Символы.ПС
			+ СокрЛП(УдобствоРаботыОжидаемоеПоведение) + Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(УдобствоРаботыЧтоВызываетТрудности), НСтр("ru ='УдобствоРаботыЧтоВызываетТрудности'"));
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(УдобствоРаботыОжидаемоеПоведение), НСтр("ru ='УдобствоРаботыОжидаемоеПоведение'"));
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОПроблемахСБыстродействием") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='Выполнение следующей последовательности действий приводит к недопустимому снижению быстродействия программы:'") + Символы.ПС + Символы.ПС
			+ СокрЛП(СообщениеОПроблемахСБыстродействиемОписание) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(СообщениеОПроблемахСБыстродействиемОписание), НСтр("ru ='СообщениеОПроблемахСБыстродействиемОписание'"));
		Если СообщениеОПроблемахСБыстродействиемГотовПредоставитьБазу Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='В случае необходимости могу предоставить базу для анализа в отдел технической поддержки'")
			+ Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru ='Да'"), НСтр("ru ='СообщениеОПроблемахСБыстродействиемГотовПредоставитьБазу'"));
		КонецЕсли;
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru ='Дополнительная информация:'") + Символы.ПС;
		Если НЕ ЭтоФайловаяБаза Тогда
			Если СообщениеОПроблемахСБыстродействиемТипСУБД = 0 Тогда
				НазваниеСУБД = "MS SQL";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 1 Тогда
				НазваниеСУБД = "PostgreSQL";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 2 Тогда
				НазваниеСУБД = "IBM DB2";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 3 Тогда
				НазваниеСУБД = "Oracle";
			КонецЕсли;
			ТекстПисьма = ТекстПисьма 
			+ НСтр("ru ='Тип СУБД:'") + " " + НазваниеСУБД + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НазваниеСУБД, НСтр("ru ='ТипСУБД'"));
			Если АнкетаКоличествоБазНаСУБД > 0 Тогда
				ТекстПисьма = ТекстПисьма 
				+ НСтр("ru ='Количество баз, одновременно работающих на СУБД:'") + " " + АнкетаКоличествоБазНаСУБД + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, АнкетаКоличествоБазНаСУБД, НСтр("ru ='КоличествоБазНаСУБД'"));
			КонецЕсли;
			Если АнкетаСерверБДСерверПриложений = 0 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийРаздельно.Заголовок;
			ИначеЕсли АнкетаСерверБДСерверПриложений = 1 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийВместе.Заголовок;
			ИначеЕсли АнкетаСерверБДСерверПриложений = 2 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийНеИзвестно.Заголовок;
			КонецЕсли;
			ТекстПисьма = ТекстПисьма 
			+ НСтр("ru ='Расположение сервера базы данных и сервера приложений:'") + " " + РасположениеСерверовБДИПриложений + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, РасположениеСерверовБДИПриложений, НСтр("ru ='РасположениеСерверовБДИПриложений'"));
			Если ЗначениеЗаполнено(АнкетаПараметрыПроцессораИПамяти) Тогда
				ТекстХарактеристики = НСтр("ru ='Аппаратные характеристики сервера базы данных и сервера приложений:'") + " " + СокрЛП(АнкетаПараметрыПроцессораИПамяти);
				ТекстПисьма = ТекстПисьма + ТекстХарактеристики + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, СокрЛП(АнкетаПараметрыПроцессораИПамяти), НСтр("ru ='ПараметрыПроцессораИПамятиСерверовБДИПриложений'"));
			КонецЕсли;
		КонецЕсли;
		Если СообщениеОПроблемахСБыстродействиемКоличествоПользователей > 0 Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='Количество одновременно работающих в базе пользователей в момент снижения быстродействия:'") + " "
			+ СообщениеОПроблемахСБыстродействиемКоличествоПользователей + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СообщениеОПроблемахСБыстродействиемКоличествоПользователей, НСтр("ru ='КоличествоОдновременноРаботающихПользователей'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПриОтключенииРегламентных = 0 Тогда
			ЗамедлениеПриОтключенныхРегламентных = Элементы.АнкетаЗамедлениеПриОтключенииРегламентныхДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='Снижение быстродействия наблюдается также при отключенных регламентных заданиях'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПриОтключенныхРегламентных, НСтр("ru ='ЗамедлениеПриОтключенныхРегламентныхЗаданиях'"));
		ИначеЕсли АнкетаЗамедлениеПриОтключенииРегламентных = 1 Тогда
			ЗамедлениеПриОтключенныхРегламентных = Элементы.АнкетаЗамедлениеПриОтключенииРегламентныхНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='При отключенных регламентных заданиях снижение быстродействия не наблюдается'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПриОтключенныхРегламентных, НСтр("ru ='ЗамедлениеПриОтключенныхРегламентныхЗаданиях'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПодПолнымиПравами = 0 Тогда
			ЗамедлениеПодПолнымиПравами = Элементы.АнкетаЗамедлениеПодПолнымиПравамиДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='Снижение быстродействия наблюдается при работе с полными правами'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодПолнымиПравами, НСтр("ru ='ЗамедлениеПодПолнымиПравами'"));
		ИначеЕсли АнкетаЗамедлениеПодПолнымиПравами = 1 Тогда
			ЗамедлениеПодПолнымиПравами = Элементы.АнкетаЗамедлениеПодПолнымиПравамиНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='При работе с полными правами снижение быстродействия не наблюдается'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодПолнымиПравами, НСтр("ru ='ЗамедлениеПодПолнымиПравами'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПодНеПолнымиПравами = 0 Тогда
			ЗамедлениеПодНеПолнымиПравами = Элементы.АнкетаЗамедлениеПодНеПолнымиПравамиДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='Снижение быстродействия наблюдается при работе с неполными правами'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодНеПолнымиПравами, НСтр("ru ='ЗамедлениеПодНеПолнымиПравами'"));
		ИначеЕсли АнкетаЗамедлениеПодНеПолнымиПравами = 1 Тогда
			ЗамедлениеПодНеПолнымиПравами = Элементы.АнкетаЗамедлениеПодНеПолнымиПравамиНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='При работе с неполными правами снижение быстродействия не наблюдается'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодНеПолнымиПравами, НСтр("ru ='ЗамедлениеПодНеПолнымиПравами'"));
		КонецЕсли;
		Если ВключеноОграничениеДоступаНаУровнеЗаписей Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='В базе включено ограничение доступа на уровне записей'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ?(ВключеноОграничениеДоступаНаУровнеЗаписей, НСтр("ru ='Да'"), НСтр("ru ='Нет'")), НСтр("ru ='ВключеноОграничениеДоступаНаУровнеЗаписей'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ВопросОРаботеСПрограммой") Тогда
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru ='При работе с программой возник следующий вопрос:'") + Символы.ПС + Символы.ПС
		+ СокрЛП(ВопросОРаботеСПрограммойФормулировка) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ВопросОРаботеСПрограммойФормулировка), НСтр("ru ='ВопросОРаботеСПрограммой'"));
		Если ВопросОРаботеСПрограммойЧтениеДокументации = 0 Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru ='Перед написанием письма мною были изучены материалы в документации, встроенной справке,
			|статьях ИТС, однако полученной информации для решения моих вопросов не хватило'")+Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru ='Нет'"), НСтр("ru ='ДостаточностьИнформацииВДокументации'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ОбращениеПоИнымПричинам") Тогда
		ТекстПисьма = ТекстПисьма
			+ СокрЛП(ОбращениеПоИнымПричинамТекстОбращения) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ОбращениеПоИнымПричинамТекстОбращения), НСтр("ru ='ОбращениеПоИнымПричинамТекстОбращения'"));
	КонецЕсли;
	
	Если НуженДоступНаФТП Тогда
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru ='Также прошу предоставить доступ на FTP-сервер для отправки больших файлов'") + Символы.ПС + Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru ='Да'"), НСтр("ru ='НуженДоступНаФТП'"));
	КонецЕсли;
	
	//добавляем техническую информацию
	СистемИнфо = Новый СистемнаяИнформация;
	
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ВерсияПриложения, НСтр("ru ='Версия1СПредприятия8'"));
	ЗаписатьXML(ТекстФайлаXML, НазваниеКонфигурации, НСтр("ru ='Конфигурация'"));
	ЗаписатьXML(ТекстФайлаXML, ВерсияКонфигурации, НСтр("ru ='ВерсияКонфигурации'"));
	ЗаписатьXML(ТекстФайлаXML, ПоставщикКонфигурации, НСтр("ru ='ПоставщикКонфигурации'"));
	Если ЭтоФайловаяБаза Тогда
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru ='Файловый'"), НСтр("ru ='ВариантРаботы'"));
	Иначе
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru ='Клиент-серверный'"), НСтр("ru ='ВариантРаботы'"));
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВидПриложения",  "");
	ДопПараметры.Вставить("Логин",          "");
	ДопПараметры.Вставить("Пароль",         "");
	ДопПараметры.Вставить("ПарольЗаполнен", Ложь);
	
	ДопПараметрыОтправкиСообщения = ДопПараметрыОтправкиСообщения(ДопПараметры);
	Если ЗначениеЗаполнено(ДопПараметрыОтправкиСообщения) Тогда
		ДопТехИнформация = ДопПараметрыОтправкиСообщения.Вложения[0].Текст;
		ДопТехИнформация = Лев(ДопТехИнформация, СтрНайти(ДопТехИнформация, НСтр("ru ='Идентификатор конфигурации:'")) - 1);
	Иначе
		ДопТехИнформация = "";
	КонецЕсли;
	ТекстПисьма = ТекстПисьма + Символы.ПС + ДопТехИнформация;
	ЗаписатьXML(ТекстФайлаXML, ДопТехИнформация, НСтр("ru ='Дополнительно'"));
	
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru ='Процессор:'") + " " + СистемИнфо.Процессор;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.Процессор, НСтр("ru ='Процессор'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru ='Объем оперативной памяти (МБайт):'") + " " + СистемИнфо.ОперативнаяПамять;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ОперативнаяПамять, НСтр("ru ='ОЗУ'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru ='Тип платформы:'") + " " + СистемИнфо.ТипПлатформы;
	ЗаписатьXML(ТекстФайлаXML, Строка(СистемИнфо.ТипПлатформы), НСтр("ru ='ТипПлатформы'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru ='Версия ОС:'") + " " + СистемИнфо.ВерсияОС;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ВерсияОС, НСтр("ru ='ВерсияОС'"));
	
	ИтоговыйТекстПисьма.УстановитьТекст(ТекстПисьма);
	
	ТекстФайлаXML.ЗаписатьКонецЭлемента();
	ТекстФайлаXML.Закрыть();
	АдресТехническогоФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаXML), УникальныйИдентификатор);
	
	Попытка
		УдалитьФайлы(ИмяФайлаXML)
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обращение в техническую поддержку'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
			|%1 по причине: %2'"), ИмяФайлаXML, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПисьма

&НаСервере
Процедура ЗагрузитьСписокАдресовДляОтправки()
	
	Элементы.УчетнаяЗаписьЭППредставление.СписокВыбора.Очистить();
	ДоступныеДляОтправкиУчетныеЗаписи.Очистить();
	УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(
		Элементы.УчетнаяЗаписьЭППредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);
	Для Каждого Элемент Из ДоступныеДляОтправкиУчетныеЗаписи Цикл
		Элемент.АдресЭлектроннойПочты = Элемент.УчетнаяЗапись.АдресЭлектроннойПочты;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РазмерФайлаВоВременномХранилище(АдресВременногоХранилищаФайла)
	
	Попытка
		Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	Исключение
		Возврат 0;
	КонецПопытки;
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Данные.Размер();
	
КонецФункции

&НаКлиенте
Функция РазмерСтрокой(Размер)
	
	Если Размер = 0 Тогда
		Возврат "-";
	ИначеЕсли Размер < 1024 * 10 Тогда // < 10 Кб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Кб'"),
			Формат(Макс(1, Окр(Размер / 1024, 1, 1)), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 Тогда // < 1 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Кб'"),
			Формат(Цел(Размер / 1024), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 * 10 Тогда // < 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Мб'"),
			Формат(Окр(Размер / 1024 / 1024, 1, 1), "ЧГ=0"));
	Иначе // >= 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Мб'"),
			Формат(Цел(Размер / 1024 / 1024), "ЧГ=0"));
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыполнитьОтправкуСервер()
	
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		ИдентификаторПисьма = ВыполнитьОтправкуПисьма(ПисьмоОбъект);
	Исключение
		ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	Возврат "";
	
КонецФункции

&НаСервере
Функция ВыполнитьОтправкуПисьма(Объект, Соединение = Неопределено)
	
	ПараметрыПисьма = Новый Структура;

	Адресаты = Новый Массив;
	Адресаты.Добавить(Новый Структура("Адрес,Представление", "v8@1c.ru", "v8@1c.ru"));
	ПараметрыПисьма.Вставить("Кому", Адресаты);
	ПараметрыПисьма.Вставить("Тема", ЦельОбращения);
	ПараметрыПисьма.Вставить("Тело", ИтоговыйТекстПисьма.ПолучитьТекст());
	ПараметрыПисьма.Вставить("Кодировка", КодировкаТекста.UTF8);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	
	СоответствиеВложения = Новый Соответствие;
	Для Каждого Вложение Из Вложения Цикл
		СоответствиеВложения.Вставить(Вложение.Представление, ПолучитьИзВременногоХранилища(Вложение.Адрес));
	КонецЦикла;
	СоответствиеВложения.Вставить("TehInfo.xml", ПолучитьИзВременногоХранилища(АдресТехническогоФайла));
		
	ПараметрыПисьма.Вставить("Вложения", СоответствиеВложения);
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьЭП, ПараметрыПисьма,Соединение);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОтобразитьКоличествоФайлов()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Прикрепленные файлы (%1)'"),
			Вложения.Количество());
	Иначе
		Элементы.ВложенияПредставление.Заголовок = НСтр("ru = 'Прикрепленные файлы'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	СтрокаЗаголовка = НСтр("ru='Помощник обращения в техническую поддержку фирмы ""1С"" (%1)'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, СокрЛП(ТекущаяСтраница.Заголовок));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьЗначенияКонстант(РегНомер, Организация)
	
	Константы.РегистрационныйНомерПрограммы.Установить(РегНомер);
	Константы.ОрганизацияНаКоторуюЗарегистрированаПрограмма.Установить(СокрЛП(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыборРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата(ДополнительныеПараметры.ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ДопПараметрыОтправкиСообщения(Знач ДопПараметры)
	
	Результат = Новый Структура;
	Результат.Вставить("Логин"         , "");
	Результат.Вставить("ПарольЗаполнен", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации <> Неопределено Тогда
		Результат.Логин = ДанныеАутентификации.Логин;
		Результат.ПарольЗаполнен = ЗначениеЗаполнено(ДанныеАутентификации.Пароль);
	КонецЕсли;
	
	Результат.Вставить("ШаблонТекстаСообщения", ШаблонТекстаСообщения(ДопПараметры));
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(
		Новый Структура(
			"Представление, Текст",
			НСтр("ru = 'Техническая информация.txt'"),
			ТекстВложенияТехническаяИнформация(
				ДопПараметры.ВидПриложения,
				Результат)));
	
	Результат.Вставить("Вложения", МассивВложений);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ШаблонТекстаСообщения(ДопПараметры)
	
	Возврат НСтр("ru = 'Здравствуйте!
			|
			|%msgtxt
			|
			|Регистрационный номер программного продукта: <Укажите рег. номер>;
			|Организация: <Укажите название организации>.
			|С уважением,
			|.'");
	
КонецФункции

&НаСервере
Функция ТекстВложенияТехническаяИнформация(ВидПриложения, ДопПараметры)
	
	// Общие технические параметры и информация о сеансе
	СистИнфо = Новый СистемнаяИнформация;
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИмяПрограммы = Строка(ИнтернетПоддержкаПользователейКлиентСервер.ИмяПрограммы());
	Если ИмяПрограммы = "Unknown" Тогда
		ИмяПрограммы = НСтр("ru = '<Не заполнено>'");
	КонецЕсли;
	
	// Общая информация:
	Результат = НСтр("ru = 'Техническая информация о программе:
		|Название программы: %1
		|Имя программы: %2;
		|Версия программы: %3;
		|Поставщик: %4;
		|Версия Платформы 1С:Предприятие: %5;
		|Версия Библиотеки Интернет-поддержки: %6;
		|Версия Библиотеки стандартных подсистем: %7;
		|Вид приложения: %8;
		|Режим: %9;'");
	
	Результат =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат,
			Метаданные.Синоним,
			ИмяПрограммы
				+ " (" + Строка(ИнтернетПоддержкаПользователейКлиентСервер.ИмяКонфигурации()) + ")",
			Строка(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации()),
			Метаданные.Поставщик,
			Строка(СистИнфо.ВерсияПриложения),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки(),
			СтандартныеПодсистемыСервер.ВерсияБиблиотеки(),
			ВидПриложения,
			?(ЭтоФайловаяИБ, НСтр("ru = 'Файловый'"), НСтр("ru = 'Серверный'")));
	
	// Права:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Полные права: %1;
				|Права администратора: %2;
				|Права для подключения Интернет-поддержки: %3;'"),
			?(Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")),
			?(Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")),
			?(ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП(), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")));
	
	// Личные данные:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Логин для подключения Интернет-поддержки: %1;
				|Пароль для подключения Интернет-поддержки: %2;
				|Регистрационный номер программного продукта: %3;'"),
			ДопПараметры.Логин,
			?(ДопПараметры.ПарольЗаполнен, НСтр("ru = 'заполнен'"), НСтр("ru = 'не заполнен'")),
			ИнтернетПоддержкаПользователей.РегистрационныйНомерПрограммногоПродукта());
	
	// Настройки соединения:
	НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки соединения с серверами Интернет-поддержки:
				|	Доменная зона: %1'"),
			?(НастройкиСоединения.ДоменРасположенияСерверовИПП = 1, "1c.eu", "1c.ru"));
	
	// Настройки клиента лицензирования:
	Если ИнтернетПоддержкаПользователей.ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		ИДКонфигурации = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ИДКонфигурации();
		Если Не ПустаяСтрока(ИДКонфигурации) Тогда
			Результат = Результат + Символы.ПС
				+ НСтр("ru = 'Имя клиента лицензирования:'") + " "
				+ КлиентЛицензирования.ИмяКлиентаЛицензирования()
				+ Символы.ПС + НСтр("ru = 'Идентификатор конфигурации:'")
				+ Символы.ПС + ИДКонфигурации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяУдаление = Ложь;

#КонецОбласти