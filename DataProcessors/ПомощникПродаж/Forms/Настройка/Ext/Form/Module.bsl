
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьСтатусыРеализацийТоваровУслуг       = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг");
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
	СтруктураПараметров = ПолучитьПараметры(Параметры);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПараметров);
	
	ЕстьПравоПечатиПКО = ПравоДоступа("Добавление",Метаданные.Документы.ПриходныйКассовыйОрдер);
	
	ПереключательОбеспечение = Число(УпрощенноеОбеспечение);
	
	ИнициализироватьВариантыОформленияДокументовПродажи();
	УстановитьДоступностьСчетаНаОплатуПриходногоКассовогоОрдера(ЭтаФорма);
	УстановитьДоступностьКоммерческогоПредложения(ЭтаФорма);
	УстановитьДоступностьЗаказаКлиента(ЭтаФорма);
	УстановитьДоступностьЗаявкиНаВозврат(ЭтаФорма);
	УстановитьДоступностьДокументаПродажи(ЭтаФорма);
	УстановитьДоступностьВидимостьТранспортнойНакладной(ЭтаФорма);
	УстановитьДоступностьДоверенностиНаПолучениеДС(ЭтаФорма);
	УстановитьТекущуюСтраницуВариантовОформления(ЭтаФорма);
	УстановитьДоступностьНастроекЗаполнения(ЭтаФорма);
	
	УстановитьДоступностьВариантОбеспечения(ЭтаФорма);
	УстановитьДоступностьЭлементовПрогнозирования(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗакрытьФормуПринудительно Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не СохранитьПараметры И НЕ ЗавершениеРаботы Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура;
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			НСтр("ru = 'Параметры помощника продаж были изменены. Закрыть форму без сохранения параметров?'"),
			СписокКнопок);
		Возврат;
		
	КонецЕсли;
	
	ПередЗакрытиемЗавершение(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Отказ)
	
	Если СохранитьПараметры Тогда
		
		ОчиститьСообщения();
		
		Если СоздаватьКоммерческоеПредложение И Не ЗначениеЗаполнено(СтатусКоммерческогоПредложения) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Статус коммерческого предложения"" не заполнено'"),
				,
				"СтатусКоммерческогоПредложения",
				,
				Отказ);
			СохранитьПараметры = Ложь;
		
		КонецЕсли;
		
		Если ИспользоватьРасширенныеВозможностиЗаказаКлиента И СоздаватьЗаказКлиента И Не ЗначениеЗаполнено(СтатусЗаказаКлиента) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Статус заказа клиента"" не заполнено'"),
				,
				"СтатусЗаказаКлиента",
				,
				Отказ);
			СохранитьПараметры = Ложь;
		
		КонецЕсли;
		
		Если ИспользоватьСтатусыРеализацийТоваровУслуг
			И СоздаватьДокументПродажи
			И Не ЗначениеЗаполнено(СтатусРеализацииТоваровУслуг) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Статус реализации"" не заполнено'"),
				,
				"СтатусРеализацииТоваровУслуг",
				,
				Отказ);
			СохранитьПараметры = Ложь;
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВариантОформленияДокументов) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Оформить"" не заполнено'"),
				,
				"ВариантОформленияДокументов",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = "НеЗакрывать" Тогда
		СохранитьПараметры = Ложь;
	КонецЕсли;
	
	Если ОтветНаВопрос = "Закрыть" Тогда
		ЗакрытьФормуПринудительно = Истина;
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗакрытиемЗавершение(Отказ);
	Если Отказ = Истина Тогда
		ЗакрытьФормуПринудительно = Ложь;
	КонецЕсли;
	
	Если ЗакрытьФормуПринудительно Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если СохранитьПараметры И НЕ ЗавершениеРаботы Тогда
		
		СтруктураПараметров = ПолучитьПараметры(ЭтаФорма);
		ОповеститьОВыборе(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СоздаватьСчетНаОплатуПриИзменении(Элемент)
	
	УстановитьДоступностьСчетаНаОплату(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьПриходныйКассовыйОрдерПриИзменении(Элемент)
	
	Если НЕ ЕстьПравоПечатиПКО Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недостаточно прав на создание ПКО.'"));
	КонецЕсли;
	
	УстановитьДоступностьПриходногоКассовогоОрдера(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЗаявкуНаВозвратТоваровОтКлиентовПриИзменении(Элемент)
	УстановитьДоступностьЗаявкиНаВозврат(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОбеспечениеПриИзменении(Элемент)
	УпрощенноеОбеспечение = Булево(ПереключательОбеспечение);
	УстановитьДоступностьВариантОбеспечения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьРекомендацииКПокупкеПриИзменении(Элемент)
	УстановитьДоступностьЭлементовПрогнозирования(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьТоварыПоСоглашениюПриИзменении(Элемент)
	Если ЗаполнятьТоварыПоСоглашению = Ложь Тогда
		ОтображатьРекомендацииКПокупке = Ложь;
	КонецЕсли;
	УстановитьДоступностьЭлементовПрогнозирования(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	СохранитьПараметры = Истина;
	ЗакрытьФормуПринудительно = Ложь;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусКоммерческогоПредложения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоздаватьКоммерческоеПредложение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусКоммерческогоПредложения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусЗаказаКлиента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоздаватьЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗаказаКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусРеализацииТоваровУслуг.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоздаватьДокументПродажи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусРеализацииТоваровУслуг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусКоммерческогоПредложения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусКоммерческогоПредложения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусЗаказаКлиента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗаказаКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусРеализацииТоваровУслуг.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусРеализацииТоваровУслуг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусЗаявкиНаВозвратТоваровОтКлиентов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоздаватьЗаявкуНаВозвратТоваровОтКлиентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗаявкиНаВозвратТоваровОтКлиентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусЗаявкиНаВозвратТоваровОтКлиентов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗаявкиНаВозвратТоваровОтКлиентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметры(Источник)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПечататьАктВыполненныхРабот",              Источник.ПечататьАктВыполненныхРабот);
	СтруктураПараметров.Вставить("ПечататьЗаказКлиента",                     Источник.ПечататьЗаказКлиента);
	СтруктураПараметров.Вставить("ПечататьКоммерческоеПредложение",          Источник.ПечататьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("ПечататьПриходныйКассовыйОрдер",           Источник.ПечататьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("ПечататьРеализациюТоваровУслуг",           Источник.ПечататьРеализациюТоваровУслуг);
	СтруктураПараметров.Вставить("ПечататьСчетНаОплату",                     Источник.ПечататьСчетНаОплату);
	СтруктураПараметров.Вставить("ПечататьСчетФактуру",                      Источник.ПечататьСчетФактуру);
	СтруктураПараметров.Вставить("СоздаватьДокументПродажи",                 Источник.СоздаватьДокументПродажи);
	СтруктураПараметров.Вставить("СоздаватьЗаказКлиента",                    Источник.СоздаватьЗаказКлиента);
	СтруктураПараметров.Вставить("СоздаватьКоммерческоеПредложение",         Источник.СоздаватьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("СоздаватьПриходныйКассовыйОрдер",          Источник.СоздаватьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("СоздаватьСчетНаОплату",                    Источник.СоздаватьСчетНаОплату);
	СтруктураПараметров.Вставить("СтатусЗаказаКлиента",                      Источник.СтатусЗаказаКлиента);
	СтруктураПараметров.Вставить("СтатусКоммерческогоПредложения",           Источник.СтатусКоммерческогоПредложения);
	СтруктураПараметров.Вставить("СтатусРеализацииТоваровУслуг",             Источник.СтатусРеализацииТоваровУслуг);	
	СтруктураПараметров.Вставить("СоздаватьТранспортнуюНакладнуюПоУмолчанию",Источник.СоздаватьТранспортнуюНакладнуюПоУмолчанию);
	СтруктураПараметров.Вставить("СоздаватьДоверенностьНаПолучениеДСПоУмолчанию", Источник.СоздаватьДоверенностьНаПолучениеДСПоУмолчанию);
	СтруктураПараметров.Вставить("ВариантОформленияДокументов",                   Источник.ВариантОформленияДокументов);
	
	СтруктураПараметров.Вставить("СоздаватьЗаявкуНаВозвратТоваровОтКлиентов",     Источник.СоздаватьЗаявкуНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("ПечататьЗаявкуНаВозвратТоваровОтКлиентов",      Источник.ПечататьЗаявкуНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("СтатусЗаявкиНаВозвратТоваровОтКлиентов",        Источник.СтатусЗаявкиНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("ЗаполнятьТоварыПоСоглашению",                   Источник.ЗаполнятьТоварыПоСоглашению);
	СтруктураПараметров.Вставить("ОтображатьРекомендацииКПокупке",                Источник.ОтображатьРекомендацииКПокупке);
	СтруктураПараметров.Вставить("СпособПрогнозированияПродаж",                   Источник.СпособПрогнозированияПродаж);
	СтруктураПараметров.Вставить("ПериодСбораСтатистики",                         Источник.ПериодСбораСтатистики);
	СтруктураПараметров.Вставить("УпрощенноеОбеспечение",                         Источник.УпрощенноеОбеспечение);
	СтруктураПараметров.Вставить("ВариантОбеспечения",                            Источник.ВариантОбеспечения);
	СтруктураПараметров.Вставить("НеЗадаватьВопросОбеспечение",                   Источник.НеЗадаватьВопросОбеспечение);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеФлага(Реквизит, ЗависимыеЭлементы = Неопределено, ЗависимыйРеквизит = Неопределено)
	
	Если ТипЗнч(ЗависимыеЭлементы) = Тип("Массив") Тогда
		Для каждого ЗависимыйЭлемент Из ЗависимыеЭлементы Цикл
			ЗависимыйЭлемент.Доступность = Реквизит;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗависимыеЭлементы) = Тип("ПолеФормы") Тогда
		ЗависимыеЭлементы.Доступность = Реквизит;
	КонецЕсли;
	
	Если Не Реквизит Тогда
		ЗависимыйРеквизит = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСчетаНаОплатуПриходногоКассовогоОрдера(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи,
		,
		Форма.СоздаватьСчетНаОплату);
		
	МассивЭлементовПечататьСчетНаОплату = Новый Массив;
	МассивЭлементовПечататьСчетНаОплату.Добавить(Форма.Элементы.ПечататьСчетНаОплату);
	МассивЭлементовПечататьСчетНаОплату.Добавить(Форма.Элементы.ПечататьСчетНаОплатуЗаказРеализация);
	МассивЭлементовПечататьСчетНаОплату.Добавить(Форма.Элементы.ПечататьСчетНаОплатуРеализация);
	
	ОбработатьИзменениеФлага(
		(Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи) И Форма.СоздаватьСчетНаОплату,
		МассивЭлементовПечататьСчетНаОплату,
		Форма.ПечататьСчетНаОплату);
		
	ОбработатьИзменениеФлага(
		Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи,
		,
		Форма.СоздаватьПриходныйКассовыйОрдер);
		
	МассивЭлементовПечататьПКО = Новый Массив;
	МассивЭлементовПечататьПКО.Добавить(Форма.Элементы.ПечататьПриходныйКассовыйОрдер);
	МассивЭлементовПечататьПКО.Добавить(Форма.Элементы.ПечататьПриходныйКассовыйОрдерЗаказРеализация);
	МассивЭлементовПечататьПКО.Добавить(Форма.Элементы.ПечататьПриходныйКассовыйОрдерРеализация);
	
	ОбработатьИзменениеФлага(
		(Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи) И Форма.СоздаватьПриходныйКассовыйОрдер,
		МассивЭлементовПечататьПКО,
		Форма.ПечататьПриходныйКассовыйОрдер);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоммерческогоПредложения(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьКоммерческоеПредложение,
		Форма.Элементы.ПечататьКоммерческоеПредложение,
		Форма.ПечататьКоммерческоеПредложение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЗаказаКлиента(Форма)
	
	МассивЭлементовПечататьЗаказ = Новый Массив;
	МассивЭлементовПечататьЗаказ.Добавить(Форма.Элементы.ПечататьЗаказКлиента);
	МассивЭлементовПечататьЗаказ.Добавить(Форма.Элементы.ПечататьЗаказКлиентаЗаказРеализация);
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьЗаказКлиента,
		МассивЭлементовПечататьЗаказ,
		Форма.ПечататьЗаказКлиента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЗаявкиНаВозврат(Форма)
	
	МассивЭлементовПечататьЗаказ = Новый Массив;
	МассивЭлементовПечататьЗаказ.Добавить(Форма.Элементы.ПечататьЗаявкуНаВозвратТоваровОтКлиентов);
	МассивЭлементовПечататьЗаказ.Добавить(Форма.Элементы.ПечататьЗаявкуНаВозвратТоваровОтКлиентовЗаказРеализация);
	МассивЭлементовПечататьЗаказ.Добавить(Форма.Элементы.СтатусЗаявкиНаВозвратТоваровОтКлиентов);
	МассивЭлементовПечататьЗаказ.Добавить(Форма.Элементы.СтатусЗаявкиНаВозвратТоваровОтКлиентовЗаказРеализация);
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьЗаявкуНаВозвратТоваровОтКлиентов,
		МассивЭлементовПечататьЗаказ,
		Форма.ПечататьЗаявкуНаВозвратТоваровОтКлиентов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСчетаНаОплату(Форма)
	
	МассивЭлементовПечататьСчетНаОплату = Новый Массив;
	МассивЭлементовПечататьСчетНаОплату.Добавить(Форма.Элементы.ПечататьСчетНаОплату);
	МассивЭлементовПечататьСчетНаОплату.Добавить(Форма.Элементы.ПечататьСчетНаОплатуЗаказРеализация);
	МассивЭлементовПечататьСчетНаОплату.Добавить(Форма.Элементы.ПечататьСчетНаОплатуРеализация);
	
	ОбработатьИзменениеФлага(
		(Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи) И Форма.СоздаватьСчетНаОплату,
		МассивЭлементовПечататьСчетНаОплату,
		Форма.ПечататьСчетНаОплату);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДокументаПродажи(Форма)
	
	МассивЭлементовПечататьРеализацию = Новый Массив;
	МассивЭлементовПечататьРеализацию.Добавить(Форма.Элементы.ПечататьРеализацию);
	МассивЭлементовПечататьРеализацию.Добавить(Форма.Элементы.ПечататьРеализациюЗаказРеализация);
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьДокументПродажи,
		МассивЭлементовПечататьРеализацию,
		Форма.ПечататьРеализациюТоваровУслуг);
		
	МассивЭлементовПечататьАкт = Новый Массив;
	МассивЭлементовПечататьАкт.Добавить(Форма.Элементы.ПечататьАкт);
	МассивЭлементовПечататьАкт.Добавить(Форма.Элементы.ПечататьАктЗаказРеализация);
		
	ОбработатьИзменениеФлага(
		Форма.СоздаватьДокументПродажи,
		МассивЭлементовПечататьАкт,
		Форма.ПечататьАктВыполненныхРабот);
		
	МассивЭлементовПечататьСФ = Новый Массив;
	МассивЭлементовПечататьСФ.Добавить(Форма.Элементы.ПечататьСчетФактуру);
	МассивЭлементовПечататьСФ.Добавить(Форма.Элементы.ПечататьСчетФактуруЗаказРеализация);
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьДокументПродажи,
		МассивЭлементовПечататьСФ,
		Форма.ПечататьСчетФактуру);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПриходногоКассовогоОрдера(Форма)
	
	Если Форма.ЕстьПравоПечатиПКО Тогда
		МассивЭлементовПечататьПКО = Новый Массив;
		МассивЭлементовПечататьПКО.Добавить(Форма.Элементы.ПечататьПриходныйКассовыйОрдер);
		МассивЭлементовПечататьПКО.Добавить(Форма.Элементы.ПечататьПриходныйКассовыйОрдерЗаказРеализация);
		МассивЭлементовПечататьПКО.Добавить(Форма.Элементы.ПечататьПриходныйКассовыйОрдерРеализация);
		
		ОбработатьИзменениеФлага(
			(Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи) И Форма.СоздаватьПриходныйКассовыйОрдер,
			МассивЭлементовПечататьПКО,
			Форма.ПечататьПриходныйКассовыйОрдер);
	Иначе
		Форма.СоздаватьПриходныйКассовыйОрдер = Ложь;
		Форма.ПечататьПриходныйКассовыйОрдер = Ложь;
	КонецЕсли; 
	Форма.Элементы.ПечататьПриходныйКассовыйОрдер.Доступность = Форма.ЕстьПравоПечатиПКО;
	Форма.Элементы.ПечататьПриходныйКассовыйОрдерЗаказРеализация.Доступность = Форма.ЕстьПравоПечатиПКО;
	Форма.Элементы.ПечататьПриходныйКассовыйОрдерРеализация.Доступность = Форма.ЕстьПравоПечатиПКО;
	Форма.Элементы.СоздаватьПриходныйКассовыйОрдер.Доступность = Форма.ЕстьПравоПечатиПКО;
	Форма.Элементы.СоздаватьПриходныйКассовыйОрдерЗаказРеализация.Доступность = Форма.ЕстьПравоПечатиПКО;
	Форма.Элементы.СоздаватьПриходныйКассовыйОрдерРеализация.Доступность = Форма.ЕстьПравоПечатиПКО;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВидимостьТранспортнойНакладной(Форма)
	
	Форма.Элементы.ГруппаТранспортнаяНакладная.Доступность = Форма.СоздаватьДокументПродажи;
	Форма.Элементы.ГруппаТранспортнаяНакладнаяЗаказРеализация.Доступность = Форма.СоздаватьДокументПродажи;
	Если Не Форма.СоздаватьДокументПродажи Тогда 
		Форма.СоздаватьТранспортнуюНакладнуюПоУмолчанию = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДоверенностиНаПолучениеДС(Форма)
	
	ДоступностьДоверенности = Форма.СоздаватьДокументПродажи Или Форма.СоздаватьЗаказКлиента;
	Форма.Элементы.ГруппаДоверенность.Доступность = ДоступностьДоверенности;
	Форма.Элементы.ГруппаДоверенностьРеализация.Доступность = ДоступностьДоверенности; 
	Форма.Элементы.ГруппаДоверенностьРеализацияЗаказРеализация.Доступность = ДоступностьДоверенности;
	
	Если Не ДоступностьДоверенности Тогда 
		Форма.СоздаватьДоверенностьНаПолучениеДСПоУмолчанию = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВариантОбеспечения(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.УпрощенноеОбеспечение,
		Форма.Элементы.ВариантОбеспечения);
		
	ОбработатьИзменениеФлага(
		Форма.УпрощенноеОбеспечение,
		Форма.Элементы.НеЗадаватьВопросОбеспечение);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовПрогнозирования(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.ОтображатьРекомендацииКПокупке,
		Форма.Элементы.СпособПрогнозированияПродаж);
		
	ОбработатьИзменениеФлага(
		Форма.ОтображатьРекомендацииКПокупке,
		Форма.Элементы.ПериодСбораСтатистики);
		
	ОбработатьИзменениеФлага(
		Форма.ЗаполнятьТоварыПоСоглашению,
		Форма.Элементы.ОтображатьРекомендацииКПокупке);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияДокументовПриИзменении(Элемент)
	УстановитьТекущуюСтраницуВариантовОформления(ЭтаФорма);
	УстановитьДоступностьСчетаНаОплатуПриходногоКассовогоОрдера(ЭтаФорма);
	УстановитьДоступностьКоммерческогоПредложения(ЭтаФорма);
	УстановитьДоступностьЗаказаКлиента(ЭтаФорма);
	УстановитьДоступностьЗаявкиНаВозврат(ЭтаФорма);
	УстановитьДоступностьДокументаПродажи(ЭтаФорма);
	УстановитьДоступностьВидимостьТранспортнойНакладной(ЭтаФорма);
	УстановитьДоступностьДоверенностиНаПолучениеДС(ЭтаФорма);
	УстановитьДоступностьНастроекЗаполнения(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуВариантовОформления(Форма)
	
	Элементы = Форма.Элементы;
	ВариантОформленияДокументов = Форма.ВариантОформленияДокументов;
	Если ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
		Элементы.ГруппаСтраницыВарианты.ТекущаяСтраница = Элементы.ГруппаСтраницаКоммерческоеПредложение;
		Форма.СоздаватьКоммерческоеПредложение = Истина;
		Форма.СоздаватьЗаказКлиента = Ложь;
		Форма.СоздаватьДокументПродажи = Ложь;
		Форма.СоздаватьЗаявкуНаВозвратТоваровОтКлиентов = Ложь;
	ИначеЕсли ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента") Тогда
		Элементы.ГруппаСтраницыВарианты.ТекущаяСтраница = Элементы.ГруппаСтраницаЗаказКлиента;
		Форма.СоздаватьКоммерческоеПредложение = Ложь;
		Форма.СоздаватьЗаказКлиента = Истина;
		Форма.СоздаватьДокументПродажи = Ложь;
	ИначеЕсли ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг") Тогда
		Элементы.ГруппаСтраницыВарианты.ТекущаяСтраница = Элементы.ГруппаСтраницаРеализация;
		Форма.СоздаватьКоммерческоеПредложение = Ложь;
		Форма.СоздаватьЗаказКлиента = Ложь;
		Форма.СоздаватьДокументПродажи = Истина;
		Форма.СоздаватьЗаявкуНаВозвратТоваровОтКлиентов = Ложь;
	ИначеЕсли ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг") Тогда
		Элементы.ГруппаСтраницыВарианты.ТекущаяСтраница = Элементы.ГруппаСтраницаЗаказКлиентаРеализация;
		Форма.СоздаватьКоммерческоеПредложение = Ложь;
		Форма.СоздаватьЗаказКлиента = Истина;
		Форма.СоздаватьДокументПродажи = Истина;
		Форма.СтатусРеализацииТоваровУслуг = ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантыОформленияДокументовПродажи()
	
	ИспользоватьКоммерческиеПредложенияКлиентам = ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	ИспользоватьЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");
	ИспользоватьПострочнуюОтгрузку = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	ИспользоватьСоглашения = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьПланированиеПродаж = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж");
	
	Элементы.ВариантОформленияДокументов.СписокВыбора.Очистить();
	
	Если ИспользоватьКоммерческиеПредложенияКлиентам Тогда
		Элементы.ВариантОформленияДокументов.СписокВыбора.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение);
	КонецЕсли;
	
	Если ИспользоватьЗаказыКлиентов Тогда
		Элементы.ВариантОформленияДокументов.СписокВыбора.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента);
	КонецЕсли;
	
	Элементы.ВариантОформленияДокументов.СписокВыбора.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг);
	
	Если ИспользоватьЗаказыКлиентов Тогда
		Элементы.ВариантОформленияДокументов.СписокВыбора.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
	КонецЕсли;
	
	Если Элементы.ВариантОформленияДокументов.СписокВыбора.Количество() > 1 Тогда
		Элементы.ВариантОформленияДокументов.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ВариантОформленияДокументов.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.СоздаватьЗаявкуНаВозвратТоваровОтКлиентов.Видимость = ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов;
	Элементы.СоздаватьЗаявкуНаВозвратТоваровОтКлиентовЗаказРеализация.Видимость = ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов;
	Элементы.ПечататьЗаявкуНаВозвратТоваровОтКлиентов.Видимость = ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов;
	Элементы.ПечататьЗаявкуНаВозвратТоваровОтКлиентовЗаказРеализация.Видимость = ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов;
	Элементы.СтатусЗаявкиНаВозвратТоваровОтКлиентов.Видимость = ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов;
	Элементы.СтатусЗаявкиНаВозвратТоваровОтКлиентовЗаказРеализация.Видимость = ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов;
	
	Элементы.ВариантОбеспечения.СписокВыбора.Очистить();
	Элементы.ВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется);
	Элементы.ВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.Требуется);
	Элементы.ВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);
	Элементы.ВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.ИзЗаказов);
	Элементы.ВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.Обособленно);
	Элементы.ВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНастроекЗаполнения(Форма)
	
	Элементы = Форма.Элементы;
	
	ИспользоватьПострочнуюОтгрузку = Форма.ИспользоватьПострочнуюОтгрузку;
	ИспользоватьСоглашения = Форма.ИспользоватьСоглашения;
	ИспользоватьПланированиеПродаж = Форма.ИспользоватьПланированиеПродаж;
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = Форма.ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	ЭтоЗаказ = Форма.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента")
		ИЛИ Форма.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг");
	
	Элементы.ВариантОбеспечения.Видимость = ИспользоватьПострочнуюОтгрузку И ЭтоЗаказ;
	Элементы.ПереключательОбеспечениеУпр.Видимость = ИспользоватьПострочнуюОтгрузку И ЭтоЗаказ;
	Элементы.ПереключательОбеспечение.Видимость = ИспользоватьПострочнуюОтгрузку И ЭтоЗаказ;
	Элементы.НеЗадаватьВопросОбеспечение.Видимость = ИспользоватьПострочнуюОтгрузку И ЭтоЗаказ;
	Элементы.ЗаполнятьТоварыПоСоглашению.Видимость = ИспользоватьСоглашения;
	Элементы.ОтображатьРекомендацииКПокупке.Видимость = ИспользоватьСоглашения И ЭтоЗаказ И ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.СпособПрогнозированияПродаж.Видимость = ЭтоЗаказ И ИспользоватьСоглашения И ИспользоватьПланированиеПродаж И ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.ПериодСбораСтатистики.Видимость = ИспользоватьСоглашения И ЭтоЗаказ И ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.ДекорацияДней.Видимость = ИспользоватьСоглашения И ЭтоЗаказ И ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	Если Не ЭтоЗаказ Тогда
		Форма.ОтображатьРекомендацииКПокупке = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
