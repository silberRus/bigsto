#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограмныйИнтерфейс

// Выполняет проведение документов по регистру активов и пассивов.
// Параметры:
//	- Параметры - Структура - Результаты работы метода.
//	- АдресХранилища - Строка - Адрес, по которому будет помещены результаты работы.
//
Процедура СформироватьДвиженияПоРегистру(Параметры, АдресХранилища = "") Экспорт
	
	НеЗаписыватьДвижения = Параметры.НеЗаписыватьДвижения;
	
	Замеры = Новый Структура;
	НачалоФормированияДвижений = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТипыРегистраторов = КоличествоРегистраторов();
	ДобавитьЗамер(Замеры, "ФормированиеСпискаДокументовКПроведению", НачалоЗамера);
	ВывестиПротокол(НСтр("ru = 'Начало заполнения. Предстоит обработать:'"), ТипыРегистраторов);
	
	Процесс = ИнициализироватьСведенияОЗаполнении(ТипыРегистраторов);
	ОбработанныеТипы = Процесс.ОбработанныеТипы;
	ПоследнийОбработанный = "";
	Если ОбработанныеТипы.Количество() > 0 Тогда
		ПоследнийОбработанный = ОбработанныеТипы[ОбработанныеТипы.Количество()-1].Имя;
	КонецЕсли;
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
		
		ОбработанныйТип = ОбработанныеТипы.Найти(ТипРегистратора.Имя, "Имя");
		ДокументОбработан = ОбработанныйТип <> Неопределено;
		Если ДокументОбработан И ОбработанныйТип.Имя <> ПоследнийОбработанный Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьДвиженияРегистраПоДокументам(ТипРегистратора, ОбработанныеТипы, НеЗаписыватьДвижения);
		
	КонецЦикла;
	Итоги = ОбработанныеТипы.Добавить();
	Итоги.Имя = НСтр("ru = 'Итого'");
	Итоги.ВсегоДокументов = ОбработанныеТипы.Итог("ВсегоДокументов");
	Итоги.ВсегоДвижений = ОбработанныеТипы.Итог("ВсегоДвижений");
	Итоги.ВремяЗаполнения = ОбработанныеТипы.Итог("ВремяЗаполнения");
	Итоги.ВсегоЗатрачено = ПредставлениеВремени(Итоги.ВремяЗаполнения);
	
	Сведения = Константы.СведенияОбОбновленииИБ.Получить().Получить();
	Сведения.Удалить("ЗаполнениеАктивовПассивов");
	Константы.СведенияОбОбновленииИБ.Установить(Новый ХранилищеЗначения(Сведения));
	
	ДобавитьЗамер(Замеры, "ФормированиеДвижений", НачалоФормированияДвижений);
	ВывестиПротокол(НСтр("ru = 'Конец заполнения. Всего обработано:'"), ОбработанныеТипы, Замеры);
	
	Константы.ФормироватьУправленческийБаланс.Установить(Истина);
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
	
	Параметры.Вставить("ЗагрузкаВыполнена", Истина);
	Параметры.Вставить("Замеры", Замеры);
	Если ПустаяСтрока(АдресХранилища) Тогда
		Параметры.Вставить("ТипыРегистраторов", ОбработанныеТипы);
	Иначе
		ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// формирует движения по регистру ПрочиеАктивыПассивы
// Принцип формирования движений см. презентацию проекта https://partners.v8.1c.ru/forum/topic/1484492#m_1484492
//
// Параметры:
//  ОбъектДокумента - ДокументОбъект - объект документа для которого необходимо сформировать движения упр. баланса
//
Процедура ДобавитьДвиженияДокумента(ОбъектДокумента) Экспорт
	
	НачалоФормированияДвижений = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТаблицыДвиженийДокумента = ОбъектДокумента.Движения;
	Если ТипЗнч(ОбъектДокумента.Движения) = Тип("КоллекцияДвижений") Тогда
		ТаблицыДвиженийДокумента = ВыгрузитьНаборыДвижений(ОбъектДокумента.Движения, ОбъектДокумента.ДополнительныеСвойства.ЭтоНовый);
	КонецЕсли;
	ВремяВыгрузкиНаборовДвижений = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера) / 1000;
	ВремяВыгрузкиРасчетовПоДокументам = 0;
	ТаблицыДвиженийДокумента.Свойство("ВремяВыгрузкиРасчетовПоДокументам", ВремяВыгрузкиРасчетовПоДокументам);
	ТаблицыДвиженийДокумента.Удалить("ВремяВыгрузкиРасчетовПоДокументам");
	
	ПараметрыДвижений = Новый Структура;
	ПараметрыДвижений.Вставить("Ссылка", ОбъектДокумента.Ссылка);
	ПараметрыДвижений.Вставить("ТаблицыДляДвижений", ТаблицыДвиженийДокумента);
	
	ЗапросДвижений = ЗапросДвижений(ПараметрыДвижений);
	
	Если ЗапросДвижений <> Неопределено Тогда
		Замеры = ПараметрыДвижений.Протокол.Замеры;
		Замеры.Вставить("ВыгрузкаНаборовДвижений", ВремяВыгрузкиНаборовДвижений);
		Замеры.Вставить("ВыгрузкаРасчетовПоДокументам", ВремяВыгрузкиРасчетовПоДокументам);
		
		НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ДвиженияАктивовПассивов = ЗапросДвижений.Выполнить().Выгрузить();
		ДобавитьЗамер(Замеры, "ВыполнениеЗапросаДвижений", НачалоЗамера);
		
		НаборПрочиеАктивыПассивы = ОбъектДокумента.Движения.Найти("ПрочиеАктивыПассивы");
		НаборПрочиеАктивыПассивы.Загрузить(ДвиженияАктивовПассивов);
		НаборПрочиеАктивыПассивы.Записывать = ДвиженияАктивовПассивов.Количество() > 0;
	
		ДобавитьЗамер(Замеры, "ВсегоФормированиеДвижений", НачалоФормированияДвижений);
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует движения по упр. балансу после распределения отложенных взаиморасчетов
//
// Параметры:
//  РегистраторыКОтражению - Массив - документы обработанные отложенным распределением взаиморасчетов
//  ПараметрыОтладки - Структура - дополнительные параметры
//
Процедура ОбновитьДвиженияПоРасчетамСПартнерами(РегистраторыКОтражению, ПараметрыОтладки = Неопределено) Экспорт
	
	Если ТипЗнч(РегистраторыКОтражению) = Тип("Массив") И РегистраторыКОтражению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачалоОбновленияРасчетовСПартнерами = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПараметрыДвижений = Новый Структура;
	ПараметрыДвижений.Вставить("ВидОтложенногоРасчета", Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетыСПартнерами);
	ПараметрыДвижений.Вставить("ДокументыКОтражению", РегистраторыКОтражению);
	ПараметрыДвижений.Вставить("ИмяВременнойТаблицыРезультата", "втНовыеДвиженияАктивовПассивов");
	
	ЗапросДвижений = ЗапросДвижений(ПараметрыДвижений, ПараметрыОтладки);
	Если ЗапросДвижений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Замеры = ПараметрыДвижений.Протокол.Замеры;
	
	ЗапросДвижений.Текст = ЗапросДвижений.Текст +
	"// Движения активов и пассивов не затронутые обновлением расчетов с партнерами
	|ВЫБРАТЬ
	|	Т.Период,
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.НаправлениеДеятельности,
	|	Т.Статья,
	|	Т.Аналитика,
	|	Т.Сумма,
	|	Т.РасчетСебестоимости,
	|	Т.ВидИсточника,
	|	Т.Источник
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыПассивы КАК Т
	|ГДЕ
	|	Т.Регистратор В (&МассивРегистраторов)
	|	И НЕ Т.ВидИсточника В (
	|		&ВидОтложенногоРасчета,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетБаланса))
	|	И НЕ Т.Источник В (&ОбновленныеИсточники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Обновленные движения активов и пассивов
	|ВЫБРАТЬ
	|	Т.Период,
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.НаправлениеДеятельности,
	|	Т.Статья,
	|	Т.Аналитика,
	|	Т.Сумма,
	|	ЛОЖЬ,
	|	Т.ВидИсточника,
	|	Т.Источник
	|ИЗ
	|	втНовыеДвиженияАктивовПассивов КАК Т
	|
	|ИТОГИ ПО
	|	Регистратор";
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатЗапроса = ЗапросДвижений.Выполнить();
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДобавитьЗамер(Замеры, "ВыполнениеЗапросаДвижений", НачалоЗамера);
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Пока ВыборкаПоДокументам.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Регистратор);
		Выборка = ВыборкаПоДокументам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		Если НаборЗаписей.Количество() > 0 Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	ДобавитьЗамер(Замеры, "ЗаписьДвижений", НачалоЗамера);
		
	ДобавитьЗамер(Замеры, "ВсегоОбновлениеРасчетовСПартнерами", НачалоОбновленияРасчетовСПартнерами);
	
	Если ТипЗнч(ПараметрыОтладки) = Тип("Структура") Тогда
		ПараметрыОтладки.Вставить("Протокол", ПараметрыДвижений.Протокол);
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос к базе данных для получения движений управленческого баланса
//
// Параметры
//  ПараметрыДвижений - Структура - входные даные для формирования движений по упр. балансу (см. ИнициализироватьПараметрыДвижений)
//  ПараметрыОтладки - Структура - дополнительные параметры
//
// Возвращаемое значение
//  Запрос - настроенный объект запроса для получения движений по упр. балансу
//
Функция ЗапросДвижений(ПараметрыДвижений, ПараметрыОтладки = Неопределено) Экспорт
	
	ИнициализироватьПараметрыДвижений(ПараметрыДвижений, ПараметрыОтладки);
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ЗапросДвижений = ЗапросДвиженийНаправлений(ПараметрыДвижений);
	Если ЗапросДвижений.Параметры.ВсеТаблицы.Количество() > 0 Тогда
		ДобавитьТекстЗапросаВременныхТаблицКонтроляБаланса(ЗапросДвижений);
		ДобавитьТекстЗапросаДвиженийАктивовПассивов(ЗапросДвижений);
		
		ИменаВременныхТаблиц = СтрСоединить(ЗапросДвижений.Параметры.ВсеТаблицы, ",");
		ИменаВременныхТаблиц = СтрЗаменить(ИменаВременныхТаблиц,",РезультатВыборки","");
		ЗапросДвижений.УстановитьПараметр("ИменаВременныхТаблиц", ИменаВременныхТаблиц);
	КонецЕсли;
	
	ЗапросДвижений.Текст = СтрСоединить(ЗапросДвижений.Параметры.ТекстыЗапросов, РазделительЗапросов());
	ЗапросДвижений.Параметры.Удалить("ТекстыЗапросов");
	
	ДобавитьЗамер(ПараметрыДвижений.Протокол.Замеры, "СборкаЗапроса", НачалоЗамера);
	
	Если ПустаяСтрока(ЗапросДвижений.Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ЗапросДвижений;
	
КонецФункции

// Отражает переданные документы в управленческом балансе
//
// Параметры
//  ДокументыКОтражению - Ссылка, МассивСсылок, МенеджерВременныхТаблиц - документы к отражению в упр. балансе
//                        Если передан менеджер временных таблиц, 
//                        тогда по умолчанию временная таблица содержащая регистраторы должна иметь имя "ДокументыКОтражению" и содержать поле "Регистратор"
//                        иначе в дополнительных параметрах, в ключе "ТаблицаРегистраторов" может быть передана структура с описанием временной таблицы.
//                        В структуре должны быть следующие ключи:
//                          - ИмяТаблицы
//                          - ПолеРегистратора
//  ТаблицыДляДвижений - Структура - в ключах структуры передаются имена балансовых регистров. 
//                       Если не передана, тогда для переданных документов будет сформирован запрос выборки ко всем балансовым регистрам в системе.
//                       Список балансовых регистров см. Перечисление.ИсточникиУправленческогоБаланса.
//
Процедура ОтразитьДокументыВУправленческомБалансе(ДокументыКотражению, ТаблицыДляДвижений = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыДвижений = Новый Структура;
	ПараметрыДвижений.Вставить("ВидОтложенногоРасчета", Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетБаланса);
	ПараметрыДвижений.Вставить("ВыборкаПоРегистратору", Истина);
	ПараметрыДвижений.Вставить("ДокументыКОтражению",   ДокументыКотражению);
	Если ДополнительныеПараметры <> Неопределено Тогда
		Для Каждого Параметр Из ДополнительныеПараметры Цикл
			ПараметрыДвижений.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ТаблицыДляДвижений <> Неопределено Тогда
		ПараметрыДвижений.Вставить("ТаблицыДляДвижений", ТаблицыДляДвижений);
	КонецЕсли;
	
	ЗапросДвижений = ЗапросДвижений(ПараметрыДвижений);
	Если ЗапросДвижений <> Неопределено Тогда
		ВыборкаПоДокументам = ЗапросДвижений.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДокументам.Следующий() Цикл
			НаборЗаписей = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Регистратор);
			Выборка = ВыборкаПоДокументам.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			Если НаборЗаписей.Количество() > 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;// Запрос движений активов/пассив подготовлен без ошибок
	
КонецПроцедуры

// Сервисная процедура, используемая в обработчиках обновления.
// Возвращает список регистров-источников управленческого баланса
//
Функция БалансовыеРегистры(ВключаяОнлайнРасчеты = Ложь) Экспорт
	
	Исключения = Новый Соответствие;
	Если НЕ ВключаяОнлайнРасчеты Тогда
		Исключения.Вставить("РасчетыСКлиентами", Истина);
		Исключения.Вставить("РасчетыСПоставщиками", Истина);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") ИЛИ ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Исключения.Вставить("ДенежныеДокументы", Истина);
		Исключения.Вставить("ТрудозатратыНезавершенногоПроизводства", Истина);
		Исключения.Вставить("АмортизацияОС", Истина);
		Исключения.Вставить("АмортизацияНМА", Истина);
		Исключения.Вставить("СтоимостьОС", Истина);
		Исключения.Вставить("СтоимостьНМА", Истина);
	КонецЕсли;
	
	Таблицы = Новый Структура;
	ИсточникиБаланса = Метаданные.Перечисления.ИсточникиУправленческогоБаланса;
	Для Каждого Источник Из ИсточникиБаланса.ЗначенияПеречисления Цикл
		Если Исключения[Источник.Имя] = Истина Тогда
			Продолжить;
		КонецЕсли;
		Таблицы.Вставить(Источник.Имя, Истина);
	КонецЦикла;
	Возврат Таблицы;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийУправленческогоБаланса

#Область СформироватьЗапросДвиженийАктивовПассивов

Функция ЗапросДвиженийНаправлений(Параметры)
	
	Запрос = Параметры.ЗапросДвижений;
	Запрос.УстановитьПараметр("ТекстыЗапросов", Новый Массив);
	
	ПервичныеДвижения = Параметры.ТаблицыДляДвижений;
	ЕстьРасчетыСКлиентамиПоДокументам = ЕстьРасчетыПоДокументам(ПервичныеДвижения, "РасчетыСКлиентами");
	ЕстьРасчетыСПоставщикамиПоДокументам = ЕстьРасчетыПоДокументам(ПервичныеДвижения, "РасчетыСПоставщиками");
	Для Каждого Движения Из ПервичныеДвижения Цикл
		
		ИмяТаблицы = Движения.Ключ;
		Если Лев(ИмяТаблицы, 7) = "Таблица" Тогда
			ИмяТаблицы = Прав(ИмяТаблицы, СтрДлина(ИмяТаблицы)-7);
		КонецЕсли;
		
		Если ИмяТаблицы = "ДенежныеСредстваБезналичные" Тогда
			ДобавитьТекстЗапросаДенежныеСредства(Запрос, Движения.Значение, "Безналичные");
			
		ИначеЕсли ИмяТаблицы = "ДенежныеСредстваНаличные" Тогда
			ДобавитьТекстЗапросаДенежныеСредства(Запрос, Движения.Значение, "Наличные");
			
		ИначеЕсли ИмяТаблицы = "ДенежныеСредстваВКассахККМ" Тогда
			ДобавитьТекстЗапросаДенежныеСредстваВКассахККМ(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ДенежныеСредстваВПути" Тогда
			ДобавитьТекстЗапросаДенежныеСредстваВПути(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ДенежныеСредстваУПодотчетныхЛиц" Тогда
			ДобавитьТекстЗапросаДенежныеСредстваУПодотчетныхЛиц(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "РасчетыСКлиентамиПоДокументам" Тогда
			ДобавитьТекстЗапросаРасчетыСПартнерамиПоДокументам(Запрос, Движения.Значение, "РасчетыСКлиентами");
			
		ИначеЕсли ИмяТаблицы = "РасчетыСКлиентами" И (НЕ ЕстьРасчетыСКлиентамиПоДокументам ИЛИ Параметры.ЗаполнениеРегистра) Тогда
			ДобавитьТекстЗапросаРасчетыСПартнерами(Запрос, Движения.Значение, "РасчетыСКлиентами");
			
		ИначеЕсли ИмяТаблицы = "РасчетыСПоставщикамиПоДокументам" Тогда
			ДобавитьТекстЗапросаРасчетыСПартнерамиПоДокументам(Запрос, Движения.Значение, "РасчетыСПоставщиками");
			
		ИначеЕсли ИмяТаблицы = "РасчетыСПоставщиками" И (НЕ ЕстьРасчетыСПоставщикамиПоДокументам ИЛИ Параметры.ЗаполнениеРегистра) Тогда
			ДобавитьТекстЗапросаРасчетыСПартнерами(Запрос, Движения.Значение, "РасчетыСПоставщиками");
		
		ИначеЕсли ИмяТаблицы = "РасчетыПоДоговорамКредитовИДепозитов" Тогда
			ДобавитьТекстЗапросаРасчетыПоКредитамДепозитамЗаймам(Запрос, Движения.Значение);
		
		ИначеЕсли ИмяТаблицы = "ПодарочныеСертификаты" Тогда
			ДобавитьТекстЗапросаПодарочныеСертификаты(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ПереданнаяВозвратнаяТара" Тогда
			ДобавитьТекстЗапросаПереданнаяВозвратнаяТара(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ПринятаяВозвратнаяТара" Тогда
			ДобавитьТекстЗапросаПринятаяВозвратнаяТара(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ПрочиеДоходы" Тогда
			ДобавитьТекстЗапросаПрочиеДоходы(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ПрочиеРасходы" Тогда
			ДобавитьТекстЗапросаПрочиеРасходы(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ПартииПрочихРасходов" Тогда
			ДобавитьТекстЗапросаПартииПрочихРасходов(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "СебестоимостьТоваров" Тогда
			ДобавитьТекстЗапросаСебестоимостьТоваров(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ТоварыКОформлениюОтчетовКомитенту" Тогда
			ДобавитьТекстЗапросаТоварыКОформлениюОтчетовКомитенту(Запрос, Движения.Значение);
			
		ИначеЕсли ИмяТаблицы = "ПрочиеАктивыПассивы" Тогда
			ДобавитьТекстЗапросаПрочиеАктивыПассивы(Запрос, Движения.Значение);
			
		КонецЕсли;
		
	КонецЦикла;// по таблицам первичных движений
	
	Возврат Запрос;
	
КонецФункции

#Область ТекстыЗапросовДвиженийПоРегистрам

// ДенежныеСредстваБезналичные
// ДенежныеСредстваНаличные
// ДенежныеСредстваВКассахККМ
Процедура ДобавитьТекстЗапросаДенежныеСредства(Запрос, ТаблицаДвижений, ТипДС)
	
	ИмяТаблицы = "ДенежныеСредства" + ТипДС;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса = 
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.БанковскийСчет КАК БанковскийСчет,
		|	Т.СуммаУпр КАК СуммаУпр
		|	
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.СуммаУпр <> 0";
		Если ТипДС = "Наличные" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "БанковскийСчет", "Касса");
		КонецЕсли;
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить("Первичные" + ИмяТаблицы);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	МестаХраненияДС.Подразделение КАК Подразделение,
	|	МестаХраненияДС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредстваБезналичные) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.СуммаУпр) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.СуммаУпр ИНАЧЕ Т.СуммаУпр КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник,
	|//	ЛОЖЬ КАК ПустоеНаправление,
	|	ВЫБОР КОГДА МестаХраненияДС.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустоеНаправление
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК МестаХраненияДС
	|	ПО Т.БанковскийСчет = МестаХраненияДС.Ссылка
	|ГДЕ
	|	Т.СуммаУпр <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Период,
	|	Т.Регистратор,
	|	Т.Организация,
	|	Т.ВидДвижения,
	|	МестаХраненияДС.Подразделение,
	|	МестаХраненияДС.НаправлениеДеятельности,
	|	Т.БанковскийСчет";
	
	Если ТипДС = "Наличные" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДенежныеСредстваБезналичные", "ДенежныеСредстваНаличные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "БанковскиеСчетаОрганизаций", "Кассы");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "БанковскийСчет", "Касса");
	КонецЕсли;
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ДенежныеСредстваВКассахККМ
Процедура ДобавитьТекстЗапросаДенежныеСредстваВКассахККМ(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса = 
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.КассаККМ КАК КассаККМ,
		|	Т.СуммаУпр КАК СуммаУпр
		|	
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.СуммаУпр <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	МестаХраненияДС.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредстваНаличные) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.СуммаУпр) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.СуммаУпр ИНАЧЕ Т.СуммаУпр КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник,
	|	ИСТИНА КАК ПустоеНаправление
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК МестаХраненияДС
	|	ПО Т.КассаККМ = МестаХраненияДС.Ссылка
	|ГДЕ
	|	Т.СуммаУпр <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Период,
	|	Т.Регистратор,
	|	Т.Организация,
	|	Т.ВидДвижения,
	|	МестаХраненияДС.Подразделение,
	|	Т.КассаККМ";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ДенежныеСредстваВПути
Процедура ДобавитьТекстЗапросаДенежныеСредстваВПути(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ДенежныеСредстваВПути.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.Получатель КАК Получатель,
		|	Т.СуммаУпр КАК СуммаУпр
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.СуммаУпр <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
		
	Иначе
		ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Получатель) = ТИП(Справочник.БанковскиеСчетаОрганизаций)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Т.Получатель КАК Справочник.БанковскиеСчетаОрганизаций).Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Получатель) = ТИП(Справочник.Кассы)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Т.Получатель КАК Справочник.Кассы).Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Получатель) = ТИП(Справочник.БанковскиеСчетаОрганизаций)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Т.Получатель КАК Справочник.БанковскиеСчетаОрганизаций).НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Получатель) = ТИП(Справочник.Кассы)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Т.Получатель КАК Справочник.Кассы).НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредстваВПути) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.СуммаУпр) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.СуммаУпр ИНАЧЕ Т.СуммаУпр КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|ГДЕ
	|	Т.СуммаУпр <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Организация,
	|	Т.Получатель";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ДенежныеСредстваУПодотчетныхЛиц
Процедура ДобавитьТекстЗапросаДенежныеСредстваУПодотчетныхЛиц(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.Подразделение КАК Подразделение,
		|	Т.СуммаУпр КАК СуммаУпр
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.СуммаУпр <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредстваУПодотчетныхЛиц) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.СуммаУпр) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.СуммаУпр ИНАЧЕ Т.СуммаУпр КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|ГДЕ
	|	Т.СуммаУпр <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Организация,
	|	Т.Подразделение";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// РасчетыСКлиентами
// РасчетыСПоставщиками
Процедура ДобавитьТекстЗапросаРасчетыСПартнерами(Запрос, ТаблицаДвижений, ТипРасчетов)
	
	ЕстьРасчетыПоДокументам = Запрос.Параметры.ТаблицыДвиженийНаправлений.Найти(ТипРасчетов+"ПоДокументам") <> Неопределено;
	Если ЕстьРасчетыПоДокументам И НЕ Запрос.Параметры.ЗаполнениеРегистра Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ТипРасчетов;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	ТипыОбъектовРасчета = "ОпределяемыеТипы.ОбъектРасчетовСКлиентами";
	Если ТипРасчетов = "РасчетыСПоставщиками" Тогда
		ТипыОбъектовРасчета = "ОпределяемыеТипы.ОбъектРасчетовСПоставщиками";
	КонецЕсли;
	ПолеПодразделения = ТекстЗапросаРеквизитаОбъектаРасчетов("Т.ЗаказКлиента", "Подразделение", ТипыОбъектовРасчета);
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Т.ЗаказКлиента КАК ЗаказКлиента,
		|	Т.СуммаУпр КАК СуммаУпр
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.СуммаУпр <> 0";
		
		Если ТипРасчетов = "РасчетыСПоставщиками" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", "ЗаказПоставщику");
			ТипыОбъектовРасчета = ТаблицаДвижений.Колонки.ЗаказПоставщику.ТипЗначения.Типы();
		Иначе
			ТипыОбъектовРасчета = ТаблицаДвижений.Колонки.ЗаказКлиента.ТипЗначения.Типы();
		КонецЕсли;
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		ПолеПодразделения = ТекстЗапросаРеквизитаОбъектаРасчетов("Т.ЗаказКлиента", "Подразделение", ТипыОбъектовРасчета);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	АналитикаПартнеров.Организация КАК Организация,
	|	&ОбъектРасчетовПодразделение КАК Подразделение,
	|	АналитикаПартнеров.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ЗадолженностьКлиентов) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.СуммаУпр) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.СуммаУпр ИНАЧЕ Т.СуммаУпр КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетыСПартнерами) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПартнеров
	|	ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|	//&РасчетыПоДокументам
	|ГДЕ
	|	Т.СуммаУпр <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Период,
	|	Т.Регистратор,
	|	АналитикаПартнеров.Организация,
	|	Т.ВидДвижения,
	|	&ОбъектРасчетовПодразделение,
	|	АналитикаПартнеров.НаправлениеДеятельности";
	
	Если Запрос.Параметры.ЗаполнениеРегистра Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"//&РасчетыПоДокументам",
						"ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыПоДокументам
						|	ПО Т.Регистратор = РасчетыПоДокументам.Регистратор");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"//&Отбор",
						"И РасчетыПоДокументам.Регистратор ЕСТЬ NULL
						|	//&Отбор");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//&РасчетыПоДокументам","");
	КонецЕсли;
	
	Если ТипРасчетов = "РасчетыСПоставщиками" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСКлиентами", "РасчетыСПоставщиками");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", "ЗаказПоставщику");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗадолженностьКлиентов", "ЗадолженностьПередПоставщиками");
		ПолеПодразделения = СтрЗаменить(ПолеПодразделения, "ЗаказКлиента", "ЗаказПоставщику");
	КонецЕсли;
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса, "АналитикаПартнеров.Организация");
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектРасчетовПодразделение", ПолеПодразделения);
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// РасчетыСКлиентамиПоДокументам
// РасчетыСПоставщикамиПоДокументам
Процедура ДобавитьТекстЗапросаРасчетыСПартнерамиПоДокументам(Запрос, ТаблицаДвижений, ТипРасчетов)
	
	ИмяТаблицы = ТипРасчетов + "ПоДокументам";
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	ТипыОбъектовРасчета = "ОпределяемыеТипы.ОбъектРасчетовСКлиентами";
	Если ТипРасчетов = "РасчетыСПоставщиками" Тогда
		ТипыОбъектовРасчета = "ОпределяемыеТипы.ОбъектРасчетовСПоставщиками";
	КонецЕсли;
	ПолеПодразделения = ТекстЗапросаРеквизитаОбъектаРасчетов("Т.ЗаказКлиента", "Подразделение", ТипыОбъектовРасчета);
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Т.ЗаказКлиента КАК ЗаказКлиента,
		|	Т.ДолгУпр КАК ДолгУпр,
		|	Т.ПредоплатаУпр КАК ПредоплатаУпр
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.ДолгУпр <> 0 ИЛИ Т.ПредоплатаУпр <> 0";
		
		Если ТипРасчетов = "РасчетыСПоставщиками" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", "ЗаказПоставщику");
			ТипыОбъектовРасчета = ТаблицаДвижений.Колонки.ЗаказПоставщику.ТипЗначения.Типы();
		Иначе
			ТипыОбъектовРасчета = ТаблицаДвижений.Колонки.ЗаказКлиента.ТипЗначения.Типы();
		КонецЕсли;
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		ПолеПодразделения = ТекстЗапросаРеквизитаОбъектаРасчетов("Т.ЗаказКлиента", "Подразделение", ТипыОбъектовРасчета);
		
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	АналитикаПартнеров.Организация КАК Организация,
	|	&ОбъектРасчетовПодразделение КАК Подразделение,
	|	АналитикаПартнеров.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА АналитикаПартнеров.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ТОГДА &СтатьяДолгаСобственныхОрганизаций
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ЗадолженностьКлиентов)
	|	КОНЕЦ КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.ДолгУпр) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.ДолгУпр ИНАЧЕ Т.ДолгУпр КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетыСПартнерами) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПартнеров
	|	ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|ГДЕ
	|	Т.ДолгУпр <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Период,
	|	Т.Регистратор,
	|	АналитикаПартнеров.Организация,
	|	Т.ВидДвижения,
	|	&ОбъектРасчетовПодразделение,
	|	АналитикаПартнеров.НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА АналитикаПартнеров.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ТОГДА &СтатьяДолгаСобственныхОрганизаций
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ЗадолженностьКлиентов)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	АналитикаПартнеров.Организация КАК Организация,
	|	&ОбъектРасчетовПодразделение КАК Подразделение,
	|	АналитикаПартнеров.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА АналитикаПартнеров.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ТОГДА &СтатьяПредоплатыСобственныхОрганизаций
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПолученныеАвансы)
	|	КОНЕЦ КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.ПредоплатаУпр) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.ПредоплатаУпр ИНАЧЕ Т.ПредоплатаУпр КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетыСПартнерами) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПартнеров
	|	ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|ГДЕ
	|	Т.ПредоплатаУпр <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Период,
	|	Т.Регистратор,
	|	АналитикаПартнеров.Организация,
	|	Т.ВидДвижения,
	|	&ОбъектРасчетовПодразделение,
	|	АналитикаПартнеров.НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА АналитикаПартнеров.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ТОГДА &СтатьяПредоплатыСобственныхОрганизаций
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПолученныеАвансы)
	|	КОНЕЦ";
	
	СтатьяДолгаСобственныхОрганизаций = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗадолженностьСобственныхОрганизаций;
	СтатьяПредоплатыСобственныхОрганизаций = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОбязательстваПередСобственнымиОрганизациями;
	Если ТипРасчетов = "РасчетыСПоставщиками" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗадолженностьКлиентов", "ЗадолженностьПередПоставщиками");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолученныеАвансы", "ВыданныеАвансы");
		ПолеПодразделения = СтрЗаменить(ПолеПодразделения, "ЗаказКлиента", "ЗаказПоставщику");
		СтатьяДолгаСобственныхОрганизаций = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОбязательстваПередСобственнымиОрганизациями;
		СтатьяПредоплатыСобственныхОрганизаций = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗадолженностьСобственныхОрганизаций;
	КонецЕсли;
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса, "АналитикаПартнеров.Организация");
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектРасчетовПодразделение", ПолеПодразделения);
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("СтатьяДолгаСобственныхОрганизаций", СтатьяДолгаСобственныхОрганизаций);
	Запрос.УстановитьПараметр("СтатьяПредоплатыСобственныхОрганизаций", СтатьяПредоплатыСобственныхОрганизаций);
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// РасчетыПоДоговорамКредитовИДепозитов
Процедура ДобавитьТекстЗапросаРасчетыПоКредитамДепозитамЗаймам(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.РасчетыПоДоговорамКредитовИДепозитов.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Т.Договор КАК Договор,
		|	Т.СуммаУпр КАК СуммаУпр
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.СуммаУпр <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	ДанныеДоговора.Организация КАК Организация,
	|	ДанныеДоговора.Подразделение КАК Подразделение,
	|	ДанныеДоговора.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДоговора.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ЗадолженностьПоКредитам)
	|		КОГДА ДанныеДоговора.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.Депозит)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДепозитыВБанках)
	|		КОГДА ДанныеДоговора.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ЗаймыВыданные)
	|	КОНЕЦ КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.СуммаУпр) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.СуммаУпр ИНАЧЕ Т.СуммаУпр КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
	|	ПО Т.Договор = ДанныеДоговора.Ссылка
	|ГДЕ
	|	Т.СуммаУпр <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Период,
	|	Т.Регистратор,
	|	ДанныеДоговора.Организация,
	|	Т.ВидДвижения,
	|	ДанныеДоговора.ХарактерДоговора,
	|	ДанныеДоговора.Подразделение,
	|	ДанныеДоговора.НаправлениеДеятельности";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса, "ДанныеДоговора.Организация");
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ПодарочныеСертификаты
Процедура ДобавитьТекстЗапросаПодарочныеСертификаты(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ПодарочныеСертификаты.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Сумма КАК Сумма
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.Сумма <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	Т.Регистратор.Организация КАК Организация,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА Т.Сумма ИНАЧЕ -Т.Сумма КОНЕЦ) КАК СуммаБаланса
	|
	|ПОМЕСТИТЬ втДанныеРегистраПодарочныеСертификаты
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|ГДЕ
	|	Т.Сумма <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Регистратор.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	|	КурсыВалютУпр.Валюта КАК ВалютаУпр,
	|	МАКСИМУМ(КурсыВалютУпр.Период) КАК ПериодУпр
	|ПОМЕСТИТЬ втПериодыПодарочныеСертификаты
	|ИЗ
	|	втДанныеРегистраПодарочныеСертификаты КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Т.Валюта = КурсыВалют.Валюта
	|		И Т.Период >= КурсыВалют.Период
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		И Т.Период >= КурсыВалютУпр.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	КурсыВалют.Валюта,
	|	КурсыВалютУпр.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Регистратор КАК Регистратор,
	|	Периоды.Период КАК Период,
	|	Периоды.Валюта КАК Валюта,
	|	ЕСТЬNULL(КурсыВалют.Курс, 0) / ЕСТЬNULL(КурсыВалют.Кратность, 1)* ЕСТЬNULL(КурсыВалютУпр.Кратность, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КоэффициентУпр,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК КурсВалюты,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК КратностьВалюты,
	|	&ВалютаУправленческогоУчета КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КурсВалютыУпр,
	|	ЕСТЬNULL(КурсыВалютУпр.Кратность, 1) КАК КратностьВалютыУпр
	|ПОМЕСТИТЬ втКурсыВалютПодарочныеСертификаты
	|ИЗ
	|	втПериодыПодарочныеСертификаты КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Периоды.Валюта = КурсыВалют.Валюта
	|		И Периоды.Период = КурсыВалют.Период
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		И Периоды.ПериодУпр = КурсыВалютУпр.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПолученныеАвансы) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	ВЫРАЗИТЬ(Т.Сумма * КурсыВалют.КоэффициентУпр КАК ЧИСЛО(15,2)) КАК Сумма,
	|	ВЫРАЗИТЬ(Т.СуммаБаланса * КурсыВалют.КоэффициентУпр КАК ЧИСЛО(15,2)) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	втДанныеРегистраПодарочныеСертификаты КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсыВалютПодарочныеСертификаты КАК КурсыВалют
	|	ПО Т.Регистратор = КурсыВалют.Регистратор";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса, "Т.Регистратор.Организация");
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить("втДанныеРегистраПодарочныеСертификаты");
	Запрос.Параметры.ВсеТаблицы.Добавить("втПериодыПодарочныеСертификаты");
	Запрос.Параметры.ВсеТаблицы.Добавить("втКурсыВалютПодарочныеСертификаты");
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры
 
// ПереданнаяВозвратнаяТара
Процедура ДобавитьТекстЗапросаПереданнаяВозвратнаяТара(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.ДокументПередачи КАК ДокументПередачи,
		|	Т.ВидЗапасов КАК ВидЗапасов,
		|	Т.ПредусмотренЗалог КАК ПредусмотренЗалог,
		|	Т.Сумма КАК Сумма
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.Сумма <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.ДокументПередачи.Валюта КАК Валюта,
	|	Т.ДокументПередачи.Организация КАК Организация,
	|	ЕСТЬNULL(Т.ДокументПередачи.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(Т.ДокументПередачи.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.Сумма ИНАЧЕ Т.Сумма КОНЕЦ) КАК СуммаБаланса
	|
	|ПОМЕСТИТЬ втДанныеРегистраПереданнаяТара
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|ГДЕ
	|	Т.Сумма <> 0
	|	И НЕ Т.ПредусмотренЗалог
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.ДокументПередачи.Валюта,
	|	Т.ДокументПередачи.Организация,
	|	ЕСТЬNULL(Т.ДокументПередачи.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)),
	|	ЕСТЬNULL(Т.ДокументПередачи.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	|	КурсыВалютУпр.Валюта КАК ВалютаУпр,
	|	МАКСИМУМ(КурсыВалютУпр.Период) КАК ПериодУпр
	|ПОМЕСТИТЬ втПериодыПереданнаяТара
	|ИЗ
	|	втДанныеРегистраПереданнаяТара КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Т.Валюта = КурсыВалют.Валюта
	|		И Т.Период >= КурсыВалют.Период
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		И Т.Период >= КурсыВалютУпр.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	КурсыВалют.Валюта,
	|	КурсыВалютУпр.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Регистратор КАК Регистратор,
	|	Периоды.Период КАК Период,
	|	Периоды.Валюта КАК Валюта,
	|	ЕСТЬNULL(КурсыВалют.Курс, 0) / ЕСТЬNULL(КурсыВалют.Кратность, 1)* ЕСТЬNULL(КурсыВалютУпр.Кратность, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КоэффициентУпр,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК КурсВалюты,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК КратностьВалюты,
	|	&ВалютаУправленческогоУчета КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КурсВалютыУпр,
	|	ЕСТЬNULL(КурсыВалютУпр.Кратность, 1) КАК КратностьВалютыУпр
	|ПОМЕСТИТЬ втКурсыВалютПереданнаяТара
	|ИЗ
	|	втПериодыПереданнаяТара КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Периоды.Валюта = КурсыВалют.Валюта
	|		И Периоды.Период = КурсыВалют.Период
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		И Периоды.ПериодУпр = КурсыВалютУпр.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ЗадолженностьКлиентов) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	ВЫРАЗИТЬ(Т.Сумма * КурсыВалют.КоэффициентУпр КАК ЧИСЛО(15,2)) КАК Сумма,
	|	ВЫРАЗИТЬ(Т.СуммаБаланса * КурсыВалют.КоэффициентУпр КАК ЧИСЛО(15,2)) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	втДанныеРегистраПереданнаяТара КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсыВалютПереданнаяТара КАК КурсыВалют
	|	ПО Т.Регистратор = КурсыВалют.Регистратор";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса, "Т.ДокументПередачи.Организация");
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить("втДанныеРегистраПереданнаяТара");
	Запрос.Параметры.ВсеТаблицы.Добавить("втПериодыПереданнаяТара");
	Запрос.Параметры.ВсеТаблицы.Добавить("втКурсыВалютПереданнаяТара");
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ПринятаяВозвратнаяТара
Процедура ДобавитьТекстЗапросаПринятаяВозвратнаяТара(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ПринятаяВозвратнаяТара.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.ДокументПоступления КАК ДокументПоступления,
		|	Т.ПредусмотренЗалог КАК ПредусмотренЗалог,
		|	Т.Сумма КАК Сумма
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.Сумма <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.ДокументПоступления.Валюта КАК Валюта,
	|	Т.ДокументПоступления.Организация КАК Организация,
	|	Т.ДокументПоступления.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.ДокументПоступления) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			ТОГДА ВЫРАЗИТЬ(Т.ДокументПоступления КАК Документ.ПриобретениеТоваровУслуг).НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА Т.Сумма ИНАЧЕ -Т.Сумма КОНЕЦ) КАК СуммаБаланса
	|
	|ПОМЕСТИТЬ втДанныеРегистраПринятаяТара
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|ГДЕ
	|	Т.Сумма <> 0
	|	И НЕ Т.ПредусмотренЗалог
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.ДокументПоступления.Валюта,
	|	Т.ДокументПоступления.Организация,
	|	Т.ДокументПоступления.Подразделение,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.ДокументПоступления) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			ТОГДА ВЫРАЗИТЬ(Т.ДокументПоступления КАК Документ.ПриобретениеТоваровУслуг).НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	|	КурсыВалютУпр.Валюта КАК ВалютаУпр,
	|	МАКСИМУМ(КурсыВалютУпр.Период) КАК ПериодУпр
	|ПОМЕСТИТЬ втПериодыПринятаяТара
	|ИЗ
	|	втДанныеРегистраПринятаяТара КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Т.Валюта = КурсыВалют.Валюта
	|		И Т.Период >= КурсыВалют.Период
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		И Т.Период >= КурсыВалютУпр.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	КурсыВалют.Валюта,
	|	КурсыВалютУпр.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Регистратор КАК Регистратор,
	|	Периоды.Период КАК Период,
	|	Периоды.Валюта КАК Валюта,
	|	ЕСТЬNULL(КурсыВалют.Курс, 0) / ЕСТЬNULL(КурсыВалют.Кратность, 1)* ЕСТЬNULL(КурсыВалютУпр.Кратность, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КоэффициентУпр,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК КурсВалюты,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК КратностьВалюты,
	|	&ВалютаУправленческогоУчета КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КурсВалютыУпр,
	|	ЕСТЬNULL(КурсыВалютУпр.Кратность, 1) КАК КратностьВалютыУпр
	|ПОМЕСТИТЬ втКурсыВалютПринятаяТара
	|ИЗ
	|	втПериодыПринятаяТара КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Периоды.Валюта = КурсыВалют.Валюта
	|		И Периоды.Период = КурсыВалют.Период
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		И Периоды.ПериодУпр = КурсыВалютУпр.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ЗадолженностьКлиентов) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	ВЫРАЗИТЬ(Т.Сумма * КурсыВалют.КоэффициентУпр КАК ЧИСЛО(15,2)) КАК Сумма,
	|	ВЫРАЗИТЬ(Т.СуммаБаланса * КурсыВалют.КоэффициентУпр КАК ЧИСЛО(15,2)) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	втДанныеРегистраПринятаяТара КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсыВалютПринятаяТара КАК КурсыВалют
	|	ПО Т.Регистратор = КурсыВалют.Регистратор";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса, "Т.ДокументПоступления.Организация");
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить("втДанныеРегистраПринятаяТара");
	Запрос.Параметры.ВсеТаблицы.Добавить("втПериодыПринятаяТара");
	Запрос.Параметры.ВсеТаблицы.Добавить("втКурсыВалютПринятаяТара");
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ПрочиеДоходы
Процедура ДобавитьТекстЗапросаПрочиеДоходы(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.Подразделение КАК Подразделение,
		|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Т.Сумма КАК Сумма
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.Сумма <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДоходыТекущегоПериода) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА -Т.Сумма ИНАЧЕ Т.Сумма КОНЕЦ) КАК СуммаБаланса,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетыСПартнерами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости)
	|	КОНЕЦ КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|ГДЕ
	|	Т.Сумма <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.НаправлениеДеятельности";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ПрочиеРасходы
Процедура ДобавитьТекстЗапросаПрочиеРасходы(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.Подразделение КАК Подразделение,
		|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Т.СтатьяРасходов КАК СтатьяРасходов,
		|	Т.АналитикаРасходов КАК АналитикаРасходов,
		|	Т.Сумма КАК Сумма,
		|	Т.СуммаУпр КАК СуммаУпр
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.Сумма <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасходыБудущихПериодов)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасходыТекущегоПериода)
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И &ИспользоватьВНА2_4 И Т.Период >= &ДатаНачалаУчетаВНА2_4 // Учет ОС версия 2.4
	|			ТОГДА Т.АналитикаРасходов
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка)
	|	КОНЕЦ КАК Аналитика,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.Сумма ИНАЧЕ Т.Сумма КОНЕЦ) КАК СуммаБаланса,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетыСПартнерами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости)
	|	КОНЕЦ КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО Т.СтатьяРасходов = СтатьиРасходов.Ссылка
	|ГДЕ
	|	Т.Сумма <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.НаправлениеДеятельности,
	|	Т.АналитикаРасходов,
	|	СтатьиРасходов.ВариантРаспределенияРасходовУпр
	|";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ПартииПрочихРасходов
Процедура ДобавитьТекстЗапросаПартииПрочихРасходов(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.Подразделение КАК Подразделение,
		|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Т.Стоимость КАК Стоимость
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.Стоимость <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасходыТекущегоПериода) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.Стоимость) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.Стоимость ИНАЧЕ Т.Стоимость КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|ГДЕ
	|	Т.Стоимость <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.НаправлениеДеятельности";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// СебестоимостьТоваров
Процедура ДобавитьТекстЗапросаСебестоимостьТоваров(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.ВидЗапасов КАК ВидЗапасов,
		|	Т.КорВидЗапасов КАК КорВидЗапасов,
		|	Т.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
		|	Т.РазделУчета КАК РазделУчета,
		|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Т.Стоимость КАК Стоимость,
		|	Т.ДопРасходы КАК ДопРасходы,
		|	Т.Трудозатраты КАК Трудозатраты,
		|	Т.ПостатейныеПостоянныеСНДС КАК ПостатейныеПостоянныеСНДС
		|
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.Стоимость + Т.ДопРасходы + Т.Трудозатраты + Т.ПостатейныеПостоянныеСНДС <> 0";
		
		ПервичныеДвижения = "Первичная" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.СтруктураПредприятия)
	|			ТОГДА Аналитика.Склад
	|		КОГДА ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.Склады)
	|			ТОГДА Аналитика.Склад.Подразделение
	|		КОГДА ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.Партнеры)
	|			ТОГДА КорВидыЗапасов.Договор.Подразделение
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|			И Т.КорНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА Т.КорНаправлениеДеятельности
	|		КОГДА ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.Партнеры)
	|			ТОГДА КорВидыЗапасов.Договор.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) 
	|				И Аналитика.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыВРознице)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) 
	|				И Аналитика.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыНаОптовыхСкладах)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) 
	|				И ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.Партнеры) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыКОформлениюОтчетовКомитенту)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасходыТекущегоПериода)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеПереработчику) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыПереданныеВПереработку)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасходыТекущегоПериода)
	|
	|		КОГДА Т.РазделУчета В (
	|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути),
	|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути)) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыВПути)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НеотфактурованныеПоставки)
	|
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыПереданныеНаКомиссию)
	|	КОНЕЦ КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	СУММА(Т.Стоимость + Т.ДопРасходы + Т.Трудозатраты + Т.ПостатейныеПостоянныеСНДС) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -(Т.Стоимость + Т.ДопРасходы + Т.Трудозатраты + Т.ПостатейныеПостоянныеСНДС) ИНАЧЕ (Т.Стоимость + Т.ДопРасходы + Т.Трудозатраты + Т.ПостатейныеПостоянныеСНДС) КОНЕЦ) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО Т.ВидЗапасов = ВидыЗапасов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК КорВидыЗапасов
	|	ПО Т.КорВидЗапасов = КорВидыЗапасов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Т.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|	ПО Аналитика.Назначение = Назначения.Ссылка
	|ГДЕ
	|	НЕ Т.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию),
	|						ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку),
	|						ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение))
	|	И (Т.Стоимость + Т.ДопРасходы + Т.Трудозатраты + Т.ПостатейныеПостоянныеСНДС) <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Организация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.СтруктураПредприятия)
	|			ТОГДА Аналитика.Склад
	|		КОГДА ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.Склады)
	|			ТОГДА Аналитика.Склад.Подразделение
	|		КОГДА ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.Партнеры)
	|			ТОГДА КорВидыЗапасов.Договор.Подразделение
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|			И Т.КорНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА Т.КорНаправлениеДеятельности
	|		КОГДА ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.Партнеры)
	|			ТОГДА КорВидыЗапасов.Договор.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) 
	|					И Аналитика.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыВРознице)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) 
	|				И Аналитика.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыНаОптовыхСкладах)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) 
	|				И ТИПЗНАЧЕНИЯ(Аналитика.Склад) = ТИП(Справочник.Партнеры) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыКОформлениюОтчетовКомитенту)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасходыТекущегоПериода)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеПереработчику) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыПереданныеВПереработку)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасходыТекущегоПериода)
	|
	|		КОГДА Т.РазделУчета В (
	|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути),
	|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути)) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыВПути)
	|
	|		КОГДА Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки) ТОГДА
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НеотфактурованныеПоставки)
	|
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыПереданныеНаКомиссию)
	|	КОНЕЦ";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ТоварыКОформлениюОтчетовКомитенту
Процедура ДобавитьТекстЗапросаТоварыКОформлениюОтчетовКомитенту(Запрос, ТаблицаДвижений)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Валюта КАК Валюта,
		|	Т.ВидЗапасов КАК ВидЗапасов,
		|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Т.СуммаВыручки КАК СуммаВыручки
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.СуммаВыручки <> 0";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Валюта КАК Валюта,
	|	ЕСТЬNULL(ВидыЗапасов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(Договор.Подразделение, ЕСТЬNULL(ДоговорыИнтеркампани.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))) КАК Подразделение,
	|	ЕСТЬNULL(Договор.НаправлениеДеятельности, ЕСТЬNULL(ДоговорыИнтеркампани.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|	СУММА(Т.СуммаВыручки) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА Т.СуммаВыручки ИНАЧЕ -Т.СуммаВыручки КОНЕЦ) КАК СуммаБаланса
	|
	|ПОМЕСТИТЬ втДанныеРегистраТоварыКОформлению
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО Т.ВидЗапасов = ВидыЗапасов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Т.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ВидыЗапасов.Договор = Договоры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыИнтеркампани
	|	ПО ВидыЗапасов.Договор = ДоговорыИнтеркампани.Ссылка
	|ГДЕ
	|	Т.СуммаВыручки <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Валюта,
	|	ВидыЗапасов.Организация,
	|	ЕСТЬNULL(Договор.Подразделение, ЕСТЬNULL(ДоговорыИнтеркампани.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))),
	|	ЕСТЬNULL(Договор.НаправлениеДеятельности, ЕСТЬNULL(ДоговорыИнтеркампани.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	|	КурсыВалютУпр.Валюта КАК ВалютаУпр,
	|	МАКСИМУМ(КурсыВалютУпр.Период) КАК ПериодУпр
	|ПОМЕСТИТЬ втПериодыТоварыКОформлению
	|ИЗ
	|	втДанныеРегистраТоварыКОформлению КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Т.Валюта = КурсыВалют.Валюта
	|		И Т.Период >= КурсыВалют.Период
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		И Т.Период >= КурсыВалютУпр.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	КурсыВалют.Валюта,
	|	КурсыВалютУпр.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Регистратор КАК Регистратор,
	|	Периоды.Период КАК Период,
	|	Периоды.Валюта КАК Валюта,
	|	ЕСТЬNULL(КурсыВалют.Курс, 0) / ЕСТЬNULL(КурсыВалют.Кратность, 1)* ЕСТЬNULL(КурсыВалютУпр.Кратность, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КоэффициентУпр,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК КурсВалюты,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК КратностьВалюты,
	|	&ВалютаУправленческогоУчета КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КурсВалютыУпр,
	|	ЕСТЬNULL(КурсыВалютУпр.Кратность, 1) КАК КратностьВалютыУпр
	|ПОМЕСТИТЬ втКурсыВалютТоварыКОформлению
	|ИЗ
	|	втПериодыТоварыКОформлению КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Периоды.Валюта = КурсыВалют.Валюта
	|		И Периоды.Период = КурсыВалют.Период
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		И Периоды.ПериодУпр = КурсыВалютУпр.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ТоварыКОформлениюОтчетовКомитенту) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка) КАК Аналитика,
	|	ВЫРАЗИТЬ(Т.Сумма * КурсыВалют.КоэффициентУпр КАК ЧИСЛО(15,2)) КАК Сумма,
	|	ВЫРАЗИТЬ(Т.СуммаБаланса * КурсыВалют.КоэффициентУпр КАК ЧИСЛО(15,2)) КАК СуммаБаланса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса) КАК ВидИсточника,
	|	&Источник КАК Источник
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	втДанныеРегистраТоварыКОформлению КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсыВалютТоварыКОформлению КАК КурсыВалют
	|	ПО Т.Регистратор = КурсыВалют.Регистратор";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтбор(Запрос, ТекстЗапроса, "ВидыЗапасов.Организация");
	ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить("втДанныеРегистраТоварыКОформлению");
	Запрос.Параметры.ВсеТаблицы.Добавить("втПериодыТоварыКОформлению");
	Запрос.Параметры.ВсеТаблицы.Добавить("втКурсыВалютТоварыКОформлению");
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецПроцедуры

// ПрочиеАктивыПассивы
Функция ДобавитьТекстЗапросаПрочиеАктивыПассивы(Запрос, ТаблицаДвижений, ТолькоДС = Ложь)
	
	ИмяТаблицы = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя;
	ПервичныеДвижения = "РегистрНакопления."+ИмяТаблицы;
	
	Если ТипЗнч(ТаблицаДвижений) = Тип("Строка") Тогда
		ПервичныеДвижения = ТаблицаДвижений;
	ИначеЕсли ТипЗнч(ТаблицаДвижений) = Тип("ТаблицаЗначений") Тогда
	
		Если ТаблицаДвижений.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		ТекстЗапроса =
		"// ПервичныеДвижения
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор,
		|	Т.ВидДвижения КАК ВидДвижения,
		|	Т.Период КАК Период,
		|	Т.Организация КАК Организация,
		|	Т.Подразделение КАК Подразделение,
		|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Т.Статья КАК Статья,
		|	Т.Аналитика КАК Аналитика,
		|	Т.Сумма КАК Сумма,
		|	Т.ВидИсточника КАК ВидИсточника,
		|	Т.Источник КАК Источник
		|ПОМЕСТИТЬ ПервичныеДвижения
		|ИЗ
		|	&ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.Сумма <> 0
		|	И Т.ВидИсточника = ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ПустаяСсылка)";
		
		ПервичныеДвижения = "Первичные" + ИмяТаблицы;
		ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения);
		Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр(ИмяТаблицы, ТаблицаДвижений);
		Запрос.Параметры.ВсеТаблицы.Добавить(ПервичныеДвижения);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"// ИмяТаблицы
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Т.Статья КАК Статья,
	|	Т.Аналитика КАК Аналитика,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Т.Сумма ИНАЧЕ Т.Сумма КОНЕЦ) КАК СуммаБаланса,
	|	Т.ВидИсточника КАК ВидИсточника,
	|	Т.Источник КАК Источник,
	|	ВЫБОР КОГДА Т.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустоеНаправление
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ПервичныеДвижения КАК Т
	|ГДЕ
	|	Т.Сумма <> 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.ВидДвижения,
	|	Т.Период,
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.НаправлениеДеятельности,
	|	Т.Статья,
	|	Т.Аналитика,
	|	Т.ВидИсточника,
	|	Т.Источник";
	
	ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения);
	ДобавитьОтборАктивовПассивов(Запрос, ТекстЗапроса, ТолькоДС);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПервичныеДвижения", ПервичныеДвижения);
	Если ТолькоДС Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Параметры.ТаблицыДвиженийНаправлений.Добавить(ИмяТаблицы);
	Запрос.Параметры.ВсеТаблицы.Добавить(ИмяТаблицы);
	
КонецФункции

#КонецОбласти

Процедура ДобавитьТекстЗапросаВременныхТаблицКонтроляБаланса(Запрос)
	
	ШаблонЗапросаКонтроляБаланса =
	"// ИсходнаяТаблицаКонтроляБаланса_%1
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Т.Статья КАК Статья,
	|	Т.Аналитика КАК Аналитика,
	|	Т.Сумма КАК Сумма,
	|	Т.СуммаБаланса КАК СуммаБаланса,
	|	Т.ВидИсточника КАК ВидИсточника,
	|	ЗНАЧЕНИЕ(Перечисление.ИсточникиУправленческогоБаланса.%2) КАК Источник
	|ИЗ
	|	%1 КАК Т";
	ТекстыЗапросовНаправлений = Новый Массив;
	Для Каждого ИмяТаблицы Из Запрос.Параметры.ТаблицыДвиженийНаправлений Цикл
		Источник = Запрос.Параметры.ИсточникВременнойТаблицы[ИмяТаблицы];
		Если Источник = Неопределено Тогда
			Источник = ИмяТаблицы;
		КонецЕсли;
		ТекстЗапроса = СтрШаблон(ШаблонЗапросаКонтроляБаланса, ИмяТаблицы, Источник);
		Если ТекстыЗапросовНаправлений.Количество() = 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЗ", "ПОМЕСТИТЬ ДвиженияНаправлений" + Символы.ПС + "ИЗ");
		КонецЕсли;
		ТекстыЗапросовНаправлений.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	ОбъединитьВсе = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстЗапросаДвижений = СтрСоединить(ТекстыЗапросовНаправлений, ОбъединитьВсе);
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапросаДвижений);
	Запрос.Параметры.ВсеТаблицы.Добавить("ДвиженияНаправлений");
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаДвиженийАктивовПассивов(Запрос)
	
	ТекстЗапросаДвиженияАктивовПассивов = 
	"ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	Т.ВидДвижения КАК ВидДвижения,
	|	Т.Период КАК Период,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Т.Статья КАК Статья,
	|	Т.Аналитика КАК Аналитика,
	|	Т.Сумма КАК Сумма,
	|	Т.ВидИсточника КАК ВидИсточника,
	|	Т.Источник КАК Источник,
	|	Т.Регистратор КАК ДокументДвижения
	|//ПОМЕСТИТЬ
	|ИЗ
	|	ДвиженияНаправлений КАК Т
	|ГДЕ
	|	&Отбор";
		
	Если Запрос.Параметры.ВыборкаПоРегистратору Тогда
		ТекстЗапросаДвиженияАктивовПассивов = ТекстЗапросаДвиженияАктивовПассивов + 
		"
		|
		|ИТОГИ ПО
		|	Регистратор
		|";
	КонецЕсли;
	
	ТаблицаРезультата = "";
	Если ЗначениеЗаполнено(Запрос.Параметры.ИмяВременнойТаблицыРезультата) Тогда
		ТаблицаРезультата = "ПОМЕСТИТЬ " + Запрос.Параметры.ИмяВременнойТаблицыРезультата;
		ТекстЗапросаДвиженияАктивовПассивов = ТекстЗапросаДвиженияАктивовПассивов + РазделительЗапросов();
	КонецЕсли;
	ТекстЗапросаДвиженияАктивовПассивов = СтрЗаменить(ТекстЗапросаДвиженияАктивовПассивов, "//ПОМЕСТИТЬ", ТаблицаРезультата);
	
	ЗаполнениеРегистра = Запрос.Параметры.ЗаполнениеРегистра;
	Если ЗначениеЗаполнено(Запрос.Параметры.ВидОтложенногоРасчета) И НЕ ЗаполнениеРегистра Тогда
		ТекстЗапросаДвиженияАктивовПассивов = СтрЗаменить(ТекстЗапросаДвиженияАктивовПассивов,
												"&Отбор",
												"(Т.ВидИсточника В (
												|		&ВидОтложенногоРасчета,
												|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетБаланса),
												|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ДвиженияБаланса))
												|	ИЛИ Т.Источник В (&ОбновленныеИсточники))
												|	И Т.Источник <> ЗНАЧЕНИЕ(Перечисление.ИсточникиУправленческогоБаланса.ПрочиеАктивыПассивы)");
	Иначе
		ТекстЗапросаДвиженияАктивовПассивов = СтрЗаменить(ТекстЗапросаДвиженияАктивовПассивов,"&Отбор","ИСТИНА");
	КонецЕсли;
	
	Запрос.Параметры.ТекстыЗапросов.Добавить(ТекстЗапросаДвиженияАктивовПассивов);
	Запрос.Параметры.ВсеТаблицы.Добавить("РезультатВыборки");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеАктивовПассивов

Функция ИнициализироватьСведенияОЗаполнении(ТипыРегистраторов)
	
	ОбработанныеТипы = ТипыРегистраторов.СкопироватьКолонки();
	ОбработанныеТипы.Колонки.Добавить("ВсегоДвижений", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0)));
	ОбработанныеТипы.Колонки.Добавить("ВремяЗаполнения", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
	ОбработанныеТипы.Колонки.Добавить("ВсегоЗатрачено", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(30)));
	
	Сведения = Константы.СведенияОбОбновленииИБ.Получить().Получить();
	Если ТипЗнч(Сведения) <> Тип("Структура") Тогда
		Сведения = Новый Структура;
	КонецЕсли;
	
	Если Сведения.Свойство("ЗаполнениеАктивовПассивов") Тогда
		Процесс = Сведения.ЗаполнениеАктивовПассивов;
	Иначе
		Процесс = Новый Структура("Описание,ВсегоДокументов,ОбработаноДокументов", "",0,0);
		Процесс.ВсегоДокументов = ТипыРегистраторов.Итог("ВсегоДокументов");
		Процесс.Вставить("ОбработанныеТипы", ОбработанныеТипы);
		Процесс.Вставить("Пользователь", Пользователи.ТекущийПользователь());
		Процесс.Вставить("ВремяЗапуска", ТекущаяДатаСеанса());
		Сведения.Вставить("ЗаполнениеАктивовПассивов", Процесс);
		Константы.СведенияОбОбновленииИБ.Установить(Новый ХранилищеЗначения(Сведения));
	КонецЕсли;
	
	Возврат Процесс;
	
КонецФункции

Процедура ЗаполнитьДвиженияРегистраПоДокументам(ТипРегистратора, ОбработанныеТипы, НеЗаписыватьДвижения = Ложь)
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ИмяДокумента = ТипРегистратора.Имя;
	СинонимДокумента = ТипРегистратора.Синоним;
	ВсегоДокументов = ТипРегистратора.ВсегоДокументов;
	
	Сведения = Константы.СведенияОбОбновленииИБ.Получить().Получить();
	Процесс = Сведения.ЗаполнениеАктивовПассивов;
	Процесс.Вставить("ИмяДокумента", ИмяДокумента);
	Константы.СведенияОбОбновленииИБ.Установить(Новый ХранилищеЗначения(Сведения));
	
	#Область ИнициализацияЦиклаОбработки
	РазмерПорции = 5000;
	МоментВремени = Новый МоментВремени('39991231');
	Если Процесс.Свойство("МоментВремени") Тогда
		МоментВремени = Процесс.МоментВремени;
	КонецЕсли;
	Запрос = ИнициализироватьЗапросДокументов(ИмяДокумента, РазмерПорции);
	ЗаписаноДвижений = 0;
	ОбработаноДокументов = 0;
	ТребуетсяОбработать = ВсегоДокументов;
	#КонецОбласти
	
	Пока ТребуетсяОбработать > 0 Цикл
		
		МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		Результат = Запрос.ВыполнитьПакет();
		Выборка = Результат[1].Выбрать();
		Выборка.Следующий();
		МоментВремени = Выборка.МоментВремени;
		
		ПараметрыДвижений = Новый Структура;
		ПараметрыДвижений.Вставить("ВидОтложенногоРасчета", Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетБаланса);
		ПараметрыДвижений.Вставить("ДокументыКОтражению", МенеджерТаблиц);
		ПараметрыДвижений.Вставить("ВыборкаПоРегистратору", Истина);
		ЗапросДвижений = ЗапросДвижений(ПараметрыДвижений);
		Если ЗапросДвижений = Неопределено Тогда
			ТребуетсяОбработать = ТребуетсяОбработать - РазмерПорции;
			Продолжить;
		КонецЕсли;
		
		Обработано = ЗаписатьСформированныеДвижения(ИмяДокумента, ЗапросДвижений, НеЗаписыватьДвижения);
		ОбработаноДокументов = ОбработаноДокументов + Обработано.Документов;
		ЗаписаноДвижений = ЗаписаноДвижений + Обработано.Движений;
		
		Процесс.Описание = СтрШаблон("%1 (%2 из %3)", СинонимДокумента, ОбработаноДокументов, ВсегоДокументов);
		Процесс.Вставить("МоментВремени", МоментВремени);
		Константы.СведенияОбОбновленииИБ.Установить(Новый ХранилищеЗначения(Сведения));
		
		ТребуетсяОбработать = ТребуетсяОбработать - РазмерПорции;
		
	КонецЦикла;
	
	#Область ФиксацияРезультатовОбработки
	Процесс.Удалить("МоментВремени");
	
	ОбработанныйТип = ОбработанныеТипы.Добавить();
	ЗаполнитьЗначенияСвойств(ОбработанныйТип, ТипРегистратора);
	ОбработанныйТип.ВремяЗаполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера) / 1000;
	ОбработанныйТип.ВсегоДвижений = ЗаписаноДвижений;
	ОбработанныйТип.ВсегоДокументов = ОбработаноДокументов;
	ОбработанныйТип.ВсегоЗатрачено = ПредставлениеВремени(ОбработанныйТип.ВремяЗаполнения);
	
	Процесс.ОбработаноДокументов = Процесс.ОбработаноДокументов + ВсегоДокументов;
	Процесс.Описание = СтрШаблон("%1 (%2 из %3)", СинонимДокумента, ОбработаноДокументов, ВсегоДокументов);
	Процесс.Вставить("ОбработанныеТипы", ОбработанныеТипы);
	Константы.СведенияОбОбновленииИБ.Установить(Новый ХранилищеЗначения(Сведения));
	#КонецОбласти
	
КонецПроцедуры

Функция ИнициализироватьЗапросДокументов(ИмяДокумента, РазмерПорции)
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ %2
	|	Т.Ссылка КАК Регистратор,
	|	Т.МоментВремени
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	Документ.%1 КАК Т
	|ГДЕ
	|	Т.Проведен
	|	И Т.МоментВремени <= &МоментВремени
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.МоментВремени УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыКОтражению.МоментВремени КАК МоментВремени
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	Запрос = Новый Запрос(СтрШаблон(ШаблонЗапроса, ИмяДокумента, Формат(РазмерПорции, "ЧГ=0")));
	Возврат Запрос;
	
КонецФункции

Функция ЗаписатьСформированныеДвижения(ИмяДокумента, ЗапросДвижений, НеЗаписыватьДвижения = Ложь)
	
	ЗаписыватьДвижения = НЕ НеЗаписыватьДвижения;
	ЗаписаноДвижений = 0;
	ОбработаноДокументов = 0;
	МетаданныеРегистратора = Метаданные.Документы[ИмяДокумента];
	ВыборкаПоДокументу = ЗапросДвижений.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл

		Регистратор = ВыборкаПоДокументу.Регистратор;
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ." + ИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеАктивыПассивы.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			
			Блокировка.Заблокировать();
			
			// Записать правильные движения
			Набор = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Выборка = ВыборкаПоДокументу.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
				ЗаписаноДвижений = ЗаписаноДвижений + 1;
			КонецЦикла;
			Если ЗаписыватьДвижения Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			ОбработаноДокументов = ОбработаноДокументов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %Документ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации_ЗаполнениеРегистра(),
									УровеньЖурналаРегистрации.Ошибка,
									МетаданныеРегистратора,
									Регистратор,
									ТекстСообщения);
			
		КонецПопытки;

	КонецЦикла;
	
	Возврат Новый Структура("Документов,Движений",ОбработаноДокументов,ЗаписаноДвижений);
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункцииУправленческогоБаланса
// Собирает все необходимое для формирования движений по управленческому балансу
// Поцедура формирования движений может быть вызвана:
//    - при онлайн проведении документа
//    - после выполнения отложенных расчетов
//
// Параметры:
//  ИсходныеДанные  - Структура - минимально необходимые исходные даные для формирования движений
//                 при онлайн проведении это все таблицы движений для записи в наборы регистров проводимого документа
//                 при оффлайн формировании имя отложенного расчета вызвавшего формирование 
//                     и имена регистров строкой по которым отложенный расчет изменил движения для актуализации их в управленческом балансе
//  ПараметрыОтладки  - Структура - разные отладочные параметры см. в коде
//
// Возвращаемое значение:
//   Структура - Структура параметров в которой собрано все необходимое для формирования движений взависимости от контекста вызова
//
Функция ИнициализироватьПараметрыДвижений(ПараметрыДвижений, ПараметрыОтладки = Неопределено)
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	СсылкаДокумента = Неопределено;
	ПараметрыДвижений.Свойство("Ссылка", СсылкаДокумента);
	
	ВидОтложенногоРасчета = Неопределено;
	ПараметрыДвижений.Свойство("ВидОтложенногоРасчета", ВидОтложенногоРасчета);
	ПараметрыДвижений.Вставить("ВидОтложенногоРасчета", ВидОтложенногоРасчета);
	ЗаполнениеРегистра = ВидОтложенногоРасчета = Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетБаланса;
	ПараметрыДвижений.Вставить("ЗаполнениеРегистра", ЗаполнениеРегистра);

	#Область ДокументыКОтражению
	// ДокументыКОтражению к отражению могут быть заданы Ссылкой, МассивомСсылок, ВременнойТаблицей ДокументыКОтражению с полем Регистратор
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	МассивРегистраторов = Неопределено;
	ДокументыКОтражению = Неопределено;
	ТаблицаРегистраторов = Неопределено;
	Если ПараметрыДвижений.Свойство("ДокументыКОтражению", ДокументыКОтражению) Тогда
		Если ТипЗнч(ДокументыКОтражению) = Тип("МенеджерВременныхТаблиц") Тогда
			МенеджерТаблиц = ДокументыКОтражению;
			Если ПараметрыДвижений.Свойство("ТаблицаРегистраторов") Тогда
				ТаблицаРегистраторов = ПараметрыДвижений.ТаблицаРегистраторов;
			Иначе
				ТаблицаРегистраторов = ОписаниеТаблицыРегистраторов();
			КонецЕсли;
		Иначе
			МассивРегистраторов = ДокументыКОтражению;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	Если ПараметрыДвижений.Свойство("МенеджерВременныхТаблиц") Тогда
		МенеджерТаблиц = ПараметрыДвижений.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	#Область ТаблицыДляДвижений
	Если НЕ ПараметрыДвижений.Свойство("ТаблицыДляДвижений") Тогда
		ПараметрыДвижений.Вставить("ТаблицыДляДвижений", ТаблицыОтложенногоРасчета(ВидОтложенногоРасчета));
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДвижений.ТаблицыДляДвижений) = Тип("Строка") Тогда
		ТаблицыДляДвижений = Новый Структура(ПараметрыДвижений.ТаблицыДляДвижений);
		ПараметрыДвижений.Вставить("ТаблицыДляДвижений", ТаблицыДляДвижений);
	КонецЕсли;
	#КонецОбласти

	#Область Отладка
	ПараметрыДвижений.Вставить("Записывать", Истина);
	Если ТипЗнч(ПараметрыОтладки) = Тип("Структура") Тогда
		
		Если ПараметрыОтладки.Свойство("НеЗаписыватьДвижения") Тогда
			ПараметрыДвижений.Записывать = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область ЗапросДвижений
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.УстановитьПараметр("Регистратор", СсылкаДокумента);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ТаблицыДвиженийНаправлений", Новый Массив);
	Запрос.УстановитьПараметр("ВсеТаблицы", Новый Массив);
	Запрос.УстановитьПараметр("ИсточникВременнойТаблицы", Новый Соответствие);
	Запрос.УстановитьПараметр("ДатаНачалаУчетаВНА2_4", '00010101');
	Запрос.УстановитьПараметр("ИспользоватьВНА2_4", Ложь);
	#Область УстановкаПереданныхПараметров
	Если МассивРегистраторов <> Неопределено Тогда
		Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	КонецЕсли;
	Если ТаблицаРегистраторов <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТаблицаРегистраторов", ТаблицаРегистраторов);
	КонецЕсли;
	МассивОрганизаций = Неопределено;
	Если ПараметрыДвижений.Свойство("МассивОрганизаций", МассивОрганизаций) Тогда
		Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	КонецЕсли;
	Период = Неопределено;
	Если ПараметрыДвижений.Свойство("Период", Период) Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОтложенногоРасчета", ВидОтложенногоРасчета);
	Запрос.УстановитьПараметр("ОбновленныеИсточники", ОбновленныеИсточники(ВидОтложенногоРасчета));
	Запрос.УстановитьПараметр("ЗаполнениеРегистра", ЗаполнениеРегистра);
	Запрос.УстановитьПараметр("ВыборкаПоРегистратору", ПараметрыДвижений.Свойство("ВыборкаПоРегистратору"));
	
	ИмяВременнойТаблицыРезультата = Неопределено;
	ПараметрыДвижений.Свойство("ИмяВременнойТаблицыРезультата", ИмяВременнойТаблицыРезультата);
	Запрос.УстановитьПараметр("ИмяВременнойТаблицыРезультата", ИмяВременнойТаблицыРезультата);
	#КонецОбласти
	#КонецОбласти

	Замеры = Новый Структура;
	Протокол = Новый Структура("Замеры", Замеры);
	ПараметрыДвижений.Вставить("Протокол", Протокол);
	ПараметрыДвижений.Вставить("ЗапросДвижений", Запрос);
	
	ДобавитьЗамер(ПараметрыДвижений.Протокол.Замеры,"ИнициализацияПараметровДвижений",НачалоЗамера);
	
	Возврат ПараметрыДвижений;
	
КонецФункции

Функция ВыгрузитьНаборыДвижений(ДвиженияДокумента, ЭтоНовый = Ложь) Экспорт
	
	ТаблицыДвижений = Новый Структура;
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПустойВидИсточника = Перечисления.ВидыИсточниковУправленческогоБаланса.ПустаяСсылка();
	ВыгруженыРасчетыСКлиентами = Ложь;
	ВыгруженыРасчетыСПоставщиками = Ложь;
	Если НЕ ЭтоНовый Тогда 
		ВыгруженыРасчетыСКлиентами = ВыгрузитьРасчетыПоДокументам(ТаблицыДвижений, ДвиженияДокумента, "РасчетыСКлиентамиПоДокументам");
		ВыгруженыРасчетыСПоставщиками = ВыгрузитьРасчетыПоДокументам(ТаблицыДвижений, ДвиженияДокумента, "РасчетыСПоставщикамиПоДокументам");
	КонецЕсли;
	ВремяВыгрузкиРасчетовПоДокументам = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера) / 1000;
	ТаблицыДвижений.Вставить("ВремяВыгрузкиРасчетовПоДокументам", ВремяВыгрузкиРасчетовПоДокументам);
	
	БалансовыеРегистры = БалансовыеРегистры();
	Если НЕ ВыгруженыРасчетыСКлиентами Тогда
		БалансовыеРегистры.Вставить("РасчетыСКлиентами");
	КонецЕсли;
	Если НЕ ВыгруженыРасчетыСПоставщиками Тогда
		БалансовыеРегистры.Вставить("РасчетыСПоставщиками");
	КонецЕсли;
	Для Каждого Набор Из ДвиженияДокумента Цикл
		
		ИмяНабора = Строка(Набор);
		Если СтрНайти(ИмяНабора, "РегистрНакопления") = 0 Тогда
			Продолжить;
		КонецЕсли;
		ИмяНабора = СтрЗаменить(ИмяНабора, "РегистрНакопленияНаборЗаписей.", "");
		
		БалансовыйРегистр = БалансовыеРегистры.Свойство(ИмяНабора);
		Если НЕ БалансовыйРегистр Тогда
			Продолжить;
		КонецЕсли;
		
		Если Набор.Количество() = 0 И НЕ Набор.Записывать Тогда
			Набор.Прочитать();
		КонецЕсли;
		
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяНабора = "ПрочиеАктивыПассивы" Тогда
			ОтборДвижений = Новый Структура("ВидИсточника", ПустойВидИсточника);
			ТаблицаДвижений = Набор.Выгрузить().Скопировать(ОтборДвижений);
		Иначе
			ТаблицаДвижений = Набор.Выгрузить();
		КонецЕсли;
		
		ТаблицыДвижений.Вставить(ИмяНабора, ТаблицаДвижений);
	КонецЦикла;
	
	Возврат ТаблицыДвижений;
	
КонецФункции

Функция ВыгрузитьРасчетыПоДокументам(ТаблицыДвижений, Движения, ИмяНабора)
	
	РасчетыВыгружены = Ложь;
	НаборРасчетовПоДокументам = Движения.Найти(ИмяНабора);
	Если НаборРасчетовПоДокументам <> Неопределено Тогда
		Если НЕ НаборРасчетовПоДокументам.Записывать Тогда
			НаборРасчетовПоДокументам.Прочитать();
			Если НаборРасчетовПоДокументам.Количество() > 0 Тогда
				ТаблицыДвижений.Вставить(ИмяНабора,НаборРасчетовПоДокументам.Выгрузить());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат РасчетыВыгружены;
	
КонецФункции

Функция ЕстьРасчетыПоДокументам(ТаблицыДвижений, ВидРасчетов)
	
	Результат = Ложь;
	ИмяНабора = ВидРасчетов + "ПоДокументам";
	Если ТаблицыДвижений.Свойство(ИмяНабора) Тогда
		Результат = Истина;
		Если ТипЗнч(ТаблицыДвижений[ИмяНабора]) = Тип("ТаблицаЗначений") Тогда
			Результат = ТаблицыДвижений[ИмяНабора].Количество() > 0 
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОтбор(Запрос, ТекстЗапроса, ПолеОрганизации = "")
	
	ТекстОтбора = "";
	Если Запрос.Параметры.Свойство("МассивРегистраторов") Тогда
		ТекстОтбора = ТекстОтбора + "И Т.Регистратор В (&МассивРегистраторов)";
	КонецЕсли;
	
	ПСТаб = Символы.ПС+Символы.Таб;
	Если Запрос.Параметры.Свойство("МассивОрганизаций") Тогда
		ТекстОтбора = ТекстОтбора + ?(ТекстОтбора = "", "", ПСТаб) 
					+ "И Т.Организация В (&МассивОрганизаций)";
		Если НЕ ПустаяСтрока(ПолеОрганизации) Тогда
			ТекстОтбора = СтрЗаменить(ТекстОтбора, "Т.Организация", ПолеОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Если Запрос.Параметры.Свойство("НачалоПериода") Тогда
		ТекстОтбора = ТекстОтбора + ?(ТекстОтбора = "", "", ПСТаб)
					+ "И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//&Отбор",ТекстОтбора);
	
КонецПроцедуры

Процедура ДобавитьОтборАктивовПассивов(Запрос, ТекстЗапроса, ТолькоДС = Ложь)
	
	Если Запрос.Параметры.ЗаполнениеРегистра Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"//&Отбор",
									"И Т.ВидИсточника = ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ПустаяСсылка)
									|	//&Отбор");
	ИначеЕсли ЗначениеЗаполнено(Запрос.Параметры.ВидОтложенногоРасчета) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"//&Отбор",
									"И НЕ Т.ВидИсточника В (
									|		&ВидОтложенногоРасчета,
									|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетБаланса))
									|	И НЕ Т.Источник В (&ОбновленныеИсточники)
									|	//&Отбор");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"//&Отбор",
									"И Т.ВидИсточника = ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ПустаяСсылка)
									|	//&Отбор");
	КонецЕсли;
	
	Если ТолькоДС Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"//&Отбор",
									"И Т.Статья В (
									|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредстваБезналичные),
									|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредстваНаличные))
									|	//&Отбор");
	КонецЕсли;
	
	ДобавитьОтбор(Запрос, ТекстЗапроса);
	
КонецПроцедуры

Процедура ДобавитьСоединениеРегистраторов(Запрос, ТекстЗапроса, ПервичныеДвижения)
	
	Если Запрос.Параметры.Свойство("ТаблицаРегистраторов") Тогда
		втРегистраторов = Запрос.Параметры.ТаблицаРегистраторов;
		ШаблонСоединения = "
		|	%1 КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %2 КАК ДокументыКОтражению
		|	ПО Т.Регистратор = ДокументыКОтражению.%3";
		
		ТекстСоединения = СтрШаблон(ШаблонСоединения, ПервичныеДвижения, втРегистраторов.ИмяТаблицы, втРегистраторов.ПолеРегистратора);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПервичныеДвижения КАК Т", ТекстСоединения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьПодстановки(ТекстЗапроса, ИмяТаблицы, ПервичныеДвижения)
	
	Источник = СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ИсточникиУправленческогоБаланса.%1)", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Источник", Источник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПервичныеДвижения", ПервичныеДвижения);
	
КонецПроцедуры

Функция ТаблицыОтложенногоРасчета(ВидОтложенногоРасчета)
	
	Таблицы = Новый Структура;
	МетаданныеРегистров = Метаданные.РегистрыНакопления;
	Если ВидОтложенногоРасчета = Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости Тогда
		Таблицы.Вставить(МетаданныеРегистров.ПрочиеАктивыПассивы.Имя, "ВТАктивыПассивы");
		Таблицы.Вставить(МетаданныеРегистров.ПрочиеДоходы.Имя, "ВТПрочиеДоходы");
		Таблицы.Вставить(МетаданныеРегистров.ПрочиеРасходы.Имя, "ВТПрочиеРасходы");
		Таблицы.Вставить(МетаданныеРегистров.ПартииПрочихРасходов.Имя, "ВТПартииПрочихРасходов");
		Таблицы.Вставить(МетаданныеРегистров.СебестоимостьТоваров.Имя, "ВТСебестоимость");
		
	ИначеЕсли ВидОтложенногоРасчета = Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетыСПартнерами Тогда
		Таблицы.Вставить(МетаданныеРегистров.РасчетыСКлиентамиПоДокументам.Имя);
		Таблицы.Вставить(МетаданныеРегистров.РасчетыСПоставщикамиПоДокументам.Имя);
		Таблицы.Вставить(МетаданныеРегистров.ПрочиеАктивыПассивы.Имя);
		Таблицы.Вставить(МетаданныеРегистров.ПрочиеРасходы.Имя);
		Таблицы.Вставить(МетаданныеРегистров.ПартииПрочихРасходов.Имя);
		Таблицы.Вставить(МетаданныеРегистров.СебестоимостьТоваров.Имя);
		
	ИначеЕсли ВидОтложенногоРасчета = Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетБаланса Тогда
		Таблицы = БалансовыеРегистры();
		
	КонецЕсли;
	Возврат Таблицы;
	
КонецФункции

Функция ОбновленныеИсточники(ВидОтложенногоРасчета)
		
	Результат = Новый Массив;
	Источники = Перечисления.ИсточникиУправленческогоБаланса;
	Если ВидОтложенногоРасчета = Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетыСПартнерами Тогда
		Результат.Добавить(Источники.РасчетыСКлиентамиПоДокументам);
		Результат.Добавить(Источники.РасчетыСПоставщикамиПоДокументам);
		Результат.Добавить(Источники.ПрочиеРасходы);
		Результат.Добавить(Источники.ПартииПрочихРасходов);
		Результат.Добавить(Источники.СебестоимостьТоваров);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаРеквизитаОбъектаРасчетов(
			РеквизИсточника = "Т.ОбъектРасчетов",
			РеквизитОбъектаРасчетов = "Договор",
			ТипыРеквизита = "ОпределяемыеТипы.ОбъектРасчетов") Экспорт
	
	ТекстПоля = "ВЫБОР" + Символы.ПС;
	ШаблонУсловия = "		КОГДА ТИПЗНАЧЕНИЯ(%1) = ТИП(%2)
					|			ТОГДА ВЫРАЗИТЬ(%1 КАК %2).%3";
	ШаблонДоговора = "		КОГДА ТИПЗНАЧЕНИЯ(%1) = ТИП(%2)
					 |			ТОГДА %1";
	УсловияВыбора = Новый Массив;
	ТипыДоговоров = Метаданные.Справочники.КлючиАналитикиУчетаПоПартнерам.Реквизиты.Договор.Тип.Типы();
	ТипыДоговоров.Добавить(Тип("СправочникСсылка.ПодарочныеСертификаты"));
	
	Если ТипЗнч(ТипыРеквизита) = Тип("Строка") Тогда
		ТипыОбъектовРасчета = ОбщегоНазначенияУТ.МетаданныеПоИмени(ТипыРеквизита).Тип.Типы();
	ИначеЕсли ТипЗнч(ТипыРеквизита) = Тип("Массив") Тогда
		ТипыОбъектовРасчета = ТипыРеквизита;
	КонецЕсли;
	Для Каждого ТипОбъектаРасчета Из ТипыОбъектовРасчета Цикл
		
		Если ТипОбъектаРасчета = Тип("NULL") ИЛИ ТипОбъектаРасчета = Тип("НЕОПРЕДЕЛЕНО") Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяТипа = Метаданные.НайтиПоТипу(ТипОбъектаРасчета).ПолноеИмя();
		Если СтрНайти(ПолноеИмяТипа, "Перечисление") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(РеквизитОбъектаРасчетов) = "ДОГОВОР" И ТипыДоговоров.Найти(ТипОбъектаРасчета) <> Неопределено Тогда
			ТекстУсловия = СтрШаблон(ШаблонДоговора, РеквизИсточника, ПолноеИмяТипа);
		Иначе
			ТекстУсловия = СтрШаблон(ШаблонУсловия, РеквизИсточника, ПолноеИмяТипа, РеквизитОбъектаРасчетов);
		КонецЕсли;
		УсловияВыбора.Добавить(ТекстУсловия);
		
	КонецЦикла;
	ТекстУсловия = СтрСоединить(УсловияВыбора, Символы.ПС);
	Возврат ТекстПоля + ТекстУсловия + Символы.ПС + "КОНЕЦ";
	
КонецФункции

Функция РазделительЗапросов()
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции

Процедура ДобавитьЗамер(Замеры, ИмяЗамера, НачалоЗамера)
	
	ВремяЗамера = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера) / 1000;
	Замеры.Вставить(ИмяЗамера, ПредставлениеВремени(ВремяЗамера));
	
КонецПроцедуры

Функция КоличествоРегистраторов()
	
	Исключения = Новый Соответствие;
	Исключения.Вставить(Метаданные.Документы.КорректировкаРегистров.Имя, Истина);
	Исключения.Вставить(Метаданные.Документы.РасчетСебестоимостиТоваров.Имя, Истина);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	""%1"" КАК Имя,
	|	""%2"" КАК Синоним,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Ссылка) КАК ВсегоДокументов
	|ИЗ
	|	Документ.%1 КАК Т
	|ГДЕ
	|	Т.Проведен";
	ТипыРегистраторов = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	МассивЗапросов = Новый Массив;
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
		
		МетаданныеРегистратора = Метаданные.НайтиПоТипу(ТипРегистратора);
		Если Исключения[МетаданныеРегистратора.Имя] = Неопределено Тогда
			ТекстЗапроса = СтрШаблон(ШаблонЗапроса, МетаданныеРегистратора.Имя, СтрЗаменить(МетаданныеРегистратора.Синоним,"""",""));
			МассивЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъединитьВсе = 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстВложенногоЗапроса = СтрСоединить(МассивЗапросов, ОбъединитьВсе);
	Шаблон = 
	"ВЫБРАТЬ
	|	Т.Имя,
	|	Т.Синоним,
	|	Т.ВсегоДокументов
	|ИЗ
	|	(%1) КАК Т
	|ГДЕ
	|	Т.ВсегоДокументов > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Имя";
	
	ТекстЗапроса = СтрШаблон(Шаблон,ТекстВложенногоЗапроса);
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеВремени(Знач Секунды)
	
	Часы = Цел(Секунды / 3600);
	Секунды = Секунды - Часы*3600;
	
	Минуты  = Цел(Секунды / 60);
	Секунды = Секунды - Минуты*60;
	
	ЦелыеСекунды = Цел(Секунды);
	
	Секунды = Секунды - ЦелыеСекунды;
		
	ПредставлениеВремени = ""
		+ ?(Часы = 0, "", Строка(Часы) + ":")
		+ ?(Минуты = 0, ?(Часы>0,"00:",""), ?(Минуты<10 И Часы>0,"0"+Строка(Минуты),Строка(Минуты)) + ":")
		+ ?(ЦелыеСекунды = 0, ?(Минуты>0 ИЛИ Часы>0,"00",""), ?(ЦелыеСекунды<10 И (Минуты>0 ИЛИ Часы>0),"0"+Строка(ЦелыеСекунды),Строка(ЦелыеСекунды)))
		+ ?(ЦелыеСекунды>0 ИЛИ Минуты>0 ИЛИ Часы>0,Прав(Строка(Секунды),СтрДлина(Строка(Секунды))-1),Строка(ЦелыеСекунды+Секунды));
		
	Возврат ПредставлениеВремени;
	
КонецФункции

Процедура ВывестиПротокол(ТекстСообщения, ТипыРегистраторов, Замеры = Неопределено)
	
	ТекстТаблицы = СформироватьТекстПоТаблице(ТипыРегистраторов);
	ТекстЗамеров = СформироватьТекстЗамеров(Замеры);
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации_ЗаполнениеРегистра(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ТекстСообщения + ТекстТаблицы + ТекстЗамеров);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации_ЗаполнениеРегистра()
	
	Возврат НСтр("ru = 'Заполнение регистра ""Активы и пассивы""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
Конецфункции

Функция СформироватьТекстПоТаблице(ТипыРегистраторов)
	
	Текст = Символы.ПС+Символы.ПС;
	ЗаголовокТаблицы = НСтр("ru = 'Имя документа - Всего документов'");
	ШаблонСтроки = Символы.Таб + "%1 - %2" + Символы.ПС;
	Если ТипыРегистраторов.Колонки.Количество() > 3 Тогда
		ЗаголовокТаблицы = НСтр("ru = 'Имя документа - Обработано документов / Записано движений - Всего затрачено (ЧЧ:ММ:СС,мс)'");
		ШаблонСтроки = Символы.Таб + "%1 - %2 / %3 - %4" + Символы.ПС;
	КонецЕсли;
	Текст = Текст + ЗаголовокТаблицы + Символы.ПС+Символы.ПС;
	Для Каждого Регистратор Из ТипыРегистраторов Цикл
		НоваяСтрока = СтрШаблон(ШаблонСтроки, Регистратор.Имя, Регистратор.ВсегоДокументов);
		Если ТипыРегистраторов.Колонки.Количество() > 3 Тогда
			НоваяСтрока = СтрШаблон(ШаблонСтроки, Регистратор.Имя, Регистратор.ВсегоДокументов, Регистратор.ВсегоДвижений, Регистратор.ВсегоЗатрачено);
		КонецЕсли;
		Текст = Текст + НоваяСтрока;
	КонецЦикла;
	Если ТипыРегистраторов.Колонки.Количество() = 3 Тогда
		ИтоговаяСтрока = СтрШаблон(ШаблонСтроки, НСтр("ru = 'Итого'"), ТипыРегистраторов.Итог("ВсегоДокументов"));
		Текст = Текст + ИтоговаяСтрока;
	КонецЕсли;
	Возврат Текст;
	
КонецФункции

Функция СформироватьТекстЗамеров(Замеры)
	
	Если ТипЗнч(Замеры) <> Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = Символы.ПС + НСтр("ru = 'Затраты времени:'")+Символы.ПС;
	Для Каждого Замер Из Замеры Цикл
		
		Текст = Текст + СтрШаблон("	%1 - %2", Замер.Ключ, Замер.Значение)+Символы.ПС;
		
	КонецЦикла;
	Возврат Текст;
	
КонецФункции

// Возвращет структуру описывающую временную таблицу в которой содержатся документы к отражению в управленческом балансе
//  Ключи структуры:
//    ИмяТаблицы
//    ПолеРегистратора
//
Функция ОписаниеТаблицыРегистраторов() Экспорт
	
	ТаблицаРегистраторов = Новый Структура;
	ТаблицаРегистраторов.Вставить("ИмяТаблицы"      , "ДокументыКОтражению");
	ТаблицаРегистраторов.Вставить("ПолеРегистратора", "Регистратор");
	
	Возврат ТаблицаРегистраторов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
