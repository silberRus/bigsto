&НаКлиенте
Перем КэшируемыеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	АвторизованВнешнийПользователь = ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();

	ФорматИмениКолонки     = "ДФ=ddMMyyyy";
	ФорматЗаголовкаКолонки = "ДЛФ=D";

	ДоступныеДокументы = ДоступныеДокументы("Чтение");

	ИнициализироватьКомпоновщикНастроек(ДоступныеДокументы);

	ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Элементы.ЗаказыНаТовар.Заголовок = НСтр("ru = 'Другие заказы выделенной позиции'");

	Элементы.Действия.Доступность = Не ТолькоПросмотр;
	Элементы.ПеренестиВДокумент.Доступность = Не ТолькоПросмотр;

	Элементы.ГруппаЗаказТовар.Заголовок = ?(ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"),
		НСтр("ru = 'Заказ, Клиент / N, Номенклатура, Характеристика'"),
		НСтр("ru = 'Заказ, Клиент / N, Номенклатура'"));

	НастроитьЭлементыФормыПоФО();
	ЗаполнитьИндексыКартинок();
	ЗагрузитьТаблицуЗаказаИзВременногоХранилища();

	Если АвторизованВнешнийПользователь Тогда
		Элементы.ОтборМенеджер.Видимость = Ложь;
		Элементы.ЗаказыНаТовар.Видимость = Ложь;
		Элементы.Действия.Видимость      = Ложь;
	Иначе
		СписокМенеджеров = СписокВыбораОтбораПоМенеджеру(ДоступныеДокументы);
		ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(Элементы.ОтборМенеджер.СписокВыбора, СписокМенеджеров);
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		Параметры.Заказы.ЗагрузитьЗначения(Параметры.ПараметрКоманды);
	КонецЕсли;
	
	Если Параметры.ВызовИзФормыЗаказа Тогда
		ОтборЗаказ.Добавить(Параметры.РеквизитыЗаказа.Ссылка);
	ИначеЕсли Параметры.Заказы.Количество() > 0 Тогда
		ОтборЗаказ = Параметры.Заказы.Скопировать();
	КонецЕсли;
	
	ПриСозданииПрименитьНастройкиЭлементовФормы();
	УстановитьУсловноеОформление();
	
	ЗагрузитьЗначенияРеквизитов();
	ОтразитьПростойОтборВОтборахКомпоновки(ЭтаФорма);
	НастроитьЭлементыФормыПоПараметрам();
	
	Если Параметры.ВызовИзФормыЗаказа ИЛИ ОтборЗаказ.Количество() > 0 Тогда
		ОбновитьСостояниеНаСервере();
	Иначе
		Элементы.СгруппироватьМатериалы.Видимость = Ложь;
		ЗагрузитьНастройкиКомпоновщика();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.НастройкаСписка" Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыбранноеЗначение);
		СохранитьНастройкиКомпоновщика();
		ОбновитьСостояниеНаСервере();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.ВыборДействий" Тогда
		
		ОбработкаВыбораВыборДействийНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)

	ТекстСообщения = НСтр("ru = 'Невозможно установить отбор. Отбор по складу установлен в настройке списка. Измените настройку списка.'");
	Если ОбеспечениеКлиентСервер.ПроверитьНаличиеНастройки(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных("Склад"), ТекстСообщения) Тогда
		ОтразитьПростойОтборВОтборахКомпоновки(ЭтаФорма);
	Иначе
		ОтборСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	СохранитьЗначенияРеквизитов();

КонецПроцедуры

&НаКлиенте
Процедура ОтборМенеджерПриИзменении(Элемент)

	ТекстСообщения = НСтр("ru = 'Невозможно установить отбор. Отбор по менеджеру/ответственному установлен в настройке списка. Измените настройку списка.'");
	Если ОбеспечениеКлиентСервер.ПроверитьНаличиеНастройки(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных("Менеджер"), ТекстСообщения) Тогда
		ОтразитьПростойОтборВОтборахКомпоновки(ЭтаФорма);
	Иначе
		ОтборМенеджер = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	СохранитьЗначенияРеквизитов();

КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)

	ТекстСообщения = НСтр("ru = 'Невозможно установить отбор. Отбор по номенклатуре установлен в настройке списка. Измените настройку списка.'");
	Если ОбеспечениеКлиентСервер.ПроверитьНаличиеНастройки(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных("Номенклатура"), ТекстСообщения) Тогда
		ОтразитьПростойОтборВОтборахКомпоновки(ЭтаФорма);
	Иначе
		ОтборНоменклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	СохранитьЗначенияРеквизитов();

КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоЗаказам(Команда)
	
	СгруппироватьПриИзменении(Команда.Действие);
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоИзделиям(Команда)
	
	СгруппироватьПриИзменении(Команда.Действие);
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоЭтапам(Команда)
	
	СгруппироватьПриИзменении(Команда.Действие);
	ПриИзмененииОтбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Обработка.СостояниеОбеспечения.Форма.Форма.ТоварыВыбор");
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле = Элементы.Действия Тогда

		Если ТекущаяСтрока.ТипСтроки = 1 И ТекущаяСтрока.Действия = ТекстДействияСЗаказом() Тогда

			ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма.ВыборДействий",
				ТекущаяСтрока.ДоступныеДействия, ЭтаФорма, УникальныйИдентификатор);

		ИначеЕсли ТекущаяСтрока.ТипСтроки = 1 И ТекущаяСтрока.Действия = ТекстПоказатьВсюНоменклатуру() Тогда

			ЗаказыРаскрытые.Добавить(КлючГруппировкиСтрокой(ТекущаяСтрока));
			ТекущаяСтрока.Действия = ТекстПоказатьОтобраннуюНоменклатуру();
			ОбновитьФильтрПользовательский(ТекущаяСтрока.ПолучитьИдентификатор());

		ИначеЕсли ТекущаяСтрока.ТипСтроки = 1 И ТекущаяСтрока.Действия = ТекстПоказатьОтобраннуюНоменклатуру() Тогда

			НайденныйЭлементСписка = ЗаказыРаскрытые.НайтиПоЗначению(КлючГруппировкиСтрокой(ТекущаяСтрока));
			ЗаказыРаскрытые.Удалить(НайденныйЭлементСписка);
			ТекущаяСтрока.Действия = ТекстПоказатьВсюНоменклатуру();
			ОбновитьФильтрПользовательский(ТекущаяСтрока.ПолучитьИдентификатор());

		ИначеЕсли ТекущаяСтрока.ТипСтроки = 0 И ТекущаяСтрока.ЕстьПолноеОбеспечениеПоВсемСкладам Тогда
			
			РекомендацияУправлениеПеремещениемВыбор();
			
		ИначеЕсли ТекущаяСтрока.ТипСтроки = 0 И ЗначениеЗаполнено(ТекущаяСтрока.Действия) Тогда //рекомендация для одной строки заказа

			
			ТоварыВыборНаСервере();
			
			СтрокаТовары = Элементы.Товары.ТекущиеДанные;
			
		КонецЕсли;

	ИначеЕсли Поле = Элементы.Заказ Или Поле = Элементы.Партнер Или Поле = Элементы.Статус И ТекущаяСтрока.ТипСтроки = 1 Тогда

		ПоказатьЗначение(Неопределено, ТекущаяСтрока.Заказ);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСостояние(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка.СостояниеОбеспечения.Форма.Форма.ОбновитьСостояние");
	
	ОбновитьСостояниеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ИдентификаторВладельца = ВладелецФормы.УникальныйИдентификатор;
	Результат = Новый Структура("ОтгружатьЧастями, АдресВХранилище",
		УстанавливатьОтгружатьЧастями, ПоместитьТаблицуЗаказаВоВременноеХранилище(ИдентификаторВладельца));
	ОповеститьОВыборе(Результат);

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаТовар(Команда)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Не Элементы.ЗаказыНаТовар.Пометка Тогда

		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ТипСтроки = 1 Тогда

			ТекстПредупреждения = НСтр("ru = 'Показать заказы невозможно, не выбрана номенклатура. Необходимо выделить строку заказа.
				|Команда ""Другие заказы выделенной позиции"" отображает все заказы на номенклатурную позицию
				|выделенной строки текущего заказа.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;

		КонецЕсли;

	КонецЕсли;

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДанныеТекущейСтроки = Новый Структура("Заказ, Номенклатура, Характеристика, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ТекущиеДанные);
	
	Элементы.ЗаказыНаТовар.Пометка = Не Элементы.ЗаказыНаТовар.Пометка;

	Если Элементы.ЗаказыНаТовар.Пометка Тогда
		Элементы.ЗаказыНаТовар.Заголовок = НСтр("ru = 'К текущему заказу'");
		Элементы.ЗаказыНаТовар.Отображение = ОтображениеКнопки.КартинкаИТекст;
		ТекущийЗаказ = ДанныеТекущейСтроки.Заказ;
	Иначе
		Элементы.ЗаказыНаТовар.Заголовок = НСтр("ru = 'Другие заказы выделенной позиции'");
		Элементы.ЗаказыНаТовар.Отображение = ОтображениеКнопки.Текст;
		ТекущийЗаказ = Неопределено;
	КонецЕсли;

	ОтразитьПростойОтборВОтборахКомпоновки(ЭтаФорма);
	ОбновитьСостояниеНаСервере();
	
	Элементы.ПоказаныЗаказыТовара.Заголовок = ?(Элементы.ЗаказыНаТовар.Пометка, ТекстТекущаяСтрока(), "");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСписок(Команда)

	ПараметрыФормы = Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек);
	ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма.НастройкаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	Если ТекущаяСтрока <> Неопределено тогда

		Если ТекущаяСтрока.ТипСтроки = 1 Тогда
			Заказ = ТекущаяСтрока.Заказ;
		Иначе
			Заказ = ТекущаяСтрока.ПолучитьРодителя().Заказ;
		КонецЕсли;

		Если Параметры.ВызовИзФормыЗаказа И
			ТекущийЗаказ = Неопределено Или ТекущийЗаказ = Заказ Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Для редактирования текущего заказа завершите работу в окне состояния обеспечения'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;

		КонецЕсли;
		
		ПоказатьЗначение(, Заказ);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриСоздании

&НаСервере
Процедура ПриСозданииПрименитьНастройкиЭлементовФормы()
	
	Если Параметры.ВызовИзФормыЗаказа Тогда
		
		Шаблон = НСтр("ru = 'Состояние обеспечения заказа (%1)'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметры.РеквизитыЗаказа.Ссылка);
		
	КонецЕсли;
	
	НастройкаЭлементовФормы = Неопределено;
	Если Параметры.Свойство("НастройкаЭлементовФормы", НастройкаЭлементовФормы) Тогда
		
		Если НастройкаЭлементовФормы.Заголовок <> Неопределено Тогда
			
			Заголовок = НастройкаЭлементовФормы.Заголовок;
			
		КонецЕсли;
		
		Если НастройкаЭлементовФормы.ТекстКомандыПеренестиВДокумент <> Неопределено Тогда
			
			Элементы.ПеренестиВДокумент.Заголовок = НастройкаЭлементовФормы.ТекстКомандыПеренестиВДокумент;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

&НаСервере
Процедура ОбновитьСостояниеНаСервере()

	БылОтборПоНоменклатуре = УстановленОтборПоНоменклатуре;
	ПолеНоменклатура = Новый ПолеКомпоновкиДанных("Номенклатура");
	УстановленОтборПоНоменклатуре = Не ОбеспечениеКлиентСервер.ПроверитьНаличиеНастройки(КомпоновщикНастроек, ПолеНоменклатура, "");
	ЭтоСостояниеОбеспеченияЗаказов = Не Параметры.ВызовИзФормыЗаказа И Параметры.Заказы.Количество() = 0;
	УстановленОтборПоНоменклатуре = УстановленОтборПоНоменклатуре Или
		ЗначениеЗаполнено(ОтборНоменклатура) И ЭтоСостояниеОбеспеченияЗаказов;
	УстановленОтборПоНоменклатуре = УстановленОтборПоНоменклатуре Или ТекущийЗаказ <> Неопределено;

	Если БылОтборПоНоменклатуре И Не УстановленОтборПоНоменклатуре Тогда
		ЗаказыРаскрытые.Очистить();
	КонецЕсли;

	Состояние = СостояниеОбеспеченияЗаказов();
	ОбновитьСтрокиТаблицыТовары(Состояние.Потребности);
	Итоги = Новый Структура("СтатусыИспользуются", Ложь);
	СписокКолонокНовый = ЗаполнитьДатыОбеспеченияПотребностей(Состояние.ОстаткиИобороты, Состояние.ГрафикПоступления, Итоги);
	ОбновитьКолонкиТаблицыТовары(СписокКолонокНовый);
	ЗаполнитьКолонкиСостояниеИРекомендацииТаблицыТовары();

	Элементы.ГруппаСтатусУпаковка.Заголовок = ?(Итоги.СтатусыИспользуются,
		НСтр("ru = 'Статус/Ед. изм.'"),
		НСтр("ru = 'Ед. изм.'"));
	Элементы.СгруппироватьМатериалы.Видимость = ДоступнаГруппировкаТоваров;
	Элементы.ЕстьОтбор.Видимость = ЕстьОтбор(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьОтбор(КоллекцияЭллементовНастроек)

	Для каждого Элемент Из КоллекцияЭллементовНастроек Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.Использование Тогда
			Возврат Истина;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных")
			ИЛИ (ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И Элемент.Использование) Тогда
			Если ЕстьОтбор(Элемент.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

Конецфункции

&НаСервере
Функция СостояниеОбеспеченияЗаказов()

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДоступныеДокументы      = ДоступныеДокументы("Чтение");
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ЕстьФильтр = УстановленОтборПоНоменклатуре;

	ВременнаяТаблицаФильтраНоменклатуры(МенеджерВременныхТаблиц, Настройки, ЕстьФильтр);
	ВременнаяТаблицаЗаказов(МенеджерВременныхТаблиц, ДоступныеДокументы, Настройки, ЕстьФильтр);

	Фильтры = ОбеспечениеКлиентСервер.ФильтрыСостоянияОбеспечения();
	ОбеспечениеКлиентСервер.ИнициализироватьФильтрыСостоянияОбеспечения(Фильтры, ЕстьФильтр);

	Документ = Новый Структура("Ссылка, НомерДокумента, ТаблицаЗаказа,
		|НеОтгружатьЧастями, Статус, СтатусИспользуется, Дата,
		|Партнер, Менеджер, СторнируемыеДокументы");

	Если Параметры.ВызовИзФормыЗаказа Тогда
		ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыЗаказа);
		Документ.НомерДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.РеквизитыЗаказа.Ссылка, "Номер");
		Документ.СторнируемыеДокументы = Параметры.СторнируемыеДокументы.ВыгрузитьЗначения();
	КонецЕсли;
	Документ.ТаблицаЗаказа = Объект.ТаблицаЗаказа.Выгрузить();

	Состояние = ОбеспечениеСервер.СостояниеОбеспеченияЗаказов(МенеджерВременныхТаблиц, Документ, Фильтры, РежимГруппировкиМатериалов);
	ТоварыОбособленныеПоВсемСкладам = ТоварыОбособленныеПоВсемСкладам(Состояние.ОстаткиИОбороты.ТоварыОбособленные);
	Состояние.ОстаткиИОбороты.Вставить("ТоварыОбособленныеПоВсемСкладам", ТоварыОбособленныеПоВсемСкладам);
	
	Состояние.Вставить("ГрафикПоступления", ТаблицаКорректировкиГрафикаПоступления(МенеджерВременныхТаблиц, Документ.Ссылка));

	Возврат Состояние;

КонецФункции

&НаСервереБезКонтекста
Процедура ВременнаяТаблицаЗаказов(МенеджерВременныхТаблиц, ДоступныеДокументы, Настройки, ЕстьФильтр)
	
	Если ЕстьФильтр Тогда
		ТекстЗапроса = ТекстЗапросаЗаказыНоменклатуры(ДоступныеДокументы);
		ПоляФильтра = "Заказ, Менеджер, Партнер, Подразделение";
		Запрос = ЗапросСОтборамиКомпоновки(ТекстЗапроса, Настройки, ПоляФильтра);
		МассивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаЗаказы(ДоступныеДокументы, ЕстьФильтр);
	
	Запрос = ЗапросСОтборамиКомпоновки(ТекстЗапроса, Настройки, "Номенклатура");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЕстьФильтр Тогда
		Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	КонецЕсли;
	
	ИменаФункциональныхОпций = ОбеспечениеКлиентСервер.ИменаФункциональныхОпцийСтатусовЗаказовНаОтгрузку();
	
	Для Каждого ИмяОпции Из ИменаФункциональныхОпций Цикл
		Запрос.УстановитьПараметр(ИмяОпции, ПолучитьФункциональнуюОпцию(ИмяОпции));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВременнаяТаблицаФильтраНоменклатуры(МенеджерВременныхТаблиц, Настройки, ЕстьФильтр)

	Если ЕстьФильтр Тогда
		ТекстЗапроса = ТекстЗапросаФильтрНоменклатуры();
		ПоляФильтра = "Заказ, Менеджер, Партнер, Склад, Подразделение";
		Запрос = ЗапросСОтборамиКомпоновки(ТекстЗапроса, Настройки, ПоляФильтра);
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	NULL КАК Номенклатура
		|ПОМЕСТИТЬ ВтФильтрНоменклатуры");

	КонецЕсли;

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаЗаказыНоменклатуры(ДоступныеДокументы)

	ТекстЗапроса = "";
	ПервыйЗапрос = Истина;
	Если ДоступныеДокументы.Найти(Документы.ЗаказКлиента) <> Неопределено Или
		 ДоступныеДокументы.Найти(Документы.ЗаявкаНаВозвратТоваровОтКлиента) <> Неопределено
		Тогда

		ПолучатьНесогласованные = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
		ТекстЗапроса = ТекстЗапроса + РегистрыНакопления.ЗаказыКлиентов.ТекстЗапросаЗаказовНоменклатуры(ПолучатьНесогласованные);
		ПервыйЗапрос = Ложь;

	КонецЕсли;

	Если ДоступныеДокументы.Найти(Документы.ЗаказНаВнутреннееПотребление) <> Неопределено
		Тогда

		ДобавитьСекциюОбъединения(ТекстЗапроса, ПервыйЗапрос);
		ТекстЗапроса = ТекстЗапроса + РегистрыНакопления.ЗаказыНаВнутреннееПотребление.ТекстЗапросаЗаказовНоменклатуры();
		ПервыйЗапрос = Ложь;

	КонецЕсли;

	

	Если ДоступныеДокументы.Найти(Документы.ЗаказНаСборку) <> Неопределено Тогда

		ДобавитьСекциюОбъединения(ТекстЗапроса, ПервыйЗапрос);
		ТекстЗапроса = ТекстЗапроса + РегистрыНакопления.ЗаказыНаСборку.ТекстЗапросаЗаказовНоменклатуры();
		ПервыйЗапрос = Ложь;

	КонецЕсли;

	Если ДоступныеДокументы.Найти(Документы.ЗаказНаПеремещение) <> Неопределено Тогда

		ДобавитьСекциюОбъединения(ТекстЗапроса, ПервыйЗапрос);
		ТекстЗапроса = ТекстЗапроса + РегистрыНакопления.ЗаказыНаПеремещение.ТекстЗапросаЗаказовНоменклатуры();
		ПервыйЗапрос = Ложь;

	КонецЕсли;

	ТекстОбъединения =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Заказ КАК Заказ
		|{ВЫБРАТЬ
		|	Заказ КАК Заказ}
		|ИЗ
		|	(ОбъединениеЗаказов) КАК Т";
		
	ТекстЗапроса = СтрЗаменить(ТекстОбъединения, "ОбъединениеЗаказов", ТекстЗапроса);

	Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаФильтрНоменклатуры()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВтФильтрНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.Ссылка.ЭтоГруппа
		|{ГДЕ
		|	СпрНоменклатура.Ссылка.* КАК Номенклатура}
		|;
		|
		|/////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Номенклатура КАК Номенклатура
		|{ВЫБРАТЬ
		|	Номенклатура.* КАК Номенклатура}
		|ИЗ
		|	ВтФильтрНоменклатуры КАК Т";

Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСекциюОбъединения(ТекстЗапроса, ПервыйЗапрос)

	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаЗаказы(ДоступныеДокументы, ЕстьФильтр)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)                 КАК Заказ,
	|	0                                                            КАК КодСтроки,
	|	0                                                            КАК НомерСтроки,
	|	0                                                            КАК НомерСтрокиПродукция,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК Продукция,
	|	НЕОПРЕДЕЛЕНО                                                 КАК Этап,
	|	0                                                            КАК ЭтапПорядок,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                     КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                 КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)       КАК Подразделение,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка)      КАК ВариантОбеспечения,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)                                  КАК ДатаОтгрузки,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)   КАК Упаковка,
	|	0                                                            КАК Количество,
	|	
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)                                  КАК ЖелаемаяДатаОтгрузки,
	|	ЛОЖЬ                                                         КАК НеОтгружатьЧастями,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)                                  КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)                   КАК Партнер,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка)   КАК Статус,
	|	ЛОЖЬ                                                         КАК СтатусИспользуется
	|
	|ПОМЕСТИТЬ ВтЗаказы
	|ГДЕ
	|	ЛОЖЬ
	|
	|//ТекстНабораЗапросов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад,
	|	Назначение
	|;
	|
	|/////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Заказ                КАК Заказ,
	|	Т.КодСтроки            КАК КодСтроки,
	|	Т.Номенклатура         КАК Номенклатура,
	|	Т.Характеристика       КАК Характеристика,
	|	Т.Склад                КАК Склад,
	|	Т.Назначение           КАК Назначение,
	|	Т.Подразделение        КАК Подразделение,
	|	Т.НомерСтроки          КАК НомерСтроки,
	|	Т.НомерСтрокиПродукция КАК НомерСтрокиПродукция,
	|	Т.Продукция            КАК Продукция,
	|	Т.Этап                 КАК Этап,
	|	Т.ЭтапПорядок          КАК ЭтапПорядок,
	|	Т.Количество           КАК Количество,
	|	Т.ВариантОбеспечения   КАК ВариантОбеспечения,
	|	Т.Упаковка             КАК Упаковка,
	|	
	|	Т.ДатаОтгрузки         КАК ДатаОтгрузки,
	|	
	|	Т.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	
	|	Т.НеОтгружатьЧастями   КАК НеОтгружатьЧастями,
	|	Т.Дата                 КАК Дата,
	|	Т.Партнер              КАК Партнер,
	|	Т.Статус               КАК Статус,
	|	Т.СтатусИспользуется   КАК СтатусИспользуется
	|
	|{ВЫБРАТЬ
	|	Заказ.*                КАК Заказ,
	|	КодСтроки              КАК КодСтроки,
	|	Склад.*                КАК Склад,
	|	Назначение.*           КАК Назначение,
	|	Подразделение.*        КАК Подразделение,
	|	НомерСтроки            КАК НомерСтроки,
	|	НомерСтрокиПродукция   КАК НомерСтрокиПродукция,
	|	Этап                   КАК Этап,
	|	ЭтапПорядок            КАК ЭтапПорядок,
	|	Продукция              КАК Продукция,
	|	Количество             КАК Количество,
	|	ВариантОбеспечения     КАК ВариантОбеспечения,
	|	ДатаОтгрузки           КАК ДатаОтгрузки,
	|	Упаковка               КАК Упаковка,
	|	ЖелаемаяДатаОтгрузки   КАК ЖелаемаяДатаОтгрузки,
	|	НеОтгружатьЧастями     КАК НеОтгружатьЧастями,
	|	Дата                   КАК Дата,
	|	Партнер                КАК Партнер,
	|	Статус                 КАК Статус,
	|	СтатусИспользуется     КАК СтатусИспользуется}
	|ИЗ
	|	ВтЗаказы КАК Т";
	
	ТекстНабораЗапросов = "";
	ТекстОбъединения =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Для Каждого МенеджерОбъекта Из ДоступныеДокументы Цикл
		ТекстНабораЗапросов = ТекстНабораЗапросов + ТекстОбъединения + МенеджерОбъекта.ТекстЗапросаЗаказовКОбеспечению();
	КонецЦикла;
	
	Если Не ЕстьФильтр Тогда
		ТекстНабораЗапросов = СтрЗаменить(ТекстНабораЗапросов, "Т.Ссылка В (&Заказы)", "ИСТИНА");
		ТекстНабораЗапросов = СтрЗаменить(ТекстНабораЗапросов, "Распоряжение В (&Заказы)", "ИСТИНА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстНабораЗапросов", ТекстНабораЗапросов);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПолучениеИтоговПриОбходеТаблицыТовары

&НаСервере
Процедура ОбновитьИтогиПоЗаказу(Заказ, Итоги)

	Если Заказ.СтатусИспользуется Тогда
		Итоги.СтатусыИспользуются = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаДанныхНаФорму

#Область ОбновлениеСтрокТаблицыТовары

&НаСервере
Процедура ОбновитьСтрокиТаблицыТовары(ПотребностиНовые)

	ПараметрыСравнения = ПараметрыСравненияТаблиц("Потребности");
	ПараметрыСравненияЗаказы = ПараметрыСравненияТаблиц("Заказы");
	Индекс      = 0;
	ИндексНовой = 0;
	СтрокиТовары = Неопределено;
	СтрокиКУдалению = Новый Массив();

	ДоступнаГруппировкаТоваров = Ложь;
	Пока ИндексНовой < ПотребностиНовые.Количество() Цикл


		Если Индекс < Потребности.Количество() Тогда

			Если СтрокаТаблицыБольше(ПотребностиНовые[ИндексНовой], Потребности[Индекс], ПараметрыСравнения) Тогда

				СтрокаТовары = Товары.НайтиПоИдентификатору(Потребности[Индекс].Идентификатор);
				СтрокиКУдалению.Добавить(СтрокаТовары);
				Потребности.Удалить(Потребности[Индекс]);

			ИначеЕсли СтрокаТаблицыРавна(ПотребностиНовые[ИндексНовой], Потребности[Индекс], ПараметрыСравнения) Тогда

				СтрокаТовары = Товары.НайтиПоИдентификатору(Потребности[Индекс].Идентификатор);
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ПотребностиНовые[ИндексНовой]);
				СтрокаЗаказ = СтрокаТовары.ПолучитьРодителя();
				ЗаполнитьГруппировкуЗаказ(СтрокаЗаказ, ПотребностиНовые[ИндексНовой], ПараметрыСравнения.Поля.Заполняемые);

				Индекс = Индекс + 1;
				ИндексНовой = ИндексНовой + 1;

			ИначеЕсли СтрокаТаблицыРавна(ПотребностиНовые[ИндексНовой], Потребности[Индекс], ПараметрыСравненияЗаказы) Тогда

				Если СтрокаТовары <> Неопределено И КлючиГруппировкиРавны(ПотребностиНовые[ИндексНовой], СтрокаТовары) Тогда
					СтрокиТовары = СтрокаТовары.ПолучитьРодителя().ПолучитьЭлементы();
					СтрокаТовары = СтрокиТовары.Вставить(СтрокиТовары.Индекс(СтрокаТовары) + 1);
				Иначе
					СтрокаТовары = Товары.НайтиПоИдентификатору(Потребности[Индекс].Идентификатор);
					СтрокиТовары = СтрокаТовары.ПолучитьРодителя().ПолучитьЭлементы();
					СтрокаТовары = СтрокиТовары.Вставить(0);
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(СтрокаТовары, ПотребностиНовые[ИндексНовой]);
				СтрокаЗаказ = СтрокаТовары.ПолучитьРодителя();
				ЗаполнитьГруппировкуЗаказ(СтрокаЗаказ, ПотребностиНовые[ИндексНовой], ПараметрыСравнения.Поля.Заполняемые);

				СтрокаПотребности = Потребности.Вставить(Индекс);
				ЗаполнитьЗначенияСвойств(СтрокаПотребности, ПотребностиНовые[ИндексНовой]);
				СтрокаПотребности.Идентификатор = СтрокаТовары.ПолучитьИдентификатор();
				Индекс = Индекс + 1;
				ИндексНовой = ИндексНовой + 1;

			Иначе

				Если СтрокаТовары <> Неопределено И КлючиГруппировкиРавны(ПотребностиНовые[ИндексНовой], СтрокаТовары) Тогда
 					СтрокиТовары = СтрокаТовары.ПолучитьРодителя().ПолучитьЭлементы();
					СтрокаТовары = СтрокиТовары.Вставить(СтрокиТовары.Индекс(СтрокаТовары) + 1);
					СтрокаЗаказ = СтрокаТовары.ПолучитьРодителя();
					ЗаполнитьГруппировкуЗаказ(СтрокаЗаказ, ПотребностиНовые[ИндексНовой], ПараметрыСравнения.Поля.Заполняемые);

				ИначеЕсли СтрокаТовары <> Неопределено Тогда
					СтрокаЗаказ = СтрокаТовары.ПолучитьРодителя();
					СтрокиЗаказы = Товары.ПолучитьЭлементы();
					СтрокаЗаказ = СтрокиЗаказы.Вставить(СтрокиЗаказы.Индекс(СтрокаЗаказ) + 1);
					ЗаполнитьГруппировкуЗаказ(СтрокаЗаказ, ПотребностиНовые[ИндексНовой], ПараметрыСравнения.Поля.Заполняемые);
					СтрокаТовары = СтрокаЗаказ.ПолучитьЭлементы().Вставить(0);
				Иначе
					СтрокиЗаказы = Товары.ПолучитьЭлементы();
					СтрокаЗаказ = СтрокиЗаказы.Вставить(0);
					ЗаполнитьГруппировкуЗаказ(СтрокаЗаказ, ПотребностиНовые[ИндексНовой], ПараметрыСравнения.Поля.Заполняемые);
					СтрокаТовары = СтрокаЗаказ.ПолучитьЭлементы().Вставить(0);
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(СтрокаТовары, ПотребностиНовые[ИндексНовой]);
				СтрокаПотребности = Потребности.Вставить(Индекс);
				ЗаполнитьЗначенияСвойств(СтрокаПотребности, ПотребностиНовые[ИндексНовой]);
				СтрокаПотребности.Идентификатор = СтрокаТовары.ПолучитьИдентификатор();
				Индекс = Индекс + 1;
				ИндексНовой = ИндексНовой + 1;

			КонецЕсли;

		Иначе

			Если СтрокаТовары <> Неопределено И КлючиГруппировкиРавны(ПотребностиНовые[ИндексНовой], СтрокаТовары) Тогда
 				СтрокиТовары = СтрокаТовары.ПолучитьРодителя().ПолучитьЭлементы();
				СтрокаТовары = СтрокиТовары.Вставить(СтрокиТовары.Индекс(СтрокаТовары) + 1);
				СтрокаЗаказ = СтрокаТовары.ПолучитьРодителя();
				ЗаполнитьГруппировкуЗаказ(СтрокаЗаказ, ПотребностиНовые[ИндексНовой], ПараметрыСравнения.Поля.Заполняемые);
			ИначеЕсли СтрокаТовары <> Неопределено Тогда
				СтрокаЗаказ = СтрокаТовары.ПолучитьРодителя();
				СтрокиЗаказы = Товары.ПолучитьЭлементы();
				СтрокаЗаказ = СтрокиЗаказы.Вставить(СтрокиЗаказы.Индекс(СтрокаЗаказ) + 1);
				ЗаполнитьГруппировкуЗаказ(СтрокаЗаказ, ПотребностиНовые[ИндексНовой], ПараметрыСравнения.Поля.Заполняемые);
				СтрокаТовары = СтрокаЗаказ.ПолучитьЭлементы().Вставить(0);
			Иначе
				СтрокиЗаказы = Товары.ПолучитьЭлементы();
				СтрокаЗаказ = СтрокиЗаказы.Вставить(0);
				ЗаполнитьГруппировкуЗаказ(СтрокаЗаказ, ПотребностиНовые[ИндексНовой], ПараметрыСравнения.Поля.Заполняемые);
				СтрокаТовары = СтрокаЗаказ.ПолучитьЭлементы().Вставить(0);
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(СтрокаТовары, ПотребностиНовые[ИндексНовой]);
			СтрокаПотребности = Потребности.Вставить(Индекс);
			ЗаполнитьЗначенияСвойств(СтрокаПотребности, ПотребностиНовые[ИндексНовой]);
			СтрокаПотребности.Идентификатор = СтрокаТовары.ПолучитьИдентификатор();
			Индекс = Индекс + 1;
			ИндексНовой = ИндексНовой + 1;

		КонецЕсли;

	КонецЦикла;

	Пока Индекс < Потребности.Количество() Цикл

		СтрокаТовары = Товары.НайтиПоИдентификатору(Потребности[Индекс].Идентификатор);
		СтрокиКУдалению.Добавить(СтрокаТовары);
		Потребности.Удалить(Потребности[Индекс]);

	КонецЦикла;

	Для Каждого СтрокаТовары Из СтрокиКУдалению Цикл

		СтрокаЗаказ = СтрокаТовары.ПолучитьРодителя();
		СтрокиТовары = СтрокаЗаказ.ПолучитьЭлементы();
		СтрокиТовары.Удалить(СтрокиТовары.Индекс(СтрокаТовары));

		Если СтрокиТовары.Количество() = 0 Тогда
			СтрокиЗаказы = Товары.ПолучитьЭлементы();
			СтрокиЗаказы.Удалить(СтрокиЗаказы.Индекс(СтрокаЗаказ));
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТаблицыБольше(СтрокаСлева, СтрокаСправа, Параметры)

	Для Каждого ИмяПоля Из Параметры.ПорядокСравнения Цикл

		ЗначениеСлева  = СтрокаСлева[ИмяПоля];
		ЗначениеСправа = СтрокаСправа[ИмяПоля];

		Если ТипЗнч(СтрокаСлева[ИмяПоля]) <> Тип("Дата") Тогда
			ЗначениеСлева  = Строка(ЗначениеСлева);
			ЗначениеСправа = Строка(ЗначениеСправа);
		КонецЕсли;

		Если ЗначениеСлева > ЗначениеСправа Тогда
			Возврат Истина;
		ИначеЕсли ЗначениеСлева < ЗначениеСправа Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТаблицыРавна(СтрокаСлева, СтрокаСправа, Параметры)

	Для Каждого ИмяПоля Из Параметры.ПорядокСравнения Цикл

		Если СтрокаСлева[ИмяПоля] <> СтрокаСправа[ИмяПоля] Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСравненияТаблиц(Режим)

	ПорядокСравнения = Новый Массив();
	
	ПорядокСравнения.Добавить("ЖелаемаяДатаОтгрузки");
	ПорядокСравнения.Добавить("Дата");
	ПорядокСравнения.Добавить("Заказ");
	ПорядокСравнения.Добавить("НомерСтрокиПродукция");
	ПорядокСравнения.Добавить("ЭтапПорядок");

	Заполняемые = "Заказ, Партнер, Статус, ЖелаемаяДатаОтгрузки, НеОтгружатьЧастями, СтатусИспользуется, НомерСтрокиПродукция, Этап, ЭтапПорядок";

	Если Режим = "Потребности" Тогда
		Ключевые = "ЖелаемаяДатаОтгрузки, Дата, Заказ, НомерСтрокиПродукция, ЭтапПорядок, НомерСтроки";
		ПорядокСравнения.Добавить("НомерСтроки");
	Иначе
		Ключевые = "ЖелаемаяДатаОтгрузки, Дата, Заказ, НомерСтрокиПродукция, ЭтапПорядок";
	КонецЕсли;

	Поля = Новый Структура("Заполняемые, Ключевые", Заполняемые, Ключевые);
	ПараметрыСравнения = Новый Структура("ПорядокСравнения, Поля", ПорядокСравнения, Поля);

	Возврат ПараметрыСравнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьГруппировкуЗаказ(Строка, ДанныеЗаполнения, Поля)

	ЗаполнитьЗначенияСвойств(Строка, ДанныеЗаполнения, Поля);
	Строка.ТипСтроки = 1;

	Если Параметры.ВызовИзФормыЗаказа И ДанныеЗаполнения.Заказ = Параметры.РеквизитыЗаказа.Ссылка Тогда

		ЗаказПредставление = НСтр("ru = 'Текущий заказ'");

	Иначе
		ЗаказПредставление = ОбщегоНазначенияУТ.ПолучитьПредставлениеДокумента(
			ДанныеЗаполнения.Заказ, ДанныеЗаполнения.НомерДокумента, ДанныеЗаполнения.Дата);

	КонецЕсли;


	Строка.ЗаказПредставление = ЗаказПредставление;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДатОбеспеченияТаблицыТовары

&НаСервере
Функция ЗаполнитьДатыОбеспеченияПотребностей(ОстаткиИОбороты, ГрафикПоступления, Итоги)

	Работа = Перечисления.ТипыНоменклатуры.Работа;

	СписокКолонокНовый = Новый СписокЗначений();

	ПараметрыОтбораОбособленные   = Новый Структура("Номенклатура, Характеристика, Склад, Назначение");
	ПараметрыОтбораРабот          = Новый Структура("Номенклатура, Характеристика, Назначение, Подразделение");

	ТаблицаОбособленныхПотребностей = ТаблицаОбособленныхПотребностей(); //Обособленные потребности обрабатываются отдельно.

	ПолностьюВНаличии = Истина;
	Для Каждого Заказ Из Товары.ПолучитьЭлементы() Цикл

		Если Параметры.ВызовДляСтрокиПродукции И Не УстановленОтборПоНоменклатуре
			И Заказ.НомерСтрокиПродукция <> Параметры.РеквизитыЗаказа.НомерСтрокиПродукция Тогда
			Продолжить;
		КонецЕсли;

		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Склад");

		Для Каждого Потребность Из Заказ.ПолучитьЭлементы() Цикл

			Если ТребуетсяДинамическоеРаспределениеОстатков(Потребность.ТипНоменклатуры, Потребность.ВариантОбеспечения) Тогда

				НоваяСтрока = ТаблицаОбособленныхПотребностей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Потребность);
				НоваяСтрока.Идентификатор = Потребность.ПолучитьИдентификатор();

			Иначе

				ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Потребность);
				ТаблицаОстатков = ОстаткиИобороты.Товары.НайтиСтроки(ПараметрыОтбора);
				
				ГрафикПоступленияТовара = ГрафикПоступления.НайтиСтроки(ПараметрыОтбора);
				Если ГрафикПоступленияТовара.Количество() > 0 Тогда
					ТаблицаОстатков = СкорректироватьТаблицуОстатковГрафикомПоступления(
						ОстаткиИобороты.Товары.Скопировать(ТаблицаОстатков),
						ГрафикПоступленияТовара);
				КонецЕсли;
				
				ДатыОбеспечения = ДатыОбеспеченияПотребности(Потребность, ТаблицаОстатков);
				ПослеЗаполненияДатОбеспечения(Потребность, СписокКолонокНовый, ПолностьюВНаличии, ДатыОбеспечения);

			КонецЕсли;

		КонецЦикла;

		ОбновитьИтогиПоЗаказу(Заказ, Итоги);

	КонецЦикла;

	ЗаполнитьДатыОбеспеченияОбособленныхПотребностей(
		ТаблицаОбособленныхПотребностей, СписокКолонокНовый, ПолностьюВНаличии, ОстаткиИОбороты);

	Если ПолностьюВНаличии Тогда //для картинки обеспечения "в целом по заказу"
		ВставитьЭлементВСписокЗначений(СписокКолонокНовый, НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;

	Возврат СписокКолонокНовый;

КонецФункции

#Область КоррекцияГрафикаПоступленияСУчетомДвиженийЗаказов

&НаСервере
Функция СкорректироватьТаблицуОстатковГрафикомПоступления(ТаблицаОстатков, ГрафикПоступленияТовара)
	
	Если ГрафикПоступленияТовара.Количество() = 0 Или ТаблицаОстатков.Количество() = 0 Тогда
		Возврат ТаблицаОстатков;
	КонецЕсли;
	
	ПерваяСтрока = ТаблицаОстатков[0];
	ИтогОстаток = ПерваяСтрока.Остаток;
	ТекущийИндекс = 0;
	Для Индекс = 0 По ГрафикПоступленияТовара.Количество() - 1 Цикл
		
		СтрокаГрафика = ГрафикПоступленияТовара[Индекс];
		ИтогОстаток = ИтогОстаток - СтрокаГрафика.Количество;
		
		Для ИндексОстатки = ТекущийИндекс По ТаблицаОстатков.Количество() - 1 Цикл
			
			СтрокаОстатков = ТаблицаОстатков[ИндексОстатки];
			
			Если СтрокаГрафика.ДатаСобытия > СтрокаОстатков.Период Тогда
				НоваяСтрока = ТаблицаОстатков.Вставить(ИндексОстатки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяСтрока);
				НоваяСтрока.Оборот = - СтрокаГрафика.Количество;
				НоваяСтрока.Период = СтрокаГрафика.ДатаСобытия;
				Прервать;
			ИначеЕсли СтрокаГрафика.ДатаСобытия = СтрокаОстатков.Период Тогда
				СтрокаОстатков.Оборот = СтрокаОстатков.Оборот - СтрокаГрафика.Количество;
				Прервать;
			ИначеЕсли ИндексОстатки = ТаблицаОстатков.Количество() - 1 Тогда
				НоваяСтрока = ТаблицаОстатков.Вставить(ИндексОстатки + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяСтрока);
				НоваяСтрока.Оборот = - СтрокаГрафика.Количество;
				НоваяСтрока.Период = СтрокаГрафика.ДатаСобытия;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		ТекущийИндекс = ИндексОстатки;
		
	КонецЦикла;
	
	ТаблицаОстатков.ЗаполнитьЗначения(ИтогОстаток, "Остаток");
	
	Возврат ТаблицаОстатков;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаКорректировкиГрафикаПоступления(МенеджерВременныхТаблиц, ТекущийЗаказ)
	УстановитьПривилегированныйРежим(Истина);
	ЗапросГрафикаПоступлений = Новый Запрос();
	ЗапросГрафикаПоступлений.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросГрафикаПоступлений.УстановитьПараметр("Ссылка", ТекущийЗаказ);
	ЗапросГрафикаПоступлений.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Заказ                        КАК Заказ,
		|	Заказы.Номенклатура                 КАК Номенклатура,
		|	Заказы.Характеристика               КАК Характеристика,
		|	Заказы.Склад                        КАК Склад
		|ПОМЕСТИТЬ ВтЗаказыИНоменклатура
		|ИЗ
		|	ВтЗаказы КАК Заказы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикПоступленияТоваров КАК ГрафикПоступления
		|		ПО ГрафикПоступления.Регистратор = Заказы.Заказ
		|		 И ГрафикПоступления.Номенклатура   = Заказы.Номенклатура
		|		 И ГрафикПоступления.Характеристика = Заказы.Характеристика
		|		 И ГрафикПоступления.Склад          = Заказы.Склад
		|		 И ГрафикПоступления.Назначение     = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|ГДЕ
		|	Заказы.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И (ГрафикПоступления.КоличествоИзЗаказов <> 0
		|			ИЛИ ГрафикПоступления.КоличествоПодЗаказ <> 0)
		|	И НЕ Заказы.Заказ = &Ссылка
		|	И НЕ Заказы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|;
		|
		|////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заказы.Заказ                        КАК Заказ,
		|	Заказы.Номенклатура                 КАК Номенклатура,
		|	Заказы.Характеристика               КАК Характеристика,
		|	Заказы.Склад                        КАК Склад,
		|	ГрафикПоступления.ДатаСобытия       КАК ДатаСобытия,
		|	
		|	СУММА(ГрафикПоступления.КоличествоИзЗаказов) КАК Количество
		|	
		|ИЗ
		|	ВтЗаказыИНоменклатура КАК Заказы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикПоступленияТоваров КАК ГрафикПоступления
		|		ПО ГрафикПоступления.Регистратор = Заказы.Заказ
		|		 И ГрафикПоступления.Номенклатура   = Заказы.Номенклатура
		|		 И ГрафикПоступления.Характеристика = Заказы.Характеристика
		|		 И ГрафикПоступления.Склад          = Заказы.Склад
		|		 И ГрафикПоступления.Назначение     = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|ГДЕ
		|	ГрафикПоступления.КоличествоИзЗаказов <> 0
		|СГРУППИРОВАТЬ ПО
		|	Заказы.Заказ, Заказы.Номенклатура, Заказы.Характеристика, Заказы.Склад, ГрафикПоступления.ДатаСобытия
		|УПОРЯДОЧИТЬ ПО
		|	Заказ, Номенклатура, Характеристика, Склад, ДатаСобытия УБЫВ";
	
	ГрафикПоступлений = ЗапросГрафикаПоступлений.Выполнить().Выгрузить();
	ГрафикПоступлений.Индексы.Добавить("Заказ,Номенклатура,Характеристика,Склад");
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ГрафикПоступлений;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДатыОбеспеченияОбособленныхПотребностей(
	ТаблицаОбособленныхПотребностей, СписокКолонокНовый, ПолностьюВНаличии, ОстаткиИОбороты)

	Работа = Перечисления.ТипыНоменклатуры.Работа;

	ПараметрыОтбораОбособленныеПоВсемСкладам = Новый Структура("Номенклатура, Характеристика, Назначение");
	ПараметрыОтбораОбособленные   = Новый Структура("Номенклатура, Характеристика, Склад, Назначение");
	ПараметрыОтбораРабот          = Новый Структура("Номенклатура, Характеристика, Назначение, Подразделение");

	ТаблицаОбособленныхПотребностей.Сортировать(
		"Заказ, Номенклатура, Характеристика, Подразделение, Склад, ДатаОтгрузки, НомерСтроки", Новый СравнениеЗначений());

	ПотребностиОднойАналитики = ТаблицаОбособленныхПотребностей();

	Ключ = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаПодразделениеНазначениеСклад();
	Ключ.Вставить("Заказ");
	ВсегоСтрок = ТаблицаОбособленныхПотребностей.Количество();

	Если ВсегоСтрок > 0 Тогда

		Для Индекс = 0 По ВсегоСтрок Цикл

			Если Индекс < ВсегоСтрок Тогда
				ТекущаяСтрока = ТаблицаОбособленныхПотребностей[Индекс];
			КонецЕсли;
			Если ОбеспечениеКлиентСервер.ИзменилсяКлюч(Ключ, ТекущаяСтрока) Или Индекс = ВсегоСтрок Тогда

				ЗаполнитьЗначенияСвойств(Ключ, ТекущаяСтрока);

				Если ПотребностиОднойАналитики.Количество() > 0 Тогда

					ПараметрыОтбора = ?(ПотребностиОднойАналитики[0].ТипНоменклатуры = Работа, ПараметрыОтбораРабот, ПараметрыОтбораОбособленные);
					ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ПотребностиОднойАналитики[0]);
					ЗаполнитьЗначенияСвойств(ПараметрыОтбораОбособленныеПоВсемСкладам, ПотребностиОднойАналитики[0]);
					ТаблицаОстатков = ?(ПотребностиОднойАналитики[0].ТипНоменклатуры = Работа,
						ОстаткиИОбороты.Работы.Скопировать(ПараметрыОтбора),
						ОстаткиИОбороты.ТоварыОбособленные.Скопировать(ПараметрыОтбора));
					
					ТаблицаОстатковПоВсемСкладам = ОстаткиИОбороты.ТоварыОбособленныеПоВсемСкладам.Скопировать(
						ПараметрыОтбораОбособленныеПоВсемСкладам);
					ВычестьОстатокСклада(ТаблицаОстатковПоВсемСкладам, ТаблицаОстатков);
						
					ЗаполнитьДатыОбеспеченияОбособленныхПотребностейОднойАналитики(
						ПотребностиОднойАналитики,
						ТаблицаОстатков,
						ТаблицаОстатковПоВсемСкладам,
						СписокКолонокНовый,
						ПолностьюВНаличии);
					
					ПотребностиОднойАналитики.Очистить();
					
				КонецЕсли;

			КонецЕсли;

			НоваяСтрока = ПотребностиОднойАналитики.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВычестьОстатокСклада(ТаблицаОстатковПоВсемСкладам, ТаблицаОстатков)
	
	Если ТаблицаОстатковПоВсемСкладам.Количество() > 0 И ТаблицаОстатков.Количество() > 0 Тогда
		
		ТаблицаОстатковПоВсемСкладам[0].Количество = ТаблицаОстатковПоВсемСкладам[0].Количество - ТаблицаОстатков[0].Остаток;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыОбеспеченияОбособленныхПотребностейОднойАналитики(
			Потребности, ТаблицаОстатков, ТаблицаОстатковПоВсемСкладам, СписокКолонокНовый, ПолностьюВНаличии)
	
	// Таблица остатков отсортирована в порядке убывания периода.
	// Таблица потребностей отсортирована в порядке возврастания периода.
	ВсегоСтрок = ТаблицаОстатков.Количество();
	
	// Добавление строки "На складе", если необходимо.
	Если ВсегоСтрок = 0 Или ТаблицаОстатков[ВсегоСтрок - 1].Период > '00010101' Тогда
		
		ВсегоСтрок = ВсегоСтрок + 1;
		НоваяСтрока = ТаблицаОстатков.Вставить(ВсегоСтрок);
		НоваяСтрока.Период = '00010101';
		НоваяСтрока.Оборот = 0;
		НоваяСтрока.Остаток = 0;
		
	КонецЕсли;
	
	НарастающийИтог = ТаблицаОстатков[0].Остаток - ТаблицаОстатков.Итог("Оборот");
	ИндексВТаблицеОстатков = ВсегоСтрок - 1;
	
	// Обход потребностей.
	ВсегоСтрокПотребности = Потребности.Количество();
	ИзмениласьЗаписьОстатка = Истина;
	Для Индекс = 0 По ВсегоСтрокПотребности - 1 Цикл
		
		СтрокаПотребности = Товары.НайтиПоИдентификатору(Потребности[Индекс].Идентификатор);
		ДатыОбеспечения = ДатыОбеспечения();
		ДатыОбеспечения.ЕстьДатаПолногоОбеспечения    = Ложь;
		ДатыОбеспечения.ЕстьДатаЧастичногоОбеспечения = Ложь;
		ПослеЗаполненияДатОбеспечения(СтрокаПотребности, СписокКолонокНовый, ПолностьюВНаличии, ДатыОбеспечения); // для отражения желаемой даты поставки в списке колонок
		
		Пока Истина Цикл
			
			СтрокаОстатка = ТаблицаОстатков[ИндексВТаблицеОстатков];
			
			Если ИзмениласьЗаписьОстатка Тогда
				НарастающийИтог = НарастающийИтог + СтрокаОстатка.Оборот;
				ИзмениласьЗаписьОстатка = Ложь;
			КонецЕсли;
			
			Если Не ДатыОбеспечения.ЕстьДатаПолногоОбеспечения И СтрокаПотребности.Количество <= НарастающийИтог
					Или Не ДатыОбеспечения.ЕстьДатаЧастичногоОбеспечения И НарастающийИтог > 0 Тогда // нужны минимальные даты
						
					ПроверитьОбновитьДатыОбеспечения(СтрокаПотребности.Количество, НарастающийИтог, СтрокаОстатка.Период, ДатыОбеспечения);
					ПослеЗаполненияДатОбеспечения(СтрокаПотребности, СписокКолонокНовый, ПолностьюВНаличии, ДатыОбеспечения);
					
			КонецЕсли;
			
			Если НарастающийИтог >= СтрокаПотребности.Количество Или ИндексВТаблицеОстатков = 0 Тогда
				
				НарастающийИтог = НарастающийИтог - СтрокаПотребности.Количество;
				Прервать;
				
			Иначе
				
				ИзмениласьЗаписьОстатка = Истина;
				ИндексВТаблицеОстатков = ИндексВТаблицеОстатков - 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнение признаков "ОбеспечениеПоВсемСкладам".
		КоличествоНеОбеспеченоНаСкладеОтгрузки = Мин(СтрокаПотребности.Количество, -Мин(НарастающийИтог, 0));
		Если ТаблицаОстатковПоВсемСкладам.Количество() > 0 И ТаблицаОстатковПоВсемСкладам[0].Количество > 0 Тогда
			
			Если ТаблицаОстатковПоВсемСкладам[0].Количество >= КоличествоНеОбеспеченоНаСкладеОтгрузки Тогда
				
				ТаблицаОстатковПоВсемСкладам[0].Количество = ТаблицаОстатковПоВсемСкладам[0].Количество - КоличествоНеОбеспеченоНаСкладеОтгрузки;
				
				Если КоличествоНеОбеспеченоНаСкладеОтгрузки > 0 Тогда
					ДатыОбеспечения.ЕстьПолноеОбеспечениеПоВсемСкладам = Истина;
				КонецЕсли;
				
			Иначе
				
				ТаблицаОстатковПоВсемСкладам[0].Количество = 0;
				
				Если КоличествоНеОбеспеченоНаСкладеОтгрузки > 0 Тогда
					ДатыОбеспечения.ЕстьЧастичноеОбеспечениеПоВсемСкладам = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаПотребности, ДатыОбеспечения, "ЕстьПолноеОбеспечениеПоВсемСкладам, ЕстьЧастичноеОбеспечениеПоВсемСкладам");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаОбособленныхПотребностей()

	Таблица = Новый ТаблицаЗначений();

	Таблица.Колонки.Добавить("Заказ");
	Таблица.Колонки.Добавить("Номенклатура",                  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ТипНоменклатуры",               Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	Таблица.Колонки.Добавить("Характеристика",                Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Склад",                         Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("Подразделение",                 Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Таблица.Колонки.Добавить("Назначение",                    Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("ДатаОтгрузки",                  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));

	Таблица.Колонки.Добавить("Идентификатор",                 ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0));
	Таблица.Колонки.Добавить("НомерСтроки",                   ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0));

	Возврат Таблица;

КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяДинамическоеРаспределениеОстатков(ТипНоменклатуры, ВариантОбеспечения)
	
	Результат = ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно")
		Или ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПослеЗаполненияДатОбеспечения(Потребность, СписокКолонокНовый, ЗаказПолностьюВНаличии, ДатыОбеспечения)

	ЗаполнитьЗначенияСвойств(Потребность,  ДатыОбеспечения);
	ЗаполнитьВНаличииЗаказано(Потребность, ДатыОбеспечения);

	ОбновитьСписокКолонокПоДаннымОбеспеченияСтроки(СписокКолонокНовый, Потребность, ДатыОбеспечения);

	//Обновления признака обеспечения по заказу в целом.
	Если Не ДатыОбеспечения.ЕстьДатаПолногоОбеспечения Или ЗначениеЗаполнено(ДатыОбеспечения.ДатаПолногоОбеспечения) Тогда
		ЗаказПолностьюВНаличии = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКолонокПоДаннымОбеспеченияСтроки(СписокКолонок, Потребность, ДатыОбеспечения)

	Если ДатыОбеспечения.ЕстьДатаПолногоОбеспечения Тогда
		ВставитьЭлементВСписокЗначений(СписокКолонок, ДатыОбеспечения.ДатаПолногоОбеспечения);
	КонецЕсли;
	Если ДатыОбеспечения.ЕстьДатаЧастичногоОбеспечения Тогда
		ВставитьЭлементВСписокЗначений(СписокКолонок, ДатыОбеспечения.ДатаЧастичногоОбеспечения);
	КонецЕсли;

	ВставитьЭлементВСписокЗначений(СписокКолонок, Потребность.ЖелаемаяДатаОтгрузки);
	Если Потребность.Заказано Тогда
		ВставитьЭлементВСписокЗначений(СписокКолонок, Потребность.ДатаОтгрузки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВНаличииЗаказано(Потребность, ДатыОбеспечения);

	Потребность.ВНаличии = Ложь;
	Потребность.Заказано = Ложь;

	Если Потребность.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
		Или Потребность.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда

		Если ДатыОбеспечения.ЕстьДатаПолногоОбеспечения И ДатыОбеспечения.ДатаПолногоОбеспечения = '00010101'
			И Потребность.ДатаОтгрузки <= НачалоДня(ТекущаяДатаСеанса()) Тогда

			Потребность.ВНаличии = Истина;

		ИначеЕсли ДатыОбеспечения.ЕстьДатаПолногоОбеспечения Тогда
			Потребность.Заказано = Истина;

		ИначеЕсли ДатыОбеспечения.ЕстьДатаЧастичногоОбеспечения
					И Потребность.ДатаОтгрузки < ДатыОбеспечения.ДатаЧастичногоОбеспечения
					И ДатыОбеспечения.ДатаЧастичногоОбеспечения < Потребность.БлижайшаяДатаПоставки Тогда
			Потребность.Заказано = Истина;
			
		КонецЕсли;

	ИначеЕсли Потребность.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
		Или Потребность.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда

		Потребность.ВНаличии = Истина;

	ИначеЕсли Потребность.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда
		Потребность.Заказано = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДатыОбеспеченияПотребности(Потребность, ТаблицаОстатков)

	ДатыОбеспечения = ДатыОбеспечения();
	ДатыОбеспечения.ЕстьДатаПолногоОбеспечения    = Ложь;
	ДатыОбеспечения.ЕстьДатаЧастичногоОбеспечения = Ложь;
	ДатыОбеспечения.ЕстьПолноеОбеспечениеПоВсемСкладам = Ложь;
	ДатыОбеспечения.ЕстьЧастичноеОбеспечениеПоВсемСкладам = Ложь;

	Если ТаблицаОстатков.Количество() = 0
		И (Потребность.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
			Или Потребность.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно) Тогда

		//Назначения еще нет, документ не записан.
		ДатыОбеспечения.ЕстьДатаПолногоОбеспечения = Ложь;
		ДатыОбеспечения.ЕстьДатаЧастичногоОбеспечения = Ложь;
		Возврат ДатыОбеспечения;

	КонецЕсли;

	НарастающийИтог = ТаблицаОстатков[0].Остаток;

	КорректироватьИтог = Потребность.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
		Или Потребность.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада")
		Или Потребность.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов");

	Если КорректироватьИтог Тогда
		НарастающийИтог = НарастающийИтог + Потребность.Количество;
	КонецЕсли;

	МинимальноеЗначение = НарастающийИтог;

	Корректировать = Потребность.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов");

	Индекс = 0;
	Пока Индекс < ТаблицаОстатков.Количество() Цикл

		ДвижениеГрафика = ТаблицаОстатков[Индекс];
		ПериодДоступности = ДвижениеГрафика.Период;

		Если Корректировать И Потребность.ДатаОтгрузки > ДвижениеГрафика.Период Тогда
			ПериодДоступности = Потребность.ДатаОтгрузки;
		Иначе
			НарастающийИтог = НарастающийИтог - ДвижениеГрафика.Оборот;
			Индекс = Индекс + 1;
		КонецЕсли;

		Если Корректировать И Потребность.ДатаОтгрузки >= ДвижениеГрафика.Период Тогда
			
			НарастающийИтог = НарастающийИтог - Потребность.Количество;
			Корректировать = Ложь;
			
		КонецЕсли;

		Если МинимальноеЗначение > НарастающийИтог Тогда
			ПроверитьОбновитьДатыОбеспечения(Потребность.Количество, МинимальноеЗначение, ПериодДоступности, ДатыОбеспечения);
			МинимальноеЗначение = НарастающийИтог;
		КонецЕсли;

	КонецЦикла;

	Если Корректировать Тогда
		ПроверитьОбновитьДатыОбеспечения(Потребность.Количество, МинимальноеЗначение, Потребность.ДатаОтгрузки, ДатыОбеспечения);
		МинимальноеЗначение = НарастающийИтог - Потребность.Количество;
	КонецЕсли;

	ПроверитьОбновитьДатыОбеспечения(Потребность.Количество, МинимальноеЗначение, '00010101', ДатыОбеспечения);//доступно со склада

	Возврат ДатыОбеспечения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатыОбеспечения()
	
	Результат = Новый Структура("ЕстьДатаПолногоОбеспечения,
	                        |ЕстьДатаЧастичногоОбеспечения,
	                        |ДатаПолногоОбеспечения,
	                        |ДатаЧастичногоОбеспечения,
	                        |ЕстьЧастичноеОбеспечениеПоВсемСкладам,
	                        |ЕстьПолноеОбеспечениеПоВсемСкладам");
	Результат.ЕстьЧастичноеОбеспечениеПоВсемСкладам = Ложь;
	Результат.ЕстьПолноеОбеспечениеПоВсемСкладам = Ложь;
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОбновитьДатыОбеспечения(Потребность, Доступно, ПериодДоступности, ДатыОбеспечения)

	Если Доступно >= Потребность Тогда
		ДатыОбеспечения.ЕстьДатаПолногоОбеспечения = Истина;
		ДатыОбеспечения.ДатаПолногоОбеспечения = ПериодДоступности;
	ИначеЕсли Доступно > 0 Тогда
		ДатыОбеспечения.ЕстьДатаЧастичногоОбеспечения = Истина;
		ДатыОбеспечения.ДатаЧастичногоОбеспечения = ПериодДоступности;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьЭлементВСписокЗначений(Список, Значение)

	Если ЗначениеЗаполнено(Значение) И Список.НайтиПоЗначению(Значение) = Неопределено Тогда
		Список.Добавить(Значение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеКолонокТаблицыТовары

&НаСервере
Процедура ОбновитьКолонкиТаблицыТовары(СписокКолонокНовый)

	ДатыСтарые = СписокКолонок.ВыгрузитьЗначения();

	СписокКолонокНовый.СортироватьПоЗначению();

	ДатыНовые = СписокКолонокНовый.ВыгрузитьЗначения();
	СписокКолонок.ЗагрузитьЗначения(ДатыНовые);

	Различия = РазличияМассивов(ДатыНовые, ДатыСтарые);

	Если Различия.КУдалению.Количество() > 0 Или Различия.КДобавлению.Количество() > 0 Тогда
		ОбновитьРеквизитыФормы(Различия.КУдалению, Различия.КДобавлению);
		ОбновитьЭлементыФормы(Различия.КУдалению,  Различия.КДобавлению);
		ОбновитьУсловноеОформление();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазличияМассивов(Массив1, Массив2)

	КУдалению   = Новый Массив();
	КДобавлению = Новый Массив();

	Индекс1 = 0;
	Индекс2 = 0;
	ДобавленныйЭлемент = Неопределено;
	Пока Индекс1 < Массив1.Количество() Цикл

		Если Индекс2 < Массив2.Количество() Тогда

			Если Массив1[Индекс1] > Массив2[Индекс2] Тогда

				КУдалению.Добавить(Массив2[Индекс2]);
				Индекс2 = Индекс2 + 1;

			ИначеЕсли Массив1[Индекс1] = Массив2[Индекс2] Тогда

				Если ДобавленныйЭлемент <> Неопределено Тогда
					ДобавленныйЭлемент.ЗначениеПосле = Массив1[Индекс1];
					ДобавленныйЭлемент = Неопределено;
				КонецЕсли;
				Индекс1 = Индекс1 + 1;
				Индекс2 = Индекс2 + 1;

			Иначе

				Если ДобавленныйЭлемент <> Неопределено Тогда
					ДобавленныйЭлемент.ЗначениеПосле = Массив1[Индекс1];
				КонецЕсли;
				ДобавленныйЭлемент = Новый Структура("Значение, ЗначениеПосле", Массив1[Индекс1]);
				КДобавлению.Добавить(ДобавленныйЭлемент);
				Индекс1 = Индекс1 + 1;

			КонецЕсли;

		Иначе

				Если ДобавленныйЭлемент <> Неопределено Тогда
					ДобавленныйЭлемент.ЗначениеПосле = Массив1[Индекс1];
				КонецЕсли;
				ДобавленныйЭлемент = Новый Структура("Значение, ЗначениеПосле", Массив1[Индекс1]);
				КДобавлению.Добавить(ДобавленныйЭлемент);
				Индекс1 = Индекс1 + 1;

		КонецЕсли;

	КонецЦикла;
	
	Пока Индекс2 < Массив2.Количество() Цикл
		КУдалению.Добавить(Массив2[Индекс2]);
		Индекс2 = Индекс2 + 1;
	КонецЦикла;

	Возврат Новый Структура("КУдалению, КДобавлению", КУдалению, КДобавлению);
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыФормы(КУдалению, КДобавлению)

	ТипКолонки = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3);
	ТипСостояниеОбеспечения = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияОбеспеченияЗаказа");
	ТипИндексКартинки = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0);

	ДобавляемыеРеквизиты = Новый Массив();
	Для каждого Элемент Из КДобавлению Цикл

		Представление = Формат(Элемент.Значение, ФорматИмениКолонки);
		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Количество%1", Представление);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипКолонки, "Товары", Формат(Элемент.Значение, ФорматЗаголовкаКолонки));
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);

		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Состояние%1", Представление);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипСостояниеОбеспечения, "Товары");
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);

		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Картинка%1", Представление);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипИндексКартинки, "Товары");
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);

	КонецЦикла;

	УдаляемыеРеквизиты = Новый Массив();
	Для каждого Дата Из КУдалению Цикл

		Представление = Формат(Дата, ФорматИмениКолонки);
		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Товары.Количество%1", Представление);
		УдаляемыеРеквизиты.Добавить(ИмяРеквизита);

		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Товары.Состояние%1", Представление);
		УдаляемыеРеквизиты.Добавить(ИмяРеквизита);

		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Товары.Картинка%1", Представление);
		УдаляемыеРеквизиты.Добавить(ИмяРеквизита);

	КонецЦикла;

	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы(КУдалению, КДобавлению)

	ТипПоле   = Тип("ПолеФормы");
	ТипГруппа = Тип("ГруппаФормы");
	Картинка = Элементы.КартинкаСоСклада.КартинкаЗначений;
	ГруппаГрафикОтгрузки = Элементы.ГруппаГрафикОтгрузки;

	Индекс = КДобавлению.ВГраница();
	Пока Индекс >= 0 Цикл

		ЭлементПосле = Неопределено;
		Если КДобавлению[Индекс].ЗначениеПосле <> Неопределено Тогда
			Представление = Формат(КДобавлению[Индекс].ЗначениеПосле, ФорматИмениКолонки);
			ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Группа%1", Представление);
			ЭлементПосле = Элементы.Найти(ИмяЭлемента);
		КонецЕсли;

		Представление = Формат(КДобавлению[Индекс].Значение, ФорматИмениКолонки);

		ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Группа%1", Представление);
		ЭлементГруппа = Элементы.Вставить(ИмяЭлемента, ТипГруппа, ГруппаГрафикОтгрузки, ЭлементПосле);
		ЭлементГруппа.Группировка = ГруппировкаКолонок.ВЯчейке;

		ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Количество%1", Представление);
		ЭлементФормы = Элементы.Добавить(ИмяЭлемента, ТипПоле, ЭлементГруппа);
		ЭлементФормы.ПутьКДанным = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Товары.Количество%1", Представление);
		ЭлементФормы.Ширина = 8;
		ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
		ЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи;

		ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Картинка%1", Представление);
		ЭлементФормы = Элементы.Добавить(ИмяЭлемента, ТипПоле, ЭлементГруппа);
		ЭлементФормы.ПутьКДанным = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Товары.Картинка%1", Представление);
		ЭлементФормы.ОтображатьВШапке = Ложь;
		ЭлементФормы.Вид = ВидПоляФормы.ПолеКартинки;
		ЭлементФормы.КартинкаЗначений = Картинка;

		Индекс = Индекс - 1;

	КонецЦикла;

	Для каждого Дата Из КУдалению Цикл

		Представление = Формат(Дата, ФорматИмениКолонки);
		ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Группа%1", Представление);
		ЭлементКУдалению = Элементы.Найти(ИмяЭлемента);
		Элементы.Удалить(ЭлементКУдалению);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСостоянияИРекомендацийТаблицыТовары

&НаСервере
Процедура ЗаполнитьКолонкиСостояниеИРекомендацииТаблицыТовары()

	ДостуныеНаЗаписьТипыДокументов = ДоступныеТипыЗаказов(ДоступныеДокументы("Изменение"));
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	Статистика = СтатистикаРекомендаций();
	Для Каждого Заказ Из Товары.ПолучитьЭлементы() Цикл

		Если Параметры.ВызовДляСтрокиПродукции И Не УстановленОтборПоНоменклатуре
			И Заказ.НомерСтрокиПродукция <> Параметры.РеквизитыЗаказа.НомерСтрокиПродукция Тогда
			Продолжить;
		КонецЕсли;

		СброситьСтатистикуРекомендаций(Статистика);
		ЕстьДоступНаЗаписьДокумента = ДостуныеНаЗаписьТипыДокументов.СодержитТип(ТипЗнч(Заказ.Заказ)) И Не ЭтоРазборка(Заказ.Заказ);

		Заказ.ДоступныеДействия = ОбеспечениеКлиентСервер.ДействияСЗаказом();
		Заказ.ДоступныеДействия.ЕстьОтгружатьЧастями = ДоступноОтгружатьЧастями(Заказ.Заказ);
		Заказ.ДоступныеДействия.ОтгружатьЧастями = Не Заказ.НеОтгружатьЧастями;
		ЕстьРекомендации = Ложь;
		СтрокиТовары = Заказ.ПолучитьЭлементы();
		Заказ.ВсегоСтрок = СтрокиТовары.Количество();

		ИгнорироватьФильтр = Не УстановленОтборПоНоменклатуре
			Или ЗаказыРаскрытые.НайтиПоЗначению(КлючГруппировкиСтрокой(Заказ)) <> Неопределено;

		НомерСтрокиПредставление = 0;

		Для Каждого СтрокаТовары Из СтрокиТовары Цикл

			ЗаполнитьКолонкиСостояниеВСтрокеТовары(СтрокаТовары);
			ИмяКолонки = ИмяКолонкиКоличества(СтрокаТовары, "Количество", ФорматИмениКолонки);
			СтрокаТовары[ИмяКолонки] = СтрокаТовары.Количество;
			ИндексРекомендации = ЗаполнитьРекомендацииВСтрокеТовары(СтрокаТовары, Статистика);
			ОбновитьДоступныеДействия(Заказ.ДоступныеДействия, ИндексРекомендации, СтрокаТовары);
			ЕстьРекомендации = ЕстьРекомендации Или ИндексРекомендации > 0;
			ИмяКолонки = ИмяКолонкиКоличества(СтрокаТовары, "Картинка", ФорматИмениКолонки);
			СтрокаТовары[ИмяКолонки] = ИндексРекомендации;

			Если ЕстьДоступНаЗаписьДокумента Тогда
				СтрокаТовары.Действия = РекомендацияПоИндексуКартинки(ИндексРекомендации, СтрокаТовары);
			Иначе
				ТекстНетРекомендации();
			КонецЕсли;

			СтрокаТовары.ФильтрПользовательский = ?(ИгнорироватьФильтр, Ложь, СтрокаТовары.Фильтр);
			Если СтрокаТовары.ФильтрПользовательский Тогда
				Заказ.ВсегоСтрок = Заказ.ВсегоСтрок - 1;
			КонецЕсли;

			СтрокаТовары.НомерСтрокиПредставление = СтрокаТовары.НомерСтроки;

		КонецЦикла;

		Если Заказ.НеОтгружатьЧастями Тогда
			ЕстьРекомендации = ПерезаполнитьРекомендации(Заказ, Статистика, ЕстьДоступНаЗаписьДокумента) Или
				Заказ.ДоступныеДействия.ЕстьОтгружатьЧастями И ЕстьРекомендации;
		КонецЕсли;

		Если УстановленОтборПоНоменклатуре Тогда
			Если ЗаказыРаскрытые.НайтиПоЗначению(КлючГруппировкиСтрокой(Заказ)) <> Неопределено Тогда
				Заказ.Действия = ТекстПоказатьОтобраннуюНоменклатуру();
			Иначе
				Заказ.Действия = ТекстПоказатьВсюНоменклатуру();
			КонецЕсли;
		Иначе
			Заказ.Действия = ?(ЕстьРекомендации И ЕстьДоступНаЗаписьДокумента, ТекстДействияСЗаказом(), ТекстНетРекомендации());
		КонецЕсли;
		ЗаполнитьРекомендацииПоЗаказу(Заказ, Статистика);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЭтоРазборка(Ссылка)

	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		Возврат Ложь;
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХозяйственнаяОперация")
		= Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьДоступныеДействия(ДоступныеДействия, ИндексРекомендации, СтрокаТовары)

	ВНаличии                 = СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	ЗапланироватьПеремещение = СтрокаТовары.ЕстьПолноеОбеспечениеПоВсемСкладам;
	
	ДоступныеДействия.Исправить =
		ДоступныеДействия.Исправить Или ИндексРекомендации = ИндексКартинкиДействий("СдвинутьОшибка");

	ДоступныеДействия.СнятьРезервы =
		ДоступныеДействия.СнятьРезервы Или ИндексРекомендации = ИндексКартинкиДействий("СдвинутьВправо");

	ДоступныеДействия.СнятьРезервыСоСклада =
		ДоступныеДействия.СнятьРезервыСоСклада Или ИндексРекомендации = ИндексКартинкиДействий("СдвинутьВправо") И ВНаличии;

	ДоступныеДействия.Ускорить =
		ДоступныеДействия.Ускорить Или ИндексРекомендации = ИндексКартинкиДействий("СдвинутьВлево");
	
	ДоступныеДействия.ЗапланироватьПеремещение = ЗапланироватьПеремещение;

КонецПроцедуры

&НаСервере
Функция ДоступноОтгружатьЧастями(Заказ)

	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заказ);
	Возврат Менеджер.ЕстьНеОтгружатьЧастями();

КонецФункции

&НаСервере
Процедура ЗаполнитьКолонкиСостояниеВСтрокеТовары(СтрокаТовары)

	Дата = '00010101'; //колонка со склада.
	Представление = "СоСклада";
	ЕстьКолонки = Истина;
	Индекс = 0;
	Пока ЕстьКолонки Цикл

		Состояние =
			?(СтрокаТовары.ЕстьДатаПолногоОбеспечения И СтрокаТовары.ДатаПолногоОбеспечения <= Дата,
				Перечисления.СостоянияОбеспеченияЗаказа.ПолностьюОбеспечен,
			?(СтрокаТовары.ЕстьДатаЧастичногоОбеспечения И СтрокаТовары.ДатаЧастичногоОбеспечения <= Дата,
				Перечисления.СостоянияОбеспеченияЗаказа.ЧастичноОбеспечен,
				Перечисления.СостоянияОбеспеченияЗаказа.ПустаяСсылка()));

		Если ЗначениеЗаполнено(Дата) Тогда
			Представление = Формат(Дата, ФорматИмениКолонки);
		КонецЕсли;

		СтрокаТовары["Состояние"  + Представление] = Состояние;
		СтрокаТовары["Количество" + Представление] = 0;
		СтрокаТовары["Картинка"   + Представление] = 0;
		ЕстьКолонки = Индекс < СписокКолонок.Количество();
		Если ЕстьКолонки Тогда
			Дата = СписокКолонок[Индекс].Значение;
		КонецЕсли;
		Индекс = Индекс + 1;

	КонецЦикла;

	Представление = "ПоВсемСкладам";
	Состояние =
		?(СтрокаТовары.ЕстьЧастичноеОбеспечениеПоВсемСкладам, Перечисления.СостоянияОбеспеченияЗаказа.ЧастичноОбеспечен,
			?(СтрокаТовары.ЕстьПолноеОбеспечениеПоВсемСкладам, Перечисления.СостоянияОбеспеченияЗаказа.ПолностьюОбеспечен,
				Перечисления.СостоянияОбеспеченияЗаказа.ПустаяСсылка()));
	СтрокаТовары["Состояние"  + Представление] = Состояние;
	СтрокаТовары["Количество" + Представление] = 0;
	СтрокаТовары["Картинка"   + Представление] = 0;
	
	СтрокаТовары.КоличествоНеОбеспечено = 0;
	СтрокаТовары.КартинкаНеОбеспечено   = 0;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиКоличества(СтрокаТовары, ПрефиксКолонки, ФорматИмениКолонки)

	Если СтрокаТовары.ВНаличии Тогда
		ИмяКолонки = ПрефиксКолонки + "СоСклада";

	ИначеЕсли СтрокаТовары.Заказано Тогда
		Представление = Формат(СтрокаТовары.ДатаОтгрузки, ФорматИмениКолонки);
		ИмяКолонки = ПрефиксКолонки + Представление;

	ИначеЕсли СтрокаТовары.ЕстьПолноеОбеспечениеПоВсемСкладам Тогда
		
		ИмяКолонки = ПрефиксКолонки + "ПоВсемСкладам";
		
	Иначе
		ИмяКолонки = ПрефиксКолонки + "НеОбеспечено";

	КонецЕсли;

	Возврат ИмяКолонки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатистикаРекомендаций()

	Возврат Новый Структура("
		|ЕстьОшибка, ЕстьВправо, ЕстьВлево, ВсеВлево, ЕстьНеОбеспечено,
		|ДатаПолнойОтгрузки,
		|СтрокаВНаличии, СтрокаЗаказано, СтрокаНеОбеспечено");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьСтатистикуРекомендаций(Статистика)

	Статистика.ЕстьОшибка = Ложь;
	Статистика.ЕстьВправо = Ложь;
	Статистика.ЕстьВлево  = Ложь;
	Статистика.ВсеВлево   = Истина;
	Статистика.ЕстьНеОбеспечено = Ложь;
	Статистика.ДатаПолнойОтгрузки = '00010101';
	Статистика.СтрокаВНаличии = Неопределено;
	Статистика.СтрокаЗаказано = Неопределено;
	Статистика.СтрокаНеОбеспечено = Неопределено;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьРекомендацииВСтрокеТовары(СтрокаТовары, Статистика)
	
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	
	ЖелаемаяДатаСлева =
		СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
		Или СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов
			И СтрокаТовары.ДатаОтгрузки > СтрокаТовары.ЖелаемаяДатаОтгрузки
		Или СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
			И СтрокаТовары.ДатаОтгрузки > СтрокаТовары.ЖелаемаяДатаОтгрузки
		Или СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
			И СтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
			И СтрокаТовары.ДатаОтгрузки > СтрокаТовары.ЖелаемаяДатаОтгрузки;
	
	ЖелаемаяДатаСправа =
		СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
			И СтрокаТовары.ЖелаемаяДатаОтгрузки > НачалоТекущегоДня
		Или СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов
			И СтрокаТовары.ЖелаемаяДатаОтгрузки > СтрокаТовары.ДатаОтгрузки
		Или СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
			И СтрокаТовары.ЖелаемаяДатаОтгрузки > СтрокаТовары.ДатаОтгрузки
			И (СтрокаТовары.ВНаличии Или СтрокаТовары.Заказано);
	
	СдвинутьВлево =
		ЖелаемаяДатаСлева И(
			СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
				И СтрокаТовары.ЕстьДатаПолногоОбеспечения
			Или СтрокаТовары.ЕстьДатаПолногоОбеспечения
				И СтрокаТовары.ДатаОтгрузки > СтрокаТовары.ДатаПолногоОбеспечения
			Или СтрокаТовары.ЕстьДатаЧастичногоОбеспечения И Не СтрокаТовары.ВНаличии И Не СтрокаТовары.Заказано
				И (СтрокаТовары.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Обособленно
						И СтрокаТовары.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
					Или СтрокаТовары.ДатаОтгрузки > СтрокаТовары.ДатаЧастичногоОбеспечения
					И СтрокаТовары.БлижайшаяДатаПоставки > СтрокаТовары.ДатаЧастичногоОбеспечения));
	
	СдвинутьОшибка = СтрокаТовары.ВНаличии И(
	                         Не СтрокаТовары.ЕстьДатаПолногоОбеспечения Или
	                         СтрокаТовары.ЕстьДатаПолногоОбеспечения И ЗначениеЗаполнено(СтрокаТовары.ДатаПолногоОбеспечения))
	                     Или СтрокаТовары.Заказано И(
	                         Не СтрокаТовары.ЕстьДатаПолногоОбеспечения Или
	                         СтрокаТовары.ЕстьДатаПолногоОбеспечения И СтрокаТовары.ДатаОтгрузки < СтрокаТовары.ДатаПолногоОбеспечения);
	
	СдвинутьВправо = ЖелаемаяДатаСправа;
	
	Статистика.ЕстьОшибка = Статистика.ЕстьОшибка Или СдвинутьОшибка;
	Статистика.ЕстьВправо = Статистика.ЕстьВправо Или СдвинутьВправо;
	Статистика.ВсеВлево   = Статистика.ВсеВлево И (СдвинутьВлево Или СтрокаТовары.ВНаличии);
	Статистика.ЕстьВлево  = Статистика.ЕстьВлево Или СдвинутьВлево И СтрокаТовары.Заказано;
	Статистика.ЕстьНеОбеспечено = Статистика.ЕстьНеОбеспечено Или (Не СтрокаТовары.ВНаличии И Не СтрокаТовары.Заказано);
	
	Если СтрокаТовары.ЕстьДатаПолногоОбеспечения Тогда
		Статистика.ДатаПолнойОтгрузки = Макс(Статистика.ДатаПолнойОтгрузки, СтрокаТовары.ДатаПолногоОбеспечения);
	КонецЕсли;

	Если Статистика.СтрокаВНаличии = Неопределено И СтрокаТовары.ВНаличии Тогда
		Статистика.СтрокаВНаличии = СтрокаТовары;
	КонецЕсли;

	Если Статистика.СтрокаЗаказано = Неопределено И СтрокаТовары.Заказано Тогда
		Статистика.СтрокаЗаказано = СтрокаТовары;
	КонецЕсли;

	Если Статистика.СтрокаНеОбеспечено = Неопределено И СдвинутьВлево И Не (СтрокаТовары.ВНаличии Или СтрокаТовары.Заказано) Тогда
		Статистика.СтрокаНеОбеспечено = СтрокаТовары;
	КонецЕсли;
	
	ИндексКартинки = 0;
	
	Если СтрокаТовары.ЕстьПолноеОбеспечениеПоВсемСкладам И Не СтрокаТовары.Заказано Тогда
		
		ИндексКартинки = ИндексКартинкиДействий("СдвинутьВлево");
		
	Иначе
		
		Если СдвинутьОшибка Тогда
			ИндексКартинки = ИндексКартинкиДействий("СдвинутьОшибка");
		ИначеЕсли СдвинутьВправо Тогда
			ИндексКартинки = ИндексКартинкиДействий("СдвинутьВправо");
		ИначеЕсли СдвинутьВлево Тогда
			ИндексКартинки = ИндексКартинкиДействий("СдвинутьВлево");
		КонецЕсли;
		
	КонецЕсли;

	Возврат ИндексКартинки;

КонецФункции

&НаСервере
Процедура ЗаполнитьРекомендацииПоЗаказу(Заказ, Статистика)

	Для каждого Элемент Из СписокКолонок Цикл
		Представление = Формат(Элемент.Значение, ФорматИмениКолонки);
		Заказ["Картинка" + Представление] = 0;
	КонецЦикла;
	Заказ.КартинкаНеОбеспечено = 0;

	ИмяКолонки = Формат(СписокКолонок.НайтиПоЗначению(Заказ.ЖелаемаяДатаОтгрузки).Значение, ФорматИмениКолонки);
	Заказ["Картинка" + ИмяКолонки] = ИндексКартинкиДействий("ЖелаемаяДатаОтгрузки");

	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());

	ИмяКолонки = ?(Статистика.ЕстьНеОбеспечено Или Статистика.ЕстьОшибка, "НеОбеспечено",
	             ?(ЗначениеЗаполнено(Статистика.ДатаПолнойОтгрузки),
	             Формат(СписокКолонок.НайтиПоЗначению(Статистика.ДатаПолнойОтгрузки).Значение, ФорматИмениКолонки),
	             ?(Заказ.ЖелаемаяДатаОтгрузки = НачалоТекущегоДня, ИмяКолонки, "СоСклада")));

	Заказ["Картинка" + ИмяКолонки] = ?(Статистика.ЕстьНеОбеспечено Или Статистика.ЕстьОшибка, ИндексКартинкиДействий("ПоследняяОтгрузка"),
		?(Макс(Статистика.ДатаПолнойОтгрузки, НачалоТекущегоДня) <> Заказ.ЖелаемаяДатаОтгрузки,
			ИндексКартинкиДействий("ПоследняяОтгрузка"),
			ИндексКартинкиДействий("ЖелаемаяДатаПоследняя")));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинкиДействий(Рекомендация)

	Индекс =
		?(Рекомендация = "СдвинутьВправо",               1,
		?(Рекомендация = "СдвинутьВлево",                2,
		?(Рекомендация = "СдвинутьОшибка",               3,
		?(Рекомендация = "ЖелаемаяДатаОтгрузки",         4,
		?(Рекомендация = "ПоследняяОтгрузка",            5,
		?(Рекомендация = "ЖелаемаяДатаПоследняя",        6,
		?(Рекомендация = "СвязанныйСдвиг",               7,
		?(Рекомендация = "ВлевоЗаблокировано",           8,
		                                                 Неопределено))))))));

	Возврат Индекс;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РекомендацияПоИндексуКартинки(Индекс, СтрокаТовары)
	
	Заказано                           = СтрокаТовары.Заказано;
	ЕстьПолноеОбеспечениеПоВсемСкладам = СтрокаТовары.ЕстьПолноеОбеспечениеПоВсемСкладам;
	
	Рекомендация = "";
	
	Если Индекс = 1 Тогда
		
		Рекомендация = НСтр("ru = 'Резервировать позже'");
		
	ИначеЕсли Индекс = 2 И СтрокаТовары.Заказано Тогда
		
		Рекомендация = НСтр("ru = 'Резервировать раньше'");
		
	ИначеЕсли Индекс = 2 И Не Заказано И ЕстьПолноеОбеспечениеПоВсемСкладам Тогда
		
		Рекомендация = НСтр("ru = 'Запланировать перемещение'");
		
	ИначеЕсли Индекс = 2 И Не Заказано Тогда
		
		Рекомендация = НСтр("ru = 'Резервировать'");
		
	ИначеЕсли Индекс = 3 Тогда
		
		Рекомендация = НСтр("ru = 'Исправить обеспечение'");
		
	КонецЕсли;
	
	Возврат Рекомендация;

КонецФункции

&НаСервере
Функция ПерезаполнитьРекомендации(Заказ, Статистика, ЕстьДоступНаЗаписьДокумента)

	ЕстьРекомендации = Ложь;
	Для Каждого СтрокаТовары Из Заказ.ПолучитьЭлементы() Цикл

		ИмяКолонки = ИмяКолонкиКоличества(СтрокаТовары, "Картинка", ФорматИмениКолонки);
		ИндексКартинки = СтрокаТовары[ИмяКолонки];

		Если Статистика.ЕстьОшибка Тогда

			Если ИндексКартинки <> ИндексКартинкиДействий("СдвинутьОшибка") Тогда
				Если СтрокаТовары.Заказано Тогда
					ИндексКартинки = ИндексКартинкиДействий("СвязанныйСдвиг");
				ИначеЕсли СтрокаТовары.ВНаличии Тогда
					ИндексКартинки = 0;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли Статистика.СтрокаНеОбеспечено <> Неопределено Тогда

				Если СтрокаТовары.Заказано Тогда
					ИндексКартинки = ИндексКартинкиДействий("СвязанныйСдвиг");
				ИначеЕсли СтрокаТовары.ВНаличии Тогда
					ИндексКартинки = 0;
				КонецЕсли;

		ИначеЕсли Статистика.ЕстьВправо Тогда

			Если СтрокаТовары.ВНаличии Или СтрокаТовары.Заказано Тогда

				Если СтрокаТовары = Статистика.СтрокаВНаличии И ИндексКартинки = ИндексКартинкиДействий("СдвинутьВправо") Тогда
					ИндексКартинки = ИндексКартинкиДействий("СдвинутьВправо");
				ИначеЕсли СтрокаТовары = Статистика.СтрокаЗаказано И ИндексКартинки = ИндексКартинкиДействий("СдвинутьВправо") Тогда
					ИндексКартинки = ИндексКартинкиДействий("СдвинутьВправо");
				Иначе
					ИндексКартинки = ИндексКартинкиДействий("СвязанныйСдвиг");
				КонецЕсли;

			КонецЕсли;

		ИначеЕсли Статистика.ЕстьВлево И Не Статистика.ВсеВлево Тогда

			Если СтрокаТовары.Заказано Тогда

				Если Не СтрокаТовары.ЕстьДатаПолногоОбеспечения Или
						СтрокаТовары.ЕстьДатаПолногоОбеспечения И СтрокаТовары.ДатаОтгрузки = СтрокаТовары.ДатаПолногоОбеспечения Тогда
					ИндексКартинки = ИндексКартинкиДействий("ВлевоЗаблокировано");
				Иначе
					ИндексКартинки = ИндексКартинкиДействий("СвязанныйСдвиг");
				КонецЕсли;

			ИначеЕсли ИмяКолонки = "КартинкаНеОбеспечено" Тогда
				ИндексКартинки = ИндексКартинкиДействий("ВлевоЗаблокировано");
			КонецЕсли;

		ИначеЕсли Статистика.ВсеВлево Тогда

			Если СтрокаТовары.Заказано Тогда

				Если СтрокаТовары <> Статистика.СтрокаЗаказано Тогда
					ИндексКартинки = ИндексКартинкиДействий("СвязанныйСдвиг");
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		ИмяКолонки = ИмяКолонкиКоличества(СтрокаТовары, "Картинка", ФорматИмениКолонки);
		СтрокаТовары[ИмяКолонки] = ИндексКартинки;
		Если ЕстьДоступНаЗаписьДокумента Тогда
			СтрокаТовары.Действия = РекомендацияПоИндексуКартинки(ИндексКартинки, СтрокаТовары);
			ЕстьРекомендации = ЕстьРекомендации Или СтрокаТовары.Действия <> "";
		Иначе
			ТекстНетРекомендации();
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьРекомендации;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	ЗначенияРеквизитов = Новый Массив();
	ЗначенияРеквизитов.Добавить(Перечисления.СостоянияОбеспеченияЗаказа.ПустаяСсылка());
	ЗначенияРеквизитов.Добавить(0);

	//Постоянное оформление
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда

		Элемент = УсловноеОформление.Элементы.Добавить();
		ДобавитьПолеИОтборПоРеквизиту(Элемент, "Характеристика", "Характеристика",
			Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));

		Если Параметры.ВызовДляСтрокиПродукции Тогда

			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Товары");

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.НомерСтрокиПродукция");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемента.ПравоеЗначение = Параметры.РеквизитыЗаказа.НомерСтрокиПродукция;

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УстановленОтборПоНоменклатуре");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;

			Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

		КонецЕсли;

	КонецЕсли;

	ОформитьФонПоля(Элементы.СоСклада.Имя, "СостояниеСоСклада");
	ОформитьФонПоля(Элементы.ПоВсемСкладам.Имя, "СостояниеПоВсемСкладам");

	ОформитьТекстПоРеквизиту("Действия", "ТипСтроки", 0, ЦветаСтиля.ЦветГиперссылки);
	ОформитьГиперссылкуПоРеквизиту("Действия", "Действия", ТекстДействияСЗаказом());
	ОформитьГиперссылкуПоРеквизиту("Действия", "Действия", ТекстПоказатьВсюНоменклатуру());
	ОформитьГиперссылкуПоРеквизиту("Действия", "Действия", ТекстПоказатьОтобраннуюНоменклатуру());
	ОформитьТекстПоРеквизиту("Действия", "Действия", ТекстНетРекомендации(), ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ОформитьШрифтПоРеквизиту("Товары", "ТипСтроки", 1, Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ВсегоСтрок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	ИменаПолей = Новый Массив();
	ИменаПолей.Добавить(Элементы.Заказ.Имя);
	ИменаПолей.Добавить(Элементы.Партнер.Имя);
	ИменаПолей.Добавить(Элементы.Статус.Имя);
	ИменаПолей.Добавить(Элементы.ГруппаЗаказ.Имя);
	СкрытьПоляПоЗначениюРеквизита(ИменаПолей, "ТипСтроки", 0);

	ИменаПолей.Очистить();
	ИменаПолей.Добавить(Элементы.ГруппаТовар.Имя);
	ИменаПолей.Добавить(Элементы.НомерСтроки.Имя);
	ИменаПолей.Добавить(Элементы.Номенклатура.Имя);
	ИменаПолей.Добавить(Элементы.Характеристика.Имя);
	ИменаПолей.Добавить(Элементы.ЕдиницаИзмерения.Имя);
	ИменаПолей.Добавить(Элементы.Код.Имя);
	ИменаПолей.Добавить(Элементы.Артикул.Имя);
	СкрытьПоляПоЗначениюРеквизита(ИменаПолей, "ТипСтроки", 1);

	ДобавитьОформлениеНеОбеспечено();

	ДобавитьОформлениеФильтра();

	Если ТолькоПросмотр Тогда

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Действия.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Действия");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	КонецЕсли;
	ДобавитьУсловноеОформлениеСтатуса();

КонецПроцедуры

&НаСервере
Процедура ДобавитьОформлениеНеОбеспечено()

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КартинкаНеОбеспеченоЗаказ.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	РасширенноеОбеспечение = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");

	Если РасширенноеОбеспечение Тогда // картинка по заказу отображается в данном режиме полем "КартинкаНеОбеспеченоЗаказ".

		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КартинкаНеОбеспечено.Имя);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ТипСтроки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 1;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

		// Дата поставки для обеспеченных позиций отображается серым.
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БлижайшаяДатаПоставки.Имя);
		ГруппаЭлементовОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ВНаличии");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Заказано");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ЕстьПолноеОбеспечениеПоВсемСкладам");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьОформлениеФильтра()

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ФильтрПользовательский");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Артикул.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Код.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номенклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Характеристика.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницаИзмерения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Склад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Фильтр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);

КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеСтатуса()

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.СтатусИспользуется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформление()

	Для каждого Элемент Из УсловноеОформление.Элементы Цикл
		Если Элемент.Представление = "Обновляемый" Тогда
			УсловноеОформление.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;

	ЗначенияРеквизитов = Новый Массив();
	ЗначенияРеквизитов.Добавить(Перечисления.СостоянияОбеспеченияЗаказа.ПустаяСсылка());
	ЗначенияРеквизитов.Добавить(0);

	Для Индекс = 0 По СписокКолонок.Количество() - 1 Цикл

		Представление = Формат(СписокКолонок[Индекс].Значение, ФорматИмениКолонки);
		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Состояние%1", Представление);
		ИмяПоля      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Количество%1", Представление);

		ОформитьФонПоРеквизиту(ИмяПоля, ИмяРеквизита,
			Перечисления.СостоянияОбеспеченияЗаказа.ЧастичноОбеспечен,
			ЦветаСтиля.ЦветФонаЧастичноОбеспечен, "Обновляемый");

		ОформитьФонПоРеквизиту(ИмяПоля, ИмяРеквизита,
			Перечисления.СостоянияОбеспеченияЗаказа.ПолностьюОбеспечен,
			ЦветаСтиля.ЦветФонаПолностьюОбеспечен, "Обновляемый");

		ИменаРеквизитов = Новый Массив();
		ИменаРеквизитов.Добавить(ИмяРеквизита);
		ИменаРеквизитов.Добавить("ТипСтроки");
		ОформитьФонПоРеквизитам(ИмяПоля, ИменаРеквизитов, ЗначенияРеквизитов, ЦветаСтиля.ЦветФонаНеОбеспечен, "Обновляемый");

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОформитьФонПоРеквизиту(ИмяПоля, ИмяРеквизита, ЗначениеРеквизита, Цвет, Представление = "")

	Элемент = УсловноеОформление.Элементы.Добавить();
	ДобавитьПолеИОтборПоРеквизиту(Элемент, ИмяПоля, ИмяРеквизита, ЗначениеРеквизита);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет);

КонецПроцедуры

&НаСервере
Процедура ОформитьШрифтПоРеквизиту(ИмяПоля, ИмяРеквизита, ЗначениеРеквизита, Жирный)

	Элемент = УсловноеОформление.Элементы.Добавить();
	ДобавитьПолеИОтборПоРеквизиту(Элемент, ИмяПоля, ИмяРеквизита, ЗначениеРеквизита);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Жирный));

КонецПроцедуры

&НаСервере
Процедура ОформитьФонПоРеквизитам(ИмяПоля, ИменаРеквизитов, ЗначенияРеквизитов, Цвет, Представление = "")

	Элемент = УсловноеОформление.Элементы.Добавить();
	ДобавитьПолеИОтборПоРеквизиту(Элемент, ИмяПоля, ИменаРеквизитов[0], ЗначенияРеквизитов[0]);

	Для Индекс = 1 По ИменаРеквизитов.ВГраница() Цикл
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары." + ИменаРеквизитов[Индекс]);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЗначенияРеквизитов[Индекс];
	КонецЦикла;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет);

КонецПроцедуры

&НаСервере
Процедура ОформитьТекстПоРеквизиту(ИмяПоля, ИмяРеквизита, ЗначениеРеквизита, Цвет)

	Элемент = УсловноеОформление.Элементы.Добавить();
	ДобавитьПолеИОтборПоРеквизиту(Элемент, ИмяПоля, ИмяРеквизита, ЗначениеРеквизита);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет);

КонецПроцедуры

&НаСервере
Процедура ОформитьГиперссылкуПоРеквизиту(ИмяПоля, ИмяРеквизита, ЗначениеРеквизита)

	Элемент = УсловноеОформление.Элементы.Добавить();
	ДобавитьПолеИОтборПоРеквизиту(Элемент, ИмяПоля, ИмяРеквизита, ЗначениеРеквизита);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт( , , Истина, , Истина));

КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеИОтборПоРеквизиту(ЭлементОформления, ИмяПоля, ИмяРеквизита, ЗначениеРеквизита)

	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары." + ИмяРеквизита);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЗначениеРеквизита;

КонецПроцедуры

&НаСервере
Процедура СкрытьПоляПоЗначениюРеквизита(ИменаПолей, ИмяРеквизита, ЗначениеРеквизита)

	Элемент = УсловноеОформление.Элементы.Добавить();

	Для Каждого ИмяПоля Из ИменаПолей Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары." + ИмяРеквизита);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЗначениеРеквизита;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстНетРекомендации()
	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстДействияСЗаказом()
	Возврат НСтр("ru = 'Действия с заказом...'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПоказатьВсюНоменклатуру()
	Возврат НСтр("ru = 'Показать все позиции'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПоказатьОтобраннуюНоменклатуру()
	Возврат НСтр("ru = 'Показать только по отбору'");
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(ДоступныеДокументы)

	ОбработкаОбъект = Обработки.СостояниеОбеспечения.Создать();
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("МакетДляОтборов");

	ПолеЗаказ = СхемаКомпоновкиДанных.НаборыДанных.Набор.Поля.Найти("Заказ");
	Если ПолеЗаказ <> Неопределено Тогда
		ДоступныеТипы = Новый ОписаниеТипов(ДоступныеТипыЗаказов(ДоступныеДокументы));
		ПолеЗаказ.ТипЗначения = ДоступныеТипы;
	КонецЕсли;

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПростойОтборВОтборахКомпоновки(Форма)

	ЭлементыОтбора = Форма.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
	ЭлементыОтбора.Очистить();

	Если Форма.Параметры.ВызовИзФормыЗаказа Тогда

		Если Форма.ТекущийЗаказ <> Неопределено Тогда

			ОтразитьОтборВОтборахКомпоновки(ЭлементыОтбора, Форма.ДанныеТекущейСтроки.Склад,        "Склад");
			ОтразитьОтборВОтборахКомпоновки(ЭлементыОтбора, Форма.ДанныеТекущейСтроки.Номенклатура, "Номенклатура");

		ИначеЕсли Форма.ОтборЗаказ.Количество() > 0 Тогда

			ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Заказ");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = Форма.ОтборЗаказ;

		КонецЕсли;

	ИначеЕсли Форма.ОтборЗаказ.Количество() = 0 Тогда

		ОтразитьОтборВОтборахКомпоновки(ЭлементыОтбора, Форма.ОтборСклад,         "Склад");
		ОтразитьОтборВОтборахКомпоновки(ЭлементыОтбора, Форма.ОтборНоменклатура,  "Номенклатура");
		ОтразитьОтборВОтборахКомпоновки(ЭлементыОтбора, Форма.ОтборМенеджер,      "Менеджер");

	Иначе
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Заказ");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = Форма.ОтборЗаказ;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьОтборВОтборахКомпоновки(ЭлементыОтбора, Значение, ИмяПоля)

	Если ЗначениеЗаполнено(Значение) Тогда
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		СписокОтбора = Новый СписокЗначений();
		СписокОтбора.Добавить(Значение);
		ЭлементОтбора.ПравоеЗначение = СписокОтбора;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапросСОтборамиКомпоновки(ТекстЗапроса, Настройки, Фильтр)

	МассивИменПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Фильтр);
	СхемаКомпоновки = Обработки.СостояниеОбеспечения.ПолучитьМакет("МакетДляОтборов");

	СхемаКомпоновки.НаборыДанных["Набор"].Запрос = ТекстЗапроса;
	АдресВременнойСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки);

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременнойСхемы);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	НастройкиКомпоновки = Компоновщик.ПолучитьНастройки();
	Для Каждого ИмяПоля Из МассивИменПолей Цикл
		УдалитьОтборИзНастроек(НастройкиКомпоновки.Отбор.Элементы, СокрЛП(ИмяПоля));
	КонецЦикла;

	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	Запрос = КомпоновкаДанныхСервер.ПолучитьЗапросИзМакетаКомпоновки(Макет, "Набор");
	УдалитьИзВременногоХранилища(АдресВременнойСхемы);
	Возврат Запрос;

КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьОтборИзНастроек(ЭлементыНастроек, ИмяПоля)

	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

	Для Каждого Элемент Из ЭлементыНастроек Цикл

		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда

			Если Лев(Элемент.ЛевоеЗначение, СтрДлина(Поле)) = Строка(Поле) Тогда
				Элемент.Использование = Ложь;
			КонецЕсли;

		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И Элемент.Использование Тогда

			УдалитьОтборИзНастроек(Элемент.Элементы, ИмяПоля);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияРеквизитов()

	Настройки = Новый Структура("ОтборСклад, ОтборНоменклатура, ОтборМенеджер, РежимГруппировкиМатериалов");
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);

	ИмяНастройки = "Основная";


	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.СостояниеОбеспечения", ИмяНастройки, Настройки);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗначенияРеквизитов()

	ИмяНастройки = "Основная";


	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Обработка.СостояниеОбеспечения", ИмяНастройки);

	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда

		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеНастроек);

	КонецЕсли;

	//Значения при отсутствии настроек (по умлочанию).
	Если Не ЗначениеЗаполнено(РежимГруппировкиМатериалов) Тогда

		РежимГруппировкиМатериалов = "СгруппироватьПоЗаказам";


	КонецЕсли;

	Элементы[РежимГруппировкиМатериалов].Пометка = Истина;

КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныеДействия

&НаКлиенте
Процедура РекомендацияУправлениеПеремещениемВыбор()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("РеквизитыКонтекст", Новый Структура());
	ПараметрыФормы.РеквизитыКонтекст.Вставить("СкладПолучатель", ТекущиеДанные.Склад);
	ПараметрыФормы.РеквизитыКонтекст.Вставить("Назначение", ТекущиеДанные.Назначение);
	ПараметрыФормы.РеквизитыКонтекст.Вставить("Режим", "ОБЕСПЕЧЕНИЕ_ПОТРЕБНОСТЕЙ");
	
	ОткрытьФорму("Обработка.УправлениеПеремещениемОбособленныхТоваров.Форма.РабочееМесто",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПриИзменении(Действие)

	РежимГруппировкиМатериалов = Действие;
	Элементы.СгруппироватьПоЗаказам.Пометка = Ложь;
	Элементы.СгруппироватьПоИзделиям.Пометка = Ложь;
	Элементы.СгруппироватьПоЭтапам.Пометка = Ложь;
	Элементы[РежимГруппировкиМатериалов].Пометка = Истина;

	Товары.ПолучитьЭлементы().Очистить();
	Потребности.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрПользовательский(ИдентификаторСтрокиЗаказа)

	Заказ = Товары.НайтиПоИдентификатору(ИдентификаторСтрокиЗаказа);
	ИгнорироватьФильтр = ЗаказыРаскрытые.НайтиПоЗначению(КлючГруппировкиСтрокой(Заказ)) <> Неопределено;
	СтрокиТовары = Заказ.ПолучитьЭлементы();
	Для Каждого СтрокаТовары Из СтрокиТовары Цикл

		СтрокаТовары.ФильтрПользовательский = ?(ИгнорироватьФильтр, Ложь, СтрокаТовары.Фильтр);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуЗаказаВоВременноеХранилище(Идентификатор)

	ТаблицаЗаказа = Новый ТаблицаЗначений();
	ТаблицаЗаказа.Колонки.Добавить("ИдентификаторСтрокиЗаказа");
	ТаблицаЗаказа.Колонки.Добавить("ВариантОбеспечения");
	ТаблицаЗаказа.Колонки.Добавить("ДатаОтгрузки");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("Склад");
	ТаблицаЗаказа.Колонки.Добавить("КодСтроки");
	ТаблицаЗаказа.Колонки.Добавить("Отгружено", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0));


	ИндексыСтрок = Новый Массив();

	Для Индекс = 0 По Объект.ТаблицаЗаказа.Количество() - 1 Цикл

		Строка = Объект.ТаблицаЗаказа[Индекс];

		Если Строка.Модифицирована Тогда

			НоваяСтрока = ТаблицаЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		ИначеЕсли Не ЗначениеЗаполнено(Строка.ДатаОтгрузки) И (
			Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
			Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно) Тогда

			ИндексыСтрок.Добавить(Индекс);

		КонецЕсли;

	КонецЦикла;

	Если ИндексыСтрок.Количество() > 0 Тогда

		ЗаполнитьДатуОтгрузкиВТаблицеЗаказа(ИндексыСтрок);

		Для Каждого Индекс Из ИндексыСтрок Цикл

			НоваяСтрока = ТаблицаЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект.ТаблицаЗаказа[Индекс]);

		КонецЦикла;

	КонецЕсли;

	ТаблицаЗаказа.Колонки.ИдентификаторСтрокиЗаказа.Имя = "Идентификатор";

	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗаказа, Идентификатор);

КонецФункции

&НаСервере
Процедура ЗаполнитьДатуОтгрузкиВТаблицеЗаказа(ИндексыСтрок)

	ТоварыЗаказа = Товары.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	Для каждого Строка Из ТоварыЗаказа Цикл

		Если ИндексыСтрок.Найти(Строка.НомерСтроки - 1) <> Неопределено Тогда
			Объект.ТаблицаЗаказа[Строка.НомерСтроки - 1].ДатаОтгрузки = Строка.БлижайшаяДатаПоставки;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбеспечение(Источник, Заказ, Параметр, ЖелаемаяДатаОтгрузки, НеОтгружатьЧастями)

	ИспользоватьОбособленно = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	ИспользоватьСоСклада    = Не (НачалоДня(ЖелаемаяДатаОтгрузки) > НачалоДня(ТекущаяДатаСеанса()));

	ПереченьВариантов = Новый Массив();
	Если ИспользоватьСоСклада Тогда
		ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);
	КонецЕсли;
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.ИзЗаказов);
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.Требуется);
	Если ИспользоватьОбособленно Тогда
		ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.Обособленно);
	КонецЕсли;

	
	Если Заказ = Неопределено Тогда

		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления[Параметры.ПараметрыВыполненияДействий.ИмяМенеджераРегистра]);
		ПараметрыДокумента.Вставить("ПутиКДанным", Новый Соответствие);
		Если Параметры.ПараметрыВыполненияДействий.Свойство("СтатусКВыполнению") Тогда
			ПараметрыДокумента.Вставить("СтатусКВыполнению", Параметры.ПараметрыВыполненияДействий.СтатусКВыполнению);
		КонецЕсли;
		
		Если Источник = "Строка" Тогда
			Если Не НеОтгружатьЧастями Тогда
				ВыделенныеСтроки = Новый Массив();
				СтрокаЗаказа = Объект.ТаблицаЗаказа[Параметр.НомерСтроки - 1];
				ВыделенныеСтроки.Добавить(СтрокаЗаказа.ПолучитьИдентификатор());
			Иначе
				ВыделенныеСтроки = СвязанныеСтроки(Заказ);
			КонецЕсли;
		Иначе
			ВыделенныеСтроки = СтрокиПоРекомендациям(Заказ, Параметр);
		КонецЕсли;
		
		Если Параметр.ОтгружатьЧастями <> Неопределено И Параметр.ОтгружатьЧастями Тогда
			Параметры.РеквизитыЗаказа.НеОтгружатьЧастями = Ложь;
			УстанавливатьОтгружатьЧастями = Истина;
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ПереченьВариантов", ПереченьВариантов);
		ПараметрыЗаполнения.Вставить("ИзменятьОбособление", Ложь);
		
		РеквизитыЗаказа = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры.РеквизитыЗаказа);
		РеквизитыЗаказа.Ссылка = Параметры.СторнируемыеДокументы;
		РеквизитыЗаказа.Ссылка.Добавить(Параметры.РеквизитыЗаказа.Ссылка);
		
		ТаблицаОбеспечения = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
			ВыделенныеСтроки,
			РеквизитыЗаказа,
			Объект.ТаблицаЗаказа,
			ПараметрыЗаполнения,
			ПараметрыДокумента);
		
		Если Не НеОтгружатьЧастями Или УстанавливатьОтгружатьЧастями Тогда
			ДатаОтгрузки = Неопределено;
		Иначе
			ДатаОтгрузки = '00010101';
			Для Каждого Строка Из ТаблицаОбеспечения Цикл
				ДатаОтгрузки = Макс(ДатаОтгрузки, Строка.ДатаОтгрузки);
			КонецЦикла;
		КонецЕсли;
		Обработки.СостояниеОбеспечения.ЗаполнитьВариантОбеспечения(Объект, ЭтаФорма, ТаблицаОбеспечения, ДатаОтгрузки);
		Модифицированность = Истина;
		
	Иначе
		
		Если Источник = "Строка" Тогда
			
			Если Не НеОтгружатьЧастями Тогда
				ИндексыПоДокументам = Новый Соответствие;
				СтрокаТовары = Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
				ИндексыСтрок = ИндексыСтрокПоДокументу(ИндексыПоДокументам, СтрокаТовары);
				ИндексыСтрок.Добавить(СтрокаТовары.НомерСтроки - 1);
			Иначе
				ИндексыПоДокументам = СвязанныеСтроки(Заказ);
			КонецЕсли;
			
		Иначе
			ИндексыПоДокументам = СтрокиПоРекомендациям(Заказ, Параметр);
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ИндексыПоДокументам Цикл
			ВыполнитьОбеспечениеЗаказа(
				КлючИЗначение.Ключ, // Заказ
				КлючИЗначение.Значение, // Индексы строк
				ПереченьВариантов,
				ЭтаФорма,
				Параметр.ОтгружатьЧастями);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьОбеспечениеЗаказа(Заказ, ИндексыСтрок, ПереченьВариантов, Форма, ОтгружатьЧастями)

	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заказ);
	Если МенеджерДокумента = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Выполнение рекомендаций для документов данного вида не предусмотрено.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Документ = Заказ.ПолучитьОбъект();
	Попытка
		Документ.Заблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Невозможно выполнить рекомендацию. Возможно документ редактируется другим пользователем.'");
		Сообщение.Сообщить();
		ИмяСобытияЖурнала = НСтр("ru = 'Состояние обеспечения заказов.Выполнение рекомендаций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	Если ОтгружатьЧастями <> Неопределено И ОтгружатьЧастями Тогда
		Документ.НеОтгружатьЧастями = Ложь;
	КонецЕсли;

	ПараметрыЗаполнения = МенеджерДокумента.ПараметрыВыбораОбеспечения(Документ.Статус);
	ТаблицаОбеспечения = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(
		Документ, ПереченьВариантов, ПараметрыЗаполнения, ИндексыСтрок);

	МенеджерДокумента.ЗаполнитьВариантОбеспечения(Документ, Неопределено, "ИндексыСтрок", ТаблицаОбеспечения);
	Документ.ДополнительныеСвойства.Вставить("КонтролироватьОбеспечение", Ложь);
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		ИмяСобытияЖурнала = НСтр("ru = 'Состояние обеспечения заказов.Выполнение рекомендаций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция СвязанныеСтроки(Заказ)
	
	ИндексыПоДокументам = Новый Соответствие;
	
	СтрокаТовары = Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ИндексыСтрок = ИндексыСтрокПоДокументу(ИндексыПоДокументам, СтрокаТовары);
	ИндексыСтрок.Добавить(СтрокаТовары.НомерСтроки - 1);
	
	СтрокаЗаказа = СтрокаТовары.ПолучитьРодителя();
	Для Каждого СтрокаТовары Из СтрокаЗаказа.ПолучитьЭлементы() Цикл
		
		ИмяКолонки = ИмяКолонкиКоличества(СтрокаТовары, "Картинка", ФорматИмениКолонки);
		ИндексКартинки = СтрокаТовары[ИмяКолонки];
		ИндексыСтрок = ИндексыСтрокПоДокументу(ИндексыПоДокументам, СтрокаТовары);
		
		Если ИндексКартинки = ИндексКартинкиДействий("СвязанныйСдвиг") Тогда
			ИндексыСтрок.Добавить(СтрокаТовары.НомерСтроки - 1);
		ИначеЕсли ИмяКолонки = "КартинкаНеОбеспечено" И ИндексКартинки = 0 Тогда
			ИндексыСтрок.Добавить(СтрокаТовары.НомерСтроки - 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Заказ = Неопределено Тогда
		
		Результат = Новый Массив();
		Для Каждого КлючИЗначение Из ИндексыПоДокументам Цикл
			ИндексыСтрок = КлючИЗначение.Значение;
			Для Каждого Индекс Из ИндексыСтрок Цикл
				СтрокаЗаказа = Объект.ТаблицаЗаказа[Индекс];
				Результат.Добавить(СтрокаЗаказа.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат ИндексыПоДокументам;
	
КонецФункции

&НаСервере
Функция СтрокиПоРекомендациям(Заказ, ДоступныеДействия)
	
	ИндексыПоДокументам = Новый Соответствие;
	
	СтрокаЗаказа = Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Если СтрокаЗаказа.ТипСтроки = 0 Тогда
		СтрокаЗаказа = СтрокаЗаказа.ПолучитьРодителя();
	КонецЕсли;
	
	Если ДоступныеДействия.ОтгружатьЧастями <> Неопределено И ДоступныеДействия.ОтгружатьЧастями И СтрокаЗаказа.НеОтгружатьЧастями Тогда
		
		//Установлен флаг "Отгружать частями" - необходимо перезаполнить обеспечение во всех строках.
		Для Каждого СтрокаТовары Из СтрокаЗаказа.ПолучитьЭлементы() Цикл
			ИндексыСтрок = ИндексыСтрокПоДокументу(ИндексыПоДокументам, СтрокаТовары);
			ИндексыСтрок.Добавить(СтрокаТовары.НомерСтроки - 1);
		КонецЦикла;
		
	Иначе
		
		//Проверить наличие в строках рекомендаций подлежащих выполнению согласно указанным действиям.
		ВыполнитьДействия = Ложь;
		Для Каждого СтрокаТовары Из СтрокаЗаказа.ПолучитьЭлементы() Цикл
			
			Если РекомендацияДоступна(СтрокаТовары, ДоступныеДействия) Тогда
				ВыполнитьДействия = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		//Сформировать список индексов строк, подлежащих обработке
		Если ВыполнитьДействия Тогда
			
			ИскатьДублиАналитики = Ложь;
			Для Каждого СтрокаТовары Из СтрокаЗаказа.ПолучитьЭлементы() Цикл
				
				Индекс = СтрокаТовары.НомерСтроки - 1;
				
				ИмяКолонки        = ИмяКолонкиКоличества(СтрокаТовары, "Картинка", ФорматИмениКолонки);
				ИндексКартинки    = СтрокаТовары[ИмяКолонки];
				ЭтосвязанныйСдвиг = ИндексКартинки = ИндексКартинкиДействий("СвязанныйСдвиг");
				
				ДобавитьИндекс    = РекомендацияДоступна(СтрокаТовары, ДоступныеДействия) Или ЭтоСвязанныйСдвиг;
				
				Если ДобавитьИндекс Тогда
					
					ИндексыСтрок = ИндексыСтрокПоДокументу(ИндексыПоДокументам, СтрокаТовары);
					ИндексыСтрок.Добавить(Индекс);
					Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
						ИскатьДублиАналитики = Истина;
						ТаблицаДублей = ТаблицаАналитикиПотребности();
						ТаблицаДублей.Колонки.Добавить("ИндексДобавлен");
						ТаблицаДублей.Колонки.Добавить("Индекс");
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИскатьДублиАналитики И СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
					
					НоваяСтрока = ТаблицаДублей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
					НоваяСтрока.ИндексДобавлен = ДобавитьИндекс;
					НоваяСтрока.Индекс         = Индекс;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИскатьДублиАналитики Тогда
				//Есть действия над обособленными строками - необходимо выполнять дейстивя для всех обособленных строк по данной номенклатуре.
				ДобавитьИндексыДублейАналитики(ИндексыСтрок, ТаблицаДублей);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Заказ = Неопределено Тогда
		
		Результат = Новый Массив();
		Для Каждого КлючИЗначение Из ИндексыПоДокументам Цикл
			ИндексыСтрок = КлючИЗначение.Значение;
			Для Каждого Индекс Из ИндексыСтрок Цикл
				СтрокаЗаказа = Объект.ТаблицаЗаказа[Индекс];
				Результат.Добавить(СтрокаЗаказа.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Возврат ИндексыПоДокументам;
	
КонецФункции

&НаСервере
Процедура ДобавитьИндексыДублейАналитики(ИндексыСтрок, ТаблицаДублей)

	ТаблицаДублей.Сортировать("Номенклатура, Характеристика, Склад, Подразделение, Назначение, ИндексДобавлен УБЫВ", Новый СравнениеЗначений());
	Ключ = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаПодразделениеНазначениеСклад();
	ВГраница = ТаблицаДублей.Количество() - 1;
	Для Счетчик = 0 По ВГраница Цикл

		ТекущаяСтрока = ТаблицаДублей[Счетчик];
		Если ОбеспечениеКлиентСервер.ИзменилсяКлюч(Ключ, ТекущаяСтрока) Тогда
			ЗаполнитьЗначенияСвойств(Ключ, ТекущаяСтрока);
			ВключатьДубли = ТекущаяСтрока.ИндексДобавлен;
		ИначеЕсли ВключатьДубли И Не ТекущаяСтрока.ИндексДобавлен Тогда
			ИндексыСтрок.Добавить(ТекущаяСтрока.Индекс);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТаблицаАналитикиПотребности()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Таблица.Колонки.Добавить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));

	Возврат Таблица;

КонецФункции

&НаСервере
Функция РекомендацияДоступна(СтрокаТовары, ДоступныеДействия)

	ИмяКолонки = ИмяКолонкиКоличества(СтрокаТовары, "Картинка", ФорматИмениКолонки);
	ИндексКартинки = СтрокаТовары[ИмяКолонки];
	
	Результат = ИндексКартинки = ИндексКартинкиДействий("СдвинутьОшибка")
		Или ИндексКартинки = ИндексКартинкиДействий("СдвинутьВправо") И СтрокаТовары.Заказано И ДоступныеДействия.СнятьРезервы
		Или ИндексКартинки = ИндексКартинкиДействий("СдвинутьВправо") И СтрокаТовары.ВНаличии И ДоступныеДействия.СнятьРезервыСоСклада
		Или ИндексКартинки = ИндексКартинкиДействий("СдвинутьВлево") И ДоступныеДействия.Ускорить;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючГруппировкиСтрокой(СтрокаТаблицы)

	Возврат Строка(СтрокаТаблицы.Этап) + СтрокаТаблицы.НомерСтрокиПродукция + СтрокаТаблицы.Заказ;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючиГруппировкиРавны(Структура1, Структура2)

	Возврат Структура1.Заказ = Структура2.Заказ
		И Структура1.НомерСтрокиПродукция = Структура2.НомерСтрокиПродукция
		И Структура1.ЭтапПорядок = Структура2.ЭтапПорядок;

КонецФункции

&НаСервере
Функция ИндексыСтрокПоДокументу(ИндексыПоДокументам, СтрокаТовары)
	
	Заказ = СтрокаТовары.Заказ;
	ИндексыДокумента = ИндексыПоДокументам.Получить(Заказ);
	Если ИндексыДокумента = Неопределено Тогда
		ИндексыДокумента = Новый Массив;
		ИндексыПоДокументам.Вставить(Заказ, ИндексыДокумента);
	КонецЕсли;
	
	Возврат ИндексыДокумента;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗагрузитьТаблицуЗаказаИзВременногоХранилища()

	Если Параметры.ВызовИзФормыЗаказа Тогда

		ТаблицаЗаказа = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыТовары);
		ТаблицаЗаказа.Колонки.Идентификатор.Имя = "ИдентификаторСтрокиЗаказа";

		ЗаполнитьЖелаемуюДату = ТаблицаЗаказа.Колонки.Найти("ЖелаемаяДатаОтгрузки") = Неопределено;

		УдалитьИзВременногоХранилища(Параметры.АдресТаблицыТовары);

		Для Каждого Строка Из ТаблицаЗаказа Цикл

			ВключатьСтроку = Строка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется;

			Если ВключатьСтроку Тогда
				НоваяСтрока = Объект.ТаблицаЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

				Если ЗаполнитьЖелаемуюДату Тогда
					НоваяСтрока.ЖелаемаяДатаОтгрузки = Параметры.РеквизитыЗаказа.ЖелаемаяДатаОтгрузки;
				Конецесли;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПоПараметрам()

	ЭтоСостояниеОбеспеченияЗаказов = Не Параметры.ВызовИзФормыЗаказа И Параметры.Заказы.Количество() = 0;
	ЭтоСостояниеОбеспеченияВыделенныхЗаказов = Не Параметры.ВызовИзФормыЗаказа И Параметры.Заказы.Количество() > 0;
	ЭтоСостояниеОбеспеченияЗаказа  = Параметры.ВызовИзФормыЗаказа;

	Элементы.СгруппироватьПоЗаказам.Видимость = Не Параметры.ВызовДляСтрокиПродукции;

	//Состояние обеспечения заказов.
	Если ЭтоСостояниеОбеспеченияЗаказов Тогда

		Элементы.ЗаказыНаТовар.Видимость      = Ложь;
		Элементы.ПеренестиВДокумент.Видимость = Ложь;
		Элементы.ПеренестиВДокумент.Доступность = Ложь;
		Элементы.Обновить.Отображение           = ОтображениеКнопки.Текст;
		Элементы.Обновить.Заголовок             = НСтр("ru = 'Сформировать'");
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;

	//Состояние обеспечения выделенных заказов.
	ИначеЕсли ЭтоСостояниеОбеспеченияВыделенныхЗаказов Тогда

		Элементы.ЗаказыНаТовар.Видимость      = Ложь;
		Элементы.ПеренестиВДокумент.Видимость = Ложь;
		Элементы.ПеренестиВДокумент.Доступность = Ложь;
		Элементы.ГруппаОтборы.Видимость       = Ложь;
		Элементы.НастроитьСписок.Видимость    = Ложь;
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;

	//Состояние обеспечения заказа.
	ИначеЕсли ЭтоСостояниеОбеспеченияЗаказа Тогда

		Элементы.ГруппаОтборы.Видимость    = Ложь;
		Элементы.НастроитьСписок.Видимость = Ложь;
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПоФО()

	РасширенноеОбеспечение = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	Элементы.ГруппаДатаПоставки.Видимость    = РасширенноеОбеспечение;
	Элементы.НеОбеспечено.ОтображатьВШапке   = РасширенноеОбеспечение;
	Элементы.НеОбеспечено.ОтображатьВПодвале = РасширенноеОбеспечение;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексыКартинок()

	ЛегендаСдвинутьВправо        = ИндексКартинкиДействий("СдвинутьВправо");
	ЛегендаСдвинутьВлево         = ИндексКартинкиДействий("СдвинутьВлево");
	ЛегендаСдвинутьОшибка        = ИндексКартинкиДействий("СдвинутьОшибка");
	ЛегендаЖелаемаяДатаОтгрузки  = ИндексКартинкиДействий("ЖелаемаяДатаОтгрузки");
	ЛегендаПоследняяОтгрузка     = ИндексКартинкиДействий("ПоследняяОтгрузка");
	ЛегендаЖелаемаяДатаПоследняя = ИндексКартинкиДействий("ЖелаемаяДатаПоследняя");
	ЛегендаСвязанныйСдвиг        = ИндексКартинкиДействий("СвязанныйСдвиг");
	ЛегендаВлевоЗаблокировано    = ИндексКартинкиДействий("ВлевоЗаблокировано");

	Элементы.КартинкаНеОбеспечено.КартинкаЗначений = Элементы.КартинкаСоСклада.КартинкаЗначений;
	Элементы.КартинкаНеОбеспеченоЗаказ.КартинкаЗначений = Элементы.КартинкаСоСклада.КартинкаЗначений;

КонецПроцедуры

&НаСервере
Функция ДоступныеДокументы(Право)
	
	Фильтр = Новый Массив();
	
	

	Если ПравоДоступа(Право, Метаданные.Документы.ЗаказКлиента) Тогда
		Фильтр.Добавить(Документы.ЗаказКлиента);
	КонецЕсли;

	Если ПравоДоступа(Право, Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		Фильтр.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	КонецЕсли;

	Если ПравоДоступа(Право, Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		Фильтр.Добавить(Документы.ЗаказНаВнутреннееПотребление);
	КонецЕсли;

	Если ПравоДоступа(Право, Метаданные.Документы.ЗаказНаСборку)
		И (ПравоДоступа(Право, Метаданные.РегистрыНакопления.ЗаказыНаСборку) Или Право = "Изменение") Тогда
		Фильтр.Добавить(Документы.ЗаказНаСборку);
	КонецЕсли;

	Если ПравоДоступа(Право, Метаданные.Документы.ЗаказНаПеремещение) Тогда
		Фильтр.Добавить(Документы.ЗаказНаПеремещение);
	КонецЕсли;

	Возврат Фильтр;

КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеТипыЗаказов(ДоступныеДокументы)

	СтрокаТипов = "";
	Для Индекс = 0 По ДоступныеДокументы.ВГраница() Цикл
		СтрокаМенеджер = Строка(ДоступныеДокументы[Индекс]);
		СтрокаТипов = СтрокаТипов + СтрЗаменить(СтрокаМенеджер, "Менеджер", "Ссылка");
		Если Индекс < ДоступныеДокументы.ВГраница() Тогда
			СтрокаТипов = СтрокаТипов + ", ";
		КонецЕсли;
	КонецЦикла;
	Результат = Новый ОписаниеТипов(СтрокаТипов);
	Возврат Результат;

КонецФункции

&НаСервере
Функция СписокВыбораОтбораПоМенеджеру(ДоступныеДокументы)

	МассивРолей = Новый Массив;
	
	Для Каждого МенеджерДокумента Из ДоступныеДокументы Цикл
		
		ИмяОбъектаМетаданных = МенеджерДокумента.ПустаяСсылка().Метаданные().ПолноеИмя();
		РолиДокумента = ПраваПользователяПовтИсп.ИменаРолейСПравомДобавления(ИмяОбъектаМетаданных);
		
		Для Каждого ИмяРоли Из РолиДокумента Цикл
			Если МассивРолей.Найти(ИмяРоли) = Неопределено Тогда
				МассивРолей.Добавить(ИмяРоли);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

	Возврат ОбщегоНазначенияУТ.ПользователиСДоступнымиРолями(МассивРолей);
	
КонецФункции

&НаСервере
Функция ТекстТекущаяСтрока()

	ЕстьДругиеЗаказы = Товары.ПолучитьЭлементы().Количество() > 1;

	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	Если ИспользоватьНесколькоСкладов Тогда
		Если ЕстьДругиеЗаказы Тогда
			Шаблон = НСтр("ru = 'Отобраны заказы по позиции номенклатуры: %1, на складе: %2'");
		Иначе
			Шаблон = НСтр("ru = 'Нет других заказов по позиции номенклатуры: %1, на складе: %2'");
		КонецЕсли;
	Иначе
		Если ЕстьДругиеЗаказы Тогда
			Шаблон = НСтр("ru = 'Отобраны заказы по позиции номенклатуры: %1'");
		Иначе
			Шаблон = НСтр("ru = 'Нет других заказов по позиции номенклатуры: %1'");
		КонецЕсли;
		
	КонецЕсли;

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
		ДанныеТекущейСтроки.Номенклатура, ДанныеТекущейСтроки.Склад);

	Возврат Текст;

КонецФункции

#КонецОбласти

#Область СервернаяЧастьОбработчиков

&НаСервере
Процедура ОбработкаВыбораВыборДействийНаСервере(ВыбранноеЗначение)
	
		СтрокаТовары = Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		Заказ = ?(Параметры.ВызовИзФормыЗаказа И СтрокаТовары.Заказ = Параметры.РеквизитыЗаказа.Ссылка, Неопределено, СтрокаТовары.Заказ);
		ВыполнитьОбеспечение("Заказ", Заказ, ВыбранноеЗначение, СтрокаТовары.ЖелаемаяДатаОтгрузки, СтрокаТовары.НеОтгружатьЧастями);
		ОбновитьСостояниеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыВыборНаСервере()
	
	СтрокаТовары = Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Заказ = ?(Параметры.ВызовИзФормыЗаказа И СтрокаТовары.Заказ = Параметры.РеквизитыЗаказа.Ссылка, Неопределено, СтрокаТовары.Заказ);
	Параметр = Новый Структура("НомерСтроки, ОтгружатьЧастями", СтрокаТовары.НомерСтроки);
	ВыполнитьОбеспечение("Строка", Заказ, Параметр, СтрокаТовары.ЖелаемаяДатаОтгрузки, СтрокаТовары.НеОтгружатьЧастями);
	
	ОбновитьСостояниеНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСерверныхОтборов

&НаСервере
Процедура ПриИзмененииОтбора()
	
	ОбновитьСостояниеНаСервере();
	СохранитьЗначенияРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиКомпоновщика()
	Если НЕ Параметры.ВызовИзФормыЗаказа И Параметры.Заказы.Количество() = 0 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.СостояниеОбеспечения", "НастройкиКомпоновщика",
			КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиКомпоновщика()
	НастройкиКомпоновщика = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.СостояниеОбеспечения",
		"НастройкиКомпоновщика");
	Если НастройкиКомпоновщика <> Неопределено
		И ТипЗнч(НастройкиКомпоновщика) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НастройкиКомпоновщика);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	Элементы.ЕстьОтбор.Видимость = ЕстьОтбор(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТоварыОбособленныеПоВсемСкладам(ТоварыОбособленные)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Назначение     КАК Назначение
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Товары КАК Товары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение
		|;
		|
		|ВЫБРАТЬ
		|	Остатки.Номенклатура   КАК Номенклатура,
		|	Остатки.Характеристика КАК Характеристика,
		|	Остатки.Назначение     КАК Назначение,
		|	Остатки.ПотребностьОстаток - Остатки.КЗаказуОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|			(Номенклатура, Характеристика, Назначение) В(
		|				ВЫБРАТЬ
		|					Товары.Номенклатура   КАК Номенклатура,
		|					Товары.Характеристика КАК Характеристика,
		|					Товары.Назначение     КАК Назначение
		|				ИЗ
		|					ВтТовары КАК Товары)) КАК Остатки
		|ГДЕ
		|	Остатки.ПотребностьОстаток - Остатки.КЗаказуОстаток > 0";
		
	Запрос.УстановитьПараметр("Товары", ТоварыОбособленные);
	УстановитьПривилегированныйРежим(Истина);
	ТоварыОбособленныеПоВсемСкладам = Запрос.Выполнить().Выгрузить();
	ТоварыОбособленныеПоВсемСкладам.Индексы.Добавить("Номенклатура, Характеристика, Назначение");
	Возврат ТоварыОбособленныеПоВсемСкладам;
	
КонецФункции

&НаСервере
Процедура ОформитьФонПоля(ИмяПоля, ИмяРеквизита)
	
	ОформитьФонПоРеквизиту(ИмяПоля, ИмяРеквизита,
		Перечисления.СостоянияОбеспеченияЗаказа.ЧастичноОбеспечен,
		ЦветаСтиля.ЦветФонаЧастичноОбеспечен);

	ОформитьФонПоРеквизиту(ИмяПоля, ИмяРеквизита,
		Перечисления.СостоянияОбеспеченияЗаказа.ПолностьюОбеспечен,
		ЦветаСтиля.ЦветФонаПолностьюОбеспечен);

	ИменаРеквизитов = Новый Массив();
	ИменаРеквизитов.Добавить(ИмяРеквизита);
	ИменаРеквизитов.Добавить("ТипСтроки");

	ЗначенияРеквизитов = Новый Массив();
	ЗначенияРеквизитов.Добавить(Перечисления.СостоянияОбеспеченияЗаказа.ПустаяСсылка());
	ЗначенияРеквизитов.Добавить(0);
	
	ОформитьФонПоРеквизитам(ИмяПоля, ИменаРеквизитов, ЗначенияРеквизитов, ЦветаСтиля.ЦветФонаНеОбеспечен);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
