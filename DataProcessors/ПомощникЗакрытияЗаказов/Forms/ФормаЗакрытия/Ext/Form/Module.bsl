
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Заказы                       = Параметры.Заказы;
	ДокументИнициатор            = Параметры.ДокументИнициатор;
	
	ОтменитьНеотработанныеСтроки = ?(Параметры.Свойство("ОтменитьНеотработанныеСтроки"),
									Параметры.ОтменитьНеотработанныеСтроки,
									Ложь);
	
	СкорректироватьМерныеТовары  = Истина;
	
	СкорректироватьМерныеТоварыПоПриемке = ?(Параметры.Свойство("СкорректироватьМерныеТоварыПоПриемке"),
									Параметры.СкорректироватьМерныеТоварыПоПриемке,
									Ложь);
	
	СкорректироватьЦены          = ?(Параметры.Свойство("СкорректироватьЦены"),
									Параметры.СкорректироватьЦены,
									Ложь);
	
	ЗакрыватьЗаказы              = ?(Параметры.Свойство("ЗакрыватьЗаказы"),
									Параметры.ЗакрыватьЗаказы,
									Ложь);
		
	ТаблицаТоваровПриход         = ?(Параметры.Свойство("ТаблицаТоваровПриход"),
									ПолучитьИзВременногоХранилища(Параметры.ТаблицаТоваровПриход),
									Неопределено); 
	
	ТаблицаТоваровРасход         = ?(Параметры.Свойство("ТаблицаТоваровРасход"),
									ПолучитьИзВременногоХранилища(Параметры.ТаблицаТоваровРасход),
									Неопределено);
	
	Если НЕ ТаблицаТоваровПриход = Неопределено Тогда
		УдалитьИзВременногоХранилища(Параметры.ТаблицаТоваровПриход);
	КонецЕсли;
	
	Если НЕ ТаблицаТоваровПриход = Неопределено Тогда
		УдалитьИзВременногоХранилища(Параметры.ТаблицаТоваровРасход);
	КонецЕсли;
	
	Если Заказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	ЗаполнитьОтклоненияПоЗаказам(ТаблицаТоваровПриход,ТаблицаТоваровРасход);
	
	ЗаполнитьНачальныеНастройки();
	ЗаполнитьСтраницыКОтображению(ЭтаФорма);
	ЗаполнитьПодсказкиИДекорации();
	
	УстановитьВидимостьЭлементовПриСоздании();
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	СформироватьНадписьРасчеты();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПринудительноЗакрытьФорму Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Готово И Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		Отказ = Истина;
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
			НСтр("ru = 'Закрытие заказов не выполнено. Закрыть форму?'"),
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = "Закрыть" Тогда
		ПринудительноЗакрытьФорму = Истина;
		Закрыть(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЗакрытияЗаказов();
	УстановитьВидимостьПричиныОтмены();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтменитьНепоставленноеПриИзменении(Элемент)
	
	УстановитьВидимостьПричиныОтмены();
	УстановитьДоступностьЗакрытияЗаказов();
	ЗаполнитьСтраницыКОтображению(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьМерныеТоварыПриИзменении(Элемент)
	
	УстановитьДоступностьЗакрытияЗаказов();
	ЗаполнитьСтраницыКОтображению(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьЦеныПриИзменении(Элемент)
	УстановитьДоступностьЗакрытияЗаказов();
	ЗаполнитьСтраницыКОтображению(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьЗаказыПриИзменении(Элемент)
	ЗаполнитьСтраницыКОтображению(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗаказа = "ЗаказКлиента" Тогда
		ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСКлиентами("КарточкаРасчетовСКлиентамиПоДокументамКонтекст",
																				Заказы[0].Значение);
	ИначеЕсли ТипЗаказа = "ЗаказПоставщику" Тогда
		ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСПоставщиками("КарточкаРасчетовСПоставщикамиПоДокументамКонтекст",
																				Заказы[0].Значение);
	ИначеЕсли ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСКлиентами("КарточкаРасчетовСКлиентамиПоДокументамКонтекст",
																				Заказы[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыКОтмене

&НаКлиенте
Процедура ТоварыКОтменеОтгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТоварыКОтменеОтгрузка.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ТоварыКОтменеОтгрузкаЗаказ" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТоварыКОтменеОтгрузка.ТекущиеДанные.Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыКОтменеПриемкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТоварыКОтменеПриемка.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ТоварыКОтменеПриемкаЗаказ" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТоварыКОтменеПриемка.ТекущиеДанные.Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерныеТоварыККорректировкеПриемкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.МерныеТоварыККорректировкеПриемка.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "МерныеТоварыККорректировкеПриемкаЗаказ" Тогда
			ПоказатьЗначение(Неопределено, Элементы.МерныеТоварыККорректировкеПриемка.ТекущиеДанные.Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерныеТоварыККорректировкеОтгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.МерныеТоварыККорректировкеОтгрузка.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "МерныеТоварыККорректировкеОтгрузкаЗаказ" Тогда
			ПоказатьЗначение(Неопределено, Элементы.МерныеТоварыККорректировкеОтгрузка.ТекущиеДанные.Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтклоненияЦен

&НаКлиенте
Процедура ОтклоненияЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ОтклоненияЦен.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ОтклоненияЦенЗаказПоставщику" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ОтклоненияЦен.ТекущиеДанные.ЗаказПоставщику);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыКЗакрытию

&НаКлиенте
Процедура НеотработанныеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элементы.НеотработанныеЗаказы.ТекущиеДанные.Заказ);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если ИспользоватьПричиныОтменыЗаказов И ОтменитьНеотработанныеСтроки И НЕ ЗначениеЗаполнено(ПричинаОтмены) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Причина отмены"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,,"ПричинаОтмены",,);
			
		Возврат;
		
	КонецЕсли;
	
	ИндексТекущейСтраницы =
		СтраницыКОтображению.Индекс(СтраницыКОтображению.НайтиПоЗначению(Элементы.Страницы.ТекущаяСтраница.Имя));
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Найти(СтраницыКОтображению[ИндексТекущейСтраницы+1]);
	
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ИндексТекущейСтраницы =
		СтраницыКОтображению.Индекс(СтраницыКОтображению.НайтиПоЗначению(Элементы.Страницы.ТекущаяСтраница.Имя));
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Найти(СтраницыКОтображению[ИндексТекущейСтраницы-1]);
	
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	Если ИспользоватьПричиныОтменыЗаказов И ОтменитьНеотработанныеСтроки И НЕ ЗначениеЗаполнено(ПричинаОтмены) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Причина отмены"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,,"ПричинаОтмены",,);
			
		Возврат;
		
	КонецЕсли;
	
	Если ЗаказыЗакрыты ИЛИ Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияВсеЗаказыЗакрыты Тогда
	
		Готово = Истина;
		Закрыть();
	
	Иначе
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("ИмяТабличнойЧасти",            "Товары");
		СтруктураДополнительныхПараметров.Вставить("ПричинаОтмены",                ПричинаОтмены);
		СтруктураДополнительныхПараметров.Вставить("ПроверятьОстатки",             Ложь);
		СтруктураДополнительныхПараметров.Вставить("ОтменитьНеотработанныеСтроки", ОтменитьНеотработанныеСтроки);
		СтруктураДополнительныхПараметров.Вставить("СкорректироватьМерныеТовары",  СкорректироватьМерныеТовары);
		СтруктураДополнительныхПараметров.Вставить("СкорректироватьМерныеТоварыПоПриемке", СкорректироватьМерныеТоварыПоПриемке);
		СтруктураДополнительныхПараметров.Вставить("СкорректироватьЦены",          СкорректироватьЦены);
		СтруктураДополнительныхПараметров.Вставить("ЗакрыватьЗаказы",              ЗакрыватьЗаказы);
		Если ОтклоненияЦен.Количество() > 0 Тогда 
			СтруктураДополнительныхПараметров.Вставить("ОтклоненияЦен", ОтклоненияЦен);
		КонецЕсли;
		
		//Если открыли помощник из заказа
		Если Заказы.Количество() = 1 И ДокументИнициатор = Заказы[0].Значение Тогда
			ОповеститьОВыборе(СтруктураДополнительныхПараметров);
			Возврат;
		КонецЕсли;
		
		ГотовоСервер(ЗакрыватьЗаказы, Заказы, СтруктураДополнительныхПараметров);
		
		Оповестить("ЗакрытиеЗаказов", ДокументИнициатор);
		
		Если НеотработанныеЗаказы.Количество() > 0 Тогда
			
			Элементы.ЗакрытиеЗаказовДекорацияНеудача.Заголовок = СформироватьТекстОбработано();
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
			Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияВсеЗаказыЗакрыты;
			
		Иначе
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииУстановкиВидимостиИДоступности

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЗаказПоставщику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинкиСуммы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтСуммыЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЦенаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЦенаПоступления");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинкиСуммы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтСуммыЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЦенаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЦенаПоступления");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинкиСуммы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтСуммыЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.СуммаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.СуммаПоступления");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинкиСуммы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтСуммыЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.СуммаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.СуммаПоступления");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПриСоздании()
	
	ПараметрыОтбора = Новый Структура("ЭтоОтгрузка", Истина);
	СтрокиОтгрузки = МерныеТоварыККорректировке.НайтиСтроки(ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура("ЭтоОтгрузка", Ложь);
	СтрокиПриемки = МерныеТоварыККорректировке.НайтиСтроки(ПараметрыОтбора);
	
	ЕстьМерныеТоварыККорректировке          = СтрокиОтгрузки.Количество() > 0;
	ЕстьМерныеТоварыККорректировкеПоПриемке = СтрокиПриемки.Количество() > 0;
	
	Элементы.СкорректироватьМерныеТовары.Видимость          = ЕстьМерныеТоварыККорректировке;
	Элементы.СкорректироватьМерныеТоварыПоПриемке.Видимость = ЕстьМерныеТоварыККорректировкеПоПриемке;
	
	ЕстьТоварыКОтмене = ТоварыКОтмене.Количество() > 0;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
																	"ГруппаНачалоОтменитьНепоставленные",
																	"Видимость",
																	ЕстьТоварыКОтмене);
	
	ЕстьРазличияЦен = ОтклоненияЦен.Количество() > 0;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
																	"ГруппаНачалоРазличияЦен",
																	"Видимость",
																	ЕстьРазличияЦен);
	
	Элементы.ЗакрыватьЗаказы.Видимость = НЕ ЗаказыЗакрыты И ИспользуетсяСтатусЗакрыт И НЕ СтатусЗакрытУстановлен;
	
	Элементы.МерныеТоварыККорректировкеОтгрузкаЗаказ.Видимость = Заказы.Количество() > 1;
	Элементы.МерныеТоварыККорректировкеПриемкаЗаказ.Видимость = Заказы.Количество() > 1;
	Элементы.ТоварыКОтменеОтгрузкаЗаказ.Видимость = Заказы.Количество() > 1;
	Элементы.ТоварыКОтменеПриемкаЗаказ.Видимость = Заказы.Количество() > 1;
	Элементы.ОтклоненияЦенЗаказПоставщику.Видимость = Заказы.Количество() > 1;
	
	Элементы.ЗакрыватьЗаказы.ОтображениеПодсказки = ?(ДокументИнициатор = Заказы[0].Значение, ОтображениеПодсказки.Нет, ОтображениеПодсказки.ОтображатьСнизу);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПричиныОтмены()
	
	Если ОтменитьНеотработанныеСтроки И ИспользоватьПричиныОтменыЗаказов Тогда
		Элементы.ГруппаПричинаОтмены.ТекущаяСтраница = Элементы.ПричиныОтменыИспользуются;
	Иначе
		Элементы.ГруппаПричинаОтмены.ТекущаяСтраница = Элементы.ПричиныОтменыНеИспользуются
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЗакрытияЗаказов()
	
	Если НЕ ЗаказыЗакрыты 
		И (СкорректироватьМерныеТовары
			Или СкорректироватьМерныеТоварыПоПриемке 
			Или МерныеТоварыККорректировке.Количество() = 0)
		И (ОтменитьНеотработанныеСтроки 
			Или ТоварыКОтмене.Количество() =0)
		И (СкорректироватьЦены 
			Или ОтклоненияЦен.Количество() =0) 
		И НЕ СтатусЗакрытУстановлен Тогда
		
		Элементы.ЗакрыватьЗаказы.Доступность = Истина;
		
	Иначе
		
		Элементы.ЗакрыватьЗаказы.Доступность = Ложь;
		
	КонецЕсли;
	
	Если ЗакрыватьЗаказы И НЕ Элементы.ЗакрыватьЗаказы.Доступность Тогда
		ЗакрыватьЗаказы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	Если (ТипЗаказа = "ЗаказКлиента" ИЛИ ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента") И ЕстьТоварыКОтмене Тогда
		ИспользоватьПричиныОтменыЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
		Элементы.ПричинаОтмены.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов");
	ИначеЕсли ТипЗаказа = "ЗаказПоставщику" Тогда
		ИспользоватьПричиныОтменыЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
		Элементы.ПричинаОтмены.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовПоставщикам");
	Иначе
		ИспользоватьПричиныОтменыЗаказов = Ложь;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЭтоОтгрузка", Истина);
	СтрокиОтгрузки = МерныеТоварыККорректировке.НайтиСтроки(ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура("ЭтоОтгрузка", Ложь);
	СтрокиПриемки = МерныеТоварыККорректировке.НайтиСтроки(ПараметрыОтбора);
	
	ЕстьМерныеТоварыККорректировке          = СтрокиОтгрузки.Количество() > 0;
	ЕстьМерныеТоварыККорректировкеПоПриемке = СтрокиПриемки.Количество() > 0;
	
	СкорректироватьМерныеТовары          = ЕстьМерныеТоварыККорректировке;
	СкорректироватьМерныеТоварыПоПриемке = ЕстьМерныеТоварыККорректировкеПоПриемке;
	ОтменитьНеотработанныеСтроки         = ОтменитьНеотработанныеСтроки И ТоварыКОтмене.Количество() > 0;
	СкорректироватьЦены                  = СкорректироватьЦены И ОтклоненияЦен.Количество() > 0;
	
	Если (СкорректироватьМерныеТовары
			Или СкорректироватьМерныеТоварыПоПриемке
			Или МерныеТоварыККорректировке.Количество() = 0)
		И (ОтменитьНеотработанныеСтроки 
			Или ТоварыКОтмене.Количество() = 0)
		И (СкорректироватьЦены 
			Или ОтклоненияЦен.Количество() = 0)
		И Не ЗаказыЗакрыты И ЗакрыватьЗаказы И ИспользуетсяСтатусЗакрыт 
		И НЕ СтатусЗакрытУстановлен Тогда
		ЗакрыватьЗаказы = Истина;
	Иначе
		ЗакрыватьЗаказы = Ложь;
	КонецЕсли;
	
	Если ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		СтатусЗакрыт = "Выполнена";
	Иначе
		СтатусЗакрыт = "Закрыт";
	КонецЕсли;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ЭтоОтгрузка", Истина);
	Элементы.МерныеТоварыККорректировкеОтгрузка.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	Элементы.ТоварыКОтменеОтгрузка.ОтборСтрок              = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ЭтоОтгрузка", Ложь);
	Элементы.МерныеТоварыККорректировкеПриемка.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	Элементы.ТоварыКОтменеПриемка.ОтборСтрок              = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьРасчеты()
	
	Если ТипЗаказа = "ЗаказКлиента" ИЛИ ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		НеЗакрыватьЗаказыКлиентовБезПолнойОплаты   = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
		НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
		
		Если НЕ ИспользуетсяСтатусЗакрыт Тогда
			 Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОграничений;
		ИначеЕсли НеЗакрыватьЗаказыКлиентовБезПолнойОплаты И НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки Тогда
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОтгрузкиБезОплаты;
		ИначеЕсли НеЗакрыватьЗаказыКлиентовБезПолнойОплаты Тогда
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОплаты;
		ИначеЕсли НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки Тогда
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОтгрузки;
		Иначе
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОграничений;
		КонецЕсли;
		
		Если Заказы.Количество() = 1 И ТипЗаказа = "ЗаказКлиента" Тогда
			
			СтруктураСостоянияРасчетов = Новый Структура;
			СтруктураСостоянияРасчетов.Вставить("Состояние", Перечисления.СостоянияЗаказовКлиентов.ПустаяСсылка());
			СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено", Ложь);
			СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
			СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
			СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
			СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
			СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
			СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
			СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
			
			РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказы[0].Значение,"Договор,Валюта");
			
			Документы.ЗаказКлиента.РассчитатьСостояние(
				Заказы[0].Значение,
				РеквизитыЗаказа.Договор,
				СтруктураСостоянияРасчетов);
			
			ТекстОплата = НСтр("ru='Оплачено по заказу: %СуммаОплаты%  %Валюта%  %ПроцентОплаты%%'");
			ТекстОплата = СтрЗаменить(ТекстОплата, "%СуммаОплаты%",   Формат(СтруктураСостоянияРасчетов.СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН="));
			ТекстОплата = СтрЗаменить(ТекстОплата, "%Валюта%",        РеквизитыЗаказа.Валюта);
			ТекстОплата = СтрЗаменить(ТекстОплата, "%ПроцентОплаты%", СтруктураСостоянияРасчетов.ПроцентОплаты);
			
			ТекстОтгрузка = НСтр("ru='Отгружено: %СуммаОтгрузки% %Валюта%  %ПроцентОтгрузки%%'");
			ТекстОтгрузка = СтрЗаменить(ТекстОтгрузка, "%СуммаОтгрузки%",   Формат(СтруктураСостоянияРасчетов.СуммаОтгрузки, "ЧЦ=15; ЧДЦ=2; ЧН="));
			ТекстОтгрузка = СтрЗаменить(ТекстОтгрузка, "%Валюта%",          РеквизитыЗаказа.Валюта);
			ТекстОтгрузка = СтрЗаменить(ТекстОтгрузка, "%ПроцентОтгрузки%", СтруктураСостоянияРасчетов.ПроцентОтгрузки);
			
			Расчеты = ТекстОплата + ", "+ТекстОтгрузка;
			
		ИначеЕсли Заказы.Количество() = 1 И ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			
			РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказы[0].Значение,"Валюта, ПорядокРасчетов");
			
			Если РеквизитыЗаявки.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			
				Расчеты = НСтр("ru='Расчеты по договору'");
			
			Иначе
			
				СтруктураРасчетов = Документы.ЗаявкаНаВозвратТоваровОтКлиента.РасчетыПоЗаявке(Заказы[0].Значение);
				
				Если Не СтруктураРасчетов.БылиРасчеты Тогда
					
					Расчеты = НСтр("ru='Расчеты по заявке отсутствуют'");
					
				Иначе
					
					ИтогРасчетов = СтруктураРасчетов.НашДолг - СтруктураРасчетов.ДолгКлиента;
					
					Если СтруктураРасчетов.НашДолг > СтруктураРасчетов.ДолгКлиента Тогда
						
						Расчеты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Наш долг по заявке: %1 %2'"),
							Формат(ИтогРасчетов,"ЧДЦ=2"),
							РеквизитыЗаявки.Валюта);
							
					ИначеЕсли СтруктураРасчетов.ДолгКлиента > СтруктураРасчетов.НашДолг Тогда
							
						Расчеты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Долг клиента по заявке: %1 %2'"),
							Формат(ИтогРасчетов*-1,"ЧДЦ=2"),
							РеквизитыЗаявки.Валюта);
							
					Иначе
						Расчеты = НСтр("ru='Заявка закрыта по расчетам'");
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;

		КонецЕсли;
	ИначеЕсли ТипЗаказа = "ЗаказПоставщику" Тогда
		
		НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты   =
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
		НеЗакрыватьЗаказыПоставщикамБезПолнойОтгрузки =
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
		
		Если НЕ ИспользуетсяСтатусЗакрыт Тогда
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОграничений;
		ИначеЕсли НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты И НеЗакрыватьЗаказыПоставщикамБезПолнойОтгрузки Тогда
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОтгрузкиБезОплаты;
		ИначеЕсли НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты Тогда
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОплаты;
		ИначеЕсли НеЗакрыватьЗаказыПоставщикамБезПолнойОтгрузки Тогда
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОтгрузки;
		Иначе
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОграничений;
		КонецЕсли;
		
		Если Заказы.Количество() = 1 Тогда
			
			СтруктураСостоянияРасчетов = Новый Структура;
			СтруктураСостоянияРасчетов.Вставить("Состояние", Перечисления.СостоянияЗаказовПоставщикам.ПустаяСсылка());
			СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено", Ложь);
			СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
			СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
			СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
			СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
			СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
			СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
			СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
			
			РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказы[0].Значение,"Договор,Валюта");
			
			Документы.ЗаказПоставщику.РассчитатьСостояние(
				Заказы[0].Значение,
				РеквизитыЗаказа.Договор,
				СтруктураСостоянияРасчетов);
			
			ТекстОплата = НСтр("ru='Оплачено по заказу: %СуммаОплаты%  %Валюта%  %ПроцентОплаты%%'");
			ТекстОплата = СтрЗаменить(ТекстОплата, "%СуммаОплаты%",   Формат(СтруктураСостоянияРасчетов.СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН="));
			ТекстОплата = СтрЗаменить(ТекстОплата, "%Валюта%",        РеквизитыЗаказа.Валюта);
			ТекстОплата = СтрЗаменить(ТекстОплата, "%ПроцентОплаты%", СтруктураСостоянияРасчетов.ПроцентОплаты);
			
			ТекстОтгрузка = НСтр("ru='Поступило: %СуммаОтгрузки% %Валюта%  %ПроцентОтгрузки%%'");
			ТекстОтгрузка = СтрЗаменить(ТекстОтгрузка, "%СуммаОтгрузки%",   Формат(СтруктураСостоянияРасчетов.СуммаОтгрузки, "ЧЦ=15; ЧДЦ=2; ЧН="));
			ТекстОтгрузка = СтрЗаменить(ТекстОтгрузка, "%Валюта%",          РеквизитыЗаказа.Валюта);
			ТекстОтгрузка = СтрЗаменить(ТекстОтгрузка, "%ПроцентОтгрузки%", СтруктураСостоянияРасчетов.ПроцентОтгрузки);
			
			Расчеты = ТекстОплата + ", "+ТекстОтгрузка;
		КонецЕсли;
		
	ИначеЕсли ТипЗаказа = "ЗаказНаВнутреннееПотребление" ИЛИ ТипЗаказа = "ЗаказНаСборку" Тогда
		Если ИспользуетсяСтатусЗакрыт Тогда
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОтгрузки;
		Иначе
			Элементы.ГруппаПредупреждения.ТекущаяСтраница = Элементы.ГруппаЗакрытиеБезОграничений;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтраницыКОтображению(Форма)
	
	Если Форма.ЗаказыЗакрыты Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаВсеЗаказыЗакрыты;
		Возврат;
	КонецЕсли;
	
	Форма.СтраницыКОтображению.Очистить();
	
	Форма.СтраницыКОтображению.Добавить("СтраницаНачальная");
	
	ЕстьМерныеОтгрузка  =
		Форма.МерныеТоварыККорректировке.НайтиСтроки(Новый Структура("ЭтоОтгрузка", Истина)).Количество() > 0;
		
	ЕстьМерныеПриемка   =
		Форма.МерныеТоварыККорректировке.НайтиСтроки(Новый Структура("ЭтоОтгрузка", Ложь)).Количество() > 0;
		
	ЕстьКОтменеОтгрузка =
		Форма.ТоварыКОтмене.НайтиСтроки(Новый Структура("ЭтоОтгрузка", Истина)).Количество() > 0;
		
	ЕстьКОтменеПриемка  =
		Форма.ТоварыКОтмене.НайтиСтроки(Новый Структура("ЭтоОтгрузка", Ложь)).Количество() > 0;
	
	Если Форма.СкорректироватьМерныеТовары Тогда
		Если ЕстьМерныеОтгрузка Тогда
			Форма.СтраницыКОтображению.Добавить("СтраницаКорректировкаМерныхТоваровОтгрузка");
		КонецЕсли;
	КонецЕсли;
	Если Форма.СкорректироватьМерныеТоварыПоПриемке Тогда
		Если ЕстьМерныеПриемка Тогда
			Форма.СтраницыКОтображению.Добавить("СтраницаКорректировкаМерныхТоваровПриемка");
		КонецЕсли;
	КонецЕсли;
	Если Форма.ОтменитьНеотработанныеСтроки Тогда
		Если ЕстьКОтменеОтгрузка Тогда
			Форма.СтраницыКОтображению.Добавить("СтраницаТоварыКОтменеОтгрузка");
		КонецЕсли;
		Если ЕстьКОтменеПриемка Тогда
			Форма.СтраницыКОтображению.Добавить("СтраницаТоварыКОтменеПриемка");
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.СкорректироватьЦены Тогда
		Форма.СтраницыКОтображению.Добавить("СтраницаРазличияЦен");
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуПанелиНавигации(Форма)
	
	Если Форма.СтраницыКОтображению.Количество() < 2 Тогда
		Если НЕ Форма.ЗакрыватьЗаказы Тогда
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияВсеЗаказыЗакрыты;
			Форма.Элементы.ВсеЗаказыЗакрытыГотово.КнопкаПоУмолчанию = Истина;
		Иначе
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияОкончаниеБезНачала;
			Форма.Элементы.ОкончаниеБезНачалаГотово.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПерваяСтраница = Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаНачальная
					И НЕ Форма.ЗаказыЗакрыты;
	
	НеПоследняяСтраница = НЕ Форма.Элементы.Страницы.ТекущаяСтраница.Имя
							= Форма.СтраницыКОтображению.Получить(Форма.СтраницыКОтображению.Количество()-1).Значение
						  И НЕ Форма.ЗаказыЗакрыты;
	
	Если ПерваяСтраница Тогда
		Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияНачало;
		Форма.Элементы.НачалоГотово.КнопкаПоУмолчанию = Истина;
	ИначеЕсли НеПоследняяСтраница Тогда
		Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияПродолжение;
		Форма.Элементы.ПродолжениеГотово.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Форма.ЗаказыЗакрыты Тогда
		Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияВсеЗаказыЗакрыты;
		Форма.Элементы.ВсеЗаказыЗакрытыГотово.КнопкаПоУмолчанию = Истина;
	Иначе
		Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияОкончание;
		Форма.Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкиИДекорации()
	
	Если ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		Если Заказы.Количество() = 1 Тогда
			ТекстРП = НСтр("ru='заявки'");
			ТекстИП = НСтр("ru='заявка'");
			ТекстДП = НСтр("ru='заявке'");
			ОкончаниеИП = НСтр("ru='ая'");
		Иначе
			ТекстРП = НСтр("ru='заявок'");
			ТекстИП = НСтр("ru='заявки'");
			ТекстДП = НСтр("ru='заявкам'");
			ОкончаниеИП = НСтр("ru='ые'");
		КонецЕсли;
		СтатусЗакрытПредставление = НСтр("ru='""Выполнена""'");
	Иначе
		Если Заказы.Количество() = 1 Тогда
			ТекстРП = НСтр("ru='заказа'");
			ТекстИП = НСтр("ru='заказ'");
			ТекстДП = НСтр("ru='заказу'");
			ОкончаниеИП = НСтр("ru='ый'");
		Иначе
			ТекстРП = НСтр("ru='заказов'");
			ТекстИП = НСтр("ru='заказы'");
			ТекстДП = НСтр("ru='заказам'");
			ОкончаниеИП = НСтр("ru='ые'");
		КонецЕсли;
		СтатусЗакрытПредставление = НСтр("ru='""Закрыт""'");
	КонецЕсли;
	
	ТекстНеОформленаОтгрузка = "";
	ТекстНеОформленаПриемка  = "";
	
	Если ТипЗаказа = "ЗаказКлиента" Тогда
		ТекстНеОформленаОтгрузка = НСтр("ru='не оформлена реализация и не осуществлялась отгрузка'");
	ИначеЕсли ТипЗаказа = "ЗаказПоставщику" Тогда
		ТекстНеОформленаПриемка = НСтр("ru='не оформлено поступление и не осуществлялась приемка'");
	ИначеЕсли ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ТекстНеОформленаОтгрузка = НСтр("ru='не оформлена реализация замены и не осуществлялась отгрузка'");
		ТекстНеОформленаПриемка = НСтр("ru='не оформлен возврат'");
	ИначеЕсли ТипЗаказа = "ЗаказНаВнутреннееПотребление" Тогда
		ТекстНеОформленаОтгрузка = НСтр("ru='не оформлено списание и не осуществлялась отгрузка'");
	ИначеЕсли ТипЗаказа = "ЗаказНаСборку" Тогда
		ТекстНеОформленаОтгрузка = НСтр("ru='не оформлена сборка и не осуществлялась отгрузка'");
		ТекстНеОформленаПриемка = НСтр("ru='не осуществлялась приемка'");
	ИначеЕсли ТипЗаказа = "ЗаказНаПеремещение" Тогда
		ТекстНеОформленаОтгрузка = НСтр("ru='не оформлено перемещение и не осуществлялась отгрузка'");
		ТекстНеОформленаПриемка = НСтр("ru='не осуществлялась приемка'");
	КонецЕсли;
	
	Заголовок = СтрЗаменить(НСтр("ru='Помощник закрытия %РП%'"),"%РП%",ТекстРП);
	
	ТекстИ             = ?(ЗначениеЗаполнено(ТекстНеОформленаОтгрузка) И ЗначениеЗаполнено(ТекстНеОформленаПриемка),
							НСтр("ru=', а также '"),
							"");
	ТекстПричинаОтмены = ?(ИспользоватьПричиныОтменыЗаказов, НСтр("ru='Необходимо указать причину отмены.'"), "");
	
	ТекстСтрокиОтгрузка = НСтр("ru='Строки'");
	ТекстСтрокиПриемка  = НСтр("ru='Строки'");
	
	Если ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ТекстСтрокиОтгрузка = НСтр("ru='Строки заменяющих товаров'");
		ТекстСтрокиПриемка  = НСтр("ru='Строки возвращаемых товаров'");
	ИначеЕсли ТипЗаказа = "ЗаказНаСборку" Тогда
		ТекстСтрокиОтгрузка = НСтр("ru='Строки списываемых комплектующих / разбираемых комплектов'");
		ТекстСтрокиПриемка  = НСтр("ru='Строки приходуемых комплектующих / собираемых комплектов'");
	КонецЕсли;
	
	//Начальная страница
	
	Элементы.СкорректироватьМерныеТовары.Заголовок          = НСтр("ru='Скорректировать строки мерных товаров.'");
	Элементы.СкорректироватьМерныеТоварыПоПриемке.Заголовок = НСтр("ru='Скорректировать строки мерных товаров.'");
	
	Если ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		Элементы.СкорректироватьМерныеТовары.Заголовок          = НСтр("ru='Скорректировать строки мерных заменяющих товаров.'");
		Элементы.СкорректироватьМерныеТоварыПоПриемке.Заголовок = НСтр("ru='Скорректировать строки мерных возвращаемых товаров.'");
	ИначеЕсли ТипЗаказа = "ЗаказНаСборку" Тогда
		Элементы.СкорректироватьМерныеТовары.Заголовок          = НСтр("ru='Скорректировать строки мерных списываемых комплектующих / разбираемых комплектов.'");
		Элементы.СкорректироватьМерныеТоварыПоПриемке.Заголовок = НСтр("ru='Скорректировать строки мерных приходуемых комплектующих / собираемых комплектов.'");
	КонецЕсли;
	
	Элементы.СкорректироватьМерныеТовары.РасширеннаяПодсказка.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В строках %1 с мерными товарами будут устранены расхождения с накладными в пределах допустимых отклонений.'"),
			ТекстРП);
			
	Элементы.СкорректироватьМерныеТоварыПоПриемке.РасширеннаяПодсказка.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В строках %1 с мерными товарами будут устранены расхождения с накладными в пределах допустимых отклонений.'"),
			ТекстРП);
	
	Элементы.ГруппаНачалоОтменитьНепоставленные.РасширеннаяПодсказка.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Строки %1, по которым %2%3%4, будут отменены. %5'"), 
			ТекстРП,
			ТекстНеОформленаОтгрузка,
			ТекстИ,
			ТекстНеОформленаПриемка,
			ТекстПричинаОтмены);
		
	Элементы.ЗакрыватьЗаказы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Устанавливать статус %1.'"), 
		СтатусЗакрытПредставление);
		
	Элементы.ЗакрыватьЗаказы.РасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='При выполнении необходимых условий %1 будет установлен статус %2.'"), 
		ТекстДП,
		СтатусЗакрытПредставление);
		
	Если Заказы.Количество() = 1 Тогда
		
		Окончание = ?(ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента",НСтр("ru='а'"),"");
		
		Элементы.ДекорацияОтгрузкаБезОплаты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Частично оплаченн%1 %2 не будет закрыт%3.'"), 
			ОкончаниеИП,
			ТекстИП,
			Окончание);
		
		Элементы.ДекорацияОтгрузкаБезОтгрузки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Частично выполненн%1 %2 не будет закрыт%3. Текущее состояние может измениться после корректировок строк.'"), 
			ОкончаниеИП,
			ТекстИП,
			Окончание);
		
		Элементы.ДекорацияОтгрузкаБезОплатыИлиОтгрузки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Частично выполненн%1 или частично оплаченн%1 %2 не будет закрыт%3. Текущее состояние может измениться после корректировок строк.'"),
			ОкончаниеИП,
			ТекстИП,
			Окончание);
	Иначе
			
		Элементы.ДекорацияОтгрузкаБезОплаты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Частично оплаченн%1 %2 не будут закрыты.'"),
				ОкончаниеИП,
				ТекстИП);
		
		Элементы.ДекорацияОтгрузкаБезОтгрузки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Частично выполненн%1 %2 не будут закрыты. Текущее состояние может измениться после корректировок строк.'"), 
			ОкончаниеИП,
			ТекстИП);
		
		Элементы.ДекорацияОтгрузкаБезОплатыИлиОтгрузки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Частично выполненн%1 или частично оплаченн%1 %2 не будут закрыты. Текущее состояние может измениться после корректировок строк.'"), 
			ОкончаниеИП,
			ТекстИП);
			
	КонецЕсли;
	
	//Мерные товары
	Элементы.МерныеТоварыККорректировкеОтгрузкаДекорация.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2 с мерными товарами, по которым имеются расхождения в пределах допустимых отклонений будут скорректированы.'"),
			ТекстСтрокиОтгрузка,
			ТекстРП);
	
	Элементы.МерныеТоварыККорректировкеПриемкаДекорация.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2 с мерными товарами, по которым имеются расхождения в пределах допустимых отклонений будут скорректированы.'"),
			ТекстСтрокиПриемка,
			ТекстРП);
	
	//Товары к отмене
	Элементы.ТоварыКОтменеОтгрузкаДекорация.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2, по которым %3, будут отменены.'"),
		ТекстСтрокиОтгрузка,
		ТекстРП,
		ТекстНеОформленаОтгрузка);
	
	Элементы.ТоварыКОтменеПриемкаДекорация.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2, по которым %3, будут отменены.'"),
		ТекстСтрокиПриемка,
		ТекстРП,
		ТекстНеОформленаПриемка);
	
	//Закрытие заказов
	Элементы.ЗакрытиеЗаказовДекорацияНеудача.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Не удалось обработать %1:'"),
		ТекстИП);
		
	Если Заказы.Количество() = 1 Тогда
		Элементы.ЗакрытиеЗаказовДекорацияНеудача.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Указанн%1 %2 обработан. Нажмите ""Закрыть"" для завершения.'"),
			ОкончаниеИП,
			ТекстИП);
		
		Элементы.ВсеЗаказыЗакрытыДекорация.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Указанн%1 %2 уже закрыт или не требует закрытия. Нажмите ""Закрыть"" для завершения.'"),
			ОкончаниеИП,
			ТекстИП);
	Иначе
		Элементы.ЗакрытиеЗаказовДекорацияНеудача.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Все %1 обработаны. Нажмите ""Закрыть"" для завершения.'"),
			ОкончаниеИП,
			ТекстИП);
		
		Элементы.ВсеЗаказыЗакрытыДекорация.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Все %1 уже закрыты или не требуют закрытия. Нажмите ""Закрыть"" для завершения.'"),
			ОкончаниеИП,
			ТекстИП);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТабличныхЧастей

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаказам(ТаблицаТоваровПриход, ТаблицаТоваровРасход)
	
	Если ТипЗнч(Заказы[0].Значение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ТипЗаказа = "ЗаказПоставщику";
		
		ИспользуетсяСтатусЗакрыт = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления")
								ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
		
		ЗаполнитьОтклоненияПоЗаказамПоставщикам();
		
	ИначеЕсли ТипЗнч(Заказы[0].Значение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ТипЗаказа = "ЗаказКлиента";
		
		ИспользуетсяСтатусЗакрыт = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты") 
								ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
		
		ЗаполнитьОтклоненияПоЗаказамКлиентов(ТаблицаТоваровРасход);
		
	ИначеЕсли ТипЗнч(Заказы[0].Значение) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		
		ТипЗаказа = "ЗаказНаВнутреннееПотребление";
		
		ИспользуетсяСтатусЗакрыт = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки");
		
		ЗаполнитьОтклоненияПоЗаказамНаВнутреннееПотребление();
		
	ИначеЕсли ТипЗнч(Заказы[0].Значение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		ТипЗаказа = "ЗаказНаПеремещение";
		
		ИспользуетсяСтатусЗакрыт = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки");
		
		ЗаполнитьОтклоненияПоЗаказамНаПеремещение();
		
	ИначеЕсли ТипЗнч(Заказы[0].Значение) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		
		ТипЗаказа = "ЗаказНаСборку";
		
		ИспользуетсяСтатусЗакрыт = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки");
		
		ЗаполнитьОтклоненияПоЗаказамНаСборку();
		
	ИначеЕсли ТипЗнч(Заказы[0].Значение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента";
		
		ИспользуетсяСтатусЗакрыт = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты") 
								ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
		
		ЗаполнитьОтклоненияПоЗаявкамНаВозвратТоваровОтКлиента(ТаблицаТоваровПриход, ТаблицаТоваровРасход);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаказамПоставщикам()
	УстановитьПривилегированныйРежим(Истина);
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));

	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Ссылка",    Новый ОписаниеТипов(МассивТиповДокументов));
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПриобретениеТоваровУслуг.Валюта КАК Валюта,
	|	ПриобретениеТоваровУслуг.Дата   КАК Дата
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ПриобретениеТоваровУслугТовары.Ссылка
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.ЗаказПоставщику В (&ЗаказыПоставщикам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ЗаказПоставщику.Дата   КАК Дата
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В (&ЗаказыПоставщикам)");
	
	Запрос.УстановитьПараметр("ЗаказыПоставщикам", Заказы.ВыгрузитьЗначения());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
		НоваяСтрока.Курс = КурсыВалюты.Курс;
		НоваяСтрока.Кратность = КурсыВалюты.Кратность;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКурсовВалют.Ссылка    КАК Ссылка,
	|	ТаблицаКурсовВалют.Валюта    КАК Валюта,
	|	ТаблицаКурсовВалют.Дата      КАК Дата,
	|	ТаблицаКурсовВалют.Курс      КАК Курс,
	|	ТаблицаКурсовВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	&ТаблицаКурсовВалют КАК ТаблицаКурсовВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&ЗаказыПоставщикам)
	|	И ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|	И &ИспользоватьСтатусЗакрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ЗаказПоставщику КАК Заказ,
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.Склад КАК Склад,
	|	Остатки.КОформлениюКонечныйОстаток КАК Количество,
	|	ВЫБОР 
	|		КОГДА Остатки.КОформлениюКонечныйОстаток > 0 
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ЕстьТоварыКОтмене,
	|	Остатки.ЗаказаноПриход КАК Заказано
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(&НачПериодЗаказыПоставщикам, &КонПериодЗаказыПоставщикам,
	|		,, ЗаказПоставщику В (&ЗаказыПоставщикам)) КАК Остатки
	|ГДЕ
	|	Остатки.КОформлениюКонечныйОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.Номенклатура     КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика   КАК Характеристика,
	|	ТоварыКПоступлению.Склад            КАК Склад,
	|	ТоварыКПоступлению.ЗаказПоставщику  КАК Заказ,
	|	СУММА(ТоварыКПоступлению.КОформлениюПриход
	|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(&НачПериодЗаказыПоставщикам, &КонПериодЗаказыПоставщикам,
	|		, ЗаказПоставщику В (&ЗаказыПоставщикам)) КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Склад,
	|	ТоварыКПоступлению.ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.Ссылка КАК ЗаказПоставщику,
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыЗаказа.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказа.Характеристика КАК Характеристика,
	|	ПриобретениеТоваровУслугТовары.Ссылка.Валюта КАК ВалютаПоступления,
	|	СУММА(ТоварыЗаказа.Количество) КАК КоличествоЗаказа,
	|	NULL КАК КоличествоПоступления,
	|	(ТоварыЗаказа.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1))*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) 
	|	* ВЫБОР
	|		КОГДА ТоварыЗаказа.Ссылка.Валюта <> ПриобретениеТоваровУслугТовары.Ссылка.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЗаказ.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЗаказ.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЗаказ.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЗаказ.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1 КОНЕЦ КАК ЦенаЗаказа,
	|	СУММА(ТоварыЗаказа.Сумма 
	|		* ВЫБОР
	|		КОГДА ТоварыЗаказа.Ссылка.Валюта <> ПриобретениеТоваровУслугТовары.Ссылка.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЗаказ.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЗаказ.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЗаказ.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЗаказ.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1 КОНЕЦ) КАК СуммаЗаказа,
	|	NULL КАК ЦенаПоступления,
	|	NULL КАК СуммаПоступления,
	|	ТоварыЗаказа.ПроцентРучнойСкидки КАК ПроцентРучнойСкидкиЗаказа,
	|	NULL КАК ПроцентРучнойСкидкиПоступления,
	|	NULL КАК СуммаРучнойСкидкиПоступления,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
	|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоэффициентПересчетаУпаковок
	|ПОМЕСТИТЬ ОтклоненияЦен
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
	|			ПО ТоварыЗаказа.КодСтроки = ПриобретениеТоваровУслугТовары.КодСтроки
	|				И ТоварыЗаказа.Ссылка = ПриобретениеТоваровУслугТовары.ЗаказПоставщику
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыЗаказ
	|		ПО ПриобретениеТоваровУслугТовары.ЗаказПоставщику.Ссылка.Валюта = КурсыВалютыЗаказ.Валюта
	|			И ПриобретениеТоваровУслугТовары.ЗаказПоставщику = КурсыВалютыЗаказ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалюты
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка.Валюта = КурсыВалюты.Валюта
	|			И ПриобретениеТоваровУслугТовары.Ссылка = КурсыВалюты.Ссылка 
	|ГДЕ
	|	ТоварыЗаказа.Ссылка В(&ЗаказыПоставщикам)
	|	И ТоварыЗаказа.Ссылка.Проведен
	|	И НЕ ТоварыЗаказа.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыЗаказа.КодСтроки,
	|	ТоварыЗаказа.Номенклатура,
	|	ТоварыЗаказа.Упаковка,
	|	ТоварыЗаказа.Характеристика,
	|	ТоварыЗаказа.Ссылка,
	|	ТоварыЗаказа.ПроцентРучнойСкидки,
	|	ТоварыЗаказа.Цена,
	|	ПриобретениеТоваровУслугТовары.Упаковка,
	|	ПриобретениеТоваровУслугТовары.Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Ссылка.Валюта,
	|	КурсыВалютыЗаказ.Кратность,
	|	КурсыВалютыЗаказ.Курс,
	|	КурсыВалюты.Кратность,
	|	КурсыВалюты.Курс
	|	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыПоступления.ЗаказПоставщику,
	|	ТоварыПоступления.КодСтроки,
	|	ТоварыПоступления.Номенклатура,
	|	ТоварыПоступления.Характеристика,
	|	ТоварыПоступления.Ссылка.Валюта,
	|	NULL,
	|	СУММА(ТоварыПоступления.Количество),
	|	NULL,
	|	NULL,
	|	ТоварыПоступления.Цена,
	|	СУММА(ТоварыПоступления.Сумма),
	|	NULL,
	|	ТоварыПоступления.ПроцентРучнойСкидки,
	|	СУММА(ТоварыПоступления.СуммаРучнойСкидки),
	|	NULL
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПоступления
	|ГДЕ
	|	ТоварыПоступления.ЗаказПоставщику В(&ЗаказыПоставщикам)
	|	И ТоварыПоступления.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПоступления.ЗаказПоставщику,
	|	ТоварыПоступления.КодСтроки,
	|	ТоварыПоступления.Номенклатура,
	|	ТоварыПоступления.Характеристика,
	|	ТоварыПоступления.Цена,
	|	ТоварыПоступления.ПроцентРучнойСкидки,
	|	ТоварыПоступления.Ссылка.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтклоненияЦен.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ОтклоненияЦен.КодСтроки КАК КодСтроки,
	|	ОтклоненияЦен.Номенклатура КАК Номенклатура,
	|	ОтклоненияЦен.Характеристика КАК Характеристика,
	|	ОтклоненияЦен.ВалютаПоступления КАК ВалютаПоступления,
	|	СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) КАК ЦенаЗаказа,
	|	СУММА(ОтклоненияЦен.СуммаЗаказа) КАК СуммаЗаказа,
	|	СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) КАК ЦенаПоступления,
	|	СУММА(ОтклоненияЦен.СуммаПоступления) КАК СуммаПоступления,
	|	СУММА(ОтклоненияЦен.СуммаРучнойСкидкиПоступления) КАК СуммаРучнойСкидкиПоступления,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) = 0
	|				ИЛИ СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) * 100 / СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) - 100
	|	КОНЕЦ КАК ПроцентОтклоненияОтЦеныЗаказа,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) = 0
	|				ИЛИ СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) * 100 / СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) - 100
	|	КОНЕЦ КАК ПроцентОтклоненияОтСуммыЗаказа,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) < СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА 3
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) > СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА 1
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) < СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА 3
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) > СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА 1
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК ИндексКартинкиСуммы,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) <> СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЦенаИзменилась,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОтклоненияЦен.КоличествоЗаказа) = МАКСИМУМ(ОтклоненияЦен.КоличествоПоступления)
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) <> СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммаИзменилась,
	|	МАКСИМУМ(ОтклоненияЦен.ПроцентРучнойСкидкиЗаказа) КАК ПроцентРучнойСкидкиЗаказа,
	|	МАКСИМУМ(ОтклоненияЦен.ПроцентРучнойСкидкиПоступления) КАК ПроцентРучнойСкидкиПоступления,
	|	СРЕДНЕЕ(ОтклоненияЦен.КоэффициентПересчетаУпаковок) КАК КоэффициентПересчетаУпаковок
	|ИЗ
	|	ОтклоненияЦен КАК ОтклоненияЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтклоненияЦен.ЗаказПоставщику,
	|	ОтклоненияЦен.КодСтроки,
	|	ОтклоненияЦен.Номенклатура,
	|	ОтклоненияЦен.Характеристика,
	|	ОтклоненияЦен.ВалютаПоступления
	|
	|ИМЕЮЩИЕ
	|	СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления)
	|		ИЛИ ((МАКСИМУМ(ОтклоненияЦен.КоличествоЗаказа) = МАКСИМУМ(ОтклоненияЦен.КоличествоПоступления)
	|			И СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления)))");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыЗаказа.Упаковка",
		"ТоварыЗаказа.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ПриобретениеТоваровУслугТовары.Упаковка",
		"ПриобретениеТоваровУслугТовары.Номенклатура"));
	
	Запрос.УстановитьПараметр("ЗаказыПоставщикам", Заказы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	Запрос.УстановитьПараметр("ИспользоватьСтатусЗакрыт", ИспользуетсяСтатусЗакрыт);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыПоставщикам",
																"ЗаказПоставщику В (&ЗаказыПоставщикам)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыПоставщикам", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыПоставщикам", ГраницыОборотов.МаксимальнаяДата);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаЗаказы = Результат[1].Выбрать();
	ТаблицаТоварыКОтмене = Результат[2].Выгрузить();
	ТоварыКОтмене.Загрузить(ТаблицаТоварыКОтмене);
	ДопустимыеОтклонения = Результат[3].Выгрузить();
	ОтклоненияЦен.Загрузить(Результат[5].Выгрузить());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаЗаказы.Количество() = 0 И
		ТоварыКОтмене.Количество() = 0 И
		ОтклоненияЦен.Количество() = 0 Тогда
		ЗаказыЗакрыты = Истина;
		Возврат;
	КонецЕсли;
	
	Если  ВыборкаЗаказы.Количество() = 0 Тогда
		СтатусЗакрытУстановлен = Истина;
	КонецЕсли;
	
	ЕстьТоварыКОтмене = ТаблицаТоварыКОтмене.НайтиСтроки(Новый Структура("ЕстьТоварыКОтмене", Истина)).Количество() > 0;
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров > 0 Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Склад, Заказ");
		
		ВыделитьМерныеТовары(ТоварыКОтмене, ДопустимыеОтклонения, СтруктураПоиска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаказамКлиентов(ТаблицаТоваровРасход)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&ЗаказыКлиента)
	|	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	|	И &ИспользоватьСтатусЗакрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентовОстатки.ЗаказКлиента                      КАК ЗаказКлиента,
	|	ЗаказыКлиентовОстатки.Номенклатура                      КАК Номенклатура,
	|	ЗаказыКлиентовОстатки.Характеристика                    КАК Характеристика,
	|	ЗаказыКлиентовОстатки.Склад                             КАК Склад,
	|	ЗаказыКлиентовОстатки.Серия                             КАК Серия,
	|	СУММА(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток) КАК КОформлениюКонечныйОстаток,
	|	СУММА(ЗаказыКлиентовОстатки.КОформлениюПриход)          КАК КОформлениюПриход
	|ПОМЕСТИТЬ ВтЗаказыКлиентовОстаткиОбороты
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов,
	|		,, ЗаказКлиента В (&ЗаказыКлиента)) КАК ЗаказыКлиентовОстатки
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентовОстатки.ЗаказКлиента,
	|	ЗаказыКлиентовОстатки.Номенклатура,
	|	ЗаказыКлиентовОстатки.Характеристика,
	|	ЗаказыКлиентовОстатки.Склад,
	|	ЗаказыКлиентовОстатки.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказыКлиентовОстатки.ЗаказКлиента,
	|	ЗаказыКлиентовОстатки.Номенклатура,
	|	ЗаказыКлиентовОстатки.Характеристика,
	|	ЗаказыКлиентовОстатки.Склад,
	|	ЗаказыКлиентовОстатки.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка         КАК Заказ,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Склад          КАК Склад,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.Количество     КАК Количество,
	|	ИСТИНА                       КАК ЭтоОтгрузка
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&ЗаказыКлиента)
	|	И (ТаблицаТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
	|	ИЛИ ТаблицаТовары.ВариантОбеспечения НЕ В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)))
	|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
	|	И НЕ ТаблицаТовары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Заказ,
	|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузкеОстатки.Серия КАК Серия,
	|	ТоварыКОтгрузкеОстатки.Склад КАК Склад,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеРасход + ТоварыКОтгрузкеОстатки.СобраноПриход
	|		+ ТоварыКОтгрузкеОстатки.СобираетсяПриход КАК Количество,
	|	0 КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
	|		&НачПериодТоварыКОтгрузке,&КонПериодТоварыКОтгрузке,,,
	|		ДокументОтгрузки В (&ЗаказыКлиента)) КАК ТоварыКОтгрузкеОстатки
	|ГДЕ
	|	НЕ ТоварыКОтгрузкеОстатки.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыКлиентовОстатки.ЗаказКлиента      КАК Заказ,
	|	ЗаказыКлиентовОстатки.Номенклатура      КАК Номенклатура,
	|	ЗаказыКлиентовОстатки.Характеристика    КАК Характеристика,
	|	ЗаказыКлиентовОстатки.Серия             КАК Серия,
	|	ЗаказыКлиентовОстатки.Склад             КАК Склад,
	|	ЗаказыКлиентовОстатки.КОформлениюРасход КАК Количество,
	|	0 КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(
	|		,,,, ЗаказКлиента В (&ЗаказыКлиента)) КАК ЗаказыКлиентовОстатки
	|ГДЕ
	|	ЗаказыКлиентовОстатки.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.ЗаказКлиента   КАК Заказ,
	|	ТоварыКОтгрузке.Номенклатура   КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Серия          КАК Серия,
	|	ТоварыКОтгрузке.Склад          КАК Склад,
	|	0,
	|	СУММА(ТоварыКОтгрузке.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов,
	|		, ЗаказКлиента В (&ЗаказыКлиента)) КАК ТоварыКОтгрузке
	|ГДЕ 
	|	ТоварыКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.ЗаказКлиента,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|%ТаблицаТоваров%
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Заказ                              КАК Заказ,
	|	ТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                     КАК Характеристика,
	|	ТаблицаТовары.Склад                              КАК Склад,
	|	ТаблицаТовары.Количество                         КАК Количество,
	|	ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток КАК КОформлениюОстаток,
	|	ВЫБОР КОГДА ТаблицаТовары.Количество > ЗаказыКлиентовОстатки.КОформлениюПриход ТОГДА
	|			ТаблицаТовары.Количество - ЗаказыКлиентовОстатки.КОформлениюПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ                                            КАК КоличествоСверхОформленного,
	|	ТаблицаТовары.Серия                              КАК Серия,
	|	ИСТИНА                                           КАК ЭтоОтгрузка
	|ИЗ
	|	ВТАктуальныеТоварыЗаказов КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаказыКлиентовОстаткиОбороты КАК ЗаказыКлиентовОстатки
	|		ПО ТаблицаТовары.Заказ = ЗаказыКлиентовОстатки.ЗаказКлиента
	|			И ТаблицаТовары.Номенклатура = ЗаказыКлиентовОстатки.Номенклатура
	|			И ТаблицаТовары.Характеристика = ЗаказыКлиентовОстатки.Характеристика
	|			И ТаблицаТовары.Склад = ЗаказыКлиентовОстатки.Склад
	|			И ТаблицаТовары.Серия = ЗаказыКлиентовОстатки.Серия
	|ГДЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента
	|
	|УПОРЯДОЧИТЬ ПО
	|	КОформлениюОстаток ВОЗР");
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ЗаказыКлиента", Заказы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	Запрос.УстановитьПараметр("ИспользоватьСтатусЗакрыт", ИспользуетсяСтатусЗакрыт);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыКлиентов",
																"ЗаказКлиента В (&ЗаказыКлиента)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентов", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентов", ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ТоварыКОтгрузке",
																"ДокументОтгрузки В (&ЗаказыКлиента)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодТоварыКОтгрузке", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодТоварыКОтгрузке", ГраницыОборотов.МаксимальнаяДата);
	
	ПоДокументу = Заказы.Количество() = 1 И Заказы[0].Значение = ДокументИнициатор;
	
	Запрос.УстановитьПараметр("ПоДокументу",ПоДокументу);
	Если ПоДокументу Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ТаблицаТоваров%","
		|ВЫБРАТЬ
		|	&Заказ                 КАК Ссылка,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Серия          КАК Серия,
		|	Таблица.Количество     КАК Количество,
		|	Таблица.Отменено       КАК Отменено,
		|	Таблица.ВариантОбеспечения КАК ВариантОбеспечения
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ &Товары КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка            КАК Заказ,
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Склад             КАК Склад,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТАктуальныеТоварыЗаказов
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	&ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И ТаблицаТовары.Ссылка В (&ЗаказыКлиента)
		|	И ТаблицаТовары.Ссылка.Статус НЕ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
		|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И НЕ ТаблицаТовары.Отменено
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Склад,
		|	ТаблицаТовары.Серия");
		
		Запрос.УстановитьПараметр("Товары",ТаблицаТоваровРасход);
		
		Запрос.УстановитьПараметр("Заказ",ДокументИнициатор);
		
		КоличествоЗапросов = 6;
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ТаблицаТоваров%","
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка            КАК Заказ,
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Склад             КАК Склад,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТАктуальныеТоварыЗаказов
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
		|ГДЕ
		|	&ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И ТаблицаТовары.Ссылка В (&ЗаказыКлиента)
		|	И ТаблицаТовары.Ссылка.Статус НЕ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
		|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Склад,
		|	ТаблицаТовары.Серия");
		
		КоличествоЗапросов = 5;
	КонецЕсли;
	
	
	Результат             = Запрос.ВыполнитьПакет();
	ВыборкаЗаказы         = Результат[0].Выбрать();
	ВыборкаКОтмене        = Результат[2].Выбрать();
	ОтгруженныеТовары     = Результат[3].Выгрузить();
	Выборка               = Результат[КоличествоЗапросов].Выбрать();
	
	Если  ВыборкаЗаказы.Количество() = 0 Тогда
		СтатусЗакрытУстановлен = Истина;
	КонецЕсли;
	
	ОтгруженныеТовары.Свернуть("Заказ, Номенклатура, Характеристика, Серия, Склад","Количество, ДопустимоеОтклонение");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокСвойствТоварыКОтмене = "Заказ,Номенклатура,Характеристика,Склад,Серия,ЭтоОтгрузка,Количество";
	
	//Отменяем непосредственно
	
	Пока ВыборкаКОтмене.Следующий() Цикл
		
		НовСтр = ТоварыКОтмене.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаКОтмене, СписокСвойствТоварыКОтмене);
		НовСтр.Заказано = НовСтр.Количество;
		ЕстьТоварыКОтмене = Истина;
		
	КонецЦикла;
	
	//Отменяем строки
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоиска = Новый Структура("Заказ, Номенклатура, Характеристика, Склад, Серия", 
			Выборка.Заказ,
			Выборка.Номенклатура,
			Выборка.Характеристика, 
			Выборка.Склад,
			Выборка.Серия);
			
		ОтгруженноеКоличество = 0;
		ДопустимоеОтклонение  = 0;
		ОтгруженнаяСтрока     = Неопределено;
		
		НайденныеСтроки = ОтгруженныеТовары.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОтгруженнаяСтрока = НайденныеСтроки[0];
			ОтгруженноеКоличество = ОтгруженнаяСтрока.Количество;
			ДопустимоеОтклонение = ОтгруженнаяСтрока.ДопустимоеОтклонение;
		КонецЕсли;
		
		ОтменитьКоличество = 0;
		
		Если Выборка.КОформлениюОстаток = 0 И ОтгруженноеКоличество = 0 Тогда
			ОтменитьКоличество = Выборка.Количество;
		ИначеЕсли Выборка.Количество >= ОтгруженноеКоличество Тогда
			ОтменитьКоличество = Мин(Выборка.КОформлениюОстаток, Выборка.Количество - ОтгруженноеКоличество);
			Если ОтгруженнаяСтрока <> Неопределено Тогда
				Если ОтгруженноеКоличество >
						(Выборка.Количество - Выборка.КоличествоСверхОформленного - Выборка.КОформлениюОстаток) Тогда
					ОтгруженнаяСтрока.Количество = ОтгруженноеКоличество - (Выборка.Количество
						- Выборка.КоличествоСверхОформленного - Выборка.КОформлениюОстаток);
				Иначе
					ОтгруженнаяСтрока.Количество = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОтгруженнаяСтрока.Количество = ОтгруженнаяСтрока.Количество - Выборка.Количество;
		КонецЕсли;
		
		Если ОтменитьКоличество <= ДопустимоеОтклонение Тогда
			ОтклонениеВПределахДельты = Истина;
			ОтгруженнаяСтрока.ДопустимоеОтклонение = ОтгруженнаяСтрока.ДопустимоеОтклонение - ОтменитьКоличество;
		Иначе
			ОтклонениеВПределахДельты = Ложь;
		КонецЕсли;
		
		Если ОтменитьКоличество = Выборка.Количество Тогда
			НоваяСтрока = ТоварыКОтмене.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Заказано    = НоваяСтрока.Количество;
			ЕстьТоварыКОтмене = Истина;
		ИначеЕсли ОтменитьКоличество > 0 Тогда
			
			ОтменитьКоличество = ОтменитьКоличество + Выборка.КоличествоСверхОформленного;
			
			Если ОтклонениеВПределахДельты Тогда
				НоваяСтрока = МерныеТоварыККорректировке.Добавить();
				Множитель = -1;
			Иначе
				НоваяСтрока = ТоварыКОтмене.Добавить();
				Множитель = 1;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, СписокСвойствТоварыКОтмене);
			
			НоваяСтрока.Количество  = Множитель*ОтменитьКоличество;
			НоваяСтрока.Заказано    = Выборка.Количество;
			ЕстьТоварыКОтмене = Истина;
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Корректируем в плюс
	
	Если СкорректироватьМерныеТовары Тогда
		
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
			
			ПараметрыПоиска = Новый Структура("Заказ, Номенклатура, Характеристика, Склад, Серия");
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Выборка);
			
			НайденныеСтроки = ОтгруженныеТовары.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 
				И НайденныеСтроки[0].Количество > 0 Тогда
				ОтгруженнаяСтрока = НайденныеСтроки[0];
				ОтгруженоСверхСтроки = ОтгруженнаяСтрока.Количество;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если Выборка.КОформлениюОстаток < 0 И ОтгруженоСверхСтроки > 0 Тогда
				
				КоличествоПереоформлено = -Выборка.КОформлениюОстаток;
				
				Если КоличествоПереоформлено >= ОтгруженоСверхСтроки Тогда
					ОтгруженнаяСтрока.Количество = 0;
					КоличествоДобавить = ОтгруженоСверхСтроки;
				Иначе
					ОтгруженнаяСтрока.Количество = ОтгруженнаяСтрока.Количество - КоличествоПереоформлено;
					КоличествоДобавить = КоличествоПереоформлено;
				КонецЕсли;
				
				НовСтр = МерныеТоварыККорректировке.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Выборка);
				НовСтр.Количество = КоличествоДобавить;
				НовСтр.Заказано = Выборка.Количество;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыборкаЗаказы.Количество() = 0 И
		ТоварыКОтмене.Количество() = 0 И
		МерныеТоварыККорректировке.Количество() = 0 Тогда
		ЗаказыЗакрыты = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаказамНаВнутреннееПотребление()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказНаВнутреннееПотребление.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ГДЕ
	|	ЗаказНаВнутреннееПотребление.Ссылка В(&ЗаказыНаВнутреннееПотребление)
	|	И ЗаказНаВнутреннееПотребление.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)
	|	И &ИспользоватьСтатусЗакрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Склад,
	|	ВЫБОР
	|		КОГДА Остатки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Остатки.Заказ.Дата >= Остатки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке,
	|	Остатки.Серия,
	|	СУММА(Остатки.КОформлениюОстаток),
	|	СУММА(Остатки.КОтгрузкеОстаток),
	|	СУММА(Остатки.Заказано)
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ (ВЫБРАТЬ
	|		ОстаткиКОформлению.ЗаказНаВнутреннееПотребление КАК Заказ,
	|		ОстаткиКОформлению.Номенклатура                 КАК Номенклатура,
	|		ОстаткиКОформлению.Характеристика               КАК Характеристика,
	|		ОстаткиКОформлению.Склад                        КАК Склад,
	|		ОстаткиКОформлению.Серия                        КАК Серия,
	|		ОстаткиКОформлению.КОформлениюКонечныйОстаток   КАК КОформлениюОстаток,
	|		0                                               КАК КОтгрузкеОстаток,
	|		ОстаткиКОформлению.ЗаказаноПриход               КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаВнутреннееПотребление.ОстаткиИОбороты(,,,,
	|			ЗаказНаВнутреннееПотребление В (&ЗаказыНаВнутреннееПотребление)) КАК ОстаткиКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиКОтгрузке.ДокументОтгрузки КАК Заказ,
	|		ОстаткиКОтгрузке.Номенклатура     КАК Номенклатура,
	|		ОстаткиКОтгрузке.Характеристика   КАК Характеристика,
	|		ОстаткиКОтгрузке.Склад            КАК Склад,
	|		ОстаткиКОтгрузке.Серия            КАК Серия,
	|		0                                 КАК КОформлениюОстаток,
	|		ОстаткиКОтгрузке.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|		0                                 КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(,
	|			ДокументОтгрузки В (&ЗаказыНаВнутреннееПотребление)) КАК ОстаткиКОтгрузке) КАК Остатки
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Склад,
	|	Остатки.Серия,
	|	ВЫБОР
	|		КОГДА Остатки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Остатки.Заказ.Дата >= Остатки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Склад,
	|	Остатки.Серия,
	|	ВЫБОР 
	|		КОГДА Остатки.КОформлениюОстаток < 0 ИЛИ НЕ Остатки.ОрдернаяСхемаПриОтгрузке
	|			ТОГДА Остатки.КОформлениюОстаток
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Остатки.КОформлениюОстаток < Остатки.КОтгрузкеОстаток
	|						ТОГДА Остатки.КОформлениюОстаток
	|					ИНАЧЕ Остатки.КОтгрузкеОстаток
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА Остатки.КОформлениюОстаток < 0 ИЛИ НЕ Остатки.ОрдернаяСхемаПриОтгрузке
	|					ТОГДА Остатки.КОформлениюОстаток
	|				ИНАЧЕ ВЫБОР
	|							КОГДА Остатки.КОформлениюОстаток < Остатки.КОтгрузкеОстаток
	|								ТОГДА Остатки.КОформлениюОстаток
	|							ИНАЧЕ Остатки.КОтгрузкеОстаток
	|					КОНЕЦ
	|			КОНЕЦ > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьТоварыКОтмене,
	|	ИСТИНА КАК ЭтоОтгрузка,
	|	Остатки.Заказано
	|ИЗ ВтОстатки КАК Остатки
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА Остатки.КОформлениюОстаток < 0 ИЛИ НЕ Остатки.ОрдернаяСхемаПриОтгрузке
	|			ТОГДА Остатки.КОформлениюОстаток
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Остатки.КОформлениюОстаток < Остатки.КОтгрузкеОстаток
	|						ТОГДА Остатки.КОформлениюОстаток
	|					ИНАЧЕ Остатки.КОтгрузкеОстаток
	|			КОНЕЦ
	|	КОНЕЦ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура                 КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика               КАК Характеристика,
	|	ТоварыКОтгрузке.Серия                        КАК Серия,
	|	ТоварыКОтгрузке.Склад                        КАК Склад,
	|	ТоварыКОтгрузке.ЗаказНаВнутреннееПотребление КАК Заказ,
	|	СУММА(ТоварыКОтгрузке.КОформлениюПриход
	|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Обороты(&НачПериод,&КонПериод,,
	|		ЗаказНаВнутреннееПотребление В (&ЗаказыНаВнутреннееПотребление)) КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Склад,
	|	ТоварыКОтгрузке.ЗаказНаВнутреннееПотребление");
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
	
	Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ЗаказыНаВнутреннееПотребление", Заказы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ИспользоватьСтатусЗакрыт", ИспользуетсяСтатусЗакрыт);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыНаВнутреннееПотребление",
																"ЗаказНаВнутреннееПотребление В (&ЗаказыНаВнутреннееПотребление)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаказы = Результат[0].Выбрать();
	ТаблицаТоварыКОтмене = Результат[2].Выгрузить();
	ТоварыКОтмене.Загрузить(ТаблицаТоварыКОтмене);
	ДопустимыеОтклонения = Результат[3].Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаЗаказы.Количество() = 0 И
		ТоварыКОтмене.Количество() = 0 Тогда
		ЗаказыЗакрыты = Истина;
		Возврат;
	КонецЕсли;
	
	Если  ВыборкаЗаказы.Количество() = 0 Тогда
		СтатусЗакрытУстановлен = Истина;
	КонецЕсли;
	
	ЕстьТоварыКОтмене = ТаблицаТоварыКОтмене.НайтиСтроки(Новый Структура("ЕстьТоварыКОтмене", Истина)).Количество() > 0;
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров > 0 Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия,Склад,Заказ");
		
		ВыделитьМерныеТовары(ТоварыКОтмене, ДопустимыеОтклонения, СтруктураПоиска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаказамНаПеремещение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Ссылка В(&ЗаказыНаПеремещение)
	|	И ЗаказНаПеремещение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)
	|	И &ИспользоватьСтатусЗакрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Серия,
	|	ВЫБОР
	|		КОГДА Остатки.Заказ.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Остатки.Заказ.Дата >= Остатки.Заказ.СкладОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке,
	|	СУММА(Остатки.КОформлениюОстаток),
	|	СУММА(Остатки.КОтгрузкеОстаток),
	|	СУММА(Остатки.Заказано)
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ (ВЫБРАТЬ
	|		ОстаткиКОформлению.ЗаказНаПеремещение         КАК Заказ,
	|		ОстаткиКОформлению.Номенклатура               КАК Номенклатура,
	|		ОстаткиКОформлению.Характеристика             КАК Характеристика,
	|		ОстаткиКОформлению.Серия                      КАК Серия,
	|		ОстаткиКОформлению.КОформлениюКонечныйОстаток КАК КОформлениюОстаток,
	|		0                                             КАК КОтгрузкеОстаток,
	|		ОстаткиКОформлению.ЗаказаноПриход             КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение.ОстаткиИОбороты(&НачПериодЗаказыНаПеремещение, &КонПериодЗаказыНаПеремещение,,,
	|			ЗаказНаПеремещение В (&ЗаказыНаПеремещение)) КАК ОстаткиКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиКОтгрузке.ДокументОтгрузки КАК Заказ,
	|		ОстаткиКОтгрузке.Номенклатура     КАК Номенклатура,
	|		ОстаткиКОтгрузке.Характеристика   КАК Характеристика,
	|		ОстаткиКОтгрузке.Серия            КАК Серия,
	|		0                                 КАК КОформлениюОстаток,
	|		ОстаткиКОтгрузке.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|		0                                 КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(,
	|			ДокументОтгрузки В (&ЗаказыНаПеремещение)) КАК ОстаткиКОтгрузке) КАК Остатки
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Серия,
	|	ВЫБОР
	|		КОГДА Остатки.Заказ.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Остатки.Заказ.Дата >= Остатки.Заказ.СкладОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Серия,
	|	ВЫБОР 
	|		КОГДА Остатки.КОформлениюОстаток < 0 ИЛИ НЕ Остатки.ОрдернаяСхемаПриОтгрузке
	|			ТОГДА Остатки.КОформлениюОстаток
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Остатки.КОформлениюОстаток < Остатки.КОтгрузкеОстаток
	|						ТОГДА Остатки.КОформлениюОстаток
	|					ИНАЧЕ Остатки.КОтгрузкеОстаток
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА Остатки.КОформлениюОстаток < 0 ИЛИ НЕ Остатки.ОрдернаяСхемаПриОтгрузке
	|					ТОГДА Остатки.КОформлениюОстаток
	|				ИНАЧЕ ВЫБОР
	|							КОГДА Остатки.КОформлениюОстаток < Остатки.КОтгрузкеОстаток
	|								ТОГДА Остатки.КОформлениюОстаток
	|							ИНАЧЕ Остатки.КОтгрузкеОстаток
	|					КОНЕЦ
	|			КОНЕЦ > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьТоварыКОтмене,
	|	Остатки.Заказано,
	|	Остатки.Заказ.СкладОтправитель КАК Склад,
	|	ИСТИНА КАК ЭтоОтгрузка
	|ИЗ ВтОстатки КАК Остатки
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА Остатки.КОформлениюОстаток < 0 ИЛИ НЕ Остатки.ОрдернаяСхемаПриОтгрузке
	|			ТОГДА Остатки.КОформлениюОстаток
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Остатки.КОформлениюОстаток < Остатки.КОтгрузкеОстаток
	|						ТОГДА Остатки.КОформлениюОстаток
	|					ИНАЧЕ Остатки.КОтгрузкеОстаток
	|			КОНЕЦ
	|	КОНЕЦ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура       КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика     КАК Характеристика,
	|	ТоварыКОтгрузке.Серия              КАК Серия,
	|	ТоварыКОтгрузке.ЗаказНаПеремещение КАК Заказ,
	|	СУММА(ТоварыКОтгрузке.КОформлениюПриход
	|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение,
	|	ИСТИНА                             КАК ЭтоОтгрузка
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Обороты(&НачПериодЗаказыНаПеремещение, &КонПериодЗаказыНаПеремещение,
	|		, ЗаказНаПеремещение В (&ЗаказыНаПеремещение)) КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.ЗаказНаПеремещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка            КАК Заказ,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ИСТИНА                          КАК ЭтоОтгрузка
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&ЗаказыНаПеремещение)
	|	И ТаблицаТовары.ВариантОбеспечения НЕ В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И НЕ ТаблицаТовары.Отменено 
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия");
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ЗаказыНаПеремещение", Заказы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ИспользоватьСтатусЗакрыт", ИспользуетсяСтатусЗакрыт);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыНаПеремещение",
																"ЗаказНаПеремещение В (&ЗаказыНаПеремещение)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыНаПеремещение", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыНаПеремещение", ГраницыОборотов.МаксимальнаяДата);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаЗаказы = Результат[0].Выбрать();
	ТаблицаТоварыКОтмене = Результат[2].Выгрузить();
	ТоварыКОтмене.Загрузить(ТаблицаТоварыКОтмене);
	ДопустимыеОтклонения = Результат[3].Выгрузить();
	ВыборкаКОтмене = Результат[4].Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаЗаказы.Количество() = 0 И
		ТоварыКОтмене.Количество() = 0 И
		ВыборкаКОтмене.Количество() = 0 Тогда
		ЗаказыЗакрыты = Истина;
		Возврат;
	КонецЕсли;
	
	Если  ВыборкаЗаказы.Количество() = 0 Тогда
		СтатусЗакрытУстановлен = Истина;
	КонецЕсли;
	
	ЕстьТоварыКОтмене = ТаблицаТоварыКОтмене.НайтиСтроки(Новый Структура("ЕстьТоварыКОтмене", Истина)).Количество() > 0;
	
	//Отменяем непосредственно
	СписокСвойствТоварыКОтмене = "Заказ,Номенклатура,Характеристика,Серия,ЭтоОтгрузка,Количество";

	Пока ВыборкаКОтмене.Следующий() Цикл
		
		НовСтр = ТоварыКОтмене.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаКОтмене, СписокСвойствТоварыКОтмене);
		НовСтр.Заказано = НовСтр.Количество;
		ЕстьТоварыКОтмене = Истина;
		
	КонецЦикла;
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров > 0 Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия,Заказ");
		
		ВыделитьМерныеТовары(ТоварыКОтмене, ДопустимыеОтклонения, СтруктураПоиска);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаказамНаСборку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказНаСборку.Ссылка КАК ЗаказНаСборку
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|ГДЕ
	|	ЗаказНаСборку.Ссылка В(&ЗаказыНаСборку)
	|	И ЗаказНаСборку.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)
	|	И &ИспользоватьСтатусЗакрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.ЭтоОтгрузка,
	|	Остатки.Склад,
	|	Остатки.Серия,
	|	ВЫБОР
	|		КОГДА Остатки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Остатки.Заказ.НачалоСборкиРазборки >= Остатки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке,
	|	ВЫБОР
	|		КОГДА Остатки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И Остатки.Заказ.Дата >= Остатки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриПоступлении,
	|	СУММА(Остатки.КОформлениюОстаток),
	|	СУММА(Остатки.Заказано),
	|	СУММА(Остатки.ОстатокПоОрдерам)
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ (ВЫБРАТЬ
	|		ОстаткиКОформлению.ЗаказНаСборку       КАК Заказ,
	|		ОстаткиКОформлению.Номенклатура        КАК Номенклатура,
	|		ОстаткиКОформлению.Характеристика      КАК Характеристика,
	|		ВЫБОР 
	|			КОГДА ОстаткиКОформлению.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ 
	|		КОНЕЦ                                  КАК ЭтоОтгрузка,
	|		ОстаткиКОформлению.ЗаказНаСборку.Склад КАК Склад,
	|		ОстаткиКОформлению.Серия               КАК Серия,
	|		ОстаткиКОформлению.КОформлениюКонечныйОстаток  КАК КОформлениюОстаток,
	|		0                                      КАК ОстатокПоОрдерам,
	|		ОстаткиКОформлению.ЗаказаноПриход      КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаСборку.ОстаткиИОбороты(&НачПериодЗаказыНаСборку, &КонПериодЗаказыНаСборку,
	|			,, ЗаказНаСборку В (&ЗаказыНаСборку)) КАК ОстаткиКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиКОтгрузке.ДокументОтгрузки КАК Заказ,
	|		ОстаткиКОтгрузке.Номенклатура     КАК Номенклатура,
	|		ОстаткиКОтгрузке.Характеристика   КАК Характеристика,
	|		ИСТИНА                            КАК ЭтоОтгрузка,
	|		ОстаткиКОтгрузке.Склад            КАК Склад,
	|		ОстаткиКОтгрузке.Серия            КАК Серия,
	|		0                                 КАК КОформлениюОстаток,
	|		ОстаткиКОтгрузке.КОтгрузкеОстаток КАК ОстатокПоОрдерам,
	|		0                                 КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&ЗаказыНаСборку)) КАК ОстаткиКОтгрузке
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиКПоступлению.ДокументПоступления                КАК Заказ,
	|		ОстаткиКПоступлению.Номенклатура                       КАК Номенклатура,
	|		ОстаткиКПоступлению.Характеристика                     КАК Характеристика,
	|		ЛОЖЬ                                                   КАК ЭтоОтгрузка,
	|		ОстаткиКПоступлению.Склад                              КАК Склад,
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)    КАК Серия,
	|		0                                                      КАК КОформлениюОстаток,
	|		ОстаткиКПоступлению.КОформлениюОрдеровОстаток          КАК ОстатокПоОрдерам,
	|		0                                                      КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(,
	|			ДокументПоступления В (&ЗаказыНаСборку)) КАК ОстаткиКПоступлению) КАК Остатки
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Склад,
	|	Остатки.ЭтоОтгрузка,
	|	Остатки.Серия,
	|	ВЫБОР
	|		КОГДА Остатки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Остатки.Заказ.НачалоСборкиРазборки >= Остатки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Остатки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И Остатки.Заказ.Дата >= Остатки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Заказ,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Склад,
	|	Остатки.ЭтоОтгрузка,
	|	Остатки.Серия,
	|	ВЫБОР 
	|		КОГДА Остатки.КОформлениюОстаток < 0 
	|			ТОГДА Остатки.КОформлениюОстаток
	|		КОГДА (Остатки.ЭтоОтгрузка И НЕ Остатки.ОрдернаяСхемаПриОтгрузке) 
	|			ИЛИ (НЕ Остатки.ЭтоОтгрузка И НЕ Остатки.ОрдернаяСхемаПриПоступлении) 
	|			ТОГДА Остатки.КОформлениюОстаток
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Остатки.КОформлениюОстаток < Остатки.ОстатокПоОрдерам
	|						ТОГДА Остатки.КОформлениюОстаток
	|					ИНАЧЕ Остатки.ОстатокПоОрдерам
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА Остатки.КОформлениюОстаток < 0 
	|					ТОГДА Остатки.КОформлениюОстаток
	|				КОГДА (Остатки.ЭтоОтгрузка И НЕ Остатки.ОрдернаяСхемаПриОтгрузке) 
	|					ИЛИ (НЕ Остатки.ЭтоОтгрузка И НЕ Остатки.ОрдернаяСхемаПриПоступлении) 
	|					ТОГДА Остатки.КОформлениюОстаток
	|				ИНАЧЕ ВЫБОР
	|							КОГДА Остатки.КОформлениюОстаток < Остатки.ОстатокПоОрдерам
	|								ТОГДА Остатки.КОформлениюОстаток
	|							ИНАЧЕ Остатки.ОстатокПоОрдерам
	|					КОНЕЦ
	|			КОНЕЦ > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьТоварыКОтмене,
	|	Остатки.Заказано
	|ИЗ ВтОстатки КАК Остатки
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА Остатки.КОформлениюОстаток < 0 
	|			ТОГДА Остатки.КОформлениюОстаток
	|		КОГДА (Остатки.ЭтоОтгрузка И НЕ Остатки.ОрдернаяСхемаПриОтгрузке) 
	|			ИЛИ (НЕ Остатки.ЭтоОтгрузка И НЕ Остатки.ОрдернаяСхемаПриПоступлении) 
	|			ТОГДА Остатки.КОформлениюОстаток
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Остатки.КОформлениюОстаток < Остатки.ОстатокПоОрдерам
	|						ТОГДА Остатки.КОформлениюОстаток
	|					ИНАЧЕ Остатки.ОстатокПоОрдерам
	|			КОНЕЦ
	|	КОНЕЦ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура                 КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика               КАК Характеристика,
	|	ТоварыКОтгрузке.Серия                        КАК Серия,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ                                        КАК ЭтоОтгрузка,
	|	ТоварыКОтгрузке.ЗаказНаСборку                КАК Заказ,
	|	ТоварыКОтгрузке.ЗаказНаСборку.Склад          КАК Склад,
	|	СУММА(ТоварыКОтгрузке.КОформлениюПриход
	|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.Обороты(&НачПериодЗаказыНаСборку,&КонПериодЗаказыНаСборку,
	|		, ЗаказНаСборку В (&ЗаказыНаСборку)) КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.ЗаказНаСборку");
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ЗаказыНаСборку", Заказы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ИспользоватьСтатусЗакрыт", ИспользуетсяСтатусЗакрыт);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыНаСборку",
																"ЗаказНаСборку В (&ЗаказыНаСборку)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыНаСборку", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыНаСборку", ГраницыОборотов.МаксимальнаяДата);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаЗаказы = Результат[0].Выбрать();
	ТаблицаТоварыКОтмене = Результат[2].Выгрузить();
	ТоварыКОтмене.Загрузить(ТаблицаТоварыКОтмене);
	ДопустимыеОтклонения = Результат[3].Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаЗаказы.Количество() = 0 И
		ТоварыКОтмене.Количество() = 0 Тогда
		ЗаказыЗакрыты = Истина;
		Возврат;
	КонецЕсли;
	
	Если  ВыборкаЗаказы.Количество() = 0 Тогда
		СтатусЗакрытУстановлен = Истина;
	КонецЕсли;
	
	ЕстьТоварыКОтмене = ТаблицаТоварыКОтмене.НайтиСтроки(Новый Структура("ЕстьТоварыКОтмене", Истина)).Количество() > 0;
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров > 0 Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия,Склад,ЭтоОтгрузка,Заказ");
		
		ВыделитьМерныеТовары(ТоварыКОтмене, ДопустимыеОтклонения, СтруктураПоиска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаявкамНаВозвратТоваровОтКлиента(ТаблицаТоваровПриход, ТаблицаТоваровРасход)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка КАК ЗаявкаНаВозвратТоваровОтКлиента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&ЗаявкиНаВозвратТоваровОтКлиента)
	|	И ЗаявкаНаВозвратТоваровОтКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
	|	И &ИспользоватьСтатусЗакрыт
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.Номенклатура                          КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика                        КАК Характеристика,
	|	ТоварыКПоступлению.ЗаявкаНаВозвратТоваровОтКлиента       КАК Заказ,
	|	ТоварыКПоступлению.ЗаявкаНаВозвратТоваровОтКлиента.Склад КАК Склад,
	|	ЛОЖЬ                                                     КАК ЭтоОтгрузка,
	|	СУММА(ТоварыКПоступлению.КОформлениюПриход
	|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Обороты(&НачПериодЗаявки, &КонПериодЗаявки,,
	|		ЗаявкаНаВозвратТоваровОтКлиента В (&ЗаявкиНаВозвратТоваровОтКлиента)) КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.ЗаявкаНаВозвратТоваровОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура                        КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика                      КАК Характеристика,
	|	ТоварыКОтгрузке.ЗаказКлиента                        КАК Заказ,
	|	ТоварыКОтгрузке.Склад                               КАК Склад,
	|	ИСТИНА                                              КАК ЭтоОтгрузка,
	|	СУММА(ТоварыКОтгрузке.КОформлениюПриход
	|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов,
	|		, ЗаказКлиента В (&ЗаявкиНаВозвратТоваровОтКлиента)) КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Склад,
	|	ТоварыКОтгрузке.ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|%ВременныеТаблицы%
	|
	|ВЫБРАТЬ
	|	Отгрузки.Заказ          КАК Заказ,
	|	Отгрузки.Номенклатура   КАК Номенклатура,
	|	Отгрузки.Характеристика КАК Характеристика,
	|	Отгрузки.Склад          КАК Склад,
	|	ВЫБОР
	|		КОГДА Отгрузки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Отгрузки.Заказ.Дата >= Отгрузки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                   КАК ОрдернаяСхемаПриОтгрузке,
	|	СУММА(Отгрузки.Оформлено)      КАК Оформлено,
	|	СУММА(Отгрузки.Отгружено)      КАК Отгружено,
	|	СУММА(Отгрузки.Заказано)       КАК Заказано
	|ПОМЕСТИТЬ ВтОтгружено
	|ИЗ (ВЫБРАТЬ
	|		Остатки.ЗаказКлиента                          КАК Заказ,
	|		Остатки.Номенклатура                          КАК Номенклатура,
	|		Остатки.Характеристика                        КАК Характеристика,
	|		Остатки.ЗаказКлиента.Склад                    КАК Склад,
	|		Остатки.КОформлениюРасход                     КАК Оформлено,
	|		0                                             КАК Отгружено,
	|		ВЫБОР 
	|			КОГДА &ПоДокументу 
	|				ТОГДА 0 
	|			ИНАЧЕ Остатки.ЗаказаноПриход 
	|		КОНЕЦ                                         КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(&НачПериодЗаказыКлиентов,&КонПериодЗаказыКлиентов,,,
	|			ЗаказКлиента В (&ЗаявкиНаВозвратТоваровОтКлиента)) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки                                     КАК Заказ,
	|		ТоварыКОтгрузкеОстатки.Номенклатура                                         КАК Номенклатура,
	|		ТоварыКОтгрузкеОстатки.Характеристика                                       КАК Характеристика,
	|		ТоварыКОтгрузкеОстатки.Склад                                                КАК Склад,
	|		0                                                                           КАК Оформлено,
	|		ТоварыКОтгрузкеОстатки.КОтгрузкеРасход + ТоварыКОтгрузкеОстатки.СобраноПриход
	|			+ ТоварыКОтгрузкеОстатки.СобираетсяПриход                               КАК Отгружено,
	|		0                                                                           КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,,
	|			ДокументОтгрузки В (&ЗаявкиНаВозвратТоваровОтКлиента)) КАК ТоварыКОтгрузкеОстатки
	|	%ЗаменяющиеТовары%)КАК Отгрузки
	|СГРУППИРОВАТЬ ПО
	|	Отгрузки.Заказ,
	|	ВЫБОР
	|		КОГДА Отгрузки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Отгрузки.Заказ.Дата >= Отгрузки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Отгрузки.Номенклатура,
	|	Отгрузки.Характеристика,
	|	Отгрузки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Поступления.Заказ          КАК Заказ,
	|	Поступления.Номенклатура   КАК Номенклатура,
	|	Поступления.Характеристика КАК Характеристика,
	|	Поступления.Склад          КАК Склад,
	|	ВЫБОР
	|		КОГДА Поступления.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И Поступления.Заказ.Дата >= Поступления.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                        КАК ОрдернаяСхемаПриПриемке,
	|	СУММА(Поступления.Оформлено) КАК Оформлено,
	|	СУММА(Поступления.Принято)   КАК Принято,
	|	СУММА(Поступления.Заказано)  КАК Заказано
	|ПОМЕСТИТЬ ВтПринято
	|ИЗ (ВЫБРАТЬ
	|		Остатки.ЗаявкаНаВозвратТоваровОтКлиента       КАК Заказ,
	|		Остатки.Номенклатура                          КАК Номенклатура,
	|		Остатки.Характеристика                        КАК Характеристика,
	|		Остатки.ЗаявкаНаВозвратТоваровОтКлиента.Склад КАК Склад,
	|		Остатки.КОформлениюРасход                     КАК Оформлено,
	|		0                                             КАК Принято,
	|		ВЫБОР 
	|			КОГДА &ПоДокументу 
	|				ТОГДА 0 
	|			ИНАЧЕ Остатки.ЗаявленоПриход 
	|		КОНЕЦ                                         КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.ОстаткиИОбороты(&НачПериодЗаявки,&КонПериодЗаявки,,,
	|			ЗаявкаНаВозвратТоваровОтКлиента В (&ЗаявкиНаВозвратТоваровОтКлиента)) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКПоступлениюОстатки.ДокументПоступления                                  КАК Заказ,
	|		ТоварыКПоступлениюОстатки.Номенклатура                                         КАК Номенклатура,
	|		ТоварыКПоступлениюОстатки.Характеристика                                       КАК Характеристика,
	|		ТоварыКПоступлениюОстатки.Склад                                                КАК Склад,
	|		0                                                                              КАК Оформлено,
	|		ТоварыКПоступлениюОстатки.КОформлениюОрдеровРасход                             КАК Принято,
	|		0                                                                              КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(,,,,
	|			ДокументПоступления В (&ЗаявкиНаВозвратТоваровОтКлиента)) КАК ТоварыКПоступлениюОстатки
	|	%ВозвращаемыеТовары%) КАК Поступления
	|СГРУППИРОВАТЬ ПО
	|	Поступления.Заказ,
	|	Поступления.Номенклатура,
	|	ВЫБОР
	|		КОГДА Поступления.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И Поступления.Заказ.Дата >= Поступления.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Поступления.Характеристика,
	|	Поступления.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Поступления.Заказ                                 КАК Заказ,
	|	Поступления.Номенклатура                          КАК Номенклатура,
	|	Поступления.Характеристика                        КАК Характеристика,
	|	Поступления.Склад                                 КАК Склад,
	|	ЛОЖЬ                                              КАК ЭтоОтгрузка,
	|	Поступления.Заказано                              КАК Заказано,
	|	ВЫБОР 
	|		КОГДА Поступления.Заказано - Поступления.Оформлено < 0 
	|			ТОГДА Поступления.Заказано - Поступления.Оформлено
	|		КОГДА НЕ Поступления.ОрдернаяСхемаПриПриемке 
	|			ТОГДА  Поступления.Заказано - Поступления.Оформлено
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Поступления.Оформлено > Поступления.Принято
	|						ТОГДА Поступления.Заказано - Поступления.Оформлено
	|					ИНАЧЕ Поступления.Заказано - Поступления.Принято
	|			КОНЕЦ
	|	КОНЕЦ                                              КАК Количество,
	|	ВЫБОР 
	|		КОГДА Поступления.Заказано - Поступления.Оформлено < 0 
	|			ТОГДА Поступления.Заказано - Поступления.Оформлено
	|		КОГДА НЕ Поступления.ОрдернаяСхемаПриПриемке 
	|			ТОГДА  Поступления.Заказано - Поступления.Оформлено
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Поступления.Оформлено > Поступления.Принято
	|						ТОГДА Поступления.Заказано - Поступления.Оформлено
	|					ИНАЧЕ Поступления.Заказано - Поступления.Принято
	|			КОНЕЦ
	|	КОНЕЦ > 0                                          КАК ЕстьТоварыКОтмене
	|ИЗ
	|	ВтПринято КАК Поступления
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Отгрузки.Заказ                                 КАК Заказ,
	|	Отгрузки.Номенклатура                          КАК Номенклатура,
	|	Отгрузки.Характеристика                        КАК Характеристика,
	|	Отгрузки.Склад                                 КАК Склад,
	|	ИСТИНА                                         КАК ЭтоОтгрузка,
	|	Отгрузки.Заказано                              КАК Заказано,
	|	ВЫБОР 
	|		КОГДА Отгрузки.Заказано - Отгрузки.Оформлено < 0 
	|			ТОГДА Отгрузки.Заказано - Отгрузки.Оформлено
	|		КОГДА НЕ Отгрузки.ОрдернаяСхемаПриОтгрузке 
	|			ТОГДА  Отгрузки.Заказано - Отгрузки.Оформлено
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Отгрузки.Оформлено > Отгрузки.Отгружено
	|						ТОГДА Отгрузки.Заказано - Отгрузки.Оформлено
	|					ИНАЧЕ Отгрузки.Заказано - Отгрузки.Отгружено
	|			КОНЕЦ
	|	КОНЕЦ                                              КАК Количество,
	|	ВЫБОР 
	|		КОГДА Отгрузки.Заказано - Отгрузки.Оформлено < 0 
	|			ТОГДА Отгрузки.Заказано - Отгрузки.Оформлено
	|		КОГДА НЕ Отгрузки.ОрдернаяСхемаПриОтгрузке 
	|			ТОГДА  Отгрузки.Заказано - Отгрузки.Оформлено
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Отгрузки.Оформлено > Отгрузки.Отгружено
	|						ТОГДА Отгрузки.Заказано - Отгрузки.Оформлено
	|					ИНАЧЕ Отгрузки.Заказано - Отгрузки.Отгружено
	|			КОНЕЦ
	|	КОНЕЦ > 0                                          КАК ЕстьТоварыКОтмене
	|ИЗ
	|	ВтОтгружено КАК Отгрузки
	|");
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ЗаявкиНаВозвратТоваровОтКлиента", Заказы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ИспользоватьСтатусЗакрыт", ИспользуетсяСтатусЗакрыт);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыКлиентов",
																"ЗаказКлиента В (&ЗаявкиНаВозвратТоваровОтКлиента)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентов", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентов", ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаявкиНаВозвратТоваровОтКлиентов",
																"ЗаявкаНаВозвратТоваровОтКлиента В (&ЗаявкиНаВозвратТоваровОтКлиента)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаявки", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаявки", ГраницыОборотов.МаксимальнаяДата);
	
	ПоДокументу = Заказы.Количество() = 1 И Заказы[0].Значение = ДокументИнициатор;
	
	Запрос.УстановитьПараметр("ПоДокументу",ПоДокументу);
	Если ПоДокументу Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ВременныеТаблицы%","
		|ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Количество     КАК Количество,
		|	Таблица.Отменено       КАК Отменено
		|ПОМЕСТИТЬ ВтВозвращаемыеТовары
		|ИЗ &ВозвращаемыеТовары КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Количество     КАК Количество,
		|	Таблица.Отменено       КАК Отменено
		|ПОМЕСТИТЬ ВтЗаменяющиеТовары
		|ИЗ &ЗаменяющиеТовары КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ЗаменяющиеТовары%","
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Заказ                                                   КАК Заказ,
		|	ЗаменяющиеТовары.Номенклатура                            КАК Номенклатура,
		|	ЗаменяющиеТовары.Характеристика                          КАК Характеристика,
		|	&Склад                                                   КАК Склад,
		|	0                                                        КАК Оформлено,
		|	0                                                        КАК Отгружено,
		|	СУММА(ЗаменяющиеТовары.Количество)                       КАК Заказано
		|ИЗ
		|	ВтЗаменяющиеТовары КАК ЗаменяющиеТовары
		|ГДЕ
		|	НЕ ЗаменяющиеТовары.Отменено
		|СГРУППИРОВАТЬ ПО
		|	ЗаменяющиеТовары.Номенклатура,
		|	ЗаменяющиеТовары.Характеристика
		|");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ВозвращаемыеТовары%","
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	&Заказ                                                   КАК Заказ,
		|	ВозвращаемыеТовары.Номенклатура                          КАК Номенклатура,
		|	ВозвращаемыеТовары.Характеристика                        КАК Характеристика,
		|	&Склад                                                   КАК Склад,
		|	0                                                        КАК Оформлено,
		|	0                                                        КАК Принято,
		|	СУММА(ВозвращаемыеТовары.Количество)                     КАК Заказано
		|ИЗ
		|	ВтВозвращаемыеТовары КАК ВозвращаемыеТовары
		|ГДЕ
		|	НЕ ВозвращаемыеТовары.Отменено
		|СГРУППИРОВАТЬ ПО
		|	ВозвращаемыеТовары.Номенклатура,
		|	ВозвращаемыеТовары.Характеристика");

		
		Запрос.УстановитьПараметр("ВозвращаемыеТовары",ТаблицаТоваровПриход);
		Запрос.УстановитьПараметр("ЗаменяющиеТовары",ТаблицаТоваровРасход);
		
		Запрос.УстановитьПараметр("Заказ",ДокументИнициатор);
		Запрос.УстановитьПараметр("Склад",ДокументИнициатор.Склад);
		
		КоличествоЗапросов = 6;
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ВременныеТаблицы%","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ВозвращаемыеТовары%","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ЗаменяющиеТовары%","");
		КоличествоЗапросов = 4;
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаказы         = Результат[0].Выбрать();
	ДопустимыеОтклонения  = Результат[1].Выгрузить();
	ТаблицаТоварыКОтмене  = Результат[КоличествоЗапросов].Выгрузить();
	
	ЕстьТоварыКОтмене = ТаблицаТоварыКОтмене.НайтиСтроки(Новый Структура("ЕстьТоварыКОтмене", Истина)).Количество() > 0;
	
	ТаблицаТоварыКОтмене.Свернуть("Заказ, Номенклатура, Характеристика, ЭтоОтгрузка, Склад", "Количество, Заказано");
	
	ТоварыКОтмене.Загрузить(ТаблицаТоварыКОтмене);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаЗаказы.Количество() = 0 И
		ТоварыКОтмене.Количество() = 0 Тогда
		ЗаказыЗакрыты = Истина;
		Возврат;
	КонецЕсли;
	
	Если  ВыборкаЗаказы.Количество() = 0 Тогда
		СтатусЗакрытУстановлен = Истина;
	КонецЕсли;
	
	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров > 0 Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Склад, Заказ, ЭтоОтгрузка");
		
		ВыделитьМерныеТовары(ТоварыКОтмене, ДопустимыеОтклонения, СтруктураПоиска);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ВыделитьМерныеТовары(ТоварыКОтмене, ДопустимыеОтклонения, СтруктураПоиска)
	
	Сч = 0;
	Пока Сч <= ТоварыКОтмене.Количество()-1 Цикл
		
		СтрокаОстатков = ТоварыКОтмене[сч];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОстатков);
		
		Если СтрокаОстатков.Количество < 0 Тогда //превышение распоряжения
			
			Если НЕ СтрокаОстатков.ЭтоОтгрузка Тогда
				
				СтрокиДопустимыхОтклонений = ДопустимыеОтклонения.НайтиСтроки(СтруктураПоиска);
			
				Если СтрокиДопустимыхОтклонений.Количество() > 0 Тогда
				
					ДопустимоеОтклонение = СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение;
				
					Если -СтрокаОстатков.Количество > ДопустимоеОтклонение Тогда
						ТоварыКОтмене.Удалить(сч);
						Продолжить;
					КонецЕсли;
				Иначе
					ТоварыКОтмене.Удалить(сч);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			НовСтр = МерныеТоварыККорректировке.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрокаОстатков);
			НовСтр.Количество = -НовСтр.Количество;
			СтрокаОстатков.Количество = 0;
			
		ИначеЕсли СтрокаОстатков.Количество > 0 Тогда
			
			СтрокиДопустимыхОтклонений = ДопустимыеОтклонения.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиДопустимыхОтклонений.Количество() > 0 Тогда
				
				ДопустимоеОтклонение = СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение;
				
				Если СтрокаОстатков.Количество <= ДопустимоеОтклонение Тогда
					НовСтр = МерныеТоварыККорректировке.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,СтрокаОстатков);
					НовСтр.Количество = -НовСтр.Количество;
					СтрокаОстатков.Количество = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Сч=0;
	Пока Сч <= ТоварыКОтмене.Количество()-1 Цикл
		Если ТоварыКОтмене[Сч].Количество = 0 Тогда
			ТоварыКОтмене.Удалить(Сч);
		Иначе
			Сч=Сч+1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

&НаКлиенте
Функция СформироватьТекстОбработано()
	
	Обработано = Заказы.Количество() - НеотработанныеЗаказы.Количество();
	
	Если Обработано = 0 Тогда
		Возврат НСтр("ru='Не удалось обработать заказы:'");
	КонецЕсли;
	
	Если ТипЗаказа = "ЗаказКлиента" Тогда
		ТекстДля = НСтр("ru='Для заказов клиентов (%КоличествоОбработанных%) %ТекстДействия%'");
	ИначеЕсли ТипЗаказа = "ЗаказПоставщику" Тогда
		ТекстДля = НСтр("ru='Для заказов поставщикам (%КоличествоОбработанных%) %ТекстДействия%'");
	ИначеЕсли ТипЗаказа = "ЗаказНаСборку" Тогда
		ТекстДля = НСтр("ru='Для заказов на сборку (%КоличествоОбработанных%) %ТекстДействия%'");
	ИначеЕсли ТипЗаказа = "ЗаказНаВнутреннееПотребеление" Тогда
		ТекстДля = НСтр("ru='Для заказов на внутреннее потребеление (%КоличествоОбработанных%) %ТекстДействия%'");
	ИначеЕсли ТипЗаказа = "ЗаказНаПеремещение" Тогда
		ТекстДля = НСтр("ru='Для заказов на перемещение (%КоличествоОбработанных%) %ТекстДействия%'");
	ИначеЕсли ТипЗаказа = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ТекстДля = НСтр("ru='Для заявок на возврат товаров от клиента (%КоличествоОбработанных%) %ТекстДействия%'");
	КонецЕсли;
	
	ТекстДействия = "";
	Если СкорректироватьМерныеТовары Тогда
		ТекстДействия = ТекстДействия + НСтр("ru='скорректированы строки мерных товаров'");
	КонецЕсли;
	
	Если СкорректироватьЦены Тогда
		ТекстДействия = ТекстДействия + ?(ТекстДействия="","",", ") + НСтр("ru='скорректированы цены'");
	КонецЕсли;
	
	Если ОтменитьНеотработанныеСтроки Тогда
		ТекстДействия = ТекстДействия + ?(ТекстДействия="","",", ") + НСтр("ru='отменены непоставленные строки'");
	КонецЕсли;
	
	Если ЗакрыватьЗаказы Тогда
		ТекстДействия = ТекстДействия + ?(ТекстДействия="","",", ") + НСтр("ru='установлен статус ""Закрыт""'");
	КонецЕсли;
	
	ТекстДля = СтрЗаменить(ТекстДля, "%КоличествоОбработанных%", Заказы.Количество()-НеотработанныеЗаказы.Количество());
	
	Если НеотработанныеЗаказы.Количество() > 0 Тогда
		 ТекстДействия = ТекстДействия + Символы.ПС + НСтр("ru='Не удалось обработать заказы:'");
	КонецЕсли;
	
	ТекстДля = СтрЗаменить(ТекстДля, "%ТекстДействия%", ТекстДействия);
	
	Возврат ТекстДля;
	
КонецФункции

&НаСервере
Функция ТекстНеудачнойОбработки(Закрывать)
	
	ТекстДействия = "";
	
	Если Закрывать Тогда 
		ШаблонНеУдалосьЗакрыть = НСтр("ru='Не удалось установить статус %1.'");
		
		ТекстДействия = СтрШаблон(ШаблонНеУдалосьЗакрыть, СтатусЗакрытПредставление);
	Иначе
		
		Если СкорректироватьМерныеТовары
			И СкорректироватьЦены
			И ОтменитьНеотработанныеСтроки Тогда
			ТекстДействия = НСтр("ru='Не удалось скорректировать строки мерных товаров, скорректировать цены, отменить непоставленные строки.'");
		ИначеЕсли СкорректироватьМерныеТовары
			И СкорректироватьЦены
			И Не ОтменитьНеотработанныеСтроки Тогда
			ТекстДействия = НСтр("ru='Не удалось скорректировать строки мерных товаров, скорректировать цены.'");
		ИначеЕсли СкорректироватьМерныеТовары
			И Не СкорректироватьЦены
			И ОтменитьНеотработанныеСтроки Тогда
			ТекстДействия = НСтр("ru='Не удалось скорректировать строки мерных товаров, отменить непоставленные строки.'");
		ИначеЕсли СкорректироватьМерныеТовары
			И Не СкорректироватьЦены
			И Не ОтменитьНеотработанныеСтроки Тогда
			ТекстДействия = НСтр("ru='Не удалось скорректировать строки мерных товаров.'");
		ИначеЕсли Не СкорректироватьМерныеТовары
			И СкорректироватьЦены
			И ОтменитьНеотработанныеСтроки Тогда
			ТекстДействия = НСтр("ru='Не удалось скорректировать цены, отменить непоставленные строки.'");
		ИначеЕсли Не СкорректироватьМерныеТовары
			И СкорректироватьЦены
			И Не ОтменитьНеотработанныеСтроки Тогда
			ТекстДействия = НСтр("ru='Не удалось скорректировать цены.'");
		ИначеЕсли Не СкорректироватьМерныеТовары
			И Не СкорректироватьЦены
			И ОтменитьНеотработанныеСтроки Тогда
			ТекстДействия = НСтр("ru='Не удалось отменить непоставленные строки.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстДействия;
	
КонецФункции

&НаСервере
Процедура ГотовоСервер(ЗакрыватьВТекущемВызове, ЗаказыКОбработке, СтруктураДополнительныхПараметров)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов 
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВсеЗаказыЗакрыты Тогда
		Закрыть();
	КонецЕсли;
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	Для Каждого ТекСтрока Из ЗаказыКОбработке Цикл
		
		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ТекСтрока.Значение);
		Исключение
			
			СтрокиНеотработанныхЗаказов = НеотработанныеЗаказы.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.Значение));
			Если СтрокиНеотработанныхЗаказов.Количество() = 0 Тогда
				СтрокаНеотработанныхЗаказов = НеотработанныеЗаказы.Добавить();
				СтрокаНеотработанныхЗаказов.Заказ = ТекСтрока.Значение;
			Иначе
				СтрокаНеотработанныхЗаказов = СтрокиНеотработанныхЗаказов[0];
			КонецЕсли;
			
			Если СтрокаНеотработанныхЗаказов.Неудача <> НСтр("ru='Неудалось заблокировать документ.'") Тогда
				СтрокаНеотработанныхЗаказов.Неудача = НСтр("ru='Неудалось заблокировать документ.'");
				
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", ТекСтрока.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекСтрока.Значение);
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				ТекСтрока.Значение.Метаданные(),
				ТекСтрока.Значение,
				ТекстОшибки);
			
			Продолжить;
		КонецПопытки;
		
		// Получение объекта документа
		ЗаказОбъект = ТекСтрока.Значение.ПолучитьОбъект();
		
		ЗаказИзменен = Ложь;
		
		//Корректировка цен
		Если СкорректироватьЦены Тогда
			
			СтрокиТекущегоЗаказа = ОтклоненияЦен.НайтиСтроки(Новый Структура("ЗаказПоставщику",ЗаказОбъект.Ссылка));
			ОтклоненияТекущегоЗаказа =ОтклоненияЦен.Выгрузить(СтрокиТекущегоЗаказа);
			
			ЗаказОбъект.СкорректироватьЦеныЗаказа(ЗаказОбъект, ОтклоненияТекущегоЗаказа);
			ЗаказИзменен= Истина;
		КонецЕсли;
		
		Если ЗакрыватьВТекущемВызове Тогда
			
			Если Не ЗаказОбъект.УстановитьСтатус(СтатусЗакрыт, СтруктураДополнительныхПараметров) Тогда
				
				СтрокиНеотработанныхЗаказов = НеотработанныеЗаказы.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.Значение));
				Если СтрокиНеотработанныхЗаказов.Количество() = 0 Тогда
					СтрокаНеотработанныхЗаказов = НеотработанныеЗаказы.Добавить();
					СтрокаНеотработанныхЗаказов.Заказ = ТекСтрока.Значение;
				Иначе
					СтрокаНеотработанныхЗаказов = СтрокиНеотработанныхЗаказов[0];
				КонецЕсли;
				
				СтрокаНеотработанныхЗаказов.Неудача = ТекстНеудачнойОбработки(Истина);
				
				Продолжить;
			КонецЕсли;
			
			ЗаказИзменен = Истина;
			
		ИначеЕсли ОтменитьНеотработанныеСтроки 
			Или СкорректироватьМерныеТовары
			Или СкорректироватьМерныеТоварыПоПриемке Тогда
			
			ЗаказИзменен = ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЗаказОбъект, СтруктураДополнительныхПараметров);
			
		КонецЕсли;
		
		Если ЗаказИзменен Тогда
			// Запись документа
			Попытка
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СтрокиНеотработанныхЗаказов = НеотработанныеЗаказы.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.Значение));
				Если СтрокиНеотработанныхЗаказов.Количество() = 0 Тогда
					СтрокаНеотработанныхЗаказов = НеотработанныеЗаказы.Добавить();
					СтрокаНеотработанныхЗаказов.Заказ = ТекСтрока.Значение;
				Иначе
					СтрокаНеотработанныхЗаказов = СтрокиНеотработанныхЗаказов[0];
				КонецЕсли;
				
				СтрокаНеотработанныхЗаказов.Неудача = ТекстНеудачнойОбработки(ЗакрыватьВТекущемВызове);
				
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", ТекСтрока.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекСтрока.Значение);
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					ТекСтрока.Значение.Метаданные(),
					ТекСтрока.Значение,
					ТекстОшибки);
				
			КонецПопытки
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗакрыватьВТекущемВызове И НеотработанныеЗаказы.Количество()>0 Тогда
		СписокКОбработке = Новый СписокЗначений;
		СписокКОбработке.ЗагрузитьЗначения(НеотработанныеЗаказы.Выгрузить().ВыгрузитьКолонку("Заказ"));
		ГотовоСервер(НЕ ЗакрыватьВТекущемВызове, СписокКОбработке, СтруктураДополнительныхПараметров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

