
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
		СтруктураБыстрогоОтбора.Свойство("СостояниеПриобретения", СостояниеПриобретения);
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступленияПриобретения", СостояниеПоступленияПриобретения);
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступленияТоваров", СостояниеПоступленияТоваров);
	КонецЕсли;
	
	УстановитьТекущуюСтраницу();
	
	
	ЗаполнитьСпискиВыбораПоСостояниям();
	УстановитьПараметрыДинСписка();
#Область ОтборыПриСозданииНаСервере
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление, "Организация", Организация, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку, "Организация", Организация, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПоступление, "Организация", Организация, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера", 
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СостояниеПриобретения", 
		?(ЗначениеЗаполнено(СостояниеПриобретения), Число(СостояниеПриобретения), СостояниеПриобретения),
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияПриобретения", 
		?(ЗначениеЗаполнено(СостояниеПоступленияПриобретения), Число(СостояниеПоступленияПриобретения), СостояниеПоступленияПриобретения),
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияТоваров", 
		?(ЗначениеЗаполнено(СостояниеПоступленияТоваров), Число(СостояниеПоступленияТоваров), СостояниеПоступленияТоваров),
		СтруктураБыстрогоОтбора,,,
		Истина);
		
#КонецОбласти
	
	ИспользоватьОтветственноеХранениеВПроцессеЗакупки = Ложь;
	ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьПоступленияТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	
	ПравоДобавлятьПриобретение = ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеТоваровУслуг);
	ПравоДобавлятьПриемкуТоваров = Ложь;
	
	Элементы.СписокРаспоряженияНаОформлениеСоздатьПриобретениеТоваровУслуг.Видимость = ПравоДобавлятьПриобретение;
	Элементы.ОформитьПриобретениеТоваровПоРаспоряжению.Видимость = ПравоДобавлятьПриобретение;
	Элементы.СписокРаспоряженияНаОформлениеВалюта.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	Элементы.СписокРаспоряженияНаОформлениеОформитьАктОРасхождениях.Видимость
		= ПравоДоступа("Добавление", Метаданные.Документы.АктОРасхожденияхПослеПриемки);
		
	Элементы.ОформитьПоступлениеТоваров.Видимость
		= ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваров);
	
	Элементы.СтраницаРаспоряженияНаПоступление.Видимость = ИспользоватьПоступленияТоваров;
	
	ПравоЧтениеСостояниеВыполненияДокументов = ПравоДоступа("Использование", Метаданные.Отчеты.СостояниеВыполненияДокументов);
	Элементы.СписокРаспоряженияНаОформлениеСостояниеВыполнения.Видимость = ПравоЧтениеСостояниеВыполненияДокументов;
	Элементы.СписокРаспоряженияНаПриемкуСостояниеВыполненияПриемка.Видимость = ПравоЧтениеСостояниеВыполненияДокументов;
	
	Если ИспользоватьОтветственноеХранениеВПроцессеЗакупки Тогда
		Элементы.СтраницаРаспоряженияНаОформление.Заголовок = НСтр("ru = 'К оформлению приобретения (приемки)'");
	КонецЕсли;
	
	НастроитьФормуПоСкладу();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_ЗаказПоставщику" Тогда
		
			Элементы.СписокРаспоряженияНаОформление.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПриходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_ПоступлениеТоваров"
		Или ИмяСобытия = "Запись_ЗаказПоставщику" Тогда
		
		Элементы.СписокРаспоряженияНаПоступление.Обновить();
		Элементы.СписокРаспоряженияНаПриемку.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		Настройки.Удалить("Склад");
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		Настройки.Удалить("Организация");
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
		Настройки.Удалить("СостояниеОрдера");
		СтруктураБыстрогоОтбора.Свойство("СостояниеПриобретения", СостояниеПриобретения);
		Настройки.Удалить("СостояниеПриобретения");
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступленияТоваров", СостояниеПоступленияТоваров);
		Настройки.Удалить("СостояниеПоступленияТоваров");
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступленияПриобретения", СостояниеПоступленияПриобретения);
		Настройки.Удалить("СостояниеПоступленияПриобретения");
	Иначе
		Склад = Настройки.Получить("Склад");
		Организация = Настройки.Получить("Организация");
		СостояниеОрдера    = Настройки.Получить("СостояниеОрдера");
		СостояниеПриобретения = Настройки.Получить("СостояниеПриобретения");
		СостояниеПоступленияТоваров = Настройки.Получить("СостояниеПоступленияТоваров");
		СостояниеПоступленияПриобретения = Настройки.Получить("СостояниеПоступленияПриобретения");
	КонецЕсли;
	
	НастроитьФормуПоСкладу();
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить("СписокРаспоряженияНаПриемку");
	МассивСписков.Добавить("СписокРаспоряженияНаОформление");
	МассивСписков.Добавить("СписокРаспоряженияНаПоступление");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФормаСписка", ЭтаФорма);
	ПараметрыОтбора.Вставить("МассивСписков", МассивСписков);
	ПараметрыОтбора.Вставить("ИмяКолонки", "Организация");
	ПараметрыОтбора.Вставить("Значение", Организация);
	ПараметрыОтбора.Вставить("Настройки", Настройки);
	
	ОтборыСписковКлиентСервер.УстановитьОтборыПоЗначениюСпискаПриЗагрузкеИзНастроек(ПараметрыОтбора, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера",
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеОрдера),
		,
		Истина);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"СостояниеПриобретения",
		?(ЗначениеЗаполнено(СостояниеПриобретения), Число(СостояниеПриобретения), СостояниеПриобретения),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеПриобретения),
		,
		Истина);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияПриобретения",
		?(ЗначениеЗаполнено(СостояниеПоступленияПриобретения), Число(СостояниеПоступленияПриобретения), СостояниеПоступленияПриобретения),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеПоступленияПриобретения),
		,
		Истина);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияТоваров",
		?(ЗначениеЗаполнено(СостояниеПоступленияТоваров), Число(СостояниеПоступленияТоваров), СостояниеПоступленияТоваров),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеПоступленияТоваров),
		,
		Истина);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	НастроитьФормуПоСкладу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПриемку,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПоступление,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОрдераПриИзменении(Элемент)
	Состояние = ?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеОрдера));
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриобретенияПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеПриобретения), Число(СостояниеПриобретения), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СостояниеПриобретения",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеПриобретения));
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПоступленияТоваровПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеПоступленияТоваров), Число(СостояниеПоступленияТоваров), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияТоваров",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеПоступленияТоваров));
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПоступленияПриобретенияПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеПоступленияПриобретения), Число(СостояниеПоступленияПриобретения), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияПриобретения",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеПоступленияПриобретения));
		
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналЗакупкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала("Накладные"));
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаОформление Тогда 
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Обработка.ЖурналДокументовЗакупки.Форма.СписокНакладныеКОформлению.СтраницаРаспоряженияНаОформление");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаПоступление Тогда 
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Обработка.ЖурналДокументовЗакупки.Форма.СписокНакладныеКОформлению.СтраницаРаспоряженияНаПоступление");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаПриемку Тогда 
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Обработка.ЖурналДокументовЗакупки.Форма.СписокНакладныеКОформлению.СтраницаРаспоряженияНаПриемку");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПриобретениеТоваровУслуг(Команда)
	
	ЭлементСписокРаспоряжения = Элементы.СписокРаспоряженияНаОформление;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				ЭлементСписокРаспоряжения.ТекущиеДанные,
				ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
		
	ОчиститьСообщения();
	
	ВыделенныеСтроки = ЭлементСписокРаспоряжения.ВыделенныеСтроки;
	СписокРаспоряжений.Очистить();
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров
	ПараметрыСозданныхДокументов = ОформитьНакладныеПоЗаказамНаСервере();
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
			ПараметрыСозданныхДокументов.Параметры.Удалить("СозданныеДокументы");
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьАктОРасхождениях(Команда)
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПриемку.ТекущиеДанные;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("АктОРасхожденияхПослеПриемки")) Тогда
		Возврат;
	КонецЕсли;
	
	ХозОперацииПоступленияТоваров = ХозОперацииПоступленияТоваров();
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Тогда
		
		Если ИспользоватьОтветственноеХранениеВПроцессеЗакупки Тогда
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!
				|Выберите строку с типом распоряжения ""Приобретение товаров и услуг"" или ""Приемка товаров на хранение"".'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!
				|Выберите строку с типом распоряжения ""Приобретение товаров и услуг"".'");
		КонецЕсли;
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	ИначеЕсли ХозОперацииПоступленияТоваров.Найти(ТекущиеДанные.ХозяйственнаяОперацияПриемки) <> Неопределено Тогда
		
		НаименованиеАкта = ?(ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"),
			НСтр("ru='поступления'"),
			НСтр("ru='приемки'"));
		
		ШаблонСтроки = НСтр("ru='Невозможно оформить документ ""Акт о расхождениях после %1"" на основании распоряжения %2 с операцией ""%3"".'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
			НаименованиеАкта,
			Строка(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.ХозяйственнаяОперация));
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("ДокументОснование", ТекущиеДанные.Ссылка);
	ПараметрыЗаполнения = Новый Структура("Основание, ПерезаполнитьПоПриемке", СтруктураЗаполнения, Истина);
	ОткрытьФорму("Документ.АктОРасхожденияхПослеПриемки.ФормаОбъекта", ПараметрыЗаполнения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", Новый Структура("ВходящиеДокументы", СписокДокументов));
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПоступление(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПоступление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", Новый Структура("ВходящиеДокументы", СписокДокументов));
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПриемка(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПриемку.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", Новый Структура("ВходящиеДокументы", СписокДокументов));
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоПриемке(Команда)
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПриемку.ТекущиеДанные;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеОрдера = 5 Тогда
		ТекстПредупреждения = НСтр("ru = 'Перезаполнение по приемке не требуется, так как нет ни одного ордера.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат
	КонецЕсли;
	
	ХозОперацииПоступленияТоваров = ХозОперацииПоступленияТоваров();
	
	ИмяФормыЗаполнения = "Документ.ПриобретениеТоваровУслуг.ФормаОбъекта";
	
	
	Если ТекущиеДанные.СостояниеОрдера = 1 
		И ХозОперацииПоступленияТоваров.Найти(ТекущиеДанные.ХозяйственнаяОперацияПриемки) = Неопределено Тогда
		
		Основание = Новый Структура("ДокументОснование, Склад", ТекущиеДанные.Ссылка, ТекущиеДанные.Склад);
		ПараметрыЗаполнения = Новый Структура("Основание, ЗаполнятьПоОрдеру", Основание, Истина);
		ОткрытьФорму(ИмяФормыЗаполнения, ПараметрыЗаполнения, ЭтаФорма);
			
	ИначеЕсли ХозОперацииПоступленияТоваров.Найти(ТекущиеДанные.ХозяйственнаяОперацияПриемки) <> Неопределено Тогда
		Основание = Новый Структура;
		Основание.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		Основание.Вставить("СкладПоступления", ТекущиеДанные.Склад);
		Основание.Вставить("ЗаполнятьПоОрдеру", Истина);
		Основание.Вставить("ХозяйственнаяОперацияПриемки", ТекущиеДанные.ХозяйственнаяОперацияПриемки);
		ПараметрыЗаполнения = Новый Структура("Основание", Основание);
		ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаОбъекта", ПараметрыЗаполнения, ЭтаФорма);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Если ОпределитьНаличиеОформленныхНакладных(ТекущиеДанные.Ссылка, ТекущиеДанные.Склад, ТекущиеДанные.ХозяйственнаяОперация) Тогда
			ОткрытьФормуПереоформлениеНакладных(ТекущиеДанные.Ссылка, ТекущиеДанные.Склад, ТекущиеДанные.ХозяйственнаяОперация);
		Иначе
			Основание = Новый Структура("ДокументОснование, Склад", ТекущиеДанные.Ссылка, ТекущиеДанные.Склад);
			ПараметрыЗаполнения = Новый Структура("Основание, ЗаполнятьПоОрдеру", Основание, Истина);
			ОткрытьФорму(ИмяФормыЗаполнения, ПараметрыЗаполнения, ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ПараметрыЗаполнения = Новый Структура("Ключ, ЗаполнятьПоОрдеру", ТекущиеДанные.Ссылка, Истина);
		ОткрытьФорму("Документ.ПриобретениеТоваровУслуг.ФормаОбъекта", ПараметрыЗаполнения, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоступлениеТоваров(Команда)
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПоступление.ТекущиеДанные;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыПоступление = "Документ.ПоступлениеТоваров.ФормаОбъекта";
	
	Если ТекущиеДанные.СостояниеПоступленияТоваров = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Оформление документа ""Поступление товаров"" не требуется.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		Основание = Новый Структура;
		Основание.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		Основание.Вставить("СкладПоступления", ТекущиеДанные.Склад);
		Основание.Вставить("ХозяйственнаяОперацияПриемки", ТекущиеДанные.ХозяйственнаяОперацияПриемки);
		
		Основание.Вставить("ЗаполнятьПоНакладной", Истина);
		Если ТекущиеДанные.ХозяйственнаяОперацияПриемки
				= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки")
			Или ТекущиеДанные.ХозяйственнаяОперацияПриемки 
				= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки") Тогда
			Основание.Вставить("ЗаполнятьПоНакладной", Ложь);
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("Основание", Основание);
		
		ОткрытьФорму(ИмяФормыПоступление, ПараметрыЗаполнения, ЭтаФорма);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		ПараметрыЗаполнения = Новый Структура("Ключ, ЗаполнятьПоОрдеру", ТекущиеДанные.Ссылка, Истина);
		ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаОбъекта", ПараметрыЗаполнения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПриобретениеТоваровПоРаспоряжению(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПоступление.ТекущиеДанные;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеПоступленияПриобретения = 0 
		ИЛИ (ТекущиеДанные.СостояниеПоступленияПриобретения = 1 И ТекущиеДанные.СостояниеПоступленияТоваров = 1)
		ИЛИ  (ТекущиеДанные.СостояниеПоступленияТоваров = 1 И ТекущиеДанные.СостояниеПоступленияПриобретения = 3) Тогда
		ТекстПредупреждения = НСтр("ru = 'Оформление приобретения товаров по поступлениям не требуется.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат
	КонецЕсли;
	
	ИмяФормыПоступление = "Документ.ПриобретениеТоваровУслуг.ФормаОбъекта";
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ  ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Если ТекущиеДанные.СостояниеПоступленияПриобретения = 3
				И ОпределитьНаличиеОформленныхНакладных(ТекущиеДанные.Ссылка, ТекущиеДанные.Склад, ТекущиеДанные.ХозяйственнаяОперация,Ложь) Тогда
			ОткрытьФормуПереоформлениеНакладных(ТекущиеДанные.Ссылка, ТекущиеДанные.Склад, ТекущиеДанные.ХозяйственнаяОперация);
		ИначеЕсли ТекущиеДанные.СостояниеПоступленияПриобретения = 1 Тогда
			Основание = Новый Структура;
			Основание.Вставить("ДокументОснование",				ТекущиеДанные.Ссылка);
			Основание.Вставить("СкладПоступления",				ТекущиеДанные.Склад);
			Основание.Вставить("ХозяйственнаяОперацияПриемки",	ТекущиеДанные.ХозяйственнаяОперацияПриемки);
			
			ПараметрыЗаполнения = Новый Структура("Основание, ЗаполнятьПоОрдеру", Основание, Истина);
			ОткрытьФорму(ИмяФормыПоступление, ПараметрыЗаполнения, ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ПараметрыЗаполнения = Новый Структура("Ключ, ЗаполнятьПоОрдеру", ТекущиеДанные.Ссылка, Истина);
		ОткрытьФорму(ИмяФормыПоступление, ПараметрыЗаполнения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "СписокРаспоряженияНаОформление"
	СписокУсловноеОформление = СписокРаспоряженияНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	//
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление.Дата", "СписокРаспоряженияНаОформлениеДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаПриемку.Дата", "СписокРаспоряженияНаПриемкуДата");
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПриобретениеТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРаспоряженияНаОформление;
		КонецЕсли;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваров

&НаСервере
Функция ОпределитьНаличиеОформленныхНакладных(РаспоряжениеСсылка, Склад, ХозяйственнаяОперация, ЗаполнениеПоОрдерам = Истина)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗаказы.ЗаказПоставщику КАК Заказ,
	|	ТаблицаЗаказы.Регистратор КАК Накладная
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ТаблицаЗаказы
	|ГДЕ
	|	&ЗаполнениеПоОрдерам = ИСТИНА
	|	И Склад = &Склад 
	|	И ЗаказПоставщику = &РаспоряжениеСсылка
	|	И ТаблицаЗаказы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаЗаказы.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументПоступления.Соглашение,
	|	ДокументПоступления.Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ДокументПоступленияТовары
	|		ПО ДокументПоступления.Ссылка = ДокументПоступленияТовары.Ссылка
	|ГДЕ
	|	&ЗаполнениеПоОрдерам = ИСТИНА
	|	И ДокументПоступления.Соглашение = &РаспоряжениеСсылка
	|	И ДокументПоступленияТовары.Склад = &Склад
	|	И ДокументПоступления.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	&ЗаполнениеПоОрдерам = ЛОЖЬ
	|	И ТоварыКПоступлению.Склад = &Склад
	|	И ДокументПоступления = &РаспоряжениеСсылка
	|	И ТоварыКПоступлению.КОформлениюПоступленийПоНакладным > 0
	|	И ТоварыКПоступлению.ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоОрдерамОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(,Склад = &Склад И ДокументПоступления = &РаспоряжениеСсылка) КАК ТоварыКПоступлениюОстатки
	|ГДЕ
	|	ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоОрдерамОстаток<>0 
	|	И &ЗаполнениеПоОрдерам = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоНакладнымОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(,Склад = &Склад И ДокументПоступления = &РаспоряжениеСсылка) КАК ТоварыКПоступлениюОстатки
	|ГДЕ
	|	ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоНакладнымОстаток<>0
	|	И &ЗаполнениеПоОрдерам = ЛОЖЬ
	|");
	
	Запрос.УстановитьПараметр("РаспоряжениеСсылка", РаспоряжениеСсылка);
	Запрос.УстановитьПараметр("ЗаполнениеПоОрдерам", ЗаполнениеПоОрдерам);
	Запрос.УстановитьПараметр("Склад", Склад);
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОформленныеНакладные = РезультатыЗапроса[0].Выгрузить();
	
	АдресТаблицаНакладныхВоВременномХранилище = ПоместитьВоВременноеХранилище(ОформленныеНакладные);
	НастройкиФормыПереоформленияНакладных = НастройкиФормыПереоформленияНакладных(РаспоряжениеСсылка, Склад, ХозяйственнаяОперация);
	Возврат НЕ РезультатыЗапроса[1].Пустой() И ОформленныеНакладные.Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПереоформлениеНакладных(РаспоряжениеСсылка, Склад, ХозяйственнаяОперация)
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(РаспоряжениеСсылка);
	
	РеквизитыШапки = Новый Структура();
	Если ТипЗнч(РаспоряжениеСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи") Тогда
			ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(МассивСсылок, "ПриемкаТоваровНаХранение", РеквизитыШапки);
		Иначе
			ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(МассивСсылок, "ПриобретениеТоваровУслуг", РеквизитыШапки);
		КонецЕсли;
	Иначе
		РеквизитыШапки = ЗакупкиВызовСервера.ПолучитьУсловияЗакупок(РаспоряжениеСсылка);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Заказы, Склад, РеквизитыШапки, НастройкиФормы",
		МассивСсылок, Склад, РеквизитыШапки, НастройкиФормыПереоформленияНакладных);
	
	ОткрытьФорму("ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормыПереоформленияНакладных(РаспоряжениеСсылка, Склад, ХозяйственнаяОперация)
	
	НастройкиФормы = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.Заголовок = НСтр("ru = 'Переоформление документов закупки по выбранным распоряжениям'");
	НастройкиФормы.ИмяФормыНакладной = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента";
	НастройкиФормы.НакладнаяНаПриемку = Истина;
	НастройкиФормы.НакладнаяНаОтгрузку = Истина;
	Если ТипЗнч(РаспоряжениеСсылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		НастройкиФормы.ДанныеЗаполнения =  Новый Структура("ДокументОснование, Склад", РаспоряжениеСсылка, Склад);
	КонецЕсли;
	Возврат НастройкиФормы;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьСпискиВыбораПоСостояниям()
	
	СписокВыбора = Элементы.СостояниеОрдера.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("1", НСтр("ru='Оформлены ордера, не оформлены накладные'"), Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("5", НСтр("ru='Не оформлены ордера, оформлены накладные'"), Ложь, БиблиотекаКартинок.НеОформленыОрдера);
	СписокВыбора.Добавить("3", НСтр("ru='Ордера не соответствуют накладным'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
	СписокВыбора = Элементы.СостояниеПриобретения.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("1", НСтр("ru='Создать накладную'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2", НСтр("ru='Дооформить накладную'"),Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
	СписокВыбора = Элементы.СостояниеПоступленияТоваров.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Поступления соответствуют распоряжениям'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1", НСтр("ru='Создать поступление'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Поступления не соответствуют распоряжениям'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
	СписокВыбора = Элементы.СостояниеПоступленияПриобретения.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Приобретения соответствуют поступлениям'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1", НСтр("ru='Не оформлены приобретения'"), Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Приобретения не соответствуют поступлениям'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	Иначе
		Если Не Документы.ПриобретениеТоваровУслуг.ЕстьЗаказыКОформлению(Организация,Склад)
			И Документы.ПриобретениеТоваровУслуг.ЕстьРаспоряженияНаПриемку(Организация,Склад) Тогда
			ТекущийЭлемент = Элементы.СтраницаРаспоряженияНаПриемку;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоСкладу()
	
	ОтборСклады = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПриемку,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПоступление,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
		
	ЕстьОрдерныйНаПоступлениеСклад = СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад(Склад,ТекущаяДатаСеанса());
	ПравоНаЧтениеОстатковТоваровКПоступлению = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
	ДоступностьПриемки = ЕстьОрдерныйНаПоступлениеСклад И ПравоНаЧтениеОстатковТоваровКПоступлению;
	
	Элементы.СостояниеОрдера.Видимость = ДоступностьПриемки;
	Элементы.СтраницаРаспоряженияНаПриемку.Видимость = ДоступностьПриемки;
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоПриемке.Видимость = ДоступностьПриемки
																		И (ПравоДобавлятьПриобретение
																			Или ПравоДобавлятьПриемкуТоваров);
	
	Если ДоступностьПриемки Тогда
		Элементы.СписокРаспоряженияНаПриемкуВалюта.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	КонецЕсли;
	
	Если (Не ЕстьОрдерныйНаПоступлениеСклад И Не ИспользоватьПоступленияТоваров)
		Или Не ИспользоватьЗаказыПоставщикам Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЖурнала(КлючНазначенияИспользования)
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",Склад);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста","ЖурналДокументовЗакупки");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",КлючНазначенияИспользования);
	ПараметрыЖурнала.Вставить("СинонимЖурнала",НСтр("ru = 'Документы закупки'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыДинСписка()
	СписокРаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("СписокХозОпераций", ХозОперацииПоступленияТоваров());
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ХозОперацииПоступленияТоваров()
	
	СписокХозОпераций = Новый Массив;
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки"));
	
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	
	Возврат СписокХозопераций
КонецФункции


#КонецОбласти

#Область ОформлениеНакладной

&НаСервере
Функция ОформитьНакладныеПоЗаказамНаСервере()
	
	Перем СписокОшибок;
	
	СтруктураСозданныеНакладные = Новый Структура("СозданныеНакладные, ИмяФормы, ПараметрыФормы, Ошибки");
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ТаблицыЗаказовРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок);
	ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если ВсегоТаблиц > 0 Тогда
		
		// При оформлении по заказам всегда создается новая накладная
		
		// Открывается форма созданной накладной, в случае если совпали ключевые поля выделенных строк, и позволяет функциональная опция
		// В ином случае открывается форма со списком созданных накладных
		
		Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
			// Пакетно
			ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок);
		ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
			// Индивидуально
			ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, СписокОшибок);
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	
	РежимБезВопросов = Ложь;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		Если ПерваяСтрока.СостояниеПриобретения > 0 Тогда
						
			ПолноеИмяРаспоряжения = ПерваяСтрока.Ссылка.Метаданные().ПолноеИмя();
			ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(ПерваяСтрока.ХозяйственнаяОперация);
			
			МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
			МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
			
			Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
			
			РеквизитыШапки = Новый Структура;
			Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеНакладной.Имя, РеквизитыШапки) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("СкладПоступления",  Неопределено);
			
			ДанныеЗаполнения.Вставить("РеквизитыШапки",    РеквизитыШапки);
			ДанныеЗаполнения.Вставить("ДокументОснование", Заказы);
			
			ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				// Добавить запись в историю работы пользователя.
				ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
				СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
				КонецПопытки;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Не удалось создать документ %1 на основании документа %2'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеНакладной.Синоним, Заказы[0]);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
					ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФормы = Новый Структура("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ПолноеИмяРаспоряжения = ВыделеннаяСтрока.Ссылка.Метаданные().ПолноеИмя();
	ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(ВыделеннаяСтрока.ХозяйственнаяОперация);
	МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
	МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
	
	ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если ПолныеИменаНакладных.НайтиПоЗначению(Распоряжение.Метаданные().ПолноеИмя()) <> Неопределено Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
		
	РеквизитыШапки = Новый Структура;
	Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеНакладной.Имя, РеквизитыШапки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкладПоступления",  Неопределено);
	
	ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
	ПараметрыФормы.Вставить("ДокументОснование", Заказы);
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
	
	//ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТаблицыЗаказовРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок) 
	КлючевыеПоля = "Подразделение,Партнер,Контрагент,Договор,Организация,Склад,Соглашение,"
		+"ХозяйственнаяОперация,ВалютаВзаиморасчетов,НалогообложениеНДС,ЦенаВключаетНДС,"
		+"ПорядокРасчетов,ВернутьМногооборотнуюТару,НаправлениеДеятельности,ВариантПриемкиТоваров";
	
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("СостояниеПриобретения");
	
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений();
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеПриобретения", Новый ОписаниеТипов("Число"));
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеПриобретения");
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		ПолноеИмяРаспоряжения = Строка.Ссылка.Метаданные().ПолноеИмя();
		ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(Строка.ХозяйственнаяОперация);
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		Если ПакетныйРежим И ПолноеИмяНакладной = ПолноеИмяРаспоряжения Тогда
			
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
			ПрерватьОбработкуСтроки = Истина;
			
		Иначе // оформление по заказам
			
			Если Строка.СостояниеПриобретения = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		// Создание новой таблицы в случаях:
		// 1. Таблица еще ни разу не создана
		// 2. Запрещено группировать в одну накладную несколько заказов
		// 3. Распоряжение является накладной или ключевые поля различаются (например, нельзя группировать 
		//	в одну накладную заказы у которых разные склады)
		
		Если РазделеннаяТаблица = Неопределено 
			Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
			Или ПолноеИмяНакладной <> ТекущиеКлючи.ПолноеИмяНакладной 
			Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи,Строка,КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица); // Передача в массив ссылки на текущую таблицу
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
			ТекущиеКлючи.ПолноеИмяНакладной = ПолноеИмяНакладной;
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаСервере
Функция ПолноеИмяНакладнойПоХозОперации(ХозяйственнаяОперация)
	
	ПолноеИмяНакладной = Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя();
	
	
	Возврат ПолноеИмяНакладной;
	
КонецФункции

#КонецОбласти

#КонецОбласти
