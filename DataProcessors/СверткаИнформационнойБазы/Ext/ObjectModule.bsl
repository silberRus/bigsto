#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета, КурсыВалют;
Перем Комментарий_УдалитьПриСверткеБазы, Комментарий_НеУдалятьПриСверткеБазы, Комментарий_СформированСверткойБазы, Комментарий_СкорректированСверткойБазы;
Перем ТаблицаОстаткиНаСкладахПоПомещениям;
Перем ТаблицаОстаткиНаСкладахПоСериям;
Перем ИспользоватьНазначения;
Перем ТаблицаОстаткиНаСкладахПоНазначению;
Перем КоличествоСтрокВДокументеВводаОстатков;
Перем ОтраженоИзменениеДокументов;
Перем СтруктураИспользованиеИтоговРегистровНакопления;
Перем СкладскиеЯчейки_ЗонаПриемки;

#Область СлужебныеПроцедурыИФункции

// Функция возвращает список объектов метаданных
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  Соответствие - Ключи - названия объектов метаданных, Значения - сами метаданные.
Функция ПолучитьСтруктуруТиповОбъектовМД() 
	
	МассивРез = Новый Структура();
	МассивРез.Вставить("Документ", Метаданные.Документы);
	МассивРез.Вставить("Задача", Метаданные.Задачи);
	МассивРез.Вставить("РегистрНакопления", Метаданные.РегистрыНакопления);
	МассивРез.Вставить("РегистрСведений", Метаданные.РегистрыСведений);
	
	Возврат МассивРез;
	
КонецФункции

// Функция возвращает способ удаления движений для типа объекта метаданных
//
// Параметры
//  ТипОбъектаМД - элемент соответствия, полученного функцией ПолчитьМассивТиповОбъектовМД() 
//  ОбъектМД - метаданные, для которых нужно получить способ свертки
//
// Возвращаемое значение:
//  Строка - способ удаления движений для данного объекта
Функция ПолучитьПризнакУдаленияДвижений(ТипОбъектаМД, ОбъектМД)
	УдалятьДвижения = Ложь;
	//Определим способ свертки по типу объекта метаданных
	Если ТипОбъектаМД.Ключ = "РегистрСведений" ТОгда
		Если (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
			УдалятьДвижения = Истина;
		Иначе
			УдалятьДвижения = Ложь;
		КонецЕсли;
	ИначеЕсли ТипОбъектаМД.Ключ = "РегистрНакопления" ТОгда
		УдалятьДвижения = Истина;
	ИначеЕсли ТипОбъектаМД.Ключ = "Задача" ИЛИ ТипОбъектаМД.Ключ = "Документ" ТОгда
		УдалятьДвижения = Истина;
	КонецЕсли;
	
	Возврат УдалятьДвижения;
	
КонецФункции

// Процедура выводит сообщение о ходе процесса свертки
//
// Параметры
//  Нет 
// 
Процедура СообщениеСвертки(ТекстСообщения, ЭтоОшибка = Ложь, ОписаниеОшибки = Неопределено) 
	
	ПараметрыЖурнала = Новый Структура();
	ПараметрыЖурнала.Вставить("ГруппаСобытий", НСтр("ru='СверткаИБ'"));
	ПараметрыЖурнала.Вставить("Метаданные", Неопределено);
	ПараметрыЖурнала.Вставить("Данные", Неопределено);
	Если ЭтоОшибка Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала, УровеньЖурнала, ,ТекстСообщения,ОписаниеОшибки);
КонецПроцедуры

//Процедура формирует и выводит сообщение о формировании документов ввода остатков
Процедура ВывестиСообщениеСформированыДокументы(ИмяДокумента, ТипОперации = "", Обработаны = Ложь)
	Если Обработаны Тогда
		ТекстСообщения = НСтр("ru='Обработаны документы %ПредставлениеДокумента% (%ТипОперации%)'");
	Иначе
		ТекстСообщения = НСтр("ru='Сформированы документы %ПредставлениеДокумента% %ТипОперации%'");
	КонецЕсли;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеДокумента%", Метаданные.Документы[ИмяДокумента].Синоним);
	Если ТипОперации = "" Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%ТипОперации%)", "");
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипОперации%", ТипОперации);
	КонецЕсли;
	СообщениеСвертки(ТекстСообщения);
КонецПроцедуры

//Получает массив, содержащий имена документов ввода остатков
Функция ПолучитьМассивТиповДокументовВводаОстатков(ОбрабатыватьЗаказы)
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("УстановкаКвотАссортимента");
	МассивТипов.Добавить("ИзменениеАссортимента");
	МассивТипов.Добавить("РегистрацияЦенНоменклатурыПоставщика");
	МассивТипов.Добавить("УстановкаЦенНоменклатуры");
	МассивТипов.Добавить("ВводОстатков");
	МассивТипов.Добавить("ОтборРазмещениеТоваров");
	МассивТипов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
	МассивТипов.Добавить("БлокировкаВычетаНДС");
	МассивТипов.Добавить("НачислениеИСписаниеБонусныхБаллов");

	Если ОбрабатыватьЗаказы Тогда
		МассивТипов.Добавить("ЗаказКлиента");
		МассивТипов.Добавить("ЗаказНаВнутреннееПотребление");
		МассивТипов.Добавить("ЗаказНаПеремещение");
		МассивТипов.Добавить("ЗаказНаСборку");
		МассивТипов.Добавить("ЗаказПоставщику");
		МассивТипов.Добавить("ЗаявкаНаВозвратТоваровОтКлиента");
	КонецЕсли;
	Возврат МассивТипов;
КонецФункции

//Функция получает массив документов ввода остатков для последующего проведения, удаления или исключения из списка удаляемых документов
//Параметр - Действие (строка), от него зависит по каким условиям будут отбираться документы
Функция ПолучитьМассивДокументовВводаОстатков(Действие)
	
	Если Действие = "проведение" Тогда
		ДопУсловие = " И НЕ Док.ПометкаУдаления И НЕ Док.Проведен
		| И Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы
		| И Док.Дата >= &НачДата";
	ИначеЕсли Действие = "удаление" Тогда
		ДопУсловие = " И Док.Дата >= &НачДата  И НЕ Док.ПометкаУдаления
		|И Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы";
	ИначеЕсли Действие = "исключение" Тогда
		ДопУсловие = " И (Док.Дата >= &НачДата И Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы ИЛИ
		|Док.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы)";
	КонецЕсли;
	//Документы Заказ и Заявка на возврат обрабатываются только на этапе исключение. 
	//У них не бывает коммента %Сформирован обработкой свертки базы% 
	ОбрабатыватьЗаказы = ?(Действие = "исключение", Истина, Ложь);
	ТипыДокументовВводаОстатков = ПолучитьМассивТиповДокументовВводаОстатков(ОбрабатыватьЗаказы);
	
	ТекстЗапроса = "";
	Для Каждого ИмяДокумента ИЗ ТипыДокументовВводаОстатков Цикл
		
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|Док.Ссылка КАК Ссылка
		|ИЗ Документ."+ИмяДокумента+" КАК Док
		|ГДЕ Док.Дата <= &КонДата "+ ДопУсловие +"
		|";
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("Комментарий_СформированСверткойБазы", "%"+НСтр("ru='Сформирован обработкой свертки базы'")+"%");
	Запрос.УстановитьПараметр("Комментарий_НеУдалятьПриСверткеБазы", "%"+НСтр("ru='Не удалять при свертке базы'")+"%");
	
	Результат = Запрос.Выполнить();
	МассивДокументов = Новый Массив;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивДокументов.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	// Добавление документов СФПолуч, введенных на основании ввода остатков
	Если Действие = "проведение" Тогда
		ДопУсловиеСФ = " И НЕ Док.Ссылка.ПометкаУдаления И НЕ Док.Ссылка.Проведен
		| И Док.ДокументОснование.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы
		| И Док.ДокументОснование.Дата >= &НачДата";
	ИначеЕсли Действие = "удаление" Тогда
		ДопУсловиеСФ = " И Док.ДокументОснование.Дата >= &НачДата  И НЕ Док.Ссылка.ПометкаУдаления
		|И Док.ДокументОснование.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы";
	ИначеЕсли Действие = "исключение" Тогда
		ДопУсловиеСФ = " И (Док.ДокументОснование.Дата >= &НачДата И Док.ДокументОснование.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы ИЛИ
		|Док.ДокументОснование.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы)";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка
	|ИЗ Документ.СчетФактураПолученный.ДокументыОснования КАК Док
	|ГДЕ Док.ДокументОснование ССЫЛКА Документ.ВводОстатков
	|	И  Док.ДокументОснование.Дата <= &КонДата " + ДопУсловиеСФ;
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("Комментарий_СформированСверткойБазы", "%"+НСтр("ru='Сформирован обработкой свертки базы'")+"%");
	Запрос.УстановитьПараметр("Комментарий_НеУдалятьПриСверткеБазы", "%"+НСтр("ru='Не удалять при свертке базы'")+"%");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
КонецФункции

// Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) 

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

//Процедура записывает в константу параметров свертки факт изменения документов в ходе создания документов ввода остатков
Процедура ЗафиксироватьИзменениеДокументовВПараметрСвертки()
	Если ОтраженоИзменениеДокументов Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметрыСвертки = Константы.ПараметрыСверткиИБ.Получить().Получить();
	Если ТипЗнч(СтруктураПараметрыСвертки) <> Тип("Структура") Тогда
		СтруктураПараметрыСвертки = Новый Структура;
	ИначеЕсли СтруктураПараметрыСвертки.Свойство("ИзмененыДокументы") Тогда
		//Возможно, уже установлено 
		Если СтруктураПараметрыСвертки.ИзмененыДокументы Тогда
			ОтраженоИзменениеДокументов = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ОтраженоИзменениеДокументов = Истина;

	СтруктураПараметрыСвертки.Вставить("ИзмененыДокументы", Истина);
	СтруктураПараметрыСверткиХранилище = Новый ХранилищеЗначения(СтруктураПараметрыСвертки);
	Константы.ПараметрыСверткиИБ.Установить(СтруктураПараметрыСверткиХранилище);
КонецПроцедуры

#Область ПроведениеДокументовВводаОстатков

// Процедура проводит документы ввода остатков 
// 
Процедура ПровестиДокументыВводаОстатков() Экспорт
	МассивДокументов = ПолучитьМассивДокументовВводаОстатков("проведение");
	Для каждого ДокСсылка ИЗ МассивДокументов Цикл
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Попытка
			//Док ОтборРазмещениеТоваров - особый алгоритм. Последовательное проведение в разных статусах
			Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
				ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
			КонецЕсли;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СообщениеСвертки(НСтр("ru='Проведен'")+": "+ ДокОбъект.Ссылка);
		Исключение
			СообщениеСвертки(НСтр("ru='Не удалось провести документ'")+" :" + ДокОбъект.Ссылка, Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыУдаленияОбъектовМетаданныхИДвижений

//Функция определяет, используется ли в итогах хотя бы одно измерение регистра накопления
Функция ИспользуютсяИтогиРегистраНакопления(ИмяРегистра)
	ИспользованиеИтогов = Неопределено;
	СтруктураИспользованиеИтоговРегистровНакопления.Свойство(ИмяРегистра, ИспользованиеИтогов);
	Если ИспользованиеИтогов <> Неопределено Тогда
		Возврат ИспользованиеИтогов;
	КонецЕсли;
	ИспользованиеИтогов = Ложь;
	Для Каждого ИзмерениеРегистра ИЗ Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		Если ИзмерениеРегистра.ИспользованиеВИтогах Тогда
			ИспользованиеИтогов = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтруктураИспользованиеИтоговРегистровНакопления.Вставить(ИмяРегистра,ИспользованиеИтогов);
	Возврат ИспользованиеИтогов;
КонецФункции

// Процедура производит свертку по переданному объекту метаданных
//
Процедура УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов)
		
	СообщениеСвертки(НСтр("ru='Начало очистки'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД);
	
	Если (ВРЕГ(ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ") Тогда
		ЕстьИтоги = ИспользуютсяИтогиРегистраНакопления(ТекСтрока.ОбъектМД);
		Если ЕстьИтоги Тогда
			РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Ложь);
		КонецЕсли;
		
		Попытка
			УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД,, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		Исключение
			СообщениеСвертки(НСтр("ru='Ошибка при очистке'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина, ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;	
		Если ЕстьИтоги Тогда
			РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
		КонецЕсли;
		
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		ТекРег = Метаданные.РегистрыСведений.Найти(ТекСтрока.ОбъектМД);
		
		Попытка
			Если (ТекРег.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
				ЕстьПериод = Истина;
				Если ТекРег.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					ЕстьПериод = Ложь;
				КонецЕсли;
				УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД, ЕстьПериод, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			КонецЕсли;	
			
		Исключение
			СообщениеСвертки(НСтр("ru='Ошибка при очистке'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина, ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;	
		
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "ДОКУМЕНТ" Тогда
		ПометитьНаУдалениеДокументы(ТекСтрока.ОбъектМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
		
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "ЗАДАЧА" Тогда
		ПометитьНаУдалениеЗадачи(ТекСтрока.ОбъектМД);
	КонецЕсли;
	
	СообщениеСвертки(НСтр("ru='Окончание очистки'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД);
	
КонецПроцедуры	

// Процедура производит удаление движений по дату свертки
//
// Параметры
//  ДеревоСпособовСвертки	- дерево значений, содержащее объекты для свертки  
//
Процедура УдалитьДвиженияПоДатуСвертки() Экспорт
	
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных = Новый ТаблицаЗначений;
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Колонки.Добавить("ТипОбъектаМД");
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Колонки.Добавить("ОбъектМД");

	МассивТиповОбъектовМД = ПолучитьСтруктуруТиповОбъектовМД();
	Для Каждого ТипОбъектаМД Из МассивТиповОбъектовМД Цикл
		Для Каждого ОбъектМД из ТипОбъектаМД.Значение Цикл
			ПризнакУдаленияДвижений = ПолучитьПризнакУдаленияДвижений(ТипОбъектаМД, ОбъектМД);
			Если ПризнакУдаленияДвижений = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаОбъектМД = ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Добавить();
			НоваяСтрокаОбъектМД.ТипОбъектаМД = ТипОбъектаМД.Ключ;
			НоваяСтрокаОбъектМД.ОбъектМД = ОбъектМД.Имя;
		КонецЦикла;
	КонецЦикла;
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Сортировать("ТипОбъектаМД, ОбъектМД");
	
	//Получим массив исключаемых документов - некоторые типы документов, 
	//	у которых комментарий содержит строку "Не удалять при свертке базы" либо "Сформирован обработкой свертки базы"
	МассивПропускаемыхДокументов = ПолучитьМассивДокументовВводаОстатков("исключение");
	
	//Получим массив удаляемых документов после даты свертки - таких, у которых 
	//комментарий содержит строку "Удалить при свертке базы"
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("ПриходныйОрдерНаТовары");
	МассивТипов.Добавить("РасходныйОрдерНаТовары");
	МассивТипов.Добавить("ПоступлениеТоваров");

	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Для Каждого ТипДокумента ИЗ МассивТипов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса <> "", "ОБЪЕДИНИТЬ "," ") + " ВЫБРАТЬ
		|Ссылка
		|ИЗ Документ."+ТипДокумента+"
		|ГДЕ Дата > &КонДата И Комментарий ПОДОБНО ""%Удалить при свертке базы%""
		|";
	КонецЦикла;
	Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаСверткиИБ));
	Запрос.Текст = ТекстЗапроса;
	МассивУдаляемыхДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Для Каждого ТекСтрока Из ТаблицаУдаленияДвиженийПоОбъектамМетаданных Цикл
		Если (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ДОКУМЕНТ") 
			ИЛИ (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ЗАДАЧА") Тогда
			//Обработаем на 2ой итерации
			
		Иначе
			//Удаляются записи регистров
			УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТекСтрока.ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		КонецЕсли;
		
	КонецЦикла;
	// Явно пометим на удаление документы, которые должны обрабатываться в первую очередь 
	//  От них зависит удаление других документов.
	ПометитьНаУдалениеДокументы("СчетФактураПолученный", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);

	Для Каждого ТекСтрока Из ТаблицаУдаленияДвиженийПоОбъектамМетаданных Цикл
		Если (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ДОКУМЕНТ") 
			ИЛИ (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ЗАДАЧА") Тогда
			//Помечаются на удаление документы и задачи
			УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТекСтрока.ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		Иначе	
			//Уже обработано на 1й итерации
			
		КонецЕсли;	
		
	КонецЦикла;
	
	//В процессе удаления движений могли остаться регистры накопления с отключенными итогами. Включим их обратно.
	Для Каждого ТекРегистр Из Метаданные.РегистрыНакопления Цикл
		Если НЕ РегистрыНакопления[ТекРегистр.Имя].ПолучитьИспользованиеИтогов()
			И ИспользуютсяИтогиРегистраНакопления(ТекРегистр.Имя) Тогда
			РегистрыНакопления[ТекРегистр.Имя].УстановитьИспользованиеИтогов(Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура помечает на удаление документы
//
// Параметры
//  ИмяДокумента 	- строка, содержащая имя документа как оно задано в конфигураторе,  
//  ДатаНачала 		- дата начиная с которой удаляются документы,
//  ДатаОкончания	- дата по которую удаляются документы
//
Процедура ПометитьНаУдалениеДокументы(ИмяДокумента, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов)
	Если ИмяДокумента = "ЧекККМ" ИЛИ ИмяДокумента = "ЧекККМВозврат" Тогда
		// Чеки ККМ можно удалить только специальной обработкой архивирования и удаления чеков ККМ.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекДокумент.Ссылка КАК Документ
	|ИЗ
	|	Документ.#ЭтоЗаменяется# КАК ТекДокумент
	|ГДЕ
	|	(НЕ ТекДокумент.ПометкаУдаления) 
	|	И ТекДокумент.Дата <= &ДатаОкончания
	|	И ТекДокумент.Ссылка НЕ В (&МассивПропускаемыхДокументов)";
	Если МассивУдаляемыхДокументов.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ "+
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекДокумент.Ссылка КАК Документ
		|ИЗ
		|	Документ.#ЭтоЗаменяется# КАК ТекДокумент
		|ГДЕ
		|	(НЕ ТекДокумент.ПометкаУдаления)
		|	И ТекДокумент.Дата > &ДатаОкончания
		|	И ТекДокумент.Ссылка В (&МассивУдаляемыхДокументов)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ЭтоЗаменяется#", ИмяДокумента);
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("МассивПропускаемыхДокументов",    МассивПропускаемыхДокументов);
	Запрос.УстановитьПараметр("МассивУдаляемыхДокументов",    МассивУдаляемыхДокументов);

	ДокВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ДокВыборка.Следующий() Цикл
		ФлагНаличияДвижений = Ложь;
		ТекДокумент = ДокВыборка.Документ;
		ДокОбъект = ТекДокумент.ПолучитьОбъект();
		Для Каждого ТекДвижение Из ДокОбъект.Движения Цикл
			ТекДвижение.Прочитать();
			Если ТекДвижение.Количество() > 0 Тогда
				//По документу есть движения
				ФлагНаличияДвижений = Истина;
				ТекстСообщения = НСтр("ru='По документу %Документ% есть движения по регистрам, пометка на удаление не выполнена'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДокОбъект.Ссылка);

				СообщениеСвертки(ТекстСообщения, Истина, "");

				Прервать;
				
			КонецЕсли;	
		КонецЦикла;
		
		Если НЕ ФлагНаличияДвижений Тогда
			Попытка
				ДокОбъект.УстановитьПометкуУдаления(Истина);
				
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось пометить на удаление документ %Документ%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ТекДокумент);
				СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());

			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура помечает на удаление задачи
//
// Параметры
//  ИмяЗадачи 	- строка, содержащая имя задачи как оно задано в конфигураторе,  
//  ДатаНачала 		- дата начиная с которой удаляются документы,
//  ДатаОкончания	- дата по которую удаляются документы
//
Процедура ПометитьНаУдалениеЗадачи(ИмяЗадачи)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекЗадача.Ссылка КАК Задача
	|ИЗ
	|	Задача.#ЭтоЗаменяется# КАК ТекЗадача
	|ГДЕ
	|	(НЕ ТекЗадача.ПометкаУдаления)
	|	И ТекЗадача.Дата <= &ДатаОкончания
	|	И ТекЗадача.БизнесПроцесс.Завершен
	|	И ТекЗадача.Выполнена
	|	#УсловияПоТипуЗадачи#";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ЭтоЗаменяется#", ИмяЗадачи);
	УсловияДляЗадачи = "";
	Если ИмяЗадачи = "ЗадачаИсполнителя" Тогда
		УсловияДляЗадачи = "И ТекЗадача.СрокИсполнения <= &ДатаОкончания ";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#УсловияПоТипуЗадачи#", УсловияДляЗадачи);
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаСверткиИБ));
	
	ЗадачаВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ЗадачаВыборка.Следующий() Цикл
		ТекЗадача = ЗадачаВыборка.Задача;
		ЗадачаОбъект = ТекЗадача.ПолучитьОбъект();
		
		Попытка
			ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось пометить на удаление задачу %Документ%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ЗадачаВыборка.Задача);
			СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());

		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает регистры накопления и регистры сведений, подчиненные регистратору
//
// Параметры
//  ТипОбъектаМД - строка, содержащая тип объекта метаданных,  
//  ИмяРегистра  - строка, содержащая имя регистра,
//  ДатаНачала 	 - дата, начиная с которой происходит чистка регистра,
//  ДатаОкончания- дата, по которую очищается регистр
//
Процедура УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ИмяРегистра, Периодический = Истина, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов) 
	ДокументСсылка = Неопределено;
	СсылкаНач = Неопределено;
			
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
				|	Регистр.Регистратор КАК Регистратор
				|ИЗ
				|	" + ТипОбъектаМД + "."+ИмяРегистра+" КАК Регистр
				|ГДЕ
				|	"+?(Периодический, "Регистр.Период <= &ДатаКон","Регистр.Регистратор.Дата <= &ДатаКон")+"
				|	И Регистр.Регистратор НЕ В (&МассивПропускаемыхДокументов)";
	Если МассивУдаляемыхДокументов.Количество()>0 Тогда
	   ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ РАЗЛИЧНЫЕ 
				|	Регистр.Регистратор КАК Регистратор
				|ИЗ
				|	" + ТипОбъектаМД + "."+ИмяРегистра+" КАК Регистр
				|ГДЕ
				|	"+?(Периодический, "Регистр.Период > &ДатаКон","Регистр.Регистратор.Дата > &ДатаКон")+"
				| И Регистр.Регистратор В (&МассивУдаляемыхДокументов)
				|";
	КонецЕсли;		
	Пока Истина Цикл
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
				
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаСверткиИБ));
		Запрос.УстановитьПараметр("МассивПропускаемыхДокументов", МассивПропускаемыхДокументов);
		Запрос.УстановитьПараметр("МассивУдаляемыхДокументов", МассивУдаляемыхДокументов);

		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;	
		
		Строка = Результат.Выбрать();
		Пока Строка.Следующий() Цикл
			СсылкаНач = Строка.Регистратор;
			
			Если ВРЕГ(ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
				НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			Иначе
				СообщениеСвертки(НСтр("ru='Не известный тип объекта метаданных'") + " " + ТипОбъектаМД);
				Возврат;
			КонецЕсли;	
				
			НаборЗаписей.Отбор.Регистратор.Установить(Строка.Регистратор);
			//Чтобы не выполнялись запросы при записи набора записей
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыФормированияДокументовВводаОстатков

// Процедура формирует документы ввода остатков 
//
Процедура СформироватьДокументыВводаОстатков(ПовторныйЗапуск = Ложь) Экспорт
	
	// Формирование документов запускается повторно после ошибки
	// Надо удалить документы, созданные на предыдущем этапе
	Если ПовторныйЗапуск Тогда
		МассивДокументов = ПолучитьМассивДокументовВводаОстатков("удаление");
		Для каждого ДокСсылка ИЗ МассивДокументов Цикл
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
			ДокОбъект.Удалить();
		КонецЦикла;
	КонецЕсли;
	ОтраженоИзменениеДокументов = Ложь;
	
	// Последовательный вызов процедур формирования документов ввода остатков
	// 1. Регистры сведений
	СформироватьДокументыВводаОстатковИзменениеАссортимента();
	СформироватьДокументыВводаОстатковКвотыАссортимента();
	СформироватьДокументыВводаОстатковЦеныНоменклатуры();
	СформироватьДокументыВводаОстатковЦеныНоменклатурыПоставщиков();
	ОбработатьБлокировкиСкладскихЯчеек();
	ОбработатьСостоянияБлокировкиВычетаНДС();

	// 2. Регистры накопления
	ОбработатьОстаткиДенежныеСредстваКПоступлениюИСписанию();
	// 2.1 Деньги
	СформироватьДокументыВводаОстатковДенежныеСредства("Безналичные");
	СформироватьДокументыВводаОстатковДенежныеСредства("ВКассахККМ");
	СформироватьДокументыВводаОстатковДенежныеСредства("Наличные");
	СформироватьДокументыВводаОстатковДенежныеСредства("УПодотчетныхЛиц");
	СформироватьДокументыВводаОстатковДенежныеСредстваКВыплате();
	
	// 2.2 Расчеты
	СформироватьДокументыВводаОстатковРасчеты("РасчетыСКлиентами");
	СформироватьДокументыВводаОстатковРасчеты("РасчетыСПоставщиками");
	СформироватьДокументыВводаОстатковРасчеты("РасчетыМеждуОрганизациями");

	СформироватьДокументыВводаОстатковРасчетыПоЭквайрингу();
	
	СформироватьДокументыВводаОстатковРасчетыПоКредитамИДепозитам();

	// 2.3 Товары
	// Таблицы остатков на складах используется для разных товаров (и собственных, и комиссионных)
	ПолучитьТаблицыОстатковНаСкладах();

	СформироватьДокументыВводаОстатковТоварыСобственные();
	СформироватьДокументыВводаОстатковТоварыКомиссионные();
	СформироватьДокументыВводаОстатковВозвратнаяТара();
	СформироватьДокументыВводаОстатковТоварыВЯчейках();
	СформироватьДокументыВводаОстатковТМЦВЭксплуатации();

	
	// 2.4 Заказы
	СформироватьДокументыВводаОстатковЗаказыКлиентов();
	СформироватьДокументыВводаОстатковЗаказыПоставщикам();
	СформироватьДокументыВводаОстатковЗаказыВнутренние("ЗаказыНаВнутреннееПотребление", "ЗаказНаВнутреннееПотребление");
	СформироватьДокументыВводаОстатковЗаказыВнутренние("ЗаказыНаПеремещение", "ЗаказНаПеремещение");
	СформироватьДокументыВводаОстатковЗаказыВнутренние("ЗаказыНаСборку", "ЗаказНаСборку");
	СформироватьДокументыВводаОстатковЗаявкиНаВозврат();
	
	// 2.5 Подарочные сертификаты
	СформироватьДокументыВводаОстатковПодарочныеСертификаты();
	
	// 2.6 Расходы, фин результат, продажи за прошлые периоды
	СформироватьДокументыВводаОстатковПрочиеРасходы();
	СформироватьДокументыВводаОстатковФинансовыйРезультат();
	СформироватьДокументыВводаОстатковПродажи();
	
	// 2.7 Ордерная схема
	ОбработатьОстаткиТоварыКОтгрузке();
	ОбработатьОстаткиТоварыКПоступлению();
	ОбработатьОстаткиТоварыКОтбору();
	
	// 2.8 Товары у партнеров
	ОбработатьОстаткиТоваровУПартнеров();
	
	// 2.9 Бонусные баллы
	СформироватьДокументыВводаОстатковБонусныеБаллы();
	
	// 2.10 Прочие активы и пассивы
	СформироватьДокументыВводаОстатковПрочиеАктивыПассивы();
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСозданияЛокальныхДокументовВводаОстатков

Процедура СформироватьДокументыВводаОстатковИзменениеАссортимента()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.ОбъектПланирования КАК ОбъектПланирования,
	|ТабРег.РольАссортимента КАК РольАссортимента,
	|ТабРег.ВидЦены КАК ВидЦены,
	|ВЫБОР КОГДА ТабРег.РазрешеныЗакупки И ТабРег.РазрешеныПродажи ТОГДА Значение(Перечисление.СтадииАссортимента.РазрешеныЗакупкиИПродажи)
	|	КОГДА ТабРег.РазрешеныЗакупки ТОГДА Значение(Перечисление.СтадииАссортимента.РазрешеныТолькоЗакупки)
	|	КОГДА ТабРег.РазрешеныПродажи ТОГДА Значение(Перечисление.СтадииАссортимента.РазрешеныТолькоПродажи)
	|	ИНАЧЕ Значение(Перечисление.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи)  
	|КОНЕЦ КАК Стадия
	|ИЗ РегистрСведений.Ассортимент.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО ОбъектПланирования, Стадия";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;

	ВыборкаОбъектПланирования = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектПланирования.Следующий() Цикл
		ВыборкаСтадия = ВыборкаОбъектПланирования.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтадия.Следующий() Цикл
			ДокОст = Документы.ИзменениеАссортимента.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаСтадия, Ложь);
			ДокОст.ДатаНачалаДействия = КонецДня(ДатаСверткиИБ);
			ДокОст.Операция = Перечисления.ОперацииИзмененияАссортимента.ИзменениеВАссортименте;

			ВыборкаДетали = ВыборкаСтадия.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				НоваяСтрока = ДокОст.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
				Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
					//Запишем документ ввода остатков и создадим новый
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					РеквизитыШапкиДокумента = Новый Структура("Дата, ДатаНачалаДействия, Операция, Стадия, ОбъектПланирования, Ответственный");
					ЗаполнитьЗначенияСвойств(РеквизитыШапкиДокумента, ДокОст);
					
					ДокОст = Документы.ИзменениеАссортимента.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(ДокОст, РеквизитыШапкиДокумента);
					ДокОст.Комментарий = Комментарий_СформированСверткойБазы + " ["+КоличествоСформированныхДокументов+"]";
				КонецЕсли;
			КонецЦикла;
			Если ДокОст.Товары.Количество() > 0 Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВывестиСообщениеСформированыДокументы("ИзменениеАссортимента");

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковКвотыАссортимента()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|ТабРег.ОбъектПланирования КАК ОбъектПланирования,
	|ТабРег.Марка КАК Марка,
	|ТабРег.Квота КАК Квота,
	|ТабРег.ПроцентОтклонения КАК ПроцентОтклонения,
	|&ДатаОст КАК ДатаНачалаДействия
	|ИЗ РегистрСведений.КвотыАссортимента.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО ОбъектПланирования";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаОбъектПланирования = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектПланирования.Следующий() Цикл
		ДокОст = Документы.УстановкаКвотАссортимента.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОбъектПланирования, Ложь);
		ДокОст.ДатаНачалаДействия = ДокОст.Дата;
		ВыборкаДетали = ВыборкаОбъектПланирования.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			НоваяСтрока = ДокОст.ТоварныеКатегории.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
			Если ДокОст.ТоварныеКатегории.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				//Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				
				ДокОст = Документы.УстановкаКвотАссортимента.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОбъектПланирования, Ложь);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.ТоварныеКатегории.Количество() > 0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("УстановкаКвотАссортимента");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЦеныНоменклатуры()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.ВидЦены КАК ВидЦены,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Цена КАК Цена,
	|ТабРег.Упаковка КАК Упаковка
	|ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.Цена <> 0
	|ИТОГИ ПО ВидЦены";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаВидЦены = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидЦены.Следующий() Цикл
		ДокОст = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаВидЦены, Ложь);
		ДокОст.Согласован = Истина;
		ДокОст.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		
		СтрокаВидыЦен = ДокОст.ВидыЦен.Добавить();
		СтрокаВидыЦен.ВидЦены = ВыборкаВидЦены.ВидЦены;
		ВыборкаДетали = ВыборкаВидЦены.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			НоваяСтрока = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
			Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				//Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				
				ДокОст = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаВидЦены, Ложь);
				ДокОст.Согласован = Истина;
				ДокОст.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;

				СтрокаВидыЦен = ДокОст.ВидыЦен.Добавить();
				СтрокаВидыЦен.ВидЦены = ВыборкаВидЦены.ВидЦены;
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.Товары.Количество() > 0 Тогда
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("УстановкаЦенНоменклатуры");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЦеныНоменклатурыПоставщиков()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	ТабРег.Характеристика КАК Характеристика,
	|	ТабРег.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	ТабРег.Партнер КАК Партнер,
	|	ТабРег.Цена КАК Цена,
	|	ТабРег.Упаковка КАК Упаковка
	|ИЗ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО Партнер";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаПартнер = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПартнер.Следующий() Цикл
		ДокОст = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаПартнер, Ложь);
		ВыборкаДетали = ВыборкаПартнер.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			НоваяСтрока = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
			Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				//Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				
				ДокОст = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаПартнер, Ложь);

			КонецЕсли;
		КонецЦикла;
		Если ДокОст.Товары.Количество() > 0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЕсли;
		
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("РегистрацияЦенНоменклатурыПоставщика");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковДенежныеСредства(ВидДС)
	Запрос = Новый Запрос;
	Если ВидДС = "Безналичные" Тогда
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Организация КАК Организация,
		|ТабРег.БанковскийСчет КАК БанковскийСчет,
		|ТабРег.СуммаОстаток КАК Сумма,
		|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
		|ТабРег.СуммаРеглОстаток КАК СуммаРегл,
		|ТабРег.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
		|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах) КАК ТипОперации
		|ИЗ РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.СуммаОстаток > 0 
		|ИТОГИ ПО ТипОперации, Организация";
		ИмяТЧ = "БанковскиеСчета";
		ДопИнформация = НСтр("ru='денежные средства на банковских счетах'");
	ИначеЕсли ВидДС = "ВКассахККМ" Тогда
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Организация КАК Организация,
		|ТабРег.КассаККМ КАК КассаККМ,
		|ТабРег.СуммаОстаток КАК Сумма,
		|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
		|ТабРег.СуммаРеглОстаток КАК СуммаРегл,
		|ТабРег.КассаККМ.ВалютаДенежныхСредств КАК Валюта,
		|ВЫБОР КОГДА ТабРег.СуммаОстаток > 0 Тогда
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке)
		|ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах) КОНЕЦ КАК ТипОперации
		|ИЗ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.СуммаОстаток <> 0
		|ИТОГИ ПО ТипОперации, Организация";
		ИмяТЧ = "КассыККМ";
		ДопИнформация = НСтр("ru='денежные средства в кассах ККМ'");
	ИначеЕсли ВидДС = "Наличные" Тогда
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Организация КАК Организация,
		|ТабРег.Касса КАК Касса,
		|ТабРег.СуммаОстаток КАК Сумма,
		|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
		|ТабРег.СуммаРеглОстаток КАК СуммаРегл,
		|ТабРег.Касса.ВалютаДенежныхСредств КАК Валюта,
		|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВКассах) КАК ТипОперации
		|ИЗ РегистрНакопления.ДенежныеСредстваНаличные.Остатки(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.СуммаОстаток > 0
		|ИТОГИ ПО ТипОперации, Организация";

		ИмяТЧ = "Кассы";
		ДопИнформация = НСтр("ru='денежные средства наличные'");
	ИначеЕсли ВидДС = "УПодотчетныхЛиц" Тогда	
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Организация КАК Организация,
		|ТабРег.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
		|ТабРег.ЦельВыдачи КАК СтатьяДвиженияДенежныхСредств,
		|ТабРег.СуммаОстаток КАК Сумма,
		|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
		|ТабРег.СуммаРеглОстаток КАК СуммаРегл,
		|ТабРег.Валюта КАК Валюта,
		|ВЫБОР КОГДА ТабРег.СуммаОстаток > 0 Тогда
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников)
		|ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств) КОНЕЦ КАК ТипОперации
		|ИЗ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.СуммаОстаток <> 0
		|ИТОГИ ПО ТипОперации, Организация";

		ИмяТЧ = "РасчетыСПодотчетниками";
		ДопИнформация = НСтр("ru='денежные средства у подотчетных лиц'");
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;

	КоличествоСформированныхДокументов = 1;
	ВыборкаТипОперации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипОперации.Следующий() Цикл
		ВыборкаОрганизация = ВыборкаТипОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизация.Следующий() Цикл
			ДокОст = Документы.ВводОстатков.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОрганизация);
			ВыборкаДетали = ВыборкаОрганизация.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				НоваяСтрока = ДокОст[ИмяТЧ].Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
				Если ВыборкаДетали.Сумма < 0 И (ВидДС = "ВКассахККМ" ИЛИ ВидДС = "УПодотчетныхЛиц") Тогда
					НоваяСтрока.Сумма = (-1)*ВыборкаДетали.Сумма;
					НоваяСтрока.СуммаРегл = (-1)*ВыборкаДетали.СуммаРегл;
				КонецЕсли;
				Если НоваяСтрока.СуммаРегл = 0 Тогда
					// Заполнение суммы регл из курсов валют.
					Если ВыборкаДетали.Валюта = ВалютаРегламентированногоУчета Тогда
						НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
					Иначе
						КоэффициентПересчета = КурсыВалют.Получить(ВыборкаДетали.Валюта);
						Если КоэффициентПересчета = Неопределено Тогда
							КоэффициентПересчета = 
								РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
															ВыборкаДетали.Валюта, 
															ВалютаРегламентированногоУчета, ДокОст.Дата);
							КурсыВалют.Вставить(ВыборкаДетали.ВалютаВзаиморасчетов, КоэффициентПересчета); 
						КонецЕсли;
						НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Сумма * КоэффициентПересчета, 2, 1);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЦикла;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ВводОстатков", ДопИнформация);
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковРасчеты(ВидРасчетов)
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Если ВидРасчетов = "РасчетыСКлиентами" Тогда
			Запрос.Текст = "ВЫБРАТЬ 
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказКлиента КАК Заказ,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма
			|ПОМЕСТИТЬ РасчетыСКлиентамиЗадолженность
			|ИЗ РегистрНакопления.РасчетыСКлиентами.Остатки(&ГраницаОст, АналитикаУчетаПоПартнерам.Партнер<>ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) > 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказКлиента,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказКлиента КАК Заказ,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|(-1)*Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма
			|ПОМЕСТИТЬ РасчетыСКлиентамиАвансы
			|ИЗ РегистрНакопления.РасчетыСКлиентами.Остатки(&ГраницаОст, АналитикаУчетаПоПартнерам.Партнер<>ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) < 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказКлиента,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|Свод.АналитикаУчетаПоПартнерам.Организация КАК Организация,
			|Свод.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
			|Свод.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|Свод.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
			|Свод.Заказ КАК ОбъектРасчетов,
			|Свод.Заказ.Номер КАК НомерРасчетногоДокумента,
			|Свод.Заказ.Дата КАК ДатаРасчетногоДокумента,
			|Свод.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|Свод.Сумма КАК Сумма,
			|Свод.ДатаПлатежа КАК ДатаПлатежа,
			|Свод.ТипОперации КАК ТипОперации
			|ИЗ (
			|	ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	ТабРег.Заказ КАК Заказ,
			|	ТабРег.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ТабРег.Сумма КАК Сумма,
			|	ТабРегОбороты.Период КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов) КАК ТипОперации
			|	ИЗ РасчетыСКлиентамиЗадолженность КАК ТабРег
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			| 		РегистрНакопления.РасчетыСКлиентами.Обороты(,&ГраницаОст,День, АналитикаУчетаПоПартнерам.Партнер<>ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРегОбороты
			|	ПО 	ТабРег.АналитикаУчетаПоПартнерам = ТабРегОбороты.АналитикаУчетаПоПартнерам  И
			| 		ТабРег.Заказ = ТабРегОбороты.ЗаказКлиента  И
			| 		ТабРег.ВалютаВзаиморасчетов = ТабРегОбороты.Валюта И
			|		ТабРегОбороты.СуммаРасход > 0
			|ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам,
			|	ТабРег.Заказ,
			|	ТабРег.ВалютаВзаиморасчетов,
			|	ТабРег.Сумма,
			|	null КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов) КАК ТипОперации
			|	ИЗ РасчетыСКлиентамиАвансы КАК ТабРег
			|	) КАК Свод
			|УПОРЯДОЧИТЬ ПО
			|Свод.ТипОперации, 
			|Свод.АналитикаУчетаПоПартнерам, Свод.Заказ, Свод.ДатаПлатежа УБЫВ
			|";
		ИначеЕсли ВидРасчетов = "РасчетыСПоставщиками" Тогда
			Запрос.Текст = "ВЫБРАТЬ 
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказПоставщику КАК Заказ,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|(-1) * Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма
			|ПОМЕСТИТЬ РасчетыСПоставщикамиЗадолженность
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ГраницаОст,АналитикаУчетаПоПартнерам.Партнер<>ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) < 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказПоставщику,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказПоставщику КАК Заказ,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма
			|ПОМЕСТИТЬ РасчетыСПоставщикамиАвансы
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ГраницаОст,АналитикаУчетаПоПартнерам.Партнер<>ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) > 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказПоставщику,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|Свод.АналитикаУчетаПоПартнерам.Организация КАК Организация,
			|Свод.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
			|Свод.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|Свод.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
			|Свод.Заказ КАК ОбъектРасчетов,
			|Свод.Заказ.Номер КАК НомерРасчетногоДокумента,
			|Свод.Заказ.Дата КАК ДатаРасчетногоДокумента,
			|Свод.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|Свод.Сумма КАК Сумма,
			|Свод.ДатаПлатежа КАК ДатаПлатежа,
			|Свод.ТипОперации КАК ТипОперации
			|ИЗ
			|(ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	ТабРег.Заказ КАК Заказ,
			|	ТабРег.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ТабРег.Сумма КАК Сумма,
			|	ТабРегОбороты.Период КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками) КАК ТипОперации
			|	ИЗ РасчетыСПоставщикамиЗадолженность КАК ТабРег
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			| 		РегистрНакопления.РасчетыСПоставщиками.Обороты(,&ГраницаОст,День,АналитикаУчетаПоПартнерам.Партнер<>ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРегОбороты
			|		ПО 	ТабРег.АналитикаУчетаПоПартнерам = ТабРегОбороты.АналитикаУчетаПоПартнерам  И
			| 		ТабРег.Заказ = ТабРегОбороты.ЗаказПоставщику  И
			| 		ТабРег.ВалютаВзаиморасчетов = ТабРегОбороты.Валюта И
			|		ТабРегОбороты.СуммаПриход > 0
			|	ОБЪЕДИНИТЬ ВСЕ
			//АВАНСЫ
			|	ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	ТабРег.Заказ КАК Заказ,
			|	ТабРег.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ТабРег.Сумма КАК Сумма,
			|	null КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам) КАК ТипОперации
			|	ИЗ РасчетыСПоставщикамиАвансы КАК ТабРег
			|) КАК Свод
			|УПОРЯДОЧИТЬ ПО
			|Свод.ТипОперации, 
			|Свод.АналитикаУчетаПоПартнерам.Организация, Свод.АналитикаУчетаПоПартнерам.Партнер, Свод.Заказ, Свод.ДатаПлатежа УБЫВ
			|";
		ИначеЕсли ВидРасчетов = "РасчетыМеждуОрганизациями" Тогда
			Запрос.Текст = "ВЫБРАТЬ 
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказКлиента КАК Заказ,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма
			|ПОМЕСТИТЬ РасчетыСКлиентамиЗадолженность
			|ИЗ РегистрНакопления.РасчетыСКлиентами.Остатки(&ГраницаОст, АналитикаУчетаПоПартнерам.Партнер=ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) > 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказКлиента,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказКлиента КАК Заказ,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|(-1)*Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма
			|ПОМЕСТИТЬ РасчетыСКлиентамиАвансы
			|ИЗ РегистрНакопления.РасчетыСКлиентами.Остатки(&ГраницаОст, АналитикаУчетаПоПартнерам.Партнер=ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) < 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ЗаказКлиента,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|Свод.АналитикаУчетаПоПартнерам.Организация КАК Организация,
			|Свод.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|Свод.АналитикаУчетаПоПартнерам.Контрагент КАК ОрганизацияПолучатель,
			|Свод.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|Свод.Сумма КАК Сумма,
			|Свод.Заказ КАК ОбъектРасчетов,
			|Свод.Заказ.Номер КАК НомерРасчетногоДокумента,
			|Свод.Заказ.Дата КАК ДатаРасчетногоДокумента,
			|Свод.ДатаПлатежа КАК ДатаПлатежа,
			|Свод.ТипОперации КАК ТипОперации
			|ИЗ (
			|	ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	ТабРег.Заказ КАК Заказ,
			|	ТабРег.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ТабРег.Сумма КАК Сумма,
			|	ТабРегОбороты.Период КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям) КАК ТипОперации
			|	ИЗ РасчетыСКлиентамиЗадолженность КАК ТабРег
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрНакопления.РасчетыСКлиентами.Обороты(,&ГраницаОст,День,АналитикаУчетаПоПартнерам.Партнер=ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ТабРегОбороты
			|	ПО 	ТабРег.АналитикаУчетаПоПартнерам = ТабРегОбороты.АналитикаУчетаПоПартнерам  И
			| 		ТабРег.Заказ = ТабРегОбороты.ЗаказКлиента  И
			| 		ТабРег.ВалютаВзаиморасчетов = ТабРегОбороты.Валюта И
			|		ТабРегОбороты.СуммаРасход > 0
			|ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам,
			|	ТабРег.Заказ,
			|	ТабРег.ВалютаВзаиморасчетов,
			|	ТабРег.Сумма,
			|	null КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам)КАК ТипОперации
			|	ИЗ РасчетыСКлиентамиАвансы КАК ТабРег
			|	) КАК Свод
			|УПОРЯДОЧИТЬ ПО
			|Свод.ТипОперации, 
			|Свод.АналитикаУчетаПоПартнерам.Контрагент, Свод.Заказ, Свод.ДатаПлатежа УБЫВ
			|";

		КонецЕсли;
		ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() ТОгда
			Возврат;
		КонецЕсли;
		//Курсы валют на дату свертки
		КурсыВалют = Новый Соответствие;
		КоличествоСформированныхДокументов = 1;
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ТипОперации") Цикл
			ИмяТабличнойЧасти = "РасчетыСПартнерами";
			ИмяГруппировкиПолучатель = "Партнер";
			Если ВидРасчетов = "РасчетыМеждуОрганизациями" Тогда
				ИмяТабличнойЧасти = "РасчетыМеждуОрганизациями";
				ИмяГруппировкиПолучатель = "ОрганизацияПолучатель";
			КонецЕсли;
			
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
				Пока Выборка.СледующийПоЗначениюПоля(ИмяГруппировкиПолучатель) Цикл
					ДокОст = Документы.ВводОстатков.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
					
					Пока Выборка.СледующийПоЗначениюПоля("ОбъектРасчетов") Цикл
						НоваяСтрока = ДокОст[ИмяТабличнойЧасти].Добавить();
							
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						
						//Выборка по дате платежа, Датой платежа устанавливается самая поздняя из платежей
						Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаПлатежа) Тогда
							НоваяСтрока.ДатаПлатежа = Выборка.ДатаПлатежа;
						Иначе
							НоваяСтрока.ДатаПлатежа = ДокОст.Дата;
						КонецЕсли;
						Если Выборка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
							НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
						Иначе
							КоэффициентПересчета = КурсыВалют.Получить(Выборка.ВалютаВзаиморасчетов);
							Если КоэффициентПересчета = Неопределено Тогда
								КоэффициентПересчета = 
									РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
																Выборка.ВалютаВзаиморасчетов, 
																ВалютаРегламентированногоУчета, ДокОст.Дата);
								КурсыВалют.Вставить(Выборка.ВалютаВзаиморасчетов, КоэффициентПересчета); 
							КонецЕсли;
							
							НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Сумма * КоэффициентПересчета, 2, 1);
						КонецЕсли;
						Если Выборка.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
							НоваяСтрока.СуммаУпр = НоваяСтрока.Сумма;
						Иначе
							КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.ВалютаВзаиморасчетов, ВалютаУправленческогоУчета, ДокОст.Дата);
							НоваяСтрока.СуммаУпр = Окр(НоваяСтрока.Сумма * КоэффициентПересчета, 2, 1);
						КонецЕсли;
						Если ДокОст[ИмяТабличнойЧасти].Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
							
							ДокОст = Документы.ВводОстатков.СоздатьДокумент();
							ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
						КонецЕсли;
					КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("ОбъектРасчетов") Цикл
					Если ДокОст[ИмяТабличнойЧасти].Количество() > 0 Тогда
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
						КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					КонецЕсли;
				КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
			КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			ВывестиСообщениеСформированыДокументы("ВводОстатков", Выборка.ТипОперации);
		КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("ТипОперации") Цикл
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковРасчетыПоЭквайрингу()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТабРегРасчеты.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|ТабРегРасчеты.Организация КАК Организация,
	|ТабРегРасчеты.Валюта КАК Валюта,
	|ТабРегРасчеты.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|ТабРегРасчеты.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|ТабРегРасчеты.ДатаПлатежа КАК ДатаПлатежа,
	|ТабРегРасчеты.СуммаОстаток КАК Сумма,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ДенежныеСредстваКПоступлениюОтЭквайера) КАК ТипОперации
	|ИЗ РегистрНакопления.РасчетыПоЭквайрингу.Остатки(&ГраницаОст) КАК ТабРегРасчеты
	|ГДЕ ТабРегРасчеты.СуммаОстаток > 0
	|УПОРЯДОЧИТЬ ПО
	|	ТабРегРасчеты.Организация";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;

	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		ДокОст = Документы.ВводОстатков.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);

		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДокОст.РасчетыПоЭквайрингу.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			//Заполним сумму регл
			Если Выборка.Валюта = ВалютаРегламентированногоУчета Тогда
				НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
			Иначе
				КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.Валюта,
					ВалютаРегламентированногоУчета, ДокОст.Дата);
				НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Сумма * КоэффициентПересчета, 2, 1);
			КонецЕсли;
			//Заполним сумму упр
			Если Выборка.Валюта = ВалютаУправленческогоУчета Тогда
				НоваяСтрока.СуммаУпр = НоваяСтрока.Сумма;
			Иначе
				КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.Валюта,
					ВалютаУправленческогоУчета, ДокОст.Дата);
				НоваяСтрока.СуммаУпр = Окр(НоваяСтрока.Сумма * КоэффициентПересчета, 2, 1);
			КонецЕсли;
			
			Если ДокОст.РасчетыПоЭквайрингу.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				ДокОст = Документы.ВводОстатков.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.РасчетыПоЭквайрингу.Количество()>0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ВводОстатков", Перечисления.ТипыОперацийВводаОстатков.ДенежныеСредстваКПоступлениюОтЭквайера);
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковРасчетыПоКредитамИДепозитам()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|ТабРег.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|ТабРег.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|ТабРег.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|ТабРег.ТипСуммы КАК ТипСуммы,
	|ТабРег.Договор КАК Договор,
	|ТабРег.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) ТОГДА
	|(-1)* ТабРег.СуммаВВалютеОстаток
	|ИНАЧЕ ТабРег.СуммаВВалютеОстаток КОНЕЦ КАК Сумма,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) ТОГДА
	|(-1)* ТабРег.СуммаРеглОстаток
	|ИНАЧЕ ТабРег.СуммаРеглОстаток КОНЕЦ КАК СуммаРегл,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) ТОГДА
	|(-1)* ТабРег.СуммаУпрОстаток
	|ИНАЧЕ ТабРег.СуммаУпрОстаток КОНЕЦ КАК СуммаУпр,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов) КАК ТипОперации
	|ИЗ РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов.Остатки(&ГраницаОст) КАК ТабРег
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		ДокОст = Документы.ВводОстатков.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);

		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДокОст.РасчетыПоДоговорамКредитовИДепозитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

			Если ДокОст.РасчетыПоДоговорамКредитовИДепозитов.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				ДокОст = Документы.ВводОстатков.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.РасчетыПоДоговорамКредитовИДепозитов.Количество()>0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ВводОстатков", Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов);

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковТоварыСобственные()
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	//Заполнение ключевых временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "ВЫБРАТЬ 
	|ПартииТоваровОрганизаций.Организация,
	|ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры.Склад КАК Склад,
	|ВЫБОР КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
	|		ИЛИ СчетФактураПолученный.Ссылка = ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка) ТОГДА ЛОЖЬ 
	|		ИНАЧЕ ИСТИНА КОНЕЦ Как ПредъявленСчетФактура,
	|СчетФактураПолученный.Ссылка.Дата КАК ДатаСчетаФактуры,
	|СчетФактураПолученный.Ссылка.Номер КАК НомерСчетаФактуры,
	|СчетФактураПолученный.Ссылка КАК СчетФактура,
	|ПартииТоваровОрганизаций.АналитикаУчетаПартий.Поставщик КАК Партнер,
	|ПартииТоваровОрганизаций.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеНДС,
	|ПартииТоваровОрганизаций.АналитикаУчетаПартий.СтавкаНДС КАК СтавкаНДС,
	|Сумма(ПартииТоваровОрганизаций.СтоимостьОстаток + ЕстьNULL(ПартииРасходов.СтоимостьОстаток, 0)+ ЕстьNULL(ПартииЗатрат.СтоимостьОстаток, 0)) КАК Сумма,
	|Сумма(ПартииТоваровОрганизаций.СтоимостьБезНДСОстаток + ЕстьNULL(ПартииРасходов.СтоимостьБезНДСОстаток, 0)+ ЕстьNULL(ПартииЗатрат.СтоимостьБезНДСОстаток, 0))  КАК СуммаБезНДС,
	|Сумма(ПартииТоваровОрганизаций.СтоимостьОстаток + ЕстьNULL(ПартииРасходов.СтоимостьОстаток, 0) + ЕстьNULL(ПартииЗатрат.СтоимостьОстаток, 0)) -
	|Сумма(ПартииТоваровОрганизаций.СтоимостьБезНДСОстаток + ЕстьNULL(ПартииРасходов.СтоимостьБезНДСОстаток, 0) + ЕстьNULL(ПартииЗатрат.СтоимостьБезНДСОстаток, 0)) КАК СуммаНДС,
	|Сумма(ПартииТоваровОрганизаций.НДСРеглОстаток + ЕстьNULL(ПартииРасходов.НДСРеглОстаток, 0)+ ЕстьNULL(ПартииЗатрат.НДСРеглОстаток, 0)) КАК НДСРегл,
	|Сумма(ПартииТоваровОрганизаций.СтоимостьРеглОстаток + ЕстьNULL(ПартииРасходов.СтоимостьРеглОстаток, 0)+ ЕстьNULL(ПартииЗатрат.СтоимостьРеглОстаток, 0)) КАК СуммаРегл,
	|Сумма(ПартииТоваровОрганизаций.КоличествоОстаток) КАК Количество
	|
	|ПОМЕСТИТЬ ТаблицаОстатковПоПартиям
	
	|ИЗ РегистрНакопления.ПартииТоваровОрганизаций.Остатки(&ГраницаОст, (ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар))) КАК ПартииТоваровОрганизаций
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ПО СчетФактураПолученный.ДокументОснование = ПартииТоваровОрганизаций.ДокументПоступления
	|		И СчетФактураПолученный.Ссылка.Проведен
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров.Остатки(&ГраницаОст) КАК ПартииРасходов
	|ПО ПартииРасходов.Организация = ПартииТоваровОрганизаций.Организация И
	|		ПартииРасходов.АналитикаУчетаНоменклатуры = ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры И
	|		ПартииРасходов.ВидЗапасов = ПартииТоваровОрганизаций.ВидЗапасов  И
	|		ПартииРАсходов.ДокументПоступления = ПартииТоваровОрганизаций.ДокументПоступления
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииЗатратНаВыпуск.Остатки(&ГраницаОст) КАК ПартииЗатрат
	|ПО ПартииЗатрат.Организация = ПартииТоваровОрганизаций.Организация И
	|		ПартииЗатрат.АналитикаУчетаПродукции = ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры И
	|		ПартииЗатрат.ДокументПоступления = ПартииТоваровОрганизаций.ДокументПоступления
	|	СГРУППИРОВАТЬ ПО ПартииТоваровОрганизаций.Организация, ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры, СчетФактураПолученный.Ссылка, ПартииТоваровОрганизаций.АналитикаУчетаПартий.НалогообложениеНДС, ПартииТоваровОрганизаций.АналитикаУчетаПартий.СтавкаНДС, ПартииТоваровОрганизаций.АналитикаУчетаПартий.Поставщик
	|;
	|////////////////////////
	|ВЫБРАТЬ
	|ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ТабРег.АналитикаУчетаНоменклатуры.Склад КАК Склад,
	|ТабРег.Организация КАК Организация,
	|ТабРег.ВидЗапасов.НалогообложениеНДС КАК НалогообложениеНДС,
	|ТабРег.НомерГТД КАК НомерГТД,
	|Сумма(ТабРег.КоличествоОстаток) КАК Количество,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьОстаток, 0) + ЕстьNULL(ТабРегСебестоимость.ДопРасходыОстаток, 0)) КАК Сумма,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьБезНДСОстаток, 0) + ЕстьNULL(ТабРегСебестоимость.ДопРасходыБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьРеглОстаток, 0)) КАК СуммаРегл,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.КоличествоОстаток, 0)) КАК Сумма_Количество,
	|Сумма(ЕстьNULL(ПринятаяТара.КоличествоОстаток, 0)) КАК КоличествоТара
	|
	|ПОМЕСТИТЬ ТаблицаОстатковТовары
	|
	|ИЗ РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст,  
	|								(ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар))
	|												) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)) КАК ТабРегСебестоимость
	|ПО 
	|	ТабРег.Организация = ТабРегСебестоимость.Организация  И
	|	ТабРег.ВидЗапасов = ТабРегСебестоимость.ВидЗапасов  И
	|	ТабРег.АналитикаУчетаНоменклатуры = ТабРегСебестоимость.АналитикаУчетаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПринятаяВозвратнаяТара.Остатки(&ГраницаОст) КАК ПринятаяТара
	|	ПО ПринятаяТара.Номенклатура = ТабРег.АналитикаУчетаНоменклатуры.Номенклатура 
	|	И ПринятаяТара.Характеристика = ТабРег.АналитикаУчетаНоменклатуры.Характеристика
	|ГДЕ ТабРег.КоличествоОстаток > 0 И ЕстьNULL(ПринятаяТара.КоличествоОстаток, 0) = 0
	|	СГРУППИРОВАТЬ ПО ТабРег.Организация, ТабРег.АналитикаУчетаНоменклатуры, ТабРег.ВидЗапасов.НалогообложениеНДС, ТабРег.НомерГТД
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Склад КАК Склад,
	|ТабРег.Организация КАК Организация,
	|ТабРег.НомерГТД КАК НомерГТД,
	|Сумма(ТабРег.Количество) КАК Количество,
	|Сумма(ТабРег.Сумма) КАК Сумма,
	|Сумма(ТабРег.СуммаБезНДС) КАК СуммаБезНДС,
	|Сумма(ТабРег.СуммаРегл) КАК СуммаРегл,
	|Сумма(ТабРег.Сумма_Количество) КАК Сумма_Количество,
	|Сумма(ТабРег.КоличествоТара) КАК КоличествоТара
	|
	|ПОМЕСТИТЬ ТаблицаОстатковТоварыСвод
	|
	|ИЗ ТаблицаОстатковТовары КАК ТабРег 
	|СГРУППИРОВАТЬ ПО 
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Склад,
	|	ТабРег.Организация,
	|	ТабРег.НомерГТД
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Запрос.Выполнить();
	//1. Остатки в разрезе счетов-фактур - на основе регистра партий
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Запрос.Текст = "ВЫБРАТЬ
	|ТаблицаОстатковПоПартиям.Организация КАК Организация,
	|ТаблицаОстатковПоПартиям.Склад КАК Склад,
	|ТаблицаОстатковПоПартиям.Партнер КАК Партнер,
	|ТаблицаОстатковПоПартиям.Номенклатура КАК Номенклатура,
	|ТаблицаОстатковПоПартиям.Характеристика КАК Характеристика,
	|ТаблицаОстатковПоПартиям.НалогообложениеНДС КАК НалогообложениеНДС,
	|ТаблицаОстатковТоварыСвод.НомерГТД КАК НомерГТД,
	|ТаблицаОстатковПоПартиям.СтавкаНДС КАК СтавкаНДС,
	|ТаблицаОстатковПоПартиям.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|ТаблицаОстатковПоПартиям.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|ТаблицаОстатковПоПартиям.СчетФактура КАК СчетФактура,
	|ТаблицаОстатковПоПартиям.Количество КАК Количество,
	|ЕстьNULL(ТаблицаОстатковТоварыСвод.Количество,0) КАК КоличествоМаксимум,
	|ТаблицаОстатковПоПартиям.Сумма КАК Сумма,
	|ТаблицаОстатковПоПартиям.СуммаБезНДС КАК СуммаБезНДС,
	|ТаблицаОстатковПоПартиям.СуммаНДС КАК СуммаНДС,
	|ТаблицаОстатковПоПартиям.НДСРегл КАК НДСРегл,
	|ТаблицаОстатковПоПартиям.СуммаРегл КАК СуммаРегл
	|ПОМЕСТИТЬ ТоварыЕстьСчетФактура
	|ИЗ ТаблицаОстатковПоПартиям
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковТоварыСвод
	|ПО ТаблицаОстатковТоварыСвод.Организация = ТаблицаОстатковПоПартиям.Организация
	|	И  ТаблицаОстатковТоварыСвод.Склад = ТаблицаОстатковПоПартиям.Склад
	|	И  ТаблицаОстатковТоварыСвод.Номенклатура = ТаблицаОстатковПоПартиям.Номенклатура
	|	И  ТаблицаОстатковТоварыСвод.Характеристика = ТаблицаОстатковПоПартиям.Характеристика
	|ГДЕ ТаблицаОстатковПоПартиям.ПредъявленСчетФактура И ТаблицаОстатковПоПартиям.Количество > 0 
	|	И ЕстьNULL(ТаблицаОстатковТоварыСвод.Количество,0) > 0
	|;
	|ВЫБРАТЬ
	|ТаблицаТовары.Организация КАК Организация,
	|ТаблицаТовары.Склад КАК Склад,
	|ТаблицаТовары.Партнер КАК Партнер,
	|ТаблицаТовары.Номенклатура КАК Номенклатура,
	|ТаблицаТовары.Характеристика КАК Характеристика,
	|ТаблицаТовары.НалогообложениеНДС КАК НалогообложениеНДС,
	|ТаблицаТовары.НомерГТД КАК НомерГТД,
	|ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|ТаблицаТовары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|ТаблицаТовары.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|ТаблицаТовары.СчетФактура КАК СчетФактура,
	|ТаблицаТовары.Количество КАК Количество,
	|ТаблицаТовары.КоличествоМаксимум КАК КоличествоМаксимум,
	|ТаблицаТовары.Сумма КАК Сумма,
	|ТаблицаТовары.СуммаБезНДС КАК СуммаБезНДС,
	|ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|ТаблицаТовары.НДСРегл КАК НДСРегл,
	|ТаблицаТовары.СуммаРегл КАК СуммаРегл,
	|ТаблицаТовары.Склад.ИспользоватьСкладскиеПомещения КАК ИспользоватьСкладскиеПомещения,
	|ИСТИНА КАК ПредъявленСчетФактура,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров) КАК ТипОперации
	|ИЗ ТоварыЕстьСчетФактура КАК ТаблицаТовары
	|УПОРЯДОЧИТЬ ПО 
	|	ТаблицаТовары.Организация,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Партнер,
	|	ТаблицаТовары.НалогообложениеНДС,
	|	ТаблицаТовары.СчетФактура";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	ОбработатьРезультатЗапросаСобственныеТовары(Выборка, КоличествоСформированныхДокументов, Истина);
	
	//2. Корректировка документов ввода остатков - если количество, которое получилось по партиям, больше чем остаток по ТоварамОрганизаций
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОстатковСвод.Организация КАК Организация,
	|	ТаблицаОстатковСвод.Склад КАК Склад,
	|	ТаблицаОстатковСвод.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковСвод.Характеристика КАК Характеристика,
	|	ТаблицаОстатковСвод.НомерГТД КАК НомерГТД,
	|	Сумма(ТаблицаОстатковСвод.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыПеребор
	|ИЗ
	|(ВЫБРАТЬ
	|	ТоварыЕстьСчетФактура.Организация КАК Организация,
	|	ТоварыЕстьСчетФактура.Склад КАК Склад,
	|	ТоварыЕстьСчетФактура.Номенклатура КАК Номенклатура,
	|	ТоварыЕстьСчетФактура.Характеристика КАК Характеристика,
	|	ТоварыЕстьСчетФактура.НомерГТД КАК НомерГТД,
	|	ВЫБОР КОГДА ТоварыЕстьСчетФактура.Количество < ТоварыЕстьСчетФактура.КоличествоМаксимум ТОГДА
	|		(-1) * ТоварыЕстьСчетФактура.Количество
	|	ИНАЧЕ (-1) * ТоварыЕстьСчетФактура.КоличествоМаксимум
	|	КОНЕЦ КАК Количество
	|	ИЗ ТоварыЕстьСчетФактура
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	ТаблицаОстатковТоварыСвод.Организация КАК Организация,
	|	ТаблицаОстатковТоварыСвод.Склад КАК Склад,
	|	ТаблицаОстатковТоварыСвод.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковТоварыСвод.Характеристика КАК Характеристика,
	|	ТаблицаОстатковТоварыСвод.НомерГТД КАК НомерГТД,
	|	ТаблицаОстатковТоварыСвод.Количество КАК Количество
	|	ИЗ ТаблицаОстатковТоварыСвод) КАК ТаблицаОстатковСвод
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатковСвод.Организация,
	|	ТаблицаОстатковСвод.Склад,
	|	ТаблицаОстатковСвод.Номенклатура,
	|	ТаблицаОстатковСвод.Характеристика,
	|	ТаблицаОстатковСвод.НомерГТД
	|ИМЕЮЩИЕ Сумма(ТаблицаОстатковСвод.Количество) < 0
	|;
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА СФПолуч.Ссылка ЕСТЬ NULL ТОГДА NULL
	|	ИНАЧЕ СФПолуч.Ссылка.ДатаСоставления 
	|	КОНЕЦ 					КАК ДатаСФ,
	|	ДокОст.Ссылка.Помещение КАК Помещение,
	|	ТоварыПеребор.Склад.ИспользоватьСкладскиеПомещения КАК ИспользоватьСкладскиеПомещения,
	|	ДокОст.Ссылка КАК Ссылка,
	|	ДокОст.НомерСтроки КАК НомерСтроки,
	|	ДокОст.Количество КАК КоличествоПоСтроке,
	|	ТоварыПеребор.Организация,
	|	ТоварыПеребор.Склад,
	|	ТоварыПеребор.Номенклатура КАК Номенклатура,
	|	ТоварыПеребор.Характеристика КАК Характеристика,
	|	ТоварыПеребор.НомерГТД КАК НомерГТД,
	|	(-1) * ТоварыПеребор.Количество КАК Количество
	|ИЗ ТоварыПеребор
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатков.Товары КАК ДокОст
	|	ПО ДокОст.Ссылка.Дата = &ДатаОст И Ссылка.Организация = ТоварыПеребор.Организация
	|	И ДокОст.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров)
	|	И ДокОст.Ссылка.Склад = ТоварыПеребор.Склад 
	|	И ДокОст.Номенклатура = ТоварыПеребор.Номенклатура И ДокОст.Характеристика = ТоварыПеребор.Характеристика
	|	И ДокОст.НомерГТД = ТоварыПеребор.НомерГТД
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СФПолуч
	|	ПО ДокОст.Ссылка = СФПолуч.ДокументОснование
	|ГДЕ НЕ (ДокОст.Ссылка ЕСТЬ NULL)
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыПеребор.Организация,
	|	ТоварыПеребор.Склад,
	|	ТоварыПеребор.Номенклатура,
	|	ТоварыПеребор.Характеристика,
	|	ТоварыПеребор.НомерГТД,
	|	ДокОст.Ссылка.Помещение, 
	|	ВЫБОР КОГДА СФПолуч.Ссылка ЕСТЬ NULL ТОГДА NULL
	|	ИНАЧЕ СФПолуч.Ссылка.ДатаСоставления 
	|	КОНЕЦ,
	|	ДокОст.Ссылка";

	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	МассивДокументовУдалитьСтроки = Новый Массив();
	ОбновленаТаблицаСерий = Ложь;
	ОбновленаТаблицаПомещений = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("НомерГТД") Цикл
							КоличествоУбрать = Выборка.Количество;
							Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
								КоличествоПоПомещению = 0;
								Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
									ДокОст = Выборка.Ссылка.ПолучитьОбъект();
									КоличествоПоДокументуСтало = 0;
									Пока Выборка.Следующий() Цикл
										СтрокаДокумента = ДокОст.Товары[Выборка.НомерСтроки - 1];
										Если Выборка.КоличествоПоСтроке > КоличествоУбрать Тогда
											УбратьПоСтроке = КоличествоУбрать;
											СтрокаДокумента.Количество = СтрокаДокумента.Количество - КоличествоУбрать;
											КоэффициентПересчета = СтрокаДокумента.Количество / Выборка.КоличествоПоСтроке;
											СтрокаДокумента.Сумма = ОКР(КоэффициентПересчета * СтрокаДокумента.Сумма,2);
											СтрокаДокумента.СуммаБезНДС = ОКР(КоэффициентПересчета * СтрокаДокумента.СуммаБезНДС,2);
											СтрокаДокумента.СуммаНДС = ОКР(КоэффициентПересчета * СтрокаДокумента.СуммаНДС,2);
											СтрокаДокумента.СуммаСНДС = ОКР(КоэффициентПересчета * СтрокаДокумента.СуммаСНДС,2);
											СтрокаДокумента.СуммаРегл = ОКР(КоэффициентПересчета * СтрокаДокумента.СуммаРегл,2);
											СтрокаДокумента.НДСРегл = ОКР(КоэффициентПересчета * СтрокаДокумента.НДСРегл,2);
											СтрокаДокумента.Цена = ОКР(КоэффициентПересчета * СтрокаДокумента.Цена,2);
										Иначе
											УбратьПоСтроке = Выборка.КоличествоПоСтроке;
											СтрокаДокумента.Количество = 0;
											Если МассивДокументовУдалитьСтроки.Найти(Выборка.Ссылка) = Неопределено Тогда
												МассивДокументовУдалитьСтроки.Добавить(Выборка.Ссылка);
											КонецЕсли;
										КонецЕсли;
										СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
										КоличествоУбрать = КоличествоУбрать - УбратьПоСтроке;
										КоличествоПоДокументуСтало = КоличествоПоДокументуСтало + СтрокаДокумента.Количество;
										КоличествоПоПомещению = КоличествоПоПомещению + УбратьПоСтроке;
										Если КоличествоУбрать = 0 Тогда
											Прервать;
										КонецЕсли;
									КонецЦикла;
									//Возможно, необходимо скорректировать ТЧ Серии
									Если ДокОст.Серии.Количество() > 0 Тогда
										СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
										ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
										СтрокиСерий = ДокОст.Серии.НайтиСтроки(СтруктураПоиска);
										КоличествоПоСериям = 0;
										Для Каждого СтрокаСерии ИЗ СтрокиСерий Цикл
											КоличествоПоСериям = КоличествоПоСериям + СтрокаСерии.Количество;
										КонецЦикла;
										Если КоличествоПоСериям > КоличествоПоДокументуСтало Тогда
											КоличествоУбратьПоСериям = КоличествоПоСериям - КоличествоПоДокументуСтало;
											Для Каждого СтрокаСерии ИЗ СтрокиСерий Цикл
												УбратьПоСтроке = Мин(КоличествоУбратьПоСериям, СтрокаСерии.Количество);
												СтрокаСерии.Количество = СтрокаСерии.Количество - УбратьПоСтроке;
												КоличествоУбратьПоСериям = КоличествоУбратьПоСериям - УбратьПоСтроке;
												Если СтрокаСерии.Количество = 0 
													И МассивДокументовУдалитьСтроки.Найти(Выборка.Ссылка) = Неопределено Тогда
													МассивДокументовУдалитьСтроки.Добавить(Выборка.Ссылка);
												КонецЕсли;
												//Восстановим удаленное количество в остатках по сериям
												СтрокаОстаткиПоСериям = ТаблицаОстаткиНаСкладахПоСериям.Добавить();
												ЗаполнитьЗначенияСвойств(СтрокаОстаткиПоСериям, Выборка);
												СтрокаОстаткиПоСериям.Количество = УбратьПоСтроке;
												СтрокаОстаткиПоСериям.Серия = СтрокаСерии.Серия;
												ОбновленаТаблицаСерий = Истина;
												Если КоличествоУбратьПоСериям = 0 Тогда
													Прервать;
												КонецЕсли;
											КонецЦикла;
										КонецЕсли;
									КонецЕсли;
									ДокОст.Записать(РежимЗаписиДокумента.Запись);
								Конеццикла; //Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
								Если Выборка.ИспользоватьСкладскиеПомещения И ЗначениеЗаполнено(Выборка.Помещение) Тогда
									//Восстановим удаленное количество в остатках по помещениям
									СтрокаОстаткиПоПомещениям = ТаблицаОстаткиНаСкладахПоПомещениям.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаОстаткиПоПомещениям, Выборка);
									СтрокаОстаткиПоПомещениям.Количество = КоличествоПоПомещению;
									ОбновленаТаблицаПомещений = Истина;
								КонецЕсли;
							Конеццикла; //Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
						КонецЦикла;//Пока Выборка.СледующийПоЗначениюПоля("НомерГТД") Цикл
					КонецЦикла;//Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
				КонецЦикла;//Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
	Если ОбновленаТаблицаПомещений Тогда
		ТаблицаОстаткиНаСкладахПоПомещениям.Свернуть("Склад, Помещение, Номенклатура, Характеристика","Количество");
	КонецЕсли;
	Если ОбновленаТаблицаСерий Тогда
		ТаблицаОстаткиНаСкладахПоСериям.Свернуть("Склад, Помещение, Номенклатура, Характеристика, Серия","Количество");
	КонецЕсли;
	Для Каждого ЭлементМассива ИЗ МассивДокументовУдалитьСтроки Цикл
		ДокОст = ЭлементМассива.ПолучитьОбъект();
		НомерСтроки = ДокОст.Товары.Количество()-1;
		Пока НомерСтроки >=0 Цикл
			Если ДокОст.Товары[НомерСтроки].Количество = 0 Тогда
				ДокОст.Товары.Удалить(НомерСтроки);
			КонецЕсли;
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		НомерСтроки = ДокОст.Серии.Количество()-1;
		Пока НомерСтроки >=0 Цикл
			Если ДокОст.Серии[НомерСтроки].Количество = 0 Тогда
				ДокОст.Серии.Удалить(НомерСтроки);
			КонецЕсли;
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		Если ДокОст.Товары.Количество() = 0 Тогда
			ДокОст.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	//3. Остатки без указания счетов-фактур - на основе регистра ТоварыОрганизаций
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОстатковСвод.Организация КАК Организация,
	|	ТаблицаОстатковСвод.Склад КАК Склад,
	|	ТаблицаОстатковСвод.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковСвод.Характеристика КАК Характеристика,
	|	ТаблицаОстатковСвод.НомерГТД КАК НомерГТД,
	|	Сумма(ТаблицаОстатковСвод.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыБезСчетаФактуры
	|ИЗ
	|(ВЫБРАТЬ
	|	ТоварыЕстьСчетФактура.Организация КАК Организация,
	|	ТоварыЕстьСчетФактура.Склад КАК Склад,
	|	ТоварыЕстьСчетФактура.Номенклатура КАК Номенклатура,
	|	ТоварыЕстьСчетФактура.Характеристика КАК Характеристика,
	|	ТоварыЕстьСчетФактура.НомерГТД КАК НомерГТД,
	|	ВЫБОР КОГДА ТоварыЕстьСчетФактура.Количество < ТоварыЕстьСчетФактура.КоличествоМаксимум ТОГДА
	|		(-1) * ТоварыЕстьСчетФактура.Количество
	|	ИНАЧЕ (-1) * ТоварыЕстьСчетФактура.КоличествоМаксимум
	|	КОНЕЦ КАК Количество
	|	ИЗ ТоварыЕстьСчетФактура
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	ТаблицаОстатковТоварыСвод.Организация КАК Организация,
	|	ТаблицаОстатковТоварыСвод.Склад КАК Склад,
	|	ТаблицаОстатковТоварыСвод.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковТоварыСвод.Характеристика КАК Характеристика,
	|	ТаблицаОстатковТоварыСвод.НомерГТД КАК НомерГТД,
	|	ТаблицаОстатковТоварыСвод.Количество КАК Количество
	|	ИЗ ТаблицаОстатковТоварыСвод) КАК ТаблицаОстатковСвод
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатковСвод.Организация,
	|	ТаблицаОстатковСвод.Склад,
	|	ТаблицаОстатковСвод.Номенклатура,
	|	ТаблицаОстатковСвод.Характеристика,
	|	ТаблицаОстатковСвод.НомерГТД
	|ИМЕЮЩИЕ Сумма(ТаблицаОстатковСвод.Количество) > 0
	|;
	|ВЫБРАТЬ
	|	Организация, 
	|	Склад, 
	|	Номенклатура, 
	|	Характеристика,
	|	МАКСИМУМ(НалогообложениеНДС) КАК НалогообложениеНДС,
	|	МАКСИМУМ(Партнер) КАК Партнер,
	|	МАКСИМУМ(СтавкаНДС) КАК СтавкаНДС,
	|	Сумма(Сумма) КАК Сумма,
	|	Сумма(СуммаБезНДС) КАК СуммаБезНДС,
	|	Сумма(СуммаНДС) КАК СуммаНДС,
	|	Сумма(НДСРегл) КАК НДСРегл,
	|	Сумма(СуммаРегл) КАК СуммаРегл,
	|	Сумма(Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаОстатковПоПартиямСвернутая
	|ИЗ ТаблицаОстатковПоПартиям
	|ГДЕ ПредъявленСчетФактура = ЛОЖЬ И
	|	(Организация, Склад, Номенклатура, Характеристика) В (ВЫБРАТЬ Организация, Склад, Номенклатура, Характеристика ИЗ ТоварыБезСчетаФактуры)
	|СГРУППИРОВАТЬ ПО Организация, Склад, Номенклатура, Характеристика
	|;
	|ВЫБРАТЬ
	|ТоварыБезСчетаФактуры.Организация КАК Организация,
	|ТоварыБезСчетаФактуры.Склад КАК Склад,
	|ТаблицаОстатковПоПартиямСвернутая.Партнер КАК Партнер,
	
	|ТоварыБезСчетаФактуры.Номенклатура КАК Номенклатура,
	|ТоварыБезСчетаФактуры.Характеристика КАК Характеристика,
	|ТоварыБезСчетаФактуры.НомерГТД КАК НомерГТД,
	|ВЫБОР КОГДА 
	|		ТаблицаОстатковТовары.НалогообложениеНДС is null ТОГДА
	|		ТаблицаОстатковПоПартиямСвернутая.НалогообложениеНДС ИНАЧЕ ТаблицаОстатковТовары.НалогообложениеНДС
	|	КОНЕЦ	КАК НалогообложениеНДС,
	|ТаблицаОстатковПоПартиямСвернутая.СтавкаНДС КАК СтавкаНДС,
	|ТоварыБезСчетаФактуры.Склад.ИспользоватьСкладскиеПомещения КАК ИспользоватьСкладскиеПомещения,
	
	|ЛОЖЬ КАК ПредъявленСчетФактура,
	|null КАК СчетФактура,
	|ТоварыБезСчетаФактуры.Количество КАК Количество,
	|ТаблицаОстатковТоварыСвод.Сумма КАК Себестоимость_Стоимость,
	|ТаблицаОстатковТоварыСвод.СуммаБезНДС КАК Себестоимость_СтоимостьБезНДС,
	|ТаблицаОстатковТоварыСвод.СуммаРегл КАК Себестоимость_СтоимостьРегл,
	|ТаблицаОстатковТоварыСвод.Сумма_Количество КАК Себестоимость_Количество,
	
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.Сумма,0) КАК Сумма,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.СуммаБезНДС,0) КАК СуммаБезНДС,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.СуммаНДС,0) КАК СуммаНДС,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.НДСРегл,0) КАК НДСРегл,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.СуммаРегл,0) КАК СуммаРегл,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.Количество,0) КАК Партии_Количество,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров) КАК ТипОперации

	|ИЗ ТоварыБезСчетаФактуры
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковТоварыСвод
	|ПО ТаблицаОстатковТоварыСвод.Организация = ТоварыБезСчетаФактуры.Организация
	|	И  ТаблицаОстатковТоварыСвод.Склад = ТоварыБезСчетаФактуры.Склад
	|	И  ТаблицаОстатковТоварыСвод.Номенклатура = ТоварыБезСчетаФактуры.Номенклатура
	|	И  ТаблицаОстатковТоварыСвод.Характеристика = ТоварыБезСчетаФактуры.Характеристика
	|	И  ТаблицаОстатковТоварыСвод.НомерГТД = ТоварыБезСчетаФактуры.НомерГТД
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковТовары
	|ПО ТаблицаОстатковТовары.Организация = ТоварыБезСчетаФактуры.Организация
	|	И  ТаблицаОстатковТовары.Склад = ТоварыБезСчетаФактуры.Склад
	|	И  ТаблицаОстатковТовары.Номенклатура = ТоварыБезСчетаФактуры.Номенклатура
	|	И  ТаблицаОстатковТовары.Характеристика = ТоварыБезСчетаФактуры.Характеристика
	|	И  ТаблицаОстатковТовары.НомерГТД = ТоварыБезСчетаФактуры.НомерГТД
	|	И  ТаблицаОстатковТовары.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковПоПартиямСвернутая
	|ПО ТоварыБезСчетаФактуры.Организация = ТаблицаОстатковПоПартиямСвернутая.Организация
	|	И  ТоварыБезСчетаФактуры.Склад = ТаблицаОстатковПоПартиямСвернутая.Склад
	|	И  ТоварыБезСчетаФактуры.Номенклатура = ТаблицаОстатковПоПартиямСвернутая.Номенклатура
	|	И  ТоварыБезСчетаФактуры.Характеристика = ТаблицаОстатковПоПартиямСвернутая.Характеристика
	|УПОРЯДОЧИТЬ ПО 
	|	ТоварыБезСчетаФактуры.Организация,
	|	ТоварыБезСчетаФактуры.Склад,
	|	ТаблицаОстатковПоПартиямСвернутая.Партнер,
	|	ВЫБОР КОГДА 
	|		ТаблицаОстатковТовары.НалогообложениеНДС Is null ТОГДА
	|		ТаблицаОстатковПоПартиямСвернутая.НалогообложениеНДС ИНАЧЕ ТаблицаОстатковТовары.НалогообложениеНДС
	|	КОНЕЦ
	|	";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Выборка = Запрос.Выполнить().Выбрать();
	ОбработатьРезультатЗапросаСобственныеТовары(Выборка, КоличествоСформированныхДокументов, Ложь);

	ВывестиСообщениеСформированыДокументы("ВводОстатков", Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковТоварыКомиссионные()
	//1. Товары принятые на комиссию
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ТабРег.АналитикаУчетаНоменклатуры.Склад КАК Склад,
	|ТабРег.Организация КАК Организация,
	|ТабРег.НомерГТД КАК НомерГТД,
	|ТабРег.ВидЗапасов.Контрагент.Партнер КАК Партнер,
	|ТабРег.ВидЗапасов.Контрагент КАК Контрагент,
	|ТабРег.ВидЗапасов.ВладелецТовара КАК Комитент,
	|ТабРег.ВидЗапасов.Соглашение КАК СоглашениеСКомитентом,
	|ТабРег.ВидЗапасов.Валюта КАК Валюта,
	|ТабРег.ВидЗапасов.Договор КАК Договор,
	|ТабРег.ВидЗапасов.НалогообложениеНДС КАК НалогообложениеНДС,
	|ТабРег.АналитикаУчетаНоменклатуры.Склад.ИспользоватьСкладскиеПомещения КАК ИспользоватьСкладскиеПомещения,
	|Сумма(ТабРег.КоличествоОстаток) КАК Количество,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьОстаток, 0)) КАК Сумма,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьОстаток, 0) - ЕстьNULL(ТабСтоимость.СтоимостьБезНДСОстаток, 0)) КАК СуммаНДС,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьРеглОстаток, 0)) КАК СуммаРегл,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию) КАК ТипОперации
	
	|ИЗ РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст, 
	|								ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, 
	|								РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию) ) КАК ТабСтоимость
	|ПО  ТабРег.АналитикаУчетаНоменклатуры = ТабСтоимость.АналитикаУчетаНоменклатуры
	|	И ТабРег.Организация = ТабСтоимость.Организация
	|	И ТабРег.ВидЗапасов = ТабСтоимость.ВидЗапасов
	|СГРУППИРОВАТЬ ПО
	|ТабРег.АналитикаУчетаНоменклатуры,
	|ТабРег.Организация ,
	|ТабРег.НомерГТД ,
	|ТабРег.ВидЗапасов.Контрагент.Партнер ,
	|ТабРег.ВидЗапасов.Контрагент ,
	|ТабРег.ВидЗапасов.ВладелецТовара ,
	|ТабРег.ВидЗапасов.Соглашение ,
	|ТабРег.ВидЗапасов.Валюта ,
	|ТабРег.ВидЗапасов.Договор ,
	|ТабРег.ВидЗапасов.НалогообложениеНДС
	|ИМЕЮЩИЕ Сумма(ТабРег.КоличествоОстаток) > 0 
	|УПОРЯДОЧИТЬ ПО Организация, Склад, Партнер, Комитент, НалогообложениеНДС";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Комитент") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
						ДокОст = Документы.ВводОстатков.СоздатьДокумент();
						ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
						Если НЕ ЗначениеЗаполнено(ДокОст.Партнер) Тогда
							ДокОст.Партнер = Выборка.Комитент;
							ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер, ДокОст.Контрагент);
						КонецЕсли;
						ДокОст.ЦенаВключаетНДС = Истина;
						СоответствиеДокументовПоПомещениям = Новый Соответствие();
						Пока Выборка.Следующий() Цикл
							ВыбранныеВариантыПомещений = Новый Массив;

							//Определим помещение
							Если Выборка.ИспользоватьСкладскиеПомещения Тогда
								ПодобратьПодходящиеПомещения(Выборка, ВыбранныеВариантыПомещений, Выборка.Количество);
							КонецЕсли; //Если Выборка.ИспользоватьСкладскиеПомещения Тогда
							
							Если НЕ Выборка.ИспользоватьСкладскиеПомещения ИЛИ ВыбранныеВариантыПомещений.Количество() = 0 Тогда
								ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ДокОст.Склад, ДокОст.Помещение, ДокОст.Дата, Истина);

								Если ИспользоватьАдресноеХранение И НЕ ЗначениеЗаполнено(ДокОст.ЗонаПриемки) Тогда
									ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(ДокОст.Склад, ДокОст.Помещение);
								КонецЕсли;

								НоваяСтрока = ДокОст.Товары.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
								Если НоваяСтрока.СуммаНДС > 0 Тогда
									НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
									Если НоваяСтрока.НДСРегл = 0 И НоваяСтрока.Сумма <> 0 И НоваяСтрока.СуммаРегл <> 0 Тогда
										НоваяСтрока.НДСРегл = Окр(НоваяСтрока.Сумма*НоваяСтрока.СуммаНДС / НоваяСтрока.СуммаРегл,2);
									КонецЕсли;
								Иначе
										НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
								КонецЕсли;
							Иначе
								КоличествоРаспределить = Выборка.Количество;
								Цена = Выборка.Сумма / Выборка.Количество;
								ЦенаРегл = Выборка.СуммаРегл / Выборка.Количество;
								Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
									ТекПомещение = СтрокаПомещение.Помещение;
									НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
									
									НоваяСтрока = ДокОст.Товары.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									Если НоваяСтрока.СуммаНДС > 0 Тогда
										НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
										Если НоваяСтрока.НДСРегл = 0 И НоваяСтрока.Сумма <> 0 И НоваяСтрока.СуммаРегл <> 0 Тогда
											НоваяСтрока.НДСРегл = Окр(НоваяСтрока.Сумма*НоваяСтрока.СуммаНДС / НоваяСтрока.СуммаРегл,2);
										КонецЕсли;
									Иначе
										НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
									КонецЕсли;

									//Пересчитаем суммы и количества в соответствии с остатком по помещению
									КоличествоПоПомещению = Мин(КоличествоРаспределить, СтрокаПомещение.Количество);
									СтрокаПомещение.Количество = СтрокаПомещение.Количество - КоличествоПоПомещению;
									КоэффициентПересчета = 1;
									Если КоличествоПоПомещению <> НоваяСтрока.Количество Тогда
										КоэффициентПересчета = КоличествоПоПомещению / Выборка.Количество;
										НоваяСтрока.Количество = КоличествоПоПомещению;
									КонецЕсли;
									//Заполним связанные данные
									ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
									НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * Цена,2);
									НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаНДС * КоэффициентПересчета,2);
									НоваяСтрока.НДСРегл = Окр(НоваяСтрока.НДСРегл * КоэффициентПересчета,2);
									НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Количество * ЦенаРегл,2);
									КоличествоРаспределить = КоличествоРаспределить - НоваяСтрока.Количество;
									Если КоличествоРаспределить <=0 Тогда
										Прервать;
									КонецЕсли;
								КонецЦикла; //Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
								Если КоличествоРаспределить > 0 Тогда
									//не все распределилось по помещениям
									//Возможно, это товары к поступлению по ордерной схеме
									//Попытка определить помещение
									//Если не нашлось - будет пустое помещение
									ТекПомещение = ПроверитьПоступлениеПоОрдеру(Выборка, КоличествоРаспределить);
									НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
									НоваяСтрока = ДокОст.Товары.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									НоваяСтрока.Количество = КоличествоРаспределить;
									ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
									НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * Цена,2);
									НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Количество * ЦенаРегл,2);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;  //Пока Выборка.Следующий() Цикл
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
						СоответствиеДокументовПоПомещениям.Вставить(ДокОст.Помещение, ДокОст.Ссылка);
						Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
							ДокОст = ЭлементСоответствия.Значение.ПолучитьОбъект();
							Если ДокОст.Товары.Количество()=0 Тогда
								ДокОст.Удалить();
								Продолжить;
							КонецЕсли;

							Если НЕ ЗначениеЗаполнено(ДокОст.ТипОперации) Тогда
								ДокОст.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию;
							КонецЕсли;
							ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ДокОст.Склад, ДокОст.Помещение, ДокОст.Дата, Истина);
							Если ИспользоватьАдресноеХранение И НЕ ЗначениеЗаполнено(ДокОст.ЗонаПриемки) Тогда
								ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(ДокОст.Склад, ДокОст.Помещение);
							КонецЕсли;

							//Заполним серии для тех строк, где это необходимо
							ЗаполнитьСерииТоваров(ДокОст);
							//Заполним назначения товаров если это необходимо
							ЗаполнитьНазначенияТоваров(ДокОст);
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
						КонецЦикла;  //Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
					КонецЦикла; //Налогообложение НДС
				КонецЦикла;   //Пока Выборка.СледующийПоЗначениюПоля("Комитент") Цикл
			КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
											Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию);
	КонецЕсли;

	//2. Товары переданные на комиссию
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТабРег.Соглашение КАК Соглашение,
	|	ТабРег.Организация КАК Организация,
	|	ТабРег.НомерГТД КАК НомерГТД,
	|	СУММА(ТабРег.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ ТабОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(&ГраницаОст, ) КАК ТабРег
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	ТабРег.Соглашение,
	|	ТабРег.Организация,
	|	ТабРег.НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ТабРег.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТабРег.АналитикаУчетаНоменклатуры.Склад КАК Справочник.Партнеры), ТабРег.Соглашение.Партнер) КАК Партнер,
	|	ТабРег.Соглашение КАК СоглашениеСКомиссионером,
	|	ТабРег.Организация КАК Организация,
	|	ТабРег.НомерГТД КАК НомерГТД,
	|	ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СУММА(ТабРег.Количество) КАК Количество,
	|	СУММА(ЕСТЬNULL(ТабРегСебестоимость.СтоимостьОстаток, 0) + ЕСТЬNULL(ТабРегСебестоимость.ДопРасходыОстаток, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ТабРегСебестоимость.СтоимостьБезНДСОстаток, 0) + ЕСТЬNULL(ТабРегСебестоимость.ДопРасходыБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(ТабРегСебестоимость.СтоимостьОстаток, 0) + ЕСТЬNULL(ТабРегСебестоимость.ДопРасходыОстаток, 0) - (ЕСТЬNULL(ТабРегСебестоимость.СтоимостьБезНДСОстаток, 0) - ЕСТЬNULL(ТабРегСебестоимость.ДопРасходыБезНДСОстаток, 0))) КАК СуммаНДС,
	|	СУММА(ЕСТЬNULL(ТабРегСебестоимость.СтоимостьРеглОстаток, 0)) КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ТабРегСебестоимость.КоличествоОстаток, 0)) > 0
	|			ТОГДА СУММА(ЕСТЬNULL(ТабРегСебестоимость.СтоимостьОстаток, 0)) / СУММА(ТабРегСебестоимость.КоличествоОстаток)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	СУММА(ЕСТЬNULL(ТабРегПартии.КоличествоОстаток, 0)) КАК КоличествоПартии,
	|	СУММА(ЕСТЬNULL(ТабРегПартии.СтоимостьОстаток, 0)) КАК СуммаПартии,
	|	СУММА(ЕСТЬNULL(ТабРегПартии.СтоимостьБезНДСОстаток, 0)) КАК СуммаБезНДСПартии,
	|	СУММА(ЕСТЬNULL(ТабРегПартии.СтоимостьОстаток, 0) - ЕСТЬNULL(ТабРегПартии.СтоимостьБезНДСОстаток, 0)) КАК НДСПартии,
	|	СУММА(ЕСТЬNULL(ТабРегПартии.СтоимостьРеглОстаток, 0)) КАК СуммаРеглПартии,
	|	СУММА(ЕСТЬNULL(ТабРегПартии.НДСРеглОстаток, 0)) КАК НДСРеглПартии,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию) КАК ТипОперации
	|ИЗ
	|	ТабОстатки КАК ТабРег
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)) КАК ТабРегСебестоимость
	|		ПО ТабРег.Организация = ТабРегСебестоимость.Организация
	|			И ТабРег.АналитикаУчетаНоменклатуры = ТабРегСебестоимость.АналитикаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданныеНаКомиссию.Остатки(&ГраницаОст, ) КАК ТабРегПартии
	|		ПО ТабРег.Организация = ТабРегПартии.Организация
	|			И ТабРег.АналитикаУчетаНоменклатуры = ТабРегПартии.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ТабРег.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	ТабРег.Соглашение,
	|	ТабРег.Организация,
	|	ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС,
	|	ТабРег.НомерГТД,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТабРег.АналитикаУчетаНоменклатуры.Склад КАК Справочник.Партнеры), ТабРег.Соглашение.Партнер),
	|	ТабРег.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТабРег.АналитикаУчетаНоменклатуры.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабРег.Организация,
	|	Партнер,
	|	ТабРег.Соглашение,
	|	ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС";

	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("СоглашениеСКомиссионером") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
					ДокОст = Документы.ВводОстатков.СоздатьДокумент();
					ДокОст.ЦенаВключаетНДС = Истина;
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
					ДокОст.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер);
					Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
						ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
					КонецЕсли;
					
					Пока Выборка.Следующий() Цикл

						НоваяСтрока = ДокОст.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						Если НоваяСтрока.Сумма = 0 И Выборка.КоличествоПартии > 0 И Выборка.СуммаПартии Тогда
							//Заполним по данным из регистра партий
							НоваяСтрока.Цена  = Окр(Выборка.СуммаПартии / Выборка.КоличествоПартии, 2);
							КоэффициентПересчета = НоваяСтрока.Количество / Выборка.КоличествоПартии;
							НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.СуммаПартии, 2);
							НоваяСтрока.СуммаБезНДС = Окр(КоэффициентПересчета * Выборка.СуммаБезНДСПартии, 2);
							НоваяСтрока.НДСРегл = Окр(КоэффициентПересчета * Выборка.НДСРеглПартии, 2);
							НоваяСтрока.СуммаНДС = Окр(КоэффициентПересчета * Выборка.НДСПартии, 2);
							НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.СуммаРеглПартии, 2);

						КонецЕсли;
						
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
						Если НоваяСтрока.СуммаНДС > 0 Тогда
							НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
							Если НоваяСтрока.НДСРегл = 0 И НоваяСтрока.Сумма <> 0 И НоваяСтрока.СуммаРегл <> 0 Тогда
								НоваяСтрока.НДСРегл = Окр(НоваяСтрока.Сумма*НоваяСтрока.СуммаНДС / НоваяСтрока.СуммаРегл,2);
							КонецЕсли;
						КонецЕсли;
						
						Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
							
							ДокОст = Документы.ВводОстатков.СоздатьДокумент();
							ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
							ДокОст.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер);
							ДокОст.ЦенаВключаетНДС = Истина;
						КонецЕсли;
					КонецЦикла; //Пока Выборка.Следующий() Цикл
					Если ДокОст.Товары.Количество() > 0 Тогда
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
						КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					КонецЕсли;
				КонецЦикла;   //Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
			КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("СоглашениеСКомиссионером") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
	КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
											Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковВозвратнаяТара()
	//1. Переданная возвратная тара
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Партнер КАК Партнер,
	|ТабРег.ВидЗапасов КАК ВидЗапасов,
	|ТабРег.КоличествоОстаток КАК Количество,
	|ТабРег.СуммаОстаток КАК Сумма,
	|ТабРег.ВидЗапасов.Организация КАК Организация,
	|ТабРег.НомерГТД КАК НомерГТД,
	|ТабРег.ПредусмотренЗалог КАК ПредусмотренЗалогЗаТару,
	|ВЫБОР КОГДА ТабРег.КоличествоОстаток > 0 ТОГДА
	|ТабРег.СуммаОстаток /  ТабРег.КоличествоОстаток 
	|ИНАЧЕ 0 КОНЕЦ КАК Цена,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам) КАК ТипОперации
	|ИЗ РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.КоличествоОстаток > 0
	|УПОРЯДОЧИТЬ ПО Организация, Партнер";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
			ДокОст = Документы.ВводОстатков.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);

			Пока Выборка.Следующий() Цикл

				НоваяСтрока = ДокОст.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;

				Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					
					ДокОст = Документы.ВводОстатков.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
				КонецЕсли;
			КонецЦикла; //Пока Выборка.Следующий() Цикл
			Если ДокОст.Товары.Количество() > 0 Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
											Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам);
	КонецЕсли;
	
	//2. Принятая возвратная тара
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРегТовары.Организация КАК Организация,
	|ТабРег.Партнер КАК Партнер,
	|ТабРегТовары.АналитикаУчетаНоменклатуры.Склад КАК Склад,
	|ЕстьNULL(ТабРегТовары.АналитикаУчетаНоменклатуры.Склад.ИспользоватьСкладскиеПомещения, Ложь) КАК ИспользоватьСкладскиеПомещения,
	
	|ТабРегТовары.НомерГТД КАК НомерГТД,
	|ТабРегТовары.ВидЗапасов КАК ВидЗапасов,
	|ТабРег.КоличествоОстаток КАК Количество,
	|ТабРег.СуммаОстаток КАК Сумма,
	|ТабРег.ПредусмотренЗалог КАК ПредусмотренЗалогЗаТару,
	|ВЫБОР КОГДА ТабРег.КоличествоОстаток > 0 ТОГДА
	|ТабРег.СуммаОстаток / ТабРег.КоличествоОстаток
	|ИНАЧЕ 0 КОНЕЦ КАК Цена,
	|ЕстьNULL(ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС, ТабРегТовары.ВидЗапасов.НалогообложениеНДС) КАК НалогообложениеНДС,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков) КАК ТипОперации
	|ИЗ РегистрНакопления.ПринятаяВозвратнаяТара.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст) КАК ТабРегТовары
	|	ПО ТабРег.Номенклатура = ТабРегТовары.АналитикаУчетаНоменклатуры.Номенклатура И
	|		ТабРег.Характеристика = ТабРегТовары.АналитикаУчетаНоменклатуры.Характеристика

	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровОрганизаций.Остатки(&ГраницаОст) КАК ТабРегПартии
	|	ПО ТабРегТовары.АналитикаУчетаНоменклатуры = ТабРегПартии.АналитикаУчетаНоменклатуры И
	|		ТабРегТовары.Организация = ТабРегПартии.Организация И 
	|		ТабРегТовары.ВидЗапасов = ТабРегПартии.ВидЗапасов
	|ГДЕ ТабРег.КоличествоОстаток > 0
	|УПОРЯДОЧИТЬ ПО Организация, Партнер, НалогообложениеНДС, Склад";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
					ДокОст = Документы.ВводОстатков.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
					ДокОст.Валюта = ВалютаРегламентированногоУчета;
					СоответствиеДокументовПоПомещениям = Новый Соответствие();

					Пока Выборка.Следующий() Цикл
						ВыбранныеВариантыПомещений = Новый Массив;

						//Определим помещение
						Если Выборка.ИспользоватьСкладскиеПомещения Тогда
							ПодобратьПодходящиеПомещения(Выборка, ВыбранныеВариантыПомещений, Выборка.Количество);
						КонецЕсли; //Если Выборка.ИспользоватьСкладскиеПомещения Тогда
						Если НЕ Выборка.ИспользоватьСкладскиеПомещения ИЛИ ВыбранныеВариантыПомещений.Количество() = 0 Тогда
							НоваяСтрока = ДокОст.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						
							НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;

							НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма;
							НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
						Иначе
							КоличествоРаспределить = Выборка.Количество;
							Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
								ТекПомещение = СтрокаПомещение.Помещение;
								НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
								
								НоваяСтрока = ДокОст.Товары.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								//Пересчитаем суммы и количества в соответствии с остатком по помещению
								КоличествоПоПомещению = Мин(КоличествоРаспределить, СтрокаПомещение.Количество);
								СтрокаПомещение.Количество = СтрокаПомещение.Количество - КоличествоПоПомещению;
								Если КоличествоПоПомещению <> НоваяСтрока.Количество Тогда
									КоэффициентПересчета = КоличествоПоПомещению / Выборка.Количество;
									НоваяСтрока.Количество = КоличествоПоПомещению;
									НоваяСтрока.Сумма = Окр(Выборка.Сумма * КоэффициентПересчета, 2);
								КонецЕсли;
								//Заполним связанные данные
								НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
								НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма;
								НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;

								КоличествоРаспределить = КоличествоРаспределить - НоваяСтрока.Количество;
								Если КоличествоРаспределить <=0 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла; //Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
							Если КоличествоРаспределить > 0 Тогда
								ТекПомещение = ПроверитьПоступлениеПоОрдеру(Выборка, КоличествоРаспределить);
								НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
								
								НоваяСтрока = ДокОст.Товары.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								//Пересчитаем суммы и количества в соответствии с остатком по помещению
								КоличествоПоПомещению = КоличествоРаспределить;
								СтрокаПомещение.Количество = СтрокаПомещение.Количество - КоличествоПоПомещению;
								Если КоличествоПоПомещению <> НоваяСтрока.Количество Тогда
									КоэффициентПересчета = КоличествоПоПомещению / Выборка.Количество;
									НоваяСтрока.Количество = КоличествоПоПомещению;
									НоваяСтрока.Сумма = Окр(Выборка.Сумма * КоэффициентПересчета, 2);
								КонецЕсли;
								//Заполним связанные данные
								НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
								НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма;
								НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла; //Пока Выборка.Следующий() Цикл
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					СоответствиеДокументовПоПомещениям.Вставить(ДокОст.Помещение, ДокОст.Ссылка);
					Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
						ДокОст = ЭлементСоответствия.Значение.ПолучитьОбъект();
						Если ДокОст.Товары.Количество()=0 Тогда
							ДокОст.Удалить();
							Продолжить;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ДокОст.ТипОперации) Тогда
							ДокОст.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков;
						КонецЕсли;
						ДокОст.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер);
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КонецЦикла;  //Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
				КонецЦикла; //Склад
			КонецЦикла; //Налогообложение
		КонецЦикла;  //Партнер
	КонецЦикла; //Организация
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
									Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковТоварыВЯчейках()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Серия КАК Серия,
	|	Склад КАК Склад,
	|	Помещение КАК Помещение,
	|	Сумма(ВНаличииОстаток) КАК Количество
	|ПОМЕСТИТЬ ТаблицаНаСкладе
	|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ГраницаОст,)
	|ГДЕ ВНаличииОстаток>0
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Склад,
	|	Помещение
	|;
	|ВЫБРАТЬ 
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.Характеристика КАК Характеристика,
	|	ТабРег.Упаковка КАК Упаковка,
	|	ТабРег.Ячейка КАК Ячейка,
	|	ТабРег.Серия КАК Серия,
	|	ТабРег.Ячейка.Владелец КАК Склад,
	|	ТабРег.Ячейка.Помещение КАК Помещение,
	|	Сумма(ТабРег.ВНаличииОстаток) КАК Количество,
	|	Сумма(ЕстьNULL(ТаблицаНаСкладе.Количество, 0)) КАК Остаток,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) КАК Статус,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Размещение) КАК ВидОперации
	|ИЗ РегистрНакопления.ТоварыВЯчейках.Остатки(&ГраницаОст, ) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНаСкладе
	|ПО ТабРег.Номенклатура = ТаблицаНаСкладе.Номенклатура
	|	И ТабРег.Характеристика = ТаблицаНаСкладе.Характеристика
	|	И ТабРег.Ячейка.Владелец = ТаблицаНаСкладе.Склад
	|	И ТабРег.Серия = ТаблицаНаСкладе.Серия
	|	И ТабРег.Ячейка.Помещение = ТаблицаНаСкладе.Помещение
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Упаковка,
	|	ТабРег.Ячейка,
	|	ТабРег.Серия,
	|	ТабРег.Ячейка.Владелец,
	|	ТабРег.Ячейка.Помещение
	|ИМЕЮЩИЕ Сумма(ТабРег.ВНаличииОстаток) > 0 И Сумма(ЕстьNULL(ТаблицаНаСкладе.Количество, 0)) > 0
	|УПОРЯДОЧИТЬ ПО Склад, Помещение, Номенклатура, Характеристика, Серия";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	
	КоличествоСформированныхДокументов = 1;
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
			ДокОст = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Ложь);
			ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(Выборка.Склад, Выборка.Помещение);
			Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
						КоличествоОстаток = Выборка.Остаток;
						Пока Выборка.Следующий() Цикл
							Если КоличествоОстаток = 0 Тогда
								Прервать;
							КонецЕсли;
							НоваяСтрока = ДокОст.ТоварыРазмещение.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							НоваяСтрока.Количество = Мин(Выборка.Количество, КоличествоОстаток);
							НоваяСтрока.КоличествоРазмещено = НоваяСтрока.Количество;
							НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
							НоваяСтрока.КоличествоУпаковокРазмещено = НоваяСтрока.Количество;
							КоличествоОстаток = КоличествоОстаток - НоваяСтрока.Количество; 
						КонецЦикла;  // Ячейка
					КонецЦикла; // Серия
				КонецЦикла; // Характеристика
			КонецЦикла; // Номенклатура
		КонецЦикла;  //Помещение
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокОст, Документы.ОтборРазмещениеТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокОст,ПараметрыУказанияСерий.Размещение);

		ДокОст.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	ВывестиСообщениеСформированыДокументы("ОтборРазмещениеТоваров");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковТМЦВЭксплуатации()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	ТабРег.Организация 		КАК Организация,
	|	ТабРег.Подразделение 	КАК Подразделение,
	|	ТабРег.ФизическоеЛицо 	КАК ФизическоеЛицо,
	|	ТабРег.Номенклатура 	КАК Номенклатура,
	|	ТабРег.Характеристика	КАК Характеристика,
	|	ТабРег.Партия 			КАК ПартияТМЦВЭксплуатации,
	|	ТабРег.Партия.КатегорияЭксплуатации 	КАК КатегорияЭксплуатации,
	|	ТабРег.Партия.Дата 						КАК ДатаПередачиВЭксплуатацию,
	|	ТабРег.Партия.СтатьяРасходов 			КАК СтатьяРасходов,
	|	ТабРег.Партия.АналитикаРасходов 		КАК АналитикаРасходов,
	|	ТабРег.Партия.ИнвентарныйНомер 			КАК ИнвентарныйНомер,
	|	Сумма(ТабРег.КоличествоОборот) КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации) КАК ТипОперации
	|ИЗ РегистрНакопления.ТМЦВЭксплуатации.Обороты(,&ГраницаОст, ) КАК ТабРег
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.ФизическоеЛицо,
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Партия
	|ИМЕЮЩИЕ Сумма(ТабРег.КоличествоОборот) > 0
	|УПОРЯДОЧИТЬ ПО Организация, Подразделение, ФизическоеЛицо, Номенклатура, Характеристика, Партия";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			ДокОст = Документы.ВводОстатков.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Ложь);
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДокОст.ТМЦВЭксплуатации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
									Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковДенежныеСредстваКВыплате()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	ТабРег.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ТабРег.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ВЫРАЗИТЬ(ТабРег.Получатель КАК Справочник.Контрагенты).Партнер КАК Партнер,
	|	ВЫРАЗИТЬ(ТабРег.Получатель КАК Справочник.ФизическиеЛица) КАК ФизЛицо,
	|	ТабРег.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ТабРег.СуммаПриход КАК СуммаПриход,
	|	ТабРег.СуммаРасход КАК СуммаРасход
	|ИЗ РегистрНакопления.ДенежныеСредстваКВыплате.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.СуммаКонечныйОстаток<0
	|ИТОГИ Сумма(ТабРег.СуммаКонечныйОстаток), Сумма(ТабРег.СуммаПриход), Сумма(ТабРег.СуммаРасход)
	|ПО ЗаявкаНаРасходованиеДенежныхСредств";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	ТаблицаДетали = Новый ТаблицаЗначений;
	ТаблицаДетали.Колонки.Добавить("БанковскийСчетКасса");
	ТаблицаДетали.Колонки.Добавить("Партнер");
	ТаблицаДетали.Колонки.Добавить("ФизЛицо");
	ТаблицаДетали.Колонки.Добавить("СуммаКонечныйОстаток");
	
	ВыборкаЗаявкаНаРасход = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявкаНаРасход.Следующий() Цикл
		Если ВыборкаЗаявкаНаРасход.СуммаПриход = 0 Тогда
			//По заявке еще не было выполнения. Оставляем исходную заявку, помечаем ее комментарием
			ДокОст = ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьОбъект();
			ДокОст.Комментарий = СокрЛП(ДокОст.Комментарий)+ "#" + Комментарий_НеУдалятьПриСверткеБазы;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			Продолжить;
		КонецЕсли;
		//По заявке уже было выполнение. Создаем новую заявку на остаток суммы: копируем существующую и корректируем
		ДокОст = ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств.Скопировать();
		ТекстКомментария = Комментарий_СформированСверткойБазы + " [" + НСтр("ru='Остатки по документу' %Документ%")+"]";
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%Документ%", 
										ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств);
		ДокОст.Комментарий = ТекстКомментария;
		ДокОст.Дата = КонецДня(ДатаСверткиИБ);
		Если ДокОст.РаспределениеПоСчетам.Количество() > 1
			Или (ДокОст.РасшифровкаПлатежа.Количество() + ДокОст.ЛицевыеСчетаСотрудников.Количество()) > 1 Тогда
			ВыборкаДетали = ВыборкаЗаявкаНаРасход.Выбрать();
			ТаблицаДетали.Очистить();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТаб = ТаблицаДетали.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаДетали);
			КонецЦикла;
		КонецЕсли;
		
		// Корректировка ТЧ Распределение по счетам
		Если ДокОст.РаспределениеПоСчетам.Количество() = 1 Тогда
			ДокОст.РаспределениеПоСчетам[0].Сумма = ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток;
		Иначе
			ТаблицаРаспределениеПоСчетам = ТаблицаДетали.Скопировать();
			ТаблицаРаспределениеПоСчетам.Свернуть("БанковскийСчетКасса", "СуммаКонечныйОстаток");
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаТЧ Из ДокОст.РаспределениеПоСчетам Цикл
				СтруктураПоиска = Новый Структура("БанковскийСчетКасса", СтрокаТЧ.БанковскийСчетКасса);
				МассивСтрокДетали = ТаблицаРаспределениеПоСчетам.НайтиСтроки(СтруктураПоиска);
				Если  МассивСтрокДетали.Количество() = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				ИначеЕсли МассивСтрокДетали[0].СуммаКонечныйОстаток = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если СтрокаТЧ.Сумма > МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток;
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				ИначеЕсли СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				Иначе
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = МассивСтрокДетали[0].СуммаКонечныйОстаток - СтрокаТЧ.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Для Ном = 0 ПО МассивУдаляемыхСтрок.Количество()-1 Цикл
			ДокОст.РаспределениеПоСчетам.Удалить(МассивУдаляемыхСтрок[Ном]);
		КонецЦикла;
		// Корректировка ТЧ Расшифровка платежа и Лицевые счета сотрудников
		ТаблицаДетали.Свернуть("Партнер, ФизЛицо", "СуммаКонечныйОстаток");
		МассивУдаляемыхСтрок = Новый Массив;
		Если ДокОст.ЛицевыеСчетаСотрудников.Количество() = 1 И ТаблицаДетали.Количество() = 1 Тогда
			ДокОст.ЛицевыеСчетаСотрудников[0].Сумма = ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток;
		Иначе
			Для Каждого СтрокаТЧ Из ДокОст.ЛицевыеСчетаСотрудников Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ФизическоеЛицо) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПоиска = Новый Структура("ФизЛицо", СтрокаТЧ.ФизическоеЛицо);
				МассивСтрокДетали = ТаблицаДетали.НайтиСтроки(СтруктураПоиска);
				Если  МассивСтрокДетали.Количество() = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если МассивСтрокДетали[0].СуммаКонечныйОстаток = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если СтрокаТЧ.Сумма > МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток;
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				ИначеЕсли СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				Иначе
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = МассивСтрокДетали[0].СуммаКонечныйОстаток - СтрокаТЧ.Сумма;
				КонецЕсли;
			КонецЦикла;
			Для Ном = 0 ПО МассивУдаляемыхСтрок.Количество()-1 Цикл
				ДокОст.ЛицевыеСчетаСотрудников.Удалить(МассивУдаляемыхСтрок[Ном]);
			КонецЦикла;
		КонецЕсли;
		
		МассивУдаляемыхСтрок = Новый Массив;

		Если ДокОст.РасшифровкаПлатежа.Количество() = 1 И ТаблицаДетали.Количество() = 1 Тогда
			//Строка только одна - просто меняем сумму
			//Сумму взаиморасчетов меняем пропорционально измерению суммы
			ДокОст.РасшифровкаПлатежа[0].СуммаВзаиморасчетов = Окр(ДокОст.РасшифровкаПлатежа[0].СуммаВзаиморасчетов * ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток / ДокОст.РасшифровкаПлатежа[0].Сумма, 2);
			ДокОст.РасшифровкаПлатежа[0].Сумма = ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток;
		Иначе
			//Меняем табличную часть в соответствии с остатками
			
			Для Каждого СтрокаТЧ Из ДокОст.РасшифровкаПлатежа Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Партнер) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПоиска = Новый Структура("Партнер", СтрокаТЧ.Партнер);
				МассивСтрокДетали = ТаблицаДетали.НайтиСтроки(СтруктураПоиска);
				Если  МассивСтрокДетали.Количество() = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если МассивСтрокДетали[0].СуммаКонечныйОстаток = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если СтрокаТЧ.Сумма > МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					УменьшитьСуммуВзаиморасчетов = Окр(СтрокаТЧ.СуммаВзаиморасчетов * МассивСтрокДетали[0].СуммаКонечныйОстаток / СтрокаТЧ.Сумма, 2);
					СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов - УменьшитьСуммуВзаиморасчетов;
					СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток;

					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				ИначеЕсли СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				Иначе
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = МассивСтрокДетали[0].СуммаКонечныйОстаток - СтрокаТЧ.Сумма;
				КонецЕсли;
			КонецЦикла;
			Для Ном = 0 ПО МассивУдаляемыхСтрок.Количество()-1 Цикл
				ДокОст.РасшифровкаПлатежа.Удалить(МассивУдаляемыхСтрок[Ном]);
			КонецЦикла;
		КонецЕсли; //Если ДокОст.РасшифровкаПлатежа.Количество() = 1 И ТаблицаДетали.Количество() = 1 Тогда
		ДокОст.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ЗаявкаНаРасходованиеДенежныхСредств");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЗаказыВнутренние(ИмяРегистра, ИмяЗаказа)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег."+ИмяЗаказа+" КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Серия КАК Серия,
	|ТабРег.ЗаказаноКонечныйОстаток КАК КОформлениюКонечныйОстаток,
	|ТабРег.ЗаказаноРасход КАК ЗаказаноРасход
	|ИЗ РегистрНакопления."+ИмяРегистра+".ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноКонечныйОстаток > 0
	|ИТОГИ Максимум(ТабРег.ЗаказаноКонечныйОстаток), Максимум(ТабРег.ЗаказаноРасход), 
	|	Максимум(Серия), Максимум(Номенклатура), Максимум(Характеристика)
	|ПО Заказ";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	
	МассивРегистров = ПолучитьМассивРегистровНакопленияДокумента(ИмяЗаказа);
	
	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.ЗаказаноРасход = 0 Тогда
			//Заказ не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо изменить заказ в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);

		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия");
			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток Тогда
					//Строку менять не требуется
				Иначе
					//Разделим строку на две, исполненную часть пометим как отмененную
					//Новая строка - копия старой строки
					НоваяСтрокаТЧ = ДокОст.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.КодСтроки = 0;
					НоваяСтрокаТЧ.Отменено = Истина;

					СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Количество / НоваяСтрокаТЧ.Количество;
					
					НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.Количество - СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковок;

				КонецЕсли;
			Иначе
				//Остатка по этой строке нет - отменим строку
				СтрокаТЧ.Отменено = Истина;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		ПровестиИлиЗаписатьЗаказ(ДокОст);
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы(ИмяЗаказа,,Истина);
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЗаказыКлиентов()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ЗаказКлиента КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Склад КАК Склад,
	|ТабРег.Серия КАК Серия,
	|ТабРег.ЗаказаноКонечныйОстаток КАК ЗаказаноКонечныйОстаток,
	|ТабРег.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|ТабРег.ЗаказаноРасход КАК ЗаказаноРасход
	|ИЗ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ (ТабРег.ЗаказаноКонечныйОстаток>0 ИЛИ ТабРег.ЗаказаноРасход>0) 
	|	И ТабРег.ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
	|ИТОГИ Максимум(ТабРег.ЗаказаноКонечныйОстаток), Максимум(ТабРег.СуммаКонечныйОстаток), Максимум(ТабРег.ЗаказаноРасход), 
	|	Максимум(Серия), Максимум(Номенклатура), Максимум(Характеристика)
	|ПО Заказ";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	//Определим причину отмены заказов
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию("#Свертка базы");
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗаказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = "#Свертка базы";
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	МассивРегистров = ПолучитьМассивРегистровНакопленияДокумента("ЗаказКлиента");

	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		//Заказ в целом выполнился - пропускаем
		Если ВыборкаЗаказ.ЗаказаноКонечныйОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗаказ.ЗаказаноРасход = 0 Тогда
			//По заказу есть остатки, он не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо сформировать остатки в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);
		
		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = СтрокаТЧ.Количество Тогда
					//Строку менять не требуется
				ИначеЕсли ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = 0 Тогда
					//Строка выполнена полностью. Ее надо отменить
					СтрокаТЧ.Отменено = Истина;
					СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Иначе
					//Разделим строку на две, исполненную часть пометим как отмененную
					//Новая строка - копия старой строки
					НоваяСтрокаТЧ = ДокОст.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.КодСтроки = 0;
					НоваяСтрокаТЧ.КлючСвязи = 0;
					НоваяСтрокаТЧ.Отменено = Истина;
					НоваяСтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;

					КоличествоСтарое = СтрокаТЧ.Количество;
					СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
					КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
					СтрокаТЧ.Сумма = ВыборкаСтрокаЗаказа.СуммаКонечныйОстаток;
					//Пересчитаем другие суммы по количеству
					СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок * КоэффициентПересчета;
					СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
					//Если есть скидки, перезаполним
					Если СтрокаТЧ.СуммаРучнойСкидки > 0 ИЛИ СтрокаТЧ.СуммаАвтоматическойСкидки > 0 Тогда
						СтрокаТЧ.СуммаРучнойСкидки = Окр(СтрокаТЧ.СуммаРучнойСкидки * КоэффициентПересчета,2);
						СтрокаТЧ.СуммаАвтоматическойСкидки = Окр(СтрокаТЧ.СуммаАвтоматическойСкидки * КоэффициентПересчета,2);
						СтрокиСкидки = ДокОст.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
						Для Каждого СтрокаСкидки ИЗ СтрокиСкидки Цикл
							СтрокаСкидки.Сумма = Окр(СтрокаСкидки.Сумма * КоэффициентПересчета,2);
						КонецЦикла;
					КонецЕсли;
					
					//Скорректируем данные новой строки ТЧ
					НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.Количество - СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Сумма - СтрокаТЧ.Сумма;
					НоваяСтрокаТЧ.СуммаНДС = НоваяСтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДС;
					НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковок;
					НоваяСтрокаТЧ.СуммаСНДС = НоваяСтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаСНДС;
					НоваяСтрокаТЧ.СуммаРучнойСкидки = НоваяСтрокаТЧ.СуммаРучнойСкидки - СтрокаТЧ.СуммаРучнойСкидки;
					НоваяСтрокаТЧ.СуммаАвтоматическойСкидки = НоваяСтрокаТЧ.СуммаАвтоматическойСкидки - СтрокаТЧ.СуммаАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				//Остатка по этой строке нет - отменим строку
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		//Изменение этапов оплаты
		Если ДокОст.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			Если ДокОст.ЭтапыГрафикаОплаты.Количество()=1 Тогда
				ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ВыборкаЗаказ.СуммаКонечныйОстаток;
			Иначе
				//убираем лишние суммы пропорционально с каждой строки
				Коэффициент = ВыборкаЗаказ.СуммаКонечныйОстаток / ДокОст.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
				ЗаказСумма = ВыборкаЗаказ.СуммаКонечныйОстаток;
				Для каждого СтрокаТЧ Из ДокОст.ЭтапыГрафикаОплаты Цикл
					Если ЗаказСумма = 0 Тогда
						Прервать;
					КонецЕсли;
					СтрокаТЧ.СуммаПлатежа = Окр(СтрокаТЧ.СуммаПлатежа * Коэффициент, 2);
					ЗаказСумма = ЗаказСумма - СтрокаТЧ.СуммаПлатежа;
				КонецЦикла;
				Если ЗаказСумма <> 0 Тогда
					ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа + ЗаказСумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПровестиИлиЗаписатьЗаказ(ДокОст);
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ЗаказКлиента",,Истина);

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЗаказыПоставщикам()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ЗаказПоставщику КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.Склад КАК Склад,
	|ТабРег.ЗаказаноКонечныйОстаток КАК ЗаказаноКонечныйОстаток,
	|ТабРег.ЗаказаноРасход КАК ЗаказаноРасход
	|ИЗ РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноКонечныйОстаток>0 ИЛИ ТабРег.ЗаказаноРасход > 0
	|ИТОГИ Сумма(ТабРег.ЗаказаноКонечныйОстаток), Сумма(ТабРег.ЗаказаноРасход)
	|ПО Заказ";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовПоставщикам.НайтиПоНаименованию("#Свертка базы");
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗаказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовПоставщикам.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = "#Свертка базы";
		ПричинаОтменыЗаказаОбъект.ИнициаторОтменыЗаказовПоставщикам = 
														Перечисления.ИнициаторОтменыЗаказовПоставщикам.НашеПредприятие;
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	МассивРегистров = ПолучитьМассивРегистровНакопленияДокумента("ЗаказПоставщику");

	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.ЗаказаноКонечныйОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗаказ.ЗаказаноРасход = 0 Тогда
			//Заказ не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо сформировать остатки в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);
		СуммаПоЗаказу = 0;
		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать();
		Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = СтрокаТЧ.Количество Тогда
					//Строка не меняется
					СуммаПоЗаказу = СуммаПоЗаказу + СтрокаТЧ.СуммаСНДС;
				ИначеЕсли ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = 0 Тогда
					//Строка отменяется целиком
					СтрокаТЧ.Отменено = Истина;
					СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Иначе
					//Разобъем строку на две, исполненную  часть пометим как отмененную
					НоваяСтрокаТЧ = ДокОст.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.Отменено = Истина;
					НоваяСтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
					НоваяСтрокаТЧ.КодСтроки = 0;
					
					КоличествоСтарое = СтрокаТЧ.Количество;
					СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
					КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
					Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
						СтрокаТЧ.КоличествоУпаковок = КоэффициентПересчета * СтрокаТЧ.КоличествоУпаковок;
					Иначе
						СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
					КонецЕсли;
					//Пересчет сумм по количеству
					СтрокаТЧ.Сумма = Окр(СтрокаТЧ.Сумма * КоэффициентПересчета,2);
					СтрокаТЧ.СуммаРучнойСкидки = Окр(СтрокаТЧ.СуммаРучнойСкидки * КоэффициентПересчета,2);
					СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
					СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
					СуммаПоЗаказу = СуммаПоЗаказу + СтрокаТЧ.СуммаСНДС;
					
					//Пересчет в новой строке
					НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.Количество - СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковок;
					НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Сумма - СтрокаТЧ.Сумма;
					НоваяСтрокаТЧ.СуммаРучнойСкидки = НоваяСтрокаТЧ.СуммаРучнойСкидки - СтрокаТЧ.СуммаРучнойСкидки;
					НоваяСтрокаТЧ.СуммаНДС = НоваяСтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДС;
					НоваяСтрокаТЧ.СуммаСНДС = НоваяСтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаСНДС;

				КонецЕсли;
			Иначе
				//Остатка по этой строке нет - отменим строку
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		//Изменение этапов оплаты
		Если ДокОст.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			Если ДокОст.ЭтапыГрафикаОплаты.Количество()=1 Тогда
				ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = СуммаПоЗаказу;
			Иначе
				//убираем лишние суммы пропорционально с каждой строки
				Коэффициент = СуммаПоЗаказу / ДокОст.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
				ЗаказСумма = СуммаПоЗаказу;
				Для каждого СтрокаТЧ Из ДокОст.ЭтапыГрафикаОплаты Цикл
					Если ЗаказСумма = 0 Тогда
						Прервать;
					КонецЕсли;
					СтрокаТЧ.СуммаПлатежа = Окр(СтрокаТЧ.СуммаПлатежа * Коэффициент, 2);
					ЗаказСумма = ЗаказСумма - СтрокаТЧ.СуммаПлатежа;
				КонецЦикла;
				Если ЗаказСумма <> 0 Тогда
					ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа + ЗаказСумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПровестиИлиЗаписатьЗаказ(ДокОст);
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ЗаказПоставщику",,Истина);

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЗаявкиНаВозврат()
	//1. Возвращаемые товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.ЗаявкаНаВозвратТоваровОтКлиента.Комментарий КАК Комментарий,
	|ТабРег.ЗаявленоКонечныйОстаток КАК ЗаявленоКонечныйОстаток,
	|ТабРег.ЗаявленоРасход КАК ЗаявленоРасход
	|ИЗ РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.ЗаявленоКонечныйОстаток>0 ИЛИ ТабРег.ЗаявленоРасход>0
	|ИТОГИ Сумма(ТабРег.ЗаявленоКонечныйОстаток), Сумма(ТабРег.ЗаявленоРасход)
	|ПО Заказ";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	МассивРегистров = ПолучитьМассивРегистровНакопленияДокумента("ЗаявкаНаВозвратТоваровОтКлиента");
	
	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.ЗаявленоКонечныйОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗаказ.ЗаявленоРасход = 0 Тогда
			//Заказ не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо сформировать остатки в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);

		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать();
		Для Каждого СтрокаТЧ Из ДокОст.ВозвращаемыеТовары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);

			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если ВыборкаСтрокаЗаказа.ЗаявленоКонечныйОстаток = 0 Тогда
					СтрокаТЧ.Отменено = Истина;
					ВыборкаСтрокаЗаказа.Сбросить();
					Продолжить;
				КонецЕсли;
				
				КоличествоСтарое = СтрокаТЧ.Количество;
				СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаявленоКонечныйОстаток;
				КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
				Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
					СтрокаТЧ.КоличествоУпаковок = КоэффициентПересчета * СтрокаТЧ.КоличествоУпаковок;
				Иначе
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
				КонецЕсли;
				//Пересчет сумм по количеству
				СтрокаТЧ.Сумма = Окр(СтрокаТЧ.Сумма * КоэффициентПересчета,2);
				СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
				СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
			Иначе
				//Остатка по этой строке нет - отменим строку
				СтрокаТЧ.Отменено = Истина;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		
		ПровестиИлиЗаписатьЗаказ(ДокОст);
	КонецЦикла;

	//2. Заменяющие товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ЗаказКлиента КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.Склад КАК Склад,
	|ТабРег.ЗаказаноКонечныйОстаток КАК ЗаказаноКонечныйОстаток,
	|ТабРег.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|ТабРег.ЗаказаноРасход КАК ЗаказаноРасход
	|ИЗ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ (ТабРег.ЗаказаноКонечныйОстаток>0 ИЛИ ТабРег.ЗаказаноРасход>0) 
	|	И ТабРег.ЗаказКлиента ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|ИТОГИ Максимум(ТабРег.ЗаказаноКонечныйОстаток), Максимум(ТабРег.СуммаКонечныйОстаток), Максимум(ТабРег.ЗаказаноРасход), 
	|	Максимум(КодСтроки), Максимум(Номенклатура), Максимум(Характеристика)
	|ПО Заказ, КодСтроки";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	
	//Определим причину отмены заказов
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию("#Свертка базы");
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗАказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = "#Свертка базы";
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.ЗаказаноКонечныйОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗаказ.ЗаказаноРасход = 0 Тогда
			//Заказ не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);			
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо сформировать остатки в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		Для Каждого Рег ИЗ МассивРегистров Цикл
			НаборЗаписей = РегистрыНакопления[Рег].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаказ.Заказ);
			НаборЗаписей.Записать();
		КонецЦикла;

		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Для Каждого СтрокаТЧ Из ДокОст.ЗаменяющиеТовары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);

			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = СтрокаТЧ.Количество Тогда
					//Заказанное количество не поменялось. Оставляем строку без изменений
				ИначеЕсли ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = 0 Тогда
					СтрокаТЧ.Отменено = Истина;
					СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Иначе
					//Разделим строку на две, исполненную часть пометим как отмененную
					//Новая строка - копия старой строки
					НоваяСтрокаТЧ = ДокОст.ЗаменяющиеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.КодСтроки = 0;
					НоваяСтрокаТЧ.КлючСвязи = 0;
					НоваяСтрокаТЧ.Отменено = Истина;
					НоваяСтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
					
					КоличествоСтарое = СтрокаТЧ.Количество;
					СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
					КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
					СтрокаТЧ.Сумма = ВыборкаСтрокаЗаказа.СуммаКонечныйОстаток;
					//Пересчитаем другие суммы по количеству
					СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок * КоэффициентПересчета;
					СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
					//Если есть скидки, перезаполним
					Если СтрокаТЧ.СуммаРучнойСкидки > 0 ИЛИ СтрокаТЧ.СуммаАвтоматическойСкидки > 0 Тогда
						СтрокаТЧ.СуммаРучнойСкидки = Окр(СтрокаТЧ.СуммаРучнойСкидки * КоэффициентПересчета,2);
						СтрокаТЧ.СуммаАвтоматическойСкидки = Окр(СтрокаТЧ.СуммаАвтоматическойСкидки * КоэффициентПересчета,2);
						СтрокиСкидки = ДокОст.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
						Для Каждого СтрокаСкидки ИЗ СтрокиСкидки Цикл
							СтрокаСкидки.Сумма = Окр(СтрокаСкидки.Сумма * КоэффициентПересчета,2);
						КонецЦикла;
					КонецЕсли;
					
					//Скорректируем данные новой строки ТЧ
					НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.Количество - СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Сумма - СтрокаТЧ.Сумма;
					НоваяСтрокаТЧ.СуммаНДС = НоваяСтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДС;
					НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковок;
					НоваяСтрокаТЧ.СуммаСНДС = НоваяСтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаСНДС;
					НоваяСтрокаТЧ.СуммаРучнойСкидки = НоваяСтрокаТЧ.СуммаРучнойСкидки - СтрокаТЧ.СуммаРучнойСкидки;
					НоваяСтрокаТЧ.СуммаАвтоматическойСкидки = НоваяСтрокаТЧ.СуммаАвтоматическойСкидки - СтрокаТЧ.СуммаАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				//Остатка по этой строке нет - отменим строку целиком
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		//Изменение этапов оплаты
		Если ДокОст.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			Если ДокОст.ЭтапыГрафикаОплаты.Количество()=1 Тогда
				ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ВыборкаЗаказ.СуммаКонечныйОстаток;
			Иначе
				//убираем лишние суммы пропорционально с каждой строки
				Коэффициент = ВыборкаЗаказ.СуммаКонечныйОстаток / ДокОст.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
				ЗаказСумма = ВыборкаЗаказ.СуммаКонечныйОстаток;
				Для каждого СтрокаТЧ Из ДокОст.ЭтапыГрафикаОплаты Цикл
					Если ЗаказСумма = 0 Тогда
						Прервать;
					КонецЕсли;
					СтрокаТЧ.СуммаПлатежа = Окр(СтрокаТЧ.СуммаПлатежа * Коэффициент, 2);
					ЗаказСумма = ЗаказСумма - СтрокаТЧ.СуммаПлатежа;
				КонецЦикла;
				Если ЗаказСумма <> 0 Тогда
					ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа + ЗаказСумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПровестиИлиЗаписатьЗаказ(ДокОст);
	КонецЦикла;

	ВывестиСообщениеСформированыДокументы("ЗаявкаНаВозвратТоваровОтКлиента",,Истина);

КонецПроцедуры

Процедура ОбработатьОстаткиДенежныеСредстваКПоступлениюИСписанию()
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	ТабРег.Организация,
	|	ТабРег.БанковскийСчет,
	|	ТабРег.КЗачислениюОстаток КАК КЗачислениюОстаток,
	|	ТабРег.КСписаниюОстаток КАК КСписаниюОстаток,
	|	ТабРегОбороты.Регистратор КАК Документ,
	|	ТабРегОбороты.Регистратор.Дата КАК Дата,
	|	ТабРегОбороты.Регистратор.Проведен КАК ДокументПроведен,
	|	ЕстьNULL(ТабРегОбороты.КСписаниюПриход,0) КАК КСписаниюПриход,
	|	ЕстьNULL(ТабРегОбороты.КЗачислениюПриход,0) КАК КЗачислениюПриход
	|ИЗ РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Обороты(,&ГраницаОст,Регистратор) КАК ТабРегОбороты
	|ПО ТабРег.Организация = ТабРегОбороты.Организация
	|И ТабРег.БанковскийСчет = ТабРегОбороты.БанковскийСчет 
	|ГДЕ ТабРегОбороты.Регистратор ЕСТЬ НЕ NULL
	|	И ((ТабРег.КЗачислениюОстаток > 0 И ЕстьNULL(ТабРегОбороты.КЗачислениюПриход,0) > 0) 
	|	ИЛИ (ТабРег.КСписаниюОстаток > 0 И ЕстьNULL(ТабРегОбороты.КСписаниюПриход,0) > 0))
	|УПОРЯДОЧИТЬ ПО ТабРегОбороты.Регистратор.Дата УБЫВ
	|ИТОГИ
	|	Сумма(ТабРег.КЗачислениюОстаток),
	|	Сумма(ТабРег.КСписаниюОстаток)
	|ПО
	|	ТабРег.Организация,
	|	ТабРег.БанковскийСчет 
	|";

	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	ЗафиксироватьИзменениеДокументовВПараметрСвертки();

	//Документ, сформировавший начальный остаток, надо перенести после даты свертки
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаБанковскийСчет = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаБанковскийСчет.Следующий() Цикл
			СуммаКЗачислению = ВыборкаБанковскийСчет.КЗачислениюОстаток;
			СуммаКСписанию = ВыборкаБанковскийСчет.КСписаниюОстаток;
			Выборка = ВыборкаБанковскийСчет.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СуммаКЗачислению = 0 И СуммаКСписанию = 0 Тогда
					Прервать;
				КонецЕсли;
				ПереноситьДокумент = Ложь;
				Если Выборка.КЗачислениюПриход > 0 Тогда
					Если Выборка.КЗачислениюПриход > СуммаКЗачислению Тогда
						Продолжить;
					КонецЕсли;
					ДокОст = Выборка.Документ.ПолучитьОбъект();
					Если ДокОст = Неопределено тогда
						Продолжить;
					КонецЕсли;
					СуммаКЗачислению = СуммаКЗачислению - Выборка.КЗачислениюПриход;
					ПереноситьДокумент = Истина;
				ИначеЕсли Выборка.КСписаниюПриход > 0 Тогда
					Если Выборка.КСписаниюПриход > СуммаКСписанию Тогда
						Продолжить;
					КонецЕсли;
					ДокОст = Выборка.Документ.ПолучитьОбъект();
					Если ДокОст = Неопределено тогда
						Продолжить;
					КонецЕсли;
					СуммаКСписанию = СуммаКСписанию - Выборка.КСписаниюПриход;
					ПереноситьДокумент = Истина;
				КонецЕсли;
				Если НЕ ПереноситьДокумент Тогда
					Продолжить;
				КонецЕсли;
				Если Выборка.ДокументПроведен Тогда
					// Сначала записать документ с отменой проведения.
					Попытка
						ДокОст.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Исключение
						ТекстСообщения = НСтр("ru='Не удалось отменить проведение документа: '") + СокрЛП(ДокОст.Ссылка);
						СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				ДокОст.Дата = КонецДня(ДатаСверткиИБ) + 1;
				ПроверитьНомерДокумента(ДокОст, Выборка.Дата);
				Если ТипЗнч(Выборка.Документ) <> Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга") Тогда
					ТекстКомментария = НСтр("ru='[Перенесен обработкой свертки базы][Был %Представление документа%]'");
					ТекстКомментария = СтрЗаменить(ТекстКомментария,"%Представление документа%", СокрЛП(Выборка.Документ));
					ДокОст.Комментарий = ТекстКомментария;
				КонецЕсли;
				Если Выборка.ДокументПроведен Тогда
					// Проведение измененного документа.
					ПроведенУспешно = Ложь;
					Попытка
						ДокОст.Записать(РежимЗаписиДокумента.Проведение);
						ПроведенУспешно = Истина;
					Исключение
						ТекстСообщения = НСтр("ru='Не удалось провести документ: '") + СокрЛП(ДокОст.Ссылка);
						СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());
					КонецПопытки;
					Если НЕ ПроведенУспешно Тогда
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
				Иначе
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru='Обработаны Денежные средства безналичные к зачислению и Денежные средства безналичные к списанию'");
	СообщениеСвертки(ТекстСообщения);
КонецПроцедуры

Процедура ОбработатьОстаткиТоварыКОтгрузке()
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|ТабРег.ДокументОтгрузки КАК ДокументОтгрузки,
	|ТабРегОбороты.Регистратор КАК ДокументОрдер,
	|ТабРег.КОтгрузкеОстаток КАК КОтгрузке,
	|ТабРегОбороты.КОтгрузкеРасход КАК Отгружено
	|ИЗ РегистрНакопления.ТоварыКОтгрузке.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Обороты(&ГраницаОст,,Регистратор) КАК ТабРегОбороты
	|ПО ТабРегОбороты.ДокументОтгрузки = ТабРег.ДокументОтгрузки 
	|ГДЕ ТабРег.КОтгрузкеОстаток > 0  И ТабРегОбороты.Регистратор ЕСТЬ НЕ NULL
	|";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	МассивОрдеров = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДокОст = Выборка.ДокументОрдер.ПолучитьОбъект();
		Если ДокОст = Неопределено тогда
			Продолжить;
		КонецЕсли;

		ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
		ДокОст.Записать(РежимЗаписиДокумента.Проведение);
		МассивОрдеров.Добавить(Выборка.ДокументОрдер);
	КонецЦикла;
	
	//Поиск документов Отбор, размещение товаров оформленных по ордеру
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|Док.Ссылка КАК ДокументОтбора
	|ИЗ Документ.ОтборРазмещениеТоваров КАК Док
	|ГДЕ Док.Распоряжение В (&МассивОрдеров) И НЕ Док.ПометкаУдаления
	|";
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОст = Выборка.ДокументОтбора.ПолучитьОбъект();
		Если ДокОст = Неопределено тогда
			Продолжить;
		КонецЕсли;

		ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
	СообщениеСвертки(НСтр("ru='Обработаны Товары к отгрузке'"));

КонецПроцедуры

Процедура ОбработатьОстаткиТоварыКПоступлению()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТабРег.ДокументПоступления КАК ДокументПоступления,
	|	ТабРегОбороты.Регистратор КАК ДокументОрдер,
	|	ТабРег.КОформлениюОрдеровОстаток КАК КПоступлению,
	|	ТабРег.КОформлениюПоступленийПоРаспоряжениюОстаток КАК КОформлению
	|ИЗ РегистрНакопления.ТоварыКПоступлению.Остатки(&ГраницаОст) КАК ТабРег
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Обороты(&ГраницаОст,,Регистратор) КАК ТабРегОбороты
	|ПО ТабРегОбороты.ДокументПоступления = ТабРег.ДокументПоступления 
	|ГДЕ ТабРег.КОформлениюОрдеровОстаток > 0 Или ТабРег.КОформлениюПоступленийПоРаспоряжениюОстаток > 0
	|ИТОГИ Сумма(КПоступлению), Сумма(КОформлению) ПО ДокументПоступления";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДокументПоступления = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументПоступления.Следующий() Цикл
		ТипДокументаПоступления = ТипЗнч(ВыборкаДокументПоступления.ДокументПоступления);
		Если ТипДокументаПоступления = Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ
			ТипДокументаПоступления = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Если Найти(ВыборкаДокументПоступления.ДокументПоступления.Комментарий, Комментарий_НеУдалятьПриСверткеБазы) > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаОрдер = ВыборкаДокументПоступления.Выбрать();
		Пока ВыборкаОрдер.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОрдер.ДокументОрдер) Тогда
				Продолжить;
			КонецЕсли;

			ДокОст = ВыборкаОрдер.ДокументОрдер.ПолучитьОбъект();
			Если ДокОст = Неопределено тогда
				Продолжить;
			КонецЕсли;

			ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
			ДокОст.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЦикла;
	СообщениеСвертки(НСтр("ru='Обработаны Товары к поступлению'"));

КонецПроцедуры

Процедура ОбработатьОстаткиТоварыКОтбору()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|ТабРег.Распоряжение КАК Распоряжение,
	|ТабРегОбороты.Регистратор КАК ДокументОтбор,
	|ТабРег.КОтборуОстаток КАК КОтбору
	|ИЗ РегистрНакопления.ТоварыКОтбору.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтбору.Обороты(&ГраницаОст,,Регистратор) КАК ТабРегОбороты
	|ПО ТабРегОбороты.Распоряжение = ТабРег.Распоряжение 
	|ГДЕ ТабРег.КОтборуОстаток > 0
	|ИТОГИ Максимум(КОтбору) ПО ТабРег.Распоряжение";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРаспоряжение = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРаспоряжение.Следующий() Цикл
		ВыборкаОтбор = ВыборкаРаспоряжение.Выбрать();
		Пока ВыборкаОтбор.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОтбор.ДокументОтбор) Тогда
				Продолжить;
			КонецЕсли;

			ДокОст = ВыборкаОтбор.ДокументОтбор.ПолучитьОбъект();
			Если ДокОст = Неопределено тогда
				Продолжить;
			КонецЕсли;

			ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
			ДокОст.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЦикла;
	СообщениеСвертки(НСтр("ru='Обработаны Товары к отбору'"));

КонецПроцедуры

Процедура ОбработатьБлокировкиСкладскихЯчеек()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|Регистратор КАК Документ
	|ИЗ РегистрСведений.БлокировкиСкладскихЯчеек
	|ГДЕ Регистратор ССЫЛКА Документ.УстановкаБлокировокЯчеек
	|И Регистратор.Дата <= &ДатаОст";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОст = Выборка.Документ.ПолучитьОбъект();
		Если ДокОст = Неопределено тогда
			Продолжить;
		КонецЕсли;

		ДокОст.Комментарий = Комментарий_НеУдалятьПриСверткеБазы;
		ДокОст.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	СообщениеСвертки(НСтр("ru='Обработаны Блокировки складских ячеек'"));

КонецПроцедуры

Процедура ОбработатьСостоянияБлокировкиВычетаНДС()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организация КАК Организация,
	|	СчетФактура КАК СчетФактура,
	|	Состояние КАК Состояние
	|ИЗ РегистрСведений.СостоянияБлокировкиВычетаНДСПоСчетамФактурам.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО Организация, Состояние";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоСформированныхДокументов = 1;
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаСостояние = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСостояние.Следующий() Цикл
			ДокОст = Документы.БлокировкаВычетаНДС.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаСостояние, Ложь);
			Выборка = ВыборкаСостояние.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаСФ = ДокОст.СчетаФактуры.Добавить();
				СтрокаСФ.СчетФактура = Выборка.СчетФактура;
				Если ДокОст.СчетаФактуры.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
					//Запишем документ ввода остатков и создадим новый
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					ДокОст = Документы.БлокировкаВычетаНДС.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаСостояние, Ложь);
				КонецЕсли;
			КонецЦикла;
			Если ДокОст.СчетаФактуры.Количество() > 0 Тогда
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("БлокировкаВычетаНДС", "");
	КонецЕсли;

КонецПроцедуры


Процедура СформироватьДокументыВводаОстатковПодарочныеСертификаты()
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ 
	|ИсторияПСРег.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|Максимум(ИсторияПСРег.Регистратор) КАК РегистраторАктивации,
	|Максимум(ИсторияПСРег.Период) КАК ДатаАктивации
	|ПОМЕСТИТЬ ИсторияПС
	|ИЗ  РегистрСведений.ИсторияПодарочныхСертификатов КАК ИсторияПСРег
	|ГДЕ ИсторияПСРег.Период <= &ДатаОст И
	|	ИсторияПСРег.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован)
	|СГРУППИРОВАТЬ ПО ИсторияПСРег.ПодарочныйСертификат 
	|;
	|ВЫБРАТЬ
	|ОстаткиПС.ПодарочныйСертификат.Владелец КАК ВидПодарочногоСертификата,
	|ОстаткиПС.ПодарочныйСертификат.Владелец.Валюта КАК ВалютаПодарочногоСертификата,
	|ОстаткиПС.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|ОстаткиПС.ПодарочныйСертификат.Штрихкод КАК Штрихкод,
	|ОстаткиПС.ПодарочныйСертификат.МагнитныйКод КАК МагнитныйКод,
	|ОстаткиПС.ПодарочныйСертификат.Код КАК СерийныйНомер,
	|ОстаткиПС.СуммаОстаток КАК СуммаВВалютеСертификата,
	|ИсторияПС.ДатаАктивации КАК ДатаАктивации,
	|ИсторияПС.РегистраторАктивации.Организация КАК Организация,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ПодарочныеСертификаты) КАК ТипОперации
	|ИЗ РегистрНакопления.ПодарочныеСертификаты.Остатки(&ГраницаОст) КАК ОстаткиПС
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&ГраницаОст) КАК СрезПС
	|ПО ОстаткиПС.ПодарочныйСертификат = СрезПС.ПодарочныйСертификат
	|ЛЕВОЕ СОЕДИНЕНИЕ ИсторияПС КАК ИсторияПС
	|ПО ИсторияПС.ПодарочныйСертификат = ОстаткиПС.ПодарочныйСертификат
	|ГДЕ ОстаткиПС.СуммаОстаток > 0 И
	|	ИсторияПС.ДатаАктивации ЕСТЬ НЕ NULL И
	|	(СрезПС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован) ИЛИ
	|	СрезПС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.ЧастичноПогашен))
	|УПОРЯДОЧИТЬ ПО Организация, ВидПодарочногоСертификата, ДатаАктивации, ПодарочныйСертификат";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидПодарочногоСертификата") Цикл
			ДокОст = Документы.ВводОстатков.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДокОст.ПодарочныеСертификаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Если Выборка.ВалютаПодарочногоСертификата = ВалютаРегламентированногоУчета Тогда
					НоваяСтрока.СуммаРегл = Выборка.СуммаВВалютеСертификата;
				Иначе
					КоэффициентПересчета = КурсыВалют.Получить(Выборка.ВалютаПодарочногоСертификата);
					Если КоэффициентПересчета = Неопределено Тогда
						КоэффициентПересчета = 
							РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
														Выборка.ВалютаПодарочногоСертификата, 
														ВалютаРегламентированногоУчета, ДокОст.Дата);
						КурсыВалют.Вставить(Выборка.ВалютаПодарочногоСертификата, КоэффициентПересчета); 
					КонецЕсли;
					
					НоваяСтрока.СуммаРегл = Окр(Выборка.Выборка.СуммаВВалютеСертификата * КоэффициентПересчета, 2, 1);
				КонецЕсли;
				Если Выборка.ВалютаПодарочногоСертификата = ВалютаУправленческогоУчета Тогда
					НоваяСтрока.СуммаУпр = Выборка.СуммаВВалютеСертификата;
				Иначе
					КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.СуммаВВалютеСертификата, ВалютаУправленческогоУчета, ДокОст.Дата);
					НоваяСтрока.СуммаУпр = Окр(Выборка.СуммаВВалютеСертификата * КоэффициентПересчета, 2, 1);
				КонецЕсли;
				
				Если ДокОст.ПодарочныеСертификаты.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					ДокОст = Документы.ВводОстатков.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
				КонецЕсли;
			КонецЦикла;
			Если ДокОст.ПодарочныеСертификаты.Количество() > 0 Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЕсли;
		КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("ВидПодарочногоСертификата") Цикл
	КонецЦикла;//Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков",Перечисления.ТипыОперацийВводаОстатков.ПодарочныеСертификаты);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПрочиеРасходы()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ТабРег.Организация КАК Организация,
	|	ТабРег.Подразделение КАК Подразделение,
	|	ТабРег.СтатьяРасходов КАК СтатьяРасходов,
	|	ТабРег.АналитикаРасходов КАК АналитикаРасходов,
	|	Сумма(ТабРег.СуммаОстаток) КАК Сумма,
	|	Сумма(ТабРег.СуммаУпрОстаток) КАК СуммаУпр,
	|	Сумма(ТабРег.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	Сумма(ТабРег.СуммаРеглОстаток) КАК СуммаРегл,
	|	Сумма(ТабРег.ПостояннаяРазницаОстаток) КАК СуммаПР,
	|	Сумма(ТабРег.ВременнаяРазницаОстаток) КАК СуммаВР,
	|ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов) КАК ТипОперации
	|ИЗ РегистрНакопления.ПрочиеРасходы.Остатки(&ГраницаОст) КАК ТабРег
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.СтатьяРасходов,
	|	ТабРег.АналитикаРасходов
	|ИМЕЮЩИЕ Сумма(ТабРег.СуммаОстаток) > 0
	|	ИЛИ Сумма(ТабРег.СуммаУпрОстаток) > 0
	|	ИЛИ Сумма(ТабРег.СуммаБезНДСОстаток) > 0
	|	ИЛИ Сумма(ТабРег.СуммаРеглОстаток) > 0
	|	ИЛИ Сумма(ТабРег.ПостояннаяРазницаОстаток) > 0
	|	ИЛИ Сумма(ТабРег.ВременнаяРазницаОстаток) > 0
	|УПОРЯДОЧИТЬ ПО Организация, Подразделение";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			ДокОст = Документы.ВводОстатков.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			ДокОст.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
										ДокОст.Организация,
										,
										ДокОст.Дата);
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДокОст.ПрочиеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.СуммаНДС = Макс(НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС, 0);
				Если НоваяСтрока.СуммаНДС > 0 И НоваяСтрока.СуммаРегл > 0 
					И НоваяСтрока.Сумма > 0 Тогда
					НоваяСтрока.НДСРегл = Окр(НоваяСтрока.СуммаНДС * НоваяСтрока.СуммаРегл / НоваяСтрока.Сумма, 0);
				КонецЕсли;
				ЗаполнитьСтавкуНДСВСтрокеДокумента(НоваяСтрока);
				// Без суммы документ не проведется.
				Если НоваяСтрока.Сумма = 0 Тогда
					НоваяСтрока.Сумма = 0.01;
				КонецЕсли;
			КонецЦикла;
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
									Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковФинансовыйРезультат()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабРег.Организация КАК Организация,
	|	ТабРег.Подразделение КАК Подразделение,
	|	ТабРег.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТабРег.СтатьяРасходов КАК СтатьяРасходов,
	|	ТабРег.СтатьяДоходов КАК СтатьяДоходов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, Месяц) КАК ДатаОтражения,
	|	СУММА(ТабРег.ДоходыОборот) КАК СуммаДоходов,
	|	СУММА(ТабРег.РасходыОборот) КАК СуммаРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ФинансовыйРезультатЗаПрошлыеПериоды) КАК ТипОперации
	|ИЗ
	|	РегистрНакопления.ФинансовыеРезультаты.Обороты(, &ГраницаОст, Месяц, ) КАК ТабРег
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.НаправлениеДеятельности,
	|	ТабРег.СтатьяРасходов,
	|	ТабРег.СтатьяДоходов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, Месяц)
	|ИМЕЮЩИЕ
	|	(СУММА(ТабРег.ДоходыОборот) > 0
	|		ИЛИ СУММА(ТабРег.РасходыОборот) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Подразделение";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			ДокОст = Документы.ВводОстатков.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			Пока Выборка.Следующий() Цикл
				Если Выборка.СуммаДоходов > 0 Тогда
					НоваяСтрока = ДокОст.ФинансовыйРезультатДоходы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;
				Если Выборка.СуммаРасходов > 0 Тогда
					НоваяСтрока = ДокОст.ФинансовыйРезультатРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
									Перечисления.ТипыОперацийВводаОстатков.ФинансовыйРезультатЗаПрошлыеПериоды);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПродажи()
	//Оптовые продажи

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ТабРег.Подразделение КАК Подразделение,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент,
	|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ТабРег.Склад КАК Склад,
	|	ТабРег.Соглашение КАК Соглашение,
	|	ТабРег.Договор КАК Договор,
	|	ТабРег.Менеджер КАК Менеджер,
	|	ТабРег.ВидЗапасов КАК ВидЗапасов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, МЕСЯЦ) КАК ДатаОтражения,
	|	СУММА(ТабРег.КоличествоОборот) КАК Количество,
	|	СУММА(ТабРег.СуммаВыручкиОборот) КАК Сумма,
	|	СУММА(ТабРег.СуммаВыручкиБезНДСОборот) КАК СуммаБезНДС,
	|	СУММА(ТабРег.СуммаВыручкиРеглОборот) КАК СуммаРегл,
	|	СУММА(ТабРег.СуммаВыручкиСНДСРеглОборот) КАК СуммаСНДСРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды) КАК ТипОперации
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, &ГраницаОст, Регистратор) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО ТабРег.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	|	ПО ТабРег.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	|ГДЕ
	|	НЕ ТабРег.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|СГРУППИРОВАТЬ ПО
	|	РегистрАналитикаУчетаПоПартнерам.Организация,
	|	ТабРег.Подразделение,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент,
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика,
	|	ТабРег.Склад,
	|	ТабРег.Соглашение,
	|	ТабРег.Договор,
	|	ТабРег.Менеджер,
	|	ТабРег.ВидЗапасов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, МЕСЯЦ)
	|ИМЕЮЩИЕ
	|	(СУММА(ТабРег.КоличествоОборот) > 0
	|		ИЛИ СУММА(ТабРег.СуммаВыручкиОборот) > 0
	|		ИЛИ СУММА(ТабРег.СуммаВыручкиРеглОборот) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрАналитикаУчетаПоПартнерам.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.Склад,
	|	ТабРег.Менеджер,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент,
	|	ТабРег.Соглашение,
	|	ТабРег.Договор
	|	";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Менеджер") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("Контрагент") Цикл
							Пока Выборка.СледующийПоЗначениюПоля("Соглашение") Цикл
								Пока Выборка.СледующийПоЗначениюПоля("Договор") Цикл
									ДокОст = Документы.ВводОстатков.СоздатьДокумент();
									ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
									Пока Выборка.Следующий() Цикл
										НоваяСтрока = ДокОст.ОптовыеПродажи.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
										НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
										НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
										НоваяСтрока.НДСРегл = Выборка.СуммаСНДСРегл - НоваяСтрока.СуммаРегл;
										Если НоваяСтрока.Количество > 0 Тогда
											НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2);
										КонецЕсли;
										ЗаполнитьСтавкуНДСВСтрокеДокумента(НоваяСтрока);
									КонецЦикла;
									ДокОст.Записать(РежимЗаписиДокумента.Запись);
								КонецЦикла; //Договор
							КонецЦикла; //Соглашение
						КонецЦикла; //Контрагент
					КонецЦикла; //Партнер
				КонецЦикла; //Менеджер
			КонецЦикла; //Склад
		КонецЦикла; //Подразделение
	КонецЦикла; //Организация
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
									Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды);
	КонецЕсли;
	//Розничные продажи
	ИспользуютсяКартыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	Если НЕ ИспользуютсяКартыЛояльности Тогда
		Возврат;
	КонецЕсли;
	
	// Розничные продажи.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Максимум(Владелец.ДатаНачалаДействия) КАК ДатаНачала,
	|	Партнер,
	|	Контрагент
	|ПОМЕСТИТЬ КартыПартнеров
	|ИЗ Справочник.КартыЛояльности
	|ГДЕ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
	|	И Владелец.ДатаНачалаДействия <= &ДатаОст
	|	И Владелец.Персонализирована
	|СГРУППИРОВАТЬ ПО
	|	Партнер,
	|	Контрагент
	|;
	|ВЫБРАТЬ
	|	КартыПартнеров.Партнер,
	|	КартыПартнеров.Контрагент,
	|	КартыЛояльности.Ссылка КАК КартаЛояльности,
	|	КартыЛояльности.Штрихкод,
	|	КартыЛояльности.МагнитныйКод,
	|	КартыЛояльности.Владелец КАК ВидКартыЛояльности
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ КартыПартнеров
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.КартыЛояльности КАК КартыЛояльности
	|ПО КартыПартнеров.Партнер = КартыЛояльности.Партнер
	|	И КартыПартнеров.Контрагент = КартыЛояльности.Контрагент
	|	И КартыПартнеров.ДатаНачала = КартыЛояльности.Владелец.ДатаНачалаДействия
	|;
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ТабРег.Подразделение КАК Подразделение,
	|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ТабРег.Склад КАК Склад,
	|	ТабРег.Менеджер КАК Менеджер,
	|	ТабРег.ВидЗапасов КАК ВидЗапасов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, МЕСЯЦ) КАК ДатаОтражения,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент,
	|	КартыЛояльности.Штрихкод,
	|	КартыЛояльности.МагнитныйКод,
	|	КартыЛояльности.КартаЛояльности,
	|	КартыЛояльности.ВидКартыЛояльности,
	|	СУММА(ТабРег.КоличествоОборот) КАК Количество,
	|	СУММА(ТабРег.СуммаВыручкиОборот) КАК Сумма,
	|	СУММА(ТабРег.СуммаВыручкиБезНДСОборот) КАК СуммаБезНДС,
	|	СУММА(ТабРег.СуммаВыручкиРеглОборот) КАК СуммаРегл,
	|	СУММА(ТабРег.СуммаВыручкиСНДСРеглОборот) КАК СуммаСНДСРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды) КАК ТипОперации
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, &ГраницаОст, Регистратор, ) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО ТабРег.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	|	ПО ТабРег.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КартыЛояльности КАК КартыЛояльности
	|	ПО РегистрАналитикаУчетаПоПартнерам.Партнер = КартыЛояльности.Партнер
	|		И РегистрАналитикаУчетаПоПартнерам.Контрагент = КартыЛояльности.Контрагент
	|ГДЕ ТабРег.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|СГРУППИРОВАТЬ ПО
	|	РегистрАналитикаУчетаПоПартнерам.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент,
	|	КартыЛояльности.Штрихкод,
	|	КартыЛояльности.МагнитныйКод,
	|	КартыЛояльности.КартаЛояльности,
	|	КартыЛояльности.ВидКартыЛояльности,
	|	ТабРег.Склад,
	|	ТабРег.Менеджер,
	|	ТабРег.ВидЗапасов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, МЕСЯЦ)
	|ИМЕЮЩИЕ
	|	(СУММА(ТабРег.КоличествоОборот) > 0
	|		ИЛИ СУММА(ТабРег.СуммаВыручкиОборот) > 0
	|		ИЛИ СУММА(ТабРег.СуммаВыручкиРеглОборот) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрАналитикаУчетаПоПартнерам.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.Склад,
	|	ТабРег.Менеджер
	|	";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Менеджер") Цикл
					ДокОст = Документы.ВводОстатков.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
					Пока Выборка.Следующий() Цикл
						НоваяСтрока = ДокОст.РозничныеПродажи.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
						НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
						НоваяСтрока.НДСРегл = Выборка.СуммаСНДСРегл - НоваяСтрока.СуммаРегл;
						Если НоваяСтрока.Количество > 0 Тогда
							НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2);
						КонецЕсли;
						ЗаполнитьСтавкуНДСВСтрокеДокумента(НоваяСтрока);
					КонецЦикла;
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КонецЦикла; //Менеджер
			КонецЦикла; //Склад
		КонецЦикла; //Подразделение
	КонецЦикла; //Организация
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
									Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьОстаткиТоваровУПартнеров()
	// 1. Ситуация документ "Приобретение товаров услуг" до свертки, "Поступление товаров" после свертки.
	// Документ ПоступлениеТоваров, закрывающий положительный остаток по регистру, удаляется.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|ТабРегОбороты.Регистратор КАК ДокументПоступление,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Назначение КАК Назначение,
	|ТабРег.Серия КАК Серия,
	|ТабРег.ВидЗапасов КАК ВидЗапасов,
	|ТабРег.НомерГТД КАК НомерГТД,
	|ТабРег.Партнер КАК Партнер,
	|ТабРег.Контрагент КАК Контрагент,
	|ТабРег.Договор КАК Договор,
	|Сумма(ТабРег.ПереданоОстаток) КАК Передано,
	|Сумма(ТабРегОбороты.ПереданоРасход) КАК Поступило
	|ИЗ РегистрНакопления.ТоварыУПартнеров.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыУПартнеров.Обороты(&ГраницаОст,,Регистратор) КАК ТабРегОбороты
	|ПО ТабРегОбороты.Номенклатура = ТабРег.Номенклатура 
	|	И ТабРегОбороты.Характеристика = ТабРег.Характеристика 
	|	И ТабРегОбороты.Назначение = ТабРег.Назначение 
	|	И ТабРегОбороты.Серия = ТабРег.Серия 
	|	И ТабРегОбороты.НомерГТД = ТабРег.НомерГТД 
	|	И ТабРегОбороты.Партнер = ТабРег.Партнер 
	|	И ТабРегОбороты.Контрагент = ТабРег.Контрагент 
	|	И ТабРегОбороты.Договор = ТабРег.Договор 
	|СГРУППИРОВАТЬ ПО
	|	ТабРегОбороты.Регистратор,
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Назначение,
	|	ТабРег.Серия,
	|	ТабРег.ВидЗапасов,
	|	ТабРег.НомерГТД,
	|	ТабРег.Партнер,
	|	ТабРег.Контрагент,
	|	ТабРег.Договор
	|ИМЕЮЩИЕ Сумма(ТабРег.ПереданоОстаток) > 0  И ТабРегОбороты.Регистратор ЕСТЬ НЕ NULL
	|УПОРЯДОЧИТЬ ПО 
	|	ТабРегОбороты.Регистратор,
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Назначение,
	|	ТабРег.Серия,
	|	ТабРег.ВидЗапасов,
	|	ТабРег.НомерГТД";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументПоступление") Цикл
		ДокОст = Выборка.ДокументПоступление.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ДокОст) <> Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрокТоварыКУдалению = Новый Массив;
		МассивСтрокСерииКУдалению = Новый Массив;

		ДокументИзменен = Ложь;
		Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Назначение") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("НомерГТД") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("ВидЗапасов") Цикл
							Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
								КоличествоТовары = Выборка.КоличествоПередано;
								КоличествоСерии = Выборка.КоличествоПередано;
								
								ПараметрыПоискаСтрок = Новый Структура();
								ПараметрыПоискаСтрок.Вставить("Номенклатура");
								ПараметрыПоискаСтрок.Вставить("Характеристика");
								ПараметрыПоискаСтрок.Вставить("Серия");
								ПараметрыПоискаСтрок.Вставить("Назначение");
								ПараметрыПоискаСтрок.Вставить("ВидЗапасов");
								ПараметрыПоискаСтрок.Вставить("НомерГТД");
								ЗаполнитьЗначенияСвойств(ПараметрыПоискаСтрок, Выборка);
								
								МассивСтрокТовары = ДокОст.Товары.НайтиСтроки(ПараметрыПоискаСтрок);
								Если МассивСтрокТовары.Количество() = 0 И ЗначениеЗаполнено(Выборка.Серия) Тогда
									// Попытка поиска без учета серии
									ПараметрыПоискаСтрок.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
									МассивСтрокТовары = ДокОст.Товары.НайтиСтроки(ПараметрыПоискаСтрок);
								КонецЕсли;
								СкорректироватьКоличествоВТЧДокумента(МассивСтрокТовары, КоличествоТовары, МассивСтрокТоварыКУдалению, ДокументИзменен);
								Если ДокОст.Серии.Количество() > 0 И ЗначениеЗаполнено(Выборка.Серия) Тогда
									ПараметрыПоискаСтрок = Новый Структура();
									ПараметрыПоискаСтрок.Вставить("Номенклатура");
									ПараметрыПоискаСтрок.Вставить("Характеристика");
									ПараметрыПоискаСтрок.Вставить("Серия");
									ПараметрыПоискаСтрок.Вставить("Назначение");
									МассивСтрокСерии = ДокОст.Серии.НайтиСтроки(ПараметрыПоискаСтрок);
									СкорректироватьКоличествоВТЧДокумента(МассивСтрокСерии, КоличествоСерии, МассивСтрокСерииКУдалению, ДокументИзменен);
								КонецЕсли;
							КонецЦикла;  //Серия
						КонецЦикла;//ВидЗапасов
					КонецЦикла; //НомерГТД
				КонецЦикла; //Назначение
			КонецЦикла; //Характеристика
		КонецЦикла; //Номенклатура
		Для Каждого СтрокаТовары Из МассивСтрокТоварыКУдалению Цикл
			ДокОст.Товары.Удалить(СтрокаТовары);
			ДокументИзменен = Истина;
		КонецЦикла;
		Для Каждого СтрокаСерии Из МассивСтрокСерииКУдалению Цикл
			ДокОст.Серии.Удалить(СтрокаСерии);
			ДокументИзменен = Истина;
		КонецЦикла;
		Если ДокументИзменен Тогда
			Если ДокОст.Товары.Количество() = 0 Тогда
				// Документ можно удалить целиком.
				ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокОст.Комментарий = Комментарий_СкорректированСверткойБазы;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// 2. Ситуация документ "Поступление товаров" до свертки, "Приобретение товаров услуг" после свертки.
	// Документ "Поступление товаров" переносится в дату свертки, корректируется в соответствии с остатками.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|ТабРегОбороты.Регистратор КАК ДокументПоступление,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Назначение КАК Назначение,
	|ТабРег.Серия КАК Серия,
	|ТабРег.ВидЗапасов КАК ВидЗапасов,
	|ТабРег.НомерГТД КАК НомерГТД,
	|Сумма(ТабРег.ПереданоОстаток) КАК Передано,
	|Сумма(ТабРегОбороты.ПереданоПриход) КАК Поступило
	|ИЗ РегистрНакопления.ТоварыУПартнеров.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыУПартнеров.Обороты(,&ГраницаОст,Регистратор) КАК ТабРегОбороты
	|ПО ТабРегОбороты.Номенклатура = ТабРег.Номенклатура 
	|	И ТабРегОбороты.Характеристика = ТабРег.Характеристика 
	|	И ТабРегОбороты.Назначение = ТабРег.Назначение 
	|	И ТабРегОбороты.Серия = ТабРег.Серия 
	|	И ТабРегОбороты.НомерГТД = ТабРег.НомерГТД 
	|	И ТабРегОбороты.Партнер = ТабРег.Партнер 
	|	И ТабРегОбороты.Контрагент = ТабРег.Контрагент 
	|	И ТабРегОбороты.Договор = ТабРег.Договор 
	|СГРУППИРОВАТЬ ПО
	|	ТабРегОбороты.Регистратор,
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Назначение,
	|	ТабРег.Серия,
	|	ТабРег.ВидЗапасов,
	|	ТабРег.НомерГТД
	|ИМЕЮЩИЕ Сумма(ТабРег.ПереданоОстаток) < 0  И ТабРегОбороты.Регистратор ЕСТЬ НЕ NULL
	|УПОРЯДОЧИТЬ ПО 
	|	ТабРегОбороты.Регистратор,
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Назначение,
	|	ТабРег.Серия,
	|	ТабРег.ВидЗапасов,
	|	ТабРег.НомерГТД
	|";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументПоступление") Цикл
		ДокОст = Выборка.ДокументПоступление.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ДокОст) <> Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрокТоварыКУдалению = Новый Массив;
		МассивСтрокСерииКУдалению = Новый Массив;

		ДокументИзменен = Ложь;
		Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Назначение") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("НомерГТД") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("ВидЗапасов") Цикл
							Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
								КоличествоТовары = (-1) * Выборка.КоличествоПередано;
								КоличествоСерии = (-1) * Выборка.КоличествоПередано;
								
								ПараметрыПоискаСтрок = Новый Структура();
								ПараметрыПоискаСтрок.Вставить("Номенклатура");
								ПараметрыПоискаСтрок.Вставить("Характеристика");
								ПараметрыПоискаСтрок.Вставить("Серия");
								ПараметрыПоискаСтрок.Вставить("Назначение");
								ПараметрыПоискаСтрок.Вставить("ВидЗапасов");
								ПараметрыПоискаСтрок.Вставить("НомерГТД");
								ЗаполнитьЗначенияСвойств(ПараметрыПоискаСтрок, Выборка);
								
								МассивСтрокТовары = ДокОст.Товары.НайтиСтроки(ПараметрыПоискаСтрок);
								Если МассивСтрокТовары.Количество() = 0 И ЗначениеЗаполнено(Выборка.Серия) Тогда
									// Попытка поиска без учета серии
									ПараметрыПоискаСтрок.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
									МассивСтрокТовары = ДокОст.Товары.НайтиСтроки(ПараметрыПоискаСтрок);
								КонецЕсли;
								СкорректироватьКоличествоВТЧДокумента(МассивСтрокТовары, КоличествоТовары, МассивСтрокТоварыКУдалению, ДокументИзменен);
								Если ДокОст.Серии.Количество() > 0 И ЗначениеЗаполнено(Выборка.Серия) Тогда
									ПараметрыПоискаСтрок = Новый Структура();
									ПараметрыПоискаСтрок.Вставить("Номенклатура");
									ПараметрыПоискаСтрок.Вставить("Характеристика");
									ПараметрыПоискаСтрок.Вставить("Серия");
									ПараметрыПоискаСтрок.Вставить("Назначение");
									МассивСтрокСерии = ДокОст.Серии.НайтиСтроки(ПараметрыПоискаСтрок);
									СкорректироватьКоличествоВТЧДокумента(МассивСтрокСерии, КоличествоСерии, МассивСтрокСерииКУдалению, ДокументИзменен);
								КонецЕсли;
							КонецЦикла;  //Серия
						КонецЦикла;//ВидЗапасов
					КонецЦикла; //НомерГТД
				КонецЦикла; //Назначение
			КонецЦикла; //Характеристика
		КонецЦикла; //Номенклатура
		Для Каждого СтрокаТовары Из МассивСтрокТоварыКУдалению Цикл
			ДокОст.Товары.Удалить(СтрокаТовары);
			ДокументИзменен = Истина;
		КонецЦикла;
		Для Каждого СтрокаСерии Из МассивСтрокСерииКУдалению Цикл
			ДокОст.Серии.Удалить(СтрокаСерии);
			ДокументИзменен = Истина;
		КонецЦикла;
		Если ДокументИзменен Тогда
			Если ДокОст.Товары.Количество() = 0 Тогда
				// Документ можно удалить целиком.
				ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокОст.Комментарий = Комментарий_СкорректированСверткойБазы;
				ДокОст.Дата = ДатаСверткиИБ;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СообщениеСвертки(НСтр("ru='Обработаны Товары у партнеров'"));
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковБонусныеБаллы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|ТабРег.Партнер КАК Партнер,
	|ТабРег.НачисленоОстаток КАК Начислено,
	|ТабРег.КСписаниюОстаток КАК КСписанию
	|ИЗ РегистрНакопления.БонусныеБаллы.Остатки(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО ТабРег.БонуснаяПрограммаЛояльности";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаПрограмма = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПрограмма.Следующий() Цикл
		ДокОст = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
		ДокОст.Дата = КонецДня(ДатаСверткиИБ);
		ДокОст.Комментарий = Комментарий_СформированСверткойБазы+" ["+КоличествоСформированныхДокументов+"]";
		ЗаполнитьЗначенияСвойств(ДокОст, ВыборкаПрограмма);
		ДокОст.ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Начисление;

		ВыборкаПартнеры = ВыборкаПрограмма.Выбрать();
		Пока ВыборкаПартнеры.Следующий() Цикл
			Баллы = ВыборкаПартнеры.Начислено - ВыборкаПартнеры.КСписанию;
			Если Баллы <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаБонусы = ДокОст.Начисление.Добавить();
			СтрокаБонусы.Партнер = ВыборкаПартнеры.Партнер;
			СтрокаБонусы.Баллы = Баллы;
		КонецЦикла;
		КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("НачислениеИСписаниеБонусныхБаллов", 
									"Начисление");
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПрочиеАктивыПассивы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Организация КАК Организация,
	|ТабРег.Подразделение КАК Подразделение,
	|ТабРег.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|ТабРег.Статья КАК Статья,
	|ТабРег.Аналитика КАК Аналитика,
	|ТабРег.СуммаОстаток КАК Сумма
	|ИЗ РегистрНакопления.ПрочиеАктивыПассивы.Остатки(&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.СуммаОстаток <> 0
	|ИТОГИ ПО Организация, Подразделение";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделение.Следующий() Цикл
			ДокОст = Документы.ВводОстатков.СоздатьДокумент();
			ДокОст.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихАктивовПассивов;
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаПодразделение);

			Выборка = ВыборкаПодразделение.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрАП = ДокОст.ПрочиеАктивыПассивы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрАП, Выборка);
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатков", 
									СокрЛП(Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихАктивовПассивов));
	КонецЕсли;

КонецПроцедуры

Процедура СкорректироватьКоличествоВТЧДокумента(МассивСтрокТЧ, КоличествоПередано, МассивСтрокКУдалению, ДокументИзменен)
	Для Каждого СтрокаТЧ Из МассивСтрокТЧ Цикл
		Если СтрокаТЧ.Количество > КоличествоПередано Тогда
			СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоПередано;
			КоличествоПередано = 0;
			ДокументИзменен = Истина;
		Иначе
			МассивСтрокКУдалению.Добавить(СтрокаТЧ);
			КоличествоПередано = КоличествоПередано - СтрокаТЧ.Количество;
		КонецЕсли;
		Если КоличествоПередано = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область ВспомогательныеПроцедурыДляФормированияДокументовВводаОстатков

Процедура ПолучитьТаблицыОстатковНаСкладах()
	//Остатки, по которым будут заполняться серии и помещения
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	//Остатки на складах по помещениям
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ 
	|ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|ТоварыНаСкладах.Характеристика КАК Характеристика,
	|ТоварыНаСкладах.Склад КАК Склад,
	|ТоварыНаСкладах.Помещение КАК Помещение,
	|ТоварыНаСкладах.Назначение КАК Назначение,
	|ТоварыНаСкладах.ВНаличииОстаток КАК Количество
	|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ГраницаОст,  
	|					Склад.ИспользоватьСкладскиеПомещения = Истина
	|				)	КАК ТоварыНаСкладах
	|ГДЕ ВНаличииОстаток>0";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	ТаблицаОстаткиНаСкладахПоПомещениям = Результат.Выгрузить();
	
	ТаблицаОстаткиНаСкладахПоНазначению = Новый ТаблицаЗначений;
	Если ИспользоватьНазначения Тогда
		ТаблицаОстаткиНаСкладахПоНазначению = ТаблицаОстаткиНаСкладахПоПомещениям.Скопировать();
		ТаблицаОстаткиНаСкладахПоНазначению.Индексы.Добавить("Номенклатура, Характеристика, Склад, Помещение");
	КонецЕсли;
	ТаблицаОстаткиНаСкладахПоПомещениям.Индексы.Добавить("Номенклатура, Характеристика, Склад");

	//Остатки по сериям для  стратегии Авторасчет серий по FEFO
	Запрос = Новый Запрос; 

	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Назначение,
	|	Склад,
	|	Помещение,
	|	Сумма(КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиСерийПоFEFO
	|ИЗ (
	|	ВЫБРАТЬ 
	|		ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|		ДвиженияСерийТоваров.Характеристика КАК Характеристика,
	|		ДвиженияСерийТоваров.Серия КАК Серия,
	|		ДвиженияСерийТоваров.Назначение КАК Назначение,
	|		ДвиженияСерийТоваров.Отправитель КАК Склад,
	|		ДвиженияСерийТоваров.ПомещениеОтправителя КАК Помещение,
	|		(-1)*ДвиженияСерийТоваров.Количество КАК КоличествоОстаток
		|ИЗ РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ТЧПолитикаУчетаСерий
	|		ПО ТЧПолитикаУчетаСерий.Склад = ДвиженияСерийТоваров.Отправитель
	|			И ТЧПолитикаУчетаСерий.Ссылка = ДвиженияСерийТоваров.Номенклатура.ВидНоменклатуры
	|	ГДЕ ТЧПолитикаУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий)
	|		И ДвиженияСерийТоваров.Отправитель ССЫЛКА Справочник.Склады
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|		ДвиженияСерийТоваров.Характеристика КАК Характеристика,
	|		ДвиженияСерийТоваров.Серия КАК Серия,
	|		ДвиженияСерийТоваров.Назначение КАК Назначение,
	|		ДвиженияСерийТоваров.Получатель КАК Склад,
	|		ДвиженияСерийТоваров.ПомещениеПолучателя КАК Помещение,
	|		ДвиженияСерийТоваров.Количество КАК КоличествоОстаток
	|	ИЗ РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ТЧПолитикаУчетаСерий
	|		ПО ТЧПолитикаУчетаСерий.Склад = ДвиженияСерийТоваров.Получатель
	|			И ТЧПолитикаУчетаСерий.Ссылка = ДвиженияСерийТоваров.Номенклатура.ВидНоменклатуры
	|	ГДЕ ТЧПолитикаУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий)
	|		И ДвиженияСерийТоваров.Получатель ССЫЛКА Справочник.Склады
	|	) КАК ТабСвод
	|СГРУППИРОВАТЬ ПО 
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Назначение,
	|	Склад,
	|	Помещение
	|;
	|ВЫБРАТЬ 
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	ТоварыНаСкладах.Помещение КАК Помещение,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Серия КАК Серия,
	|	ТоварыНаСкладах.Назначение КАК Назначение,
	|	ОстаткиСерийПоFEFO.Серия КАК СерияПоFEFO,
	|	ЕстьNULL(ОстаткиСерийПоFEFO.КоличествоОстаток,0) КАК КоличествоПоFEFO,
	|	ТоварыНаСкладах.ВНаличииОстаток КАК Количество
	|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ГраницаОст, 
	|							(Склад.ИспользоватьСерииНоменклатуры = Истина 
	|							И Номенклатура.ВидНоменклатуры.ИспользоватьСерии = Истина) 
	|				)	КАК ТоварыНаСкладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСерийПоFEFO 
	|ПО  ТоварыНаСкладах.Номенклатура = ОстаткиСерийПоFEFO.Номенклатура И
	|	ТоварыНаСкладах.Характеристика = ОстаткиСерийПоFEFO.Характеристика И
	|	ТоварыНаСкладах.Склад = ОстаткиСерийПоFEFO.Склад И
	|	ТоварыНаСкладах.Помещение = ОстаткиСерийПоFEFO.Помещение И
	|	ТоварыНаСкладах.Назначение = ОстаткиСерийПоFEFO.Назначение И
	|	ЕстьNULL(ОстаткиСерийПоFEFO.КоличествоОстаток,0) > 0 
	|ГДЕ ВНаличииОстаток>0 
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Помещение,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика,
	|	ТоварыНаСкладах.Серия,
	|	ТоварыНаСкладах.Назначение,
	|	ОстаткиСерийПоFEFO.Серия.ГоденДо Убыв
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаОстаткиНаСкладахПоСериям = Новый ТаблицаЗначений;
	Для Каждого КолонкаТЗ Из ТаблицаОстаткиНаСкладахПоПомещениям.Колонки Цикл
		ТаблицаОстаткиНаСкладахПоСериям.Колонки.Добавить(КолонкаТЗ.Имя, КолонкаТЗ.ТипЗначения);
	КонецЦикла;
	ТаблицаОстаткиНаСкладахПоСериям.Колонки.Добавить("Серия");
	Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("Назначение") Цикл
							Если ЗначениеЗаполнено(Выборка.Серия) Тогда
								НоваяСтрока = ТаблицаОстаткиНаСкладахПоСериям.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								Продолжить;
							КонецЕсли;
							//Серии вычисляем по FEFO
							КоличествоРаспределить = Выборка.Количество;
							Пока Выборка.Следующий() Цикл
								Если Выборка.КоличествоПоFEFO <= 0 ИЛИ НЕ ЗначениеЗаполнено(Выборка.СерияПоFEFO) Тогда
									Продолжить;
								КонецЕсли;
								НоваяСтрока = ТаблицаОстаткиНаСкладахПоСериям.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								НоваяСтрока.Серия = Выборка.СерияПоFEFO;
								НоваяСтрока.Количество = Мин(Выборка.КоличествоПоFEFO, КоличествоРаспределить);
								КоличествоРаспределить = КоличествоРаспределить - НоваяСтрока.Количество;
								Если КоличествоРаспределить = 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если КоличествоРаспределить > 0 Тогда
								//Недостающее запишем с пустой серией
								НоваяСтрока = ТаблицаОстаткиНаСкладахПоСериям.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								НоваяСтрока.Количество = КоличествоРаспределить;
							КонецЕсли;
						КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Назначение")
					КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
				КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
			КонецЦикла;//Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
	КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	ТаблицаОстаткиНаСкладахПоСериям.Индексы.Добавить("Номенклатура, Характеристика, Склад, Помещение");
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ПорядковыйНомерДокумента = 0, Выборка, ЗаполнятьФлагиОтраженияВУчетах = Истина)
	ДокОст.Дата = КонецДня(ДатаСверткиИБ);
	ДокОст.Комментарий = Комментарий_СформированСверткойБазы+?(ПорядковыйНомерДокумента>0," ["+ПорядковыйНомерДокумента+"]","");
	ДокОст.Ответственный =  ПараметрыСеанса.ТекущийПользователь;
	ЗаполнитьЗначенияСвойств(ДокОст, Выборка);
	Если ЗаполнятьФлагиОтраженияВУчетах Тогда
		ДокОст.ОтражатьВОперативномУчете = Истина;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
			ДокОст.ОтражатьВБУиНУ = Истина;
			ДокОст.ОтражатьВУУ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаСобственныеТовары(Выборка, КоличествоСформированныхДокументов, ЕстьСФ = Ложь)
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("СчетФактура") Цикл
						ДокОст = Документы.ВводОстатков.СоздатьДокумент();
						ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
						ДокОст.ЦенаВключаетНДС = Истина;
						Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
							ДокОст.Контрагент = Выборка.СчетФактура.Контрагент;
							Если НЕ ЗначениеЗаполнено(ДокОст.Партнер) Тогда
								ДокОст.Партнер = Выборка.СчетФактура.Контрагент.Партнер;
							КонецЕсли;
						КонецЕсли;

						СоответствиеДокументовПоПомещениям = Новый Соответствие();

						Пока Выборка.Следующий() Цикл
							ВыбранныеВариантыПомещений = Новый Массив;
							Если ЕстьСФ Тогда
								КоличествоРаспределить = Мин(Выборка.Количество, Выборка.КоличествоМаксимум);
							Иначе 
								КоличествоРаспределить = Выборка.Количество;
							КонецЕсли;
							
							//Определим помещение
							Если Выборка.ИспользоватьСкладскиеПомещения Тогда
								ПодобратьПодходящиеПомещения(Выборка, ВыбранныеВариантыПомещений, КоличествоРаспределить);
							КонецЕсли; //Если Выборка.ИспользоватьСкладскиеПомещения Тогда
							Если НЕ Выборка.ИспользоватьСкладскиеПомещения ИЛИ ВыбранныеВариантыПомещений.Количество() = 0 Тогда
								ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ДокОст.Склад, ДокОст.Помещение, ДокОст.Дата, Истина);
								Если ИспользоватьАдресноеХранение И НЕ ЗначениеЗаполнено(ДокОст.ЗонаПриемки) Тогда
									ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(ДокОст.Склад, ДокОст.Помещение);
								КонецЕсли;
								НоваяСтрока = ДокОст.Товары.Добавить();
								ЗаполнитьСуммыИКоличестваТабличнойЧасти(НоваяСтрока, Выборка, ЕстьСФ);
							Иначе
								
								Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
									ТекПомещение = СтрокаПомещение.Помещение;
									НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);

									НоваяСтрока = ДокОст.Товары.Добавить();
									ЗаполнитьСуммыИКоличестваТабличнойЧасти(НоваяСтрока, Выборка, ЕстьСФ);
									
									//Пересчитаем суммы и количества в соответствии с остатком по помещению
									КоличествоПоПомещению = Мин(КоличествоРаспределить, СтрокаПомещение.Количество);
									СтрокаПомещение.Количество = СтрокаПомещение.Количество - КоличествоПоПомещению;
									Если КоличествоПоПомещению <> НоваяСтрока.Количество Тогда
										КоэффициентПересчета = КоличествоПоПомещению / Выборка.Количество;
										НоваяСтрока.Количество = КоличествоПоПомещению;
										НоваяСтрока.Сумма = ОКР(КоэффициентПересчета * НоваяСтрока.Сумма,2);
										НоваяСтрока.СуммаБезНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаБезНДС,2);
										НоваяСтрока.СуммаСНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаСНДС,2);
										НоваяСтрока.СуммаНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаНДС,2);
										НоваяСтрока.СуммаРегл = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаРегл,2);
										НоваяСтрока.НДСРегл = ОКР(КоэффициентПересчета * НоваяСтрока.НДСРегл,2);
									КонецЕсли;
									//Заполним связанные данные
									ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
									КоличествоРаспределить = КоличествоРаспределить - НоваяСтрока.Количество;
									Если КоличествоРаспределить <=0 Тогда
										Прервать;
									КонецЕсли;
								КонецЦикла; //Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
								Если КоличествоРаспределить > 0 Тогда
									//не все распределилось по помещениям
									//Возможно, это товары к поступлению по ордерной схеме
									//Попытка определить помещение
									//Если не нашлось - будет пустое помещение
									ТекПомещение = ПроверитьПоступлениеПоОрдеру(Выборка, КоличествоРаспределить);
									НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
									НоваяСтрока = ДокОст.Товары.Добавить();
									ЗаполнитьСуммыИКоличестваТабличнойЧасти(НоваяСтрока, Выборка, ЕстьСФ);
									КоэффициентПересчета = КоличествоРаспределить / Выборка.Количество;
									НоваяСтрока.Количество = КоличествоРаспределить;
									НоваяСтрока.Сумма = ОКР(КоэффициентПересчета * НоваяСтрока.Сумма,2);
									НоваяСтрока.СуммаБезНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаБезНДС,2);
									НоваяСтрока.СуммаСНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаСНДС,2);
									НоваяСтрока.СуммаНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаНДС,2);
									НоваяСтрока.СуммаРегл = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаРегл,2);
									НоваяСтрока.НДСРегл = ОКР(КоэффициентПересчета * НоваяСтрока.НДСРегл,2);
									ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
								КонецЕсли;
							КонецЕсли;  //Если НЕ Выборка.ИспользоватьСкладскиеПомещения ИЛИ ВыбранныеВариантыПомещений.Количество() = 0 Тогда
						КонецЦикла; //Пока Выборка.Следующий() Цикл
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
						СоответствиеДокументовПоПомещениям.Вставить(ДокОст.Помещение, ДокОст.Ссылка);
						Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
							ДокОст = ЭлементСоответствия.Значение.ПолучитьОбъект();
							Если ДокОст.Товары.Количество()=0 Тогда
								ДокОст.Удалить();
								Продолжить;
							КонецЕсли;
							Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
								ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
							КонецЕсли;

							Если НЕ ЗначениеЗаполнено(ДокОст.ТипОперации) Тогда
								ДокОст.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров;
							КонецЕсли;
							ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ДокОст.Склад, ДокОст.Помещение, ДокОст.Дата, Истина);
							Если ИспользоватьАдресноеХранение И НЕ ЗначениеЗаполнено(ДокОст.ЗонаПриемки) Тогда
								ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(ДокОст.Склад, ДокОст.Помещение);
							КонецЕсли;

							
							//Заполним серии для тех строк, где это необходимо
							ЗаполнитьСерииТоваров(ДокОст);
							//Заполним назначения товаров
							ЗаполнитьНазначенияТоваров(ДокОст);
							Если НЕ ЗначениеЗаполнено(ДокОст.Контрагент) И ЗначениеЗаполнено(ДокОст.Партнер) Тогда
								ДокОст.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер);
							КонецЕсли;
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
						КонецЦикла;  //Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
						// Если заполнены данные счета-фактуры, необходимо создать счет-фактуру полученный на основании документа ввода остатков
						Если ЗначениеЗаполнено(Выборка.СчетФактура) И ТипЗнч(Выборка.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
							ДокСФ = Выборка.СчетФактура.Скопировать();
							ДокСФ.Дата = Выборка.ДатаСчетаФактуры;
							ДокСФ.Номер = Выборка.НомерСчетаФактуры;
							ДокСФ.ДокументыОснования.Очистить();
							СтрокаОснование = ДокСФ.ДокументыОснования.Добавить();
							СтрокаОснование.ДокументОснование = ДокОст.Ссылка;
							ДокСФ.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
					КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("СчетФактура") Цикл
				КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
			КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
КонецПроцедуры

Функция ПроверитьПоступлениеПоОрдеру(Выборка, КоличествоПоступило)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|РегКПоступлению.ДокументПоступления КАК Док
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ РегистрНакопления.ТоварыКПоступлению.Остатки(&ГраницаОст, Номенклатура = &Номенклатура 
	|												И Склад = &Склад 
	|												И Характеристика = &Характеристика) КАК РегКПоступлению
	|ГДЕ КОформлениюОрдеровОстаток > 0 
	|	И НЕ (РегКПоступлению.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками)
	|	И РегКПоступлению.ДокументПоступления.Организация = &Организация
	|;
	|ВЫБРАТЬ
	|РегОбороты.Регистратор.Помещение КАК Помещение,
	|Сумма(РегОбороты.КОформлениюОрдеровРасход) КАК Количество
	|ИЗ РегистрНакопления.ТоварыКПоступлению.Обороты(&ГраницаОст,,Регистратор,
	|										Номенклатура = &Номенклатура
	|										И Склад = &Склад 
	|										И Характеристика = &Характеристика 
	|										И ДокументПоступления В (ВЫБРАТЬ Док ИЗ Распоряжения)
	|										) КАК РегОбороты
	|ГДЕ РегОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерНаТовары И РегОбороты.КОформлениюОрдеровРасход > 0
	|СГРУППИРОВАТЬ ПО РегОбороты.Регистратор.Помещение
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Запрос.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Выборка.Характеристика);
	Запрос.УстановитьПараметр("Организация", Выборка.Организация);
	Запрос.УстановитьПараметр("Склад", Выборка.Склад);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.СкладскиеПомещения.ПустаяСсылка();
	КонецЕсли;
	ВыборкаПоОрдеру = Результат.Выбрать();
	Пока ВыборкаПоОрдеру.Следующий() Цикл
		Если ВыборкаПоОрдеру.Количество >= КоличествоПоступило Тогда
			Возврат ВыборкаПоОрдеру.Помещение;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.СкладскиеПомещения.ПустаяСсылка();
КонецФункции

Процедура ЗаполнитьСуммыИКоличестваТабличнойЧасти(НоваяСтрока, Выборка, ЕстьСФ)
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Номенклатура, Характеристика, Количество, СтавкаНДС, НомерГТД");

	//Заполнение сумм и количества
	Если ЕстьСФ Тогда
		Если Выборка.Количество <= Выборка.КоличествоМаксимум Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,"Сумма, СуммаБезНДС, СуммаНДС, СуммаРегл, НДСРегл");
		Иначе
			НоваяСтрока.Количество = Выборка.КоличествоМаксимум;
			КоэффициентПересчета = Выборка.КоличествоМаксимум / Выборка.Количество;
			НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.Сумма, 2);
			НоваяСтрока.СуммаБезНДС = Окр(КоэффициентПересчета * Выборка.СуммаБезНДС, 2);
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
			НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.СуммаРегл, 2);
			НоваяСтрока.НДСРегл = Окр(КоэффициентПересчета * Выборка.НДСРегл, 2);
		КонецЕсли;
	Иначе
		Если Выборка.Партии_Количество > 0 И Выборка.Сумма > 0 Тогда
			Если Выборка.Партии_Количество = Выборка.Количество Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,"Сумма, СуммаБезНДС, СуммаНДС, СуммаРегл, НДСРегл");
			Иначе
				КоэффициентПересчета = Выборка.Количество / Выборка.Партии_Количество;
				НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.Сумма, 2);
				НоваяСтрока.СуммаБезНДС = Окр(КоэффициентПересчета * Выборка.СуммаБезНДС, 2);
				НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
				НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.СуммаРегл, 2);
				НоваяСтрока.НДСРегл = Окр(КоэффициентПересчета * Выборка.НДСРегл, 2);
			КонецЕсли;
		ИначеЕсли Выборка.Себестоимость_Стоимость > 0 И Выборка.Себестоимость_Количество > 0 Тогда
			//Суммы заполняем по данным о себестоимости
			КоэффициентПересчета = Выборка.Количество / Выборка.Себестоимость_Количество;
			НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.Себестоимость_Стоимость, 2);
			НоваяСтрока.СуммаБезНДС = Окр(КоэффициентПересчета * Выборка.Себестоимость_СтоимостьБезНДС, 2);
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
			НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.Себестоимость_СтоимостьРегл, 2);
			НоваяСтрока.НДСРегл = ?(НоваяСтрока.СуммаНДС = 0, 0, Окр(НоваяСтрока.СуммаРегл * НоваяСтрока.СуммаНДС / НоваяСтрока.Сумма,2));
		КонецЕсли;
	КонецЕсли;
	
	//Заполним связанные данные
	ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
	Если НоваяСтрока.Количество > 0 Тогда
		НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество,2);
	КонецЕсли;
	Если  НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
		Если НоваяСтрока.СуммаНДС <> 0 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодобратьПодходящиеПомещения(Выборка, ВыбранныеВариантыПомещений, Количество, УчитыватьСерии = Ложь)
	//Определим помещение
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Склад");
	Если УчитыватьСерии Тогда
		СтруктураОтбора.Вставить("Серия");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
	
	МассивСтрокОстаткиПоПомещениям = ТаблицаОстаткиНаСкладахПоПомещениям.НайтиСтроки(СтруктураОтбора);
	//проход №1 - ищем все количество в одном помещении, берем наименьшее из возможных
	ПодходящиеВарианты = Новый Массив;
	
	Для Каждого СтрокаОстаток ИЗ МассивСтрокОстаткиПоПомещениям Цикл
		Если СтрокаОстаток.Количество < Количество Тогда
			Продолжить;
		КонецЕсли;
		ПодходящиеВарианты.Добавить(СтрокаОстаток);
	КонецЦикла;
	Если ПодходящиеВарианты.Количество() > 0 Тогда
		ОптимальныйВариант = Неопределено;
		Для Каждого СтрокаОстаток ИЗ ПодходящиеВарианты Цикл
			Если ОптимальныйВариант = Неопределено Тогда
				ОптимальныйВариант = СтрокаОстаток;
			ИначеЕсли ОптимальныйВариант.Количество > СтрокаОстаток.Количество Тогда
				ОптимальныйВариант = СтрокаОстаток;
			КонецЕсли;
		КонецЦикла;
		ВыбранныеВариантыПомещений.Добавить(ОптимальныйВариант);
	Иначе
		//Надо распределить количество по нескольким помещениям
		КоличествоРаспределить = Количество;
		Для Каждого СтрокаОстаток ИЗ МассивСтрокОстаткиПоПомещениям Цикл
			Если СтрокаОстаток.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			ВыбранныеВариантыПомещений.Добавить(СтрокаОстаток);
			КоличествоРаспределить = КоличествоРаспределить - СтрокаОстаток.Количество;
			Если КоличествоРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;  //Если ПодходящиеВарианты.Количество() > 0 Тогда

КонецПроцедуры

Процедура НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ДокОст, 
													СоответствиеДокументовПоПомещениям, 
													КоличествоСформированныхДокументов, 
													ИмяДокумента = "ВводОстатков")
	Если ТекПомещение = ДокОст.Помещение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокОст.Помещение) И ДокОст.Товары.Количество()=0 Тогда
		ДокОст.Помещение = ТекПомещение;
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		СоответствиеДокументовПоПомещениям.Вставить(ТекПомещение, ДокОст.Ссылка);
	Иначе
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		СоответствиеДокументовПоПомещениям.Вставить(ДокОст.Помещение, ДокОст.Ссылка);
		
		ДокСсылка = СоответствиеДокументовПоПомещениям.Получить(ТекПомещение);
		Если ДокСсылка = Неопределено Тогда
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			
			ДокОст = Документы[ИмяДокумента].СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, ?(ИмяДокумента = "ВводОстатков", Истина, Ложь));
			
			ДокОст.Помещение = ТекПомещение;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			СоответствиеДокументовПоПомещениям.Вставить(ТекПомещение, ДокОст.Ссылка);
		Иначе
			ДокОст = ДокСсылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСерииТоваров(ДокОст)
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокОст, Документы.ВводОстатков));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокОст,ПараметрыУказанияСерий);
	
	Для Каждого СтрокаТовары Из ДокОст.Товары Цикл
		Если СтрокаТовары.СтатусУказанияСерий = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Склад, Помещение");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТовары);
		СтруктураОтбора.Склад = ДокОст.Склад;
		СтруктураОтбора.Помещение = ДокОст.Помещение;

		СтрокиСерии = ТаблицаОстаткиНаСкладахПоСериям.НайтиСтроки(СтруктураОтбора);
		Если СтрокиСерии.Количество() > 0 Тогда
			КоличествоРаспределить = СтрокаТовары.Количество;
			Для каждого СтрокаСерии ИЗ СтрокиСерии Цикл
				Если КоличествоРаспределить = 0 Тогда
					Прервать;
				КонецЕсли;
				Если СтрокаСерии.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрокаСерии = ДокОст.Серии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии);
				НоваяСтрокаСерии.Количество = Мин(СтрокаСерии.Количество, КоличествоРаспределить);
				НоваяСтрокаСерии.КоличествоУпаковок = НоваяСтрокаСерии.Количество;
				
				КоличествоРаспределить = КоличествоРаспределить - НоваяСтрокаСерии.Количество;
				СтрокаСерии.Количество = СтрокаСерии.Количество - НоваяСтрокаСерии.Количество;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;  //Для Каждого СтрокаТовары Из ДокОст.Товары Цикл
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокОст,ПараметрыУказанияСерий);

КонецПроцедуры

Процедура ЗаполнитьНазначенияТоваров(ДокОст)
	Если НЕ ИспользоватьНазначения Тогда
		Возврат;
	КонецЕсли;
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТовары Из ДокОст.Товары Цикл
		Если СтрокаТовары.Количество = 0 Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Склад, Помещение");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТовары);
		СтруктураОтбора.Склад = ДокОст.Склад;
		СтруктураОтбора.Помещение = ДокОст.Помещение;
		СтрокиНазначение = ТаблицаОстаткиНаСкладахПоНазначению.НайтиСтроки(СтруктураОтбора);
		Если СтрокиНазначение.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли СтрокиНазначение.Количество() = 1 И
			СтрокиНазначение[0].Количество = СтрокаТовары.Количество Тогда
			СтрокаТовары.Назначение = СтрокиНазначение[0].Назначение;
			СтрокиНазначение[0].Количество = 0;
			Продолжить;
		КонецЕсли;
		
		КоличествоРаспределить = СтрокаТовары.Количество;
		Для каждого СтрокаНазначение ИЗ СтрокиНазначение Цикл
			Если КоличествоРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаНазначение.Количество = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокаНазначение.Назначение) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТовары = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
			НоваяСтрокаТовары.Количество = Мин(СтрокаНазначение.Количество, КоличествоРаспределить);
			НоваяСтрокаТовары.КоличествоУпаковок = НоваяСтрокаТовары.Количество;
			НоваяСтрокаТовары.Назначение = СтрокаНазначение.Назначение;
			
			КоличествоРаспределить = КоличествоРаспределить - НоваяСтрокаТовары.Количество;
			СтрокаНазначение.Количество = СтрокаНазначение.Количество - НоваяСтрокаТовары.Количество;
		КонецЦикла;
		Если КоличествоРаспределить = 0 Тогда
			//Удалим старую строку в ТЧ Товары, которая распределилась полностью по назначениям
			МассивСтрокКУдалению.Добавить(СтрокаТовары);
		Иначе
			//Уменьшим количество в старой строке товаров на то, что не удалось распределить
			СтрокаТовары.Количество = КоличествоРаспределить;
			СтрокаТовары.КоличествоУпаковок = КоличествоРаспределить;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКУдалению ИЗ МассивСтрокКУдалению Цикл
		ДокОст.Товары.Удалить(СтрокаКУдалению);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЯчейкуЗонаПриемки(Склад, Помещение)
	ТекЗонаПриемки = Неопределено;
	СтрТаб = СкладскиеЯчейки_ЗонаПриемки.НайтиСтроки(Новый Структура("Склад, Помещение", Склад, Помещение));
	Если СтрТаб.Количество() > 0 Тогда
		ТекЗонаПриемки = СтрТаб[0].ЗонаПриемки;
	КонецЕсли;
	
	Если ТекЗонаПриемки = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ Справочник.СкладскиеЯчейки
		|ГДЕ Владелец = &Склад И ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)
		|	И Помещение = &Помещение
		|	И НЕ ПометкаУдаления";
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Помещение", Помещение);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекЗонаПриемки = Выборка.Ссылка;
		Иначе
			ЯчейкаОбъект = Справочники.СкладскиеЯчейки.СоздатьЭлемент();
			ЯчейкаОбъект.Владелец = Склад;
			ЯчейкаОбъект.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Приемка;
			ЯчейкаОбъект.Помещение = Помещение;
			ЯчейкаОбъект.ИспользованиеПериодичностиИнвентаризацииЯчейки = Перечисления.ВариантыИспользованияПериодическойИнвентаризацииЯчеек.НеИспользовать;
			ЯчейкаОбъект.Код = НСтр("ru='Приемка'");
			ЯчейкаОбъект.Наименование = НСтр("ru='Зона приемки'");
			ЯчейкаОбъект.Записать();
		КонецЕсли;
		СтрТаб = СкладскиеЯчейки_ЗонаПриемки.Добавить();
		СтрТаб.Склад = Склад;
		СтрТаб.Помещение = Помещение;
		СтрТаб.ЗонаПриемки = ТекЗонаПриемки;
	КонецЕсли;
	Возврат ТекЗонаПриемки;
КонецФункции

Процедура ЗаполнитьДанныеПоУпаковкам(СтрокаТЧ)
	ТекНоменклатура = СтрокаТЧ.Номенклатура;
	Если НЕ ЗначениеЗаполнено(ТекНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	ДанныеУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекНоменклатура, "ИспользоватьУпаковки, НаборУпаковок");
	Если НЕ ДанныеУпаковки.ИспользоватьУпаковки ИЛИ НЕ ЗначениеЗаполнено(ДанныеУпаковки.НаборУпаковок) Тогда
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	Числитель,
	|	Знаменатель
	|ИЗ Справочник.УпаковкиЕдиницыИзмерения
	|ГДЕ Владелец = &Владелец И НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Числитель";
	Если ДанныеУпаковки.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		Запрос.УстановитьПараметр("Владелец", ТекНоменклатура);
	Иначе
		Запрос.УстановитьПараметр("Владелец", ДанныеУпаковки.НаборУпаковок);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаТЧ.Упаковка = Выборка.Ссылка;
		СтрокаТЧ.КоличествоУпаковок = Окр(СтрокаТЧ.Количество * Выборка.Знаменатель / Выборка.Числитель, 3);
	Иначе
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьКомментарийДокумента(ДокОст, ТекстДополнения)
	Если Найти(СокрЛП(ДокОст.Комментарий), ТекстДополнения) = 0 Тогда
		ДокОст.Комментарий = СокрЛП(ДокОст.Комментарий) + "#" + ТекстДополнения;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос)
	Запрос.УстановитьПараметр("ГраницаОст", Новый Граница(КонецДня(ДатаСверткиИБ),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОст", КонецДня(ДатаСверткиИБ));
КонецПроцедуры

Функция ПолучитьМассивРегистровНакопленияДокумента(ИмяЗаказа)
	МассивРегистров = Новый Массив;
	Для Каждого Регистр ИЗ Метаданные.Документы[ИмяЗаказа].Движения Цикл
		Если Найти(НРег(Регистр.ПолноеИмя()),"сведений")>0 Тогда
			Продолжить;
		КонецЕсли;
		МассивРегистров.Добавить(Регистр.Имя);
	КонецЦикла;
	Возврат МассивРегистров;
КонецФункции

Процедура ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ЗаказСсылка)
	Для Каждого Рег ИЗ МассивРегистров Цикл
		НаборЗаписей = РегистрыНакопления[Рег].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ЗаказСсылка);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			СообщениеСвертки(НСтр("ru='Ошибка при очистке движений документа'")+ ": " + ЗаказСсылка + ", регистр накопления " + Рег, Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ПровестиИлиЗаписатьЗаказ(ДокОбъект)
	ЕстьОшибкаПроведения = Ложь;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЕстьОшибкаПроведения = Истина;
		СообщениеСвертки(НСтр("ru='Ошибка при проведении документа'")+ ": " + ДокОбъект, Истина, ОписаниеОшибки());
	КонецПопытки;
	Если ЕстьОшибкаПроведения Тогда
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СообщениеСвертки(НСтр("ru='Ошибка при записи документа'")+ ": " + ДокОбъект, Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеДокумента(СтрокаДокумента)
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) Тогда
		СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Если СтрокаДокумента.СуммаНДС > 0 
			И СтрокаДокумента.СуммаБезНДС > 0 Тогда
			СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КНДС = СтрокаДокумента.Сумма / СтрокаДокумента.СуммаБезНДС;
			Если КНДС > 1.15 Тогда
				СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			ИначеЕсли КНДС > 1.1 Тогда
				 СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			ИначеЕсли КНДС > 1.09 Тогда
				СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли КНДС > 1 Тогда
				СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();

КурсыВалют = Новый Соответствие;
Комментарий_УдалитьПриСверткеБазы = НСтр("ru='[Удалить при свертке базы]'");
Комментарий_НеУдалятьПриСверткеБазы = НСтр("ru='[Не удалять при свертке базы]'");
Комментарий_СформированСверткойБазы = НСтр("ru='[Сформирован обработкой свертки базы]'");
Комментарий_СкорректированСверткойБазы = НСтр("ru='[Скорректирован обработкой свертки базы]'");
КоличествоСтрокВДокументеВводаОстатков = 10000;
ИспользоватьНазначения = Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.Получить();
СкладскиеЯчейки_ЗонаПриемки = Новый ТаблицаЗначений;
СкладскиеЯчейки_ЗонаПриемки.Колонки.Добавить("Склад");
СкладскиеЯчейки_ЗонаПриемки.Колонки.Добавить("Помещение");
СкладскиеЯчейки_ЗонаПриемки.Колонки.Добавить("ЗонаПриемки");

#КонецОбласти
СтруктураИспользованиеИтоговРегистровНакопления = Новый Структура;
#КонецОбласти

#КонецЕсли