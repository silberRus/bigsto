#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
		КлючНастроек = "";
	Иначе
		// Восстановление/сохранение настроек не доступно для вызова из текущих дел
		ФормаОткрытаИзТекущихДел = Параметры.Свойство("ЭтоТекущиеДела");
		КлючНазначенияИспользования = ?(ФормаОткрытаИзТекущихДел,
										"",
										Параметры.КлючНазначенияФормы);
		КлючНастроек                = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	ФормыОткрытаПоГиперссылке = Параметры.Свойство("ОтборыФормыСписка");
	
	Если ФормыОткрытаПоГиперссылке Тогда
		ОтборСклад = Параметры.ОтборыФормыСписка.ОтборСклад;
		ОтборТипыДокументов = Параметры.ОтборыФормыСписка.ОтборТипыДокументов;
		ОтборХозяйственныеОперации = Параметры.ОтборыФормыСписка.ОтборХозяйственныеОперации;
	Иначе
		ВосстановитьНастройки();
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	ПеречитатьКОформлению();
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(ИнформационнаяНадписьОтбор, ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Принять_ФормаСозданныеДокументы" Тогда
		ПеречитатьКОформлению();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВнутреннееПотреблениеТоваров"
		Или ИмяСобытия = "Запись_ПеремещениеТоваров" 
		Или ИмяСобытия = "Запись_СборкаТоваров" 
		Или ИмяСобытия = "Запись_ЗаказНаСборку"
		Или ИмяСобытия = "Запись_ЗаказНаПеремещение"
		Или ИмяСобытия = "Запись_ЗаказНаВнутреннееПотребление"
		Или ИмяСобытия = "Запись_РасходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_ПриходныйОрдерНаТовары" 
		Тогда
		ПеречитатьКОформлению(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаОформление(Команда)
	ПеречитатьКОформлению();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
	ПараметрыФормы,,,,,Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)

	ПриИзмененииОтбора();

КонецПроцедуры

&НаКлиенте
Процедура СостояниеНакладнойПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеОрдераПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоЗаказам(Команда)
	ОформитьНакладную(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузке(Команда)
	ОформитьНакладную(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	
	Если Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одной строки. Выполнение команды невозможно.'"));
	Иначе
		СписокДокументов = Новый СписокЗначений;
		Для каждого Идентификатор Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
			СтрокаТаблицы = СписокРаспоряженияНаОформление.НайтиПоИдентификатору(Идентификатор);
			Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказНаСборку")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.СборкаТоваров") Тогда
				СписокДокументов.Добавить(СтрокаТаблицы.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокДокументов.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для выбранных документов отчет не поддерживается. Выполнение команды невозможно.'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета",
			Новый Структура("ВходящиеДокументы", СписокДокументов));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРаспоряженияНаОформление

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНакладных

&НаКлиенте
Процедура ОформитьНакладную(ПоОрдерам)
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные,
				ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
		
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров
	ПараметрыСозданныхДокументов = ОформитьНакладнуюНаСервере(ПоОрдерам, ВыделенныеСтроки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОформитьНакладнуюНаСервере(ПоОрдерам, ВыделенныеСтроки)
	
	Перем СписокОшибок;
	
	МассивСтрок = Новый Массив();
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = СписокРаспоряженияНаОформление.НайтиПоИдентификатору(Идентификатор);
		МассивСтрок.Добавить(НайденнаяСтрока);
	КонецЦикла;
	
	СписокРаспоряжений = СписокРаспоряженияНаОформление.Выгрузить(МассивСтрок);
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = РазделитьЗаказыПоПолнымИменамНакладных(СписокРаспоряжений, ПоОрдерам, СписокОшибок);
	
	Если ДокументыПоТипамНакладных.Количество() > 0 Тогда
		Если ПоОрдерам Тогда
			
			// Если выделен один документ и есть хотя бы одна накладная - открывается форма перезаполнения накладной
			// Если нет накладных и документы можно сгруппировать в одну накладную - открывается форма новой накладной
			// Если нет накладных и документы нельзя сгруппировать - открывается форма списка созданных накладных
			
			ЕстьНакладная = ЕстьНакладная(ДокументыПоТипамНакладных);
			ЕстьОрдер = ЕстьОрдер(ДокументыПоТипамНакладных);
			ЕстьЗаказ = ЕстьЗаказ(ДокументыПоТипамНакладных, ПолныеИменаЗаказов.ВыгрузитьЗначения());
			
			ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
			Если ВсегоТаблиц > 1 Тогда
				
				Если ЕстьНакладная Тогда
					// Пакетно с исключением накладных и сообщением об исключенных документах
					// Распоряжения-накладные исключаются, т.к. должны быть обработаны индивидульно - нельзя ввести новую накладную 
					// по распоряжению-накладной
					
					ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок);
					ОсталосьТаблиц = ДокументыПоТипамНакладных.Количество();
					Если ОсталосьТаблиц > 0 Тогда
						ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
					КонецЕсли;
					
					Если ОсталосьТаблиц = 0 Тогда
						ТекстОшибки = НСтр("ru = 'Операция не выполнена.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
					ИначеЕсли ВсегоТаблиц <> ОсталосьТаблиц Тогда
						ТекстОшибки = НСтр("ru = 'Операция выполнена с ошибками.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
					КонецЕсли;
					
				Иначе
					// Пакетно если нет накладных
					ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
				КонецЕсли;
				
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				
				// Проверка наличия накладных
				// Если текущее распоряжение это заказ, и по нему есть накладные, открыть форму перезаполнения
				Если ЕстьНакладная И ЕстьЗаказ Тогда
					// Открытие формы перезаполнения
					ПараметрыФормы = ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
				Иначе
					// При попытке заполнить накладную по отсутствующему ордеру, накладная будет очищена - задаем вопрос пользователю
					Если ЕстьНакладная И Не ЕстьОрдер И Не РежимБезВопросов Тогда
						ТекстОшибки = НСтр("ru = 'Оформление по отгрузке (приемке) недоступно, поскольку не создано ни одного ордера.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
					Иначе
						// Если это распоряжение-накладная, или заказ без накладной - открытие формы накладной, существующей или новой
						ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// При оформлении по заказам всегда создается новая накладная
			
			// Открывается форма созданной накладной, в случае если совпали ключевые поля выделенных строк, и позволяет функциональная опция
			// В ином случае открывается форма со списком созданных накладных
			
			Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
				// Пакетно
				ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		Если ПоОрдерам Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по отгрузке (приемке)'"));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	КонецЕсли;
	
	РежимБезВопросов = Ложь;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьНакладная(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - накладная не создана. Остальные состояния подразумевают наличие накладной, либо накладную без заказа (состояние 4)
			Если Строка.СостояниеНакладной <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОрдер(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - ордер не создан. Остальные состояния подразумевают наличие ордера, либо что ордер не требуется (состояние 4)
			Если Строка.СостояниеОрдера <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьЗаказ(ДокументыПоТипамНакладных, ПолныеИменаЗаказов)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			ПолноеИмяРаспоряжения = Строка.Ссылка.Метаданные().ПолноеИмя();
			Если ПолныеИменаЗаказов.Найти(ПолноеИмяРаспоряжения) <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	ПараметрыФормы = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаСозданныеДокументы");
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		Если ПерваяСтрока.СостояниеНакладной > 0 Тогда
						
			ПолноеИмяРаспоряжения = ПерваяСтрока.Ссылка.Метаданные().ПолноеИмя();
			ПолноеИмяНакладной = ПолноеИмяНакладнойПоПолномуИмениРаспоряжения(ПолноеИмяРаспоряжения, ПерваяСтрока.СкладПолучатель);
			
			МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
			МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
			
			ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
			
			Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
			
				РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы);
			
			РезультатПроверки = МенеджерНакладной.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
			Если Не РезультатПроверки.ЕстьОшибки Тогда
				
				ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
				ПараметрыЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
				ПараметрыЗаполнения.Вставить("ФормаОткрыта", Ложь);
				ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
				ПараметрыЗаполнения.Вставить("МассивЗаказов", Заказы);
				ПараметрыЗаполнения.Вставить("Склад", ПерваяСтрока.Склад);
				
				ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
				ДокументОбъект.Заполнить(ПараметрыЗаполнения);
				
				ДокументОбъект.Дата = ТекущаяДатаСеанса();
				
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					// Добавить запись в историю работы пользователя.
					ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
					СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
					
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
							ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
					КонецПопытки;
					
				Иначе
					ТекстОшибки = НСтр("ru = 'Не удалось создать документ %1 на основании документа %2'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеНакладной.Синоним, Заказы[0]);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
				КонецЕсли;
			Иначе
				
				Для Каждого ТекстОшибки Из РезультатПроверки.ТекстОшибки Цикл
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки, Неопределено);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы.ВыгрузитьЗначения(), "ВнутреннееТовародвижениеФормаСозданныеДокументы");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ПолноеИмяРаспоряжения = ВыделеннаяСтрока.Ссылка.Метаданные().ПолноеИмя();
	ПолноеИмяНакладной = ПолноеИмяНакладнойПоПолномуИмениРаспоряжения(ПолноеИмяРаспоряжения, ВыделеннаяСтрока.СкладПолучатель);
	МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
	МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
	
	ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если ПолныеИменаНакладных.НайтиПоЗначению(Распоряжение.Метаданные().ПолноеИмя()) <> Неопределено Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
	Если ПоОрдерам И РаспоряженияНакладные.Количество() > 0 Тогда
		// Для существующих распоряжений-накладных не перезаполняется шапка документа
		ПерезаполняемаяНакладная = РаспоряженияНакладные[0];
		ЗначенияЗаполнения = Новый Структура("ЗаполнятьПоОрдеру, МассивЗаказов", Истина, Заказы);
		
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		ПараметрыФормы.Вставить("МассивЗаказов", Заказы);
		ПараметрыФормы.Вставить("Склад", ВыделеннаяСтрока.Склад);
	Иначе
		// Требуется создать новые накладные - нужно получить данные шапки документа и проверить их
			РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы);
		РезультатПроверки = МенеджерНакладной.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
		
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		ПараметрыФормы.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыФормы.Вставить("МассивЗаказов", Заказы);
		ПараметрыФормы.Вставить("Склад", ВыделеннаяСтрока.Склад);
		
		Если РезультатПроверки.ЕстьОшибки Тогда
			
			Для Каждого ТекстОшибки Из РезультатПроверки.ТекстОшибки Цикл
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
					ТекстОшибки, Неопределено);
			КонецЦикла;
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(ПерезаполняемаяНакладная) Тогда
		ПараметрыСОснованием.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыСОснованием.Вставить("Ключ", ПерезаполняемаяНакладная);
	КонецЕсли;
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ПолноеИмяРаспоряжения = ВыделеннаяСтрока.Ссылка.Метаданные().ПолноеИмя();
	ПолноеИмяНакладной = ПолноеИмяНакладнойПоПолномуИмениРаспоряжения(ПолноеИмяРаспоряжения, ВыделеннаяСтрока.СкладПолучатель);
	НайденнаяСтрока = ХозяйственныеОперацииИДокументы.НайтиСтроки(
		Новый Структура("ПолноеИмяДокумента, ХозяйственнаяОперация", ПолноеИмяНакладной, ВыделеннаяСтрока.ХозяйственнаяОперация))[0];
	МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
	МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
	
	Если ПравоДоступа("Добавление", МетаданныеНакладной) Или ПравоДоступа("Изменение", МетаданныеНакладной) Тогда
		
		Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
		
		ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
		
		ЗаголовокФормыПереоформления = НСтр("ru = 'Переоформление %1 по выбранным распоряжениям'");
		ИмяПереоформляемогоДокумента = "";
		
		Если ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию Тогда
			ИмяПереоформляемогоДокумента = НСтр("ru = 'списания товаров'");
		ИначеЕсли ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
			ИмяПереоформляемогоДокумента = НСтр("ru = 'передачи в эксплуатацию'");
		ИначеЕсли ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
			ИмяПереоформляемогоДокумента = НСтр("ru = 'сборки товаров'");
		ИначеЕсли ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
			ИмяПереоформляемогоДокумента = НСтр("ru = 'разборки товаров'");
		ИначеЕсли ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров Тогда
			ИмяПереоформляемогоДокумента = НСтр("ru = 'перемещения товаров'");
		ИначеЕсли ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
			ИмяПереоформляемогоДокумента = НСтр("ru = 'перемещения товаров между филиалами'");
		ИначеЕсли ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство Тогда
			ИмяПереоформляемогоДокумента = НСтр("ru = 'передачи в производство'");
		ИначеЕсли ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство Тогда
			ИмяПереоформляемогоДокумента = НСтр("ru = 'передачи в производство'");
		КонецЕсли;
		
		ЗаголовокФормыПереоформления = СтрШаблон(ЗаголовокФормыПереоформления, ИмяПереоформляемогоДокумента);
		
		НастройкиФормы = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
		НастройкиФормы.ИмяФормыНакладной = ИмяФормыНакладной;
		НастройкиФормы.Заголовок = ЗаголовокФормыПереоформления;
		
		Если НайденнаяСтрока.ПолноеИмяДокумента = Метаданные.Документы.СборкаТоваров.ПолноеИмя() Тогда
			НастройкиФормы.НакладнаяНаОтгрузку = Истина;
			НастройкиФормы.НакладнаяНаПриемку = Истина;
			
			ТекущаяСсылка = ?(Заказы.Количество() > 0, Заказы[0], ВыделеннаяСтрока.Ссылка);
			Ключ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСсылка, "Номенклатура, Характеристика, Склад");
			ЗаполнитьЗначенияСвойств(НастройкиФормы.ОсновнойТовар.Ключ, Ключ);
		Иначе
			НастройкиФормы.НакладнаяНаОтгрузку = Истина;
		КонецЕсли;
		
			РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы);
		
		РеквизитыШапки.Склад = ВыделеннаяСтрока.Склад;
		
		ПараметрыФормыПереоформления = Новый Структура();
		ПараметрыФормыПереоформления.Вставить("Заказы",                Заказы);
		ПараметрыФормыПереоформления.Вставить("Склад",                 ВыделеннаяСтрока.Склад);
		ПараметрыФормыПереоформления.Вставить("РеквизитыШапки",        РеквизитыШапки);
		ПараметрыФормыПереоформления.Вставить("НастройкиФормы",        НастройкиФормы);
		
		ПараметрыИИмяФормы = Новый Структура("ЕстьОшибки, ИмяФормы, Параметры", Ложь);
		
		ПараметрыИИмяФормы.ИмяФормы = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
		ПараметрыИИмяФормы.Параметры = ПараметрыФормыПереоформления;
		
		Возврат ПараметрыИИмяФормы;
	Иначе
		ОшибкаДоступа = НСтр("ru = 'Нет прав на добавление/изменение документа'") + " " + МетаданныеНакладной.Синоним;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
			ОшибкаДоступа, Неопределено);
			
		Возврат Новый Структура(); // Нет прав
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок)
	
	ТекстОшибки = НСтр("ru = 'Для распоряжения %1 действие не выполнено, так как выбрано несколько распоряжений с различающимися полями шапки, по которым уже существуют накладные.
							 |Выберите распоряжение отдельно, либо вместе с другими распоряжениями, с совпадающими полями Склад, Подразделение, Организация и Операция.'");
	
	ИзначальноеКоличество = ДокументыПоТипамНакладных.Количество();
	Для Счетчик = 1 По ИзначальноеКоличество Цикл
		Индекс = ИзначальноеКоличество - Счетчик;
		Таблица = ДокументыПоТипамНакладных[Индекс];
		
		Исключить = Ложь;
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			Если СтрокаТаблицы.СостояниеНакладной <> 1 И СтрокаТаблицы.СостояниеНакладной <> 4 Тогда
				Исключить = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Исключить Тогда
			
			Для Каждого Строка Из Таблица Цикл
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			КонецЦикла;
			
			ДокументыПоТипамНакладных.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНакладнуюОтветПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		РежимБезВопросов = Ложь;
		Возврат;
	КонецЕсли;
	
	РежимБезВопросов = Истина;
	
	ОформитьНакладную(ДополнительныеПараметры.ПоОрдерам);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	ШтрихкодированиеПечатныхФормВызовСервера.СсылкаНаЭлементСпискаПоШтрихкоду(
		Штрихкод, 
		ХозяйственныеОперацииИДокументы.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		
		ПараметрыОтбора = Новый Структура("Ссылка", Ссылка);
		
		ПоказатьЗначение(, Ссылка);
		Возврат;
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	ПеречитатьКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Новый Структура("Отбор, ПравоДоступаДобавление", Истина, Истина));
	ПравоСозданияНакладных = НайденныеСтроки.Количество() > 0;
	
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоОтгрузке.Видимость = ПравоСозданияНакладных
		И ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
		
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоЗаказам.Видимость = ПравоСозданияНакладных;
	
	Элементы.СостояниеВыполнения.Видимость = ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.СписокРаспоряженияНаОформлениеОрганизация.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		Элементы.СписокРаспоряженияНаОформлениеСклад.Видимость = Ложь;
		Элементы.ОтборСклад.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление.Дата", "СписокРаспоряженияНаОформлениеДатаДокумента");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	ТаблицаЗначенийДоступно = Обработки.ЖурналДокументовВнутреннегоТовародвижения.ИнициализироватьХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы.Выгрузить(),
		ОтборХозяйственныеОперации,
		ОтборТипыДокументов,
		КлючНастроек,
		Истина);
		
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаЗначенийДоступно);
	
	// При открытии по гиперссылке отбор может содержать операции, отсутствующие в данной форме.
	Если ОтборХозяйственныеОперации.Количество() > 0 Тогда
		
		МассивУдаляемых = Новый Массив();
		
		Для Каждого Строка Из ОтборХозяйственныеОперации Цикл
			ПараметрыОтбора = Новый Структура("ХозяйственнаяОперация", Строка.Значение);
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				МассивУдаляемых.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяОперация Из МассивУдаляемых Цикл
			ОтборХозяйственныеОперации.Удалить(УдаляемаяОперация);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьДоступныеТипыЗаказовИТипыНакладных();
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	ЗаполнитьСписокСостоянийОформленияНакладной(Элементы.СостояниеНакладной.СписокВыбора);
	ЗаполнитьСписокСоответствияОрдеров(Элементы.СоответствиеРасходногоОрдера.СписокВыбора);
	ЗаполнитьСписокСоответствияОрдеров(Элементы.СостояниеПриходногоОрдера.СписокВыбора);
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ПолноеИмяДокумента") Тогда
						
			Отбор = Новый Структура();
			Отбор.Вставить("ПолноеИмяДокумента", Параметры.СтруктураБыстрогоОтбора.ПолноеИмяДокумента);
			
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отбор = Истина;
			КонецЦикла;
			
			ЗаполнитьДоступныеТипыЗаказовИТипыНакладных();
			
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьОрдернуюСхемуПриОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	ИспользоватьОрдернуюСхемуПриПоступлении = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	
	Элементы.СписокРаспоряженияНаОформлениеСостояниеРасходногоОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.СписокРаспоряженияНаОформлениеСостояниеПриходногоОрдера.Видимость = ИспользоватьОрдернуюСхемуПриПоступлении;
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов()
	
	ЗаголовокПоУмолчанию = НСтр("ru = 'Внутренние документы (к оформлению)'");
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(), 
		КлючНазначенияФормыПоУмолчанию(), 
		ЗаголовокПоУмолчанию);
		
	УстановитьВидимостьДоступность();
	
	Заголовок = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	
	Если Заголовок<>ЗаголовокПоУмолчанию Тогда
		Заголовок = Заголовок + " " + НСтр("ru = 'к оформлению'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьКОформлению(ДокументДляПересчета = Неопределено)
	
	РаспоряженияДляПересчета = Обработки.ЖурналДокументовВнутреннегоТовародвижения.ПолучитьРаспоряженияПоДокументуОповещению(
									ДокументДляПересчета, ХозяйственныеОперацииИДокументы.Выгрузить());
	
	ЧастичныйПересчет = ЗначениеЗаполнено(ДокументДляПересчета);
	
	Если ЧастичныйПересчет И РаспоряженияДляПересчета.Количество() = 0 Тогда
		Возврат; // Процедура вызвана при записи документа по которому не возможен частичный пересчет
	КонецЕсли;
	
	ИмяРегистраТоварыКОтгрузке 					= Метаданные.РегистрыНакопления.ТоварыКОтгрузке.Имя;
	ИмяРегистраТоварыКОформлениюПоступления		= Метаданные.РегистрыНакопления.ТоварыКПоступлению.Имя;
	ИмяРегистраЗаказыНаПеремещение 				= Метаданные.РегистрыНакопления.ЗаказыНаПеремещение.Имя;
	ИмяРегистраЗаказыНаСборку 					= Метаданные.РегистрыНакопления.ЗаказыНаСборку.Имя;
	ИмяРегистраЗаказыНаВнутреннееПотребление 	= Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление.Имя;
	ИмяРегистраЗаказыНаПеремещение 				= Метаданные.РегистрыНакопления.ЗаказыНаПеремещение.Имя;
	
	ТаблицыЗапроса = Обработки.ЖурналДокументовВнутреннегоТовародвижения.ВернутьТекстыЗапросовКОформлению(
						ДокументДляПересчета, ХозяйственныеОперацииИДокументы.Выгрузить(), ОтборСклад);
	
	// Регистры ордеров 
	КОформлениюТоварыКОтгрузке = Неопределено;
	КОформлениюТоварыКПоступлению = Неопределено;
	
	ТаблицаКОформлению = СписокРаспоряженияНаОформление.Выгрузить(Новый Массив(),);
	
	Для Каждого ТаблицаЗапроса Из ТаблицыЗапроса Цикл
		Если ТаблицаЗапроса.Ключ = ИмяРегистраТоварыКОтгрузке Тогда
			КОформлениюТоварыКОтгрузке = ТаблицаЗапроса.Значение;
		ИначеЕсли ТаблицаЗапроса.Ключ = ИмяРегистраТоварыКОформлениюПоступления Тогда
			КОформлениюТоварыКПоступлению = ТаблицаЗапроса.Значение;
		ИначеЕсли ТаблицаЗапроса.Ключ = ИмяРегистраЗаказыНаПеремещение
			Или ТаблицаЗапроса.Ключ = ИмяРегистраЗаказыНаСборку
			Или ТаблицаЗапроса.Ключ = ИмяРегистраЗаказыНаВнутреннееПотребление Тогда 
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗапроса.Значение, ТаблицаКОформлению);
		КонецЕсли;
	КонецЦикла;
	
	
	Если НакладнаяЯвляетсяРаспоряжением
		И ЗначениеЗаполнено(КОформлениюТоварыКПоступлению) Тогда
		КОформлениюТоварыКПоступлению = ПостобработкаТоваровКПоступлению(КОформлениюТоварыКПоступлению);
	КонецЕсли;
	
	// Добавление данных таблиц ордеров в итоговую таблицу
	Если ЗначениеЗаполнено(КОформлениюТоварыКОтгрузке) Тогда 
		ДобавитьТаблицуОтгрузкиПриемкиВИтоговую(КОформлениюТоварыКОтгрузке, ТаблицаКОформлению);
	КонецЕсли;
	Если ЗначениеЗаполнено(КОформлениюТоварыКПоступлению) Тогда
		ДобавитьТаблицуОтгрузкиПриемкиВИтоговую(КОформлениюТоварыКПоступлению, ТаблицаКОформлению, Ложь);
	КонецЕсли;
	
	// Дополнение таблицы и отборы
	ТаблицаКОформлению = ЗаполнитьПоляШапкиДокументов(ТаблицаКОформлению);
	
	// Отборы по рассчитаным состояниям
	УстановитьОтборыПоСостояниям(ТаблицаКОформлению);
	
	// Полная загрузка таблицы, либо частичный пересчет
	ЗагрузитьТаблицуКОформлению(ТаблицаКОформлению, РаспоряженияДляПересчета, ЧастичныйПересчет);
	
	// silber { Вытащим партнеров для заказов на перемещение
	// решил не залазить в строки выше, (устал искать)
	
	ТипВнЗаказ = Тип("ДокументСсылка.ЗаказНаПеремещение");
	Для Каждого Строка Из СписокРаспоряженияНаОформление Цикл
		Если Строка.партнер.Пустая() И ТипЗнч(Строка.Ссылка) = ТипВнЗаказ и Не Строка.Ссылка.ДокументОснование.Пустая() Тогда
			Строка.партнер = Строка.Ссылка.ДокументОснование.Партнер; 
		КонецЕсли;
	КонецЦикла;
	
	// } silber
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуКОформлению(ТаблицаКОформлению, РаспоряженияДляПересчета, ЧастичныйПересчет)
	
	Если ЧастичныйПересчет
		И ТаблицаКОформлению.Количество() > 0 Тогда
		
		ПараметрыПоискаПоСсылке = Новый Структура("Ссылка");
		
		ВсеНайденныеСтрокиПоСсылке = Новый Массив();
		ОбработанныеСтроки = Новый Массив();
		
		// Частичный пересчет таблицы
		Для Каждого Строка Из ТаблицаКОформлению Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаПоСсылке, Строка);
			НайденныеСтрокиПоСсылке = СписокРаспоряженияНаОформление.НайтиСтроки(ПараметрыПоискаПоСсылке);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеНайденныеСтрокиПоСсылке, НайденныеСтрокиПоСсылке);
			
			БылаНайденаПодходящаяСтрока = Ложь;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтрокиПоСсылке Цикл
				Если Строка.ХозяйственнаяОперация = НайденнаяСтрока.ХозяйственнаяОперация
					И Строка.Склад                = НайденнаяСтрока.Склад
					И Строка.Подразделение        = НайденнаяСтрока.Подразделение Тогда
					// Пересчитывается существующая строка
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Строка);
					ОбработанныеСтроки.Добавить(НайденнаяСтрока);
					БылаНайденаПодходящаяСтрока = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не БылаНайденаПодходящаяСтрока Тогда
				// Добавляется новая строка
				НоваяСтрока = СписокРаспоряженияНаОформление.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ОбработанныеСтроки.Добавить(НайденнаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		ВсеНайденныеСтрокиПоСсылке = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеНайденныеСтрокиПоСсылке);
		
		Если ВсеНайденныеСтрокиПоСсылке.Количество() <> ОбработанныеСтроки.Количество() Тогда
			// Имеются строки, которые не нужно отображать
			Для Каждого Строка Из ВсеНайденныеСтрокиПоСсылке Цикл
				
				Если ОбработанныеСтроки.Найти(Строка) = Неопределено Тогда
					СписокРаспоряженияНаОформление.Удалить(Строка);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЧастичныйПересчет Тогда
		
		// Распоряжение больше не нужно отображать - к удалению
		Для Каждого Распоряжение Из РаспоряженияДляПересчета Цикл
			СтруктураПоиска = Новый Структура("Ссылка", Распоряжение);
			НайденныеСтроки = СписокРаспоряженияНаОформление.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СписокРаспоряженияНаОформление.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		// Полная загрузка таблицы
		СписокРаспоряженияНаОформление.Загрузить(ТаблицаКОформлению);
		СписокРаспоряженияНаОформление.Сортировать("Дата, Тип, Номер");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоСостояниям(ТаблицаКОформлению)
	
	Отбор = Новый Структура();
	
	Если ЗначениеЗаполнено(СостояниеНакладной) Тогда
		Отбор.Вставить("СостояниеНакладной", Число(СостояниеНакладной));
	КонецЕсли;
	Если ЗначениеЗаполнено(СостояниеОрдера) Тогда
		Отбор.Вставить("СостояниеОрдера", Число(СостояниеОрдера));
	КонецЕсли;
	Если ЗначениеЗаполнено(СостояниеПриходногоОрдера) Тогда
		Отбор.Вставить("СостояниеПриходногоОрдера", Число(СостояниеПриходногоОрдера));
	КонецЕсли;
	
	// Отбор по полям
	Если Отбор.Количество() > 0 Тогда
		НайденныеСтроки = ТаблицаКОформлению.НайтиСтроки(Отбор);
		ТаблицаКОформлению = ТаблицаКОформлению.Скопировать(НайденныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуОтгрузкиПриемкиВИтоговую(ТаблицаИсточник, ТаблицаПриемник, ДобавлятьНовыеСтроки = Истина)
	
	ЕстьСостояниеОрдера = ТаблицаИсточник.Колонки.Найти("СостояниеОрдера") <> Неопределено;
	ЕстьСостояниеПриходногоОрдера = ТаблицаИсточник.Колонки.Найти("СостояниеПриходногоОрдера") <> Неопределено;
	
	Для Каждого Строка Из ТаблицаИсточник Цикл
		
		// Слияние строки с таблицей ТаблицаКОформлению
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ссылка", Строка.Ссылка);
		Если ТаблицаИсточник.Колонки.Найти("Склад") <> Неопределено 
			И ДобавлятьНовыеСтроки Тогда
			Отбор.Вставить("Склад", Строка.Склад);
		КонецЕсли;
		
		
		НайденныеСтроки = ТаблицаПриемник.НайтиСтроки(Отбор);
		
		Если ЕстьСостояниеПриходногоОрдера 
			И ЗначениеЗаполнено(ОтборСклад) Тогда
			СоответствуетОтборуПоСкладу = ?(Строка.СкладПолучатель = ОтборСклад, Истина, Ложь);
		Иначе
			СоответствуетОтборуПоСкладу = Истина;
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТаблицаКОформлению = НайденныеСтроки[0];
			Если ЕстьСостояниеОрдера Тогда
				СтрокаТаблицаКОформлению.СостояниеОрдера = Строка.СостояниеОрдера;
			КонецЕсли;
			Если ЕстьСостояниеПриходногоОрдера Тогда
				СтрокаТаблицаКОформлению.СостояниеПриходногоОрдера = Строка.СостояниеПриходногоОрдера;
				СтрокаТаблицаКОформлению.СкладПолучатель = ?(ЗначениеЗаполнено(СтрокаТаблицаКОформлению.СкладПолучатель),
											СтрокаТаблицаКОформлению.СкладПолучатель,
											Строка.СкладПолучатель);
			КонецЕсли;
			
		ИначеЕсли ДобавлятьНовыеСтроки 
			Или (ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ЗаказНаСборку") И СоответствуетОтборуПоСкладу)
			Или (ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.СборкаТоваров") И СоответствуетОтборуПоСкладу) Тогда
			// При отсутствии заказа в ТаблицаКОформлению, считаем что накладная создана и не имеет расхождений
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			// Значения по умолчанию
			ЭтоРаспоряжениеНакладная = ПолныеИменаНакладных.НайтиПоЗначению(Строка.Ссылка.Метаданные().ПолноеИмя()) <> Неопределено;
			Если ЭтоРаспоряжениеНакладная
				И Не ЕстьСостояниеОрдера Тогда
				// Распоряжение - накладная. Заказы не используются.
				// Т.к. соединения с ТаблицаПриемник не произошло, а данных по расходным ордерам нет, считаем что
				// ордерная схема на отгрузку по текущей накладной не поддерживается, или не имеет смысла.
				НоваяСтрока.СостояниеНакладной = 4;
				НоваяСтрока.СостояниеОрдера    = 4;
			ИначеЕсли ЭтоРаспоряжениеНакладная Тогда
				// Распоряжение - накладная. Заказы не используются
				НоваяСтрока.СостояниеНакладной = 4;
			Иначе
				// Распоряжение - заказ. Если не найден в существующих строках, значит нет расхождений заказ-накладная
				НоваяСтрока.СостояниеНакладной = 0;
			КонецЕсли;
			
			Если ЕстьСостояниеПриходногоОрдера 
				И Не ЗначениеЗаполнено(НоваяСтрока.Склад) Тогда
				НоваяСтрока.Склад = Строка.СкладПолучатель;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПостобработкаТоваровКПоступлению(Таблица)
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СборкаТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		Возврат Таблица;
	КонецЕсли;
	
	// Подмена накладной на заказ для сборок
	// Удаление данных о перемещениях или заказов на перемещения (по поступлению показываем всегда пустое состояние)
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Параметры.Вставить("Таблица", Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.СкладПолучатель,
	|	Таблица.СостояниеПриходногоОрдера,
	|	Таблица.ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВтТаблица
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	НЕ Таблица.Ссылка ССЫЛКА Документ.ПеремещениеТоваров
	|	И НЕ Таблица.Ссылка ССЫЛКА Документ.ЗаказНаПеремещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТаблица.Ссылка КАК Ссылка,
	|	СборкаТоваров.ЗаказНаСборку КАК Заказ
	|ПОМЕСТИТЬ ВтПодменяемыеРаспоряжения
	|ИЗ
	|	ВтТаблица КАК ВтТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК СборкаТоваров
	|		ПО (СборкаТоваров.Ссылка = ВтТаблица.Ссылка)
	|			И (СборкаТоваров.ЗаказНаСборку <> ЗНАЧЕНИЕ(Документ.ЗаказНаСборку.ПустаяСсылка))
	|ГДЕ
	|	НЕ СборкаТоваров.Ссылка ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВтПодменяемыеРаспоряжения.Заказ, ВтТаблица.Ссылка) КАК Ссылка,
	|	ВтТаблица.СкладПолучатель КАК СкладПолучатель,
	|	МАКСИМУМ(ВтТаблица.СостояниеПриходногоОрдера) КАК СостояниеПриходногоОрдера,
	|	ТИПЗНАЧЕНИЯ(ЕСТЬNULL(ВтПодменяемыеРаспоряжения.Заказ, ВтТаблица.Ссылка)) КАК Тип,
	|	ВтТаблица.ХозяйственнаяОперация
	|ИЗ
	|	ВтТаблица КАК ВтТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПодменяемыеРаспоряжения КАК ВтПодменяемыеРаспоряжения
	|		ПО ВтТаблица.Ссылка = ВтПодменяемыеРаспоряжения.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВтПодменяемыеРаспоряжения.Заказ, ВтТаблица.Ссылка),
	|	ТИПЗНАЧЕНИЯ(ЕСТЬNULL(ВтПодменяемыеРаспоряжения.Заказ, ВтТаблица.Ссылка)),
	|	ВтТаблица.СкладПолучатель,
	|	ВтТаблица.ХозяйственнаяОперация";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьСписокСоответствияОрдеров(СписокВыбора)
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Соответствуют накладным'"),    Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Не оформлены'"),               Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Не соответствуют накладным'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	СписокВыбора.Добавить("4", НСтр("ru='Не используются'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
КонецПроцедуры

Процедура ЗаполнитьСписокСостоянийОформленияНакладной(СписокВыбора)
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Все оформлено'"),        Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Создать накладную'"),    Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2", НСтр("ru='Дооформить накладную'"), Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	СписокВыбора.Добавить("4", НСтр("ru='Не используются заказы'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеТипыЗаказовИТипыНакладных()
	
	ТЗХозяйственныеОперацииИДокументы = ХозяйственныеОперацииИДокументы.Выгрузить();
	ПолныеИменаРаспоряжений = Обработки.ЖурналДокументовВнутреннегоТовародвижения.ПолныеИменаРаспоряжений(ТЗХозяйственныеОперацииИДокументы);
	ПолныеИменаЗаказов.ЗагрузитьЗначения(ПолныеИменаРаспоряжений);
	ПолныеИменаНакладных.ЗагрузитьЗначения(ОбщегоНазначенияУТ.ИспользуемыеПолныеИменаДокументов(ТЗХозяйственныеОперацииИДокументы));
	
КонецПроцедуры

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов)
	
	ТаблицаХозяйственныеОперацииИДокументы = ПолучитьИзВременногоХранилища(АдресДоступныхХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(ТаблицаХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов);

	ЗаполнитьДоступныеТипыЗаказовИТипыНакладных();
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
	ПриИзмененииОтбора();
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(ИнформационнаяНадписьОтбор, ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ВнутреннееТовародвижение";
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаНакладныеКОформлению", КлючНазначенияИспользования);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("ОтборСклад",ОтборСклад);
		Настройки.Свойство("СостояниеНакладной",СостояниеНакладной);
		Настройки.Свойство("СостояниеОрдера",СостояниеОрдера);
		Настройки.Свойство("СостояниеПриходногоОрдера",СостояниеПриходногоОрдера);
		Настройки.Свойство("ОтборХозяйственныеОперации",ОтборХозяйственныеОперации);
		Настройки.Свойство("ОтборТипыДокументов",ОтборТипыДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке
		Или ПустаяСтрока(КлючНазначенияИспользования) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"ОтборСклад,
		|СостояниеНакладной,
		|СостояниеОрдера,
		|СостояниеПриходногоОрдера,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаНакладныеКОформлению", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

#Область ПроцедурыИзМодуляМенеджераРеестра

&НаСервере
Функция РазделитьЗаказыПоПолнымИменамНакладных(СписокРаспоряжений, ПоОрдерам, СписокОшибок) 
	
	ТаблицаОперацииНакладные = ХозяйственныеОперацииИДокументы.Выгрузить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИспользуетсяРаспоряжение", Истина);
	
	НайденныеСтроки = ТаблицаОперацииНакладные.НайтиСтроки(Отбор);
	
	ТекущиеКлючи = Новый Структура();
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("Организация");
	ТекущиеКлючи.Вставить("Склад");
	ТекущиеКлючи.Вставить("СкладПолучатель");
	ТекущиеКлючи.Вставить("ХозяйственнаяОперация");
	ТекущиеКлючи.Вставить("СостояниеНакладной");
	ТекущиеКлючи.Вставить("СостояниеОрдера");
	ТекущиеКлючи.Вставить("Подразделение");
	ТекущиеКлючи.Вставить("ВариантПриемкиТоваров");
	
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений();
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СкладПолучатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеНакладной", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеОрдера", Новый ОписаниеТипов("Число"));
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеНакладной");
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		ПолноеИмяРаспоряжения = Строка.Ссылка.Метаданные().ПолноеИмя();
		ПолноеИмяНакладной = ПолноеИмяНакладнойПоПолномуИмениРаспоряжения(ПолноеИмяРаспоряжения, Строка.СкладПолучатель);
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		Если ПакетныйРежим И ПолноеИмяНакладной = ПолноеИмяРаспоряжения Тогда
			
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
			ПрерватьОбработкуСтроки = Истина;
			
		
		ИначеЕсли ПоОрдерам
			И ПолноеИмяНакладной <> Метаданные.Документы.СборкаТоваров.ПолноеИмя()
			 Тогда
			
			Если Строка.СостояниеОрдера = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную по отгрузке (приемке) т.к. ордера соответствуют накладным.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Строка.СостояниеОрдера = 4 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную по отгрузке (приемке) т.к. ордера не используются.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ПоОрдерам И ПолноеИмяНакладной = Метаданные.Документы.СборкаТоваров.ПолноеИмя() Тогда
			
			Если Строка.СостояниеОрдера = 0 И Строка.СостояниеПриходногоОрдера = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную по отгрузке (приемке) т.к. ордера сооветствуют накладным.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Строка.СостояниеОрдера = 4 И Строка.СостояниеПриходногоОрдера = 4 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную по отгрузке (приемке) т.к. ордера не используются.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
		
		Иначе // оформление по заказам
			
			Если Строка.СостояниеНакладной = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Строка.СостояниеНакладной = 4 Тогда
				
				ТекстОшибки = НСтр("ru = 'Распоряжение %1 явлется накладной. Невозможно создать накладную по накладной.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСоответствия = ТаблицаОперацииНакладные.НайтиСтроки(
			Новый Структура("ПолноеИмяДокумента, ХозяйственнаяОперация", 
				ПолноеИмяНакладной, 
				Строка.ХозяйственнаяОперация))[0];
		
		РазделятьПоПодразделению = Строка.Подразделение <> ТекущиеКлючи.Подразделение И СтрокаСоответствия.РазделятьДокументыПоПодразделению;
		
		// Создание новой таблицы в случаях:
		// 1. Таблица еще ни разу не создана
		// 2. Запрещено группировать в одну накладную несколько заказов
		// 3. Распоряжение является накладной или ключевые поля различаются (например, нельзя группировать 
		//	в одну накладную заказы у которых разные склады)
		Если РазделеннаяТаблица = Неопределено 
			Или Не СтрокаСоответствия.ПоНесколькимЗаказам
			Или Строка.СостояниеНакладной = 4
			Или ПолноеИмяНакладной <> ТекущиеКлючи.ПолноеИмяНакладной 
			Или Строка.Организация <> ТекущиеКлючи.Организация 
			Или РазделятьПоПодразделению
			Или Строка.Склад <> ТекущиеКлючи.Склад 
			Или Строка.СкладПолучатель <> ТекущиеКлючи.СкладПолучатель
			Или Строка.ХозяйственнаяОперация <> ТекущиеКлючи.ХозяйственнаяОперация
			Или Строка.ВариантПриемкиТоваров <> ТекущиеКлючи.ВариантПриемкиТоваров Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица); // Передача в массив ссылки на текущую таблицу
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
			ТекущиеКлючи.ПолноеИмяНакладной = ПолноеИмяНакладной;
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

#КонецОбласти

#Область РаботаСКешируемымиЗначениями

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаСервере 
Функция ЗаполнитьПоляШапкиДокументов(Таблица)
	
	// Получение полей шапки и проверка доступа RLS
	// Отборы
		
	ВыделенныеХозяйственныеОперации = ОбщегоНазначенияУТ.ВыделенныеХозяйственныеОперации(ХозяйственныеОперацииИДокументы.Выгрузить());
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("ХозяйственныеОперации", ВыделенныеХозяйственныеОперации);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Склад", ОтборСклад);
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	
	МассивТекстовЗапросов = Новый Массив;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВнутреннееПотреблениеТоваров) Тогда
		МассивТекстовЗапросов.Добавить("
		|ВЫБРАТЬ 
		|	ТаблицаДокумента.Ссылка                КАК Ссылка,
		|	ТаблицаДокумента.Организация           КАК Организация,
		|	ТаблицаДокумента.Ответственный         КАК Ответственный,
		|	ТаблицаДокумента.Подразделение         КАК Подразделение,
		|	NULL                                   КАК СкладПолучатель,
		|	NULL                                   КАК Склад,
		|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТаблицаДокумента.Комментарий           КАК Комментарий,
		|	ТаблицаДокумента.Номер                 КАК Номер,
		|	ТаблицаДокумента.Дата                  КАК Дата,
		|	4                                      КАК СостояниеНакладной,
		|	NULL                                   КАК ВариантПриемкиТоваров
		|ПОМЕСТИТЬ ВтДанныеШапкиДокументов
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В
		|			(ВЫБРАТЬ
		|				ВтТовары.Ссылка
		|			ИЗ
		|				ВтТовары)");
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		МассивТекстовЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка                КАК Ссылка,
		|	ТаблицаДокумента.Организация           КАК Организация,
		|	ТаблицаДокумента.Ответственный         КАК Ответственный,
		|	ТаблицаДокумента.Подразделение         КАК Подразделение,
		|	NULL                                   КАК СкладПолучатель,
		|	NULL                                   КАК Склад,
		|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТаблицаДокумента.Комментарий           КАК Комментарий,
		|	ТаблицаДокумента.Номер                 КАК Номер,
		|	ТаблицаДокумента.Дата                  КАК Дата,
		|	0                                      КАК СостояниеНакладной,
		|	NULL                                   КАК ВариантПриемкиТоваров
		|ПОМЕСТИТЬ ВтДанныеШапкиДокументов
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В
		|			(ВЫБРАТЬ
		|				ВтТовары.Ссылка
		|			ИЗ
		|				ВтТовары)");
	КонецЕсли;
	
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПеремещениеТоваров) Тогда
		МассивТекстовЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка                КАК Ссылка,
		|	ТаблицаДокумента.Организация           КАК Организация,
		|	ТаблицаДокумента.Ответственный         КАК Ответственный,
		|	ТаблицаДокумента.Подразделение         КАК Подразделение,
		|	ТаблицаДокумента.СкладПолучатель       КАК СкладПолучатель,
		|	NULL                                   КАК Склад,
		|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТаблицаДокумента.Комментарий           КАК Комментарий,
		|	ТаблицаДокумента.Номер                 КАК Номер,
		|	ТаблицаДокумента.Дата                  КАК Дата,
		|	4                                      КАК СостояниеНакладной,
		|	ТаблицаДокумента.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
		|ПОМЕСТИТЬ ВтДанныеШапкиДокументов
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В
		|			(ВЫБРАТЬ
		|				ВтТовары.Ссылка
		|			ИЗ
		|				ВтТовары)");
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаПеремещение) Тогда
		МассивТекстовЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка                КАК Ссылка,
		|	ТаблицаДокумента.Организация           КАК Организация,
		|	ТаблицаДокумента.Ответственный         КАК Ответственный,
		|	ТаблицаДокумента.Подразделение         КАК Подразделение,
		|	ТаблицаДокумента.СкладПолучатель       КАК СкладПолучатель,
		|	NULL                                   КАК Склад,
		|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТаблицаДокумента.Комментарий           КАК Комментарий,
		|	ТаблицаДокумента.Номер                 КАК Номер,
		|	ТаблицаДокумента.Дата                  КАК Дата,
		|	0                                      КАК СостояниеНакладной,
		|	ТаблицаДокумента.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
		|ПОМЕСТИТЬ ВтДанныеШапкиДокументов
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В
		|			(ВЫБРАТЬ
		|				ВтТовары.Ссылка
		|			ИЗ
		|				ВтТовары)");
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СборкаТоваров) Тогда
		МассивТекстовЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка                КАК Ссылка,
		|	ТаблицаДокумента.Организация           КАК Организация,
		|	ТаблицаДокумента.Ответственный         КАК Ответственный,
		|	ТаблицаДокумента.Подразделение         КАК Подразделение,
		|	ТаблицаДокумента.Склад                 КАК СкладПолучатель,
		|	ТаблицаДокумента.Склад                 КАК Склад,
		|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТаблицаДокумента.Комментарий           КАК Комментарий,
		|	ТаблицаДокумента.Номер                 КАК Номер,
		|	ТаблицаДокумента.Дата                  КАК Дата,
		|	4                                      КАК СостояниеНакладной,
		|	ТаблицаДокумента.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
		|ПОМЕСТИТЬ ВтДанныеШапкиДокументов
		|ИЗ
		|	Документ.СборкаТоваров КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В
		|			(ВЫБРАТЬ
		|				ВтТовары.Ссылка
		|			ИЗ
		|				ВтТовары)");
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаСборку) Тогда
		МассивТекстовЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка                КАК Ссылка,
		|	ТаблицаДокумента.Организация           КАК Организация,
		|	ТаблицаДокумента.Ответственный         КАК Ответственный,
		|	ТаблицаДокумента.Подразделение         КАК Подразделение,
		|	ТаблицаДокумента.Склад                 КАК СкладПолучатель,
		|	ТаблицаДокумента.Склад                 КАК Склад,
		|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТаблицаДокумента.Комментарий           КАК Комментарий,
		|	ТаблицаДокумента.Номер                 КАК Номер,
		|	ТаблицаДокумента.Дата                  КАК Дата,
		|	0                                      КАК СостояниеНакладной,
		|	ТаблицаДокумента.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
		|ПОМЕСТИТЬ ВтДанныеШапкиДокументов
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В
		|			(ВЫБРАТЬ
		|				ВтТовары.Ссылка
		|			ИЗ
		|				ВтТовары)");
	КонецЕсли;
	
	
	
	ТекстЗапросаВтДанныеШапкиДокументов = "";
	Для Каждого ТекстЗапроса Из МассивТекстовЗапросов Цикл
		Если ЗначениеЗаполнено(ТекстЗапросаВтДанныеШапкиДокументов) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ВтДанныеШапкиДокументов", "");
			ТекстЗапросаВтДанныеШапкиДокументов = ТекстЗапросаВтДанныеШапкиДокументов + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"(ВЫБРАТЬ РАЗРЕШЕННЫЕ", "(ВЫБРАТЬ");
		КонецЕсли;
		ТекстЗапросаВтДанныеШапкиДокументов = ТекстЗапросаВтДанныеШапкиДокументов + ТекстЗапроса;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Склад,
	|	Таблица.СостояниеНакладной,
	|	Таблица.СостояниеОрдера,
	|	Таблица.СостояниеПриходногоОрдера,
	|	Таблица.Состояние,
	|	Таблица.ЕстьРасхожденияОрдерНакладная,
	|	Таблица.СкладПолучатель,
	|	Таблица.Подразделение,
	|	Таблица.Тип,
	|	Таблица.ХозяйственнаяОперация,
	|	Таблица.ВариантПриемкиТоваров
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ТекстЗапросаВтДанныеШапкиДокументов + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДанныеШапки.Номер,
	|	ВтДанныеШапки.Дата,
	|	Таблица.Ссылка,
	|	Таблица.Склад,
	|	ВтДанныеШапки.Организация,
	|	ВтДанныеШапки.Ответственный,
	|	ВтДанныеШапки.Комментарий,
	|	ВЫБОР КОГДА ВтДанныеШапки.СостояниеНакладной = 4 Тогда
	|		4
	|	ИНАЧЕ
	|		Таблица.СостояниеНакладной
	|	КОНЕЦ КАК СостояниеНакладной,
	|	Таблица.СостояниеНакладной,
	|	ВЫБОР КОГДА СкладыОтгрузки.Ссылка ЕСТЬ NULL Тогда 
	|		4
	|	ИНАЧЕ
	|		Таблица.СостояниеОрдера
	|	КОНЕЦ КАК СостояниеОрдера,
	|	ВЫБОР КОГДА СкладыПолучатели.Ссылка ЕСТЬ NULL Тогда 
	|		4
	// Для перечисленных документов, при использовании накладных как распоряжений для приходных ордеров, отключаем расчет состояния приходного ордера,
	// т.к. накладная может быть по нескольким заказам - в этом случае невозможно вычислить по какому именно заказу было поступление
	|	КОГДА &НакладнаяЯвляетсяРаспоряжением
	|		И (Таблица.Ссылка ССЫЛКА Документ.ЗаказНаПеремещение
	|		ИЛИ Таблица.Ссылка ССЫЛКА Документ.ПеремещениеТоваров
	|	) ТОГДА
	|		4
	|	ИНАЧЕ
	|		ВЫБОР КОГДА Таблица.СостояниеПриходногоОрдера = 0 И Таблица.СостояниеНакладной = 1 Тогда 
	|			1
	|		ИНАЧЕ
	|			Таблица.СостояниеПриходногоОрдера
	|		Конец
	|	КОНЕЦ КАК СостояниеПриходногоОрдера,
	|	Таблица.Состояние,
	|	Таблица.ЕстьРасхожденияОрдерНакладная,
	|	ВЫБОР КОГДА ВтДанныеШапки.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		Таблица.ХозяйственнаяОперация
	|	ИНАЧЕ
	|		ВтДанныеШапки.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ВтДанныеШапки.СкладПолучатель,
	|	Таблица.Тип,
	|	ВЫБОР КОГДА Таблица.Подразделение ЕСТЬ NULL
	|				ИЛИ Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
	|		ВтДанныеШапки.Подразделение
	|	ИНАЧЕ
	|		Таблица.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВтДанныеШапки.ВариантПриемкиТоваров
	|ИЗ
	|	ВтТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШапкиДокументов КАК ВтДанныеШапки
	|		ПО Таблица.Ссылка = ВтДанныеШапки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыОтгрузки
	|		ПО ЕСТЬNULL(ВтДанныеШапки.Склад, Таблица.Склад) = СкладыОтгрузки.Ссылка
	|			И (СкладыОтгрузки.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (СкладыОтгрузки.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыПолучатели
	|		ПО Таблица.СкладПолучатель = СкладыПолучатели.Ссылка
	|			И (СкладыПолучатели.ИспользоватьОрдернуюСхемуПриПоступлении)
	|			И (СкладыПолучатели.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)
	|ГДЕ
	|	НЕ ВтДанныеШапки.Ссылка ЕСТЬ NULL";
	
	Если ХозяйственныеОперацииИДокументы.Количество() 
			> ОбщегоНазначенияУТ.ВыделенныеХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы.Выгрузить()).Количество() Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС 
		+ "И ВЫБОР КОГДА ВтДанныеШапки.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
		|		Таблица.ХозяйственнаяОперация
		|	ИНАЧЕ
		|		ВтДанныеШапки.ХозяйственнаяОперация
		|	КОНЕЦ В (&ХозяйственныеОперации)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И Таблица.Склад = &Склад";
	КонецЕсли;
	
	ДополненнаяТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ДополненнаяТаблица;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПолноеИмяНакладнойПоПолномуИмениРаспоряжения(ПолноеИмяРаспоряжения, СкладПолучатель)
	
	ПолноеИмяНакладной = "";
	
	Если ПолноеИмяРаспоряжения = Метаданные.Документы.ЗаказНаСборку.ПолноеИмя() Тогда 
		ПолноеИмяНакладной = Метаданные.Документы.СборкаТоваров.ПолноеИмя();
	ИначеЕсли ПолноеИмяРаспоряжения = Метаданные.Документы.ЗаказНаВнутреннееПотребление.ПолноеИмя()
		Тогда
		ПолноеИмяНакладной = Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
	ИначеЕсли ПолноеИмяРаспоряжения = Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя() Тогда 
		ПолноеИмяНакладной = Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя();
	Иначе
		ПолноеИмяНакладной = ПолноеИмяРаспоряжения;
	КонецЕсли;
	
	Возврат ПолноеИмяНакладной;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаВнутренниеДокументыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала());
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЖурнала()
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы", КлючНазначенияИспользования);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста","ЖурналДокументовВнутреннегоТовародвижения");
	ПараметрыЖурнала.Вставить("СинонимЖурнала",НСтр("ru = 'Внутренние документы'"));
	ОтборыФормыСписка = Новый Структура;	
	ОтборыФормыСписка.Вставить("ОтборСклад", ОтборСклад);
	ОтборыФормыСписка.Вставить("ОтборТипыДокументов", ОтборТипыДокументов);
	ОтборыФормыСписка.Вставить("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
	ПараметрыЖурнала.Вставить("ОтборыФормыСписка", ОтборыФормыСписка);
	
	Возврат ПараметрыЖурнала;
	
КонецФункции


#КонецОбласти
