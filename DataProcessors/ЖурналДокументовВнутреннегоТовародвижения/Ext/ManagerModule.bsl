
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет состав документов и хозяйственных операций, доступных для отображения в рабочем месте
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка
//  ОтборХозяйственныеОперации		 - СписокЗначений - список значений типа ПеречислениеСсылка.ХозяйственныеОперации
//  ОтборТипыДокументов				 - СписокЗначений - список значений типа СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КлючНазначенияИспользования		 - Строка - ключ рабочего места для которого вызывается функция
//  ДокументыКОформлению			 - Булево - признак вызова метода для формы "ФормаСпискаКОформлению"
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка
//
//
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь) Экспорт
	
	ПравоЧтениеРегистрыНакопленияТоварыКОтгрузке = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
	ПравоЧтениеРегистрыНакопленияТоварыКОформлениюПоступления = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Накладные с заказами: 
	
	// Сборка.
	
	// Накладная на сборку.
	
	ИспользоватьСтатусыСборокТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыСборокТоваров");
	ИспользоватьЗаказыНаСборку = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку");
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СборкаТоваров;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СборкаТоваров.ПолноеИмя();
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.ИспользуютсяСтатусы			= ИспользоватьСтатусыСборокТоваров;
	Строка.КлючНазначенияИспользования 	= "СборкиРазборкиТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (сборки товаров)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ЖурналДокументовВнутреннегоТовародвижения";
	
	// Накладная на разборку.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РазборкаТоваров;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СборкаТоваров.ПолноеИмя();
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.ИспользуютсяСтатусы			= ИспользоватьСтатусыСборокТоваров;
	Строка.КлючНазначенияИспользования 	= "СборкиРазборкиТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (разборки товаров)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ЖурналДокументовВнутреннегоТовародвижения";
	
	ВнутреннееПотреблениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам");
	
	// Накладная на списание.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.ПоНесколькимЗаказам			= ВнутреннееПотреблениеПоНесколькимЗаказам;
	Строка.ПриходныйОрдерНевозможен		= Истина;
	Строка.КлючНазначенияИспользования 	= "ВнутренниеПотребленияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (внутренние потребления товаров)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ЖурналДокументовВнутреннегоТовародвижения";
	
	// Накладная на передачу в эксплуатацию.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.ПоНесколькимЗаказам			= ВнутреннееПотреблениеПоНесколькимЗаказам;
	Строка.ПриходныйОрдерНевозможен		= Истина;
	Строка.КлючНазначенияИспользования 	= "ВнутренниеПотребленияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (внутренние потребления товаров)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ЖурналДокументовВнутреннегоТовародвижения";
	
	ИспользоватьПеремещениеПоНесколькимЗаказам 	= ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам");
	ИспользоватьСтатусыПеремещенийТоваров 		= ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров");
		
	// Накладная на складское перемещение.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя();
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.ПоНесколькимЗаказам			= ИспользоватьПеремещениеПоНесколькимЗаказам;
	Строка.ИспользуютсяСтатусы			= ИспользоватьСтатусыПеремещенийТоваров;
	Строка.КлючНазначенияИспользования 	= "ПеремещенияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (перемещения товаров)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ЖурналДокументовВнутреннегоТовародвижения";
	
	// Накладная на перемещение между организациями.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя();
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.ПоНесколькимЗаказам			= ИспользоватьПеремещениеПоНесколькимЗаказам;
	Строка.ИспользуютсяСтатусы			= ИспользоватьСтатусыПеремещенийТоваров;
	Строка.КлючНазначенияИспользования 	= "ПеремещенияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (перемещения товаров)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ЖурналДокументовВнутреннегоТовародвижения";
	
	// Акт о расхождении после перемещения
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя();
	Строка.ИспользуетсяРаспоряжение		= Ложь;
	Строка.ИспользуютсяСтатусы			= Истина;
	Строка.КлючНазначенияИспользования 	= "АктыОРасхожденияхПослеПеремещения";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (акты о расхождениях после перемещения)'");
	
	// Акт о расхождении после перемещения
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя();
	Строка.ИспользуетсяРаспоряжение		= Ложь;
	Строка.ИспользуютсяСтатусы			= Истина;
	Строка.КлючНазначенияИспользования 	= "АктыОРасхожденияхПослеПеремещения";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (акты о расхождениях после перемещения)'");
	
	// Передача в производство.
	
	// Накладная на передачу материалов в производство.
	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Накладные без заказов:
	
	
	
	// Оприходование излишков товаров.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 					= Перечисления.ХозяйственныеОперации.ОприходованиеТоваров;
	Строка.ДобавитьКнопкуСоздать					= Истина;
	Строка.ПолноеИмяДокумента						= Метаданные.Документы.ОприходованиеИзлишковТоваров.ПолноеИмя();
	Строка.МенеджерРасчетаГиперссылкиКОформлению	= "Обработка.ЖурналСкладскихАктов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы'");
	
	// Пересортица товаров.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПересортицаТоваров;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПересортицаТоваров.ПолноеИмя();
	Строка.МенеджерРасчетаГиперссылкиКОформлению	= "Обработка.ЖурналСкладскихАктов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы'");
	
	// Порча товаров.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПорчаТоваров;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПорчаТоваров.ПолноеИмя();
	Строка.МенеджерРасчетаГиперссылкиКОформлению	= "Обработка.ЖурналСкладскихАктов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы'");

	// Порча товаров с переоценкой.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПорчаТоваров.ПолноеИмя();
	Строка.МенеджерРасчетаГиперссылкиКОформлению	= "Обработка.ЖурналСкладскихАктов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы'");
	
	// Списание недостач товаров.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваров;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеНедостачТоваров.ПолноеИмя();
	Строка.МенеджерРасчетаГиперссылкиКОформлению	= "Обработка.ЖурналСкладскихАктов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы'");

	
	// Поступление из производства (УТ).
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПоступлениеИзПроизводства;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПрочиеОприходованияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (прочие оприходования товаров)'");
	
	// Возврат из эксплуатации.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПрочиеОприходованияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (прочие оприходования товаров)'");
	
	// Сторно списания на расходы.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПрочиеОприходованияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (прочие оприходования товаров)'");
	
	// Прочее поступление товаров.
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПрочееПоступлениеТоваров;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПрочиеОприходованияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Внутренние документы (прочие оприходования товаров)'");
	
	// Проверить доступность по правам и функциональным опциям
	
	Если ДокументыКОформлению Тогда
		Отбор = Новый Структура("МенеджерРасчетаГиперссылкиКОформлению", "Обработка.ЖурналДокументовВнутреннегоТовародвижения");
		ХозяйственныеОперацииИДокументы = ХозяйственныеОперацииИДокументы.Скопировать(Отбор);
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ВнутреннееТовародвижение" Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНастроек);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВернутьТекстыЗапросовКОформлению(ДокументДляПересчета, ХозяйственныеОперацииИДокументы, ОтборСклад) Экспорт
	
	РаспоряженияДляПересчета = ПолучитьРаспоряженияПоДокументуОповещению(ДокументДляПересчета, ХозяйственныеОперацииИДокументы);
	
	ЧастичныйПересчет = ЗначениеЗаполнено(ДокументДляПересчета);
	
	Если ЧастичныйПересчет И РаспоряженияДляПересчета.Количество() = 0 Тогда
		Возврат Неопределено; // Процедура вызвана при записи документа по которому не возможен частичный пересчет
	КонецЕсли;
	
	НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Новый Структура("Отбор", Истина));
	ТекстыЗапроса = Новый СписокЗначений;
	
	ИмяРегистраТоварыКОтгрузке 					= Метаданные.РегистрыНакопления.ТоварыКОтгрузке.Имя;
	ИмяРегистраТоварыКОформлениюПоступления		= Метаданные.РегистрыНакопления.ТоварыКПоступлению.Имя;
	ИмяРегистраЗаказыНаПеремещение 				= Метаданные.РегистрыНакопления.ЗаказыНаПеремещение.Имя;
	ИмяРегистраЗаказыНаСборку 					= Метаданные.РегистрыНакопления.ЗаказыНаСборку.Имя;
	ИмяРегистраЗаказыНаВнутреннееПотребление 	= Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление.Имя;
	ИмяРегистраЗаказыНаПеремещение 				= Метаданные.РегистрыНакопления.ЗаказыНаПеремещение.Имя;
	
	ХозяйственныеОперации = Новый Массив;
	
	ДоступныеТипыНакладныхИЗаказов = ТипыРаспоряженийИНакладных(НайденныеСтроки);
	
	ОтобратьПоТипамРаспоряжений = Ложь;
	
	
	Для Каждого ВыбраннаяСтрока Из НайденныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(ВыбраннаяСтрока.МенеджерРасчетаГиперссылкиКОформлению) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыбраннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров 
			Или ВыбраннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
			
			ПравоЧтениеРегистрыНакопленияТоварыКОтгрузке = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
			ПравоЧтениеРегистрыНакопленияТоварыКОформлениюПоступления = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
			
			ПравоЧтениеДокументЗаказНаСборку = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаСборку);
			ПравоЧтениеДокументСборкаТоваров = ПравоДоступа("Чтение", Метаданные.Документы.СборкаТоваров);
			ПравоЧтениеРегистрыНакопленияЗаказыНаСборку = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаСборку);
			
			ИспользоватьСтатусыСборокТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыСборокТоваров");
			ИспользоватьЗаказыНаСборку = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку");
			ИспользоватьСборкуТоваров  = ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку");
			
			ЕстьПравоДоступаЧтения = ((ИспользоватьЗаказыНаСборку
				И ПравоЧтениеДокументЗаказНаСборку)
				Или (ИспользоватьСборкуТоваров
				И ПравоЧтениеДокументСборкаТоваров))
				И ПравоЧтениеРегистрыНакопленияЗаказыНаСборку
				И (ПравоЧтениеРегистрыНакопленияТоварыКОтгрузке
				Или ПравоЧтениеРегистрыНакопленияТоварыКОформлениюПоступления);
			
			Если Не ЕстьПравоДоступаЧтения Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяРегистраЗаказыНаСборку, ТекстыЗапроса) Тогда
				ТекстЗапросаЗаказыНаСборку(ТекстыЗапроса, ОтборСклад, РаспоряженияДляПересчета, ИмяРегистраЗаказыНаСборку);
			КонецЕсли;
			
			Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяРегистраТоварыКОтгрузке, ТекстыЗапроса) Тогда
				ТекстЗапросаТоварыКОтгрузке(ТекстыЗапроса, ОтборСклад, РаспоряженияДляПересчета, ИмяРегистраТоварыКОтгрузке, ОтобратьПоТипамРаспоряжений);
			КонецЕсли;
			
			Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяРегистраТоварыКОформлениюПоступления, ТекстыЗапроса) Тогда
				ТекстЗапросаТоварыКОформлениюПоступления(ТекстыЗапроса, РаспоряженияДляПересчета, ИмяРегистраТоварыКОформлениюПоступления);
			КонецЕсли;
			
		ИначеЕсли ВыбраннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию
			Или ВыбраннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
			
			ИспользоватьЗаказыНаВнутреннееПотребление = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление");
			ИспользоватьВнутреннееПотреблениеТоваров  = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление");
			
			ПравоЧтениеДокументыЗаказНаВнутреннееПотребление = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
			ПравоЧтениеДокументыВнутреннееПотребление        = ПравоДоступа("Чтение", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
			
			ПравоЧтениеРНЗаказыНаВнутреннееПотребление = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление);
			ПравоЧтениеРНТоварыКОтгрузке               = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
			
			ЕстьПравоДоступаЧтения = ((ИспользоватьЗаказыНаВнутреннееПотребление
				И ПравоЧтениеДокументыЗаказНаВнутреннееПотребление)
				Или (ИспользоватьВнутреннееПотреблениеТоваров
				И ПравоЧтениеДокументыВнутреннееПотребление)
				)
				И ПравоЧтениеРНЗаказыНаВнутреннееПотребление
				И ПравоЧтениеРНТоварыКОтгрузке;
			
			Если Не ЕстьПравоДоступаЧтения Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяРегистраЗаказыНаВнутреннееПотребление, ТекстыЗапроса) Тогда
				ТекстЗапросаЗаказыНаВнутреннееПотребление(ТекстыЗапроса, ОтборСклад, РаспоряженияДляПересчета, ИмяРегистраЗаказыНаВнутреннееПотребление);
			КонецЕсли;
			
			Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяРегистраТоварыКОтгрузке, ТекстыЗапроса) Тогда
				ТекстЗапросаТоварыКОтгрузке(ТекстыЗапроса, ОтборСклад, РаспоряженияДляПересчета, ИмяРегистраТоварыКОтгрузке, ОтобратьПоТипамРаспоряжений);
			КонецЕсли;
		
		ИначеЕсли ВыбраннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами
			Или ВыбраннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров Тогда
			
			ИспользоватьПеремещениеПоНесколькимЗаказам 	= ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам");
			ИспользоватьСтатусыПеремещенийТоваров 		= ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров");
			
			ИспользоватьЗаказыНаПеремещение = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение");
			ИспользоватьПеремещениеТоваров  = ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров");
			
			ПравоЧтениеДокументыЗаказНаПеремещение = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаПеремещение);
			ПравоЧтениеДокументыПеремещениеТоваров = ПравоДоступа("Чтение", Метаданные.Документы.ПеремещениеТоваров);
			
			ПравоЧтениеРегистрыНакопленияЗаказыНаПеремещение = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаПеремещение);
			ПравоЧтениеРегистрыНакопленияТоварыКОтгрузке = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
			ПравоЧтениеРегистрыНакопленияТоварыКОформлениюПоступления = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
			
			ЕстьПравоДоступаЧтения = ((ИспользоватьЗаказыНаПеремещение
				И ПравоЧтениеДокументыЗаказНаПеремещение)
				Или (ИспользоватьПеремещениеТоваров
				И ПравоЧтениеДокументыПеремещениеТоваров))
				И ПравоЧтениеРегистрыНакопленияЗаказыНаПеремещение
				И (ПравоЧтениеРегистрыНакопленияТоварыКОтгрузке
				Или ПравоЧтениеРегистрыНакопленияТоварыКОформлениюПоступления);
			
			Если Не ЕстьПравоДоступаЧтения Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяРегистраЗаказыНаПеремещение, ТекстыЗапроса) Тогда
				ТекстЗапросаЗаказыНаПеремещение(ТекстыЗапроса, ОтборСклад, РаспоряженияДляПересчета, ИмяРегистраЗаказыНаПеремещение);
			КонецЕсли;
			
			Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяРегистраТоварыКОтгрузке, ТекстыЗапроса) Тогда
				ТекстЗапросаТоварыКОтгрузке(ТекстыЗапроса, ОтборСклад, РаспоряженияДляПересчета, ИмяРегистраТоварыКОтгрузке, ОтобратьПоТипамРаспоряжений);
			КонецЕсли;
			
			Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяРегистраТоварыКОформлениюПоступления, ТекстыЗапроса) Тогда
				ТекстЗапросаТоварыКОформлениюПоступления(ТекстыЗапроса, РаспоряженияДляПересчета, ИмяРегистраТоварыКОформлениюПоступления);
			КонецЕсли;
			
		КонецЕсли;
		
		ХозяйственныеОперации.Добавить(ВыбраннаяСтрока.ХозяйственнаяОперация);
	
	КонецЦикла;
	
	Если ТекстыЗапроса.Количество() = 0 Тогда 
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад", ОтборСклад);
	Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляПересчета);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ХозяйственныеОперации", ОбщегоНазначенияКлиентСервер.СвернутьМассив(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ДоступныеТипыНакладныхИЗаказов", ДоступныеТипыНакладныхИЗаказов);
	
	ТаблицыЗапроса = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, Истина);
	
	Возврат ТаблицыЗапроса
	
КонецФункции

Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команды) Экспорт
	
КонецПроцедуры

Функция ПолучитьРаспоряженияПоДокументуОповещению(ДокументДляПересчета, ХозяйственныеОперацииИДокументы) Экспорт
	
	ПолныеИменаЗаказов = Новый СписокЗначений;
	ПолныеИменаЗаказов.ЗагрузитьЗначения(ПолныеИменаРаспоряжений(ХозяйственныеОперацииИДокументы));
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Неопределено);
	
	Распоряжения = Новый Массив();
	
	Если Не ЗначениеЗаполнено(ДокументДляПересчета) Тогда
		Возврат Распоряжения;
	КонецЕсли;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Неопределено);
	
	Если ТипЗнч(ДокументДляПересчета) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДокументДляПересчета);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Распоряжение КАК Распоряжение
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Распоряжение = Выборка.Распоряжение;
			Если ЗначениеЗаполнено(Распоряжение) Тогда
				// Вход в рекурсию т.к. распоряжение может быть накладной (нужно вычислить до заказа)
				ДобавляемыйМассив = ПолучитьРаспоряженияПоДокументуОповещению(Распоряжение, ХозяйственныеОперацииИДокументы);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Распоряжения, ДобавляемыйМассив);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументДляПересчета) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		
		Распоряжение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументДляПересчета, "Распоряжение");
		// Вход в рекурсию т.к. распоряжение может быть накладной (нужно вычислить до заказа)
		Если ЗначениеЗаполнено(Распоряжение) Тогда
			ДобавляемыйМассив = ПолучитьРаспоряженияПоДокументуОповещению(Распоряжение, ХозяйственныеОперацииИДокументы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Распоряжения, ДобавляемыйМассив);
		Иначе
			Распоряжения.Добавить(Распоряжение);
		КонецЕсли;
		
	Иначе
		
		Если ПолныеИменаЗаказов.НайтиПоЗначению(ДокументДляПересчета.Метаданные().ПолноеИмя()) <> Неопределено Тогда
			// Это заказ
			Распоряжения.Добавить(ДокументДляПересчета);
			
			// Для корректного расчета заказов на сборку, при использовании накладных как распоряжений
			// для приходных ордеров, необходимо вернуть как сам заказ, так и все накладные по нему
			Если НакладнаяЯвляетсяРаспоряжением
				И ТипЗнч(ДокументДляПересчета) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументДляПересчета);
				ДобавляемыйМассив = МенеджерДокумента.ПолучитьНакладныеПоЗаказу(ДокументДляПересчета);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Распоряжения, ДобавляемыйМассив);
			КонецЕсли;
			
		Иначе
			// Это накладная
			Попытка
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументДляПересчета);
				ПараметрыЗаполнения = МенеджерДокумента.ПараметрыЗаполненияДокумента();
				
				Распоряжение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументДляПересчета, ПараметрыЗаполнения.ИмяПоляЗаказ); 
				
				Если ЗначениеЗаполнено(Распоряжение)
					И НакладнаяЯвляетсяРаспоряжением
					И ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
					
					Распоряжения.Добавить(Распоряжение);
					
					// Для корректного расчета заказов на сборку, при использовании накладных как распоряжений
					// для приходных ордеров, необходимо вернуть как сам заказ, так и все накладные по нему
					МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Распоряжение);
					ДобавляемыйМассив = МенеджерДокумента.ПолучитьНакладныеПоЗаказу(Распоряжение);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Распоряжения, ДобавляемыйМассив);
				ИначеЕсли ЗначениеЗаполнено(Распоряжение) Тогда
					Распоряжения.Добавить(Распоряжение);
				Иначе
					Распоряжения.Добавить(ДокументДляПересчета);
				КонецЕсли;
			Исключение
				// Документ не имеет метода ПараметрыЗаполненияДокумента, действия не требуются
				МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументДляПересчета));
				ТекстОшибки = НСтр("ru = 'В документе ""%1"" не реализован метод ПараметрыЗаполненияДокумента()'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеДокумента.Представление());
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ЖурналДокументовВнутреннегоТовародвижения.ПолучитьРаспоряженияПоДокументуОповещению'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Распоряжения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Распоряжения);
	
	Возврат Распоряжения;
	
КонецФункции

Процедура СформироватьГиперссылкуКОформлениюФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	КОформлению = ОбщегоНазначенияУТ.СформироватьГиперссылкуКОформлению(Параметры[0], Параметры[1]);
	ПоместитьВоВременноеХранилище(КОформлению, АдресХранилища);
	
КонецПроцедуры

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ХозяйственныеОперацииИДокументы = Параметры.ХозяйственныеОперацииИДокументы;
	Склад = Параметры.Склад;
	
	ТаблицыЗапроса = ВернутьТекстыЗапросовКОформлению(Неопределено, ХозяйственныеОперацииИДокументы, Склад);
	
	Если ТаблицыЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьНакладные = Ложь;
	Для Каждого ТаблицаЗапроса Из ТаблицыЗапроса Цикл
		Если СтрНачинаетсяС(ТаблицаЗапроса.Ключ, "Вт") Тогда
			Продолжить;
		Иначе
			Если ТаблицаЗапроса.Значение.Количество()>0 Тогда
				ЕстьНакладные = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	ТекстГиперссылки = НСтр("ru = 'Накладные'");
	Если ЕстьНакладные Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			"Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаСпискаКОформлению");
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			"Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаСпискаКОформлению");
	КонецЕсли;
	
КонецФункции

// Возвращает массив полных имен распоряжений по таблице накладных ХозяйственныеОперацииИДокументы 
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений	 - выгрузка ТЧ реквизита формы ХозяйственныеОперацииИДокументы
// 
// Возвращаемое значение:
//  Массив - массив полных имен распоряжений
//
Функция ПолныеИменаРаспоряжений(ХозяйственныеОперацииИДокументы) Экспорт
	
	ПолныеИменаРаспоряжений = Новый Массив;
	
	Для Каждого Строка Из ХозяйственныеОперацииИДокументы Цикл 
		
		Если Строка.Отбор Тогда 
			
			Если Строка.ПолноеИмяДокумента = Метаданные.Документы.СборкаТоваров.ПолноеИмя() Тогда 
				ПолныеИменаРаспоряжений.Добавить(Метаданные.Документы.ЗаказНаСборку.ПолноеИмя());
			ИначеЕсли Строка.ПолноеИмяДокумента = Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя() Тогда 
				ПолныеИменаРаспоряжений.Добавить(Метаданные.Документы.ЗаказНаВнутреннееПотребление.ПолноеИмя());
			ИначеЕсли Строка.ПолноеИмяДокумента = Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя() Тогда 
				ПолныеИменаРаспоряжений.Добавить(Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя()); 
			Иначе
				ПолныеИменаРаспоряжений.Добавить(Строка.ПолноеИмяДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолныеИменаРаспоряжений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолныеИменаРаспоряжений);
	
	Возврат ПолныеИменаРаспоряжений;
	
КонецФункции

Функция ТипыРаспоряженийИНакладных(ХозяйственныеОперацииИДокументы) Экспорт
	
	ПолныеИменаРаспоряжений = Новый Массив;
	
	Для Каждого Строка Из ХозяйственныеОперацииИДокументы Цикл 
		
		Если Строка.Отбор Тогда 
			
			Если Строка.ПолноеИмяДокумента = Метаданные.Документы.СборкаТоваров.ПолноеИмя() Тогда 
				ПолныеИменаРаспоряжений.Добавить(Тип("ДокументСсылка.ЗаказНаСборку"));
			ИначеЕсли Строка.ПолноеИмяДокумента = Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя() Тогда 
				ПолныеИменаРаспоряжений.Добавить(Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление"));
			ИначеЕсли Строка.ПолноеИмяДокумента = Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя() Тогда 
				ПолныеИменаРаспоряжений.Добавить(Тип("ДокументСсылка.ЗаказНаПеремещение"));
			КонецЕсли;
			
			ПредставлениеТипаНакладной = СтрЗаменить(Строка.ПолноеИмяДокумента, "Документ", "ДокументСсылка");
			ПолныеИменаРаспоряжений.Добавить(Тип(ПредставлениеТипаНакладной));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолныеИменаРаспоряжений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолныеИменаРаспоряжений);
	
	Возврат ПолныеИменаРаспоряжений;
	
КонецФункции

#Область ТекстыЗапросов



#Область ЗаказыНаВнутреннееПотребление

Функция ТекстЗапросаЗаказыНаВнутреннееПотребление(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ИмяРегистраЗаказыНаВнутреннееПотребление) 
		
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраЗаказыНаВнутреннееПотреблениеПоДокументуВЦелом", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраЗаказыНаВнутреннееПотреблениеПоДокументуВЦелом(ТекстыЗапроса, Склад, РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраЗаказыНаВнутреннееПотребление", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраЗаказыНаВнутреннееПотребление(ТекстыЗапроса, Склад, РаспоряженияДляПересчета);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(ВтДанныеРегистра.Ссылка) КАК Тип,
	|	ВтДанныеРегистра.Ссылка,
	|	ВтДанныеРегистра.Склад,
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеНакладной) КАК СостояниеНакладной,
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеОрдера) КАК СостояниеОрдера,
	|	4 КАК СостояниеПриходногоОрдера // Внутреннее потребление не предполагает приемки на склад, есть только отгрузка.
	|ИЗ
	|	ВтДанныеРегистраЗаказыНаВнутреннееПотребление КАК ВтДанныеРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(ВтДанныеРегистра.Ссылка),
	|	ВтДанныеРегистра.Ссылка,
	|	ВтДанныеРегистра.Склад
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеНакладной) > 0";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистраЗаказыНаВнутреннееПотребление);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРегистраЗаказыНаВнутреннееПотреблениеПоДокументуВЦелом(ТекстыЗапроса, Склад, РаспоряженияДляПересчета) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.ЗаказНаВнутреннееПотребление КАК Ссылка,
	|	Таблица.Склад,
	|	Таблица.КОформлениюРасход,
	|	Таблица.КОформлениюПриход,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА Склады.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ КАК СостояниеОрдера
	|ПОМЕСТИТЬ ВтДанныеРегистраЗаказыНаВнутреннееПотреблениеПоДокументуВЦелом
	|ИЗ
	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.ОстаткиИОбороты() КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Таблица.Склад = Склады.Ссылка
	|			И (Склады.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|Ссылка";
	
	ТекстУсловийЗапроса = "";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстУсловия = "Склад = &Склад";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ТекстУсловия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловия = "ЗаказНаВнутреннееПотребление В (&Распоряжения)";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ?(ЗначениеЗаполнено(ТекстУсловийЗапроса), " И " + ТекстУсловия, ТекстУсловия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийЗапроса) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОстаткиИОбороты(", "ОстаткиИОбороты(" + ", , , , " + ТекстУсловийЗапроса);
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДанныеРегистраЗаказыНаВнутреннееПотреблениеПоДокументуВЦелом");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРегистраЗаказыНаВнутреннееПотребление(ТекстыЗапроса, Склад, РаспоряженияДляПересчета) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ЗаказНаВнутреннееПотребление КАК Ссылка,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	ДанныеДокумента.Склад,
	|	Таблица.Серия,
	|	ВЫБОР
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ И КОНКРЕТНАЯ СТРОКА ПОЛНОСТЬЮ ОФОРМЛЕНА
	|		КОГДА Таблица.КОформлениюКонечныйОстаток = 0
	|			И ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 0
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СостояниеНакладной,
	|	ДанныеДокумента.СостояниеОрдера КАК СостояниеОрдера
	|ПОМЕСТИТЬ ВтДанныеРегистраЗаказыНаВнутреннееПотребление
	|ИЗ
	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.ОстаткиИОбороты() КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеРегистраЗаказыНаВнутреннееПотреблениеПоДокументуВЦелом КАК ДанныеДокумента
	|		ПО Таблица.ЗаказНаВнутреннееПотребление = ДанныеДокумента.Ссылка";
	
	ТекстУсловийЗапроса = "";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстУсловия = "Склад = &Склад";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ТекстУсловия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловия = "ЗаказНаВнутреннееПотребление В (&Распоряжения)";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ?(ЗначениеЗаполнено(ТекстУсловийЗапроса), " И " + ТекстУсловия, ТекстУсловия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийЗапроса) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОстаткиИОбороты(", "ОстаткиИОбороты(" + ", , , , " + ТекстУсловийЗапроса);
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДанныеРегистраЗаказыНаВнутреннееПотребление");
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗаказыНаПеремещение

Функция ТекстЗапросаЗаказыНаПеремещение(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ИмяРегистраЗаказыНаПеремещение) 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраЗаказыНаПеремещениеПоДокументуВЦелом", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраЗаказыНаПеремещениеПоДокументуВЦелом(ТекстыЗапроса, Склад, РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраЗаказыНаПеремещение", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраЗаказыНаПеремещение(ТекстыЗапроса, РаспоряженияДляПересчета);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(ВтДанныеРегистра.Ссылка) КАК Тип,
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеНакладной) КАК СостояниеНакладной,
	|	ВтДанныеРегистра.Ссылка КАК Ссылка,
	|	ВтДанныеРегистра.Склад,
	|	ВтДанныеРегистра.СкладПолучатель,
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеОрдера) КАК СостояниеОрдера,
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеПриходногоОрдера) КАК СостояниеПриходногоОрдера
	|ИЗ
	|	ВтДанныеРегистраЗаказыНаПеремещение КАК ВтДанныеРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(ВтДанныеРегистра.Ссылка),
	|	ВтДанныеРегистра.Ссылка,
	|	ВтДанныеРегистра.Склад,
	|	ВтДанныеРегистра.СкладПолучатель
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеНакладной) > 0";
				
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистраЗаказыНаПеремещение);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРегистраЗаказыНаПеремещениеПоДокументуВЦелом(ТекстыЗапроса, Склад, РаспоряженияДляПересчета) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаПеремещениеОстаткиИОбороты.КОформлениюРасход,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.КОформлениюПриход,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение КАК Ссылка,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладОтправитель КАК Склад,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладПолучатель КАК СкладПолучатель,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА Склады.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ КАК СостояниеОрдера,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В ПРИХОДНОМ ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА СкладыПолучатели.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ КАК СостояниеПриходногоОрдера
	|ПОМЕСТИТЬ ВтДанныеРегистраЗаказыНаПеремещениеПоДокументуВЦелом
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.ОстаткиИОбороты() КАК ЗаказыНаПеремещениеОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладОтправитель = Склады.Ссылка
	|			И (Склады.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыПолучатели
	|		ПО ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладПолучатель = СкладыПолучатели.Ссылка
	|			И (СкладыПолучатели.ИспользоватьОрдернуюСхемуПриПоступлении)
	|			И (СкладыПолучатели.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)
	|
	|//ТекстУсловия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|Ссылка";
	
	ТекстУсловийВиртуальнойТаблицы = "";
	ТекстУсловия = "";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстУсловия = "ГДЕ ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладОтправитель = &Склад ИЛИ 
			|ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладПолучатель = &Склад";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловийВиртуальнойТаблицы = "ЗаказНаПеремещение В (&Распоряжения)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийВиртуальнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОстаткиИОбороты(", "ОстаткиИОбороты(" + ", , , , " + ТекстУсловийВиртуальнойТаблицы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловия) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстУсловия", ТекстУсловия);
	КонецЕсли;
			
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДанныеРегистраЗаказыНаПеремещениеПоДокументуВЦелом");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРегистраЗаказыНаПеремещение(ТекстыЗапроса, РаспоряженияДляПересчета) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыНаПеремещениеОстаткиИОбороты.Номенклатура,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.Характеристика,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.Серия,
	|	ВЫБОР
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ И КОНКРЕТНАЯ СТРОКА ПОЛНОСТЬЮ ОФОРМЛЕНА
	|		КОГДА ЗаказыНаПеремещениеОстаткиИОбороты.КОформлениюКонечныйОстаток = 0
	|			И ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 0
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СостояниеНакладной,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение КАК Ссылка,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.СкладПолучатель КАК СкладПолучатель,
	|	ДанныеДокумента.СостояниеОрдера КАК СостояниеОрдера,
	|	ДанныеДокумента.СостояниеПриходногоОрдера КАК СостояниеПриходногоОрдера
	|ПОМЕСТИТЬ ВтДанныеРегистраЗаказыНаПеремещение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.ОстаткиИОбороты() КАК ЗаказыНаПеремещениеОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеРегистраЗаказыНаПеремещениеПоДокументуВЦелом КАК ДанныеДокумента
	|		ПО ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение = ДанныеДокумента.Ссылка";
	
	ТекстУсловийВиртуальнойТаблицы = "";
	ТекстУсловия = "";
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловийВиртуальнойТаблицы = "ЗаказНаПеремещение В (&Распоряжения)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийВиртуальнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОстаткиИОбороты(", "ОстаткиИОбороты(" + ", , , , " + ТекстУсловийВиртуальнойТаблицы);
	КонецЕсли;
			
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДанныеРегистраЗаказыНаПеремещениеПоДокументуВЦелом");
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗаказыНаСборку

Функция ТекстЗапросаЗаказыНаСборку(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ИмяРегистраЗаказыНаСборку) 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраЗаказыНаСборкуПоДокументуВЦелом", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраЗаказыНаСборкуПоДокументуВЦелом(ТекстыЗапроса, Склад, РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраЗаказыНаСборку", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраЗаказыНаСборку(ТекстыЗапроса, РаспоряженияДляПересчета);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(ВтДанныеРегистра.Ссылка) КАК Тип,
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеНакладной) КАК СостояниеНакладной,
	|	ВтДанныеРегистра.Ссылка,
	|	ВтДанныеРегистра.Склад,
	|	ВтДанныеРегистра.Склад КАК СкладПолучатель,
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеОрдера) КАК СостояниеОрдера,
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеПриходногоОрдера) КАК СостояниеПриходногоОрдера
	|ИЗ
	|	ВтДанныеРегистраЗаказыНаСборку КАК ВтДанныеРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(ВтДанныеРегистра.Ссылка),
	|	ВтДанныеРегистра.Ссылка,
	|	ВтДанныеРегистра.Склад
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВтДанныеРегистра.СостояниеНакладной) > 0 И МАКСИМУМ(ВтДанныеРегистра.КОформлению) > 0";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистраЗаказыНаСборку);
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаВтДанныеРегистраЗаказыНаСборкуПоДокументуВЦелом(ТекстыЗапроса, Склад, РаспоряженияДляПересчета) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаСборкуОстаткиИОбороты.КОформлениюРасход,
	|	ЗаказыНаСборкуОстаткиИОбороты.КОформлениюПриход,
	|	ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку КАК Ссылка,
	|	Заказ.Склад КАК Склад,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В РАСХОДНОМ ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА Склады.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ КАК СостояниеОрдера,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В ПРИХОДНОМ ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА СкладыПриемки.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ КАК СостояниеПриходногоОрдера
	|ПОМЕСТИТЬ ВтДанныеРегистраЗаказыНаСборкуПоДокументуВЦелом
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.ОстаткиИОбороты() КАК ЗаказыНаСборкуОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку.Склад = Склады.Ссылка
	|			И (Склады.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыПриемки
	|		ПО ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку.Склад = СкладыПриемки.Ссылка
	|			И (СкладыПриемки.ИспользоватьОрдернуюСхемуПриПоступлении)
	|			И (СкладыПриемки.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказ
	|		ПО ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку = Заказ.Ссылка
	|
	|ГДЕ
	|	НЕ Заказ.Ссылка ЕСТЬ NULL
	|	И Заказ.ХозяйственнаяОперация В (&ХозяйственныеОперации)
	|// НЕВЫПОЛНЕНИЕ ЭТОГО УСЛОВИЯ ОЗНАЧАЕТ ЧТО В ДОКУМЕНТЕ НЕТ НИ ОДНОГО ТОВАРА С ВИДОМ ОБЕСПЕЧЕНИЯ ОТГРУЗИТЬ ИЛИ ОТГРУЗИТЬ ОБОСОБЛЕННО:
	|	И (ЗаказыНаСборкуОстаткиИОбороты.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|				И ЗаказыНаСборкуОстаткиИОбороты.КОформлениюПриход > 0)
	|//ТекстУсловия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|Ссылка";
	
	ТекстУсловийВиртуальнойТаблицы = "";
	ТекстУсловия = "";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстУсловия = " И Заказ.Склад = &Склад";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловийВиртуальнойТаблицы = "ЗаказНаСборку В (&Распоряжения)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийВиртуальнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОстаткиИОбороты(", "ОстаткиИОбороты(" + ", , , , " + ТекстУсловийВиртуальнойТаблицы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловия) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстУсловия", ТекстУсловия);
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДанныеРегистраЗаказыНаСборкуПоДокументуВЦелом");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРегистраЗаказыНаСборку(ТекстыЗапроса, РаспоряженияДляПересчета) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыНаСборкуОстаткиИОбороты.Номенклатура,
	|	ЗаказыНаСборкуОстаткиИОбороты.Характеристика,
	|	ЗаказыНаСборкуОстаткиИОбороты.Серия,
	|	ВЫБОР
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ И КОНКРЕТНАЯ СТРОКА ПОЛНОСТЬЮ ОФОРМЛЕНА
	|		КОГДА ЗаказыНаСборкуОстаткиИОбороты.КОформлениюКонечныйОстаток = 0
	|			И ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 0
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СостояниеНакладной,
	|	ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку КАК Ссылка,
	|	ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку.Склад КАК Склад,
	|	ЗаказыНаСборкуОстаткиИОбороты.КОформлениюПриход КАК КОформлению,
	|	ДанныеДокумента.СостояниеОрдера КАК СостояниеОрдера,
	|	ДанныеДокумента.СостояниеПриходногоОрдера КАК СостояниеПриходногоОрдера
	|ПОМЕСТИТЬ ВтДанныеРегистраЗаказыНаСборку
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.ОстаткиИОбороты() КАК ЗаказыНаСборкуОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеРегистраЗаказыНаСборкуПоДокументуВЦелом КАК ДанныеДокумента
	|		ПО ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку = ДанныеДокумента.Ссылка";
	
	ТекстУсловийВиртуальнойТаблицы = "";
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловийВиртуальнойТаблицы = "ЗаказНаСборку В (&Распоряжения)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийВиртуальнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОстаткиИОбороты(", "ОстаткиИОбороты(" + ", , , , " + ТекстУсловийВиртуальнойТаблицы);
	КонецЕсли;
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДанныеРегистраЗаказыНаСборку");
	
	Возврат ТекстЗапроса;
		
КонецФункции

#КонецОбласти

#Область ТоварыКОтгрузке

Функция ТекстЗапросаТоварыКОтгрузке(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ИмяРегистраТоварыКОтгрузке, ОтобратьПоТипамРаспоряжений = Ложь)
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОстаткиТоварыКОтгрузке", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиТоварыКОтгрузке(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ОтобратьПоТипамРаспоряжений);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтЕстьОрдера", ТекстыЗапроса) Тогда
		ТекстЗапросаВтЕстьОрдера(ТекстыЗапроса, Склад, РаспоряженияДляПересчета);
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументОтгрузки КАК Ссылка,
	|	Таблица.Склад            КАК Склад,
	|	
	|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаЕстьОрдера.ДокументОтгрузки ЕСТЬ NULL И НЕ СпрСклады.Ссылка ЕСТЬ NULL ТОГДА
	|				1
	|			КОГДА Таблица.КОтгрузкеОстаток - Таблица.СобраноОстаток = Таблица.КОформлениюОстаток ТОГДА
	|				0
	|			ИНАЧЕ
	|				3
	|		КОНЕЦ)               КАК СостояниеОрдера,
	|		
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументОтгрузки) КАК Тип
	|ИЗ
	|	ВтОстаткиТоварыКОтгрузке КАК Таблица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьОрдера КАК ТаблицаЕстьОрдера
	|		ПО ТаблицаЕстьОрдера.ДокументОтгрузки = Таблица.ДокументОтгрузки
	|		 И ТаблицаЕстьОрдера.Склад            = Таблица.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО СпрСклады.Ссылка = Таблица.Склад
	|		 И СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|		 И СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня
	|		
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ДокументОтгрузки,
	|	Таблица.Склад
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаЕстьОрдера.ДокументОтгрузки ЕСТЬ NULL И НЕ СпрСклады.Ссылка ЕСТЬ NULL ТОГДА
	|				1
	|			КОГДА Таблица.КОтгрузкеОстаток - Таблица.СобраноОстаток = Таблица.КОформлениюОстаток ТОГДА
	|				0
	|			ИНАЧЕ
	|				3
	|		КОНЕЦ) > 0";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистраТоварыКОтгрузке);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОстаткиТоварыКОтгрузке(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ОтобратьПоТипамРаспоряжений = Ложь)
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОстаткиТоварыКОтгрузкеДляЗапроса", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиТоварыКОтгрузкеДляЗапроса(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ОтобратьПоТипамРаспоряжений);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОтборПоХозяйственнойОперацииОтгрузка", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОтборПоХозяйственнойОперацииОтгрузка(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ОтобратьПоТипамРаспоряжений);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Склад КАК Склад,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.КОформлениюОстаток КАК КОформлениюОстаток,
	|	Таблица.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|	Таблица.СобраноОстаток КАК СобраноОстаток
	|ПОМЕСТИТЬ ВтОстаткиТоварыКОтгрузке
	|ИЗ
	|	ВтОстаткиТоварыКОтгрузкеДляЗапроса КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОтборПоХозяйственнойОперацииОтгрузка КАК ВтОтборПоХозяйственнойОперацииОтгрузка
	|		ПО ВтОтборПоХозяйственнойОперацииОтгрузка.Ссылка = Таблица.ДокументОтгрузки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтОстаткиТоварыКОтгрузке"); 
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаВтДокументыОтгрузки(ТекстыЗапроса, Склад, РаспоряженияДляПересчета)
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОстаткиТоварыКОтгрузке", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиТоварыКОтгрузке(ТекстыЗапроса, Склад, РаспоряженияДляПересчета);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Склад            КАК Склад
	|ПОМЕСТИТЬ ВтДокументыОтгрузки
	|ИЗ
	|	ВтОстаткиТоварыКОтгрузке КАК Таблица";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДокументыОтгрузки");
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтЕстьОрдера(ТекстыЗапроса, Склад, РаспоряженияДляПересчета)
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДокументыОтгрузки", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДокументыОтгрузки(ТекстыЗапроса, Склад, РаспоряженияДляПересчета);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Склад            КАК Склад
	|ПОМЕСТИТЬ ВтЕстьОрдера
	|ИЗ
	|	ВтДокументыОтгрузки КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = Таблица.ДокументОтгрузки
	|		 И ТоварыКОтгрузке.Склад = Таблица.Склад
	|		 И ТоварыКОтгрузке.Активность
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузке > 0
	|			И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|		ИЛИ ТоварыКОтгрузке.Собрано > 0
	|		 	И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки, Склад";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтЕстьОрдера"); 
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТоварыКОформлениюПоступления

Функция ТекстЗапросаТоварыКОформлениюПоступления(ТекстыЗапроса, РаспоряженияДляПересчета, ИмяРегистраТоварыКОформлениюПоступления) 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраТоварыКОформлениюПоступления", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраТоварыКОформлениюПоступления(ТекстыЗапроса, РаспоряженияДляПересчета);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(втДанныеРегистра.Ссылка) КАК Тип,
	|	втДанныеРегистра.СкладПолучатель,
	|	втДанныеРегистра.Ссылка,
	|	МАКСИМУМ(втДанныеРегистра.СостояниеОрдера) КАК СостояниеПриходногоОрдера,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтДанныеРегистраТоварыКОформлениюПоступления КАК втДанныеРегистра
	|ГДЕ
	|	втДанныеРегистра.СостояниеОрдера > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(втДанныеРегистра.Ссылка),
	|	втДанныеРегистра.СкладПолучатель,
	|	втДанныеРегистра.Ссылка";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистраТоварыКОформлениюПоступления);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРегистраТоварыКОформлениюПоступления(ТекстыЗапроса, РаспоряженияДляПересчета) 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса(ТекстыЗапроса, РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОтборПоХозяйственнойОперацииПоступление", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОтборПоХозяйственнойОперацииПоступление(ТекстыЗапроса, РаспоряженияДляПересчета);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.Номенклатура КАК Номенклатура,
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.Характеристика КАК Характеристика,
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.СкладПолучатель КАК СкладПолучатель,
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.Назначение КАК Назначение,
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.Серия КАК Серия,
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.КОформлению КАК КОформлению,
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.СостояниеОрдера КАК СостояниеОрдера,
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтДанныеРегистраТоварыКОформлениюПоступления
	|ИЗ
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса КАК ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОтборПоХозяйственнойОперацииПоступление КАК ВтОтборПоХозяйственнойОперацииПоступление
	|		ПО (ВтОтборПоХозяйственнойОперацииПоступление.Ссылка = ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	Характеристика";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДанныеРегистраТоварыКОформлениюПоступления");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса(ТекстыЗапроса, РаспоряженияДляПересчета) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКОформлениюПоступления.Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика,
	|	ТоварыКОформлениюПоступления.Склад КАК СкладПолучатель,
	|	ТоварыКОформлениюПоступления.Назначение,
	|	ТоварыКОформлениюПоступления.Серия,
	|	ЕСТЬNULL(ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамРасход, 0) КАК КОформлению,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамКонечныйОстаток = 0
	|				И ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамПриход > 0
	|			ТОГДА 0
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамПриход > 0
	|			ТОГДА 3
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СостояниеОрдера,
	|	ТоварыКОформлениюПоступления.ДокументПоступления КАК Ссылка
	|ПОМЕСТИТЬ ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(, , , , 
	|		ТИПЗНАЧЕНИЯ(ДокументПоступления) В (&ДоступныеТипыНакладныхИЗаказов)
	|		И &ТекстУсловийОтбораРаспоряжений
	|		) КАК ТоварыКОформлениюПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловийОтбораРаспоряжений = "ДокументПоступления В (&Распоряжения)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловийОтбораРаспоряжений", ТекстУсловийОтбораРаспоряжений);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловийОтбораРаспоряжений", "ИСТИНА");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОтборПоХозяйственнойОперацииПоступление(ТекстыЗапроса, РаспоряженияДляПересчета) 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса(ТекстыЗапроса, РаспоряженияДляПересчета);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Реестр.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтОтборПоХозяйственнойОперацииПоступление
	|ИЗ
	|	ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса КАК ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК Реестр
	|		ПО ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.Ссылка = Реестр.Ссылка
	|			И (Реестр.ХозяйственнаяОперация В (&ХозяйственныеОперации))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтОтборПоХозяйственнойОперацииПоступление");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОстаткиТоварыКОтгрузкеДляЗапроса(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ОтобратьПоТипамРаспоряжений)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Склад КАК Склад,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.КОформлениюОстаток КАК КОформлениюОстаток,
	|	Таблица.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|	Таблица.СобраноОстаток КАК СобраноОстаток
	|ПОМЕСТИТЬ ВтОстаткиТоварыКОтгрузкеДляЗапроса
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|			, &ТекстУсловийЗапросаТоварыКОтгрузке) КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки";
	
	ТекстыУсловийЗапросаТоварыКОтгрузке = Новый Массив;
	
	Если ОтобратьПоТипамРаспоряжений Тогда
		ТекстыУсловийЗапросаТоварыКОтгрузке.Добавить("ТИПЗНАЧЕНИЯ(ДокументОтгрузки) В (&ДоступныеТипыНакладныхИЗаказов)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстыУсловийЗапросаТоварыКОтгрузке.Добавить("Склад = &Склад");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстыУсловийЗапросаТоварыКОтгрузке.Добавить("ДокументОтгрузки В (&Распоряжения)");
	КонецЕсли;
	
	Если ТекстыУсловийЗапросаТоварыКОтгрузке.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловийЗапросаТоварыКОтгрузке", СтрСоединить(ТекстыУсловийЗапросаТоварыКОтгрузке, " И "));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловийЗапросаТоварыКОтгрузке", "");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтОстаткиТоварыКОтгрузкеДляЗапроса"); 
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаВтОтборПоХозяйственнойОперацииОтгрузка(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ОтобратьПоТипамРаспоряжений) 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОстаткиТоварыКОтгрузкеДляЗапроса", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиТоварыКОтгрузкеДляЗапроса(ТекстыЗапроса, Склад, РаспоряженияДляПересчета, ОтобратьПоТипамРаспоряжений);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Реестр.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтОтборПоХозяйственнойОперацииОтгрузка
	|ИЗ
	|	ВтОстаткиТоварыКОтгрузкеДляЗапроса КАК ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК Реестр
	|		ПО ВтДанныеРегистраТоварыКОформлениюПоступленияДляЗапроса.ДокументОтгрузки = Реестр.Ссылка
	|			И (Реестр.ХозяйственнаяОперация В (&ХозяйственныеОперации))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтОтборПоХозяйственнойОперацииОтгрузка");
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
