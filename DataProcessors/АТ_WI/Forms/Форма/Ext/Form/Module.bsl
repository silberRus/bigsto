
&НаКлиенте
Перем ПопыткаТестов;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьСписокТестов();
	
	ВремяЖизниКлюча 		= Константы.АТ_ВремяЖизниКлюча.Получить();
	ВремяЖизниМастерКлюча 	= Константы.АТ_ВремяЖизниМастерКлюча.Получить();
	ПутьКЛогу				= Константы.АТ_ПутьКЛогуWI.Получить();
	
	ПутьКФайлам				= Константы.АТ_ПутьКФайлам.Получить();
	URLКартинок				= Константы.АТ_URLКФайлам.Получить();
	
	AccessControlAllowCredentials 	= Константы.АТ_AccessControlAllowCredentials.Получить();
	AccessControlAllowHeaders		= Константы.АТ_AccessControlAllowHeaders.Получить();
	AccessControlAllowMaxAge 		= Константы.АТ_AccessControlAllowMaxAge.Получить();
	AccessControlAllowMethods		= Константы.АТ_AccessControlAllowMethods.Получить();
	AccessControlAllowOrigin		= Константы.АТ_AccessControlAllowOrigin.Получить();
	
КонецПроцедуры

&НаСервере
Процедура ВремяЖизниКлючаПриИзмененииНаСервере()
	Константы.АТ_ВремяЖизниКлюча.Установить(ВремяЖизниКлюча);	
КонецПроцедуры
&НаКлиенте
Процедура ВремяЖизниКлючаПриИзменении(Элемент)
	ВремяЖизниКлючаПриИзмененииНаСервере();
КонецПроцедуры
&НаСервере
Процедура ВремяЖизниМастерКлючаПриИзмененииНаСервере()	
	Константы.АТ_ВремяЖизниМастерКлюча.Установить(ВремяЖизниМастерКлюча);
КонецПроцедуры
&НаКлиенте
Процедура ВремяЖизниМастерКлючаПриИзменении(Элемент)
	ВремяЖизниМастерКлючаПриИзмененииНаСервере();
КонецПроцедуры
&НаСервере
Процедура ПутьКЛогуПриИзмененииНаСервере()
	Константы.АТ_ПутьКЛогуWI.Установить(ВремяЖизниКлюча);	
КонецПроцедуры
&НаКлиенте
Процедура ПутьКЛогуПриИзменении(Элемент)
	ПутьКЛогуПриИзмененииНаСервере()
КонецПроцедуры


&НаСервере
Процедура СоздатьНовыхПользователейИзКонфигуратораНаСервере()
	
	РольWI			= Метаданные.Роли.АТ_WI;
	ПользователиИБ 	= ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ ИЗ ПользователиИБ Цикл
		
		Если 	ПользовательИБ.Роли.Содержит(РольWI) И 
				Справочники.АТ_ПользователиИнтернет.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор).Пустая() Тогда
				
			НовСпр = Справочники.АТ_ПользователиИнтернет.СоздатьЭлемент();
			НовСпр.Наименование = ПользовательИБ.ПолноеИмя;
			НовСпр.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			НовСпр.Записать();
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура СоздатьНовыхПользователейИзКонфигуратора(Команда)
	
	СоздатьНовыхПользователейИзКонфигуратораНаСервере();
	Элементы.Пользователи.Обновить();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьКешЗначениеКонстанты(Имя)
	
	Константы["АТ_" + Имя].Установить(ЭтаФорма[Имя]);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры
&НаКлиенте
Процедура ПриИзмененииКешируемого(Элемент)
	
	ОбновитьКешЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКиллераНаСервере()
	
	АТ_WI.АТ_КиллерСессий();	
	
КонецПроцедуры
&НаКлиенте
Процедура ХодКиллера(Команда)
	
	ВыполнитьКиллераНаСервере();	
	ПоказатьОповещениеПользователя("Киллер был запущен",,"один ход");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПрефиксноеДеревоНаСервере()
	
	ПоследнийЛог = АТ_WI_Кеш.ПолучитьВсеАртикулыВJSON();
	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьПрефиксноеДерево(Команда)
	
	ПолучитьПрефиксноеДеревоНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВсеКартинки()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.НоменклатураПрисоединенныеФайлы ГДЕ Расширение <> """"");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
&НаСервере
Процедура ЗаписатьКартинку(Ссылка)
	
	Попытка
		АТ_WI.АТ_ПриЗаписиПрисоединенногоФайлаПриЗаписи(Ссылка, Ложь);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаписатьКартинки(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Ссылки 	= ПолучитьВсеКартинки();
		Кол 	= Ссылки.Количество();
		Ном 	= 0;
		
		Для Каждого Ссылка Из Ссылки Цикл Ном = Ном + 1;
			
			ОбработкаПрерыванияПользователя();
			Состояние("Запись картинок", Ном / Кол * 100, Ссылка, БиблиотекаКартинок.ВыборОКВЭДСельскоеХозяйство);
			ЗаписатьКартинку(Ссылка);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаписатьВсеКартинкиНаДиск(Команда)
	
	Если ПустаяСтрока(ПутьКФайлам) Тогда
		ПоказатьПредупреждение(,"Не указан путь для картинок");
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьКартинки", ЭтаФорма), "Записать все картинки на диск?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#Область Unit_test_ы

&НаСервере
Процедура ЗагрузитьСписокТестов()
	
	СписокТестов = ПолучитьСписокUnitФункций();
	
КонецПроцедуры
&НаСервере
Функция ВычислитьНаСервере(ИмяФункции, Время)
	
	Пуск = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Результат = Вычислить(ИмяФункции + "()");
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Пуск;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
Функция ВычислитьНаКлиенте(Элемент)
	
	Перем Время;
	
	Если ВычислитьНаСервере(Элемент.Значение, Время) Тогда
		
		Элемент.Представление = Элемент.Представление + " [" + Время + "ms]";
		Элемент.Пометка = Истина;
		Возврат Истина;
		
	Иначе
		
		Элемент.Пометка = Ложь;
		Элемент.Представление = Элемент.Представление + " [BUG:" + Время + "ms]";
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ЗапуститьВсеТесты(Команда)
	
	Если ПопыткаТестов = Неопределено Тогда
		ПопыткаТестов = 0;
	КонецЕсли;
	
	Кол = СписокТестов.Количество();
	Ном = 0;
	Для Каждого Элемент Из СписокТестов Цикл Ном = Ном + 1;
		
		ОбработкаПрерыванияПользователя();
		Состояние("Тестируем", Ном / Кол * 100, Элемент.Представление, БиблиотекаКартинок.ИнформацияНовости32Анимированная);
		
		Элементы.СписокТестов.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
		Элементы.СписокТестов.Обновить();
		
		Если Не ВычислитьНаКлиенте(Элемент) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя("Тесты пройдены!",,?(ПопыткаТестов, "Все стабильно.", "в этот раз тебе повезло"), БиблиотекаКартинок.ИнформацияНовости32Анимированная);
	ПопыткаТестов = ПопыткаТестов + 1;
	
КонецПроцедуры
&НаКлиенте
Процедура СписокТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем Время;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВычислитьНаКлиенте(СписокТестов.НайтиПоИдентификатору(ВыбраннаяСтрока)) Тогда
		ПоказатьОповещениеПользователя("Тест пройден!",,"Хорошая функция", БиблиотекаКартинок.ИнформацияНовости32Анимированная);
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьСвободныйТоварНаОстатках(КолТовара = 1)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ " + КолТовара + " Номенклатура, Склад,  ВНаличииОстаток - ВРезервеСоСкладаОстаток - ВРезервеПодЗаказОстаток Количество
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки
	|ГДЕ
	|	ВНаличииОстаток > 0");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция ПолучитьАдресДоставки()
	
	Запрос 	= Новый Запрос("ВЫБРАТь ПЕРВЫЕ 1 Ссылка Из Справочник.БП_АдресаДоставкиКонтрагентов ГДЕ Не ПометкаУдаления");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПроверитьОжидание(Результат, Ожидание, Ошибка, Описание)
	
	Если Результат <> Ожидание Тогда
		
		Ошибка = Истина;
		
		Сообщить(СтрШаблон("Не пройдено ожидание {%3}:
		|ожидалось: %1
		|у вас: %2", Ожидание, Результат, Описание));
		
	КонецЕсли;
	
КонецПроцедуры

#Область TESTs

&НаСервере
Функция ПолучитьСписокUnitФункций() // ДОБАВЛЯТЬ НАЗВАНИЯ ФУНКЦИЙ ТЕСТОВ СЮДА
	
	// чтобы функции попали в общее тестирование
	
	Список = новый СписокЗначений;
	
	Список.Добавить("Юз_ПолучитьКлючTest", 								"Получить ключи пользователя и настройки Test пароль 123456");
	Список.Добавить("Юз_РегистрацияНовогоПользователя", 				"Регистрация нового пользователя");
	Список.Добавить("Юз_ПолучитьАдресаДоставки", 						"Получить адреса доставки");
	Список.Добавить("Юз_ПолучитьКонтрагентов",	 						"Получить контрагентов");
	Список.Добавить("Юз_ПолучитьИнформациюВсю",	 						"Получить всю информацию пользователя");
	
	Список.Добавить("usr_ИзменениеПользователя",						"Изменение usr");
	Список.Добавить("usr_РегистрацияНовогоПользователя",	 			"Регистрация нового usr");
	Список.Добавить("usr_УдалениеПользователя",	 						"Удаление usr");
	Список.Добавить("usr_СписокПользователей",	 						"Список usr");
	
	Список.Добавить("Тов10_guid_name", 									"Получить 10 товаров (guid и name)");
	Список.Добавить("Тов10_guid_name_sku_price_quantity_manufacturer_stores_delivery_time", "Получить 10 товаров (guid, name, sku, price, quantity, stores, delivery_time)");
	Список.Добавить("Тов_350566_guid_imgUrls_name", 					"Получить картинки товаров 350566 (guid и img_urls)");
	Список.Добавить("Тов_ПоискПодобноБольшеЧемТочно", 					"Результат поиска артикула ECKK.11 по совпадению, больше чем точный поиск.");
	Список.Добавить("Тов_350566_ДолженБытьБезДублей", 					"При точном поиске 350566 товар должен быть 1");
	Список.Добавить("Тов_Поиск_11_ТоваровПроверкаЗапроса", 				"Проверка поиска запроса товара по артикулу %11%");
	Список.Добавить("Тов_Поиск_11_всехТоваровПроверкаЗапроса", 			"Проверка поиска запроса товара по артикулу <all = true> %11%");
	
	Список.Добавить("Корз_ОчиститьКорзину", 							"Очистить корзину");
	Список.Добавить("Корз_ДобавитьВКорзину", 							"Добавить в корзину");
	Список.Добавить("Корз_Добавить2ВКорзинуИПолучитьТовары", 			"Добавить 2 товара в корзину и получить корзину");
	Список.Добавить("Корз_ДобавитьТовараБольшеЧемНаОстатках", 			"Добавить товара в корзину больше чем есть на остатках");
	
	Список.Добавить("КП_ПолучитьЗаказыКлиента", 						"Получить все КП клиента");
	Список.Добавить("КП_ПечатьСчета", 									"Получить URL счета");
	
	Список.Добавить("ИсторияПоиска_Добавить", 									"История поиска - добавить");
	Список.Добавить("ИсторияПоиска_Получить", 									"История поиска - получить");
	
	Возврат Список;
	
КонецФункции

// ПОЛЬЗОВАТЕЛИ

Функция access_token_ТестПользователя(Ошибка, Usr)
	
	Запрос 	= Новый Структура("Тело", Новый Структура("login, password", "test", "123456"));
	Ответ 	= АТ_WI.ПолучитьКлючGET(Запрос, Истина);
	Usr 	= АТ_WI.ПолучитьПользователя(Запрос, Неопределено, Неопределено, Ложь, Истина);
	
	Если ТипЗнч(Ответ.Тело) = Тип("Структура") И Ответ.Тело.Свойство("access_token") Тогда
		Возврат Ответ.Тело.access_token;
	Иначе
		Ошибка = Истина;
		Сообщить(Ответ.Тело);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция Юз_ПолучитьКлючTest()
	
	Ошибка = Ложь;
	Ответ = АТ_WI.ПолучитьКлючGET(Новый Структура("Тело", Новый Структура("login, password", "test", "123456")), Истина);
	
	Если ТипЗнч(Ответ.Тело) <> Тип("Структура") Тогда
		Сообщить(Ответ.Тело);
	КонецЕсли;
	
	ПроверитьОжидание(
			ТипЗнч(Ответ.Тело) = Тип("Структура") И 
			Ответ.Тело.Свойство("refresh_token") И 
			Ответ.Тело.Свойство("access_token") И
			Ответ.Тело.Свойство("userSettings") И
			Ответ.Тело.userSettings.Свойство("id") И
			Ответ.Тело.userSettings.Свойство("role"), Истина, Ошибка, "Получение ключей и настроек пользователя");
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Юз_РегистрацияНовогоПользователя()
	
	Ошибка = Ложь;
	
	НачатьТранзакцию();
	Ответ = АТ_WI.РегистрацияПользователяPOST(Новый Структура("Тело", Новый Структура("login, password, role", "login010101", "1122112211", "superuser")), Истина);
	ОтменитьТранзакцию();
	
	ПроверитьОжидание(Ответ.Тело, Истина, Ошибка, "Регистрация нового пользователя");
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Юз_ПолучитьАдресаДоставки()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Ответ = АТ_WI.ПолучитьАдрессаДоставкиPOST(Новый Структура("Тело", Новый Структура("access_token", access_token)), Истина);
		ПроверитьОжидание(ТипЗнч(Ответ.Тело) = Тип("ТаблицаЗначений"), Истина, Ошибка, "Получить адреса доставки");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Юз_ПолучитьКонтрагентов()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Ответ = АТ_WI.ПолучитьКонтрагентовPOST(Новый Структура("Тело", Новый Структура("access_token", access_token)), Истина);
		ПроверитьОжидание(
					ТипЗнч(Ответ.Тело) = Тип("ТаблицаЗначений") И 
					Ответ.Тело.Количество() И 
					Ответ.Тело[0].address.Количество() И
					ТипЗнч(Ответ.Тело[0].address[0].guid) = Тип("СправочникСсылка.БП_АдресаДоставкиКонтрагентов"), Истина, Ошибка, "Получить контрагентов");
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Юз_ПолучитьИнформациюВсю()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Ответ = АТ_WI.ИнформацияВсяPOST(Новый Структура("Тело", Новый Структура("access_token", access_token)), Истина);
		ПроверитьОжидание(ТипЗнч(Ответ.Тело) = Тип("Структура"), Истина, Ошибка, "Получить контрагентов");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции

// ПОДПОЛЬЗОВАТЕЛИ

&НаСервере
Функция ПолучитьUsr(superUser, Поля)
	
	Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1 %1 ИЗ Справочник.АТ_ПользователиИнтернет ГДЕ НЕ ПометкаУдаления И superuser = &superuser", Поля));
	Запрос.УстановитьПараметр("superuser", superUser);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Количество() Тогда
		ВызватьИсключение "у супер пользователя" + superUser + " нет подчиненных пользователей, добавтье в справочнике";
	КонецЕсли;
	
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции

&НаСервере
Функция usr_СписокПользователей()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Выборка = ПолучитьUsr(Usr.Пользователь, "Ссылка");
		
		Ответ = АТ_WI.Пользователь_СписокPOST(Новый Структура("Тело", Новый Структура("access_token", access_token)), Истина);
		ПроверитьОжидание(ТипЗнч(Ответ.Тело) = Тип("ТаблицаЗначений") И Ответ.Тело.Найти(Выборка.Ссылка, "guid") <> Неопределено, Истина, Ошибка, "Удаление user");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция usr_РегистрацияНовогоПользователя()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
	
		НачатьТранзакцию();
		Ответ = АТ_WI.Пользователь_ЗарегистрироватьPOST(Новый Структура("Тело", Новый Структура("access_token, login, password", access_token, "logn010101", "1112211")), Истина);
		ОтменитьТранзакцию();
		
		ПроверитьОжидание(Ответ.Тело, Истина, Ошибка, "Регистрация нового user");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция usr_УдалениеПользователя()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Выборка = ПолучитьUsr(Usr.Пользователь, "Ссылка");
		
		НачатьТранзакцию();
		Ответ = АТ_WI.Пользователь_УдалитьPOST(Новый Структура("Тело", Новый Структура("access_token, guid", access_token, XMLСтрока(Выборка.Ссылка))), Истина);
		ОтменитьТранзакцию();
		
		ПроверитьОжидание(Ответ.Тело, Истина, Ошибка, "Удаление user");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция usr_ИзменениеПользователя()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Выборка = ПолучитьUsr(Usr.Пользователь, "Ссылка, address");
		Адрес = Выборка.address + "+";
		
		НачатьТранзакцию();
		Ответ = АТ_WI.Пользователь_ИзменитьPOST(Новый Структура("Тело", Новый Структура("access_token, guid, address", access_token, XMLСтрока(Выборка.Ссылка), Адрес)), Истина);
		
		Выборка = ПолучитьUsr(Usr.Пользователь, "address");
		Результат = Выборка.address;
		
		ОтменитьТранзакцию();
		
		ПроверитьОжидание(Результат, Адрес, Ошибка, "Изменить адрес пользователя");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции

// ТОВАРЫ

&НаСервере
Функция Тов10_guid_name()
	
	Ошибка = Ложь;
	Товары = АТ_WI.Сущность_Товары(Новый Структура("fields, search, first", "guid, name", 0, 10), Неопределено, Истина);
	
	ПроверитьОжидание(Товары.Количество(), 10, Ошибка, "количество товаров");
	ПроверитьОжидание(Товары.Колонки.Найти("guid") <> Неопределено, Истина, Ошибка, "есть колонка guid");
	ПроверитьОжидание(Товары.Колонки.Найти("name") <> Неопределено, Истина, Ошибка, "есть колонка name");
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Тов10_guid_name_sku_price_quantity_manufacturer_stores_delivery_time()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
	
	
		Товары = АТ_WI.Сущность_Товары(Новый Структура("fields, search, first, Usr, address", 
					"guid, name, sku, price, quantity, manufacturer, stores, delivery_time", 0, 10, Usr.Пользователь, XMLСтрока(ПолучитьАдресДоставки())), Неопределено, Истина);
		
		ПроверитьОжидание(Товары.Количество(), 10, Ошибка, "количество товаров");
		ПроверитьОжидание(Товары.Колонки.Найти("guid") <> Неопределено, Истина, Ошибка, "есть колонка guid");
		ПроверитьОжидание(Товары.Колонки.Найти("name") <> Неопределено, Истина, Ошибка, "есть колонка name");
		ПроверитьОжидание(Товары.Колонки.Найти("sku") <> Неопределено, Истина, Ошибка, "есть колонка sku");
		ПроверитьОжидание(Товары.Колонки.Найти("quantity") <> Неопределено, Истина, Ошибка, "есть колонка quantity");
		ПроверитьОжидание(Товары.Колонки.Найти("manufacturer") <> Неопределено, Истина, Ошибка, "есть колонка manufacturer");
		
		ПроверитьОжидание(Товары[0].stores[0].Свойство("price") И Товары[0].stores[0].price <> 0, Истина, Ошибка, "есть цена в stores");
		
		ПроверитьОжидание(Товары.Колонки.Найти("delivery_time") <> Неопределено И
							ТипЗнч(Товары[0].delivery_time) = Тип("Число"), Истина, Ошибка, "заполнено delivery_time");
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Тов_350566_guid_imgUrls_name()
	
	Ошибка = Ложь;
	Товары = АТ_WI.Сущность_Товары(Новый Структура("fields, search, sku", "guid, img_urls", 0, "350566"), Неопределено, Истина);
	
	ПроверитьОжидание(Товары.Колонки.Найти("guid") <> Неопределено, Истина, Ошибка, "есть колонка guid");
	ПроверитьОжидание(Товары.Колонки.Найти("img_urls") <> Неопределено, Истина, Ошибка, "есть колонка img_urls");
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Тов_ПоискПодобноБольшеЧемТочно()
	
	Ошибка = Ложь;
	Кол0 = АТ_WI.Сущность_Товары(Новый Структура("fields, search, sku", "guid", 0, "ECKK.11"), Неопределено, Истина).Количество();
	Кол2 = АТ_WI.Сущность_Товары(Новый Структура("fields, search, sku", "guid", 2, "ECKK.11"), Неопределено, Истина).Количество();
	
	ПроверитьОжидание(Кол0 > Кол2, Истина, Ошибка, "Поиск ECKK.11 по совпадению больше чем точное совпадение.");
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Тов_350566_ДолженБытьБезДублей()
	
	Ошибка = Ложь;
	Товары = АТ_WI.Сущность_Товары(Новый Структура("fields, search, sku", "guid, name, sku, quantity, manufacturer", 3, "350566"), Неопределено, Истина);
	
	ПроверитьОжидание(Товары.Количество(), 1, Ошибка, "Количество товара");
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Тов_Поиск_11_ТоваровПроверкаЗапроса()
	
	Ошибка = Ложь;
	Товары = АТ_WI.Сущность_Товары(Новый Структура("fields, search, sku", "guid", 0, "11"), Неопределено, Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.АналогиТоваров.СрезПоследних(,АртикулДляПоиска ПОДОБНО ""%11%"") Ан
	|ПО 				Спр.Ссылка = Ан.Номенклатура
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки Ост
	|ПО Спр.Ссылка = Ост.Номенклатура
	|
	|ГДЕ 
	|	Спр.АртикулДляПоиска ПОДОБНО ""%11%"" И 
	|	НЕ Спр.ЭтоГруппа И НЕ Спр.ПометкаУдаления И Не УДалено
	|");
	
	ПроверитьОжидание(Товары.Количество(), Запрос.Выполнить().Выбрать().Количество(), Ошибка, "Результат поиска артикула товара %11%");
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Тов_Поиск_11_всехТоваровПроверкаЗапроса()
	
	Ошибка = Ложь;
	Товары = АТ_WI.Сущность_Товары(Новый Структура("fields, search, sku, all", "guid", 0, "11", Истина), Неопределено, Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.АналогиТоваров.СрезПоследних(,АртикулДляПоиска ПОДОБНО ""%11%"") Ан
	|ПО 				Спр.Ссылка = Ан.Номенклатура
	|
	|ГДЕ 
	|	Спр.АртикулДляПоиска ПОДОБНО ""%11%"" И 
	|	НЕ Спр.ЭтоГруппа И НЕ Спр.ПометкаУдаления И Не УДалено
	|");
	
	ПроверитьОжидание(Товары.Количество(), Запрос.Выполнить().Выбрать().Количество(), Ошибка, "Результат поиска артикула товара <all = true> %11%");
	
	Возврат Не Ошибка;
	
КонецФункции

// КОРЗИНА

&НаСервере
Функция Корз_ОчиститьКорзину()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
	
		АТ_WI.Корзина_ОчиститьPOST(Новый Структура("Тело", Новый Структура("access_token", access_token)), Истина);
		
		Запрос = Новый  Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ РегистрСведений.АТ_ИнтернетКорзина ГДЕ ПользовательИнтернет = &Usr");
		Запрос.УстановитьПараметр("Usr", Usr.Пользователь);
		ПроверитьОжидание(Запрос.Выполнить().Пустой(), Истина, Ошибка, "Очищенная корзина");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Корз_ДобавитьВКорзину()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Набор = РегистрыСведений.АТ_ИнтернетКорзина.СоздатьНаборЗаписей();
		Набор.Отбор.ПользовательИнтернет.Установить(Usr.Пользователь);
		Набор.Записать();
		
		Товар = ПолучитьСвободныйТоварНаОстатках()[0];
		АТ_WI.Корзина_ДобавитьPOST(Новый Структура("Тело", Новый Структура("access_token, guid, store, quantity, price", 
					access_token, XMLСтрока(Товар.Номенклатура), XMLСтрока(Товар.Склад), 1, 1000)), Истина);
		
		Набор.Прочитать();
		ПроверитьОжидание(Набор.Количество() = 1 И Набор[0].Номенклатура = Товар.Номенклатура И Набор[0].Количество = 1, Истина, Ошибка, "Добавлен товар в корзину: " + Товар.Номенклатура);
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Корз_Добавить2ВКорзинуИПолучитьТовары()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Набор = РегистрыСведений.АТ_ИнтернетКорзина.СоздатьНаборЗаписей();
		Набор.Отбор.ПользовательИнтернет.Установить(Usr.Пользователь);
		Набор.Записать();
		
		Товары = ПолучитьСвободныйТоварНаОстатках(2);
		АТ_WI.Корзина_ДобавитьPOST(Новый Структура("Тело", Новый Структура("access_token, guid, store, quantity, price", access_token, XMLСтрока(Товары[0].Номенклатура), XMLСтрока(Товары[0].Склад), 1, 1000)), Истина);
		Ответ = АТ_WI.Корзина_ДобавитьPOST(Новый Структура("Тело", Новый Структура("access_token, guid, store, quantity, full, price", access_token, XMLСтрока(Товары[1].Номенклатура), XMLСтрока(Товары[1].Склад), 1, Истина, 1000)), Истина);
		
		Набор.Прочитать();
		ПроверитьОжидание(ТипЗнч(Ответ.Тело) = Тип("ТаблицаЗначений"), Истина, Ошибка, "Добавлено 2 товара в корзину и получена корзина");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция Корз_ДобавитьТовараБольшеЧемНаОстатках()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Набор = РегистрыСведений.АТ_ИнтернетКорзина.СоздатьНаборЗаписей();
		Набор.Отбор.ПользовательИнтернет.Установить(Usr.Пользователь);
		Набор.Записать();
		
		Товар = ПолучитьСвободныйТоварНаОстатках()[0];
		Ответ = АТ_WI.Корзина_ДобавитьPOST(Новый Структура("Тело", Новый Структура("access_token, guid, store, quantity, price", 
					access_token, XMLСтрока(Товар.Номенклатура), XMLСтрока(Товар.Склад), Товар.Количество + 1, 1000)), Истина);
		
		ПроверитьОжидание(Ответ.Тело.Свойство("error_code") И Ответ.Тело.error_code = 1, Истина, Ошибка, "Получить ошибку при добавлении большего количества товара");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции

// ЗАКАЗЫ

&НаСервере
Функция КП_ПолучитьЗаказыКлиента()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(Ссылка) Количество ИЗ Документ.КП ГДЕ Партнер = &Партнер И НЕ ПометкаУдаления");
		Запрос.УстановитьПараметр("Партнер", Usr.Пользователь.Партнер);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Ответ = АТ_WI.КП_СписокPOST(Новый Структура("Тело", Новый Структура("access_token", access_token)), Истина);
		ПроверитьОжидание(
					ТипЗнч(Ответ.Тело) = Тип("ТаблицаЗначений") И 
					Ответ.Тело.Количество() = Выборка.Количество, 
				Истина, Ошибка, "Получить адреса доставки");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция КП_ПолучитьСоздатьЗаказ()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		//Товар = ПолучитьСвободныйТоварНаОстатках()[0];
		//
		//НачатьТранзакцию();
		//Ответ = АТ_WI.КП_СоздатьPOST(Новый Структура("Тело", Новый Структура("access_token, adress, kontra, products",
		//			access_token, XMLСтрока(Товар.Номенклатура), XMLСтрока(Товар.Склад), 1, 1000)), Истина);
		//ОтменитьТранзакцию();
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции
&НаСервере
Функция КП_ПечатьСчета()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Документ.КП.Товары ГДЕ Ссылка.Проведен УПОРЯДОЧИТЬ ПО Ссылка.Дата Убыв");
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		СсылкаКП = Выборка.Ссылка;
		
		стрОшибки = "";
		Ответ = АТ_WI.ПолучитьURLкPDFPOST(Новый Структура("Тело", Новый Структура("ObjType, guid, papertype, access_token", 
								"kp", XMLСтрока(СсылкаКП), "bill", access_token)), Истина);
		
		Если стрОшибки <> "" Тогда
			Сообщить(стрОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ.Свойство("Тело") И Булево(СтрНайти(Ответ.Тело, АТ_WI_Кеш.ПутьURLКФайлам()));
	
КонецФункции

// ИСТОРИЯПОИСКА

&НаСервере
Функция ИсторияПоиска_Добавить()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		guid = "97157481-e1c2-11e4-80c9-00155dfa1a02";
		
		НачатьТранзакцию();
		
		Ответ = АТ_WI.ИсторияПоиска_ДобавитьPOST(Новый Структура("Тело", Новый Структура("access_token, guid", access_token, guid)), Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АТ_ИсторияПоиска.ПериодДобавления КАК ПериодДобавления
		|ИЗ
		|	РегистрСведений.АТ_ИсторияПоиска КАК АТ_ИсторияПоиска
		|ГДЕ
		|	АТ_ИсторияПоиска.ПользовательИнтернет = &ПользовательИнтернет
		|	И АТ_ИсторияПоиска.Номенклатура = &Номенклатура";
		Запрос.УстановитьПараметр("ПользовательИнтернет", Usr.Пользователь);
		Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(guid)));
		Результат = Запрос.Выполнить();
		
		ПроверитьОжидание(Результат.Пустой(),
					Ложь, Ошибка, "Ошибка добавления в историю поиска");
		
		ОтменитьТранзакцию();
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции

&НаСервере
Функция ИсторияПоиска_Получить()
	
	Перем Usr;
	
	Ошибка 			= Ложь;
	access_token 	= access_token_ТестПользователя(Ошибка, Usr);
	
	Если Не Ошибка Тогда
		
		Ответ = АТ_WI.ИсторияПоиска_ПолучитьPOST(Новый Структура("Тело", Новый Структура("access_token", access_token)), Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АТ_ИсторияПоиска.ПериодДобавления КАК ПериодДобавления,
		|	АТ_ИсторияПоиска.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.АТ_ИсторияПоиска КАК АТ_ИсторияПоиска
		|ГДЕ
		|	АТ_ИсторияПоиска.ПользовательИнтернет = &ПользовательИнтернет";
		Запрос.УстановитьПараметр("ПользовательИнтернет", Usr.Пользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПроверитьОжидание(
					ТипЗнч(Ответ.Тело) = Тип("ТаблицаЗначений") И 
					Ответ.Тело.Количество() = Выборка.Количество(), 
				Истина, Ошибка, "Ошибка получения истории поиска");
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти