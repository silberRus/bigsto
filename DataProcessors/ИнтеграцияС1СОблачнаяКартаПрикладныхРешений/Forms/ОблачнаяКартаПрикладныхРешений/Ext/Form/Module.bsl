#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Заголовок1_Цвет = WebЦвета.ТемноСиний;
	Заголовок1_Шрифт = Новый Шрифт("Arial", 18, Истина);
	Заголовок2_Цвет = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
	Заголовок2_Шрифт = Новый Шрифт("Arial", 14, Истина);
	
	ОтображатьЗаголовок = Ложь;
	ИнициализироватьФормуНавигации(, Параметры.Свойство("АдресСписковОбъектовМодели", АдресСписковОбъектовМодели));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Ожидание возможности подключения
	Если РежимНавигации = 1
		ИЛИ РежимНавигации = 4 Тогда
		
		Попытка
			ПроверитьПодключениеСервер();
			
			РежимПереключенияСтраниц = НЕ(ВидимостьОписания);
			УстановитьРежимНавигации();
			
		Исключение
			
			КраткаяИнформацияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			НачалоНавигации = СформироватьОписаниеОшибкиПодключения(КраткаяИнформацияОбОшибке);		
			Элементы.СтраницыПросмотр.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаНачалоНавигации;
			Элементы.КомандыФормы.Доступность = Ложь;
			Элементы.ПоказатьСписок.Доступность = Ложь;
			Элементы.ПоказатьОписание.Доступность = Ложь;
			
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПодключение", 10);
			
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'Подключение к веб-сервису 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
			
		КонецПопытки;
		
	Иначе
		
		Если НЕ ПроверитьПодключениеСервер() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	

	УстановитьВидимостьСписка();
	УстановитьВидимостьОписания();
	КРУстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СППРОРСР_ФункциональнаяМодель" 
		И (НЕ Параметр.Свойство("НомерОкна") 
			ИЛИ Параметр.НомерОкна = Параметры.НомерОкна)
		И (НЕ Параметр.Свойство("ПроектМодели") 
			ИЛИ Параметр.ПроектМодели = Параметры.ПроектМодели) Тогда
			
		Если НЕ ПараметрыОткрытияФормыОбработаны Тогда
			
			ОбработатьПараметрыОткрытияФормы(Параметр, Истина);
			
			Если Параметры.НомерОкна = 1
				И Элементы.СхемаФункции.Видимость = Ложь Тогда
				УстановитьВидимостьСхемыФункции(Истина);
			КонецЕсли;
			
		КонецЕсли; 
		
		ПараметрыОткрытияФормыОбработаны = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимКорпоративноеРешение И ФункцииКорпоративногоРешенияМодифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаЗакрытияМодифицированнойКонфигурации", ЭтаФорма, Новый Структура("ПередЗакрытиемФормы", Истина));
		ПоказатьВопрос(Оповещение, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение изменена. 
			|Закрыть форму?'"), РежимДиалогаВопрос.ДаНет, 0);
			
		Отказ = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФункцииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "СледующиеФункции" Тогда
		ПутьКФункцииНачало = Макс(ПутьКФункцииНачало - 1, 0);
		ПоказатьПутьКФункции();
	ИначеЕсли НавигационнаяСсылка = "ПредыдущиеФункции" Тогда
		ПутьКФункцииНачало = Мин(ПутьКФункцииНачало + 1, ПутьКФункцииСписокФункций.Количество() - 1);
		ПоказатьПутьКФункции();
	Иначе
		ПутьКФункцииОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаФункцииВыбор(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПоказатьОписаниеЭлементаСхемы");
	ОткрытьГиперссылкуЭлементаСхемы();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаФункцииПриАктивизации(Элемент)
	
	Если РежимПереключенияСтраниц Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьОписаниеЭлементаСхемы", 1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьОписаниеЭлементаСхемы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьОписаниеЭлементаСхемы()
	
	ПоказатьОписаниеЭлементаСхемы();
	
КонецПроцедуры


&НаКлиенте
Процедура ОписаниеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Href = Неопределено Тогда
		Возврат;	// Это не ссылка
	КонецЕсли;
	
	Если СтрНайти(ДанныеСобытия.Href, "ИД_") = 0 Тогда
		
		ДанныеСобытия.Element.target = "_blank";
		Возврат;	//Внешняя ссылка в новом окне
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПерейтиПоСсылкеHTML(ДанныеСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОписаниеHTML(Команда)
	
	Элементы.ОписаниеHTML.Документ.execCommand("Print");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОписанияЭлементаСхемыФункции(Команда)
	
	Элементы.ОписаниеЭлементаСхемыФункции.Документ.execCommand("Print");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоНавигацииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиПоСсылкеHTML(ДанныеСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокФормыНомерОкнаПриИзменении(Элемент)
	
	Если ЗаголовокФормыНомерОкна = Параметры.НомерОкна Тогда
		Возврат;
	КонецЕсли;
	
	// Активизируем по ключевым параметрам
	ПараметрыФормы = Новый Структура("НомерОкна,ПроектМодели,АдресСписковОбъектовМодели", ЗаголовокФормыНомерОкна, Параметры.ПроектМодели, ПолучитьСпискиОбъектовМодели());
	ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	
	ЗаголовокФормыНомерОкна = Параметры.НомерОкна;	// Кнопку на текущей форме не меняем
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРешений

&НаКлиенте
Процедура СписокРазделовПометкаПриИзменении(Элемент)
	
	ОбработатьВыборРазделаПроекта();
	Если Элементы.СписокРешений.ТекущаяСтрока <> Неопределено Тогда
		Элементы.СписокРешений.Развернуть(Элементы.СписокРешений.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРешенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФункциональнуюМодель(ТекущиеДанные.ИД, "Function", 1)	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРешенийПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтрокиРешений Тогда
		НеОбрабатыватьАктивизациюСтрокиРешений = Ложь;
		НеОбрабатыватьАктивизациюСтроки = Истина;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СписокРешенийПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОписаниеHTMLСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницаОписаниеHTMLСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеHTMLКорпоративноеРешение Тогда
		КРОписаниеHTML = ПолучитьОписаниеКорпоративногоРешения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокФункций

&НаКлиенте
Процедура СписокФункцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФункциональнуюМодель(ТекущиеДанные.ИД, "Function", 1)	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФункцийПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтроки Тогда
		НеОбрабатыватьАктивизациюСтроки = Ложь;
		НеОбрабатыватьАктивизациюСтрокиРешений = Истина;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СписокФункцийПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов

&НаКлиенте
Процедура СписокОбъектовПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтроки Тогда
		НеОбрабатыватьАктивизациюСтроки = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СписокОбъектовПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПрофилей

&НаКлиенте
Процедура СписокПрофилейПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтроки Тогда
		НеОбрабатыватьАктивизациюСтроки = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СписокПрофилейПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПоказатьСписок(Команда)
	
	ВидимостьСписка = НЕ ВидимостьСписка;
	УстановитьВидимостьСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрФункциональнойМодели(Команда)
	
	ТекущиеДанные = Элементы.СписокРешений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФункциональнуюМодель(ТекущиеДанные.ИД, "Function", 1)	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписание(Команда)

	НеОбрабатыватьАктивизациюСтроки = Истина;
	НеОбрабатыватьАктивизациюСтрокиРешений = Истина;
	
	ВидимостьОписания = НЕ(ВидимостьОписания);
	РежимПереключенияСтраниц = НЕ(ВидимостьОписания);
	
	ЗаполнитьОписаниеГиперссылкиЭлементаСхемы();
	
	УстановитьВидимостьОписания();
	
	Если НЕ РежимПереключенияСтраниц Тогда
		УстановитьВидимостьСхемыФункции(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСхемеФункции(Команда)
	
	УстановитьВидимостьСхемыФункции(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаНаСхемуФункцииПолучить(Команда)
	
	ТекстСсылкиНаСхемуФункции = ПолучитьТекстСсылкиНаСхемуФункции(ТекущаяФункция_ИД);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСсылкиНаСхемуФункции);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигацияВперед(Команда)
	
	НавигацияВперед();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигацияНазад(Команда)
	
	НавигацияНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигацияДомой(Команда)
	
	НавигацияДомой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигацияПроект(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НавигацияПроектЗавершение", ЭтаФорма);
	ПоказатьВыборИзМеню(ОписаниеОповещения, ПроектыМодели, Элементы.НавигацияПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НавигацияПроектЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ПроектМодели = ВыбранныйЭлемент.Значение;
	ОбработатьВыборПроекта();
	
	УстановитьВидимостьСписка();
	УстановитьВидимостьОписания();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанными

&НаСервере
Процедура ИнициализироватьФормуНавигации(ПовторноеОткрытие = Ложь, ИспользоватьСпискиВладельца = Ложь)
	
	Если Параметры.НомерОкна = 0 Тогда
		Параметры.НомерОкна = 3;
	КонецЕсли;
	
	РежимНавигации = -1;
	
	Попытка
		
		ОбновитьДанные(ИспользоватьСпискиВладельца);	
		ПараметрыОткрытияФормыОбработаны = Истина;
		
		Если Параметры.НомерОкна = 3 Тогда
			РежимНавигации = 4;
		ИначеЕсли Параметры.НомерОкна = 0
			ИЛИ Параметры.НомерОкна = 1 Тогда
			РежимНавигации = 1;
		ИначеЕсли Параметры.НомерОкна = 2 Тогда
			РежимНавигации = 3;	// по умолчанию - профили пользователей
		КонецЕсли;
		
		ОбработатьПараметрыОткрытияФормы(Параметры, ПовторноеОткрытие);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение инициализации формы навигации 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Если Параметры.НомерОкна = 0 Тогда
		Если РежимНавигации = 1 Тогда
			Параметры.НомерОкна = 1;
		ИначеЕсли РежимНавигации = 2 ИЛИ РежимНавигации = 3 Тогда
			Параметры.НомерОкна = 2;
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = СформироватьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметрыОткрытияФормы(Знач ПараметрыОткрытия, ПовторноеОткрытие)

	Если ПараметрыОткрытия.Свойство("ДополнительныеПараметры")
		И ПараметрыОткрытия.ДополнительныеПараметры <> Неопределено
		И ПараметрыОткрытия.ДополнительныеПараметры.Свойство("Отчет") Тогда
		
		// Для отчетов свой алгоритм
		ИмяОтчета = СтрЗаменить(ПараметрыОткрытия.ДополнительныеПараметры.Отчет, "Отчет.", "");
		ПерейтиКОписаниюФормы("", ПараметрыОткрытия.Заголовок, ПовторноеОткрытие, Метаданные.Отчеты[ИмяОтчета]);
		
	ИначеЕсли ПараметрыОткрытия.Свойство("РазделИнтерфейса") Тогда
		
		НачалоНавигации = ОписаниеРазделаИнтерфейса(Параметры.ПроектМодели, ПараметрыОткрытия.РазделИнтерфейса);
		
		Если НачалоНавигации = "" Тогда
			МетаданныеПодсистемы = Метаданные.Подсистемы.Найти(ПараметрыОткрытия.РазделИнтерфейса);
			Если МетаданныеПодсистемы <> Неопределено Тогда
				ПредставлениеПодсистемы = МетаданныеПодсистемы.Синоним;
			Иначе
				ПредставлениеПодсистемы = ПараметрыОткрытия.РазделИнтерфейса;
			КонецЕсли; 
			
			ТекстПараграфа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Для раздела ""%1"" не определены функции.'"),
												ПредставлениеПодсистемы);
												
			СформироватьОписаниеНеНайдено(ТекстПараграфа, ПовторноеОткрытие);
			
		Иначе
			
			ПерейтиКНачалуНавигации();
			
		КонецЕсли;
		
		
	ИначеЕсли ПараметрыОткрытия.Свойство("ИмяФормы") Тогда
		
		ПерейтиКОписаниюФормы(ПараметрыОткрытия.ИмяФормы, ПараметрыОткрытия.Заголовок, ПовторноеОткрытие);
		
	ИначеЕсли ПараметрыОткрытия.Свойство("ИДЭлемента") Тогда
		
		Если ПараметрыОткрытия.ТипЭлемента = "Function" Тогда
			ПерейтиКФункции(ПараметрыОткрытия.ИДЭлемента);
			
		ИначеЕсли ПараметрыОткрытия.ТипЭлемента = "Control"
			ИЛИ ПараметрыОткрытия.ТипЭлемента = "Input" 
			ИЛИ ПараметрыОткрытия.ТипЭлемента = "Link" 
			ИЛИ ПараметрыОткрытия.ТипЭлемента = "Output" Тогда
			
			ВидимостьСписка = Ложь;			
			ПерейтиКОбъекту(ПараметрыОткрытия.ИДЭлемента);
			
		ИначеЕсли ПараметрыОткрытия.ТипЭлемента = "Performer" Тогда
			
			ВидимостьСписка = Ложь;			
			ПерейтиКПрофилю(ПараметрыОткрытия.ИДЭлемента);
			
		КонецЕсли;
		
		Если НЕ ПовторноеОткрытие Тогда
			УстановитьНавигациюДомой(РежимНавигации, ПараметрыОткрытия.ИДЭлемента);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПовторноеОткрытие Тогда
			
			Если РежимНавигации = 2 ИЛИ РежимНавигации = 3  ИЛИ РежимНавигации = 4 Тогда
				ВидимостьСписка = Истина;
			Иначе
				ВидимостьСписка = Ложь;
			КонецЕсли;
			ВидимостьОписания = Ложь;
			
			ИДДомой = ОпределитьИДДомой(РежимНавигации);
			Если РежимНавигации = 2 ИЛИ РежимНавигации = 3 Тогда
				УстановитьНавигациюДомой(РежимНавигации, ИДДомой);
				ПерейтиКПрофилю(ИДДомой);
			Иначе
				УстановитьНавигациюДомой(1, ИДДомой);
				ПерейтиКФункции(ИДДомой);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеИсториейНавигации();
	ПараметрыОткрытияФормыОбработаны = Ложь;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные(ИспользоватьСпискиВладельца = Ложь)

	Попытка
		
		ВебСервис = ПолучитьПрокси();
		
		ИнициализироватьПроектМодели(ВебСервис);
		Если ИспользоватьСпискиВладельца Тогда
			ДанныеФунциональнойМодели = ПодготовитьДанныеФунциональнойМодели(Параметры.ПроектМодели, ЗаполнитьСпискиОбъектовМодели(АдресСписковОбъектовМодели), Параметры.НомерОкна, ВебСервис);
		Иначе
			ДанныеФунциональнойМодели = ПодготовитьДанныеФунциональнойМодели(Параметры.ПроектМодели, Новый Массив, Параметры.НомерОкна, ВебСервис);
		КонецЕсли;
		
		Если ДанныеФунциональнойМодели.Свойство("СписокРазделовПроекта") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокРазделовПроекта, "СписокРазделов");
		КонецЕсли;
		Если ДанныеФунциональнойМодели.Свойство("СписокРешенийДерево") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокРешенийДерево, "СписокРешений");
		КонецЕсли;
		Если ДанныеФунциональнойМодели.Свойство("СписокФункцийДерево") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокФункцийДерево, "СписокФункций");
		КонецЕсли;
		Если ДанныеФунциональнойМодели.Свойство("СписокОбъектовДерево") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокОбъектовДерево, "СписокОбъектов");
		КонецЕсли;
		Если ДанныеФунциональнойМодели.Свойство("СписокПрофилейДерево") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокПрофилейДерево, "СписокПрофилей");
		КонецЕсли;
		
		// Режим отсутствия решений
		Если СписокРешений.ПолучитьЭлементы().Количество() = 0 Тогда
			Если Параметры.НомерОкна = 3 Тогда
				Параметры.НомерОкна = 0;
			КонецЕсли;
			Элементы.ГруппаСписокРешений.Видимость = Ложь;
		Иначе
			Элементы.ГруппаСписокРешений.Видимость = Истина;
		КонецЕсли;
			
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление данных функциональной модели 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПроектМодели(ВебСервис)
	
	ПроектыМодели.Очистить();
	
	Попытка
		СписокПроектов = СписокПроектов(ВебСервис);
		Для каждого Проект Из СписокПроектов Цикл
			ПроектыМодели.Добавить(Проект);		
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Инициализации проекта модели 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Если ПроектыМодели.Количество() > 1 Тогда
		Элементы.НавигацияПроект.Видимость = Истина;
	Иначе
		Элементы.НавигацияПроект.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПроектМодели) Тогда		
		Возврат;
	КонецЕсли;
	
	Если ПроектыМодели.Количество() > 0 Тогда
		Параметры.ПроектМодели = ПроектыМодели[0].Значение;
	Иначе
		Параметры.ПроектМодели = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборПроекта()
	
	Параметры.НомерОкна = 3;
	ИнициализироватьФормуНавигации(Истина);
	
	Если РежимНавигации = 4 Тогда
		ВидимостьСписка = Истина;
	Иначе
		ВидимостьСписка = Ложь;
	КонецЕсли;
	
	ИДДомой = ОпределитьИДДомой(1);
	УстановитьНавигациюДомой(1, ИДДомой);
	ПерейтиКФункции(ИДДомой);
	
	УстановитьРежимНавигации();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборРазделаПроекта()
	
	СписокРешенийДерево = СписокФункций(Параметры.ПроектМодели, , Истина, ПолучитьОтборРазделовПроекта());
	ЗначениеВРеквизитФормы(СписокРешенийДерево, "СписокРешений");
	
	УстановитьНавигациюДомой(РежимНавигации, ОпределитьИДДомой(РежимНавигации));
	НавигацияДомой();
	
	Заголовок = СформироватьЗаголовокФормы();	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтборРазделовПроекта()

	РазделыПроектаОтбор = Новый Массив;
	
	СписокРазделов.ПолучитьЭлементы();
	СписокРазделовДерево = РеквизитФормыВЗначение("СписокРазделов");
	
	СтрокиОтбора = СписокРазделовДерево.Строки.НайтиСтроки(Новый Структура("Пометка", Истина), Истина);	
	Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
		РазделыПроектаОтбор.Добавить(СтрокаОтбора.ИД);
	КонецЦикла;
	
	Возврат РазделыПроектаОтбор;

КонецФункции


&НаСервере
Функция СформироватьЗаголовокФормы()

	Если ПроектыМодели.Количество() > 1 
		И ЗначениеЗаполнено(Параметры.ПроектМодели) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Облачная карта прикладных решений'") + "
			| " + Параметры.ПроектМодели;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Облачная карта прикладных решений'");
	КонецЕсли;
	
	Если Параметры.НомерОкна = 1 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + НСтр("ru = 'функции'") + ")";
	ИначеЕсли Параметры.НомерОкна = 2 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + НСтр("ru = 'объекты и профили'") + ")";
	КонецЕсли;
	
	ЗаголовокФормыНомерОкна = Параметры.НомерОкна;
	
	Возврат ТекстЗаголовка;	

КонецФункции

#КонецОбласти

#Область СписокФункций

&НаСервере
Процедура ПерейтиКФункции(Знач ИДФункции, Знач ОбновитьИсториюНавигации = Истина)

	// Установим строку в списке функций на нужной
	ТекущийСписок = СписокФункций.ПолучитьЭлементы();
	ДанныеСтроки = НайтиСтрокуПоИД(ИДФункции, ТекущийСписок);
	Если ДанныеСтроки <> Неопределено Тогда
		НеОбрабатыватьАктивизациюСтроки = Истина;
		Элементы.СписокФункций.ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();
	Иначе
		ТекущийСписок = СписокРешений.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИД(ИДФункции, ТекущийСписок);
		Если ДанныеСтроки <> Неопределено Тогда
			НеОбрабатыватьАктивизациюСтрокиРешений = Истина;
			Элементы.СписокРешений.ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОписаниеФункции(ДанныеСтроки, ОбновитьИсториюНавигации);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОписаниеФункции(ДанныеСтроки, ОбновитьИсториюНавигации = Истина)

	Если ДанныеСтроки <> Неопределено Тогда
		ТекущаяФункция_ИД = ДанныеСтроки.ИД;
	Иначе
		ТекущаяФункция_ИД = ПустойКлюч;
	КонецЕсли;
	
	ПоказатьСхемуФункции(ДанныеСтроки);
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Описание = Неопределено Тогда
			ДанныеСтроки.Описание = ОписаниеФункции(ДанныеСтроки.ИД);
		КонецЕсли;
		ОписаниеЭлементаСхемыФункции = ДанныеСтроки.Описание;
	КонецЕсли;
	
	СформироватьПутьКФункции(ДанныеСтроки);
	ПоказатьПутьКФункции();
	
	ЭлементыСхемыТекущейФункции.Очистить();
	ФормыРабочегоМеста.Очистить();
	КонечнаяФункция = Ложь;
	Если ДанныеСтроки <> Неопределено Тогда
		КонечнаяФункция = ДанныеСтроки.КонечнаяФункция;
		Для каждого ДанныеЭлементаСхемы Из ДанныеСтроки.ЭлементыСхемы Цикл
			ЗаполнитьЗначенияСвойств(ЭлементыСхемыТекущейФункции.Добавить(), ДанныеЭлементаСхемы);
		КонецЦикла; 
		Для каждого ДанныеФормыРабочегоМеста Из ДанныеСтроки.ФормыРабочегоМеста Цикл
			ЗаполнитьЗначенияСвойств(ФормыРабочегоМеста.Добавить(), ДанныеФормыРабочегоМеста);
		КонецЦикла; 
		
		Если ОбновитьИсториюНавигации Тогда
			ДобавитьВИсториюНавигации(ДанныеСтроки.ИД, 1);
		КонецЕсли; 
	КонецЕсли; 
	
	УправлениеИсториейНавигации();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСхемуФункции(ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		СхемаФункции = Новый ГрафическаяСхема;
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Схема = Неопределено Тогда
		ДанныеФункции = ДанныеФункции(ДанныеСтроки.ИД);
		ДанныеСтроки.Схема = ОбработатьСхему(ДанныеФункции.Scheme.Получить());
		ДанныеСтроки.КонечнаяФункция = ДанныеФункции.IsWorkplace;
		Для каждого ДанныеЭлементаСхемы Из ДанныеФункции.SchemeElements Цикл
			НоваяСтрока = ДанныеСтроки.ЭлементыСхемы.Добавить();
			НоваяСтрока.ИД = ДанныеЭлементаСхемы.ID;
			НоваяСтрока.Код = ДанныеЭлементаСхемы.Code;
			НоваяСтрока.Тип = ДанныеЭлементаСхемы.Type;
			НоваяСтрока.Представление = ДанныеЭлементаСхемы.Name;
		КонецЦикла; 
		Для каждого ДанныеФормыРабочегоМеста Из ДанныеФункции.ListOfWorkplace Цикл
			НоваяСтрока = ДанныеСтроки.ФормыРабочегоМеста.Добавить();
			НоваяСтрока.ИмяОбъектаМетаданных = ДанныеФормыРабочегоМеста.Metadata;
			НоваяСтрока.ИмяФормы = ДанныеФормыРабочегоМеста.FormName;
			НоваяСтрока.ТипФормы = ДанныеФормыРабочегоМеста.FormType;
		КонецЦикла; 
	КонецЕсли; 

	СхемаФункции = ДанныеСтроки.Схема;

КонецПроцедуры

&НаСервере
Процедура СформироватьПутьКФункции(ДанныеСтроки)

	ПутьКФункцииСписокФункций.Очистить();
	ПутьКФункцииНачало = 0;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПутьКФункцииСписокФункций.Добавить(ДанныеСтроки.ИД, ДанныеСтроки.Представление);
	
	СтрокаРодитель = ДанныеСтроки.ПолучитьРодителя();
	Пока СтрокаРодитель <> Неопределено Цикл
		ПутьКФункцииСписокФункций.Добавить(СтрокаРодитель.ИД, СтрокаРодитель.Представление);
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПутьКФункции()

	Если ПутьКФункцииСписокФункций.Количество() = 0 Тогда
		ПутьКФункции = Новый ФорматированнаяСтрока("");
		Возврат;
	КонецЕсли; 
	
	МаксимальноеКоличествоФункций = 3; // Путь к функции состоит только из трех функций
	
	МассивСтрокНавигации = Новый Массив;
	
	НомерПервойФункции = ПутьКФункцииСписокФункций.Количество() - 1;
	
	ПутьКФункцииКонец = Мин(ПутьКФункцииНачало + МаксимальноеКоличествоФункций - 1, НомерПервойФункции);
	
	Для НомерФункции = -ПутьКФункцииКонец По -ПутьКФункцииНачало Цикл
		
		// Список содержит функции в обратном порядке
		ДанныеФункции = ПутьКФункцииСписокФункций.Получить(-НомерФункции);
		
		Если НомерФункции = 0 Тогда
			
			// Текущая функция не содержит гиперссылки
			СтрокаНавигации = Новый ФорматированнаяСтрока(ДанныеФункции.Представление, Новый Шрифт(,,Истина));
			МассивСтрокНавигации.Добавить(СтрокаНавигации);
			
		Иначе
			
			Если НомерФункции = -ПутьКФункцииКонец И НомерФункции <> -НомерПервойФункции Тогда
				// Путь начинается с функции, которая не первая
				МассивСтрокНавигации.Добавить(Новый ФорматированнаяСтрока(
													БиблиотекаКартинок.НавигацияПутьНазад,,,,
													"ПредыдущиеФункции"));
				МассивСтрокНавигации.Добавить(" \ ");
			КонецЕсли;
			
			// Предыдущие функции выводятся как гиперссылки
			СтрокаНавигации = Новый ФорматированнаяСтрока(
										ДанныеФункции.Представление,,,,
										Строка(ДанныеФункции.Значение));
										
			МассивСтрокНавигации.Добавить(СтрокаНавигации);
			
			Если НомерФункции = -ПутьКФункцииНачало Тогда
				// Путь завершается функцией, которая не последняя
				МассивСтрокНавигации.Добавить(" \ ");
				МассивСтрокНавигации.Добавить(Новый ФорматированнаяСтрока(
													БиблиотекаКартинок.НавигацияПутьВперед,,,,
													"СледующиеФункции"));
			Иначе	
				МассивСтрокНавигации.Добавить(" \ ");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПутьКФункции = Новый ФорматированнаяСтрока(МассивСтрокНавигации);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСхему(Схема)

	Если НЕ Схема.ИспользоватьСетку Тогда
		Возврат Схема;
	КонецЕсли;
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ОбъектXDTOСхема = Сериализатор.ЗаписатьXDTO(Схема);
		
	ОбъектXDTOСхема.EnableGrid = Ложь;
	ОбъектXDTOСхема.DrawGridMode = РежимОтрисовкиСеткиГрафическойСхемы.НеРисовать;
		
	Возврат Сериализатор.ПрочитатьXDTO(ОбъектXDTOСхема);

КонецФункции

&НаСервере
Процедура ПоказатьОписаниеТекущегоРешения()
	
	СхемаФункции = Новый ГрафическаяСхема;
	
	ТекущаяСтрока = Элементы.СписокРешений.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = СписокРешений.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеФункции(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОписаниеТекущейФункции()
	
	СхемаФункции = Новый ГрафическаяСхема;
	
	ТекущаяСтрока = Элементы.СписокФункций.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = СписокФункций.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеФункции(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеЭлементаСхемы()

	ЗаполнитьОписаниеГиперссылкиЭлементаСхемы();
	УстановитьВидимостьСхемыФункции(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГиперссылкуЭлементаСхемы()

	ЭлементСхемы = Элементы.СхемаФункции.ТекущийЭлемент;
	Если ЭлементСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЭлементаСхемы = ТипЗнч(ЭлементСхемы);
	Если ТипЭлементаСхемы <> Тип("ЭлементГрафическойСхемыДекорация") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Код", ЭлементСхемы.Имя);
	МассивСтрок = ЭлементыСхемыТекущейФункции.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() <> 0 Тогда
		ДанныеЭлементаСхемы = МассивСтрок[0];
		Если ДанныеЭлементаСхемы.ИД <> ПустойКлюч Тогда
			
			Если ДанныеЭлементаСхемы.Тип = "Function" Тогда
				ПерейтиКФункции(ДанныеЭлементаСхемы.ИД);				
				
			ИначеЕсли ДанныеЭлементаСхемы.Тип = "Control"
				ИЛИ ДанныеЭлементаСхемы.Тип = "Input" 
				ИЛИ ДанныеЭлементаСхемы.Тип = "Link" 
				ИЛИ ДанныеЭлементаСхемы.Тип = "Output" Тогда
				
				ОткрытьФункциональнуюМодель(ДанныеЭлементаСхемы.ИД, ДанныеЭлементаСхемы.Тип, 2);
				
			ИначеЕсли ДанныеЭлементаСхемы.Тип = "Performer" Тогда
				
				ОткрытьФункциональнуюМодель(ДанныеЭлементаСхемы.ИД, ДанныеЭлементаСхемы.Тип, 2);
			КонецЕсли;
			
		ИначеЕсли ДанныеЭлементаСхемы.Тип = "Function" Тогда
			ОткрытьФормуРабочегоМеста();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеГиперссылкиЭлементаСхемы()

	Если НЕ РежимПереключенияСтраниц
		И НЕ ВидимостьОписания Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСхемы = Элементы.СхемаФункции.ТекущийЭлемент;
	
	ТипЭлементаСхемы = ТипЗнч(ЭлементСхемы);
	Если ТипЭлементаСхемы <> Тип("ЭлементГрафическойСхемыДекорация") Тогда
		ПоказатьОписаниеГиперссылки(ТекущаяФункция_ИД, "Function");
		Возврат;
	КонецЕсли;
	ПараметрыОтбора = Новый Структура("Код", ЭлементСхемы.Имя);
	МассивСтрок = ЭлементыСхемыТекущейФункции.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() <> 0 Тогда
		ДанныеЭлементаСхемы = МассивСтрок[0];
		Если ДанныеЭлементаСхемы.ИД <> ПустойКлюч Тогда
			ПоказатьОписаниеГиперссылки(ДанныеЭлементаСхемы.ИД, ДанныеЭлементаСхемы.Тип);
		ИначеЕсли ДанныеЭлементаСхемы.Тип = "Function" Тогда
			ОткрытьФормуРабочегоМеста();
		Иначе
			ПоказатьОписаниеГиперссылки(ТекущаяФункция_ИД, "Function");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОписаниеГиперСсылки(ИД, ТипЭлементаСхемы)
	
	Если ТипЭлементаСхемы = "Performer" Тогда
		
		ТекущийСписок = СписокПрофилей.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИД(ИД, ТекущийСписок);
		Если ДанныеСтроки <> Неопределено Тогда
			Если НЕ ДанныеСтроки.ОписаниеПодготовлено Тогда
				ДанныеСтроки.ОписаниеHTML = ОписаниеПрофиля(ДанныеСтроки.ИД);
				ДанныеСтроки.ОписаниеПодготовлено = Истина;
			КонецЕсли;
			ОписаниеЭлементаСхемыФункции = ДанныеСтроки.ОписаниеHTML;
		Иначе
			ОписаниеЭлементаСхемыФункции = ОписаниеПрофиля(ИД);
		КонецЕсли;			
		
	ИначеЕсли ТипЭлементаСхемы = "Function" Тогда
		
		ТекущийСписок = СписокФункций.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИД(ИД, ТекущийСписок);
		Если ДанныеСтроки = Неопределено Тогда
			ТекущийСписок = СписокРешений.ПолучитьЭлементы();
			ДанныеСтроки = НайтиСтрокуПоИД(ИД, ТекущийСписок);
		КонецЕсли;
		Если ДанныеСтроки <> Неопределено Тогда
			Если ДанныеСтроки.Описание = Неопределено Тогда
				ДанныеСтроки.Описание = ОписаниеФункции(ДанныеСтроки.ИД);
			КонецЕсли;
			ОписаниеЭлементаСхемыФункции = ДанныеСтроки.Описание;
		Иначе
			ОписаниеЭлементаСхемыФункции = ОписаниеФункции(ИД);
		КонецЕсли;			

	Иначе
		
		ТекущийСписок = СписокОбъектов.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИД(ИД, ТекущийСписок);
		
		Если ДанныеСтроки <> Неопределено Тогда
			Если НЕ ДанныеСтроки.ОписаниеПодготовлено Тогда
				ДанныеСтроки.ОписаниеHTML = ОписаниеОбъекта(ДанныеСтроки.ИД);
				ДанныеСтроки.ОписаниеПодготовлено = Истина;
			КонецЕсли;
			ОписаниеЭлементаСхемыФункции = ДанныеСтроки.ОписаниеHTML;
		Иначе
			ОписаниеЭлементаСхемыФункции = ОписаниеОбъекта(ИД);
		КонецЕсли;			
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФункциональнуюМодель(ИДЭлемента, ТипЭлемента, НомерОкна)

	ПараметрыФормы = Новый Структура("ИДЭлемента,ТипЭлемента,НомерОкна,ПроектМодели, АдресСписковОбъектовМодели", ИДЭлемента, ТипЭлемента, НомерОкна, Параметры.ПроектМодели, ПолучитьСпискиОбъектовМодели());
	ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	
	// Если форма уже открыта, то оповестим ее, чтобы показать новые данные
	Оповестить("СППРОРСР_ФункциональнаяМодель", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРабочегоМеста()

	Если НЕ КонечнаяФункция Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормыРабочегоМеста.Количество() = 1 Тогда
		
		ДанныеФормыРабочегоМеста = ФормыРабочегоМеста[0];
		ПолноеИмяФормы = ПолноеИмяФормыРабочегоМеста(
							ДанныеФормыРабочегоМеста.ИмяОбъектаМетаданных,
							ДанныеФормыРабочегоМеста.ИмяФормы, 
							ДанныеФормыРабочегоМеста.ТипФормы);
							
		СписокВыбораРабочихМест = Новый СписокЗначений;
		СписокВыбораРабочихМест.Добавить(ПолноеИмяФормы);
		ОткрытьФормуРабочегоМестаЗавершение(СписокВыбораРабочихМест[0], Неопределено);
		
	Иначе
		
		СписокВыбораРабочихМест = СписокВыбораРабочихМест();
		Если СписокВыбораРабочихМест.Количество() = 1 Тогда
			ОткрытьФормуРабочегоМестаЗавершение(СписокВыбораРабочихМест[0], Неопределено);
		ИначеЕсли СписокВыбораРабочихМест.Количество() > 1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуРабочегоМестаЗавершение", ЭтотОбъект);
			СписокВыбораРабочихМест.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите какую форму открыть'"));
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолноеИмяФормыРабочегоМеста(ИмяОбъектаМетаданных, ИмяФормыРабочегоМеста, ТипФормы)

	ПолноеИмяФормы = ИмяОбъектаМетаданных;
	
	Если ЗначениеЗаполнено(ИмяФормыРабочегоМеста) Тогда
		ПолноеИмяФормы = ПолноеИмяФормы + ".Форма." + ИмяФормыРабочегоМеста;
	ИначеЕсли ТипФормы <> "" Тогда
		ПолноеИмяФормы = ПолноеИмяФормы + "." + ТипФормы;
	Иначе
		ПолноеИмяФормы = Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФормы;
	
КонецФункции

&НаСервере
Функция СписокВыбораРабочихМест()

	СписокВыбора = Новый СписокЗначений;
	
	Для каждого ДанныеФормыРабочегоМеста Из ФормыРабочегоМеста Цикл
		ПолноеИмяФормы = ПолноеИмяФормыРабочегоМеста(
								ДанныеФормыРабочегоМеста.ИмяОбъектаМетаданных,
								ДанныеФормыРабочегоМеста.ИмяФормы, 
								ДанныеФормыРабочегоМеста.ТипФормы);
								
		Если ПолноеИмяФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеФормы = ПолноеИмяФормы;
		МетаданныеФормы = Метаданные.НайтиПоПолномуИмени(ПолноеИмяФормы);
		Если МетаданныеФормы = Неопределено Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДанныеФормыРабочегоМеста.ИмяОбъектаМетаданных);
			Если МетаданныеОбъекта <> Неопределено Тогда
				ПредставлениеФормы = МетаданныеОбъекта.Синоним;
			КонецЕсли; 
		Иначе
			ПредставлениеФормы = МетаданныеФормы.Синоним;
		КонецЕсли;
		
		Если Лев(ПолноеИмяФормы, 6) = "Отчет." Тогда
			ПредставлениеФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Отчет ""%1""'"),
									ПредставлениеФормы);
		Иначе
			ПредставлениеФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Форма ""%1""'"),
									ПредставлениеФормы);
		КонецЕсли; 
		
		СписокВыбора.Добавить(ПолноеИмяФормы, ПредставлениеФормы);
	КонецЦикла;
	
	Возврат СписокВыбора;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРабочегоМестаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Попытка
			ОткрытьФорму(ВыбранныйЭлемент.Значение);
		Исключение
			// При отсутствии формы в конфигурации предупреждение пользователю
			// не выводится, т.к. отсутствие формы, описанной в модели СППР ОР/СР
			// в конфигурации допускается. Если форма в конфигурации присутствует,
			// она будет отображена.
			ОбновитьОтображениеДанных();
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСпискиОбъектовМодели()

	СпискиОбъектовМодели = Новый Структура;
	
	Если СписокРазделов.ПолучитьЭлементы().Количество() > 0 Тогда
		СпискиОбъектовМодели.Вставить("СписокРазделов", РеквизитФормыВЗначение("СписокРазделов"));
	КонецЕсли;
	Если ПолучитьОтборРазделовПроекта().Количество() = 0 Тогда	// Только если не установлен отбор по разделам
		Если СписокРешений.ПолучитьЭлементы().Количество() > 0 Тогда
			СпискиОбъектовМодели.Вставить("СписокРешений", РеквизитФормыВЗначение("СписокРешений"));
		КонецЕсли;
		Если СписокФункций.ПолучитьЭлементы().Количество() > 0 Тогда
			СпискиОбъектовМодели.Вставить("СписокФункций", РеквизитФормыВЗначение("СписокФункций"));
		КонецЕсли;
	КонецЕсли;
	Если СписокПрофилей.ПолучитьЭлементы().Количество() > 0 Тогда
		СпискиОбъектовМодели.Вставить("СписокПрофилей", РеквизитФормыВЗначение("СписокПрофилей"));
	КонецЕсли;
	Если СписокОбъектов.ПолучитьЭлементы().Количество() > 0 Тогда
		СпискиОбъектовМодели.Вставить("СписокОбъектов", РеквизитФормыВЗначение("СписокОбъектов"));
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СпискиОбъектовМодели);

КонецФункции

&НаСервере
Функция ЗаполнитьСпискиОбъектовМодели(АдресСписковОбъектовМодели)
	
	СпискиВладельца = Новый Массив;
	
	СпискиОбъектовМодели = ПолучитьИзВременногоХранилища(АдресСписковОбъектовМодели);
	Для каждого СписокОбъектовМодели Из СпискиОбъектовМодели Цикл
		ЗначениеВРеквизитФормы(СписокОбъектовМодели.Значение, СписокОбъектовМодели.Ключ);
		СпискиВладельца.Добавить(СписокОбъектовМодели.Ключ);
	КонецЦикла;
	
	Возврат ?(СпискиВладельца.Количество() > 0, СпискиВладельца, Неопределено);

КонецФункции


&НаКлиенте
Процедура Подключаемый_СписокРешенийПриАктивизацииСтроки()

	ПоказатьОписаниеТекущегоРешения();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокФункцийПриАктивизацииСтроки()

	ПоказатьОписаниеТекущейФункции();

КонецПроцедуры

#КонецОбласти

#Область СписокОбъектов

&НаСервере
Функция ПерейтиКОбъекту(Знач ИДОбъекта, Знач ОбновитьИсториюНавигации = Истина)

	// Установим строку в списке объектов на нужной
	ТекущийСписок = СписокОбъектов.ПолучитьЭлементы();
	ДанныеСтроки = НайтиСтрокуПоИД(ИДОбъекта, ТекущийСписок);
	Если ДанныеСтроки <> Неопределено Тогда
		НеОбрабатыватьАктивизациюСтроки = Истина;
		Элементы.СписокОбъектов.ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();
	КонецЕсли;

	ПоказатьОписаниеОбъекта(ДанныеСтроки, ОбновитьИсториюНавигации);
	
	РежимНавигации = 2;
	УстановитьРежимНавигации();
	
КонецФункции

&НаСервере
Процедура ПоказатьОписаниеОбъекта(ДанныеСтроки, ОбновитьИсториюНавигации = Истина)
	
	СформироватьОписаниеОбъекта(ДанныеСтроки);
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОбновитьИсториюНавигации Тогда
			ДобавитьВИсториюНавигации(ДанныеСтроки.ИД, 2);
		КонецЕсли; 
	КонецЕсли;
	
	УправлениеИсториейНавигации();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОписаниеТекущегоОбъекта()

	ТекущаяСтрока = Элементы.СписокОбъектов.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = СписокОбъектов.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеОбъекта(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеОбъекта(ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		ОписаниеHTML = "";
		Возврат;
	КонецЕсли; 
	
	Если НЕ ДанныеСтроки.ОписаниеПодготовлено Тогда
		ДанныеСтроки.ОписаниеHTML = ОписаниеОбъекта(ДанныеСтроки.ИД);
		ДанныеСтроки.ОписаниеПодготовлено = Истина;
	КонецЕсли;
	
	ОписаниеHTML = ДанныеСтроки.ОписаниеHTML;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылкеHTML(ДанныеСобытия)

	Если НЕ ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСсылки = ДанныеСобытия.Href;
	
	НачалоИД = СтрНайти(ТекстСсылки, "ИД_Функции");
	Если НачалоИД <> 0 Тогда
		
		ИД_Функции = Новый УникальныйИдентификатор(Сред(ТекстСсылки, НачалоИД + 10));
		Если Параметры.НомерОкна = 1 Тогда
			Если Элементы.СхемаФункции.Видимость = Ложь Тогда
				УстановитьВидимостьСхемыФункции(Истина);
			КонецЕсли;
			ПерейтиКФункции(ИД_Функции);
		Иначе
			ОткрытьФункциональнуюМодель(ИД_Функции, "Function", 1);
		КонецЕсли; 
	
		Возврат;
		
	КонецЕсли;
	
	НачалоИД = СтрНайти(ТекстСсылки, "ИД_Объекта");
	Если НачалоИД <> 0 Тогда
		ИД_Объекта = Новый УникальныйИдентификатор(Сред(ТекстСсылки, НачалоИД + 10));
		Если Параметры.НомерОкна = 2 Тогда
			ПерейтиКОбъекту(ИД_Объекта);
		Иначе
			ОткрытьФункциональнуюМодель(ИД_Объекта, "Input", 2);
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;
	
	НачалоИД = СтрНайти(ТекстСсылки, "ИД_Профиля");
	Если НачалоИД <> 0 Тогда
		ИД_Профиля = Новый УникальныйИдентификатор(Сред(ТекстСсылки, НачалоИД + 10));
		Если Параметры.НомерОкна = 2 Тогда
			ПерейтиКПрофилю(ИД_Профиля);
		Иначе
			ОткрытьФункциональнуюМодель(ИД_Профиля, "Performer", 2);
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;
	
	НачалоИД = СтрНайти(ТекстСсылки, "ИД_КомандаФормы_");
	Если НачалоИД <> 0 Тогда
		ИД_КомандаФормы = Сред(ТекстСсылки, НачалоИД + 16);
		Если ИД_КомандаФормы = "ПроверитьПодключение" Тогда
			ПроверитьПодключение();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокОбъектовПриАктивизацииСтроки()

	ПоказатьОписаниеТекущегоОбъекта();

КонецПроцедуры

#КонецОбласти

#Область СписокПрофилей

&НаСервере
Функция ПерейтиКПрофилю(Знач ИДПрофиля, Знач ОбновитьИсториюНавигации = Истина)

	// Установим строку в списке объектов на нужной
	ТекущийСписок = СписокПрофилей.ПолучитьЭлементы();
	ДанныеСтроки = НайтиСтрокуПоИД(ИДПрофиля, ТекущийСписок);
	Если ДанныеСтроки <> Неопределено Тогда
		НеОбрабатыватьАктивизациюСтроки = Истина;
		Элементы.СписокПрофилей.ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();
	КонецЕсли;

	ПоказатьОписаниеПрофиля(ДанныеСтроки, ОбновитьИсториюНавигации);
	
	РежимНавигации = 3;
	УстановитьРежимНавигации();
	
КонецФункции

&НаСервере
Процедура ПоказатьОписаниеПрофиля(ДанныеСтроки, ОбновитьИсториюНавигации = Истина)
	
	СформироватьОписаниеПрофиля(ДанныеСтроки);
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОбновитьИсториюНавигации Тогда
			ДобавитьВИсториюНавигации(ДанныеСтроки.ИД, 3);
		КонецЕсли; 
	КонецЕсли;
	
	УправлениеИсториейНавигации();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеПрофиля(ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		ОписаниеHTML = "";
		Возврат;
	КонецЕсли; 
	
	Если НЕ ДанныеСтроки.ОписаниеПодготовлено Тогда
		ДанныеСтроки.ОписаниеHTML = ОписаниеПрофиля(ДанныеСтроки.ИД);
		ДанныеСтроки.ОписаниеПодготовлено = Истина;
	КонецЕсли;
	
	ОписаниеHTML = ДанныеСтроки.ОписаниеHTML;

КонецПроцедуры

&НаСервере
Процедура ПоказатьОписаниеТекущегоПрофиля()

	ТекущаяСтрока = Элементы.СписокПрофилей.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = СписокПрофилей.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеПрофиля(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПрофилейПриАктивизацииСтроки()

	ПоказатьОписаниеТекущегоПрофиля();

КонецПроцедуры

#КонецОбласти

#Область Навигация

&НаСервере
Процедура УстановитьРежимНавигации()

	Если РежимНавигации = 1 Тогда
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаПросмотрФункциональнойМодели;
		Элементы.СтраницыНавигация.ТекущаяСтраница = Элементы.СтраницаСписокФункций;
		Элементы.СтраницыДанные.ТекущаяСтраница = Элементы.СтраницаФункция;
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацияФункция;
		Элементы.ГруппаСписокФункций.Видимость = Истина;
		Элементы.СхемаФункции.Видимость = Истина;
		Элементы.СтраницаОписаниеHTML.Видимость = Истина;
		Элементы.ГруппаСписокРешенийОтбор.Видимость = Ложь;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Истина;
		Элементы.ПоказатьСписок.Доступность = Истина;
		Элементы.ПоказатьОписание.Доступность = Истина;
	ИначеЕсли РежимНавигации = 2 Тогда
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаПросмотрФункциональнойМодели;
		Элементы.СтраницыНавигация.ТекущаяСтраница = Элементы.СтраницаСписокОбъектов;
		Элементы.СтраницыДанные.ТекущаяСтраница = Элементы.СтраницаОписаниеHTML;
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацияПрочее;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Истина;
		Элементы.ПоказатьСписок.Доступность = Истина;
		Элементы.ПоказатьОписание.Доступность = Истина;
	ИначеЕсли РежимНавигации = 3 Тогда
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаПросмотрФункциональнойМодели;
		Элементы.СтраницыНавигация.ТекущаяСтраница = Элементы.СтраницаСписокПрофилей;
		Элементы.СтраницыДанные.ТекущаяСтраница = Элементы.СтраницаОписаниеHTML;
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацияПрочее;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Истина;
		Элементы.ПоказатьСписок.Доступность = Истина;
		Элементы.ПоказатьОписание.Доступность = Истина;
	ИначеЕсли РежимНавигации = 4 Тогда
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаПросмотрФункциональнойМодели;
		Элементы.СтраницыНавигация.ТекущаяСтраница = Элементы.СтраницаСписокФункций;
		Элементы.СтраницыДанные.ТекущаяСтраница = Элементы.СтраницаФункция;
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацияФункция;
		Элементы.ГруппаСписокФункций.Видимость = Ложь;
		Элементы.СхемаФункции.Видимость = Ложь;
		Элементы.СтраницаОписаниеHTML.Видимость = Ложь;
		Элементы.ГруппаСписокРешенийОтбор.Видимость = Истина;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Истина;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Истина;
		Элементы.ПоказатьСписок.Доступность = Ложь;
		Элементы.КомандыФормы.Доступность = Истина;
		Элементы.ПоказатьОписание.Доступность = Истина;
	Иначе
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаНачалоНавигации;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Ложь;
		Элементы.ПоказатьСписок.Доступность = Ложь;
		Элементы.ПоказатьОписание.Доступность = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УправлениеИсториейНавигации()

	МожноПерейтиНазад = ТекущаяПозицияВИстории > 1;
	МожноПерейтиВперед = ТекущаяПозицияВИстории < ИсторияНавигации.Количество();
	
	Элементы.НавигацияНазад.Доступность = МожноПерейтиНазад;
	Элементы.НавигацияВперед.Доступность = МожноПерейтиВперед;
	
	Элементы.СхемаФункцииКонтекстноеМенюНавигацияНазад.Доступность = МожноПерейтиНазад;
	Элементы.СхемаФункцииКонтекстноеМенюНавигацияВперед.Доступность = МожноПерейтиВперед;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВИсториюНавигации(ИД, ТекущийРежимНавигации)

	// Удалим историю которая позже текущей позиции, т.к. вперед уже нельзя перейти
	Для Сч = ТекущаяПозицияВИстории По ИсторияНавигации.Количество() - 1 Цикл
		ИсторияНавигации.Удалить(ТекущаяПозицияВИстории);
	КонецЦикла; 

	КоличествоЭлементовИстории = ИсторияНавигации.Количество();
	Если КоличествоЭлементовИстории = 0 
		ИЛИ ИсторияНавигации[КоличествоЭлементовИстории-1].ИД <> ИД
		ИЛИ ИсторияНавигации[КоличествоЭлементовИстории-1].РежимНавигации <> ТекущийРежимНавигации Тогда
		
		ДанныеИстории = ИсторияНавигации.Добавить();
		ДанныеИстории.РежимНавигации = ТекущийРежимНавигации;
		ДанныеИстории.ИД = ИД;
		
		// Сократим количество записей в истории
		МаксИндексУдаляемойЗаписи = ИсторияНавигации.Количество() - 15;
		Для Сч = 0 По МаксИндексУдаляемойЗаписи - 1 Цикл
			ИсторияНавигации.Удалить(0);
		КонецЦикла; 
		
		ТекущаяПозицияВИстории = ИсторияНавигации.Количество();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура НавигацияВперед()

	ТекущаяПозицияВИстории = ТекущаяПозицияВИстории + 1;
	ДанныеИстории = ИсторияНавигации.Получить(ТекущаяПозицияВИстории - 1);
	ПерейтиПоДаннымНавигации(ДанныеИстории.РежимНавигации, ДанныеИстории.ИД, Ложь);

КонецПроцедуры

&НаСервере
Процедура НавигацияНазад()
	
	НеОбрабатыватьАктивизациюСтроки = Истина;
	НеОбрабатыватьАктивизациюСтрокиРешений = Истина;

	ТекущаяПозицияВИстории = ТекущаяПозицияВИстории - 1;
	ДанныеИстории = ИсторияНавигации.Получить(ТекущаяПозицияВИстории - 1);
	ПерейтиПоДаннымНавигации(ДанныеИстории.РежимНавигации, ДанныеИстории.ИД, Ложь);

КонецПроцедуры

&НаСервере
Процедура НавигацияДомой()

	ПерейтиПоДаннымНавигации(ДомойРежимНавигации, ДомойИД, Истина);

КонецПроцедуры

&НаСервере
Процедура ПерейтиПоДаннымНавигации(РежимНавигации, ИД, ОбновитьИсториюНавигации)

	Если РежимНавигации = 1 
		ИЛИ РежимНавигации = 4 Тогда
		ПерейтиКФункции(ИД, ОбновитьИсториюНавигации);
	ИначеЕсли РежимНавигации = 2 Тогда
		ПерейтиКОбъекту(ИД, ОбновитьИсториюНавигации);
	ИначеЕсли РежимНавигации = 3 Тогда
		ПерейтиКПрофилю(ИД, ОбновитьИсториюНавигации);
	Иначе
		ПерейтиКНачалуНавигации(ОбновитьИсториюНавигации);
	КонецЕсли; 

	УправлениеИсториейНавигации();

КонецПроцедуры

&НаСервере
Процедура ПерейтиКНачалуНавигации(ОбновитьИсториюНавигации = Истина)

	УстановитьРежимНавигации();

	Если ОбновитьИсториюНавигации Тогда
		ДобавитьВИсториюНавигации(Неопределено, РежимНавигации);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОписанияHTML

&НаСервере
Функция ДобавитьЭлементПараграфа(ТекстЭлемента, ПараграфДокумента)

	ДобавленныйТекст = ПараграфДокумента.Элементы.Добавить(ТекстЭлемента);
	
	Возврат ДобавленныйТекст;

КонецФункции

#КонецОбласти

#Область ВнешниеСсылки

&НаКлиенте
Функция ПолучитьТекстСсылкиНаСхемуФункции(ИД)

	ТекстСсылки = "";
	
	// Строка соединения
	НавигационнаяСсылкаИБ = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если СтрНайти("http://", НавигационнаяСсылкаИБ) = 0
		И СтрНайти("https://", НавигационнаяСсылкаИБ) = 0 Тогда
		НавигационнаяСсылкаИБ = "http://platform.demo.1c.ru/solutionscloud";	//Ссылка на внешний сервис
	КонецЕсли;
	
	ТекстСсылки = НавигационнаяСсылкаИБ + "/?C=%22?id_" + ИД + "%22";	// только для web-клиента
	
	Возврат ТекстСсылки;

КонецФункции // ПолучитьТекстСсылкиНаСхемуФункции()

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура УстановитьВидимостьСписка()

	Элементы.ПоказатьСписок.Пометка = ВидимостьСписка;
	Элементы.СтраницыНавигация.Видимость = ВидимостьСписка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСхемыФункции(ВидимостьСхемыФункции = Истина)

	Если Параметры.НомерОкна = 3 Тогда
		Элементы.СхемаФункции.Видимость = Ложь;
	Иначе
		Если РежимПереключенияСтраниц Тогда
			Элементы.СхемаФункции.Видимость = ВидимостьСхемыФункции;
			Элементы.ГруппаОписаниеЭлементаСхемы.Видимость = НЕ(ВидимостьСхемыФункции);
		Иначе
			Элементы.СхемаФункции.Видимость = Истина;
			Элементы.ГруппаОписаниеЭлементаСхемы.Видимость = ВидимостьОписания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОписания()

	Элементы.ПоказатьОписание.Пометка = ВидимостьОписания;
	Элементы.ГруппаОписаниеЭлементаСхемы.Видимость = ВидимостьОписания;
	Если Параметры.НомерОкна = 3 Тогда
		Элементы.ПереходКСхемеФункции.Видимость = Ложь;
	Иначе
		Элементы.ПереходКСхемеФункции.Видимость = РежимПереключенияСтраниц;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуПоИД(ИД, ТекущийСписок)

	Для каждого ДанныеСтроки Из ТекущийСписок Цикл
		Если ДанныеСтроки.ИД = ИД Тогда
			Возврат ДанныеСтроки;
		КонецЕсли;
		НайденнаяСтрока = НайтиСтрокуПоИД(ИД, ДанныеСтроки.ПолучитьЭлементы());
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ПутьКФункцииОбработкаНавигационнойСсылкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПутьКФункцииОбработкаНавигационнойСсылкиНаСервере(ВыбранныйЭлемент.Значение);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПутьКФункцииОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылка)

	ПерейтиКФункции(Новый УникальныйИдентификатор(НавигационнаяСсылка));

КонецПроцедуры

&НаСервере
Процедура УстановитьНавигациюДомой(ТекущийРежимНавигации, ИД)

	ДомойРежимНавигации = ТекущийРежимНавигации;
	ДомойИД = ИД;

КонецПроцедуры

&НаСервере
Функция ОпределитьИДДомой(ТекущийРежимНавигации)

	ИДДомой = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если ТекущийРежимНавигации = 1
		ИЛИ ТекущийРежимНавигации = 4
		ИЛИ ТекущийРежимНавигации = -1 Тогда	//Функции
		
		КоллекцияФункций = СписокРешений.ПолучитьЭлементы();			
		Если КоллекцияФункций.Количество() <> 0 Тогда
			
			ДанныеСтроки = КоллекцияФункций[0];
			ИДДомой = ДанныеСтроки.ИД;
			
		Иначе
			КоллекцияФункций = СписокФункций.ПолучитьЭлементы();			
			Если КоллекцияФункций.Количество() <> 0 Тогда
				
				ДанныеСтроки = КоллекцияФункций[0];
				ИДДомой = ДанныеСтроки.ИД;
				
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ТекущийРежимНавигации = 2 Тогда	// Объекты данных
		КоллекцияОбъектов = СписокОбъектов.ПолучитьЭлементы();			
		Если КоллекцияОбъектов.Количество() <> 0 Тогда
			
			ДанныеСтроки = КоллекцияОбъектов[0];
			ИДДомой = ДанныеСтроки.ИД;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийРежимНавигации = 3 Тогда	// Профили пользователей
		КоллекцияПрофилей = СписокПрофилей.ПолучитьЭлементы();			
		Если КоллекцияПрофилей.Количество() <> 0 Тогда
			
			ДанныеСтроки = КоллекцияПрофилей[0];
			ИДДомой = ДанныеСтроки.ИД;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИДДомой;

КонецФункции

&НаСервере
Процедура ПерейтиКОписаниюФормы(ИмяФормыРабочегоМеста, ЗаголовокРабочегоМеста, ПовторноеОткрытие, ОбъектСодержащийФорму = Неопределено)
	
	Если ОбъектСодержащийФорму = Неопределено Тогда
		МетаданныеФормы = Метаданные.НайтиПоПолномуИмени(ИмяФормыРабочегоМеста);
		ОбъектСодержащийФорму = МетаданныеФормы.Родитель();
	КонецЕсли; 
	
	Если ОбъектСодержащийФорму <> Неопределено Тогда
		ИмяМетаданных = ОбъектСодержащийФорму.ПолноеИмя();
	Иначе
		ИмяМетаданных = "";
	КонецЕсли;
	
	СсылкиНаФункции = Неопределено;
	СсылкиНаОбъекты = Неопределено;
	
	ОписаниеФормы = ОписаниеФормы(Параметры.ПроектМодели, ИмяФормыРабочегоМеста, ИмяМетаданных, ЗаголовокРабочегоМеста);
	Если ОписаниеФормы.Свойство("ОписаниеHTML") Тогда
		
		НачалоНавигации	= ОписаниеФормы.ОписаниеHTML;
		ПерейтиКНачалуНавигации();
		
	ИначеЕсли ОписаниеФормы.Свойство("Функция") Тогда
		
		ПерейтиКФункции(ОписаниеФормы.Функция);
		
	ИначеЕсли ОписаниеФормы.Свойство("Объект") Тогда
		
		ПерейтиКОбъекту(ОписаниеФормы.Объект);
		
	Иначе
		
		ТекстПараграфа = НСтр("ru = 'Форма не используется в функциях и в объектах данных.'");
		СформироватьОписаниеНеНайдено(ТекстПараграфа, ПовторноеОткрытие);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеНеНайдено(ЗаголовокОписания, ПовторноеОткрытие)

	Перем ВложенияHTML;
	
	Описание = Новый ФорматированныйДокумент;
	НовыйПараграф = Описание.Элементы.Добавить();
	
	КоллекцияФункций = СписокФункций.ПолучитьЭлементы();			
	Если КоллекцияФункций.Количество() <> 0 Тогда
		ДанныеСтроки = КоллекцияФункций[0];
		
		ДобавленныйТекст = ДобавитьЭлементПараграфа(ЗаголовокОписания, НовыйПараграф);
		
		НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		
		ДобавленныйТекст = ДобавитьЭлементПараграфа(НСтр("ru = 'Перейти к просмотру всех функций'"), НовыйПараграф);
		ДобавленныйТекст.НавигационнаяСсылка = "ИД_Функции" + Строка(ДанныеСтроки.ИД);
		
		Если НЕ ПовторноеОткрытие Тогда
			УстановитьНавигациюДомой(1, ДанныеСтроки.ИД);
		КонецЕсли; 
	Иначе
		ДобавитьЭлементПараграфа(НСтр("ru = 'В СППР отсутствует функциональная модель.'"), НовыйПараграф);
		Если НЕ ПовторноеОткрытие Тогда
			УстановитьНавигациюДомой(0, Неопределено);
		КонецЕсли; 
	КонецЕсли; 

	Описание.ПолучитьHTML(НачалоНавигации, ВложенияHTML);
	
	ПерейтиКНачалуНавигации(Ложь);

КонецПроцедуры

&НаСервере
Процедура СформироватьСписокСсылокНаФункцииРекурсивно(СсылкиНаФункции, ТекущийУровень, СтрокиДерева)

	Для каждого СтрокаФункция Из СтрокиДерева Цикл
		Если НЕ СтрокаФункция.ПоказатьВСписке Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСсылки = Новый Структура;
		ДанныеСсылки.Вставить("ИД", СтрокаФункция.ИД);
		ДанныеСсылки.Вставить("Представление", СтрокаФункция.Представление);
		ДанныеСсылки.Вставить("Отступ", ТекущийУровень);
		Если НЕ СтрокаФункция.ВходитВРаздел Тогда
			ДанныеСсылки.Вставить("ЦветТекста", WebЦвета.Серый);
		КонецЕсли;
		СсылкиНаФункции.Добавить(ДанныеСсылки);
		
		СформироватьСписокСсылокНаФункцииРекурсивно(СсылкиНаФункции, ТекущийУровень + 1, СтрокаФункция.Строки);
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияССППРОРСР

&НаСервереБезКонтекста
Функция ПодготовитьДанныеФунциональнойМодели(Проект, СпискиВладельца, НомерОкна = 0, ВебСервис = Неопределено)

	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли;
	
	ДанныеФунциональнойМодели = Новый Структура;
	
	Если НомерОкна = 0
		ИЛИ НомерОкна = 1
		ИЛИ НомерОкна = 3 Тогда		
		
		Если СпискиВладельца.Найти("СписокРешений") = Неопределено Тогда
			СписокРешенийДерево = СписокФункций(Проект, ВебСервис, Истина);
			ДанныеФунциональнойМодели.Вставить("СписокРешенийДерево", СписокРешенийДерево);
			
			Если СписокРешенийДерево.Строки.Количество() = 0 
				И НомерОкна = 3 Тогда
				НомерОкна = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерОкна = 0
		ИЛИ НомерОкна = 1
		ИЛИ (НомерОкна = 3 И СписокРешенийДерево.Строки.Количество() = 0) Тогда
		
		Если СпискиВладельца.Найти("СписокФункций") = Неопределено Тогда
			СписокФункцийДерево = СписокФункций(Проект, ВебСервис);
			ДанныеФунциональнойМодели.Вставить("СписокФункцийДерево", СписокФункцийДерево);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерОкна <> 3 Тогда
		
		Если СпискиВладельца.Найти("СписокОбъектов") = Неопределено Тогда
			СписокОбъектовДерево = СписокОбъектов(Проект, ВебСервис);
			ДанныеФунциональнойМодели.Вставить("СписокОбъектовДерево", СписокОбъектовДерево);
		КонецЕсли;
		
		Если СпискиВладельца.Найти("СписокПрофилей") = Неопределено Тогда
			СписокПрофилейДерево = СписокПрофилей(Проект, ВебСервис);
			ДанныеФунциональнойМодели.Вставить("СписокПрофилейДерево", СписокПрофилейДерево);
		КонецЕсли;
		
	Иначе
		Если СпискиВладельца.Найти("СписокРазделов") = Неопределено Тогда
			СписокРазделов = СписокРазделовПроекта(Проект, ВебСервис);
			ДанныеФунциональнойМодели.Вставить("СписокРазделовПроекта", СписокРазделов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФунциональнойМодели;

КонецФункции

// Создает прокси веб-сервиса СППР ОР/СР. В случае ошибки вызывается исключение.
//
// Возвращаемое значение:
//	WSПрокси - Прокси веб-сервиса
//
&НаСервереБезКонтекста
Функция ПолучитьПрокси()
	
	АдресВебСервиса = "https://solutionsdev.1c.ru/sppr";
	ПараметрыПодключения = ПолучитьПараметрыПодключения(АдресВебСервиса);
	
	Попытка
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	Исключение
		
		НеОбрабатыватьАктивизациюСтроки = Истина;
		НеОбрабатыватьАктивизациюСтрокиРешений = Истина;
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки);
			
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Веб-сервис %1 в настоящий момент недоступен.
								|Возможно отсутствует подключение к интернету, веб-сервер перегружен или выполняются регламентные работы. Повторите попытку позже.
								|
								|ВАЖНО! Для подключения к функциональной модели СППР ОР/СР необходимо наличие интернет-соединения.
								|Подробности в журнале регистрации.'"),
								АдресВебСервиса);

	КонецПопытки;
		
	Прокси.Пользователь = ПараметрыПодключения.ИмяПользователя;
	Прокси.Пароль = ПараметрыПодключения.Пароль;
	
	Возврат Прокси;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыбранныеРазделыПроекта(Знач РазделыПроектаОтбор = Неопределено)
	
	Если РазделыПроектаОтбор = Неопределено Тогда
		РазделыПроектаОтбор = Новый Массив;
	КонецЕсли;

	Возврат СериализаторXDTO.ЗаписатьXDTO(РазделыПроектаОтбор);

КонецФункции

&НаКлиенте
Функция ПроверитьПодключение()

	Попытка
		
		Если ОбновитьФормуПоНастройкамСервера() Тогда
			
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьПодключение");
			
			УстановитьВидимостьСписка();
			УстановитьВидимостьОписания();
			
		КонецЕсли;
		
	Исключение
		
		ОбновитьОтображениеДанных();
			
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Подключение к веб-сервису 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
		
	КонецПопытки;

КонецФункции

&НаСервере
Функция ОбновитьФормуПоНастройкамСервера()
	
	Если ПроверитьПодключениеСервер() Тогда
		
		ОбновитьДанные();			
		ОбработатьПараметрыОткрытияФормы(Параметры, Ложь);
		
		РежимПереключенияСтраниц = НЕ(ВидимостьОписания);
		УстановитьРежимНавигации();
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;			
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьПодключениеСервер()
	
	Если ПолучитьПрокси() <> Неопределено Тогда	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьПодключение()

	ПроверитьПодключение();
	
КонецФункции

#Область РаботаСВебСервисом

#Область ОбращениеКМетодамВебСервиса

// Возвращает список проектов СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   СписокЗначений   - Список проектов в виде списка значений
//
&НаСервереБезКонтекста
Функция СписокПроектов(Знач ВебСервис = Неопределено)
	
	СписокПроектовСППР = Новый СписокЗначений;
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	Результат = ВебСервис.GetListOfProjects().Получить();
	
	Если Результат = Неопределено Тогда
		Возврат СписокПроектовСППР;
	КонецЕсли;
		
	Для каждого ЭлементКоллекции Из Результат Цикл
		СписокПроектовСППР.Добавить(ЭлементКоллекции.Name);
	КонецЦикла; 

	Возврат СписокПроектовСППР;

КонецФункции

// Возвращает список разделов проектов СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   СписокЗначений   - Список проектов в виде списка значений
//
&НаСервереБезКонтекста
Функция СписокРазделовПроекта(Проект, Знач ВебСервис = Неопределено)

	СписокРазделовДерево = Новый ДеревоЗначений;
	СписокРазделовДерево.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокРазделовДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокРазделовДерево.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
	СписокРазделовДерево.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	СписокРазделовДеревоПроекта = ВебСервис.GetListOfPartitions(Проект).Получить();
	Если СписокРазделовДеревоПроекта <> Неопределено Тогда
		ТаблицаРазделов = Новый ТаблицаЗначений;
		ТаблицаРазделов.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаРазделов.Колонки.Добавить("ИД_родитель", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаРазделов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТаблицаРазделов.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
		                                         
		Для каждого СтрокаРаздела Из СписокРазделовДеревоПроекта Цикл
			ДанныеСтроки = ТаблицаРазделов.Добавить();
			ДанныеСтроки.ИД = СтрокаРаздела.ID;
			ДанныеСтроки.ИД_родитель = СтрокаРаздела.ID_Parent;
			ДанныеСтроки.Представление = СтрокаРаздела.Name;
			ДанныеСтроки.ЭтоПапка = СтрокаРаздела.IsFolder;
		КонецЦикла; 
		
		ТаблицаРазделов.Индексы.Добавить("ИД_родитель");
		
		ТекущиеЭлементы = СписокРазделовДерево.Строки;
		
		ИД_родитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЗаполнитьСписокРазделовРекурсивно(ТаблицаРазделов, ИД_родитель, ТекущиеЭлементы);
		
	КонецЕсли; 
	
	Возврат СписокРазделовДерево;

КонецФункции

// Возвращает список функций СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   ДеревоЗначений   - Список функций в виде дерева значений
//
&НаСервереБезКонтекста
Функция СписокФункций(Проект, ВебСервис = Неопределено, Решения = Ложь, РазделыПроектаОтбор = Неопределено, МассивФункцийКорпоративногоРешения = Неопределено)
	
	СписокФункцийДерево = Новый ДеревоЗначений;
	СписокФункцийДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокФункцийДерево.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокФункцийДерево.Колонки.Добавить("Схема");
	СписокФункцийДерево.Колонки.Добавить("КонечнаяФункция", Новый ОписаниеТипов("Булево"));
	СписокФункцийДерево.Колонки.Добавить("ЭлементыСхемы", Новый ОписаниеТипов("ТаблицаЗначений"));
	СписокФункцийДерево.Колонки.Добавить("ФормыРабочегоМеста", Новый ОписаниеТипов("ТаблицаЗначений"));
	СписокФункцийДерево.Колонки.Добавить("Процессы");
	СписокФункцийДерево.Колонки.Добавить("Описание");
	СписокФункцийДерево.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	СписокФункцийДерево.Колонки.Добавить("ВключитьВКорпоративноеРешение", Новый ОписаниеТипов("Булево"));
	СписокФункцийДерево.Колонки.Добавить("ЭтоВариантПоставки", Новый ОписаниеТипов("Булево"));
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	Если ПустаяСтрока(Проект) Тогда
		
		ВызватьИсключение 
			НСтр("ru = 'Ошибка подключения к СППР.
					|
					|В настройках интеграции с СППР не указан проект.'");
	
	КонецЕсли;
	
	Если Решения Тогда
		СписокФункцийДеревоПроекта = ВебСервис.GetListOfSolutionsAddon(Проект, ВыбранныеРазделыПроекта(РазделыПроектаОтбор)).Получить();
	Иначе
		СписокФункцийДеревоПроекта = ВебСервис.GetListOfFunctions(Проект, ВыбранныеРазделыПроекта()).Получить();
	КонецЕсли;
	Если СписокФункцийДеревоПроекта <> Неопределено Тогда
		ТаблицаФункций = Новый ТаблицаЗначений;
		ТаблицаФункций.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаФункций.Колонки.Добавить("ИД_родитель", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаФункций.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТаблицаФункций.Колонки.Добавить("ЭтоВариантПоставки", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаФункции Из СписокФункцийДеревоПроекта Цикл
			ДанныеФункции = СтрокаФункции.FunctionDescription;
			ДанныеСтроки = ТаблицаФункций.Добавить();
			ДанныеСтроки.ИД = ДанныеФункции.ID;
			ДанныеСтроки.ИД_родитель = ДанныеФункции.ID_Parent;
			ДанныеСтроки.Представление = ДанныеФункции.Name;
			ДанныеСтроки.ЭтоВариантПоставки = ДанныеФункции.IsProduct;
		КонецЦикла; 
		
		ТаблицаФункций.Индексы.Добавить("ИД_родитель");
		
		ТекущиеЭлементы = СписокФункцийДерево.Строки;
		
		ИД_родитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЗаполнитьСписокФункцийРекурсивно(ТаблицаФункций, ИД_родитель, ТекущиеЭлементы, МассивФункцийКорпоративногоРешения);
	КонецЕсли; 
	
	Возврат СписокФункцийДерево;
	
КонецФункции

// Возвращает список объектов СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   ДеревоЗначений   - список объектов в виде дерева значений
//
&НаСервереБезКонтекста
Функция СписокОбъектов(Проект, ВебСервис = Неопределено)
	
	СписокОбъектовДерево = Новый ДеревоЗначений;
	СписокОбъектовДерево.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокОбъектовДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокОбъектовДерево.Колонки.Добавить("ОписаниеHTML", Новый ОписаниеТипов("Строка"));
	СписокОбъектовДерево.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
	СписокОбъектовДерево.Колонки.Добавить("ЭтоГруппаОбъектов", Новый ОписаниеТипов("Булево"));
	СписокОбъектовДерево.Колонки.Добавить("ОписаниеПодготовлено", Новый ОписаниеТипов("Булево"));
	СписокОбъектовДерево.Колонки.Добавить("Процессы");
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	СписокОбъектовДеревоПроекта = ВебСервис.GetListOfObjects(Проект, ВыбранныеРазделыПроекта()).Получить();
	Если СписокОбъектовДеревоПроекта <> Неопределено Тогда
		ТаблицаОбъектов = Новый ТаблицаЗначений;
		ТаблицаОбъектов.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаОбъектов.Колонки.Добавить("ИД_родитель", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаОбъектов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТаблицаОбъектов.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
		ТаблицаОбъектов.Колонки.Добавить("ЭтоГруппаОбъектов", Новый ОписаниеТипов("Булево"));
		                                         
		Для каждого СтрокаОбъекта Из СписокОбъектовДеревоПроекта Цикл
			ДанныеОбъекта = СтрокаОбъекта.ObjectDescription;
			ДанныеСтроки = ТаблицаОбъектов.Добавить();
			ДанныеСтроки.ИД = ДанныеОбъекта.ID;
			ДанныеСтроки.ИД_родитель = ДанныеОбъекта.ID_Parent;
			ДанныеСтроки.Представление = ДанныеОбъекта.Name;
			ДанныеСтроки.ЭтоПапка = ДанныеОбъекта.IsFolder;
			ДанныеСтроки.ЭтоГруппаОбъектов = ДанныеОбъекта.IsGroup;
		КонецЦикла; 
		
		ТаблицаОбъектов.Индексы.Добавить("ИД_родитель");
		
		ТекущиеЭлементы = СписокОбъектовДерево.Строки;
		
		ИД_родитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЗаполнитьСписокОбъектовРекурсивно(ТаблицаОбъектов, ИД_родитель, ТекущиеЭлементы);
	КонецЕсли; 
	
	Возврат СписокОбъектовДерево;

КонецФункции

// Возвращает список профилей пользователей СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   ДеревоЗначений   - список профилей пользователей в виде дерева значений
//
&НаСервереБезКонтекста
Функция СписокПрофилей(Проект, ВебСервис = Неопределено)

	СписокПрофилейДерево = Новый ДеревоЗначений;
	СписокПрофилейДерево.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокПрофилейДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокПрофилейДерево.Колонки.Добавить("ОписаниеHTML", Новый ОписаниеТипов("Строка"));
	СписокПрофилейДерево.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
	СписокПрофилейДерево.Колонки.Добавить("ОписаниеПодготовлено", Новый ОписаниеТипов("Булево"));
	СписокПрофилейДерево.Колонки.Добавить("Процессы");
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	СписокПрофилейДеревоПроекта = ВебСервис.GetListOfPerformers(Проект, ВыбранныеРазделыПроекта()).Получить();
	Если СписокПрофилейДеревоПроекта <> Неопределено Тогда
		ТаблицаПрофилей = Новый ТаблицаЗначений;
		ТаблицаПрофилей.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаПрофилей.Колонки.Добавить("ИД_родитель", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаПрофилей.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТаблицаПрофилей.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
		ТаблицаПрофилей.Колонки.Добавить("ЭтоГруппаОбъектов", Новый ОписаниеТипов("Булево"));
		                                         
		Для каждого СтрокаПрофиля Из СписокПрофилейДеревоПроекта Цикл
			ОписаниеПрофиля = СтрокаПрофиля.PerformerDescription;
			ДанныеСтроки = ТаблицаПрофилей.Добавить();
			ДанныеСтроки.ИД = ОписаниеПрофиля.ID;
			ДанныеСтроки.ИД_родитель = ОписаниеПрофиля.ID_Parent;
			ДанныеСтроки.Представление = ОписаниеПрофиля.Name;
			ДанныеСтроки.ЭтоПапка = ОписаниеПрофиля.IsFolder;
		КонецЦикла; 
		
		ТаблицаПрофилей.Индексы.Добавить("ИД_родитель");
		
		ТекущиеЭлементы = СписокПрофилейДерево.Строки;
		
		ИД_родитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЗаполнитьСписокПрофилейРекурсивно(ТаблицаПрофилей, ИД_родитель, ТекущиеЭлементы);
	КонецЕсли; 
	
	Возврат СписокПрофилейДерево;

КонецФункции

// Возвращает данные функции
//
// Параметры:
//  ИДФункции	- Тип - Уникальный идентификатор ссылки на функцию
//
// Возвращаемое значение:
//   ПакетXDTO	- Пакет XDTO, содержащий данные функции
//
&НаСервереБезКонтекста
Функция ДанныеФункции(ИДФункции)

	ВебСервис = ПолучитьПрокси();
	ДанныеФункции = ВебСервис.GetFunction(ИДФункции).Получить();
	
	Возврат ДанныеФункции;

КонецФункции

// Возвращает описание объекта в формате HTML
//
// Параметры:
//  ИДОбъекта	- Тип - Уникальный идентификатор ссылки на объект
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
&НаСервереБезКонтекста
Функция ОписаниеОбъекта(ИДОбъекта)

	ВебСервис = ПолучитьПрокси();
	ОписаниеHTML = ВебСервис.GetObjectDescription(ИДОбъекта).Получить();
	
	Возврат ОписаниеHTML;

КонецФункции

// Возвращает описание профиля в формате HTML
//
// Параметры:
//  ИДПрофиля	- Тип - Уникальный идентификатор ссылки на профиль
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
&НаСервереБезКонтекста
Функция ОписаниеПрофиля(ИДПрофиля)

	ВебСервис = ПолучитьПрокси();
	ОписаниеHTML = ВебСервис.GetPerformerDescription(ИДПрофиля).Получить();
	
	Возврат ОписаниеHTML;

КонецФункции

// Возвращает описание функции в формате HTML
//
// Параметры:
//  ИДФункции	- Тип - Уникальный идентификатор ссылки на функцию
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
&НаСервереБезКонтекста
Функция ОписаниеФункции(ИДФункции)

	ВебСервис = ПолучитьПрокси();
	ОписаниеHTML = ВебСервис.GetFunctionDescription(ИДФункции).Получить();
	
	Возврат ОписаниеHTML;

КонецФункции

// Возвращает описание формы
//
// Параметры:
//  ИмяФормы		- Строка - Полное имя формы
//  ИмяМетаданных	- Строка - Имя объекта метаданных, который содержит форму
//
// Возвращаемое значение:
//   Структура   - Структура
//
&НаСервереБезКонтекста
Функция ОписаниеФормы(Проект, ИмяФормы, ИмяМетаданных, ЗаголовокФормы)

	ВебСервис = ПолучитьПрокси();
	ОписаниеФормы = ВебСервис.GetFormDescription(Проект, ИмяМетаданных, ИмяФормы, ЗаголовокФормы).Получить();
	
	ГотовоеОписаниеФормы = Новый Структура;
	
	Если ОписаниеФормы <> Неопределено Тогда
		Если ОписаниеФормы.Description <> "" Тогда
			ГотовоеОписаниеФормы.Вставить("ОписаниеHTML", ОписаниеФормы.Description);
		ИначеЕсли ОписаниеФормы.FunctionID <> Неопределено Тогда	
			ГотовоеОписаниеФормы.Вставить("Функция", ОписаниеФормы.FunctionID);
		ИначеЕсли ОписаниеФормы.ObjectID <> Неопределено Тогда	
			ГотовоеОписаниеФормы.Вставить("Объект", ОписаниеФормы.ObjectID);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ГотовоеОписаниеФормы;

КонецФункции

// Возвращает описание раздела интерфейса
//
// Параметры:
//  РазделИнтерфейса	- Строка - Имя раздела
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
&НаСервереБезКонтекста
Функция ОписаниеРазделаИнтерфейса(Проект, РазделИнтерфейса)

	ВебСервис = ПолучитьПрокси();
	ОписаниеHTML = ВебСервис.GetInterfaceDescription(Проект, РазделИнтерфейса).Получить();
	
	Возврат ОписаниеHTML;

КонецФункции

// Возвращает описание раздела интерфейса
//
// Параметры:
//  РазделИнтерфейса	- Строка - Имя раздела
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
&НаСервереБезКонтекста
Функция ОтправитьЗаявку(ПараметрыЗаявки, ВидЗаявки = "ИжТиСиКорпоративноеРешение")

	ВебСервис = ПолучитьПрокси();
	Пакет = СериализаторXDTO.ЗаписатьXDTO(Новый ХранилищеЗначения(ПараметрыЗаявки, Новый СжатиеДанных(9)));
	ОписаниеОшибки = "";
	
	Возврат  ВебСервис.SendOrder(ВидЗаявки, Пакет, ОписаниеОшибки);

КонецФункции

#КонецОбласти

#Область ВебСервисПрочее

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокФункцийРекурсивно(ТаблицаФункций, ИД_родитель, ТекущиеЭлементы, МассивФункцийКорпоративногоРешения)

	СтруктураПоиска = Новый Структура("ИД_родитель", ИД_родитель);
	СписокСтрок = ТаблицаФункций.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		НоваяСтрока.Представление = ДанныеСтроки.Представление;
		НоваяСтрока.ИД = ДанныеСтроки.ИД;
		НоваяСтрока.ЭтоВариантПоставки = ДанныеСтроки.ЭтоВариантПоставки;
		Если МассивФункцийКорпоративногоРешения <> Неопределено Тогда
			НоваяСтрока.ВключитьВКорпоративноеРешение = (МассивФункцийКорпоративногоРешения.Найти(ДанныеСтроки.ИД)<> Неопределено);
		КонецЕсли;
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;		
		ЗаполнитьСписокФункцийРекурсивно(ТаблицаФункций, ДанныеСтроки.ИД, ТекущиеЭлементыСтроки, МассивФункцийКорпоративногоРешения);
		
		НоваяСтрока.ЭтоГруппа = (ТекущиеЭлементыСтроки.Количество() > 0);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокОбъектовРекурсивно(ТаблицаОбъектов, ИД_родитель, ТекущиеЭлементы)

	СтруктураПоиска = Новый Структура("ИД_родитель", ИД_родитель);
	СписокСтрок = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;
		ЗаполнитьСписокОбъектовРекурсивно(ТаблицаОбъектов, ДанныеСтроки.ИД, ТекущиеЭлементыСтроки);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокПрофилейРекурсивно(ТаблицаПрофилей, ИД_родитель, ТекущиеЭлементы)

	СтруктураПоиска = Новый Структура("ИД_родитель", ИД_родитель);
	СписокСтрок = ТаблицаПрофилей.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;
		ЗаполнитьСписокПрофилейРекурсивно(ТаблицаПрофилей, ДанныеСтроки.ИД, ТекущиеЭлементыСтроки);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокРазделовРекурсивно(ТаблицаРазделов, ИД_родитель, ТекущиеЭлементы)

	СтруктураПоиска = Новый Структура("ИД_родитель", ИД_родитель);
	СписокСтрок = ТаблицаРазделов.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;
		ЗаполнитьСписокРазделовРекурсивно(ТаблицаРазделов, ДанныеСтроки.ИД, ТекущиеЭлементыСтроки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция СформироватьОписаниеОшибкиПодключения(ПредставлениеОшибки = "")
	
	Перем ВложенияHTML;
	
	ОписаниеОшибки = Новый ФорматированныйДокумент;
	
	// Заголовок
	НовыйПараграф = ОписаниеОшибки.Элементы.Добавить();
	ТекстЗаголовка = НовыйПараграф.Элементы.Добавить("Ошибка подключения к функциональной модели СППР ОР/СР");
	ТекстЗаголовка.ЦветТекста = Заголовок1_Цвет;
	ТекстЗаголовка.Шрифт = Заголовок1_Шрифт;
	
	НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
	// Описание ошибки
	СтрокиОшибки = СтрРазделить(ПредставлениеОшибки, Символы.ПС);
	Если СтрокиОшибки.Количество() > 0 Тогда
		
		НовыйПараграф = ОписаниеОшибки.Элементы.Добавить();
		НовыйПараграф.Отступ = 20;
		
		Для каждого СтрокаОшибки Из СтрокиОшибки Цикл
			НовыйПараграф.Элементы.Добавить(СтрокаОшибки);
			НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		КонецЦикла;
		
		НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		
	КонецЕсли;
	
	// Ссылка на повтор проверки
	НовыйПараграф = ОписаниеОшибки.Элементы.Добавить();
	НовыйПараграф.Элементы.Добавить("Выполняется проверка возможности подключения, при восстановлении подключения 1С:Облачная карта прикладных решений откроется автоматически.");
	НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
	ДобавленныйТекст = НовыйПараграф.Элементы.Добавить("Проверить подключение сейчас ...");
	ДобавленныйТекст.НавигационнаяСсылка = "ИД_КомандаФормы_ПроверитьПодключение";
	
	ОписаниеОшибкиHTML = "";
	ОписаниеОшибки.ПолучитьHTML(ОписаниеОшибкиHTML, ВложенияHTML);
	
	Возврат ОписаниеОшибкиHTML;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыПодключения(АдресВебСервиса)
	
	МестоположениеWSDL = АдресВебСервиса + "/ws/FunctionModelSolutions1C.1cws?wsdl";
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL              = МестоположениеWSDL;
	ПараметрыПодключения.URIПространстваИмен    = "http://www.1c.ru/SPPR/FunctionModel";
	ПараметрыПодключения.ИмяСервиса             = "FunctionModelSolutions1C";
	ПараметрыПодключения.ИмяПользователя        = "1CSolutionsSOAP";
	ПараметрыПодключения.Пароль                 = "Sy2Cy9xa";
	ПараметрыПодключения.Таймаут                = 20;
	ПараметрыПодключения.ДелатьКонтрольныйВызов = Ложь;
	
	Возврат ПараметрыПодключения;

КонецФункции

#КонецОбласти

#Конецобласти

#КонецОбласти

#Область КорпоративноеРешение

&НаКлиенте
Процедура КРУстановитьВидимость()

	Элементы.СписокРешенийВключитьВКорпоративноеРешение.Видимость = РежимКорпоративноеРешение;
	Элементы.ГруппаРаботаСКорпоративнымРешением.Доступность = РежимКорпоративноеРешение;
	
	// Заголовок подменю включает информацию о количестве функций решения и модифицированность
	ПодменюЗаголовок = НСтр("ru='Корпоративное решение'");
	Если ФункцииКорпоративногоРешения.Количество() > 0 Тогда
		ПодменюЗаголовок = ПодменюЗаголовок + " (" + ФункцииКорпоративногоРешения.Количество() + ")";		
	КонецЕсли;
	Если ФункцииКорпоративногоРешенияМодифицированность Тогда
		ПодменюЗаголовок = ПодменюЗаголовок + "*";
	КонецЕсли;	
	Элементы.СтраницаОписаниеHTMLКорпоративноеРешение.Заголовок = ПодменюЗаголовок;
	Элементы.СписокРазделов.ТолькоПросмотр = РежимКорпоративноеРешение;
	
	// Описание Корпоративного решения должно отображаться на отдельной закладке
	Если РежимКорпоративноеРешение Тогда
		Элементы.СтраницаОписаниеHTMLСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.СтраницаОписаниеHTMLСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаОписаниеHTMLСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеHTMLСтраницы.ПодчиненныеЭлементы.СтраницаОписаниеHTMLОписание;
	КонецЕсли;

КонецПроцедуры // КРУстановитьВидимость()

&НаКлиенте
Процедура КРСоздатьЗаявку(Команда)
	
	Если ФункцииКорпоративногоРешенияМодифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаСозданияПриМодифицированнойКонфигурации", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение изменена. 
			|Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		РежимКорпоративноеРешение = Истина;
		Если ФункцииКорпоративногоРешения.Количество() > 0 Тогда
			ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();			
		КонецЕсли;
		КРУстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаСозданияПриМодифицированнойКонфигурации(Результат, Параметры)	Экспорт

    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
	
	РежимКорпоративноеРешение = Истина;
	КРУстановитьВидимость();

КонецПроцедуры // ОбработкаВопросаСозданияПриМодифицированнойКонфигурации()

&НаКлиенте
Процедура КРЗакрытьЗаявку(Команда)
	
	Если ФункцииКорпоративногоРешенияМодифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаЗакрытияМодифицированнойКонфигурации", ЭтаФорма, Новый Структура("ПередЗакрытиемФормы", Ложь));
		ПоказатьВопрос(Оповещение, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение изменена. 
			|Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
		РежимКорпоративноеРешение = Ложь;
		
		КРУстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаЗакрытияМодифицированнойКонфигурации(Результат, Параметры)	Экспорт

    Если Результат = КодВозвратаДиалога.Нет Тогда
		Если Параметры.ПередЗакрытиемФормы = Ложь Тогда
			Закрыть();
		Иначе
			ФункцииКорпоративногоРешенияМодифицированность = Ложь;
        	Возврат;
		КонецЕсли;
    КонецЕсли;
	
	ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
	РежимКорпоративноеРешение = Ложь;
	
	КРУстановитьВидимость();

КонецПроцедуры // ОбработкаВопросаЗакрытияМодифицированнойКонфигурации()

&НаКлиенте
Процедура ОбработкаЗакрытияКонфигурацииКорпоративногоРешения()

	Для каждого ТекущиеДанные Из СписокРешений.ПолучитьЭлементы() Цикл
		УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанные, Ложь);
	КонецЦикла;
	ФункцииКорпоративногоРешенияМодифицированность = Ложь;

КонецПроцедуры // УправлениеФункциямиКорпоративногоРешенияЗакрытьКонфигурацию()

#Область СохранитьКонфигурацию

&НаКлиенте
Процедура КРСохранитьЗаявку(Команда)
	
	#Если ВебКлиент Тогда
		
		Оповещение = Новый ОписаниеОповещения("КРСохранитьЗаявкуВыполнитьСохранение", ЭтотОбъект);
		ТекстСообщения = НСтр("ru = 'Для работы с заявками  в 1С:ИжТиСи необходимо установить расширение работы с файлами.'");
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
		
	#Иначе
		
		КРСохранитьЗаявкуВыполнитьСохранение();
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КРСохранитьЗаявкуВыполнитьСохранение()
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = "CORPSolution1C";
	Фильтр = НСтр("ru = 'Заявки в 1С:ИжТиСи на корпоративное решение'")	+ "(*.csl)|*.csl";
	ДиалогСохраненияФайла.Фильтр = Фильтр;
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru='Укажите файл для сохранения заявки в 1С:ИжТиСи на корпоративное решение'");
	ДиалогСохраненияФайла.Показать(Новый ОписаниеОповещения("КРСохранитьКонфигурациюСерверПослеВыбораФайла", ЭтаФорма, Новый Структура("ДиалогСохраненияФайла", ДиалогСохраненияФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура КРСохранитьКонфигурациюСерверПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогСохраненияФайла = ДополнительныеПараметры.ДиалогСохраненияФайла;
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		ФайлКонфигурации = Новый Файл(ДиалогСохраненияФайла.ВыбранныеФайлы[0]);
		СохранитьКонфигурациюВФайл(ФайлКонфигурации);
						
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Файл заявки в 1С:ИжТиСи на корпоративное решение не выбран!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьКонфигурациюВФайл(ФайлКонфигурации)

	ТекстЗаголовка = НСтр("ru='Сохранение заявки в 1С:ИжТиСи на корпоративное решение'");
	ТекстСостояния = НСтр("ru='Выполняется сохранение заявки в 1С:ИжТиСи на корпоративное решение'");
	Состояние(ТекстЗаголовка, , ТекстСостояния);
	
	АдресДанныхВыгрузкиКонфигурации = ДанныеКонфигурацииКорпоративногоРешения();
	
	Попытка
		ПолучитьИзВременногоХранилища(АдресДанныхВыгрузкиКонфигурации).Записать(ФайлКонфигурации.ПолноеИмя);
	Исключение
			
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Сохранение файла корпоративного решения 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
			
		Возврат;
		
	КонецПопытки;
	
	ФункцииКорпоративногоРешенияМодифицированность = Ложь;
	КРУстановитьВидимость();
	
	ПоказатьПредупреждение(Неопределено, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение сохранена'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытьКонфигурацию

&НаКлиенте
Процедура КРОткрытьСохраненнуюЗаявку(Команда)
	
	Если ФункцииКорпоративногоРешенияМодифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаОткрытияКонфигурации", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение изменена. 
			|Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
		ВыбратьФайлКонфигурации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОткрытияКонфигурации(Результат, Параметры) Экспорт

    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьФайлКонфигурации", ЭтотОбъект);
		ТекстСообщения = НСтр("ru = 'Для работы с заявками  в 1С:ИжТиСи необходимо установить расширение работы с файлами.'");
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
		
	#Иначе
		
		ВыбратьФайлКонфигурации();
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлКонфигурации()
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Фильтр = НСтр("ru = 'Заявка в 1С:ИжТиСи на корпоративное решение'")	+ "(*.csl)|*.csl";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Укажите файл заявки в 1С:ИжТиСи на корпоративное решение'");
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("КРОткрытьКонфигурациюСерверПослеВыбораФайла", ЭтаФорма, Новый Структура("ДиалогОткрытияФайла", ДиалогОткрытияФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура КРОткрытьКонфигурациюСерверПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		ФайлКонфигурации = Новый Файл(ДиалогОткрытияФайла.ВыбранныеФайлы[0]);
		ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации);
						
	КонецЕсли;
	
	Если Элементы.СтраницаОписаниеHTMLСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеHTMLКорпоративноеРешение Тогда
		КРОписаниеHTML = ПолучитьОписаниеКорпоративногоРешения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации)

	ТекстЗаголовка = НСтр("ru='Загрузка заявки в 1С:ИжТиСи на корпоративное решение'");
	ТекстСостояния = НСтр("ru='Выполняется загрузка заявки в 1С:ИжТиСи на корпоративное решение'");
	Состояние(ТекстЗаголовка, , ТекстСостояния);
	
	ИмяФайла = ФайлКонфигурации.ПолноеИмя;
	АдресДанныхЗагрузкиКонфигурации = ВнешниеДанныеКонфигурацииКорпоративногоРешения(ИмяФайла);
	
	Если РежимКорпоративноеРешение Тогда
		Если ФункцииКорпоративногоРешения.Количество() > 0 Тогда
			ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
		КонецЕсли;
	Иначе
		РежимКорпоративноеРешение = Истина;
	КонецЕсли;
	
	ЗагрузитьКонфигурациюКорпоративногоРешения(АдресДанныхЗагрузкиКонфигурации);
	КРУстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Функция ВнешниеДанныеКонфигурацииКорпоративногоРешения(ИмяФайла)
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеИзФайла(ИмяФайла));

КонецФункции // ДанныеКонфигурацииКорпоративногоРешения()

&НаСервере
Процедура ЗагрузитьКонфигурациюКорпоративногоРешения(АдресДанныхЗагрузкиКонфигурации)

	ИсточникДанныхКонфигурации = ПолучитьИзВременногоХранилища(АдресДанныхЗагрузкиКонфигурации);
	Если ТипЗнч(ИсточникДанныхКонфигурации) = Тип("СписокЗначений") Тогда
		ФункцииКорпоративногоРешения.ЗагрузитьЗначения(ПолучитьИзВременногоХранилища(АдресДанныхЗагрузкиКонфигурации).ВыгрузитьЗначения());
	КонецЕсли;
	
	СписокРешенийДерево = СписокФункций(Параметры.ПроектМодели, , Истина, ПолучитьОтборРазделовПроекта(), ФункцииКорпоративногоРешения.ВыгрузитьЗначения());
	ЗначениеВРеквизитФормы(СписокРешенийДерево, "СписокРешений");

КонецПроцедуры // ЗагрузитьКонфигурациюКорпоративногоРешения()

#КонецОбласти

&НаСервере
Функция ДанныеКонфигурацииКорпоративногоРешения()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ИмяВременногоФайла, ФункцииКорпоративногоРешения);
	
	АдресДанныхВыгрузки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение файла корпоративного решения 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Возврат АдресДанныхВыгрузки;

КонецФункции // ДанныеКонфигурацииКорпоративногоРешения()

&НаКлиенте
Процедура СписокРешенийВключитьВКорпоративноеРешениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокРешений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанные, ТекущиеДанные.ВключитьВКорпоративноеРешение);
	КРУстановитьВидимость();
	
	Если Элементы.СтраницаОписаниеHTMLСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеHTMLКорпоративноеРешение Тогда
		КРОписаниеHTML = ПолучитьОписаниеКорпоративногоРешения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанные, ВключитьВКорпоративноеРешение)
	
	Если ВключитьВКорпоративноеРешение Тогда
		Если ТекущиеДанные.ЭтоВариантПоставки
			И ФункцииКорпоративногоРешения.НайтиПоЗначению(ТекущиеДанные.ИД) = Неопределено Тогда
			ФункцииКорпоративногоРешения.Добавить(ТекущиеДанные.ИД);
			ФункцииКорпоративногоРешенияМодифицированность = Истина;
			ТекущиеДанные.ВключитьВКорпоративноеРешение = ВключитьВКорпоративноеРешение;
			
			// Исключить вложенные продукты
			Для каждого ТекущиеДанныеЭлемент Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанныеЭлемент, Ложь);
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		ЭлементСписка = ФункцииКорпоративногоРешения.НайтиПоЗначению(ТекущиеДанные.ИД);
		Если ЭлементСписка <> Неопределено Тогда			
			ФункцииКорпоративногоРешения.Удалить(ЭлементСписка);			
			ФункцииКорпоративногоРешенияМодифицированность = Истина;
			ТекущиеДанные.ВключитьВКорпоративноеРешение = ВключитьВКорпоративноеРешение;
		КонецЕсли;
		
		// Исключить вложенные продукты
		Для каждого ТекущиеДанныеЭлемент Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанныеЭлемент, ВключитьВКорпоративноеРешение);
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

#Область ДействияСКонфигурацией

&НаКлиенте
Процедура КРОтправитьЗаявку(Команда)
	
	Если ФункцииКорпоративногоРешения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Функции Корпоративного решения не выбраны!'"), 10);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	КРОтправитьЗаявкуСервер();
	ПоказатьПредупреждение(, НСтр("ru='Заявка отправлена в ИжТиСи. Ждите обратной связи!'"), 10);
	
КонецПроцедуры

&НаКлиенте
Процедура КРПечатьОписания(Команда)
	
	Если ФункцииКорпоративногоРешения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Функции Корпоративного решения не выбраны!'"), 10);
		Возврат;
	КонецЕсли;
	
	Элементы.КРОписаниеHTML.Документ.execCommand("Print");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеКорпоративногоРешения()

	ВложенияHTML = Новый Структура;
	ИспользуемыеСтили = ИспользуемыеСтили();
	
	Описание = Новый ФорматированныйДокумент;
	ОписаниеДобавитьПараграф(НСтр("ru='Описание корпоративного решения'"), Описание, ИспользуемыеСтили.Заголовок1_Цвет, ИспользуемыеСтили.Заголовок1_Шрифт);
	
	// Функции корпоративного решения
	ОписаниеФункцийКорпоративногоРешения = ПолучитьФункцииКорпоративногоРешения();
	
	// Список продуктов
	ОписаниеДобавитьПараграф("
		|Список продуктов:", Описание, ИспользуемыеСтили.Заголовок2_Цвет, ИспользуемыеСтили.Заголовок2_Шрифт);
	
	Для каждого ОписаниеФункции Из ОписаниеФункцийКорпоративногоРешения Цикл
		НовыйПараграф = ОписаниеДобавитьПараграф(ОписаниеФункции.Представление, Описание);
		НовыйПараграф.ТипПараграфа = ТипПараграфа.МаркированныйСписок;
		НовыйПараграф.Элементы[0].НавигационнаяСсылка = "ИД_Функции" + Строка(ОписаниеФункции.ИД);
	КонецЦикла;

	// Описание решений
	ПараграфОписаниеПродуктов = ОписаниеДобавитьПараграф("
		|Описание продуктов Корпоративного решения:", Описание, ИспользуемыеСтили.Заголовок2_Цвет, ИспользуемыеСтили.Заголовок2_Шрифт);
	Для каждого ОписаниеФункции Из ОписаниеФункцийКорпоративногоРешения Цикл
		
		ОписаниеДобавитьПараграф(ОписаниеФункции.Представление, Описание, , ИспользуемыеСтили.Заголовок3_Шрифт);
		
		НовыйПараграф = ОписаниеДобавитьПараграфыКопированием(ОписаниеФункции.Описание, Описание, НСтр("ru='Описание'"), НСтр("ru='Состав функции'"));
		Если НовыйПараграф <> Неопределено Тогда
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеHTML = "";
	Описание.ПолучитьHTML(ОписаниеHTML, ВложенияHTML);
	
	Возврат ОписаниеHTML;
	
КонецФункции

&НаСервере
Функция ПолучитьФункцииКорпоративногоРешения()

	ОписаниеФункцийКорпоративногоРешения = Новый Массив;
	
	ФункцииКорпоративногоРешенияИерархия = РеквизитФормыВЗначение("СписокРешений").Строки.
		НайтиСтроки(Новый Структура("ВключитьВКорпоративноеРешение", Истина)
		, Истина);

	ТекущийСписок = СписокРешений.ПолучитьЭлементы();	
	Для каждого ФункцияКорпоративногоРешения Из ФункцииКорпоративногоРешенияИерархия Цикл
		
		ДанныеСтроки = НайтиСтрокуПоИД(ФункцияКорпоративногоРешения.ИД, ТекущийСписок);
		Если ДанныеСтроки <> Неопределено Тогда
			Если ДанныеСтроки.Схема = Неопределено Тогда
				ДанныеФункции = ДанныеФункции(ДанныеСтроки.ИД);
				ДанныеСтроки.Схема = ОбработатьСхему(ДанныеФункции.Scheme.Получить());
				ДанныеСтроки.КонечнаяФункция = ДанныеФункции.IsWorkplace;
				Для каждого ДанныеЭлементаСхемы Из ДанныеФункции.SchemeElements Цикл
					НоваяСтрока = ДанныеСтроки.ЭлементыСхемы.Добавить();
					НоваяСтрока.ИД = ДанныеЭлементаСхемы.ID;
					НоваяСтрока.Код = ДанныеЭлементаСхемы.Code;
					НоваяСтрока.Тип = ДанныеЭлементаСхемы.Type;
					НоваяСтрока.Представление = ДанныеЭлементаСхемы.Name;
				КонецЦикла; 
				Для каждого ДанныеФормыРабочегоМеста Из ДанныеФункции.ListOfWorkplace Цикл
					НоваяСтрока = ДанныеСтроки.ФормыРабочегоМеста.Добавить();
					НоваяСтрока.ИмяОбъектаМетаданных = ДанныеФормыРабочегоМеста.Metadata;
					НоваяСтрока.ИмяФормы = ДанныеФормыРабочегоМеста.FormName;
					НоваяСтрока.ТипФормы = ДанныеФормыРабочегоМеста.FormType;
				КонецЦикла; 
			КонецЕсли; 
			
			Если НЕ ДанныеСтроки.ЭтоВариантПоставки Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеСтроки.Описание = Неопределено Тогда
				ДанныеСтроки.Описание = ОписаниеФункции(ДанныеСтроки.ИД);
			КонецЕсли;
			
			ОписаниеФункцийКорпоративногоРешения.Добавить(ДанныеСтроки);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеФункцийКорпоративногоРешения;

КонецФункции // ПолучитьФункцииКорпоративногоРешения()

&НаСервере
Функция ОписаниеДобавитьПараграф(ТекстПараграфа, Описание, ЦветТекста = Неопределено, Шрифт = Неопределено)
	
	НовыйПараграф = Описание.Элементы.Добавить();
	
	// Содержание
	ТекстЗаголовка = НовыйПараграф.Элементы.Добавить(ТекстПараграфа);
	
	// Форматирование
	Если ЦветТекста <> Неопределено Тогда
		ТекстЗаголовка.ЦветТекста = ЦветТекста;
	КонецЕсли;
	
	Если Шрифт <> Неопределено Тогда
		ТекстЗаголовка.Шрифт = Шрифт;
	КонецЕсли;

	Возврат НовыйПараграф;

КонецФункции

&НаСервере
Функция ОписаниеДобавитьПараграфыКопированием(ИсходныйТекстПараграфов, Описание, ТекстЗакладкиНачала = Неопределено, ТекстЗакладкиКонца = Неопределено)
	
	ВложенияHTML = Новый Структура;
	НовыйПараграф = Неопределено;
	
	ТекстПараграфов = Новый ФорматированныйДокумент();
	ТекстПараграфов.УстановитьHTML(ИсходныйТекстПараграфов, ВложенияHTML);
	
	ОбластьНачала = Неопределено;
	ОбластьКонца = Неопределено;
	
	Если ТекстЗакладкиНачала <> Неопределено Тогда
		
		ОбластьНачала = ТекстПараграфов.НайтиТекст(ТекстЗакладкиНачала);
		Если ОбластьНачала = Неопределено Тогда
			НовыйПараграф = Описание.Элементы.Добавить();	
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстЗакладкиКонца <> Неопределено Тогда
		
		Если ТекстЗакладкиНачала <> Неопределено Тогда
			ОбластьКонца = ТекстПараграфов.НайтиТекст(ТекстЗакладкиКонца, ОбластьНачала.ЗакладкаКонца);
		Иначе
			ОбластьКонца = ТекстПараграфов.НайтиТекст(ТекстЗакладкиКонца);
		КонецЕсли;
		Если ОбластьКонца = Неопределено Тогда
			НовыйПараграф = Описание.Элементы.Добавить();	
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗакладкаНачала = ?(ОбластьНачала = Неопределено, Неопределено, ОбластьНачала.ЗакладкаКонца);
	ЗакладкаКонца = ?(ОбластьКонца = Неопределено, Неопределено, ОбластьКонца.ЗакладкаНачала);
	
	КопируемыеЭлементы = ТекстПараграфов.ПолучитьЭлементы(ЗакладкаНачала, ЗакладкаКонца);
	
	ПараграфПредыдущегоКопируемогоЭлемента = Неопределено;
	Для каждого КопируемыйЭлемент Из КопируемыеЭлементы Цикл
		
		Если КопируемыйЭлемент.Родитель <> ПараграфПредыдущегоКопируемогоЭлемента Тогда
			НовыйПараграф = Описание.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараграф, КопируемыйЭлемент.Родитель);
			ПараграфПредыдущегоКопируемогоЭлемента = КопируемыйЭлемент.Родитель;
		КонецЕсли;
		
		Если ТипЗнч(КопируемыйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
			Если КопируемыйЭлемент = КопируемыеЭлементы[0] Тогда
				Продолжить;	// Пропускать первый перевод строки копируемого элемента
			КонецЕсли;
			НовыйЭлементПараграфа = НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		ИначеЕсли ТипЗнч(КопируемыйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
			НовыйЭлементПараграфа = НовыйПараграф.Элементы.Добавить(КопируемыйЭлемент.Текст, ТипЭлементаФорматированногоДокумента.Текст);
		ИначеЕсли ТипЗнч(КопируемыйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
			НовыйЭлементПараграфа = НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.Картинка);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыйЭлементПараграфа, КопируемыйЭлемент);
	
	КонецЦикла;
	
	Возврат НовыйПараграф;
	
КонецФункции // ОписаниеДобавитьПараграфыКопированием()

&НаСервереБезКонтекста
Функция ИспользуемыеСтили()

	ИспользуемыеСтили = Новый Структура;
	
	ИспользуемыеСтили.Вставить("Заголовок1_Цвет", WebЦвета.ТемноСиний);
	ИспользуемыеСтили.Вставить("Заголовок1_Шрифт", Новый Шрифт("Arial",, Истина,,,, 150));
	ИспользуемыеСтили.Вставить("Заголовок2_Цвет",  ЦветаСтиля.ГруппаВариантовОтчетовЦвет);
	ИспользуемыеСтили.Вставить("Заголовок2_Шрифт", Новый Шрифт("Arial",, Истина,,,, 125));
	ИспользуемыеСтили.Вставить("Заголовок3_Цвет",  ЦветаСтиля.ГруппаВариантовОтчетовЦвет);
	ИспользуемыеСтили.Вставить("Заголовок3_Шрифт", Новый Шрифт("Arial",, Истина,,,, 110));
	
	ИспользуемыеСтили.Вставить("ИерархияПроцесса_Шрифт", Новый Шрифт(,, Истина,,,,));
	ИспользуемыеСтили.Вставить("ЗаголовокПроцесса_Шрифт", Новый Шрифт(,,,Истина,,,));
	ИспользуемыеСтили.Вставить("ОписаниеПроцесса_Шрифт", Новый Шрифт(,, ,,,, 75));
	ИспользуемыеСтили.Вставить("ОписаниеШагаПроцесса_Шрифт", Новый Шрифт(,, ,,,,));

	Возврат ИспользуемыеСтили;
	
КонецФункции

&НаСервере
Функция КРОтправитьЗаявкуСервер()
	
	// Информация об отправителе
	ИнформацияОбОтправителе = Новый Структура;
	ИнформацияОбОтправителе.Вставить("ОтправительАдресЭлектроннойПочты", ОтправительАдресЭлектроннойПочты);
	ИнформацияОбОтправителе.Вставить("ОтправительКомментарии", ОтправительКомментарии);
	ИнформацияОбОтправителе.Вставить("ОтправительФИО", ОтправительФИО);
	ИнформацияОбОтправителе.Вставить("ОтправительОрганизация", ОтправительОрганизация);
	ИнформацияОбОтправителе.Вставить("ОтправительТелефон", ОтправительТелефон);
	
	ПараметрыЗаявки = Новый Структура();
	ПараметрыЗаявки.Вставить("ВариантВзаимодействияСИжТиСи", ВариантВзаимодействия);
	ПараметрыЗаявки.Вставить("ИнформацияОбОтправителе", ИнформацияОбОтправителе);
	ПараметрыЗаявки.Вставить("ФункцииКорпоративногоРешения", ФункцииКорпоративногоРешения.ВыгрузитьЗначения());
	ПараметрыЗаявки.Вставить("ДанныеКонфигурацииКорпоративногоРешения", ДанныеКонфигурацииКорпоративногоРешения());
	
	ОтправитьЗаявку(ПараметрыЗаявки, "ИжТиСиКорпоративноеРешение");

КонецФункции // ОтправитьЗаявкуКорпоративноеРешение()

#КонецОбласти


#КонецОбласти
